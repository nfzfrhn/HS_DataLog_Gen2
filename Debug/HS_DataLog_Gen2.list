
HS_DataLog_Gen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000231ac  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000111c  08023370  08023370  00033370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802448c  0802448c  0004048c  2**0
                  CONTENTS
  4 .ARM          00000000  0802448c  0802448c  0004048c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802448c  0802448c  0004048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802448c  0802448c  0003448c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024490  08024490  00034490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000048c  20000000  08024494  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0004048c  2**0
                  CONTENTS
 10 .bss          0001cfe0  20000490  20000490  00040490  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2001d470  2001d470  00040490  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004048c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00079aff  00000000  00000000  000404bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ad72  00000000  00000000  000b9fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003e20  00000000  00000000  000c4d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003a30  00000000  00000000  000c8b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000486fd  00000000  00000000  000cc580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00055c1f  00000000  00000000  00114c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e14c  00000000  00000000  0016a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002d89e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011ac8  00000000  00000000  002d8a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000490 	.word	0x20000490
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08023354 	.word	0x08023354

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000494 	.word	0x20000494
 80001fc:	08023354 	.word	0x08023354

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <HSD_JSON_set_allocation_functions>:
* @param  malloc_function: malloc() implementation
* @param  free_function: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_set_allocation_functions(void * (*malloc_function)(size_t), void (*free_function)(void *))
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  json_set_allocation_functions(malloc_function, free_function);
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f01d ff83 	bl	801ec5c <json_set_allocation_functions>
  JSON_free_function = free_function;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HSD_JSON_set_allocation_functions+0x24>)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	6013      	str	r3, [r2, #0]
  return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200004ac 	.word	0x200004ac

08000d6c <HSD_JSON_free>:

int32_t HSD_JSON_free(void * mem)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  JSON_free_function(mem);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HSD_JSON_free+0x1c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	4798      	blx	r3
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200004ac 	.word	0x200004ac

08000d8c <HSD_JSON_serialize_Device>:
* @param  Device: COM_Device_t struct instance to be serialized 
* @param  SerializedJSON: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_serialize_Device(COM_Device_t *Device, char **SerializedJSON, uint8_t pretty)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	4613      	mov	r3, r2
 8000d98:	71fb      	strb	r3, [r7, #7]
  return get_JSON_from_Device(Device, SerializedJSON, pretty);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 f875 	bl	8000e90 <get_JSON_from_Device>
 8000da6:	4603      	mov	r3, r0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HSD_JSON_serialize_DeviceInfo>:

int32_t HSD_JSON_serialize_DeviceInfo(COM_DeviceDescriptor_t *DeviceInfo, char **SerializedJSON)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  return get_JSON_from_DeviceInfo(DeviceInfo, SerializedJSON);
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f8e1 	bl	8000f84 <get_JSON_from_DeviceInfo>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HSD_JSON_serialize_SensorDescriptor>:
{
  return get_JSON_from_Sensor(Sensor, SerializedJSON);
}

int32_t HSD_JSON_serialize_SensorDescriptor(COM_SensorDescriptor_t *SensorDescriptor, char **SerializedJSON)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SensorDescriptor(SensorDescriptor, SerializedJSON);
 8000dd6:	6839      	ldr	r1, [r7, #0]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f8f4 	bl	8000fc6 <get_JSON_from_SensorDescriptor>
 8000dde:	4603      	mov	r3, r0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HSD_JSON_serialize_SensorStatus>:

int32_t HSD_JSON_serialize_SensorStatus(COM_SensorStatus_t *SensorStatus, char **SerializedJSON)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SensorStatus(SensorStatus, SerializedJSON);
 8000df2:	6839      	ldr	r1, [r7, #0]
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f907 	bl	8001008 <get_JSON_from_SensorStatus>
 8000dfa:	4603      	mov	r3, r0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HSD_JSON_serialize_SubSensorDescriptor>:

int32_t HSD_JSON_serialize_SubSensorDescriptor(COM_SubSensorDescriptor_t *SubSensorDescriptor, char **SerializedJSON)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SubSensorDescriptor(SubSensorDescriptor, SerializedJSON);
 8000e0e:	6839      	ldr	r1, [r7, #0]
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f91a 	bl	800104a <get_JSON_from_SubSensorDescriptor>
 8000e16:	4603      	mov	r3, r0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HSD_JSON_serialize_SubSensorStatus>:

int32_t HSD_JSON_serialize_SubSensorStatus(COM_SubSensorStatus_t *SubSensorStatus, char **SerializedJSON)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SubSensorStatus(SubSensorStatus, SerializedJSON);
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f92d 	bl	800108c <get_JSON_from_SubSensorStatus>
 8000e32:	4603      	mov	r3, r0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HSD_JSON_parse_Device>:

int32_t HSD_JSON_parse_Device(char *SerializedJSON, COM_Device_t *Device)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  return parse_Device_from_JSON(SerializedJSON, Device);
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 f941 	bl	80010d0 <parse_Device_from_JSON>
 8000e4e:	4603      	mov	r3, r0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HSD_JSON_parse_Command>:

int32_t HSD_JSON_parse_Command(char *SerializedJSON, COM_Command_t *Command)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  return parse_Command_from_JSON(SerializedJSON, Command);
 8000e62:	6839      	ldr	r1, [r7, #0]
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f987 	bl	8001178 <parse_Command_from_JSON>
 8000e6a:	4603      	mov	r3, r0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HSD_JSON_parse_Status>:

int32_t HSD_JSON_parse_Status(char *SerializedJSON, COM_SensorStatus_t *SensorStatus)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  return parse_Status_from_JSON(SerializedJSON, SensorStatus);
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 fa75 	bl	8001370 <parse_Status_from_JSON>
 8000e86:	4603      	mov	r3, r0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <get_JSON_from_Device>:


/* Private function ----------------------------------------------------------*/
static int32_t get_JSON_from_Device(COM_Device_t *device, char **serialized_string, uint8_t pretty)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	71fb      	strb	r3, [r7, #7]
  JSON_Object *JSON_Device;
  JSON_Array *JSON_SensorArray;
  uint32_t size;
  uint32_t i;
  
  tempJSON = json_value_init_object();
 8000e9e:	f01d fb35 	bl	801e50c <json_value_init_object>
 8000ea2:	61f8      	str	r0, [r7, #28]
  JSON_Device = json_value_get_object(tempJSON);
 8000ea4:	69f8      	ldr	r0, [r7, #28]
 8000ea6:	f01d fa9e 	bl	801e3e6 <json_value_get_object>
 8000eaa:	61b8      	str	r0, [r7, #24]
  
  json_object_dotset_string(JSON_Device, "device.deviceInfo.serialNumber", device->deviceDescriptor.serialNumber);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4930      	ldr	r1, [pc, #192]	; (8000f74 <get_JSON_from_Device+0xe4>)
 8000eb2:	69b8      	ldr	r0, [r7, #24]
 8000eb4:	f01d fe64 	bl	801eb80 <json_object_dotset_string>
  json_object_dotset_string(JSON_Device, "device.deviceInfo.alias", device->deviceDescriptor.alias);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3315      	adds	r3, #21
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	492e      	ldr	r1, [pc, #184]	; (8000f78 <get_JSON_from_Device+0xe8>)
 8000ec0:	69b8      	ldr	r0, [r7, #24]
 8000ec2:	f01d fe5d 	bl	801eb80 <json_object_dotset_string>
  json_object_dotset_number(JSON_Device, "device.deviceInfo.nSensor", device->deviceDescriptor.nSensor);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb42 	bl	8000554 <__aeabi_ui2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	ec43 2b10 	vmov	d0, r2, r3
 8000ed8:	4928      	ldr	r1, [pc, #160]	; (8000f7c <get_JSON_from_Device+0xec>)
 8000eda:	69b8      	ldr	r0, [r7, #24]
 8000edc:	f01d fe74 	bl	801ebc8 <json_object_dotset_number>
  
  json_object_dotset_value(JSON_Device, "device.sensor", json_value_init_array());
 8000ee0:	f01d fb40 	bl	801e564 <json_value_init_array>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4925      	ldr	r1, [pc, #148]	; (8000f80 <get_JSON_from_Device+0xf0>)
 8000eea:	69b8      	ldr	r0, [r7, #24]
 8000eec:	f01d fdbb 	bl	801ea66 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_Device, "device.sensor");
 8000ef0:	4923      	ldr	r1, [pc, #140]	; (8000f80 <get_JSON_from_Device+0xf0>)
 8000ef2:	69b8      	ldr	r0, [r7, #24]
 8000ef4:	f01d f9ac 	bl	801e250 <json_object_dotget_array>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
 8000efe:	e013      	b.n	8000f28 <get_JSON_from_Device+0x98>
  {        
    tempJSON1 = json_value_init_object();  
 8000f00:	f01d fb04 	bl	801e50c <json_value_init_object>
 8000f04:	6138      	str	r0, [r7, #16]
    create_JSON_Sensor(device->sensors[i], tempJSON1);    
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	330a      	adds	r3, #10
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	6939      	ldr	r1, [r7, #16]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fb9d 	bl	8001654 <create_JSON_Sensor>
    json_array_append_value(JSON_SensorArray,tempJSON1);
 8000f1a:	6939      	ldr	r1, [r7, #16]
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	f01d fd0d 	bl	801e93c <json_array_append_value>
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	3301      	adds	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	6a3a      	ldr	r2, [r7, #32]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3e6      	bcc.n	8000f00 <get_JSON_from_Device+0x70>
  }  
  
  /* convert to a json string and write to file */
  if (pretty == 1)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d10a      	bne.n	8000f4e <get_JSON_from_Device+0xbe>
  {
    *serialized_string = json_serialize_to_string_pretty(tempJSON);
 8000f38:	69f8      	ldr	r0, [r7, #28]
 8000f3a:	f01d fcbf 	bl	801e8bc <json_serialize_to_string_pretty>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	601a      	str	r2, [r3, #0]
    size = json_serialization_size_pretty(tempJSON);    
 8000f44:	69f8      	ldr	r0, [r7, #28]
 8000f46:	f01d fc75 	bl	801e834 <json_serialization_size_pretty>
 8000f4a:	6278      	str	r0, [r7, #36]	; 0x24
 8000f4c:	e009      	b.n	8000f62 <get_JSON_from_Device+0xd2>
  }
  else
  {
    *serialized_string = json_serialize_to_string(tempJSON);
 8000f4e:	69f8      	ldr	r0, [r7, #28]
 8000f50:	f01d fc3e 	bl	801e7d0 <json_serialize_to_string>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	601a      	str	r2, [r3, #0]
    size = json_serialization_size(tempJSON);    
 8000f5a:	69f8      	ldr	r0, [r7, #28]
 8000f5c:	f01d fbf4 	bl	801e748 <json_serialization_size>
 8000f60:	6278      	str	r0, [r7, #36]	; 0x24
  }
  
  json_value_free(tempJSON);
 8000f62:	69f8      	ldr	r0, [r7, #28]
 8000f64:	f01d faa4 	bl	801e4b0 <json_value_free>
  
  return size;    
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	08023370 	.word	0x08023370
 8000f78:	08023390 	.word	0x08023390
 8000f7c:	080233a8 	.word	0x080233a8
 8000f80:	080233c4 	.word	0x080233c4

08000f84 <get_JSON_from_DeviceInfo>:


static int32_t get_JSON_from_DeviceInfo(COM_DeviceDescriptor_t *device_descriptor, char **serialized_string)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8000f92:	f01d fabb 	bl	801e50c <json_value_init_object>
 8000f96:	60b8      	str	r0, [r7, #8]
  create_JSON_DeviceInfo(device_descriptor, tempJSON);
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 fb2c 	bl	80015f8 <create_JSON_DeviceInfo>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f01d fc15 	bl	801e7d0 <json_serialize_to_string>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f01d fbcb 	bl	801e748 <json_serialization_size>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 8000fb6:	68b8      	ldr	r0, [r7, #8]
 8000fb8:	f01d fa7a 	bl	801e4b0 <json_value_free>
  
  return size;    
 8000fbc:	68fb      	ldr	r3, [r7, #12]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <get_JSON_from_SensorDescriptor>:
  return size;     
}


static int32_t get_JSON_from_SensorDescriptor(COM_SensorDescriptor_t *sensor_descriptor, char **serialized_string)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8000fd4:	f01d fa9a 	bl	801e50c <json_value_init_object>
 8000fd8:	60b8      	str	r0, [r7, #8]
  create_JSON_SensorDescriptor(sensor_descriptor, tempJSON);
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fbdd 	bl	800179c <create_JSON_SensorDescriptor>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8000fe2:	68b8      	ldr	r0, [r7, #8]
 8000fe4:	f01d fbf4 	bl	801e7d0 <json_serialize_to_string>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8000fee:	68b8      	ldr	r0, [r7, #8]
 8000ff0:	f01d fbaa 	bl	801e748 <json_serialization_size>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f01d fa59 	bl	801e4b0 <json_value_free>
  
  return size;    
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <get_JSON_from_SensorStatus>:


static int32_t get_JSON_from_SensorStatus(COM_SensorStatus_t *sensor_status, char **serialized_string)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8001016:	f01d fa79 	bl	801e50c <json_value_init_object>
 800101a:	60b8      	str	r0, [r7, #8]
  create_JSON_SensorStatus(sensor_status, tempJSON);
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 fcb4 	bl	800198c <create_JSON_SensorStatus>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8001024:	68b8      	ldr	r0, [r7, #8]
 8001026:	f01d fbd3 	bl	801e7d0 <json_serialize_to_string>
 800102a:	4602      	mov	r2, r0
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8001030:	68b8      	ldr	r0, [r7, #8]
 8001032:	f01d fb89 	bl	801e748 <json_serialization_size>
 8001036:	4603      	mov	r3, r0
 8001038:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 800103a:	68b8      	ldr	r0, [r7, #8]
 800103c:	f01d fa38 	bl	801e4b0 <json_value_free>
  
  return size;  
 8001040:	68fb      	ldr	r3, [r7, #12]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <get_JSON_from_SubSensorDescriptor>:


static int32_t get_JSON_from_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, char **serialized_string)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8001058:	f01d fa58 	bl	801e50c <json_value_init_object>
 800105c:	60b8      	str	r0, [r7, #8]
  create_JSON_SubSensorDescriptor(sub_sensor_descriptor, tempJSON);
 800105e:	68b9      	ldr	r1, [r7, #8]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fd13 	bl	8001a8c <create_JSON_SubSensorDescriptor>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8001066:	68b8      	ldr	r0, [r7, #8]
 8001068:	f01d fbb2 	bl	801e7d0 <json_serialize_to_string>
 800106c:	4602      	mov	r2, r0
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8001072:	68b8      	ldr	r0, [r7, #8]
 8001074:	f01d fb68 	bl	801e748 <json_serialization_size>
 8001078:	4603      	mov	r3, r0
 800107a:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f01d fa17 	bl	801e4b0 <json_value_free>
  
  return size;  
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <get_JSON_from_SubSensorStatus>:


static int32_t get_JSON_from_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, char **serialized_string)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 800109a:	f01d fa37 	bl	801e50c <json_value_init_object>
 800109e:	60b8      	str	r0, [r7, #8]
  create_JSON_SubSensorStatus(sub_sensor_status, tempJSON);
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fdbc 	bl	8001c20 <create_JSON_SubSensorStatus>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f01d fb91 	bl	801e7d0 <json_serialize_to_string>
 80010ae:	4602      	mov	r2, r0
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 80010b4:	68b8      	ldr	r0, [r7, #8]
 80010b6:	f01d fb47 	bl	801e748 <json_serialization_size>
 80010ba:	4603      	mov	r3, r0
 80010bc:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 80010be:	68b8      	ldr	r0, [r7, #8]
 80010c0:	f01d f9f6 	bl	801e4b0 <json_value_free>
  
  return size;
 80010c4:	68fb      	ldr	r3, [r7, #12]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <parse_Device_from_JSON>:


static int32_t parse_Device_from_JSON(char *SerializedJSON, COM_Device_t* Device)
{  
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  char *StatusText;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f01d f824 	bl	801e128 <json_parse_string>
 80010e0:	6238      	str	r0, [r7, #32]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80010e2:	6a38      	ldr	r0, [r7, #32]
 80010e4:	f01d f97f 	bl	801e3e6 <json_value_get_object>
 80010e8:	61f8      	str	r0, [r7, #28]
  
  if (json_object_dothas_value(JSON_ParseHandler,"device.sensor"))
 80010ea:	4921      	ldr	r1, [pc, #132]	; (8001170 <parse_Device_from_JSON+0xa0>)
 80010ec:	69f8      	ldr	r0, [r7, #28]
 80010ee:	f01d f90b 	bl	801e308 <json_object_dothas_value>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d033      	beq.n	8001160 <parse_Device_from_JSON+0x90>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "device.sensor");    
 80010f8:	491d      	ldr	r1, [pc, #116]	; (8001170 <parse_Device_from_JSON+0xa0>)
 80010fa:	69f8      	ldr	r0, [r7, #28]
 80010fc:	f01d f8a8 	bl	801e250 <json_object_dotget_array>
 8001100:	61b8      	str	r0, [r7, #24]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 8001102:	69b8      	ldr	r0, [r7, #24]
 8001104:	f01d f940 	bl	801e388 <json_array_get_count>
 8001108:	6178      	str	r0, [r7, #20]
    
    for (ii = 0; ii < size; ii++)
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	e023      	b.n	8001158 <parse_Device_from_JSON+0x88>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);
 8001110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001112:	69b8      	ldr	r0, [r7, #24]
 8001114:	f01d f926 	bl	801e364 <json_array_get_object>
 8001118:	6138      	str	r0, [r7, #16]
      if (json_object_dothas_value(JSON_subSensorObj,"sensorStatus"))
 800111a:	4916      	ldr	r1, [pc, #88]	; (8001174 <parse_Device_from_JSON+0xa4>)
 800111c:	6938      	ldr	r0, [r7, #16]
 800111e:	f01d f8f3 	bl	801e308 <json_object_dothas_value>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d014      	beq.n	8001152 <parse_Device_from_JSON+0x82>
      {
        StatusText = json_serialize_to_string(json_object_get_value(JSON_subSensorObj,"sensorStatus"));
 8001128:	4912      	ldr	r1, [pc, #72]	; (8001174 <parse_Device_from_JSON+0xa4>)
 800112a:	6938      	ldr	r0, [r7, #16]
 800112c:	f01d f820 	bl	801e170 <json_object_get_value>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	f01d fb4c 	bl	801e7d0 <json_serialize_to_string>
 8001138:	60f8      	str	r0, [r7, #12]
        parse_Status_from_JSON(StatusText, &Device->sensors[ii]->sensorStatus);
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	330a      	adds	r3, #10
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800114a:	4619      	mov	r1, r3
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 f90f 	bl	8001370 <parse_Status_from_JSON>
    for (ii = 0; ii < size; ii++)
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	3301      	adds	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	429a      	cmp	r2, r3
 800115e:	d3d7      	bcc.n	8001110 <parse_Device_from_JSON+0x40>
      }
    }
  }
  
  json_value_free(tempJSON);
 8001160:	6a38      	ldr	r0, [r7, #32]
 8001162:	f01d f9a5 	bl	801e4b0 <json_value_free>
  
  return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	080233c4 	.word	0x080233c4
 8001174:	080233d4 	.word	0x080233d4

08001178 <parse_Command_from_JSON>:

static int32_t parse_Command_from_JSON(char *SerializedJSON, COM_Command_t * outCommand)
{  
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f01c ffd0 	bl	801e128 <json_parse_string>
 8001188:	60f8      	str	r0, [r7, #12]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f01d f92b 	bl	801e3e6 <json_value_get_object>
 8001190:	60b8      	str	r0, [r7, #8]
  
  if (json_object_dothas_value(JSON_ParseHandler,"command"))
 8001192:	496b      	ldr	r1, [pc, #428]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 8001194:	68b8      	ldr	r0, [r7, #8]
 8001196:	f01d f8b7 	bl	801e308 <json_object_dothas_value>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d043      	beq.n	8001228 <parse_Command_from_JSON+0xb0>
  {
    if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"GET") == 0)
 80011a0:	4967      	ldr	r1, [pc, #412]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f01d f82a 	bl	801e1fc <json_object_dotget_string>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4966      	ldr	r1, [pc, #408]	; (8001344 <parse_Command_from_JSON+0x1cc>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f827 	bl	8000200 <strcmp>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <parse_Command_from_JSON+0x48>
    {
      outCommand->command = COM_COMMAND_GET;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e036      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SET") == 0)
 80011c0:	495f      	ldr	r1, [pc, #380]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 80011c2:	68b8      	ldr	r0, [r7, #8]
 80011c4:	f01d f81a 	bl	801e1fc <json_object_dotget_string>
 80011c8:	4603      	mov	r3, r0
 80011ca:	495f      	ldr	r1, [pc, #380]	; (8001348 <parse_Command_from_JSON+0x1d0>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f817 	bl	8000200 <strcmp>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d103      	bne.n	80011e0 <parse_Command_from_JSON+0x68>
    {
      outCommand->command = COM_COMMAND_SET;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e026      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"START") == 0)
 80011e0:	4957      	ldr	r1, [pc, #348]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 80011e2:	68b8      	ldr	r0, [r7, #8]
 80011e4:	f01d f80a 	bl	801e1fc <json_object_dotget_string>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4958      	ldr	r1, [pc, #352]	; (800134c <parse_Command_from_JSON+0x1d4>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f807 	bl	8000200 <strcmp>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d103      	bne.n	8001200 <parse_Command_from_JSON+0x88>
    {
      outCommand->command = COM_COMMAND_START;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2202      	movs	r2, #2
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e016      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"STOP") == 0)
 8001200:	494f      	ldr	r1, [pc, #316]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f01c fffa 	bl	801e1fc <json_object_dotget_string>
 8001208:	4603      	mov	r3, r0
 800120a:	4951      	ldr	r1, [pc, #324]	; (8001350 <parse_Command_from_JSON+0x1d8>)
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe fff7 	bl	8000200 <strcmp>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d103      	bne.n	8001220 <parse_Command_from_JSON+0xa8>
    {
      outCommand->command = COM_COMMAND_STOP;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2203      	movs	r2, #3
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e006      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else
    {
      outCommand->command = COM_COMMAND_ERROR;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e002      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
  }
  else
  {
    return COM_COMMAND_ERROR;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	e083      	b.n	8001336 <parse_Command_from_JSON+0x1be>
  }
  
  if (json_object_dothas_value(JSON_ParseHandler,"request"))
 800122e:	4949      	ldr	r1, [pc, #292]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 8001230:	68b8      	ldr	r0, [r7, #8]
 8001232:	f01d f869 	bl	801e308 <json_object_dothas_value>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d043      	beq.n	80012c4 <parse_Command_from_JSON+0x14c>
  {
    if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"device") == 0)
 800123c:	4945      	ldr	r1, [pc, #276]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800123e:	68b8      	ldr	r0, [r7, #8]
 8001240:	f01c ffdc 	bl	801e1fc <json_object_dotget_string>
 8001244:	4603      	mov	r3, r0
 8001246:	4944      	ldr	r1, [pc, #272]	; (8001358 <parse_Command_from_JSON+0x1e0>)
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffd9 	bl	8000200 <strcmp>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <parse_Command_from_JSON+0xe4>
    {
      outCommand->request = COM_REQUEST_DEVICE;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	705a      	strb	r2, [r3, #1]
 800125a:	e036      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"deviceInfo") == 0)
 800125c:	493d      	ldr	r1, [pc, #244]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800125e:	68b8      	ldr	r0, [r7, #8]
 8001260:	f01c ffcc 	bl	801e1fc <json_object_dotget_string>
 8001264:	4603      	mov	r3, r0
 8001266:	493d      	ldr	r1, [pc, #244]	; (800135c <parse_Command_from_JSON+0x1e4>)
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe ffc9 	bl	8000200 <strcmp>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d103      	bne.n	800127c <parse_Command_from_JSON+0x104>
    {
      outCommand->request = COM_REQUEST_DEVICE_INFO;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2201      	movs	r2, #1
 8001278:	705a      	strb	r2, [r3, #1]
 800127a:	e026      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"descriptor") == 0)
 800127c:	4935      	ldr	r1, [pc, #212]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f01c ffbc 	bl	801e1fc <json_object_dotget_string>
 8001284:	4603      	mov	r3, r0
 8001286:	4936      	ldr	r1, [pc, #216]	; (8001360 <parse_Command_from_JSON+0x1e8>)
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ffb9 	bl	8000200 <strcmp>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <parse_Command_from_JSON+0x124>
    {
      outCommand->request = COM_REQUEST_DESCRIPTOR;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2202      	movs	r2, #2
 8001298:	705a      	strb	r2, [r3, #1]
 800129a:	e016      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"status") == 0)
 800129c:	492d      	ldr	r1, [pc, #180]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f01c ffac 	bl	801e1fc <json_object_dotget_string>
 80012a4:	4603      	mov	r3, r0
 80012a6:	492f      	ldr	r1, [pc, #188]	; (8001364 <parse_Command_from_JSON+0x1ec>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7fe ffa9 	bl	8000200 <strcmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <parse_Command_from_JSON+0x144>
    {
      outCommand->request = COM_REQUEST_STATUS;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2203      	movs	r2, #3
 80012b8:	705a      	strb	r2, [r3, #1]
 80012ba:	e006      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else
    {
      outCommand->request = COM_COMMAND_ERROR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	22ff      	movs	r2, #255	; 0xff
 80012c0:	705a      	strb	r2, [r3, #1]
 80012c2:	e002      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
  }
  else
  {
    outCommand->request = COM_COMMAND_ERROR;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	22ff      	movs	r2, #255	; 0xff
 80012c8:	705a      	strb	r2, [r3, #1]
  }  
  
  if (json_object_dothas_value(JSON_ParseHandler,"sensorId"))
 80012ca:	4927      	ldr	r1, [pc, #156]	; (8001368 <parse_Command_from_JSON+0x1f0>)
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f01d f81b 	bl	801e308 <json_object_dothas_value>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00e      	beq.n	80012f6 <parse_Command_from_JSON+0x17e>
  {
    outCommand->sensorId = (int8_t)json_object_dotget_number(JSON_ParseHandler, "sensorId");
 80012d8:	4923      	ldr	r1, [pc, #140]	; (8001368 <parse_Command_from_JSON+0x1f0>)
 80012da:	68b8      	ldr	r0, [r7, #8]
 80012dc:	f01c ffa0 	bl	801e220 <json_object_dotget_number>
 80012e0:	ec53 2b10 	vmov	r2, r3, d0
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc5e 	bl	8000ba8 <__aeabi_d2iz>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b25a      	sxtb	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	709a      	strb	r2, [r3, #2]
 80012f4:	e002      	b.n	80012fc <parse_Command_from_JSON+0x184>
  }
  else
  {
    outCommand->sensorId = COM_COMMAND_ERROR;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	709a      	strb	r2, [r3, #2]
  }    
  
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorId"))
 80012fc:	491b      	ldr	r1, [pc, #108]	; (800136c <parse_Command_from_JSON+0x1f4>)
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f01d f802 	bl	801e308 <json_object_dothas_value>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00e      	beq.n	8001328 <parse_Command_from_JSON+0x1b0>
  {
    outCommand->subSensorId = (int8_t)json_object_dotget_number(JSON_ParseHandler, "subSensorId");
 800130a:	4918      	ldr	r1, [pc, #96]	; (800136c <parse_Command_from_JSON+0x1f4>)
 800130c:	68b8      	ldr	r0, [r7, #8]
 800130e:	f01c ff87 	bl	801e220 <json_object_dotget_number>
 8001312:	ec53 2b10 	vmov	r2, r3, d0
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fc45 	bl	8000ba8 <__aeabi_d2iz>
 800131e:	4603      	mov	r3, r0
 8001320:	b25a      	sxtb	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	70da      	strb	r2, [r3, #3]
 8001326:	e002      	b.n	800132e <parse_Command_from_JSON+0x1b6>
  }
  else
  {
    outCommand->subSensorId = COM_COMMAND_ERROR;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	22ff      	movs	r2, #255	; 0xff
 800132c:	70da      	strb	r2, [r3, #3]
  }   
  
  json_value_free(tempJSON);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f01d f8be 	bl	801e4b0 <json_value_free>
  
  return 0;  
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	080233e4 	.word	0x080233e4
 8001344:	080233ec 	.word	0x080233ec
 8001348:	080233f0 	.word	0x080233f0
 800134c:	080233f4 	.word	0x080233f4
 8001350:	080233fc 	.word	0x080233fc
 8001354:	08023404 	.word	0x08023404
 8001358:	0802340c 	.word	0x0802340c
 800135c:	08023414 	.word	0x08023414
 8001360:	08023420 	.word	0x08023420
 8001364:	0802342c 	.word	0x0802342c
 8001368:	08023434 	.word	0x08023434
 800136c:	08023440 	.word	0x08023440

08001370 <parse_Status_from_JSON>:
volatile  int8_t subid = -1;
static int32_t parse_Status_from_JSON(char *SerializedJSON, COM_SensorStatus_t * sensorStatus)
{  
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f01c fed4 	bl	801e128 <json_parse_string>
 8001380:	61b8      	str	r0, [r7, #24]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8001382:	69b8      	ldr	r0, [r7, #24]
 8001384:	f01d f82f 	bl	801e3e6 <json_value_get_object>
 8001388:	6178      	str	r0, [r7, #20]
  
  if (json_object_dothas_value(JSON_ParseHandler,"odr"))
 800138a:	4990      	ldr	r1, [pc, #576]	; (80015cc <parse_Status_from_JSON+0x25c>)
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f01c ffbb 	bl	801e308 <json_object_dothas_value>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00c      	beq.n	80013b2 <parse_Status_from_JSON+0x42>
  {
    sensorStatus->ODR = json_object_dotget_number(JSON_ParseHandler, "odr");
 8001398:	498c      	ldr	r1, [pc, #560]	; (80015cc <parse_Status_from_JSON+0x25c>)
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f01c ff40 	bl	801e220 <json_object_dotget_number>
 80013a0:	ec53 2b10 	vmov	r2, r3, d0
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fc46 	bl	8000c38 <__aeabi_d2f>
 80013ac:	4602      	mov	r2, r0
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	601a      	str	r2, [r3, #0]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"usbDataPacketSize"))
 80013b2:	4987      	ldr	r1, [pc, #540]	; (80015d0 <parse_Status_from_JSON+0x260>)
 80013b4:	6978      	ldr	r0, [r7, #20]
 80013b6:	f01c ffa7 	bl	801e308 <json_object_dothas_value>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00d      	beq.n	80013dc <parse_Status_from_JSON+0x6c>
  {
    sensorStatus->usbDataPacketSize = (uint16_t) json_object_dotget_number(JSON_ParseHandler, "usbDataPacketSize");
 80013c0:	4983      	ldr	r1, [pc, #524]	; (80015d0 <parse_Status_from_JSON+0x260>)
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f01c ff2c 	bl	801e220 <json_object_dotget_number>
 80013c8:	ec53 2b10 	vmov	r2, r3, d0
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fc12 	bl	8000bf8 <__aeabi_d2uiz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	821a      	strh	r2, [r3, #16]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"sdWriteBufferSize"))
 80013dc:	497d      	ldr	r1, [pc, #500]	; (80015d4 <parse_Status_from_JSON+0x264>)
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f01c ff92 	bl	801e308 <json_object_dothas_value>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00c      	beq.n	8001404 <parse_Status_from_JSON+0x94>
  {
    sensorStatus->sdWriteBufferSize = (uint32_t) json_object_dotget_number(JSON_ParseHandler, "sdWriteBufferSize");
 80013ea:	497a      	ldr	r1, [pc, #488]	; (80015d4 <parse_Status_from_JSON+0x264>)
 80013ec:	6978      	ldr	r0, [r7, #20]
 80013ee:	f01c ff17 	bl	801e220 <json_object_dotget_number>
 80013f2:	ec53 2b10 	vmov	r2, r3, d0
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fbfd 	bl	8000bf8 <__aeabi_d2uiz>
 80013fe:	4602      	mov	r2, r0
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	615a      	str	r2, [r3, #20]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"comChannelNumber"))
 8001404:	4974      	ldr	r1, [pc, #464]	; (80015d8 <parse_Status_from_JSON+0x268>)
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f01c ff7e 	bl	801e308 <json_object_dothas_value>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00d      	beq.n	800142e <parse_Status_from_JSON+0xbe>
  {
    sensorStatus->comChannelNumber = (int16_t) json_object_dotget_number(JSON_ParseHandler, "comChannelNumber");
 8001412:	4971      	ldr	r1, [pc, #452]	; (80015d8 <parse_Status_from_JSON+0x268>)
 8001414:	6978      	ldr	r0, [r7, #20]
 8001416:	f01c ff03 	bl	801e220 <json_object_dotget_number>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fbc1 	bl	8000ba8 <__aeabi_d2iz>
 8001426:	4603      	mov	r3, r0
 8001428:	b21a      	sxth	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	831a      	strh	r2, [r3, #24]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"samplesPerTs"))
 800142e:	496b      	ldr	r1, [pc, #428]	; (80015dc <parse_Status_from_JSON+0x26c>)
 8001430:	6978      	ldr	r0, [r7, #20]
 8001432:	f01c ff69 	bl	801e308 <json_object_dothas_value>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00d      	beq.n	8001458 <parse_Status_from_JSON+0xe8>
  {
    sensorStatus->samplesPerTimestamp = (uint16_t)json_object_dotget_number(JSON_ParseHandler, "samplesPerTs");
 800143c:	4967      	ldr	r1, [pc, #412]	; (80015dc <parse_Status_from_JSON+0x26c>)
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f01c feee 	bl	801e220 <json_object_dotget_number>
 8001444:	ec53 2b10 	vmov	r2, r3, d0
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fbd4 	bl	8000bf8 <__aeabi_d2uiz>
 8001450:	4603      	mov	r3, r0
 8001452:	b29a      	uxth	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	819a      	strh	r2, [r3, #12]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"isActive"))
 8001458:	4961      	ldr	r1, [pc, #388]	; (80015e0 <parse_Status_from_JSON+0x270>)
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f01c ff54 	bl	801e308 <json_object_dothas_value>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00d      	beq.n	8001482 <parse_Status_from_JSON+0x112>
  {
    if (json_object_dotget_boolean(JSON_ParseHandler,"isActive") == 1)
 8001466:	495e      	ldr	r1, [pc, #376]	; (80015e0 <parse_Status_from_JSON+0x270>)
 8001468:	6978      	ldr	r0, [r7, #20]
 800146a:	f01c ff03 	bl	801e274 <json_object_dotget_boolean>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d103      	bne.n	800147c <parse_Status_from_JSON+0x10c>
    {
      sensorStatus->isActive = 1;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	739a      	strb	r2, [r3, #14]
 800147a:	e002      	b.n	8001482 <parse_Status_from_JSON+0x112>
    }
    else 
    {
      sensorStatus->isActive = 0;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	739a      	strb	r2, [r3, #14]
    }
  }
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorStatus"))
 8001482:	4958      	ldr	r1, [pc, #352]	; (80015e4 <parse_Status_from_JSON+0x274>)
 8001484:	6978      	ldr	r0, [r7, #20]
 8001486:	f01c ff3f 	bl	801e308 <json_object_dothas_value>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 8094 	beq.w	80015ba <parse_Status_from_JSON+0x24a>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "subSensorStatus");    
 8001492:	4954      	ldr	r1, [pc, #336]	; (80015e4 <parse_Status_from_JSON+0x274>)
 8001494:	6978      	ldr	r0, [r7, #20]
 8001496:	f01c fedb 	bl	801e250 <json_object_dotget_array>
 800149a:	6138      	str	r0, [r7, #16]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 800149c:	6938      	ldr	r0, [r7, #16]
 800149e:	f01c ff73 	bl	801e388 <json_array_get_count>
 80014a2:	60f8      	str	r0, [r7, #12]
    
    for (ii = 0; ii < size; ii++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	e082      	b.n	80015b0 <parse_Status_from_JSON+0x240>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);      
 80014aa:	69f9      	ldr	r1, [r7, #28]
 80014ac:	6938      	ldr	r0, [r7, #16]
 80014ae:	f01c ff59 	bl	801e364 <json_array_get_object>
 80014b2:	60b8      	str	r0, [r7, #8]
      
      if (json_object_dothas_value(JSON_subSensorObj,"id"))  
 80014b4:	494c      	ldr	r1, [pc, #304]	; (80015e8 <parse_Status_from_JSON+0x278>)
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f01c ff26 	bl	801e308 <json_object_dothas_value>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00e      	beq.n	80014e0 <parse_Status_from_JSON+0x170>
      {
        subid = (int8_t)json_object_dotget_number(JSON_subSensorObj, "id");
 80014c2:	4949      	ldr	r1, [pc, #292]	; (80015e8 <parse_Status_from_JSON+0x278>)
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f01c feab 	bl	801e220 <json_object_dotget_number>
 80014ca:	ec53 2b10 	vmov	r2, r3, d0
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb69 	bl	8000ba8 <__aeabi_d2iz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	4b44      	ldr	r3, [pc, #272]	; (80015ec <parse_Status_from_JSON+0x27c>)
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e003      	b.n	80014e8 <parse_Status_from_JSON+0x178>
      }
      else
      {
        subid = ii;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	4b41      	ldr	r3, [pc, #260]	; (80015ec <parse_Status_from_JSON+0x27c>)
 80014e6:	701a      	strb	r2, [r3, #0]
      }
      
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 80014e8:	4941      	ldr	r1, [pc, #260]	; (80015f0 <parse_Status_from_JSON+0x280>)
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f01c ff0c 	bl	801e308 <json_object_dothas_value>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d014      	beq.n	8001520 <parse_Status_from_JSON+0x1b0>
      {
        sensorStatus->subSensorStatus[subid].FS = json_object_dotget_number(JSON_subSensorObj, "fs");
 80014f6:	493e      	ldr	r1, [pc, #248]	; (80015f0 <parse_Status_from_JSON+0x280>)
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f01c fe91 	bl	801e220 <json_object_dotget_number>
 80014fe:	ec51 0b10 	vmov	r0, r1, d0
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <parse_Status_from_JSON+0x27c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	461c      	mov	r4, r3
 800150a:	f7ff fb95 	bl	8000c38 <__aeabi_d2f>
 800150e:	4601      	mov	r1, r0
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	4623      	mov	r3, r4
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4423      	add	r3, r4
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	331c      	adds	r3, #28
 800151e:	6019      	str	r1, [r3, #0]
      }
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 8001520:	4934      	ldr	r1, [pc, #208]	; (80015f4 <parse_Status_from_JSON+0x284>)
 8001522:	68b8      	ldr	r0, [r7, #8]
 8001524:	f01c fef0 	bl	801e308 <json_object_dothas_value>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d014      	beq.n	8001558 <parse_Status_from_JSON+0x1e8>
      {
        sensorStatus->subSensorStatus[subid].sensitivity = json_object_dotget_number(JSON_subSensorObj, "sensitivity");
 800152e:	4931      	ldr	r1, [pc, #196]	; (80015f4 <parse_Status_from_JSON+0x284>)
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f01c fe75 	bl	801e220 <json_object_dotget_number>
 8001536:	ec51 0b10 	vmov	r0, r1, d0
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <parse_Status_from_JSON+0x27c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b25b      	sxtb	r3, r3
 8001540:	461c      	mov	r4, r3
 8001542:	f7ff fb79 	bl	8000c38 <__aeabi_d2f>
 8001546:	4601      	mov	r1, r0
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	4623      	mov	r3, r4
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4423      	add	r3, r4
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3320      	adds	r3, #32
 8001556:	6019      	str	r1, [r3, #0]
      }      
      if (json_object_dothas_value(JSON_subSensorObj,"isActive"))
 8001558:	4921      	ldr	r1, [pc, #132]	; (80015e0 <parse_Status_from_JSON+0x270>)
 800155a:	68b8      	ldr	r0, [r7, #8]
 800155c:	f01c fed4 	bl	801e308 <json_object_dothas_value>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d021      	beq.n	80015aa <parse_Status_from_JSON+0x23a>
      {
        if (json_object_dotget_boolean(JSON_subSensorObj,"isActive") == 1)
 8001566:	491e      	ldr	r1, [pc, #120]	; (80015e0 <parse_Status_from_JSON+0x270>)
 8001568:	68b8      	ldr	r0, [r7, #8]
 800156a:	f01c fe83 	bl	801e274 <json_object_dotget_boolean>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d10d      	bne.n	8001590 <parse_Status_from_JSON+0x220>
        {
          sensorStatus->subSensorStatus[subid].isActive = 1;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <parse_Status_from_JSON+0x27c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b25b      	sxtb	r3, r3
 800157a:	4619      	mov	r1, r3
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	460b      	mov	r3, r1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	440b      	add	r3, r1
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3324      	adds	r3, #36	; 0x24
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e00c      	b.n	80015aa <parse_Status_from_JSON+0x23a>
        }
        else 
        {
          sensorStatus->subSensorStatus[subid].isActive = 0;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <parse_Status_from_JSON+0x27c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b25b      	sxtb	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	460b      	mov	r3, r1
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	440b      	add	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3324      	adds	r3, #36	; 0x24
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
    for (ii = 0; ii < size; ii++)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f4ff af78 	bcc.w	80014aa <parse_Status_from_JSON+0x13a>
        }
      }
    }
  }  
  json_value_free(tempJSON);
 80015ba:	69b8      	ldr	r0, [r7, #24]
 80015bc:	f01c ff78 	bl	801e4b0 <json_value_free>
  
  return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	0802344c 	.word	0x0802344c
 80015d0:	08023450 	.word	0x08023450
 80015d4:	08023464 	.word	0x08023464
 80015d8:	08023478 	.word	0x08023478
 80015dc:	0802348c 	.word	0x0802348c
 80015e0:	0802349c 	.word	0x0802349c
 80015e4:	080234a8 	.word	0x080234a8
 80015e8:	080234b8 	.word	0x080234b8
 80015ec:	20000000 	.word	0x20000000
 80015f0:	080234bc 	.word	0x080234bc
 80015f4:	080234c0 	.word	0x080234c0

080015f8 <create_JSON_DeviceInfo>:

static void create_JSON_DeviceInfo(COM_DeviceDescriptor_t *device_descriptor, JSON_Value *tempJSON)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_DeviceHandler = json_value_get_object(tempJSON);
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f01c feef 	bl	801e3e6 <json_value_get_object>
 8001608:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_string(JSON_DeviceHandler, "serialNumber", device_descriptor->serialNumber);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	461a      	mov	r2, r3
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <create_JSON_DeviceInfo+0x50>)
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f01d fab5 	bl	801eb80 <json_object_dotset_string>
  json_object_dotset_string(JSON_DeviceHandler, "alias", device_descriptor->alias);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3315      	adds	r3, #21
 800161a:	461a      	mov	r2, r3
 800161c:	490b      	ldr	r1, [pc, #44]	; (800164c <create_JSON_DeviceInfo+0x54>)
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f01d faae 	bl	801eb80 <json_object_dotset_string>
  json_object_dotset_number(JSON_DeviceHandler, "nSensor", device_descriptor->nSensor);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff93 	bl	8000554 <__aeabi_ui2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	ec43 2b10 	vmov	d0, r2, r3
 8001636:	4906      	ldr	r1, [pc, #24]	; (8001650 <create_JSON_DeviceInfo+0x58>)
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f01d fac5 	bl	801ebc8 <json_object_dotset_number>
  
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	080234cc 	.word	0x080234cc
 800164c:	080234dc 	.word	0x080234dc
 8001650:	080234e4 	.word	0x080234e4

08001654 <create_JSON_Sensor>:


static void create_JSON_Sensor(COM_Sensor_t *sensor, JSON_Value *tempJSON)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON1;
  JSON_Value *tempJSON2;
  JSON_Array *JSON_SensorArray1;
  JSON_Array *JSON_SensorArray2;
  uint32_t ii = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t nSubSensors = sensor->sensorDescriptor.nSubSensors; 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t nSensor = sensor->sensorDescriptor.id;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  
  JSON_Object *JSON_Sensor = json_value_get_object(tempJSON);
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f01c feb6 	bl	801e3e6 <json_value_get_object>
 800167a:	6278      	str	r0, [r7, #36]	; 0x24
  
  json_object_dotset_number(JSON_Sensor, "id", nSensor);
 800167c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff67 	bl	8000554 <__aeabi_ui2d>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	ec43 2b10 	vmov	d0, r2, r3
 800168e:	493e      	ldr	r1, [pc, #248]	; (8001788 <create_JSON_Sensor+0x134>)
 8001690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001692:	f01d fa99 	bl	801ebc8 <json_object_dotset_number>
  
  JSON_Value *DescriptorJSON = json_value_init_object();
 8001696:	f01c ff39 	bl	801e50c <json_value_init_object>
 800169a:	6238      	str	r0, [r7, #32]
  json_object_set_value(JSON_Sensor, "sensorDescriptor", DescriptorJSON);
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	493b      	ldr	r1, [pc, #236]	; (800178c <create_JSON_Sensor+0x138>)
 80016a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016a2:	f01d f98a 	bl	801e9ba <json_object_set_value>
  create_JSON_SensorDescriptor(&sensor->sensorDescriptor, DescriptorJSON); 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a39      	ldr	r1, [r7, #32]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f876 	bl	800179c <create_JSON_SensorDescriptor>
  
  json_object_dotset_value(JSON_Sensor, "sensorDescriptor.subSensorDescriptor", json_value_init_array());
 80016b0:	f01c ff58 	bl	801e564 <json_value_init_array>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4935      	ldr	r1, [pc, #212]	; (8001790 <create_JSON_Sensor+0x13c>)
 80016ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016bc:	f01d f9d3 	bl	801ea66 <json_object_dotset_value>
  
  JSON_SensorArray1 = json_object_dotget_array(JSON_Sensor, "sensorDescriptor.subSensorDescriptor"); 
 80016c0:	4933      	ldr	r1, [pc, #204]	; (8001790 <create_JSON_Sensor+0x13c>)
 80016c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016c4:	f01c fdc4 	bl	801e250 <json_object_dotget_array>
 80016c8:	61f8      	str	r0, [r7, #28]
  for (ii = 0; ii < nSubSensors; ii++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ce:	e015      	b.n	80016fc <create_JSON_Sensor+0xa8>
  {
    tempJSON1 = json_value_init_object();  
 80016d0:	f01c ff1c 	bl	801e50c <json_value_init_object>
 80016d4:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor->sensorDescriptor.subSensorDescriptor[ii], tempJSON1);  
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	2254      	movs	r2, #84	; 0x54
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	3358      	adds	r3, #88	; 0x58
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	3304      	adds	r3, #4
 80016e6:	68f9      	ldr	r1, [r7, #12]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f9cf 	bl	8001a8c <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	69f8      	ldr	r0, [r7, #28]
 80016f2:	f01d f923 	bl	801e93c <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	3301      	adds	r3, #1
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001702:	429a      	cmp	r2, r3
 8001704:	d3e4      	bcc.n	80016d0 <create_JSON_Sensor+0x7c>
  }
  
  JSON_Value *statusJSON = json_value_init_object();
 8001706:	f01c ff01 	bl	801e50c <json_value_init_object>
 800170a:	61b8      	str	r0, [r7, #24]
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4921      	ldr	r1, [pc, #132]	; (8001794 <create_JSON_Sensor+0x140>)
 8001710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001712:	f01d f952 	bl	801e9ba <json_object_set_value>
  create_JSON_SensorStatus(&sensor->sensorStatus, statusJSON); 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800171c:	69b9      	ldr	r1, [r7, #24]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f934 	bl	800198c <create_JSON_SensorStatus>
  
  json_object_dotset_value(JSON_Sensor, "sensorStatus.subSensorStatus", json_value_init_array());
 8001724:	f01c ff1e 	bl	801e564 <json_value_init_array>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	491a      	ldr	r1, [pc, #104]	; (8001798 <create_JSON_Sensor+0x144>)
 800172e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001730:	f01d f999 	bl	801ea66 <json_object_dotset_value>
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 8001734:	4918      	ldr	r1, [pc, #96]	; (8001798 <create_JSON_Sensor+0x144>)
 8001736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001738:	f01c fd8a 	bl	801e250 <json_object_dotget_array>
 800173c:	6178      	str	r0, [r7, #20]
  for (ii = 0; ii < nSubSensors; ii++)
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001742:	e017      	b.n	8001774 <create_JSON_Sensor+0x120>
  {
    tempJSON2 = json_value_init_object();  
 8001744:	f01c fee2 	bl	801e50c <json_value_init_object>
 8001748:	6138      	str	r0, [r7, #16]
    create_JSON_SubSensorStatus(&sensor->sensorStatus.subSensorStatus[ii], tempJSON2);    
 800174a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	3308      	adds	r3, #8
 800175e:	6939      	ldr	r1, [r7, #16]
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fa5d 	bl	8001c20 <create_JSON_SubSensorStatus>
    json_array_append_value(JSON_SensorArray2,tempJSON2);
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	f01d f8e7 	bl	801e93c <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	3301      	adds	r3, #1
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001774:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177a:	429a      	cmp	r2, r3
 800177c:	d3e2      	bcc.n	8001744 <create_JSON_Sensor+0xf0>
  }
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	080234b8 	.word	0x080234b8
 800178c:	080234ec 	.word	0x080234ec
 8001790:	08023500 	.word	0x08023500
 8001794:	080233d4 	.word	0x080233d4
 8001798:	08023528 	.word	0x08023528

0800179c <create_JSON_SensorDescriptor>:


static void create_JSON_SensorDescriptor(COM_SensorDescriptor_t *sensor_descriptor, JSON_Value *tempJSON)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  
  JSON_Object *JSON_SensorDescriptor = json_value_get_object(tempJSON);
 80017aa:	6838      	ldr	r0, [r7, #0]
 80017ac:	f01c fe1b 	bl	801e3e6 <json_value_get_object>
 80017b0:	61b8      	str	r0, [r7, #24]
  JSON_Array *JSON_SensorArray1;
  JSON_Value *tempJSON1;
  
  json_object_dotset_string(JSON_SensorDescriptor, "name", sensor_descriptor->name);  
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3301      	adds	r3, #1
 80017b6:	461a      	mov	r2, r3
 80017b8:	4965      	ldr	r1, [pc, #404]	; (8001950 <create_JSON_SensorDescriptor+0x1b4>)
 80017ba:	69b8      	ldr	r0, [r7, #24]
 80017bc:	f01d f9e0 	bl	801eb80 <json_object_dotset_string>
  
  switch (sensor_descriptor->dataType)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7c5b      	ldrb	r3, [r3, #17]
 80017c4:	2b06      	cmp	r3, #6
 80017c6:	d83b      	bhi.n	8001840 <create_JSON_SensorDescriptor+0xa4>
 80017c8:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <create_JSON_SensorDescriptor+0x34>)
 80017ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ce:	bf00      	nop
 80017d0:	080017ed 	.word	0x080017ed
 80017d4:	080017f9 	.word	0x080017f9
 80017d8:	08001805 	.word	0x08001805
 80017dc:	08001811 	.word	0x08001811
 80017e0:	0800181d 	.word	0x0800181d
 80017e4:	08001829 	.word	0x08001829
 80017e8:	08001835 	.word	0x08001835
  {
  case DATA_TYPE_UINT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint8_t");
 80017ec:	4a59      	ldr	r2, [pc, #356]	; (8001954 <create_JSON_SensorDescriptor+0x1b8>)
 80017ee:	495a      	ldr	r1, [pc, #360]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 80017f0:	69b8      	ldr	r0, [r7, #24]
 80017f2:	f01d f9c5 	bl	801eb80 <json_object_dotset_string>
    break;
 80017f6:	e029      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int8_t");
 80017f8:	4a58      	ldr	r2, [pc, #352]	; (800195c <create_JSON_SensorDescriptor+0x1c0>)
 80017fa:	4957      	ldr	r1, [pc, #348]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 80017fc:	69b8      	ldr	r0, [r7, #24]
 80017fe:	f01d f9bf 	bl	801eb80 <json_object_dotset_string>
    break;
 8001802:	e023      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint16_t");
 8001804:	4a56      	ldr	r2, [pc, #344]	; (8001960 <create_JSON_SensorDescriptor+0x1c4>)
 8001806:	4954      	ldr	r1, [pc, #336]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001808:	69b8      	ldr	r0, [r7, #24]
 800180a:	f01d f9b9 	bl	801eb80 <json_object_dotset_string>
    break;
 800180e:	e01d      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int16_t");
 8001810:	4a54      	ldr	r2, [pc, #336]	; (8001964 <create_JSON_SensorDescriptor+0x1c8>)
 8001812:	4951      	ldr	r1, [pc, #324]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001814:	69b8      	ldr	r0, [r7, #24]
 8001816:	f01d f9b3 	bl	801eb80 <json_object_dotset_string>
    break;
 800181a:	e017      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint32_t");
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <create_JSON_SensorDescriptor+0x1cc>)
 800181e:	494e      	ldr	r1, [pc, #312]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001820:	69b8      	ldr	r0, [r7, #24]
 8001822:	f01d f9ad 	bl	801eb80 <json_object_dotset_string>
    break;
 8001826:	e011      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int32_t");
 8001828:	4a50      	ldr	r2, [pc, #320]	; (800196c <create_JSON_SensorDescriptor+0x1d0>)
 800182a:	494b      	ldr	r1, [pc, #300]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 800182c:	69b8      	ldr	r0, [r7, #24]
 800182e:	f01d f9a7 	bl	801eb80 <json_object_dotset_string>
    break;
 8001832:	e00b      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_FLOAT:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "float");
 8001834:	4a4e      	ldr	r2, [pc, #312]	; (8001970 <create_JSON_SensorDescriptor+0x1d4>)
 8001836:	4948      	ldr	r1, [pc, #288]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001838:	69b8      	ldr	r0, [r7, #24]
 800183a:	f01d f9a1 	bl	801eb80 <json_object_dotset_string>
    break;
 800183e:	e005      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  default:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "NA");
 8001840:	4a4c      	ldr	r2, [pc, #304]	; (8001974 <create_JSON_SensorDescriptor+0x1d8>)
 8001842:	4945      	ldr	r1, [pc, #276]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001844:	69b8      	ldr	r0, [r7, #24]
 8001846:	f01d f99b 	bl	801eb80 <json_object_dotset_string>
    break;
 800184a:	bf00      	nop
  }  
  
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.min", sensor_descriptor->samplesPerTimestamp[0]);  
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe7e 	bl	8000554 <__aeabi_ui2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	ec43 2b10 	vmov	d0, r2, r3
 8001860:	4945      	ldr	r1, [pc, #276]	; (8001978 <create_JSON_SensorDescriptor+0x1dc>)
 8001862:	69b8      	ldr	r0, [r7, #24]
 8001864:	f01d f9b0 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.max", sensor_descriptor->samplesPerTimestamp[1]);  
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe70 	bl	8000554 <__aeabi_ui2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	ec43 2b10 	vmov	d0, r2, r3
 800187c:	493f      	ldr	r1, [pc, #252]	; (800197c <create_JSON_SensorDescriptor+0x1e0>)
 800187e:	69b8      	ldr	r0, [r7, #24]
 8001880:	f01d f9a2 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_string(JSON_SensorDescriptor, "samplesPerTs.dataType", "int16_t");  
 8001884:	4a37      	ldr	r2, [pc, #220]	; (8001964 <create_JSON_SensorDescriptor+0x1c8>)
 8001886:	493e      	ldr	r1, [pc, #248]	; (8001980 <create_JSON_SensorDescriptor+0x1e4>)
 8001888:	69b8      	ldr	r0, [r7, #24]
 800188a:	f01d f979 	bl	801eb80 <json_object_dotset_string>
  
  json_object_dotset_value(JSON_SensorDescriptor, "odr.values", json_value_init_array());
 800188e:	f01c fe69 	bl	801e564 <json_value_init_array>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	493b      	ldr	r1, [pc, #236]	; (8001984 <create_JSON_SensorDescriptor+0x1e8>)
 8001898:	69b8      	ldr	r0, [r7, #24]
 800189a:	f01d f8e4 	bl	801ea66 <json_object_dotset_value>
  JSON_Array *JSON_SensorArray = json_object_dotget_array(JSON_SensorDescriptor, "odr.values");
 800189e:	4939      	ldr	r1, [pc, #228]	; (8001984 <create_JSON_SensorDescriptor+0x1e8>)
 80018a0:	69b8      	ldr	r0, [r7, #24]
 80018a2:	f01c fcd5 	bl	801e250 <json_object_dotget_array>
 80018a6:	6178      	str	r0, [r7, #20]
  
  while (sensor_descriptor->ODR[ii] > 0)
 80018a8:	e013      	b.n	80018d2 <create_JSON_SensorDescriptor+0x136>
  {
    json_array_append_number(JSON_SensorArray, sensor_descriptor->ODR[ii]);
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3304      	adds	r3, #4
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3304      	adds	r3, #4
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe6d 	bl	8000598 <__aeabi_f2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	ec43 2b10 	vmov	d0, r2, r3
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f01d f853 	bl	801e972 <json_array_append_number>
    ii++;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3301      	adds	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
  while (sensor_descriptor->ODR[ii] > 0)
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	3304      	adds	r3, #4
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	3304      	adds	r3, #4
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	dcde      	bgt.n	80018aa <create_JSON_SensorDescriptor+0x10e>
  }
  
  json_object_dotset_value(JSON_SensorDescriptor, "subSensorDescriptor", json_value_init_array());  
 80018ec:	f01c fe3a 	bl	801e564 <json_value_init_array>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	4924      	ldr	r1, [pc, #144]	; (8001988 <create_JSON_SensorDescriptor+0x1ec>)
 80018f6:	69b8      	ldr	r0, [r7, #24]
 80018f8:	f01d f8b5 	bl	801ea66 <json_object_dotset_value>
  JSON_SensorArray1 = json_object_dotget_array(JSON_SensorDescriptor, "subSensorDescriptor"); 
 80018fc:	4922      	ldr	r1, [pc, #136]	; (8001988 <create_JSON_SensorDescriptor+0x1ec>)
 80018fe:	69b8      	ldr	r0, [r7, #24]
 8001900:	f01c fca6 	bl	801e250 <json_object_dotget_array>
 8001904:	6138      	str	r0, [r7, #16]
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e015      	b.n	8001938 <create_JSON_SensorDescriptor+0x19c>
  {
    tempJSON1 = json_value_init_object();  
 800190c:	f01c fdfe 	bl	801e50c <json_value_init_object>
 8001910:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor_descriptor->subSensorDescriptor[ii], tempJSON1);  
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	2254      	movs	r2, #84	; 0x54
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	3358      	adds	r3, #88	; 0x58
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	3304      	adds	r3, #4
 8001922:	68f9      	ldr	r1, [r7, #12]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f8b1 	bl	8001a8c <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 800192a:	68f9      	ldr	r1, [r7, #12]
 800192c:	6938      	ldr	r0, [r7, #16]
 800192e:	f01d f805 	bl	801e93c <json_array_append_value>
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800193e:	461a      	mov	r2, r3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4293      	cmp	r3, r2
 8001944:	d3e2      	bcc.n	800190c <create_JSON_SensorDescriptor+0x170>
  }  
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	08023548 	.word	0x08023548
 8001954:	08023550 	.word	0x08023550
 8001958:	08023558 	.word	0x08023558
 800195c:	08023564 	.word	0x08023564
 8001960:	0802356c 	.word	0x0802356c
 8001964:	08023578 	.word	0x08023578
 8001968:	08023580 	.word	0x08023580
 800196c:	0802358c 	.word	0x0802358c
 8001970:	08023594 	.word	0x08023594
 8001974:	0802359c 	.word	0x0802359c
 8001978:	080235a0 	.word	0x080235a0
 800197c:	080235b4 	.word	0x080235b4
 8001980:	080235c8 	.word	0x080235c8
 8001984:	080235e0 	.word	0x080235e0
 8001988:	080235ec 	.word	0x080235ec

0800198c <create_JSON_SensorStatus>:


static void create_JSON_SensorStatus(COM_SensorStatus_t *sensor_status, JSON_Value *tempJSON)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SensorStatus= json_value_get_object(tempJSON);
 8001996:	6838      	ldr	r0, [r7, #0]
 8001998:	f01c fd25 	bl	801e3e6 <json_value_get_object>
 800199c:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SensorStatus, "odr", sensor_status->ODR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdf8 	bl	8000598 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	ec43 2b10 	vmov	d0, r2, r3
 80019b0:	492e      	ldr	r1, [pc, #184]	; (8001a6c <create_JSON_SensorStatus+0xe0>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f01d f908 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "odrMeasured", sensor_status->measuredODR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdeb 	bl	8000598 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b10 	vmov	d0, r2, r3
 80019ca:	4929      	ldr	r1, [pc, #164]	; (8001a70 <create_JSON_SensorStatus+0xe4>)
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f01d f8fb 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "initialOffset", sensor_status->initialOffset);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdde 	bl	8000598 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	ec43 2b10 	vmov	d0, r2, r3
 80019e4:	4923      	ldr	r1, [pc, #140]	; (8001a74 <create_JSON_SensorStatus+0xe8>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f01d f8ee 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SensorStatus, "isActive", sensor_status->isActive);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7b9b      	ldrb	r3, [r3, #14]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4921      	ldr	r1, [pc, #132]	; (8001a78 <create_JSON_SensorStatus+0xec>)
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f01d f90d 	bl	801ec14 <json_object_dotset_boolean>
  json_object_dotset_number(JSON_SensorStatus, "samplesPerTs", sensor_status->samplesPerTimestamp);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	899b      	ldrh	r3, [r3, #12]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fda8 	bl	8000554 <__aeabi_ui2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	ec43 2b10 	vmov	d0, r2, r3
 8001a0c:	491b      	ldr	r1, [pc, #108]	; (8001a7c <create_JSON_SensorStatus+0xf0>)
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f01d f8da 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "usbDataPacketSize", sensor_status->usbDataPacketSize);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	8a1b      	ldrh	r3, [r3, #16]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd9b 	bl	8000554 <__aeabi_ui2d>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	ec43 2b10 	vmov	d0, r2, r3
 8001a26:	4916      	ldr	r1, [pc, #88]	; (8001a80 <create_JSON_SensorStatus+0xf4>)
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f01d f8cd 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "sdWriteBufferSize", sensor_status->sdWriteBufferSize);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd8e 	bl	8000554 <__aeabi_ui2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	ec43 2b10 	vmov	d0, r2, r3
 8001a40:	4910      	ldr	r1, [pc, #64]	; (8001a84 <create_JSON_SensorStatus+0xf8>)
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f01d f8c0 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "comChannelNumber", sensor_status->comChannelNumber);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd90 	bl	8000574 <__aeabi_i2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b10 	vmov	d0, r2, r3
 8001a5c:	490a      	ldr	r1, [pc, #40]	; (8001a88 <create_JSON_SensorStatus+0xfc>)
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f01d f8b2 	bl	801ebc8 <json_object_dotset_number>
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	0802344c 	.word	0x0802344c
 8001a70:	08023600 	.word	0x08023600
 8001a74:	0802360c 	.word	0x0802360c
 8001a78:	0802349c 	.word	0x0802349c
 8001a7c:	0802348c 	.word	0x0802348c
 8001a80:	08023450 	.word	0x08023450
 8001a84:	08023464 	.word	0x08023464
 8001a88:	08023478 	.word	0x08023478

08001a8c <create_JSON_SubSensorDescriptor>:


static void create_JSON_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, JSON_Value *tempJSON)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  
  JSON_Value *tempJSONarray = json_value_init_object();
 8001a9a:	f01c fd37 	bl	801e50c <json_value_init_object>
 8001a9e:	6138      	str	r0, [r7, #16]
  JSON_Array *JSON_SensorArray = json_value_get_array(tempJSONarray);
 8001aa0:	6938      	ldr	r0, [r7, #16]
 8001aa2:	f01c fcb2 	bl	801e40a <json_value_get_array>
 8001aa6:	60f8      	str	r0, [r7, #12]
  JSON_Object *JSON_SubSensorDescriptor= json_value_get_object(tempJSON);
 8001aa8:	6838      	ldr	r0, [r7, #0]
 8001aaa:	f01c fc9c 	bl	801e3e6 <json_value_get_object>
 8001aae:	60b8      	str	r0, [r7, #8]
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "id", sub_sensor_descriptor->id);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd4d 	bl	8000554 <__aeabi_ui2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ec43 2b10 	vmov	d0, r2, r3
 8001ac2:	494a      	ldr	r1, [pc, #296]	; (8001bec <create_JSON_SubSensorDescriptor+0x160>)
 8001ac4:	68b8      	ldr	r0, [r7, #8]
 8001ac6:	f01d f87f 	bl	801ebc8 <json_object_dotset_number>
  
  switch (sub_sensor_descriptor->sensorType)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	2b06      	cmp	r3, #6
 8001ad2:	d83b      	bhi.n	8001b4c <create_JSON_SubSensorDescriptor+0xc0>
 8001ad4:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <create_JSON_SubSensorDescriptor+0x50>)
 8001ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ada:	bf00      	nop
 8001adc:	08001af9 	.word	0x08001af9
 8001ae0:	08001b05 	.word	0x08001b05
 8001ae4:	08001b11 	.word	0x08001b11
 8001ae8:	08001b1d 	.word	0x08001b1d
 8001aec:	08001b29 	.word	0x08001b29
 8001af0:	08001b35 	.word	0x08001b35
 8001af4:	08001b41 	.word	0x08001b41
  {
  case COM_TYPE_ACC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "ACC");
 8001af8:	4a3d      	ldr	r2, [pc, #244]	; (8001bf0 <create_JSON_SubSensorDescriptor+0x164>)
 8001afa:	493e      	ldr	r1, [pc, #248]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001afc:	68b8      	ldr	r0, [r7, #8]
 8001afe:	f01d f83f 	bl	801eb80 <json_object_dotset_string>
    break;
 8001b02:	e029      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MAG:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MAG");
 8001b04:	4a3c      	ldr	r2, [pc, #240]	; (8001bf8 <create_JSON_SubSensorDescriptor+0x16c>)
 8001b06:	493b      	ldr	r1, [pc, #236]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b08:	68b8      	ldr	r0, [r7, #8]
 8001b0a:	f01d f839 	bl	801eb80 <json_object_dotset_string>
    break;
 8001b0e:	e023      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_GYRO:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "GYRO");
 8001b10:	4a3a      	ldr	r2, [pc, #232]	; (8001bfc <create_JSON_SubSensorDescriptor+0x170>)
 8001b12:	4938      	ldr	r1, [pc, #224]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b14:	68b8      	ldr	r0, [r7, #8]
 8001b16:	f01d f833 	bl	801eb80 <json_object_dotset_string>
    break;
 8001b1a:	e01d      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_TEMP:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "TEMP");
 8001b1c:	4a38      	ldr	r2, [pc, #224]	; (8001c00 <create_JSON_SubSensorDescriptor+0x174>)
 8001b1e:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b20:	68b8      	ldr	r0, [r7, #8]
 8001b22:	f01d f82d 	bl	801eb80 <json_object_dotset_string>
    break;
 8001b26:	e017      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_PRESS:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "PRESS");
 8001b28:	4a36      	ldr	r2, [pc, #216]	; (8001c04 <create_JSON_SubSensorDescriptor+0x178>)
 8001b2a:	4932      	ldr	r1, [pc, #200]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b2c:	68b8      	ldr	r0, [r7, #8]
 8001b2e:	f01d f827 	bl	801eb80 <json_object_dotset_string>
    break;
 8001b32:	e011      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_HUM:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "HUM");
 8001b34:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <create_JSON_SubSensorDescriptor+0x17c>)
 8001b36:	492f      	ldr	r1, [pc, #188]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b38:	68b8      	ldr	r0, [r7, #8]
 8001b3a:	f01d f821 	bl	801eb80 <json_object_dotset_string>
    break;
 8001b3e:	e00b      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MIC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MIC");
 8001b40:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <create_JSON_SubSensorDescriptor+0x180>)
 8001b42:	492c      	ldr	r1, [pc, #176]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b44:	68b8      	ldr	r0, [r7, #8]
 8001b46:	f01d f81b 	bl	801eb80 <json_object_dotset_string>
    break;
 8001b4a:	e005      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  default:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "NA");
 8001b4c:	4a30      	ldr	r2, [pc, #192]	; (8001c10 <create_JSON_SubSensorDescriptor+0x184>)
 8001b4e:	4929      	ldr	r1, [pc, #164]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b50:	68b8      	ldr	r0, [r7, #8]
 8001b52:	f01d f815 	bl	801eb80 <json_object_dotset_string>
    break;      
 8001b56:	bf00      	nop
  }
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "dataPerSample", sub_sensor_descriptor->dataPerSample);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	789b      	ldrb	r3, [r3, #2]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcf9 	bl	8000554 <__aeabi_ui2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	ec43 2b10 	vmov	d0, r2, r3
 8001b6a:	492a      	ldr	r1, [pc, #168]	; (8001c14 <create_JSON_SubSensorDescriptor+0x188>)
 8001b6c:	68b8      	ldr	r0, [r7, #8]
 8001b6e:	f01d f82b 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_string(JSON_SubSensorDescriptor, "unit", sub_sensor_descriptor->unit);  
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3303      	adds	r3, #3
 8001b76:	461a      	mov	r2, r3
 8001b78:	4927      	ldr	r1, [pc, #156]	; (8001c18 <create_JSON_SubSensorDescriptor+0x18c>)
 8001b7a:	68b8      	ldr	r0, [r7, #8]
 8001b7c:	f01d f800 	bl	801eb80 <json_object_dotset_string>
  json_object_dotset_value(JSON_SubSensorDescriptor, "fs.values", json_value_init_array());
 8001b80:	f01c fcf0 	bl	801e564 <json_value_init_array>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4924      	ldr	r1, [pc, #144]	; (8001c1c <create_JSON_SubSensorDescriptor+0x190>)
 8001b8a:	68b8      	ldr	r0, [r7, #8]
 8001b8c:	f01c ff6b 	bl	801ea66 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_SubSensorDescriptor, "fs.values");
 8001b90:	4922      	ldr	r1, [pc, #136]	; (8001c1c <create_JSON_SubSensorDescriptor+0x190>)
 8001b92:	68b8      	ldr	r0, [r7, #8]
 8001b94:	f01c fb5c 	bl	801e250 <json_object_dotget_array>
 8001b98:	60f8      	str	r0, [r7, #12]
  
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001b9a:	e013      	b.n	8001bc4 <create_JSON_SubSensorDescriptor+0x138>
  {
    json_array_append_number(JSON_SensorArray, sub_sensor_descriptor->FS[ii]);
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcf4 	bl	8000598 <__aeabi_f2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	ec43 2b10 	vmov	d0, r2, r3
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f01c feda 	bl	801e972 <json_array_append_number>
    ii++;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3304      	adds	r3, #4
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	dcde      	bgt.n	8001b9c <create_JSON_SubSensorDescriptor+0x110>
  }  
  json_value_free(tempJSONarray);
 8001bde:	6938      	ldr	r0, [r7, #16]
 8001be0:	f01c fc66 	bl	801e4b0 <json_value_free>
}
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	080234b8 	.word	0x080234b8
 8001bf0:	0802361c 	.word	0x0802361c
 8001bf4:	08023620 	.word	0x08023620
 8001bf8:	0802362c 	.word	0x0802362c
 8001bfc:	08023630 	.word	0x08023630
 8001c00:	08023638 	.word	0x08023638
 8001c04:	08023640 	.word	0x08023640
 8001c08:	08023648 	.word	0x08023648
 8001c0c:	0802364c 	.word	0x0802364c
 8001c10:	0802359c 	.word	0x0802359c
 8001c14:	08023650 	.word	0x08023650
 8001c18:	08023660 	.word	0x08023660
 8001c1c:	08023668 	.word	0x08023668

08001c20 <create_JSON_SubSensorStatus>:


static void create_JSON_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, JSON_Value *tempJSON)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SubSensorStatus = json_value_get_object(tempJSON);
 8001c2a:	6838      	ldr	r0, [r7, #0]
 8001c2c:	f01c fbdb 	bl	801e3e6 <json_value_get_object>
 8001c30:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SubSensorStatus, "fs", sub_sensor_status->FS);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fcae 	bl	8000598 <__aeabi_f2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	ec43 2b10 	vmov	d0, r2, r3
 8001c44:	490d      	ldr	r1, [pc, #52]	; (8001c7c <create_JSON_SubSensorStatus+0x5c>)
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f01c ffbe 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SubSensorStatus, "sensitivity", sub_sensor_status->sensitivity);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fca1 	bl	8000598 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ec43 2b10 	vmov	d0, r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <create_JSON_SubSensorStatus+0x60>)
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f01c ffb1 	bl	801ebc8 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SubSensorStatus, "isActive", sub_sensor_status->isActive);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7a1b      	ldrb	r3, [r3, #8]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4905      	ldr	r1, [pc, #20]	; (8001c84 <create_JSON_SubSensorStatus+0x64>)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f01c ffd0 	bl	801ec14 <json_object_dotset_boolean>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	080234bc 	.word	0x080234bc
 8001c80:	080234c0 	.word	0x080234c0
 8001c84:	0802349c 	.word	0x0802349c

08001c88 <COM_AddSensor>:
* @brief Add Sensor to Db
* @param None
* @retval Sensor unique sID
*/
int32_t COM_AddSensor(void)
{  
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  uint32_t ii = COM_device.deviceDescriptor.nSensor;
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <COM_AddSensor+0x68>)
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	607b      	str	r3, [r7, #4]
  
  COM_device.sensors[ii] = calloc(1, sizeof(COM_Sensor_t));   
 8001c94:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f01d f8d9 	bl	801ee50 <calloc>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <COM_AddSensor+0x68>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	330a      	adds	r3, #10
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	6059      	str	r1, [r3, #4]
  
  if(COM_device.sensors[ii] == NULL)
 8001cae:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	330a      	adds	r3, #10
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <COM_AddSensor+0x3c>
    return -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e010      	b.n	8001ce6 <COM_AddSensor+0x5e>
  
  COM_device.sensors[ii]->sensorDescriptor.id = ii;
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	330a      	adds	r3, #10
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]
  COM_device.deviceDescriptor.nSensor++;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cde:	6293      	str	r3, [r2, #40]	; 0x28
  return COM_device.deviceDescriptor.nSensor - 1;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <COM_AddSensor+0x68>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	3b01      	subs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200004b0 	.word	0x200004b0

08001cf4 <COM_GetDevice>:
* @brief Get Device Struct
* @param None
* @retval whole device Structure
*/
COM_Device_t * COM_GetDevice(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return (COM_Device_t *)&COM_device;
 8001cf8:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <COM_GetDevice+0x10>)
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	200004b0 	.word	0x200004b0

08001d08 <COM_GetDeviceDescriptor>:
* @brief Get Device Descriptor
* @param None
* @retval Device Descriptor
*/
COM_DeviceDescriptor_t * COM_GetDeviceDescriptor(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (COM_DeviceDescriptor_t *)&(COM_device.deviceDescriptor);
 8001d0c:	4b02      	ldr	r3, [pc, #8]	; (8001d18 <COM_GetDeviceDescriptor+0x10>)
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	200004b0 	.word	0x200004b0

08001d1c <COM_GetSensor>:
* @brief Get Sensor 
* @param None
* @retval Sensor unique sID
*/
COM_Sensor_t * COM_GetSensor(uint8_t sID)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  return COM_device.sensors[sID];
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <COM_GetSensor+0x24>)
 8001d2a:	330a      	adds	r3, #10
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	685b      	ldr	r3, [r3, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200004b0 	.word	0x200004b0

08001d44 <COM_GetSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SensorDescriptor_t * COM_GetSensorDescriptor(uint8_t sID)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorDescriptor);  
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <COM_GetSensorDescriptor+0x24>)
 8001d52:	330a      	adds	r3, #10
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	685b      	ldr	r3, [r3, #4]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	200004b0 	.word	0x200004b0

08001d6c <COM_GetSensorStatus>:
* @brief Get Sensor Status
* @param None
* @retval Sensor unique sID
*/
COM_SensorStatus_t * COM_GetSensorStatus(uint8_t sID)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorStatus);  
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4a06      	ldr	r2, [pc, #24]	; (8001d94 <COM_GetSensorStatus+0x28>)
 8001d7a:	330a      	adds	r3, #10
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200004b0 	.word	0x200004b0

08001d98 <COM_GetSubSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorDescriptor_t * COM_GetSubSensorDescriptor(uint8_t sID, uint8_t ssID)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460a      	mov	r2, r1
 8001da2:	71fb      	strb	r3, [r7, #7]
 8001da4:	4613      	mov	r3, r2
 8001da6:	71bb      	strb	r3, [r7, #6]
    return &(COM_device.sensors[sID]->sensorDescriptor.subSensorDescriptor[ssID]);  
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <COM_GetSubSensorDescriptor+0x38>)
 8001dac:	330a      	adds	r3, #10
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	79bb      	ldrb	r3, [r7, #6]
 8001db6:	2154      	movs	r1, #84	; 0x54
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	3358      	adds	r3, #88	; 0x58
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3304      	adds	r3, #4
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200004b0 	.word	0x200004b0

08001dd4 <COM_GetSubSensorStatus>:
* @brief Get Sensor Status
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorStatus_t * COM_GetSubSensorStatus(uint8_t sID, uint8_t ssID)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460a      	mov	r2, r1
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71bb      	strb	r3, [r7, #6]
    return &(COM_device.sensors[sID]->sensorStatus.subSensorStatus[ssID]);  
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <COM_GetSubSensorStatus+0x3c>)
 8001de8:	330a      	adds	r3, #10
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	79ba      	ldrb	r2, [r7, #6]
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8001dfe:	440b      	add	r3, r1
 8001e00:	3308      	adds	r3, #8
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200004b0 	.word	0x200004b0

08001e14 <COM_GetSubSensorNumber>:
* @brief Get Sensor Status
* @param Sensor unique sID
* @retval number of subsensors
*/
uint8_t COM_GetSubSensorNumber(uint8_t sID)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
    return COM_device.sensors[sID]->sensorDescriptor.nSubSensors;  
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <COM_GetSubSensorNumber+0x28>)
 8001e22:	330a      	adds	r3, #10
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200004b0 	.word	0x200004b0

08001e40 <COM_IsOdrLegal>:
  
  return ret;
}

uint8_t COM_IsOdrLegal(float value, uint8_t sID)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	70fb      	strb	r3, [r7, #3]
  uint16_t i = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	737b      	strb	r3, [r7, #13]
  float * list = COM_device.sensors[sID]->sensorDescriptor.ODR;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <COM_IsOdrLegal+0x74>)
 8001e5a:	330a      	adds	r3, #10
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	3314      	adds	r3, #20
 8001e64:	60bb      	str	r3, [r7, #8]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001e66:	e011      	b.n	8001e8c <COM_IsOdrLegal+0x4c>
  {
    if(list[i] == value)
 8001e68:	89fb      	ldrh	r3, [r7, #14]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	4413      	add	r3, r2
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e78:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e80:	d101      	bne.n	8001e86 <COM_IsOdrLegal+0x46>
      ret = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	737b      	strb	r3, [r7, #13]
    i++;
 8001e86:	89fb      	ldrh	r3, [r7, #14]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	81fb      	strh	r3, [r7, #14]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e9c:	eef4 7a47 	vcmp.f32	s15, s14
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	d1e0      	bne.n	8001e68 <COM_IsOdrLegal+0x28>
  }
  
  return ret;
 8001ea6:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	200004b0 	.word	0x200004b0

08001eb8 <get_unique_id>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


static void get_unique_id(char * id)
{ 
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t deviceserial[3];
  
  deviceserial[0] = *(uint32_t*)DEVICE_ID_REG_1;
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <get_unique_id+0xd4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  deviceserial[1] = *(uint32_t*)DEVICE_ID_REG_2;
 8001ec6:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <get_unique_id+0xd8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	613b      	str	r3, [r7, #16]
  deviceserial[2] = *(uint32_t*)DEVICE_ID_REG_3; 
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <get_unique_id+0xdc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	617b      	str	r3, [r7, #20]
  
  uint16_t y = (deviceserial[0] & 0xFFFF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t x = ((deviceserial[0] >> 16) & 0xFFFF);  
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t waf_num = (deviceserial[1] & 0xFF);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  id[0] = (deviceserial[1]>>8) & 0xFF;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	701a      	strb	r2, [r3, #0]
  id[1] = (deviceserial[1]>>16) & 0xFF;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	0c1a      	lsrs	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
  id[2] = (deviceserial[1]>>24) & 0xFF;  
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	0e1a      	lsrs	r2, r3, #24
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3302      	adds	r3, #2
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
  id[3] = (deviceserial[2]) & 0xFF;
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3303      	adds	r3, #3
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]
  id[4] = (deviceserial[2]>>8) & 0xFF;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	0a1a      	lsrs	r2, r3, #8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
  id[5] = (deviceserial[2]>>16) & 0xFF;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	0c1a      	lsrs	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3305      	adds	r3, #5
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
  id[6] = (deviceserial[2]>>24) & 0xFF;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	0e1a      	lsrs	r2, r3, #24
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3306      	adds	r3, #6
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]
  
  int n;
  char * p = &id[7];
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3307      	adds	r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%03u", waf_num);
 8001f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4916      	ldr	r1, [pc, #88]	; (8001f98 <get_unique_id+0xe0>)
 8001f40:	69f8      	ldr	r0, [r7, #28]
 8001f42:	f01d ff4b 	bl	801fddc <siprintf>
 8001f46:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", x);
 8001f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f52:	461a      	mov	r2, r3
 8001f54:	4911      	ldr	r1, [pc, #68]	; (8001f9c <get_unique_id+0xe4>)
 8001f56:	69f8      	ldr	r0, [r7, #28]
 8001f58:	f01d ff40 	bl	801fddc <siprintf>
 8001f5c:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", y);
 8001f66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f68:	461a      	mov	r2, r3
 8001f6a:	490c      	ldr	r1, [pc, #48]	; (8001f9c <get_unique_id+0xe4>)
 8001f6c:	69f8      	ldr	r0, [r7, #28]
 8001f6e:	f01d ff35 	bl	801fddc <siprintf>
 8001f72:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]
  
  *p = '\0';
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
  /*OUT: | LOT NUMBER [7] | WAF NUMBER [3] | X ON WAF [5] | Y ON WAF [5] | */  
}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	1fff7590 	.word	0x1fff7590
 8001f90:	1fff7594 	.word	0x1fff7594
 8001f94:	1fff7598 	.word	0x1fff7598
 8001f98:	08023674 	.word	0x08023674
 8001f9c:	0802367c 	.word	0x0802367c

08001fa0 <set_default_description>:
* @brief Set default device description
* @param None
* @retval None
*/
void set_default_description(void)
{  
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;
  COM_DeviceDescriptor_t * tempDeviceDescriptor;
  tempDeviceDescriptor = COM_GetDeviceDescriptor();
 8001fa6:	f7ff feaf 	bl	8001d08 <COM_GetDeviceDescriptor>
 8001faa:	6078      	str	r0, [r7, #4]
  
  get_unique_id(tempDeviceDescriptor->serialNumber);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff82 	bl	8001eb8 <get_unique_id>
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3315      	adds	r3, #21
 8001fb8:	49ba      	ldr	r1, [pc, #744]	; (80022a4 <set_default_description+0x304>)
 8001fba:	461a      	mov	r2, r3
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	cb03      	ldmia	r3!, {r0, r1}
 8001fc0:	6010      	str	r0, [r2, #0]
 8001fc2:	6051      	str	r1, [r2, #4]
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	8113      	strh	r3, [r2, #8]
    
  /***** IIS3DWB *****/
  iis3dwb_com_id = COM_AddSensor();
 8001fc8:	f7ff fe5e 	bl	8001c88 <COM_AddSensor>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4bb5      	ldr	r3, [pc, #724]	; (80022a8 <set_default_description+0x308>)
 8001fd2:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);
 8001fd4:	4bb4      	ldr	r3, [pc, #720]	; (80022a8 <set_default_description+0x308>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fe9f 	bl	8001d1c <COM_GetSensor>
 8001fde:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	49b1      	ldr	r1, [pc, #708]	; (80022ac <set_default_description+0x30c>)
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	460b      	mov	r3, r1
 8001fea:	cb03      	ldmia	r3!, {r0, r1}
 8001fec:	6010      	str	r0, [r2, #0]
 8001fee:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 26667.0f;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	4aad      	ldr	r2, [pc, #692]	; (80022b0 <set_default_description+0x310>)
 8001ffa:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  /* Terminate list */
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4aad      	ldr	r2, [pc, #692]	; (80022b4 <set_default_description+0x314>)
 8002000:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002010:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 26667.0f;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4aa4      	ldr	r2, [pc, #656]	; (80022b0 <set_default_description+0x310>)
 8002020:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800203e:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 3000;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002050:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS3DWB;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800205a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002064:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2203      	movs	r2, #3
 800207c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	335f      	adds	r3, #95	; 0x5f
 8002084:	4a8c      	ldr	r2, [pc, #560]	; (80022b8 <set_default_description+0x318>)
 8002086:	8811      	ldrh	r1, [r2, #0]
 8002088:	7892      	ldrb	r2, [r2, #2]
 800208a:	8019      	strh	r1, [r3, #0]
 800208c:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002094:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800209c:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80020a4:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80020ac:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	4a80      	ldr	r2, [pc, #512]	; (80022b4 <set_default_description+0x314>)
 80020b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80020bc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80020ce:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80022bc <set_default_description+0x31c>
 80020d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc

  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80020ea:	4a75      	ldr	r2, [pc, #468]	; (80022c0 <set_default_description+0x320>)
 80020ec:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80020f4:	4a72      	ldr	r2, [pc, #456]	; (80022c0 <set_default_description+0x320>)
 80020f6:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80020fe:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <set_default_description+0x320>)
 8002100:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis3dwb_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS3DWB / (uint32_t)(IIS3DWB_Init_Param.ODR * 6); 
 8002102:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <set_default_description+0x320>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800210c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002114:	ee17 2a90 	vmov	r2, s15
 8002118:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <set_default_description+0x308>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	4b69      	ldr	r3, [pc, #420]	; (80022c4 <set_default_description+0x324>)
 8002120:	fbb3 f3f2 	udiv	r3, r3, r2
 8002124:	4a68      	ldr	r2, [pc, #416]	; (80022c8 <set_default_description+0x328>)
 8002126:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /*****                                                                 *****/ 
  
  /***** HTS221 *****/
  hts221_com_id = COM_AddSensor();
 800212a:	f7ff fdad 	bl	8001c88 <COM_AddSensor>
 800212e:	4603      	mov	r3, r0
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b66      	ldr	r3, [pc, #408]	; (80022cc <set_default_description+0x32c>)
 8002134:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(hts221_com_id);
 8002136:	4b65      	ldr	r3, [pc, #404]	; (80022cc <set_default_description+0x32c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fdee 	bl	8001d1c <COM_GetSensor>
 8002140:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "HTS221"); 
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	4a62      	ldr	r2, [pc, #392]	; (80022d0 <set_default_description+0x330>)
 8002148:	6810      	ldr	r0, [r2, #0]
 800214a:	6018      	str	r0, [r3, #0]
 800214c:	8891      	ldrh	r1, [r2, #4]
 800214e:	7992      	ldrb	r2, [r2, #6]
 8002150:	8099      	strh	r1, [r3, #4]
 8002152:	719a      	strb	r2, [r3, #6]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2206      	movs	r2, #6
 8002158:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002160:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 7.0f;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <set_default_description+0x334>)
 8002166:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 12.5f;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4a5b      	ldr	r2, [pc, #364]	; (80022d8 <set_default_description+0x338>)
 800216c:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = COM_END_OF_LIST_FLOAT;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <set_default_description+0x314>)
 8002172:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002182:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2202      	movs	r2, #2
 800218a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 12.5f;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	4a51      	ldr	r2, [pc, #324]	; (80022d8 <set_default_description+0x338>)
 8002192:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 50;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2232      	movs	r2, #50	; 0x32
 80021ae:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2210      	movs	r2, #16
 80021be:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_HTS221;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021c8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d2:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_TEMP; 
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2204      	movs	r2, #4
 80021e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	335f      	adds	r3, #95	; 0x5f
 80021f2:	493a      	ldr	r1, [pc, #232]	; (80022dc <set_default_description+0x33c>)
 80021f4:	461a      	mov	r2, r3
 80021f6:	460b      	mov	r3, r1
 80021f8:	cb03      	ldmia	r3!, {r0, r1}
 80021fa:	6010      	str	r0, [r2, #0]
 80021fc:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 120.0f; 
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	4a37      	ldr	r2, [pc, #220]	; (80022e0 <set_default_description+0x340>)
 8002202:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4a2b      	ldr	r2, [pc, #172]	; (80022b4 <set_default_description+0x314>)
 8002208:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 120.0f;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <set_default_description+0x340>)
 800220e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0f;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002220:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_HUM; 
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2206      	movs	r2, #6
 8002230:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "%");
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	33b3      	adds	r3, #179	; 0xb3
 8002240:	4928      	ldr	r1, [pc, #160]	; (80022e4 <set_default_description+0x344>)
 8002242:	461a      	mov	r2, r3
 8002244:	460b      	mov	r3, r1
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	8013      	strh	r3, [r2, #0]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 100.0f; 
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <set_default_description+0x348>)
 800224e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = COM_END_OF_LIST_FLOAT;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <set_default_description+0x314>)
 8002256:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 100.0f;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <set_default_description+0x348>)
 800225e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002270:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <set_default_description+0x34c>)
 800227c:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <set_default_description+0x34c>)
 8002286:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800228e:	4a17      	ldr	r2, [pc, #92]	; (80022ec <set_default_description+0x34c>)
 8002290:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <set_default_description+0x34c>)
 800229a:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80022a2:	e025      	b.n	80022f0 <set_default_description+0x350>
 80022a4:	08023684 	.word	0x08023684
 80022a8:	200163a4 	.word	0x200163a4
 80022ac:	08023690 	.word	0x08023690
 80022b0:	46d05600 	.word	0x46d05600
 80022b4:	bf800000 	.word	0xbf800000
 80022b8:	08023698 	.word	0x08023698
 80022bc:	3d79db23 	.word	0x3d79db23
 80022c0:	200102ec 	.word	0x200102ec
 80022c4:	01e84800 	.word	0x01e84800
 80022c8:	20016684 	.word	0x20016684
 80022cc:	200166b8 	.word	0x200166b8
 80022d0:	0802369c 	.word	0x0802369c
 80022d4:	40e00000 	.word	0x40e00000
 80022d8:	41480000 	.word	0x41480000
 80022dc:	080236a4 	.word	0x080236a4
 80022e0:	42f00000 	.word	0x42f00000
 80022e4:	080236ac 	.word	0x080236ac
 80022e8:	42c80000 	.word	0x42c80000
 80022ec:	2001025c 	.word	0x2001025c
 80022f0:	4b5e      	ldr	r3, [pc, #376]	; (800246c <set_default_description+0x4cc>)
 80022f2:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[hts221_com_id] = 1000 * WRITE_BUFFER_SIZE_HTS221 / (uint32_t)(HTS221_Init_Param.ODR * 8); 
 80022f4:	4b5d      	ldr	r3, [pc, #372]	; (800246c <set_default_description+0x4cc>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002306:	ee17 2a90 	vmov	r2, s15
 800230a:	4b59      	ldr	r3, [pc, #356]	; (8002470 <set_default_description+0x4d0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	4b58      	ldr	r3, [pc, #352]	; (8002474 <set_default_description+0x4d4>)
 8002312:	fbb3 f3f2 	udiv	r3, r3, r2
 8002316:	4a58      	ldr	r2, [pc, #352]	; (8002478 <set_default_description+0x4d8>)
 8002318:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /*****                                                                  *****/ 
    
  /***** IIS2DH *****/
  iis2dh_com_id = COM_AddSensor();
 800231c:	f7ff fcb4 	bl	8001c88 <COM_AddSensor>
 8002320:	4603      	mov	r3, r0
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b55      	ldr	r3, [pc, #340]	; (800247c <set_default_description+0x4dc>)
 8002326:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(iis2dh_com_id);
 8002328:	4b54      	ldr	r3, [pc, #336]	; (800247c <set_default_description+0x4dc>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fcf5 	bl	8001d1c <COM_GetSensor>
 8002332:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	4a51      	ldr	r2, [pc, #324]	; (8002480 <set_default_description+0x4e0>)
 800233a:	6810      	ldr	r0, [r2, #0]
 800233c:	6018      	str	r0, [r3, #0]
 800233e:	8891      	ldrh	r1, [r2, #4]
 8002340:	7992      	ldrb	r2, [r2, #6]
 8002342:	8099      	strh	r1, [r3, #4]
 8002344:	719a      	strb	r2, [r3, #6]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2203      	movs	r2, #3
 800234a:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002352:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <set_default_description+0x4e4>)
 8002358:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	4a4a      	ldr	r2, [pc, #296]	; (8002488 <set_default_description+0x4e8>)
 800235e:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4a4a      	ldr	r2, [pc, #296]	; (800248c <set_default_description+0x4ec>)
 8002364:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 100.0f;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	4a49      	ldr	r2, [pc, #292]	; (8002490 <set_default_description+0x4f0>)
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 200.0f;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4a49      	ldr	r2, [pc, #292]	; (8002494 <set_default_description+0x4f4>)
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 400.0f;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	4a48      	ldr	r2, [pc, #288]	; (8002498 <set_default_description+0x4f8>)
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = 1344.0f;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4a48      	ldr	r2, [pc, #288]	; (800249c <set_default_description+0x4fc>)
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
  tempSensor->sensorDescriptor.ODR[8] = COM_END_OF_LIST_FLOAT;  
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	4a47      	ldr	r2, [pc, #284]	; (80024a0 <set_default_description+0x500>)
 8002382:	635a      	str	r2, [r3, #52]	; 0x34
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002392:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 1344.0f;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4a3e      	ldr	r2, [pc, #248]	; (800249c <set_default_description+0x4fc>)
 80023a2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023c0:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 2400;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80023d2:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2DH;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80023dc:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e6:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	335f      	adds	r3, #95	; 0x5f
 8002406:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <set_default_description+0x504>)
 8002408:	8811      	ldrh	r1, [r2, #0]
 800240a:	7892      	ldrb	r2, [r2, #2]
 800240c:	8019      	strh	r1, [r3, #0]
 800240e:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002416:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800241e:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002426:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800242e:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <set_default_description+0x500>)
 8002434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800243e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  if (tempSensor->sensorStatus.subSensorStatus[0].FS == 16.0f)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8002450:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002454:	eef4 7a47 	vcmp.f32	s15, s14
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	d126      	bne.n	80024ac <set_default_description+0x50c>
  {
    tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.75f;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002464:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8002468:	e02e      	b.n	80024c8 <set_default_description+0x528>
 800246a:	bf00      	nop
 800246c:	2001025c 	.word	0x2001025c
 8002470:	200166b8 	.word	0x200166b8
 8002474:	0007a120 	.word	0x0007a120
 8002478:	20016684 	.word	0x20016684
 800247c:	200166c8 	.word	0x200166c8
 8002480:	080236b0 	.word	0x080236b0
 8002484:	41200000 	.word	0x41200000
 8002488:	41c80000 	.word	0x41c80000
 800248c:	42480000 	.word	0x42480000
 8002490:	42c80000 	.word	0x42c80000
 8002494:	43480000 	.word	0x43480000
 8002498:	43c80000 	.word	0x43c80000
 800249c:	44a80000 	.word	0x44a80000
 80024a0:	bf800000 	.word	0xbf800000
 80024a4:	08023698 	.word	0x08023698
 80024a8:	3d800000 	.word	0x3d800000
  }
  else
  {
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.0625f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80024b2:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80024a8 <set_default_description+0x508>
 80024b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
  }
  
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80024ce:	4ab8      	ldr	r2, [pc, #736]	; (80027b0 <set_default_description+0x810>)
 80024d0:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80024d8:	4ab5      	ldr	r2, [pc, #724]	; (80027b0 <set_default_description+0x810>)
 80024da:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80024e2:	4bb3      	ldr	r3, [pc, #716]	; (80027b0 <set_default_description+0x810>)
 80024e4:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis2dh_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2DH / (uint32_t)(IIS2DH_Init_Param.ODR * 6);
 80024e6:	4bb2      	ldr	r3, [pc, #712]	; (80027b0 <set_default_description+0x810>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80024f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f8:	ee17 2a90 	vmov	r2, s15
 80024fc:	4bad      	ldr	r3, [pc, #692]	; (80027b4 <set_default_description+0x814>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	4bad      	ldr	r3, [pc, #692]	; (80027b8 <set_default_description+0x818>)
 8002504:	fbb3 f3f2 	udiv	r3, r3, r2
 8002508:	4aac      	ldr	r2, [pc, #688]	; (80027bc <set_default_description+0x81c>)
 800250a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* IIS2MDC */
  iis2mdc_com_id = COM_AddSensor();  
 800250e:	f7ff fbbb 	bl	8001c88 <COM_AddSensor>
 8002512:	4603      	mov	r3, r0
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4baa      	ldr	r3, [pc, #680]	; (80027c0 <set_default_description+0x820>)
 8002518:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 800251a:	4ba9      	ldr	r3, [pc, #676]	; (80027c0 <set_default_description+0x820>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fbfc 	bl	8001d1c <COM_GetSensor>
 8002524:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS2MDC"); 
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	49a6      	ldr	r1, [pc, #664]	; (80027c4 <set_default_description+0x824>)
 800252c:	461a      	mov	r2, r3
 800252e:	460b      	mov	r3, r1
 8002530:	cb03      	ldmia	r3!, {r0, r1}
 8002532:	6010      	str	r0, [r2, #0]
 8002534:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2203      	movs	r2, #3
 800253a:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 10.0f;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4aa2      	ldr	r2, [pc, #648]	; (80027c8 <set_default_description+0x828>)
 8002540:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 20.0f;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	4aa1      	ldr	r2, [pc, #644]	; (80027cc <set_default_description+0x82c>)
 8002546:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 50.0f;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4aa1      	ldr	r2, [pc, #644]	; (80027d0 <set_default_description+0x830>)
 800254c:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 100.0f;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4aa0      	ldr	r2, [pc, #640]	; (80027d4 <set_default_description+0x834>)
 8002552:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = COM_END_OF_LIST_FLOAT;  
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4aa0      	ldr	r2, [pc, #640]	; (80027d8 <set_default_description+0x838>)
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002568:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 100.0f;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4a97      	ldr	r2, [pc, #604]	; (80027d4 <set_default_description+0x834>)
 8002578:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 100;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2264      	movs	r2, #100	; 0x64
 8002594:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 600;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025a6:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2MDC;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025b0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ba:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MAG; 
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2203      	movs	r2, #3
 80025d2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "gauss");
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	335f      	adds	r3, #95	; 0x5f
 80025da:	4a80      	ldr	r2, [pc, #512]	; (80027dc <set_default_description+0x83c>)
 80025dc:	6810      	ldr	r0, [r2, #0]
 80025de:	6018      	str	r0, [r3, #0]
 80025e0:	8892      	ldrh	r2, [r2, #4]
 80025e2:	809a      	strh	r2, [r3, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 50.0f; 
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4a7a      	ldr	r2, [pc, #488]	; (80027d0 <set_default_description+0x830>)
 80025e8:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	4a7a      	ldr	r2, [pc, #488]	; (80027d8 <set_default_description+0x838>)
 80025ee:	675a      	str	r2, [r3, #116]	; 0x74

  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 50.0f;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4a77      	ldr	r2, [pc, #476]	; (80027d0 <set_default_description+0x830>)
 80025f4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.5;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002606:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002610:	4a73      	ldr	r2, [pc, #460]	; (80027e0 <set_default_description+0x840>)
 8002612:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800261a:	4a71      	ldr	r2, [pc, #452]	; (80027e0 <set_default_description+0x840>)
 800261c:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002624:	4b6e      	ldr	r3, [pc, #440]	; (80027e0 <set_default_description+0x840>)
 8002626:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis2mdc_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2MDC / (uint32_t)(IIS2MDC_Init_Param.ODR * 6); 
 8002628:	4b6d      	ldr	r3, [pc, #436]	; (80027e0 <set_default_description+0x840>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263a:	ee17 2a90 	vmov	r2, s15
 800263e:	4b60      	ldr	r3, [pc, #384]	; (80027c0 <set_default_description+0x820>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <set_default_description+0x844>)
 8002646:	fbb3 f3f2 	udiv	r3, r3, r2
 800264a:	4a5c      	ldr	r2, [pc, #368]	; (80027bc <set_default_description+0x81c>)
 800264c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* IMP34DT05 */
  imp34dt05_com_id = COM_AddSensor();
 8002650:	f7ff fb1a 	bl	8001c88 <COM_AddSensor>
 8002654:	4603      	mov	r3, r0
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <set_default_description+0x848>)
 800265a:	701a      	strb	r2, [r3, #0]
   
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 800265c:	4b62      	ldr	r3, [pc, #392]	; (80027e8 <set_default_description+0x848>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fb5b 	bl	8001d1c <COM_GetSensor>
 8002666:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IMP34DT05"); 
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	495f      	ldr	r1, [pc, #380]	; (80027ec <set_default_description+0x84c>)
 800266e:	461a      	mov	r2, r3
 8002670:	460b      	mov	r3, r1
 8002672:	cb03      	ldmia	r3!, {r0, r1}
 8002674:	6010      	str	r0, [r2, #0]
 8002676:	6051      	str	r1, [r2, #4]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	8113      	strh	r3, [r2, #8]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2203      	movs	r2, #3
 8002680:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 48000.0f;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	4a5a      	ldr	r2, [pc, #360]	; (80027f0 <set_default_description+0x850>)
 8002686:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4a53      	ldr	r2, [pc, #332]	; (80027d8 <set_default_description+0x838>)
 800268c:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800269c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 48000.0f;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4a51      	ldr	r2, [pc, #324]	; (80027f0 <set_default_description+0x850>)
 80026ac:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026ca:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026dc:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IMP34DT05;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80026e6:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f0:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;  
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MIC; 
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2207      	movs	r2, #7
 8002700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	335f      	adds	r3, #95	; 0x5f
 8002710:	4938      	ldr	r1, [pc, #224]	; (80027f4 <set_default_description+0x854>)
 8002712:	461a      	mov	r2, r3
 8002714:	460b      	mov	r3, r1
 8002716:	cb03      	ldmia	r3!, {r0, r1}
 8002718:	6010      	str	r0, [r2, #0]
 800271a:	6051      	str	r1, [r2, #4]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 122.5f; 
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4a35      	ldr	r2, [pc, #212]	; (80027f8 <set_default_description+0x858>)
 8002724:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <set_default_description+0x838>)
 800272a:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 122.5f;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4a32      	ldr	r2, [pc, #200]	; (80027f8 <set_default_description+0x858>)
 8002730:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002742:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800274c:	4a2b      	ldr	r2, [pc, #172]	; (80027fc <set_default_description+0x85c>)
 800274e:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002756:	4a29      	ldr	r2, [pc, #164]	; (80027fc <set_default_description+0x85c>)
 8002758:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <set_default_description+0x85c>)
 8002762:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[imp34dt05_com_id] = 1000 * WRITE_BUFFER_SIZE_IMP34DT05 / (uint32_t)(IMP34DT05_Init_Param.ODR * 2); 
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <set_default_description+0x85c>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800276e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002772:	ee17 2a90 	vmov	r2, s15
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <set_default_description+0x848>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <set_default_description+0x860>)
 800277e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <set_default_description+0x81c>)
 8002784:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
/**********/ 
  
  /* ISM330DHCX */
  ism330dhcx_com_id = COM_AddSensor();
 8002788:	f7ff fa7e 	bl	8001c88 <COM_AddSensor>
 800278c:	4603      	mov	r3, r0
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <set_default_description+0x864>)
 8002792:	701a      	strb	r2, [r3, #0]
  
    tempSensor = COM_GetSensor(ism330dhcx_com_id);
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <set_default_description+0x864>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fabf 	bl	8001d1c <COM_GetSensor>
 800279e:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "ISM330DHCX"); 
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4918      	ldr	r1, [pc, #96]	; (8002808 <set_default_description+0x868>)
 80027a6:	461a      	mov	r2, r3
 80027a8:	460b      	mov	r3, r1
 80027aa:	cb03      	ldmia	r3!, {r0, r1}
 80027ac:	e02e      	b.n	800280c <set_default_description+0x86c>
 80027ae:	bf00      	nop
 80027b0:	20010288 	.word	0x20010288
 80027b4:	200166c8 	.word	0x200166c8
 80027b8:	007a1200 	.word	0x007a1200
 80027bc:	20016684 	.word	0x20016684
 80027c0:	20016679 	.word	0x20016679
 80027c4:	080236b8 	.word	0x080236b8
 80027c8:	41200000 	.word	0x41200000
 80027cc:	41a00000 	.word	0x41a00000
 80027d0:	42480000 	.word	0x42480000
 80027d4:	42c80000 	.word	0x42c80000
 80027d8:	bf800000 	.word	0xbf800000
 80027dc:	080236c0 	.word	0x080236c0
 80027e0:	200102c0 	.word	0x200102c0
 80027e4:	001e8480 	.word	0x001e8480
 80027e8:	200166c0 	.word	0x200166c0
 80027ec:	080236c8 	.word	0x080236c8
 80027f0:	473b8000 	.word	0x473b8000
 80027f4:	080236d4 	.word	0x080236d4
 80027f8:	42f50000 	.word	0x42f50000
 80027fc:	2001523c 	.word	0x2001523c
 8002800:	01e84800 	.word	0x01e84800
 8002804:	200166b9 	.word	0x200166b9
 8002808:	080236e0 	.word	0x080236e0
 800280c:	6010      	str	r0, [r2, #0]
 800280e:	6051      	str	r1, [r2, #4]
 8002810:	8819      	ldrh	r1, [r3, #0]
 8002812:	789b      	ldrb	r3, [r3, #2]
 8002814:	8111      	strh	r1, [r2, #8]
 8002816:	7293      	strb	r3, [r2, #10]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2203      	movs	r2, #3
 800281c:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 12.5f;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	4ab3      	ldr	r2, [pc, #716]	; (8002af0 <set_default_description+0xb50>)
 8002822:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 26.0f;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4ab3      	ldr	r2, [pc, #716]	; (8002af4 <set_default_description+0xb54>)
 8002828:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 52.0f;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	4ab2      	ldr	r2, [pc, #712]	; (8002af8 <set_default_description+0xb58>)
 800282e:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 104.0f;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4ab2      	ldr	r2, [pc, #712]	; (8002afc <set_default_description+0xb5c>)
 8002834:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 208.0f;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	4ab1      	ldr	r2, [pc, #708]	; (8002b00 <set_default_description+0xb60>)
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 417.0f;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4ab1      	ldr	r2, [pc, #708]	; (8002b04 <set_default_description+0xb64>)
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 833.0f;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	4ab0      	ldr	r2, [pc, #704]	; (8002b08 <set_default_description+0xb68>)
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = 1667.0f;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4ab0      	ldr	r2, [pc, #704]	; (8002b0c <set_default_description+0xb6c>)
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
  tempSensor->sensorDescriptor.ODR[8] = 3333.0f;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	4aaf      	ldr	r2, [pc, #700]	; (8002b10 <set_default_description+0xb70>)
 8002852:	635a      	str	r2, [r3, #52]	; 0x34
  tempSensor->sensorDescriptor.ODR[9] = 6667.0f;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4aaf      	ldr	r2, [pc, #700]	; (8002b14 <set_default_description+0xb74>)
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
  tempSensor->sensorDescriptor.ODR[10] = COM_END_OF_LIST_FLOAT;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	4aae      	ldr	r2, [pc, #696]	; (8002b18 <set_default_description+0xb78>)
 800285e:	63da      	str	r2, [r3, #60]	; 0x3c
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800286e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 6667.0f;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	4aa5      	ldr	r2, [pc, #660]	; (8002b14 <set_default_description+0xb74>)
 800287e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800289c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 2048;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ae:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_ISM330DHCX;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80028b8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c2:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2203      	movs	r2, #3
 80028da:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	335f      	adds	r3, #95	; 0x5f
 80028e2:	4a8e      	ldr	r2, [pc, #568]	; (8002b1c <set_default_description+0xb7c>)
 80028e4:	8811      	ldrh	r1, [r2, #0]
 80028e6:	7892      	ldrb	r2, [r2, #2]
 80028e8:	8019      	strh	r1, [r3, #0]
 80028ea:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f2:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80028fa:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002902:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800290a:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_LIST_SEPARATOR_FLOAT;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8002912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800291c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f * tempSensor->sensorStatus.subSensorStatus[0].FS/2.0f;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 800292e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002b20 <set_default_description+0xb80>
 8002932:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002936:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800293a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_GYRO; 
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2203      	movs	r2, #3
 8002950:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 3;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2203      	movs	r2, #3
 8002958:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "mdps");
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	33b3      	adds	r3, #179	; 0xb3
 8002960:	4a70      	ldr	r2, [pc, #448]	; (8002b24 <set_default_description+0xb84>)
 8002962:	6810      	ldr	r0, [r2, #0]
 8002964:	6018      	str	r0, [r3, #0]
 8002966:	7912      	ldrb	r2, [r2, #4]
 8002968:	711a      	strb	r2, [r3, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 125.0f; 
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4a6e      	ldr	r2, [pc, #440]	; (8002b28 <set_default_description+0xb88>)
 800296e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = 250.0f; 
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	4a6d      	ldr	r2, [pc, #436]	; (8002b2c <set_default_description+0xb8c>)
 8002976:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[2] = 500.0f; 
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	4a6c      	ldr	r2, [pc, #432]	; (8002b30 <set_default_description+0xb90>)
 800297e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[3] = 1000.0f; 
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4a6b      	ldr	r2, [pc, #428]	; (8002b34 <set_default_description+0xb94>)
 8002986:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[4] = 2000.0f; 
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	4a6a      	ldr	r2, [pc, #424]	; (8002b38 <set_default_description+0xb98>)
 800298e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[5] = 4000.0f; 
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4a69      	ldr	r2, [pc, #420]	; (8002b3c <set_default_description+0xb9c>)
 8002996:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[6] = COM_END_OF_LIST_FLOAT; 
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <set_default_description+0xb78>)
 800299e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 4000.0f;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <set_default_description+0xb9c>)
 80029a6:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 4.375f * tempSensor->sensorStatus.subSensorStatus[1].FS/125.0f;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80029b8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002b40 <set_default_description+0xba0>
 80029bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029c0:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002b44 <set_default_description+0xba4>
 80029c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	edc3 7a76 	vstr	s15, [r3, #472]	; 0x1d8
  
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80029d4:	4a5c      	ldr	r2, [pc, #368]	; (8002b48 <set_default_description+0xba8>)
 80029d6:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80029de:	4a5a      	ldr	r2, [pc, #360]	; (8002b48 <set_default_description+0xba8>)
 80029e0:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80029e8:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <set_default_description+0xba8>)
 80029ea:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80029f2:	4b55      	ldr	r3, [pc, #340]	; (8002b48 <set_default_description+0xba8>)
 80029f4:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80029fc:	4b52      	ldr	r3, [pc, #328]	; (8002b48 <set_default_description+0xba8>)
 80029fe:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[ism330dhcx_com_id] = 1000 * WRITE_BUFFER_SIZE_ISM330DHCX / (uint32_t)(ISM330DHCX_Init_Param.ODR * 12); 
 8002a00:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <set_default_description+0xba8>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a12:	ee17 2a90 	vmov	r2, s15
 8002a16:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <set_default_description+0xbac>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <set_default_description+0xbb0>)
 8002a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a22:	4a4c      	ldr	r2, [pc, #304]	; (8002b54 <set_default_description+0xbb4>)
 8002a24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* LPS22HH */
  lps22hh_com_id = COM_AddSensor();
 8002a28:	f7ff f92e 	bl	8001c88 <COM_AddSensor>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <set_default_description+0xbb8>)
 8002a32:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <set_default_description+0xbb8>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f96f 	bl	8001d1c <COM_GetSensor>
 8002a3e:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "LPS22HH"); 
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	4945      	ldr	r1, [pc, #276]	; (8002b5c <set_default_description+0xbbc>)
 8002a46:	461a      	mov	r2, r3
 8002a48:	460b      	mov	r3, r1
 8002a4a:	cb03      	ldmia	r3!, {r0, r1}
 8002a4c:	6010      	str	r0, [r2, #0]
 8002a4e:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2206      	movs	r2, #6
 8002a54:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a5c:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <set_default_description+0xbc0>)
 8002a62:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4a3f      	ldr	r2, [pc, #252]	; (8002b64 <set_default_description+0xbc4>)
 8002a68:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	4a3e      	ldr	r2, [pc, #248]	; (8002b68 <set_default_description+0xbc8>)
 8002a6e:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 75.0f;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4a3e      	ldr	r2, [pc, #248]	; (8002b6c <set_default_description+0xbcc>)
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 100.0f;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4a3d      	ldr	r2, [pc, #244]	; (8002b70 <set_default_description+0xbd0>)
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 200.0f;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <set_default_description+0xbd4>)
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = COM_END_OF_LIST_FLOAT; 
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <set_default_description+0xb78>)
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30

  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 200.0f;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <set_default_description+0xbd4>)
 8002aa6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 200;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	22c8      	movs	r2, #200	; 0xc8
 8002ac2:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 1600;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002ad4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_LPS22HH;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ade:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8002aec:	e044      	b.n	8002b78 <set_default_description+0xbd8>
 8002aee:	bf00      	nop
 8002af0:	41480000 	.word	0x41480000
 8002af4:	41d00000 	.word	0x41d00000
 8002af8:	42500000 	.word	0x42500000
 8002afc:	42d00000 	.word	0x42d00000
 8002b00:	43500000 	.word	0x43500000
 8002b04:	43d08000 	.word	0x43d08000
 8002b08:	44504000 	.word	0x44504000
 8002b0c:	44d06000 	.word	0x44d06000
 8002b10:	45505000 	.word	0x45505000
 8002b14:	45d05800 	.word	0x45d05800
 8002b18:	bf800000 	.word	0xbf800000
 8002b1c:	08023698 	.word	0x08023698
 8002b20:	3d79db23 	.word	0x3d79db23
 8002b24:	080236ec 	.word	0x080236ec
 8002b28:	42fa0000 	.word	0x42fa0000
 8002b2c:	437a0000 	.word	0x437a0000
 8002b30:	43fa0000 	.word	0x43fa0000
 8002b34:	447a0000 	.word	0x447a0000
 8002b38:	44fa0000 	.word	0x44fa0000
 8002b3c:	457a0000 	.word	0x457a0000
 8002b40:	408c0000 	.word	0x408c0000
 8002b44:	42fa0000 	.word	0x42fa0000
 8002b48:	20016370 	.word	0x20016370
 8002b4c:	200166b9 	.word	0x200166b9
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	20016684 	.word	0x20016684
 8002b58:	200166d1 	.word	0x200166d1
 8002b5c:	080236f4 	.word	0x080236f4
 8002b60:	41200000 	.word	0x41200000
 8002b64:	41c80000 	.word	0x41c80000
 8002b68:	42480000 	.word	0x42480000
 8002b6c:	42960000 	.word	0x42960000
 8002b70:	42c80000 	.word	0x42c80000
 8002b74:	43480000 	.word	0x43480000
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_PRESS; 
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2205      	movs	r2, #5
 8002b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "hPa");
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	335f      	adds	r3, #95	; 0x5f
 8002b94:	4aba      	ldr	r2, [pc, #744]	; (8002e80 <set_default_description+0xee0>)
 8002b96:	6810      	ldr	r0, [r2, #0]
 8002b98:	6018      	str	r0, [r3, #0]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 1260.0f; 
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	4ab9      	ldr	r2, [pc, #740]	; (8002e84 <set_default_description+0xee4>)
 8002b9e:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4ab9      	ldr	r2, [pc, #740]	; (8002e88 <set_default_description+0xee8>)
 8002ba4:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 1260.0f;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	4ab6      	ldr	r2, [pc, #728]	; (8002e84 <set_default_description+0xee4>)
 8002baa:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0f;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bbc:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_TEMP; 
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "Celsius");
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	33b3      	adds	r3, #179	; 0xb3
 8002bdc:	49ab      	ldr	r1, [pc, #684]	; (8002e8c <set_default_description+0xeec>)
 8002bde:	461a      	mov	r2, r3
 8002be0:	460b      	mov	r3, r1
 8002be2:	cb03      	ldmia	r3!, {r0, r1}
 8002be4:	6010      	str	r0, [r2, #0]
 8002be6:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 85.0f; 
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4aa9      	ldr	r2, [pc, #676]	; (8002e90 <set_default_description+0xef0>)
 8002bec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = COM_END_OF_LIST_FLOAT;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4aa5      	ldr	r2, [pc, #660]	; (8002e88 <set_default_description+0xee8>)
 8002bf4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 85.0f;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4aa5      	ldr	r2, [pc, #660]	; (8002e90 <set_default_description+0xef0>)
 8002bfc:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;   
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c0e:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002c18:	4a9e      	ldr	r2, [pc, #632]	; (8002e94 <set_default_description+0xef4>)
 8002c1a:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002c22:	4a9c      	ldr	r2, [pc, #624]	; (8002e94 <set_default_description+0xef4>)
 8002c24:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002c2c:	4a99      	ldr	r2, [pc, #612]	; (8002e94 <set_default_description+0xef4>)
 8002c2e:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002c36:	4b97      	ldr	r3, [pc, #604]	; (8002e94 <set_default_description+0xef4>)
 8002c38:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;  
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8002c40:	4b94      	ldr	r3, [pc, #592]	; (8002e94 <set_default_description+0xef4>)
 8002c42:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[lps22hh_com_id] = 1000 * WRITE_BUFFER_SIZE_LPS22HH / (uint32_t)(LPS22HH_Init_Param.ODR * 8); 
 8002c44:	4b93      	ldr	r3, [pc, #588]	; (8002e94 <set_default_description+0xef4>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c56:	ee17 2a90 	vmov	r2, s15
 8002c5a:	4b8f      	ldr	r3, [pc, #572]	; (8002e98 <set_default_description+0xef8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4b8e      	ldr	r3, [pc, #568]	; (8002e9c <set_default_description+0xefc>)
 8002c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c66:	4a8e      	ldr	r2, [pc, #568]	; (8002ea0 <set_default_description+0xf00>)
 8002c68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* MP23ABS1 */
  mp23abs1_com_id = COM_AddSensor();
 8002c6c:	f7ff f80c 	bl	8001c88 <COM_AddSensor>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b8b      	ldr	r3, [pc, #556]	; (8002ea4 <set_default_description+0xf04>)
 8002c76:	701a      	strb	r2, [r3, #0]
  
   tempSensor = COM_GetSensor(mp23abs1_com_id);
 8002c78:	4b8a      	ldr	r3, [pc, #552]	; (8002ea4 <set_default_description+0xf04>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f84d 	bl	8001d1c <COM_GetSensor>
 8002c82:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "MP23ABS1"); 
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	4987      	ldr	r1, [pc, #540]	; (8002ea8 <set_default_description+0xf08>)
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	cb03      	ldmia	r3!, {r0, r1}
 8002c90:	6010      	str	r0, [r2, #0]
 8002c92:	6051      	str	r1, [r2, #4]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 192000.0f;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	4a82      	ldr	r2, [pc, #520]	; (8002eac <set_default_description+0xf0c>)
 8002ca2:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4a78      	ldr	r2, [pc, #480]	; (8002e88 <set_default_description+0xee8>)
 8002ca8:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 192000.0f;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4a79      	ldr	r2, [pc, #484]	; (8002eac <set_default_description+0xf0c>)
 8002cc8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ce6:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cf8:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_MP23ABS1;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002d02:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d0c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MIC; 
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	335f      	adds	r3, #95	; 0x5f
 8002d2c:	4960      	ldr	r1, [pc, #384]	; (8002eb0 <set_default_description+0xf10>)
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	cb03      	ldmia	r3!, {r0, r1}
 8002d34:	6010      	str	r0, [r2, #0]
 8002d36:	6051      	str	r1, [r2, #4]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 130.0f; 
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4a5d      	ldr	r2, [pc, #372]	; (8002eb4 <set_default_description+0xf14>)
 8002d40:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	4a50      	ldr	r2, [pc, #320]	; (8002e88 <set_default_description+0xee8>)
 8002d46:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 130.0f;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4a5a      	ldr	r2, [pc, #360]	; (8002eb4 <set_default_description+0xf14>)
 8002d4c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d5e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002d68:	4a53      	ldr	r2, [pc, #332]	; (8002eb8 <set_default_description+0xf18>)
 8002d6a:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002d72:	4a51      	ldr	r2, [pc, #324]	; (8002eb8 <set_default_description+0xf18>)
 8002d74:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002d7c:	4b4e      	ldr	r3, [pc, #312]	; (8002eb8 <set_default_description+0xf18>)
 8002d7e:	751a      	strb	r2, [r3, #20]
    
  maxWriteTimeSensor[mp23abs1_com_id] = 1000 * WRITE_BUFFER_SIZE_MP23ABS1 / (uint32_t)(MP23ABS1_Init_Param.ODR * 2); 
 8002d80:	4b4d      	ldr	r3, [pc, #308]	; (8002eb8 <set_default_description+0xf18>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d8e:	ee17 2a90 	vmov	r2, s15
 8002d92:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <set_default_description+0xf04>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <set_default_description+0xf1c>)
 8002d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d9e:	4a40      	ldr	r2, [pc, #256]	; (8002ea0 <set_default_description+0xf00>)
 8002da0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* STTS751 */
  stts751_com_id = COM_AddSensor();
 8002da4:	f7fe ff70 	bl	8001c88 <COM_AddSensor>
 8002da8:	4603      	mov	r3, r0
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <set_default_description+0xf20>)
 8002dae:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 8002db0:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <set_default_description+0xf20>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe ffb1 	bl	8001d1c <COM_GetSensor>
 8002dba:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "STTS751"); 
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	4940      	ldr	r1, [pc, #256]	; (8002ec4 <set_default_description+0xf24>)
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	cb03      	ldmia	r3!, {r0, r1}
 8002dc8:	6010      	str	r0, [r2, #0]
 8002dca:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;  
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2206      	movs	r2, #6
 8002dd0:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dd8:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 2.0f; 
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002de0:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 4.0f; 
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002de8:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = COM_END_OF_LIST_FLOAT;  
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <set_default_description+0xee8>)
 8002dee:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 4.0f;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002e10:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 20;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2214      	movs	r2, #20
 8002e2c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_STTS751;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2264      	movs	r2, #100	; 0x64
 8002e44:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4e:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_TEMP; 
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	335f      	adds	r3, #95	; 0x5f
 8002e6e:	4907      	ldr	r1, [pc, #28]	; (8002e8c <set_default_description+0xeec>)
 8002e70:	461a      	mov	r2, r3
 8002e72:	460b      	mov	r3, r1
 8002e74:	cb03      	ldmia	r3!, {r0, r1}
 8002e76:	6010      	str	r0, [r2, #0]
 8002e78:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 100.0f; 
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	e024      	b.n	8002ec8 <set_default_description+0xf28>
 8002e7e:	bf00      	nop
 8002e80:	080236fc 	.word	0x080236fc
 8002e84:	449d8000 	.word	0x449d8000
 8002e88:	bf800000 	.word	0xbf800000
 8002e8c:	080236a4 	.word	0x080236a4
 8002e90:	42aa0000 	.word	0x42aa0000
 8002e94:	2001638c 	.word	0x2001638c
 8002e98:	200166d1 	.word	0x200166d1
 8002e9c:	007a1200 	.word	0x007a1200
 8002ea0:	20016684 	.word	0x20016684
 8002ea4:	20016678 	.word	0x20016678
 8002ea8:	08023700 	.word	0x08023700
 8002eac:	483b8000 	.word	0x483b8000
 8002eb0:	080236d4 	.word	0x080236d4
 8002eb4:	43020000 	.word	0x43020000
 8002eb8:	2001681c 	.word	0x2001681c
 8002ebc:	03dfd240 	.word	0x03dfd240
 8002ec0:	200166d0 	.word	0x200166d0
 8002ec4:	0802370c 	.word	0x0802370c
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <set_default_description+0xf9c>)
 8002eca:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <set_default_description+0xfa0>)
 8002ed0:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 100.0f;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <set_default_description+0xf9c>)
 8002ed6:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ee8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <set_default_description+0xfa4>)
 8002ef4:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002efc:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <set_default_description+0xfa4>)
 8002efe:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <set_default_description+0xfa4>)
 8002f08:	751a      	strb	r2, [r3, #20]

  maxWriteTimeSensor[stts751_com_id] = 1000 * WRITE_BUFFER_SIZE_STTS751 / (uint32_t)(STTS751_Init_Param.ODR * 4); 
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <set_default_description+0xfa4>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f1c:	ee17 2a90 	vmov	r2, s15
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <set_default_description+0xfa8>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <set_default_description+0xfac>)
 8002f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <set_default_description+0xfb0>)
 8002f2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	42c80000 	.word	0x42c80000
 8002f40:	bf800000 	.word	0xbf800000
 8002f44:	20018b18 	.word	0x20018b18
 8002f48:	200166d0 	.word	0x200166d0
 8002f4c:	000186a0 	.word	0x000186a0
 8002f50:	20016684 	.word	0x20016684

08002f54 <update_sensorStatus>:

void update_sensorStatus(COM_SensorStatus_t * oldSensorStatus, COM_SensorStatus_t * newSensorStatus, uint8_t sID)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	71fb      	strb	r3, [r7, #7]
  /* Check differencies between oldSensorStatus and newSensorStatus, act properly*/
  /* ODR */
  if(oldSensorStatus->ODR != newSensorStatus->ODR)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	ed93 7a00 	vldr	s14, [r3]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	d00f      	beq.n	8002f98 <update_sensorStatus+0x44>
  {
    if(COM_IsOdrLegal(newSensorStatus->ODR, sID))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	4618      	mov	r0, r3
 8002f82:	eeb0 0a67 	vmov.f32	s0, s15
 8002f86:	f7fe ff5b 	bl	8001e40 <COM_IsOdrLegal>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <update_sensorStatus+0x44>
    {
      oldSensorStatus->ODR = newSensorStatus->ODR; /* Todo Setters and getters */
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* isActive */
  if(oldSensorStatus->isActive != newSensorStatus->isActive)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	7b9a      	ldrb	r2, [r3, #14]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	7b9b      	ldrb	r3, [r3, #14]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d003      	beq.n	8002fac <update_sensorStatus+0x58>
  {
    oldSensorStatus->isActive = newSensorStatus->isActive;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	7b9a      	ldrb	r2, [r3, #14]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	739a      	strb	r2, [r3, #14]
  }
  
  /* subsensor: FS, is Active*/
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e054      	b.n	800305c <update_sensorStatus+0x108>
  {
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	331c      	adds	r3, #28
 8002fc2:	ed93 7a00 	vldr	s14, [r3]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	331c      	adds	r3, #28
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	eeb4 7a67 	vcmp.f32	s14, s15
 8002fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe2:	d011      	beq.n	8003008 <update_sensorStatus+0xb4>
    {
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	331c      	adds	r3, #28
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4403      	add	r3, r0
 8003004:	331c      	adds	r3, #28
 8003006:	6019      	str	r1, [r3, #0]
    }
    
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3324      	adds	r3, #36	; 0x24
 8003018:	7819      	ldrb	r1, [r3, #0]
 800301a:	68b8      	ldr	r0, [r7, #8]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4403      	add	r3, r0
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4299      	cmp	r1, r3
 800302e:	d012      	beq.n	8003056 <update_sensorStatus+0x102>
    {
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	3324      	adds	r3, #36	; 0x24
 8003040:	7818      	ldrb	r0, [r3, #0]
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3324      	adds	r3, #36	; 0x24
 8003052:	4602      	mov	r2, r0
 8003054:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fed8 	bl	8001e14 <COM_GetSubSensorNumber>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4293      	cmp	r3, r2
 800306c:	dba1      	blt.n	8002fb2 <update_sensorStatus+0x5e>
    }
  }
  
  if (sID == iis3dwb_com_id)
 800306e:	4b39      	ldr	r3, [pc, #228]	; (8003154 <update_sensorStatus+0x200>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	79fa      	ldrb	r2, [r7, #7]
 8003074:	429a      	cmp	r2, r3
 8003076:	d10e      	bne.n	8003096 <update_sensorStatus+0x142>
  {
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	edd3 7a07 	vldr	s15, [r3, #28]
 800307e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003158 <update_sensorStatus+0x204>
 8003082:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003086:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800308a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	edc3 7a08 	vstr	s15, [r3, #32]
 8003094:	e043      	b.n	800311e <update_sensorStatus+0x1ca>
  }
  else if (sID == iis2dh_com_id)
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <update_sensorStatus+0x208>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	79fa      	ldrb	r2, [r7, #7]
 800309c:	429a      	cmp	r2, r3
 800309e:	d11d      	bne.n	80030dc <update_sensorStatus+0x188>
  {    
    if (oldSensorStatus->subSensorStatus[0].FS == 16.0f)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80030a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80030aa:	eef4 7a47 	vcmp.f32	s15, s14
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	d104      	bne.n	80030be <update_sensorStatus+0x16a>
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.75f;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80030ba:	621a      	str	r2, [r3, #32]
 80030bc:	e02f      	b.n	800311e <update_sensorStatus+0x1ca>
    }
    else
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.0625f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80030c4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003160 <update_sensorStatus+0x20c>
 80030c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	edc3 7a08 	vstr	s15, [r3, #32]
 80030da:	e020      	b.n	800311e <update_sensorStatus+0x1ca>
    }
  }
  else if (sID == ism330dhcx_com_id)
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <update_sensorStatus+0x210>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	79fa      	ldrb	r2, [r7, #7]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d11b      	bne.n	800311e <update_sensorStatus+0x1ca>
  {        
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	edd3 7a07 	vldr	s15, [r3, #28]
 80030ec:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003158 <update_sensorStatus+0x204>
 80030f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	edc3 7a08 	vstr	s15, [r3, #32]
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003108:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003168 <update_sensorStatus+0x214>
 800310c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003110:	eddf 6a16 	vldr	s13, [pc, #88]	; 800316c <update_sensorStatus+0x218>
 8003114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  }
  
  /* CHANNEL NUMBER */
  if(oldSensorStatus->comChannelNumber != newSensorStatus->comChannelNumber)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800312a:	429a      	cmp	r2, r3
 800312c:	d004      	beq.n	8003138 <update_sensorStatus+0x1e4>
  {
    oldSensorStatus->comChannelNumber = newSensorStatus->comChannelNumber; /* Todo Setters and getters */         
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	831a      	strh	r2, [r3, #24]
  }  
  
   /* CHANNEL NUMBER */
  if(oldSensorStatus->samplesPerTimestamp != newSensorStatus->samplesPerTimestamp)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	899a      	ldrh	r2, [r3, #12]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	899b      	ldrh	r3, [r3, #12]
 8003140:	429a      	cmp	r2, r3
 8003142:	d003      	beq.n	800314c <update_sensorStatus+0x1f8>
  {
    oldSensorStatus->samplesPerTimestamp = newSensorStatus->samplesPerTimestamp; /* Todo Setters and getters */         
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	899a      	ldrh	r2, [r3, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	819a      	strh	r2, [r3, #12]
  }  
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	200163a4 	.word	0x200163a4
 8003158:	3d79db23 	.word	0x3d79db23
 800315c:	200166c8 	.word	0x200166c8
 8003160:	3d800000 	.word	0x3d800000
 8003164:	200166b9 	.word	0x200166b9
 8003168:	408c0000 	.word	0x408c0000
 800316c:	42fa0000 	.word	0x42fa0000

08003170 <update_sensors_config>:

void update_sensors_config(void)
{  
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;  
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);  
 8003176:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <update_sensors_config+0x1c4>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fdce 	bl	8001d1c <COM_GetSensor>
 8003180:	6078      	str	r0, [r7, #4]
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003188:	4a6b      	ldr	r2, [pc, #428]	; (8003338 <update_sensors_config+0x1c8>)
 800318a:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003192:	4a69      	ldr	r2, [pc, #420]	; (8003338 <update_sensors_config+0x1c8>)
 8003194:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800319c:	4b66      	ldr	r3, [pc, #408]	; (8003338 <update_sensors_config+0x1c8>)
 800319e:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(hts221_com_id);
 80031a0:	4b66      	ldr	r3, [pc, #408]	; (800333c <update_sensors_config+0x1cc>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fdb9 	bl	8001d1c <COM_GetSensor>
 80031aa:	6078      	str	r0, [r7, #4]
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80031b2:	4a63      	ldr	r2, [pc, #396]	; (8003340 <update_sensors_config+0x1d0>)
 80031b4:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80031bc:	4a60      	ldr	r2, [pc, #384]	; (8003340 <update_sensors_config+0x1d0>)
 80031be:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80031c6:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <update_sensors_config+0x1d0>)
 80031c8:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80031d0:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <update_sensors_config+0x1d0>)
 80031d2:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80031da:	4b59      	ldr	r3, [pc, #356]	; (8003340 <update_sensors_config+0x1d0>)
 80031dc:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(iis2dh_com_id);
 80031de:	4b59      	ldr	r3, [pc, #356]	; (8003344 <update_sensors_config+0x1d4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd9a 	bl	8001d1c <COM_GetSensor>
 80031e8:	6078      	str	r0, [r7, #4]
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80031f0:	4a55      	ldr	r2, [pc, #340]	; (8003348 <update_sensors_config+0x1d8>)
 80031f2:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80031fa:	4a53      	ldr	r2, [pc, #332]	; (8003348 <update_sensors_config+0x1d8>)
 80031fc:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <update_sensors_config+0x1d8>)
 8003206:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <update_sensors_config+0x1dc>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe fd85 	bl	8001d1c <COM_GetSensor>
 8003212:	6078      	str	r0, [r7, #4]
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800321a:	4a4d      	ldr	r2, [pc, #308]	; (8003350 <update_sensors_config+0x1e0>)
 800321c:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003224:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <update_sensors_config+0x1e0>)
 8003226:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800322e:	4b48      	ldr	r3, [pc, #288]	; (8003350 <update_sensors_config+0x1e0>)
 8003230:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 8003232:	4b48      	ldr	r3, [pc, #288]	; (8003354 <update_sensors_config+0x1e4>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fd70 	bl	8001d1c <COM_GetSensor>
 800323c:	6078      	str	r0, [r7, #4]
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003244:	4a44      	ldr	r2, [pc, #272]	; (8003358 <update_sensors_config+0x1e8>)
 8003246:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800324e:	4a42      	ldr	r2, [pc, #264]	; (8003358 <update_sensors_config+0x1e8>)
 8003250:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003258:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <update_sensors_config+0x1e8>)
 800325a:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(ism330dhcx_com_id);
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <update_sensors_config+0x1ec>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fd5b 	bl	8001d1c <COM_GetSensor>
 8003266:	6078      	str	r0, [r7, #4]
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800326e:	4a3c      	ldr	r2, [pc, #240]	; (8003360 <update_sensors_config+0x1f0>)
 8003270:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003278:	4a39      	ldr	r2, [pc, #228]	; (8003360 <update_sensors_config+0x1f0>)
 800327a:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003282:	4a37      	ldr	r2, [pc, #220]	; (8003360 <update_sensors_config+0x1f0>)
 8003284:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800328c:	4b34      	ldr	r3, [pc, #208]	; (8003360 <update_sensors_config+0x1f0>)
 800328e:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8003296:	4b32      	ldr	r3, [pc, #200]	; (8003360 <update_sensors_config+0x1f0>)
 8003298:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 800329a:	4b32      	ldr	r3, [pc, #200]	; (8003364 <update_sensors_config+0x1f4>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fd3c 	bl	8001d1c <COM_GetSensor>
 80032a4:	6078      	str	r0, [r7, #4]
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80032ac:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <update_sensors_config+0x1f8>)
 80032ae:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80032b6:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <update_sensors_config+0x1f8>)
 80032b8:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80032c0:	4a29      	ldr	r2, [pc, #164]	; (8003368 <update_sensors_config+0x1f8>)
 80032c2:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <update_sensors_config+0x1f8>)
 80032cc:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive; 
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <update_sensors_config+0x1f8>)
 80032d6:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(mp23abs1_com_id);
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <update_sensors_config+0x1fc>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fd1d 	bl	8001d1c <COM_GetSensor>
 80032e2:	6078      	str	r0, [r7, #4]
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <update_sensors_config+0x200>)
 80032ec:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80032f4:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <update_sensors_config+0x200>)
 80032f6:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80032fe:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <update_sensors_config+0x200>)
 8003300:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <update_sensors_config+0x204>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fd08 	bl	8001d1c <COM_GetSensor>
 800330c:	6078      	str	r0, [r7, #4]
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003314:	4a18      	ldr	r2, [pc, #96]	; (8003378 <update_sensors_config+0x208>)
 8003316:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <update_sensors_config+0x208>)
 8003320:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <update_sensors_config+0x208>)
 800332a:	751a      	strb	r2, [r3, #20]
  
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200163a4 	.word	0x200163a4
 8003338:	200102ec 	.word	0x200102ec
 800333c:	200166b8 	.word	0x200166b8
 8003340:	2001025c 	.word	0x2001025c
 8003344:	200166c8 	.word	0x200166c8
 8003348:	20010288 	.word	0x20010288
 800334c:	20016679 	.word	0x20016679
 8003350:	200102c0 	.word	0x200102c0
 8003354:	200166c0 	.word	0x200166c0
 8003358:	2001523c 	.word	0x2001523c
 800335c:	200166b9 	.word	0x200166b9
 8003360:	20016370 	.word	0x20016370
 8003364:	200166d1 	.word	0x200166d1
 8003368:	2001638c 	.word	0x2001638c
 800336c:	20016678 	.word	0x20016678
 8003370:	2001681c 	.word	0x2001681c
 8003374:	200166d0 	.word	0x200166d0
 8003378:	20018b18 	.word	0x20018b18

0800337c <HTS221_Set_State>:
  
  osSemaphoreRelease(hts221_data_ready_sem_id);    
}

void HTS221_Set_State(SM_Sensor_State_t newState)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
  HTS221_Sensor_State = newState;
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HTS221_Set_State+0x1c>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	7013      	strb	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000001 	.word	0x20000001

0800339c <HTS221_Start>:
  HTS221_Init_Param.FS[0] = newFS1;
  HTS221_Init_Param.FS[0] = newFS2;
}

void HTS221_Start(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80033a0:	2003      	movs	r0, #3
 80033a2:	f7ff ffeb 	bl	800337c <HTS221_Set_State>
  osThreadResume(HTS221_Thread_Id);
 80033a6:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HTS221_Start+0x18>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f015 fbcc 	bl	8018b48 <osThreadResume>
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	2001027c 	.word	0x2001027c

080033b8 <HTS221_Stop>:

void HTS221_Stop(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80033bc:	2001      	movs	r0, #1
 80033be:	f7ff ffdd 	bl	800337c <HTS221_Set_State>
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <IIS2DH_Set_State>:
{
  osSemaphoreRelease( iis2dh_DreadySem_id);    
}

void IIS2DH_Set_State(SM_Sensor_State_t newState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  IIS2DH_Sensor_State = newState;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <IIS2DH_Set_State+0x1c>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	7013      	strb	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	20000002 	.word	0x20000002

080033e8 <IIS2DH_Start>:
  IIS2DH_Init_Param.FS[0] = newFS1;
  IIS2DH_Init_Param.FS[0] = newFS2;
}

void IIS2DH_Start(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80033ec:	2003      	movs	r0, #3
 80033ee:	f7ff ffeb 	bl	80033c8 <IIS2DH_Set_State>
  osThreadResume(IIS2DH_Thread_Id);
 80033f2:	4b03      	ldr	r3, [pc, #12]	; (8003400 <IIS2DH_Start+0x18>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f015 fba6 	bl	8018b48 <osThreadResume>
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200102a4 	.word	0x200102a4

08003404 <IIS2DH_Stop>:

void IIS2DH_Stop(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003408:	2001      	movs	r0, #1
 800340a:	f7ff ffdd 	bl	80033c8 <IIS2DH_Set_State>
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <IIS2MDC_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(iis2mdc_data_ready_sem_id);    
}

void IIS2MDC_Set_State(SM_Sensor_State_t newState)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  IIS2MDC_Sensor_State = newState;
 800341e:	4a04      	ldr	r2, [pc, #16]	; (8003430 <IIS2MDC_Set_State+0x1c>)
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	7013      	strb	r3, [r2, #0]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	20000003 	.word	0x20000003

08003434 <IIS2MDC_Start>:
  IIS2MDC_Init_Param.FS[0] = newFS1;
  IIS2MDC_Init_Param.FS[0] = newFS2;
}

void IIS2MDC_Start(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003438:	2003      	movs	r0, #3
 800343a:	f7ff ffeb 	bl	8003414 <IIS2MDC_Set_State>
  osThreadResume(IIS2MDC_Thread_Id);
 800343e:	4b03      	ldr	r3, [pc, #12]	; (800344c <IIS2MDC_Start+0x18>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f015 fb80 	bl	8018b48 <osThreadResume>
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	200102d8 	.word	0x200102d8

08003450 <IIS2MDC_Stop>:

void IIS2MDC_Stop(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003454:	2001      	movs	r0, #1
 8003456:	f7ff ffdd 	bl	8003414 <IIS2MDC_Set_State>
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <IIS3DWB_Peripheral_Init>:
* @brief IIS3DWB GPIO Initialization Function
* @param None
* @retval None
*/
void IIS3DWB_Peripheral_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	60da      	str	r2, [r3, #12]
 8003474:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOE_CLK_ENABLE();
//  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();		//SPI2_CS
 8003476:	4b3a      	ldr	r3, [pc, #232]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	4a39      	ldr	r2, [pc, #228]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();		//SPI2_MOSI,SPI2_INT
 800348e:	4b34      	ldr	r3, [pc, #208]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	4a33      	ldr	r2, [pc, #204]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();		//SPI2_CLK,SPI2_MISO
 80034a6:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 80034a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034aa:	4a2d      	ldr	r2, [pc, #180]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();		//SEL_3_4
 80034be:	4b28      	ldr	r3, [pc, #160]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	4a27      	ldr	r2, [pc, #156]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 80034c4:	f043 0320 	orr.w	r3, r3, #32
 80034c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ca:	4b25      	ldr	r3, [pc, #148]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();		//SEL_1_2
 80034d6:	4b22      	ldr	r3, [pc, #136]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	4a21      	ldr	r2, [pc, #132]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 80034dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e2:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <IIS3DWB_Peripheral_Init+0x100>)
 80034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 80034ee:	2201      	movs	r2, #1
 80034f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034f4:	481b      	ldr	r0, [pc, #108]	; (8003564 <IIS3DWB_Peripheral_Init+0x104>)
 80034f6:	f006 fac1 	bl	8009a7c <HAL_GPIO_WritePin>
  
  //Configure GPIO pin Output Level of 1_2_SEL and 3_4_SEL
  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2101      	movs	r1, #1
 80034fe:	481a      	ldr	r0, [pc, #104]	; (8003568 <IIS3DWB_Peripheral_Init+0x108>)
 8003500:	f006 fabc 	bl	8009a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);
 8003504:	2201      	movs	r2, #1
 8003506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800350a:	4818      	ldr	r0, [pc, #96]	; (800356c <IIS3DWB_Peripheral_Init+0x10c>)
 800350c:	f006 fab6 	bl	8009a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IIS3DWB_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 8003510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800351e:	2302      	movs	r3, #2
 8003520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003522:	f107 0314 	add.w	r3, r7, #20
 8003526:	4619      	mov	r1, r3
 8003528:	480e      	ldr	r0, [pc, #56]	; (8003564 <IIS3DWB_Peripheral_Init+0x104>)
 800352a:	f006 f8fd 	bl	8009728 <HAL_GPIO_Init>
  
  /*Configure GPIO pins : STTS751_INT_Pin IIS3DWB_INT1_Pin */
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 800352e:	2320      	movs	r3, #32
 8003530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 8003534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);  
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	4619      	mov	r1, r3
 8003540:	480c      	ldr	r0, [pc, #48]	; (8003574 <IIS3DWB_Peripheral_Init+0x114>)
 8003542:	f006 f8f1 	bl	8009728 <HAL_GPIO_Init>
  
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2105      	movs	r1, #5
 800354a:	2017      	movs	r0, #23
 800354c:	f005 fe35 	bl	80091ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003550:	2017      	movs	r0, #23
 8003552:	f005 fe4e 	bl	80091f2 <HAL_NVIC_EnableIRQ>
//  HAL_EXTI_GetHandle(&iis3dwb_exti, EXTI_LINE_5);
//  HAL_EXTI_RegisterCallback(&iis3dwb_exti,  HAL_EXTI_COMMON_CB_ID, IIS3DWB_Int_Callback);
  
}
 8003556:	bf00      	nop
 8003558:	3728      	adds	r7, #40	; 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	48000400 	.word	0x48000400
 8003568:	48001800 	.word	0x48001800
 800356c:	48001400 	.word	0x48001400
 8003570:	10110000 	.word	0x10110000
 8003574:	48001000 	.word	0x48001000

08003578 <IIS3DWB_OS_Init>:
* @brief IIS3DWB Threads Creation
* @param None
* @retval None
*/
void IIS3DWB_OS_Init(void)
{  
 8003578:	b5b0      	push	{r4, r5, r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
  /* Data read complete semaphore initialization */  
  iis3dwb_data_read_cmplt_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_read_cmplt_sem), 1);
 800357e:	2101      	movs	r1, #1
 8003580:	481f      	ldr	r0, [pc, #124]	; (8003600 <IIS3DWB_OS_Init+0x88>)
 8003582:	f015 f85b 	bl	801863c <osSemaphoreCreate>
 8003586:	4603      	mov	r3, r0
 8003588:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <IIS3DWB_OS_Init+0x8c>)
 800358a:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_read_cmplt_sem_id, "iis3dwb_data_read_cmplt_sem_id" );
 800358c:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <IIS3DWB_OS_Init+0x8c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	491d      	ldr	r1, [pc, #116]	; (8003608 <IIS3DWB_OS_Init+0x90>)
 8003592:	4618      	mov	r0, r3
 8003594:	f016 fa60 	bl	8019a58 <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_read_cmplt_sem_id,osWaitForever);
 8003598:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <IIS3DWB_OS_Init+0x8c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f04f 31ff 	mov.w	r1, #4294967295
 80035a0:	4618      	mov	r0, r3
 80035a2:	f015 f86f 	bl	8018684 <osSemaphoreWait>
  
  /* Data ready interrupt semaphore initialization */  
  iis3dwb_data_ready_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_ready_sem), 1);
 80035a6:	2101      	movs	r1, #1
 80035a8:	4818      	ldr	r0, [pc, #96]	; (800360c <IIS3DWB_OS_Init+0x94>)
 80035aa:	f015 f847 	bl	801863c <osSemaphoreCreate>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a17      	ldr	r2, [pc, #92]	; (8003610 <IIS3DWB_OS_Init+0x98>)
 80035b2:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_ready_sem_id, "iis3dwb_data_ready_sem_id" );
 80035b4:	4b16      	ldr	r3, [pc, #88]	; (8003610 <IIS3DWB_OS_Init+0x98>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4916      	ldr	r1, [pc, #88]	; (8003614 <IIS3DWB_OS_Init+0x9c>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	f016 fa4c 	bl	8019a58 <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <IIS3DWB_OS_Init+0x98>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	4618      	mov	r0, r3
 80035ca:	f015 f85b 	bl	8018684 <osSemaphoreWait>
  

  /* Thread definition: read data */  
  osThreadDef(IIS3DWB_Acquisition_Thread, IIS3DWB_Thread, IIS3DWB_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);  
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <IIS3DWB_OS_Init+0xa0>)
 80035d0:	1d3c      	adds	r4, r7, #4
 80035d2:	461d      	mov	r5, r3
 80035d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  IIS3DWB_Thread_Id = osThreadCreate(osThread(IIS3DWB_Acquisition_Thread), NULL); 
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f015 f804 	bl	80185ee <osThreadCreate>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4a0c      	ldr	r2, [pc, #48]	; (800361c <IIS3DWB_OS_Init+0xa4>)
 80035ea:	6013      	str	r3, [r2, #0]
  osThreadSuspend(IIS3DWB_Thread_Id);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <IIS3DWB_OS_Init+0xa4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f015 fa9c 	bl	8018b2e <osThreadSuspend>
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bdb0      	pop	{r4, r5, r7, pc}
 80035fe:	bf00      	nop
 8003600:	08023ae4 	.word	0x08023ae4
 8003604:	2000050c 	.word	0x2000050c
 8003608:	08023730 	.word	0x08023730
 800360c:	08023ae0 	.word	0x08023ae0
 8003610:	20000508 	.word	0x20000508
 8003614:	08023750 	.word	0x08023750
 8003618:	0802376c 	.word	0x0802376c
 800361c:	200102e8 	.word	0x200102e8

08003620 <IIS3DWB_Thread>:


static void IIS3DWB_Thread(void const *argument)
{
 8003620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003624:	b088      	sub	sp, #32
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  (void) argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_IIS3DWB_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_IIS3DWB_DEBUG_PIN );
 800362a:	2101      	movs	r1, #1
 800362c:	2000      	movs	r0, #0
 800362e:	f016 ff0f 	bl	801a450 <vTaskSetApplicationTaskTag>
#endif
  
  uint8_t reg0;
  uint8_t reg1;
  
  volatile uint16_t fifo_level = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	823b      	strh	r3, [r7, #16]
  
  for (;;)
  {
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 8003636:	4bae      	ldr	r3, [pc, #696]	; (80038f0 <IIS3DWB_Thread+0x2d0>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b03      	cmp	r3, #3
 800363c:	f040 8094 	bne.w	8003768 <IIS3DWB_Thread+0x148>
    {  
      ts_iis3dwb = 0;
 8003640:	49ac      	ldr	r1, [pc, #688]	; (80038f4 <IIS3DWB_Thread+0x2d4>)
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	e9c1 2300 	strd	r2, r3, [r1]
      tim_value_old = 0;
 800364e:	4baa      	ldr	r3, [pc, #680]	; (80038f8 <IIS3DWB_Thread+0x2d8>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
      
      iis3dwb_device_id_get( &iis3dwb_ctx_instance, (uint8_t *)&reg0);
 8003654:	f107 0313 	add.w	r3, r7, #19
 8003658:	4619      	mov	r1, r3
 800365a:	48a8      	ldr	r0, [pc, #672]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 800365c:	f003 fa4f 	bl	8006afe <iis3dwb_device_id_get>
      iis3dwb_reset_set(&iis3dwb_ctx_instance, 1);
 8003660:	2101      	movs	r1, #1
 8003662:	48a6      	ldr	r0, [pc, #664]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 8003664:	f003 fa5c 	bl	8006b20 <iis3dwb_reset_set>
      iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 8003668:	f107 0213 	add.w	r2, r7, #19
 800366c:	2301      	movs	r3, #1
 800366e:	2110      	movs	r1, #16
 8003670:	48a2      	ldr	r0, [pc, #648]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 8003672:	f003 f9c8 	bl	8006a06 <iis3dwb_read_reg>
      reg0 |= 0xA0;
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800367c:	b2db      	uxtb	r3, r3
 800367e:	74fb      	strb	r3, [r7, #19]
      iis3dwb_write_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 8003680:	f107 0213 	add.w	r2, r7, #19
 8003684:	2301      	movs	r3, #1
 8003686:	2110      	movs	r1, #16
 8003688:	489c      	ldr	r0, [pc, #624]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 800368a:	f003 f9d4 	bl	8006a36 <iis3dwb_write_reg>
      /*Set fifo in continuous / stream mode*/
      iis3dwb_i2c_interface_set(&iis3dwb_ctx_instance, IIS3DWB_I2C_DISABLE); 
 800368e:	2101      	movs	r1, #1
 8003690:	489a      	ldr	r0, [pc, #616]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 8003692:	f003 fac3 	bl	8006c1c <iis3dwb_i2c_interface_set>
      iis3dwb_fifo_mode_set(&iis3dwb_ctx_instance, IIS3DWB_STREAM_MODE); 
 8003696:	2106      	movs	r1, #6
 8003698:	4898      	ldr	r0, [pc, #608]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 800369a:	f003 fb5d 	bl	8006d58 <iis3dwb_fifo_mode_set>
      /*Set watermark*/
      iis3dwb_fifo_watermark_set(&iis3dwb_ctx_instance, IIS3DWB_WTM_LEVEL);
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	4896      	ldr	r0, [pc, #600]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 80036a2:	f003 fafd 	bl	8006ca0 <iis3dwb_fifo_watermark_set>
      /*Data Ready pulse mode*/
      iis3dwb_data_ready_mode_set(&iis3dwb_ctx_instance, IIS3DWB_DRDY_PULSED);
 80036a6:	2101      	movs	r1, #1
 80036a8:	4894      	ldr	r0, [pc, #592]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 80036aa:	f003 fa02 	bl	8006ab2 <iis3dwb_data_ready_mode_set>
      /*Set full scale*/
      if(IIS3DWB_Init_Param.FS[0] < 3.0f)
 80036ae:	4b94      	ldr	r3, [pc, #592]	; (8003900 <IIS3DWB_Thread+0x2e0>)
 80036b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80036b4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80036b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c0:	d504      	bpl.n	80036cc <IIS3DWB_Thread+0xac>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_2g);
 80036c2:	2100      	movs	r1, #0
 80036c4:	488d      	ldr	r0, [pc, #564]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 80036c6:	f003 f9ce 	bl	8006a66 <iis3dwb_xl_full_scale_set>
 80036ca:	e02b      	b.n	8003724 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 5.0f)
 80036cc:	4b8c      	ldr	r3, [pc, #560]	; (8003900 <IIS3DWB_Thread+0x2e0>)
 80036ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80036d2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80036d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036de:	d504      	bpl.n	80036ea <IIS3DWB_Thread+0xca>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_4g);
 80036e0:	2102      	movs	r1, #2
 80036e2:	4886      	ldr	r0, [pc, #536]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 80036e4:	f003 f9bf 	bl	8006a66 <iis3dwb_xl_full_scale_set>
 80036e8:	e01c      	b.n	8003724 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 9.0f)
 80036ea:	4b85      	ldr	r3, [pc, #532]	; (8003900 <IIS3DWB_Thread+0x2e0>)
 80036ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80036f0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80036f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	d504      	bpl.n	8003708 <IIS3DWB_Thread+0xe8>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_8g);
 80036fe:	2103      	movs	r1, #3
 8003700:	487e      	ldr	r0, [pc, #504]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 8003702:	f003 f9b0 	bl	8006a66 <iis3dwb_xl_full_scale_set>
 8003706:	e00d      	b.n	8003724 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 17.0f)
 8003708:	4b7d      	ldr	r3, [pc, #500]	; (8003900 <IIS3DWB_Thread+0x2e0>)
 800370a:	edd3 7a01 	vldr	s15, [r3, #4]
 800370e:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8003712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371a:	d503      	bpl.n	8003724 <IIS3DWB_Thread+0x104>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_16g);
 800371c:	2101      	movs	r1, #1
 800371e:	4877      	ldr	r0, [pc, #476]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 8003720:	f003 f9a1 	bl	8006a66 <iis3dwb_xl_full_scale_set>
      
      /*Set 2nd stage filter*/
      iis3dwb_xl_hp_path_on_out_set(&iis3dwb_ctx_instance,IIS3DWB_LP_5kHz);
 8003724:	2100      	movs	r1, #0
 8003726:	4875      	ldr	r0, [pc, #468]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 8003728:	f003 fa20 	bl	8006b6c <iis3dwb_xl_hp_path_on_out_set>
      /* FIFO_WTM_IA routing on pin INT1 */
      iis3dwb_pin_int1_route_t pin_int1_route;
      *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 800372c:	f107 030c 	add.w	r3, r7, #12
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
      *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	3301      	adds	r3, #1
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
      pin_int1_route.int1_ctrl.int1_fifo_th = 1;
 800373e:	7b3b      	ldrb	r3, [r7, #12]
 8003740:	f043 0308 	orr.w	r3, r3, #8
 8003744:	733b      	strb	r3, [r7, #12]
      iis3dwb_pin_int1_route_set(&iis3dwb_ctx_instance, &pin_int1_route);
 8003746:	f107 030c 	add.w	r3, r7, #12
 800374a:	4619      	mov	r1, r3
 800374c:	486b      	ldr	r0, [pc, #428]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 800374e:	f003 fa8b 	bl	8006c68 <iis3dwb_pin_int1_route_set>
      
      /*Enable writing to FIFO*/
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 8003752:	210a      	movs	r1, #10
 8003754:	4869      	ldr	r0, [pc, #420]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 8003756:	f003 fad9 	bl	8006d0c <iis3dwb_fifo_xl_batch_set>
      
      HAL_NVIC_EnableIRQ(IIS3DWB_INT1_EXTI_IRQn); 
 800375a:	2017      	movs	r0, #23
 800375c:	f005 fd49 	bl	80091f2 <HAL_NVIC_EnableIRQ>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_RUNNING;      
 8003760:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <IIS3DWB_Thread+0x2d0>)
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e766      	b.n	8003636 <IIS3DWB_Thread+0x16>
    }
    else if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING)
 8003768:	4b61      	ldr	r3, [pc, #388]	; (80038f0 <IIS3DWB_Thread+0x2d0>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f040 80ad 	bne.w	80038cc <IIS3DWB_Thread+0x2ac>
    {  
      osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);     
 8003772:	4b64      	ldr	r3, [pc, #400]	; (8003904 <IIS3DWB_Thread+0x2e4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f04f 31ff 	mov.w	r1, #4294967295
 800377a:	4618      	mov	r0, r3
 800377c:	f014 ff82 	bl	8018684 <osSemaphoreWait>
      
      if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING) /* Change of state can happen while task blocked */
 8003780:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <IIS3DWB_Thread+0x2d0>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f47f af56 	bne.w	8003636 <IIS3DWB_Thread+0x16>
      {
        /* Check FIFO_WTM_IA anf fifo level. We do not use PID in order to avoid reading one register twice */
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS1, &reg0, 1);
 800378a:	f107 0213 	add.w	r2, r7, #19
 800378e:	2301      	movs	r3, #1
 8003790:	213a      	movs	r1, #58	; 0x3a
 8003792:	485a      	ldr	r0, [pc, #360]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 8003794:	f003 f937 	bl	8006a06 <iis3dwb_read_reg>
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS2, &reg1, 1);        
 8003798:	f107 0212 	add.w	r2, r7, #18
 800379c:	2301      	movs	r3, #1
 800379e:	213b      	movs	r1, #59	; 0x3b
 80037a0:	4856      	ldr	r0, [pc, #344]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 80037a2:	f003 f930 	bl	8006a06 <iis3dwb_read_reg>
        fifo_level = ((reg1 & 0x03) << 8) + reg0; 
 80037a6:	7cbb      	ldrb	r3, [r7, #18]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	823b      	strh	r3, [r7, #16]
        if((reg1) & 0x80  && (fifo_level>=IIS3DWB_SAMPLES_PER_IT) )
 80037bc:	7cbb      	ldrb	r3, [r7, #18]
 80037be:	b25b      	sxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f6bf af38 	bge.w	8003636 <IIS3DWB_Thread+0x16>
 80037c6:	8a3b      	ldrh	r3, [r7, #16]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b7f      	cmp	r3, #127	; 0x7f
 80037cc:	f67f af33 	bls.w	8003636 <IIS3DWB_Thread+0x16>
        {        
          if(tim_value >= tim_value_old)
 80037d0:	4b4d      	ldr	r3, [pc, #308]	; (8003908 <IIS3DWB_Thread+0x2e8>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b48      	ldr	r3, [pc, #288]	; (80038f8 <IIS3DWB_Thread+0x2d8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d307      	bcc.n	80037ec <IIS3DWB_Thread+0x1cc>
          {
            period = tim_value - tim_value_old;
 80037dc:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <IIS3DWB_Thread+0x2e8>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b45      	ldr	r3, [pc, #276]	; (80038f8 <IIS3DWB_Thread+0x2d8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	4a49      	ldr	r2, [pc, #292]	; (800390c <IIS3DWB_Thread+0x2ec>)
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e007      	b.n	80037fc <IIS3DWB_Thread+0x1dc>
          }
          else
          {
            period = tim_value + (0xFFFFFFFF - tim_value_old);
 80037ec:	4b46      	ldr	r3, [pc, #280]	; (8003908 <IIS3DWB_Thread+0x2e8>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <IIS3DWB_Thread+0x2d8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	4a44      	ldr	r2, [pc, #272]	; (800390c <IIS3DWB_Thread+0x2ec>)
 80037fa:	6013      	str	r3, [r2, #0]
          }
          
          tim_value_old = tim_value;
 80037fc:	4b42      	ldr	r3, [pc, #264]	; (8003908 <IIS3DWB_Thread+0x2e8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a3d      	ldr	r2, [pc, #244]	; (80038f8 <IIS3DWB_Thread+0x2d8>)
 8003802:	6013      	str	r3, [r2, #0]
          ts_iis3dwb +=  period;
 8003804:	4b41      	ldr	r3, [pc, #260]	; (800390c <IIS3DWB_Thread+0x2ec>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <IIS3DWB_Thread+0x2d4>)
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	1884      	adds	r4, r0, r2
 8003816:	eb41 0503 	adc.w	r5, r1, r3
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <IIS3DWB_Thread+0x2d4>)
 800381c:	e9c3 4500 	strd	r4, r5, [r3]
          
          uint16_t i = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	83fb      	strh	r3, [r7, #30]
          iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 8003824:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003828:	4a39      	ldr	r2, [pc, #228]	; (8003910 <IIS3DWB_Thread+0x2f0>)
 800382a:	2178      	movs	r1, #120	; 0x78
 800382c:	4833      	ldr	r0, [pc, #204]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 800382e:	f003 f8ea 	bl	8006a06 <iis3dwb_read_reg>
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
          }
#else
          int16_t * p16src = (int16_t *)iis3dwb_mem;
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <IIS3DWB_Thread+0x2f0>)
 8003834:	61bb      	str	r3, [r7, #24]
          int16_t * p16dest = (int16_t *)iis3dwb_mem;
 8003836:	4b36      	ldr	r3, [pc, #216]	; (8003910 <IIS3DWB_Thread+0x2f0>)
 8003838:	617b      	str	r3, [r7, #20]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 800383a:	2300      	movs	r3, #0
 800383c:	83fb      	strh	r3, [r7, #30]
 800383e:	e020      	b.n	8003882 <IIS3DWB_Thread+0x262>
          {      
            p16src = (int16_t *)&((uint8_t *)(p16src))[1];          
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	3301      	adds	r3, #1
 8003844:	61bb      	str	r3, [r7, #24]
            *p16dest++ = *p16src++;
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	1c93      	adds	r3, r2, #2
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	1c99      	adds	r1, r3, #2
 8003850:	6179      	str	r1, [r7, #20]
 8003852:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003856:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	1c93      	adds	r3, r2, #2
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	1c99      	adds	r1, r3, #2
 8003862:	6179      	str	r1, [r7, #20]
 8003864:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003868:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	1c93      	adds	r3, r2, #2
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	1c99      	adds	r1, r3, #2
 8003874:	6179      	str	r1, [r7, #20]
 8003876:	f9b2 2000 	ldrsh.w	r2, [r2]
 800387a:	801a      	strh	r2, [r3, #0]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 800387c:	8bfb      	ldrh	r3, [r7, #30]
 800387e:	3301      	adds	r3, #1
 8003880:	83fb      	strh	r3, [r7, #30]
 8003882:	8bfb      	ldrh	r3, [r7, #30]
 8003884:	2b7f      	cmp	r3, #127	; 0x7f
 8003886:	d9db      	bls.n	8003840 <IIS3DWB_Thread+0x220>
          }
#endif  
          IIS3DWB_Data_Ready((uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 6, (double)ts_iis3dwb/(double)SystemCoreClock);        
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <IIS3DWB_Thread+0x2d4>)
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f7fc fea3 	bl	80005dc <__aeabi_ul2d>
 8003896:	4680      	mov	r8, r0
 8003898:	4689      	mov	r9, r1
 800389a:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <IIS3DWB_Thread+0x2f4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fc fe58 	bl	8000554 <__aeabi_ui2d>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4640      	mov	r0, r8
 80038aa:	4649      	mov	r1, r9
 80038ac:	f7fc fff6 	bl	800089c <__aeabi_ddiv>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	ec43 2b17 	vmov	d7, r2, r3
 80038b8:	eeb0 0a47 	vmov.f32	s0, s14
 80038bc:	eef0 0a67 	vmov.f32	s1, s15
 80038c0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80038c4:	4812      	ldr	r0, [pc, #72]	; (8003910 <IIS3DWB_Thread+0x2f0>)
 80038c6:	f000 fc7b 	bl	80041c0 <IIS3DWB_Data_Ready>
 80038ca:	e6b4      	b.n	8003636 <IIS3DWB_Thread+0x16>
        }
      }
    }
    else if ( IIS3DWB_Sensor_State == SM_SENSOR_STATE_SUSPENDING)
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <IIS3DWB_Thread+0x2d0>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	f47f aeb0 	bne.w	8003636 <IIS3DWB_Thread+0x16>
    {
#ifdef DATA_TEST
      usbTestData = 0;
#endif      
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_NOT_BATCHED);
 80038d6:	2100      	movs	r1, #0
 80038d8:	4808      	ldr	r0, [pc, #32]	; (80038fc <IIS3DWB_Thread+0x2dc>)
 80038da:	f003 fa17 	bl	8006d0c <iis3dwb_fifo_xl_batch_set>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_SUSPENDED;
 80038de:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <IIS3DWB_Thread+0x2d0>)
 80038e0:	2202      	movs	r2, #2
 80038e2:	701a      	strb	r2, [r3, #0]
      osThreadSuspend(IIS3DWB_Thread_Id);
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <IIS3DWB_Thread+0x2f8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f015 f920 	bl	8018b2e <osThreadSuspend>
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 80038ee:	e6a2      	b.n	8003636 <IIS3DWB_Thread+0x16>
 80038f0:	20000004 	.word	0x20000004
 80038f4:	200008a0 	.word	0x200008a0
 80038f8:	20000894 	.word	0x20000894
 80038fc:	20000018 	.word	0x20000018
 8003900:	200102ec 	.word	0x200102ec
 8003904:	20000508 	.word	0x20000508
 8003908:	20000890 	.word	0x20000890
 800390c:	20000898 	.word	0x20000898
 8003910:	20000510 	.word	0x20000510
 8003914:	20000038 	.word	0x20000038
 8003918:	200102e8 	.word	0x200102e8

0800391c <UpdateTimerValue>:
{
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(iis3dwb_data_ready_sem_id);
}

void UpdateTimerValue(void){
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	tim_value = hsm_tim.Instance->CNT;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <UpdateTimerValue+0x1c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	4a05      	ldr	r2, [pc, #20]	; (800393c <UpdateTimerValue+0x20>)
 8003928:	6013      	str	r3, [r2, #0]
	osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <UpdateTimerValue+0x24>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f014 fef6 	bl	8018720 <osSemaphoreRelease>
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20018900 	.word	0x20018900
 800393c:	20000890 	.word	0x20000890
 8003940:	20000508 	.word	0x20000508

08003944 <IIS3DWB_Set_State>:

void IIS3DWB_Set_State(SM_Sensor_State_t newState)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  IIS3DWB_Sensor_State = newState;
 800394e:	4a04      	ldr	r2, [pc, #16]	; (8003960 <IIS3DWB_Set_State+0x1c>)
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	7013      	strb	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	20000004 	.word	0x20000004

08003964 <IIS3DWB_Start>:
  IIS3DWB_Init_Param.FS[0] = newFS1;
  IIS3DWB_Init_Param.FS[0] = newFS2;
}

void IIS3DWB_Start(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003968:	2003      	movs	r0, #3
 800396a:	f7ff ffeb 	bl	8003944 <IIS3DWB_Set_State>
  osThreadResume(IIS3DWB_Thread_Id);
 800396e:	4b03      	ldr	r3, [pc, #12]	; (800397c <IIS3DWB_Start+0x18>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f015 f8e8 	bl	8018b48 <osThreadResume>
}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200102e8 	.word	0x200102e8

08003980 <IIS3DWB_Stop>:

void IIS3DWB_Stop(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_SUSPENDING);  
 8003984:	2001      	movs	r0, #1
 8003986:	f7ff ffdd 	bl	8003944 <IIS3DWB_Set_State>
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <IMP34DT05_Set_State>:
  
}


void IMP34DT05_Set_State(SM_Sensor_State_t newState)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
  IMP34DT05_Sensor_State = newState;
 800399a:	4a04      	ldr	r2, [pc, #16]	; (80039ac <IMP34DT05_Set_State+0x1c>)
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	7013      	strb	r3, [r2, #0]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	20000024 	.word	0x20000024

080039b0 <IMP34DT05_Start>:
  IMP34DT05_Init_Param.FS[0] = newFS1;
  IMP34DT05_Init_Param.FS[0] = newFS2;
}

void IMP34DT05_Start(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80039b4:	2003      	movs	r0, #3
 80039b6:	f7ff ffeb 	bl	8003990 <IMP34DT05_Set_State>
  osThreadResume(IMP34DT05_Thread_Id);
 80039ba:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <IMP34DT05_Start+0x18>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f015 f8c2 	bl	8018b48 <osThreadResume>
}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	2001030c 	.word	0x2001030c

080039cc <IMP34DT05_Stop>:

void IMP34DT05_Stop(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80039d0:	2001      	movs	r0, #1
 80039d2:	f7ff ffdd 	bl	8003990 <IMP34DT05_Set_State>
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <ISM330DHCX_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(ism330dhcx_DreadySem_id);    
}

void ISM330DHCX_Set_State(SM_Sensor_State_t newState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  ISM330DHCX_Sensor_State = newState;
 80039e6:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <ISM330DHCX_Set_State+0x1c>)
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	7013      	strb	r3, [r2, #0]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	20000025 	.word	0x20000025

080039fc <ISM330DHCX_Start>:
  ISM330DHCX_Init_Param.FS[0] = newFS1;
  ISM330DHCX_Init_Param.FS[0] = newFS2;
}

void ISM330DHCX_Start(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003a00:	2003      	movs	r0, #3
 8003a02:	f7ff ffeb 	bl	80039dc <ISM330DHCX_Set_State>
  osThreadResume(ISM330DHCX_Thread_Id);
 8003a06:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <ISM330DHCX_Start+0x18>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f015 f89c 	bl	8018b48 <osThreadResume>
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20016264 	.word	0x20016264

08003a18 <ISM330DHCX_Stop>:

void ISM330DHCX_Stop(void)
{  
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f7ff ffdd 	bl	80039dc <ISM330DHCX_Set_State>
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <LPS22HH_Set_State>:
    }    
  }     
}

void LPS22HH_Set_State(SM_Sensor_State_t newState)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	71fb      	strb	r3, [r7, #7]
  LPS22HH_Sensor_State = newState;
 8003a32:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <LPS22HH_Set_State+0x1c>)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	7013      	strb	r3, [r2, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	20000026 	.word	0x20000026

08003a48 <LPS22HH_Start>:
  LPS22HH_Init_Param.FS[0] = newFS1;
  LPS22HH_Init_Param.FS[0] = newFS2;
}

void LPS22HH_Start(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003a4c:	2003      	movs	r0, #3
 8003a4e:	f7ff ffeb 	bl	8003a28 <LPS22HH_Set_State>
  osThreadResume(LPS22HH_Thread_Id);
 8003a52:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <LPS22HH_Start+0x18>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f015 f876 	bl	8018b48 <osThreadResume>
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20016388 	.word	0x20016388

08003a64 <LPS22HH_Stop>:

void LPS22HH_Stop(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f7ff ffdd 	bl	8003a28 <LPS22HH_Set_State>
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <main>:
* @brief  Main program
* @param  None
* @retval None
*/  
int main(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
  HAL_Init();
 8003a7a:	f003 ff67 	bl	800794c <HAL_Init>
  
  SystemClock_Config();
 8003a7e:	f000 f867 	bl	8003b50 <SystemClock_Config>
    
  /* Enable Power Clock*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <main+0x98>)
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	4a21      	ldr	r2, [pc, #132]	; (8003b0c <main+0x98>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	; (8003b0c <main+0x98>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	607b      	str	r3, [r7, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB(); 
 8003a9a:	f008 fe59 	bl	800c750 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8003a9e:	f008 fe67 	bl	800c770 <HAL_PWREx_EnableVddIO2>
  BSP_Enable_DCDC2();
 8003aa2:	f003 fa3f 	bl	8006f24 <BSP_Enable_DCDC2>
  
  /* Configure the Battery Charger */
  BattChrg_Init();
 8003aa6:	f000 f8eb 	bl	8003c80 <BattChrg_Init>
  
  /* Configure Power Voltage Detector(PVD) to detect if battery voltage is low */
  PVD_Config();
 8003aaa:	f000 f91d 	bl	8003ce8 <PVD_Config>
  
  /* Configure DEBUG PIN and LED */
//  BSP_DEBUG_PIN_Init_All();
  BSP_LED_Init(LED1);
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f003 fab6 	bl	8007020 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f003 fab3 	bl	8007020 <BSP_LED_Init>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aba:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <main+0x98>)
 8003abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abe:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <main+0x98>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <main+0x98>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
   
  HSD_JSON_set_allocation_functions(HSD_malloc, HSD_free);  
 8003ad2:	490f      	ldr	r1, [pc, #60]	; (8003b10 <main+0x9c>)
 8003ad4:	480f      	ldr	r0, [pc, #60]	; (8003b14 <main+0xa0>)
 8003ad6:	f7fd f935 	bl	8000d44 <HSD_JSON_set_allocation_functions>
  
  /* Start USB */  
  MX_USB_DEVICE_Init();
 8003ada:	f000 f81d 	bl	8003b18 <MX_USB_DEVICE_Init>
  
  /* Set default device description */
  set_default_description();
 8003ade:	f7fe fa5f 	bl	8001fa0 <set_default_description>
  
  /* USER Button initialization */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f003 fa49 	bl	8006f7c <BSP_PB_Init>
  BSP_PB_PWR_Init();
 8003aea:	f003 f9eb 	bl	8006ec4 <BSP_PB_PWR_Init>
  
  /* Sensor Manager initilization, only using PID (Platform Indepentent Drivers) */
  SM_Peripheral_Init();
 8003aee:	f001 fea7 	bl	8005840 <SM_Peripheral_Init>
  SM_OS_Init();
 8003af2:	f001 fcbf 	bl	8005474 <SM_OS_Init>
  
  Peripheral_MSP_Init_All();  
 8003af6:	f000 fb7b 	bl	80041f0 <Peripheral_MSP_Init_All>
  SDM_Peripheral_Init();
 8003afa:	f000 ff31 	bl	8004960 <SDM_Peripheral_Init>
  
  Peripheral_OS_Init_All();  
 8003afe:	f000 fb7d 	bl	80041fc <Peripheral_OS_Init_All>
  SDM_OS_Init();
 8003b02:	f000 ff33 	bl	800496c <SDM_OS_Init>
  
  /* Start scheduler */
  osKernelStart();
 8003b06:	f014 fd6b 	bl	80185e0 <osKernelStart>
  
  while(1);  
 8003b0a:	e7fe      	b.n	8003b0a <main+0x96>
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	0801f305 	.word	0x0801f305
 8003b14:	0801f2f5 	.word	0x0801f2f5

08003b18 <MX_USB_DEVICE_Init>:
/**
* Init USB device Library, add supported class and start the library
* @retval None
*/
void MX_USB_DEVICE_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  USBD_Init(&USBD_Device, &WCID_STREAMING_Desc, 0);
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4908      	ldr	r1, [pc, #32]	; (8003b40 <MX_USB_DEVICE_Init+0x28>)
 8003b20:	4808      	ldr	r0, [pc, #32]	; (8003b44 <MX_USB_DEVICE_Init+0x2c>)
 8003b22:	f00f ffa3 	bl	8013a6c <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&USBD_Device, USBD_WCID_STREAMING_CLASS);
 8003b26:	4908      	ldr	r1, [pc, #32]	; (8003b48 <MX_USB_DEVICE_Init+0x30>)
 8003b28:	4806      	ldr	r0, [pc, #24]	; (8003b44 <MX_USB_DEVICE_Init+0x2c>)
 8003b2a:	f00f ffca 	bl	8013ac2 <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO and CDC Class */
  USBD_WCID_STREAMING_RegisterInterface(&USBD_Device, &USBD_WCID_STREAMING_fops);
 8003b2e:	4907      	ldr	r1, [pc, #28]	; (8003b4c <MX_USB_DEVICE_Init+0x34>)
 8003b30:	4804      	ldr	r0, [pc, #16]	; (8003b44 <MX_USB_DEVICE_Init+0x2c>)
 8003b32:	f00f fe32 	bl	801379a <USBD_WCID_STREAMING_RegisterInterface>
  /* Start Device Process */  
  USBD_Start(&USBD_Device);
 8003b36:	4803      	ldr	r0, [pc, #12]	; (8003b44 <MX_USB_DEVICE_Init+0x2c>)
 8003b38:	f00f ffdd 	bl	8013af6 <USBD_Start>
}
 8003b3c:	bf00      	nop
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	2000003c 	.word	0x2000003c
 8003b44:	200163b4 	.word	0x200163b4
 8003b48:	200001bc 	.word	0x200001bc
 8003b4c:	2000008c 	.word	0x2000008c

08003b50 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b0be      	sub	sp, #248	; 0xf8
 8003b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b56:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b5a:	2244      	movs	r2, #68	; 0x44
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f01b fc00 	bl	801f364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b64:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b74:	1d3b      	adds	r3, r7, #4
 8003b76:	229c      	movs	r2, #156	; 0x9c
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f01b fbf2 	bl	801f364 <memset>
  
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003b80:	2000      	movs	r0, #0
 8003b82:	f008 fd41 	bl	800c608 <HAL_PWREx_ControlVoltageScaling>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8003b8c:	f000 fb52 	bl	8004234 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003b90:	2321      	movs	r3, #33	; 0x21
 8003b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003baa:	2303      	movs	r3, #3
 8003bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 30;
 8003bb6:	231e      	movs	r3, #30
 8003bb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8003bbc:	2305      	movs	r3, #5
 8003bbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f008 fe36 	bl	800c844 <HAL_RCC_OscConfig>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003bde:	f000 fb29 	bl	8004234 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003be2:	230f      	movs	r3, #15
 8003be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003be8:	2303      	movs	r3, #3
 8003bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c00:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c04:	2105      	movs	r1, #5
 8003c06:	4618      	mov	r0, r3
 8003c08:	f009 fa42 	bl	800d090 <HAL_RCC_ClockConfig>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003c12:	f000 fb0f 	bl	8004234 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
 8003c16:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <SystemClock_Config+0x128>)
 8003c18:	607b      	str	r3, [r7, #4]
    |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
      |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_DFSDM1AUDIO;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003c22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003c36:	2300      	movs	r3, #0
 8003c38:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8003c3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003c40:	2303      	movs	r3, #3
 8003c42:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8003c44:	2305      	movs	r3, #5
 8003c46:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8003c48:	2360      	movs	r3, #96	; 0x60
 8003c4a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8003c4c:	2319      	movs	r3, #25
 8003c4e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003c50:	2302      	movs	r3, #2
 8003c52:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8003c54:	2304      	movs	r3, #4
 8003c56:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <SystemClock_Config+0x12c>)
 8003c5a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f009 fcae 	bl	800d5c0 <HAL_RCCEx_PeriphCLKConfig>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8003c6a:	f000 fae3 	bl	8004234 <Error_Handler>
  }  
}
 8003c6e:	bf00      	nop
 8003c70:	37f8      	adds	r7, #248	; 0xf8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	00296880 	.word	0x00296880
 8003c7c:	01010000 	.word	0x01010000

08003c80 <BattChrg_Init>:


void BattChrg_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  BSP_BC_Init();
 8003c84:	f003 fa42 	bl	800710c <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 8003c88:	f003 fa84 	bl	8007194 <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);  
 8003c8c:	200a      	movs	r0, #10
 8003c8e:	f003 fa45 	bl	800711c <BSP_BC_CmdSend>
  
  HAL_EXTI_GetHandle(&BC_exti, EXTI_LINE_10);  
 8003c92:	4908      	ldr	r1, [pc, #32]	; (8003cb4 <BattChrg_Init+0x34>)
 8003c94:	4808      	ldr	r0, [pc, #32]	; (8003cb8 <BattChrg_Init+0x38>)
 8003c96:	f005 fd03 	bl	80096a0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&BC_exti,  HAL_EXTI_COMMON_CB_ID, BC_Int_Callback);
 8003c9a:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <BattChrg_Init+0x3c>)
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4806      	ldr	r0, [pc, #24]	; (8003cb8 <BattChrg_Init+0x38>)
 8003ca0:	f005 fce4 	bl	800966c <HAL_EXTI_RegisterCallback>
  
  t_stwin = HAL_GetTick(); 
 8003ca4:	f003 febe 	bl	8007a24 <HAL_GetTick>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4a05      	ldr	r2, [pc, #20]	; (8003cc0 <BattChrg_Init+0x40>)
 8003cac:	6013      	str	r3, [r2, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	1600000a 	.word	0x1600000a
 8003cb8:	2001667c 	.word	0x2001667c
 8003cbc:	08003cc5 	.word	0x08003cc5
 8003cc0:	20000948 	.word	0x20000948

08003cc4 <BC_Int_Callback>:
* @brief  Battery Charger Interrupt callback
* @param  None
* @retval None
*/
void BC_Int_Callback(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  if(HAL_GetTick() - t_stwin > 4000)
 8003cc8:	f003 feac 	bl	8007a24 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <BC_Int_Callback+0x20>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003cd8:	d902      	bls.n	8003ce0 <BC_Int_Callback+0x1c>
  {
    BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8003cda:	2017      	movs	r0, #23
 8003cdc:	f003 fa1e 	bl	800711c <BSP_BC_CmdSend>
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20000948 	.word	0x20000948

08003ce8 <PVD_Config>:
* @brief  Configures the PVD resources.
* @param  None
* @retval None
*/
void PVD_Config(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD;
  
  /*##-1- Enable Power Clock #################################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <PVD_Config+0x50>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	4a11      	ldr	r2, [pc, #68]	; (8003d38 <PVD_Config+0x50>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <PVD_Config+0x50>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
  
  /*##-2- Configure the NVIC for PVD #########################################*/
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003d06:	2200      	movs	r2, #0
 8003d08:	2100      	movs	r1, #0
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	f005 fa55 	bl	80091ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003d10:	2001      	movs	r0, #1
 8003d12:	f005 fa6e 	bl	80091f2 <HAL_NVIC_EnableIRQ>
  
  /* Configure the PVD Level to 6 and generate an interrupt on falling
  edge(PVD detection level set to 2.9V, refer to the electrical characteristics
  of you device datasheet for more details) */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003d16:	230c      	movs	r3, #12
 8003d18:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003d1a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003d1e:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003d20:	f107 0308 	add.w	r3, r7, #8
 8003d24:	4618      	mov	r0, r3
 8003d26:	f008 fbdf 	bl	800c4e8 <HAL_PWR_ConfigPVD>
  
  /* Enable the PVD Output */
  HAL_PWR_EnablePVD();
 8003d2a:	f008 fc3d 	bl	800c5a8 <HAL_PWR_EnablePVD>
}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000

08003d3c <vApplicationIdleHook>:


void vApplicationIdleHook( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT) 
  if(SD_Logging_Enabled)
 8003d40:	4b3d      	ldr	r3, [pc, #244]	; (8003e38 <vApplicationIdleHook+0xfc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <vApplicationIdleHook+0x10>
  {
    SDM_AutosaveFile();
 8003d48:	f001 faee 	bl	8005328 <SDM_AutosaveFile>
  }
#endif
  
  if (!SD_Logging_Active)
 8003d4c:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <vApplicationIdleHook+0x100>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d16f      	bne.n	8003e34 <vApplicationIdleHook+0xf8>
  {
    if(com_status == HS_DATALOG_USB_STARTED)
 8003d54:	4b3a      	ldr	r3, [pc, #232]	; (8003e40 <vApplicationIdleHook+0x104>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d121      	bne.n	8003da2 <vApplicationIdleHook+0x66>
    {
        if(!(HAL_GetTick()%100)) 
 8003d5e:	f003 fe61 	bl	8007a24 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b37      	ldr	r3, [pc, #220]	; (8003e44 <vApplicationIdleHook+0x108>)
 8003d66:	fba3 1302 	umull	r1, r3, r3, r2
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2164      	movs	r1, #100	; 0x64
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d103      	bne.n	8003d80 <vApplicationIdleHook+0x44>
        {
          BSP_LED_On(LED_ORANGE);
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f003 f993 	bl	80070a4 <BSP_LED_On>
          }
        }
      }
    }
  }
}
 8003d7e:	e059      	b.n	8003e34 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%50)) 
 8003d80:	f003 fe50 	bl	8007a24 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <vApplicationIdleHook+0x108>)
 8003d88:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	2132      	movs	r1, #50	; 0x32
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d14c      	bne.n	8003e34 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	f003 f99c 	bl	80070d8 <BSP_LED_Off>
}
 8003da0:	e048      	b.n	8003e34 <vApplicationIdleHook+0xf8>
      if (!BSP_SD_IsDetected())
 8003da2:	f003 fcf7 	bl	8007794 <BSP_SD_IsDetected>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d121      	bne.n	8003df0 <vApplicationIdleHook+0xb4>
        if(!(HAL_GetTick()%200)) 
 8003dac:	f003 fe3a 	bl	8007a24 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <vApplicationIdleHook+0x108>)
 8003db4:	fba3 1302 	umull	r1, r3, r3, r2
 8003db8:	099b      	lsrs	r3, r3, #6
 8003dba:	21c8      	movs	r1, #200	; 0xc8
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <vApplicationIdleHook+0x92>
          BSP_LED_On(LED_ORANGE);
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	f003 f96c 	bl	80070a4 <BSP_LED_On>
}
 8003dcc:	e032      	b.n	8003e34 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%100)) 
 8003dce:	f003 fe29 	bl	8007a24 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <vApplicationIdleHook+0x108>)
 8003dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2164      	movs	r1, #100	; 0x64
 8003dde:	fb01 f303 	mul.w	r3, r1, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d125      	bne.n	8003e34 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8003de8:	2001      	movs	r0, #1
 8003dea:	f003 f975 	bl	80070d8 <BSP_LED_Off>
}
 8003dee:	e021      	b.n	8003e34 <vApplicationIdleHook+0xf8>
        if(!(HAL_GetTick()%1000)) 
 8003df0:	f003 fe18 	bl	8007a24 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <vApplicationIdleHook+0x10c>)
 8003df8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfc:	099b      	lsrs	r3, r3, #6
 8003dfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <vApplicationIdleHook+0xd8>
          BSP_LED_On(LED_ORANGE);
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	f003 f949 	bl	80070a4 <BSP_LED_On>
}
 8003e12:	e00f      	b.n	8003e34 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%50)) 
 8003e14:	f003 fe06 	bl	8007a24 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <vApplicationIdleHook+0x108>)
 8003e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	2132      	movs	r1, #50	; 0x32
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f003 f952 	bl	80070d8 <BSP_LED_Off>
}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000990 	.word	0x20000990
 8003e3c:	2000097c 	.word	0x2000097c
 8003e40:	20000504 	.word	0x20000504
 8003e44:	51eb851f 	.word	0x51eb851f
 8003e48:	10624dd3 	.word	0x10624dd3

08003e4c <SENSOR_Generic_Data_Ready>:
* @param  size: input data buffer size [bytes]
* @param  timeStamp: timestamp of the latest sample in the input buffer
* @retval 
*/
void SENSOR_Generic_Data_Ready(uint16_t sId, uint8_t *buf, uint16_t size, double timeStamp)
{ 
 8003e4c:	b5b0      	push	{r4, r5, r7, lr}
 8003e4e:	b08c      	sub	sp, #48	; 0x30
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	ed87 0b00 	vstr	d0, [r7]
 8003e5a:	81fb      	strh	r3, [r7, #14]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	81bb      	strh	r3, [r7, #12]
  COM_SensorStatus_t * tempStatus = COM_GetSensorStatus(sId);    
 8003e60:	89fb      	ldrh	r3, [r7, #14]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd ff81 	bl	8001d6c <COM_GetSensorStatus>
 8003e6a:	6238      	str	r0, [r7, #32]
  COM_SensorDescriptor_t * tempDescriptor = COM_GetSensorDescriptor(sId); 
 8003e6c:	89fb      	ldrh	r3, [r7, #14]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fd ff67 	bl	8001d44 <COM_GetSensorDescriptor>
 8003e76:	61f8      	str	r0, [r7, #28]
  COM_SubSensorDescriptor_t *tempSubSensorDescriptor; 
  uint16_t toSend = 0, nBytesPerSample = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  
  if (sensor_first_dataReady[sId]) // Discard first set of sensor data
 8003e80:	89fb      	ldrh	r3, [r7, #14]
 8003e82:	4a89      	ldr	r2, [pc, #548]	; (80040a8 <SENSOR_Generic_Data_Ready+0x25c>)
 8003e84:	5cd3      	ldrb	r3, [r2, r3]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d020      	beq.n	8003ecc <SENSOR_Generic_Data_Ready+0x80>
  {
    sensor_first_dataReady[sId] = 0;    
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	4a86      	ldr	r2, [pc, #536]	; (80040a8 <SENSOR_Generic_Data_Ready+0x25c>)
 8003e8e:	2100      	movs	r1, #0
 8003e90:	54d1      	strb	r1, [r2, r3]
    sensor_n_samples_acc[sId] = 0.0f;    
 8003e92:	89fb      	ldrh	r3, [r7, #14]
 8003e94:	4a85      	ldr	r2, [pc, #532]	; (80040ac <SENSOR_Generic_Data_Ready+0x260>)
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
    tempStatus->initialOffset = (float)timeStamp;
 8003ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ea4:	f7fc fec8 	bl	8000c38 <__aeabi_d2f>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	609a      	str	r2, [r3, #8]
    old_time_stamp[sId] = timeStamp;
 8003eae:	89fb      	ldrh	r3, [r7, #14]
 8003eb0:	4a7f      	ldr	r2, [pc, #508]	; (80040b0 <SENSOR_Generic_Data_Ready+0x264>)
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	18d1      	adds	r1, r2, r3
 8003eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eba:	e9c1 2300 	strd	r2, r3, [r1]
    sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;
 8003ebe:	89fb      	ldrh	r3, [r7, #14]
 8003ec0:	6a3a      	ldr	r2, [r7, #32]
 8003ec2:	8991      	ldrh	r1, [r2, #12]
 8003ec4:	4a7b      	ldr	r2, [pc, #492]	; (80040b4 <SENSOR_Generic_Data_Ready+0x268>)
 8003ec6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
      }      
    }    
  }    
}
 8003eca:	e16c      	b.n	80041a6 <SENSOR_Generic_Data_Ready+0x35a>
    if(tempDescriptor->dataType == DATA_TYPE_FLOAT || tempDescriptor->dataType == DATA_TYPE_INT32 || tempDescriptor->dataType == DATA_TYPE_UINT32) 
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	7c5b      	ldrb	r3, [r3, #17]
 8003ed0:	2b06      	cmp	r3, #6
 8003ed2:	d007      	beq.n	8003ee4 <SENSOR_Generic_Data_Ready+0x98>
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	7c5b      	ldrb	r3, [r3, #17]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d003      	beq.n	8003ee4 <SENSOR_Generic_Data_Ready+0x98>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	7c5b      	ldrb	r3, [r3, #17]
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d102      	bne.n	8003eea <SENSOR_Generic_Data_Ready+0x9e>
      nBytesPerSample = 4;
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003ee8:	e014      	b.n	8003f14 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT16 || tempDescriptor->dataType == DATA_TYPE_INT16) 
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	7c5b      	ldrb	r3, [r3, #17]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d003      	beq.n	8003efa <SENSOR_Generic_Data_Ready+0xae>
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	7c5b      	ldrb	r3, [r3, #17]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d102      	bne.n	8003f00 <SENSOR_Generic_Data_Ready+0xb4>
      nBytesPerSample = 2;
 8003efa:	2302      	movs	r3, #2
 8003efc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003efe:	e009      	b.n	8003f14 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT8 || tempDescriptor->dataType == DATA_TYPE_INT8) 
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	7c5b      	ldrb	r3, [r3, #17]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <SENSOR_Generic_Data_Ready+0xc4>
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	7c5b      	ldrb	r3, [r3, #17]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <SENSOR_Generic_Data_Ready+0xc8>
      nBytesPerSample = 1;
 8003f10:	2301      	movs	r3, #1
 8003f12:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint8_t totalDataPerSample = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1e:	e01d      	b.n	8003f5c <SENSOR_Generic_Data_Ready+0x110>
      if (tempStatus->subSensorStatus[i].isActive)
 8003f20:	6a39      	ldr	r1, [r7, #32]
 8003f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f24:	4613      	mov	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3324      	adds	r3, #36	; 0x24
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00f      	beq.n	8003f56 <SENSOR_Generic_Data_Ready+0x10a>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 8003f36:	89fb      	ldrh	r3, [r7, #14]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fd ff29 	bl	8001d98 <COM_GetSubSensorDescriptor>
 8003f46:	61b8      	str	r0, [r7, #24]
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	789a      	ldrb	r2, [r3, #2]
 8003f4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f50:	4413      	add	r3, r2
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	3301      	adds	r3, #1
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f62:	461a      	mov	r2, r3
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	4293      	cmp	r3, r2
 8003f68:	dbda      	blt.n	8003f20 <SENSOR_Generic_Data_Ready+0xd4>
    nBytesPerSample *= totalDataPerSample;
 8003f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003f72:	fb12 f303 	smulbb	r3, r2, r3
 8003f76:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sensor_n_samples_acc[sId] = (float)(size / nBytesPerSample);
 8003f78:	89ba      	ldrh	r2, [r7, #12]
 8003f7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	89fb      	ldrh	r3, [r7, #14]
 8003f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f8c:	4a47      	ldr	r2, [pc, #284]	; (80040ac <SENSOR_Generic_Data_Ready+0x260>)
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	edc3 7a00 	vstr	s15, [r3]
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 8003f96:	89fb      	ldrh	r3, [r7, #14]
 8003f98:	4a44      	ldr	r2, [pc, #272]	; (80040ac <SENSOR_Generic_Data_Ready+0x260>)
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fc faf9 	bl	8000598 <__aeabi_f2d>
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	460d      	mov	r5, r1
 8003faa:	89fb      	ldrh	r3, [r7, #14]
 8003fac:	4a40      	ldr	r2, [pc, #256]	; (80040b0 <SENSOR_Generic_Data_Ready+0x264>)
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fba:	f7fc f98d 	bl	80002d8 <__aeabi_dsub>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	f7fc fc69 	bl	800089c <__aeabi_ddiv>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f7fc fe31 	bl	8000c38 <__aeabi_d2f>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	605a      	str	r2, [r3, #4]
    old_time_stamp[sId] = timeStamp;
 8003fdc:	89fb      	ldrh	r3, [r7, #14]
 8003fde:	4a34      	ldr	r2, [pc, #208]	; (80040b0 <SENSOR_Generic_Data_Ready+0x264>)
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	18d1      	adds	r1, r2, r3
 8003fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe8:	e9c1 2300 	strd	r2, r3, [r1]
    toSend = size/nBytesPerSample;
 8003fec:	89ba      	ldrh	r2, [r7, #12]
 8003fee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(toSend > 0)
 8003ff6:	e0d2      	b.n	800419e <SENSOR_Generic_Data_Ready+0x352>
      if(toSend < sensor_n_samples_to_timestamp[sId] || sensor_n_samples_to_timestamp[sId] == 0)
 8003ff8:	89fb      	ldrh	r3, [r7, #14]
 8003ffa:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <SENSOR_Generic_Data_Ready+0x268>)
 8003ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004000:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004002:	429a      	cmp	r2, r3
 8004004:	d305      	bcc.n	8004012 <SENSOR_Generic_Data_Ready+0x1c6>
 8004006:	89fb      	ldrh	r3, [r7, #14]
 8004008:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <SENSOR_Generic_Data_Ready+0x268>)
 800400a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d135      	bne.n	800407e <SENSOR_Generic_Data_Ready+0x232>
        if(com_status == HS_DATALOG_SD_STARTED)
 8004012:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <SENSOR_Generic_Data_Ready+0x26c>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d10b      	bne.n	8004034 <SENSOR_Generic_Data_Ready+0x1e8>
          SDM_Fill_Buffer(sId , (uint8_t *)buf, toSend * nBytesPerSample);
 800401c:	89fb      	ldrh	r3, [r7, #14]
 800401e:	b2d8      	uxtb	r0, r3
 8004020:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004022:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004024:	fb12 f303 	smulbb	r3, r2, r3
 8004028:	b29b      	uxth	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	f000 ff7f 	bl	8004f30 <SDM_Fill_Buffer>
 8004032:	e010      	b.n	8004056 <SENSOR_Generic_Data_Ready+0x20a>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <SENSOR_Generic_Data_Ready+0x26c>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d10b      	bne.n	8004056 <SENSOR_Generic_Data_Ready+0x20a>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber  , (uint8_t *)buf, toSend * nBytesPerSample);
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004044:	b2d9      	uxtb	r1, r3
 8004046:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004048:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	481a      	ldr	r0, [pc, #104]	; (80040bc <SENSOR_Generic_Data_Ready+0x270>)
 8004052:	f00f fbb9 	bl	80137c8 <USBD_WCID_STREAMING_FillTxDataBuffer>
        if(sensor_n_samples_to_timestamp[sId] != 0)
 8004056:	89fb      	ldrh	r3, [r7, #14]
 8004058:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <SENSOR_Generic_Data_Ready+0x268>)
 800405a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <SENSOR_Generic_Data_Ready+0x22c>
          sensor_n_samples_to_timestamp[sId] -= toSend;
 8004062:	89fb      	ldrh	r3, [r7, #14]
 8004064:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <SENSOR_Generic_Data_Ready+0x268>)
 8004066:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800406a:	89fb      	ldrh	r3, [r7, #14]
 800406c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800406e:	1a8a      	subs	r2, r1, r2
 8004070:	b291      	uxth	r1, r2
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <SENSOR_Generic_Data_Ready+0x268>)
 8004074:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        toSend = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800407c:	e08f      	b.n	800419e <SENSOR_Generic_Data_Ready+0x352>
        if(com_status == HS_DATALOG_SD_STARTED)
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <SENSOR_Generic_Data_Ready+0x26c>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d11b      	bne.n	80040c0 <SENSOR_Generic_Data_Ready+0x274>
          SDM_Fill_Buffer(sId, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 8004088:	89fb      	ldrh	r3, [r7, #14]
 800408a:	b2d8      	uxtb	r0, r3
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <SENSOR_Generic_Data_Ready+0x268>)
 8004090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004094:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004096:	fb12 f303 	smulbb	r3, r2, r3
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	f000 ff46 	bl	8004f30 <SDM_Fill_Buffer>
 80040a4:	e021      	b.n	80040ea <SENSOR_Generic_Data_Ready+0x29e>
 80040a6:	bf00      	nop
 80040a8:	20000028 	.word	0x20000028
 80040ac:	200008a8 	.word	0x200008a8
 80040b0:	200008d8 	.word	0x200008d8
 80040b4:	20000930 	.word	0x20000930
 80040b8:	20000504 	.word	0x20000504
 80040bc:	200163b4 	.word	0x200163b4
        else if (com_status == HS_DATALOG_USB_STARTED )
 80040c0:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <SENSOR_Generic_Data_Ready+0x364>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10f      	bne.n	80040ea <SENSOR_Generic_Data_Ready+0x29e>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80040d0:	b2d9      	uxtb	r1, r3
 80040d2:	89fb      	ldrh	r3, [r7, #14]
 80040d4:	4a37      	ldr	r2, [pc, #220]	; (80041b4 <SENSOR_Generic_Data_Ready+0x368>)
 80040d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040da:	461a      	mov	r2, r3
 80040dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040de:	fb03 f302 	mul.w	r3, r3, r2
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	4834      	ldr	r0, [pc, #208]	; (80041b8 <SENSOR_Generic_Data_Ready+0x36c>)
 80040e6:	f00f fb6f 	bl	80137c8 <USBD_WCID_STREAMING_FillTxDataBuffer>
        buf+=sensor_n_samples_to_timestamp[sId] * nBytesPerSample;
 80040ea:	89fb      	ldrh	r3, [r7, #14]
 80040ec:	4a31      	ldr	r2, [pc, #196]	; (80041b4 <SENSOR_Generic_Data_Ready+0x368>)
 80040ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040f2:	461a      	mov	r2, r3
 80040f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040f6:	fb03 f302 	mul.w	r3, r3, r2
 80040fa:	461a      	mov	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4413      	add	r3, r2
 8004100:	60bb      	str	r3, [r7, #8]
        toSend -= sensor_n_samples_to_timestamp[sId];
 8004102:	89fb      	ldrh	r3, [r7, #14]
 8004104:	4a2b      	ldr	r2, [pc, #172]	; (80041b4 <SENSOR_Generic_Data_Ready+0x368>)
 8004106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800410a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	f7fc fa3f 	bl	8000598 <__aeabi_f2d>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	4926      	ldr	r1, [pc, #152]	; (80041bc <SENSOR_Generic_Data_Ready+0x370>)
 8004124:	f7fc fbba 	bl	800089c <__aeabi_ddiv>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4614      	mov	r4, r2
 800412e:	461d      	mov	r5, r3
 8004130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc fa1e 	bl	8000574 <__aeabi_i2d>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4620      	mov	r0, r4
 800413e:	4629      	mov	r1, r5
 8004140:	f7fc fa82 	bl	8000648 <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800414c:	f7fc f8c4 	bl	80002d8 <__aeabi_dsub>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if(com_status == HS_DATALOG_SD_STARTED)
 8004158:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <SENSOR_Generic_Data_Ready+0x364>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d108      	bne.n	8004174 <SENSOR_Generic_Data_Ready+0x328>
          SDM_Fill_Buffer(sId, (uint8_t *)&newTS, 8);
 8004162:	89fb      	ldrh	r3, [r7, #14]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f107 0110 	add.w	r1, r7, #16
 800416a:	2208      	movs	r2, #8
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fedf 	bl	8004f30 <SDM_Fill_Buffer>
 8004172:	e00e      	b.n	8004192 <SENSOR_Generic_Data_Ready+0x346>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <SENSOR_Generic_Data_Ready+0x364>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d109      	bne.n	8004192 <SENSOR_Generic_Data_Ready+0x346>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)&newTS, 8);
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004184:	b2d9      	uxtb	r1, r3
 8004186:	f107 0210 	add.w	r2, r7, #16
 800418a:	2308      	movs	r3, #8
 800418c:	480a      	ldr	r0, [pc, #40]	; (80041b8 <SENSOR_Generic_Data_Ready+0x36c>)
 800418e:	f00f fb1b 	bl	80137c8 <USBD_WCID_STREAMING_FillTxDataBuffer>
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
 8004192:	89fb      	ldrh	r3, [r7, #14]
 8004194:	6a3a      	ldr	r2, [r7, #32]
 8004196:	8991      	ldrh	r1, [r2, #12]
 8004198:	4a06      	ldr	r2, [pc, #24]	; (80041b4 <SENSOR_Generic_Data_Ready+0x368>)
 800419a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    while(toSend > 0)
 800419e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f47f af29 	bne.w	8003ff8 <SENSOR_Generic_Data_Ready+0x1ac>
}
 80041a6:	bf00      	nop
 80041a8:	3730      	adds	r7, #48	; 0x30
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bdb0      	pop	{r4, r5, r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000504 	.word	0x20000504
 80041b4:	20000930 	.word	0x20000930
 80041b8:	200163b4 	.word	0x200163b4
 80041bc:	3ff00000 	.word	0x3ff00000

080041c0 <IIS3DWB_Data_Ready>:


/*  ---------- Sensors data ready functions ----------- */
void IIS3DWB_Data_Ready(uint8_t * buf, uint16_t size, double timeStamp)
{  
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	460b      	mov	r3, r1
 80041ca:	ed87 0b00 	vstr	d0, [r7]
 80041ce:	817b      	strh	r3, [r7, #10]
  SENSOR_Generic_Data_Ready(iis3dwb_com_id, buf, size, timeStamp);
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <IIS3DWB_Data_Ready+0x2c>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	897a      	ldrh	r2, [r7, #10]
 80041d8:	ed97 0b00 	vldr	d0, [r7]
 80041dc:	68f9      	ldr	r1, [r7, #12]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fe34 	bl	8003e4c <SENSOR_Generic_Data_Ready>
}
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	200163a4 	.word	0x200163a4

080041f0 <Peripheral_MSP_Init_All>:
}



void Peripheral_MSP_Init_All(void)
{  
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  HTS221_Peripheral_Init();
  IMP34DT05_Peripheral_Init();
  MP23ABS1_Peripheral_Init();
  ISM330DHCX_Peripheral_Init();
#endif
  IIS3DWB_Peripheral_Init();
 80041f4:	f7ff f934 	bl	8003460 <IIS3DWB_Peripheral_Init>
#if 0
  IIS2DH_Peripheral_Init();
#endif
}
 80041f8:	bf00      	nop
 80041fa:	bd80      	pop	{r7, pc}

080041fc <Peripheral_OS_Init_All>:


void Peripheral_OS_Init_All(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  HTS221_OS_Init();
  IMP34DT05_OS_Init();
  MP23ABS1_OS_Init();
  ISM330DHCX_OS_Init();
#endif
  IIS3DWB_OS_Init();
 8004200:	f7ff f9ba 	bl	8003578 <IIS3DWB_OS_Init>
#if 0
  IIS2DH_OS_Init();
#endif
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d002      	beq.n	800421e <HAL_GPIO_EXTI_Callback+0x16>
 8004218:	2b20      	cmp	r3, #32
 800421a:	d004      	beq.n	8004226 <HAL_GPIO_EXTI_Callback+0x1e>
		  userButtonCallback(GPIO_Pin);
	  case  IIS3DWB_INT1_Pin:
		  UpdateTimerValue();

	  default:
		break;
 800421c:	e005      	b.n	800422a <HAL_GPIO_EXTI_Callback+0x22>
		  userButtonCallback(GPIO_Pin);
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	4618      	mov	r0, r3
 8004222:	f001 f831 	bl	8005288 <userButtonCallback>
		  UpdateTimerValue();
 8004226:	f7ff fb79 	bl	800391c <UpdateTimerValue>
		break;
 800422a:	bf00      	nop
  }
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  while(1);
 8004238:	e7fe      	b.n	8004238 <Error_Handler+0x4>
	...

0800423c <MP23ABS1_Set_State>:
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}

void MP23ABS1_Set_State(SM_Sensor_State_t newState)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
  MP23ABS1_Sensor_State = newState;
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <MP23ABS1_Set_State+0x1c>)
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	7013      	strb	r3, [r2, #0]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	20000033 	.word	0x20000033

0800425c <MP23ABS1_Start>:
  MP23ABS1_Init_Param.FS[0] = newFS1;
  MP23ABS1_Init_Param.FS[0] = newFS2;
}

void MP23ABS1_Start(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8004260:	2003      	movs	r0, #3
 8004262:	f7ff ffeb 	bl	800423c <MP23ABS1_Set_State>
  osThreadResume(MP23ABS1_Thread_Id);
 8004266:	4b03      	ldr	r3, [pc, #12]	; (8004274 <MP23ABS1_Start+0x18>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f014 fc6c 	bl	8018b48 <osThreadResume>
}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}
 8004274:	200166d8 	.word	0x200166d8

08004278 <MP23ABS1_Stop>:

void MP23ABS1_Stop(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_SUSPENDING);
 800427c:	2001      	movs	r0, #1
 800427e:	f7ff ffdd 	bl	800423c <MP23ABS1_Set_State>
}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <SD_CheckStatus+0x38>)
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004298:	f003 fb26 	bl	80078e8 <BSP_SD_GetCardState>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <SD_CheckStatus+0x38>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <SD_CheckStatus+0x38>)
 80042b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80042b2:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <SD_CheckStatus+0x38>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	b2db      	uxtb	r3, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000034 	.word	0x20000034

080042c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <SD_initialize+0x38>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80042d4:	f003 fa06 	bl	80076e4 <BSP_SD_Init>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d107      	bne.n	80042ee <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ffd1 	bl	8004288 <SD_CheckStatus>
 80042e6:	4603      	mov	r3, r0
 80042e8:	461a      	mov	r2, r3
 80042ea:	4b04      	ldr	r3, [pc, #16]	; (80042fc <SD_initialize+0x38>)
 80042ec:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80042ee:	4b03      	ldr	r3, [pc, #12]	; (80042fc <SD_initialize+0x38>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	b2db      	uxtb	r3, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000034 	.word	0x20000034

08004300 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ffbb 	bl	8004288 <SD_CheckStatus>
 8004312:	4603      	mov	r3, r0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4603      	mov	r3, r0
 800432a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
  ReadStatus = 0;
 8004330:	4b1f      	ldr	r3, [pc, #124]	; (80043b0 <SD_read+0x94>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	68b8      	ldr	r0, [r7, #8]
 800433c:	f003 fa44 	bl	80077c8 <BSP_SD_ReadBlocks_DMA>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d12f      	bne.n	80043a6 <SD_read+0x8a>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 8004346:	f003 fb6d 	bl	8007a24 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800434c:	bf00      	nop
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <SD_read+0x94>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <SD_read+0x4c>
 8004356:	f003 fb65 	bl	8007a24 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f247 522f 	movw	r2, #29999	; 0x752f
 8004364:	4293      	cmp	r3, r2
 8004366:	d9f2      	bls.n	800434e <SD_read+0x32>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 8004368:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <SD_read+0x94>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <SD_read+0x5a>
    {
      res = RES_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
 8004374:	e017      	b.n	80043a6 <SD_read+0x8a>
    }
    else
    {
      ReadStatus = 0;
 8004376:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <SD_read+0x94>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 800437c:	f003 fb52 	bl	8007a24 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004382:	e007      	b.n	8004394 <SD_read+0x78>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004384:	f003 fab0 	bl	80078e8 <BSP_SD_GetCardState>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <SD_read+0x78>
        {
          res = RES_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	75fb      	strb	r3, [r7, #23]
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
           break;
 8004392:	e008      	b.n	80043a6 <SD_read+0x8a>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004394:	f003 fb46 	bl	8007a24 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f247 522f 	movw	r2, #29999	; 0x752f
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d9ee      	bls.n	8004384 <SD_read+0x68>
        }
      }
    }
  }

  return res;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000950 	.word	0x20000950

080043b4 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4603      	mov	r3, r0
 80043c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
  WriteStatus = 0;
 80043c8:	4b1c      	ldr	r3, [pc, #112]	; (800443c <SD_write+0x88>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	68b8      	ldr	r0, [r7, #8]
 80043d4:	f003 fa12 	bl	80077fc <BSP_SD_WriteBlocks_DMA>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d128      	bne.n	8004430 <SD_write+0x7c>
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */
//    BSP_DBG_On(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
    timeout = HAL_GetTick();
 80043de:	f003 fb21 	bl	8007a24 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]
    osSemaphoreWait(sdioSem_id, SD_TIMEOUT);
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <SD_write+0x8c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f247 5130 	movw	r1, #30000	; 0x7530
 80043ec:	4618      	mov	r0, r3
 80043ee:	f014 f949 	bl	8018684 <osSemaphoreWait>
//    {
//    }
//    BSP_DBG_Off(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <SD_write+0x88>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d102      	bne.n	8004400 <SD_write+0x4c>
    {
      res = RES_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
 80043fe:	e017      	b.n	8004430 <SD_write+0x7c>
    }
    else
    {
      WriteStatus = 0;
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <SD_write+0x88>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 8004406:	f003 fb0d 	bl	8007a24 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800440c:	e007      	b.n	800441e <SD_write+0x6a>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800440e:	f003 fa6b 	bl	80078e8 <BSP_SD_GetCardState>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <SD_write+0x6a>
        {
          res = RES_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	75fb      	strb	r3, [r7, #23]
          break;
 800441c:	e008      	b.n	8004430 <SD_write+0x7c>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800441e:	f003 fb01 	bl	8007a24 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f247 522f 	movw	r2, #29999	; 0x752f
 800442c:	4293      	cmp	r3, r2
 800442e:	d9ee      	bls.n	800440e <SD_write+0x5a>
        }
      }
    }
  }

  return res;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	2000094c 	.word	0x2000094c
 8004440:	2001882c 	.word	0x2001882c

08004444 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08c      	sub	sp, #48	; 0x30
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	603a      	str	r2, [r7, #0]
 800444e:	71fb      	strb	r3, [r7, #7]
 8004450:	460b      	mov	r3, r1
 8004452:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800445a:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <SD_ioctl+0xac>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <SD_ioctl+0x28>
 8004468:	2303      	movs	r3, #3
 800446a:	e03c      	b.n	80044e6 <SD_ioctl+0xa2>

  switch (cmd)
 800446c:	79bb      	ldrb	r3, [r7, #6]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d834      	bhi.n	80044dc <SD_ioctl+0x98>
 8004472:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <SD_ioctl+0x34>)
 8004474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004478:	08004489 	.word	0x08004489
 800447c:	08004491 	.word	0x08004491
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044c3 	.word	0x080044c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800448e:	e028      	b.n	80044e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004490:	f107 0308 	add.w	r3, r7, #8
 8004494:	4618      	mov	r0, r3
 8004496:	f003 fa37 	bl	8007908 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800449a:	6a3a      	ldr	r2, [r7, #32]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80044a6:	e01c      	b.n	80044e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80044a8:	f107 0308 	add.w	r3, r7, #8
 80044ac:	4618      	mov	r0, r3
 80044ae:	f003 fa2b 	bl	8007908 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80044c0:	e00f      	b.n	80044e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80044c2:	f107 0308 	add.w	r3, r7, #8
 80044c6:	4618      	mov	r0, r3
 80044c8:	f003 fa1e 	bl	8007908 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	0a5a      	lsrs	r2, r3, #9
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80044da:	e002      	b.n	80044e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80044dc:	2304      	movs	r3, #4
 80044de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80044e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3730      	adds	r7, #48	; 0x30
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000034 	.word	0x20000034

080044f4 <BSP_SD_WriteCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  WriteStatus = 1;
 80044f8:	4b04      	ldr	r3, [pc, #16]	; (800450c <BSP_SD_WriteCpltCallback+0x18>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
  osSemaphoreRelease(sdioSem_id);
 80044fe:	4b04      	ldr	r3, [pc, #16]	; (8004510 <BSP_SD_WriteCpltCallback+0x1c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f014 f90c 	bl	8018720 <osSemaphoreRelease>
}
 8004508:	bf00      	nop
 800450a:	bd80      	pop	{r7, pc}
 800450c:	2000094c 	.word	0x2000094c
 8004510:	2001882c 	.word	0x2001882c

08004514 <BSP_SD_ReadCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <BSP_SD_ReadCpltCallback+0x14>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]
}
 800451e:	bf00      	nop
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	20000950 	.word	0x20000950

0800452c <Enable_Sensors>:
uint32_t SD_Logging_Enabled = 0;
#endif

/*----------------------------------------------------------------------------*/
void Enable_Sensors(void)
{  
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Comment or uncomment each of the following lines
  * to chose which sensor you want to log.         */
  
  Activate_Sensor(iis3dwb_com_id);
 8004530:	4b17      	ldr	r3, [pc, #92]	; (8004590 <Enable_Sensors+0x64>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 f83d 	bl	80045b4 <Activate_Sensor>
  Activate_Sensor(hts221_com_id);
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <Enable_Sensors+0x68>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 f838 	bl	80045b4 <Activate_Sensor>
  Activate_Sensor(iis2dh_com_id);
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <Enable_Sensors+0x6c>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f833 	bl	80045b4 <Activate_Sensor>
  Activate_Sensor(iis2mdc_com_id);
 800454e:	4b13      	ldr	r3, [pc, #76]	; (800459c <Enable_Sensors+0x70>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f82e 	bl	80045b4 <Activate_Sensor>
  Activate_Sensor(imp34dt05_com_id);
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <Enable_Sensors+0x74>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f829 	bl	80045b4 <Activate_Sensor>
  Activate_Sensor(mp23abs1_com_id);
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <Enable_Sensors+0x78>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f824 	bl	80045b4 <Activate_Sensor>
  Activate_Sensor(ism330dhcx_com_id);
 800456c:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <Enable_Sensors+0x7c>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f81f 	bl	80045b4 <Activate_Sensor>
  Activate_Sensor(lps22hh_com_id);
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <Enable_Sensors+0x80>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f81a 	bl	80045b4 <Activate_Sensor>
  Activate_Sensor(stts751_com_id);
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <Enable_Sensors+0x84>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f815 	bl	80045b4 <Activate_Sensor>
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	200163a4 	.word	0x200163a4
 8004594:	200166b8 	.word	0x200166b8
 8004598:	200166c8 	.word	0x200166c8
 800459c:	20016679 	.word	0x20016679
 80045a0:	200166c0 	.word	0x200166c0
 80045a4:	20016678 	.word	0x20016678
 80045a8:	200166b9 	.word	0x200166b9
 80045ac:	200166d1 	.word	0x200166d1
 80045b0:	200166d0 	.word	0x200166d0

080045b4 <Activate_Sensor>:


void Activate_Sensor(uint32_t id)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fd fbd3 	bl	8001d6c <COM_GetSensorStatus>
 80045c6:	60f8      	str	r0, [r7, #12]
  sensor_status->isActive = 1;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	739a      	strb	r2, [r3, #14]
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <SDM_Thread>:



/*----------------------------------------------------------------------------*/
static void SDM_Thread(void const *argument)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b09a      	sub	sp, #104	; 0x68
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  (void)argument;
  osEvent evt;
  DIR dir;
  static FILINFO fno;
  int isJSON = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	667b      	str	r3, [r7, #100]	; 0x64
  
  if (BSP_SD_IsDetected())
 80045e4:	f003 f8d6 	bl	8007794 <BSP_SD_IsDetected>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d063      	beq.n	80046b6 <SDM_Thread+0xde>
  {        
    if (init_SD_peripheral != 1)
 80045ee:	4b91      	ldr	r3, [pc, #580]	; (8004834 <SDM_Thread+0x25c>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d004      	beq.n	8004600 <SDM_Thread+0x28>
    {
      SDM_SD_Init();
 80045f6:	f000 f9f9 	bl	80049ec <SDM_SD_Init>
      init_SD_peripheral = 1;
 80045fa:	4b8e      	ldr	r3, [pc, #568]	; (8004834 <SDM_Thread+0x25c>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	701a      	strb	r2, [r3, #0]
    }
    
    /* Check if a custom configuration JSON is available in the root folder of the SD Card*/   
    (void)f_opendir(&dir, "/"); /* Open the root directory */
 8004600:	f107 030c 	add.w	r3, r7, #12
 8004604:	498c      	ldr	r1, [pc, #560]	; (8004838 <SDM_Thread+0x260>)
 8004606:	4618      	mov	r0, r3
 8004608:	f013 fc34 	bl	8017e74 <f_opendir>
    
    for (;;) 
    {
      (void)f_readdir(&dir, &fno); /* Read files in root folder */
 800460c:	f107 030c 	add.w	r3, r7, #12
 8004610:	498a      	ldr	r1, [pc, #552]	; (800483c <SDM_Thread+0x264>)
 8004612:	4618      	mov	r0, r3
 8004614:	f013 fcc7 	bl	8017fa6 <f_readdir>
      if (fno.fname[0] == 0) break;
 8004618:	4b88      	ldr	r3, [pc, #544]	; (800483c <SDM_Thread+0x264>)
 800461a:	7d9b      	ldrb	r3, [r3, #22]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d034      	beq.n	800468a <SDM_Thread+0xb2>
      if (fno.fattrib & AM_ARC) /* It is a file. */
 8004620:	4b86      	ldr	r3, [pc, #536]	; (800483c <SDM_Thread+0x264>)
 8004622:	7a1b      	ldrb	r3, [r3, #8]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0ef      	beq.n	800460c <SDM_Thread+0x34>
      {
        isJSON = strcmp(".json",fno.fname);
 800462c:	4984      	ldr	r1, [pc, #528]	; (8004840 <SDM_Thread+0x268>)
 800462e:	4885      	ldr	r0, [pc, #532]	; (8004844 <SDM_Thread+0x26c>)
 8004630:	f7fb fde6 	bl	8000200 <strcmp>
 8004634:	6678      	str	r0, [r7, #100]	; 0x64
        if (isJSON)
 8004636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004638:	2b00      	cmp	r3, #0
 800463a:	d028      	beq.n	800468e <SDM_Thread+0xb6>
        {
          if(f_open(&FileConfigJSON, fno.fname, FA_OPEN_EXISTING | FA_READ) == FR_OK)
 800463c:	2201      	movs	r2, #1
 800463e:	4980      	ldr	r1, [pc, #512]	; (8004840 <SDM_Thread+0x268>)
 8004640:	4881      	ldr	r0, [pc, #516]	; (8004848 <SDM_Thread+0x270>)
 8004642:	f012 fefd 	bl	8017440 <f_open>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d120      	bne.n	800468e <SDM_Thread+0xb6>
          {  
            char* config_JSON_string = NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	663b      	str	r3, [r7, #96]	; 0x60
            int sizeFile;
            uint32_t br;  
            sizeFile = f_size(&FileConfigJSON)+1;
 8004650:	4b7d      	ldr	r3, [pc, #500]	; (8004848 <SDM_Thread+0x270>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	65fb      	str	r3, [r7, #92]	; 0x5c
            config_JSON_string = HSD_malloc(sizeFile);
 8004658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800465a:	4618      	mov	r0, r3
 800465c:	f01a fe4a 	bl	801f2f4 <malloc>
 8004660:	4603      	mov	r3, r0
 8004662:	663b      	str	r3, [r7, #96]	; 0x60
            f_read (&FileConfigJSON, config_JSON_string, sizeFile, &br);
 8004664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004666:	f107 0308 	add.w	r3, r7, #8
 800466a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800466c:	4876      	ldr	r0, [pc, #472]	; (8004848 <SDM_Thread+0x270>)
 800466e:	f013 f8a5 	bl	80177bc <f_read>
            SDM_ReadJSON(config_JSON_string);
 8004672:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004674:	f000 fdba 	bl	80051ec <SDM_ReadJSON>
            HSD_JSON_free(config_JSON_string);
 8004678:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800467a:	f7fc fb77 	bl	8000d6c <HSD_JSON_free>
            config_JSON_string = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	663b      	str	r3, [r7, #96]	; 0x60
            f_close(&FileConfigJSON);
 8004682:	4871      	ldr	r0, [pc, #452]	; (8004848 <SDM_Thread+0x270>)
 8004684:	f013 fbcc 	bl	8017e20 <f_close>
          }
        }
        break; 
 8004688:	e001      	b.n	800468e <SDM_Thread+0xb6>
      if (fno.fname[0] == 0) break;
 800468a:	bf00      	nop
 800468c:	e000      	b.n	8004690 <SDM_Thread+0xb8>
        break; 
 800468e:	bf00      	nop
      }
    }
    f_closedir(&dir);
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	4618      	mov	r0, r3
 8004696:	f013 fc60 	bl	8017f5a <f_closedir>
    
    if (isJSON == 0)
 800469a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <SDM_Thread+0xcc>
    {
      Enable_Sensors();    
 80046a0:	f7ff ff44 	bl	800452c <Enable_Sensors>
    }
    
    if (init_SD_peripheral != 0)
 80046a4:	4b63      	ldr	r3, [pc, #396]	; (8004834 <SDM_Thread+0x25c>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d004      	beq.n	80046b6 <SDM_Thread+0xde>
    {
      SDM_SD_DeInit();
 80046ac:	f000 f9c6 	bl	8004a3c <SDM_SD_DeInit>
      init_SD_peripheral = 0;
 80046b0:	4b60      	ldr	r3, [pc, #384]	; (8004834 <SDM_Thread+0x25c>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
    }   
  }
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SDM_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SDM_DEBUG_PIN );
 80046b6:	2102      	movs	r1, #2
 80046b8:	2000      	movs	r0, #0
 80046ba:	f015 fec9 	bl	801a450 <vTaskSetApplicationTaskTag>
#endif
  for (;;)
  {
    BSP_LED_Off(LED1); 
 80046be:	2000      	movs	r0, #0
 80046c0:	f002 fd0a 	bl	80070d8 <BSP_LED_Off>
    
    /* If the battery is too low close the file and turn off the system */
    if(BatteryLow == 1)
 80046c4:	4b61      	ldr	r3, [pc, #388]	; (800484c <SDM_Thread+0x274>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d117      	bne.n	80046fe <SDM_Thread+0x126>
    {
#ifdef LOG_ERROR
      batt_error();
#endif      
      SM_TIM_Stop();
 80046ce:	f001 fa0d 	bl	8005aec <SM_TIM_Stop>
      if(SDM_CloseFiles() == 0)
 80046d2:	f000 fb07 	bl	8004ce4 <SDM_CloseFiles>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d102      	bne.n	80046e2 <SDM_Thread+0x10a>
      {
        SD_Logging_Active = 0;
 80046dc:	4b5c      	ldr	r3, [pc, #368]	; (8004850 <SDM_Thread+0x278>)
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
      }
      SDM_Memory_Deinit();
 80046e2:	f000 f909 	bl	80048f8 <SDM_Memory_Deinit>
      
      if (init_SD_peripheral != 0)
 80046e6:	4b53      	ldr	r3, [pc, #332]	; (8004834 <SDM_Thread+0x25c>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <SDM_Thread+0x120>
      {
        SDM_SD_DeInit();
 80046ee:	f000 f9a5 	bl	8004a3c <SDM_SD_DeInit>
        init_SD_peripheral = 0;
 80046f2:	4b50      	ldr	r3, [pc, #320]	; (8004834 <SDM_Thread+0x25c>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
      }
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 80046f8:	2017      	movs	r0, #23
 80046fa:	f002 fd0f 	bl	800711c <BSP_BC_CmdSend>
    }      
    
    evt = osMessageGet(sdThreadQueue_id, osWaitForever);  // wait for message      
 80046fe:	4b55      	ldr	r3, [pc, #340]	; (8004854 <SDM_Thread+0x27c>)
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	4618      	mov	r0, r3
 800470c:	f014 f990 	bl	8018a30 <osMessageGet>
    
    if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 8004710:	4b51      	ldr	r3, [pc, #324]	; (8004858 <SDM_Thread+0x280>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d004      	beq.n	8004724 <SDM_Thread+0x14c>
 800471a:	4b4f      	ldr	r3, [pc, #316]	; (8004858 <SDM_Thread+0x280>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d1cc      	bne.n	80046be <SDM_Thread+0xe6>
    {      
      BSP_LED_On(LED1);
 8004724:	2000      	movs	r0, #0
 8004726:	f002 fcbd 	bl	80070a4 <BSP_LED_On>
      
      if (evt.status == osEventMessage)
 800472a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472c:	2b10      	cmp	r3, #16
 800472e:	d1c6      	bne.n	80046be <SDM_Thread+0xe6>
      {
        if(evt.value.v == SDM_START_STOP)
 8004730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004732:	f248 0201 	movw	r2, #32769	; 0x8001
 8004736:	4293      	cmp	r3, r2
 8004738:	d14b      	bne.n	80047d2 <SDM_Thread+0x1fa>
        {
          if(SD_Logging_Active == 0)
 800473a:	4b45      	ldr	r3, [pc, #276]	; (8004850 <SDM_Thread+0x278>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d12a      	bne.n	8004798 <SDM_Thread+0x1c0>
          {
            com_status = HS_DATALOG_SD_STARTED;            
 8004742:	4b45      	ldr	r3, [pc, #276]	; (8004858 <SDM_Thread+0x280>)
 8004744:	2202      	movs	r2, #2
 8004746:	701a      	strb	r2, [r3, #0]
            SM_TIM_Start();
 8004748:	f001 f9c6 	bl	8005ad8 <SM_TIM_Start>
            if (BSP_SD_IsDetected())
 800474c:	f003 f822 	bl	8007794 <BSP_SD_IsDetected>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01c      	beq.n	8004790 <SDM_Thread+0x1b8>
            {              
              if (init_SD_peripheral != 1)
 8004756:	4b37      	ldr	r3, [pc, #220]	; (8004834 <SDM_Thread+0x25c>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d004      	beq.n	8004768 <SDM_Thread+0x190>
              {
                SDM_SD_Init();
 800475e:	f000 f945 	bl	80049ec <SDM_SD_Init>
                init_SD_peripheral = 1;
 8004762:	4b34      	ldr	r3, [pc, #208]	; (8004834 <SDM_Thread+0x25c>)
 8004764:	2201      	movs	r2, #1
 8004766:	701a      	strb	r2, [r3, #0]
              }
              SD_present = 1;
 8004768:	4b3c      	ldr	r3, [pc, #240]	; (800485c <SDM_Thread+0x284>)
 800476a:	2201      	movs	r2, #1
 800476c:	701a      	strb	r2, [r3, #0]
              if(SDM_InitFiles() == 0)
 800476e:	f000 fa41 	bl	8004bf4 <SDM_InitFiles>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <SDM_Thread+0x1ac>
              {
                SD_Logging_Active = 1;
 8004778:	4b35      	ldr	r3, [pc, #212]	; (8004850 <SDM_Thread+0x278>)
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
                BSP_LED_Off(LED_ORANGE);
 800477e:	2001      	movs	r0, #1
 8004780:	f002 fcaa 	bl	80070d8 <BSP_LED_Off>
              }
              testTime = HAL_GetTick();
 8004784:	f003 f94e 	bl	8007a24 <HAL_GetTick>
 8004788:	4603      	mov	r3, r0
 800478a:	4a35      	ldr	r2, [pc, #212]	; (8004860 <SDM_Thread+0x288>)
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e796      	b.n	80046be <SDM_Thread+0xe6>
            }
            else
            {
              SD_present = 0;
 8004790:	4b32      	ldr	r3, [pc, #200]	; (800485c <SDM_Thread+0x284>)
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	e792      	b.n	80046be <SDM_Thread+0xe6>
            }
          }
          else if (SD_Logging_Active == 1)
 8004798:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <SDM_Thread+0x278>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d18e      	bne.n	80046be <SDM_Thread+0xe6>
          {      
            SM_TIM_Stop();
 80047a0:	f001 f9a4 	bl	8005aec <SM_TIM_Stop>
            
            if(SDM_CloseFiles() == 0)
 80047a4:	f000 fa9e 	bl	8004ce4 <SDM_CloseFiles>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <SDM_Thread+0x1dc>
            {
              SD_Logging_Active = 0;
 80047ae:	4b28      	ldr	r3, [pc, #160]	; (8004850 <SDM_Thread+0x278>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
            }
            SDM_Memory_Deinit();
 80047b4:	f000 f8a0 	bl	80048f8 <SDM_Memory_Deinit>
            
            if (init_SD_peripheral != 0)
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <SDM_Thread+0x25c>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <SDM_Thread+0x1f2>
            {
              SDM_SD_DeInit();
 80047c0:	f000 f93c 	bl	8004a3c <SDM_SD_DeInit>
              init_SD_peripheral = 0;
 80047c4:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <SDM_Thread+0x25c>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	701a      	strb	r2, [r3, #0]
            }
            com_status = HS_DATALOG_IDLE;
 80047ca:	4b23      	ldr	r3, [pc, #140]	; (8004858 <SDM_Thread+0x280>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e775      	b.n	80046be <SDM_Thread+0xe6>
          }
        }
        else
        {
          if(evt.value.v & SDM_DATA_READY_MASK)
 80047d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f43f af70 	beq.w	80046be <SDM_Thread+0xe6>
          {
            COM_SensorStatus_t * sensor_status; 
            uint32_t buf_size;
            uint8_t sensor_id = (uint8_t)(evt.value.v & SDM_SENSOR_ID_MASK);
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            {
              oldTime[sensor_id] = HAL_GetTick();
            }
#endif          
            
            sensor_status = COM_GetSensorStatus(sensor_id);
 80047e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd fabf 	bl	8001d6c <COM_GetSensorStatus>
 80047ee:	6578      	str	r0, [r7, #84]	; 0x54
            buf_size = sensor_status->sdWriteBufferSize;
 80047f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	653b      	str	r3, [r7, #80]	; 0x50
            
            if(evt.value.v & SDM_DATA_FIRST_HALF_MASK) // Data available on first half of the circular buffer
 80047f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <SDM_Thread+0x240>
            {
              SDM_WriteBuffer(sensor_id, SD_WriteBuffer[sensor_id], buf_size);
 8004800:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 8004804:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004808:	4a16      	ldr	r2, [pc, #88]	; (8004864 <SDM_Thread+0x28c>)
 800480a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004810:	4619      	mov	r1, r3
 8004812:	f000 fb0d 	bl	8004e30 <SDM_WriteBuffer>
 8004816:	e752      	b.n	80046be <SDM_Thread+0xe6>
            }
            else // Data available on second half of the circular buffer
            {
              SDM_WriteBuffer(sensor_id, (uint8_t *)(SD_WriteBuffer[sensor_id]+buf_size), buf_size);
 8004818:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 800481c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004820:	4a10      	ldr	r2, [pc, #64]	; (8004864 <SDM_Thread+0x28c>)
 8004822:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004828:	4413      	add	r3, r2
 800482a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800482c:	4619      	mov	r1, r3
 800482e:	f000 faff 	bl	8004e30 <SDM_WriteBuffer>
    BSP_LED_Off(LED1); 
 8004832:	e744      	b.n	80046be <SDM_Thread+0xe6>
 8004834:	2000097e 	.word	0x2000097e
 8004838:	08023794 	.word	0x08023794
 800483c:	20000994 	.word	0x20000994
 8004840:	200009aa 	.word	0x200009aa
 8004844:	08023798 	.word	0x08023798
 8004848:	200185a8 	.word	0x200185a8
 800484c:	20000988 	.word	0x20000988
 8004850:	2000097c 	.word	0x2000097c
 8004854:	200185a0 	.word	0x200185a0
 8004858:	20000504 	.word	0x20000504
 800485c:	2000097d 	.word	0x2000097d
 8004860:	20000984 	.word	0x20000984
 8004864:	20018804 	.word	0x20018804

08004868 <HAL_PWR_PVDCallback>:
* @brief  PWR PVD interrupt callback
* @param  None 
* @retval None
*/
void HAL_PWR_PVDCallback(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  BatteryLow = 1;
 800486c:	4b03      	ldr	r3, [pc, #12]	; (800487c <HAL_PWR_PVDCallback+0x14>)
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
}
 8004872:	bf00      	nop
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	20000988 	.word	0x20000988

08004880 <SDM_Memory_Init>:
*         the SD_WriteBuffer associated to each active sensor.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 8004886:	f7fd fa3f 	bl	8001d08 <COM_GetDeviceDescriptor>
 800488a:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e026      	b.n	80048e0 <SDM_Memory_Init+0x60>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fa68 	bl	8001d6c <COM_GetSensorStatus>
 800489c:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	7b9b      	ldrb	r3, [r3, #14]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d014      	beq.n	80048d0 <SDM_Memory_Init+0x50>
    {
      SD_WriteBuffer[i] = HSD_malloc(sensor_status->sdWriteBufferSize*2);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f01a fd21 	bl	801f2f4 <malloc>
 80048b2:	4603      	mov	r3, r0
 80048b4:	4619      	mov	r1, r3
 80048b6:	4a0f      	ldr	r2, [pc, #60]	; (80048f4 <SDM_Memory_Init+0x74>)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      if(!SD_WriteBuffer[i])
 80048be:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <SDM_Memory_Init+0x74>)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <SDM_Memory_Init+0x5a>
      {
        _Error_Handler();
 80048ca:	f000 fd7f 	bl	80053cc <_Error_Handler>
 80048ce:	e004      	b.n	80048da <SDM_Memory_Init+0x5a>
      }
    }
    else
    {
      SD_WriteBuffer[i] = 0;
 80048d0:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <SDM_Memory_Init+0x74>)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2100      	movs	r1, #0
 80048d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3301      	adds	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d3d3      	bcc.n	8004892 <SDM_Memory_Init+0x12>
    }
  }
  return 1;
 80048ea:	2301      	movs	r3, #1
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20018804 	.word	0x20018804

080048f8 <SDM_Memory_Deinit>:
* @brief  SD Card Manager memory De-initialization.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Deinit(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 80048fe:	f7fd fa03 	bl	8001d08 <COM_GetDeviceDescriptor>
 8004902:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e01e      	b.n	8004948 <SDM_Memory_Deinit+0x50>
  {
    sensor_status = COM_GetSensorStatus(i);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	4618      	mov	r0, r3
 8004910:	f7fd fa2c 	bl	8001d6c <COM_GetSensorStatus>
 8004914:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive && SD_WriteBuffer[i]!=0)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	7b9b      	ldrb	r3, [r3, #14]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d011      	beq.n	8004942 <SDM_Memory_Deinit+0x4a>
 800491e:	4a0f      	ldr	r2, [pc, #60]	; (800495c <SDM_Memory_Deinit+0x64>)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <SDM_Memory_Deinit+0x4a>
    {
      HSD_free(SD_WriteBuffer[i]);
 800492a:	4a0c      	ldr	r2, [pc, #48]	; (800495c <SDM_Memory_Deinit+0x64>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004932:	4618      	mov	r0, r3
 8004934:	f01a fce6 	bl	801f304 <free>
      SD_WriteBuffer[i] = NULL;
 8004938:	4a08      	ldr	r2, [pc, #32]	; (800495c <SDM_Memory_Deinit+0x64>)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2100      	movs	r1, #0
 800493e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3301      	adds	r3, #1
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	429a      	cmp	r2, r3
 8004950:	d3db      	bcc.n	800490a <SDM_Memory_Deinit+0x12>
    }
  }
  return 1;
 8004952:	2301      	movs	r3, #1
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20018804 	.word	0x20018804

08004960 <SDM_Peripheral_Init>:


void SDM_Peripheral_Init(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  BSP_SD_Detect_Init();   
 8004964:	f002 fef0 	bl	8007748 <BSP_SD_Detect_Init>
}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}

0800496c <SDM_OS_Init>:
* @brief  Initialize SD Card Manager thread and queue
* @param  None
* @retval None
*/
void SDM_OS_Init(void)
{
 800496c:	b5b0      	push	{r4, r5, r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
  sdioSem_id = osSemaphoreCreate(osSemaphore(sdioSem), 1);
 8004972:	2101      	movs	r1, #1
 8004974:	4816      	ldr	r0, [pc, #88]	; (80049d0 <SDM_OS_Init+0x64>)
 8004976:	f013 fe61 	bl	801863c <osSemaphoreCreate>
 800497a:	4603      	mov	r3, r0
 800497c:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <SDM_OS_Init+0x68>)
 800497e:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(sdioSem_id, osWaitForever);
 8004980:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <SDM_OS_Init+0x68>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f04f 31ff 	mov.w	r1, #4294967295
 8004988:	4618      	mov	r0, r3
 800498a:	f013 fe7b 	bl	8018684 <osSemaphoreWait>
  
  sdThreadQueue_id = osMessageCreate(osMessageQ(sdThreadQueue), NULL);
 800498e:	2100      	movs	r1, #0
 8004990:	4811      	ldr	r0, [pc, #68]	; (80049d8 <SDM_OS_Init+0x6c>)
 8004992:	f013 fffb 	bl	801898c <osMessageCreate>
 8004996:	4603      	mov	r3, r0
 8004998:	4a10      	ldr	r2, [pc, #64]	; (80049dc <SDM_OS_Init+0x70>)
 800499a:	6013      	str	r3, [r2, #0]
  
  vQueueAddToRegistry( sdThreadQueue_id, "sdThreadQueue_id" );
 800499c:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <SDM_OS_Init+0x70>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	490f      	ldr	r1, [pc, #60]	; (80049e0 <SDM_OS_Init+0x74>)
 80049a2:	4618      	mov	r0, r3
 80049a4:	f015 f858 	bl	8019a58 <vQueueAddToRegistry>
  
  /* Thread definition: read data */
  osThreadDef(SDM_On_Off_Thread, SDM_Thread, SD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE*4);
 80049a8:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <SDM_OS_Init+0x78>)
 80049aa:	1d3c      	adds	r4, r7, #4
 80049ac:	461d      	mov	r5, r3
 80049ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  SDM_Thread_Id = osThreadCreate(osThread(SDM_On_Off_Thread), NULL);
 80049b6:	1d3b      	adds	r3, r7, #4
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f013 fe17 	bl	80185ee <osThreadCreate>
 80049c0:	4603      	mov	r3, r0
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <SDM_OS_Init+0x7c>)
 80049c4:	6013      	str	r3, [r2, #0]
}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bdb0      	pop	{r4, r5, r7, pc}
 80049ce:	bf00      	nop
 80049d0:	08023afc 	.word	0x08023afc
 80049d4:	2001882c 	.word	0x2001882c
 80049d8:	08023b00 	.word	0x08023b00
 80049dc:	200185a0 	.word	0x200185a0
 80049e0:	080237d0 	.word	0x080237d0
 80049e4:	080237e4 	.word	0x080237e4
 80049e8:	20018800 	.word	0x20018800

080049ec <SDM_SD_Init>:
* @brief  Initialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_Init(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80049f0:	490f      	ldr	r1, [pc, #60]	; (8004a30 <SDM_SD_Init+0x44>)
 80049f2:	4810      	ldr	r0, [pc, #64]	; (8004a34 <SDM_SD_Init+0x48>)
 80049f4:	f013 fcae 	bl	8018354 <FATFS_LinkDriver>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d115      	bne.n	8004a2a <SDM_SD_Init+0x3e>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80049fe:	2200      	movs	r2, #0
 8004a00:	490b      	ldr	r1, [pc, #44]	; (8004a30 <SDM_SD_Init+0x44>)
 8004a02:	480d      	ldr	r0, [pc, #52]	; (8004a38 <SDM_SD_Init+0x4c>)
 8004a04:	f012 fcd6 	bl	80173b4 <f_mount>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00d      	beq.n	8004a2a <SDM_SD_Init+0x3e>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f002 fb48 	bl	80070a4 <BSP_LED_On>
        HAL_Delay(500);
 8004a14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a18:	f003 f810 	bl	8007a3c <HAL_Delay>
        BSP_LED_Off(LED1);
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f002 fb5b 	bl	80070d8 <BSP_LED_Off>
        HAL_Delay(100);
 8004a22:	2064      	movs	r0, #100	; 0x64
 8004a24:	f003 f80a 	bl	8007a3c <HAL_Delay>
        BSP_LED_On(LED1);
 8004a28:	e7f1      	b.n	8004a0e <SDM_SD_Init+0x22>
      }
    }
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	200185a4 	.word	0x200185a4
 8004a34:	08023ae8 	.word	0x08023ae8
 8004a38:	2001692c 	.word	0x2001692c

08004a3c <SDM_SD_DeInit>:
* @brief  Deinitialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_DeInit(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  if(FATFS_UnLinkDriver(SDPath) == 0)
 8004a40:	480e      	ldr	r0, [pc, #56]	; (8004a7c <SDM_SD_DeInit+0x40>)
 8004a42:	f013 fccf 	bl	80183e4 <FATFS_UnLinkDriver>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d115      	bne.n	8004a78 <SDM_SD_DeInit+0x3c>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(NULL, (TCHAR const*)SDPath, 0) != FR_OK)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	490b      	ldr	r1, [pc, #44]	; (8004a7c <SDM_SD_DeInit+0x40>)
 8004a50:	2000      	movs	r0, #0
 8004a52:	f012 fcaf 	bl	80173b4 <f_mount>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00d      	beq.n	8004a78 <SDM_SD_DeInit+0x3c>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f002 fb21 	bl	80070a4 <BSP_LED_On>
        HAL_Delay(500);
 8004a62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a66:	f002 ffe9 	bl	8007a3c <HAL_Delay>
        BSP_LED_Off(LED1);
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f002 fb34 	bl	80070d8 <BSP_LED_Off>
        HAL_Delay(100);
 8004a70:	2064      	movs	r0, #100	; 0x64
 8004a72:	f002 ffe3 	bl	8007a3c <HAL_Delay>
        BSP_LED_On(LED1);
 8004a76:	e7f1      	b.n	8004a5c <SDM_SD_DeInit+0x20>
      }
    }
  }
}
 8004a78:	bf00      	nop
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	200185a4 	.word	0x200185a4

08004a80 <SDM_OpenFile>:
  return 0; // OK
}


uint8_t SDM_OpenFile(uint32_t id, const char *sensorName)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b090      	sub	sp, #64	; 0x40
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  char file_name[50];
  
  sprintf(file_name, "%s%s", sensorName, ".dat");
 8004a8a:	f107 000c 	add.w	r0, r7, #12
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <SDM_OpenFile+0x48>)
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	490e      	ldr	r1, [pc, #56]	; (8004acc <SDM_OpenFile+0x4c>)
 8004a94:	f01b f9a2 	bl	801fddc <siprintf>
  
  if(f_open(&FileHandler[id], (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <SDM_OpenFile+0x50>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f107 010c 	add.w	r1, r7, #12
 8004aaa:	220a      	movs	r2, #10
 8004aac:	4618      	mov	r0, r3
 8004aae:	f012 fcc7 	bl	8017440 <f_open>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <SDM_OpenFile+0x3c>
  {
    return 1;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <SDM_OpenFile+0x3e>
  }
  
  return 0; // OK
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3740      	adds	r7, #64	; 0x40
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	0802382c 	.word	0x0802382c
 8004acc:	08023834 	.word	0x08023834
 8004ad0:	20016fc0 	.word	0x20016fc0

08004ad4 <SDM_CloseFile>:


uint8_t SDM_CloseFile(uint32_t id)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  return f_close(&FileHandler[id]);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	4a05      	ldr	r2, [pc, #20]	; (8004afc <SDM_CloseFile+0x28>)
 8004ae8:	4413      	add	r3, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f013 f998 	bl	8017e20 <f_close>
 8004af0:	4603      	mov	r3, r0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20016fc0 	.word	0x20016fc0

08004b00 <SDM_GetLastDirNumber>:
* @brief  Scan SD Card file system to find the latest directory number that includes to the LOG_DIR_PREFIX
* @param  None
* @retval 
*/
uint32_t SDM_GetLastDirNumber(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b0da      	sub	sp, #360	; 0x168
 8004b04:	af00      	add	r7, sp, #0
  FRESULT fr;     /* Return value */
  DIR dj;         /* Directory search object */
  FILINFO fno;    /* File information */
  int dir_n = 0, tmp;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 8004b0c:	1d3a      	adds	r2, r7, #4
 8004b0e:	4937      	ldr	r1, [pc, #220]	; (8004bec <SDM_GetLastDirNumber+0xec>)
 8004b10:	4613      	mov	r3, r2
 8004b12:	c903      	ldmia	r1, {r0, r1}
 8004b14:	6018      	str	r0, [r3, #0]
 8004b16:	3304      	adds	r3, #4
 8004b18:	8019      	strh	r1, [r3, #0]
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	0c09      	lsrs	r1, r1, #16
 8004b1e:	7019      	strb	r1, [r3, #0]
 8004b20:	2300      	movs	r3, #0
 8004b22:	71d3      	strb	r3, [r2, #7]
  
  dir_name[sizeof(LOG_DIR_PREFIX)-1] = '*';  /* wildcard */
 8004b24:	1d3b      	adds	r3, r7, #4
 8004b26:	222a      	movs	r2, #42	; 0x2a
 8004b28:	719a      	strb	r2, [r3, #6]
  dir_name[sizeof(LOG_DIR_PREFIX)] = 0;
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	71da      	strb	r2, [r3, #7]
  
  fr = f_findfirst(&dj, &fno, "", dir_name);  /* Start to search for matching directories */
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	f107 010c 	add.w	r1, r7, #12
 8004b36:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8004b3a:	4a2d      	ldr	r2, [pc, #180]	; (8004bf0 <SDM_GetLastDirNumber+0xf0>)
 8004b3c:	f013 fa98 	bl	8018070 <f_findfirst>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  if(fno.fname[0])
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	7d9b      	ldrb	r3, [r3, #22]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d038      	beq.n	8004bc2 <SDM_GetLastDirNumber+0xc2>
  {
    tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8004b50:	f107 030c 	add.w	r3, r7, #12
 8004b54:	331d      	adds	r3, #29
 8004b56:	220a      	movs	r2, #10
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f01c f88a 	bl	8020c74 <strtol>
 8004b60:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    if(dir_n<tmp)
 8004b64:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8004b68:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	da28      	bge.n	8004bc2 <SDM_GetLastDirNumber+0xc2>
    {
      dir_n = tmp;
 8004b70:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004b74:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    }
  }
  
  /* Repeat while an item is found */
  while (fr == FR_OK && fno.fname[0])
 8004b78:	e023      	b.n	8004bc2 <SDM_GetLastDirNumber+0xc2>
  {
    fr = f_findnext(&dj, &fno);   /* Search for next item */
 8004b7a:	f107 020c 	add.w	r2, r7, #12
 8004b7e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f013 fa4b 	bl	8018020 <f_findnext>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    if(fno.fname[0])
 8004b90:	f107 030c 	add.w	r3, r7, #12
 8004b94:	7d9b      	ldrb	r3, [r3, #22]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d013      	beq.n	8004bc2 <SDM_GetLastDirNumber+0xc2>
    {
      tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8004b9a:	f107 030c 	add.w	r3, r7, #12
 8004b9e:	331d      	adds	r3, #29
 8004ba0:	220a      	movs	r2, #10
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f01c f865 	bl	8020c74 <strtol>
 8004baa:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
      if(tmp > dir_n)
 8004bae:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004bb2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	dd03      	ble.n	8004bc2 <SDM_GetLastDirNumber+0xc2>
      {
        dir_n = tmp;
 8004bba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004bbe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  while (fr == FR_OK && fno.fname[0])
 8004bc2:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <SDM_GetLastDirNumber+0xd4>
 8004bca:	f107 030c 	add.w	r3, r7, #12
 8004bce:	7d9b      	ldrb	r3, [r3, #22]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1d2      	bne.n	8004b7a <SDM_GetLastDirNumber+0x7a>
      }
    }
  }
  
  f_closedir(&dj);
 8004bd4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f013 f9be 	bl	8017f5a <f_closedir>
  return (uint32_t)dir_n;
 8004bde:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	08023840 	.word	0x08023840
 8004bf0:	0802383c 	.word	0x0802383c

08004bf4 <SDM_InitFiles>:
* @brief  Open one file for each sensor to store raw data and a JSON file with the device configuration
* @param  None
* @retval None
*/
uint8_t SDM_InitFiles(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b096      	sub	sp, #88	; 0x58
 8004bf8:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  COM_SensorDescriptor_t * sensor_descriptor; 
  
  uint32_t i = 0, dir_n = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8004bfe:	2300      	movs	r3, #0
 8004c00:	653b      	str	r3, [r7, #80]	; 0x50
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  
  device_descriptor = COM_GetDeviceDescriptor();  
 8004c02:	f7fd f881 	bl	8001d08 <COM_GetDeviceDescriptor>
 8004c06:	64f8      	str	r0, [r7, #76]	; 0x4c
  dir_n = SDM_GetLastDirNumber();
 8004c08:	f7ff ff7a 	bl	8004b00 <SDM_GetLastDirNumber>
 8004c0c:	6538      	str	r0, [r7, #80]	; 0x50
  dir_n++;
 8004c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c10:	3301      	adds	r3, #1
 8004c12:	653b      	str	r3, [r7, #80]	; 0x50
  
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8004c14:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c1a:	4a2f      	ldr	r2, [pc, #188]	; (8004cd8 <SDM_InitFiles+0xe4>)
 8004c1c:	492f      	ldr	r1, [pc, #188]	; (8004cdc <SDM_InitFiles+0xe8>)
 8004c1e:	f01b f8dd 	bl	801fddc <siprintf>
  
  FRESULT test = f_mkdir(dir_name);
 8004c22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c26:	4618      	mov	r0, r3
 8004c28:	f013 fa40 	bl	80180ac <f_mkdir>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  if(test != FR_OK)
 8004c32:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <SDM_InitFiles+0x4a>
  {
    return 1;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e047      	b.n	8004cce <SDM_InitFiles+0xda>
  {
    return 1;    
  }
#endif
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c3e:	2300      	movs	r3, #0
 8004c40:	657b      	str	r3, [r7, #84]	; 0x54
 8004c42:	e024      	b.n	8004c8e <SDM_InitFiles+0x9a>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fd f88f 	bl	8001d6c <COM_GetSensorStatus>
 8004c4e:	6478      	str	r0, [r7, #68]	; 0x44
    
    if(sensor_status->isActive)
 8004c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c52:	7b9b      	ldrb	r3, [r3, #14]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d017      	beq.n	8004c88 <SDM_InitFiles+0x94>
    {
      sensor_descriptor = COM_GetSensorDescriptor(i);
 8004c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fd f871 	bl	8001d44 <COM_GetSensorDescriptor>
 8004c62:	6438      	str	r0, [r7, #64]	; 0x40
      sprintf(file_name, "%s/%s", dir_name, sensor_descriptor->name);
 8004c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c66:	3301      	adds	r3, #1
 8004c68:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	491c      	ldr	r1, [pc, #112]	; (8004ce0 <SDM_InitFiles+0xec>)
 8004c70:	f01b f8b4 	bl	801fddc <siprintf>
      
      if(SDM_OpenFile(i, file_name)!=0)
 8004c74:	463b      	mov	r3, r7
 8004c76:	4619      	mov	r1, r3
 8004c78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004c7a:	f7ff ff01 	bl	8004a80 <SDM_OpenFile>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <SDM_InitFiles+0x94>
      {
        return 1;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e022      	b.n	8004cce <SDM_InitFiles+0xda>
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d3d5      	bcc.n	8004c44 <SDM_InitFiles+0x50>
      }
    }
  }
  
  SDM_Memory_Init();
 8004c98:	f7ff fdf2 	bl	8004880 <SDM_Memory_Init>
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	657b      	str	r3, [r7, #84]	; 0x54
 8004ca0:	e00f      	b.n	8004cc2 <SDM_InitFiles+0xce>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd f860 	bl	8001d6c <COM_GetSensorStatus>
 8004cac:	6478      	str	r0, [r7, #68]	; 0x44
    
    if(sensor_status->isActive)
 8004cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb0:	7b9b      	ldrb	r3, [r3, #14]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <SDM_InitFiles+0xc8>
    {
      SDM_StartSensorThread(i);
 8004cb6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004cb8:	f000 f9b4 	bl	8005024 <SDM_StartSensorThread>
  for(i=0;i<device_descriptor->nSensor;i++)
 8004cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	657b      	str	r3, [r7, #84]	; 0x54
 8004cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d3ea      	bcc.n	8004ca2 <SDM_InitFiles+0xae>
    }
  }  
  
  return 0;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3758      	adds	r7, #88	; 0x58
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	08023848 	.word	0x08023848
 8004cdc:	08023850 	.word	0x08023850
 8004ce0:	08023858 	.word	0x08023858

08004ce4 <SDM_CloseFiles>:

uint8_t SDM_CloseFiles(void)
{
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b097      	sub	sp, #92	; 0x5c
 8004ce8:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t id = 0, dir_n = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	657b      	str	r3, [r7, #84]	; 0x54
 8004cee:	2300      	movs	r3, #0
 8004cf0:	653b      	str	r3, [r7, #80]	; 0x50
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  char* JSON_string = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	607b      	str	r3, [r7, #4]
  
  device_descriptor = COM_GetDeviceDescriptor();
 8004cf6:	f7fd f807 	bl	8001d08 <COM_GetDeviceDescriptor>
 8004cfa:	64f8      	str	r0, [r7, #76]	; 0x4c
  
  /* Put all the sensors in "SUSPENDED" mode */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8004d00:	e00f      	b.n	8004d22 <SDM_CloseFiles+0x3e>
  {
    sensor_status = COM_GetSensorStatus(id);
 8004d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fd f830 	bl	8001d6c <COM_GetSensorStatus>
 8004d0c:	64b8      	str	r0, [r7, #72]	; 0x48
    
    if(sensor_status->isActive)
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d10:	7b9b      	ldrb	r3, [r3, #14]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <SDM_CloseFiles+0x38>
    {
      SDM_StopSensorThread(id);
 8004d16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004d18:	f000 f9f6 	bl	8005108 <SDM_StopSensorThread>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d1e:	3301      	adds	r3, #1
 8004d20:	657b      	str	r3, [r7, #84]	; 0x54
 8004d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d3ea      	bcc.n	8004d02 <SDM_CloseFiles+0x1e>
    }
  }
  
  /* Flush remaining data and close the files  */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d30:	e017      	b.n	8004d62 <SDM_CloseFiles+0x7e>
  {
    sensor_status = COM_GetSensorStatus(id);
 8004d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd f818 	bl	8001d6c <COM_GetSensorStatus>
 8004d3c:	64b8      	str	r0, [r7, #72]	; 0x48
    
    if(sensor_status->isActive)
 8004d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d40:	7b9b      	ldrb	r3, [r3, #14]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <SDM_CloseFiles+0x78>
    {
      SDM_Flush_Buffer(id);
 8004d46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004d48:	f000 f892 	bl	8004e70 <SDM_Flush_Buffer>
      if(SDM_CloseFile(id)!=0)
 8004d4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004d4e:	f7ff fec1 	bl	8004ad4 <SDM_CloseFile>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <SDM_CloseFiles+0x78>
      {
        return 1;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e042      	b.n	8004de2 <SDM_CloseFiles+0xfe>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5e:	3301      	adds	r3, #1
 8004d60:	657b      	str	r3, [r7, #84]	; 0x54
 8004d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d3e2      	bcc.n	8004d32 <SDM_CloseFiles+0x4e>
  {
    return 1;
  }  
#endif
  
  dir_n = SDM_GetLastDirNumber();
 8004d6c:	f7ff fec8 	bl	8004b00 <SDM_GetLastDirNumber>
 8004d70:	6538      	str	r0, [r7, #80]	; 0x50
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8004d72:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d78:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <SDM_CloseFiles+0x108>)
 8004d7a:	491d      	ldr	r1, [pc, #116]	; (8004df0 <SDM_CloseFiles+0x10c>)
 8004d7c:	f01b f82e 	bl	801fddc <siprintf>
  sprintf(file_name, "%s/DeviceConfig.json", dir_name);
 8004d80:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d84:	f107 0308 	add.w	r3, r7, #8
 8004d88:	491a      	ldr	r1, [pc, #104]	; (8004df4 <SDM_CloseFiles+0x110>)
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f01b f826 	bl	801fddc <siprintf>
  
  if(f_open(&FileConfigHandler, (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8004d90:	f107 0308 	add.w	r3, r7, #8
 8004d94:	220a      	movs	r2, #10
 8004d96:	4619      	mov	r1, r3
 8004d98:	4817      	ldr	r0, [pc, #92]	; (8004df8 <SDM_CloseFiles+0x114>)
 8004d9a:	f012 fb51 	bl	8017440 <f_open>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <SDM_CloseFiles+0xc4>
  {
    return 1;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e01c      	b.n	8004de2 <SDM_CloseFiles+0xfe>
  }
  
  (void)SDM_CreateJSON(&JSON_string);
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fa58 	bl	8005260 <SDM_CreateJSON>
  SDM_WriteConfigBuffer((uint8_t*)JSON_string, strlen(JSON_string));  
 8004db0:	687c      	ldr	r4, [r7, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fb fa2d 	bl	8000214 <strlen>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f000 f81c 	bl	8004dfc <SDM_WriteConfigBuffer>
  
  if (f_close(&FileConfigHandler)!= FR_OK)
 8004dc4:	480c      	ldr	r0, [pc, #48]	; (8004df8 <SDM_CloseFiles+0x114>)
 8004dc6:	f013 f82b 	bl	8017e20 <f_close>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <SDM_CloseFiles+0xf0>
  {
    return 1;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e006      	b.n	8004de2 <SDM_CloseFiles+0xfe>
  }
  
  HSD_JSON_free(JSON_string);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fb ffc8 	bl	8000d6c <HSD_JSON_free>
  JSON_string = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	607b      	str	r3, [r7, #4]
  
  return 0;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	375c      	adds	r7, #92	; 0x5c
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd90      	pop	{r4, r7, pc}
 8004dea:	bf00      	nop
 8004dec:	08023848 	.word	0x08023848
 8004df0:	08023850 	.word	0x08023850
 8004df4:	08023860 	.word	0x08023860
 8004df8:	20016d90 	.word	0x20016d90

08004dfc <SDM_WriteConfigBuffer>:


uint8_t SDM_WriteConfigBuffer(uint8_t *buffer, uint32_t size)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t byteswritten;
  FRESULT returnWrite;
  
  returnWrite = f_write(&FileConfigHandler, buffer, size, (void *)&byteswritten);
 8004e06:	f107 0308 	add.w	r3, r7, #8
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4807      	ldr	r0, [pc, #28]	; (8004e2c <SDM_WriteConfigBuffer+0x30>)
 8004e10:	f012 fe13 	bl	8017a3a <f_write>
 8004e14:	4603      	mov	r3, r0
 8004e16:	73fb      	strb	r3, [r7, #15]
  if(returnWrite != FR_OK)
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <SDM_WriteConfigBuffer+0x26>
  {
    return 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <SDM_WriteConfigBuffer+0x28>
  }  
  return 1;
 8004e22:	2301      	movs	r3, #1
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20016d90 	.word	0x20016d90

08004e30 <SDM_WriteBuffer>:


uint8_t SDM_WriteBuffer(uint32_t id, uint8_t *buffer, uint32_t size)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t byteswritten;
  
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	4a09      	ldr	r2, [pc, #36]	; (8004e6c <SDM_WriteBuffer+0x3c>)
 8004e48:	1898      	adds	r0, r3, r2
 8004e4a:	f107 0314 	add.w	r3, r7, #20
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	f012 fdf2 	bl	8017a3a <f_write>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <SDM_WriteBuffer+0x30>
  {
    return 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e000      	b.n	8004e62 <SDM_WriteBuffer+0x32>
  }  
  return 1;
 8004e60:	2301      	movs	r3, #1
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20016fc0 	.word	0x20016fc0

08004e70 <SDM_Flush_Buffer>:

/* Write remaining data to file */
uint8_t SDM_Flush_Buffer(uint32_t id)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint8_t ret = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
  uint32_t buf_size;
  COM_SensorStatus_t * sensor_status;   
  
  sensor_status = COM_GetSensorStatus(id);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fc ff73 	bl	8001d6c <COM_GetSensorStatus>
 8004e86:	6138      	str	r0, [r7, #16]
  buf_size = sensor_status->sdWriteBufferSize;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	60fb      	str	r3, [r7, #12]
  
  if(SD_WriteBufferIdx[id]>0 && SD_WriteBufferIdx[id]<(buf_size-1))
 8004e8e:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <SDM_Flush_Buffer+0xb8>)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d017      	beq.n	8004eca <SDM_Flush_Buffer+0x5a>
 8004e9a:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <SDM_Flush_Buffer+0xb8>)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d20f      	bcs.n	8004eca <SDM_Flush_Buffer+0x5a>
  {
    /* flush from the beginning */
    ret = SDM_WriteBuffer(id, SD_WriteBuffer[id], SD_WriteBufferIdx[id]+1);
 8004eaa:	4a20      	ldr	r2, [pc, #128]	; (8004f2c <SDM_Flush_Buffer+0xbc>)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004eb2:	4a1d      	ldr	r2, [pc, #116]	; (8004f28 <SDM_Flush_Buffer+0xb8>)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff ffb6 	bl	8004e30 <SDM_WriteBuffer>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	75fb      	strb	r3, [r7, #23]
 8004ec8:	e023      	b.n	8004f12 <SDM_Flush_Buffer+0xa2>
  }
  else if (SD_WriteBufferIdx[id]>(buf_size-1) && SD_WriteBufferIdx[id]<(buf_size*2-1))
 8004eca:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <SDM_Flush_Buffer+0xb8>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d91b      	bls.n	8004f12 <SDM_Flush_Buffer+0xa2>
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <SDM_Flush_Buffer+0xb8>)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d212      	bcs.n	8004f12 <SDM_Flush_Buffer+0xa2>
  {
    /* flush from half buffer */
    ret =  SDM_WriteBuffer(id, (uint8_t *)(SD_WriteBuffer[id]+buf_size), SD_WriteBufferIdx[id]+1-buf_size);
 8004eec:	4a0f      	ldr	r2, [pc, #60]	; (8004f2c <SDM_Flush_Buffer+0xbc>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	18d1      	adds	r1, r2, r3
 8004ef8:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <SDM_Flush_Buffer+0xb8>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	3301      	adds	r3, #1
 8004f06:	461a      	mov	r2, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ff91 	bl	8004e30 <SDM_WriteBuffer>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	75fb      	strb	r3, [r7, #23]
  }
  
  SD_WriteBufferIdx[id] = 0;
 8004f12:	4a05      	ldr	r2, [pc, #20]	; (8004f28 <SDM_Flush_Buffer+0xb8>)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2100      	movs	r1, #0
 8004f18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  return ret;
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000954 	.word	0x20000954
 8004f2c:	20018804 	.word	0x20018804

08004f30 <SDM_Fill_Buffer>:

/* Fill SD buffer with new data */
uint8_t SDM_Fill_Buffer(uint8_t id, uint8_t *src, uint16_t srcSize)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	6039      	str	r1, [r7, #0]
 8004f3a:	71fb      	strb	r3, [r7, #7]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	80bb      	strh	r3, [r7, #4]
  uint8_t *dst;
  uint32_t dstP, srcP=0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61bb      	str	r3, [r7, #24]
  COM_SensorStatus_t * sensor_status; 
  uint32_t dstSize, sdBufSize;
  
  
  sensor_status = COM_GetSensorStatus(id);
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fc ff10 	bl	8001d6c <COM_GetSensorStatus>
 8004f4c:	6178      	str	r0, [r7, #20]
  dst = SD_WriteBuffer[id];
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	4a31      	ldr	r2, [pc, #196]	; (8005018 <SDM_Fill_Buffer+0xe8>)
 8004f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f56:	613b      	str	r3, [r7, #16]
  dstP = SD_WriteBufferIdx[id];
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	4a30      	ldr	r2, [pc, #192]	; (800501c <SDM_Fill_Buffer+0xec>)
 8004f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f60:	61fb      	str	r3, [r7, #28]
  sdBufSize = sensor_status->sdWriteBufferSize;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	60fb      	str	r3, [r7, #12]
  dstSize = sdBufSize*2;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	60bb      	str	r3, [r7, #8]
  
  /* byte per byte copy */
  while(srcP < srcSize)
 8004f6e:	e013      	b.n	8004f98 <SDM_Fill_Buffer+0x68>
  {
    dst[dstP] = src[srcP];
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	441a      	add	r2, r3
 8004f76:	6939      	ldr	r1, [r7, #16]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	440b      	add	r3, r1
 8004f7c:	7812      	ldrb	r2, [r2, #0]
 8004f7e:	701a      	strb	r2, [r3, #0]
    dstP++;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3301      	adds	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
    srcP++;
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61bb      	str	r3, [r7, #24]
    if(dstP>=dstSize)
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d301      	bcc.n	8004f98 <SDM_Fill_Buffer+0x68>
    {
      dstP=0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
  while(srcP < srcSize)
 8004f98:	88bb      	ldrh	r3, [r7, #4]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d3e7      	bcc.n	8004f70 <SDM_Fill_Buffer+0x40>
    }
  }
  
  if(SD_WriteBufferIdx[id]<(dstSize/2) && dstP>=(dstSize/2)) // first half full
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <SDM_Fill_Buffer+0xec>)
 8004fa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d213      	bcs.n	8004fd8 <SDM_Fill_Buffer+0xa8>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d30e      	bcc.n	8004fd8 <SDM_Fill_Buffer+0xa8>
  {           
    // unlock write task
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8004fba:	4b19      	ldr	r3, [pc, #100]	; (8005020 <SDM_Fill_Buffer+0xf0>)
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f013 fcf2 	bl	80189b0 <osMessagePut>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d017      	beq.n	8005002 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004fd2:	f000 f9fb 	bl	80053cc <_Error_Handler>
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8004fd6:	e014      	b.n	8005002 <SDM_Fill_Buffer+0xd2>
    }
    
    // check for buffer consistency
  }
  else if(dstP<SD_WriteBufferIdx[id])  // second half full
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <SDM_Fill_Buffer+0xec>)
 8004fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d20d      	bcs.n	8005002 <SDM_Fill_Buffer+0xd2>
  {
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_SECOND_HALF_MASK, 0) != osOK)
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <SDM_Fill_Buffer+0xf0>)
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f013 fcdc 	bl	80189b0 <osMessagePut>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004ffe:	f000 f9e5 	bl	80053cc <_Error_Handler>
    }
  }
  SD_WriteBufferIdx[id] = dstP;
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	4905      	ldr	r1, [pc, #20]	; (800501c <SDM_Fill_Buffer+0xec>)
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  return 0;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3720      	adds	r7, #32
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20018804 	.word	0x20018804
 800501c:	20000954 	.word	0x20000954
 8005020:	200185a0 	.word	0x200185a0

08005024 <SDM_StartSensorThread>:
* @brief  Start sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StartSensorThread(uint32_t id)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 800502c:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <SDM_StartSensorThread+0xbc>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4293      	cmp	r3, r2
 8005036:	d102      	bne.n	800503e <SDM_StartSensorThread+0x1a>
  {
    IIS3DWB_Start();
 8005038:	f7fe fc94 	bl	8003964 <IIS3DWB_Start>
 800503c:	e046      	b.n	80050cc <SDM_StartSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 800503e:	4b29      	ldr	r3, [pc, #164]	; (80050e4 <SDM_StartSensorThread+0xc0>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4293      	cmp	r3, r2
 8005048:	d102      	bne.n	8005050 <SDM_StartSensorThread+0x2c>
  {
    HTS221_Start();
 800504a:	f7fe f9a7 	bl	800339c <HTS221_Start>
 800504e:	e03d      	b.n	80050cc <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 8005050:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <SDM_StartSensorThread+0xc4>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4293      	cmp	r3, r2
 800505a:	d102      	bne.n	8005062 <SDM_StartSensorThread+0x3e>
  {
    IIS2DH_Start();
 800505c:	f7fe f9c4 	bl	80033e8 <IIS2DH_Start>
 8005060:	e034      	b.n	80050cc <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 8005062:	4b22      	ldr	r3, [pc, #136]	; (80050ec <SDM_StartSensorThread+0xc8>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4293      	cmp	r3, r2
 800506c:	d102      	bne.n	8005074 <SDM_StartSensorThread+0x50>
  {
    IIS2MDC_Start();
 800506e:	f7fe f9e1 	bl	8003434 <IIS2MDC_Start>
 8005072:	e02b      	b.n	80050cc <SDM_StartSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 8005074:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <SDM_StartSensorThread+0xcc>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4293      	cmp	r3, r2
 800507e:	d102      	bne.n	8005086 <SDM_StartSensorThread+0x62>
  {
    IMP34DT05_Start();
 8005080:	f7fe fc96 	bl	80039b0 <IMP34DT05_Start>
 8005084:	e022      	b.n	80050cc <SDM_StartSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 8005086:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <SDM_StartSensorThread+0xd0>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4293      	cmp	r3, r2
 8005090:	d102      	bne.n	8005098 <SDM_StartSensorThread+0x74>
  {
    MP23ABS1_Start();
 8005092:	f7ff f8e3 	bl	800425c <MP23ABS1_Start>
 8005096:	e019      	b.n	80050cc <SDM_StartSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 8005098:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <SDM_StartSensorThread+0xd4>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d102      	bne.n	80050aa <SDM_StartSensorThread+0x86>
  {
    ISM330DHCX_Start();
 80050a4:	f7fe fcaa 	bl	80039fc <ISM330DHCX_Start>
 80050a8:	e010      	b.n	80050cc <SDM_StartSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 80050aa:	4b14      	ldr	r3, [pc, #80]	; (80050fc <SDM_StartSensorThread+0xd8>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d102      	bne.n	80050bc <SDM_StartSensorThread+0x98>
  {
    LPS22HH_Start();
 80050b6:	f7fe fcc7 	bl	8003a48 <LPS22HH_Start>
 80050ba:	e007      	b.n	80050cc <SDM_StartSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 80050bc:	4b10      	ldr	r3, [pc, #64]	; (8005100 <SDM_StartSensorThread+0xdc>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d101      	bne.n	80050cc <SDM_StartSensorThread+0xa8>
  {
    STTS751_Start();
 80050c8:	f000 fdb0 	bl	8005c2c <STTS751_Start>
  }
  sensor_first_dataReady[id] = 1;
 80050cc:	4a0d      	ldr	r2, [pc, #52]	; (8005104 <SDM_StartSensorThread+0xe0>)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	2201      	movs	r2, #1
 80050d4:	701a      	strb	r2, [r3, #0]
  
  return 0;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	200163a4 	.word	0x200163a4
 80050e4:	200166b8 	.word	0x200166b8
 80050e8:	200166c8 	.word	0x200166c8
 80050ec:	20016679 	.word	0x20016679
 80050f0:	200166c0 	.word	0x200166c0
 80050f4:	20016678 	.word	0x20016678
 80050f8:	200166b9 	.word	0x200166b9
 80050fc:	200166d1 	.word	0x200166d1
 8005100:	200166d0 	.word	0x200166d0
 8005104:	20000028 	.word	0x20000028

08005108 <SDM_StopSensorThread>:
* @brief  Stop sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StopSensorThread(uint32_t id)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 8005110:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <SDM_StopSensorThread+0xbc>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4293      	cmp	r3, r2
 800511a:	d102      	bne.n	8005122 <SDM_StopSensorThread+0x1a>
  {
    IIS3DWB_Stop();
 800511c:	f7fe fc30 	bl	8003980 <IIS3DWB_Stop>
 8005120:	e046      	b.n	80051b0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 8005122:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <SDM_StopSensorThread+0xc0>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4293      	cmp	r3, r2
 800512c:	d102      	bne.n	8005134 <SDM_StopSensorThread+0x2c>
  {
    HTS221_Stop();
 800512e:	f7fe f943 	bl	80033b8 <HTS221_Stop>
 8005132:	e03d      	b.n	80051b0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 8005134:	4b25      	ldr	r3, [pc, #148]	; (80051cc <SDM_StopSensorThread+0xc4>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4293      	cmp	r3, r2
 800513e:	d102      	bne.n	8005146 <SDM_StopSensorThread+0x3e>
  {
    IIS2DH_Stop();
 8005140:	f7fe f960 	bl	8003404 <IIS2DH_Stop>
 8005144:	e034      	b.n	80051b0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 8005146:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <SDM_StopSensorThread+0xc8>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4293      	cmp	r3, r2
 8005150:	d102      	bne.n	8005158 <SDM_StopSensorThread+0x50>
  {
    IIS2MDC_Stop();
 8005152:	f7fe f97d 	bl	8003450 <IIS2MDC_Stop>
 8005156:	e02b      	b.n	80051b0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 8005158:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <SDM_StopSensorThread+0xcc>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4293      	cmp	r3, r2
 8005162:	d102      	bne.n	800516a <SDM_StopSensorThread+0x62>
  {
    IMP34DT05_Stop();
 8005164:	f7fe fc32 	bl	80039cc <IMP34DT05_Stop>
 8005168:	e022      	b.n	80051b0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 800516a:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <SDM_StopSensorThread+0xd0>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4293      	cmp	r3, r2
 8005174:	d102      	bne.n	800517c <SDM_StopSensorThread+0x74>
  {
    MP23ABS1_Stop();
 8005176:	f7ff f87f 	bl	8004278 <MP23ABS1_Stop>
 800517a:	e019      	b.n	80051b0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 800517c:	4b17      	ldr	r3, [pc, #92]	; (80051dc <SDM_StopSensorThread+0xd4>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4293      	cmp	r3, r2
 8005186:	d102      	bne.n	800518e <SDM_StopSensorThread+0x86>
  {
    ISM330DHCX_Stop();
 8005188:	f7fe fc46 	bl	8003a18 <ISM330DHCX_Stop>
 800518c:	e010      	b.n	80051b0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <SDM_StopSensorThread+0xd8>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4293      	cmp	r3, r2
 8005198:	d102      	bne.n	80051a0 <SDM_StopSensorThread+0x98>
  {
    LPS22HH_Stop();
 800519a:	f7fe fc63 	bl	8003a64 <LPS22HH_Stop>
 800519e:	e007      	b.n	80051b0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 80051a0:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <SDM_StopSensorThread+0xdc>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <SDM_StopSensorThread+0xa8>
  {
    STTS751_Stop();
 80051ac:	f000 fd4c 	bl	8005c48 <STTS751_Stop>
  }
  sensor_first_dataReady[id] = 0;
 80051b0:	4a0d      	ldr	r2, [pc, #52]	; (80051e8 <SDM_StopSensorThread+0xe0>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
  return 0;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	200163a4 	.word	0x200163a4
 80051c8:	200166b8 	.word	0x200166b8
 80051cc:	200166c8 	.word	0x200166c8
 80051d0:	20016679 	.word	0x20016679
 80051d4:	200166c0 	.word	0x200166c0
 80051d8:	20016678 	.word	0x20016678
 80051dc:	200166b9 	.word	0x200166b9
 80051e0:	200166d1 	.word	0x200166d1
 80051e4:	200166d0 	.word	0x200166d0
 80051e8:	20000028 	.word	0x20000028

080051ec <SDM_ReadJSON>:



uint32_t SDM_ReadJSON(char *serialized_string)
{  
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  static COM_Device_t JSON_device; 
  COM_Device_t *local_device; 
  uint8_t ii;
  uint32_t size;
  
  local_device = COM_GetDevice();  
 80051f4:	f7fc fd7e 	bl	8001cf4 <COM_GetDevice>
 80051f8:	6138      	str	r0, [r7, #16]
  size = sizeof(COM_Device_t);
 80051fa:	2354      	movs	r3, #84	; 0x54
 80051fc:	60fb      	str	r3, [r7, #12]
  
  memcpy(&JSON_device, local_device, size);       
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	6939      	ldr	r1, [r7, #16]
 8005202:	4816      	ldr	r0, [pc, #88]	; (800525c <SDM_ReadJSON+0x70>)
 8005204:	f01a f886 	bl	801f314 <memcpy>
  HSD_JSON_parse_Device(serialized_string, &JSON_device);      
 8005208:	4914      	ldr	r1, [pc, #80]	; (800525c <SDM_ReadJSON+0x70>)
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fb fe16 	bl	8000e3c <HSD_JSON_parse_Device>
  
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 8005210:	2300      	movs	r3, #0
 8005212:	75fb      	strb	r3, [r7, #23]
 8005214:	e016      	b.n	8005244 <SDM_ReadJSON+0x58>
  {
    update_sensorStatus(&local_device->sensors[ii]->sensorStatus, &JSON_device.sensors[ii]->sensorStatus, ii);
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	330a      	adds	r3, #10
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 8005226:	7dfb      	ldrb	r3, [r7, #23]
 8005228:	4a0c      	ldr	r2, [pc, #48]	; (800525c <SDM_ReadJSON+0x70>)
 800522a:	330a      	adds	r3, #10
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005236:	7dfa      	ldrb	r2, [r7, #23]
 8005238:	4619      	mov	r1, r3
 800523a:	f7fd fe8b 	bl	8002f54 <update_sensorStatus>
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 800523e:	7dfb      	ldrb	r3, [r7, #23]
 8005240:	3301      	adds	r3, #1
 8005242:	75fb      	strb	r3, [r7, #23]
 8005244:	7dfa      	ldrb	r2, [r7, #23]
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <SDM_ReadJSON+0x70>)
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	429a      	cmp	r2, r3
 800524c:	d3e3      	bcc.n	8005216 <SDM_ReadJSON+0x2a>
  }
  
  update_sensors_config();  
 800524e:	f7fd ff8f 	bl	8003170 <update_sensors_config>
  
  return 0;  
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000aac 	.word	0x20000aac

08005260 <SDM_CreateJSON>:

uint32_t SDM_CreateJSON(char **serialized_string)
{  
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  COM_Device_t *device; 
  uint32_t size;
  
  device = COM_GetDevice();  
 8005268:	f7fc fd44 	bl	8001cf4 <COM_GetDevice>
 800526c:	60f8      	str	r0, [r7, #12]
  size = HSD_JSON_serialize_Device(device, serialized_string, PRETTY_JSON);
 800526e:	2201      	movs	r2, #1
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7fb fd8a 	bl	8000d8c <HSD_JSON_serialize_Device>
 8005278:	4603      	mov	r3, r0
 800527a:	60bb      	str	r3, [r7, #8]
  
  return size;
 800527c:	68bb      	ldr	r3, [r7, #8]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <userButtonCallback>:



void userButtonCallback(uint16_t GPIO_Pin)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d138      	bne.n	800530a <userButtonCallback+0x82>
  {
  case USER_BUTTON_PIN:
    if( HAL_GetTick() - t_start > 1000 )
 8005298:	f002 fbc4 	bl	8007a24 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <userButtonCallback+0x8c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a8:	d92f      	bls.n	800530a <userButtonCallback+0x82>
    {
      if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <userButtonCallback+0x90>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <userButtonCallback+0x36>
 80052b4:	4b18      	ldr	r3, [pc, #96]	; (8005318 <userButtonCallback+0x90>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d125      	bne.n	800530a <userButtonCallback+0x82>
      {
        // Cannot wait since we are in an ISR
        if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 80052be:	4b17      	ldr	r3, [pc, #92]	; (800531c <userButtonCallback+0x94>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f248 0101 	movw	r1, #32769	; 0x8001
 80052c8:	4618      	mov	r0, r3
 80052ca:	f013 fb71 	bl	80189b0 <osMessagePut>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <userButtonCallback+0x50>
        {
          _Error_Handler();
 80052d4:	f000 f87a 	bl	80053cc <_Error_Handler>
        }

        t_start = HAL_GetTick();
 80052d8:	f002 fba4 	bl	8007a24 <HAL_GetTick>
 80052dc:	4603      	mov	r3, r0
 80052de:	4a0d      	ldr	r2, [pc, #52]	; (8005314 <userButtonCallback+0x8c>)
 80052e0:	6013      	str	r3, [r2, #0]

#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
        t_start = SD_Logging_Time_Start = HAL_GetTick();
 80052e2:	f002 fb9f 	bl	8007a24 <HAL_GetTick>
 80052e6:	4603      	mov	r3, r0
 80052e8:	4a0d      	ldr	r2, [pc, #52]	; (8005320 <userButtonCallback+0x98>)
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <userButtonCallback+0x98>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a08      	ldr	r2, [pc, #32]	; (8005314 <userButtonCallback+0x8c>)
 80052f2:	6013      	str	r3, [r2, #0]

        if (SD_Logging_Enabled == 1)
 80052f4:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <userButtonCallback+0x9c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d103      	bne.n	8005304 <userButtonCallback+0x7c>
          SD_Logging_Enabled = 0;
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <userButtonCallback+0x9c>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
#endif
      }
    }

  default:
    break;
 8005302:	e002      	b.n	800530a <userButtonCallback+0x82>
          SD_Logging_Enabled = 1;
 8005304:	4b07      	ldr	r3, [pc, #28]	; (8005324 <userButtonCallback+0x9c>)
 8005306:	2201      	movs	r2, #1
 8005308:	601a      	str	r2, [r3, #0]
    break;
 800530a:	bf00      	nop
  }
}
 800530c:	bf00      	nop
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000980 	.word	0x20000980
 8005318:	20000504 	.word	0x20000504
 800531c:	200185a0 	.word	0x200185a0
 8005320:	2000098c 	.word	0x2000098c
 8005324:	20000990 	.word	0x20000990

08005328 <SDM_AutosaveFile>:


#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
void SDM_AutosaveFile(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  if (SD_Logging_Active)
 800532c:	4b23      	ldr	r3, [pc, #140]	; (80053bc <SDM_AutosaveFile+0x94>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d020      	beq.n	8005376 <SDM_AutosaveFile+0x4e>
  {
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_ACTIVE*1000 )
 8005334:	f002 fb76 	bl	8007a24 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	4b21      	ldr	r3, [pc, #132]	; (80053c0 <SDM_AutosaveFile+0x98>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005344:	4293      	cmp	r3, r2
 8005346:	d936      	bls.n	80053b6 <SDM_AutosaveFile+0x8e>
    {
      // Cannot wait since we are in an ISR
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8005348:	4b1e      	ldr	r3, [pc, #120]	; (80053c4 <SDM_AutosaveFile+0x9c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2200      	movs	r2, #0
 800534e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005352:	4618      	mov	r0, r3
 8005354:	f013 fb2c 	bl	80189b0 <osMessagePut>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <SDM_AutosaveFile+0x3a>
      {
        _Error_Handler();
 800535e:	f000 f835 	bl	80053cc <_Error_Handler>
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 8005362:	f002 fb5f 	bl	8007a24 <HAL_GetTick>
 8005366:	4603      	mov	r3, r0
 8005368:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <SDM_AutosaveFile+0x98>)
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <SDM_AutosaveFile+0x98>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <SDM_AutosaveFile+0xa0>)
 8005372:	6013      	str	r3, [r2, #0]
        _Error_Handler();
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
    }
  }
}
 8005374:	e01f      	b.n	80053b6 <SDM_AutosaveFile+0x8e>
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_IDLE*1000 )
 8005376:	f002 fb55 	bl	8007a24 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <SDM_AutosaveFile+0x98>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f242 7210 	movw	r2, #10000	; 0x2710
 8005386:	4293      	cmp	r3, r2
 8005388:	d915      	bls.n	80053b6 <SDM_AutosaveFile+0x8e>
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 800538a:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <SDM_AutosaveFile+0x9c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2200      	movs	r2, #0
 8005390:	f248 0101 	movw	r1, #32769	; 0x8001
 8005394:	4618      	mov	r0, r3
 8005396:	f013 fb0b 	bl	80189b0 <osMessagePut>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <SDM_AutosaveFile+0x7c>
        _Error_Handler();
 80053a0:	f000 f814 	bl	80053cc <_Error_Handler>
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 80053a4:	f002 fb3e 	bl	8007a24 <HAL_GetTick>
 80053a8:	4603      	mov	r3, r0
 80053aa:	4a05      	ldr	r2, [pc, #20]	; (80053c0 <SDM_AutosaveFile+0x98>)
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <SDM_AutosaveFile+0x98>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <SDM_AutosaveFile+0xa0>)
 80053b4:	6013      	str	r3, [r2, #0]
}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	2000097c 	.word	0x2000097c
 80053c0:	2000098c 	.word	0x2000098c
 80053c4:	200185a0 	.word	0x200185a0
 80053c8:	20000980 	.word	0x20000980

080053cc <_Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  while (1)
 80053d0:	e7fe      	b.n	80053d0 <_Error_Handler+0x4>
	...

080053d4 <SM_SPI_Init>:
* @param None
* @retval None
* @note callbacks to the MSP
*/
static void SM_SPI_Init(void)
{  
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* SPI3 parameter configuration*/
  hsm_spi.Instance = SM_SPI_x;
 80053d8:	4b20      	ldr	r3, [pc, #128]	; (800545c <SM_SPI_Init+0x88>)
 80053da:	4a21      	ldr	r2, [pc, #132]	; (8005460 <SM_SPI_Init+0x8c>)
 80053dc:	601a      	str	r2, [r3, #0]
  hsm_spi.Init.Mode = SPI_MODE_MASTER;
 80053de:	4b1f      	ldr	r3, [pc, #124]	; (800545c <SM_SPI_Init+0x88>)
 80053e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053e4:	605a      	str	r2, [r3, #4]
  hsm_spi.Init.Direction = SPI_DIRECTION_2LINES;
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <SM_SPI_Init+0x88>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	609a      	str	r2, [r3, #8]
  hsm_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <SM_SPI_Init+0x88>)
 80053ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80053f2:	60da      	str	r2, [r3, #12]
  hsm_spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80053f4:	4b19      	ldr	r3, [pc, #100]	; (800545c <SM_SPI_Init+0x88>)
 80053f6:	2202      	movs	r2, #2
 80053f8:	611a      	str	r2, [r3, #16]
  hsm_spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 80053fa:	4b18      	ldr	r3, [pc, #96]	; (800545c <SM_SPI_Init+0x88>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	615a      	str	r2, [r3, #20]
  hsm_spi.Init.NSS = SPI_NSS_SOFT;
 8005400:	4b16      	ldr	r3, [pc, #88]	; (800545c <SM_SPI_Init+0x88>)
 8005402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005406:	619a      	str	r2, [r3, #24]
  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /*SPI running @ 10 MHz */ /*stwin*/
 8005408:	4b14      	ldr	r3, [pc, #80]	; (800545c <SM_SPI_Init+0x88>)
 800540a:	2218      	movs	r2, #24
 800540c:	61da      	str	r2, [r3, #28]
  hsm_spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <SM_SPI_Init+0x88>)
 8005410:	2200      	movs	r2, #0
 8005412:	621a      	str	r2, [r3, #32]
  hsm_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8005414:	4b11      	ldr	r3, [pc, #68]	; (800545c <SM_SPI_Init+0x88>)
 8005416:	2200      	movs	r2, #0
 8005418:	625a      	str	r2, [r3, #36]	; 0x24
  hsm_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800541a:	4b10      	ldr	r3, [pc, #64]	; (800545c <SM_SPI_Init+0x88>)
 800541c:	2200      	movs	r2, #0
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
  hsm_spi.Init.CRCPolynomial = 7;
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <SM_SPI_Init+0x88>)
 8005422:	2207      	movs	r2, #7
 8005424:	62da      	str	r2, [r3, #44]	; 0x2c
  hsm_spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <SM_SPI_Init+0x88>)
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
  hsm_spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800542c:	4b0b      	ldr	r3, [pc, #44]	; (800545c <SM_SPI_Init+0x88>)
 800542e:	2200      	movs	r2, #0
 8005430:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Register MSP Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_MSPINIT_CB_ID, SM_SPI_MspInit);
 8005432:	4a0c      	ldr	r2, [pc, #48]	; (8005464 <SM_SPI_Init+0x90>)
 8005434:	2108      	movs	r1, #8
 8005436:	4809      	ldr	r0, [pc, #36]	; (800545c <SM_SPI_Init+0x88>)
 8005438:	f00a fb82 	bl	800fb40 <HAL_SPI_RegisterCallback>
  
  if (HAL_SPI_Init(&hsm_spi) != HAL_OK)
 800543c:	4807      	ldr	r0, [pc, #28]	; (800545c <SM_SPI_Init+0x88>)
 800543e:	f00a fab5 	bl	800f9ac <HAL_SPI_Init>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <SM_SPI_Init+0x78>
  {
    SM_Error_Handler();
 8005448:	f000 f810 	bl	800546c <SM_Error_Handler>
  }
  
  /* Register SPI DMA complete Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_TX_RX_COMPLETE_CB_ID, SM_SPI_TxRxCpltCallback);
 800544c:	4a06      	ldr	r2, [pc, #24]	; (8005468 <SM_SPI_Init+0x94>)
 800544e:	2102      	movs	r1, #2
 8005450:	4802      	ldr	r0, [pc, #8]	; (800545c <SM_SPI_Init+0x88>)
 8005452:	f00a fb75 	bl	800fb40 <HAL_SPI_RegisterCallback>
}
 8005456:	bf00      	nop
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20018940 	.word	0x20018940
 8005460:	40003800 	.word	0x40003800
 8005464:	080058f1 	.word	0x080058f1
 8005468:	08005745 	.word	0x08005745

0800546c <SM_Error_Handler>:

void SM_Error_Handler( void )
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  while (1)
 8005470:	e7fe      	b.n	8005470 <SM_Error_Handler+0x4>
	...

08005474 <SM_OS_Init>:
*        read requests and a semaphore used to wait for DMA transfer complete
* @param None
* @retval None
*/
void SM_OS_Init(void)
{
 8005474:	b5b0      	push	{r4, r5, r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af00      	add	r7, sp, #0
  /* Bus read semaphores */
  spiThreadSem_id = osSemaphoreCreate(osSemaphore(spiThreadSem), 1);
 800547a:	2101      	movs	r1, #1
 800547c:	482f      	ldr	r0, [pc, #188]	; (800553c <SM_OS_Init+0xc8>)
 800547e:	f013 f8dd 	bl	801863c <osSemaphoreCreate>
 8005482:	4603      	mov	r3, r0
 8005484:	4a2e      	ldr	r2, [pc, #184]	; (8005540 <SM_OS_Init+0xcc>)
 8005486:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(spiThreadSem_id,osWaitForever);
 8005488:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <SM_OS_Init+0xcc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f04f 31ff 	mov.w	r1, #4294967295
 8005490:	4618      	mov	r0, r3
 8005492:	f013 f8f7 	bl	8018684 <osSemaphoreWait>
  i2cThreadSem_id = osSemaphoreCreate(osSemaphore(i2cThreadSem), 1);
 8005496:	2101      	movs	r1, #1
 8005498:	482a      	ldr	r0, [pc, #168]	; (8005544 <SM_OS_Init+0xd0>)
 800549a:	f013 f8cf 	bl	801863c <osSemaphoreCreate>
 800549e:	4603      	mov	r3, r0
 80054a0:	4a29      	ldr	r2, [pc, #164]	; (8005548 <SM_OS_Init+0xd4>)
 80054a2:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(i2cThreadSem_id,osWaitForever);    
 80054a4:	4b28      	ldr	r3, [pc, #160]	; (8005548 <SM_OS_Init+0xd4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f04f 31ff 	mov.w	r1, #4294967295
 80054ac:	4618      	mov	r0, r3
 80054ae:	f013 f8e9 	bl	8018684 <osSemaphoreWait>
  
  /* Bus read functions memory pools */  
  spiPool_id = osPoolCreate(osPool(spiPool));  
 80054b2:	4826      	ldr	r0, [pc, #152]	; (800554c <SM_OS_Init+0xd8>)
 80054b4:	f013 f96a 	bl	801878c <osPoolCreate>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4a25      	ldr	r2, [pc, #148]	; (8005550 <SM_OS_Init+0xdc>)
 80054bc:	6013      	str	r3, [r2, #0]
  i2cPool_id = osPoolCreate(osPool(i2cPool));    
 80054be:	4825      	ldr	r0, [pc, #148]	; (8005554 <SM_OS_Init+0xe0>)
 80054c0:	f013 f964 	bl	801878c <osPoolCreate>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4a24      	ldr	r2, [pc, #144]	; (8005558 <SM_OS_Init+0xe4>)
 80054c8:	6013      	str	r3, [r2, #0]
  
  /* Bus read queues */
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 80054ca:	2100      	movs	r1, #0
 80054cc:	4823      	ldr	r0, [pc, #140]	; (800555c <SM_OS_Init+0xe8>)
 80054ce:	f013 fa5d 	bl	801898c <osMessageCreate>
 80054d2:	4603      	mov	r3, r0
 80054d4:	4a22      	ldr	r2, [pc, #136]	; (8005560 <SM_OS_Init+0xec>)
 80054d6:	6013      	str	r3, [r2, #0]
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
 80054d8:	2100      	movs	r1, #0
 80054da:	4822      	ldr	r0, [pc, #136]	; (8005564 <SM_OS_Init+0xf0>)
 80054dc:	f013 fa56 	bl	801898c <osMessageCreate>
 80054e0:	4603      	mov	r3, r0
 80054e2:	4a21      	ldr	r2, [pc, #132]	; (8005568 <SM_OS_Init+0xf4>)
 80054e4:	6013      	str	r3, [r2, #0]
  
  vQueueAddToRegistry( spiReqQueue_id, "spiReqQueue_id" );
 80054e6:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <SM_OS_Init+0xec>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4920      	ldr	r1, [pc, #128]	; (800556c <SM_OS_Init+0xf8>)
 80054ec:	4618      	mov	r0, r3
 80054ee:	f014 fab3 	bl	8019a58 <vQueueAddToRegistry>
  
  /* SPI read Thread*/
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 80054f2:	4b1f      	ldr	r3, [pc, #124]	; (8005570 <SM_OS_Init+0xfc>)
 80054f4:	f107 0414 	add.w	r4, r7, #20
 80054f8:	461d      	mov	r5, r3
 80054fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054fe:	682b      	ldr	r3, [r5, #0]
 8005500:	6023      	str	r3, [r4, #0]
  /* SPI read Thread*/
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <SM_OS_Init+0x100>)
 8005504:	463c      	mov	r4, r7
 8005506:	461d      	mov	r5, r3
 8005508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800550a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	6023      	str	r3, [r4, #0]
  
  /* Start SPI read Thread */
  spiThreadId = osThreadCreate(osThread(SPI_THREAD), NULL);
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f013 f869 	bl	80185ee <osThreadCreate>
 800551c:	4603      	mov	r3, r0
 800551e:	4a16      	ldr	r2, [pc, #88]	; (8005578 <SM_OS_Init+0x104>)
 8005520:	6013      	str	r3, [r2, #0]
  /* Start I2C read Thread */
  i2cThreadId = osThreadCreate(osThread(I2C_THREAD), NULL);  
 8005522:	463b      	mov	r3, r7
 8005524:	2100      	movs	r1, #0
 8005526:	4618      	mov	r0, r3
 8005528:	f013 f861 	bl	80185ee <osThreadCreate>
 800552c:	4603      	mov	r3, r0
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <SM_OS_Init+0x108>)
 8005530:	6013      	str	r3, [r2, #0]
}
 8005532:	bf00      	nop
 8005534:	3728      	adds	r7, #40	; 0x28
 8005536:	46bd      	mov	sp, r7
 8005538:	bdb0      	pop	{r4, r5, r7, pc}
 800553a:	bf00      	nop
 800553c:	08023b08 	.word	0x08023b08
 8005540:	2001883c 	.word	0x2001883c
 8005544:	08023b0c 	.word	0x08023b0c
 8005548:	20018a4c 	.word	0x20018a4c
 800554c:	08023b20 	.word	0x08023b20
 8005550:	20018834 	.word	0x20018834
 8005554:	08023b2c 	.word	0x08023b2c
 8005558:	200189cc 	.word	0x200189cc
 800555c:	08023b10 	.word	0x08023b10
 8005560:	20018830 	.word	0x20018830
 8005564:	08023b18 	.word	0x08023b18
 8005568:	20018b14 	.word	0x20018b14
 800556c:	08023890 	.word	0x08023890
 8005570:	080238a0 	.word	0x080238a0
 8005574:	080238b4 	.word	0x080238b4
 8005578:	20018838 	.word	0x20018838
 800557c:	20018a50 	.word	0x20018a50

08005580 <SM_SPI_Read_Os>:
* @note when the function is used and linked to the sensor context, all the calls made by the PID driver will result in a
*       call to this function. If this is the case, be sure to make all the calls to the PID driver functions from a freeRTOS thread
* @retval None
*/
int32_t SM_SPI_Read_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	607a      	str	r2, [r7, #4]
 800558a:	461a      	mov	r2, r3
 800558c:	460b      	mov	r3, r1
 800558e:	72fb      	strb	r3, [r7, #11]
 8005590:	4613      	mov	r3, r2
 8005592:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]
  SM_Message_t * msg;
  
  msg = osPoolAlloc(spiPool_id);
 8005598:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <SM_SPI_Read_Os+0x84>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4618      	mov	r0, r3
 800559e:	f013 f952 	bl	8018846 <osPoolAlloc>
 80055a2:	6138      	str	r0, [r7, #16]
  
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b33      	cmp	r3, #51	; 0x33
 80055aa:	d104      	bne.n	80055b6 <SM_SPI_Read_Os+0x36>
 80055ac:	893b      	ldrh	r3, [r7, #8]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d901      	bls.n	80055b6 <SM_SPI_Read_Os+0x36>
  {
    autoInc = 0x40;
 80055b2:	2340      	movs	r3, #64	; 0x40
 80055b4:	75fb      	strb	r3, [r7, #23]
  }
  
  msg->sensorHandler = handle;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg | 0x80 | autoInc;
 80055bc:	7afa      	ldrb	r2, [r7, #11]
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	893a      	ldrh	r2, [r7, #8]
 80055d2:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 80055da:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <SM_SPI_Read_Os+0x88>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6939      	ldr	r1, [r7, #16]
 80055e0:	f04f 32ff 	mov.w	r2, #4294967295
 80055e4:	4618      	mov	r0, r3
 80055e6:	f013 f9e3 	bl	80189b0 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f04f 31ff 	mov.w	r1, #4294967295
 80055f4:	4618      	mov	r0, r3
 80055f6:	f013 f845 	bl	8018684 <osSemaphoreWait>
  
  return 0;  
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20018834 	.word	0x20018834
 8005608:	20018830 	.word	0x20018830

0800560c <SM_SPI_Write_Os>:

int32_t SM_SPI_Write_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	461a      	mov	r2, r3
 8005618:	460b      	mov	r3, r1
 800561a:	72fb      	strb	r3, [r7, #11]
 800561c:	4613      	mov	r3, r2
 800561e:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 8005620:	2300      	movs	r3, #0
 8005622:	75fb      	strb	r3, [r7, #23]

  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b33      	cmp	r3, #51	; 0x33
 800562a:	d104      	bne.n	8005636 <SM_SPI_Write_Os+0x2a>
 800562c:	893b      	ldrh	r3, [r7, #8]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d901      	bls.n	8005636 <SM_SPI_Write_Os+0x2a>
  {
    autoInc = 0x40;
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	75fb      	strb	r3, [r7, #23]
  }
  
  SM_Message_t * msg;  
  msg = osPoolAlloc(spiPool_id);
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <SM_SPI_Write_Os+0x80>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f013 f903 	bl	8018846 <osPoolAlloc>
 8005640:	6138      	str	r0, [r7, #16]
  msg->sensorHandler = handle;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg|autoInc ;
 8005648:	7afa      	ldrb	r2, [r7, #11]
 800564a:	7dfb      	ldrb	r3, [r7, #23]
 800564c:	4313      	orrs	r3, r2
 800564e:	b2da      	uxtb	r2, r3
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	893a      	ldrh	r2, [r7, #8]
 8005658:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <SM_SPI_Write_Os+0x84>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6939      	ldr	r1, [r7, #16]
 8005666:	f04f 32ff 	mov.w	r2, #4294967295
 800566a:	4618      	mov	r0, r3
 800566c:	f013 f9a0 	bl	80189b0 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f04f 31ff 	mov.w	r1, #4294967295
 800567a:	4618      	mov	r0, r3
 800567c:	f013 f802 	bl	8018684 <osSemaphoreWait>
  
  return 0;  
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20018834 	.word	0x20018834
 8005690:	20018830 	.word	0x20018830

08005694 <spi_Thread>:
*         the thread which made the request at the end of the read.
* @param  argument not used
* @retval None
*/
static void spi_Thread(void const *argument)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  (void)argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SM_SPI_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_SPI_DEBUG_PIN );
 800569c:	210a      	movs	r1, #10
 800569e:	2000      	movs	r0, #0
 80056a0:	f014 fed6 	bl	801a450 <vTaskSetApplicationTaskTag>
#endif

  osEvent evt;
  for (;;)
  {    
    evt = osMessageGet(spiReqQueue_id, osWaitForever); 
 80056a4:	4b23      	ldr	r3, [pc, #140]	; (8005734 <spi_Thread+0xa0>)
 80056a6:	6819      	ldr	r1, [r3, #0]
 80056a8:	f107 030c 	add.w	r3, r7, #12
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	4618      	mov	r0, r3
 80056b2:	f013 f9bd 	bl	8018a30 <osMessageGet>

    SM_Message_t * msg = evt.value.p;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_RESET);
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6858      	ldr	r0, [r3, #4]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	891b      	ldrh	r3, [r3, #8]
 80056c6:	2200      	movs	r2, #0
 80056c8:	4619      	mov	r1, r3
 80056ca:	f004 f9d7 	bl	8009a7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hsm_spi, &msg->regAddr, 1, 1000);
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f103 010c 	add.w	r1, r3, #12
 80056d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056d8:	2201      	movs	r2, #1
 80056da:	4817      	ldr	r0, [pc, #92]	; (8005738 <spi_Thread+0xa4>)
 80056dc:	f00a fad6 	bl	800fc8c <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive_DMA(&hsm_spi, msg->dataPtr, msg->dataPtr, msg->readSize);
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	6899      	ldr	r1, [r3, #8]
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	89db      	ldrh	r3, [r3, #14]
 80056ec:	4812      	ldr	r0, [pc, #72]	; (8005738 <spi_Thread+0xa4>)
 80056ee:	f00a fc33 	bl	800ff58 <HAL_SPI_TransmitReceive_DMA>
    
    osSemaphoreWait(spiThreadSem_id, osWaitForever);
 80056f2:	4b12      	ldr	r3, [pc, #72]	; (800573c <spi_Thread+0xa8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f04f 31ff 	mov.w	r1, #4294967295
 80056fa:	4618      	mov	r0, r3
 80056fc:	f012 ffc2 	bl	8018684 <osSemaphoreWait>
    
    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_SET); 
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6858      	ldr	r0, [r3, #4]
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	891b      	ldrh	r3, [r3, #8]
 800570c:	2201      	movs	r2, #1
 800570e:	4619      	mov	r1, r3
 8005710:	f004 f9b4 	bl	8009a7c <HAL_GPIO_WritePin>

    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	61bb      	str	r3, [r7, #24]
    osPoolFree(spiPool_id, msg);
 800571c:	4b08      	ldr	r3, [pc, #32]	; (8005740 <spi_Thread+0xac>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69f9      	ldr	r1, [r7, #28]
 8005722:	4618      	mov	r0, r3
 8005724:	f013 f8f1 	bl	801890a <osPoolFree>
    osSemaphoreRelease(*sem);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f012 fff7 	bl	8018720 <osSemaphoreRelease>
  {    
 8005732:	e7b7      	b.n	80056a4 <spi_Thread+0x10>
 8005734:	20018830 	.word	0x20018830
 8005738:	20018940 	.word	0x20018940
 800573c:	2001883c 	.word	0x2001883c
 8005740:	20018834 	.word	0x20018834

08005744 <SM_SPI_TxRxCpltCallback>:
  }
}

static void SM_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(spiThreadSem_id);    
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <SM_SPI_TxRxCpltCallback+0x1c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f012 ffe5 	bl	8018720 <osSemaphoreRelease>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2001883c 	.word	0x2001883c

08005764 <i2c_Thread>:
*         unlocks the thread which made the request at the end of the read.
* @param  argument not used
* @retval None
*/
static void i2c_Thread(void const *argument)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	; 0x28
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]
  (void)argument;

#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SM_I2C_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_I2C_DEBUG_PIN );
 800576c:	210b      	movs	r1, #11
 800576e:	2000      	movs	r0, #0
 8005770:	f014 fe6e 	bl	801a450 <vTaskSetApplicationTaskTag>
#endif

  osEvent evt;
  for (;;)
  {
    evt = osMessageGet(i2cReqQueue_id, osWaitForever);
 8005774:	4b2e      	ldr	r3, [pc, #184]	; (8005830 <i2c_Thread+0xcc>)
 8005776:	6819      	ldr	r1, [r3, #0]
 8005778:	f107 0308 	add.w	r3, r7, #8
 800577c:	f04f 32ff 	mov.w	r2, #4294967295
 8005780:	4618      	mov	r0, r3
 8005782:	f013 f955 	bl	8018a30 <osMessageGet>
    uint8_t autoInc = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	77fb      	strb	r3, [r7, #31]
    
    SM_Message_t * msg = evt.value.p;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	61bb      	str	r3, [r7, #24]
    if (msg->sensorHandler->WhoAmI == 0xBCU && msg->readSize > 1)
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2bbc      	cmp	r3, #188	; 0xbc
 8005796:	d105      	bne.n	80057a4 <i2c_Thread+0x40>
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	89db      	ldrh	r3, [r3, #14]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d901      	bls.n	80057a4 <i2c_Thread+0x40>
    {
      autoInc = 0x80;
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	77fb      	strb	r3, [r7, #31]
    }

    if (msg->isRead)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	791b      	ldrb	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d015      	beq.n	80057d8 <i2c_Thread+0x74>
    {
      HAL_I2C_Mem_Read_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	b299      	uxth	r1, r3
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	7b1a      	ldrb	r2, [r3, #12]
 80057b8:	7ffb      	ldrb	r3, [r7, #31]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	b298      	uxth	r0, r3
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	89d2      	ldrh	r2, [r2, #14]
 80057c8:	9201      	str	r2, [sp, #4]
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	2301      	movs	r3, #1
 80057ce:	4602      	mov	r2, r0
 80057d0:	4818      	ldr	r0, [pc, #96]	; (8005834 <i2c_Thread+0xd0>)
 80057d2:	f004 fa93 	bl	8009cfc <HAL_I2C_Mem_Read_DMA>
 80057d6:	e014      	b.n	8005802 <i2c_Thread+0x9e>
    }
    else
    {
      HAL_I2C_Mem_Write_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	b299      	uxth	r1, r3
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	7b1a      	ldrb	r2, [r3, #12]
 80057e4:	7ffb      	ldrb	r3, [r7, #31]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	b298      	uxth	r0, r3
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	89d2      	ldrh	r2, [r2, #14]
 80057f4:	9201      	str	r2, [sp, #4]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	2301      	movs	r3, #1
 80057fa:	4602      	mov	r2, r0
 80057fc:	480d      	ldr	r0, [pc, #52]	; (8005834 <i2c_Thread+0xd0>)
 80057fe:	f004 f987 	bl	8009b10 <HAL_I2C_Mem_Write_DMA>
    }
    osSemaphoreWait(i2cThreadSem_id, osWaitForever);  
 8005802:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <i2c_Thread+0xd4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f04f 31ff 	mov.w	r1, #4294967295
 800580a:	4618      	mov	r0, r3
 800580c:	f012 ff3a 	bl	8018684 <osSemaphoreWait>
    
    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	617b      	str	r3, [r7, #20]
    osPoolFree(i2cPool_id, msg);
 8005818:	4b08      	ldr	r3, [pc, #32]	; (800583c <i2c_Thread+0xd8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69b9      	ldr	r1, [r7, #24]
 800581e:	4618      	mov	r0, r3
 8005820:	f013 f873 	bl	801890a <osPoolFree>
    
    osSemaphoreRelease(*sem);           
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f012 ff79 	bl	8018720 <osSemaphoreRelease>
  {
 800582e:	e7a1      	b.n	8005774 <i2c_Thread+0x10>
 8005830:	20018b14 	.word	0x20018b14
 8005834:	200189d0 	.word	0x200189d0
 8005838:	20018a4c 	.word	0x20018a4c
 800583c:	200189cc 	.word	0x200189cc

08005840 <SM_Peripheral_Init>:
{
  errors++;
}

void SM_Peripheral_Init(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  SM_DMA_Init();
 8005844:	f000 f806 	bl	8005854 <SM_DMA_Init>
//  SM_I2C_Init();
  SM_SPI_Init();
 8005848:	f7ff fdc4 	bl	80053d4 <SM_SPI_Init>
  SM_TIM_Init();
 800584c:	f000 f914 	bl	8005a78 <SM_TIM_Init>
}
 8005850:	bf00      	nop
 8005852:	bd80      	pop	{r7, pc}

08005854 <SM_DMA_Init>:

/** 
* Enable DMA controller clock
*/
static void SM_DMA_Init(void) 
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800585a:	4b24      	ldr	r3, [pc, #144]	; (80058ec <SM_DMA_Init+0x98>)
 800585c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585e:	4a23      	ldr	r2, [pc, #140]	; (80058ec <SM_DMA_Init+0x98>)
 8005860:	f043 0304 	orr.w	r3, r3, #4
 8005864:	6493      	str	r3, [r2, #72]	; 0x48
 8005866:	4b21      	ldr	r3, [pc, #132]	; (80058ec <SM_DMA_Init+0x98>)
 8005868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
  SM_SPIx_DMA_CLK_ENABLE();
 8005872:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <SM_DMA_Init+0x98>)
 8005874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005876:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <SM_DMA_Init+0x98>)
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6493      	str	r3, [r2, #72]	; 0x48
 800587e:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <SM_DMA_Init+0x98>)
 8005880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	68bb      	ldr	r3, [r7, #8]
  SM_I2Cx_DMA_CLK_ENABLE();
 800588a:	4b18      	ldr	r3, [pc, #96]	; (80058ec <SM_DMA_Init+0x98>)
 800588c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588e:	4a17      	ldr	r2, [pc, #92]	; (80058ec <SM_DMA_Init+0x98>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	6493      	str	r3, [r2, #72]	; 0x48
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <SM_DMA_Init+0x98>)
 8005898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
  
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_I2C_TX_DMA_IRQn, 3, 0);
 80058a2:	2200      	movs	r2, #0
 80058a4:	2103      	movs	r1, #3
 80058a6:	200e      	movs	r0, #14
 80058a8:	f003 fc87 	bl	80091ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_I2C_TX_DMA_IRQn);
 80058ac:	200e      	movs	r0, #14
 80058ae:	f003 fca0 	bl	80091f2 <HAL_NVIC_EnableIRQ>

  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_I2C_RX_DMA_IRQn, 3, 0);
 80058b2:	2200      	movs	r2, #0
 80058b4:	2103      	movs	r1, #3
 80058b6:	200d      	movs	r0, #13
 80058b8:	f003 fc7f 	bl	80091ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_I2C_RX_DMA_IRQn);
 80058bc:	200d      	movs	r0, #13
 80058be:	f003 fc98 	bl	80091f2 <HAL_NVIC_EnableIRQ>

  /* SM_SPI_RX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_RX_DMA_IRQn, 3, 0);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2103      	movs	r1, #3
 80058c6:	200b      	movs	r0, #11
 80058c8:	f003 fc77 	bl	80091ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_RX_DMA_IRQn);
 80058cc:	200b      	movs	r0, #11
 80058ce:	f003 fc90 	bl	80091f2 <HAL_NVIC_EnableIRQ>
  
  /* SM_SPI_TX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_TX_DMA_IRQn, 3, 0);
 80058d2:	2200      	movs	r2, #0
 80058d4:	2103      	movs	r1, #3
 80058d6:	200c      	movs	r0, #12
 80058d8:	f003 fc6f 	bl	80091ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_TX_DMA_IRQn);
 80058dc:	200c      	movs	r0, #12
 80058de:	f003 fc88 	bl	80091f2 <HAL_NVIC_EnableIRQ>
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40021000 	.word	0x40021000

080058f0 <SM_SPI_MspInit>:

static void SM_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	; 0x30
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058f8:	f107 031c 	add.w	r3, r7, #28
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	605a      	str	r2, [r3, #4]
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	60da      	str	r2, [r3, #12]
 8005906:	611a      	str	r2, [r3, #16]
  
  SM_SPI_CLK_PIN_CLK_ENABLE(); 
 8005908:	4b54      	ldr	r3, [pc, #336]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 800590a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590c:	4a53      	ldr	r2, [pc, #332]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 800590e:	f043 0308 	orr.w	r3, r3, #8
 8005912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005914:	4b51      	ldr	r3, [pc, #324]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 8005916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	69bb      	ldr	r3, [r7, #24]
  SM_SPI_MISO_PIN_CLK_ENABLE(); 
 8005920:	4b4e      	ldr	r3, [pc, #312]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 8005922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005924:	4a4d      	ldr	r2, [pc, #308]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 8005926:	f043 0308 	orr.w	r3, r3, #8
 800592a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800592c:	4b4b      	ldr	r3, [pc, #300]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 800592e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	697b      	ldr	r3, [r7, #20]
  SM_SPI_MOSI_PIN_CLK_ENABLE(); 
 8005938:	4b48      	ldr	r3, [pc, #288]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 800593a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593c:	4a47      	ldr	r2, [pc, #284]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 800593e:	f043 0304 	orr.w	r3, r3, #4
 8005942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005944:	4b45      	ldr	r3, [pc, #276]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 8005946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	693b      	ldr	r3, [r7, #16]
  
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005950:	2302      	movs	r3, #2
 8005952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005954:	2300      	movs	r3, #0
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005958:	2303      	movs	r3, #3
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  GPIO_InitStruct.Alternate = SM_SPI_CLK_AF;
 800595c:	2305      	movs	r3, #5
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 8005960:	2302      	movs	r3, #2
 8005962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005964:	f107 031c 	add.w	r3, r7, #28
 8005968:	4619      	mov	r1, r3
 800596a:	483d      	ldr	r0, [pc, #244]	; (8005a60 <SM_SPI_MspInit+0x170>)
 800596c:	f003 fedc 	bl	8009728 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MISO_AF;
 8005970:	2305      	movs	r3, #5
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_MISO_PIN;
 8005974:	2308      	movs	r3, #8
 8005976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005978:	f107 031c 	add.w	r3, r7, #28
 800597c:	4619      	mov	r1, r3
 800597e:	4838      	ldr	r0, [pc, #224]	; (8005a60 <SM_SPI_MspInit+0x170>)
 8005980:	f003 fed2 	bl	8009728 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MOSI_AF;
 8005984:	2305      	movs	r3, #5
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_MOSI_PIN;
 8005988:	2308      	movs	r3, #8
 800598a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800598c:	f107 031c 	add.w	r3, r7, #28
 8005990:	4619      	mov	r1, r3
 8005992:	4834      	ldr	r0, [pc, #208]	; (8005a64 <SM_SPI_MspInit+0x174>)
 8005994:	f003 fec8 	bl	8009728 <HAL_GPIO_Init>
  
  SM_SPIx_CLK_ENABLE();
 8005998:	4b30      	ldr	r3, [pc, #192]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	4a2f      	ldr	r2, [pc, #188]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 800599e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059a2:	6593      	str	r3, [r2, #88]	; 0x58
 80059a4:	4b2d      	ldr	r3, [pc, #180]	; (8005a5c <SM_SPI_MspInit+0x16c>)
 80059a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
    
  /* SPI DMA Init */
  /* SPI_RX Init */
  hdma_sm_spi_rx.Instance = SM_SPI_RX_DMA_CHANNEL;
 80059b0:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059b2:	4a2e      	ldr	r2, [pc, #184]	; (8005a6c <SM_SPI_MspInit+0x17c>)
 80059b4:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_rx.Init.Request = SM_SPI_RX_DMA_REQUEST;
 80059b6:	4b2c      	ldr	r3, [pc, #176]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059b8:	220c      	movs	r2, #12
 80059ba:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059bc:	4b2a      	ldr	r3, [pc, #168]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059be:	2200      	movs	r2, #0
 80059c0:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059c2:	4b29      	ldr	r3, [pc, #164]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059c8:	4b27      	ldr	r3, [pc, #156]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059ca:	2280      	movs	r2, #128	; 0x80
 80059cc:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059ce:	4b26      	ldr	r3, [pc, #152]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059d4:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_rx.Init.Mode = DMA_NORMAL;
 80059da:	4b23      	ldr	r3, [pc, #140]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059dc:	2200      	movs	r2, #0
 80059de:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059e0:	4b21      	ldr	r3, [pc, #132]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_rx) != HAL_OK)
 80059e6:	4820      	ldr	r0, [pc, #128]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059e8:	f003 fc1e 	bl	8009228 <HAL_DMA_Init>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <SM_SPI_MspInit+0x106>
  {
    SM_Error_Handler();
 80059f2:	f7ff fd3b 	bl	800546c <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmarx,hdma_sm_spi_rx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059fa:	659a      	str	r2, [r3, #88]	; 0x58
 80059fc:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <SM_SPI_MspInit+0x178>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6293      	str	r3, [r2, #40]	; 0x28
  
  /* SPI_TX Init */
  hdma_sm_spi_tx.Instance = SM_SPI_TX_DMA_CHANNEL;
 8005a02:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <SM_SPI_MspInit+0x184>)
 8005a06:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_tx.Init.Request = SM_SPI_TX_DMA_REQUEST;
 8005a08:	4b19      	ldr	r3, [pc, #100]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a0a:	220d      	movs	r2, #13
 8005a0c:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a0e:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a10:	2210      	movs	r2, #16
 8005a12:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a14:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a20:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a26:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_tx.Init.Mode = DMA_NORMAL;
 8005a2c:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_tx) != HAL_OK)
 8005a38:	480d      	ldr	r0, [pc, #52]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a3a:	f003 fbf5 	bl	8009228 <HAL_DMA_Init>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <SM_SPI_MspInit+0x158>
  {
    SM_Error_Handler();
 8005a44:	f7ff fd12 	bl	800546c <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmatx,hdma_sm_spi_tx);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
 8005a4e:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <SM_SPI_MspInit+0x180>)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005a54:	bf00      	nop
 8005a56:	3730      	adds	r7, #48	; 0x30
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	48000c00 	.word	0x48000c00
 8005a64:	48000800 	.word	0x48000800
 8005a68:	20018840 	.word	0x20018840
 8005a6c:	40020008 	.word	0x40020008
 8005a70:	20018ab4 	.word	0x20018ab4
 8005a74:	4002001c 	.word	0x4002001c

08005a78 <SM_TIM_Init>:
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 4, 0);
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);  
}

void SM_TIM_Init(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
  SM_TIMx_CLK_ENABLE();
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <SM_TIM_Init+0x54>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a82:	4a12      	ldr	r2, [pc, #72]	; (8005acc <SM_TIM_Init+0x54>)
 8005a84:	f043 0308 	orr.w	r3, r3, #8
 8005a88:	6593      	str	r3, [r2, #88]	; 0x58
 8005a8a:	4b10      	ldr	r3, [pc, #64]	; (8005acc <SM_TIM_Init+0x54>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
  /* Set TIMx instance */
  hsm_tim.Instance = SM_TIMx;
 8005a96:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <SM_TIM_Init+0x58>)
 8005a98:	4a0e      	ldr	r2, [pc, #56]	; (8005ad4 <SM_TIM_Init+0x5c>)
 8005a9a:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = (SystemCoreClock/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  hsm_tim.Init.Period            = 0xFFFFFFFF;
 8005a9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <SM_TIM_Init+0x58>)
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa2:	60da      	str	r2, [r3, #12]
  hsm_tim.Init.Prescaler         = 0;
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <SM_TIM_Init+0x58>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	605a      	str	r2, [r3, #4]
  hsm_tim.Init.ClockDivision     = 0;
 8005aaa:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <SM_TIM_Init+0x58>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	611a      	str	r2, [r3, #16]
  hsm_tim.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <SM_TIM_Init+0x58>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	609a      	str	r2, [r3, #8]
  hsm_tim.Init.RepetitionCounter = 0;
 8005ab6:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <SM_TIM_Init+0x58>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&hsm_tim) != HAL_OK)
 8005abc:	4804      	ldr	r0, [pc, #16]	; (8005ad0 <SM_TIM_Init+0x58>)
 8005abe:	f00a fe69 	bl	8010794 <HAL_TIM_Base_Init>
  {
    /* Initialization Error */
//    Error_Handler();
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	20018900 	.word	0x20018900
 8005ad4:	40000c00 	.word	0x40000c00

08005ad8 <SM_TIM_Start>:

void SM_TIM_Start(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Start(&hsm_tim) != HAL_OK)
 8005adc:	4802      	ldr	r0, [pc, #8]	; (8005ae8 <SM_TIM_Start+0x10>)
 8005ade:	f00a fe8f 	bl	8010800 <HAL_TIM_Base_Start>
  {
    /* Starting Error */
//    Error_Handler();
  }
}
 8005ae2:	bf00      	nop
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20018900 	.word	0x20018900

08005aec <SM_TIM_Stop>:

void SM_TIM_Stop(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Stop(&hsm_tim) != HAL_OK)
 8005af0:	4804      	ldr	r0, [pc, #16]	; (8005b04 <SM_TIM_Stop+0x18>)
 8005af2:	f00a feaf 	bl	8010854 <HAL_TIM_Base_Stop>
  {
    /* Starting Error */
//    Error_Handler();
  }
  hsm_tim.Instance->CNT = 0;
 8005af6:	4b03      	ldr	r3, [pc, #12]	; (8005b04 <SM_TIM_Stop+0x18>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2200      	movs	r2, #0
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005afe:	bf00      	nop
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20018900 	.word	0x20018900

08005b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b0c:	bf00      	nop
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b16:	b480      	push	{r7}
 8005b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b1a:	e7fe      	b.n	8005b1a <HardFault_Handler+0x4>

08005b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b20:	e7fe      	b.n	8005b20 <MemManage_Handler+0x4>

08005b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b26:	e7fe      	b.n	8005b26 <BusFault_Handler+0x4>

08005b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b2c:	e7fe      	b.n	8005b2c <UsageFault_Handler+0x4>

08005b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0

}
 8005b32:	bf00      	nop
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
 HAL_IncTick();
 8005b40:	f001 ff5e 	bl	8007a00 <HAL_IncTick>
 osSystickHandler();
 8005b44:	f012 ffe8 	bl	8018b18 <osSystickHandler>
}
 8005b48:	bf00      	nop
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <PVD_PVM_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/
void PVD_PVM_IRQHandler(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  HAL_PWREx_PVD_PVM_IRQHandler();
 8005b50:	f006 fe1e 	bl	800c790 <HAL_PWREx_PVD_PVM_IRQHandler>
}
 8005b54:	bf00      	nop
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line[0] interrupts.
  */
void EXTI0_IRQHandler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8005b5c:	2001      	movs	r0, #1
 8005b5e:	f003 ffbf 	bl	8009ae0 <HAL_GPIO_EXTI_IRQHandler>
}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
   HAL_EXTI_IRQHandler(&hts221_exti);  
 8005b6c:	4806      	ldr	r0, [pc, #24]	; (8005b88 <EXTI9_5_IRQHandler+0x20>)
 8005b6e:	f003 fdab 	bl	80096c8 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&ism330dhcx_exti);  
 8005b72:	4806      	ldr	r0, [pc, #24]	; (8005b8c <EXTI9_5_IRQHandler+0x24>)
 8005b74:	f003 fda8 	bl	80096c8 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&iis2mdc_exti);
 8005b78:	4805      	ldr	r0, [pc, #20]	; (8005b90 <EXTI9_5_IRQHandler+0x28>)
 8005b7a:	f003 fda5 	bl	80096c8 <HAL_EXTI_IRQHandler>
   HAL_GPIO_EXTI_IRQHandler(IIS3DWB_INT1_Pin);
 8005b7e:	2020      	movs	r0, #32
 8005b80:	f003 ffae 	bl	8009ae0 <HAL_GPIO_EXTI_IRQHandler>
}
 8005b84:	bf00      	nop
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20010274 	.word	0x20010274
 8005b8c:	2001625c 	.word	0x2001625c
 8005b90:	200102dc 	.word	0x200102dc

08005b94 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hsm_i2c);
 8005b98:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <I2C2_EV_IRQHandler+0x10>)
 8005b9a:	f004 f9a7 	bl	8009eec <HAL_I2C_EV_IRQHandler>
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200189d0 	.word	0x200189d0

08005ba8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hsm_i2c);
 8005bac:	4802      	ldr	r0, [pc, #8]	; (8005bb8 <I2C2_ER_IRQHandler+0x10>)
 8005bae:	f004 f9b7 	bl	8009f20 <HAL_I2C_ER_IRQHandler>
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200189d0 	.word	0x200189d0

08005bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
//  HAL_EXTI_IRQHandler(&iis3dwb_exti);
  HAL_EXTI_IRQHandler(&BC_exti);
 8005bc0:	4802      	ldr	r0, [pc, #8]	; (8005bcc <EXTI15_10_IRQHandler+0x10>)
 8005bc2:	f003 fd81 	bl	80096c8 <HAL_EXTI_IRQHandler>
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	2001667c 	.word	0x2001667c

08005bd0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI2_IRQHandler(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&iis2dh_exti);
 8005bd4:	4802      	ldr	r0, [pc, #8]	; (8005be0 <EXTI2_IRQHandler+0x10>)
 8005bd6:	f003 fd77 	bl	80096c8 <HAL_EXTI_IRQHandler>
}
 8005bda:	bf00      	nop
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	200102b8 	.word	0x200102b8

08005be4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005be8:	4802      	ldr	r0, [pc, #8]	; (8005bf4 <OTG_FS_IRQHandler+0x10>)
 8005bea:	f005 fd25 	bl	800b638 <HAL_PCD_IRQHandler>
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20018b3c 	.word	0x20018b3c

08005bf8 <SDMMC1_IRQHandler>:

void SDMMC1_IRQHandler(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd1);
 8005bfc:	4802      	ldr	r0, [pc, #8]	; (8005c08 <SDMMC1_IRQHandler+0x10>)
 8005bfe:	f008 fcbd 	bl	800e57c <HAL_SD_IRQHandler>
}
 8005c02:	bf00      	nop
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200168ac 	.word	0x200168ac

08005c0c <STTS751_Set_State>:
    }      
  }
}

void STTS751_Set_State(SM_Sensor_State_t newState)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	71fb      	strb	r3, [r7, #7]
  STTS751_Sensor_State = newState;
 8005c16:	4a04      	ldr	r2, [pc, #16]	; (8005c28 <STTS751_Set_State+0x1c>)
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	7013      	strb	r3, [r2, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	20000035 	.word	0x20000035

08005c2c <STTS751_Start>:
  STTS751_Init_Param.FS[0] = newFS1;
  STTS751_Init_Param.FS[0] = newFS2;
}

void STTS751_Start(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8005c30:	2003      	movs	r0, #3
 8005c32:	f7ff ffeb 	bl	8005c0c <STTS751_Set_State>
  osThreadResume(STTS751_Thread_Id);
 8005c36:	4b03      	ldr	r3, [pc, #12]	; (8005c44 <STTS751_Start+0x18>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f012 ff84 	bl	8018b48 <osThreadResume>
}
 8005c40:	bf00      	nop
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20018b38 	.word	0x20018b38

08005c48 <STTS751_Stop>:

void STTS751_Stop(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f7ff ffdd 	bl	8005c0c <STTS751_Set_State>
}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <SystemInit>:
#define VECTOR_TABLE 0x08000000
#endif


void SystemInit(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c5c:	4b17      	ldr	r3, [pc, #92]	; (8005cbc <SystemInit+0x64>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c62:	4a16      	ldr	r2, [pc, #88]	; (8005cbc <SystemInit+0x64>)
 8005c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005c6c:	4b14      	ldr	r3, [pc, #80]	; (8005cc0 <SystemInit+0x68>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <SystemInit+0x68>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c78:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <SystemInit+0x68>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8005c7e:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <SystemInit+0x68>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a0f      	ldr	r2, [pc, #60]	; (8005cc0 <SystemInit+0x68>)
 8005c84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005c88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005c8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <SystemInit+0x68>)
 8005c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <SystemInit+0x68>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <SystemInit+0x68>)
 8005c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ca0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <SystemInit+0x68>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <SystemInit+0x64>)
 8005caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cae:	609a      	str	r2, [r3, #8]
#endif
}
 8005cb0:	bf00      	nop
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	e000ed00 	.word	0xe000ed00
 8005cc0:	40021000 	.word	0x40021000

08005cc4 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	; 0x28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ccc:	4b1a      	ldr	r3, [pc, #104]	; (8005d38 <HAL_PCD_MspInit+0x74>)
 8005cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd0:	4a19      	ldr	r2, [pc, #100]	; (8005d38 <HAL_PCD_MspInit+0x74>)
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cd8:	4b17      	ldr	r3, [pc, #92]	; (8005d38 <HAL_PCD_MspInit+0x74>)
 8005cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	693b      	ldr	r3, [r7, #16]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8005ce4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cea:	2302      	movs	r3, #2
 8005cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005cf6:	230a      	movs	r3, #10
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8005cfa:	f107 0314 	add.w	r3, r7, #20
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d04:	f003 fd10 	bl	8009728 <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_PCD_MspInit+0x74>)
 8005d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <HAL_PCD_MspInit+0x74>)
 8005d0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d14:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <HAL_PCD_MspInit+0x74>)
 8005d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 8005d20:	2200      	movs	r2, #0
 8005d22:	2102      	movs	r1, #2
 8005d24:	2043      	movs	r0, #67	; 0x43
 8005d26:	f003 fa48 	bl	80091ba <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005d2a:	2043      	movs	r0, #67	; 0x43
 8005d2c:	f003 fa61 	bl	80091f2 <HAL_NVIC_EnableIRQ>
    
}
 8005d30:	bf00      	nop
 8005d32:	3728      	adds	r7, #40	; 0x28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40021000 	.word	0x40021000

08005d3c <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f00d ff18 	bl	8013b88 <USBD_LL_SetupStage>
}
 8005d58:	bf00      	nop
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	f00d ff4a 	bl	8013c22 <USBD_LL_DataOutStage>
}
 8005d8e:	bf00      	nop
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b082      	sub	sp, #8
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	3348      	adds	r3, #72	; 0x48
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	f00d ffa1 	bl	8013d04 <USBD_LL_DataInStage>
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f00e f8b4 	bl	8013f46 <USBD_LL_SOF>
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005df4:	4618      	mov	r0, r3
 8005df6:	f00e f82a 	bl	8013e4e <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e00:	2101      	movs	r1, #1
 8005e02:	4618      	mov	r0, r3
 8005e04:	f00e f864 	bl	8013ed0 <USBD_LL_SetSpeed>
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f00e f866 	bl	8013ef0 <USBD_LL_Suspend>
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f00e f86d 	bl	8013f1a <USBD_LL_Resume>
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f00e f898 	bl	8013f94 <USBD_LL_IsoOUTIncomplete>
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e7e:	78fa      	ldrb	r2, [r7, #3]
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f00e f879 	bl	8013f7a <USBD_LL_IsoINIncomplete>
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f00e f885 	bl	8013fae <USBD_LL_DevConnected>
}
 8005ea4:	bf00      	nop
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f00e f882 	bl	8013fc4 <USBD_LL_DevDisconnected>
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Set LL Driver parameters */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005ed0:	4b2e      	ldr	r3, [pc, #184]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005ed2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005ed6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 8;
 8005ed8:	4b2c      	ldr	r3, [pc, #176]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005eda:	2208      	movs	r2, #8
 8005edc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = 0;
 8005ede:	4b2b      	ldr	r3, [pc, #172]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.ep0_mps = 0x40;
 8005ee4:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005ee6:	2240      	movs	r2, #64	; 0x40
 8005ee8:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.dma_enable = 0;
 8005eea:	4b28      	ldr	r3, [pc, #160]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.low_power_enable = 0;
 8005ef0:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = 0;
 8005ef6:	4b25      	ldr	r3, [pc, #148]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = 0;
 8005efc:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005f02:	4b22      	ldr	r3, [pc, #136]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f04:	2202      	movs	r2, #2
 8005f06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = 1;
 8005f08:	4b20      	ldr	r3, [pc, #128]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005f0e:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f10:	2202      	movs	r2, #2
 8005f12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = 0;
 8005f14:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd_USB_OTG_FS.pData = pdev;
 8005f1a:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a19      	ldr	r2, [pc, #100]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f26:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd_USB_OTG_FS);
 8005f2a:	4818      	ldr	r0, [pc, #96]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f2c:	f005 fa31 	bl	800b392 <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd_USB_OTG_FS, 0x40);
 8005f30:	2140      	movs	r1, #64	; 0x40
 8005f32:	4816      	ldr	r0, [pc, #88]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f34:	f006 fa97 	bl	800c466 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005f38:	2240      	movs	r2, #64	; 0x40
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4813      	ldr	r0, [pc, #76]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f3e:	f006 fa4b 	bl	800c3d8 <HAL_PCDEx_SetTxFiFo>
  
  /*FIFO allocation: equally divided respect to the endpoints
  This may be not the optimal solution, depending on the 
  datarate flowing on each eandpoint */
  
  uint16_t fifoSizePerEp = (320 - 2*(0x40)) / (N_IN_ENDPOINTS);
 8005f42:	2326      	movs	r3, #38	; 0x26
 8005f44:	81fb      	strh	r3, [r7, #14]

  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 1, fifoSizePerEp);
 8005f46:	89fb      	ldrh	r3, [r7, #14]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	480f      	ldr	r0, [pc, #60]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f4e:	f006 fa43 	bl	800c3d8 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >1)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 2, fifoSizePerEp);
 8005f52:	89fb      	ldrh	r3, [r7, #14]
 8005f54:	461a      	mov	r2, r3
 8005f56:	2102      	movs	r1, #2
 8005f58:	480c      	ldr	r0, [pc, #48]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f5a:	f006 fa3d 	bl	800c3d8 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >2)    
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 3, fifoSizePerEp);
 8005f5e:	89fb      	ldrh	r3, [r7, #14]
 8005f60:	461a      	mov	r2, r3
 8005f62:	2103      	movs	r1, #3
 8005f64:	4809      	ldr	r0, [pc, #36]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f66:	f006 fa37 	bl	800c3d8 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >3)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 4, fifoSizePerEp);
 8005f6a:	89fb      	ldrh	r3, [r7, #14]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2104      	movs	r1, #4
 8005f70:	4806      	ldr	r0, [pc, #24]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f72:	f006 fa31 	bl	800c3d8 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >4)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 5, fifoSizePerEp);
 8005f76:	89fb      	ldrh	r3, [r7, #14]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	2105      	movs	r1, #5
 8005f7c:	4803      	ldr	r0, [pc, #12]	; (8005f8c <USBD_LL_Init+0xc4>)
 8005f7e:	f006 fa2b 	bl	800c3d8 <HAL_PCDEx_SetTxFiFo>
#endif
#endif  
#endif
#endif

  return USBD_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20018b3c 	.word	0x20018b3c

08005f90 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f005 fb1b 	bl	800b5da <HAL_PCD_Start>
  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	4608      	mov	r0, r1
 8005fb8:	4611      	mov	r1, r2
 8005fba:	461a      	mov	r2, r3
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	70fb      	strb	r3, [r7, #3]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70bb      	strb	r3, [r7, #2]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005fce:	78bb      	ldrb	r3, [r7, #2]
 8005fd0:	883a      	ldrh	r2, [r7, #0]
 8005fd2:	78f9      	ldrb	r1, [r7, #3]
 8005fd4:	f005 fef9 	bl	800bdca <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ff4:	78fa      	ldrb	r2, [r7, #3]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f005 ff4e 	bl	800be9a <HAL_PCD_EP_Close>
  return USBD_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	460b      	mov	r3, r1
 8006012:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800601a:	78fa      	ldrb	r2, [r7, #3]
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f006 f818 	bl	800c054 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	460b      	mov	r3, r1
 8006038:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	4611      	mov	r1, r2
 8006044:	4618      	mov	r0, r3
 8006046:	f006 f867 	bl	800c118 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006066:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800606c:	2b00      	cmp	r3, #0
 800606e:	da0b      	bge.n	8006088 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	4613      	mov	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	333e      	adds	r3, #62	; 0x3e
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	e00b      	b.n	80060a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800609e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	4611      	mov	r1, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f005 fe5c 	bl	800bd80 <HAL_PCD_SetAddress>
  return USBD_OK; 
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	461a      	mov	r2, r3
 80060de:	460b      	mov	r3, r1
 80060e0:	72fb      	strb	r3, [r7, #11]
 80060e2:	4613      	mov	r3, r2
 80060e4:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80060ec:	893b      	ldrh	r3, [r7, #8]
 80060ee:	7af9      	ldrb	r1, [r7, #11]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	f005 ff72 	bl	800bfda <HAL_PCD_EP_Transmit>
  return USBD_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	461a      	mov	r2, r3
 800610c:	460b      	mov	r3, r1
 800610e:	72fb      	strb	r3, [r7, #11]
 8006110:	4613      	mov	r3, r2
 8006112:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800611a:	893b      	ldrh	r3, [r7, #8]
 800611c:	7af9      	ldrb	r1, [r7, #11]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	f005 ff05 	bl	800bf2e <HAL_PCD_EP_Receive>
  return USBD_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	460b      	mov	r3, r1
 8006138:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	4611      	mov	r1, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f005 ff30 	bl	800bfaa <HAL_PCD_EP_GetRxCount>
 800614a:	4603      	mov	r3, r0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_WCID_STREAMING_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	6039      	str	r1, [r7, #0]
 800615e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2212      	movs	r2, #18
 8006164:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc;
 8006166:	4b03      	ldr	r3, [pc, #12]	; (8006174 <USBD_WCID_STREAMING_DeviceDescriptor+0x20>)
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	20000058 	.word	0x20000058

08006178 <USBD_WCID_STREAMING_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	6039      	str	r1, [r7, #0]
 8006182:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);  
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2204      	movs	r2, #4
 8006188:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 800618a:	4b03      	ldr	r3, [pc, #12]	; (8006198 <USBD_WCID_STREAMING_LangIDStrDescriptor+0x20>)
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	2000006c 	.word	0x2000006c

0800619c <USBD_WCID_STREAMING_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{  
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	6039      	str	r1, [r7, #0]
 80061a6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	4904      	ldr	r1, [pc, #16]	; (80061bc <USBD_WCID_STREAMING_ProductStrDescriptor+0x20>)
 80061ac:	4804      	ldr	r0, [pc, #16]	; (80061c0 <USBD_WCID_STREAMING_ProductStrDescriptor+0x24>)
 80061ae:	f00e fc6e 	bl	8014a8e <USBD_GetString>
  return USBD_StrDesc;
 80061b2:	4b02      	ldr	r3, [pc, #8]	; (80061bc <USBD_WCID_STREAMING_ProductStrDescriptor+0x20>)
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20018f44 	.word	0x20018f44
 80061c0:	080238c8 	.word	0x080238c8

080061c4 <USBD_WCID_STREAMING_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	6039      	str	r1, [r7, #0]
 80061ce:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	4904      	ldr	r1, [pc, #16]	; (80061e4 <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x20>)
 80061d4:	4804      	ldr	r0, [pc, #16]	; (80061e8 <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x24>)
 80061d6:	f00e fc5a 	bl	8014a8e <USBD_GetString>
  return USBD_StrDesc;
 80061da:	4b02      	ldr	r3, [pc, #8]	; (80061e4 <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x20>)
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20018f44 	.word	0x20018f44
 80061e8:	080238e8 	.word	0x080238e8

080061ec <USBD_WCID_STREAMING_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	6039      	str	r1, [r7, #0]
 80061f6:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	221a      	movs	r2, #26
 80061fc:	801a      	strh	r2, [r3, #0]
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 80061fe:	f000 f82f 	bl	8006260 <Get_SerialNum>
  
  return (uint8_t*)USBD_StringSerial;
 8006202:	4b02      	ldr	r3, [pc, #8]	; (800620c <USBD_WCID_STREAMING_SerialStrDescriptor+0x20>)
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000070 	.word	0x20000070

08006210 <USBD_WCID_STREAMING_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{ 
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	6039      	str	r1, [r7, #0]
 800621a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	4904      	ldr	r1, [pc, #16]	; (8006230 <USBD_WCID_STREAMING_ConfigStrDescriptor+0x20>)
 8006220:	4804      	ldr	r0, [pc, #16]	; (8006234 <USBD_WCID_STREAMING_ConfigStrDescriptor+0x24>)
 8006222:	f00e fc34 	bl	8014a8e <USBD_GetString>
  return USBD_StrDesc;  
 8006226:	4b02      	ldr	r3, [pc, #8]	; (8006230 <USBD_WCID_STREAMING_ConfigStrDescriptor+0x20>)
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20018f44 	.word	0x20018f44
 8006234:	080238fc 	.word	0x080238fc

08006238 <USBD_WCID_STREAMING_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	6039      	str	r1, [r7, #0]
 8006242:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	4904      	ldr	r1, [pc, #16]	; (8006258 <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x20>)
 8006248:	4804      	ldr	r0, [pc, #16]	; (800625c <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x24>)
 800624a:	f00e fc20 	bl	8014a8e <USBD_GetString>
  return USBD_StrDesc;  
 800624e:	4b02      	ldr	r3, [pc, #8]	; (8006258 <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x20>)
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20018f44 	.word	0x20018f44
 800625c:	0802390c 	.word	0x0802390c

08006260 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <Get_SerialNum+0x44>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <Get_SerialNum+0x48>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8006272:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <Get_SerialNum+0x4c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	607b      	str	r3, [r7, #4]
  
  deviceserial0 += deviceserial2;
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
  
  if (deviceserial0 != 0)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d009      	beq.n	800629a <Get_SerialNum+0x3a>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8006286:	2208      	movs	r2, #8
 8006288:	4909      	ldr	r1, [pc, #36]	; (80062b0 <Get_SerialNum+0x50>)
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f814 	bl	80062b8 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8006290:	2204      	movs	r2, #4
 8006292:	4908      	ldr	r1, [pc, #32]	; (80062b4 <Get_SerialNum+0x54>)
 8006294:	68b8      	ldr	r0, [r7, #8]
 8006296:	f000 f80f 	bl	80062b8 <IntToUnicode>
  }
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	1fff7590 	.word	0x1fff7590
 80062a8:	1fff7594 	.word	0x1fff7594
 80062ac:	1fff7598 	.word	0x1fff7598
 80062b0:	20000072 	.word	0x20000072
 80062b4:	20000082 	.word	0x20000082

080062b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]
  
  for( idx = 0 ; idx < len ; idx ++)
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]
 80062ce:	e027      	b.n	8006320 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	0f1b      	lsrs	r3, r3, #28
 80062d4:	2b09      	cmp	r3, #9
 80062d6:	d80b      	bhi.n	80062f0 <IntToUnicode+0x38>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	0f1b      	lsrs	r3, r3, #28
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	4619      	mov	r1, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	440b      	add	r3, r1
 80062e8:	3230      	adds	r2, #48	; 0x30
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	e00a      	b.n	8006306 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	0f1b      	lsrs	r3, r3, #28
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	4619      	mov	r1, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	440b      	add	r3, r1
 8006300:	3237      	adds	r2, #55	; 0x37
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	3301      	adds	r3, #1
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	4413      	add	r3, r2
 8006316:	2200      	movs	r2, #0
 8006318:	701a      	strb	r2, [r3, #0]
  for( idx = 0 ; idx < len ; idx ++)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	3301      	adds	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
 8006320:	7dfa      	ldrb	r2, [r7, #23]
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	429a      	cmp	r2, r3
 8006326:	d3d3      	bcc.n	80062d0 <IntToUnicode+0x18>
  }
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <WCID_STREAMING_Itf_Init>:
*         Initializes the WCID media low layer
* @param  None
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_Init(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /*ToDo : add state variable, check for allocation success */
  USB_RxBuffer = HSD_calloc(512, sizeof(uint8_t));
 800633c:	2101      	movs	r1, #1
 800633e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006342:	f018 fd85 	bl	801ee50 <calloc>
 8006346:	4603      	mov	r3, r0
 8006348:	461a      	mov	r2, r3
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <WCID_STREAMING_Itf_Init+0x28>)
 800634c:	601a      	str	r2, [r3, #0]
  if(USB_RxBuffer == NULL)
  {
    /* Error */
  }    
  
  USBD_WCID_STREAMING_SetRxDataBuffer(&USBD_Device, (uint8_t *)USB_RxBuffer);  
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <WCID_STREAMING_Itf_Init+0x28>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4619      	mov	r1, r3
 8006354:	4803      	ldr	r0, [pc, #12]	; (8006364 <WCID_STREAMING_Itf_Init+0x2c>)
 8006356:	f00d f91b 	bl	8013590 <USBD_WCID_STREAMING_SetRxDataBuffer>
  return (USBD_OK);
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20000b00 	.word	0x20000b00
 8006364:	200163b4 	.word	0x200163b4

08006368 <WCID_STREAMING_Itf_DeInit>:
*         DeInitializes the WCID media low layer
* @param  None
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_DeInit(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /*ToDo : add state variable, check for allocation success */  
  if( USB_RxBuffer != NULL)
 800636c:	4b07      	ldr	r3, [pc, #28]	; (800638c <WCID_STREAMING_Itf_DeInit+0x24>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <WCID_STREAMING_Itf_DeInit+0x1c>
  {
    HSD_free(USB_RxBuffer);
 8006374:	4b05      	ldr	r3, [pc, #20]	; (800638c <WCID_STREAMING_Itf_DeInit+0x24>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f018 ffc3 	bl	801f304 <free>
    USB_RxBuffer = NULL;
 800637e:	4b03      	ldr	r3, [pc, #12]	; (800638c <WCID_STREAMING_Itf_DeInit+0x24>)
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]
  }
  
  return (USBD_OK);
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20000b00 	.word	0x20000b00

08006390 <WCID_STREAMING_Itf_Control>:
* @param  Buf: Buffer containing command data (request parameters)
* @param  Len: Number of data to be sent (in bytes)
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_Control (uint8_t isHostToDevice, uint8_t cmd, uint16_t wValue, uint16_t wIndex, uint8_t* pbuf, uint16_t length)
{ 
 8006390:	b590      	push	{r4, r7, lr}
 8006392:	b08f      	sub	sp, #60	; 0x3c
 8006394:	af00      	add	r7, sp, #0
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	4611      	mov	r1, r2
 800639c:	461a      	mov	r2, r3
 800639e:	4623      	mov	r3, r4
 80063a0:	71fb      	strb	r3, [r7, #7]
 80063a2:	4603      	mov	r3, r0
 80063a4:	71bb      	strb	r3, [r7, #6]
 80063a6:	460b      	mov	r3, r1
 80063a8:	80bb      	strh	r3, [r7, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	807b      	strh	r3, [r7, #2]
  if (com_status != HS_DATALOG_IDLE && com_status != HS_DATALOG_USB_STARTED )
 80063ae:	4baa      	ldr	r3, [pc, #680]	; (8006658 <WCID_STREAMING_Itf_Control+0x2c8>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d006      	beq.n	80063c6 <WCID_STREAMING_Itf_Control+0x36>
 80063b8:	4ba7      	ldr	r3, [pc, #668]	; (8006658 <WCID_STREAMING_Itf_Control+0x2c8>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d001      	beq.n	80063c6 <WCID_STREAMING_Itf_Control+0x36>
    return USBD_FAIL;
 80063c2:	2302      	movs	r3, #2
 80063c4:	e304      	b.n	80069d0 <WCID_STREAMING_Itf_Control+0x640>
  
  uint32_t i = 0;  
 80063c6:	2300      	movs	r3, #0
 80063c8:	637b      	str	r3, [r7, #52]	; 0x34
  COM_SensorStatus_t * myStatus;
  COM_DeviceDescriptor_t * myDeviceDescriptor;
  
  static uint8_t state = STATE_WAITING;
  
  if(isHostToDevice)
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8205 	beq.w	80067dc <WCID_STREAMING_Itf_Control+0x44c>
  {
    switch(state)
 80063d2:	4ba2      	ldr	r3, [pc, #648]	; (800665c <WCID_STREAMING_Itf_Control+0x2cc>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <WCID_STREAMING_Itf_Control+0x50>
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d01b      	beq.n	8006416 <WCID_STREAMING_Itf_Control+0x86>
 80063de:	e2f6      	b.n	80069ce <WCID_STREAMING_Itf_Control+0x63e>
    {
    case STATE_WAITING:
      
      if(cmd != CMD_SIZE_SET)
 80063e0:	79bb      	ldrb	r3, [r7, #6]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d002      	beq.n	80063ec <WCID_STREAMING_Itf_Control+0x5c>
        return -1; /* error */      
 80063e6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ea:	e2f1      	b.n	80069d0 <WCID_STREAMING_Itf_Control+0x640>
      
      size = *(uint16_t *)pbuf;
 80063ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	4b9b      	ldr	r3, [pc, #620]	; (8006660 <WCID_STREAMING_Itf_Control+0x2d0>)
 80063f2:	801a      	strh	r2, [r3, #0]
      serialized = HSD_malloc(size);
 80063f4:	4b9a      	ldr	r3, [pc, #616]	; (8006660 <WCID_STREAMING_Itf_Control+0x2d0>)
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f018 ff7b 	bl	801f2f4 <malloc>
 80063fe:	4603      	mov	r3, r0
 8006400:	461a      	mov	r2, r3
 8006402:	4b98      	ldr	r3, [pc, #608]	; (8006664 <WCID_STREAMING_Itf_Control+0x2d4>)
 8006404:	601a      	str	r2, [r3, #0]
      p = serialized;
 8006406:	4b97      	ldr	r3, [pc, #604]	; (8006664 <WCID_STREAMING_Itf_Control+0x2d4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a97      	ldr	r2, [pc, #604]	; (8006668 <WCID_STREAMING_Itf_Control+0x2d8>)
 800640c:	6013      	str	r3, [r2, #0]
      state = STATE_SIZE_RCVD;     
 800640e:	4b93      	ldr	r3, [pc, #588]	; (800665c <WCID_STREAMING_Itf_Control+0x2cc>)
 8006410:	2205      	movs	r2, #5
 8006412:	701a      	strb	r2, [r3, #0]
      
      break;
 8006414:	e2db      	b.n	80069ce <WCID_STREAMING_Itf_Control+0x63e>
    case STATE_SIZE_RCVD:
      if(cmd != CMD_DATA_SET)
 8006416:	79bb      	ldrb	r3, [r7, #6]
 8006418:	2b04      	cmp	r3, #4
 800641a:	d002      	beq.n	8006422 <WCID_STREAMING_Itf_Control+0x92>
        return -1; /* error */ 
 800641c:	f04f 33ff 	mov.w	r3, #4294967295
 8006420:	e2d6      	b.n	80069d0 <WCID_STREAMING_Itf_Control+0x640>
      
      for (i = 0; i < length; i ++)
 8006422:	2300      	movs	r3, #0
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
 8006426:	e012      	b.n	800644e <WCID_STREAMING_Itf_Control+0xbe>
      {
        *p++ = pbuf[i];
 8006428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800642a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642c:	441a      	add	r2, r3
 800642e:	4b8e      	ldr	r3, [pc, #568]	; (8006668 <WCID_STREAMING_Itf_Control+0x2d8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	1c59      	adds	r1, r3, #1
 8006434:	488c      	ldr	r0, [pc, #560]	; (8006668 <WCID_STREAMING_Itf_Control+0x2d8>)
 8006436:	6001      	str	r1, [r0, #0]
 8006438:	7812      	ldrb	r2, [r2, #0]
 800643a:	701a      	strb	r2, [r3, #0]
        size--;        
 800643c:	4b88      	ldr	r3, [pc, #544]	; (8006660 <WCID_STREAMING_Itf_Control+0x2d0>)
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	4b86      	ldr	r3, [pc, #536]	; (8006660 <WCID_STREAMING_Itf_Control+0x2d0>)
 8006446:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < length; i ++)
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	3301      	adds	r3, #1
 800644c:	637b      	str	r3, [r7, #52]	; 0x34
 800644e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006454:	429a      	cmp	r2, r3
 8006456:	d3e7      	bcc.n	8006428 <WCID_STREAMING_Itf_Control+0x98>
      }
      
      if (size == 0)
 8006458:	4b81      	ldr	r3, [pc, #516]	; (8006660 <WCID_STREAMING_Itf_Control+0x2d0>)
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f040 82b3 	bne.w	80069c8 <WCID_STREAMING_Itf_Control+0x638>
      {
        
        HSD_JSON_parse_Command((char *)serialized, &outCommand);
 8006462:	4b80      	ldr	r3, [pc, #512]	; (8006664 <WCID_STREAMING_Itf_Control+0x2d4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4981      	ldr	r1, [pc, #516]	; (800666c <WCID_STREAMING_Itf_Control+0x2dc>)
 8006468:	4618      	mov	r0, r3
 800646a:	f7fa fcf5 	bl	8000e58 <HSD_JSON_parse_Command>
        state = STATE_REQUEST_SET;     
 800646e:	4b7b      	ldr	r3, [pc, #492]	; (800665c <WCID_STREAMING_Itf_Control+0x2cc>)
 8006470:	2201      	movs	r2, #1
 8006472:	701a      	strb	r2, [r3, #0]
        
        
        if(outCommand.command == COM_COMMAND_SET) 
 8006474:	4b7d      	ldr	r3, [pc, #500]	; (800666c <WCID_STREAMING_Itf_Control+0x2dc>)
 8006476:	f993 3000 	ldrsb.w	r3, [r3]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d126      	bne.n	80064cc <WCID_STREAMING_Itf_Control+0x13c>
        {
          myStatus = COM_GetSensorStatus(outCommand.sensorId);
 800647e:	4b7b      	ldr	r3, [pc, #492]	; (800666c <WCID_STREAMING_Itf_Control+0x2dc>)
 8006480:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	4618      	mov	r0, r3
 8006488:	f7fb fc70 	bl	8001d6c <COM_GetSensorStatus>
 800648c:	60b8      	str	r0, [r7, #8]
          memcpy(&tempSensor.sensorStatus, myStatus, sizeof(COM_SensorStatus_t));               
 800648e:	224c      	movs	r2, #76	; 0x4c
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	4877      	ldr	r0, [pc, #476]	; (8006670 <WCID_STREAMING_Itf_Control+0x2e0>)
 8006494:	f018 ff3e 	bl	801f314 <memcpy>
          HSD_JSON_parse_Status((char *)serialized, &tempSensor.sensorStatus);    
 8006498:	4b72      	ldr	r3, [pc, #456]	; (8006664 <WCID_STREAMING_Itf_Control+0x2d4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4974      	ldr	r1, [pc, #464]	; (8006670 <WCID_STREAMING_Itf_Control+0x2e0>)
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fa fce8 	bl	8000e74 <HSD_JSON_parse_Status>
          HSD_JSON_free(serialized);
 80064a4:	4b6f      	ldr	r3, [pc, #444]	; (8006664 <WCID_STREAMING_Itf_Control+0x2d4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fa fc5f 	bl	8000d6c <HSD_JSON_free>
          
          update_sensorStatus(myStatus, &tempSensor.sensorStatus, outCommand.sensorId);
 80064ae:	4b6f      	ldr	r3, [pc, #444]	; (800666c <WCID_STREAMING_Itf_Control+0x2dc>)
 80064b0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	496d      	ldr	r1, [pc, #436]	; (8006670 <WCID_STREAMING_Itf_Control+0x2e0>)
 80064ba:	68b8      	ldr	r0, [r7, #8]
 80064bc:	f7fc fd4a 	bl	8002f54 <update_sensorStatus>
          
          
          /* Update the sensor-specific config structure */
          update_sensors_config();        
 80064c0:	f7fc fe56 	bl	8003170 <update_sensors_config>
          
          state = STATE_WAITING;
 80064c4:	4b65      	ldr	r3, [pc, #404]	; (800665c <WCID_STREAMING_Itf_Control+0x2cc>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	701a      	strb	r2, [r3, #0]
          
          SM_TIM_Stop(); 
          state = STATE_WAITING;
        }
      }
      break;
 80064ca:	e27d      	b.n	80069c8 <WCID_STREAMING_Itf_Control+0x638>
        else if(outCommand.command == COM_COMMAND_START) 
 80064cc:	4b67      	ldr	r3, [pc, #412]	; (800666c <WCID_STREAMING_Itf_Control+0x2dc>)
 80064ce:	f993 3000 	ldrsb.w	r3, [r3]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	f040 80e6 	bne.w	80066a4 <WCID_STREAMING_Itf_Control+0x314>
          com_status = HS_DATALOG_USB_STARTED;
 80064d8:	4b5f      	ldr	r3, [pc, #380]	; (8006658 <WCID_STREAMING_Itf_Control+0x2c8>)
 80064da:	2201      	movs	r2, #1
 80064dc:	701a      	strb	r2, [r3, #0]
          myDeviceDescriptor = COM_GetDeviceDescriptor();
 80064de:	f7fb fc13 	bl	8001d08 <COM_GetDeviceDescriptor>
 80064e2:	60f8      	str	r0, [r7, #12]
          SM_TIM_Start();
 80064e4:	f7ff faf8 	bl	8005ad8 <SM_TIM_Start>
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 80064e8:	2300      	movs	r3, #0
 80064ea:	633b      	str	r3, [r7, #48]	; 0x30
 80064ec:	e0a6      	b.n	800663c <WCID_STREAMING_Itf_Control+0x2ac>
            myStatus = COM_GetSensorStatus(i);  
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fb fc3a 	bl	8001d6c <COM_GetSensorStatus>
 80064f8:	60b8      	str	r0, [r7, #8]
            if(myStatus->comChannelNumber != -1 && myStatus->isActive)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	f000 8097 	beq.w	8006636 <WCID_STREAMING_Itf_Control+0x2a6>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	7b9b      	ldrb	r3, [r3, #14]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8092 	beq.w	8006636 <WCID_STREAMING_Itf_Control+0x2a6>
              TxBuffer[myStatus->comChannelNumber] = NULL;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006518:	4619      	mov	r1, r3
 800651a:	4b56      	ldr	r3, [pc, #344]	; (8006674 <WCID_STREAMING_Itf_Control+0x2e4>)
 800651c:	2200      	movs	r2, #0
 800651e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
              TxBuffer[myStatus->comChannelNumber] = HSD_calloc((myStatus->usbDataPacketSize *2 +2), sizeof(uint8_t));
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	8a1b      	ldrh	r3, [r3, #16]
 8006526:	3301      	adds	r3, #1
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	461a      	mov	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006532:	461c      	mov	r4, r3
 8006534:	2101      	movs	r1, #1
 8006536:	4610      	mov	r0, r2
 8006538:	f018 fc8a 	bl	801ee50 <calloc>
 800653c:	4603      	mov	r3, r0
 800653e:	461a      	mov	r2, r3
 8006540:	4b4c      	ldr	r3, [pc, #304]	; (8006674 <WCID_STREAMING_Itf_Control+0x2e4>)
 8006542:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
              if(TxBuffer[myStatus->comChannelNumber] == NULL)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800654c:	461a      	mov	r2, r3
 800654e:	4b49      	ldr	r3, [pc, #292]	; (8006674 <WCID_STREAMING_Itf_Control+0x2e4>)
 8006550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <WCID_STREAMING_Itf_Control+0x1cc>
                _Error_Handler();
 8006558:	f000 fa52 	bl	8006a00 <_Error_Handler>
              USBD_WCID_STREAMING_SetTxDataBuffer(&USBD_Device, myStatus->comChannelNumber, TxBuffer[myStatus->comChannelNumber], myStatus->usbDataPacketSize);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006562:	b2d9      	uxtb	r1, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800656a:	461a      	mov	r2, r3
 800656c:	4b41      	ldr	r3, [pc, #260]	; (8006674 <WCID_STREAMING_Itf_Control+0x2e4>)
 800656e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	8a1b      	ldrh	r3, [r3, #16]
 8006576:	4840      	ldr	r0, [pc, #256]	; (8006678 <WCID_STREAMING_Itf_Control+0x2e8>)
 8006578:	f00d f9f0 	bl	801395c <USBD_WCID_STREAMING_SetTxDataBuffer>
              USBD_WCID_STREAMING_CleanTxDataBuffer(&USBD_Device, myStatus->comChannelNumber);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	4619      	mov	r1, r3
 8006586:	483c      	ldr	r0, [pc, #240]	; (8006678 <WCID_STREAMING_Itf_Control+0x2e8>)
 8006588:	f00d f9ce 	bl	8013928 <USBD_WCID_STREAMING_CleanTxDataBuffer>
              if(i == iis3dwb_com_id)
 800658c:	4b3b      	ldr	r3, [pc, #236]	; (800667c <WCID_STREAMING_Itf_Control+0x2ec>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	4293      	cmp	r3, r2
 8006596:	d102      	bne.n	800659e <WCID_STREAMING_Itf_Control+0x20e>
                IIS3DWB_Start();
 8006598:	f7fd f9e4 	bl	8003964 <IIS3DWB_Start>
 800659c:	e046      	b.n	800662c <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == hts221_com_id)
 800659e:	4b38      	ldr	r3, [pc, #224]	; (8006680 <WCID_STREAMING_Itf_Control+0x2f0>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d102      	bne.n	80065b0 <WCID_STREAMING_Itf_Control+0x220>
                HTS221_Start();
 80065aa:	f7fc fef7 	bl	800339c <HTS221_Start>
 80065ae:	e03d      	b.n	800662c <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == iis2dh_com_id)
 80065b0:	4b34      	ldr	r3, [pc, #208]	; (8006684 <WCID_STREAMING_Itf_Control+0x2f4>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d102      	bne.n	80065c2 <WCID_STREAMING_Itf_Control+0x232>
                IIS2DH_Start();
 80065bc:	f7fc ff14 	bl	80033e8 <IIS2DH_Start>
 80065c0:	e034      	b.n	800662c <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == iis2mdc_com_id)
 80065c2:	4b31      	ldr	r3, [pc, #196]	; (8006688 <WCID_STREAMING_Itf_Control+0x2f8>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d102      	bne.n	80065d4 <WCID_STREAMING_Itf_Control+0x244>
                IIS2MDC_Start();
 80065ce:	f7fc ff31 	bl	8003434 <IIS2MDC_Start>
 80065d2:	e02b      	b.n	800662c <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == imp34dt05_com_id)
 80065d4:	4b2d      	ldr	r3, [pc, #180]	; (800668c <WCID_STREAMING_Itf_Control+0x2fc>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	4293      	cmp	r3, r2
 80065de:	d102      	bne.n	80065e6 <WCID_STREAMING_Itf_Control+0x256>
                IMP34DT05_Start();
 80065e0:	f7fd f9e6 	bl	80039b0 <IMP34DT05_Start>
 80065e4:	e022      	b.n	800662c <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == mp23abs1_com_id)
 80065e6:	4b2a      	ldr	r3, [pc, #168]	; (8006690 <WCID_STREAMING_Itf_Control+0x300>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d102      	bne.n	80065f8 <WCID_STREAMING_Itf_Control+0x268>
                MP23ABS1_Start();
 80065f2:	f7fd fe33 	bl	800425c <MP23ABS1_Start>
 80065f6:	e019      	b.n	800662c <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == ism330dhcx_com_id)
 80065f8:	4b26      	ldr	r3, [pc, #152]	; (8006694 <WCID_STREAMING_Itf_Control+0x304>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	4293      	cmp	r3, r2
 8006602:	d102      	bne.n	800660a <WCID_STREAMING_Itf_Control+0x27a>
                ISM330DHCX_Start();
 8006604:	f7fd f9fa 	bl	80039fc <ISM330DHCX_Start>
 8006608:	e010      	b.n	800662c <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == lps22hh_com_id)
 800660a:	4b23      	ldr	r3, [pc, #140]	; (8006698 <WCID_STREAMING_Itf_Control+0x308>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	4293      	cmp	r3, r2
 8006614:	d102      	bne.n	800661c <WCID_STREAMING_Itf_Control+0x28c>
                LPS22HH_Start();
 8006616:	f7fd fa17 	bl	8003a48 <LPS22HH_Start>
 800661a:	e007      	b.n	800662c <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == stts751_com_id)
 800661c:	4b1f      	ldr	r3, [pc, #124]	; (800669c <WCID_STREAMING_Itf_Control+0x30c>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	4293      	cmp	r3, r2
 8006626:	d101      	bne.n	800662c <WCID_STREAMING_Itf_Control+0x29c>
                STTS751_Start();          
 8006628:	f7ff fb00 	bl	8005c2c <STTS751_Start>
              sensor_first_dataReady[i] = 1;
 800662c:	4a1c      	ldr	r2, [pc, #112]	; (80066a0 <WCID_STREAMING_Itf_Control+0x310>)
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	4413      	add	r3, r2
 8006632:	2201      	movs	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	3301      	adds	r3, #1
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	429a      	cmp	r2, r3
 8006644:	f63f af53 	bhi.w	80064ee <WCID_STREAMING_Itf_Control+0x15e>
          USBD_WCID_STREAMING_StartStreaming(&USBD_Device);
 8006648:	480b      	ldr	r0, [pc, #44]	; (8006678 <WCID_STREAMING_Itf_Control+0x2e8>)
 800664a:	f00d f9d3 	bl	80139f4 <USBD_WCID_STREAMING_StartStreaming>
          state = STATE_WAITING;
 800664e:	4b03      	ldr	r3, [pc, #12]	; (800665c <WCID_STREAMING_Itf_Control+0x2cc>)
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
      break;
 8006654:	e1b8      	b.n	80069c8 <WCID_STREAMING_Itf_Control+0x638>
 8006656:	bf00      	nop
 8006658:	20000504 	.word	0x20000504
 800665c:	20000b04 	.word	0x20000b04
 8006660:	20000b06 	.word	0x20000b06
 8006664:	20000b08 	.word	0x20000b08
 8006668:	20000b0c 	.word	0x20000b0c
 800666c:	20000b10 	.word	0x20000b10
 8006670:	20000cc0 	.word	0x20000cc0
 8006674:	2001d044 	.word	0x2001d044
 8006678:	200163b4 	.word	0x200163b4
 800667c:	200163a4 	.word	0x200163a4
 8006680:	200166b8 	.word	0x200166b8
 8006684:	200166c8 	.word	0x200166c8
 8006688:	20016679 	.word	0x20016679
 800668c:	200166c0 	.word	0x200166c0
 8006690:	20016678 	.word	0x20016678
 8006694:	200166b9 	.word	0x200166b9
 8006698:	200166d1 	.word	0x200166d1
 800669c:	200166d0 	.word	0x200166d0
 80066a0:	20000028 	.word	0x20000028
        else if(outCommand.command == COM_COMMAND_STOP) 
 80066a4:	4ba2      	ldr	r3, [pc, #648]	; (8006930 <WCID_STREAMING_Itf_Control+0x5a0>)
 80066a6:	f993 3000 	ldrsb.w	r3, [r3]
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	f040 818c 	bne.w	80069c8 <WCID_STREAMING_Itf_Control+0x638>
          USBD_WCID_STREAMING_StopStreaming(&USBD_Device);
 80066b0:	48a0      	ldr	r0, [pc, #640]	; (8006934 <WCID_STREAMING_Itf_Control+0x5a4>)
 80066b2:	f00d f9c7 	bl	8013a44 <USBD_WCID_STREAMING_StopStreaming>
          com_status = HS_DATALOG_IDLE;
 80066b6:	4ba0      	ldr	r3, [pc, #640]	; (8006938 <WCID_STREAMING_Itf_Control+0x5a8>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < N_CHANNELS_MAX; i++)
 80066bc:	2300      	movs	r3, #0
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066c0:	e014      	b.n	80066ec <WCID_STREAMING_Itf_Control+0x35c>
            if( TxBuffer[i] != NULL)
 80066c2:	4a9e      	ldr	r2, [pc, #632]	; (800693c <WCID_STREAMING_Itf_Control+0x5ac>)
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <WCID_STREAMING_Itf_Control+0x356>
              HSD_free(TxBuffer[i]);
 80066ce:	4a9b      	ldr	r2, [pc, #620]	; (800693c <WCID_STREAMING_Itf_Control+0x5ac>)
 80066d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f018 fe14 	bl	801f304 <free>
              TxBuffer[i] = NULL;
 80066dc:	4a97      	ldr	r2, [pc, #604]	; (800693c <WCID_STREAMING_Itf_Control+0x5ac>)
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	2100      	movs	r1, #0
 80066e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          for (int i = 0; i < N_CHANNELS_MAX; i++)
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	3301      	adds	r3, #1
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	dde7      	ble.n	80066c2 <WCID_STREAMING_Itf_Control+0x332>
          myDeviceDescriptor = COM_GetDeviceDescriptor();
 80066f2:	f7fb fb09 	bl	8001d08 <COM_GetDeviceDescriptor>
 80066f6:	60f8      	str	r0, [r7, #12]
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 80066f8:	2300      	movs	r3, #0
 80066fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fc:	e063      	b.n	80067c6 <WCID_STREAMING_Itf_Control+0x436>
            myStatus = COM_GetSensorStatus(i);  
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	b2db      	uxtb	r3, r3
 8006702:	4618      	mov	r0, r3
 8006704:	f7fb fb32 	bl	8001d6c <COM_GetSensorStatus>
 8006708:	60b8      	str	r0, [r7, #8]
            if(myStatus->comChannelNumber != -1)
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006714:	d054      	beq.n	80067c0 <WCID_STREAMING_Itf_Control+0x430>
              if(i == iis3dwb_com_id)
 8006716:	4b8a      	ldr	r3, [pc, #552]	; (8006940 <WCID_STREAMING_Itf_Control+0x5b0>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	4293      	cmp	r3, r2
 8006720:	d102      	bne.n	8006728 <WCID_STREAMING_Itf_Control+0x398>
                IIS3DWB_Stop();
 8006722:	f7fd f92d 	bl	8003980 <IIS3DWB_Stop>
 8006726:	e046      	b.n	80067b6 <WCID_STREAMING_Itf_Control+0x426>
              else if(i == hts221_com_id)
 8006728:	4b86      	ldr	r3, [pc, #536]	; (8006944 <WCID_STREAMING_Itf_Control+0x5b4>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	4293      	cmp	r3, r2
 8006732:	d102      	bne.n	800673a <WCID_STREAMING_Itf_Control+0x3aa>
                HTS221_Stop();
 8006734:	f7fc fe40 	bl	80033b8 <HTS221_Stop>
 8006738:	e03d      	b.n	80067b6 <WCID_STREAMING_Itf_Control+0x426>
              else if(i == iis2dh_com_id)
 800673a:	4b83      	ldr	r3, [pc, #524]	; (8006948 <WCID_STREAMING_Itf_Control+0x5b8>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	4293      	cmp	r3, r2
 8006744:	d102      	bne.n	800674c <WCID_STREAMING_Itf_Control+0x3bc>
                IIS2DH_Stop();
 8006746:	f7fc fe5d 	bl	8003404 <IIS2DH_Stop>
 800674a:	e034      	b.n	80067b6 <WCID_STREAMING_Itf_Control+0x426>
              else if(i == iis2mdc_com_id)
 800674c:	4b7f      	ldr	r3, [pc, #508]	; (800694c <WCID_STREAMING_Itf_Control+0x5bc>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	4293      	cmp	r3, r2
 8006756:	d102      	bne.n	800675e <WCID_STREAMING_Itf_Control+0x3ce>
                IIS2MDC_Stop();
 8006758:	f7fc fe7a 	bl	8003450 <IIS2MDC_Stop>
 800675c:	e02b      	b.n	80067b6 <WCID_STREAMING_Itf_Control+0x426>
              else if(i == imp34dt05_com_id)
 800675e:	4b7c      	ldr	r3, [pc, #496]	; (8006950 <WCID_STREAMING_Itf_Control+0x5c0>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	4293      	cmp	r3, r2
 8006768:	d102      	bne.n	8006770 <WCID_STREAMING_Itf_Control+0x3e0>
                IMP34DT05_Stop();
 800676a:	f7fd f92f 	bl	80039cc <IMP34DT05_Stop>
 800676e:	e022      	b.n	80067b6 <WCID_STREAMING_Itf_Control+0x426>
              else if(i == mp23abs1_com_id)
 8006770:	4b78      	ldr	r3, [pc, #480]	; (8006954 <WCID_STREAMING_Itf_Control+0x5c4>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	4293      	cmp	r3, r2
 800677a:	d102      	bne.n	8006782 <WCID_STREAMING_Itf_Control+0x3f2>
                MP23ABS1_Stop();              
 800677c:	f7fd fd7c 	bl	8004278 <MP23ABS1_Stop>
 8006780:	e019      	b.n	80067b6 <WCID_STREAMING_Itf_Control+0x426>
              else if(i == ism330dhcx_com_id)
 8006782:	4b75      	ldr	r3, [pc, #468]	; (8006958 <WCID_STREAMING_Itf_Control+0x5c8>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	4293      	cmp	r3, r2
 800678c:	d102      	bne.n	8006794 <WCID_STREAMING_Itf_Control+0x404>
                ISM330DHCX_Stop();
 800678e:	f7fd f943 	bl	8003a18 <ISM330DHCX_Stop>
 8006792:	e010      	b.n	80067b6 <WCID_STREAMING_Itf_Control+0x426>
              else if(i == lps22hh_com_id)
 8006794:	4b71      	ldr	r3, [pc, #452]	; (800695c <WCID_STREAMING_Itf_Control+0x5cc>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	4293      	cmp	r3, r2
 800679e:	d102      	bne.n	80067a6 <WCID_STREAMING_Itf_Control+0x416>
                LPS22HH_Stop();              
 80067a0:	f7fd f960 	bl	8003a64 <LPS22HH_Stop>
 80067a4:	e007      	b.n	80067b6 <WCID_STREAMING_Itf_Control+0x426>
              else if(i == stts751_com_id)
 80067a6:	4b6e      	ldr	r3, [pc, #440]	; (8006960 <WCID_STREAMING_Itf_Control+0x5d0>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d101      	bne.n	80067b6 <WCID_STREAMING_Itf_Control+0x426>
                STTS751_Stop();          
 80067b2:	f7ff fa49 	bl	8005c48 <STTS751_Stop>
              sensor_first_dataReady[i] = 0;
 80067b6:	4a6b      	ldr	r2, [pc, #428]	; (8006964 <WCID_STREAMING_Itf_Control+0x5d4>)
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	4413      	add	r3, r2
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	3301      	adds	r3, #1
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d896      	bhi.n	80066fe <WCID_STREAMING_Itf_Control+0x36e>
          SM_TIM_Stop(); 
 80067d0:	f7ff f98c 	bl	8005aec <SM_TIM_Stop>
          state = STATE_WAITING;
 80067d4:	4b64      	ldr	r3, [pc, #400]	; (8006968 <WCID_STREAMING_Itf_Control+0x5d8>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]
      break;
 80067da:	e0f5      	b.n	80069c8 <WCID_STREAMING_Itf_Control+0x638>
    }     
  }
  else /* Device to host */
  {
    switch(state)
 80067dc:	4b62      	ldr	r3, [pc, #392]	; (8006968 <WCID_STREAMING_Itf_Control+0x5d8>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d003      	beq.n	80067ec <WCID_STREAMING_Itf_Control+0x45c>
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	f000 809a 	beq.w	800691e <WCID_STREAMING_Itf_Control+0x58e>
 80067ea:	e0f0      	b.n	80069ce <WCID_STREAMING_Itf_Control+0x63e>
    {
    case STATE_REQUEST_SET: /* Host needs size */
      
      if(cmd != CMD_SIZE_GET)
 80067ec:	79bb      	ldrb	r3, [r7, #6]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d002      	beq.n	80067f8 <WCID_STREAMING_Itf_Control+0x468>
        return -1; /* error*/       
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	e0eb      	b.n	80069d0 <WCID_STREAMING_Itf_Control+0x640>
      
      HSD_JSON_free(serialized);
 80067f8:	4b5c      	ldr	r3, [pc, #368]	; (800696c <WCID_STREAMING_Itf_Control+0x5dc>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fa fab5 	bl	8000d6c <HSD_JSON_free>
      
      switch(outCommand.request)
 8006802:	4b4b      	ldr	r3, [pc, #300]	; (8006930 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006804:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006808:	2b03      	cmp	r3, #3
 800680a:	d87c      	bhi.n	8006906 <WCID_STREAMING_Itf_Control+0x576>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <WCID_STREAMING_Itf_Control+0x484>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	08006825 	.word	0x08006825
 8006818:	0800683f 	.word	0x0800683f
 800681c:	08006857 	.word	0x08006857
 8006820:	080068af 	.word	0x080068af
      {
        COM_Device_t * myDevice;
        COM_DeviceDescriptor_t * myDeviceDescriptor;
      case COM_REQUEST_DEVICE:
        myDevice = COM_GetDevice();
 8006824:	f7fb fa66 	bl	8001cf4 <COM_GetDevice>
 8006828:	6138      	str	r0, [r7, #16]
        size = HSD_JSON_serialize_Device(myDevice, &serialized, SHORT_JSON);
 800682a:	2200      	movs	r2, #0
 800682c:	494f      	ldr	r1, [pc, #316]	; (800696c <WCID_STREAMING_Itf_Control+0x5dc>)
 800682e:	6938      	ldr	r0, [r7, #16]
 8006830:	f7fa faac 	bl	8000d8c <HSD_JSON_serialize_Device>
 8006834:	4603      	mov	r3, r0
 8006836:	b29a      	uxth	r2, r3
 8006838:	4b4d      	ldr	r3, [pc, #308]	; (8006970 <WCID_STREAMING_Itf_Control+0x5e0>)
 800683a:	801a      	strh	r2, [r3, #0]
        break;
 800683c:	e063      	b.n	8006906 <WCID_STREAMING_Itf_Control+0x576>
        
      case COM_REQUEST_DEVICE_INFO:
        myDeviceDescriptor = COM_GetDeviceDescriptor();
 800683e:	f7fb fa63 	bl	8001d08 <COM_GetDeviceDescriptor>
 8006842:	6178      	str	r0, [r7, #20]
        size = HSD_JSON_serialize_DeviceInfo(myDeviceDescriptor, &serialized);
 8006844:	4949      	ldr	r1, [pc, #292]	; (800696c <WCID_STREAMING_Itf_Control+0x5dc>)
 8006846:	6978      	ldr	r0, [r7, #20]
 8006848:	f7fa fab2 	bl	8000db0 <HSD_JSON_serialize_DeviceInfo>
 800684c:	4603      	mov	r3, r0
 800684e:	b29a      	uxth	r2, r3
 8006850:	4b47      	ldr	r3, [pc, #284]	; (8006970 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006852:	801a      	strh	r2, [r3, #0]
        break;       
 8006854:	e057      	b.n	8006906 <WCID_STREAMING_Itf_Control+0x576>
        
      case COM_REQUEST_DESCRIPTOR:
        if (outCommand.subSensorId < 0) /* Request is for Sensor, since subSensor was not present in the Json */
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006858:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800685c:	2b00      	cmp	r3, #0
 800685e:	da10      	bge.n	8006882 <WCID_STREAMING_Itf_Control+0x4f2>
        {
          COM_SensorDescriptor_t * mySensorDescriptor =  COM_GetSensorDescriptor(outCommand.sensorId);
 8006860:	4b33      	ldr	r3, [pc, #204]	; (8006930 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006862:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	4618      	mov	r0, r3
 800686a:	f7fb fa6b 	bl	8001d44 <COM_GetSensorDescriptor>
 800686e:	61b8      	str	r0, [r7, #24]
          size = HSD_JSON_serialize_SensorDescriptor(mySensorDescriptor, &serialized);           
 8006870:	493e      	ldr	r1, [pc, #248]	; (800696c <WCID_STREAMING_Itf_Control+0x5dc>)
 8006872:	69b8      	ldr	r0, [r7, #24]
 8006874:	f7fa faaa 	bl	8000dcc <HSD_JSON_serialize_SensorDescriptor>
 8006878:	4603      	mov	r3, r0
 800687a:	b29a      	uxth	r2, r3
 800687c:	4b3c      	ldr	r3, [pc, #240]	; (8006970 <WCID_STREAMING_Itf_Control+0x5e0>)
 800687e:	801a      	strh	r2, [r3, #0]
        else
        {      
          COM_SubSensorDescriptor_t * mySubSensorDescriptor =  COM_GetSubSensorDescriptor(outCommand.sensorId, outCommand.subSensorId);
          size = HSD_JSON_serialize_SubSensorDescriptor(mySubSensorDescriptor, &serialized);
        }       
        break;       
 8006880:	e041      	b.n	8006906 <WCID_STREAMING_Itf_Control+0x576>
          COM_SubSensorDescriptor_t * mySubSensorDescriptor =  COM_GetSubSensorDescriptor(outCommand.sensorId, outCommand.subSensorId);
 8006882:	4b2b      	ldr	r3, [pc, #172]	; (8006930 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006884:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	4a29      	ldr	r2, [pc, #164]	; (8006930 <WCID_STREAMING_Itf_Control+0x5a0>)
 800688c:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	4611      	mov	r1, r2
 8006894:	4618      	mov	r0, r3
 8006896:	f7fb fa7f 	bl	8001d98 <COM_GetSubSensorDescriptor>
 800689a:	61f8      	str	r0, [r7, #28]
          size = HSD_JSON_serialize_SubSensorDescriptor(mySubSensorDescriptor, &serialized);
 800689c:	4933      	ldr	r1, [pc, #204]	; (800696c <WCID_STREAMING_Itf_Control+0x5dc>)
 800689e:	69f8      	ldr	r0, [r7, #28]
 80068a0:	f7fa fab0 	bl	8000e04 <HSD_JSON_serialize_SubSensorDescriptor>
 80068a4:	4603      	mov	r3, r0
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	4b31      	ldr	r3, [pc, #196]	; (8006970 <WCID_STREAMING_Itf_Control+0x5e0>)
 80068aa:	801a      	strh	r2, [r3, #0]
        break;       
 80068ac:	e02b      	b.n	8006906 <WCID_STREAMING_Itf_Control+0x576>
      case COM_REQUEST_STATUS:
        if (outCommand.subSensorId < 0) /* Request is for Sensor, since subSensor was not present in the Json */
 80068ae:	4b20      	ldr	r3, [pc, #128]	; (8006930 <WCID_STREAMING_Itf_Control+0x5a0>)
 80068b0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	da10      	bge.n	80068da <WCID_STREAMING_Itf_Control+0x54a>
        {
          COM_SensorStatus_t * mySensorStatus =  COM_GetSensorStatus(outCommand.sensorId);
 80068b8:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <WCID_STREAMING_Itf_Control+0x5a0>)
 80068ba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fb fa53 	bl	8001d6c <COM_GetSensorStatus>
 80068c6:	6238      	str	r0, [r7, #32]
          size = HSD_JSON_serialize_SensorStatus(mySensorStatus, &serialized);
 80068c8:	4928      	ldr	r1, [pc, #160]	; (800696c <WCID_STREAMING_Itf_Control+0x5dc>)
 80068ca:	6a38      	ldr	r0, [r7, #32]
 80068cc:	f7fa fa8c 	bl	8000de8 <HSD_JSON_serialize_SensorStatus>
 80068d0:	4603      	mov	r3, r0
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	4b26      	ldr	r3, [pc, #152]	; (8006970 <WCID_STREAMING_Itf_Control+0x5e0>)
 80068d6:	801a      	strh	r2, [r3, #0]
        else
        {
          COM_SubSensorStatus_t * mySubSensorStatus = COM_GetSubSensorStatus(outCommand.sensorId, outCommand.subSensorId);           
          size = HSD_JSON_serialize_SubSensorStatus(mySubSensorStatus, &serialized);     
        }
        break;         
 80068d8:	e014      	b.n	8006904 <WCID_STREAMING_Itf_Control+0x574>
          COM_SubSensorStatus_t * mySubSensorStatus = COM_GetSubSensorStatus(outCommand.sensorId, outCommand.subSensorId);           
 80068da:	4b15      	ldr	r3, [pc, #84]	; (8006930 <WCID_STREAMING_Itf_Control+0x5a0>)
 80068dc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	4a13      	ldr	r2, [pc, #76]	; (8006930 <WCID_STREAMING_Itf_Control+0x5a0>)
 80068e4:	f992 2003 	ldrsb.w	r2, [r2, #3]
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	4611      	mov	r1, r2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fb fa71 	bl	8001dd4 <COM_GetSubSensorStatus>
 80068f2:	6278      	str	r0, [r7, #36]	; 0x24
          size = HSD_JSON_serialize_SubSensorStatus(mySubSensorStatus, &serialized);     
 80068f4:	491d      	ldr	r1, [pc, #116]	; (800696c <WCID_STREAMING_Itf_Control+0x5dc>)
 80068f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068f8:	f7fa fa92 	bl	8000e20 <HSD_JSON_serialize_SubSensorStatus>
 80068fc:	4603      	mov	r3, r0
 80068fe:	b29a      	uxth	r2, r3
 8006900:	4b1b      	ldr	r3, [pc, #108]	; (8006970 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006902:	801a      	strh	r2, [r3, #0]
        break;         
 8006904:	bf00      	nop
      }
      
      *(uint16_t *)pbuf = size;           
 8006906:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006908:	881a      	ldrh	r2, [r3, #0]
 800690a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690c:	801a      	strh	r2, [r3, #0]
      p = serialized;       
 800690e:	4b17      	ldr	r3, [pc, #92]	; (800696c <WCID_STREAMING_Itf_Control+0x5dc>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a18      	ldr	r2, [pc, #96]	; (8006974 <WCID_STREAMING_Itf_Control+0x5e4>)
 8006914:	6013      	str	r3, [r2, #0]
      
      state = STATE_SIZE_SENT;       
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <WCID_STREAMING_Itf_Control+0x5d8>)
 8006918:	2202      	movs	r2, #2
 800691a:	701a      	strb	r2, [r3, #0]
      break;
 800691c:	e057      	b.n	80069ce <WCID_STREAMING_Itf_Control+0x63e>
    case STATE_SIZE_SENT:
      
      if(cmd != CMD_DATA_GET)
 800691e:	79bb      	ldrb	r3, [r7, #6]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d002      	beq.n	800692a <WCID_STREAMING_Itf_Control+0x59a>
        return -1; /* error*/ 
 8006924:	f04f 33ff 	mov.w	r3, #4294967295
 8006928:	e052      	b.n	80069d0 <WCID_STREAMING_Itf_Control+0x640>
      
      for (i = 0; i < length; i++)
 800692a:	2300      	movs	r3, #0
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
 800692e:	e036      	b.n	800699e <WCID_STREAMING_Itf_Control+0x60e>
 8006930:	20000b10 	.word	0x20000b10
 8006934:	200163b4 	.word	0x200163b4
 8006938:	20000504 	.word	0x20000504
 800693c:	2001d044 	.word	0x2001d044
 8006940:	200163a4 	.word	0x200163a4
 8006944:	200166b8 	.word	0x200166b8
 8006948:	200166c8 	.word	0x200166c8
 800694c:	20016679 	.word	0x20016679
 8006950:	200166c0 	.word	0x200166c0
 8006954:	20016678 	.word	0x20016678
 8006958:	200166b9 	.word	0x200166b9
 800695c:	200166d1 	.word	0x200166d1
 8006960:	200166d0 	.word	0x200166d0
 8006964:	20000028 	.word	0x20000028
 8006968:	20000b04 	.word	0x20000b04
 800696c:	20000b08 	.word	0x20000b08
 8006970:	20000b06 	.word	0x20000b06
 8006974:	20000b0c 	.word	0x20000b0c
      {
        pbuf[i] = *p++;
 8006978:	4b17      	ldr	r3, [pc, #92]	; (80069d8 <WCID_STREAMING_Itf_Control+0x648>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	4916      	ldr	r1, [pc, #88]	; (80069d8 <WCID_STREAMING_Itf_Control+0x648>)
 8006980:	600a      	str	r2, [r1, #0]
 8006982:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006986:	440a      	add	r2, r1
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	7013      	strb	r3, [r2, #0]
        size--;          
 800698c:	4b13      	ldr	r3, [pc, #76]	; (80069dc <WCID_STREAMING_Itf_Control+0x64c>)
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	4b11      	ldr	r3, [pc, #68]	; (80069dc <WCID_STREAMING_Itf_Control+0x64c>)
 8006996:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < length; i++)
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	3301      	adds	r3, #1
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
 800699e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80069a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d3e7      	bcc.n	8006978 <WCID_STREAMING_Itf_Control+0x5e8>
      }
      if(size == 0)
 80069a8:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <WCID_STREAMING_Itf_Control+0x64c>)
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10d      	bne.n	80069cc <WCID_STREAMING_Itf_Control+0x63c>
      {
        HSD_JSON_free(serialized);
 80069b0:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <WCID_STREAMING_Itf_Control+0x650>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fa f9d9 	bl	8000d6c <HSD_JSON_free>
        serialized = NULL;
 80069ba:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <WCID_STREAMING_Itf_Control+0x650>)
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]
        state = STATE_WAITING;         
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <WCID_STREAMING_Itf_Control+0x654>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]
      }       
      break;    
 80069c6:	e001      	b.n	80069cc <WCID_STREAMING_Itf_Control+0x63c>
      break;
 80069c8:	bf00      	nop
 80069ca:	e000      	b.n	80069ce <WCID_STREAMING_Itf_Control+0x63e>
      break;    
 80069cc:	bf00      	nop
    }
  }
  
  return (USBD_OK);
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	373c      	adds	r7, #60	; 0x3c
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd90      	pop	{r4, r7, pc}
 80069d8:	20000b0c 	.word	0x20000b0c
 80069dc:	20000b06 	.word	0x20000b06
 80069e0:	20000b08 	.word	0x20000b08
 80069e4:	20000b04 	.word	0x20000b04

080069e8 <WCID_STREAMING_Itf_Receive>:
* @param  Buf: Buffer of data to be transmitted
* @param  Len: Number of data received (in bytes)
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_Receive(uint8_t* Buf, uint32_t Len)
{  
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  return (USBD_OK);
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <_Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
  while (1)
 8006a04:	e7fe      	b.n	8006a04 <_Error_Handler+0x4>

08006a06 <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8006a06:	b590      	push	{r4, r7, lr}
 8006a08:	b087      	sub	sp, #28
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	461a      	mov	r2, r3
 8006a12:	460b      	mov	r3, r1
 8006a14:	72fb      	strb	r3, [r7, #11]
 8006a16:	4613      	mov	r3, r2
 8006a18:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685c      	ldr	r4, [r3, #4]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6898      	ldr	r0, [r3, #8]
 8006a22:	893b      	ldrh	r3, [r7, #8]
 8006a24:	7af9      	ldrb	r1, [r7, #11]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	47a0      	blx	r4
 8006a2a:	6178      	str	r0, [r7, #20]
  return ret;
 8006a2c:	697b      	ldr	r3, [r7, #20]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd90      	pop	{r4, r7, pc}

08006a36 <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 8006a36:	b590      	push	{r4, r7, lr}
 8006a38:	b087      	sub	sp, #28
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	461a      	mov	r2, r3
 8006a42:	460b      	mov	r3, r1
 8006a44:	72fb      	strb	r3, [r7, #11]
 8006a46:	4613      	mov	r3, r2
 8006a48:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681c      	ldr	r4, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6898      	ldr	r0, [r3, #8]
 8006a52:	893b      	ldrh	r3, [r7, #8]
 8006a54:	7af9      	ldrb	r1, [r7, #11]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	47a0      	blx	r4
 8006a5a:	6178      	str	r0, [r7, #20]
  return ret;
 8006a5c:	697b      	ldr	r3, [r7, #20]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd90      	pop	{r4, r7, pc}

08006a66 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006a72:	f107 0208 	add.w	r2, r7, #8
 8006a76:	2301      	movs	r3, #1
 8006a78:	2110      	movs	r1, #16
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff ffc3 	bl	8006a06 <iis3dwb_read_reg>
 8006a80:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10f      	bne.n	8006aa8 <iis3dwb_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	7a3b      	ldrb	r3, [r7, #8]
 8006a92:	f362 0383 	bfi	r3, r2, #2, #2
 8006a96:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8006a98:	f107 0208 	add.w	r2, r7, #8
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	2110      	movs	r1, #16
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ffc8 	bl	8006a36 <iis3dwb_write_reg>
 8006aa6:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	460b      	mov	r3, r1
 8006abc:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8006abe:	f107 0208 	add.w	r2, r7, #8
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	210b      	movs	r1, #11
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff ff9d 	bl	8006a06 <iis3dwb_read_reg>
 8006acc:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10f      	bne.n	8006af4 <iis3dwb_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	7a3b      	ldrb	r3, [r7, #8]
 8006ade:	f362 13c7 	bfi	r3, r2, #7, #1
 8006ae2:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8006ae4:	f107 0208 	add.w	r2, r7, #8
 8006ae8:	2301      	movs	r3, #1
 8006aea:	210b      	movs	r1, #11
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff ffa2 	bl	8006a36 <iis3dwb_write_reg>
 8006af2:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
 8006af4:	68fb      	ldr	r3, [r7, #12]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 8006b08:	2301      	movs	r3, #1
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	210f      	movs	r1, #15
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff ff79 	bl	8006a06 <iis3dwb_read_reg>
 8006b14:	60f8      	str	r0, [r7, #12]
  return ret;
 8006b16:	68fb      	ldr	r3, [r7, #12]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8006b2c:	f107 0208 	add.w	r2, r7, #8
 8006b30:	2301      	movs	r3, #1
 8006b32:	2112      	movs	r1, #18
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff ff66 	bl	8006a06 <iis3dwb_read_reg>
 8006b3a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10f      	bne.n	8006b62 <iis3dwb_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	7a3b      	ldrb	r3, [r7, #8]
 8006b4c:	f362 0300 	bfi	r3, r2, #0, #1
 8006b50:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8006b52:	f107 0208 	add.w	r2, r7, #8
 8006b56:	2301      	movs	r3, #1
 8006b58:	2112      	movs	r1, #18
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff ff6b 	bl	8006a36 <iis3dwb_write_reg>
 8006b60:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006b62:	68fb      	ldr	r3, [r7, #12]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006b78:	f107 0210 	add.w	r2, r7, #16
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	2110      	movs	r1, #16
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff ff40 	bl	8006a06 <iis3dwb_read_reg>
 8006b86:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d111      	bne.n	8006bb2 <iis3dwb_xl_hp_path_on_out_set+0x46>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	09db      	lsrs	r3, r3, #7
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	7c3b      	ldrb	r3, [r7, #16]
 8006b9c:	f362 0341 	bfi	r3, r2, #1, #1
 8006ba0:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006ba2:	f107 0210 	add.w	r2, r7, #16
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	2110      	movs	r1, #16
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff ff43 	bl	8006a36 <iis3dwb_write_reg>
 8006bb0:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d107      	bne.n	8006bc8 <iis3dwb_xl_hp_path_on_out_set+0x5c>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8006bb8:	f107 020c 	add.w	r2, r7, #12
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	2117      	movs	r1, #23
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff ff20 	bl	8006a06 <iis3dwb_read_reg>
 8006bc6:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d121      	bne.n	8006c12 <iis3dwb_xl_hp_path_on_out_set+0xa6>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	091b      	lsrs	r3, r3, #4
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	7b3b      	ldrb	r3, [r7, #12]
 8006bda:	f362 0382 	bfi	r3, r2, #2, #1
 8006bde:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	7b3b      	ldrb	r3, [r7, #12]
 8006bec:	f362 1304 	bfi	r3, r2, #4, #1
 8006bf0:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	7b3b      	ldrb	r3, [r7, #12]
 8006bfc:	f362 1347 	bfi	r3, r2, #5, #3
 8006c00:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8006c02:	f107 020c 	add.w	r2, r7, #12
 8006c06:	2301      	movs	r3, #1
 8006c08:	2117      	movs	r1, #23
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff ff13 	bl	8006a36 <iis3dwb_write_reg>
 8006c10:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8006c12:	697b      	ldr	r3, [r7, #20]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006c28:	f107 0208 	add.w	r2, r7, #8
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	2113      	movs	r1, #19
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff fee8 	bl	8006a06 <iis3dwb_read_reg>
 8006c36:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10f      	bne.n	8006c5e <iis3dwb_i2c_interface_set+0x42>
    ctrl4_c.i2c_disable= (uint8_t)val;
 8006c3e:	78fb      	ldrb	r3, [r7, #3]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	7a3b      	ldrb	r3, [r7, #8]
 8006c48:	f362 0382 	bfi	r3, r2, #2, #1
 8006c4c:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006c4e:	f107 0208 	add.w	r2, r7, #8
 8006c52:	2301      	movs	r3, #1
 8006c54:	2113      	movs	r1, #19
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff feed 	bl	8006a36 <iis3dwb_write_reg>
 8006c5c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
 8006c72:	683a      	ldr	r2, [r7, #0]
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
 8006c74:	2301      	movs	r3, #1
 8006c76:	210d      	movs	r1, #13
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff fedc 	bl	8006a36 <iis3dwb_write_reg>
 8006c7e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d107      	bne.n	8006c96 <iis3dwb_pin_int1_route_set+0x2e>
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	1c5a      	adds	r2, r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	215e      	movs	r1, #94	; 0x5e
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fed1 	bl	8006a36 <iis3dwb_write_reg>
 8006c94:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006c96:	68fb      	ldr	r3, [r7, #12]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8006cac:	f107 020c 	add.w	r2, r7, #12
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	2108      	movs	r1, #8
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff fea6 	bl	8006a06 <iis3dwb_read_reg>
 8006cba:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10a      	bne.n	8006cd8 <iis3dwb_fifo_watermark_set+0x38>
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 8006cc2:	887b      	ldrh	r3, [r7, #2]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 8006cc8:	f107 0210 	add.w	r2, r7, #16
 8006ccc:	2301      	movs	r3, #1
 8006cce:	2107      	movs	r1, #7
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff feb0 	bl	8006a36 <iis3dwb_write_reg>
 8006cd6:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d111      	bne.n	8006d02 <iis3dwb_fifo_watermark_set+0x62>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 8006cde:	887b      	ldrh	r3, [r7, #2]
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	7b3b      	ldrb	r3, [r7, #12]
 8006cec:	f362 0300 	bfi	r3, r2, #0, #1
 8006cf0:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8006cf2:	f107 020c 	add.w	r2, r7, #12
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	2108      	movs	r1, #8
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff fe9b 	bl	8006a36 <iis3dwb_write_reg>
 8006d00:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
 8006d02:	697b      	ldr	r3, [r7, #20]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8006d18:	f107 0208 	add.w	r2, r7, #8
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	2109      	movs	r1, #9
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff fe70 	bl	8006a06 <iis3dwb_read_reg>
 8006d26:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10f      	bne.n	8006d4e <iis3dwb_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	7a3b      	ldrb	r3, [r7, #8]
 8006d38:	f362 0303 	bfi	r3, r2, #0, #4
 8006d3c:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8006d3e:	f107 0208 	add.w	r2, r7, #8
 8006d42:	2301      	movs	r3, #1
 8006d44:	2109      	movs	r1, #9
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff fe75 	bl	8006a36 <iis3dwb_write_reg>
 8006d4c:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8006d64:	f107 0208 	add.w	r2, r7, #8
 8006d68:	2301      	movs	r3, #1
 8006d6a:	210a      	movs	r1, #10
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fe4a 	bl	8006a06 <iis3dwb_read_reg>
 8006d72:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10f      	bne.n	8006d9a <iis3dwb_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	7a3b      	ldrb	r3, [r7, #8]
 8006d84:	f362 0302 	bfi	r3, r2, #0, #3
 8006d88:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8006d8a:	f107 0208 	add.w	r2, r7, #8
 8006d8e:	2301      	movs	r3, #1
 8006d90:	210a      	movs	r1, #10
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff fe4f 	bl	8006a36 <iis3dwb_write_reg>
 8006d98:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	71fb      	strb	r3, [r7, #7]
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 8006dae:	4b31      	ldr	r3, [pc, #196]	; (8006e74 <BSP_ADC1_Initialization+0xd0>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d152      	bne.n	8006e5c <BSP_ADC1_Initialization+0xb8>
   
    /**Common config */
    ADC1_Handle.Instance = ADC1;
 8006db6:	4b30      	ldr	r3, [pc, #192]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006db8:	4a30      	ldr	r2, [pc, #192]	; (8006e7c <BSP_ADC1_Initialization+0xd8>)
 8006dba:	601a      	str	r2, [r3, #0]
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006dbc:	4b2e      	ldr	r3, [pc, #184]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	605a      	str	r2, [r3, #4]
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 8006dc2:	4b2d      	ldr	r3, [pc, #180]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	609a      	str	r2, [r3, #8]
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006dc8:	4b2b      	ldr	r3, [pc, #172]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	60da      	str	r2, [r3, #12]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 8006dce:	4b2a      	ldr	r3, [pc, #168]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	611a      	str	r2, [r3, #16]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006dd4:	4b28      	ldr	r3, [pc, #160]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	615a      	str	r2, [r3, #20]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 8006dda:	4b27      	ldr	r3, [pc, #156]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	761a      	strb	r2, [r3, #24]
    ADC1_Handle.Init.ContinuousConvMode = ENABLE;
 8006de0:	4b25      	ldr	r3, [pc, #148]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	765a      	strb	r2, [r3, #25]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 8006de6:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	61da      	str	r2, [r3, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 8006dec:	4b22      	ldr	r3, [pc, #136]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 8006df2:	4b21      	ldr	r3, [pc, #132]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2020 	strb.w	r2, [r3, #32]
    ADC1_Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006dfa:	4b1f      	ldr	r3, [pc, #124]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006e00:	4b1d      	ldr	r3, [pc, #116]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 8006e06:	4b1c      	ldr	r3, [pc, #112]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006e0e:	4b1a      	ldr	r3, [pc, #104]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006e10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e14:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Oversampling enabled */
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 8006e16:	4b18      	ldr	r3, [pc, #96]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    
    ADC1_Handle.Init.Oversampling.RightBitShift         = ADC_RIGHTBITSHIFT_NONE;         /* Right shift of the oversampled summation */
 8006e1e:	4b16      	ldr	r3, [pc, #88]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 8006e24:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	645a      	str	r2, [r3, #68]	; 0x44
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 8006e2a:	4b13      	ldr	r3, [pc, #76]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	649a      	str	r2, [r3, #72]	; 0x48
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8006e30:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006e32:	2204      	movs	r2, #4
 8006e34:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8006e36:	4810      	ldr	r0, [pc, #64]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006e38:	f000 ff34 	bl	8007ca4 <HAL_ADC_Init>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <BSP_ADC1_Initialization+0xa4>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8006e42:	f06f 0303 	mvn.w	r3, #3
 8006e46:	e011      	b.n	8006e6c <BSP_ADC1_Initialization+0xc8>
    }

    /* ### Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 8006e48:	217f      	movs	r1, #127	; 0x7f
 8006e4a:	480b      	ldr	r0, [pc, #44]	; (8006e78 <BSP_ADC1_Initialization+0xd4>)
 8006e4c:	f001 fc16 	bl	800867c <HAL_ADCEx_Calibration_Start>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <BSP_ADC1_Initialization+0xb8>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8006e56:	f06f 0303 	mvn.w	r3, #3
 8006e5a:	e007      	b.n	8006e6c <BSP_ADC1_Initialization+0xc8>
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <BSP_ADC1_Initialization+0xd0>)
 8006e5e:	781a      	ldrb	r2, [r3, #0]
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <BSP_ADC1_Initialization+0xd0>)
 8006e68:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	20000d0c 	.word	0x20000d0c
 8006e78:	2001d068 	.word	0x2001d068
 8006e7c:	50040000 	.word	0x50040000

08006e80 <HAL_ADC_MspInit>:
* @brief  Initialize the ADC MSP.
* @param  hDfsdmFilter ADC handle
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <HAL_ADC_MspInit+0x40>)
 8006e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8c:	4a0c      	ldr	r2, [pc, #48]	; (8006ec0 <HAL_ADC_MspInit+0x40>)
 8006e8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <HAL_ADC_MspInit+0x40>)
 8006e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <HAL_ADC_MspInit+0x40>)
 8006ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006eaa:	4a05      	ldr	r2, [pc, #20]	; (8006ec0 <HAL_ADC_MspInit+0x40>)
 8006eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	40021000 	.word	0x40021000

08006ec4 <BSP_PB_PWR_Init>:
* @brief  Initialize the Power button PWR.
* @param  None
* @retval None
*/
void BSP_PB_PWR_Init(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8006eca:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <BSP_PB_PWR_Init+0x54>)
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	4a12      	ldr	r2, [pc, #72]	; (8006f18 <BSP_PB_PWR_Init+0x54>)
 8006ed0:	f043 0308 	orr.w	r3, r3, #8
 8006ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ed6:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <BSP_PB_PWR_Init+0x54>)
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	683b      	ldr	r3, [r7, #0]
  
  /* Configure Button pin as input with External interrupt */
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 8006ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ee6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006eec:	2302      	movs	r3, #2
 8006eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <BSP_PB_PWR_Init+0x58>)
 8006ef2:	60bb      	str	r3, [r7, #8]
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8006ef4:	1d3b      	adds	r3, r7, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4809      	ldr	r0, [pc, #36]	; (8006f20 <BSP_PB_PWR_Init+0x5c>)
 8006efa:	f002 fc15 	bl	8009728 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 8006efe:	2200      	movs	r2, #0
 8006f00:	210f      	movs	r1, #15
 8006f02:	2028      	movs	r0, #40	; 0x28
 8006f04:	f002 f959 	bl	80091ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 8006f08:	2028      	movs	r0, #40	; 0x28
 8006f0a:	f002 f972 	bl	80091f2 <HAL_NVIC_EnableIRQ>
  
}
 8006f0e:	bf00      	nop
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	10110000 	.word	0x10110000
 8006f20:	48000c00 	.word	0x48000c00

08006f24 <BSP_Enable_DCDC2>:
* @brief  Initialize the DCDC MSP.
* @param  None
* @retval None
*/
void BSP_Enable_DCDC2(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f2a:	4b12      	ldr	r3, [pc, #72]	; (8006f74 <BSP_Enable_DCDC2+0x50>)
 8006f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2e:	4a11      	ldr	r2, [pc, #68]	; (8006f74 <BSP_Enable_DCDC2+0x50>)
 8006f30:	f043 0310 	orr.w	r3, r3, #16
 8006f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <BSP_Enable_DCDC2+0x50>)
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8006f50:	2302      	movs	r3, #2
 8006f52:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f54:	1d3b      	adds	r3, r7, #4
 8006f56:	4619      	mov	r1, r3
 8006f58:	4807      	ldr	r0, [pc, #28]	; (8006f78 <BSP_Enable_DCDC2+0x54>)
 8006f5a:	f002 fbe5 	bl	8009728 <HAL_GPIO_Init>
  
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f64:	4804      	ldr	r0, [pc, #16]	; (8006f78 <BSP_Enable_DCDC2+0x54>)
 8006f66:	f002 fd89 	bl	8009a7c <HAL_GPIO_WritePin>
}
 8006f6a:	bf00      	nop
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	40021000 	.word	0x40021000
 8006f78:	48001000 	.word	0x48001000

08006f7c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	460a      	mov	r2, r1
 8006f86:	71fb      	strb	r3, [r7, #7]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8006f8c:	4b21      	ldr	r3, [pc, #132]	; (8007014 <BSP_PB_Init+0x98>)
 8006f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f90:	4a20      	ldr	r2, [pc, #128]	; (8007014 <BSP_PB_Init+0x98>)
 8006f92:	f043 0310 	orr.w	r3, r3, #16
 8006f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f98:	4b1e      	ldr	r3, [pc, #120]	; (8007014 <BSP_PB_Init+0x98>)
 8006f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8006fa4:	79bb      	ldrb	r3, [r7, #6]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d112      	bne.n	8006fd0 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8006faa:	2301      	movs	r3, #1
 8006fac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	4a16      	ldr	r2, [pc, #88]	; (8007018 <BSP_PB_Init+0x9c>)
 8006fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc2:	f107 020c 	add.w	r2, r7, #12
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f002 fbad 	bl	8009728 <HAL_GPIO_Init>
 8006fce:	e01b      	b.n	8007008 <BSP_PB_Init+0x8c>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006fd8:	4b10      	ldr	r3, [pc, #64]	; (800701c <BSP_PB_Init+0xa0>)
 8006fda:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	4a0e      	ldr	r2, [pc, #56]	; (8007018 <BSP_PB_Init+0x9c>)
 8006fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe4:	f107 020c 	add.w	r2, r7, #12
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f002 fb9c 	bl	8009728 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8006ff0:	2306      	movs	r3, #6
 8006ff2:	b25b      	sxtb	r3, r3
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	210f      	movs	r1, #15
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f002 f8de 	bl	80091ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8006ffe:	2306      	movs	r3, #6
 8007000:	b25b      	sxtb	r3, r3
 8007002:	4618      	mov	r0, r3
 8007004:	f002 f8f5 	bl	80091f2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;  
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3720      	adds	r7, #32
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	40021000 	.word	0x40021000
 8007018:	2000009c 	.word	0x2000009c
 800701c:	10210000 	.word	0x10210000

08007020 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08a      	sub	sp, #40	; 0x28
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10c      	bne.n	800704a <BSP_LED_Init+0x2a>
 8007030:	4b19      	ldr	r3, [pc, #100]	; (8007098 <BSP_LED_Init+0x78>)
 8007032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007034:	4a18      	ldr	r2, [pc, #96]	; (8007098 <BSP_LED_Init+0x78>)
 8007036:	f043 0310 	orr.w	r3, r3, #16
 800703a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800703c:	4b16      	ldr	r3, [pc, #88]	; (8007098 <BSP_LED_Init+0x78>)
 800703e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	e00b      	b.n	8007062 <BSP_LED_Init+0x42>
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <BSP_LED_Init+0x78>)
 800704c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704e:	4a12      	ldr	r2, [pc, #72]	; (8007098 <BSP_LED_Init+0x78>)
 8007050:	f043 0308 	orr.w	r3, r3, #8
 8007054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007056:	4b10      	ldr	r3, [pc, #64]	; (8007098 <BSP_LED_Init+0x78>)
 8007058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	4a0d      	ldr	r2, [pc, #52]	; (800709c <BSP_LED_Init+0x7c>)
 8007066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800706a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800706c:	2301      	movs	r3, #1
 800706e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007070:	2300      	movs	r3, #0
 8007072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007074:	2302      	movs	r3, #2
 8007076:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	4a09      	ldr	r2, [pc, #36]	; (80070a0 <BSP_LED_Init+0x80>)
 800707c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007080:	f107 0214 	add.w	r2, r7, #20
 8007084:	4611      	mov	r1, r2
 8007086:	4618      	mov	r0, r3
 8007088:	f002 fb4e 	bl	8009728 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3728      	adds	r7, #40	; 0x28
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	40021000 	.word	0x40021000
 800709c:	08023b80 	.word	0x08023b80
 80070a0:	200000a0 	.word	0x200000a0

080070a4 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	4a07      	ldr	r2, [pc, #28]	; (80070d0 <BSP_LED_On+0x2c>)
 80070b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	4a06      	ldr	r2, [pc, #24]	; (80070d4 <BSP_LED_On+0x30>)
 80070ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070be:	2201      	movs	r2, #1
 80070c0:	4619      	mov	r1, r3
 80070c2:	f002 fcdb 	bl	8009a7c <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	200000a0 	.word	0x200000a0
 80070d4:	08023b80 	.word	0x08023b80

080070d8 <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	4a07      	ldr	r2, [pc, #28]	; (8007104 <BSP_LED_Off+0x2c>)
 80070e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	4a06      	ldr	r2, [pc, #24]	; (8007108 <BSP_LED_Off+0x30>)
 80070ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f2:	2200      	movs	r2, #0
 80070f4:	4619      	mov	r1, r3
 80070f6:	f002 fcc1 	bl	8009a7c <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	200000a0 	.word	0x200000a0
 8007108:	08023b80 	.word	0x08023b80

0800710c <BSP_BC_Init>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BSP_BC_Init(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  BC_InitCommon();
 8007110:	f000 f84a 	bl	80071a8 <BC_InitCommon>
  /* Init the related GPIOs */
  BC_IO_Init();
 8007114:	f000 f84e 	bl	80071b4 <BC_IO_Init>
}
 8007118:	bf00      	nop
 800711a:	bd80      	pop	{r7, pc}

0800711c <BSP_BC_CmdSend>:
  * @param stbc02_SwCmd The command to be sent
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	71fb      	strb	r3, [r7, #7]
  uint32_t tk = STBC02_GetTick();
 8007126:	f000 fc7d 	bl	8007a24 <HAL_GetTick>
 800712a:	60f8      	str	r0, [r7, #12]
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 800712c:	4a0f      	ldr	r2, [pc, #60]	; (800716c <BSP_BC_CmdSend+0x50>)
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	7013      	strb	r3, [r2, #0]
  stbc02_SwState = start;
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <BSP_BC_CmdSend+0x54>)
 8007134:	2201      	movs	r2, #1
 8007136:	701a      	strb	r2, [r3, #0]
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8007138:	480e      	ldr	r0, [pc, #56]	; (8007174 <BSP_BC_CmdSend+0x58>)
 800713a:	f009 fbb7 	bl	80108ac <HAL_TIM_Base_Start_IT>
    
  while(stbc02_SwState != idle)
 800713e:	e008      	b.n	8007152 <BSP_BC_CmdSend+0x36>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 8007140:	f000 fc70 	bl	8007a24 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b0a      	cmp	r3, #10
 800714c:	d901      	bls.n	8007152 <BSP_BC_CmdSend+0x36>
    {
      return 1;
 800714e:	2301      	movs	r3, #1
 8007150:	e007      	b.n	8007162 <BSP_BC_CmdSend+0x46>
  while(stbc02_SwState != idle)
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <BSP_BC_CmdSend+0x54>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f2      	bne.n	8007140 <BSP_BC_CmdSend+0x24>
    }
  }
    /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 800715a:	4806      	ldr	r0, [pc, #24]	; (8007174 <BSP_BC_CmdSend+0x58>)
 800715c:	f009 fbd0 	bl	8010900 <HAL_TIM_Base_Stop_IT>
  
  return 0;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000d0d 	.word	0x20000d0d
 8007170:	20000d0e 	.word	0x20000d0e
 8007174:	2001d0fc 	.word	0x2001d0fc

08007178 <BSP_BC_ChgPinHasToggled>:
  * @brief Call the function for measuring the toggling frequency of the charging pin of the STBC02
  * @note Must be called when the charging pin of the STBC02 has toggled
  * @retval None
  */
void BSP_BC_ChgPinHasToggled(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  BC_ChgPinFreqGet();
 800717c:	f000 f908 	bl	8007390 <BC_ChgPinFreqGet>
  stbc02_ChgPinToggledTime = STBC02_GetTick();
 8007180:	f000 fc50 	bl	8007a24 <HAL_GetTick>
 8007184:	4603      	mov	r3, r0
 8007186:	4a02      	ldr	r2, [pc, #8]	; (8007190 <BSP_BC_ChgPinHasToggled+0x18>)
 8007188:	6013      	str	r3, [r2, #0]
}
 800718a:	bf00      	nop
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000d10 	.word	0x20000d10

08007194 <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
   /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8007198:	2002      	movs	r0, #2
 800719a:	f7ff fe03 	bl	8006da4 <BSP_ADC1_Initialization>
  /* Configure the Injection Channel for Voltage ADC convertion */
  (void)Channel_ADC1_Init();
 800719e:	f000 f9ed 	bl	800757c <Channel_ADC1_Init>
  return 0;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <BC_InitCommon>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BC_InitCommon(void)
{  
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* Init the time base */
  BC_TIMx_Init();
 80071ac:	f000 f938 	bl	8007420 <BC_TIMx_Init>
}
 80071b0:	bf00      	nop
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <BC_IO_Init>:
/**
  * @brief  Initializes the GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_Init(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  BC_IO_SW_SEL_Init();
 80071b8:	f000 f802 	bl	80071c0 <BC_IO_SW_SEL_Init>
}
 80071bc:	bf00      	nop
 80071be:	bd80      	pop	{r7, pc}

080071c0 <BC_IO_SW_SEL_Init>:
/**
  * @brief  Initializes the SW_SEL GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_SW_SEL_Init(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 80071c6:	4b11      	ldr	r3, [pc, #68]	; (800720c <BC_IO_SW_SEL_Init+0x4c>)
 80071c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ca:	4a10      	ldr	r2, [pc, #64]	; (800720c <BC_IO_SW_SEL_Init+0x4c>)
 80071cc:	f043 0320 	orr.w	r3, r3, #32
 80071d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071d2:	4b0e      	ldr	r3, [pc, #56]	; (800720c <BC_IO_SW_SEL_Init+0x4c>)
 80071d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 80071de:	2340      	movs	r3, #64	; 0x40
 80071e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071e2:	2301      	movs	r3, #1
 80071e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071ea:	2302      	movs	r3, #2
 80071ec:	613b      	str	r3, [r7, #16]

  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 80071ee:	2200      	movs	r2, #0
 80071f0:	2140      	movs	r1, #64	; 0x40
 80071f2:	4807      	ldr	r0, [pc, #28]	; (8007210 <BC_IO_SW_SEL_Init+0x50>)
 80071f4:	f002 fc42 	bl	8009a7c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 80071f8:	1d3b      	adds	r3, r7, #4
 80071fa:	4619      	mov	r1, r3
 80071fc:	4804      	ldr	r0, [pc, #16]	; (8007210 <BC_IO_SW_SEL_Init+0x50>)
 80071fe:	f002 fa93 	bl	8009728 <HAL_GPIO_Init>
}
 8007202:	bf00      	nop
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	40021000 	.word	0x40021000
 8007210:	48001400 	.word	0x48001400

08007214 <BC_CmdMng>:
  * @brief Single wire command manager for the STBC02
  * @note This function have to be called every 5 us
  * @retval None
  */
void BC_CmdMng(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  static uint16_t TIMx_Pulse = 0;                           //! Actual timer pulse number
  static uint16_t TIMx_PulseTCS = 0;                        //! Timer pulse number to change state
  static stbc02_SwState_TypeDef stbc02_sw_state_prv = idle; //! Previous state
  static uint8_t CmdPulse = 0;                              //! Cmd pulse number

  TIMx_Pulse++;
 8007218:	4b56      	ldr	r3, [pc, #344]	; (8007374 <BC_CmdMng+0x160>)
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	4b54      	ldr	r3, [pc, #336]	; (8007374 <BC_CmdMng+0x160>)
 8007222:	801a      	strh	r2, [r3, #0]
  switch (stbc02_SwState)
 8007224:	4b54      	ldr	r3, [pc, #336]	; (8007378 <BC_CmdMng+0x164>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b06      	cmp	r3, #6
 800722a:	f200 809e 	bhi.w	800736a <BC_CmdMng+0x156>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <BC_CmdMng+0x20>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	0800736b 	.word	0x0800736b
 8007238:	08007251 	.word	0x08007251
 800723c:	08007275 	.word	0x08007275
 8007240:	08007299 	.word	0x08007299
 8007244:	080072bd 	.word	0x080072bd
 8007248:	080072e1 	.word	0x080072e1
 800724c:	08007305 	.word	0x08007305
  {
  case idle:
    break;
  case start:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8007250:	2140      	movs	r1, #64	; 0x40
 8007252:	484a      	ldr	r0, [pc, #296]	; (800737c <BC_CmdMng+0x168>)
 8007254:	f002 fc2a 	bl	8009aac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8007258:	4b46      	ldr	r3, [pc, #280]	; (8007374 <BC_CmdMng+0x160>)
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	3346      	adds	r3, #70	; 0x46
 800725e:	b29a      	uxth	r2, r3
 8007260:	4b47      	ldr	r3, [pc, #284]	; (8007380 <BC_CmdMng+0x16c>)
 8007262:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8007264:	4b44      	ldr	r3, [pc, #272]	; (8007378 <BC_CmdMng+0x164>)
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	4b46      	ldr	r3, [pc, #280]	; (8007384 <BC_CmdMng+0x170>)
 800726a:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 800726c:	4b42      	ldr	r3, [pc, #264]	; (8007378 <BC_CmdMng+0x164>)
 800726e:	2206      	movs	r2, #6
 8007270:	701a      	strb	r2, [r3, #0]
    break;
 8007272:	e07d      	b.n	8007370 <BC_CmdMng+0x15c>
  case pulse_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8007274:	2140      	movs	r1, #64	; 0x40
 8007276:	4841      	ldr	r0, [pc, #260]	; (800737c <BC_CmdMng+0x168>)
 8007278:	f002 fc18 	bl	8009aac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 800727c:	4b3d      	ldr	r3, [pc, #244]	; (8007374 <BC_CmdMng+0x160>)
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	3314      	adds	r3, #20
 8007282:	b29a      	uxth	r2, r3
 8007284:	4b3e      	ldr	r3, [pc, #248]	; (8007380 <BC_CmdMng+0x16c>)
 8007286:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8007288:	4b3b      	ldr	r3, [pc, #236]	; (8007378 <BC_CmdMng+0x164>)
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	4b3d      	ldr	r3, [pc, #244]	; (8007384 <BC_CmdMng+0x170>)
 800728e:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8007290:	4b39      	ldr	r3, [pc, #228]	; (8007378 <BC_CmdMng+0x164>)
 8007292:	2206      	movs	r2, #6
 8007294:	701a      	strb	r2, [r3, #0]
    break;
 8007296:	e06b      	b.n	8007370 <BC_CmdMng+0x15c>
  case pulse_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8007298:	2140      	movs	r1, #64	; 0x40
 800729a:	4838      	ldr	r0, [pc, #224]	; (800737c <BC_CmdMng+0x168>)
 800729c:	f002 fc06 	bl	8009aac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 80072a0:	4b34      	ldr	r3, [pc, #208]	; (8007374 <BC_CmdMng+0x160>)
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	3314      	adds	r3, #20
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	4b35      	ldr	r3, [pc, #212]	; (8007380 <BC_CmdMng+0x16c>)
 80072aa:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80072ac:	4b32      	ldr	r3, [pc, #200]	; (8007378 <BC_CmdMng+0x164>)
 80072ae:	781a      	ldrb	r2, [r3, #0]
 80072b0:	4b34      	ldr	r3, [pc, #208]	; (8007384 <BC_CmdMng+0x170>)
 80072b2:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80072b4:	4b30      	ldr	r3, [pc, #192]	; (8007378 <BC_CmdMng+0x164>)
 80072b6:	2206      	movs	r2, #6
 80072b8:	701a      	strb	r2, [r3, #0]
    break;
 80072ba:	e059      	b.n	8007370 <BC_CmdMng+0x15c>
  case stop_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80072bc:	2140      	movs	r1, #64	; 0x40
 80072be:	482f      	ldr	r0, [pc, #188]	; (800737c <BC_CmdMng+0x168>)
 80072c0:	f002 fbf4 	bl	8009aac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 80072c4:	4b2b      	ldr	r3, [pc, #172]	; (8007374 <BC_CmdMng+0x160>)
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	3314      	adds	r3, #20
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <BC_CmdMng+0x16c>)
 80072ce:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80072d0:	4b29      	ldr	r3, [pc, #164]	; (8007378 <BC_CmdMng+0x164>)
 80072d2:	781a      	ldrb	r2, [r3, #0]
 80072d4:	4b2b      	ldr	r3, [pc, #172]	; (8007384 <BC_CmdMng+0x170>)
 80072d6:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80072d8:	4b27      	ldr	r3, [pc, #156]	; (8007378 <BC_CmdMng+0x164>)
 80072da:	2206      	movs	r2, #6
 80072dc:	701a      	strb	r2, [r3, #0]
    break;
 80072de:	e047      	b.n	8007370 <BC_CmdMng+0x15c>
  case stop_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	4826      	ldr	r0, [pc, #152]	; (800737c <BC_CmdMng+0x168>)
 80072e4:	f002 fbe2 	bl	8009aac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 80072e8:	4b22      	ldr	r3, [pc, #136]	; (8007374 <BC_CmdMng+0x160>)
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	3364      	adds	r3, #100	; 0x64
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	4b23      	ldr	r3, [pc, #140]	; (8007380 <BC_CmdMng+0x16c>)
 80072f2:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80072f4:	4b20      	ldr	r3, [pc, #128]	; (8007378 <BC_CmdMng+0x164>)
 80072f6:	781a      	ldrb	r2, [r3, #0]
 80072f8:	4b22      	ldr	r3, [pc, #136]	; (8007384 <BC_CmdMng+0x170>)
 80072fa:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80072fc:	4b1e      	ldr	r3, [pc, #120]	; (8007378 <BC_CmdMng+0x164>)
 80072fe:	2206      	movs	r2, #6
 8007300:	701a      	strb	r2, [r3, #0]
    break;
 8007302:	e035      	b.n	8007370 <BC_CmdMng+0x15c>
  case wait:
    if ( TIMx_Pulse > TIMx_PulseTCS )
 8007304:	4b1b      	ldr	r3, [pc, #108]	; (8007374 <BC_CmdMng+0x160>)
 8007306:	881a      	ldrh	r2, [r3, #0]
 8007308:	4b1d      	ldr	r3, [pc, #116]	; (8007380 <BC_CmdMng+0x16c>)
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d92e      	bls.n	800736e <BC_CmdMng+0x15a>
    {
      if ( stbc02_sw_state_prv == stop_h )
 8007310:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <BC_CmdMng+0x170>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b05      	cmp	r3, #5
 8007316:	d10b      	bne.n	8007330 <BC_CmdMng+0x11c>
      {
        CmdPulse = 0;
 8007318:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <BC_CmdMng+0x174>)
 800731a:	2200      	movs	r2, #0
 800731c:	701a      	strb	r2, [r3, #0]
        stbc02_SwState = idle;
 800731e:	4b16      	ldr	r3, [pc, #88]	; (8007378 <BC_CmdMng+0x164>)
 8007320:	2200      	movs	r2, #0
 8007322:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8007324:	2200      	movs	r2, #0
 8007326:	2140      	movs	r1, #64	; 0x40
 8007328:	4814      	ldr	r0, [pc, #80]	; (800737c <BC_CmdMng+0x168>)
 800732a:	f002 fba7 	bl	8009a7c <HAL_GPIO_WritePin>
        }
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
        __NOP();
      }
    }
    break;
 800732e:	e01e      	b.n	800736e <BC_CmdMng+0x15a>
        if ( stbc02_sw_state_prv == pulse_h )
 8007330:	4b14      	ldr	r3, [pc, #80]	; (8007384 <BC_CmdMng+0x170>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d110      	bne.n	800735a <BC_CmdMng+0x146>
          CmdPulse++;
 8007338:	4b13      	ldr	r3, [pc, #76]	; (8007388 <BC_CmdMng+0x174>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	b2da      	uxtb	r2, r3
 8007340:	4b11      	ldr	r3, [pc, #68]	; (8007388 <BC_CmdMng+0x174>)
 8007342:	701a      	strb	r2, [r3, #0]
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8007344:	4b10      	ldr	r3, [pc, #64]	; (8007388 <BC_CmdMng+0x174>)
 8007346:	781a      	ldrb	r2, [r3, #0]
 8007348:	4b10      	ldr	r3, [pc, #64]	; (800738c <BC_CmdMng+0x178>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d203      	bcs.n	8007358 <BC_CmdMng+0x144>
            stbc02_sw_state_prv = start;
 8007350:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <BC_CmdMng+0x170>)
 8007352:	2201      	movs	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e000      	b.n	800735a <BC_CmdMng+0x146>
            __NOP();
 8007358:	bf00      	nop
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
 800735a:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <BC_CmdMng+0x170>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	3301      	adds	r3, #1
 8007360:	b2da      	uxtb	r2, r3
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <BC_CmdMng+0x164>)
 8007364:	701a      	strb	r2, [r3, #0]
        __NOP();
 8007366:	bf00      	nop
    break;
 8007368:	e001      	b.n	800736e <BC_CmdMng+0x15a>
  default:
    break;
 800736a:	bf00      	nop
 800736c:	e000      	b.n	8007370 <BC_CmdMng+0x15c>
    break;
 800736e:	bf00      	nop
  }
}
 8007370:	bf00      	nop
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000d68 	.word	0x20000d68
 8007378:	20000d0e 	.word	0x20000d0e
 800737c:	48001400 	.word	0x48001400
 8007380:	20000d6a 	.word	0x20000d6a
 8007384:	20000d6c 	.word	0x20000d6c
 8007388:	20000d6d 	.word	0x20000d6d
 800738c:	20000d0d 	.word	0x20000d0d

08007390 <BC_ChgPinFreqGet>:
* @brief Measure the toggling frequency of the charging pin of the STBC02
* @note This function works with 1 ms as time base
* @retval None
*/
void BC_ChgPinFreqGet(void)
{  
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  if(uhCaptureIndex == 0U)
 8007394:	4b1d      	ldr	r3, [pc, #116]	; (800740c <BC_ChgPinFreqGet+0x7c>)
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d107      	bne.n	80073ac <BC_ChgPinFreqGet+0x1c>
  {
    /* Get the 1st Input Capture value */
    uwIC2Value1 = HAL_GetTick();
 800739c:	f000 fb42 	bl	8007a24 <HAL_GetTick>
 80073a0:	4603      	mov	r3, r0
 80073a2:	4a1b      	ldr	r2, [pc, #108]	; (8007410 <BC_ChgPinFreqGet+0x80>)
 80073a4:	6013      	str	r3, [r2, #0]
    uhCaptureIndex = 1;
 80073a6:	4b19      	ldr	r3, [pc, #100]	; (800740c <BC_ChgPinFreqGet+0x7c>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	801a      	strh	r2, [r3, #0]
  }
   if(uhCaptureIndex == 1U)
 80073ac:	4b17      	ldr	r3, [pc, #92]	; (800740c <BC_ChgPinFreqGet+0x7c>)
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d128      	bne.n	8007406 <BC_ChgPinFreqGet+0x76>
  {
    /* Get the 2nd Input Capture value */
    uwIC2Value2 = HAL_GetTick();
 80073b4:	f000 fb36 	bl	8007a24 <HAL_GetTick>
 80073b8:	4603      	mov	r3, r0
 80073ba:	4a16      	ldr	r2, [pc, #88]	; (8007414 <BC_ChgPinFreqGet+0x84>)
 80073bc:	6013      	str	r3, [r2, #0]
    
    /* Capture computation */
    if (uwIC2Value2 > uwIC2Value1)
 80073be:	4b15      	ldr	r3, [pc, #84]	; (8007414 <BC_ChgPinFreqGet+0x84>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b13      	ldr	r3, [pc, #76]	; (8007410 <BC_ChgPinFreqGet+0x80>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d907      	bls.n	80073da <BC_ChgPinFreqGet+0x4a>
    {
      uwDiffCapture = (uwIC2Value2 - uwIC2Value1); 
 80073ca:	4b12      	ldr	r3, [pc, #72]	; (8007414 <BC_ChgPinFreqGet+0x84>)
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	4b10      	ldr	r3, [pc, #64]	; (8007410 <BC_ChgPinFreqGet+0x80>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	4a10      	ldr	r2, [pc, #64]	; (8007418 <BC_ChgPinFreqGet+0x88>)
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	e006      	b.n	80073e8 <BC_ChgPinFreqGet+0x58>
    }
    else
    {
      uwDiffCapture = ((0xFFFFFFFF - uwIC2Value1) + uwIC2Value2) + 1U;
 80073da:	4b0e      	ldr	r3, [pc, #56]	; (8007414 <BC_ChgPinFreqGet+0x84>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	4b0c      	ldr	r3, [pc, #48]	; (8007410 <BC_ChgPinFreqGet+0x80>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	4a0c      	ldr	r2, [pc, #48]	; (8007418 <BC_ChgPinFreqGet+0x88>)
 80073e6:	6013      	str	r3, [r2, #0]
    }
    
    if (uwDiffCapture != 0U)
 80073e8:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <BC_ChgPinFreqGet+0x88>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <BC_ChgPinFreqGet+0x76>
    {
      /* Frequency computation */      
      uwFrequency = 10000U / uwDiffCapture;
 80073f0:	4b09      	ldr	r3, [pc, #36]	; (8007418 <BC_ChgPinFreqGet+0x88>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80073f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fc:	4a07      	ldr	r2, [pc, #28]	; (800741c <BC_ChgPinFreqGet+0x8c>)
 80073fe:	6013      	str	r3, [r2, #0]
      uhCaptureIndex = 0U;
 8007400:	4b02      	ldr	r3, [pc, #8]	; (800740c <BC_ChgPinFreqGet+0x7c>)
 8007402:	2200      	movs	r2, #0
 8007404:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8007406:	bf00      	nop
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000d60 	.word	0x20000d60
 8007410:	20000d54 	.word	0x20000d54
 8007414:	20000d58 	.word	0x20000d58
 8007418:	20000d5c 	.word	0x20000d5c
 800741c:	20000d64 	.word	0x20000d64

08007420 <BC_TIMx_Init>:
/**
  * @brief  Initializes the used timer
  * @retval None
  */
void BC_TIMx_Init(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007426:	463b      	mov	r3, r7
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	605a      	str	r2, [r3, #4]
 800742e:	609a      	str	r2, [r3, #8]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8007430:	f005 fff0 	bl	800d414 <HAL_RCC_GetPCLK1Freq>
 8007434:	4602      	mov	r2, r0
 8007436:	4b26      	ldr	r3, [pc, #152]	; (80074d0 <BC_TIMx_Init+0xb0>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <BC_TIMx_Init+0x26>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <BC_TIMx_Init+0x28>
 8007446:	2302      	movs	r3, #2
 8007448:	fb02 f303 	mul.w	r3, r2, r3
 800744c:	613b      	str	r3, [r7, #16]
  uint32_t prescaler = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
  uint32_t period;
  
  do
  {
    prescaler++;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	3301      	adds	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007460:	4618      	mov	r0, r3
 8007462:	f7f9 f877 	bl	8000554 <__aeabi_ui2d>
 8007466:	a318      	add	r3, pc, #96	; (adr r3, 80074c8 <BC_TIMx_Init+0xa8>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f9 f8ec 	bl	8000648 <__aeabi_dmul>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4610      	mov	r0, r2
 8007476:	4619      	mov	r1, r3
 8007478:	f7f9 fbbe 	bl	8000bf8 <__aeabi_d2uiz>
 800747c:	4603      	mov	r3, r0
 800747e:	60fb      	str	r3, [r7, #12]
  } while (period > 65535U);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007486:	d2e4      	bcs.n	8007452 <BC_TIMx_Init+0x32>

  hstbc02_UsedTim.Instance = STBC02_USED_TIM;
 8007488:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <BC_TIMx_Init+0xb4>)
 800748a:	4a13      	ldr	r2, [pc, #76]	; (80074d8 <BC_TIMx_Init+0xb8>)
 800748c:	601a      	str	r2, [r3, #0]
  hstbc02_UsedTim.Init.Prescaler = (prescaler-1U);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	3b01      	subs	r3, #1
 8007492:	4a10      	ldr	r2, [pc, #64]	; (80074d4 <BC_TIMx_Init+0xb4>)
 8007494:	6053      	str	r3, [r2, #4]
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007496:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <BC_TIMx_Init+0xb4>)
 8007498:	2200      	movs	r2, #0
 800749a:	609a      	str	r2, [r3, #8]
  hstbc02_UsedTim.Init.Period = period;
 800749c:	4a0d      	ldr	r2, [pc, #52]	; (80074d4 <BC_TIMx_Init+0xb4>)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	60d3      	str	r3, [r2, #12]
#if USE_TIM_AUTORELOAD_PRELOAD
  hstbc02_UsedTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
#endif //USE_TIM_AUTORELOAD_PRELOAD
  
  HAL_TIM_BC_MspInit(&hstbc02_UsedTim);    
 80074a2:	480c      	ldr	r0, [pc, #48]	; (80074d4 <BC_TIMx_Init+0xb4>)
 80074a4:	f000 f81a 	bl	80074dc <HAL_TIM_BC_MspInit>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 80074a8:	480a      	ldr	r0, [pc, #40]	; (80074d4 <BC_TIMx_Init+0xb4>)
 80074aa:	f009 f973 	bl	8010794 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074ae:	2300      	movs	r3, #0
 80074b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60bb      	str	r3, [r7, #8]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 80074b6:	463b      	mov	r3, r7
 80074b8:	4619      	mov	r1, r3
 80074ba:	4806      	ldr	r0, [pc, #24]	; (80074d4 <BC_TIMx_Init+0xb4>)
 80074bc:	f009 fc22 	bl	8010d04 <HAL_TIMEx_MasterConfigSynchronization>
}
 80074c0:	bf00      	nop
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	88e368f1 	.word	0x88e368f1
 80074cc:	3ed4f8b5 	.word	0x3ed4f8b5
 80074d0:	40021000 	.word	0x40021000
 80074d4:	2001d0fc 	.word	0x2001d0fc
 80074d8:	40001400 	.word	0x40001400

080074dc <HAL_TIM_BC_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_BC_MspInit(TIM_HandleTypeDef *htim)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

  if(htim->Instance==STBC02_USED_TIM)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a0d      	ldr	r2, [pc, #52]	; (8007520 <HAL_TIM_BC_MspInit+0x44>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d113      	bne.n	8007516 <HAL_TIM_BC_MspInit+0x3a>
  {
    /* STBC02_USED_TIM clock enable */
    STBC02_USED_TIM_CLK_ENABLE();
 80074ee:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <HAL_TIM_BC_MspInit+0x48>)
 80074f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f2:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <HAL_TIM_BC_MspInit+0x48>)
 80074f4:	f043 0320 	orr.w	r3, r3, #32
 80074f8:	6593      	str	r3, [r2, #88]	; 0x58
 80074fa:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <HAL_TIM_BC_MspInit+0x48>)
 80074fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fe:	f003 0320 	and.w	r3, r3, #32
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	68fb      	ldr	r3, [r7, #12]

    /* STBC02_USED_TIM interrupt Init */
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8007506:	2200      	movs	r2, #0
 8007508:	2103      	movs	r1, #3
 800750a:	2037      	movs	r0, #55	; 0x37
 800750c:	f001 fe55 	bl	80091ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 8007510:	2037      	movs	r0, #55	; 0x37
 8007512:	f001 fe6e 	bl	80091f2 <HAL_NVIC_EnableIRQ>
  }
}
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	40001400 	.word	0x40001400
 8007524:	40021000 	.word	0x40021000

08007528 <HAL_ADC_BC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param BC_AdcHandle ADC handle
  * @retval None
  */
void HAL_ADC_BC_MspInit()
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800752e:	1d3b      	adds	r3, r7, #4
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	605a      	str	r2, [r3, #4]
 8007536:	609a      	str	r2, [r3, #8]
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	611a      	str	r2, [r3, #16]
  
  /* STBC02_USED_ADC GPIO Configuration */
  STBC02_BATMS_GPIO_CLK_ENABLE();
 800753c:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <HAL_ADC_BC_MspInit+0x4c>)
 800753e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007540:	4a0c      	ldr	r2, [pc, #48]	; (8007574 <HAL_ADC_BC_MspInit+0x4c>)
 8007542:	f043 0304 	orr.w	r3, r3, #4
 8007546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007548:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <HAL_ADC_BC_MspInit+0x4c>)
 800754a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	603b      	str	r3, [r7, #0]
 8007552:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 8007554:	2310      	movs	r3, #16
 8007556:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8007558:	230b      	movs	r3, #11
 800755a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8007560:	1d3b      	adds	r3, r7, #4
 8007562:	4619      	mov	r1, r3
 8007564:	4804      	ldr	r0, [pc, #16]	; (8007578 <HAL_ADC_BC_MspInit+0x50>)
 8007566:	f002 f8df 	bl	8009728 <HAL_GPIO_Init>
  
}
 800756a:	bf00      	nop
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40021000 	.word	0x40021000
 8007578:	48000800 	.word	0x48000800

0800757c <Channel_ADC1_Init>:
  * @brief  Initializes the used ADC
  * @retval 0 in case of success
  * @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08e      	sub	sp, #56	; 0x38
 8007580:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8007582:	463b      	mov	r3, r7
 8007584:	2234      	movs	r2, #52	; 0x34
 8007586:	2100      	movs	r1, #0
 8007588:	4618      	mov	r0, r3
 800758a:	f017 feeb 	bl	801f364 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 800758e:	481e      	ldr	r0, [pc, #120]	; (8007608 <Channel_ADC1_Init+0x8c>)
 8007590:	f000 fdcc 	bl	800812c <HAL_ADC_GetState>
 8007594:	6378      	str	r0, [r7, #52]	; 0x34
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 8007596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <Channel_ADC1_Init+0x30>
  {
    (void)HAL_ADC_Stop(&ADC1_Handle);
 80075a0:	4819      	ldr	r0, [pc, #100]	; (8007608 <Channel_ADC1_Init+0x8c>)
 80075a2:	f000 fd68 	bl	8008076 <HAL_ADC_Stop>
    ADC_stopped=1;
 80075a6:	4b19      	ldr	r3, [pc, #100]	; (800760c <Channel_ADC1_Init+0x90>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	701a      	strb	r2, [r3, #0]
  }

    
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80075ac:	4b18      	ldr	r3, [pc, #96]	; (8007610 <Channel_ADC1_Init+0x94>)
 80075ae:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80075b0:	2308      	movs	r3, #8
 80075b2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80075b4:	2307      	movs	r3, #7
 80075b6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80075b8:	237f      	movs	r3, #127	; 0x7f
 80075ba:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80075bc:	2304      	movs	r3, #4
 80075be:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80075c4:	2301      	movs	r3, #1
 80075c6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80075c8:	2300      	movs	r3, #0
 80075ca:	773b      	strb	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	777b      	strb	r3, [r7, #29]
  sConfigInjected.QueueInjectedContext = DISABLE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80075d4:	2300      	movs	r3, #0
 80075d6:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 80075d8:	2300      	movs	r3, #0
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 80075dc:	2300      	movs	r3, #0
 80075de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  
  HAL_ADC_BC_MspInit();
 80075e2:	f7ff ffa1 	bl	8007528 <HAL_ADC_BC_MspInit>
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 80075e6:	463b      	mov	r3, r7
 80075e8:	4619      	mov	r1, r3
 80075ea:	4807      	ldr	r0, [pc, #28]	; (8007608 <Channel_ADC1_Init+0x8c>)
 80075ec:	f001 f8d8 	bl	80087a0 <HAL_ADCEx_InjectedConfigChannel>
    
  if (ADC_stopped == 1U)
 80075f0:	4b06      	ldr	r3, [pc, #24]	; (800760c <Channel_ADC1_Init+0x90>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d102      	bne.n	80075fe <Channel_ADC1_Init+0x82>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 80075f8:	4803      	ldr	r0, [pc, #12]	; (8007608 <Channel_ADC1_Init+0x8c>)
 80075fa:	f000 fcd9 	bl	8007fb0 <HAL_ADC_Start>
  }
  
  return 0;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3738      	adds	r7, #56	; 0x38
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	2001d068 	.word	0x2001d068
 800760c:	20000d6e 	.word	0x20000d6e
 8007610:	36902000 	.word	0x36902000

08007614 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == STBC02_USED_TIM)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a04      	ldr	r2, [pc, #16]	; (8007634 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d101      	bne.n	800762a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    BC_CmdMng();
 8007626:	f7ff fdf5 	bl	8007214 <BC_CmdMng>
  }
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	40001400 	.word	0x40001400

08007638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  htim : hadc handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	7f1b      	ldrb	r3, [r3, #28]
 8007644:	2b04      	cmp	r3, #4
 8007646:	d101      	bne.n	800764c <HAL_TIM_IC_CaptureCallback+0x14>
  {
    BSP_BC_ChgPinHasToggled();
 8007648:	f7ff fd96 	bl	8007178 <BSP_BC_ChgPinHasToggled>
  }
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <TIM7_IRQHandler>:
 */
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 8007658:	4802      	ldr	r0, [pc, #8]	; (8007664 <TIM7_IRQHandler+0x10>)
 800765a:	f009 f97c 	bl	8010956 <HAL_TIM_IRQHandler>
}
 800765e:	bf00      	nop
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	2001d0fc 	.word	0x2001d0fc

08007668 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimBCHandle);
 800766c:	4802      	ldr	r0, [pc, #8]	; (8007678 <TIM3_IRQHandler+0x10>)
 800766e:	f009 f972 	bl	8010956 <HAL_TIM_IRQHandler>
}
 8007672:	bf00      	nop
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000d14 	.word	0x20000d14

0800767c <BSP_DEBUG_PIN_On>:
  HAL_GPIO_DeInit(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin]);
  DEBUG_PINx_GPIO_CLK_DISABLE(Pin);
}

void BSP_DEBUG_PIN_On(Debug_Pin_TypeDef Pin)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_SET);
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	4a07      	ldr	r2, [pc, #28]	; (80076a8 <BSP_DEBUG_PIN_On+0x2c>)
 800768a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	4a06      	ldr	r2, [pc, #24]	; (80076ac <BSP_DEBUG_PIN_On+0x30>)
 8007692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007696:	2201      	movs	r2, #1
 8007698:	4619      	mov	r1, r3
 800769a:	f002 f9ef 	bl	8009a7c <HAL_GPIO_WritePin>
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	200000a8 	.word	0x200000a8
 80076ac:	08023b84 	.word	0x08023b84

080076b0 <BSP_DEBUG_PIN_Off>:

void BSP_DEBUG_PIN_Off(Debug_Pin_TypeDef Pin)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	4a07      	ldr	r2, [pc, #28]	; (80076dc <BSP_DEBUG_PIN_Off+0x2c>)
 80076be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	4a06      	ldr	r2, [pc, #24]	; (80076e0 <BSP_DEBUG_PIN_Off+0x30>)
 80076c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ca:	2200      	movs	r2, #0
 80076cc:	4619      	mov	r1, r3
 80076ce:	f002 f9d5 	bl	8009a7c <HAL_GPIO_WritePin>
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	200000a8 	.word	0x200000a8
 80076e0:	08023b84 	.word	0x08023b84

080076e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
  uint8_t sd_state;
  /* Check if the SD card is plugged in the slot */
  
  /* Initialize all configured peripherals */

  hsd1.Instance = SDMMC1;
 80076ea:	4b15      	ldr	r3, [pc, #84]	; (8007740 <BSP_SD_Init+0x5c>)
 80076ec:	4a15      	ldr	r2, [pc, #84]	; (8007744 <BSP_SD_Init+0x60>)
 80076ee:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80076f0:	4b13      	ldr	r3, [pc, #76]	; (8007740 <BSP_SD_Init+0x5c>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80076f6:	4b12      	ldr	r3, [pc, #72]	; (8007740 <BSP_SD_Init+0x5c>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80076fc:	4b10      	ldr	r3, [pc, #64]	; (8007740 <BSP_SD_Init+0x5c>)
 80076fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007702:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <BSP_SD_Init+0x5c>)
 8007706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800770a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 800770c:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <BSP_SD_Init+0x5c>)
 800770e:	2201      	movs	r2, #1
 8007710:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8007712:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <BSP_SD_Init+0x5c>)
 8007714:	2200      	movs	r2, #0
 8007716:	619a      	str	r2, [r3, #24]
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&hsd1);
 8007718:	4809      	ldr	r0, [pc, #36]	; (8007740 <BSP_SD_Init+0x5c>)
 800771a:	f000 f889 	bl	8007830 <BSP_SD_MspInit>
  
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800771e:	f000 f839 	bl	8007794 <BSP_SD_IsDetected>
 8007722:	4603      	mov	r3, r0
 8007724:	2b01      	cmp	r3, #1
 8007726:	d001      	beq.n	800772c <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007728:	2302      	movs	r3, #2
 800772a:	e005      	b.n	8007738 <BSP_SD_Init+0x54>
  }
  /* HAL SD initialization */
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 800772c:	4804      	ldr	r0, [pc, #16]	; (8007740 <BSP_SD_Init+0x5c>)
 800772e:	f006 fcbf 	bl	800e0b0 <HAL_SD_Init>
 8007732:	4603      	mov	r3, r0
 8007734:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007736:	79fb      	ldrb	r3, [r7, #7]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	200168ac 	.word	0x200168ac
 8007744:	50062400 	.word	0x50062400

08007748 <BSP_SD_Detect_Init>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
void BSP_SD_Detect_Init(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <BSP_SD_Detect_Init+0x44>)
 8007750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007752:	4a0e      	ldr	r2, [pc, #56]	; (800778c <BSP_SD_Detect_Init+0x44>)
 8007754:	f043 0302 	orr.w	r3, r3, #2
 8007758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800775a:	4b0c      	ldr	r3, [pc, #48]	; (800778c <BSP_SD_Detect_Init+0x44>)
 800775c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	683b      	ldr	r3, [r7, #0]

  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8007766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800776a:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800776c:	2301      	movs	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
 8007774:	2300      	movs	r3, #0
 8007776:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8007778:	1d3b      	adds	r3, r7, #4
 800777a:	4619      	mov	r1, r3
 800777c:	4804      	ldr	r0, [pc, #16]	; (8007790 <BSP_SD_Detect_Init+0x48>)
 800777e:	f001 ffd3 	bl	8009728 <HAL_GPIO_Init>
}
 8007782:	bf00      	nop
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	40021000 	.word	0x40021000
 8007790:	48000400 	.word	0x48000400

08007794 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 8007798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800779c:	4808      	ldr	r0, [pc, #32]	; (80077c0 <BSP_SD_IsDetected+0x2c>)
 800779e:	f002 f955 	bl	8009a4c <HAL_GPIO_ReadPin>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d103      	bne.n	80077b0 <BSP_SD_IsDetected+0x1c>
  {
    SD_Status = SD_NOT_PRESENT;
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <BSP_SD_IsDetected+0x30>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e002      	b.n	80077b6 <BSP_SD_IsDetected+0x22>
  }
  else
  {
    SD_Status = SD_PRESENT;
 80077b0:	4b04      	ldr	r3, [pc, #16]	; (80077c4 <BSP_SD_IsDetected+0x30>)
 80077b2:	2201      	movs	r2, #1
 80077b4:	701a      	strb	r2, [r3, #0]
  }
  
  return SD_Status;
 80077b6:	4b03      	ldr	r3, [pc, #12]	; (80077c4 <BSP_SD_IsDetected+0x30>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	b2db      	uxtb	r3, r3
}
 80077bc:	4618      	mov	r0, r3
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	48000400 	.word	0x48000400
 80077c4:	20000d6f 	.word	0x20000d6f

080077c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	68f9      	ldr	r1, [r7, #12]
 80077de:	4806      	ldr	r0, [pc, #24]	; (80077f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80077e0:	f006 fd7c 	bl	800e2dc <HAL_SD_ReadBlocks_DMA>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	200168ac 	.word	0x200168ac

080077fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	68f9      	ldr	r1, [r7, #12]
 8007812:	4806      	ldr	r0, [pc, #24]	; (800782c <BSP_SD_WriteBlocks_DMA+0x30>)
 8007814:	f006 fe0a 	bl	800e42c <HAL_SD_WriteBlocks_DMA>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007822:	7dfb      	ldrb	r3, [r7, #23]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	200168ac 	.word	0x200168ac

08007830 <BSP_SD_MspInit>:

  return sd_state; 
}

void BSP_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08a      	sub	sp, #40	; 0x28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	605a      	str	r2, [r3, #4]
 8007842:	609a      	str	r2, [r3, #8]
 8007844:	60da      	str	r2, [r3, #12]
 8007846:	611a      	str	r2, [r3, #16]
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007848:	4b24      	ldr	r3, [pc, #144]	; (80078dc <BSP_SD_MspInit+0xac>)
 800784a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784c:	4a23      	ldr	r2, [pc, #140]	; (80078dc <BSP_SD_MspInit+0xac>)
 800784e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007852:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007854:	4b21      	ldr	r3, [pc, #132]	; (80078dc <BSP_SD_MspInit+0xac>)
 8007856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007860:	4b1e      	ldr	r3, [pc, #120]	; (80078dc <BSP_SD_MspInit+0xac>)
 8007862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007864:	4a1d      	ldr	r2, [pc, #116]	; (80078dc <BSP_SD_MspInit+0xac>)
 8007866:	f043 0304 	orr.w	r3, r3, #4
 800786a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800786c:	4b1b      	ldr	r3, [pc, #108]	; (80078dc <BSP_SD_MspInit+0xac>)
 800786e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007878:	4b18      	ldr	r3, [pc, #96]	; (80078dc <BSP_SD_MspInit+0xac>)
 800787a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787c:	4a17      	ldr	r2, [pc, #92]	; (80078dc <BSP_SD_MspInit+0xac>)
 800787e:	f043 0308 	orr.w	r3, r3, #8
 8007882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007884:	4b15      	ldr	r3, [pc, #84]	; (80078dc <BSP_SD_MspInit+0xac>)
 8007886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 8007890:	2302      	movs	r3, #2
 8007892:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull      = GPIO_PULLUP;
 8007894:	2301      	movs	r3, #1
 8007896:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007898:	2303      	movs	r3, #3
 800789a:	623b      	str	r3, [r7, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 800789c:	230c      	movs	r3, #12
 800789e:	627b      	str	r3, [r7, #36]	; 0x24

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80078a0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80078a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	4619      	mov	r1, r3
 80078ac:	480c      	ldr	r0, [pc, #48]	; (80078e0 <BSP_SD_MspInit+0xb0>)
 80078ae:	f001 ff3b 	bl	8009728 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 80078b2:	2304      	movs	r3, #4
 80078b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80078b6:	f107 0314 	add.w	r3, r7, #20
 80078ba:	4619      	mov	r1, r3
 80078bc:	4809      	ldr	r0, [pc, #36]	; (80078e4 <BSP_SD_MspInit+0xb4>)
 80078be:	f001 ff33 	bl	8009728 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 80078c2:	2200      	movs	r2, #0
 80078c4:	2105      	movs	r1, #5
 80078c6:	2031      	movs	r0, #49	; 0x31
 80078c8:	f001 fc77 	bl	80091ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 80078cc:	2031      	movs	r0, #49	; 0x31
 80078ce:	f001 fc90 	bl	80091f2 <HAL_NVIC_EnableIRQ>


}
 80078d2:	bf00      	nop
 80078d4:	3728      	adds	r7, #40	; 0x28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	40021000 	.word	0x40021000
 80078e0:	48000800 	.word	0x48000800
 80078e4:	48000c00 	.word	0x48000c00

080078e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80078ec:	4805      	ldr	r0, [pc, #20]	; (8007904 <BSP_SD_GetCardState+0x1c>)
 80078ee:	f007 fb35 	bl	800ef5c <HAL_SD_GetCardState>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	bf14      	ite	ne
 80078f8:	2301      	movne	r3, #1
 80078fa:	2300      	moveq	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
}
 80078fe:	4618      	mov	r0, r3
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	200168ac 	.word	0x200168ac

08007908 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4803      	ldr	r0, [pc, #12]	; (8007920 <BSP_SD_GetCardInfo+0x18>)
 8007914:	f007 fa4c 	bl	800edb0 <HAL_SD_GetCardInfo>
}
 8007918:	bf00      	nop
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	200168ac 	.word	0x200168ac

08007924 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 800792c:	f7fc fde2 	bl	80044f4 <BSP_SD_WriteCpltCallback>
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8007940:	f7fc fde8 	bl	8004514 <BSP_SD_ReadCpltCallback>
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007956:	2003      	movs	r0, #3
 8007958:	f001 fc24 	bl	80091a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800795c:	2000      	movs	r0, #0
 800795e:	f000 f815 	bl	800798c <HAL_InitTick>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	71fb      	strb	r3, [r7, #7]
 800796c:	e001      	b.n	8007972 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800796e:	f000 f805 	bl	800797c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007972:	79fb      	ldrb	r3, [r7, #7]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
	...

0800798c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007998:	4b16      	ldr	r3, [pc, #88]	; (80079f4 <HAL_InitTick+0x68>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d022      	beq.n	80079e6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80079a0:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <HAL_InitTick+0x6c>)
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	4b13      	ldr	r3, [pc, #76]	; (80079f4 <HAL_InitTick+0x68>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80079ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80079b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b4:	4618      	mov	r0, r3
 80079b6:	f001 fc2a 	bl	800920e <HAL_SYSTICK_Config>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10f      	bne.n	80079e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b0f      	cmp	r3, #15
 80079c4:	d809      	bhi.n	80079da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079c6:	2200      	movs	r2, #0
 80079c8:	6879      	ldr	r1, [r7, #4]
 80079ca:	f04f 30ff 	mov.w	r0, #4294967295
 80079ce:	f001 fbf4 	bl	80091ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80079d2:	4a0a      	ldr	r2, [pc, #40]	; (80079fc <HAL_InitTick+0x70>)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	e007      	b.n	80079ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	73fb      	strb	r3, [r7, #15]
 80079de:	e004      	b.n	80079ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	73fb      	strb	r3, [r7, #15]
 80079e4:	e001      	b.n	80079ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	200000dc 	.word	0x200000dc
 80079f8:	20000038 	.word	0x20000038
 80079fc:	200000d8 	.word	0x200000d8

08007a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <HAL_IncTick+0x1c>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <HAL_IncTick+0x20>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	4a03      	ldr	r2, [pc, #12]	; (8007a1c <HAL_IncTick+0x1c>)
 8007a10:	6013      	str	r3, [r2, #0]
}
 8007a12:	bf00      	nop
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	2001d13c 	.word	0x2001d13c
 8007a20:	200000dc 	.word	0x200000dc

08007a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a24:	b480      	push	{r7}
 8007a26:	af00      	add	r7, sp, #0
  return uwTick;
 8007a28:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <HAL_GetTick+0x14>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	2001d13c 	.word	0x2001d13c

08007a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a44:	f7ff ffee 	bl	8007a24 <HAL_GetTick>
 8007a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a54:	d004      	beq.n	8007a60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a56:	4b09      	ldr	r3, [pc, #36]	; (8007a7c <HAL_Delay+0x40>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007a60:	bf00      	nop
 8007a62:	f7ff ffdf 	bl	8007a24 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d8f7      	bhi.n	8007a62 <HAL_Delay+0x26>
  {
  }
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	200000dc 	.word	0x200000dc

08007a80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	609a      	str	r2, [r3, #8]
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007ab6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6093      	str	r3, [r2, #8]
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ade:	d101      	bne.n	8007ae4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e000      	b.n	8007ae6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007b02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b2e:	d101      	bne.n	8007b34 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b56:	f043 0201 	orr.w	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b7e:	f043 0202 	orr.w	r2, r3, #2
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <LL_ADC_IsEnabled+0x18>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e000      	b.n	8007bac <LL_ADC_IsEnabled+0x1a>
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d101      	bne.n	8007bd0 <LL_ADC_IsDisableOngoing+0x18>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <LL_ADC_IsDisableOngoing+0x1a>
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007bf2:	f043 0204 	orr.w	r2, r3, #4
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007bfa:	bf00      	nop
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c1a:	f043 0210 	orr.w	r2, r3, #16
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d101      	bne.n	8007c46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c68:	f043 0220 	orr.w	r2, r3, #32
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d101      	bne.n	8007c94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
	...

08007ca4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e174      	b.n	8007fa8 <HAL_ADC_Init+0x304>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d132      	bne.n	8007d32 <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a9a      	ldr	r2, [pc, #616]	; (8007f38 <HAL_ADC_Init+0x294>)
 8007cd0:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a99      	ldr	r2, [pc, #612]	; (8007f3c <HAL_ADC_Init+0x298>)
 8007cd6:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a99      	ldr	r2, [pc, #612]	; (8007f40 <HAL_ADC_Init+0x29c>)
 8007cdc:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a98      	ldr	r2, [pc, #608]	; (8007f44 <HAL_ADC_Init+0x2a0>)
 8007ce2:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a98      	ldr	r2, [pc, #608]	; (8007f48 <HAL_ADC_Init+0x2a4>)
 8007ce8:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a97      	ldr	r2, [pc, #604]	; (8007f4c <HAL_ADC_Init+0x2a8>)
 8007cee:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a97      	ldr	r2, [pc, #604]	; (8007f50 <HAL_ADC_Init+0x2ac>)
 8007cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a96      	ldr	r2, [pc, #600]	; (8007f54 <HAL_ADC_Init+0x2b0>)
 8007cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a95      	ldr	r2, [pc, #596]	; (8007f58 <HAL_ADC_Init+0x2b4>)
 8007d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d103      	bne.n	8007d1a <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a91      	ldr	r2, [pc, #580]	; (8007f5c <HAL_ADC_Init+0x2b8>)
 8007d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff fec7 	bl	8007aca <LL_ADC_IsDeepPowerDownEnabled>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff fead 	bl	8007aa6 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff fee2 	bl	8007b1a <LL_ADC_IsInternalRegulatorEnabled>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d113      	bne.n	8007d84 <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff fec6 	bl	8007af2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007d66:	4b7e      	ldr	r3, [pc, #504]	; (8007f60 <HAL_ADC_Init+0x2bc>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	099b      	lsrs	r3, r3, #6
 8007d6c:	4a7d      	ldr	r2, [pc, #500]	; (8007f64 <HAL_ADC_Init+0x2c0>)
 8007d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d72:	099b      	lsrs	r3, r3, #6
 8007d74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007d76:	e002      	b.n	8007d7e <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1f9      	bne.n	8007d78 <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff fec6 	bl	8007b1a <LL_ADC_IsInternalRegulatorEnabled>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10d      	bne.n	8007db0 <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d98:	f043 0210 	orr.w	r2, r3, #16
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da4:	f043 0201 	orr.w	r2, r3, #1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff ff3a 	bl	8007c2e <LL_ADC_REG_IsConversionOngoing>
 8007dba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f040 80e6 	bne.w	8007f96 <HAL_ADC_Init+0x2f2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 80e2 	bne.w	8007f96 <HAL_ADC_Init+0x2f2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007dda:	f043 0202 	orr.w	r2, r3, #2
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff fed3 	bl	8007b92 <LL_ADC_IsEnabled>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10b      	bne.n	8007e0a <HAL_ADC_Init+0x166>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007df2:	485d      	ldr	r0, [pc, #372]	; (8007f68 <HAL_ADC_Init+0x2c4>)
 8007df4:	f7ff fecd 	bl	8007b92 <LL_ADC_IsEnabled>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d105      	bne.n	8007e0a <HAL_ADC_Init+0x166>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	4619      	mov	r1, r3
 8007e04:	4859      	ldr	r0, [pc, #356]	; (8007f6c <HAL_ADC_Init+0x2c8>)
 8007e06:	f7ff fe3b 	bl	8007a80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7e5b      	ldrb	r3, [r3, #25]
 8007e0e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e14:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007e1a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007e20:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e28:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d106      	bne.n	8007e46 <HAL_ADC_Init+0x1a2>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	045b      	lsls	r3, r3, #17
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d009      	beq.n	8007e62 <HAL_ADC_Init+0x1be>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e52:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	4b41      	ldr	r3, [pc, #260]	; (8007f70 <HAL_ADC_Init+0x2cc>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6812      	ldr	r2, [r2, #0]
 8007e70:	69b9      	ldr	r1, [r7, #24]
 8007e72:	430b      	orrs	r3, r1
 8007e74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff fed7 	bl	8007c2e <LL_ADC_REG_IsConversionOngoing>
 8007e80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff fef8 	bl	8007c7c <LL_ADC_INJ_IsConversionOngoing>
 8007e8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d140      	bne.n	8007f16 <HAL_ADC_Init+0x272>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d13d      	bne.n	8007f16 <HAL_ADC_Init+0x272>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	7e1b      	ldrb	r3, [r3, #24]
 8007ea2:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007ea4:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007eac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ebc:	f023 0306 	bic.w	r3, r3, #6
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	69b9      	ldr	r1, [r7, #24]
 8007ec6:	430b      	orrs	r3, r1
 8007ec8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d118      	bne.n	8007f06 <HAL_ADC_Init+0x262>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ede:	f023 0304 	bic.w	r3, r3, #4
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007eea:	4311      	orrs	r1, r2
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ef0:	4311      	orrs	r1, r2
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	611a      	str	r2, [r3, #16]
 8007f04:	e007      	b.n	8007f16 <HAL_ADC_Init+0x272>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0201 	bic.w	r2, r2, #1
 8007f14:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d12a      	bne.n	8007f74 <HAL_ADC_Init+0x2d0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f24:	f023 010f 	bic.w	r1, r3, #15
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	1e5a      	subs	r2, r3, #1
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	631a      	str	r2, [r3, #48]	; 0x30
 8007f36:	e025      	b.n	8007f84 <HAL_ADC_Init+0x2e0>
 8007f38:	080080dd 	.word	0x080080dd
 8007f3c:	080080f1 	.word	0x080080f1
 8007f40:	08008105 	.word	0x08008105
 8007f44:	08008119 	.word	0x08008119
 8007f48:	0800873d 	.word	0x0800873d
 8007f4c:	08008751 	.word	0x08008751
 8007f50:	08008765 	.word	0x08008765
 8007f54:	08008779 	.word	0x08008779
 8007f58:	0800878d 	.word	0x0800878d
 8007f5c:	08006e81 	.word	0x08006e81
 8007f60:	20000038 	.word	0x20000038
 8007f64:	053e2d63 	.word	0x053e2d63
 8007f68:	50040000 	.word	0x50040000
 8007f6c:	50040300 	.word	0x50040300
 8007f70:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 020f 	bic.w	r2, r2, #15
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f88:	f023 0303 	bic.w	r3, r3, #3
 8007f8c:	f043 0201 	orr.w	r2, r3, #1
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	659a      	str	r2, [r3, #88]	; 0x58
 8007f94:	e007      	b.n	8007fa6 <HAL_ADC_Init+0x302>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9a:	f043 0210 	orr.w	r2, r3, #16
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3720      	adds	r7, #32
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff fe36 	bl	8007c2e <LL_ADC_REG_IsConversionOngoing>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d14f      	bne.n	8008068 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <HAL_ADC_Start+0x26>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e04b      	b.n	800806e <HAL_ADC_Start+0xbe>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f964 	bl	80082ac <ADC_Enable>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d137      	bne.n	800805e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800800a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800e:	d106      	bne.n	800801e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008014:	f023 0206 	bic.w	r2, r3, #6
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	65da      	str	r2, [r3, #92]	; 0x5c
 800801c:	e002      	b.n	8008024 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	221c      	movs	r2, #28
 800802a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d007      	beq.n	8008052 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008046:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800804a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff fdc1 	bl	8007bde <LL_ADC_REG_StartConversion>
 800805c:	e006      	b.n	800806c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008066:	e001      	b.n	800806c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008068:	2302      	movs	r3, #2
 800806a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_ADC_Stop+0x16>
 8008088:	2302      	movs	r3, #2
 800808a:	e023      	b.n	80080d4 <HAL_ADC_Stop+0x5e>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008094:	2103      	movs	r1, #3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f854 	bl	8008144 <ADC_ConversionStop>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d111      	bne.n	80080ca <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f95a 	bl	8008360 <ADC_Disable>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d109      	bne.n	80080ca <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80080be:	f023 0301 	bic.w	r3, r3, #1
 80080c2:	f043 0201 	orr.w	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800814e:	2300      	movs	r3, #0
 8008150:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff fd67 	bl	8007c2e <LL_ADC_REG_IsConversionOngoing>
 8008160:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff fd88 	bl	8007c7c <LL_ADC_INJ_IsConversionOngoing>
 800816c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d103      	bne.n	800817c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 8091 	beq.w	800829e <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d02a      	beq.n	80081e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	7e5b      	ldrb	r3, [r3, #25]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d126      	bne.n	80081e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	7e1b      	ldrb	r3, [r3, #24]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d122      	bne.n	80081e0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800819a:	2301      	movs	r3, #1
 800819c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800819e:	e014      	b.n	80081ca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	4a41      	ldr	r2, [pc, #260]	; (80082a8 <ADC_ConversionStop+0x164>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d90d      	bls.n	80081c4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ac:	f043 0210 	orr.w	r2, r3, #16
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b8:	f043 0201 	orr.w	r2, r3, #1
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e06d      	b.n	80082a0 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	3301      	adds	r3, #1
 80081c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d4:	2b40      	cmp	r3, #64	; 0x40
 80081d6:	d1e3      	bne.n	80081a0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2240      	movs	r2, #64	; 0x40
 80081de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d014      	beq.n	8008210 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fd1f 	bl	8007c2e <LL_ADC_REG_IsConversionOngoing>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00c      	beq.n	8008210 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fcdc 	bl	8007bb8 <LL_ADC_IsDisableOngoing>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d104      	bne.n	8008210 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff fcfb 	bl	8007c06 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d014      	beq.n	8008240 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff fd2e 	bl	8007c7c <LL_ADC_INJ_IsConversionOngoing>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00c      	beq.n	8008240 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff fcc4 	bl	8007bb8 <LL_ADC_IsDisableOngoing>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fd0a 	bl	8007c54 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d005      	beq.n	8008252 <ADC_ConversionStop+0x10e>
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	2b03      	cmp	r3, #3
 800824a:	d105      	bne.n	8008258 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800824c:	230c      	movs	r3, #12
 800824e:	617b      	str	r3, [r7, #20]
        break;
 8008250:	e005      	b.n	800825e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008252:	2308      	movs	r3, #8
 8008254:	617b      	str	r3, [r7, #20]
        break;
 8008256:	e002      	b.n	800825e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008258:	2304      	movs	r3, #4
 800825a:	617b      	str	r3, [r7, #20]
        break;
 800825c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800825e:	f7ff fbe1 	bl	8007a24 <HAL_GetTick>
 8008262:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008264:	e014      	b.n	8008290 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008266:	f7ff fbdd 	bl	8007a24 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b05      	cmp	r3, #5
 8008272:	d90d      	bls.n	8008290 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008278:	f043 0210 	orr.w	r2, r3, #16
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008284:	f043 0201 	orr.w	r2, r3, #1
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e007      	b.n	80082a0 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	4013      	ands	r3, r2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e3      	bne.n	8008266 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	a33fffff 	.word	0xa33fffff

080082ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7ff fc6a 	bl	8007b92 <LL_ADC_IsEnabled>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d146      	bne.n	8008352 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	4b24      	ldr	r3, [pc, #144]	; (800835c <ADC_Enable+0xb0>)
 80082cc:	4013      	ands	r3, r2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00d      	beq.n	80082ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d6:	f043 0210 	orr.w	r2, r3, #16
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e2:	f043 0201 	orr.w	r2, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e032      	b.n	8008354 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff fc25 	bl	8007b42 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80082f8:	f7ff fb94 	bl	8007a24 <HAL_GetTick>
 80082fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80082fe:	e021      	b.n	8008344 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4618      	mov	r0, r3
 8008306:	f7ff fc44 	bl	8007b92 <LL_ADC_IsEnabled>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4618      	mov	r0, r3
 8008316:	f7ff fc14 	bl	8007b42 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800831a:	f7ff fb83 	bl	8007a24 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	2b02      	cmp	r3, #2
 8008326:	d90d      	bls.n	8008344 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832c:	f043 0210 	orr.w	r2, r3, #16
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008338:	f043 0201 	orr.w	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e007      	b.n	8008354 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b01      	cmp	r3, #1
 8008350:	d1d6      	bne.n	8008300 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	8000003f 	.word	0x8000003f

08008360 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f7ff fc23 	bl	8007bb8 <LL_ADC_IsDisableOngoing>
 8008372:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff fc0a 	bl	8007b92 <LL_ADC_IsEnabled>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d040      	beq.n	8008406 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d13d      	bne.n	8008406 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 030d 	and.w	r3, r3, #13
 8008394:	2b01      	cmp	r3, #1
 8008396:	d10c      	bne.n	80083b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff fbe4 	bl	8007b6a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2203      	movs	r2, #3
 80083a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80083aa:	f7ff fb3b 	bl	8007a24 <HAL_GetTick>
 80083ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80083b0:	e022      	b.n	80083f8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b6:	f043 0210 	orr.w	r2, r3, #16
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c2:	f043 0201 	orr.w	r2, r3, #1
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e01c      	b.n	8008408 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80083ce:	f7ff fb29 	bl	8007a24 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d90d      	bls.n	80083f8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e0:	f043 0210 	orr.w	r2, r3, #16
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ec:	f043 0201 	orr.w	r2, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e007      	b.n	8008408 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e3      	bne.n	80083ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <LL_ADC_SetCommonPathInternalCh>:
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	609a      	str	r2, [r3, #8]
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <LL_ADC_GetCommonPathInternalCh>:
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008446:	4618      	mov	r0, r3
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
	...

08008454 <LL_ADC_SetOffset>:
{
 8008454:	b490      	push	{r4, r7}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3360      	adds	r3, #96	; 0x60
 8008466:	461a      	mov	r2, r3
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	4b08      	ldr	r3, [pc, #32]	; (8008494 <LL_ADC_SetOffset+0x40>)
 8008474:	4013      	ands	r3, r2
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	4313      	orrs	r3, r2
 8008482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008486:	6023      	str	r3, [r4, #0]
}
 8008488:	bf00      	nop
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bc90      	pop	{r4, r7}
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	03fff000 	.word	0x03fff000

08008498 <LL_ADC_GetOffsetChannel>:
{
 8008498:	b490      	push	{r4, r7}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	3360      	adds	r3, #96	; 0x60
 80084a6:	461a      	mov	r2, r3
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc90      	pop	{r4, r7}
 80084be:	4770      	bx	lr

080084c0 <LL_ADC_SetOffsetState>:
{
 80084c0:	b490      	push	{r4, r7}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3360      	adds	r3, #96	; 0x60
 80084d0:	461a      	mov	r2, r3
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	6023      	str	r3, [r4, #0]
}
 80084e6:	bf00      	nop
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc90      	pop	{r4, r7}
 80084ee:	4770      	bx	lr

080084f0 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	431a      	orrs	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	615a      	str	r2, [r3, #20]
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <LL_ADC_SetChannelSamplingTime>:
{
 8008516:	b490      	push	{r4, r7}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3314      	adds	r3, #20
 8008526:	461a      	mov	r2, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	0e5b      	lsrs	r3, r3, #25
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	4413      	add	r3, r2
 8008534:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	0d1b      	lsrs	r3, r3, #20
 800853c:	f003 031f 	and.w	r3, r3, #31
 8008540:	2107      	movs	r1, #7
 8008542:	fa01 f303 	lsl.w	r3, r1, r3
 8008546:	43db      	mvns	r3, r3
 8008548:	401a      	ands	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	0d1b      	lsrs	r3, r3, #20
 800854e:	f003 031f 	and.w	r3, r3, #31
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	fa01 f303 	lsl.w	r3, r1, r3
 8008558:	4313      	orrs	r3, r2
 800855a:	6023      	str	r3, [r4, #0]
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bc90      	pop	{r4, r7}
 8008564:	4770      	bx	lr
	...

08008568 <LL_ADC_SetChannelSingleDiff>:
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008580:	43db      	mvns	r3, r3
 8008582:	401a      	ands	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f003 0318 	and.w	r3, r3, #24
 800858a:	4908      	ldr	r1, [pc, #32]	; (80085ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800858c:	40d9      	lsrs	r1, r3
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	400b      	ands	r3, r1
 8008592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008596:	431a      	orrs	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800859e:	bf00      	nop
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	0007ffff 	.word	0x0007ffff

080085b0 <LL_ADC_IsEnabled>:
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <LL_ADC_IsEnabled+0x18>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e000      	b.n	80085ca <LL_ADC_IsEnabled+0x1a>
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <LL_ADC_StartCalibration>:
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80085e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80085f2:	4313      	orrs	r3, r2
 80085f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	609a      	str	r2, [r3, #8]
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <LL_ADC_IsCalibrationOnGoing>:
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800861c:	d101      	bne.n	8008622 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <LL_ADC_REG_IsConversionOngoing>:
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b04      	cmp	r3, #4
 8008642:	d101      	bne.n	8008648 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008644:	2301      	movs	r3, #1
 8008646:	e000      	b.n	800864a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <LL_ADC_INJ_IsConversionOngoing>:
{
 8008656:	b480      	push	{r7}
 8008658:	b083      	sub	sp, #12
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f003 0308 	and.w	r3, r3, #8
 8008666:	2b08      	cmp	r3, #8
 8008668:	d101      	bne.n	800866e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800866a:	2301      	movs	r3, #1
 800866c:	e000      	b.n	8008670 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008686:	2300      	movs	r3, #0
 8008688:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_ADCEx_Calibration_Start+0x1c>
 8008694:	2302      	movs	r3, #2
 8008696:	e04d      	b.n	8008734 <HAL_ADCEx_Calibration_Start+0xb8>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fe5d 	bl	8008360 <ADC_Disable>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d136      	bne.n	800871e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80086b8:	f023 0302 	bic.w	r3, r3, #2
 80086bc:	f043 0202 	orr.w	r2, r3, #2
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff ff83 	bl	80085d6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80086d0:	e014      	b.n	80086fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3301      	adds	r3, #1
 80086d6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80086de:	d30d      	bcc.n	80086fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e4:	f023 0312 	bic.w	r3, r3, #18
 80086e8:	f043 0210 	orr.w	r2, r3, #16
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e01b      	b.n	8008734 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f7ff ff81 	bl	8008608 <LL_ADC_IsCalibrationOnGoing>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e2      	bne.n	80086d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008710:	f023 0303 	bic.w	r3, r3, #3
 8008714:	f043 0201 	orr.w	r2, r3, #1
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	659a      	str	r2, [r3, #88]	; 0x58
 800871c:	e005      	b.n	800872a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008722:	f043 0210 	orr.w	r2, r3, #16
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b0a8      	sub	sp, #160	; 0xa0
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d102      	bne.n	80087ca <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80087c4:	2302      	movs	r3, #2
 80087c6:	f000 bc13 	b.w	8008ff0 <HAL_ADCEx_InjectedConfigChannel+0x850>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d130      	bne.n	8008844 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	d179      	bne.n	80088de <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d010      	beq.n	8008814 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	0e9b      	lsrs	r3, r3, #26
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008806:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800880c:	4313      	orrs	r3, r2
 800880e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008812:	e007      	b.n	8008824 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	0e9b      	lsrs	r3, r3, #26
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8008820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800882a:	4ba1      	ldr	r3, [pc, #644]	; (8008ab0 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 800882c:	4013      	ands	r3, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6812      	ldr	r2, [r2, #0]
 8008832:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008836:	430b      	orrs	r3, r1
 8008838:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008840:	661a      	str	r2, [r3, #96]	; 0x60
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8008842:	e04c      	b.n	80088de <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11d      	bne.n	8008888 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	699a      	ldr	r2, [r3, #24]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	665a      	str	r2, [r3, #100]	; 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	661a      	str	r2, [r3, #96]	; 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00d      	beq.n	800887e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008870:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8008876:	4313      	orrs	r3, r2
 8008878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800887c:	e004      	b.n	8008888 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	3b01      	subs	r3, #1
 8008884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	0e9b      	lsrs	r3, r3, #26
 800888e:	f003 021f 	and.w	r2, r3, #31
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	f003 031f 	and.w	r3, r3, #31
 800889a:	fa02 f303 	lsl.w	r3, r2, r3
 800889e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80088a2:	4313      	orrs	r3, r2
 80088a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ac:	1e5a      	subs	r2, r3, #1
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	665a      	str	r2, [r3, #100]	; 0x64

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80088b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	661a      	str	r2, [r3, #96]	; 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088ce:	4b78      	ldr	r3, [pc, #480]	; (8008ab0 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 80088d0:	4013      	ands	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	6812      	ldr	r2, [r2, #0]
 80088da:	430b      	orrs	r3, r1
 80088dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff feb7 	bl	8008656 <LL_ADC_INJ_IsConversionOngoing>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d120      	bne.n	8008930 <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	7f5b      	ldrb	r3, [r3, #29]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d110      	bne.n	8008918 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	7f9b      	ldrb	r3, [r3, #30]
 8008904:	055a      	lsls	r2, r3, #21
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	7f1b      	ldrb	r3, [r3, #28]
 800890a:	051b      	lsls	r3, r3, #20
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	60da      	str	r2, [r3, #12]
 8008916:	e00b      	b.n	8008930 <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	7f9b      	ldrb	r3, [r3, #30]
 8008926:	055a      	lsls	r2, r3, #21
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff fe7b 	bl	8008630 <LL_ADC_REG_IsConversionOngoing>
 800893a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4618      	mov	r0, r3
 8008944:	f7ff fe87 	bl	8008656 <LL_ADC_INJ_IsConversionOngoing>
 8008948:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800894c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008950:	2b00      	cmp	r3, #0
 8008952:	f040 81b9 	bne.w	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x528>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800895a:	2b00      	cmp	r3, #0
 800895c:	f040 81b4 	bne.w	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x528>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	d115      	bne.n	800899c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	7f5b      	ldrb	r3, [r3, #29]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d108      	bne.n	800898a <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008986:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008988:	e01e      	b.n	80089c8 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008998:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800899a:	e015      	b.n	80089c8 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	7f5b      	ldrb	r3, [r3, #29]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d109      	bne.n	80089b8 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a8:	f043 0220 	orr.w	r2, r3, #32
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	659a      	str	r2, [r3, #88]	; 0x58

        tmp_hal_status = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80089b6:	e007      	b.n	80089c8 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80089c6:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d110      	bne.n	80089f4 <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	430b      	orrs	r3, r1
 80089e6:	431a      	orrs	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f042 0202 	orr.w	r2, r2, #2
 80089f0:	611a      	str	r2, [r3, #16]
 80089f2:	e007      	b.n	8008a04 <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691a      	ldr	r2, [r3, #16]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f022 0202 	bic.w	r2, r2, #2
 8008a02:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a0c:	d10f      	bne.n	8008a2e <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6818      	ldr	r0, [r3, #0]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2200      	movs	r2, #0
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f7ff fd7c 	bl	8008516 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff fd62 	bl	80084f0 <LL_ADC_SetSamplingTimeCommonConfig>
 8008a2c:	e00e      	b.n	8008a4c <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	6819      	ldr	r1, [r3, #0]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f7ff fd6b 	bl	8008516 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff fd52 	bl	80084f0 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	695a      	ldr	r2, [r3, #20]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	08db      	lsrs	r3, r3, #3
 8008a58:	f003 0303 	and.w	r3, r3, #3
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d00a      	beq.n	8008a84 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	6919      	ldr	r1, [r3, #16]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a7e:	f7ff fce9 	bl	8008454 <LL_ADC_SetOffset>
 8008a82:	e121      	b.n	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x528>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fd04 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008a90:	4603      	mov	r3, r0
 8008a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10c      	bne.n	8008ab4 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff fcf9 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	0e9b      	lsrs	r3, r3, #26
 8008aaa:	f003 021f 	and.w	r2, r3, #31
 8008aae:	e016      	b.n	8008ade <HAL_ADCEx_InjectedConfigChannel+0x33e>
 8008ab0:	82082000 	.word	0x82082000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7ff fcec 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aca:	fa93 f3a3 	rbit	r3, r3
 8008ace:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ad6:	fab3 f383 	clz	r3, r3
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d105      	bne.n	8008af6 <HAL_ADCEx_InjectedConfigChannel+0x356>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	0e9b      	lsrs	r3, r3, #26
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	e00a      	b.n	8008b0c <HAL_ADCEx_InjectedConfigChannel+0x36c>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008afc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008afe:	fa93 f3a3 	rbit	r3, r3
 8008b02:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8008b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b06:	fab3 f383 	clz	r3, r3
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d106      	bne.n	8008b1e <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2200      	movs	r2, #0
 8008b16:	2100      	movs	r1, #0
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7ff fcd1 	bl	80084c0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2101      	movs	r1, #1
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7ff fcb7 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2101      	movs	r1, #1
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fcac 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008b40:	4603      	mov	r3, r0
 8008b42:	0e9b      	lsrs	r3, r3, #26
 8008b44:	f003 021f 	and.w	r2, r3, #31
 8008b48:	e010      	b.n	8008b6c <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2101      	movs	r1, #1
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff fca1 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008b56:	4603      	mov	r3, r0
 8008b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b5c:	fa93 f3a3 	rbit	r3, r3
 8008b60:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b64:	fab3 f383 	clz	r3, r3
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d105      	bne.n	8008b84 <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	0e9b      	lsrs	r3, r3, #26
 8008b7e:	f003 031f 	and.w	r3, r3, #31
 8008b82:	e00a      	b.n	8008b9a <HAL_ADCEx_InjectedConfigChannel+0x3fa>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b8c:	fa93 f3a3 	rbit	r3, r3
 8008b90:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8008b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b94:	fab3 f383 	clz	r3, r3
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d106      	bne.n	8008bac <HAL_ADCEx_InjectedConfigChannel+0x40c>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff fc8a 	bl	80084c0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2102      	movs	r1, #2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7ff fc70 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10a      	bne.n	8008bd8 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2102      	movs	r1, #2
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff fc65 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	0e9b      	lsrs	r3, r3, #26
 8008bd2:	f003 021f 	and.w	r2, r3, #31
 8008bd6:	e010      	b.n	8008bfa <HAL_ADCEx_InjectedConfigChannel+0x45a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2102      	movs	r1, #2
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff fc5a 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008be4:	4603      	mov	r3, r0
 8008be6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bea:	fa93 f3a3 	rbit	r3, r3
 8008bee:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8008bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bf2:	fab3 f383 	clz	r3, r3
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d105      	bne.n	8008c12 <HAL_ADCEx_InjectedConfigChannel+0x472>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	0e9b      	lsrs	r3, r3, #26
 8008c0c:	f003 031f 	and.w	r3, r3, #31
 8008c10:	e00a      	b.n	8008c28 <HAL_ADCEx_InjectedConfigChannel+0x488>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c1a:	fa93 f3a3 	rbit	r3, r3
 8008c1e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c22:	fab3 f383 	clz	r3, r3
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d106      	bne.n	8008c3a <HAL_ADCEx_InjectedConfigChannel+0x49a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2200      	movs	r2, #0
 8008c32:	2102      	movs	r1, #2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff fc43 	bl	80084c0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2103      	movs	r1, #3
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fc29 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008c46:	4603      	mov	r3, r0
 8008c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10a      	bne.n	8008c66 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2103      	movs	r1, #3
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fc1e 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	0e9b      	lsrs	r3, r3, #26
 8008c60:	f003 021f 	and.w	r2, r3, #31
 8008c64:	e010      	b.n	8008c88 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2103      	movs	r1, #3
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff fc13 	bl	8008498 <LL_ADC_GetOffsetChannel>
 8008c72:	4603      	mov	r3, r0
 8008c74:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c78:	fa93 f3a3 	rbit	r3, r3
 8008c7c:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8008c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c80:	fab3 f383 	clz	r3, r3
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x500>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	0e9b      	lsrs	r3, r3, #26
 8008c9a:	f003 031f 	and.w	r3, r3, #31
 8008c9e:	e00a      	b.n	8008cb6 <HAL_ADCEx_InjectedConfigChannel+0x516>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca8:	fa93 f3a3 	rbit	r3, r3
 8008cac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8008cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cb0:	fab3 f383 	clz	r3, r3
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d106      	bne.n	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x528>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2103      	movs	r1, #3
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fbfc 	bl	80084c0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff fc6f 	bl	80085b0 <LL_ADC_IsEnabled>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f040 810c 	bne.w	8008ef2 <HAL_ADCEx_InjectedConfigChannel+0x752>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	6819      	ldr	r1, [r3, #0]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f7ff fc3e 	bl	8008568 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	4aa8      	ldr	r2, [pc, #672]	; (8008f94 <HAL_ADCEx_InjectedConfigChannel+0x7f4>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	f040 80fd 	bne.w	8008ef2 <HAL_ADCEx_InjectedConfigChannel+0x752>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10b      	bne.n	8008d20 <HAL_ADCEx_InjectedConfigChannel+0x580>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	0e9b      	lsrs	r3, r3, #26
 8008d0e:	3301      	adds	r3, #1
 8008d10:	f003 031f 	and.w	r3, r3, #31
 8008d14:	2b09      	cmp	r3, #9
 8008d16:	bf94      	ite	ls
 8008d18:	2301      	movls	r3, #1
 8008d1a:	2300      	movhi	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	e012      	b.n	8008d46 <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d28:	fa93 f3a3 	rbit	r3, r3
 8008d2c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d30:	fab3 f383 	clz	r3, r3
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	3301      	adds	r3, #1
 8008d38:	f003 031f 	and.w	r3, r3, #31
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	bf94      	ite	ls
 8008d40:	2301      	movls	r3, #1
 8008d42:	2300      	movhi	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d064      	beq.n	8008e14 <HAL_ADCEx_InjectedConfigChannel+0x674>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d107      	bne.n	8008d66 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	0e9b      	lsrs	r3, r3, #26
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	069b      	lsls	r3, r3, #26
 8008d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d64:	e00e      	b.n	8008d84 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6e:	fa93 f3a3 	rbit	r3, r3
 8008d72:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	fab3 f383 	clz	r3, r3
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	069b      	lsls	r3, r3, #26
 8008d80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d109      	bne.n	8008da4 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	0e9b      	lsrs	r3, r3, #26
 8008d96:	3301      	adds	r3, #1
 8008d98:	f003 031f 	and.w	r3, r3, #31
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008da2:	e010      	b.n	8008dc6 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	fa93 f3a3 	rbit	r3, r3
 8008db0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	fab3 f383 	clz	r3, r3
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	3301      	adds	r3, #1
 8008dbc:	f003 031f 	and.w	r3, r3, #31
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc6:	ea42 0103 	orr.w	r1, r2, r3
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <HAL_ADCEx_InjectedConfigChannel+0x64c>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	0e9b      	lsrs	r3, r3, #26
 8008ddc:	3301      	adds	r3, #1
 8008dde:	f003 021f 	and.w	r2, r3, #31
 8008de2:	4613      	mov	r3, r2
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	4413      	add	r3, r2
 8008de8:	051b      	lsls	r3, r3, #20
 8008dea:	e011      	b.n	8008e10 <HAL_ADCEx_InjectedConfigChannel+0x670>
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	fa93 f3a3 	rbit	r3, r3
 8008df8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	fab3 f383 	clz	r3, r3
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	3301      	adds	r3, #1
 8008e04:	f003 021f 	and.w	r2, r3, #31
 8008e08:	4613      	mov	r3, r2
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	4413      	add	r3, r2
 8008e0e:	051b      	lsls	r3, r3, #20
 8008e10:	430b      	orrs	r3, r1
 8008e12:	e069      	b.n	8008ee8 <HAL_ADCEx_InjectedConfigChannel+0x748>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d107      	bne.n	8008e30 <HAL_ADCEx_InjectedConfigChannel+0x690>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	0e9b      	lsrs	r3, r3, #26
 8008e26:	3301      	adds	r3, #1
 8008e28:	069b      	lsls	r3, r3, #26
 8008e2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008e2e:	e00e      	b.n	8008e4e <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	fa93 f3a3 	rbit	r3, r3
 8008e3c:	623b      	str	r3, [r7, #32]
  return result;
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	fab3 f383 	clz	r3, r3
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	3301      	adds	r3, #1
 8008e48:	069b      	lsls	r3, r3, #26
 8008e4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	0e9b      	lsrs	r3, r3, #26
 8008e60:	3301      	adds	r3, #1
 8008e62:	f003 031f 	and.w	r3, r3, #31
 8008e66:	2101      	movs	r1, #1
 8008e68:	fa01 f303 	lsl.w	r3, r1, r3
 8008e6c:	e010      	b.n	8008e90 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	fa93 f3a3 	rbit	r3, r3
 8008e7a:	61bb      	str	r3, [r7, #24]
  return result;
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	fab3 f383 	clz	r3, r3
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	3301      	adds	r3, #1
 8008e86:	f003 031f 	and.w	r3, r3, #31
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e90:	ea42 0103 	orr.w	r1, r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10d      	bne.n	8008ebc <HAL_ADCEx_InjectedConfigChannel+0x71c>
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	0e9b      	lsrs	r3, r3, #26
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	f003 021f 	and.w	r2, r3, #31
 8008eac:	4613      	mov	r3, r2
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	4413      	add	r3, r2
 8008eb2:	3b1e      	subs	r3, #30
 8008eb4:	051b      	lsls	r3, r3, #20
 8008eb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008eba:	e014      	b.n	8008ee6 <HAL_ADCEx_InjectedConfigChannel+0x746>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	fa93 f3a3 	rbit	r3, r3
 8008ec8:	613b      	str	r3, [r7, #16]
  return result;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	fab3 f383 	clz	r3, r3
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	f003 021f 	and.w	r2, r3, #31
 8008ed8:	4613      	mov	r3, r2
 8008eda:	005b      	lsls	r3, r3, #1
 8008edc:	4413      	add	r3, r2
 8008ede:	3b1e      	subs	r3, #30
 8008ee0:	051b      	lsls	r3, r3, #20
 8008ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ee6:	430b      	orrs	r3, r1
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	6892      	ldr	r2, [r2, #8]
 8008eec:	4619      	mov	r1, r3
 8008eee:	f7ff fb12 	bl	8008516 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	4b28      	ldr	r3, [pc, #160]	; (8008f98 <HAL_ADCEx_InjectedConfigChannel+0x7f8>)
 8008ef8:	4013      	ands	r3, r2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d072      	beq.n	8008fe4 <HAL_ADCEx_InjectedConfigChannel+0x844>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008efe:	4827      	ldr	r0, [pc, #156]	; (8008f9c <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8008f00:	f7ff fa99 	bl	8008436 <LL_ADC_GetCommonPathInternalCh>
 8008f04:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a24      	ldr	r2, [pc, #144]	; (8008fa0 <HAL_ADCEx_InjectedConfigChannel+0x800>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d126      	bne.n	8008f60 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d120      	bne.n	8008f60 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a20      	ldr	r2, [pc, #128]	; (8008fa4 <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d15d      	bne.n	8008fe4 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f30:	4619      	mov	r1, r3
 8008f32:	481a      	ldr	r0, [pc, #104]	; (8008f9c <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8008f34:	f7ff fa6c 	bl	8008410 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008f38:	4b1b      	ldr	r3, [pc, #108]	; (8008fa8 <HAL_ADCEx_InjectedConfigChannel+0x808>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	099b      	lsrs	r3, r3, #6
 8008f3e:	4a1b      	ldr	r2, [pc, #108]	; (8008fac <HAL_ADCEx_InjectedConfigChannel+0x80c>)
 8008f40:	fba2 2303 	umull	r2, r3, r2, r3
 8008f44:	099a      	lsrs	r2, r3, #6
 8008f46:	4613      	mov	r3, r2
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8008f50:	e002      	b.n	8008f58 <HAL_ADCEx_InjectedConfigChannel+0x7b8>
        {
          wait_loop_index--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1f9      	bne.n	8008f52 <HAL_ADCEx_InjectedConfigChannel+0x7b2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f5e:	e041      	b.n	8008fe4 <HAL_ADCEx_InjectedConfigChannel+0x844>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a12      	ldr	r2, [pc, #72]	; (8008fb0 <HAL_ADCEx_InjectedConfigChannel+0x810>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d124      	bne.n	8008fb4 <HAL_ADCEx_InjectedConfigChannel+0x814>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008f6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d11e      	bne.n	8008fb4 <HAL_ADCEx_InjectedConfigChannel+0x814>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a0a      	ldr	r2, [pc, #40]	; (8008fa4 <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d131      	bne.n	8008fe4 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4804      	ldr	r0, [pc, #16]	; (8008f9c <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8008f8c:	f7ff fa40 	bl	8008410 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f90:	e028      	b.n	8008fe4 <HAL_ADCEx_InjectedConfigChannel+0x844>
 8008f92:	bf00      	nop
 8008f94:	407f0000 	.word	0x407f0000
 8008f98:	80080000 	.word	0x80080000
 8008f9c:	50040300 	.word	0x50040300
 8008fa0:	c7520000 	.word	0xc7520000
 8008fa4:	50040000 	.word	0x50040000
 8008fa8:	20000038 	.word	0x20000038
 8008fac:	053e2d63 	.word	0x053e2d63
 8008fb0:	cb840000 	.word	0xcb840000
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a0f      	ldr	r2, [pc, #60]	; (8008ff8 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d112      	bne.n	8008fe4 <HAL_ADCEx_InjectedConfigChannel+0x844>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10c      	bne.n	8008fe4 <HAL_ADCEx_InjectedConfigChannel+0x844>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a0b      	ldr	r2, [pc, #44]	; (8008ffc <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d107      	bne.n	8008fe4 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fdc:	4619      	mov	r1, r3
 8008fde:	4808      	ldr	r0, [pc, #32]	; (8009000 <HAL_ADCEx_InjectedConfigChannel+0x860>)
 8008fe0:	f7ff fa16 	bl	8008410 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008fec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	37a0      	adds	r7, #160	; 0xa0
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	80000001 	.word	0x80000001
 8008ffc:	50040000 	.word	0x50040000
 8009000:	50040300 	.word	0x50040300

08009004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009014:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <__NVIC_SetPriorityGrouping+0x44>)
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009020:	4013      	ands	r3, r2
 8009022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800902c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009036:	4a04      	ldr	r2, [pc, #16]	; (8009048 <__NVIC_SetPriorityGrouping+0x44>)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	60d3      	str	r3, [r2, #12]
}
 800903c:	bf00      	nop
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	e000ed00 	.word	0xe000ed00

0800904c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800904c:	b480      	push	{r7}
 800904e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009050:	4b04      	ldr	r3, [pc, #16]	; (8009064 <__NVIC_GetPriorityGrouping+0x18>)
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	0a1b      	lsrs	r3, r3, #8
 8009056:	f003 0307 	and.w	r3, r3, #7
}
 800905a:	4618      	mov	r0, r3
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	e000ed00 	.word	0xe000ed00

08009068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	db0b      	blt.n	8009092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	f003 021f 	and.w	r2, r3, #31
 8009080:	4907      	ldr	r1, [pc, #28]	; (80090a0 <__NVIC_EnableIRQ+0x38>)
 8009082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009086:	095b      	lsrs	r3, r3, #5
 8009088:	2001      	movs	r0, #1
 800908a:	fa00 f202 	lsl.w	r2, r0, r2
 800908e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009092:	bf00      	nop
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	e000e100 	.word	0xe000e100

080090a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	db0a      	blt.n	80090ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	490c      	ldr	r1, [pc, #48]	; (80090f0 <__NVIC_SetPriority+0x4c>)
 80090be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090c2:	0112      	lsls	r2, r2, #4
 80090c4:	b2d2      	uxtb	r2, r2
 80090c6:	440b      	add	r3, r1
 80090c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80090cc:	e00a      	b.n	80090e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	4908      	ldr	r1, [pc, #32]	; (80090f4 <__NVIC_SetPriority+0x50>)
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	3b04      	subs	r3, #4
 80090dc:	0112      	lsls	r2, r2, #4
 80090de:	b2d2      	uxtb	r2, r2
 80090e0:	440b      	add	r3, r1
 80090e2:	761a      	strb	r2, [r3, #24]
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	e000e100 	.word	0xe000e100
 80090f4:	e000ed00 	.word	0xe000ed00

080090f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b089      	sub	sp, #36	; 0x24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f1c3 0307 	rsb	r3, r3, #7
 8009112:	2b04      	cmp	r3, #4
 8009114:	bf28      	it	cs
 8009116:	2304      	movcs	r3, #4
 8009118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	3304      	adds	r3, #4
 800911e:	2b06      	cmp	r3, #6
 8009120:	d902      	bls.n	8009128 <NVIC_EncodePriority+0x30>
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	3b03      	subs	r3, #3
 8009126:	e000      	b.n	800912a <NVIC_EncodePriority+0x32>
 8009128:	2300      	movs	r3, #0
 800912a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800912c:	f04f 32ff 	mov.w	r2, #4294967295
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	fa02 f303 	lsl.w	r3, r2, r3
 8009136:	43da      	mvns	r2, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	401a      	ands	r2, r3
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009140:	f04f 31ff 	mov.w	r1, #4294967295
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	fa01 f303 	lsl.w	r3, r1, r3
 800914a:	43d9      	mvns	r1, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009150:	4313      	orrs	r3, r2
         );
}
 8009152:	4618      	mov	r0, r3
 8009154:	3724      	adds	r7, #36	; 0x24
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
	...

08009160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3b01      	subs	r3, #1
 800916c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009170:	d301      	bcc.n	8009176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009172:	2301      	movs	r3, #1
 8009174:	e00f      	b.n	8009196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009176:	4a0a      	ldr	r2, [pc, #40]	; (80091a0 <SysTick_Config+0x40>)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3b01      	subs	r3, #1
 800917c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800917e:	210f      	movs	r1, #15
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	f7ff ff8e 	bl	80090a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009188:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <SysTick_Config+0x40>)
 800918a:	2200      	movs	r2, #0
 800918c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800918e:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <SysTick_Config+0x40>)
 8009190:	2207      	movs	r2, #7
 8009192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	e000e010 	.word	0xe000e010

080091a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7ff ff29 	bl	8009004 <__NVIC_SetPriorityGrouping>
}
 80091b2:	bf00      	nop
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b086      	sub	sp, #24
 80091be:	af00      	add	r7, sp, #0
 80091c0:	4603      	mov	r3, r0
 80091c2:	60b9      	str	r1, [r7, #8]
 80091c4:	607a      	str	r2, [r7, #4]
 80091c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80091c8:	2300      	movs	r3, #0
 80091ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80091cc:	f7ff ff3e 	bl	800904c <__NVIC_GetPriorityGrouping>
 80091d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	68b9      	ldr	r1, [r7, #8]
 80091d6:	6978      	ldr	r0, [r7, #20]
 80091d8:	f7ff ff8e 	bl	80090f8 <NVIC_EncodePriority>
 80091dc:	4602      	mov	r2, r0
 80091de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091e2:	4611      	mov	r1, r2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff ff5d 	bl	80090a4 <__NVIC_SetPriority>
}
 80091ea:	bf00      	nop
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b082      	sub	sp, #8
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	4603      	mov	r3, r0
 80091fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80091fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009200:	4618      	mov	r0, r3
 8009202:	f7ff ff31 	bl	8009068 <__NVIC_EnableIRQ>
}
 8009206:	bf00      	nop
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7ff ffa2 	bl	8009160 <SysTick_Config>
 800921c:	4603      	mov	r3, r0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e08d      	b.n	8009356 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	4b47      	ldr	r3, [pc, #284]	; (8009360 <HAL_DMA_Init+0x138>)
 8009242:	429a      	cmp	r2, r3
 8009244:	d80f      	bhi.n	8009266 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	4b45      	ldr	r3, [pc, #276]	; (8009364 <HAL_DMA_Init+0x13c>)
 800924e:	4413      	add	r3, r2
 8009250:	4a45      	ldr	r2, [pc, #276]	; (8009368 <HAL_DMA_Init+0x140>)
 8009252:	fba2 2303 	umull	r2, r3, r2, r3
 8009256:	091b      	lsrs	r3, r3, #4
 8009258:	009a      	lsls	r2, r3, #2
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a42      	ldr	r2, [pc, #264]	; (800936c <HAL_DMA_Init+0x144>)
 8009262:	641a      	str	r2, [r3, #64]	; 0x40
 8009264:	e00e      	b.n	8009284 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	4b40      	ldr	r3, [pc, #256]	; (8009370 <HAL_DMA_Init+0x148>)
 800926e:	4413      	add	r3, r2
 8009270:	4a3d      	ldr	r2, [pc, #244]	; (8009368 <HAL_DMA_Init+0x140>)
 8009272:	fba2 2303 	umull	r2, r3, r2, r3
 8009276:	091b      	lsrs	r3, r3, #4
 8009278:	009a      	lsls	r2, r3, #2
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a3c      	ldr	r2, [pc, #240]	; (8009374 <HAL_DMA_Init+0x14c>)
 8009282:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800929a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800929e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80092a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f966 	bl	80095a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092e4:	d102      	bne.n	80092ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f4:	b2d2      	uxtb	r2, r2
 80092f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009300:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d010      	beq.n	800932c <HAL_DMA_Init+0x104>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2b04      	cmp	r3, #4
 8009310:	d80c      	bhi.n	800932c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f986 	bl	8009624 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009328:	605a      	str	r2, [r3, #4]
 800932a:	e008      	b.n	800933e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	40020407 	.word	0x40020407
 8009364:	bffdfff8 	.word	0xbffdfff8
 8009368:	cccccccd 	.word	0xcccccccd
 800936c:	40020000 	.word	0x40020000
 8009370:	bffdfbf8 	.word	0xbffdfbf8
 8009374:	40020400 	.word	0x40020400

08009378 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_DMA_Start_IT+0x20>
 8009394:	2302      	movs	r3, #2
 8009396:	e066      	b.n	8009466 <HAL_DMA_Start_IT+0xee>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d155      	bne.n	8009458 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2202      	movs	r2, #2
 80093b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0201 	bic.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 f8ab 	bl	800952c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d008      	beq.n	80093f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f042 020e 	orr.w	r2, r2, #14
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e00f      	b.n	8009410 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 0204 	bic.w	r2, r2, #4
 80093fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f042 020a 	orr.w	r2, r2, #10
 800940e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d007      	beq.n	800942e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800942c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009432:	2b00      	cmp	r3, #0
 8009434:	d007      	beq.n	8009446 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009444:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f042 0201 	orr.w	r2, r2, #1
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e005      	b.n	8009464 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009460:	2302      	movs	r3, #2
 8009462:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009464:	7dfb      	ldrb	r3, [r7, #23]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d005      	beq.n	8009492 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2204      	movs	r2, #4
 800948a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	73fb      	strb	r3, [r7, #15]
 8009490:	e047      	b.n	8009522 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 020e 	bic.w	r2, r2, #14
 80094a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f022 0201 	bic.w	r2, r2, #1
 80094b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c6:	f003 021c 	and.w	r2, r3, #28
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ce:	2101      	movs	r1, #1
 80094d0:	fa01 f202 	lsl.w	r2, r1, r2
 80094d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80094de:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00c      	beq.n	8009502 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009500:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
    }
  }
  return status;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009542:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009548:	2b00      	cmp	r3, #0
 800954a:	d004      	beq.n	8009556 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009554:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955a:	f003 021c 	and.w	r2, r3, #28
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	2101      	movs	r1, #1
 8009564:	fa01 f202 	lsl.w	r2, r1, r2
 8009568:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	2b10      	cmp	r3, #16
 8009578:	d108      	bne.n	800958c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800958a:	e007      	b.n	800959c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	60da      	str	r2, [r3, #12]
}
 800959c:	bf00      	nop
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	4b17      	ldr	r3, [pc, #92]	; (8009614 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d80a      	bhi.n	80095d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c0:	089b      	lsrs	r3, r3, #2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095c8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	6493      	str	r3, [r2, #72]	; 0x48
 80095d0:	e007      	b.n	80095e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d6:	089b      	lsrs	r3, r3, #2
 80095d8:	009a      	lsls	r2, r3, #2
 80095da:	4b0f      	ldr	r3, [pc, #60]	; (8009618 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80095dc:	4413      	add	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	3b08      	subs	r3, #8
 80095ea:	4a0c      	ldr	r2, [pc, #48]	; (800961c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80095ec:	fba2 2303 	umull	r2, r3, r2, r3
 80095f0:	091b      	lsrs	r3, r3, #4
 80095f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a0a      	ldr	r2, [pc, #40]	; (8009620 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80095f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f003 031f 	and.w	r3, r3, #31
 8009600:	2201      	movs	r2, #1
 8009602:	409a      	lsls	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009608:	bf00      	nop
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	40020407 	.word	0x40020407
 8009618:	4002081c 	.word	0x4002081c
 800961c:	cccccccd 	.word	0xcccccccd
 8009620:	40020880 	.word	0x40020880

08009624 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	461a      	mov	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a08      	ldr	r2, [pc, #32]	; (8009668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009646:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3b01      	subs	r3, #1
 800964c:	f003 0303 	and.w	r3, r3, #3
 8009650:	2201      	movs	r2, #1
 8009652:	409a      	lsls	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009658:	bf00      	nop
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	1000823f 	.word	0x1000823f
 8009668:	40020940 	.word	0x40020940

0800966c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	460b      	mov	r3, r1
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800967e:	7afb      	ldrb	r3, [r7, #11]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d103      	bne.n	800968c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	605a      	str	r2, [r3, #4]
      break;
 800968a:	e002      	b.n	8009692 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	75fb      	strb	r3, [r7, #23]
      break;
 8009690:	bf00      	nop
  }

  return status;
 8009692:	7dfb      	ldrb	r3, [r7, #23]
}
 8009694:	4618      	mov	r0, r3
 8009696:	371c      	adds	r7, #28
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e003      	b.n	80096bc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80096ba:	2300      	movs	r3, #0
  }
}
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	0c1b      	lsrs	r3, r3, #16
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 031f 	and.w	r3, r3, #31
 80096e4:	2201      	movs	r2, #1
 80096e6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ea:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	4b0c      	ldr	r3, [pc, #48]	; (8009724 <HAL_EXTI_IRQHandler+0x5c>)
 80096f2:	4413      	add	r3, r2
 80096f4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	4013      	ands	r3, r2
 80096fe:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d009      	beq.n	800971a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	4798      	blx	r3
    }
  }
}
 800971a:	bf00      	nop
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	40010414 	.word	0x40010414

08009728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009728:	b480      	push	{r7}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009732:	2300      	movs	r3, #0
 8009734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009736:	e166      	b.n	8009a06 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	2101      	movs	r1, #1
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	fa01 f303 	lsl.w	r3, r1, r3
 8009744:	4013      	ands	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 8158 	beq.w	8009a00 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d003      	beq.n	8009760 <HAL_GPIO_Init+0x38>
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	2b12      	cmp	r3, #18
 800975e:	d123      	bne.n	80097a8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	08da      	lsrs	r2, r3, #3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3208      	adds	r2, #8
 8009768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	220f      	movs	r2, #15
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	43db      	mvns	r3, r3
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	4013      	ands	r3, r2
 8009782:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	691a      	ldr	r2, [r3, #16]
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	4313      	orrs	r3, r2
 8009798:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	08da      	lsrs	r2, r3, #3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3208      	adds	r2, #8
 80097a2:	6939      	ldr	r1, [r7, #16]
 80097a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	2203      	movs	r2, #3
 80097b4:	fa02 f303 	lsl.w	r3, r2, r3
 80097b8:	43db      	mvns	r3, r3
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	4013      	ands	r3, r2
 80097be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f003 0203 	and.w	r2, r3, #3
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	fa02 f303 	lsl.w	r3, r2, r3
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d00b      	beq.n	80097fc <HAL_GPIO_Init+0xd4>
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d007      	beq.n	80097fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80097f0:	2b11      	cmp	r3, #17
 80097f2:	d003      	beq.n	80097fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	2b12      	cmp	r3, #18
 80097fa:	d130      	bne.n	800985e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	2203      	movs	r2, #3
 8009808:	fa02 f303 	lsl.w	r3, r2, r3
 800980c:	43db      	mvns	r3, r3
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	4013      	ands	r3, r2
 8009812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	68da      	ldr	r2, [r3, #12]
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	fa02 f303 	lsl.w	r3, r2, r3
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009832:	2201      	movs	r2, #1
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	fa02 f303 	lsl.w	r3, r2, r3
 800983a:	43db      	mvns	r3, r3
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	4013      	ands	r3, r2
 8009840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	091b      	lsrs	r3, r3, #4
 8009848:	f003 0201 	and.w	r2, r3, #1
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	fa02 f303 	lsl.w	r3, r2, r3
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	4313      	orrs	r3, r2
 8009856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	2203      	movs	r2, #3
 800986a:	fa02 f303 	lsl.w	r3, r2, r3
 800986e:	43db      	mvns	r3, r3
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	4013      	ands	r3, r2
 8009874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	fa02 f303 	lsl.w	r3, r2, r3
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	4313      	orrs	r3, r2
 8009886:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 80b2 	beq.w	8009a00 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800989c:	4b61      	ldr	r3, [pc, #388]	; (8009a24 <HAL_GPIO_Init+0x2fc>)
 800989e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a0:	4a60      	ldr	r2, [pc, #384]	; (8009a24 <HAL_GPIO_Init+0x2fc>)
 80098a2:	f043 0301 	orr.w	r3, r3, #1
 80098a6:	6613      	str	r3, [r2, #96]	; 0x60
 80098a8:	4b5e      	ldr	r3, [pc, #376]	; (8009a24 <HAL_GPIO_Init+0x2fc>)
 80098aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	60bb      	str	r3, [r7, #8]
 80098b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80098b4:	4a5c      	ldr	r2, [pc, #368]	; (8009a28 <HAL_GPIO_Init+0x300>)
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	089b      	lsrs	r3, r3, #2
 80098ba:	3302      	adds	r3, #2
 80098bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	220f      	movs	r2, #15
 80098cc:	fa02 f303 	lsl.w	r3, r2, r3
 80098d0:	43db      	mvns	r3, r3
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	4013      	ands	r3, r2
 80098d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80098de:	d02b      	beq.n	8009938 <HAL_GPIO_Init+0x210>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a52      	ldr	r2, [pc, #328]	; (8009a2c <HAL_GPIO_Init+0x304>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d025      	beq.n	8009934 <HAL_GPIO_Init+0x20c>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a51      	ldr	r2, [pc, #324]	; (8009a30 <HAL_GPIO_Init+0x308>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d01f      	beq.n	8009930 <HAL_GPIO_Init+0x208>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a50      	ldr	r2, [pc, #320]	; (8009a34 <HAL_GPIO_Init+0x30c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d019      	beq.n	800992c <HAL_GPIO_Init+0x204>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a4f      	ldr	r2, [pc, #316]	; (8009a38 <HAL_GPIO_Init+0x310>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d013      	beq.n	8009928 <HAL_GPIO_Init+0x200>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a4e      	ldr	r2, [pc, #312]	; (8009a3c <HAL_GPIO_Init+0x314>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d00d      	beq.n	8009924 <HAL_GPIO_Init+0x1fc>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a4d      	ldr	r2, [pc, #308]	; (8009a40 <HAL_GPIO_Init+0x318>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d007      	beq.n	8009920 <HAL_GPIO_Init+0x1f8>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a4c      	ldr	r2, [pc, #304]	; (8009a44 <HAL_GPIO_Init+0x31c>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d101      	bne.n	800991c <HAL_GPIO_Init+0x1f4>
 8009918:	2307      	movs	r3, #7
 800991a:	e00e      	b.n	800993a <HAL_GPIO_Init+0x212>
 800991c:	2308      	movs	r3, #8
 800991e:	e00c      	b.n	800993a <HAL_GPIO_Init+0x212>
 8009920:	2306      	movs	r3, #6
 8009922:	e00a      	b.n	800993a <HAL_GPIO_Init+0x212>
 8009924:	2305      	movs	r3, #5
 8009926:	e008      	b.n	800993a <HAL_GPIO_Init+0x212>
 8009928:	2304      	movs	r3, #4
 800992a:	e006      	b.n	800993a <HAL_GPIO_Init+0x212>
 800992c:	2303      	movs	r3, #3
 800992e:	e004      	b.n	800993a <HAL_GPIO_Init+0x212>
 8009930:	2302      	movs	r3, #2
 8009932:	e002      	b.n	800993a <HAL_GPIO_Init+0x212>
 8009934:	2301      	movs	r3, #1
 8009936:	e000      	b.n	800993a <HAL_GPIO_Init+0x212>
 8009938:	2300      	movs	r3, #0
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	f002 0203 	and.w	r2, r2, #3
 8009940:	0092      	lsls	r2, r2, #2
 8009942:	4093      	lsls	r3, r2
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4313      	orrs	r3, r2
 8009948:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800994a:	4937      	ldr	r1, [pc, #220]	; (8009a28 <HAL_GPIO_Init+0x300>)
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	089b      	lsrs	r3, r3, #2
 8009950:	3302      	adds	r3, #2
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009958:	4b3b      	ldr	r3, [pc, #236]	; (8009a48 <HAL_GPIO_Init+0x320>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	43db      	mvns	r3, r3
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	4013      	ands	r3, r2
 8009966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d003      	beq.n	800997c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4313      	orrs	r3, r2
 800997a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800997c:	4a32      	ldr	r2, [pc, #200]	; (8009a48 <HAL_GPIO_Init+0x320>)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009982:	4b31      	ldr	r3, [pc, #196]	; (8009a48 <HAL_GPIO_Init+0x320>)
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	43db      	mvns	r3, r3
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	4013      	ands	r3, r2
 8009990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80099a6:	4a28      	ldr	r2, [pc, #160]	; (8009a48 <HAL_GPIO_Init+0x320>)
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80099ac:	4b26      	ldr	r3, [pc, #152]	; (8009a48 <HAL_GPIO_Init+0x320>)
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	43db      	mvns	r3, r3
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	4013      	ands	r3, r2
 80099ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d003      	beq.n	80099d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80099d0:	4a1d      	ldr	r2, [pc, #116]	; (8009a48 <HAL_GPIO_Init+0x320>)
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80099d6:	4b1c      	ldr	r3, [pc, #112]	; (8009a48 <HAL_GPIO_Init+0x320>)
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	43db      	mvns	r3, r3
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4013      	ands	r3, r2
 80099e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80099fa:	4a13      	ldr	r2, [pc, #76]	; (8009a48 <HAL_GPIO_Init+0x320>)
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	3301      	adds	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f47f ae91 	bne.w	8009738 <HAL_GPIO_Init+0x10>
  }
}
 8009a16:	bf00      	nop
 8009a18:	bf00      	nop
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	40021000 	.word	0x40021000
 8009a28:	40010000 	.word	0x40010000
 8009a2c:	48000400 	.word	0x48000400
 8009a30:	48000800 	.word	0x48000800
 8009a34:	48000c00 	.word	0x48000c00
 8009a38:	48001000 	.word	0x48001000
 8009a3c:	48001400 	.word	0x48001400
 8009a40:	48001800 	.word	0x48001800
 8009a44:	48001c00 	.word	0x48001c00
 8009a48:	40010400 	.word	0x40010400

08009a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	691a      	ldr	r2, [r3, #16]
 8009a5c:	887b      	ldrh	r3, [r7, #2]
 8009a5e:	4013      	ands	r3, r2
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009a64:	2301      	movs	r3, #1
 8009a66:	73fb      	strb	r3, [r7, #15]
 8009a68:	e001      	b.n	8009a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	807b      	strh	r3, [r7, #2]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009a8c:	787b      	ldrb	r3, [r7, #1]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009a92:	887a      	ldrh	r2, [r7, #2]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009a98:	e002      	b.n	8009aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009a9a:	887a      	ldrh	r2, [r7, #2]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	695a      	ldr	r2, [r3, #20]
 8009abc:	887b      	ldrh	r3, [r7, #2]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d003      	beq.n	8009acc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009ac4:	887a      	ldrh	r2, [r7, #2]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009aca:	e002      	b.n	8009ad2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009acc:	887a      	ldrh	r2, [r7, #2]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	619a      	str	r2, [r3, #24]
}
 8009ad2:	bf00      	nop
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
	...

08009ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009aea:	4b08      	ldr	r3, [pc, #32]	; (8009b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009aec:	695a      	ldr	r2, [r3, #20]
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	4013      	ands	r3, r2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d006      	beq.n	8009b04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009af6:	4a05      	ldr	r2, [pc, #20]	; (8009b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009af8:	88fb      	ldrh	r3, [r7, #6]
 8009afa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009afc:	88fb      	ldrh	r3, [r7, #6]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fa fb82 	bl	8004208 <HAL_GPIO_EXTI_Callback>
  }
}
 8009b04:	bf00      	nop
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	40010400 	.word	0x40010400

08009b10 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	; 0x28
 8009b14:	af02      	add	r7, sp, #8
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	4608      	mov	r0, r1
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	817b      	strh	r3, [r7, #10]
 8009b22:	460b      	mov	r3, r1
 8009b24:	813b      	strh	r3, [r7, #8]
 8009b26:	4613      	mov	r3, r2
 8009b28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b20      	cmp	r3, #32
 8009b34:	f040 80d5 	bne.w	8009ce2 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <HAL_I2C_Mem_Write_DMA+0x34>
 8009b3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d105      	bne.n	8009b50 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e0c9      	b.n	8009ce4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b5e:	d101      	bne.n	8009b64 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8009b60:	2302      	movs	r3, #2
 8009b62:	e0bf      	b.n	8009ce4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d101      	bne.n	8009b72 <HAL_I2C_Mem_Write_DMA+0x62>
 8009b6e:	2302      	movs	r3, #2
 8009b70:	e0b8      	b.n	8009ce4 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009b7a:	f7fd ff53 	bl	8007a24 <HAL_GetTick>
 8009b7e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2221      	movs	r2, #33	; 0x21
 8009b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2240      	movs	r2, #64	; 0x40
 8009b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4a51      	ldr	r2, [pc, #324]	; (8009cec <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8009ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4a51      	ldr	r2, [pc, #324]	; (8009cf0 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8009bac:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	2bff      	cmp	r3, #255	; 0xff
 8009bb6:	d906      	bls.n	8009bc6 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	22ff      	movs	r2, #255	; 0xff
 8009bbc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009bbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bc2:	61fb      	str	r3, [r7, #28]
 8009bc4:	e007      	b.n	8009bd6 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bd4:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009bd6:	88f8      	ldrh	r0, [r7, #6]
 8009bd8:	893a      	ldrh	r2, [r7, #8]
 8009bda:	8979      	ldrh	r1, [r7, #10]
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	2319      	movs	r3, #25
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	4603      	mov	r3, r0
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 fcba 	bl	800a560 <I2C_RequestMemoryWrite>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d005      	beq.n	8009bfe <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e072      	b.n	8009ce4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d020      	beq.n	8009c48 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	4a3a      	ldr	r2, [pc, #232]	; (8009cf4 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8009c0c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c12:	4a39      	ldr	r2, [pc, #228]	; (8009cf8 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8009c14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c22:	2200      	movs	r2, #0
 8009c24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3328      	adds	r3, #40	; 0x28
 8009c32:	461a      	mov	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c38:	f7ff fb9e 	bl	8009378 <HAL_DMA_Start_IT>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d139      	bne.n	8009cba <HAL_I2C_Mem_Write_DMA+0x1aa>
 8009c46:	e013      	b.n	8009c70 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e039      	b.n	8009ce4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	8979      	ldrh	r1, [r7, #10]
 8009c78:	2300      	movs	r3, #0
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f001 fa86 	bl	800b190 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009c9e:	2111      	movs	r1, #17
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f001 faa3 	bl	800b1ec <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cb4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	e014      	b.n	8009ce4 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cce:	f043 0210 	orr.w	r2, r3, #16
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8009ce2:	2302      	movs	r3, #2
  }
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3720      	adds	r7, #32
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	ffff0000 	.word	0xffff0000
 8009cf0:	0800a1e9 	.word	0x0800a1e9
 8009cf4:	0800ae1d 	.word	0x0800ae1d
 8009cf8:	0800af49 	.word	0x0800af49

08009cfc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08a      	sub	sp, #40	; 0x28
 8009d00:	af02      	add	r7, sp, #8
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	4608      	mov	r0, r1
 8009d06:	4611      	mov	r1, r2
 8009d08:	461a      	mov	r2, r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	817b      	strh	r3, [r7, #10]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	813b      	strh	r3, [r7, #8]
 8009d12:	4613      	mov	r3, r2
 8009d14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b20      	cmp	r3, #32
 8009d20:	f040 80d5 	bne.w	8009ece <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <HAL_I2C_Mem_Read_DMA+0x34>
 8009d2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d105      	bne.n	8009d3c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e0c9      	b.n	8009ed0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d4a:	d101      	bne.n	8009d50 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e0bf      	b.n	8009ed0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d101      	bne.n	8009d5e <HAL_I2C_Mem_Read_DMA+0x62>
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	e0b8      	b.n	8009ed0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009d66:	f7fd fe5d 	bl	8007a24 <HAL_GetTick>
 8009d6a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2222      	movs	r2, #34	; 0x22
 8009d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2240      	movs	r2, #64	; 0x40
 8009d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	4a51      	ldr	r2, [pc, #324]	; (8009ed8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8009d92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	4a51      	ldr	r2, [pc, #324]	; (8009edc <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8009d98:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	2bff      	cmp	r3, #255	; 0xff
 8009da2:	d906      	bls.n	8009db2 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	22ff      	movs	r2, #255	; 0xff
 8009da8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009dae:	61fb      	str	r3, [r7, #28]
 8009db0:	e007      	b.n	8009dc2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dc0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009dc2:	88f8      	ldrh	r0, [r7, #6]
 8009dc4:	893a      	ldrh	r2, [r7, #8]
 8009dc6:	8979      	ldrh	r1, [r7, #10]
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	9301      	str	r3, [sp, #4]
 8009dcc:	2319      	movs	r3, #25
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 fc18 	bl	800a608 <I2C_RequestMemoryRead>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d005      	beq.n	8009dea <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e072      	b.n	8009ed0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d020      	beq.n	8009e34 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df6:	4a3a      	ldr	r2, [pc, #232]	; (8009ee0 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8009df8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dfe:	4a39      	ldr	r2, [pc, #228]	; (8009ee4 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8009e00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e06:	2200      	movs	r2, #0
 8009e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0e:	2200      	movs	r2, #0
 8009e10:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3324      	adds	r3, #36	; 0x24
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e24:	f7ff faa8 	bl	8009378 <HAL_DMA_Start_IT>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d139      	bne.n	8009ea6 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8009e32:	e013      	b.n	8009e5c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2220      	movs	r2, #32
 8009e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e039      	b.n	8009ed0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	8979      	ldrh	r1, [r7, #10]
 8009e64:	4b20      	ldr	r3, [pc, #128]	; (8009ee8 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f001 f990 	bl	800b190 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009e8a:	2111      	movs	r1, #17
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f001 f9ad 	bl	800b1ec <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ea0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e014      	b.n	8009ed0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eba:	f043 0210 	orr.w	r2, r3, #16
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e000      	b.n	8009ed0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8009ece:	2302      	movs	r3, #2
  }
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3720      	adds	r7, #32
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	ffff0000 	.word	0xffff0000
 8009edc:	0800a1e9 	.word	0x0800a1e9
 8009ee0:	0800aeb3 	.word	0x0800aeb3
 8009ee4:	0800af49 	.word	0x0800af49
 8009ee8:	80002400 	.word	0x80002400

08009eec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d005      	beq.n	8009f18 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	68f9      	ldr	r1, [r7, #12]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	4798      	blx	r3
  }
}
 8009f18:	bf00      	nop
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	0a1b      	lsrs	r3, r3, #8
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d010      	beq.n	8009f66 <HAL_I2C_ER_IRQHandler+0x46>
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	09db      	lsrs	r3, r3, #7
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00a      	beq.n	8009f66 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f54:	f043 0201 	orr.w	r2, r3, #1
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f64:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	0a9b      	lsrs	r3, r3, #10
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d010      	beq.n	8009f94 <HAL_I2C_ER_IRQHandler+0x74>
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	09db      	lsrs	r3, r3, #7
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f82:	f043 0208 	orr.w	r2, r3, #8
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f92:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	0a5b      	lsrs	r3, r3, #9
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d010      	beq.n	8009fc2 <HAL_I2C_ER_IRQHandler+0xa2>
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	09db      	lsrs	r3, r3, #7
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb0:	f043 0202 	orr.w	r2, r3, #2
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fc0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f003 030b 	and.w	r3, r3, #11
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8009fd2:	68f9      	ldr	r1, [r7, #12]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fe3b 	bl	800ac50 <I2C_ITError>
  }
}
 8009fda:	bf00      	nop
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b086      	sub	sp, #24
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d101      	bne.n	800a006 <I2C_Slave_ISR_IT+0x24>
 800a002:	2302      	movs	r3, #2
 800a004:	e0ec      	b.n	800a1e0 <I2C_Slave_ISR_IT+0x1fe>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	095b      	lsrs	r3, r3, #5
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	d009      	beq.n	800a02e <I2C_Slave_ISR_IT+0x4c>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	095b      	lsrs	r3, r3, #5
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d003      	beq.n	800a02e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a026:	6939      	ldr	r1, [r7, #16]
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 fce1 	bl	800a9f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	091b      	lsrs	r3, r3, #4
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d04d      	beq.n	800a0d6 <I2C_Slave_ISR_IT+0xf4>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	091b      	lsrs	r3, r3, #4
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	2b00      	cmp	r3, #0
 800a044:	d047      	beq.n	800a0d6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d128      	bne.n	800a0a2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b28      	cmp	r3, #40	; 0x28
 800a05a:	d108      	bne.n	800a06e <I2C_Slave_ISR_IT+0x8c>
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a062:	d104      	bne.n	800a06e <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a064:	6939      	ldr	r1, [r7, #16]
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f000 fd9c 	bl	800aba4 <I2C_ITListenCplt>
 800a06c:	e032      	b.n	800a0d4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b29      	cmp	r3, #41	; 0x29
 800a078:	d10e      	bne.n	800a098 <I2C_Slave_ISR_IT+0xb6>
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a080:	d00a      	beq.n	800a098 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2210      	movs	r2, #16
 800a088:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 fea2 	bl	800add4 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 fbce 	bl	800a832 <I2C_ITSlaveSeqCplt>
 800a096:	e01d      	b.n	800a0d4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2210      	movs	r2, #16
 800a09e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a0a0:	e096      	b.n	800a1d0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2210      	movs	r2, #16
 800a0a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ae:	f043 0204 	orr.w	r2, r3, #4
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d004      	beq.n	800a0c6 <I2C_Slave_ISR_IT+0xe4>
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0c2:	f040 8085 	bne.w	800a1d0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 fdbf 	bl	800ac50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a0d2:	e07d      	b.n	800a1d0 <I2C_Slave_ISR_IT+0x1ee>
 800a0d4:	e07c      	b.n	800a1d0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	089b      	lsrs	r3, r3, #2
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d030      	beq.n	800a144 <I2C_Slave_ISR_IT+0x162>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	089b      	lsrs	r3, r3, #2
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d02a      	beq.n	800a144 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d018      	beq.n	800a12a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	b2d2      	uxtb	r2, r2
 800a104:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a114:	3b01      	subs	r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a120:	b29b      	uxth	r3, r3
 800a122:	3b01      	subs	r3, #1
 800a124:	b29a      	uxth	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a12e:	b29b      	uxth	r3, r3
 800a130:	2b00      	cmp	r3, #0
 800a132:	d14f      	bne.n	800a1d4 <I2C_Slave_ISR_IT+0x1f2>
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a13a:	d04b      	beq.n	800a1d4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 fb78 	bl	800a832 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a142:	e047      	b.n	800a1d4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	08db      	lsrs	r3, r3, #3
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00a      	beq.n	800a166 <I2C_Slave_ISR_IT+0x184>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	08db      	lsrs	r3, r3, #3
 800a154:	f003 0301 	and.w	r3, r3, #1
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a15c:	6939      	ldr	r1, [r7, #16]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 faa6 	bl	800a6b0 <I2C_ITAddrCplt>
 800a164:	e037      	b.n	800a1d6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	085b      	lsrs	r3, r3, #1
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d031      	beq.n	800a1d6 <I2C_Slave_ISR_IT+0x1f4>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	085b      	lsrs	r3, r3, #1
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d02b      	beq.n	800a1d6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a182:	b29b      	uxth	r3, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	d018      	beq.n	800a1ba <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18c:	781a      	ldrb	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a198:	1c5a      	adds	r2, r3, #1
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	851a      	strh	r2, [r3, #40]	; 0x28
 800a1b8:	e00d      	b.n	800a1d6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1c0:	d002      	beq.n	800a1c8 <I2C_Slave_ISR_IT+0x1e6>
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d106      	bne.n	800a1d6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 fb32 	bl	800a832 <I2C_ITSlaveSeqCplt>
 800a1ce:	e002      	b.n	800a1d6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800a1d0:	bf00      	nop
 800a1d2:	e000      	b.n	800a1d6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800a1d4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d101      	bne.n	800a202 <I2C_Master_ISR_DMA+0x1a>
 800a1fe:	2302      	movs	r3, #2
 800a200:	e0e1      	b.n	800a3c6 <I2C_Master_ISR_DMA+0x1de>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	091b      	lsrs	r3, r3, #4
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	2b00      	cmp	r3, #0
 800a214:	d017      	beq.n	800a246 <I2C_Master_ISR_DMA+0x5e>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	091b      	lsrs	r3, r3, #4
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d011      	beq.n	800a246 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2210      	movs	r2, #16
 800a228:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22e:	f043 0204 	orr.w	r2, r3, #4
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a236:	2112      	movs	r1, #18
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 ffd7 	bl	800b1ec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 fdc8 	bl	800add4 <I2C_Flush_TXDR>
 800a244:	e0ba      	b.n	800a3bc <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	09db      	lsrs	r3, r3, #7
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d072      	beq.n	800a338 <I2C_Master_ISR_DMA+0x150>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	099b      	lsrs	r3, r3, #6
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d06c      	beq.n	800a338 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a26c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a272:	b29b      	uxth	r3, r3
 800a274:	2b00      	cmp	r3, #0
 800a276:	d04e      	beq.n	800a316 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	b29b      	uxth	r3, r3
 800a280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a284:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	2bff      	cmp	r3, #255	; 0xff
 800a28e:	d906      	bls.n	800a29e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	22ff      	movs	r2, #255	; 0xff
 800a294:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800a296:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a29a:	617b      	str	r3, [r7, #20]
 800a29c:	e010      	b.n	800a2c0 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a2b0:	d003      	beq.n	800a2ba <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	617b      	str	r3, [r7, #20]
 800a2b8:	e002      	b.n	800a2c0 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a2ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2be:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	8a79      	ldrh	r1, [r7, #18]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f000 ff5e 	bl	800b190 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b22      	cmp	r3, #34	; 0x22
 800a2f0:	d108      	bne.n	800a304 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a300:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a302:	e05b      	b.n	800a3bc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a312:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a314:	e052      	b.n	800a3bc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a320:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a324:	d003      	beq.n	800a32e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 fa44 	bl	800a7b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a32c:	e046      	b.n	800a3bc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a32e:	2140      	movs	r1, #64	; 0x40
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 fc8d 	bl	800ac50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a336:	e041      	b.n	800a3bc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	099b      	lsrs	r3, r3, #6
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	2b00      	cmp	r3, #0
 800a342:	d029      	beq.n	800a398 <I2C_Master_ISR_DMA+0x1b0>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	099b      	lsrs	r3, r3, #6
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d023      	beq.n	800a398 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a354:	b29b      	uxth	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d119      	bne.n	800a38e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a368:	d027      	beq.n	800a3ba <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a372:	d108      	bne.n	800a386 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a382:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a384:	e019      	b.n	800a3ba <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f000 fa14 	bl	800a7b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a38c:	e015      	b.n	800a3ba <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a38e:	2140      	movs	r1, #64	; 0x40
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f000 fc5d 	bl	800ac50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a396:	e010      	b.n	800a3ba <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	095b      	lsrs	r3, r3, #5
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00b      	beq.n	800a3bc <I2C_Master_ISR_DMA+0x1d4>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	095b      	lsrs	r3, r3, #5
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d005      	beq.n	800a3bc <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a3b0:	68b9      	ldr	r1, [r7, #8]
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f000 fa7c 	bl	800a8b0 <I2C_ITMasterCplt>
 800a3b8:	e000      	b.n	800a3bc <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800a3ba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b086      	sub	sp, #24
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	60f8      	str	r0, [r7, #12]
 800a3d6:	60b9      	str	r1, [r7, #8]
 800a3d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3de:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d101      	bne.n	800a3f2 <I2C_Slave_ISR_DMA+0x24>
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	e0b1      	b.n	800a556 <I2C_Slave_ISR_DMA+0x188>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	095b      	lsrs	r3, r3, #5
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d009      	beq.n	800a41a <I2C_Slave_ISR_DMA+0x4c>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	095b      	lsrs	r3, r3, #5
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a412:	68b9      	ldr	r1, [r7, #8]
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 faeb 	bl	800a9f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	091b      	lsrs	r3, r3, #4
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 8082 	beq.w	800a52c <I2C_Slave_ISR_DMA+0x15e>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	091b      	lsrs	r3, r3, #4
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	d07b      	beq.n	800a52c <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	0b9b      	lsrs	r3, r3, #14
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d105      	bne.n	800a44c <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	0bdb      	lsrs	r3, r3, #15
 800a444:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d068      	beq.n	800a51e <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00d      	beq.n	800a470 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	0bdb      	lsrs	r3, r3, #15
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d007      	beq.n	800a470 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 800a46c:	2301      	movs	r3, #1
 800a46e:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00d      	beq.n	800a494 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	0b9b      	lsrs	r3, r3, #14
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d007      	beq.n	800a494 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 800a490:	2301      	movs	r3, #1
 800a492:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d128      	bne.n	800a4ec <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b28      	cmp	r3, #40	; 0x28
 800a4a4:	d108      	bne.n	800a4b8 <I2C_Slave_ISR_DMA+0xea>
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4ac:	d104      	bne.n	800a4b8 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a4ae:	68b9      	ldr	r1, [r7, #8]
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 fb77 	bl	800aba4 <I2C_ITListenCplt>
 800a4b6:	e031      	b.n	800a51c <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b29      	cmp	r3, #41	; 0x29
 800a4c2:	d10e      	bne.n	800a4e2 <I2C_Slave_ISR_DMA+0x114>
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a4ca:	d00a      	beq.n	800a4e2 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2210      	movs	r2, #16
 800a4d2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 fc7d 	bl	800add4 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 f9a9 	bl	800a832 <I2C_ITSlaveSeqCplt>
 800a4e0:	e01c      	b.n	800a51c <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2210      	movs	r2, #16
 800a4e8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a4ea:	e01d      	b.n	800a528 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2210      	movs	r2, #16
 800a4f2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f8:	f043 0204 	orr.w	r2, r3, #4
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <I2C_Slave_ISR_DMA+0x140>
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a50c:	d10c      	bne.n	800a528 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a512:	4619      	mov	r1, r3
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 fb9b 	bl	800ac50 <I2C_ITError>
      if (treatdmanack == 1U)
 800a51a:	e005      	b.n	800a528 <I2C_Slave_ISR_DMA+0x15a>
 800a51c:	e004      	b.n	800a528 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2210      	movs	r2, #16
 800a524:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a526:	e011      	b.n	800a54c <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 800a528:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a52a:	e00f      	b.n	800a54c <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	08db      	lsrs	r3, r3, #3
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d009      	beq.n	800a54c <I2C_Slave_ISR_DMA+0x17e>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	08db      	lsrs	r3, r3, #3
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d003      	beq.n	800a54c <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f000 f8b2 	bl	800a6b0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af02      	add	r7, sp, #8
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	4608      	mov	r0, r1
 800a56a:	4611      	mov	r1, r2
 800a56c:	461a      	mov	r2, r3
 800a56e:	4603      	mov	r3, r0
 800a570:	817b      	strh	r3, [r7, #10]
 800a572:	460b      	mov	r3, r1
 800a574:	813b      	strh	r3, [r7, #8]
 800a576:	4613      	mov	r3, r2
 800a578:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a57a:	88fb      	ldrh	r3, [r7, #6]
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	8979      	ldrh	r1, [r7, #10]
 800a580:	4b20      	ldr	r3, [pc, #128]	; (800a604 <I2C_RequestMemoryWrite+0xa4>)
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 fe01 	bl	800b190 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a58e:	69fa      	ldr	r2, [r7, #28]
 800a590:	69b9      	ldr	r1, [r7, #24]
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 fd55 	bl	800b042 <I2C_WaitOnTXISFlagUntilTimeout>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e02c      	b.n	800a5fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5a2:	88fb      	ldrh	r3, [r7, #6]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d105      	bne.n	800a5b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5a8:	893b      	ldrh	r3, [r7, #8]
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	629a      	str	r2, [r3, #40]	; 0x28
 800a5b2:	e015      	b.n	800a5e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a5b4:	893b      	ldrh	r3, [r7, #8]
 800a5b6:	0a1b      	lsrs	r3, r3, #8
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	69b9      	ldr	r1, [r7, #24]
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f000 fd3b 	bl	800b042 <I2C_WaitOnTXISFlagUntilTimeout>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e012      	b.n	800a5fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5d6:	893b      	ldrh	r3, [r7, #8]
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2180      	movs	r1, #128	; 0x80
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 fce9 	bl	800afc2 <I2C_WaitOnFlagUntilTimeout>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e000      	b.n	800a5fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	80002000 	.word	0x80002000

0800a608 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af02      	add	r7, sp, #8
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	4608      	mov	r0, r1
 800a612:	4611      	mov	r1, r2
 800a614:	461a      	mov	r2, r3
 800a616:	4603      	mov	r3, r0
 800a618:	817b      	strh	r3, [r7, #10]
 800a61a:	460b      	mov	r3, r1
 800a61c:	813b      	strh	r3, [r7, #8]
 800a61e:	4613      	mov	r3, r2
 800a620:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a622:	88fb      	ldrh	r3, [r7, #6]
 800a624:	b2da      	uxtb	r2, r3
 800a626:	8979      	ldrh	r1, [r7, #10]
 800a628:	4b20      	ldr	r3, [pc, #128]	; (800a6ac <I2C_RequestMemoryRead+0xa4>)
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	2300      	movs	r3, #0
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f000 fdae 	bl	800b190 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a634:	69fa      	ldr	r2, [r7, #28]
 800a636:	69b9      	ldr	r1, [r7, #24]
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f000 fd02 	bl	800b042 <I2C_WaitOnTXISFlagUntilTimeout>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e02c      	b.n	800a6a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a648:	88fb      	ldrh	r3, [r7, #6]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d105      	bne.n	800a65a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a64e:	893b      	ldrh	r3, [r7, #8]
 800a650:	b2da      	uxtb	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	629a      	str	r2, [r3, #40]	; 0x28
 800a658:	e015      	b.n	800a686 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a65a:	893b      	ldrh	r3, [r7, #8]
 800a65c:	0a1b      	lsrs	r3, r3, #8
 800a65e:	b29b      	uxth	r3, r3
 800a660:	b2da      	uxtb	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	69b9      	ldr	r1, [r7, #24]
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 fce8 	bl	800b042 <I2C_WaitOnTXISFlagUntilTimeout>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e012      	b.n	800a6a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a67c:	893b      	ldrh	r3, [r7, #8]
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	2200      	movs	r2, #0
 800a68e:	2140      	movs	r1, #64	; 0x40
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 fc96 	bl	800afc2 <I2C_WaitOnFlagUntilTimeout>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e000      	b.n	800a6a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	80002000 	.word	0x80002000

0800a6b0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a6c6:	2b28      	cmp	r3, #40	; 0x28
 800a6c8:	d168      	bne.n	800a79c <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	0c1b      	lsrs	r3, r3, #16
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	f003 0301 	and.w	r3, r3, #1
 800a6d8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	0c1b      	lsrs	r3, r3, #16
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a6e8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6f6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a704:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d137      	bne.n	800a77e <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800a70e:	897b      	ldrh	r3, [r7, #10]
 800a710:	09db      	lsrs	r3, r3, #7
 800a712:	b29a      	uxth	r2, r3
 800a714:	89bb      	ldrh	r3, [r7, #12]
 800a716:	4053      	eors	r3, r2
 800a718:	b29b      	uxth	r3, r3
 800a71a:	f003 0306 	and.w	r3, r3, #6
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d11c      	bne.n	800a75c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a722:	897b      	ldrh	r3, [r7, #10]
 800a724:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a734:	2b02      	cmp	r3, #2
 800a736:	d139      	bne.n	800a7ac <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2208      	movs	r2, #8
 800a744:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a752:	89ba      	ldrh	r2, [r7, #12]
 800a754:	7bf9      	ldrb	r1, [r7, #15]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a75a:	e027      	b.n	800a7ac <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800a75c:	893b      	ldrh	r3, [r7, #8]
 800a75e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a760:	2104      	movs	r1, #4
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fdb0 	bl	800b2c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a774:	89ba      	ldrh	r2, [r7, #12]
 800a776:	7bf9      	ldrb	r1, [r7, #15]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	4798      	blx	r3
}
 800a77c:	e016      	b.n	800a7ac <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a77e:	2104      	movs	r1, #4
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fda1 	bl	800b2c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a792:	89ba      	ldrh	r2, [r7, #12]
 800a794:	7bf9      	ldrb	r1, [r7, #15]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	4798      	blx	r3
}
 800a79a:	e007      	b.n	800a7ac <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2208      	movs	r2, #8
 800a7a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a7ac:	bf00      	nop
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	2b21      	cmp	r3, #33	; 0x21
 800a7ce:	d116      	bne.n	800a7fe <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2211      	movs	r2, #17
 800a7dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fd6e 	bl	800b2c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a7fc:	e015      	b.n	800a82a <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2212      	movs	r2, #18
 800a80a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a812:	2102      	movs	r1, #2
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fd57 	bl	800b2c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	4798      	blx	r3
}
 800a82a:	bf00      	nop
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b082      	sub	sp, #8
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b29      	cmp	r3, #41	; 0x29
 800a84c:	d113      	bne.n	800a876 <I2C_ITSlaveSeqCplt+0x44>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2228      	movs	r2, #40	; 0x28
 800a852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2221      	movs	r2, #33	; 0x21
 800a85a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a85c:	2101      	movs	r1, #1
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fd32 	bl	800b2c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 800a874:	e018      	b.n	800a8a8 <I2C_ITSlaveSeqCplt+0x76>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	2b2a      	cmp	r3, #42	; 0x2a
 800a880:	d112      	bne.n	800a8a8 <I2C_ITSlaveSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2228      	movs	r2, #40	; 0x28
 800a886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2222      	movs	r2, #34	; 0x22
 800a88e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a890:	2102      	movs	r1, #2
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fd18 	bl	800b2c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	4798      	blx	r3
}
 800a8a8:	bf00      	nop
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6859      	ldr	r1, [r3, #4]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	4b46      	ldr	r3, [pc, #280]	; (800a9e8 <I2C_ITMasterCplt+0x138>)
 800a8ce:	400b      	ands	r3, r1
 800a8d0:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a42      	ldr	r2, [pc, #264]	; (800a9ec <I2C_ITMasterCplt+0x13c>)
 800a8e2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	091b      	lsrs	r3, r3, #4
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d009      	beq.n	800a904 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2210      	movs	r2, #16
 800a8f6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8fc:	f043 0204 	orr.w	r2, r3, #4
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fa65 	bl	800add4 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a90a:	2103      	movs	r1, #3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fcdb 	bl	800b2c8 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a916:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b60      	cmp	r3, #96	; 0x60
 800a922:	d002      	beq.n	800a92a <I2C_ITMasterCplt+0x7a>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d006      	beq.n	800a938 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f98d 	bl	800ac50 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a936:	e052      	b.n	800a9de <I2C_ITMasterCplt+0x12e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b21      	cmp	r3, #33	; 0x21
 800a942:	d123      	bne.n	800a98c <I2C_ITMasterCplt+0xdc>
    hi2c->State = HAL_I2C_STATE_READY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2220      	movs	r2, #32
 800a948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b40      	cmp	r3, #64	; 0x40
 800a956:	d10c      	bne.n	800a972 <I2C_ITMasterCplt+0xc2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	4798      	blx	r3
}
 800a970:	e035      	b.n	800a9de <I2C_ITMasterCplt+0x12e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	4798      	blx	r3
}
 800a98a:	e028      	b.n	800a9de <I2C_ITMasterCplt+0x12e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b22      	cmp	r3, #34	; 0x22
 800a996:	d122      	bne.n	800a9de <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2220      	movs	r2, #32
 800a99c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b40      	cmp	r3, #64	; 0x40
 800a9aa:	d10c      	bne.n	800a9c6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	4798      	blx	r3
}
 800a9c4:	e00b      	b.n	800a9de <I2C_ITMasterCplt+0x12e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	4798      	blx	r3
}
 800a9de:	bf00      	nop
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	fe00e800 	.word	0xfe00e800
 800a9ec:	ffff0000 	.word	0xffff0000

0800a9f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800aa0e:	2107      	movs	r1, #7
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fc59 	bl	800b2c8 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa24:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	6859      	ldr	r1, [r3, #4]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	4b5a      	ldr	r3, [pc, #360]	; (800ab9c <I2C_ITSlaveCplt+0x1ac>)
 800aa32:	400b      	ands	r3, r1
 800aa34:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f9cc 	bl	800add4 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	0b9b      	lsrs	r3, r3, #14
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d018      	beq.n	800aa82 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa5e:	e010      	b.n	800aa82 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	0bdb      	lsrs	r3, r3, #15
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00a      	beq.n	800aa82 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d006      	beq.n	800aa82 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	089b      	lsrs	r3, r3, #2
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d020      	beq.n	800aad0 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f023 0304 	bic.w	r3, r3, #4
 800aa94:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	b2d2      	uxtb	r2, r2
 800aaa2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00c      	beq.n	800aad0 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaba:	3b01      	subs	r3, #1
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	3b01      	subs	r3, #1
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d005      	beq.n	800aae6 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aade:	f043 0204 	orr.w	r2, r3, #4
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d010      	beq.n	800ab24 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f8a1 	bl	800ac50 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b28      	cmp	r3, #40	; 0x28
 800ab18:	d13b      	bne.n	800ab92 <I2C_ITSlaveCplt+0x1a2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ab1a:	68f9      	ldr	r1, [r7, #12]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f841 	bl	800aba4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ab22:	e036      	b.n	800ab92 <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ab2c:	d012      	beq.n	800ab54 <I2C_ITSlaveCplt+0x164>
    I2C_ITSlaveSeqCplt(hi2c);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff fe7f 	bl	800a832 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a1a      	ldr	r2, [pc, #104]	; (800aba0 <I2C_ITSlaveCplt+0x1b0>)
 800ab38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2220      	movs	r2, #32
 800ab3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	4798      	blx	r3
}
 800ab52:	e01e      	b.n	800ab92 <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b22      	cmp	r3, #34	; 0x22
 800ab5e:	d10c      	bne.n	800ab7a <I2C_ITSlaveCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2220      	movs	r2, #32
 800ab64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	4798      	blx	r3
}
 800ab78:	e00b      	b.n	800ab92 <I2C_ITSlaveCplt+0x1a2>
    hi2c->State = HAL_I2C_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	4798      	blx	r3
}
 800ab92:	bf00      	nop
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	fe00e800 	.word	0xfe00e800
 800aba0:	ffff0000 	.word	0xffff0000

0800aba4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a26      	ldr	r2, [pc, #152]	; (800ac4c <I2C_ITListenCplt+0xa8>)
 800abb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2220      	movs	r2, #32
 800abbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	089b      	lsrs	r3, r3, #2
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d022      	beq.n	800ac22 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	b2d2      	uxtb	r2, r2
 800abe8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d012      	beq.n	800ac22 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac00:	3b01      	subs	r3, #1
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac1a:	f043 0204 	orr.w	r2, r3, #4
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ac22:	2107      	movs	r1, #7
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fb4f 	bl	800b2c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2210      	movs	r2, #16
 800ac30:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ac42:	bf00      	nop
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	ffff0000 	.word	0xffff0000

0800ac50 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac60:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a56      	ldr	r2, [pc, #344]	; (800adc8 <I2C_ITError+0x178>)
 800ac6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	2b28      	cmp	r3, #40	; 0x28
 800ac86:	d005      	beq.n	800ac94 <I2C_ITError+0x44>
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
 800ac8a:	2b29      	cmp	r3, #41	; 0x29
 800ac8c:	d002      	beq.n	800ac94 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
 800ac90:	2b2a      	cmp	r3, #42	; 0x2a
 800ac92:	d10e      	bne.n	800acb2 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ac94:	2103      	movs	r1, #3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fb16 	bl	800b2c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2228      	movs	r2, #40	; 0x28
 800aca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a47      	ldr	r2, [pc, #284]	; (800adcc <I2C_ITError+0x17c>)
 800acae:	635a      	str	r2, [r3, #52]	; 0x34
 800acb0:	e013      	b.n	800acda <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800acb2:	2107      	movs	r1, #7
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fb07 	bl	800b2c8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b60      	cmp	r3, #96	; 0x60
 800acc4:	d003      	beq.n	800acce <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2220      	movs	r2, #32
 800acca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ace4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ace8:	d123      	bne.n	800ad32 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800acf8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d05e      	beq.n	800adc0 <I2C_ITError+0x170>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad06:	4a32      	ldr	r2, [pc, #200]	; (800add0 <I2C_ITError+0x180>)
 800ad08:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe fba9 	bl	800946e <HAL_DMA_Abort_IT>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d04e      	beq.n	800adc0 <I2C_ITError+0x170>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ad30:	e046      	b.n	800adc0 <I2C_ITError+0x170>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad40:	d123      	bne.n	800ad8a <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad50:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d032      	beq.n	800adc0 <I2C_ITError+0x170>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad5e:	4a1c      	ldr	r2, [pc, #112]	; (800add0 <I2C_ITError+0x180>)
 800ad60:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fe fb7d 	bl	800946e <HAL_DMA_Abort_IT>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d022      	beq.n	800adc0 <I2C_ITError+0x170>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ad84:	4610      	mov	r0, r2
 800ad86:	4798      	blx	r3
}
 800ad88:	e01a      	b.n	800adc0 <I2C_ITError+0x170>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b60      	cmp	r3, #96	; 0x60
 800ad94:	d10c      	bne.n	800adb0 <I2C_ITError+0x160>
    hi2c->State = HAL_I2C_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->AbortCpltCallback(hi2c);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	4798      	blx	r3
}
 800adae:	e007      	b.n	800adc0 <I2C_ITError+0x170>
    __HAL_UNLOCK(hi2c);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	ffff0000 	.word	0xffff0000
 800adcc:	08009fe3 	.word	0x08009fe3
 800add0:	0800af77 	.word	0x0800af77

0800add4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	f003 0302 	and.w	r3, r3, #2
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d103      	bne.n	800adf2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2200      	movs	r2, #0
 800adf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d007      	beq.n	800ae10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	699a      	ldr	r2, [r3, #24]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f042 0201 	orr.w	r2, r2, #1
 800ae0e:	619a      	str	r2, [r3, #24]
  }
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae28:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ae38:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d104      	bne.n	800ae4e <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ae44:	2112      	movs	r1, #18
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f000 f9d0 	bl	800b1ec <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ae4c:	e02d      	b.n	800aeaa <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ae56:	441a      	add	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	2bff      	cmp	r3, #255	; 0xff
 800ae64:	d903      	bls.n	800ae6e <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	22ff      	movs	r2, #255	; 0xff
 800ae6a:	851a      	strh	r2, [r3, #40]	; 0x28
 800ae6c:	e004      	b.n	800ae78 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	4619      	mov	r1, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3328      	adds	r3, #40	; 0x28
 800ae88:	461a      	mov	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae8e:	f7fe fa73 	bl	8009378 <HAL_DMA_Start_IT>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d004      	beq.n	800aea2 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ae98:	2110      	movs	r1, #16
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f7ff fed8 	bl	800ac50 <I2C_ITError>
}
 800aea0:	e003      	b.n	800aeaa <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800aea2:	2112      	movs	r1, #18
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f000 f9a1 	bl	800b1ec <I2C_Enable_IRQ>
}
 800aeaa:	bf00      	nop
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aece:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d104      	bne.n	800aee4 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800aeda:	2112      	movs	r1, #18
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 f985 	bl	800b1ec <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800aee2:	e02d      	b.n	800af40 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800aeec:	441a      	add	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	2bff      	cmp	r3, #255	; 0xff
 800aefa:	d903      	bls.n	800af04 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	22ff      	movs	r2, #255	; 0xff
 800af00:	851a      	strh	r2, [r3, #40]	; 0x28
 800af02:	e004      	b.n	800af0e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af08:	b29a      	uxth	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	3324      	adds	r3, #36	; 0x24
 800af18:	4619      	mov	r1, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1e:	461a      	mov	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af24:	f7fe fa28 	bl	8009378 <HAL_DMA_Start_IT>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d004      	beq.n	800af38 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800af2e:	2110      	movs	r1, #16
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7ff fe8d 	bl	800ac50 <I2C_ITError>
}
 800af36:	e003      	b.n	800af40 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800af38:	2112      	movs	r1, #18
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f000 f956 	bl	800b1ec <I2C_Enable_IRQ>
}
 800af40:	bf00      	nop
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af54:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af64:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800af66:	2110      	movs	r1, #16
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f7ff fe71 	bl	800ac50 <I2C_ITError>
}
 800af6e:	bf00      	nop
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af82:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af88:	2200      	movs	r2, #0
 800af8a:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af90:	2200      	movs	r2, #0
 800af92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b60      	cmp	r3, #96	; 0x60
 800af9e:	d108      	bne.n	800afb2 <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800afb0:	e003      	b.n	800afba <I2C_DMAAbort+0x44>
    hi2c->ErrorCallback(hi2c);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	4798      	blx	r3
}
 800afba:	bf00      	nop
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b084      	sub	sp, #16
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	603b      	str	r3, [r7, #0]
 800afce:	4613      	mov	r3, r2
 800afd0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afd2:	e022      	b.n	800b01a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afda:	d01e      	beq.n	800b01a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afdc:	f7fc fd22 	bl	8007a24 <HAL_GetTick>
 800afe0:	4602      	mov	r2, r0
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d302      	bcc.n	800aff2 <I2C_WaitOnFlagUntilTimeout+0x30>
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d113      	bne.n	800b01a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff6:	f043 0220 	orr.w	r2, r3, #32
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2220      	movs	r2, #32
 800b002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e00f      	b.n	800b03a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	699a      	ldr	r2, [r3, #24]
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	4013      	ands	r3, r2
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	429a      	cmp	r2, r3
 800b028:	bf0c      	ite	eq
 800b02a:	2301      	moveq	r3, #1
 800b02c:	2300      	movne	r3, #0
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	461a      	mov	r2, r3
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	429a      	cmp	r2, r3
 800b036:	d0cd      	beq.n	800afd4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b084      	sub	sp, #16
 800b046:	af00      	add	r7, sp, #0
 800b048:	60f8      	str	r0, [r7, #12]
 800b04a:	60b9      	str	r1, [r7, #8]
 800b04c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b04e:	e02c      	b.n	800b0aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	68b9      	ldr	r1, [r7, #8]
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 f835 	bl	800b0c4 <I2C_IsAcknowledgeFailed>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	e02a      	b.n	800b0ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b06a:	d01e      	beq.n	800b0aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b06c:	f7fc fcda 	bl	8007a24 <HAL_GetTick>
 800b070:	4602      	mov	r2, r0
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	1ad3      	subs	r3, r2, r3
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d302      	bcc.n	800b082 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d113      	bne.n	800b0aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b086:	f043 0220 	orr.w	r2, r3, #32
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2220      	movs	r2, #32
 800b092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e007      	b.n	800b0ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	f003 0302 	and.w	r3, r3, #2
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d1cb      	bne.n	800b050 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	f003 0310 	and.w	r3, r3, #16
 800b0da:	2b10      	cmp	r3, #16
 800b0dc:	d151      	bne.n	800b182 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0de:	e022      	b.n	800b126 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e6:	d01e      	beq.n	800b126 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0e8:	f7fc fc9c 	bl	8007a24 <HAL_GetTick>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d302      	bcc.n	800b0fe <I2C_IsAcknowledgeFailed+0x3a>
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d113      	bne.n	800b126 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b102:	f043 0220 	orr.w	r2, r3, #32
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2220      	movs	r2, #32
 800b10e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e02e      	b.n	800b184 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	f003 0320 	and.w	r3, r3, #32
 800b130:	2b20      	cmp	r3, #32
 800b132:	d1d5      	bne.n	800b0e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2210      	movs	r2, #16
 800b13a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2220      	movs	r2, #32
 800b142:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f7ff fe45 	bl	800add4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	6859      	ldr	r1, [r3, #4]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	4b0d      	ldr	r3, [pc, #52]	; (800b18c <I2C_IsAcknowledgeFailed+0xc8>)
 800b156:	400b      	ands	r3, r1
 800b158:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b15e:	f043 0204 	orr.w	r2, r3, #4
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2220      	movs	r2, #32
 800b16a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e000      	b.n	800b184 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	fe00e800 	.word	0xfe00e800

0800b190 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	607b      	str	r3, [r7, #4]
 800b19a:	460b      	mov	r3, r1
 800b19c:	817b      	strh	r3, [r7, #10]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	0d5b      	lsrs	r3, r3, #21
 800b1ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b1b0:	4b0d      	ldr	r3, [pc, #52]	; (800b1e8 <I2C_TransferConfig+0x58>)
 800b1b2:	430b      	orrs	r3, r1
 800b1b4:	43db      	mvns	r3, r3
 800b1b6:	ea02 0103 	and.w	r1, r2, r3
 800b1ba:	897b      	ldrh	r3, [r7, #10]
 800b1bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b1c0:	7a7b      	ldrb	r3, [r7, #9]
 800b1c2:	041b      	lsls	r3, r3, #16
 800b1c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1c8:	431a      	orrs	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	430a      	orrs	r2, r1
 800b1d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b1da:	bf00      	nop
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	03ff63ff 	.word	0x03ff63ff

0800b1ec <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b200:	4a2f      	ldr	r2, [pc, #188]	; (800b2c0 <I2C_Enable_IRQ+0xd4>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d004      	beq.n	800b210 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b20a:	4a2e      	ldr	r2, [pc, #184]	; (800b2c4 <I2C_Enable_IRQ+0xd8>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d124      	bne.n	800b25a <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b210:	887b      	ldrh	r3, [r7, #2]
 800b212:	f003 0304 	and.w	r3, r3, #4
 800b216:	2b00      	cmp	r3, #0
 800b218:	d003      	beq.n	800b222 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b220:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800b222:	887b      	ldrh	r3, [r7, #2]
 800b224:	f003 0311 	and.w	r3, r3, #17
 800b228:	2b11      	cmp	r3, #17
 800b22a:	d103      	bne.n	800b234 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b232:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800b234:	887b      	ldrh	r3, [r7, #2]
 800b236:	f003 0312 	and.w	r3, r3, #18
 800b23a:	2b12      	cmp	r3, #18
 800b23c:	d103      	bne.n	800b246 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f043 0320 	orr.w	r3, r3, #32
 800b244:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800b246:	887b      	ldrh	r3, [r7, #2]
 800b248:	f003 0312 	and.w	r3, r3, #18
 800b24c:	2b12      	cmp	r3, #18
 800b24e:	d128      	bne.n	800b2a2 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b256:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800b258:	e023      	b.n	800b2a2 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b25a:	887b      	ldrh	r3, [r7, #2]
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	d003      	beq.n	800b26c <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b26a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b26c:	887b      	ldrh	r3, [r7, #2]
 800b26e:	f003 0301 	and.w	r3, r3, #1
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b27c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b27e:	887b      	ldrh	r3, [r7, #2]
 800b280:	f003 0302 	and.w	r3, r3, #2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d003      	beq.n	800b290 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b28e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800b290:	887b      	ldrh	r3, [r7, #2]
 800b292:	f003 0312 	and.w	r3, r3, #18
 800b296:	2b12      	cmp	r3, #18
 800b298:	d103      	bne.n	800b2a2 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f043 0320 	orr.w	r3, r3, #32
 800b2a0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6819      	ldr	r1, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	430a      	orrs	r2, r1
 800b2b0:	601a      	str	r2, [r3, #0]
}
 800b2b2:	bf00      	nop
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	0800a1e9 	.word	0x0800a1e9
 800b2c4:	0800a3cf 	.word	0x0800a3cf

0800b2c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b2d8:	887b      	ldrh	r3, [r7, #2]
 800b2da:	f003 0301 	and.w	r3, r3, #1
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00f      	beq.n	800b302 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b2e8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b2f6:	2b28      	cmp	r3, #40	; 0x28
 800b2f8:	d003      	beq.n	800b302 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b300:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b302:	887b      	ldrh	r3, [r7, #2]
 800b304:	f003 0302 	and.w	r3, r3, #2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00f      	beq.n	800b32c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b312:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b320:	2b28      	cmp	r3, #40	; 0x28
 800b322:	d003      	beq.n	800b32c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b32a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b32c:	887b      	ldrh	r3, [r7, #2]
 800b32e:	f003 0304 	and.w	r3, r3, #4
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b33c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800b33e:	887b      	ldrh	r3, [r7, #2]
 800b340:	f003 0311 	and.w	r3, r3, #17
 800b344:	2b11      	cmp	r3, #17
 800b346:	d103      	bne.n	800b350 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b34e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800b350:	887b      	ldrh	r3, [r7, #2]
 800b352:	f003 0312 	and.w	r3, r3, #18
 800b356:	2b12      	cmp	r3, #18
 800b358:	d103      	bne.n	800b362 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f043 0320 	orr.w	r3, r3, #32
 800b360:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800b362:	887b      	ldrh	r3, [r7, #2]
 800b364:	f003 0312 	and.w	r3, r3, #18
 800b368:	2b12      	cmp	r3, #18
 800b36a:	d103      	bne.n	800b374 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b372:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6819      	ldr	r1, [r3, #0]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	43da      	mvns	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	400a      	ands	r2, r1
 800b384:	601a      	str	r2, [r3, #0]
}
 800b386:	bf00      	nop
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b392:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b394:	b08f      	sub	sp, #60	; 0x3c
 800b396:	af0a      	add	r7, sp, #40	; 0x28
 800b398:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d101      	bne.n	800b3a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e116      	b.n	800b5d2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fa fc80 	bl	8005cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2203      	movs	r2, #3
 800b3c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d102      	bne.n	800b3de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f006 fc09 	bl	8011bfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	603b      	str	r3, [r7, #0]
 800b3ee:	687e      	ldr	r6, [r7, #4]
 800b3f0:	466d      	mov	r5, sp
 800b3f2:	f106 0410 	add.w	r4, r6, #16
 800b3f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b402:	e885 0003 	stmia.w	r5, {r0, r1}
 800b406:	1d33      	adds	r3, r6, #4
 800b408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b40a:	6838      	ldr	r0, [r7, #0]
 800b40c:	f006 faf6 	bl	80119fc <USB_CoreInit>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d005      	beq.n	800b422 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2202      	movs	r2, #2
 800b41a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	e0d7      	b.n	800b5d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2100      	movs	r1, #0
 800b428:	4618      	mov	r0, r3
 800b42a:	f006 fbf7 	bl	8011c1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
 800b432:	e04a      	b.n	800b4ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b434:	7bfa      	ldrb	r2, [r7, #15]
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	4613      	mov	r3, r2
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	1a9b      	subs	r3, r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	333d      	adds	r3, #61	; 0x3d
 800b444:	2201      	movs	r2, #1
 800b446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b448:	7bfa      	ldrb	r2, [r7, #15]
 800b44a:	6879      	ldr	r1, [r7, #4]
 800b44c:	4613      	mov	r3, r2
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	1a9b      	subs	r3, r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	440b      	add	r3, r1
 800b456:	333c      	adds	r3, #60	; 0x3c
 800b458:	7bfa      	ldrb	r2, [r7, #15]
 800b45a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b45c:	7bfa      	ldrb	r2, [r7, #15]
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	b298      	uxth	r0, r3
 800b462:	6879      	ldr	r1, [r7, #4]
 800b464:	4613      	mov	r3, r2
 800b466:	00db      	lsls	r3, r3, #3
 800b468:	1a9b      	subs	r3, r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	440b      	add	r3, r1
 800b46e:	3342      	adds	r3, #66	; 0x42
 800b470:	4602      	mov	r2, r0
 800b472:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b474:	7bfa      	ldrb	r2, [r7, #15]
 800b476:	6879      	ldr	r1, [r7, #4]
 800b478:	4613      	mov	r3, r2
 800b47a:	00db      	lsls	r3, r3, #3
 800b47c:	1a9b      	subs	r3, r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	440b      	add	r3, r1
 800b482:	333f      	adds	r3, #63	; 0x3f
 800b484:	2200      	movs	r2, #0
 800b486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b488:	7bfa      	ldrb	r2, [r7, #15]
 800b48a:	6879      	ldr	r1, [r7, #4]
 800b48c:	4613      	mov	r3, r2
 800b48e:	00db      	lsls	r3, r3, #3
 800b490:	1a9b      	subs	r3, r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	440b      	add	r3, r1
 800b496:	3344      	adds	r3, #68	; 0x44
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b49c:	7bfa      	ldrb	r2, [r7, #15]
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	1a9b      	subs	r3, r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	440b      	add	r3, r1
 800b4aa:	3348      	adds	r3, #72	; 0x48
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b4b0:	7bfa      	ldrb	r2, [r7, #15]
 800b4b2:	6879      	ldr	r1, [r7, #4]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	00db      	lsls	r3, r3, #3
 800b4b8:	1a9b      	subs	r3, r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	440b      	add	r3, r1
 800b4be:	3350      	adds	r3, #80	; 0x50
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	73fb      	strb	r3, [r7, #15]
 800b4ca:	7bfa      	ldrb	r2, [r7, #15]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d3af      	bcc.n	800b434 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	73fb      	strb	r3, [r7, #15]
 800b4d8:	e044      	b.n	800b564 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b4da:	7bfa      	ldrb	r2, [r7, #15]
 800b4dc:	6879      	ldr	r1, [r7, #4]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	00db      	lsls	r3, r3, #3
 800b4e2:	1a9b      	subs	r3, r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	440b      	add	r3, r1
 800b4e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b4f0:	7bfa      	ldrb	r2, [r7, #15]
 800b4f2:	6879      	ldr	r1, [r7, #4]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	440b      	add	r3, r1
 800b4fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b502:	7bfa      	ldrb	r2, [r7, #15]
 800b504:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b506:	7bfa      	ldrb	r2, [r7, #15]
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	4613      	mov	r3, r2
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	440b      	add	r3, r1
 800b514:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b518:	2200      	movs	r2, #0
 800b51a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b51c:	7bfa      	ldrb	r2, [r7, #15]
 800b51e:	6879      	ldr	r1, [r7, #4]
 800b520:	4613      	mov	r3, r2
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	1a9b      	subs	r3, r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	440b      	add	r3, r1
 800b52a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b532:	7bfa      	ldrb	r2, [r7, #15]
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	4613      	mov	r3, r2
 800b538:	00db      	lsls	r3, r3, #3
 800b53a:	1a9b      	subs	r3, r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	440b      	add	r3, r1
 800b540:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b544:	2200      	movs	r2, #0
 800b546:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b548:	7bfa      	ldrb	r2, [r7, #15]
 800b54a:	6879      	ldr	r1, [r7, #4]
 800b54c:	4613      	mov	r3, r2
 800b54e:	00db      	lsls	r3, r3, #3
 800b550:	1a9b      	subs	r3, r3, r2
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	440b      	add	r3, r1
 800b556:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	3301      	adds	r3, #1
 800b562:	73fb      	strb	r3, [r7, #15]
 800b564:	7bfa      	ldrb	r2, [r7, #15]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d3b5      	bcc.n	800b4da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	687e      	ldr	r6, [r7, #4]
 800b576:	466d      	mov	r5, sp
 800b578:	f106 0410 	add.w	r4, r6, #16
 800b57c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b57e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b584:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b588:	e885 0003 	stmia.w	r5, {r0, r1}
 800b58c:	1d33      	adds	r3, r6, #4
 800b58e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b590:	6838      	ldr	r0, [r7, #0]
 800b592:	f006 fb6d 	bl	8011c70 <USB_DevInit>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d005      	beq.n	800b5a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e014      	b.n	800b5d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d102      	bne.n	800b5c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 ff61 	bl	800c488 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f007 fae6 	bl	8012b9c <USB_DevDisconnect>

  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b084      	sub	sp, #16
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d101      	bne.n	800b5f6 <HAL_PCD_Start+0x1c>
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	e01c      	b.n	800b630 <HAL_PCD_Start+0x56>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b602:	2b01      	cmp	r3, #1
 800b604:	d105      	bne.n	800b612 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4618      	mov	r0, r3
 800b618:	f007 faa8 	bl	8012b6c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4618      	mov	r0, r3
 800b622:	f006 fad9 	bl	8011bd8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b638:	b590      	push	{r4, r7, lr}
 800b63a:	b08d      	sub	sp, #52	; 0x34
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4618      	mov	r0, r3
 800b650:	f007 fb4f 	bl	8012cf2 <USB_GetMode>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	f040 838f 	bne.w	800bd7a <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4618      	mov	r0, r3
 800b662:	f007 fab3 	bl	8012bcc <USB_ReadInterrupts>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 8385 	beq.w	800bd78 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4618      	mov	r0, r3
 800b674:	f007 faaa 	bl	8012bcc <USB_ReadInterrupts>
 800b678:	4603      	mov	r3, r0
 800b67a:	f003 0302 	and.w	r3, r3, #2
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d107      	bne.n	800b692 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	695a      	ldr	r2, [r3, #20]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f002 0202 	and.w	r2, r2, #2
 800b690:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4618      	mov	r0, r3
 800b698:	f007 fa98 	bl	8012bcc <USB_ReadInterrupts>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f003 0310 	and.w	r3, r3, #16
 800b6a2:	2b10      	cmp	r3, #16
 800b6a4:	d161      	bne.n	800b76a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	699a      	ldr	r2, [r3, #24]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f022 0210 	bic.w	r2, r2, #16
 800b6b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	f003 020f 	and.w	r2, r3, #15
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	00db      	lsls	r3, r3, #3
 800b6c6:	1a9b      	subs	r3, r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	0c5b      	lsrs	r3, r3, #17
 800b6da:	f003 030f 	and.w	r3, r3, #15
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d124      	bne.n	800b72c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d035      	beq.n	800b75a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	091b      	lsrs	r3, r3, #4
 800b6f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b6f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	461a      	mov	r2, r3
 800b700:	6a38      	ldr	r0, [r7, #32]
 800b702:	f007 f910 	bl	8012926 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	68da      	ldr	r2, [r3, #12]
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	091b      	lsrs	r3, r3, #4
 800b70e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b712:	441a      	add	r2, r3
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	091b      	lsrs	r3, r3, #4
 800b720:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b724:	441a      	add	r2, r3
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	619a      	str	r2, [r3, #24]
 800b72a:	e016      	b.n	800b75a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	0c5b      	lsrs	r3, r3, #17
 800b730:	f003 030f 	and.w	r3, r3, #15
 800b734:	2b06      	cmp	r3, #6
 800b736:	d110      	bne.n	800b75a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b73e:	2208      	movs	r2, #8
 800b740:	4619      	mov	r1, r3
 800b742:	6a38      	ldr	r0, [r7, #32]
 800b744:	f007 f8ef 	bl	8012926 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	699a      	ldr	r2, [r3, #24]
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	091b      	lsrs	r3, r3, #4
 800b750:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b754:	441a      	add	r2, r3
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	699a      	ldr	r2, [r3, #24]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f042 0210 	orr.w	r2, r2, #16
 800b768:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4618      	mov	r0, r3
 800b770:	f007 fa2c 	bl	8012bcc <USB_ReadInterrupts>
 800b774:	4603      	mov	r3, r0
 800b776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b77a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b77e:	d16e      	bne.n	800b85e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b780:	2300      	movs	r3, #0
 800b782:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4618      	mov	r0, r3
 800b78a:	f007 fa32 	bl	8012bf2 <USB_ReadDevAllOutEpInterrupt>
 800b78e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b790:	e062      	b.n	800b858 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	f003 0301 	and.w	r3, r3, #1
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d057      	beq.n	800b84c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a2:	b2d2      	uxtb	r2, r2
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f007 fa57 	bl	8012c5a <USB_ReadDevOutEPInterrupt>
 800b7ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	f003 0301 	and.w	r3, r3, #1
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00c      	beq.n	800b7d2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	015a      	lsls	r2, r3, #5
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b7ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 fd81 	bl	800c2d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f003 0308 	and.w	r3, r3, #8
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00c      	beq.n	800b7f6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	015a      	lsls	r2, r3, #5
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	2308      	movs	r3, #8
 800b7ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b7ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fdbd 	bl	800c370 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f003 0310 	and.w	r3, r3, #16
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d008      	beq.n	800b812 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	4413      	add	r3, r2
 800b808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80c:	461a      	mov	r2, r3
 800b80e:	2310      	movs	r3, #16
 800b810:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	f003 0320 	and.w	r3, r3, #32
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d008      	beq.n	800b82e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81e:	015a      	lsls	r2, r3, #5
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	4413      	add	r3, r2
 800b824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b828:	461a      	mov	r2, r3
 800b82a:	2320      	movs	r3, #32
 800b82c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b834:	2b00      	cmp	r3, #0
 800b836:	d009      	beq.n	800b84c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b844:	461a      	mov	r2, r3
 800b846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b84a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84e:	3301      	adds	r3, #1
 800b850:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b854:	085b      	lsrs	r3, r3, #1
 800b856:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d199      	bne.n	800b792 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4618      	mov	r0, r3
 800b864:	f007 f9b2 	bl	8012bcc <USB_ReadInterrupts>
 800b868:	4603      	mov	r3, r0
 800b86a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b86e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b872:	f040 8087 	bne.w	800b984 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f007 f9d3 	bl	8012c26 <USB_ReadDevAllInEpInterrupt>
 800b880:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b882:	2300      	movs	r3, #0
 800b884:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b886:	e07a      	b.n	800b97e <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d06f      	beq.n	800b972 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b898:	b2d2      	uxtb	r2, r2
 800b89a:	4611      	mov	r1, r2
 800b89c:	4618      	mov	r0, r3
 800b89e:	f007 f9fa 	bl	8012c96 <USB_ReadDevInEPInterrupt>
 800b8a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d020      	beq.n	800b8f0 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	f003 030f 	and.w	r3, r3, #15
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	43db      	mvns	r3, r3
 800b8c8:	69f9      	ldr	r1, [r7, #28]
 800b8ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d4:	015a      	lsls	r2, r3, #5
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8de:	461a      	mov	r2, r3
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7fa fa53 	bl	8005d96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	f003 0308 	and.w	r3, r3, #8
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d008      	beq.n	800b90c <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	015a      	lsls	r2, r3, #5
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	4413      	add	r3, r2
 800b902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b906:	461a      	mov	r2, r3
 800b908:	2308      	movs	r3, #8
 800b90a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f003 0310 	and.w	r3, r3, #16
 800b912:	2b00      	cmp	r3, #0
 800b914:	d008      	beq.n	800b928 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	015a      	lsls	r2, r3, #5
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	4413      	add	r3, r2
 800b91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b922:	461a      	mov	r2, r3
 800b924:	2310      	movs	r3, #16
 800b926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d008      	beq.n	800b944 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b934:	015a      	lsls	r2, r3, #5
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	4413      	add	r3, r2
 800b93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b93e:	461a      	mov	r2, r3
 800b940:	2340      	movs	r3, #64	; 0x40
 800b942:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f003 0302 	and.w	r3, r3, #2
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d008      	beq.n	800b960 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b950:	015a      	lsls	r2, r3, #5
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	4413      	add	r3, r2
 800b956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b95a:	461a      	mov	r2, r3
 800b95c:	2302      	movs	r3, #2
 800b95e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b96a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 fc29 	bl	800c1c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	3301      	adds	r3, #1
 800b976:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97a:	085b      	lsrs	r3, r3, #1
 800b97c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b980:	2b00      	cmp	r3, #0
 800b982:	d181      	bne.n	800b888 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4618      	mov	r0, r3
 800b98a:	f007 f91f 	bl	8012bcc <USB_ReadInterrupts>
 800b98e:	4603      	mov	r3, r0
 800b990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b998:	d122      	bne.n	800b9e0 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	69fa      	ldr	r2, [r7, #28]
 800b9a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9a8:	f023 0301 	bic.w	r3, r3, #1
 800b9ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d108      	bne.n	800b9ca <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fd84 	bl	800c4d0 <HAL_PCDEx_LPM_Callback>
 800b9c8:	e002      	b.n	800b9d0 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7fa fa2e 	bl	8005e2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	695a      	ldr	r2, [r3, #20]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b9de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f007 f8f1 	bl	8012bcc <USB_ReadInterrupts>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9f4:	d112      	bne.n	800ba1c <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d102      	bne.n	800ba0c <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7fa fa02 	bl	8005e10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	695a      	ldr	r2, [r3, #20]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ba1a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f007 f8d3 	bl	8012bcc <USB_ReadInterrupts>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba30:	d121      	bne.n	800ba76 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	695a      	ldr	r2, [r3, #20]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800ba40:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d111      	bne.n	800ba70 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5a:	089b      	lsrs	r3, r3, #2
 800ba5c:	f003 020f 	and.w	r2, r3, #15
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ba66:	2101      	movs	r1, #1
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fd31 	bl	800c4d0 <HAL_PCDEx_LPM_Callback>
 800ba6e:	e002      	b.n	800ba76 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f7fa f9cd 	bl	8005e10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f007 f8a6 	bl	8012bcc <USB_ReadInterrupts>
 800ba80:	4603      	mov	r3, r0
 800ba82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba8a:	f040 80c5 	bne.w	800bc18 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	69fa      	ldr	r2, [r7, #28]
 800ba98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba9c:	f023 0301 	bic.w	r3, r3, #1
 800baa0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2110      	movs	r1, #16
 800baa8:	4618      	mov	r0, r3
 800baaa:	f006 fa2d 	bl	8011f08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800baae:	2300      	movs	r3, #0
 800bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bab2:	e056      	b.n	800bb62 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab6:	015a      	lsls	r2, r3, #5
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	4413      	add	r3, r2
 800babc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac0:	461a      	mov	r2, r3
 800bac2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bac6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	015a      	lsls	r2, r3, #5
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	4413      	add	r3, r2
 800bad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bad8:	0151      	lsls	r1, r2, #5
 800bada:	69fa      	ldr	r2, [r7, #28]
 800badc:	440a      	add	r2, r1
 800bade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bae2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bae6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baea:	015a      	lsls	r2, r3, #5
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	4413      	add	r3, r2
 800baf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baf8:	0151      	lsls	r1, r2, #5
 800bafa:	69fa      	ldr	r2, [r7, #28]
 800bafc:	440a      	add	r2, r1
 800bafe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb14:	461a      	mov	r2, r3
 800bb16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1e:	015a      	lsls	r2, r3, #5
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	4413      	add	r3, r2
 800bb24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb2c:	0151      	lsls	r1, r2, #5
 800bb2e:	69fa      	ldr	r2, [r7, #28]
 800bb30:	440a      	add	r2, r1
 800bb32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	015a      	lsls	r2, r3, #5
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	4413      	add	r3, r2
 800bb44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb4c:	0151      	lsls	r1, r2, #5
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	440a      	add	r2, r1
 800bb52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5e:	3301      	adds	r3, #1
 800bb60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d3a3      	bcc.n	800bab4 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	69fa      	ldr	r2, [r7, #28]
 800bb76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb7a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800bb7e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d016      	beq.n	800bbb6 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb92:	69fa      	ldr	r2, [r7, #28]
 800bb94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb98:	f043 030b 	orr.w	r3, r3, #11
 800bb9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba8:	69fa      	ldr	r2, [r7, #28]
 800bbaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbae:	f043 030b 	orr.w	r3, r3, #11
 800bbb2:	6453      	str	r3, [r2, #68]	; 0x44
 800bbb4:	e015      	b.n	800bbe2 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	69fa      	ldr	r2, [r7, #28]
 800bbc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bbc8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800bbcc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	69fa      	ldr	r2, [r7, #28]
 800bbd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbdc:	f043 030b 	orr.w	r3, r3, #11
 800bbe0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	69fa      	ldr	r2, [r7, #28]
 800bbec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbf0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bbf4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bc00:	4619      	mov	r1, r3
 800bc02:	4610      	mov	r0, r2
 800bc04:	f007 f8a6 	bl	8012d54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	695a      	ldr	r2, [r3, #20]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800bc16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f006 ffd5 	bl	8012bcc <USB_ReadInterrupts>
 800bc22:	4603      	mov	r3, r0
 800bc24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc2c:	d124      	bne.n	800bc78 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f007 f86b 	bl	8012d0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f006 f9c4 	bl	8011fca <USB_GetDevSpeed>
 800bc42:	4603      	mov	r3, r0
 800bc44:	461a      	mov	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681c      	ldr	r4, [r3, #0]
 800bc4e:	f001 fbd5 	bl	800d3fc <HAL_RCC_GetHCLKFreq>
 800bc52:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f005 ff1f 	bl	8011aa0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7fa f8bf 	bl	8005de6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	695a      	ldr	r2, [r3, #20]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800bc76:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f006 ffa5 	bl	8012bcc <USB_ReadInterrupts>
 800bc82:	4603      	mov	r3, r0
 800bc84:	f003 0308 	and.w	r3, r3, #8
 800bc88:	2b08      	cmp	r3, #8
 800bc8a:	d10a      	bne.n	800bca2 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7fa f89c 	bl	8005dca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	695a      	ldr	r2, [r3, #20]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f002 0208 	and.w	r2, r2, #8
 800bca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f006 ff90 	bl	8012bcc <USB_ReadInterrupts>
 800bcac:	4603      	mov	r3, r0
 800bcae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcb6:	d10f      	bne.n	800bcd8 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7fa f8d2 	bl	8005e6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	695a      	ldr	r2, [r3, #20]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800bcd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f006 ff75 	bl	8012bcc <USB_ReadInterrupts>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcec:	d10f      	bne.n	800bd0e <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f7fa f8a5 	bl	8005e48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	695a      	ldr	r2, [r3, #20]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800bd0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f006 ff5a 	bl	8012bcc <USB_ReadInterrupts>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd22:	d10a      	bne.n	800bd3a <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7fa f8b3 	bl	8005e90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	695a      	ldr	r2, [r3, #20]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800bd38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f006 ff44 	bl	8012bcc <USB_ReadInterrupts>
 800bd44:	4603      	mov	r3, r0
 800bd46:	f003 0304 	and.w	r3, r3, #4
 800bd4a:	2b04      	cmp	r3, #4
 800bd4c:	d115      	bne.n	800bd7a <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	f003 0304 	and.w	r3, r3, #4
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d002      	beq.n	800bd66 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f7fa f8a3 	bl	8005eac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	6859      	ldr	r1, [r3, #4]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	69ba      	ldr	r2, [r7, #24]
 800bd72:	430a      	orrs	r2, r1
 800bd74:	605a      	str	r2, [r3, #4]
 800bd76:	e000      	b.n	800bd7a <HAL_PCD_IRQHandler+0x742>
      return;
 800bd78:	bf00      	nop
    }
  }
}
 800bd7a:	3734      	adds	r7, #52	; 0x34
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd90      	pop	{r4, r7, pc}

0800bd80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d101      	bne.n	800bd9a <HAL_PCD_SetAddress+0x1a>
 800bd96:	2302      	movs	r3, #2
 800bd98:	e013      	b.n	800bdc2 <HAL_PCD_SetAddress+0x42>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	78fa      	ldrb	r2, [r7, #3]
 800bda6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	78fa      	ldrb	r2, [r7, #3]
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f006 feb4 	bl	8012b20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	4608      	mov	r0, r1
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	4603      	mov	r3, r0
 800bdda:	70fb      	strb	r3, [r7, #3]
 800bddc:	460b      	mov	r3, r1
 800bdde:	803b      	strh	r3, [r7, #0]
 800bde0:	4613      	mov	r3, r2
 800bde2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bde8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	da0f      	bge.n	800be10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bdf0:	78fb      	ldrb	r3, [r7, #3]
 800bdf2:	f003 020f 	and.w	r2, r3, #15
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	00db      	lsls	r3, r3, #3
 800bdfa:	1a9b      	subs	r3, r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	3338      	adds	r3, #56	; 0x38
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	4413      	add	r3, r2
 800be04:	3304      	adds	r3, #4
 800be06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2201      	movs	r2, #1
 800be0c:	705a      	strb	r2, [r3, #1]
 800be0e:	e00f      	b.n	800be30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be10:	78fb      	ldrb	r3, [r7, #3]
 800be12:	f003 020f 	and.w	r2, r3, #15
 800be16:	4613      	mov	r3, r2
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	1a9b      	subs	r3, r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	4413      	add	r3, r2
 800be26:	3304      	adds	r3, #4
 800be28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800be30:	78fb      	ldrb	r3, [r7, #3]
 800be32:	f003 030f 	and.w	r3, r3, #15
 800be36:	b2da      	uxtb	r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800be3c:	883a      	ldrh	r2, [r7, #0]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	78ba      	ldrb	r2, [r7, #2]
 800be46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	785b      	ldrb	r3, [r3, #1]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d004      	beq.n	800be5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	b29a      	uxth	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800be5a:	78bb      	ldrb	r3, [r7, #2]
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d102      	bne.n	800be66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d101      	bne.n	800be74 <HAL_PCD_EP_Open+0xaa>
 800be70:	2302      	movs	r3, #2
 800be72:	e00e      	b.n	800be92 <HAL_PCD_EP_Open+0xc8>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2201      	movs	r2, #1
 800be78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68f9      	ldr	r1, [r7, #12]
 800be82:	4618      	mov	r0, r3
 800be84:	f006 f8c0 	bl	8012008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800be90:	7afb      	ldrb	r3, [r7, #11]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	460b      	mov	r3, r1
 800bea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	da0f      	bge.n	800bece <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800beae:	78fb      	ldrb	r3, [r7, #3]
 800beb0:	f003 020f 	and.w	r2, r3, #15
 800beb4:	4613      	mov	r3, r2
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	1a9b      	subs	r3, r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	3338      	adds	r3, #56	; 0x38
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	4413      	add	r3, r2
 800bec2:	3304      	adds	r3, #4
 800bec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2201      	movs	r2, #1
 800beca:	705a      	strb	r2, [r3, #1]
 800becc:	e00f      	b.n	800beee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bece:	78fb      	ldrb	r3, [r7, #3]
 800bed0:	f003 020f 	and.w	r2, r3, #15
 800bed4:	4613      	mov	r3, r2
 800bed6:	00db      	lsls	r3, r3, #3
 800bed8:	1a9b      	subs	r3, r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	4413      	add	r3, r2
 800bee4:	3304      	adds	r3, #4
 800bee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800beee:	78fb      	ldrb	r3, [r7, #3]
 800bef0:	f003 030f 	and.w	r3, r3, #15
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d101      	bne.n	800bf08 <HAL_PCD_EP_Close+0x6e>
 800bf04:	2302      	movs	r3, #2
 800bf06:	e00e      	b.n	800bf26 <HAL_PCD_EP_Close+0x8c>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68f9      	ldr	r1, [r7, #12]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f006 f8fe 	bl	8012118 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b086      	sub	sp, #24
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	60f8      	str	r0, [r7, #12]
 800bf36:	607a      	str	r2, [r7, #4]
 800bf38:	603b      	str	r3, [r7, #0]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf3e:	7afb      	ldrb	r3, [r7, #11]
 800bf40:	f003 020f 	and.w	r2, r3, #15
 800bf44:	4613      	mov	r3, r2
 800bf46:	00db      	lsls	r3, r3, #3
 800bf48:	1a9b      	subs	r3, r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	4413      	add	r3, r2
 800bf54:	3304      	adds	r3, #4
 800bf56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	683a      	ldr	r2, [r7, #0]
 800bf62:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	2200      	movs	r2, #0
 800bf68:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf70:	7afb      	ldrb	r3, [r7, #11]
 800bf72:	f003 030f 	and.w	r3, r3, #15
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bf7c:	7afb      	ldrb	r3, [r7, #11]
 800bf7e:	f003 030f 	and.w	r3, r3, #15
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d106      	bne.n	800bf94 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	6979      	ldr	r1, [r7, #20]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f006 fb7b 	bl	8012688 <USB_EP0StartXfer>
 800bf92:	e005      	b.n	800bfa0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6979      	ldr	r1, [r7, #20]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f006 f998 	bl	80122d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3718      	adds	r7, #24
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b083      	sub	sp, #12
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bfb6:	78fb      	ldrb	r3, [r7, #3]
 800bfb8:	f003 020f 	and.w	r2, r3, #15
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	00db      	lsls	r3, r3, #3
 800bfc2:	1a9b      	subs	r3, r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	440b      	add	r3, r1
 800bfc8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bfcc:	681b      	ldr	r3, [r3, #0]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	370c      	adds	r7, #12
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b086      	sub	sp, #24
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	607a      	str	r2, [r7, #4]
 800bfe4:	603b      	str	r3, [r7, #0]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bfea:	7afb      	ldrb	r3, [r7, #11]
 800bfec:	f003 020f 	and.w	r2, r3, #15
 800bff0:	4613      	mov	r3, r2
 800bff2:	00db      	lsls	r3, r3, #3
 800bff4:	1a9b      	subs	r3, r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	3338      	adds	r3, #56	; 0x38
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	4413      	add	r3, r2
 800bffe:	3304      	adds	r3, #4
 800c000:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	2200      	movs	r2, #0
 800c012:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	2201      	movs	r2, #1
 800c018:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c01a:	7afb      	ldrb	r3, [r7, #11]
 800c01c:	f003 030f 	and.w	r3, r3, #15
 800c020:	b2da      	uxtb	r2, r3
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c026:	7afb      	ldrb	r3, [r7, #11]
 800c028:	f003 030f 	and.w	r3, r3, #15
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d106      	bne.n	800c03e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6979      	ldr	r1, [r7, #20]
 800c036:	4618      	mov	r0, r3
 800c038:	f006 fb26 	bl	8012688 <USB_EP0StartXfer>
 800c03c:	e005      	b.n	800c04a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	6979      	ldr	r1, [r7, #20]
 800c044:	4618      	mov	r0, r3
 800c046:	f006 f943 	bl	80122d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	f003 020f 	and.w	r2, r3, #15
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d901      	bls.n	800c072 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	e04e      	b.n	800c110 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c076:	2b00      	cmp	r3, #0
 800c078:	da0f      	bge.n	800c09a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c07a:	78fb      	ldrb	r3, [r7, #3]
 800c07c:	f003 020f 	and.w	r2, r3, #15
 800c080:	4613      	mov	r3, r2
 800c082:	00db      	lsls	r3, r3, #3
 800c084:	1a9b      	subs	r3, r3, r2
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	3338      	adds	r3, #56	; 0x38
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	4413      	add	r3, r2
 800c08e:	3304      	adds	r3, #4
 800c090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2201      	movs	r2, #1
 800c096:	705a      	strb	r2, [r3, #1]
 800c098:	e00d      	b.n	800c0b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c09a:	78fa      	ldrb	r2, [r7, #3]
 800c09c:	4613      	mov	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	1a9b      	subs	r3, r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0bc:	78fb      	ldrb	r3, [r7, #3]
 800c0be:	f003 030f 	and.w	r3, r3, #15
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d101      	bne.n	800c0d6 <HAL_PCD_EP_SetStall+0x82>
 800c0d2:	2302      	movs	r3, #2
 800c0d4:	e01c      	b.n	800c110 <HAL_PCD_EP_SetStall+0xbc>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68f9      	ldr	r1, [r7, #12]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f006 fc47 	bl	8012978 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c0ea:	78fb      	ldrb	r3, [r7, #3]
 800c0ec:	f003 030f 	and.w	r3, r3, #15
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d108      	bne.n	800c106 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c0fe:	4619      	mov	r1, r3
 800c100:	4610      	mov	r0, r2
 800c102:	f006 fe27 	bl	8012d54 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	460b      	mov	r3, r1
 800c122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c124:	78fb      	ldrb	r3, [r7, #3]
 800c126:	f003 020f 	and.w	r2, r3, #15
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d901      	bls.n	800c136 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	e042      	b.n	800c1bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	da0f      	bge.n	800c15e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c13e:	78fb      	ldrb	r3, [r7, #3]
 800c140:	f003 020f 	and.w	r2, r3, #15
 800c144:	4613      	mov	r3, r2
 800c146:	00db      	lsls	r3, r3, #3
 800c148:	1a9b      	subs	r3, r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	3338      	adds	r3, #56	; 0x38
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	4413      	add	r3, r2
 800c152:	3304      	adds	r3, #4
 800c154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2201      	movs	r2, #1
 800c15a:	705a      	strb	r2, [r3, #1]
 800c15c:	e00f      	b.n	800c17e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c15e:	78fb      	ldrb	r3, [r7, #3]
 800c160:	f003 020f 	and.w	r2, r3, #15
 800c164:	4613      	mov	r3, r2
 800c166:	00db      	lsls	r3, r3, #3
 800c168:	1a9b      	subs	r3, r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	4413      	add	r3, r2
 800c174:	3304      	adds	r3, #4
 800c176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2200      	movs	r2, #0
 800c182:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	f003 030f 	and.w	r3, r3, #15
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c196:	2b01      	cmp	r3, #1
 800c198:	d101      	bne.n	800c19e <HAL_PCD_EP_ClrStall+0x86>
 800c19a:	2302      	movs	r3, #2
 800c19c:	e00e      	b.n	800c1bc <HAL_PCD_EP_ClrStall+0xa4>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68f9      	ldr	r1, [r7, #12]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f006 fc51 	bl	8012a54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c1d8:	683a      	ldr	r2, [r7, #0]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	00db      	lsls	r3, r3, #3
 800c1de:	1a9b      	subs	r3, r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	3338      	adds	r3, #56	; 0x38
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	699a      	ldr	r2, [r3, #24]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d901      	bls.n	800c1fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e067      	b.n	800c2cc <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	695a      	ldr	r2, [r3, #20]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	69fa      	ldr	r2, [r7, #28]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d902      	bls.n	800c218 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	3303      	adds	r3, #3
 800c21c:	089b      	lsrs	r3, r3, #2
 800c21e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c220:	e026      	b.n	800c270 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	695a      	ldr	r2, [r3, #20]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	429a      	cmp	r2, r3
 800c236:	d902      	bls.n	800c23e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	3303      	adds	r3, #3
 800c242:	089b      	lsrs	r3, r3, #2
 800c244:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	68d9      	ldr	r1, [r3, #12]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	b29b      	uxth	r3, r3
 800c252:	6978      	ldr	r0, [r7, #20]
 800c254:	f006 fb36 	bl	80128c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68da      	ldr	r2, [r3, #12]
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	441a      	add	r2, r3
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	699a      	ldr	r2, [r3, #24]
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	441a      	add	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	015a      	lsls	r2, r3, #5
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	4413      	add	r3, r2
 800c278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	b29b      	uxth	r3, r3
 800c280:	69ba      	ldr	r2, [r7, #24]
 800c282:	429a      	cmp	r2, r3
 800c284:	d809      	bhi.n	800c29a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	699a      	ldr	r2, [r3, #24]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c28e:	429a      	cmp	r2, r3
 800c290:	d203      	bcs.n	800c29a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1c3      	bne.n	800c222 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	695a      	ldr	r2, [r3, #20]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	699b      	ldr	r3, [r3, #24]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d811      	bhi.n	800c2ca <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	f003 030f 	and.w	r3, r3, #15
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	43db      	mvns	r3, r3
 800c2c0:	6939      	ldr	r1, [r7, #16]
 800c2c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c2ca:	2300      	movs	r3, #0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3720      	adds	r7, #32
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	333c      	adds	r3, #60	; 0x3c
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	4a19      	ldr	r2, [pc, #100]	; (800c36c <PCD_EP_OutXfrComplete_int+0x98>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d124      	bne.n	800c354 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00a      	beq.n	800c32a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	015a      	lsls	r2, r3, #5
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	4413      	add	r3, r2
 800c31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c320:	461a      	mov	r2, r3
 800c322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c326:	6093      	str	r3, [r2, #8]
 800c328:	e01a      	b.n	800c360 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	f003 0320 	and.w	r3, r3, #32
 800c330:	2b00      	cmp	r3, #0
 800c332:	d008      	beq.n	800c346 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c340:	461a      	mov	r2, r3
 800c342:	2320      	movs	r3, #32
 800c344:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7f9 fd07 	bl	8005d60 <HAL_PCD_DataOutStageCallback>
 800c352:	e005      	b.n	800c360 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	b2db      	uxtb	r3, r3
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7f9 fd00 	bl	8005d60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3718      	adds	r7, #24
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	4f54310a 	.word	0x4f54310a

0800c370 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	333c      	adds	r3, #60	; 0x3c
 800c388:	3304      	adds	r3, #4
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	4413      	add	r3, r2
 800c396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	4a0c      	ldr	r2, [pc, #48]	; (800c3d4 <PCD_EP_OutSetupPacket_int+0x64>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d90e      	bls.n	800c3c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d009      	beq.n	800c3c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	015a      	lsls	r2, r3, #5
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3bc:	461a      	mov	r2, r3
 800c3be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7f9 fcb9 	bl	8005d3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3718      	adds	r7, #24
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	4f54300a 	.word	0x4f54300a

0800c3d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d107      	bne.n	800c406 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c3f6:	883b      	ldrh	r3, [r7, #0]
 800c3f8:	0419      	lsls	r1, r3, #16
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	430a      	orrs	r2, r1
 800c402:	629a      	str	r2, [r3, #40]	; 0x28
 800c404:	e028      	b.n	800c458 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c40c:	0c1b      	lsrs	r3, r3, #16
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	4413      	add	r3, r2
 800c412:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c414:	2300      	movs	r3, #0
 800c416:	73fb      	strb	r3, [r7, #15]
 800c418:	e00d      	b.n	800c436 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	7bfb      	ldrb	r3, [r7, #15]
 800c420:	3340      	adds	r3, #64	; 0x40
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4413      	add	r3, r2
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	0c1b      	lsrs	r3, r3, #16
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	4413      	add	r3, r2
 800c42e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c430:	7bfb      	ldrb	r3, [r7, #15]
 800c432:	3301      	adds	r3, #1
 800c434:	73fb      	strb	r3, [r7, #15]
 800c436:	7bfa      	ldrb	r2, [r7, #15]
 800c438:	78fb      	ldrb	r3, [r7, #3]
 800c43a:	3b01      	subs	r3, #1
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d3ec      	bcc.n	800c41a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c440:	883b      	ldrh	r3, [r7, #0]
 800c442:	0418      	lsls	r0, r3, #16
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6819      	ldr	r1, [r3, #0]
 800c448:	78fb      	ldrb	r3, [r7, #3]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	4302      	orrs	r2, r0
 800c450:	3340      	adds	r3, #64	; 0x40
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	440b      	add	r3, r1
 800c456:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c466:	b480      	push	{r7}
 800c468:	b083      	sub	sp, #12
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	460b      	mov	r3, r1
 800c470:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	887a      	ldrh	r2, [r7, #2]
 800c478:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2201      	movs	r2, #1
 800c49a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	699b      	ldr	r3, [r3, #24]
 800c4aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4ba:	f043 0303 	orr.w	r3, r3, #3
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3714      	adds	r7, #20
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	460b      	mov	r3, r1
 800c4da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800c4f0:	4b2b      	ldr	r3, [pc, #172]	; (800c5a0 <HAL_PWR_ConfigPVD+0xb8>)
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	f023 020e 	bic.w	r2, r3, #14
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4928      	ldr	r1, [pc, #160]	; (800c5a0 <HAL_PWR_ConfigPVD+0xb8>)
 800c4fe:	4313      	orrs	r3, r2
 800c500:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800c502:	4b28      	ldr	r3, [pc, #160]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	4a27      	ldr	r2, [pc, #156]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c50c:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800c50e:	4b25      	ldr	r3, [pc, #148]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a24      	ldr	r2, [pc, #144]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c518:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800c51a:	4b22      	ldr	r3, [pc, #136]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	4a21      	ldr	r2, [pc, #132]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c524:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800c526:	4b1f      	ldr	r3, [pc, #124]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	4a1e      	ldr	r2, [pc, #120]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c52c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c530:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d005      	beq.n	800c54a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800c53e:	4b19      	ldr	r3, [pc, #100]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a18      	ldr	r2, [pc, #96]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c548:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d005      	beq.n	800c562 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800c556:	4b13      	ldr	r3, [pc, #76]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	4a12      	ldr	r2, [pc, #72]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c55c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c560:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d005      	beq.n	800c57a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800c56e:	4b0d      	ldr	r3, [pc, #52]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	4a0c      	ldr	r2, [pc, #48]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c578:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	f003 0302 	and.w	r3, r3, #2
 800c582:	2b00      	cmp	r3, #0
 800c584:	d005      	beq.n	800c592 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800c586:	4b07      	ldr	r3, [pc, #28]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	4a06      	ldr	r2, [pc, #24]	; (800c5a4 <HAL_PWR_ConfigPVD+0xbc>)
 800c58c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c590:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr
 800c5a0:	40007000 	.word	0x40007000
 800c5a4:	40010400 	.word	0x40010400

0800c5a8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800c5ac:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <HAL_PWR_EnablePVD+0x1c>)
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	4a04      	ldr	r2, [pc, #16]	; (800c5c4 <HAL_PWR_EnablePVD+0x1c>)
 800c5b2:	f043 0301 	orr.w	r3, r3, #1
 800c5b6:	6053      	str	r3, [r2, #4]
}
 800c5b8:	bf00      	nop
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	40007000 	.word	0x40007000

0800c5c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c5cc:	4b0d      	ldr	r3, [pc, #52]	; (800c604 <HAL_PWREx_GetVoltageRange+0x3c>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c5d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5d8:	d102      	bne.n	800c5e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800c5da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5de:	e00b      	b.n	800c5f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800c5e0:	4b08      	ldr	r3, [pc, #32]	; (800c604 <HAL_PWREx_GetVoltageRange+0x3c>)
 800c5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5ee:	d102      	bne.n	800c5f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800c5f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5f4:	e000      	b.n	800c5f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800c5f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	40007000 	.word	0x40007000

0800c608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d141      	bne.n	800c69a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c616:	4b4b      	ldr	r3, [pc, #300]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c61e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c622:	d131      	bne.n	800c688 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c624:	4b47      	ldr	r3, [pc, #284]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c62a:	4a46      	ldr	r2, [pc, #280]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c634:	4b43      	ldr	r3, [pc, #268]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c63c:	4a41      	ldr	r2, [pc, #260]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c63e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c642:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800c644:	4b40      	ldr	r3, [pc, #256]	; (800c748 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2232      	movs	r2, #50	; 0x32
 800c64a:	fb02 f303 	mul.w	r3, r2, r3
 800c64e:	4a3f      	ldr	r2, [pc, #252]	; (800c74c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c650:	fba2 2303 	umull	r2, r3, r2, r3
 800c654:	0c9b      	lsrs	r3, r3, #18
 800c656:	3301      	adds	r3, #1
 800c658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c65a:	e002      	b.n	800c662 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	3b01      	subs	r3, #1
 800c660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c662:	4b38      	ldr	r3, [pc, #224]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c66a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c66e:	d102      	bne.n	800c676 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1f2      	bne.n	800c65c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c676:	4b33      	ldr	r3, [pc, #204]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c678:	695b      	ldr	r3, [r3, #20]
 800c67a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c67e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c682:	d158      	bne.n	800c736 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c684:	2303      	movs	r3, #3
 800c686:	e057      	b.n	800c738 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c688:	4b2e      	ldr	r3, [pc, #184]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c68e:	4a2d      	ldr	r2, [pc, #180]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c698:	e04d      	b.n	800c736 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6a0:	d141      	bne.n	800c726 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c6a2:	4b28      	ldr	r3, [pc, #160]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c6aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ae:	d131      	bne.n	800c714 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c6b0:	4b24      	ldr	r3, [pc, #144]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6b6:	4a23      	ldr	r2, [pc, #140]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6c0:	4b20      	ldr	r3, [pc, #128]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c6c8:	4a1e      	ldr	r2, [pc, #120]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c6ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800c6d0:	4b1d      	ldr	r3, [pc, #116]	; (800c748 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2232      	movs	r2, #50	; 0x32
 800c6d6:	fb02 f303 	mul.w	r3, r2, r3
 800c6da:	4a1c      	ldr	r2, [pc, #112]	; (800c74c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c6dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e0:	0c9b      	lsrs	r3, r3, #18
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c6e6:	e002      	b.n	800c6ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c6ee:	4b15      	ldr	r3, [pc, #84]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6fa:	d102      	bne.n	800c702 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1f2      	bne.n	800c6e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c702:	4b10      	ldr	r3, [pc, #64]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c70e:	d112      	bne.n	800c736 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c710:	2303      	movs	r3, #3
 800c712:	e011      	b.n	800c738 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c714:	4b0b      	ldr	r3, [pc, #44]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c71a:	4a0a      	ldr	r2, [pc, #40]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c71c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c724:	e007      	b.n	800c736 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c726:	4b07      	ldr	r3, [pc, #28]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c72e:	4a05      	ldr	r2, [pc, #20]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c730:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c734:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3714      	adds	r7, #20
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr
 800c744:	40007000 	.word	0x40007000
 800c748:	20000038 	.word	0x20000038
 800c74c:	431bde83 	.word	0x431bde83

0800c750 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800c750:	b480      	push	{r7}
 800c752:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <HAL_PWREx_EnableVddUSB+0x1c>)
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	4a04      	ldr	r2, [pc, #16]	; (800c76c <HAL_PWREx_EnableVddUSB+0x1c>)
 800c75a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c75e:	6053      	str	r3, [r2, #4]
}
 800c760:	bf00      	nop
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	40007000 	.word	0x40007000

0800c770 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800c770:	b480      	push	{r7}
 800c772:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800c774:	4b05      	ldr	r3, [pc, #20]	; (800c78c <HAL_PWREx_EnableVddIO2+0x1c>)
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	4a04      	ldr	r2, [pc, #16]	; (800c78c <HAL_PWREx_EnableVddIO2+0x1c>)
 800c77a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c77e:	6053      	str	r3, [r2, #4]
}
 800c780:	bf00      	nop
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	40007000 	.word	0x40007000

0800c790 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 800c794:	4b1c      	ldr	r3, [pc, #112]	; (800c808 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c796:	695b      	ldr	r3, [r3, #20]
 800c798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d005      	beq.n	800c7ac <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800c7a0:	f7f8 f862 	bl	8004868 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800c7a4:	4b18      	ldr	r3, [pc, #96]	; (800c808 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c7aa:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 800c7ac:	4b16      	ldr	r3, [pc, #88]	; (800c808 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b0:	f003 0308 	and.w	r3, r3, #8
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d004      	beq.n	800c7c2 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800c7b8:	f000 f828 	bl	800c80c <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800c7bc:	4b12      	ldr	r3, [pc, #72]	; (800c808 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7be:	2208      	movs	r2, #8
 800c7c0:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800c7c2:	4b11      	ldr	r3, [pc, #68]	; (800c808 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c6:	f003 0310 	and.w	r3, r3, #16
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d004      	beq.n	800c7d8 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800c7ce:	f000 f824 	bl	800c81a <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800c7d2:	4b0d      	ldr	r3, [pc, #52]	; (800c808 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7d4:	2210      	movs	r2, #16
 800c7d6:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800c7d8:	4b0b      	ldr	r3, [pc, #44]	; (800c808 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7dc:	f003 0320 	and.w	r3, r3, #32
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d004      	beq.n	800c7ee <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800c7e4:	f000 f820 	bl	800c828 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800c7e8:	4b07      	ldr	r3, [pc, #28]	; (800c808 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7ea:	2220      	movs	r2, #32
 800c7ec:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800c7ee:	4b06      	ldr	r3, [pc, #24]	; (800c808 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d004      	beq.n	800c804 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800c7fa:	f000 f81c 	bl	800c836 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800c7fe:	4b02      	ldr	r3, [pc, #8]	; (800c808 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c800:	2240      	movs	r2, #64	; 0x40
 800c802:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800c804:	bf00      	nop
 800c806:	bd80      	pop	{r7, pc}
 800c808:	40010400 	.word	0x40010400

0800c80c <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800c80c:	b480      	push	{r7}
 800c80e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800c810:	bf00      	nop
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800c81a:	b480      	push	{r7}
 800c81c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800c81e:	bf00      	nop
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800c828:	b480      	push	{r7}
 800c82a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800c82c:	bf00      	nop
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800c836:	b480      	push	{r7}
 800c838:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800c83a:	bf00      	nop
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b088      	sub	sp, #32
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d102      	bne.n	800c858 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	f000 bc16 	b.w	800d084 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c858:	4ba0      	ldr	r3, [pc, #640]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	f003 030c 	and.w	r3, r3, #12
 800c860:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c862:	4b9e      	ldr	r3, [pc, #632]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	f003 0303 	and.w	r3, r3, #3
 800c86a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0310 	and.w	r3, r3, #16
 800c874:	2b00      	cmp	r3, #0
 800c876:	f000 80e4 	beq.w	800ca42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d007      	beq.n	800c890 <HAL_RCC_OscConfig+0x4c>
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	2b0c      	cmp	r3, #12
 800c884:	f040 808b 	bne.w	800c99e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	f040 8087 	bne.w	800c99e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c890:	4b92      	ldr	r3, [pc, #584]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 0302 	and.w	r3, r3, #2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <HAL_RCC_OscConfig+0x64>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	699b      	ldr	r3, [r3, #24]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e3ed      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a1a      	ldr	r2, [r3, #32]
 800c8ac:	4b8b      	ldr	r3, [pc, #556]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 0308 	and.w	r3, r3, #8
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d004      	beq.n	800c8c2 <HAL_RCC_OscConfig+0x7e>
 800c8b8:	4b88      	ldr	r3, [pc, #544]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8c0:	e005      	b.n	800c8ce <HAL_RCC_OscConfig+0x8a>
 800c8c2:	4b86      	ldr	r3, [pc, #536]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c8c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8c8:	091b      	lsrs	r3, r3, #4
 800c8ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d223      	bcs.n	800c91a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a1b      	ldr	r3, [r3, #32]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f000 fdb2 	bl	800d440 <RCC_SetFlashLatencyFromMSIRange>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d001      	beq.n	800c8e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e3ce      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c8e6:	4b7d      	ldr	r3, [pc, #500]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a7c      	ldr	r2, [pc, #496]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c8ec:	f043 0308 	orr.w	r3, r3, #8
 800c8f0:	6013      	str	r3, [r2, #0]
 800c8f2:	4b7a      	ldr	r3, [pc, #488]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	4977      	ldr	r1, [pc, #476]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c900:	4313      	orrs	r3, r2
 800c902:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c904:	4b75      	ldr	r3, [pc, #468]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	69db      	ldr	r3, [r3, #28]
 800c910:	021b      	lsls	r3, r3, #8
 800c912:	4972      	ldr	r1, [pc, #456]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c914:	4313      	orrs	r3, r2
 800c916:	604b      	str	r3, [r1, #4]
 800c918:	e025      	b.n	800c966 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c91a:	4b70      	ldr	r3, [pc, #448]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a6f      	ldr	r2, [pc, #444]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c920:	f043 0308 	orr.w	r3, r3, #8
 800c924:	6013      	str	r3, [r2, #0]
 800c926:	4b6d      	ldr	r3, [pc, #436]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a1b      	ldr	r3, [r3, #32]
 800c932:	496a      	ldr	r1, [pc, #424]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c934:	4313      	orrs	r3, r2
 800c936:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c938:	4b68      	ldr	r3, [pc, #416]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	69db      	ldr	r3, [r3, #28]
 800c944:	021b      	lsls	r3, r3, #8
 800c946:	4965      	ldr	r1, [pc, #404]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c948:	4313      	orrs	r3, r2
 800c94a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d109      	bne.n	800c966 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 fd72 	bl	800d440 <RCC_SetFlashLatencyFromMSIRange>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800c962:	2301      	movs	r3, #1
 800c964:	e38e      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c966:	f000 fcbf 	bl	800d2e8 <HAL_RCC_GetSysClockFreq>
 800c96a:	4602      	mov	r2, r0
 800c96c:	4b5b      	ldr	r3, [pc, #364]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	091b      	lsrs	r3, r3, #4
 800c972:	f003 030f 	and.w	r3, r3, #15
 800c976:	495a      	ldr	r1, [pc, #360]	; (800cae0 <HAL_RCC_OscConfig+0x29c>)
 800c978:	5ccb      	ldrb	r3, [r1, r3]
 800c97a:	f003 031f 	and.w	r3, r3, #31
 800c97e:	fa22 f303 	lsr.w	r3, r2, r3
 800c982:	4a58      	ldr	r2, [pc, #352]	; (800cae4 <HAL_RCC_OscConfig+0x2a0>)
 800c984:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c986:	4b58      	ldr	r3, [pc, #352]	; (800cae8 <HAL_RCC_OscConfig+0x2a4>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fa fffe 	bl	800798c <HAL_InitTick>
 800c990:	4603      	mov	r3, r0
 800c992:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c994:	7bfb      	ldrb	r3, [r7, #15]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d052      	beq.n	800ca40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c99a:	7bfb      	ldrb	r3, [r7, #15]
 800c99c:	e372      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d032      	beq.n	800ca0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c9a6:	4b4d      	ldr	r3, [pc, #308]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a4c      	ldr	r2, [pc, #304]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c9ac:	f043 0301 	orr.w	r3, r3, #1
 800c9b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c9b2:	f7fb f837 	bl	8007a24 <HAL_GetTick>
 800c9b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c9b8:	e008      	b.n	800c9cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c9ba:	f7fb f833 	bl	8007a24 <HAL_GetTick>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	1ad3      	subs	r3, r2, r3
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d901      	bls.n	800c9cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	e35b      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c9cc:	4b43      	ldr	r3, [pc, #268]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 0302 	and.w	r3, r3, #2
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d0f0      	beq.n	800c9ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c9d8:	4b40      	ldr	r3, [pc, #256]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a3f      	ldr	r2, [pc, #252]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c9de:	f043 0308 	orr.w	r3, r3, #8
 800c9e2:	6013      	str	r3, [r2, #0]
 800c9e4:	4b3d      	ldr	r3, [pc, #244]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6a1b      	ldr	r3, [r3, #32]
 800c9f0:	493a      	ldr	r1, [pc, #232]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c9f6:	4b39      	ldr	r3, [pc, #228]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	021b      	lsls	r3, r3, #8
 800ca04:	4935      	ldr	r1, [pc, #212]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800ca06:	4313      	orrs	r3, r2
 800ca08:	604b      	str	r3, [r1, #4]
 800ca0a:	e01a      	b.n	800ca42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ca0c:	4b33      	ldr	r3, [pc, #204]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a32      	ldr	r2, [pc, #200]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800ca12:	f023 0301 	bic.w	r3, r3, #1
 800ca16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ca18:	f7fb f804 	bl	8007a24 <HAL_GetTick>
 800ca1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ca1e:	e008      	b.n	800ca32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ca20:	f7fb f800 	bl	8007a24 <HAL_GetTick>
 800ca24:	4602      	mov	r2, r0
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	1ad3      	subs	r3, r2, r3
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d901      	bls.n	800ca32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ca2e:	2303      	movs	r3, #3
 800ca30:	e328      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ca32:	4b2a      	ldr	r3, [pc, #168]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f003 0302 	and.w	r3, r3, #2
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d1f0      	bne.n	800ca20 <HAL_RCC_OscConfig+0x1dc>
 800ca3e:	e000      	b.n	800ca42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ca40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 0301 	and.w	r3, r3, #1
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d073      	beq.n	800cb36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	2b08      	cmp	r3, #8
 800ca52:	d005      	beq.n	800ca60 <HAL_RCC_OscConfig+0x21c>
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	2b0c      	cmp	r3, #12
 800ca58:	d10e      	bne.n	800ca78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d10b      	bne.n	800ca78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca60:	4b1e      	ldr	r3, [pc, #120]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d063      	beq.n	800cb34 <HAL_RCC_OscConfig+0x2f0>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d15f      	bne.n	800cb34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e305      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca80:	d106      	bne.n	800ca90 <HAL_RCC_OscConfig+0x24c>
 800ca82:	4b16      	ldr	r3, [pc, #88]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a15      	ldr	r2, [pc, #84]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800ca88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	e01d      	b.n	800cacc <HAL_RCC_OscConfig+0x288>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca98:	d10c      	bne.n	800cab4 <HAL_RCC_OscConfig+0x270>
 800ca9a:	4b10      	ldr	r3, [pc, #64]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a0f      	ldr	r2, [pc, #60]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800caa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800caa4:	6013      	str	r3, [r2, #0]
 800caa6:	4b0d      	ldr	r3, [pc, #52]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a0c      	ldr	r2, [pc, #48]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800caac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cab0:	6013      	str	r3, [r2, #0]
 800cab2:	e00b      	b.n	800cacc <HAL_RCC_OscConfig+0x288>
 800cab4:	4b09      	ldr	r3, [pc, #36]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a08      	ldr	r2, [pc, #32]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800caba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	4b06      	ldr	r3, [pc, #24]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a05      	ldr	r2, [pc, #20]	; (800cadc <HAL_RCC_OscConfig+0x298>)
 800cac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800caca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d01b      	beq.n	800cb0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cad4:	f7fa ffa6 	bl	8007a24 <HAL_GetTick>
 800cad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cada:	e010      	b.n	800cafe <HAL_RCC_OscConfig+0x2ba>
 800cadc:	40021000 	.word	0x40021000
 800cae0:	08023b38 	.word	0x08023b38
 800cae4:	20000038 	.word	0x20000038
 800cae8:	200000d8 	.word	0x200000d8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800caec:	f7fa ff9a 	bl	8007a24 <HAL_GetTick>
 800caf0:	4602      	mov	r2, r0
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	2b64      	cmp	r3, #100	; 0x64
 800caf8:	d901      	bls.n	800cafe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e2c2      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cafe:	4baf      	ldr	r3, [pc, #700]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0f0      	beq.n	800caec <HAL_RCC_OscConfig+0x2a8>
 800cb0a:	e014      	b.n	800cb36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb0c:	f7fa ff8a 	bl	8007a24 <HAL_GetTick>
 800cb10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cb12:	e008      	b.n	800cb26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb14:	f7fa ff86 	bl	8007a24 <HAL_GetTick>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	1ad3      	subs	r3, r2, r3
 800cb1e:	2b64      	cmp	r3, #100	; 0x64
 800cb20:	d901      	bls.n	800cb26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800cb22:	2303      	movs	r3, #3
 800cb24:	e2ae      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cb26:	4ba5      	ldr	r3, [pc, #660]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1f0      	bne.n	800cb14 <HAL_RCC_OscConfig+0x2d0>
 800cb32:	e000      	b.n	800cb36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f003 0302 	and.w	r3, r3, #2
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d060      	beq.n	800cc04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	d005      	beq.n	800cb54 <HAL_RCC_OscConfig+0x310>
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	2b0c      	cmp	r3, #12
 800cb4c:	d119      	bne.n	800cb82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d116      	bne.n	800cb82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb54:	4b99      	ldr	r3, [pc, #612]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d005      	beq.n	800cb6c <HAL_RCC_OscConfig+0x328>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d101      	bne.n	800cb6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e28b      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb6c:	4b93      	ldr	r3, [pc, #588]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	691b      	ldr	r3, [r3, #16]
 800cb78:	061b      	lsls	r3, r3, #24
 800cb7a:	4990      	ldr	r1, [pc, #576]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb80:	e040      	b.n	800cc04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d023      	beq.n	800cbd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb8a:	4b8c      	ldr	r3, [pc, #560]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a8b      	ldr	r2, [pc, #556]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cb90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb96:	f7fa ff45 	bl	8007a24 <HAL_GetTick>
 800cb9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cb9c:	e008      	b.n	800cbb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb9e:	f7fa ff41 	bl	8007a24 <HAL_GetTick>
 800cba2:	4602      	mov	r2, r0
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d901      	bls.n	800cbb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800cbac:	2303      	movs	r3, #3
 800cbae:	e269      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cbb0:	4b82      	ldr	r3, [pc, #520]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d0f0      	beq.n	800cb9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbbc:	4b7f      	ldr	r3, [pc, #508]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	061b      	lsls	r3, r3, #24
 800cbca:	497c      	ldr	r1, [pc, #496]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	604b      	str	r3, [r1, #4]
 800cbd0:	e018      	b.n	800cc04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cbd2:	4b7a      	ldr	r3, [pc, #488]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a79      	ldr	r2, [pc, #484]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cbd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbde:	f7fa ff21 	bl	8007a24 <HAL_GetTick>
 800cbe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cbe4:	e008      	b.n	800cbf8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cbe6:	f7fa ff1d 	bl	8007a24 <HAL_GetTick>
 800cbea:	4602      	mov	r2, r0
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d901      	bls.n	800cbf8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e245      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cbf8:	4b70      	ldr	r3, [pc, #448]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1f0      	bne.n	800cbe6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 0308 	and.w	r3, r3, #8
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d03c      	beq.n	800cc8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	695b      	ldr	r3, [r3, #20]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01c      	beq.n	800cc52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc18:	4b68      	ldr	r3, [pc, #416]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cc1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc1e:	4a67      	ldr	r2, [pc, #412]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cc20:	f043 0301 	orr.w	r3, r3, #1
 800cc24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc28:	f7fa fefc 	bl	8007a24 <HAL_GetTick>
 800cc2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cc2e:	e008      	b.n	800cc42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc30:	f7fa fef8 	bl	8007a24 <HAL_GetTick>
 800cc34:	4602      	mov	r2, r0
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d901      	bls.n	800cc42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	e220      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cc42:	4b5e      	ldr	r3, [pc, #376]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cc44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc48:	f003 0302 	and.w	r3, r3, #2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d0ef      	beq.n	800cc30 <HAL_RCC_OscConfig+0x3ec>
 800cc50:	e01b      	b.n	800cc8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc52:	4b5a      	ldr	r3, [pc, #360]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cc54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc58:	4a58      	ldr	r2, [pc, #352]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cc5a:	f023 0301 	bic.w	r3, r3, #1
 800cc5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc62:	f7fa fedf 	bl	8007a24 <HAL_GetTick>
 800cc66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cc68:	e008      	b.n	800cc7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc6a:	f7fa fedb 	bl	8007a24 <HAL_GetTick>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	1ad3      	subs	r3, r2, r3
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d901      	bls.n	800cc7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800cc78:	2303      	movs	r3, #3
 800cc7a:	e203      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cc7c:	4b4f      	ldr	r3, [pc, #316]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cc7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc82:	f003 0302 	and.w	r3, r3, #2
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d1ef      	bne.n	800cc6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 0304 	and.w	r3, r3, #4
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f000 80a6 	beq.w	800cde4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800cc9c:	4b47      	ldr	r3, [pc, #284]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cc9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10d      	bne.n	800ccc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cca8:	4b44      	ldr	r3, [pc, #272]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800ccaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccac:	4a43      	ldr	r2, [pc, #268]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800ccae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccb2:	6593      	str	r3, [r2, #88]	; 0x58
 800ccb4:	4b41      	ldr	r3, [pc, #260]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800ccb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccbc:	60bb      	str	r3, [r7, #8]
 800ccbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ccc4:	4b3e      	ldr	r3, [pc, #248]	; (800cdc0 <HAL_RCC_OscConfig+0x57c>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d118      	bne.n	800cd02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ccd0:	4b3b      	ldr	r3, [pc, #236]	; (800cdc0 <HAL_RCC_OscConfig+0x57c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a3a      	ldr	r2, [pc, #232]	; (800cdc0 <HAL_RCC_OscConfig+0x57c>)
 800ccd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ccdc:	f7fa fea2 	bl	8007a24 <HAL_GetTick>
 800cce0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cce2:	e008      	b.n	800ccf6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cce4:	f7fa fe9e 	bl	8007a24 <HAL_GetTick>
 800cce8:	4602      	mov	r2, r0
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d901      	bls.n	800ccf6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e1c6      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ccf6:	4b32      	ldr	r3, [pc, #200]	; (800cdc0 <HAL_RCC_OscConfig+0x57c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0f0      	beq.n	800cce4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d108      	bne.n	800cd1c <HAL_RCC_OscConfig+0x4d8>
 800cd0a:	4b2c      	ldr	r3, [pc, #176]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd10:	4a2a      	ldr	r2, [pc, #168]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd12:	f043 0301 	orr.w	r3, r3, #1
 800cd16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd1a:	e024      	b.n	800cd66 <HAL_RCC_OscConfig+0x522>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	2b05      	cmp	r3, #5
 800cd22:	d110      	bne.n	800cd46 <HAL_RCC_OscConfig+0x502>
 800cd24:	4b25      	ldr	r3, [pc, #148]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd2a:	4a24      	ldr	r2, [pc, #144]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd2c:	f043 0304 	orr.w	r3, r3, #4
 800cd30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd34:	4b21      	ldr	r3, [pc, #132]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd3a:	4a20      	ldr	r2, [pc, #128]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd3c:	f043 0301 	orr.w	r3, r3, #1
 800cd40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd44:	e00f      	b.n	800cd66 <HAL_RCC_OscConfig+0x522>
 800cd46:	4b1d      	ldr	r3, [pc, #116]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd4c:	4a1b      	ldr	r2, [pc, #108]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd4e:	f023 0301 	bic.w	r3, r3, #1
 800cd52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd56:	4b19      	ldr	r3, [pc, #100]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd5c:	4a17      	ldr	r2, [pc, #92]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd5e:	f023 0304 	bic.w	r3, r3, #4
 800cd62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d016      	beq.n	800cd9c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd6e:	f7fa fe59 	bl	8007a24 <HAL_GetTick>
 800cd72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd74:	e00a      	b.n	800cd8c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd76:	f7fa fe55 	bl	8007a24 <HAL_GetTick>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	1ad3      	subs	r3, r2, r3
 800cd80:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d901      	bls.n	800cd8c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	e17b      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd8c:	4b0b      	ldr	r3, [pc, #44]	; (800cdbc <HAL_RCC_OscConfig+0x578>)
 800cd8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd92:	f003 0302 	and.w	r3, r3, #2
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d0ed      	beq.n	800cd76 <HAL_RCC_OscConfig+0x532>
 800cd9a:	e01a      	b.n	800cdd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd9c:	f7fa fe42 	bl	8007a24 <HAL_GetTick>
 800cda0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cda2:	e00f      	b.n	800cdc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cda4:	f7fa fe3e 	bl	8007a24 <HAL_GetTick>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	1ad3      	subs	r3, r2, r3
 800cdae:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d906      	bls.n	800cdc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	e164      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
 800cdba:	bf00      	nop
 800cdbc:	40021000 	.word	0x40021000
 800cdc0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cdc4:	4ba8      	ldr	r3, [pc, #672]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cdc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdca:	f003 0302 	and.w	r3, r3, #2
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1e8      	bne.n	800cda4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cdd2:	7ffb      	ldrb	r3, [r7, #31]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d105      	bne.n	800cde4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cdd8:	4ba3      	ldr	r3, [pc, #652]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cdda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cddc:	4aa2      	ldr	r2, [pc, #648]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cdde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cde2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 0320 	and.w	r3, r3, #32
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d03c      	beq.n	800ce6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d01c      	beq.n	800ce32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cdf8:	4b9b      	ldr	r3, [pc, #620]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cdfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cdfe:	4a9a      	ldr	r2, [pc, #616]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800ce00:	f043 0301 	orr.w	r3, r3, #1
 800ce04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce08:	f7fa fe0c 	bl	8007a24 <HAL_GetTick>
 800ce0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ce0e:	e008      	b.n	800ce22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce10:	f7fa fe08 	bl	8007a24 <HAL_GetTick>
 800ce14:	4602      	mov	r2, r0
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	d901      	bls.n	800ce22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	e130      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ce22:	4b91      	ldr	r3, [pc, #580]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800ce24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce28:	f003 0302 	and.w	r3, r3, #2
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d0ef      	beq.n	800ce10 <HAL_RCC_OscConfig+0x5cc>
 800ce30:	e01b      	b.n	800ce6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ce32:	4b8d      	ldr	r3, [pc, #564]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800ce34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce38:	4a8b      	ldr	r2, [pc, #556]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800ce3a:	f023 0301 	bic.w	r3, r3, #1
 800ce3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce42:	f7fa fdef 	bl	8007a24 <HAL_GetTick>
 800ce46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ce48:	e008      	b.n	800ce5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce4a:	f7fa fdeb 	bl	8007a24 <HAL_GetTick>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d901      	bls.n	800ce5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e113      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ce5c:	4b82      	ldr	r3, [pc, #520]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800ce5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce62:	f003 0302 	and.w	r3, r3, #2
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1ef      	bne.n	800ce4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f000 8107 	beq.w	800d082 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	f040 80cb 	bne.w	800d014 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ce7e:	4b7a      	ldr	r3, [pc, #488]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	f003 0203 	and.w	r2, r3, #3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d12c      	bne.n	800ceec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d123      	bne.n	800ceec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d11b      	bne.n	800ceec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cebe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d113      	bne.n	800ceec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cece:	085b      	lsrs	r3, r3, #1
 800ced0:	3b01      	subs	r3, #1
 800ced2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d109      	bne.n	800ceec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee2:	085b      	lsrs	r3, r3, #1
 800cee4:	3b01      	subs	r3, #1
 800cee6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d06d      	beq.n	800cfc8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	2b0c      	cmp	r3, #12
 800cef0:	d068      	beq.n	800cfc4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800cef2:	4b5d      	ldr	r3, [pc, #372]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d105      	bne.n	800cf0a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800cefe:	4b5a      	ldr	r3, [pc, #360]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e0ba      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800cf0e:	4b56      	ldr	r3, [pc, #344]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a55      	ldr	r2, [pc, #340]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cf14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cf1a:	f7fa fd83 	bl	8007a24 <HAL_GetTick>
 800cf1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf20:	e008      	b.n	800cf34 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf22:	f7fa fd7f 	bl	8007a24 <HAL_GetTick>
 800cf26:	4602      	mov	r2, r0
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d901      	bls.n	800cf34 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800cf30:	2303      	movs	r3, #3
 800cf32:	e0a7      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf34:	4b4c      	ldr	r3, [pc, #304]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1f0      	bne.n	800cf22 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf40:	4b49      	ldr	r3, [pc, #292]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cf42:	68da      	ldr	r2, [r3, #12]
 800cf44:	4b49      	ldr	r3, [pc, #292]	; (800d06c <HAL_RCC_OscConfig+0x828>)
 800cf46:	4013      	ands	r3, r2
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cf50:	3a01      	subs	r2, #1
 800cf52:	0112      	lsls	r2, r2, #4
 800cf54:	4311      	orrs	r1, r2
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cf5a:	0212      	lsls	r2, r2, #8
 800cf5c:	4311      	orrs	r1, r2
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cf62:	0852      	lsrs	r2, r2, #1
 800cf64:	3a01      	subs	r2, #1
 800cf66:	0552      	lsls	r2, r2, #21
 800cf68:	4311      	orrs	r1, r2
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cf6e:	0852      	lsrs	r2, r2, #1
 800cf70:	3a01      	subs	r2, #1
 800cf72:	0652      	lsls	r2, r2, #25
 800cf74:	4311      	orrs	r1, r2
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cf7a:	06d2      	lsls	r2, r2, #27
 800cf7c:	430a      	orrs	r2, r1
 800cf7e:	493a      	ldr	r1, [pc, #232]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cf80:	4313      	orrs	r3, r2
 800cf82:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800cf84:	4b38      	ldr	r3, [pc, #224]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a37      	ldr	r2, [pc, #220]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cf8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cf90:	4b35      	ldr	r3, [pc, #212]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	4a34      	ldr	r2, [pc, #208]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cf96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cf9c:	f7fa fd42 	bl	8007a24 <HAL_GetTick>
 800cfa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfa2:	e008      	b.n	800cfb6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cfa4:	f7fa fd3e 	bl	8007a24 <HAL_GetTick>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	1ad3      	subs	r3, r2, r3
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d901      	bls.n	800cfb6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	e066      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfb6:	4b2c      	ldr	r3, [pc, #176]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d0f0      	beq.n	800cfa4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cfc2:	e05e      	b.n	800d082 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e05d      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfc8:	4b27      	ldr	r3, [pc, #156]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d156      	bne.n	800d082 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cfd4:	4b24      	ldr	r3, [pc, #144]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a23      	ldr	r2, [pc, #140]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cfda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cfe0:	4b21      	ldr	r3, [pc, #132]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	4a20      	ldr	r2, [pc, #128]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800cfe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cfec:	f7fa fd1a 	bl	8007a24 <HAL_GetTick>
 800cff0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cff2:	e008      	b.n	800d006 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cff4:	f7fa fd16 	bl	8007a24 <HAL_GetTick>
 800cff8:	4602      	mov	r2, r0
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d901      	bls.n	800d006 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800d002:	2303      	movs	r3, #3
 800d004:	e03e      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d006:	4b18      	ldr	r3, [pc, #96]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d0f0      	beq.n	800cff4 <HAL_RCC_OscConfig+0x7b0>
 800d012:	e036      	b.n	800d082 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	2b0c      	cmp	r3, #12
 800d018:	d031      	beq.n	800d07e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d01a:	4b13      	ldr	r3, [pc, #76]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a12      	ldr	r2, [pc, #72]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800d020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d024:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800d026:	4b10      	ldr	r3, [pc, #64]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d105      	bne.n	800d03e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d032:	4b0d      	ldr	r3, [pc, #52]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	4a0c      	ldr	r2, [pc, #48]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800d038:	f023 0303 	bic.w	r3, r3, #3
 800d03c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800d03e:	4b0a      	ldr	r3, [pc, #40]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	4a09      	ldr	r2, [pc, #36]	; (800d068 <HAL_RCC_OscConfig+0x824>)
 800d044:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d04c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d04e:	f7fa fce9 	bl	8007a24 <HAL_GetTick>
 800d052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d054:	e00c      	b.n	800d070 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d056:	f7fa fce5 	bl	8007a24 <HAL_GetTick>
 800d05a:	4602      	mov	r2, r0
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	2b02      	cmp	r3, #2
 800d062:	d905      	bls.n	800d070 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800d064:	2303      	movs	r3, #3
 800d066:	e00d      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
 800d068:	40021000 	.word	0x40021000
 800d06c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d070:	4b06      	ldr	r3, [pc, #24]	; (800d08c <HAL_RCC_OscConfig+0x848>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1ec      	bne.n	800d056 <HAL_RCC_OscConfig+0x812>
 800d07c:	e001      	b.n	800d082 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	e000      	b.n	800d084 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3720      	adds	r7, #32
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	40021000 	.word	0x40021000

0800d090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d09a:	2300      	movs	r3, #0
 800d09c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e10f      	b.n	800d2c8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d0a8:	4b89      	ldr	r3, [pc, #548]	; (800d2d0 <HAL_RCC_ClockConfig+0x240>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f003 030f 	and.w	r3, r3, #15
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d910      	bls.n	800d0d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0b6:	4b86      	ldr	r3, [pc, #536]	; (800d2d0 <HAL_RCC_ClockConfig+0x240>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f023 020f 	bic.w	r2, r3, #15
 800d0be:	4984      	ldr	r1, [pc, #528]	; (800d2d0 <HAL_RCC_ClockConfig+0x240>)
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0c6:	4b82      	ldr	r3, [pc, #520]	; (800d2d0 <HAL_RCC_ClockConfig+0x240>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f003 030f 	and.w	r3, r3, #15
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d001      	beq.n	800d0d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e0f7      	b.n	800d2c8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 0301 	and.w	r3, r3, #1
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f000 8089 	beq.w	800d1f8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	2b03      	cmp	r3, #3
 800d0ec:	d133      	bne.n	800d156 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0ee:	4b79      	ldr	r3, [pc, #484]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e0e4      	b.n	800d2c8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800d0fe:	f000 f9f9 	bl	800d4f4 <RCC_GetSysClockFreqFromPLLSource>
 800d102:	4603      	mov	r3, r0
 800d104:	4a74      	ldr	r2, [pc, #464]	; (800d2d8 <HAL_RCC_ClockConfig+0x248>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d955      	bls.n	800d1b6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800d10a:	4b72      	ldr	r3, [pc, #456]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10a      	bne.n	800d12c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d116:	4b6f      	ldr	r3, [pc, #444]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d11e:	4a6d      	ldr	r2, [pc, #436]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d124:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d126:	2380      	movs	r3, #128	; 0x80
 800d128:	617b      	str	r3, [r7, #20]
 800d12a:	e044      	b.n	800d1b6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f003 0302 	and.w	r3, r3, #2
 800d134:	2b00      	cmp	r3, #0
 800d136:	d03e      	beq.n	800d1b6 <HAL_RCC_ClockConfig+0x126>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d13a      	bne.n	800d1b6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d140:	4b64      	ldr	r3, [pc, #400]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d148:	4a62      	ldr	r2, [pc, #392]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d14e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d150:	2380      	movs	r3, #128	; 0x80
 800d152:	617b      	str	r3, [r7, #20]
 800d154:	e02f      	b.n	800d1b6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d107      	bne.n	800d16e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d15e:	4b5d      	ldr	r3, [pc, #372]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d166:	2b00      	cmp	r3, #0
 800d168:	d115      	bne.n	800d196 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	e0ac      	b.n	800d2c8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d107      	bne.n	800d186 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d176:	4b57      	ldr	r3, [pc, #348]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f003 0302 	and.w	r3, r3, #2
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d109      	bne.n	800d196 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	e0a0      	b.n	800d2c8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d186:	4b53      	ldr	r3, [pc, #332]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d101      	bne.n	800d196 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	e098      	b.n	800d2c8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800d196:	f000 f8a7 	bl	800d2e8 <HAL_RCC_GetSysClockFreq>
 800d19a:	4603      	mov	r3, r0
 800d19c:	4a4e      	ldr	r2, [pc, #312]	; (800d2d8 <HAL_RCC_ClockConfig+0x248>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d909      	bls.n	800d1b6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d1a2:	4b4c      	ldr	r3, [pc, #304]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d1aa:	4a4a      	ldr	r2, [pc, #296]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d1b2:	2380      	movs	r3, #128	; 0x80
 800d1b4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d1b6:	4b47      	ldr	r3, [pc, #284]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	f023 0203 	bic.w	r2, r3, #3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	4944      	ldr	r1, [pc, #272]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1c8:	f7fa fc2c 	bl	8007a24 <HAL_GetTick>
 800d1cc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1ce:	e00a      	b.n	800d1e6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d1d0:	f7fa fc28 	bl	8007a24 <HAL_GetTick>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d901      	bls.n	800d1e6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800d1e2:	2303      	movs	r3, #3
 800d1e4:	e070      	b.n	800d2c8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1e6:	4b3b      	ldr	r3, [pc, #236]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	f003 020c 	and.w	r2, r3, #12
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d1eb      	bne.n	800d1d0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b00      	cmp	r3, #0
 800d202:	d009      	beq.n	800d218 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d204:	4b33      	ldr	r3, [pc, #204]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	4930      	ldr	r1, [pc, #192]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d212:	4313      	orrs	r3, r2
 800d214:	608b      	str	r3, [r1, #8]
 800d216:	e008      	b.n	800d22a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	2b80      	cmp	r3, #128	; 0x80
 800d21c:	d105      	bne.n	800d22a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d21e:	4b2d      	ldr	r3, [pc, #180]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	4a2c      	ldr	r2, [pc, #176]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d228:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d22a:	4b29      	ldr	r3, [pc, #164]	; (800d2d0 <HAL_RCC_ClockConfig+0x240>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f003 030f 	and.w	r3, r3, #15
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	429a      	cmp	r2, r3
 800d236:	d210      	bcs.n	800d25a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d238:	4b25      	ldr	r3, [pc, #148]	; (800d2d0 <HAL_RCC_ClockConfig+0x240>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f023 020f 	bic.w	r2, r3, #15
 800d240:	4923      	ldr	r1, [pc, #140]	; (800d2d0 <HAL_RCC_ClockConfig+0x240>)
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	4313      	orrs	r3, r2
 800d246:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d248:	4b21      	ldr	r3, [pc, #132]	; (800d2d0 <HAL_RCC_ClockConfig+0x240>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f003 030f 	and.w	r3, r3, #15
 800d250:	683a      	ldr	r2, [r7, #0]
 800d252:	429a      	cmp	r2, r3
 800d254:	d001      	beq.n	800d25a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	e036      	b.n	800d2c8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f003 0304 	and.w	r3, r3, #4
 800d262:	2b00      	cmp	r3, #0
 800d264:	d008      	beq.n	800d278 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d266:	4b1b      	ldr	r3, [pc, #108]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	4918      	ldr	r1, [pc, #96]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d274:	4313      	orrs	r3, r2
 800d276:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f003 0308 	and.w	r3, r3, #8
 800d280:	2b00      	cmp	r3, #0
 800d282:	d009      	beq.n	800d298 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d284:	4b13      	ldr	r3, [pc, #76]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	691b      	ldr	r3, [r3, #16]
 800d290:	00db      	lsls	r3, r3, #3
 800d292:	4910      	ldr	r1, [pc, #64]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d294:	4313      	orrs	r3, r2
 800d296:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d298:	f000 f826 	bl	800d2e8 <HAL_RCC_GetSysClockFreq>
 800d29c:	4602      	mov	r2, r0
 800d29e:	4b0d      	ldr	r3, [pc, #52]	; (800d2d4 <HAL_RCC_ClockConfig+0x244>)
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	091b      	lsrs	r3, r3, #4
 800d2a4:	f003 030f 	and.w	r3, r3, #15
 800d2a8:	490c      	ldr	r1, [pc, #48]	; (800d2dc <HAL_RCC_ClockConfig+0x24c>)
 800d2aa:	5ccb      	ldrb	r3, [r1, r3]
 800d2ac:	f003 031f 	and.w	r3, r3, #31
 800d2b0:	fa22 f303 	lsr.w	r3, r2, r3
 800d2b4:	4a0a      	ldr	r2, [pc, #40]	; (800d2e0 <HAL_RCC_ClockConfig+0x250>)
 800d2b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d2b8:	4b0a      	ldr	r3, [pc, #40]	; (800d2e4 <HAL_RCC_ClockConfig+0x254>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fa fb65 	bl	800798c <HAL_InitTick>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]

  return status;
 800d2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3718      	adds	r7, #24
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	40022000 	.word	0x40022000
 800d2d4:	40021000 	.word	0x40021000
 800d2d8:	04c4b400 	.word	0x04c4b400
 800d2dc:	08023b38 	.word	0x08023b38
 800d2e0:	20000038 	.word	0x20000038
 800d2e4:	200000d8 	.word	0x200000d8

0800d2e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b089      	sub	sp, #36	; 0x24
 800d2ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	61fb      	str	r3, [r7, #28]
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d2f6:	4b3e      	ldr	r3, [pc, #248]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	f003 030c 	and.w	r3, r3, #12
 800d2fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d300:	4b3b      	ldr	r3, [pc, #236]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	f003 0303 	and.w	r3, r3, #3
 800d308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d005      	beq.n	800d31c <HAL_RCC_GetSysClockFreq+0x34>
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	2b0c      	cmp	r3, #12
 800d314:	d121      	bne.n	800d35a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d11e      	bne.n	800d35a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d31c:	4b34      	ldr	r3, [pc, #208]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f003 0308 	and.w	r3, r3, #8
 800d324:	2b00      	cmp	r3, #0
 800d326:	d107      	bne.n	800d338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d328:	4b31      	ldr	r3, [pc, #196]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d32a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d32e:	0a1b      	lsrs	r3, r3, #8
 800d330:	f003 030f 	and.w	r3, r3, #15
 800d334:	61fb      	str	r3, [r7, #28]
 800d336:	e005      	b.n	800d344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d338:	4b2d      	ldr	r3, [pc, #180]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	091b      	lsrs	r3, r3, #4
 800d33e:	f003 030f 	and.w	r3, r3, #15
 800d342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d344:	4a2b      	ldr	r2, [pc, #172]	; (800d3f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d34c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10d      	bne.n	800d370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d358:	e00a      	b.n	800d370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	d102      	bne.n	800d366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d360:	4b25      	ldr	r3, [pc, #148]	; (800d3f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800d362:	61bb      	str	r3, [r7, #24]
 800d364:	e004      	b.n	800d370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	2b08      	cmp	r3, #8
 800d36a:	d101      	bne.n	800d370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d36c:	4b22      	ldr	r3, [pc, #136]	; (800d3f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800d36e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	2b0c      	cmp	r3, #12
 800d374:	d134      	bne.n	800d3e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d376:	4b1e      	ldr	r3, [pc, #120]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	f003 0303 	and.w	r3, r3, #3
 800d37e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	2b02      	cmp	r3, #2
 800d384:	d003      	beq.n	800d38e <HAL_RCC_GetSysClockFreq+0xa6>
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	2b03      	cmp	r3, #3
 800d38a:	d003      	beq.n	800d394 <HAL_RCC_GetSysClockFreq+0xac>
 800d38c:	e005      	b.n	800d39a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d38e:	4b1a      	ldr	r3, [pc, #104]	; (800d3f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800d390:	617b      	str	r3, [r7, #20]
      break;
 800d392:	e005      	b.n	800d3a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d394:	4b18      	ldr	r3, [pc, #96]	; (800d3f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800d396:	617b      	str	r3, [r7, #20]
      break;
 800d398:	e002      	b.n	800d3a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	617b      	str	r3, [r7, #20]
      break;
 800d39e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d3a0:	4b13      	ldr	r3, [pc, #76]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	091b      	lsrs	r3, r3, #4
 800d3a6:	f003 030f 	and.w	r3, r3, #15
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d3ae:	4b10      	ldr	r3, [pc, #64]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	0a1b      	lsrs	r3, r3, #8
 800d3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	fb02 f203 	mul.w	r2, r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d3c6:	4b0a      	ldr	r3, [pc, #40]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	0e5b      	lsrs	r3, r3, #25
 800d3cc:	f003 0303 	and.w	r3, r3, #3
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	005b      	lsls	r3, r3, #1
 800d3d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d3e0:	69bb      	ldr	r3, [r7, #24]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3724      	adds	r7, #36	; 0x24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	40021000 	.word	0x40021000
 800d3f4:	08023b50 	.word	0x08023b50
 800d3f8:	00f42400 	.word	0x00f42400

0800d3fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d400:	4b03      	ldr	r3, [pc, #12]	; (800d410 <HAL_RCC_GetHCLKFreq+0x14>)
 800d402:	681b      	ldr	r3, [r3, #0]
}
 800d404:	4618      	mov	r0, r3
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	20000038 	.word	0x20000038

0800d414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d418:	f7ff fff0 	bl	800d3fc <HAL_RCC_GetHCLKFreq>
 800d41c:	4602      	mov	r2, r0
 800d41e:	4b06      	ldr	r3, [pc, #24]	; (800d438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	0a1b      	lsrs	r3, r3, #8
 800d424:	f003 0307 	and.w	r3, r3, #7
 800d428:	4904      	ldr	r1, [pc, #16]	; (800d43c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d42a:	5ccb      	ldrb	r3, [r1, r3]
 800d42c:	f003 031f 	and.w	r3, r3, #31
 800d430:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d434:	4618      	mov	r0, r3
 800d436:	bd80      	pop	{r7, pc}
 800d438:	40021000 	.word	0x40021000
 800d43c:	08023b48 	.word	0x08023b48

0800d440 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d448:	2300      	movs	r3, #0
 800d44a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d44c:	4b27      	ldr	r3, [pc, #156]	; (800d4ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d44e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d454:	2b00      	cmp	r3, #0
 800d456:	d003      	beq.n	800d460 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d458:	f7ff f8b6 	bl	800c5c8 <HAL_PWREx_GetVoltageRange>
 800d45c:	6178      	str	r0, [r7, #20]
 800d45e:	e014      	b.n	800d48a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d460:	4b22      	ldr	r3, [pc, #136]	; (800d4ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d464:	4a21      	ldr	r2, [pc, #132]	; (800d4ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d46a:	6593      	str	r3, [r2, #88]	; 0x58
 800d46c:	4b1f      	ldr	r3, [pc, #124]	; (800d4ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d46e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d478:	f7ff f8a6 	bl	800c5c8 <HAL_PWREx_GetVoltageRange>
 800d47c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d47e:	4b1b      	ldr	r3, [pc, #108]	; (800d4ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d482:	4a1a      	ldr	r2, [pc, #104]	; (800d4ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d488:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d490:	d10b      	bne.n	800d4aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2b80      	cmp	r3, #128	; 0x80
 800d496:	d913      	bls.n	800d4c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2ba0      	cmp	r3, #160	; 0xa0
 800d49c:	d902      	bls.n	800d4a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d49e:	2302      	movs	r3, #2
 800d4a0:	613b      	str	r3, [r7, #16]
 800d4a2:	e00d      	b.n	800d4c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	613b      	str	r3, [r7, #16]
 800d4a8:	e00a      	b.n	800d4c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b7f      	cmp	r3, #127	; 0x7f
 800d4ae:	d902      	bls.n	800d4b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	613b      	str	r3, [r7, #16]
 800d4b4:	e004      	b.n	800d4c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2b70      	cmp	r3, #112	; 0x70
 800d4ba:	d101      	bne.n	800d4c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d4bc:	2301      	movs	r3, #1
 800d4be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d4c0:	4b0b      	ldr	r3, [pc, #44]	; (800d4f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f023 020f 	bic.w	r2, r3, #15
 800d4c8:	4909      	ldr	r1, [pc, #36]	; (800d4f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 030f 	and.w	r3, r3, #15
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d001      	beq.n	800d4e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e000      	b.n	800d4e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3718      	adds	r7, #24
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	40021000 	.word	0x40021000
 800d4f0:	40022000 	.word	0x40022000

0800d4f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b087      	sub	sp, #28
 800d4f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800d4fe:	4b2d      	ldr	r3, [pc, #180]	; (800d5b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	f003 0303 	and.w	r3, r3, #3
 800d506:	2b01      	cmp	r3, #1
 800d508:	d118      	bne.n	800d53c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d50a:	4b2a      	ldr	r3, [pc, #168]	; (800d5b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f003 0308 	and.w	r3, r3, #8
 800d512:	2b00      	cmp	r3, #0
 800d514:	d107      	bne.n	800d526 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d516:	4b27      	ldr	r3, [pc, #156]	; (800d5b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d51c:	0a1b      	lsrs	r3, r3, #8
 800d51e:	f003 030f 	and.w	r3, r3, #15
 800d522:	617b      	str	r3, [r7, #20]
 800d524:	e005      	b.n	800d532 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d526:	4b23      	ldr	r3, [pc, #140]	; (800d5b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	091b      	lsrs	r3, r3, #4
 800d52c:	f003 030f 	and.w	r3, r3, #15
 800d530:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d532:	4a21      	ldr	r2, [pc, #132]	; (800d5b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d53a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d53c:	4b1d      	ldr	r3, [pc, #116]	; (800d5b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	f003 0303 	and.w	r3, r3, #3
 800d544:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d003      	beq.n	800d554 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b03      	cmp	r3, #3
 800d550:	d003      	beq.n	800d55a <RCC_GetSysClockFreqFromPLLSource+0x66>
 800d552:	e005      	b.n	800d560 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800d554:	4b19      	ldr	r3, [pc, #100]	; (800d5bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800d556:	613b      	str	r3, [r7, #16]
    break;
 800d558:	e005      	b.n	800d566 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800d55a:	4b18      	ldr	r3, [pc, #96]	; (800d5bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800d55c:	613b      	str	r3, [r7, #16]
    break;
 800d55e:	e002      	b.n	800d566 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	613b      	str	r3, [r7, #16]
    break;
 800d564:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d566:	4b13      	ldr	r3, [pc, #76]	; (800d5b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	091b      	lsrs	r3, r3, #4
 800d56c:	f003 030f 	and.w	r3, r3, #15
 800d570:	3301      	adds	r3, #1
 800d572:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d574:	4b0f      	ldr	r3, [pc, #60]	; (800d5b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	0a1b      	lsrs	r3, r3, #8
 800d57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d57e:	693a      	ldr	r2, [r7, #16]
 800d580:	fb02 f203 	mul.w	r2, r2, r3
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	fbb2 f3f3 	udiv	r3, r2, r3
 800d58a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d58c:	4b09      	ldr	r3, [pc, #36]	; (800d5b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	0e5b      	lsrs	r3, r3, #25
 800d592:	f003 0303 	and.w	r3, r3, #3
 800d596:	3301      	adds	r3, #1
 800d598:	005b      	lsls	r3, r3, #1
 800d59a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800d59c:	693a      	ldr	r2, [r7, #16]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800d5a6:	683b      	ldr	r3, [r7, #0]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	371c      	adds	r7, #28
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	40021000 	.word	0x40021000
 800d5b8:	08023b50 	.word	0x08023b50
 800d5bc:	00f42400 	.word	0x00f42400

0800d5c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d040      	beq.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5e0:	2b80      	cmp	r3, #128	; 0x80
 800d5e2:	d02a      	beq.n	800d63a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d5e4:	2b80      	cmp	r3, #128	; 0x80
 800d5e6:	d825      	bhi.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d5e8:	2b60      	cmp	r3, #96	; 0x60
 800d5ea:	d026      	beq.n	800d63a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d5ec:	2b60      	cmp	r3, #96	; 0x60
 800d5ee:	d821      	bhi.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d5f0:	2b40      	cmp	r3, #64	; 0x40
 800d5f2:	d006      	beq.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800d5f4:	2b40      	cmp	r3, #64	; 0x40
 800d5f6:	d81d      	bhi.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d009      	beq.n	800d610 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800d5fc:	2b20      	cmp	r3, #32
 800d5fe:	d010      	beq.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d600:	e018      	b.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d602:	4b89      	ldr	r3, [pc, #548]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	4a88      	ldr	r2, [pc, #544]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d60c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d60e:	e015      	b.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	3304      	adds	r3, #4
 800d614:	2100      	movs	r1, #0
 800d616:	4618      	mov	r0, r3
 800d618:	f000 fb62 	bl	800dce0 <RCCEx_PLLSAI1_Config>
 800d61c:	4603      	mov	r3, r0
 800d61e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d620:	e00c      	b.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	3320      	adds	r3, #32
 800d626:	2100      	movs	r1, #0
 800d628:	4618      	mov	r0, r3
 800d62a:	f000 fc4d 	bl	800dec8 <RCCEx_PLLSAI2_Config>
 800d62e:	4603      	mov	r3, r0
 800d630:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d632:	e003      	b.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	74fb      	strb	r3, [r7, #19]
      break;
 800d638:	e000      	b.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800d63a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d63c:	7cfb      	ldrb	r3, [r7, #19]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10b      	bne.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d642:	4b79      	ldr	r3, [pc, #484]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d648:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d650:	4975      	ldr	r1, [pc, #468]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d652:	4313      	orrs	r3, r2
 800d654:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800d658:	e001      	b.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d65a:	7cfb      	ldrb	r3, [r7, #19]
 800d65c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d666:	2b00      	cmp	r3, #0
 800d668:	d047      	beq.n	800d6fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d66e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d672:	d030      	beq.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800d674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d678:	d82a      	bhi.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d67a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d67e:	d02a      	beq.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800d680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d684:	d824      	bhi.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d68a:	d008      	beq.n	800d69e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800d68c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d690:	d81e      	bhi.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00a      	beq.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 800d696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d69a:	d010      	beq.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d69c:	e018      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d69e:	4b62      	ldr	r3, [pc, #392]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	4a61      	ldr	r2, [pc, #388]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6a8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d6aa:	e015      	b.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	2100      	movs	r1, #0
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f000 fb14 	bl	800dce0 <RCCEx_PLLSAI1_Config>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d6bc:	e00c      	b.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	3320      	adds	r3, #32
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f000 fbff 	bl	800dec8 <RCCEx_PLLSAI2_Config>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d6ce:	e003      	b.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	74fb      	strb	r3, [r7, #19]
      break;
 800d6d4:	e000      	b.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800d6d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d6d8:	7cfb      	ldrb	r3, [r7, #19]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10b      	bne.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d6de:	4b52      	ldr	r3, [pc, #328]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d6e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ec:	494e      	ldr	r1, [pc, #312]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800d6f4:	e001      	b.n	800d6fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6f6:	7cfb      	ldrb	r3, [r7, #19]
 800d6f8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d702:	2b00      	cmp	r3, #0
 800d704:	f000 809f 	beq.w	800d846 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d708:	2300      	movs	r3, #0
 800d70a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d70c:	4b46      	ldr	r3, [pc, #280]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d70e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d714:	2b00      	cmp	r3, #0
 800d716:	d101      	bne.n	800d71c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800d718:	2301      	movs	r3, #1
 800d71a:	e000      	b.n	800d71e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800d71c:	2300      	movs	r3, #0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00d      	beq.n	800d73e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d722:	4b41      	ldr	r3, [pc, #260]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d726:	4a40      	ldr	r2, [pc, #256]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d72c:	6593      	str	r3, [r2, #88]	; 0x58
 800d72e:	4b3e      	ldr	r3, [pc, #248]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d736:	60bb      	str	r3, [r7, #8]
 800d738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d73a:	2301      	movs	r3, #1
 800d73c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d73e:	4b3b      	ldr	r3, [pc, #236]	; (800d82c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a3a      	ldr	r2, [pc, #232]	; (800d82c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800d744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d74a:	f7fa f96b 	bl	8007a24 <HAL_GetTick>
 800d74e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d750:	e009      	b.n	800d766 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d752:	f7fa f967 	bl	8007a24 <HAL_GetTick>
 800d756:	4602      	mov	r2, r0
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	2b02      	cmp	r3, #2
 800d75e:	d902      	bls.n	800d766 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800d760:	2303      	movs	r3, #3
 800d762:	74fb      	strb	r3, [r7, #19]
        break;
 800d764:	e005      	b.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d766:	4b31      	ldr	r3, [pc, #196]	; (800d82c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d0ef      	beq.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800d772:	7cfb      	ldrb	r3, [r7, #19]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d15b      	bne.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d778:	4b2b      	ldr	r3, [pc, #172]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d77a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d77e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d782:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d01f      	beq.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d790:	697a      	ldr	r2, [r7, #20]
 800d792:	429a      	cmp	r2, r3
 800d794:	d019      	beq.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d796:	4b24      	ldr	r3, [pc, #144]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d79c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d7a2:	4b21      	ldr	r3, [pc, #132]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7a8:	4a1f      	ldr	r2, [pc, #124]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d7b2:	4b1d      	ldr	r3, [pc, #116]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7b8:	4a1b      	ldr	r2, [pc, #108]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d7c2:	4a19      	ldr	r2, [pc, #100]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	f003 0301 	and.w	r3, r3, #1
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d016      	beq.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7d4:	f7fa f926 	bl	8007a24 <HAL_GetTick>
 800d7d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d7da:	e00b      	b.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d7dc:	f7fa f922 	bl	8007a24 <HAL_GetTick>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	1ad3      	subs	r3, r2, r3
 800d7e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d902      	bls.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	74fb      	strb	r3, [r7, #19]
            break;
 800d7f2:	e006      	b.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d7f4:	4b0c      	ldr	r3, [pc, #48]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7fa:	f003 0302 	and.w	r3, r3, #2
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d0ec      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800d802:	7cfb      	ldrb	r3, [r7, #19]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10c      	bne.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d808:	4b07      	ldr	r3, [pc, #28]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d80e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d818:	4903      	ldr	r1, [pc, #12]	; (800d828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d81a:	4313      	orrs	r3, r2
 800d81c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d820:	e008      	b.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d822:	7cfb      	ldrb	r3, [r7, #19]
 800d824:	74bb      	strb	r3, [r7, #18]
 800d826:	e005      	b.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800d828:	40021000 	.word	0x40021000
 800d82c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d830:	7cfb      	ldrb	r3, [r7, #19]
 800d832:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d834:	7c7b      	ldrb	r3, [r7, #17]
 800d836:	2b01      	cmp	r3, #1
 800d838:	d105      	bne.n	800d846 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d83a:	4ba0      	ldr	r3, [pc, #640]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d83c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d83e:	4a9f      	ldr	r2, [pc, #636]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d844:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f003 0301 	and.w	r3, r3, #1
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00a      	beq.n	800d868 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d852:	4b9a      	ldr	r3, [pc, #616]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d858:	f023 0203 	bic.w	r2, r3, #3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d860:	4996      	ldr	r1, [pc, #600]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d862:	4313      	orrs	r3, r2
 800d864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f003 0302 	and.w	r3, r3, #2
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00a      	beq.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d874:	4b91      	ldr	r3, [pc, #580]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d87a:	f023 020c 	bic.w	r2, r3, #12
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d882:	498e      	ldr	r1, [pc, #568]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d884:	4313      	orrs	r3, r2
 800d886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f003 0304 	and.w	r3, r3, #4
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00a      	beq.n	800d8ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d896:	4b89      	ldr	r3, [pc, #548]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d89c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8a4:	4985      	ldr	r1, [pc, #532]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f003 0308 	and.w	r3, r3, #8
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00a      	beq.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d8b8:	4b80      	ldr	r3, [pc, #512]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8c6:	497d      	ldr	r1, [pc, #500]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f003 0310 	and.w	r3, r3, #16
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00a      	beq.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d8da:	4b78      	ldr	r3, [pc, #480]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8e8:	4974      	ldr	r1, [pc, #464]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f003 0320 	and.w	r3, r3, #32
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00a      	beq.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d8fc:	4b6f      	ldr	r3, [pc, #444]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d90a:	496c      	ldr	r1, [pc, #432]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d90c:	4313      	orrs	r3, r2
 800d90e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00a      	beq.n	800d934 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d91e:	4b67      	ldr	r3, [pc, #412]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d924:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d92c:	4963      	ldr	r1, [pc, #396]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d92e:	4313      	orrs	r3, r2
 800d930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00a      	beq.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d940:	4b5e      	ldr	r3, [pc, #376]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d946:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d94e:	495b      	ldr	r1, [pc, #364]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d950:	4313      	orrs	r3, r2
 800d952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00a      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d962:	4b56      	ldr	r3, [pc, #344]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d968:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d970:	4952      	ldr	r1, [pc, #328]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d972:	4313      	orrs	r3, r2
 800d974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d980:	2b00      	cmp	r3, #0
 800d982:	d00a      	beq.n	800d99a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d984:	4b4d      	ldr	r3, [pc, #308]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d98a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d992:	494a      	ldr	r1, [pc, #296]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d994:	4313      	orrs	r3, r2
 800d996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00a      	beq.n	800d9bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d9a6:	4b45      	ldr	r3, [pc, #276]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9b4:	4941      	ldr	r1, [pc, #260]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00a      	beq.n	800d9de <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d9c8:	4b3c      	ldr	r3, [pc, #240]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d9ce:	f023 0203 	bic.w	r2, r3, #3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9d6:	4939      	ldr	r1, [pc, #228]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d028      	beq.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d9ea:	4b34      	ldr	r3, [pc, #208]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9f8:	4930      	ldr	r1, [pc, #192]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da08:	d106      	bne.n	800da18 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da0a:	4b2c      	ldr	r3, [pc, #176]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	4a2b      	ldr	r2, [pc, #172]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da14:	60d3      	str	r3, [r2, #12]
 800da16:	e011      	b.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da20:	d10c      	bne.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	3304      	adds	r3, #4
 800da26:	2101      	movs	r1, #1
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 f959 	bl	800dce0 <RCCEx_PLLSAI1_Config>
 800da2e:	4603      	mov	r3, r0
 800da30:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800da32:	7cfb      	ldrb	r3, [r7, #19]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800da38:	7cfb      	ldrb	r3, [r7, #19]
 800da3a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800da44:	2b00      	cmp	r3, #0
 800da46:	d04d      	beq.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da50:	d108      	bne.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800da52:	4b1a      	ldr	r3, [pc, #104]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800da58:	4a18      	ldr	r2, [pc, #96]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da5e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800da62:	e012      	b.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800da64:	4b15      	ldr	r3, [pc, #84]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800da6a:	4a14      	ldr	r2, [pc, #80]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da70:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800da74:	4b11      	ldr	r3, [pc, #68]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da82:	490e      	ldr	r1, [pc, #56]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da84:	4313      	orrs	r3, r2
 800da86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da92:	d106      	bne.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da94:	4b09      	ldr	r3, [pc, #36]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	4a08      	ldr	r2, [pc, #32]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da9e:	60d3      	str	r3, [r2, #12]
 800daa0:	e020      	b.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800daaa:	d109      	bne.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800daac:	4b03      	ldr	r3, [pc, #12]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	4a02      	ldr	r2, [pc, #8]	; (800dabc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800dab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dab6:	60d3      	str	r3, [r2, #12]
 800dab8:	e014      	b.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800daba:	bf00      	nop
 800dabc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dac8:	d10c      	bne.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	3304      	adds	r3, #4
 800dace:	2101      	movs	r1, #1
 800dad0:	4618      	mov	r0, r3
 800dad2:	f000 f905 	bl	800dce0 <RCCEx_PLLSAI1_Config>
 800dad6:	4603      	mov	r3, r0
 800dad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dada:	7cfb      	ldrb	r3, [r7, #19]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800dae0:	7cfb      	ldrb	r3, [r7, #19]
 800dae2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800daec:	2b00      	cmp	r3, #0
 800daee:	d028      	beq.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800daf0:	4b7a      	ldr	r3, [pc, #488]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800daf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dafe:	4977      	ldr	r1, [pc, #476]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db00:	4313      	orrs	r3, r2
 800db02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db0e:	d106      	bne.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800db10:	4b72      	ldr	r3, [pc, #456]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	4a71      	ldr	r2, [pc, #452]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db1a:	60d3      	str	r3, [r2, #12]
 800db1c:	e011      	b.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db26:	d10c      	bne.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	3304      	adds	r3, #4
 800db2c:	2101      	movs	r1, #1
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 f8d6 	bl	800dce0 <RCCEx_PLLSAI1_Config>
 800db34:	4603      	mov	r3, r0
 800db36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800db38:	7cfb      	ldrb	r3, [r7, #19]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800db3e:	7cfb      	ldrb	r3, [r7, #19]
 800db40:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d01e      	beq.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db4e:	4b63      	ldr	r3, [pc, #396]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db5e:	495f      	ldr	r1, [pc, #380]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db60:	4313      	orrs	r3, r2
 800db62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db70:	d10c      	bne.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	3304      	adds	r3, #4
 800db76:	2102      	movs	r1, #2
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 f8b1 	bl	800dce0 <RCCEx_PLLSAI1_Config>
 800db7e:	4603      	mov	r3, r0
 800db80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800db82:	7cfb      	ldrb	r3, [r7, #19]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800db88:	7cfb      	ldrb	r3, [r7, #19]
 800db8a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00b      	beq.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800db98:	4b50      	ldr	r3, [pc, #320]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800db9e:	f023 0204 	bic.w	r2, r3, #4
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dba8:	494c      	ldr	r1, [pc, #304]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00b      	beq.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800dbbc:	4b47      	ldr	r3, [pc, #284]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dbbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dbc2:	f023 0218 	bic.w	r2, r3, #24
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbcc:	4943      	ldr	r1, [pc, #268]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d035      	beq.n	800dc4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800dbe0:	4b3e      	ldr	r3, [pc, #248]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4a3d      	ldr	r2, [pc, #244]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dbe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbec:	f7f9 ff1a 	bl	8007a24 <HAL_GetTick>
 800dbf0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dbf2:	e009      	b.n	800dc08 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800dbf4:	f7f9 ff16 	bl	8007a24 <HAL_GetTick>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	2b02      	cmp	r3, #2
 800dc00:	d902      	bls.n	800dc08 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800dc02:	2303      	movs	r3, #3
 800dc04:	74fb      	strb	r3, [r7, #19]
        break;
 800dc06:	e005      	b.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dc08:	4b34      	ldr	r3, [pc, #208]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d1ef      	bne.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800dc14:	7cfb      	ldrb	r3, [r7, #19]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d113      	bne.n	800dc42 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800dc1a:	4b30      	ldr	r3, [pc, #192]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dc20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc2a:	492c      	ldr	r1, [pc, #176]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	3320      	adds	r3, #32
 800dc36:	2102      	movs	r1, #2
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f000 f945 	bl	800dec8 <RCCEx_PLLSAI2_Config>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800dc42:	7cfb      	ldrb	r3, [r7, #19]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d001      	beq.n	800dc4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800dc48:	7cfb      	ldrb	r3, [r7, #19]
 800dc4a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d01e      	beq.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800dc58:	4b20      	ldr	r3, [pc, #128]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dc5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc68:	491c      	ldr	r1, [pc, #112]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc7a:	d10c      	bne.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	3320      	adds	r3, #32
 800dc80:	2101      	movs	r1, #1
 800dc82:	4618      	mov	r0, r3
 800dc84:	f000 f920 	bl	800dec8 <RCCEx_PLLSAI2_Config>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dc8c:	7cfb      	ldrb	r3, [r7, #19]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800dc92:	7cfb      	ldrb	r3, [r7, #19]
 800dc94:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d017      	beq.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800dca2:	4b0e      	ldr	r3, [pc, #56]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dca8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dcb2:	490a      	ldr	r1, [pc, #40]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dcc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcc4:	d105      	bne.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dcc6:	4b05      	ldr	r3, [pc, #20]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	4a04      	ldr	r2, [pc, #16]	; (800dcdc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcd0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800dcd2:	7cbb      	ldrb	r3, [r7, #18]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3718      	adds	r7, #24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	40021000 	.word	0x40021000

0800dce0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800dcee:	4b72      	ldr	r3, [pc, #456]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	f003 0303 	and.w	r3, r3, #3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00e      	beq.n	800dd18 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800dcfa:	4b6f      	ldr	r3, [pc, #444]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	f003 0203 	and.w	r2, r3, #3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d103      	bne.n	800dd12 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
       ||
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d142      	bne.n	800dd98 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	73fb      	strb	r3, [r7, #15]
 800dd16:	e03f      	b.n	800dd98 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2b03      	cmp	r3, #3
 800dd1e:	d018      	beq.n	800dd52 <RCCEx_PLLSAI1_Config+0x72>
 800dd20:	2b03      	cmp	r3, #3
 800dd22:	d825      	bhi.n	800dd70 <RCCEx_PLLSAI1_Config+0x90>
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d002      	beq.n	800dd2e <RCCEx_PLLSAI1_Config+0x4e>
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d009      	beq.n	800dd40 <RCCEx_PLLSAI1_Config+0x60>
 800dd2c:	e020      	b.n	800dd70 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800dd2e:	4b62      	ldr	r3, [pc, #392]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0302 	and.w	r3, r3, #2
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d11d      	bne.n	800dd76 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dd3e:	e01a      	b.n	800dd76 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800dd40:	4b5d      	ldr	r3, [pc, #372]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d116      	bne.n	800dd7a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dd50:	e013      	b.n	800dd7a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800dd52:	4b59      	ldr	r3, [pc, #356]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d10f      	bne.n	800dd7e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800dd5e:	4b56      	ldr	r3, [pc, #344]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d109      	bne.n	800dd7e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dd6e:	e006      	b.n	800dd7e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	73fb      	strb	r3, [r7, #15]
      break;
 800dd74:	e004      	b.n	800dd80 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800dd76:	bf00      	nop
 800dd78:	e002      	b.n	800dd80 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800dd7a:	bf00      	nop
 800dd7c:	e000      	b.n	800dd80 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800dd7e:	bf00      	nop
    }

    if(status == HAL_OK)
 800dd80:	7bfb      	ldrb	r3, [r7, #15]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d108      	bne.n	800dd98 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800dd86:	4b4c      	ldr	r3, [pc, #304]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	f023 0203 	bic.w	r2, r3, #3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4949      	ldr	r1, [pc, #292]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd94:	4313      	orrs	r3, r2
 800dd96:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f040 8086 	bne.w	800deac <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800dda0:	4b45      	ldr	r3, [pc, #276]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a44      	ldr	r2, [pc, #272]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dda6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ddaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddac:	f7f9 fe3a 	bl	8007a24 <HAL_GetTick>
 800ddb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ddb2:	e009      	b.n	800ddc8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ddb4:	f7f9 fe36 	bl	8007a24 <HAL_GetTick>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	d902      	bls.n	800ddc8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	73fb      	strb	r3, [r7, #15]
        break;
 800ddc6:	e005      	b.n	800ddd4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ddc8:	4b3b      	ldr	r3, [pc, #236]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d1ef      	bne.n	800ddb4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800ddd4:	7bfb      	ldrb	r3, [r7, #15]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d168      	bne.n	800deac <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d113      	bne.n	800de08 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dde0:	4b35      	ldr	r3, [pc, #212]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dde2:	691a      	ldr	r2, [r3, #16]
 800dde4:	4b35      	ldr	r3, [pc, #212]	; (800debc <RCCEx_PLLSAI1_Config+0x1dc>)
 800dde6:	4013      	ands	r3, r2
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	6892      	ldr	r2, [r2, #8]
 800ddec:	0211      	lsls	r1, r2, #8
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	68d2      	ldr	r2, [r2, #12]
 800ddf2:	06d2      	lsls	r2, r2, #27
 800ddf4:	4311      	orrs	r1, r2
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	6852      	ldr	r2, [r2, #4]
 800ddfa:	3a01      	subs	r2, #1
 800ddfc:	0112      	lsls	r2, r2, #4
 800ddfe:	430a      	orrs	r2, r1
 800de00:	492d      	ldr	r1, [pc, #180]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de02:	4313      	orrs	r3, r2
 800de04:	610b      	str	r3, [r1, #16]
 800de06:	e02d      	b.n	800de64 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d115      	bne.n	800de3a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800de0e:	4b2a      	ldr	r3, [pc, #168]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de10:	691a      	ldr	r2, [r3, #16]
 800de12:	4b2b      	ldr	r3, [pc, #172]	; (800dec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800de14:	4013      	ands	r3, r2
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	6892      	ldr	r2, [r2, #8]
 800de1a:	0211      	lsls	r1, r2, #8
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	6912      	ldr	r2, [r2, #16]
 800de20:	0852      	lsrs	r2, r2, #1
 800de22:	3a01      	subs	r2, #1
 800de24:	0552      	lsls	r2, r2, #21
 800de26:	4311      	orrs	r1, r2
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	6852      	ldr	r2, [r2, #4]
 800de2c:	3a01      	subs	r2, #1
 800de2e:	0112      	lsls	r2, r2, #4
 800de30:	430a      	orrs	r2, r1
 800de32:	4921      	ldr	r1, [pc, #132]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de34:	4313      	orrs	r3, r2
 800de36:	610b      	str	r3, [r1, #16]
 800de38:	e014      	b.n	800de64 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800de3a:	4b1f      	ldr	r3, [pc, #124]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de3c:	691a      	ldr	r2, [r3, #16]
 800de3e:	4b21      	ldr	r3, [pc, #132]	; (800dec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800de40:	4013      	ands	r3, r2
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	6892      	ldr	r2, [r2, #8]
 800de46:	0211      	lsls	r1, r2, #8
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	6952      	ldr	r2, [r2, #20]
 800de4c:	0852      	lsrs	r2, r2, #1
 800de4e:	3a01      	subs	r2, #1
 800de50:	0652      	lsls	r2, r2, #25
 800de52:	4311      	orrs	r1, r2
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	6852      	ldr	r2, [r2, #4]
 800de58:	3a01      	subs	r2, #1
 800de5a:	0112      	lsls	r2, r2, #4
 800de5c:	430a      	orrs	r2, r1
 800de5e:	4916      	ldr	r1, [pc, #88]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de60:	4313      	orrs	r3, r2
 800de62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800de64:	4b14      	ldr	r3, [pc, #80]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a13      	ldr	r2, [pc, #76]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800de6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de70:	f7f9 fdd8 	bl	8007a24 <HAL_GetTick>
 800de74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800de76:	e009      	b.n	800de8c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800de78:	f7f9 fdd4 	bl	8007a24 <HAL_GetTick>
 800de7c:	4602      	mov	r2, r0
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	2b02      	cmp	r3, #2
 800de84:	d902      	bls.n	800de8c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800de86:	2303      	movs	r3, #3
 800de88:	73fb      	strb	r3, [r7, #15]
          break;
 800de8a:	e005      	b.n	800de98 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800de8c:	4b0a      	ldr	r3, [pc, #40]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d0ef      	beq.n	800de78 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800de98:	7bfb      	ldrb	r3, [r7, #15]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d106      	bne.n	800deac <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800de9e:	4b06      	ldr	r3, [pc, #24]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dea0:	691a      	ldr	r2, [r3, #16]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	4904      	ldr	r1, [pc, #16]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dea8:	4313      	orrs	r3, r2
 800deaa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800deac:	7bfb      	ldrb	r3, [r7, #15]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	40021000 	.word	0x40021000
 800debc:	07ff800f 	.word	0x07ff800f
 800dec0:	ff9f800f 	.word	0xff9f800f
 800dec4:	f9ff800f 	.word	0xf9ff800f

0800dec8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ded2:	2300      	movs	r3, #0
 800ded4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ded6:	4b72      	ldr	r3, [pc, #456]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ded8:	68db      	ldr	r3, [r3, #12]
 800deda:	f003 0303 	and.w	r3, r3, #3
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d00e      	beq.n	800df00 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800dee2:	4b6f      	ldr	r3, [pc, #444]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	f003 0203 	and.w	r2, r3, #3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	429a      	cmp	r2, r3
 800def0:	d103      	bne.n	800defa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
       ||
 800def6:	2b00      	cmp	r3, #0
 800def8:	d142      	bne.n	800df80 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800defa:	2301      	movs	r3, #1
 800defc:	73fb      	strb	r3, [r7, #15]
 800defe:	e03f      	b.n	800df80 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b03      	cmp	r3, #3
 800df06:	d018      	beq.n	800df3a <RCCEx_PLLSAI2_Config+0x72>
 800df08:	2b03      	cmp	r3, #3
 800df0a:	d825      	bhi.n	800df58 <RCCEx_PLLSAI2_Config+0x90>
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d002      	beq.n	800df16 <RCCEx_PLLSAI2_Config+0x4e>
 800df10:	2b02      	cmp	r3, #2
 800df12:	d009      	beq.n	800df28 <RCCEx_PLLSAI2_Config+0x60>
 800df14:	e020      	b.n	800df58 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800df16:	4b62      	ldr	r3, [pc, #392]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f003 0302 	and.w	r3, r3, #2
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d11d      	bne.n	800df5e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800df22:	2301      	movs	r3, #1
 800df24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800df26:	e01a      	b.n	800df5e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800df28:	4b5d      	ldr	r3, [pc, #372]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df30:	2b00      	cmp	r3, #0
 800df32:	d116      	bne.n	800df62 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800df34:	2301      	movs	r3, #1
 800df36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800df38:	e013      	b.n	800df62 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800df3a:	4b59      	ldr	r3, [pc, #356]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10f      	bne.n	800df66 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800df46:	4b56      	ldr	r3, [pc, #344]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d109      	bne.n	800df66 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800df56:	e006      	b.n	800df66 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800df58:	2301      	movs	r3, #1
 800df5a:	73fb      	strb	r3, [r7, #15]
      break;
 800df5c:	e004      	b.n	800df68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800df5e:	bf00      	nop
 800df60:	e002      	b.n	800df68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800df62:	bf00      	nop
 800df64:	e000      	b.n	800df68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800df66:	bf00      	nop
    }

    if(status == HAL_OK)
 800df68:	7bfb      	ldrb	r3, [r7, #15]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d108      	bne.n	800df80 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800df6e:	4b4c      	ldr	r3, [pc, #304]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	f023 0203 	bic.w	r2, r3, #3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4949      	ldr	r1, [pc, #292]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df7c:	4313      	orrs	r3, r2
 800df7e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800df80:	7bfb      	ldrb	r3, [r7, #15]
 800df82:	2b00      	cmp	r3, #0
 800df84:	f040 8086 	bne.w	800e094 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800df88:	4b45      	ldr	r3, [pc, #276]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a44      	ldr	r2, [pc, #272]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df94:	f7f9 fd46 	bl	8007a24 <HAL_GetTick>
 800df98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800df9a:	e009      	b.n	800dfb0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800df9c:	f7f9 fd42 	bl	8007a24 <HAL_GetTick>
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	d902      	bls.n	800dfb0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800dfaa:	2303      	movs	r3, #3
 800dfac:	73fb      	strb	r3, [r7, #15]
        break;
 800dfae:	e005      	b.n	800dfbc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dfb0:	4b3b      	ldr	r3, [pc, #236]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1ef      	bne.n	800df9c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d168      	bne.n	800e094 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d113      	bne.n	800dff0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800dfc8:	4b35      	ldr	r3, [pc, #212]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dfca:	695a      	ldr	r2, [r3, #20]
 800dfcc:	4b35      	ldr	r3, [pc, #212]	; (800e0a4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800dfce:	4013      	ands	r3, r2
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	6892      	ldr	r2, [r2, #8]
 800dfd4:	0211      	lsls	r1, r2, #8
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	68d2      	ldr	r2, [r2, #12]
 800dfda:	06d2      	lsls	r2, r2, #27
 800dfdc:	4311      	orrs	r1, r2
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	6852      	ldr	r2, [r2, #4]
 800dfe2:	3a01      	subs	r2, #1
 800dfe4:	0112      	lsls	r2, r2, #4
 800dfe6:	430a      	orrs	r2, r1
 800dfe8:	492d      	ldr	r1, [pc, #180]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dfea:	4313      	orrs	r3, r2
 800dfec:	614b      	str	r3, [r1, #20]
 800dfee:	e02d      	b.n	800e04c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d115      	bne.n	800e022 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800dff6:	4b2a      	ldr	r3, [pc, #168]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dff8:	695a      	ldr	r2, [r3, #20]
 800dffa:	4b2b      	ldr	r3, [pc, #172]	; (800e0a8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800dffc:	4013      	ands	r3, r2
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	6892      	ldr	r2, [r2, #8]
 800e002:	0211      	lsls	r1, r2, #8
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	6912      	ldr	r2, [r2, #16]
 800e008:	0852      	lsrs	r2, r2, #1
 800e00a:	3a01      	subs	r2, #1
 800e00c:	0552      	lsls	r2, r2, #21
 800e00e:	4311      	orrs	r1, r2
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	6852      	ldr	r2, [r2, #4]
 800e014:	3a01      	subs	r2, #1
 800e016:	0112      	lsls	r2, r2, #4
 800e018:	430a      	orrs	r2, r1
 800e01a:	4921      	ldr	r1, [pc, #132]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e01c:	4313      	orrs	r3, r2
 800e01e:	614b      	str	r3, [r1, #20]
 800e020:	e014      	b.n	800e04c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e022:	4b1f      	ldr	r3, [pc, #124]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e024:	695a      	ldr	r2, [r3, #20]
 800e026:	4b21      	ldr	r3, [pc, #132]	; (800e0ac <RCCEx_PLLSAI2_Config+0x1e4>)
 800e028:	4013      	ands	r3, r2
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	6892      	ldr	r2, [r2, #8]
 800e02e:	0211      	lsls	r1, r2, #8
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	6952      	ldr	r2, [r2, #20]
 800e034:	0852      	lsrs	r2, r2, #1
 800e036:	3a01      	subs	r2, #1
 800e038:	0652      	lsls	r2, r2, #25
 800e03a:	4311      	orrs	r1, r2
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	6852      	ldr	r2, [r2, #4]
 800e040:	3a01      	subs	r2, #1
 800e042:	0112      	lsls	r2, r2, #4
 800e044:	430a      	orrs	r2, r1
 800e046:	4916      	ldr	r1, [pc, #88]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e048:	4313      	orrs	r3, r2
 800e04a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800e04c:	4b14      	ldr	r3, [pc, #80]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a13      	ldr	r2, [pc, #76]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e056:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e058:	f7f9 fce4 	bl	8007a24 <HAL_GetTick>
 800e05c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e05e:	e009      	b.n	800e074 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e060:	f7f9 fce0 	bl	8007a24 <HAL_GetTick>
 800e064:	4602      	mov	r2, r0
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	1ad3      	subs	r3, r2, r3
 800e06a:	2b02      	cmp	r3, #2
 800e06c:	d902      	bls.n	800e074 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800e06e:	2303      	movs	r3, #3
 800e070:	73fb      	strb	r3, [r7, #15]
          break;
 800e072:	e005      	b.n	800e080 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e074:	4b0a      	ldr	r3, [pc, #40]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d0ef      	beq.n	800e060 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800e080:	7bfb      	ldrb	r3, [r7, #15]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d106      	bne.n	800e094 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800e086:	4b06      	ldr	r3, [pc, #24]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e088:	695a      	ldr	r2, [r3, #20]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	699b      	ldr	r3, [r3, #24]
 800e08e:	4904      	ldr	r1, [pc, #16]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e090:	4313      	orrs	r3, r2
 800e092:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800e094:	7bfb      	ldrb	r3, [r7, #15]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	40021000 	.word	0x40021000
 800e0a4:	07ff800f 	.word	0x07ff800f
 800e0a8:	ff9f800f 	.word	0xff9f800f
 800e0ac:	f9ff800f 	.word	0xf9ff800f

0800e0b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b08a      	sub	sp, #40	; 0x28
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e075      	b.n	800e1ae <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d105      	bne.n	800e0da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 f8f7 	bl	800e2c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2203      	movs	r2, #3
 800e0de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f868 	bl	800e1b8 <HAL_SD_InitCard>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d001      	beq.n	800e0f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e05d      	b.n	800e1ae <HAL_SD_Init+0xfe>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e0f2:	f107 0308 	add.w	r3, r7, #8
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 fda3 	bl	800ec44 <HAL_SD_GetCardStatus>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e104:	2301      	movs	r3, #1
 800e106:	e052      	b.n	800e1ae <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e108:	7e3b      	ldrb	r3, [r7, #24]
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e10e:	7e7b      	ldrb	r3, [r7, #25]
 800e110:	b2db      	uxtb	r3, r3
 800e112:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d10a      	bne.n	800e132 <HAL_SD_Init+0x82>
 800e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d102      	bne.n	800e128 <HAL_SD_Init+0x78>
 800e122:	6a3b      	ldr	r3, [r7, #32]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d004      	beq.n	800e132 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e12e:	65da      	str	r2, [r3, #92]	; 0x5c
 800e130:	e00b      	b.n	800e14a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e136:	2b01      	cmp	r3, #1
 800e138:	d104      	bne.n	800e144 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e140:	65da      	str	r2, [r3, #92]	; 0x5c
 800e142:	e002      	b.n	800e14a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	4619      	mov	r1, r3
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f000 fe59 	bl	800ee08 <HAL_SD_ConfigWideBusOperation>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d001      	beq.n	800e160 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e15c:	2301      	movs	r3, #1
 800e15e:	e026      	b.n	800e1ae <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e160:	f7f9 fc60 	bl	8007a24 <HAL_GetTick>
 800e164:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e166:	e011      	b.n	800e18c <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800e168:	f7f9 fc5c 	bl	8007a24 <HAL_GetTick>
 800e16c:	4602      	mov	r2, r0
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	1ad3      	subs	r3, r2, r3
 800e172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e176:	d109      	bne.n	800e18c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e17e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2201      	movs	r2, #1
 800e184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800e188:	2303      	movs	r3, #3
 800e18a:	e010      	b.n	800e1ae <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 fee5 	bl	800ef5c <HAL_SD_GetCardState>
 800e192:	4603      	mov	r3, r0
 800e194:	2b04      	cmp	r3, #4
 800e196:	d1e7      	bne.n	800e168 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3728      	adds	r7, #40	; 0x28
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
	...

0800e1b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e1b8:	b5b0      	push	{r4, r5, r7, lr}
 800e1ba:	b08e      	sub	sp, #56	; 0x38
 800e1bc:	af04      	add	r7, sp, #16
 800e1be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800e1d0:	238a      	movs	r3, #138	; 0x8a
 800e1d2:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d107      	bne.n	800e1ec <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f042 0210 	orr.w	r2, r2, #16
 800e1ea:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681d      	ldr	r5, [r3, #0]
 800e1f0:	466c      	mov	r4, sp
 800e1f2:	f107 0314 	add.w	r3, r7, #20
 800e1f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e1fe:	f107 0308 	add.w	r3, r7, #8
 800e202:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e204:	4628      	mov	r0, r5
 800e206:	f002 fe23 	bl	8010e50 <SDMMC_Init>
 800e20a:	4603      	mov	r3, r0
 800e20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	e04f      	b.n	800e2bc <HAL_SD_InitCard+0x104>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4618      	mov	r0, r3
 800e222:	f002 fe5d 	bl	8010ee0 <SDMMC_PowerState_ON>
 800e226:	4603      	mov	r3, r0
 800e228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 800e234:	2301      	movs	r3, #1
 800e236:	e041      	b.n	800e2bc <HAL_SD_InitCard+0x104>
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 ff6d 	bl	800f118 <SD_PowerON>
 800e23e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e240:	6a3b      	ldr	r3, [r7, #32]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00b      	beq.n	800e25e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2201      	movs	r2, #1
 800e24a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	431a      	orrs	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e02e      	b.n	800e2bc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 fe9c 	bl	800ef9c <SD_InitCard>
 800e264:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e266:	6a3b      	ldr	r3, [r7, #32]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d00b      	beq.n	800e284 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e278:	6a3b      	ldr	r3, [r7, #32]
 800e27a:	431a      	orrs	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e280:	2301      	movs	r3, #1
 800e282:	e01b      	b.n	800e2bc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e28c:	4618      	mov	r0, r3
 800e28e:	f002 febd 	bl	801100c <SDMMC_CmdBlockLength>
 800e292:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e294:	6a3b      	ldr	r3, [r7, #32]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00f      	beq.n	800e2ba <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a09      	ldr	r2, [pc, #36]	; (800e2c4 <HAL_SD_InitCard+0x10c>)
 800e2a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2a6:	6a3b      	ldr	r3, [r7, #32]
 800e2a8:	431a      	orrs	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e000      	b.n	800e2bc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3728      	adds	r7, #40	; 0x28
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bdb0      	pop	{r4, r5, r7, pc}
 800e2c4:	1fe00fff 	.word	0x1fe00fff

0800e2c8 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800e2d0:	bf00      	nop
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b08c      	sub	sp, #48	; 0x30
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
 800e2e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d107      	bne.n	800e304 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e300:	2301      	movs	r3, #1
 800e302:	e08d      	b.n	800e420 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	f040 8086 	bne.w	800e41e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	441a      	add	r2, r3
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e322:	429a      	cmp	r2, r3
 800e324:	d907      	bls.n	800e336 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e332:	2301      	movs	r3, #1
 800e334:	e074      	b.n	800e420 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2203      	movs	r2, #3
 800e33a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2200      	movs	r2, #0
 800e344:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	025a      	lsls	r2, r3, #9
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d002      	beq.n	800e362 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35e:	025b      	lsls	r3, r3, #9
 800e360:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e362:	f04f 33ff 	mov.w	r3, #4294967295
 800e366:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	025b      	lsls	r3, r3, #9
 800e36c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e36e:	2390      	movs	r3, #144	; 0x90
 800e370:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e372:	2302      	movs	r3, #2
 800e374:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e376:	2300      	movs	r3, #0
 800e378:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800e37a:	2300      	movs	r3, #0
 800e37c:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f107 0210 	add.w	r2, r7, #16
 800e386:	4611      	mov	r1, r2
 800e388:	4618      	mov	r0, r3
 800e38a:	f002 fe13 	bl	8010fb4 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	68da      	ldr	r2, [r3, #12]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e39c:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	68ba      	ldr	r2, [r7, #8]
 800e3a4:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d90a      	bls.n	800e3ca <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2282      	movs	r2, #130	; 0x82
 800e3b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f002 fe69 	bl	8011098 <SDMMC_CmdReadMultiBlock>
 800e3c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e3c8:	e009      	b.n	800e3de <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2281      	movs	r2, #129	; 0x81
 800e3ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f002 fe3b 	bl	8011052 <SDMMC_CmdReadSingleBlock>
 800e3dc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d012      	beq.n	800e40a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a0f      	ldr	r2, [pc, #60]	; (800e428 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e3ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f2:	431a      	orrs	r2, r3
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2200      	movs	r2, #0
 800e404:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e406:	2301      	movs	r3, #1
 800e408:	e00a      	b.n	800e420 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e418:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800e41a:	2300      	movs	r3, #0
 800e41c:	e000      	b.n	800e420 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800e41e:	2302      	movs	r3, #2
  }
}
 800e420:	4618      	mov	r0, r3
 800e422:	3730      	adds	r7, #48	; 0x30
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	1fe00fff 	.word	0x1fe00fff

0800e42c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b08c      	sub	sp, #48	; 0x30
 800e430:	af00      	add	r7, sp, #0
 800e432:	60f8      	str	r0, [r7, #12]
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	607a      	str	r2, [r7, #4]
 800e438:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d107      	bne.n	800e454 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e448:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e450:	2301      	movs	r3, #1
 800e452:	e08d      	b.n	800e570 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	f040 8086 	bne.w	800e56e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2200      	movs	r2, #0
 800e466:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	441a      	add	r2, r3
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e472:	429a      	cmp	r2, r3
 800e474:	d907      	bls.n	800e486 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e47a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e482:	2301      	movs	r3, #1
 800e484:	e074      	b.n	800e570 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2203      	movs	r2, #3
 800e48a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	2200      	movs	r2, #0
 800e494:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	68ba      	ldr	r2, [r7, #8]
 800e49a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	025a      	lsls	r2, r3, #9
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d002      	beq.n	800e4b2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ae:	025b      	lsls	r3, r3, #9
 800e4b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e4b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	025b      	lsls	r3, r3, #9
 800e4bc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e4be:	2390      	movs	r3, #144	; 0x90
 800e4c0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f107 0210 	add.w	r2, r7, #16
 800e4d6:	4611      	mov	r1, r2
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f002 fd6b 	bl	8010fb4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68da      	ldr	r2, [r3, #12]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4ec:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	68ba      	ldr	r2, [r7, #8]
 800e4f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b01      	cmp	r3, #1
 800e502:	d90a      	bls.n	800e51a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	22a0      	movs	r2, #160	; 0xa0
 800e508:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e510:	4618      	mov	r0, r3
 800e512:	f002 fe07 	bl	8011124 <SDMMC_CmdWriteMultiBlock>
 800e516:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e518:	e009      	b.n	800e52e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2290      	movs	r2, #144	; 0x90
 800e51e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e526:	4618      	mov	r0, r3
 800e528:	f002 fdd9 	bl	80110de <SDMMC_CmdWriteSingleBlock>
 800e52c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e530:	2b00      	cmp	r3, #0
 800e532:	d012      	beq.n	800e55a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a0f      	ldr	r2, [pc, #60]	; (800e578 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e53a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e542:	431a      	orrs	r2, r3
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2200      	movs	r2, #0
 800e554:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	e00a      	b.n	800e570 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e568:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800e56a:	2300      	movs	r3, #0
 800e56c:	e000      	b.n	800e570 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800e56e:	2302      	movs	r3, #2
  }
}
 800e570:	4618      	mov	r0, r3
 800e572:	3730      	adds	r7, #48	; 0x30
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	1fe00fff 	.word	0x1fe00fff

0800e57c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e588:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e594:	2b00      	cmp	r3, #0
 800e596:	d008      	beq.n	800e5aa <HAL_SD_IRQHandler+0x2e>
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f003 0308 	and.w	r3, r3, #8
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d003      	beq.n	800e5aa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f001 f928 	bl	800f7f8 <SD_Read_IT>
 800e5a8:	e199      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 80ae 	beq.w	800e716 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e5c2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	6812      	ldr	r2, [r2, #0]
 800e5ce:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800e5d2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800e5d6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e5e6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	68da      	ldr	r2, [r3, #12]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5f6:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f003 0308 	and.w	r3, r3, #8
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d038      	beq.n	800e674 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f003 0302 	and.w	r3, r3, #2
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d104      	bne.n	800e616 <HAL_SD_IRQHandler+0x9a>
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f003 0320 	and.w	r3, r3, #32
 800e612:	2b00      	cmp	r3, #0
 800e614:	d011      	beq.n	800e63a <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f002 fda6 	bl	801116c <SDMMC_CmdStopTransfer>
 800e620:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d008      	beq.n	800e63a <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	431a      	orrs	r2, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 f957 	bl	800e8e8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	4aa0      	ldr	r2, [pc, #640]	; (800e8c0 <HAL_SD_IRQHandler+0x344>)
 800e640:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2201      	movs	r2, #1
 800e646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2200      	movs	r2, #0
 800e64e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f003 0301 	and.w	r3, r3, #1
 800e656:	2b00      	cmp	r3, #0
 800e658:	d104      	bne.n	800e664 <HAL_SD_IRQHandler+0xe8>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f003 0302 	and.w	r3, r3, #2
 800e660:	2b00      	cmp	r3, #0
 800e662:	d003      	beq.n	800e66c <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7f9 f967 	bl	8007938 <HAL_SD_RxCpltCallback>
 800e66a:	e138      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7f9 f959 	bl	8007924 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800e672:	e134      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 812f 	beq.w	800e8de <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2200      	movs	r2, #0
 800e686:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2200      	movs	r2, #0
 800e68e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2200      	movs	r2, #0
 800e696:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f003 0302 	and.w	r3, r3, #2
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d104      	bne.n	800e6ac <HAL_SD_IRQHandler+0x130>
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f003 0320 	and.w	r3, r3, #32
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d011      	beq.n	800e6d0 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f002 fd5b 	bl	801116c <SDMMC_CmdStopTransfer>
 800e6b6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d008      	beq.n	800e6d0 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	431a      	orrs	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 f90c 	bl	800e8e8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f003 0310 	and.w	r3, r3, #16
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d104      	bne.n	800e6f2 <HAL_SD_IRQHandler+0x176>
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f003 0320 	and.w	r3, r3, #32
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d002      	beq.n	800e6f8 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7f9 f916 	bl	8007924 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f003 0301 	and.w	r3, r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d105      	bne.n	800e70e <HAL_SD_IRQHandler+0x192>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f003 0302 	and.w	r3, r3, #2
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f000 80e8 	beq.w	800e8de <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7f9 f912 	bl	8007938 <HAL_SD_RxCpltCallback>
}
 800e714:	e0e3      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e71c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e720:	2b00      	cmp	r3, #0
 800e722:	d008      	beq.n	800e736 <HAL_SD_IRQHandler+0x1ba>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f003 0308 	and.w	r3, r3, #8
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d003      	beq.n	800e736 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f001 f8b3 	bl	800f89a <SD_Write_IT>
 800e734:	e0d3      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e73c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e740:	2b00      	cmp	r3, #0
 800e742:	f000 809d 	beq.w	800e880 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e74c:	f003 0302 	and.w	r3, r3, #2
 800e750:	2b00      	cmp	r3, #0
 800e752:	d005      	beq.n	800e760 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e758:	f043 0202 	orr.w	r2, r3, #2
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e766:	f003 0308 	and.w	r3, r3, #8
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d005      	beq.n	800e77a <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e772:	f043 0208 	orr.w	r2, r3, #8
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e780:	f003 0320 	and.w	r3, r3, #32
 800e784:	2b00      	cmp	r3, #0
 800e786:	d005      	beq.n	800e794 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e78c:	f043 0220 	orr.w	r2, r3, #32
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79a:	f003 0310 	and.w	r3, r3, #16
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d005      	beq.n	800e7ae <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a6:	f043 0210 	orr.w	r2, r3, #16
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4a43      	ldr	r2, [pc, #268]	; (800e8c0 <HAL_SD_IRQHandler+0x344>)
 800e7b4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e7c4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	68da      	ldr	r2, [r3, #12]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7d4:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e7e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68da      	ldr	r2, [r3, #12]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e7f4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f002 fcb6 	bl	801116c <SDMMC_CmdStopTransfer>
 800e800:	4602      	mov	r2, r0
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e806:	431a      	orrs	r2, r3
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	68da      	ldr	r2, [r3, #12]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e81a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e824:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f003 0308 	and.w	r3, r3, #8
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d00a      	beq.n	800e846 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f000 f852 	bl	800e8e8 <HAL_SD_ErrorCallback>
}
 800e844:	e04b      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d046      	beq.n	800e8de <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e854:	2b00      	cmp	r3, #0
 800e856:	d042      	beq.n	800e8de <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e866:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2200      	movs	r2, #0
 800e86e:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 f835 	bl	800e8e8 <HAL_SD_ErrorCallback>
}
 800e87e:	e02e      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d027      	beq.n	800e8de <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e896:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e89e:	f003 0304 	and.w	r3, r3, #4
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d10e      	bne.n	800e8c4 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f003 0320 	and.w	r3, r3, #32
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d003      	beq.n	800e8b8 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f001 f870 	bl	800f996 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800e8b6:	e012      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f001 f858 	bl	800f96e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800e8be:	e00e      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
 800e8c0:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f003 0320 	and.w	r3, r3, #32
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d003      	beq.n	800e8d6 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f001 f857 	bl	800f982 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800e8d4:	e003      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f001 f83f 	bl	800f95a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800e8dc:	e7ff      	b.n	800e8de <HAL_SD_IRQHandler+0x362>
 800e8de:	bf00      	nop
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop

0800e8e8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e90a:	0f9b      	lsrs	r3, r3, #30
 800e90c:	b2da      	uxtb	r2, r3
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e916:	0e9b      	lsrs	r3, r3, #26
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	f003 030f 	and.w	r3, r3, #15
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e928:	0e1b      	lsrs	r3, r3, #24
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	f003 0303 	and.w	r3, r3, #3
 800e930:	b2da      	uxtb	r2, r3
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e93a:	0c1b      	lsrs	r3, r3, #16
 800e93c:	b2da      	uxtb	r2, r3
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e946:	0a1b      	lsrs	r3, r3, #8
 800e948:	b2da      	uxtb	r2, r3
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e952:	b2da      	uxtb	r2, r3
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e95c:	0d1b      	lsrs	r3, r3, #20
 800e95e:	b29a      	uxth	r2, r3
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e968:	0c1b      	lsrs	r3, r3, #16
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	f003 030f 	and.w	r3, r3, #15
 800e970:	b2da      	uxtb	r2, r3
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e97a:	0bdb      	lsrs	r3, r3, #15
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	f003 0301 	and.w	r3, r3, #1
 800e982:	b2da      	uxtb	r2, r3
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e98c:	0b9b      	lsrs	r3, r3, #14
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	f003 0301 	and.w	r3, r3, #1
 800e994:	b2da      	uxtb	r2, r3
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e99e:	0b5b      	lsrs	r3, r3, #13
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	f003 0301 	and.w	r3, r3, #1
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9b0:	0b1b      	lsrs	r3, r3, #12
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	f003 0301 	and.w	r3, r3, #1
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d163      	bne.n	800ea94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9d0:	009a      	lsls	r2, r3, #2
 800e9d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e9d6:	4013      	ands	r3, r2
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e9dc:	0f92      	lsrs	r2, r2, #30
 800e9de:	431a      	orrs	r2, r3
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9e8:	0edb      	lsrs	r3, r3, #27
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	f003 0307 	and.w	r3, r3, #7
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9fa:	0e1b      	lsrs	r3, r3, #24
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	f003 0307 	and.w	r3, r3, #7
 800ea02:	b2da      	uxtb	r2, r3
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea0c:	0d5b      	lsrs	r3, r3, #21
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	f003 0307 	and.w	r3, r3, #7
 800ea14:	b2da      	uxtb	r2, r3
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea1e:	0c9b      	lsrs	r3, r3, #18
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	f003 0307 	and.w	r3, r3, #7
 800ea26:	b2da      	uxtb	r2, r3
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea30:	0bdb      	lsrs	r3, r3, #15
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	f003 0307 	and.w	r3, r3, #7
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	1c5a      	adds	r2, r3, #1
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	7e1b      	ldrb	r3, [r3, #24]
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	f003 0307 	and.w	r3, r3, #7
 800ea52:	3302      	adds	r3, #2
 800ea54:	2201      	movs	r2, #1
 800ea56:	fa02 f303 	lsl.w	r3, r2, r3
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ea5e:	fb02 f203 	mul.w	r2, r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	7a1b      	ldrb	r3, [r3, #8]
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	f003 030f 	and.w	r3, r3, #15
 800ea70:	2201      	movs	r2, #1
 800ea72:	409a      	lsls	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ea80:	0a52      	lsrs	r2, r2, #9
 800ea82:	fb02 f203 	mul.w	r2, r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea90:	659a      	str	r2, [r3, #88]	; 0x58
 800ea92:	e031      	b.n	800eaf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d11d      	bne.n	800ead8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eaa0:	041b      	lsls	r3, r3, #16
 800eaa2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaaa:	0c1b      	lsrs	r3, r3, #16
 800eaac:	431a      	orrs	r2, r3
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	691b      	ldr	r3, [r3, #16]
 800eab6:	3301      	adds	r3, #1
 800eab8:	029a      	lsls	r2, r3, #10
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eacc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	659a      	str	r2, [r3, #88]	; 0x58
 800ead6:	e00f      	b.n	800eaf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4a58      	ldr	r2, [pc, #352]	; (800ec40 <HAL_SD_GetCardCSD+0x344>)
 800eade:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eae4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e09d      	b.n	800ec34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eafc:	0b9b      	lsrs	r3, r3, #14
 800eafe:	b2db      	uxtb	r3, r3
 800eb00:	f003 0301 	and.w	r3, r3, #1
 800eb04:	b2da      	uxtb	r2, r3
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb0e:	09db      	lsrs	r3, r3, #7
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb16:	b2da      	uxtb	r2, r3
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb30:	0fdb      	lsrs	r3, r3, #31
 800eb32:	b2da      	uxtb	r2, r3
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb3c:	0f5b      	lsrs	r3, r3, #29
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	f003 0303 	and.w	r3, r3, #3
 800eb44:	b2da      	uxtb	r2, r3
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb4e:	0e9b      	lsrs	r3, r3, #26
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	f003 0307 	and.w	r3, r3, #7
 800eb56:	b2da      	uxtb	r2, r3
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb60:	0d9b      	lsrs	r3, r3, #22
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	f003 030f 	and.w	r3, r3, #15
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb72:	0d5b      	lsrs	r3, r3, #21
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	b2da      	uxtb	r2, r3
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb8e:	0c1b      	lsrs	r3, r3, #16
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	f003 0301 	and.w	r3, r3, #1
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eba2:	0bdb      	lsrs	r3, r3, #15
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	f003 0301 	and.w	r3, r3, #1
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebb6:	0b9b      	lsrs	r3, r3, #14
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	f003 0301 	and.w	r3, r3, #1
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebca:	0b5b      	lsrs	r3, r3, #13
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebde:	0b1b      	lsrs	r3, r3, #12
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	f003 0301 	and.w	r3, r3, #1
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebf2:	0a9b      	lsrs	r3, r3, #10
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	f003 0303 	and.w	r3, r3, #3
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec06:	0a1b      	lsrs	r3, r3, #8
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	f003 0303 	and.w	r3, r3, #3
 800ec0e:	b2da      	uxtb	r2, r3
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec1a:	085b      	lsrs	r3, r3, #1
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec22:	b2da      	uxtb	r2, r3
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ec32:	2300      	movs	r3, #0
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	370c      	adds	r7, #12
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr
 800ec40:	1fe00fff 	.word	0x1fe00fff

0800ec44 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b094      	sub	sp, #80	; 0x50
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ec54:	f107 0308 	add.w	r3, r7, #8
 800ec58:	4619      	mov	r1, r3
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 fb6e 	bl	800f33c <SD_SendSDStatus>
 800ec60:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d011      	beq.n	800ec8c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a4f      	ldr	r2, [pc, #316]	; (800edac <HAL_SD_GetCardStatus+0x168>)
 800ec6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec76:	431a      	orrs	r2, r3
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ec8a:	e070      	b.n	800ed6e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	099b      	lsrs	r3, r3, #6
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	f003 0303 	and.w	r3, r3, #3
 800ec96:	b2da      	uxtb	r2, r3
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	095b      	lsrs	r3, r3, #5
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	f003 0301 	and.w	r3, r3, #1
 800eca6:	b2da      	uxtb	r2, r3
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	0a1b      	lsrs	r3, r3, #8
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	0e1b      	lsrs	r3, r3, #24
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	b29a      	uxth	r2, r3
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	061a      	lsls	r2, r3, #24
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	021b      	lsls	r3, r3, #8
 800ecce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecd2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	0a1b      	lsrs	r3, r3, #8
 800ecd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ecdc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	0e1b      	lsrs	r3, r3, #24
 800ece2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	0a1b      	lsrs	r3, r3, #8
 800ecf4:	b2da      	uxtb	r2, r3
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	0d1b      	lsrs	r3, r3, #20
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	f003 030f 	and.w	r3, r3, #15
 800ed04:	b2da      	uxtb	r2, r3
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	0c1b      	lsrs	r3, r3, #16
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	0a9b      	lsrs	r3, r3, #10
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed30:	b2da      	uxtb	r2, r3
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	0a1b      	lsrs	r3, r3, #8
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	f003 0303 	and.w	r3, r3, #3
 800ed40:	b2da      	uxtb	r2, r3
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	091b      	lsrs	r3, r3, #4
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	f003 030f 	and.w	r3, r3, #15
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	f003 030f 	and.w	r3, r3, #15
 800ed5e:	b2da      	uxtb	r2, r3
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	0e1b      	lsrs	r3, r3, #24
 800ed68:	b2da      	uxtb	r2, r3
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ed76:	4618      	mov	r0, r3
 800ed78:	f002 f948 	bl	801100c <SDMMC_CmdBlockLength>
 800ed7c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00d      	beq.n	800eda0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a08      	ldr	r2, [pc, #32]	; (800edac <HAL_SD_GetCardStatus+0x168>)
 800ed8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2201      	movs	r2, #1
 800ed96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800eda0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3750      	adds	r7, #80	; 0x50
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	1fe00fff 	.word	0x1fe00fff

0800edb0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800edfa:	2300      	movs	r3, #0
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ee08:	b5b0      	push	{r4, r5, r7, lr}
 800ee0a:	b08e      	sub	sp, #56	; 0x38
 800ee0c:	af04      	add	r7, sp, #16
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ee12:	2300      	movs	r3, #0
 800ee14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2203      	movs	r2, #3
 800ee1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee24:	2b03      	cmp	r3, #3
 800ee26:	d02e      	beq.n	800ee86 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee2e:	d106      	bne.n	800ee3e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	639a      	str	r2, [r3, #56]	; 0x38
 800ee3c:	e029      	b.n	800ee92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee44:	d10a      	bne.n	800ee5c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 fb70 	bl	800f52c <SD_WideBus_Enable>
 800ee4c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee52:	6a3b      	ldr	r3, [r7, #32]
 800ee54:	431a      	orrs	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	639a      	str	r2, [r3, #56]	; 0x38
 800ee5a:	e01a      	b.n	800ee92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d10a      	bne.n	800ee78 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 fbad 	bl	800f5c2 <SD_WideBus_Disable>
 800ee68:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee6e:	6a3b      	ldr	r3, [r7, #32]
 800ee70:	431a      	orrs	r2, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	639a      	str	r2, [r3, #56]	; 0x38
 800ee76:	e00c      	b.n	800ee92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	639a      	str	r2, [r3, #56]	; 0x38
 800ee84:	e005      	b.n	800ee92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d007      	beq.n	800eeaa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a2e      	ldr	r2, [pc, #184]	; (800ef58 <HAL_SD_ConfigWideBusOperation+0x150>)
 800eea0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eea8:	e034      	b.n	800ef14 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	691b      	ldr	r3, [r3, #16]
 800eebe:	617b      	str	r3, [r7, #20]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	695b      	ldr	r3, [r3, #20]
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d903      	bls.n	800eed0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	695b      	ldr	r3, [r3, #20]
 800eecc:	61bb      	str	r3, [r7, #24]
 800eece:	e012      	b.n	800eef6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eed8:	d103      	bne.n	800eee2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	695b      	ldr	r3, [r3, #20]
 800eede:	61bb      	str	r3, [r7, #24]
 800eee0:	e009      	b.n	800eef6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eeea:	d102      	bne.n	800eef2 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800eeec:	2302      	movs	r3, #2
 800eeee:	61bb      	str	r3, [r7, #24]
 800eef0:	e001      	b.n	800eef6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800eef2:	2303      	movs	r3, #3
 800eef4:	61bb      	str	r3, [r7, #24]
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681d      	ldr	r5, [r3, #0]
 800eefa:	466c      	mov	r4, sp
 800eefc:	f107 0314 	add.w	r3, r7, #20
 800ef00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ef04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ef08:	f107 0308 	add.w	r3, r7, #8
 800ef0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f001 ff9e 	bl	8010e50 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f002 f875 	bl	801100c <SDMMC_CmdBlockLength>
 800ef22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef24:	6a3b      	ldr	r3, [r7, #32]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00c      	beq.n	800ef44 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4a0a      	ldr	r2, [pc, #40]	; (800ef58 <HAL_SD_ConfigWideBusOperation+0x150>)
 800ef30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	431a      	orrs	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2201      	movs	r2, #1
 800ef48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ef4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3728      	adds	r7, #40	; 0x28
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bdb0      	pop	{r4, r5, r7, pc}
 800ef58:	1fe00fff 	.word	0x1fe00fff

0800ef5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b086      	sub	sp, #24
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ef64:	2300      	movs	r3, #0
 800ef66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ef68:	f107 030c 	add.w	r3, r7, #12
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 fab4 	bl	800f4dc <SD_SendStatus>
 800ef74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d005      	beq.n	800ef88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	431a      	orrs	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	0a5b      	lsrs	r3, r3, #9
 800ef8c:	f003 030f 	and.w	r3, r3, #15
 800ef90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ef92:	693b      	ldr	r3, [r7, #16]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3718      	adds	r7, #24
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b090      	sub	sp, #64	; 0x40
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800efa4:	2301      	movs	r3, #1
 800efa6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4618      	mov	r0, r3
 800efae:	f001 ffa9 	bl	8010f04 <SDMMC_GetPowerState>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d102      	bne.n	800efbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800efb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800efbc:	e0a7      	b.n	800f10e <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efc2:	2b03      	cmp	r3, #3
 800efc4:	d02e      	beq.n	800f024 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4618      	mov	r0, r3
 800efcc:	f002 f9ee 	bl	80113ac <SDMMC_CmdSendCID>
 800efd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800efd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d001      	beq.n	800efdc <SD_InitCard+0x40>
    {
      return errorstate;
 800efd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efda:	e098      	b.n	800f10e <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2100      	movs	r1, #0
 800efe2:	4618      	mov	r0, r3
 800efe4:	f001 ffd3 	bl	8010f8e <SDMMC_GetResponse>
 800efe8:	4602      	mov	r2, r0
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2104      	movs	r1, #4
 800eff4:	4618      	mov	r0, r3
 800eff6:	f001 ffca 	bl	8010f8e <SDMMC_GetResponse>
 800effa:	4602      	mov	r2, r0
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2108      	movs	r1, #8
 800f006:	4618      	mov	r0, r3
 800f008:	f001 ffc1 	bl	8010f8e <SDMMC_GetResponse>
 800f00c:	4602      	mov	r2, r0
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	210c      	movs	r1, #12
 800f018:	4618      	mov	r0, r3
 800f01a:	f001 ffb8 	bl	8010f8e <SDMMC_GetResponse>
 800f01e:	4602      	mov	r2, r0
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f028:	2b03      	cmp	r3, #3
 800f02a:	d00d      	beq.n	800f048 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f107 020e 	add.w	r2, r7, #14
 800f034:	4611      	mov	r1, r2
 800f036:	4618      	mov	r0, r3
 800f038:	f002 f9f7 	bl	801142a <SDMMC_CmdSetRelAdd>
 800f03c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f040:	2b00      	cmp	r3, #0
 800f042:	d001      	beq.n	800f048 <SD_InitCard+0xac>
    {
      return errorstate;
 800f044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f046:	e062      	b.n	800f10e <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f04c:	2b03      	cmp	r3, #3
 800f04e:	d036      	beq.n	800f0be <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f050:	89fb      	ldrh	r3, [r7, #14]
 800f052:	461a      	mov	r2, r3
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f060:	041b      	lsls	r3, r3, #16
 800f062:	4619      	mov	r1, r3
 800f064:	4610      	mov	r0, r2
 800f066:	f002 f9c0 	bl	80113ea <SDMMC_CmdSendCSD>
 800f06a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <SD_InitCard+0xda>
    {
      return errorstate;
 800f072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f074:	e04b      	b.n	800f10e <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2100      	movs	r1, #0
 800f07c:	4618      	mov	r0, r3
 800f07e:	f001 ff86 	bl	8010f8e <SDMMC_GetResponse>
 800f082:	4602      	mov	r2, r0
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2104      	movs	r1, #4
 800f08e:	4618      	mov	r0, r3
 800f090:	f001 ff7d 	bl	8010f8e <SDMMC_GetResponse>
 800f094:	4602      	mov	r2, r0
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2108      	movs	r1, #8
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f001 ff74 	bl	8010f8e <SDMMC_GetResponse>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	210c      	movs	r1, #12
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f001 ff6b 	bl	8010f8e <SDMMC_GetResponse>
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2104      	movs	r1, #4
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f001 ff62 	bl	8010f8e <SDMMC_GetResponse>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	0d1a      	lsrs	r2, r3, #20
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f0d2:	f107 0310 	add.w	r3, r7, #16
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7ff fc0f 	bl	800e8fc <HAL_SD_GetCardCSD>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d002      	beq.n	800f0ea <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f0e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f0e8:	e011      	b.n	800f10e <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6819      	ldr	r1, [r3, #0]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0f2:	041b      	lsls	r3, r3, #16
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	f04f 0300 	mov.w	r3, #0
 800f0fa:	4608      	mov	r0, r1
 800f0fc:	f002 f86c 	bl	80111d8 <SDMMC_CmdSelDesel>
 800f100:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f104:	2b00      	cmp	r3, #0
 800f106:	d001      	beq.n	800f10c <SD_InitCard+0x170>
  {
    return errorstate;
 800f108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f10a:	e000      	b.n	800f10e <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3740      	adds	r7, #64	; 0x40
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
	...

0800f118 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b088      	sub	sp, #32
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f120:	2300      	movs	r3, #0
 800f122:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800f124:	2300      	movs	r3, #0
 800f126:	61fb      	str	r3, [r7, #28]
 800f128:	2300      	movs	r3, #0
 800f12a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800f12c:	f7f8 fc7a 	bl	8007a24 <HAL_GetTick>
 800f130:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4618      	mov	r0, r3
 800f138:	f002 f872 	bl	8011220 <SDMMC_CmdGoIdleState>
 800f13c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d001      	beq.n	800f148 <SD_PowerON+0x30>
  {
    return errorstate;
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	e0f2      	b.n	800f32e <SD_PowerON+0x216>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4618      	mov	r0, r3
 800f14e:	f002 f885 	bl	801125c <SDMMC_CmdOperCond>
 800f152:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d00d      	beq.n	800f176 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2200      	movs	r2, #0
 800f15e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4618      	mov	r0, r3
 800f166:	f002 f85b 	bl	8011220 <SDMMC_CmdGoIdleState>
 800f16a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d004      	beq.n	800f17c <SD_PowerON+0x64>
    {
      return errorstate;
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	e0db      	b.n	800f32e <SD_PowerON+0x216>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2201      	movs	r2, #1
 800f17a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f180:	2b01      	cmp	r3, #1
 800f182:	d137      	bne.n	800f1f4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	2100      	movs	r1, #0
 800f18a:	4618      	mov	r0, r3
 800f18c:	f002 f886 	bl	801129c <SDMMC_CmdAppCommand>
 800f190:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d02d      	beq.n	800f1f4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f198:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f19c:	e0c7      	b.n	800f32e <SD_PowerON+0x216>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f002 f879 	bl	801129c <SDMMC_CmdAppCommand>
 800f1aa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d001      	beq.n	800f1b6 <SD_PowerON+0x9e>
    {
      return errorstate;
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	e0bb      	b.n	800f32e <SD_PowerON+0x216>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	495f      	ldr	r1, [pc, #380]	; (800f338 <SD_PowerON+0x220>)
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f002 f890 	bl	80112e2 <SDMMC_CmdAppOperCommand>
 800f1c2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d002      	beq.n	800f1d0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f1ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f1ce:	e0ae      	b.n	800f32e <SD_PowerON+0x216>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f001 fed9 	bl	8010f8e <SDMMC_GetResponse>
 800f1dc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	0fdb      	lsrs	r3, r3, #31
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	d101      	bne.n	800f1ea <SD_PowerON+0xd2>
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e000      	b.n	800f1ec <SD_PowerON+0xd4>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	61bb      	str	r3, [r7, #24]

    count++;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d802      	bhi.n	800f204 <SD_PowerON+0xec>
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d0cc      	beq.n	800f19e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d902      	bls.n	800f214 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f20e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f212:	e08c      	b.n	800f32e <SD_PowerON+0x216>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f000 8083 	beq.w	800f326 <SD_PowerON+0x20e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2201      	movs	r2, #1
 800f224:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	699b      	ldr	r3, [r3, #24]
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d17e      	bne.n	800f32c <SD_PowerON+0x214>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800f22e:	69fb      	ldr	r3, [r7, #28]
 800f230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f234:	2b00      	cmp	r3, #0
 800f236:	d079      	beq.n	800f32c <SD_PowerON+0x214>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f23e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f042 0208 	orr.w	r2, r2, #8
 800f24e:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4618      	mov	r0, r3
 800f256:	f002 f94f 	bl	80114f8 <SDMMC_CmdVoltageSwitch>
 800f25a:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00c      	beq.n	800f27c <SD_PowerON+0x164>
        {
          return errorstate;
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	e063      	b.n	800f32e <SD_PowerON+0x216>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f266:	f7f8 fbdd 	bl	8007a24 <HAL_GetTick>
 800f26a:	4602      	mov	r2, r0
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	1ad3      	subs	r3, r2, r3
 800f270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f274:	d102      	bne.n	800f27c <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800f276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f27a:	e058      	b.n	800f32e <SD_PowerON+0x216>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f282:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f286:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f28a:	d1ec      	bne.n	800f266 <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f294:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f29c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2a4:	d002      	beq.n	800f2ac <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800f2a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f2aa:	e040      	b.n	800f32e <SD_PowerON+0x216>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800f2ac:	2001      	movs	r0, #1
 800f2ae:	f000 fb49 	bl	800f944 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f042 0204 	orr.w	r2, r2, #4
 800f2c0:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800f2c2:	e00a      	b.n	800f2da <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f2c4:	f7f8 fbae 	bl	8007a24 <HAL_GetTick>
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2d2:	d102      	bne.n	800f2da <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800f2d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2d8:	e029      	b.n	800f32e <SD_PowerON+0x216>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2e8:	d1ec      	bne.n	800f2c4 <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f2f2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f302:	d102      	bne.n	800f30a <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f308:	e011      	b.n	800f32e <SD_PowerON+0x216>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2213      	movs	r2, #19
 800f310:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f04f 32ff 	mov.w	r2, #4294967295
 800f31a:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f322:	65da      	str	r2, [r3, #92]	; 0x5c
 800f324:	e002      	b.n	800f32c <SD_PowerON+0x214>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800f32c:	2300      	movs	r3, #0
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3720      	adds	r7, #32
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	c1100000 	.word	0xc1100000

0800f33c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b08c      	sub	sp, #48	; 0x30
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f346:	f7f8 fb6d 	bl	8007a24 <HAL_GetTick>
 800f34a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2100      	movs	r1, #0
 800f356:	4618      	mov	r0, r3
 800f358:	f001 fe19 	bl	8010f8e <SDMMC_GetResponse>
 800f35c:	4603      	mov	r3, r0
 800f35e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f366:	d102      	bne.n	800f36e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f36c:	e0b0      	b.n	800f4d0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2140      	movs	r1, #64	; 0x40
 800f374:	4618      	mov	r0, r3
 800f376:	f001 fe49 	bl	801100c <SDMMC_CmdBlockLength>
 800f37a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d005      	beq.n	800f38e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f38a:	6a3b      	ldr	r3, [r7, #32]
 800f38c:	e0a0      	b.n	800f4d0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f396:	041b      	lsls	r3, r3, #16
 800f398:	4619      	mov	r1, r3
 800f39a:	4610      	mov	r0, r2
 800f39c:	f001 ff7e 	bl	801129c <SDMMC_CmdAppCommand>
 800f3a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f3a2:	6a3b      	ldr	r3, [r7, #32]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d005      	beq.n	800f3b4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f3b0:	6a3b      	ldr	r3, [r7, #32]
 800f3b2:	e08d      	b.n	800f4d0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f3ba:	2340      	movs	r3, #64	; 0x40
 800f3bc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f3be:	2360      	movs	r3, #96	; 0x60
 800f3c0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f3c2:	2302      	movs	r3, #2
 800f3c4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f107 0208 	add.w	r2, r7, #8
 800f3d6:	4611      	mov	r1, r2
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f001 fdeb 	bl	8010fb4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f002 f866 	bl	80114b4 <SDMMC_CmdStatusRegister>
 800f3e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f3ea:	6a3b      	ldr	r3, [r7, #32]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d02b      	beq.n	800f448 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f3f8:	6a3b      	ldr	r3, [r7, #32]
 800f3fa:	e069      	b.n	800f4d0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f406:	2b00      	cmp	r3, #0
 800f408:	d013      	beq.n	800f432 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800f40a:	2300      	movs	r3, #0
 800f40c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f40e:	e00d      	b.n	800f42c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4618      	mov	r0, r3
 800f416:	f001 fd45 	bl	8010ea4 <SDMMC_ReadFIFO>
 800f41a:	4602      	mov	r2, r0
 800f41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41e:	601a      	str	r2, [r3, #0]
        pData++;
 800f420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f422:	3304      	adds	r3, #4
 800f424:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800f426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f428:	3301      	adds	r3, #1
 800f42a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42e:	2b07      	cmp	r3, #7
 800f430:	d9ee      	bls.n	800f410 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f432:	f7f8 faf7 	bl	8007a24 <HAL_GetTick>
 800f436:	4602      	mov	r2, r0
 800f438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43a:	1ad3      	subs	r3, r2, r3
 800f43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f440:	d102      	bne.n	800f448 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f442:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f446:	e043      	b.n	800f4d0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f44e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f452:	2b00      	cmp	r3, #0
 800f454:	d0d2      	beq.n	800f3fc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f45c:	f003 0308 	and.w	r3, r3, #8
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f464:	2308      	movs	r3, #8
 800f466:	e033      	b.n	800f4d0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f46e:	f003 0302 	and.w	r3, r3, #2
 800f472:	2b00      	cmp	r3, #0
 800f474:	d001      	beq.n	800f47a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f476:	2302      	movs	r3, #2
 800f478:	e02a      	b.n	800f4d0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f480:	f003 0320 	and.w	r3, r3, #32
 800f484:	2b00      	cmp	r3, #0
 800f486:	d017      	beq.n	800f4b8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f488:	2320      	movs	r3, #32
 800f48a:	e021      	b.n	800f4d0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	4618      	mov	r0, r3
 800f492:	f001 fd07 	bl	8010ea4 <SDMMC_ReadFIFO>
 800f496:	4602      	mov	r2, r0
 800f498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49a:	601a      	str	r2, [r3, #0]
    pData++;
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	3304      	adds	r3, #4
 800f4a0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f4a2:	f7f8 fabf 	bl	8007a24 <HAL_GetTick>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b0:	d102      	bne.n	800f4b8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f4b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4b6:	e00b      	b.n	800f4d0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d1e2      	bne.n	800f48c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4a03      	ldr	r2, [pc, #12]	; (800f4d8 <SD_SendSDStatus+0x19c>)
 800f4cc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3730      	adds	r7, #48	; 0x30
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	18000f3a 	.word	0x18000f3a

0800f4dc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d102      	bne.n	800f4f2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f4ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f4f0:	e018      	b.n	800f524 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4fa:	041b      	lsls	r3, r3, #16
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	4610      	mov	r0, r2
 800f500:	f001 ffb5 	bl	801146e <SDMMC_CmdSendStatus>
 800f504:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d001      	beq.n	800f510 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	e009      	b.n	800f524 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2100      	movs	r1, #0
 800f516:	4618      	mov	r0, r3
 800f518:	f001 fd39 	bl	8010f8e <SDMMC_GetResponse>
 800f51c:	4602      	mov	r2, r0
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f522:	2300      	movs	r3, #0
}
 800f524:	4618      	mov	r0, r3
 800f526:	3710      	adds	r7, #16
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b086      	sub	sp, #24
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f534:	2300      	movs	r3, #0
 800f536:	60fb      	str	r3, [r7, #12]
 800f538:	2300      	movs	r3, #0
 800f53a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2100      	movs	r1, #0
 800f542:	4618      	mov	r0, r3
 800f544:	f001 fd23 	bl	8010f8e <SDMMC_GetResponse>
 800f548:	4603      	mov	r3, r0
 800f54a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f54e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f552:	d102      	bne.n	800f55a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f554:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f558:	e02f      	b.n	800f5ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f55a:	f107 030c 	add.w	r3, r7, #12
 800f55e:	4619      	mov	r1, r3
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 f879 	bl	800f658 <SD_FindSCR>
 800f566:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d001      	beq.n	800f572 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	e023      	b.n	800f5ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d01c      	beq.n	800f5b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f584:	041b      	lsls	r3, r3, #16
 800f586:	4619      	mov	r1, r3
 800f588:	4610      	mov	r0, r2
 800f58a:	f001 fe87 	bl	801129c <SDMMC_CmdAppCommand>
 800f58e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d001      	beq.n	800f59a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	e00f      	b.n	800f5ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	2102      	movs	r1, #2
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f001 febe 	bl	8011322 <SDMMC_CmdBusWidth>
 800f5a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d001      	beq.n	800f5b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	e003      	b.n	800f5ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	e001      	b.n	800f5ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f5b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3718      	adds	r7, #24
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b086      	sub	sp, #24
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	60fb      	str	r3, [r7, #12]
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f001 fcd8 	bl	8010f8e <SDMMC_GetResponse>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f5e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f5e8:	d102      	bne.n	800f5f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f5ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f5ee:	e02f      	b.n	800f650 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f5f0:	f107 030c 	add.w	r3, r7, #12
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 f82e 	bl	800f658 <SD_FindSCR>
 800f5fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d001      	beq.n	800f608 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	e023      	b.n	800f650 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d01c      	beq.n	800f64c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f61a:	041b      	lsls	r3, r3, #16
 800f61c:	4619      	mov	r1, r3
 800f61e:	4610      	mov	r0, r2
 800f620:	f001 fe3c 	bl	801129c <SDMMC_CmdAppCommand>
 800f624:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d001      	beq.n	800f630 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	e00f      	b.n	800f650 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2100      	movs	r1, #0
 800f636:	4618      	mov	r0, r3
 800f638:	f001 fe73 	bl	8011322 <SDMMC_CmdBusWidth>
 800f63c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d001      	beq.n	800f648 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	e003      	b.n	800f650 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f648:	2300      	movs	r3, #0
 800f64a:	e001      	b.n	800f650 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f64c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f650:	4618      	mov	r0, r3
 800f652:	3718      	adds	r7, #24
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08e      	sub	sp, #56	; 0x38
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f662:	f7f8 f9df 	bl	8007a24 <HAL_GetTick>
 800f666:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f668:	2300      	movs	r3, #0
 800f66a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f66c:	2300      	movs	r3, #0
 800f66e:	60bb      	str	r3, [r7, #8]
 800f670:	2300      	movs	r3, #0
 800f672:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2108      	movs	r1, #8
 800f67e:	4618      	mov	r0, r3
 800f680:	f001 fcc4 	bl	801100c <SDMMC_CmdBlockLength>
 800f684:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d001      	beq.n	800f690 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68e:	e0ad      	b.n	800f7ec <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f698:	041b      	lsls	r3, r3, #16
 800f69a:	4619      	mov	r1, r3
 800f69c:	4610      	mov	r0, r2
 800f69e:	f001 fdfd 	bl	801129c <SDMMC_CmdAppCommand>
 800f6a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d001      	beq.n	800f6ae <SD_FindSCR+0x56>
  {
    return errorstate;
 800f6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ac:	e09e      	b.n	800f7ec <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f6b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f6b4:	2308      	movs	r3, #8
 800f6b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f6b8:	2330      	movs	r3, #48	; 0x30
 800f6ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f6bc:	2302      	movs	r3, #2
 800f6be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f107 0210 	add.w	r2, r7, #16
 800f6d0:	4611      	mov	r1, r2
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f001 fc6e 	bl	8010fb4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f001 fe43 	bl	8011368 <SDMMC_CmdSendSCR>
 800f6e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d027      	beq.n	800f73a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ec:	e07e      	b.n	800f7ec <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d113      	bne.n	800f724 <SD_FindSCR+0xcc>
 800f6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d110      	bne.n	800f724 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4618      	mov	r0, r3
 800f708:	f001 fbcc 	bl	8010ea4 <SDMMC_ReadFIFO>
 800f70c:	4603      	mov	r3, r0
 800f70e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4618      	mov	r0, r3
 800f716:	f001 fbc5 	bl	8010ea4 <SDMMC_ReadFIFO>
 800f71a:	4603      	mov	r3, r0
 800f71c:	60fb      	str	r3, [r7, #12]
      index++;
 800f71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f720:	3301      	adds	r3, #1
 800f722:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f724:	f7f8 f97e 	bl	8007a24 <HAL_GetTick>
 800f728:	4602      	mov	r2, r0
 800f72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f732:	d102      	bne.n	800f73a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f734:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f738:	e058      	b.n	800f7ec <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f740:	f240 532a 	movw	r3, #1322	; 0x52a
 800f744:	4013      	ands	r3, r2
 800f746:	2b00      	cmp	r3, #0
 800f748:	d0d1      	beq.n	800f6ee <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f750:	f003 0308 	and.w	r3, r3, #8
 800f754:	2b00      	cmp	r3, #0
 800f756:	d005      	beq.n	800f764 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2208      	movs	r2, #8
 800f75e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f760:	2308      	movs	r3, #8
 800f762:	e043      	b.n	800f7ec <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f76a:	f003 0302 	and.w	r3, r3, #2
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d005      	beq.n	800f77e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2202      	movs	r2, #2
 800f778:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f77a:	2302      	movs	r3, #2
 800f77c:	e036      	b.n	800f7ec <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f784:	f003 0320 	and.w	r3, r3, #32
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d005      	beq.n	800f798 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2220      	movs	r2, #32
 800f792:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f794:	2320      	movs	r3, #32
 800f796:	e029      	b.n	800f7ec <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a15      	ldr	r2, [pc, #84]	; (800f7f4 <SD_FindSCR+0x19c>)
 800f79e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	061a      	lsls	r2, r3, #24
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	021b      	lsls	r3, r3, #8
 800f7a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7ac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	0a1b      	lsrs	r3, r3, #8
 800f7b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f7b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	0e1b      	lsrs	r3, r3, #24
 800f7bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c0:	601a      	str	r2, [r3, #0]
    scr++;
 800f7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c4:	3304      	adds	r3, #4
 800f7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	061a      	lsls	r2, r3, #24
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	021b      	lsls	r3, r3, #8
 800f7d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7d4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	0a1b      	lsrs	r3, r3, #8
 800f7da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f7de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	0e1b      	lsrs	r3, r3, #24
 800f7e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f7ea:	2300      	movs	r3, #0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3738      	adds	r7, #56	; 0x38
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	18000f3a 	.word	0x18000f3a

0800f7f8 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b086      	sub	sp, #24
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f804:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f80a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d03f      	beq.n	800f892 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800f812:	2300      	movs	r3, #0
 800f814:	617b      	str	r3, [r7, #20]
 800f816:	e033      	b.n	800f880 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f001 fb41 	bl	8010ea4 <SDMMC_ReadFIFO>
 800f822:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	b2da      	uxtb	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	3301      	adds	r3, #1
 800f830:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	3b01      	subs	r3, #1
 800f836:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	0a1b      	lsrs	r3, r3, #8
 800f83c:	b2da      	uxtb	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	3301      	adds	r3, #1
 800f846:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	3b01      	subs	r3, #1
 800f84c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	0c1b      	lsrs	r3, r3, #16
 800f852:	b2da      	uxtb	r2, r3
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	3301      	adds	r3, #1
 800f85c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	3b01      	subs	r3, #1
 800f862:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	0e1b      	lsrs	r3, r3, #24
 800f868:	b2da      	uxtb	r2, r3
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	3301      	adds	r3, #1
 800f872:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	3b01      	subs	r3, #1
 800f878:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	3301      	adds	r3, #1
 800f87e:	617b      	str	r3, [r7, #20]
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	2b07      	cmp	r3, #7
 800f884:	d9c8      	bls.n	800f818 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	693a      	ldr	r2, [r7, #16]
 800f890:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800f892:	bf00      	nop
 800f894:	3718      	adds	r7, #24
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b086      	sub	sp, #24
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a1b      	ldr	r3, [r3, #32]
 800f8a6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d043      	beq.n	800f93c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	617b      	str	r3, [r7, #20]
 800f8b8:	e037      	b.n	800f92a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	021a      	lsls	r2, r3, #8
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	3b01      	subs	r3, #1
 800f8e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	041a      	lsls	r2, r3, #16
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	061a      	lsls	r2, r3, #24
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	4313      	orrs	r3, r2
 800f906:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	3301      	adds	r3, #1
 800f90c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	3b01      	subs	r3, #1
 800f912:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f107 0208 	add.w	r2, r7, #8
 800f91c:	4611      	mov	r1, r2
 800f91e:	4618      	mov	r0, r3
 800f920:	f001 facd 	bl	8010ebe <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	3301      	adds	r3, #1
 800f928:	617b      	str	r3, [r7, #20]
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	2b07      	cmp	r3, #7
 800f92e:	d9c4      	bls.n	800f8ba <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800f93c:	bf00      	nop
 800f93e:	3718      	adds	r7, #24
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	4603      	mov	r3, r0
 800f94c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800f94e:	bf00      	nop
 800f950:	370c      	adds	r7, #12
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f95a:	b480      	push	{r7}
 800f95c:	b083      	sub	sp, #12
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800f962:	bf00      	nop
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f96e:	b480      	push	{r7}
 800f970:	b083      	sub	sp, #12
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800f976:	bf00      	nop
 800f978:	370c      	adds	r7, #12
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f982:	b480      	push	{r7}
 800f984:	b083      	sub	sp, #12
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800f98a:	bf00      	nop
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f996:	b480      	push	{r7}
 800f998:	b083      	sub	sp, #12
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800f99e:	bf00      	nop
 800f9a0:	370c      	adds	r7, #12
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
	...

0800f9ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e0a0      	b.n	800fb00 <HAL_SPI_Init+0x154>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d12a      	bne.n	800fa26 <HAL_SPI_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	4a4b      	ldr	r2, [pc, #300]	; (800fb08 <HAL_SPI_Init+0x15c>)
 800f9dc:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4a4a      	ldr	r2, [pc, #296]	; (800fb0c <HAL_SPI_Init+0x160>)
 800f9e2:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4a4a      	ldr	r2, [pc, #296]	; (800fb10 <HAL_SPI_Init+0x164>)
 800f9e8:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4a49      	ldr	r2, [pc, #292]	; (800fb14 <HAL_SPI_Init+0x168>)
 800f9ee:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4a49      	ldr	r2, [pc, #292]	; (800fb18 <HAL_SPI_Init+0x16c>)
 800f9f4:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	4a48      	ldr	r2, [pc, #288]	; (800fb1c <HAL_SPI_Init+0x170>)
 800f9fa:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4a48      	ldr	r2, [pc, #288]	; (800fb20 <HAL_SPI_Init+0x174>)
 800fa00:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4a47      	ldr	r2, [pc, #284]	; (800fb24 <HAL_SPI_Init+0x178>)
 800fa06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d103      	bne.n	800fa1c <HAL_SPI_Init+0x70>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4a44      	ldr	r2, [pc, #272]	; (800fb28 <HAL_SPI_Init+0x17c>)
 800fa18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2202      	movs	r2, #2
 800fa2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa3c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fa46:	d902      	bls.n	800fa4e <HAL_SPI_Init+0xa2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	60fb      	str	r3, [r7, #12]
 800fa4c:	e002      	b.n	800fa54 <HAL_SPI_Init+0xa8>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fa4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa52:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	68db      	ldr	r3, [r3, #12]
 800fa58:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800fa5c:	d007      	beq.n	800fa6e <HAL_SPI_Init+0xc2>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	68db      	ldr	r3, [r3, #12]
 800fa62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fa66:	d002      	beq.n	800fa6e <HAL_SPI_Init+0xc2>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d10b      	bne.n	800fa8e <HAL_SPI_Init+0xe2>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fa7e:	d903      	bls.n	800fa88 <HAL_SPI_Init+0xdc>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2202      	movs	r2, #2
 800fa84:	631a      	str	r2, [r3, #48]	; 0x30
 800fa86:	e002      	b.n	800fa8e <HAL_SPI_Init+0xe2>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	685a      	ldr	r2, [r3, #4]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	431a      	orrs	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	691b      	ldr	r3, [r3, #16]
 800fa9c:	431a      	orrs	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	695b      	ldr	r3, [r3, #20]
 800faa2:	431a      	orrs	r2, r3
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	699b      	ldr	r3, [r3, #24]
 800faa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800faac:	431a      	orrs	r2, r3
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	69db      	ldr	r3, [r3, #28]
 800fab2:	431a      	orrs	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a1b      	ldr	r3, [r3, #32]
 800fab8:	ea42 0103 	orr.w	r1, r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	430a      	orrs	r2, r1
 800fac6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	699b      	ldr	r3, [r3, #24]
 800facc:	0c1b      	lsrs	r3, r3, #16
 800face:	f003 0204 	and.w	r2, r3, #4
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad6:	431a      	orrs	r2, r3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fadc:	431a      	orrs	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	ea42 0103 	orr.w	r1, r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	68fa      	ldr	r2, [r7, #12]
 800faec:	430a      	orrs	r2, r1
 800faee:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2200      	movs	r2, #0
 800faf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2201      	movs	r2, #1
 800fafa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3710      	adds	r7, #16
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	08010271 	.word	0x08010271
 800fb0c:	08010285 	.word	0x08010285
 800fb10:	08010299 	.word	0x08010299
 800fb14:	080102ad 	.word	0x080102ad
 800fb18:	080102c1 	.word	0x080102c1
 800fb1c:	080102d5 	.word	0x080102d5
 800fb20:	080102e9 	.word	0x080102e9
 800fb24:	080102fd 	.word	0x080102fd
 800fb28:	0800fb2d 	.word	0x0800fb2d

0800fb2c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800fb34:	bf00      	nop
 800fb36:	370c      	adds	r7, #12
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr

0800fb40 <HAL_SPI_RegisterCallback>:
  * @param  CallbackID ID of the callback to be registered
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID, pSPI_CallbackTypeDef pCallback)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b087      	sub	sp, #28
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	460b      	mov	r3, r1
 800fb4a:	607a      	str	r2, [r7, #4]
 800fb4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d107      	bne.n	800fb68 <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800fb64:	2301      	movs	r3, #1
 800fb66:	e08b      	b.n	800fc80 <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d101      	bne.n	800fb76 <HAL_SPI_RegisterCallback+0x36>
 800fb72:	2302      	movs	r3, #2
 800fb74:	e084      	b.n	800fc80 <HAL_SPI_RegisterCallback+0x140>
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2201      	movs	r2, #1
 800fb7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fb84:	b2db      	uxtb	r3, r3
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d14e      	bne.n	800fc28 <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 800fb8a:	7afb      	ldrb	r3, [r7, #11]
 800fb8c:	2b09      	cmp	r3, #9
 800fb8e:	d842      	bhi.n	800fc16 <HAL_SPI_RegisterCallback+0xd6>
 800fb90:	a201      	add	r2, pc, #4	; (adr r2, 800fb98 <HAL_SPI_RegisterCallback+0x58>)
 800fb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb96:	bf00      	nop
 800fb98:	0800fbc1 	.word	0x0800fbc1
 800fb9c:	0800fbc9 	.word	0x0800fbc9
 800fba0:	0800fbd1 	.word	0x0800fbd1
 800fba4:	0800fbd9 	.word	0x0800fbd9
 800fba8:	0800fbe1 	.word	0x0800fbe1
 800fbac:	0800fbe9 	.word	0x0800fbe9
 800fbb0:	0800fbf1 	.word	0x0800fbf1
 800fbb4:	0800fbf9 	.word	0x0800fbf9
 800fbb8:	0800fc03 	.word	0x0800fc03
 800fbbc:	0800fc0d 	.word	0x0800fc0d
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800fbc6:	e056      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800fbce:	e052      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800fbd6:	e04e      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	687a      	ldr	r2, [r7, #4]
 800fbdc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800fbde:	e04a      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800fbe6:	e046      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800fbee:	e042      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800fbf6:	e03e      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	687a      	ldr	r2, [r7, #4]
 800fbfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800fc00:	e039      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800fc0a:	e034      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800fc14:	e02f      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800fc22:	2301      	movs	r3, #1
 800fc24:	75fb      	strb	r3, [r7, #23]
        break;
 800fc26:	e026      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d118      	bne.n	800fc66 <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 800fc34:	7afb      	ldrb	r3, [r7, #11]
 800fc36:	2b08      	cmp	r3, #8
 800fc38:	d002      	beq.n	800fc40 <HAL_SPI_RegisterCallback+0x100>
 800fc3a:	2b09      	cmp	r3, #9
 800fc3c:	d005      	beq.n	800fc4a <HAL_SPI_RegisterCallback+0x10a>
 800fc3e:	e009      	b.n	800fc54 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800fc48:	e015      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800fc52:	e010      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800fc60:	2301      	movs	r3, #1
 800fc62:	75fb      	strb	r3, [r7, #23]
        break;
 800fc64:	e007      	b.n	800fc76 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 800fc72:	2301      	movs	r3, #1
 800fc74:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 800fc7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	371c      	adds	r7, #28
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr

0800fc8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b088      	sub	sp, #32
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	603b      	str	r3, [r7, #0]
 800fc98:	4613      	mov	r3, r2
 800fc9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d101      	bne.n	800fcae <HAL_SPI_Transmit+0x22>
 800fcaa:	2302      	movs	r3, #2
 800fcac:	e150      	b.n	800ff50 <HAL_SPI_Transmit+0x2c4>
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fcb6:	f7f7 feb5 	bl	8007a24 <HAL_GetTick>
 800fcba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800fcbc:	88fb      	ldrh	r3, [r7, #6]
 800fcbe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d002      	beq.n	800fcd2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800fccc:	2302      	movs	r3, #2
 800fcce:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fcd0:	e135      	b.n	800ff3e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d002      	beq.n	800fcde <HAL_SPI_Transmit+0x52>
 800fcd8:	88fb      	ldrh	r3, [r7, #6]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d102      	bne.n	800fce4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800fcde:	2301      	movs	r3, #1
 800fce0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fce2:	e12c      	b.n	800ff3e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2203      	movs	r2, #3
 800fce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	68ba      	ldr	r2, [r7, #8]
 800fcf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	88fa      	ldrh	r2, [r7, #6]
 800fcfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	88fa      	ldrh	r2, [r7, #6]
 800fd02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2200      	movs	r2, #0
 800fd08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2200      	movs	r2, #0
 800fd16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2200      	movs	r2, #0
 800fd24:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd2e:	d107      	bne.n	800fd40 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd4a:	2b40      	cmp	r3, #64	; 0x40
 800fd4c:	d007      	beq.n	800fd5e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fd66:	d94b      	bls.n	800fe00 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d002      	beq.n	800fd76 <HAL_SPI_Transmit+0xea>
 800fd70:	8afb      	ldrh	r3, [r7, #22]
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d13e      	bne.n	800fdf4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd7a:	881a      	ldrh	r2, [r3, #0]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd86:	1c9a      	adds	r2, r3, #2
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	3b01      	subs	r3, #1
 800fd94:	b29a      	uxth	r2, r3
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800fd9a:	e02b      	b.n	800fdf4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	689b      	ldr	r3, [r3, #8]
 800fda2:	f003 0302 	and.w	r3, r3, #2
 800fda6:	2b02      	cmp	r3, #2
 800fda8:	d112      	bne.n	800fdd0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdae:	881a      	ldrh	r2, [r3, #0]
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdba:	1c9a      	adds	r2, r3, #2
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	3b01      	subs	r3, #1
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fdce:	e011      	b.n	800fdf4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdd0:	f7f7 fe28 	bl	8007a24 <HAL_GetTick>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	1ad3      	subs	r3, r2, r3
 800fdda:	683a      	ldr	r2, [r7, #0]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d803      	bhi.n	800fde8 <HAL_SPI_Transmit+0x15c>
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fde6:	d102      	bne.n	800fdee <HAL_SPI_Transmit+0x162>
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d102      	bne.n	800fdf4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800fdee:	2303      	movs	r3, #3
 800fdf0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fdf2:	e0a4      	b.n	800ff3e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d1ce      	bne.n	800fd9c <HAL_SPI_Transmit+0x110>
 800fdfe:	e07c      	b.n	800fefa <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d002      	beq.n	800fe0e <HAL_SPI_Transmit+0x182>
 800fe08:	8afb      	ldrh	r3, [r7, #22]
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d170      	bne.n	800fef0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d912      	bls.n	800fe3e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe1c:	881a      	ldrh	r2, [r3, #0]
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe28:	1c9a      	adds	r2, r3, #2
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	3b02      	subs	r3, #2
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fe3c:	e058      	b.n	800fef0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	330c      	adds	r3, #12
 800fe48:	7812      	ldrb	r2, [r2, #0]
 800fe4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe50:	1c5a      	adds	r2, r3, #1
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	3b01      	subs	r3, #1
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800fe64:	e044      	b.n	800fef0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	f003 0302 	and.w	r3, r3, #2
 800fe70:	2b02      	cmp	r3, #2
 800fe72:	d12b      	bne.n	800fecc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d912      	bls.n	800fea4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe82:	881a      	ldrh	r2, [r3, #0]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe8e:	1c9a      	adds	r2, r3, #2
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	3b02      	subs	r3, #2
 800fe9c:	b29a      	uxth	r2, r3
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fea2:	e025      	b.n	800fef0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	330c      	adds	r3, #12
 800feae:	7812      	ldrb	r2, [r2, #0]
 800feb0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feb6:	1c5a      	adds	r2, r3, #1
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	3b01      	subs	r3, #1
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800feca:	e011      	b.n	800fef0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fecc:	f7f7 fdaa 	bl	8007a24 <HAL_GetTick>
 800fed0:	4602      	mov	r2, r0
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	1ad3      	subs	r3, r2, r3
 800fed6:	683a      	ldr	r2, [r7, #0]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d803      	bhi.n	800fee4 <HAL_SPI_Transmit+0x258>
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fee2:	d102      	bne.n	800feea <HAL_SPI_Transmit+0x25e>
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d102      	bne.n	800fef0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800feea:	2303      	movs	r3, #3
 800feec:	77fb      	strb	r3, [r7, #31]
          goto error;
 800feee:	e026      	b.n	800ff3e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d1b5      	bne.n	800fe66 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fefa:	69ba      	ldr	r2, [r7, #24]
 800fefc:	6839      	ldr	r1, [r7, #0]
 800fefe:	68f8      	ldr	r0, [r7, #12]
 800ff00:	f000 fc02 	bl	8010708 <SPI_EndRxTxTransaction>
 800ff04:	4603      	mov	r3, r0
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d002      	beq.n	800ff10 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2220      	movs	r2, #32
 800ff0e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	689b      	ldr	r3, [r3, #8]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10a      	bne.n	800ff2e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ff18:	2300      	movs	r3, #0
 800ff1a:	613b      	str	r3, [r7, #16]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	68db      	ldr	r3, [r3, #12]
 800ff22:	613b      	str	r3, [r7, #16]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	689b      	ldr	r3, [r3, #8]
 800ff2a:	613b      	str	r3, [r7, #16]
 800ff2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d002      	beq.n	800ff3c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800ff36:	2301      	movs	r3, #1
 800ff38:	77fb      	strb	r3, [r7, #31]
 800ff3a:	e000      	b.n	800ff3e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800ff3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2201      	movs	r2, #1
 800ff42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ff4e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3720      	adds	r7, #32
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b086      	sub	sp, #24
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
 800ff64:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ff66:	2300      	movs	r3, #0
 800ff68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d101      	bne.n	800ff78 <HAL_SPI_TransmitReceive_DMA+0x20>
 800ff74:	2302      	movs	r3, #2
 800ff76:	e16c      	b.n	8010252 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ff86:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800ff8e:	7dbb      	ldrb	r3, [r7, #22]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d00d      	beq.n	800ffb0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ff9a:	d106      	bne.n	800ffaa <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	689b      	ldr	r3, [r3, #8]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d102      	bne.n	800ffaa <HAL_SPI_TransmitReceive_DMA+0x52>
 800ffa4:	7dbb      	ldrb	r3, [r7, #22]
 800ffa6:	2b04      	cmp	r3, #4
 800ffa8:	d002      	beq.n	800ffb0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800ffaa:	2302      	movs	r3, #2
 800ffac:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ffae:	e14b      	b.n	8010248 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d005      	beq.n	800ffc2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d002      	beq.n	800ffc2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ffbc:	887b      	ldrh	r3, [r7, #2]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d102      	bne.n	800ffc8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ffc6:	e13f      	b.n	8010248 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	2b04      	cmp	r3, #4
 800ffd2:	d003      	beq.n	800ffdc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2205      	movs	r2, #5
 800ffd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	68ba      	ldr	r2, [r7, #8]
 800ffe6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	887a      	ldrh	r2, [r7, #2]
 800ffec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	887a      	ldrh	r2, [r7, #2]
 800fff2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	887a      	ldrh	r2, [r7, #2]
 800fffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	887a      	ldrh	r2, [r7, #2]
 8010006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2200      	movs	r2, #0
 801000e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	2200      	movs	r2, #0
 8010014:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	685a      	ldr	r2, [r3, #4]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8010024:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801002e:	d908      	bls.n	8010042 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	685a      	ldr	r2, [r3, #4]
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801003e:	605a      	str	r2, [r3, #4]
 8010040:	e06f      	b.n	8010122 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	685a      	ldr	r2, [r3, #4]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010050:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010056:	699b      	ldr	r3, [r3, #24]
 8010058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801005c:	d126      	bne.n	80100ac <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8010062:	f003 0301 	and.w	r3, r3, #1
 8010066:	2b00      	cmp	r3, #0
 8010068:	d10f      	bne.n	801008a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	685a      	ldr	r2, [r3, #4]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010078:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801007e:	b29b      	uxth	r3, r3
 8010080:	085b      	lsrs	r3, r3, #1
 8010082:	b29a      	uxth	r2, r3
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010088:	e010      	b.n	80100ac <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	685a      	ldr	r2, [r3, #4]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010098:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801009e:	b29b      	uxth	r3, r3
 80100a0:	085b      	lsrs	r3, r3, #1
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	3301      	adds	r3, #1
 80100a6:	b29a      	uxth	r2, r3
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100b0:	699b      	ldr	r3, [r3, #24]
 80100b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100b6:	d134      	bne.n	8010122 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	685a      	ldr	r2, [r3, #4]
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80100c6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	f003 0301 	and.w	r3, r3, #1
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d111      	bne.n	80100fc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	685a      	ldr	r2, [r3, #4]
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80100e6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	085b      	lsrs	r3, r3, #1
 80100f2:	b29a      	uxth	r2, r3
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80100fa:	e012      	b.n	8010122 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	685a      	ldr	r2, [r3, #4]
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801010a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010112:	b29b      	uxth	r3, r3
 8010114:	085b      	lsrs	r3, r3, #1
 8010116:	b29b      	uxth	r3, r3
 8010118:	3301      	adds	r3, #1
 801011a:	b29a      	uxth	r2, r3
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010128:	b2db      	uxtb	r3, r3
 801012a:	2b04      	cmp	r3, #4
 801012c:	d108      	bne.n	8010140 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010132:	4a4a      	ldr	r2, [pc, #296]	; (801025c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8010134:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801013a:	4a49      	ldr	r2, [pc, #292]	; (8010260 <HAL_SPI_TransmitReceive_DMA+0x308>)
 801013c:	62da      	str	r2, [r3, #44]	; 0x2c
 801013e:	e007      	b.n	8010150 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010144:	4a47      	ldr	r2, [pc, #284]	; (8010264 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8010146:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801014c:	4a46      	ldr	r2, [pc, #280]	; (8010268 <HAL_SPI_TransmitReceive_DMA+0x310>)
 801014e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010154:	4a45      	ldr	r2, [pc, #276]	; (801026c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8010156:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801015c:	2200      	movs	r2, #0
 801015e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	330c      	adds	r3, #12
 801016a:	4619      	mov	r1, r3
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010170:	461a      	mov	r2, r3
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010178:	b29b      	uxth	r3, r3
 801017a:	f7f9 f8fd 	bl	8009378 <HAL_DMA_Start_IT>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d00c      	beq.n	801019e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010188:	f043 0210 	orr.w	r2, r3, #16
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8010190:	2301      	movs	r3, #1
 8010192:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2201      	movs	r2, #1
 8010198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 801019c:	e054      	b.n	8010248 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	685a      	ldr	r2, [r3, #4]
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	f042 0201 	orr.w	r2, r2, #1
 80101ac:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101b2:	2200      	movs	r2, #0
 80101b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101ba:	2200      	movs	r2, #0
 80101bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101c2:	2200      	movs	r2, #0
 80101c4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101ca:	2200      	movs	r2, #0
 80101cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101d6:	4619      	mov	r1, r3
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	330c      	adds	r3, #12
 80101de:	461a      	mov	r2, r3
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	f7f9 f8c7 	bl	8009378 <HAL_DMA_Start_IT>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d00c      	beq.n	801020a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101f4:	f043 0210 	orr.w	r2, r3, #16
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80101fc:	2301      	movs	r3, #1
 80101fe:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2201      	movs	r2, #1
 8010204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8010208:	e01e      	b.n	8010248 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010214:	2b40      	cmp	r3, #64	; 0x40
 8010216:	d007      	beq.n	8010228 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	681a      	ldr	r2, [r3, #0]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010226:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	685a      	ldr	r2, [r3, #4]
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f042 0220 	orr.w	r2, r2, #32
 8010236:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	685a      	ldr	r2, [r3, #4]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f042 0202 	orr.w	r2, r2, #2
 8010246:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2200      	movs	r2, #0
 801024c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010250:	7dfb      	ldrb	r3, [r7, #23]
}
 8010252:	4618      	mov	r0, r3
 8010254:	3718      	adds	r7, #24
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	0801042d 	.word	0x0801042d
 8010260:	08010311 	.word	0x08010311
 8010264:	0801044b 	.word	0x0801044b
 8010268:	08010399 	.word	0x08010399
 801026c:	08010469 	.word	0x08010469

08010270 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801028c:	bf00      	nop
 801028e:	370c      	adds	r7, #12
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010298:	b480      	push	{r7}
 801029a:	b083      	sub	sp, #12
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80102a0:	bf00      	nop
 80102a2:	370c      	adds	r7, #12
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr

080102ac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80102b4:	bf00      	nop
 80102b6:	370c      	adds	r7, #12
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr

080102c0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80102c8:	bf00      	nop
 80102ca:	370c      	adds	r7, #12
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80102f0:	bf00      	nop
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr

080102fc <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8010304:	bf00      	nop
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801031c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801031e:	f7f7 fb81 	bl	8007a24 <HAL_GetTick>
 8010322:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f003 0320 	and.w	r3, r3, #32
 801032e:	2b20      	cmp	r3, #32
 8010330:	d02b      	beq.n	801038a <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	685a      	ldr	r2, [r3, #4]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f022 0220 	bic.w	r2, r2, #32
 8010340:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	685a      	ldr	r2, [r3, #4]
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f022 0203 	bic.w	r2, r2, #3
 8010350:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010352:	68ba      	ldr	r2, [r7, #8]
 8010354:	2164      	movs	r1, #100	; 0x64
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	f000 f97e 	bl	8010658 <SPI_EndRxTransaction>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d002      	beq.n	8010368 <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2220      	movs	r2, #32
 8010366:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2200      	movs	r2, #0
 801036c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2201      	movs	r2, #1
 8010374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801037c:	2b00      	cmp	r3, #0
 801037e:	d004      	beq.n	801038a <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010384:	68f8      	ldr	r0, [r7, #12]
 8010386:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010388:	e003      	b.n	8010392 <SPI_DMAReceiveCplt+0x82>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801038e:	68f8      	ldr	r0, [r7, #12]
 8010390:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010392:	3710      	adds	r7, #16
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103a4:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80103a6:	f7f7 fb3d 	bl	8007a24 <HAL_GetTick>
 80103aa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f003 0320 	and.w	r3, r3, #32
 80103b6:	2b20      	cmp	r3, #32
 80103b8:	d031      	beq.n	801041e <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	685a      	ldr	r2, [r3, #4]
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f022 0220 	bic.w	r2, r2, #32
 80103c8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	2164      	movs	r1, #100	; 0x64
 80103ce:	68f8      	ldr	r0, [r7, #12]
 80103d0:	f000 f99a 	bl	8010708 <SPI_EndRxTxTransaction>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d005      	beq.n	80103e6 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103de:	f043 0220 	orr.w	r2, r3, #32
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	685a      	ldr	r2, [r3, #4]
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f022 0203 	bic.w	r2, r2, #3
 80103f4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2200      	movs	r2, #0
 80103fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2200      	movs	r2, #0
 8010400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2201      	movs	r2, #1
 8010408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010410:	2b00      	cmp	r3, #0
 8010412:	d004      	beq.n	801041e <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801041c:	e003      	b.n	8010426 <SPI_DMATransmitReceiveCplt+0x8e>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010426:	3710      	adds	r7, #16
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b084      	sub	sp, #16
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010438:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801043e:	68f8      	ldr	r0, [r7, #12]
 8010440:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010442:	bf00      	nop
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b084      	sub	sp, #16
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010456:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010460:	bf00      	nop
 8010462:	3710      	adds	r7, #16
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b084      	sub	sp, #16
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010474:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	685a      	ldr	r2, [r3, #4]
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f022 0203 	bic.w	r2, r2, #3
 8010484:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801048a:	f043 0210 	orr.w	r2, r3, #16
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	2201      	movs	r2, #1
 8010496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801049e:	68f8      	ldr	r0, [r7, #12]
 80104a0:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80104a2:	bf00      	nop
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80104aa:	b580      	push	{r7, lr}
 80104ac:	b084      	sub	sp, #16
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	60f8      	str	r0, [r7, #12]
 80104b2:	60b9      	str	r1, [r7, #8]
 80104b4:	603b      	str	r3, [r7, #0]
 80104b6:	4613      	mov	r3, r2
 80104b8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80104ba:	e04c      	b.n	8010556 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104c2:	d048      	beq.n	8010556 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80104c4:	f7f7 faae 	bl	8007a24 <HAL_GetTick>
 80104c8:	4602      	mov	r2, r0
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	683a      	ldr	r2, [r7, #0]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d902      	bls.n	80104da <SPI_WaitFlagStateUntilTimeout+0x30>
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d13d      	bne.n	8010556 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	685a      	ldr	r2, [r3, #4]
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80104e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80104f2:	d111      	bne.n	8010518 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	689b      	ldr	r3, [r3, #8]
 80104f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104fc:	d004      	beq.n	8010508 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	689b      	ldr	r3, [r3, #8]
 8010502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010506:	d107      	bne.n	8010518 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801051c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010520:	d10f      	bne.n	8010542 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	681a      	ldr	r2, [r3, #0]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010530:	601a      	str	r2, [r3, #0]
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	681a      	ldr	r2, [r3, #0]
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	2201      	movs	r2, #1
 8010546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2200      	movs	r2, #0
 801054e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010552:	2303      	movs	r3, #3
 8010554:	e00f      	b.n	8010576 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	689a      	ldr	r2, [r3, #8]
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	4013      	ands	r3, r2
 8010560:	68ba      	ldr	r2, [r7, #8]
 8010562:	429a      	cmp	r2, r3
 8010564:	bf0c      	ite	eq
 8010566:	2301      	moveq	r3, #1
 8010568:	2300      	movne	r3, #0
 801056a:	b2db      	uxtb	r3, r3
 801056c:	461a      	mov	r2, r3
 801056e:	79fb      	ldrb	r3, [r7, #7]
 8010570:	429a      	cmp	r2, r3
 8010572:	d1a3      	bne.n	80104bc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3710      	adds	r7, #16
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}

0801057e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801057e:	b580      	push	{r7, lr}
 8010580:	b084      	sub	sp, #16
 8010582:	af00      	add	r7, sp, #0
 8010584:	60f8      	str	r0, [r7, #12]
 8010586:	60b9      	str	r1, [r7, #8]
 8010588:	607a      	str	r2, [r7, #4]
 801058a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 801058c:	e057      	b.n	801063e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010594:	d106      	bne.n	80105a4 <SPI_WaitFifoStateUntilTimeout+0x26>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d103      	bne.n	80105a4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	330c      	adds	r3, #12
 80105a2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105aa:	d048      	beq.n	801063e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80105ac:	f7f7 fa3a 	bl	8007a24 <HAL_GetTick>
 80105b0:	4602      	mov	r2, r0
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	683a      	ldr	r2, [r7, #0]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d902      	bls.n	80105c2 <SPI_WaitFifoStateUntilTimeout+0x44>
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d13d      	bne.n	801063e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	685a      	ldr	r2, [r3, #4]
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80105d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80105da:	d111      	bne.n	8010600 <SPI_WaitFifoStateUntilTimeout+0x82>
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105e4:	d004      	beq.n	80105f0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	689b      	ldr	r3, [r3, #8]
 80105ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80105ee:	d107      	bne.n	8010600 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010608:	d10f      	bne.n	801062a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	681a      	ldr	r2, [r3, #0]
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010618:	601a      	str	r2, [r3, #0]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2201      	movs	r2, #1
 801062e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2200      	movs	r2, #0
 8010636:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801063a:	2303      	movs	r3, #3
 801063c:	e008      	b.n	8010650 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	689a      	ldr	r2, [r3, #8]
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	4013      	ands	r3, r2
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	429a      	cmp	r2, r3
 801064c:	d19f      	bne.n	801058e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b086      	sub	sp, #24
 801065c:	af02      	add	r7, sp, #8
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801066c:	d111      	bne.n	8010692 <SPI_EndRxTransaction+0x3a>
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	689b      	ldr	r3, [r3, #8]
 8010672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010676:	d004      	beq.n	8010682 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	689b      	ldr	r3, [r3, #8]
 801067c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010680:	d107      	bne.n	8010692 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010690:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	2200      	movs	r2, #0
 801069a:	2180      	movs	r1, #128	; 0x80
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f7ff ff04 	bl	80104aa <SPI_WaitFlagStateUntilTimeout>
 80106a2:	4603      	mov	r3, r0
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d007      	beq.n	80106b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106ac:	f043 0220 	orr.w	r2, r3, #32
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80106b4:	2303      	movs	r3, #3
 80106b6:	e023      	b.n	8010700 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	685b      	ldr	r3, [r3, #4]
 80106bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80106c0:	d11d      	bne.n	80106fe <SPI_EndRxTransaction+0xa6>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106ca:	d004      	beq.n	80106d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	689b      	ldr	r3, [r3, #8]
 80106d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106d4:	d113      	bne.n	80106fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	2200      	movs	r2, #0
 80106de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80106e2:	68f8      	ldr	r0, [r7, #12]
 80106e4:	f7ff ff4b 	bl	801057e <SPI_WaitFifoStateUntilTimeout>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d007      	beq.n	80106fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106f2:	f043 0220 	orr.w	r2, r3, #32
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80106fa:	2303      	movs	r3, #3
 80106fc:	e000      	b.n	8010700 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b086      	sub	sp, #24
 801070c:	af02      	add	r7, sp, #8
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	2200      	movs	r2, #0
 801071c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010720:	68f8      	ldr	r0, [r7, #12]
 8010722:	f7ff ff2c 	bl	801057e <SPI_WaitFifoStateUntilTimeout>
 8010726:	4603      	mov	r3, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	d007      	beq.n	801073c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010730:	f043 0220 	orr.w	r2, r3, #32
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010738:	2303      	movs	r3, #3
 801073a:	e027      	b.n	801078c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	2200      	movs	r2, #0
 8010744:	2180      	movs	r1, #128	; 0x80
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f7ff feaf 	bl	80104aa <SPI_WaitFlagStateUntilTimeout>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d007      	beq.n	8010762 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010756:	f043 0220 	orr.w	r2, r3, #32
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801075e:	2303      	movs	r3, #3
 8010760:	e014      	b.n	801078c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2200      	movs	r2, #0
 801076a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f7ff ff05 	bl	801057e <SPI_WaitFifoStateUntilTimeout>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d007      	beq.n	801078a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801077e:	f043 0220 	orr.w	r2, r3, #32
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010786:	2303      	movs	r3, #3
 8010788:	e000      	b.n	801078c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	3710      	adds	r7, #16
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d101      	bne.n	80107a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80107a2:	2301      	movs	r3, #1
 80107a4:	e01d      	b.n	80107e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d106      	bne.n	80107c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2200      	movs	r2, #0
 80107b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f000 f815 	bl	80107ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2202      	movs	r2, #2
 80107c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	3304      	adds	r3, #4
 80107d0:	4619      	mov	r1, r3
 80107d2:	4610      	mov	r0, r2
 80107d4:	f000 f9fc 	bl	8010bd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2201      	movs	r2, #1
 80107dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80107e0:	2300      	movs	r3, #0
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3708      	adds	r7, #8
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80107ea:	b480      	push	{r7}
 80107ec:	b083      	sub	sp, #12
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80107f2:	bf00      	nop
 80107f4:	370c      	adds	r7, #12
 80107f6:	46bd      	mov	sp, r7
 80107f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fc:	4770      	bx	lr
	...

08010800 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2202      	movs	r2, #2
 801080c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	689a      	ldr	r2, [r3, #8]
 8010816:	4b0e      	ldr	r3, [pc, #56]	; (8010850 <HAL_TIM_Base_Start+0x50>)
 8010818:	4013      	ands	r3, r2
 801081a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2b06      	cmp	r3, #6
 8010820:	d00b      	beq.n	801083a <HAL_TIM_Base_Start+0x3a>
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010828:	d007      	beq.n	801083a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f042 0201 	orr.w	r2, r2, #1
 8010838:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2201      	movs	r2, #1
 801083e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8010842:	2300      	movs	r3, #0
}
 8010844:	4618      	mov	r0, r3
 8010846:	3714      	adds	r7, #20
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr
 8010850:	00010007 	.word	0x00010007

08010854 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8010854:	b480      	push	{r7}
 8010856:	b083      	sub	sp, #12
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2202      	movs	r2, #2
 8010860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	6a1a      	ldr	r2, [r3, #32]
 801086a:	f241 1311 	movw	r3, #4369	; 0x1111
 801086e:	4013      	ands	r3, r2
 8010870:	2b00      	cmp	r3, #0
 8010872:	d10f      	bne.n	8010894 <HAL_TIM_Base_Stop+0x40>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	6a1a      	ldr	r2, [r3, #32]
 801087a:	f240 4344 	movw	r3, #1092	; 0x444
 801087e:	4013      	ands	r3, r2
 8010880:	2b00      	cmp	r3, #0
 8010882:	d107      	bne.n	8010894 <HAL_TIM_Base_Stop+0x40>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f022 0201 	bic.w	r2, r2, #1
 8010892:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2201      	movs	r2, #1
 8010898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801089c:	2300      	movs	r3, #0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	370c      	adds	r7, #12
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr
	...

080108ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b085      	sub	sp, #20
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	68da      	ldr	r2, [r3, #12]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f042 0201 	orr.w	r2, r2, #1
 80108c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	689a      	ldr	r2, [r3, #8]
 80108ca:	4b0c      	ldr	r3, [pc, #48]	; (80108fc <HAL_TIM_Base_Start_IT+0x50>)
 80108cc:	4013      	ands	r3, r2
 80108ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2b06      	cmp	r3, #6
 80108d4:	d00b      	beq.n	80108ee <HAL_TIM_Base_Start_IT+0x42>
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108dc:	d007      	beq.n	80108ee <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f042 0201 	orr.w	r2, r2, #1
 80108ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3714      	adds	r7, #20
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr
 80108fc:	00010007 	.word	0x00010007

08010900 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	68da      	ldr	r2, [r3, #12]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f022 0201 	bic.w	r2, r2, #1
 8010916:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	6a1a      	ldr	r2, [r3, #32]
 801091e:	f241 1311 	movw	r3, #4369	; 0x1111
 8010922:	4013      	ands	r3, r2
 8010924:	2b00      	cmp	r3, #0
 8010926:	d10f      	bne.n	8010948 <HAL_TIM_Base_Stop_IT+0x48>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	6a1a      	ldr	r2, [r3, #32]
 801092e:	f240 4344 	movw	r3, #1092	; 0x444
 8010932:	4013      	ands	r3, r2
 8010934:	2b00      	cmp	r3, #0
 8010936:	d107      	bne.n	8010948 <HAL_TIM_Base_Stop_IT+0x48>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	681a      	ldr	r2, [r3, #0]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f022 0201 	bic.w	r2, r2, #1
 8010946:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	370c      	adds	r7, #12
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr

08010956 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010956:	b580      	push	{r7, lr}
 8010958:	b082      	sub	sp, #8
 801095a:	af00      	add	r7, sp, #0
 801095c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	691b      	ldr	r3, [r3, #16]
 8010964:	f003 0302 	and.w	r3, r3, #2
 8010968:	2b02      	cmp	r3, #2
 801096a:	d122      	bne.n	80109b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	f003 0302 	and.w	r3, r3, #2
 8010976:	2b02      	cmp	r3, #2
 8010978:	d11b      	bne.n	80109b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f06f 0202 	mvn.w	r2, #2
 8010982:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2201      	movs	r2, #1
 8010988:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	699b      	ldr	r3, [r3, #24]
 8010990:	f003 0303 	and.w	r3, r3, #3
 8010994:	2b00      	cmp	r3, #0
 8010996:	d003      	beq.n	80109a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7f6 fe4d 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 801099e:	e005      	b.n	80109ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f000 f8f7 	bl	8010b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f000 f8fe 	bl	8010ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2200      	movs	r2, #0
 80109b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	691b      	ldr	r3, [r3, #16]
 80109b8:	f003 0304 	and.w	r3, r3, #4
 80109bc:	2b04      	cmp	r3, #4
 80109be:	d122      	bne.n	8010a06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	68db      	ldr	r3, [r3, #12]
 80109c6:	f003 0304 	and.w	r3, r3, #4
 80109ca:	2b04      	cmp	r3, #4
 80109cc:	d11b      	bne.n	8010a06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f06f 0204 	mvn.w	r2, #4
 80109d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2202      	movs	r2, #2
 80109dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	699b      	ldr	r3, [r3, #24]
 80109e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d003      	beq.n	80109f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7f6 fe23 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 80109f2:	e005      	b.n	8010a00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 f8cd 	bl	8010b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f000 f8d4 	bl	8010ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	691b      	ldr	r3, [r3, #16]
 8010a0c:	f003 0308 	and.w	r3, r3, #8
 8010a10:	2b08      	cmp	r3, #8
 8010a12:	d122      	bne.n	8010a5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	f003 0308 	and.w	r3, r3, #8
 8010a1e:	2b08      	cmp	r3, #8
 8010a20:	d11b      	bne.n	8010a5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	f06f 0208 	mvn.w	r2, #8
 8010a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2204      	movs	r2, #4
 8010a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	69db      	ldr	r3, [r3, #28]
 8010a38:	f003 0303 	and.w	r3, r3, #3
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d003      	beq.n	8010a48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7f6 fdf9 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 8010a46:	e005      	b.n	8010a54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f000 f8a3 	bl	8010b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f000 f8aa 	bl	8010ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2200      	movs	r2, #0
 8010a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	691b      	ldr	r3, [r3, #16]
 8010a60:	f003 0310 	and.w	r3, r3, #16
 8010a64:	2b10      	cmp	r3, #16
 8010a66:	d122      	bne.n	8010aae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	f003 0310 	and.w	r3, r3, #16
 8010a72:	2b10      	cmp	r3, #16
 8010a74:	d11b      	bne.n	8010aae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f06f 0210 	mvn.w	r2, #16
 8010a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2208      	movs	r2, #8
 8010a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	69db      	ldr	r3, [r3, #28]
 8010a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d003      	beq.n	8010a9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f7f6 fdcf 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 8010a9a:	e005      	b.n	8010aa8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 f879 	bl	8010b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 f880 	bl	8010ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	f003 0301 	and.w	r3, r3, #1
 8010ab8:	2b01      	cmp	r3, #1
 8010aba:	d10e      	bne.n	8010ada <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	68db      	ldr	r3, [r3, #12]
 8010ac2:	f003 0301 	and.w	r3, r3, #1
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d107      	bne.n	8010ada <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f06f 0201 	mvn.w	r2, #1
 8010ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7f6 fd9d 	bl	8007614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	691b      	ldr	r3, [r3, #16]
 8010ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ae4:	2b80      	cmp	r3, #128	; 0x80
 8010ae6:	d10e      	bne.n	8010b06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010af2:	2b80      	cmp	r3, #128	; 0x80
 8010af4:	d107      	bne.n	8010b06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f000 f991 	bl	8010e28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	691b      	ldr	r3, [r3, #16]
 8010b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b14:	d10e      	bne.n	8010b34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b20:	2b80      	cmp	r3, #128	; 0x80
 8010b22:	d107      	bne.n	8010b34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 f984 	bl	8010e3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b3e:	2b40      	cmp	r3, #64	; 0x40
 8010b40:	d10e      	bne.n	8010b60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	68db      	ldr	r3, [r3, #12]
 8010b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b4c:	2b40      	cmp	r3, #64	; 0x40
 8010b4e:	d107      	bne.n	8010b60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 f82e 	bl	8010bbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	691b      	ldr	r3, [r3, #16]
 8010b66:	f003 0320 	and.w	r3, r3, #32
 8010b6a:	2b20      	cmp	r3, #32
 8010b6c:	d10e      	bne.n	8010b8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	f003 0320 	and.w	r3, r3, #32
 8010b78:	2b20      	cmp	r3, #32
 8010b7a:	d107      	bne.n	8010b8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f06f 0220 	mvn.w	r2, #32
 8010b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 f944 	bl	8010e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010b8c:	bf00      	nop
 8010b8e:	3708      	adds	r7, #8
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}

08010b94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010b9c:	bf00      	nop
 8010b9e:	370c      	adds	r7, #12
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010bb0:	bf00      	nop
 8010bb2:	370c      	adds	r7, #12
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr

08010bbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b083      	sub	sp, #12
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010bc4:	bf00      	nop
 8010bc6:	370c      	adds	r7, #12
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bce:	4770      	bx	lr

08010bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b085      	sub	sp, #20
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4a40      	ldr	r2, [pc, #256]	; (8010ce4 <TIM_Base_SetConfig+0x114>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d013      	beq.n	8010c10 <TIM_Base_SetConfig+0x40>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bee:	d00f      	beq.n	8010c10 <TIM_Base_SetConfig+0x40>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4a3d      	ldr	r2, [pc, #244]	; (8010ce8 <TIM_Base_SetConfig+0x118>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d00b      	beq.n	8010c10 <TIM_Base_SetConfig+0x40>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	4a3c      	ldr	r2, [pc, #240]	; (8010cec <TIM_Base_SetConfig+0x11c>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d007      	beq.n	8010c10 <TIM_Base_SetConfig+0x40>
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4a3b      	ldr	r2, [pc, #236]	; (8010cf0 <TIM_Base_SetConfig+0x120>)
 8010c04:	4293      	cmp	r3, r2
 8010c06:	d003      	beq.n	8010c10 <TIM_Base_SetConfig+0x40>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	4a3a      	ldr	r2, [pc, #232]	; (8010cf4 <TIM_Base_SetConfig+0x124>)
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	d108      	bne.n	8010c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	68fa      	ldr	r2, [r7, #12]
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4a2f      	ldr	r2, [pc, #188]	; (8010ce4 <TIM_Base_SetConfig+0x114>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d01f      	beq.n	8010c6a <TIM_Base_SetConfig+0x9a>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c30:	d01b      	beq.n	8010c6a <TIM_Base_SetConfig+0x9a>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4a2c      	ldr	r2, [pc, #176]	; (8010ce8 <TIM_Base_SetConfig+0x118>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d017      	beq.n	8010c6a <TIM_Base_SetConfig+0x9a>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4a2b      	ldr	r2, [pc, #172]	; (8010cec <TIM_Base_SetConfig+0x11c>)
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d013      	beq.n	8010c6a <TIM_Base_SetConfig+0x9a>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4a2a      	ldr	r2, [pc, #168]	; (8010cf0 <TIM_Base_SetConfig+0x120>)
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d00f      	beq.n	8010c6a <TIM_Base_SetConfig+0x9a>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	4a29      	ldr	r2, [pc, #164]	; (8010cf4 <TIM_Base_SetConfig+0x124>)
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d00b      	beq.n	8010c6a <TIM_Base_SetConfig+0x9a>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4a28      	ldr	r2, [pc, #160]	; (8010cf8 <TIM_Base_SetConfig+0x128>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d007      	beq.n	8010c6a <TIM_Base_SetConfig+0x9a>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4a27      	ldr	r2, [pc, #156]	; (8010cfc <TIM_Base_SetConfig+0x12c>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d003      	beq.n	8010c6a <TIM_Base_SetConfig+0x9a>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	4a26      	ldr	r2, [pc, #152]	; (8010d00 <TIM_Base_SetConfig+0x130>)
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d108      	bne.n	8010c7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	68db      	ldr	r3, [r3, #12]
 8010c76:	68fa      	ldr	r2, [r7, #12]
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	695b      	ldr	r3, [r3, #20]
 8010c86:	4313      	orrs	r3, r2
 8010c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	689a      	ldr	r2, [r3, #8]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	681a      	ldr	r2, [r3, #0]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	4a10      	ldr	r2, [pc, #64]	; (8010ce4 <TIM_Base_SetConfig+0x114>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d00f      	beq.n	8010cc8 <TIM_Base_SetConfig+0xf8>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4a12      	ldr	r2, [pc, #72]	; (8010cf4 <TIM_Base_SetConfig+0x124>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d00b      	beq.n	8010cc8 <TIM_Base_SetConfig+0xf8>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4a11      	ldr	r2, [pc, #68]	; (8010cf8 <TIM_Base_SetConfig+0x128>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d007      	beq.n	8010cc8 <TIM_Base_SetConfig+0xf8>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	4a10      	ldr	r2, [pc, #64]	; (8010cfc <TIM_Base_SetConfig+0x12c>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d003      	beq.n	8010cc8 <TIM_Base_SetConfig+0xf8>
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	4a0f      	ldr	r2, [pc, #60]	; (8010d00 <TIM_Base_SetConfig+0x130>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d103      	bne.n	8010cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	691a      	ldr	r2, [r3, #16]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	615a      	str	r2, [r3, #20]
}
 8010cd6:	bf00      	nop
 8010cd8:	3714      	adds	r7, #20
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce0:	4770      	bx	lr
 8010ce2:	bf00      	nop
 8010ce4:	40012c00 	.word	0x40012c00
 8010ce8:	40000400 	.word	0x40000400
 8010cec:	40000800 	.word	0x40000800
 8010cf0:	40000c00 	.word	0x40000c00
 8010cf4:	40013400 	.word	0x40013400
 8010cf8:	40014000 	.word	0x40014000
 8010cfc:	40014400 	.word	0x40014400
 8010d00:	40014800 	.word	0x40014800

08010d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b085      	sub	sp, #20
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d101      	bne.n	8010d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d18:	2302      	movs	r3, #2
 8010d1a:	e068      	b.n	8010dee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2201      	movs	r2, #1
 8010d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2202      	movs	r2, #2
 8010d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	685b      	ldr	r3, [r3, #4]
 8010d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	689b      	ldr	r3, [r3, #8]
 8010d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a2e      	ldr	r2, [pc, #184]	; (8010dfc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d004      	beq.n	8010d50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4a2d      	ldr	r2, [pc, #180]	; (8010e00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	d108      	bne.n	8010d62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010d56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	68fa      	ldr	r2, [r7, #12]
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	68fa      	ldr	r2, [r7, #12]
 8010d70:	4313      	orrs	r3, r2
 8010d72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	68fa      	ldr	r2, [r7, #12]
 8010d7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4a1e      	ldr	r2, [pc, #120]	; (8010dfc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d01d      	beq.n	8010dc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d8e:	d018      	beq.n	8010dc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4a1b      	ldr	r2, [pc, #108]	; (8010e04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d013      	beq.n	8010dc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	4a1a      	ldr	r2, [pc, #104]	; (8010e08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d00e      	beq.n	8010dc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4a18      	ldr	r2, [pc, #96]	; (8010e0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d009      	beq.n	8010dc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	4a13      	ldr	r2, [pc, #76]	; (8010e00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d004      	beq.n	8010dc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	4a14      	ldr	r2, [pc, #80]	; (8010e10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d10c      	bne.n	8010ddc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	68ba      	ldr	r2, [r7, #8]
 8010dd0:	4313      	orrs	r3, r2
 8010dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	68ba      	ldr	r2, [r7, #8]
 8010dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2201      	movs	r2, #1
 8010de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2200      	movs	r2, #0
 8010de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010dec:	2300      	movs	r3, #0
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3714      	adds	r7, #20
 8010df2:	46bd      	mov	sp, r7
 8010df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop
 8010dfc:	40012c00 	.word	0x40012c00
 8010e00:	40013400 	.word	0x40013400
 8010e04:	40000400 	.word	0x40000400
 8010e08:	40000800 	.word	0x40000800
 8010e0c:	40000c00 	.word	0x40000c00
 8010e10:	40014000 	.word	0x40014000

08010e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010e1c:	bf00      	nop
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010e30:	bf00      	nop
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b083      	sub	sp, #12
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010e44:	bf00      	nop
 8010e46:	370c      	adds	r7, #12
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr

08010e50 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010e50:	b084      	sub	sp, #16
 8010e52:	b480      	push	{r7}
 8010e54:	b085      	sub	sp, #20
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	6078      	str	r0, [r7, #4]
 8010e5a:	f107 001c 	add.w	r0, r7, #28
 8010e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010e62:	2300      	movs	r3, #0
 8010e64:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8010e66:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010e68:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010e6a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8010e6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8010e72:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8010e76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010e78:	68fa      	ldr	r2, [r7, #12]
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	685a      	ldr	r2, [r3, #4]
 8010e82:	4b07      	ldr	r3, [pc, #28]	; (8010ea0 <SDMMC_Init+0x50>)
 8010e84:	4013      	ands	r3, r2
 8010e86:	68fa      	ldr	r2, [r7, #12]
 8010e88:	431a      	orrs	r2, r3
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010e8e:	2300      	movs	r3, #0
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	3714      	adds	r7, #20
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	b004      	add	sp, #16
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop
 8010ea0:	ffc02c00 	.word	0xffc02c00

08010ea4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	370c      	adds	r7, #12
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr

08010ebe <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010ebe:	b480      	push	{r7}
 8010ec0:	b083      	sub	sp, #12
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
 8010ec6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ed2:	2300      	movs	r3, #0
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f043 0203 	orr.w	r2, r3, #3
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010ef4:	2002      	movs	r0, #2
 8010ef6:	f7f6 fda1 	bl	8007a3c <HAL_Delay>

  return HAL_OK;
 8010efa:	2300      	movs	r3, #0
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b083      	sub	sp, #12
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f003 0303 	and.w	r3, r3, #3
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	370c      	adds	r7, #12
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010f20:	b480      	push	{r7}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f3e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010f44:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010f4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f4c:	68fa      	ldr	r2, [r7, #12]
 8010f4e:	4313      	orrs	r3, r2
 8010f50:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	68da      	ldr	r2, [r3, #12]
 8010f56:	4b06      	ldr	r3, [pc, #24]	; (8010f70 <SDMMC_SendCommand+0x50>)
 8010f58:	4013      	ands	r3, r2
 8010f5a:	68fa      	ldr	r2, [r7, #12]
 8010f5c:	431a      	orrs	r2, r3
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010f62:	2300      	movs	r3, #0
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3714      	adds	r7, #20
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr
 8010f70:	fffee0c0 	.word	0xfffee0c0

08010f74 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b083      	sub	sp, #12
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	691b      	ldr	r3, [r3, #16]
 8010f80:	b2db      	uxtb	r3, r3
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	370c      	adds	r7, #12
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr

08010f8e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010f8e:	b480      	push	{r7}
 8010f90:	b085      	sub	sp, #20
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	6078      	str	r0, [r7, #4]
 8010f96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	3314      	adds	r3, #20
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	681b      	ldr	r3, [r3, #0]
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3714      	adds	r7, #20
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b085      	sub	sp, #20
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	685a      	ldr	r2, [r3, #4]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fda:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010fe0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010fe6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fe8:	68fa      	ldr	r2, [r7, #12]
 8010fea:	4313      	orrs	r3, r2
 8010fec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	431a      	orrs	r2, r3
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010ffe:	2300      	movs	r3, #0

}
 8011000:	4618      	mov	r0, r3
 8011002:	3714      	adds	r7, #20
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr

0801100c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b088      	sub	sp, #32
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801101a:	2310      	movs	r3, #16
 801101c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801101e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011024:	2300      	movs	r3, #0
 8011026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801102c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801102e:	f107 0308 	add.w	r3, r7, #8
 8011032:	4619      	mov	r1, r3
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f7ff ff73 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801103a:	f241 3288 	movw	r2, #5000	; 0x1388
 801103e:	2110      	movs	r1, #16
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 faa5 	bl	8011590 <SDMMC_GetCmdResp1>
 8011046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011048:	69fb      	ldr	r3, [r7, #28]
}
 801104a:	4618      	mov	r0, r3
 801104c:	3720      	adds	r7, #32
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}

08011052 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011052:	b580      	push	{r7, lr}
 8011054:	b088      	sub	sp, #32
 8011056:	af00      	add	r7, sp, #0
 8011058:	6078      	str	r0, [r7, #4]
 801105a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011060:	2311      	movs	r3, #17
 8011062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801106a:	2300      	movs	r3, #0
 801106c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801106e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011074:	f107 0308 	add.w	r3, r7, #8
 8011078:	4619      	mov	r1, r3
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f7ff ff50 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011080:	f241 3288 	movw	r2, #5000	; 0x1388
 8011084:	2111      	movs	r1, #17
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 fa82 	bl	8011590 <SDMMC_GetCmdResp1>
 801108c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801108e:	69fb      	ldr	r3, [r7, #28]
}
 8011090:	4618      	mov	r0, r3
 8011092:	3720      	adds	r7, #32
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b088      	sub	sp, #32
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80110a6:	2312      	movs	r3, #18
 80110a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110b0:	2300      	movs	r3, #0
 80110b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110ba:	f107 0308 	add.w	r3, r7, #8
 80110be:	4619      	mov	r1, r3
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7ff ff2d 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80110c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80110ca:	2112      	movs	r1, #18
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f000 fa5f 	bl	8011590 <SDMMC_GetCmdResp1>
 80110d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110d4:	69fb      	ldr	r3, [r7, #28]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3720      	adds	r7, #32
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b088      	sub	sp, #32
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80110ec:	2318      	movs	r3, #24
 80110ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110f6:	2300      	movs	r3, #0
 80110f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011100:	f107 0308 	add.w	r3, r7, #8
 8011104:	4619      	mov	r1, r3
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f7ff ff0a 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011110:	2118      	movs	r1, #24
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 fa3c 	bl	8011590 <SDMMC_GetCmdResp1>
 8011118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801111a:	69fb      	ldr	r3, [r7, #28]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3720      	adds	r7, #32
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b088      	sub	sp, #32
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011132:	2319      	movs	r3, #25
 8011134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011136:	f44f 7380 	mov.w	r3, #256	; 0x100
 801113a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801113c:	2300      	movs	r3, #0
 801113e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011146:	f107 0308 	add.w	r3, r7, #8
 801114a:	4619      	mov	r1, r3
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f7ff fee7 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011152:	f241 3288 	movw	r2, #5000	; 0x1388
 8011156:	2119      	movs	r1, #25
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f000 fa19 	bl	8011590 <SDMMC_GetCmdResp1>
 801115e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011160:	69fb      	ldr	r3, [r7, #28]
}
 8011162:	4618      	mov	r0, r3
 8011164:	3720      	adds	r7, #32
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
	...

0801116c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b088      	sub	sp, #32
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011174:	2300      	movs	r3, #0
 8011176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011178:	230c      	movs	r3, #12
 801117a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801117c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011182:	2300      	movs	r3, #0
 8011184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801118a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111a4:	f107 0308 	add.w	r3, r7, #8
 80111a8:	4619      	mov	r1, r3
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f7ff feb8 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80111b0:	4a08      	ldr	r2, [pc, #32]	; (80111d4 <SDMMC_CmdStopTransfer+0x68>)
 80111b2:	210c      	movs	r1, #12
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f000 f9eb 	bl	8011590 <SDMMC_GetCmdResp1>
 80111ba:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80111c8:	69fb      	ldr	r3, [r7, #28]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3720      	adds	r7, #32
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	05f5e100 	.word	0x05f5e100

080111d8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b08a      	sub	sp, #40	; 0x28
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80111e8:	2307      	movs	r3, #7
 80111ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111f0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111f2:	2300      	movs	r3, #0
 80111f4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111fa:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111fc:	f107 0310 	add.w	r3, r7, #16
 8011200:	4619      	mov	r1, r3
 8011202:	68f8      	ldr	r0, [r7, #12]
 8011204:	f7ff fe8c 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011208:	f241 3288 	movw	r2, #5000	; 0x1388
 801120c:	2107      	movs	r1, #7
 801120e:	68f8      	ldr	r0, [r7, #12]
 8011210:	f000 f9be 	bl	8011590 <SDMMC_GetCmdResp1>
 8011214:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011218:	4618      	mov	r0, r3
 801121a:	3728      	adds	r7, #40	; 0x28
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b088      	sub	sp, #32
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011228:	2300      	movs	r3, #0
 801122a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801122c:	2300      	movs	r3, #0
 801122e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011230:	2300      	movs	r3, #0
 8011232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011234:	2300      	movs	r3, #0
 8011236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801123c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801123e:	f107 0308 	add.w	r3, r7, #8
 8011242:	4619      	mov	r1, r3
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f7ff fe6b 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 f976 	bl	801153c <SDMMC_GetCmdError>
 8011250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011252:	69fb      	ldr	r3, [r7, #28]
}
 8011254:	4618      	mov	r0, r3
 8011256:	3720      	adds	r7, #32
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b088      	sub	sp, #32
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011264:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801126a:	2308      	movs	r3, #8
 801126c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801126e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011274:	2300      	movs	r3, #0
 8011276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801127c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801127e:	f107 0308 	add.w	r3, r7, #8
 8011282:	4619      	mov	r1, r3
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f7ff fe4b 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f000 fb6a 	bl	8011964 <SDMMC_GetCmdResp7>
 8011290:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011292:	69fb      	ldr	r3, [r7, #28]
}
 8011294:	4618      	mov	r0, r3
 8011296:	3720      	adds	r7, #32
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b088      	sub	sp, #32
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80112aa:	2337      	movs	r3, #55	; 0x37
 80112ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112b4:	2300      	movs	r3, #0
 80112b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112be:	f107 0308 	add.w	r3, r7, #8
 80112c2:	4619      	mov	r1, r3
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f7ff fe2b 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80112ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80112ce:	2137      	movs	r1, #55	; 0x37
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f000 f95d 	bl	8011590 <SDMMC_GetCmdResp1>
 80112d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112d8:	69fb      	ldr	r3, [r7, #28]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3720      	adds	r7, #32
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}

080112e2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80112e2:	b580      	push	{r7, lr}
 80112e4:	b088      	sub	sp, #32
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
 80112ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80112f0:	2329      	movs	r3, #41	; 0x29
 80112f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112fa:	2300      	movs	r3, #0
 80112fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011302:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011304:	f107 0308 	add.w	r3, r7, #8
 8011308:	4619      	mov	r1, r3
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f7ff fe08 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f000 fa75 	bl	8011800 <SDMMC_GetCmdResp3>
 8011316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011318:	69fb      	ldr	r3, [r7, #28]
}
 801131a:	4618      	mov	r0, r3
 801131c:	3720      	adds	r7, #32
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}

08011322 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011322:	b580      	push	{r7, lr}
 8011324:	b088      	sub	sp, #32
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]
 801132a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011330:	2306      	movs	r3, #6
 8011332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801133a:	2300      	movs	r3, #0
 801133c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011344:	f107 0308 	add.w	r3, r7, #8
 8011348:	4619      	mov	r1, r3
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7ff fde8 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011350:	f241 3288 	movw	r2, #5000	; 0x1388
 8011354:	2106      	movs	r1, #6
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f000 f91a 	bl	8011590 <SDMMC_GetCmdResp1>
 801135c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801135e:	69fb      	ldr	r3, [r7, #28]
}
 8011360:	4618      	mov	r0, r3
 8011362:	3720      	adds	r7, #32
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}

08011368 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b088      	sub	sp, #32
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011370:	2300      	movs	r3, #0
 8011372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011374:	2333      	movs	r3, #51	; 0x33
 8011376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011378:	f44f 7380 	mov.w	r3, #256	; 0x100
 801137c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801137e:	2300      	movs	r3, #0
 8011380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011386:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011388:	f107 0308 	add.w	r3, r7, #8
 801138c:	4619      	mov	r1, r3
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f7ff fdc6 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011394:	f241 3288 	movw	r2, #5000	; 0x1388
 8011398:	2133      	movs	r1, #51	; 0x33
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f000 f8f8 	bl	8011590 <SDMMC_GetCmdResp1>
 80113a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113a2:	69fb      	ldr	r3, [r7, #28]
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3720      	adds	r7, #32
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b088      	sub	sp, #32
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80113b4:	2300      	movs	r3, #0
 80113b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80113b8:	2302      	movs	r3, #2
 80113ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80113bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80113c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113c2:	2300      	movs	r3, #0
 80113c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113cc:	f107 0308 	add.w	r3, r7, #8
 80113d0:	4619      	mov	r1, r3
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f7ff fda4 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 f9c9 	bl	8011770 <SDMMC_GetCmdResp2>
 80113de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113e0:	69fb      	ldr	r3, [r7, #28]
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3720      	adds	r7, #32
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}

080113ea <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80113ea:	b580      	push	{r7, lr}
 80113ec:	b088      	sub	sp, #32
 80113ee:	af00      	add	r7, sp, #0
 80113f0:	6078      	str	r0, [r7, #4]
 80113f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80113f8:	2309      	movs	r3, #9
 80113fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80113fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011402:	2300      	movs	r3, #0
 8011404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801140a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801140c:	f107 0308 	add.w	r3, r7, #8
 8011410:	4619      	mov	r1, r3
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f7ff fd84 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 f9a9 	bl	8011770 <SDMMC_GetCmdResp2>
 801141e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011420:	69fb      	ldr	r3, [r7, #28]
}
 8011422:	4618      	mov	r0, r3
 8011424:	3720      	adds	r7, #32
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b088      	sub	sp, #32
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
 8011432:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011434:	2300      	movs	r3, #0
 8011436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011438:	2303      	movs	r3, #3
 801143a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801143c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011442:	2300      	movs	r3, #0
 8011444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801144a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801144c:	f107 0308 	add.w	r3, r7, #8
 8011450:	4619      	mov	r1, r3
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f7ff fd64 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011458:	683a      	ldr	r2, [r7, #0]
 801145a:	2103      	movs	r1, #3
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f000 fa0b 	bl	8011878 <SDMMC_GetCmdResp6>
 8011462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011464:	69fb      	ldr	r3, [r7, #28]
}
 8011466:	4618      	mov	r0, r3
 8011468:	3720      	adds	r7, #32
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}

0801146e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801146e:	b580      	push	{r7, lr}
 8011470:	b088      	sub	sp, #32
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
 8011476:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801147c:	230d      	movs	r3, #13
 801147e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011486:	2300      	movs	r3, #0
 8011488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801148e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011490:	f107 0308 	add.w	r3, r7, #8
 8011494:	4619      	mov	r1, r3
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f7ff fd42 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80114a0:	210d      	movs	r1, #13
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f000 f874 	bl	8011590 <SDMMC_GetCmdResp1>
 80114a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114aa:	69fb      	ldr	r3, [r7, #28]
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3720      	adds	r7, #32
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b088      	sub	sp, #32
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80114bc:	2300      	movs	r3, #0
 80114be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80114c0:	230d      	movs	r3, #13
 80114c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114ca:	2300      	movs	r3, #0
 80114cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114d4:	f107 0308 	add.w	r3, r7, #8
 80114d8:	4619      	mov	r1, r3
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f7ff fd20 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80114e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80114e4:	210d      	movs	r1, #13
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f000 f852 	bl	8011590 <SDMMC_GetCmdResp1>
 80114ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114ee:	69fb      	ldr	r3, [r7, #28]
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3720      	adds	r7, #32
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b088      	sub	sp, #32
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8011500:	2300      	movs	r3, #0
 8011502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8011504:	230b      	movs	r3, #11
 8011506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011508:	f44f 7380 	mov.w	r3, #256	; 0x100
 801150c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801150e:	2300      	movs	r3, #0
 8011510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011516:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011518:	f107 0308 	add.w	r3, r7, #8
 801151c:	4619      	mov	r1, r3
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f7ff fcfe 	bl	8010f20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8011524:	f241 3288 	movw	r2, #5000	; 0x1388
 8011528:	210b      	movs	r1, #11
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f000 f830 	bl	8011590 <SDMMC_GetCmdResp1>
 8011530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011532:	69fb      	ldr	r3, [r7, #28]
}
 8011534:	4618      	mov	r0, r3
 8011536:	3720      	adds	r7, #32
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801153c:	b490      	push	{r4, r7}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011544:	4b0f      	ldr	r3, [pc, #60]	; (8011584 <SDMMC_GetCmdError+0x48>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4a0f      	ldr	r2, [pc, #60]	; (8011588 <SDMMC_GetCmdError+0x4c>)
 801154a:	fba2 2303 	umull	r2, r3, r2, r3
 801154e:	0a5b      	lsrs	r3, r3, #9
 8011550:	f241 3288 	movw	r2, #5000	; 0x1388
 8011554:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011558:	4623      	mov	r3, r4
 801155a:	1e5c      	subs	r4, r3, #1
 801155c:	2b00      	cmp	r3, #0
 801155e:	d102      	bne.n	8011566 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011560:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011564:	e009      	b.n	801157a <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801156e:	2b00      	cmp	r3, #0
 8011570:	d0f2      	beq.n	8011558 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	4a05      	ldr	r2, [pc, #20]	; (801158c <SDMMC_GetCmdError+0x50>)
 8011576:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011578:	2300      	movs	r3, #0
}
 801157a:	4618      	mov	r0, r3
 801157c:	3708      	adds	r7, #8
 801157e:	46bd      	mov	sp, r7
 8011580:	bc90      	pop	{r4, r7}
 8011582:	4770      	bx	lr
 8011584:	20000038 	.word	0x20000038
 8011588:	10624dd3 	.word	0x10624dd3
 801158c:	002000c5 	.word	0x002000c5

08011590 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011590:	b590      	push	{r4, r7, lr}
 8011592:	b087      	sub	sp, #28
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	460b      	mov	r3, r1
 801159a:	607a      	str	r2, [r7, #4]
 801159c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801159e:	4b6f      	ldr	r3, [pc, #444]	; (801175c <SDMMC_GetCmdResp1+0x1cc>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	4a6f      	ldr	r2, [pc, #444]	; (8011760 <SDMMC_GetCmdResp1+0x1d0>)
 80115a4:	fba2 2303 	umull	r2, r3, r2, r3
 80115a8:	0a5b      	lsrs	r3, r3, #9
 80115aa:	687a      	ldr	r2, [r7, #4]
 80115ac:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80115b0:	4623      	mov	r3, r4
 80115b2:	1e5c      	subs	r4, r3, #1
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d102      	bne.n	80115be <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80115b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80115bc:	e0c9      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115c2:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80115c4:	697a      	ldr	r2, [r7, #20]
 80115c6:	4b67      	ldr	r3, [pc, #412]	; (8011764 <SDMMC_GetCmdResp1+0x1d4>)
 80115c8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d0f0      	beq.n	80115b0 <SDMMC_GetCmdResp1+0x20>
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d1eb      	bne.n	80115b0 <SDMMC_GetCmdResp1+0x20>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115dc:	f003 0304 	and.w	r3, r3, #4
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d004      	beq.n	80115ee <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2204      	movs	r2, #4
 80115e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80115ea:	2304      	movs	r3, #4
 80115ec:	e0b1      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115f2:	f003 0301 	and.w	r3, r3, #1
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d004      	beq.n	8011604 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	2201      	movs	r2, #1
 80115fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011600:	2301      	movs	r3, #1
 8011602:	e0a6      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	4a58      	ldr	r2, [pc, #352]	; (8011768 <SDMMC_GetCmdResp1+0x1d8>)
 8011608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801160a:	68f8      	ldr	r0, [r7, #12]
 801160c:	f7ff fcb2 	bl	8010f74 <SDMMC_GetCommandResponse>
 8011610:	4603      	mov	r3, r0
 8011612:	461a      	mov	r2, r3
 8011614:	7afb      	ldrb	r3, [r7, #11]
 8011616:	4293      	cmp	r3, r2
 8011618:	d001      	beq.n	801161e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801161a:	2301      	movs	r3, #1
 801161c:	e099      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801161e:	2100      	movs	r1, #0
 8011620:	68f8      	ldr	r0, [r7, #12]
 8011622:	f7ff fcb4 	bl	8010f8e <SDMMC_GetResponse>
 8011626:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011628:	693a      	ldr	r2, [r7, #16]
 801162a:	4b50      	ldr	r3, [pc, #320]	; (801176c <SDMMC_GetCmdResp1+0x1dc>)
 801162c:	4013      	ands	r3, r2
 801162e:	2b00      	cmp	r3, #0
 8011630:	d101      	bne.n	8011636 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8011632:	2300      	movs	r3, #0
 8011634:	e08d      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	2b00      	cmp	r3, #0
 801163a:	da02      	bge.n	8011642 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801163c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011640:	e087      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011648:	2b00      	cmp	r3, #0
 801164a:	d001      	beq.n	8011650 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801164c:	2340      	movs	r3, #64	; 0x40
 801164e:	e080      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011656:	2b00      	cmp	r3, #0
 8011658:	d001      	beq.n	801165e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801165a:	2380      	movs	r3, #128	; 0x80
 801165c:	e079      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011664:	2b00      	cmp	r3, #0
 8011666:	d002      	beq.n	801166e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011668:	f44f 7380 	mov.w	r3, #256	; 0x100
 801166c:	e071      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011674:	2b00      	cmp	r3, #0
 8011676:	d002      	beq.n	801167e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011678:	f44f 7300 	mov.w	r3, #512	; 0x200
 801167c:	e069      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011684:	2b00      	cmp	r3, #0
 8011686:	d002      	beq.n	801168e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801168c:	e061      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011694:	2b00      	cmp	r3, #0
 8011696:	d002      	beq.n	801169e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801169c:	e059      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d002      	beq.n	80116ae <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80116a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116ac:	e051      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d002      	beq.n	80116be <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80116b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80116bc:	e049      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d002      	beq.n	80116ce <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80116c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80116cc:	e041      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d002      	beq.n	80116de <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80116d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116dc:	e039      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d002      	beq.n	80116ee <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80116e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80116ec:	e031      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d002      	beq.n	80116fe <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80116f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80116fc:	e029      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80116fe:	693b      	ldr	r3, [r7, #16]
 8011700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011704:	2b00      	cmp	r3, #0
 8011706:	d002      	beq.n	801170e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011708:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801170c:	e021      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011714:	2b00      	cmp	r3, #0
 8011716:	d002      	beq.n	801171e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011718:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801171c:	e019      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011724:	2b00      	cmp	r3, #0
 8011726:	d002      	beq.n	801172e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011728:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801172c:	e011      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011734:	2b00      	cmp	r3, #0
 8011736:	d002      	beq.n	801173e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801173c:	e009      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	f003 0308 	and.w	r3, r3, #8
 8011744:	2b00      	cmp	r3, #0
 8011746:	d002      	beq.n	801174e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011748:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801174c:	e001      	b.n	8011752 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801174e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011752:	4618      	mov	r0, r3
 8011754:	371c      	adds	r7, #28
 8011756:	46bd      	mov	sp, r7
 8011758:	bd90      	pop	{r4, r7, pc}
 801175a:	bf00      	nop
 801175c:	20000038 	.word	0x20000038
 8011760:	10624dd3 	.word	0x10624dd3
 8011764:	00200045 	.word	0x00200045
 8011768:	002000c5 	.word	0x002000c5
 801176c:	fdffe008 	.word	0xfdffe008

08011770 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011770:	b490      	push	{r4, r7}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011778:	4b1e      	ldr	r3, [pc, #120]	; (80117f4 <SDMMC_GetCmdResp2+0x84>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	4a1e      	ldr	r2, [pc, #120]	; (80117f8 <SDMMC_GetCmdResp2+0x88>)
 801177e:	fba2 2303 	umull	r2, r3, r2, r3
 8011782:	0a5b      	lsrs	r3, r3, #9
 8011784:	f241 3288 	movw	r2, #5000	; 0x1388
 8011788:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 801178c:	4623      	mov	r3, r4
 801178e:	1e5c      	subs	r4, r3, #1
 8011790:	2b00      	cmp	r3, #0
 8011792:	d102      	bne.n	801179a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011798:	e026      	b.n	80117e8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801179e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d0f0      	beq.n	801178c <SDMMC_GetCmdResp2+0x1c>
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d1eb      	bne.n	801178c <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117b8:	f003 0304 	and.w	r3, r3, #4
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d004      	beq.n	80117ca <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2204      	movs	r2, #4
 80117c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80117c6:	2304      	movs	r3, #4
 80117c8:	e00e      	b.n	80117e8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117ce:	f003 0301 	and.w	r3, r3, #1
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d004      	beq.n	80117e0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2201      	movs	r2, #1
 80117da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117dc:	2301      	movs	r3, #1
 80117de:	e003      	b.n	80117e8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	4a06      	ldr	r2, [pc, #24]	; (80117fc <SDMMC_GetCmdResp2+0x8c>)
 80117e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80117e6:	2300      	movs	r3, #0
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3710      	adds	r7, #16
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bc90      	pop	{r4, r7}
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop
 80117f4:	20000038 	.word	0x20000038
 80117f8:	10624dd3 	.word	0x10624dd3
 80117fc:	002000c5 	.word	0x002000c5

08011800 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011800:	b490      	push	{r4, r7}
 8011802:	b084      	sub	sp, #16
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011808:	4b18      	ldr	r3, [pc, #96]	; (801186c <SDMMC_GetCmdResp3+0x6c>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	4a18      	ldr	r2, [pc, #96]	; (8011870 <SDMMC_GetCmdResp3+0x70>)
 801180e:	fba2 2303 	umull	r2, r3, r2, r3
 8011812:	0a5b      	lsrs	r3, r3, #9
 8011814:	f241 3288 	movw	r2, #5000	; 0x1388
 8011818:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 801181c:	4623      	mov	r3, r4
 801181e:	1e5c      	subs	r4, r3, #1
 8011820:	2b00      	cmp	r3, #0
 8011822:	d102      	bne.n	801182a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011828:	e01b      	b.n	8011862 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801182e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011836:	2b00      	cmp	r3, #0
 8011838:	d0f0      	beq.n	801181c <SDMMC_GetCmdResp3+0x1c>
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011840:	2b00      	cmp	r3, #0
 8011842:	d1eb      	bne.n	801181c <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011848:	f003 0304 	and.w	r3, r3, #4
 801184c:	2b00      	cmp	r3, #0
 801184e:	d004      	beq.n	801185a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2204      	movs	r2, #4
 8011854:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011856:	2304      	movs	r3, #4
 8011858:	e003      	b.n	8011862 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	4a05      	ldr	r2, [pc, #20]	; (8011874 <SDMMC_GetCmdResp3+0x74>)
 801185e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3710      	adds	r7, #16
 8011866:	46bd      	mov	sp, r7
 8011868:	bc90      	pop	{r4, r7}
 801186a:	4770      	bx	lr
 801186c:	20000038 	.word	0x20000038
 8011870:	10624dd3 	.word	0x10624dd3
 8011874:	002000c5 	.word	0x002000c5

08011878 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011878:	b590      	push	{r4, r7, lr}
 801187a:	b087      	sub	sp, #28
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	460b      	mov	r3, r1
 8011882:	607a      	str	r2, [r7, #4]
 8011884:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011886:	4b34      	ldr	r3, [pc, #208]	; (8011958 <SDMMC_GetCmdResp6+0xe0>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	4a34      	ldr	r2, [pc, #208]	; (801195c <SDMMC_GetCmdResp6+0xe4>)
 801188c:	fba2 2303 	umull	r2, r3, r2, r3
 8011890:	0a5b      	lsrs	r3, r3, #9
 8011892:	f241 3288 	movw	r2, #5000	; 0x1388
 8011896:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 801189a:	4623      	mov	r3, r4
 801189c:	1e5c      	subs	r4, r3, #1
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d102      	bne.n	80118a8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118a6:	e052      	b.n	801194e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118ac:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d0f0      	beq.n	801189a <SDMMC_GetCmdResp6+0x22>
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d1eb      	bne.n	801189a <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118c6:	f003 0304 	and.w	r3, r3, #4
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d004      	beq.n	80118d8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	2204      	movs	r2, #4
 80118d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80118d4:	2304      	movs	r3, #4
 80118d6:	e03a      	b.n	801194e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118dc:	f003 0301 	and.w	r3, r3, #1
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d004      	beq.n	80118ee <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	2201      	movs	r2, #1
 80118e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80118ea:	2301      	movs	r3, #1
 80118ec:	e02f      	b.n	801194e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f7ff fb40 	bl	8010f74 <SDMMC_GetCommandResponse>
 80118f4:	4603      	mov	r3, r0
 80118f6:	461a      	mov	r2, r3
 80118f8:	7afb      	ldrb	r3, [r7, #11]
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d001      	beq.n	8011902 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80118fe:	2301      	movs	r3, #1
 8011900:	e025      	b.n	801194e <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	4a16      	ldr	r2, [pc, #88]	; (8011960 <SDMMC_GetCmdResp6+0xe8>)
 8011906:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011908:	2100      	movs	r1, #0
 801190a:	68f8      	ldr	r0, [r7, #12]
 801190c:	f7ff fb3f 	bl	8010f8e <SDMMC_GetResponse>
 8011910:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011918:	2b00      	cmp	r3, #0
 801191a:	d106      	bne.n	801192a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	0c1b      	lsrs	r3, r3, #16
 8011920:	b29a      	uxth	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011926:	2300      	movs	r3, #0
 8011928:	e011      	b.n	801194e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011930:	2b00      	cmp	r3, #0
 8011932:	d002      	beq.n	801193a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011938:	e009      	b.n	801194e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011940:	2b00      	cmp	r3, #0
 8011942:	d002      	beq.n	801194a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011948:	e001      	b.n	801194e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801194a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801194e:	4618      	mov	r0, r3
 8011950:	371c      	adds	r7, #28
 8011952:	46bd      	mov	sp, r7
 8011954:	bd90      	pop	{r4, r7, pc}
 8011956:	bf00      	nop
 8011958:	20000038 	.word	0x20000038
 801195c:	10624dd3 	.word	0x10624dd3
 8011960:	002000c5 	.word	0x002000c5

08011964 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011964:	b490      	push	{r4, r7}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801196c:	4b21      	ldr	r3, [pc, #132]	; (80119f4 <SDMMC_GetCmdResp7+0x90>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	4a21      	ldr	r2, [pc, #132]	; (80119f8 <SDMMC_GetCmdResp7+0x94>)
 8011972:	fba2 2303 	umull	r2, r3, r2, r3
 8011976:	0a5b      	lsrs	r3, r3, #9
 8011978:	f241 3288 	movw	r2, #5000	; 0x1388
 801197c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011980:	4623      	mov	r3, r4
 8011982:	1e5c      	subs	r4, r3, #1
 8011984:	2b00      	cmp	r3, #0
 8011986:	d102      	bne.n	801198e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011988:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801198c:	e02c      	b.n	80119e8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011992:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801199a:	2b00      	cmp	r3, #0
 801199c:	d0f0      	beq.n	8011980 <SDMMC_GetCmdResp7+0x1c>
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d1eb      	bne.n	8011980 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ac:	f003 0304 	and.w	r3, r3, #4
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d004      	beq.n	80119be <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2204      	movs	r2, #4
 80119b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80119ba:	2304      	movs	r3, #4
 80119bc:	e014      	b.n	80119e8 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119c2:	f003 0301 	and.w	r3, r3, #1
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d004      	beq.n	80119d4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2201      	movs	r2, #1
 80119ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119d0:	2301      	movs	r3, #1
 80119d2:	e009      	b.n	80119e8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d002      	beq.n	80119e6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2240      	movs	r2, #64	; 0x40
 80119e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80119e6:	2300      	movs	r3, #0

}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bc90      	pop	{r4, r7}
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
 80119f4:	20000038 	.word	0x20000038
 80119f8:	10624dd3 	.word	0x10624dd3

080119fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80119fc:	b084      	sub	sp, #16
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b084      	sub	sp, #16
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
 8011a06:	f107 001c 	add.w	r0, r7, #28
 8011a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	d122      	bne.n	8011a5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	68db      	ldr	r3, [r3, #12]
 8011a24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8011a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d105      	bne.n	8011a4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	68db      	ldr	r3, [r3, #12]
 8011a46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f001 f9c8 	bl	8012de4 <USB_CoreReset>
 8011a54:	4603      	mov	r3, r0
 8011a56:	73fb      	strb	r3, [r7, #15]
 8011a58:	e01a      	b.n	8011a90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f001 f9bc 	bl	8012de4 <USB_CoreReset>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d106      	bne.n	8011a84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	639a      	str	r2, [r3, #56]	; 0x38
 8011a82:	e005      	b.n	8011a90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8011a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011a9c:	b004      	add	sp, #16
 8011a9e:	4770      	bx	lr

08011aa0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b087      	sub	sp, #28
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	60b9      	str	r1, [r7, #8]
 8011aaa:	4613      	mov	r3, r2
 8011aac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011aae:	79fb      	ldrb	r3, [r7, #7]
 8011ab0:	2b02      	cmp	r3, #2
 8011ab2:	d165      	bne.n	8011b80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	4a3e      	ldr	r2, [pc, #248]	; (8011bb0 <USB_SetTurnaroundTime+0x110>)
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d906      	bls.n	8011aca <USB_SetTurnaroundTime+0x2a>
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	4a3d      	ldr	r2, [pc, #244]	; (8011bb4 <USB_SetTurnaroundTime+0x114>)
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d202      	bcs.n	8011aca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011ac4:	230f      	movs	r3, #15
 8011ac6:	617b      	str	r3, [r7, #20]
 8011ac8:	e05c      	b.n	8011b84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	4a39      	ldr	r2, [pc, #228]	; (8011bb4 <USB_SetTurnaroundTime+0x114>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d306      	bcc.n	8011ae0 <USB_SetTurnaroundTime+0x40>
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	4a38      	ldr	r2, [pc, #224]	; (8011bb8 <USB_SetTurnaroundTime+0x118>)
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d202      	bcs.n	8011ae0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011ada:	230e      	movs	r3, #14
 8011adc:	617b      	str	r3, [r7, #20]
 8011ade:	e051      	b.n	8011b84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	4a35      	ldr	r2, [pc, #212]	; (8011bb8 <USB_SetTurnaroundTime+0x118>)
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d306      	bcc.n	8011af6 <USB_SetTurnaroundTime+0x56>
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	4a34      	ldr	r2, [pc, #208]	; (8011bbc <USB_SetTurnaroundTime+0x11c>)
 8011aec:	4293      	cmp	r3, r2
 8011aee:	d202      	bcs.n	8011af6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011af0:	230d      	movs	r3, #13
 8011af2:	617b      	str	r3, [r7, #20]
 8011af4:	e046      	b.n	8011b84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	4a30      	ldr	r2, [pc, #192]	; (8011bbc <USB_SetTurnaroundTime+0x11c>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d306      	bcc.n	8011b0c <USB_SetTurnaroundTime+0x6c>
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	4a2f      	ldr	r2, [pc, #188]	; (8011bc0 <USB_SetTurnaroundTime+0x120>)
 8011b02:	4293      	cmp	r3, r2
 8011b04:	d802      	bhi.n	8011b0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011b06:	230c      	movs	r3, #12
 8011b08:	617b      	str	r3, [r7, #20]
 8011b0a:	e03b      	b.n	8011b84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	4a2c      	ldr	r2, [pc, #176]	; (8011bc0 <USB_SetTurnaroundTime+0x120>)
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d906      	bls.n	8011b22 <USB_SetTurnaroundTime+0x82>
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	4a2b      	ldr	r2, [pc, #172]	; (8011bc4 <USB_SetTurnaroundTime+0x124>)
 8011b18:	4293      	cmp	r3, r2
 8011b1a:	d802      	bhi.n	8011b22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011b1c:	230b      	movs	r3, #11
 8011b1e:	617b      	str	r3, [r7, #20]
 8011b20:	e030      	b.n	8011b84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	4a27      	ldr	r2, [pc, #156]	; (8011bc4 <USB_SetTurnaroundTime+0x124>)
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d906      	bls.n	8011b38 <USB_SetTurnaroundTime+0x98>
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	4a26      	ldr	r2, [pc, #152]	; (8011bc8 <USB_SetTurnaroundTime+0x128>)
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d802      	bhi.n	8011b38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011b32:	230a      	movs	r3, #10
 8011b34:	617b      	str	r3, [r7, #20]
 8011b36:	e025      	b.n	8011b84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	4a23      	ldr	r2, [pc, #140]	; (8011bc8 <USB_SetTurnaroundTime+0x128>)
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	d906      	bls.n	8011b4e <USB_SetTurnaroundTime+0xae>
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	4a22      	ldr	r2, [pc, #136]	; (8011bcc <USB_SetTurnaroundTime+0x12c>)
 8011b44:	4293      	cmp	r3, r2
 8011b46:	d202      	bcs.n	8011b4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011b48:	2309      	movs	r3, #9
 8011b4a:	617b      	str	r3, [r7, #20]
 8011b4c:	e01a      	b.n	8011b84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	4a1e      	ldr	r2, [pc, #120]	; (8011bcc <USB_SetTurnaroundTime+0x12c>)
 8011b52:	4293      	cmp	r3, r2
 8011b54:	d306      	bcc.n	8011b64 <USB_SetTurnaroundTime+0xc4>
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	4a1d      	ldr	r2, [pc, #116]	; (8011bd0 <USB_SetTurnaroundTime+0x130>)
 8011b5a:	4293      	cmp	r3, r2
 8011b5c:	d802      	bhi.n	8011b64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011b5e:	2308      	movs	r3, #8
 8011b60:	617b      	str	r3, [r7, #20]
 8011b62:	e00f      	b.n	8011b84 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	4a1a      	ldr	r2, [pc, #104]	; (8011bd0 <USB_SetTurnaroundTime+0x130>)
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d906      	bls.n	8011b7a <USB_SetTurnaroundTime+0xda>
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	4a19      	ldr	r2, [pc, #100]	; (8011bd4 <USB_SetTurnaroundTime+0x134>)
 8011b70:	4293      	cmp	r3, r2
 8011b72:	d202      	bcs.n	8011b7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011b74:	2307      	movs	r3, #7
 8011b76:	617b      	str	r3, [r7, #20]
 8011b78:	e004      	b.n	8011b84 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011b7a:	2306      	movs	r3, #6
 8011b7c:	617b      	str	r3, [r7, #20]
 8011b7e:	e001      	b.n	8011b84 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011b80:	2309      	movs	r3, #9
 8011b82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	68db      	ldr	r3, [r3, #12]
 8011b88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	68da      	ldr	r2, [r3, #12]
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	029b      	lsls	r3, r3, #10
 8011b98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011b9c:	431a      	orrs	r2, r3
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011ba2:	2300      	movs	r3, #0
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	371c      	adds	r7, #28
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr
 8011bb0:	00d8acbf 	.word	0x00d8acbf
 8011bb4:	00e4e1c0 	.word	0x00e4e1c0
 8011bb8:	00f42400 	.word	0x00f42400
 8011bbc:	01067380 	.word	0x01067380
 8011bc0:	011a499f 	.word	0x011a499f
 8011bc4:	01312cff 	.word	0x01312cff
 8011bc8:	014ca43f 	.word	0x014ca43f
 8011bcc:	016e3600 	.word	0x016e3600
 8011bd0:	01a6ab1f 	.word	0x01a6ab1f
 8011bd4:	01e84800 	.word	0x01e84800

08011bd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011bd8:	b480      	push	{r7}
 8011bda:	b083      	sub	sp, #12
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	689b      	ldr	r3, [r3, #8]
 8011be4:	f043 0201 	orr.w	r2, r3, #1
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011bec:	2300      	movs	r3, #0
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	370c      	adds	r7, #12
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011bfa:	b480      	push	{r7}
 8011bfc:	b083      	sub	sp, #12
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	689b      	ldr	r3, [r3, #8]
 8011c06:	f023 0201 	bic.w	r2, r3, #1
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011c0e:	2300      	movs	r3, #0
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	370c      	adds	r7, #12
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr

08011c1c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b082      	sub	sp, #8
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	460b      	mov	r3, r1
 8011c26:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011c34:	78fb      	ldrb	r3, [r7, #3]
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d106      	bne.n	8011c48 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	68db      	ldr	r3, [r3, #12]
 8011c3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	60da      	str	r2, [r3, #12]
 8011c46:	e00b      	b.n	8011c60 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011c48:	78fb      	ldrb	r3, [r7, #3]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d106      	bne.n	8011c5c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	60da      	str	r2, [r3, #12]
 8011c5a:	e001      	b.n	8011c60 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	e003      	b.n	8011c68 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011c60:	2032      	movs	r0, #50	; 0x32
 8011c62:	f7f5 feeb 	bl	8007a3c <HAL_Delay>

  return HAL_OK;
 8011c66:	2300      	movs	r3, #0
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011c70:	b084      	sub	sp, #16
 8011c72:	b580      	push	{r7, lr}
 8011c74:	b086      	sub	sp, #24
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
 8011c7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011c82:	2300      	movs	r3, #0
 8011c84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	613b      	str	r3, [r7, #16]
 8011c8e:	e009      	b.n	8011ca4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011c90:	687a      	ldr	r2, [r7, #4]
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	3340      	adds	r3, #64	; 0x40
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	4413      	add	r3, r2
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	3301      	adds	r3, #1
 8011ca2:	613b      	str	r3, [r7, #16]
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	2b0e      	cmp	r3, #14
 8011ca8:	d9f2      	bls.n	8011c90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d11c      	bne.n	8011cea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	68fa      	ldr	r2, [r7, #12]
 8011cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011cbe:	f043 0302 	orr.w	r3, r3, #2
 8011cc2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cc8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	601a      	str	r2, [r3, #0]
 8011ce8:	e005      	b.n	8011cf6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	2300      	movs	r3, #0
 8011d00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d08:	4619      	mov	r1, r3
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d10:	461a      	mov	r2, r3
 8011d12:	680b      	ldr	r3, [r1, #0]
 8011d14:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011d16:	2103      	movs	r1, #3
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f000 f93d 	bl	8011f98 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011d1e:	2110      	movs	r1, #16
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f000 f8f1 	bl	8011f08 <USB_FlushTxFifo>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f000 f90f 	bl	8011f54 <USB_FlushRxFifo>
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d001      	beq.n	8011d40 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d46:	461a      	mov	r2, r3
 8011d48:	2300      	movs	r3, #0
 8011d4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d52:	461a      	mov	r2, r3
 8011d54:	2300      	movs	r3, #0
 8011d56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d5e:	461a      	mov	r2, r3
 8011d60:	2300      	movs	r3, #0
 8011d62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011d64:	2300      	movs	r3, #0
 8011d66:	613b      	str	r3, [r7, #16]
 8011d68:	e043      	b.n	8011df2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	015a      	lsls	r2, r3, #5
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	4413      	add	r3, r2
 8011d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011d80:	d118      	bne.n	8011db4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d10a      	bne.n	8011d9e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	015a      	lsls	r2, r3, #5
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	4413      	add	r3, r2
 8011d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d94:	461a      	mov	r2, r3
 8011d96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011d9a:	6013      	str	r3, [r2, #0]
 8011d9c:	e013      	b.n	8011dc6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	015a      	lsls	r2, r3, #5
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	4413      	add	r3, r2
 8011da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011daa:	461a      	mov	r2, r3
 8011dac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011db0:	6013      	str	r3, [r2, #0]
 8011db2:	e008      	b.n	8011dc6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	015a      	lsls	r2, r3, #5
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	4413      	add	r3, r2
 8011dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	015a      	lsls	r2, r3, #5
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	4413      	add	r3, r2
 8011dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	015a      	lsls	r2, r3, #5
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	4413      	add	r3, r2
 8011de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011de4:	461a      	mov	r2, r3
 8011de6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011dea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	3301      	adds	r3, #1
 8011df0:	613b      	str	r3, [r7, #16]
 8011df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df4:	693a      	ldr	r2, [r7, #16]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d3b7      	bcc.n	8011d6a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	613b      	str	r3, [r7, #16]
 8011dfe:	e043      	b.n	8011e88 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	015a      	lsls	r2, r3, #5
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	4413      	add	r3, r2
 8011e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e16:	d118      	bne.n	8011e4a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d10a      	bne.n	8011e34 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	015a      	lsls	r2, r3, #5
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	4413      	add	r3, r2
 8011e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011e30:	6013      	str	r3, [r2, #0]
 8011e32:	e013      	b.n	8011e5c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	015a      	lsls	r2, r3, #5
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	4413      	add	r3, r2
 8011e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e40:	461a      	mov	r2, r3
 8011e42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011e46:	6013      	str	r3, [r2, #0]
 8011e48:	e008      	b.n	8011e5c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	015a      	lsls	r2, r3, #5
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	4413      	add	r3, r2
 8011e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e56:	461a      	mov	r2, r3
 8011e58:	2300      	movs	r3, #0
 8011e5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	015a      	lsls	r2, r3, #5
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	4413      	add	r3, r2
 8011e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e68:	461a      	mov	r2, r3
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	015a      	lsls	r2, r3, #5
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	4413      	add	r3, r2
 8011e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011e80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	3301      	adds	r3, #1
 8011e86:	613b      	str	r3, [r7, #16]
 8011e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8a:	693a      	ldr	r2, [r7, #16]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d3b7      	bcc.n	8011e00 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e96:	691b      	ldr	r3, [r3, #16]
 8011e98:	68fa      	ldr	r2, [r7, #12]
 8011e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ea2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011eb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	699b      	ldr	r3, [r3, #24]
 8011eb6:	f043 0210 	orr.w	r2, r3, #16
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	699a      	ldr	r2, [r3, #24]
 8011ec2:	4b10      	ldr	r3, [pc, #64]	; (8011f04 <USB_DevInit+0x294>)
 8011ec4:	4313      	orrs	r3, r2
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d005      	beq.n	8011edc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	699b      	ldr	r3, [r3, #24]
 8011ed4:	f043 0208 	orr.w	r2, r3, #8
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d107      	bne.n	8011ef2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	699b      	ldr	r3, [r3, #24]
 8011ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011eea:	f043 0304 	orr.w	r3, r3, #4
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3718      	adds	r7, #24
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011efe:	b004      	add	sp, #16
 8011f00:	4770      	bx	lr
 8011f02:	bf00      	nop
 8011f04:	803c3800 	.word	0x803c3800

08011f08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b085      	sub	sp, #20
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011f12:	2300      	movs	r3, #0
 8011f14:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	019b      	lsls	r3, r3, #6
 8011f1a:	f043 0220 	orr.w	r2, r3, #32
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	3301      	adds	r3, #1
 8011f26:	60fb      	str	r3, [r7, #12]
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	4a09      	ldr	r2, [pc, #36]	; (8011f50 <USB_FlushTxFifo+0x48>)
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d901      	bls.n	8011f34 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011f30:	2303      	movs	r3, #3
 8011f32:	e006      	b.n	8011f42 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	691b      	ldr	r3, [r3, #16]
 8011f38:	f003 0320 	and.w	r3, r3, #32
 8011f3c:	2b20      	cmp	r3, #32
 8011f3e:	d0f0      	beq.n	8011f22 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011f40:	2300      	movs	r3, #0
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3714      	adds	r7, #20
 8011f46:	46bd      	mov	sp, r7
 8011f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4c:	4770      	bx	lr
 8011f4e:	bf00      	nop
 8011f50:	00030d40 	.word	0x00030d40

08011f54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b085      	sub	sp, #20
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2210      	movs	r2, #16
 8011f64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	3301      	adds	r3, #1
 8011f6a:	60fb      	str	r3, [r7, #12]
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	4a09      	ldr	r2, [pc, #36]	; (8011f94 <USB_FlushRxFifo+0x40>)
 8011f70:	4293      	cmp	r3, r2
 8011f72:	d901      	bls.n	8011f78 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011f74:	2303      	movs	r3, #3
 8011f76:	e006      	b.n	8011f86 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	691b      	ldr	r3, [r3, #16]
 8011f7c:	f003 0310 	and.w	r3, r3, #16
 8011f80:	2b10      	cmp	r3, #16
 8011f82:	d0f0      	beq.n	8011f66 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011f84:	2300      	movs	r3, #0
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3714      	adds	r7, #20
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr
 8011f92:	bf00      	nop
 8011f94:	00030d40 	.word	0x00030d40

08011f98 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b085      	sub	sp, #20
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fae:	681a      	ldr	r2, [r3, #0]
 8011fb0:	78fb      	ldrb	r3, [r7, #3]
 8011fb2:	68f9      	ldr	r1, [r7, #12]
 8011fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011fbc:	2300      	movs	r3, #0
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3714      	adds	r7, #20
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr

08011fca <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011fca:	b480      	push	{r7}
 8011fcc:	b087      	sub	sp, #28
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fdc:	689b      	ldr	r3, [r3, #8]
 8011fde:	f003 0306 	and.w	r3, r3, #6
 8011fe2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2b02      	cmp	r3, #2
 8011fe8:	d002      	beq.n	8011ff0 <USB_GetDevSpeed+0x26>
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	2b06      	cmp	r3, #6
 8011fee:	d102      	bne.n	8011ff6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011ff0:	2302      	movs	r3, #2
 8011ff2:	75fb      	strb	r3, [r7, #23]
 8011ff4:	e001      	b.n	8011ffa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8011ff6:	230f      	movs	r3, #15
 8011ff8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	371c      	adds	r7, #28
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012008:	b480      	push	{r7}
 801200a:	b085      	sub	sp, #20
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	785b      	ldrb	r3, [r3, #1]
 8012020:	2b01      	cmp	r3, #1
 8012022:	d13a      	bne.n	801209a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801202a:	69da      	ldr	r2, [r3, #28]
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	f003 030f 	and.w	r3, r3, #15
 8012034:	2101      	movs	r1, #1
 8012036:	fa01 f303 	lsl.w	r3, r1, r3
 801203a:	b29b      	uxth	r3, r3
 801203c:	68f9      	ldr	r1, [r7, #12]
 801203e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012042:	4313      	orrs	r3, r2
 8012044:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	015a      	lsls	r2, r3, #5
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	4413      	add	r3, r2
 801204e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012058:	2b00      	cmp	r3, #0
 801205a:	d155      	bne.n	8012108 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	015a      	lsls	r2, r3, #5
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	4413      	add	r3, r2
 8012064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	689b      	ldr	r3, [r3, #8]
 801206e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	78db      	ldrb	r3, [r3, #3]
 8012076:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012078:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	059b      	lsls	r3, r3, #22
 801207e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012080:	4313      	orrs	r3, r2
 8012082:	68ba      	ldr	r2, [r7, #8]
 8012084:	0151      	lsls	r1, r2, #5
 8012086:	68fa      	ldr	r2, [r7, #12]
 8012088:	440a      	add	r2, r1
 801208a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801208e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012096:	6013      	str	r3, [r2, #0]
 8012098:	e036      	b.n	8012108 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120a0:	69da      	ldr	r2, [r3, #28]
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	f003 030f 	and.w	r3, r3, #15
 80120aa:	2101      	movs	r1, #1
 80120ac:	fa01 f303 	lsl.w	r3, r1, r3
 80120b0:	041b      	lsls	r3, r3, #16
 80120b2:	68f9      	ldr	r1, [r7, #12]
 80120b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80120b8:	4313      	orrs	r3, r2
 80120ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	015a      	lsls	r2, r3, #5
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	4413      	add	r3, r2
 80120c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d11a      	bne.n	8012108 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	015a      	lsls	r2, r3, #5
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	4413      	add	r3, r2
 80120da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120de:	681a      	ldr	r2, [r3, #0]
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	689b      	ldr	r3, [r3, #8]
 80120e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	78db      	ldrb	r3, [r3, #3]
 80120ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80120ee:	430b      	orrs	r3, r1
 80120f0:	4313      	orrs	r3, r2
 80120f2:	68ba      	ldr	r2, [r7, #8]
 80120f4:	0151      	lsls	r1, r2, #5
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	440a      	add	r2, r1
 80120fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012106:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012108:	2300      	movs	r3, #0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3714      	adds	r7, #20
 801210e:	46bd      	mov	sp, r7
 8012110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012114:	4770      	bx	lr
	...

08012118 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012118:	b480      	push	{r7}
 801211a:	b085      	sub	sp, #20
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	785b      	ldrb	r3, [r3, #1]
 8012130:	2b01      	cmp	r3, #1
 8012132:	d161      	bne.n	80121f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	015a      	lsls	r2, r3, #5
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	4413      	add	r3, r2
 801213c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801214a:	d11f      	bne.n	801218c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	015a      	lsls	r2, r3, #5
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	4413      	add	r3, r2
 8012154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	68ba      	ldr	r2, [r7, #8]
 801215c:	0151      	lsls	r1, r2, #5
 801215e:	68fa      	ldr	r2, [r7, #12]
 8012160:	440a      	add	r2, r1
 8012162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801216a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	015a      	lsls	r2, r3, #5
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	4413      	add	r3, r2
 8012174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	68ba      	ldr	r2, [r7, #8]
 801217c:	0151      	lsls	r1, r2, #5
 801217e:	68fa      	ldr	r2, [r7, #12]
 8012180:	440a      	add	r2, r1
 8012182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801218a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	781b      	ldrb	r3, [r3, #0]
 8012198:	f003 030f 	and.w	r3, r3, #15
 801219c:	2101      	movs	r1, #1
 801219e:	fa01 f303 	lsl.w	r3, r1, r3
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	43db      	mvns	r3, r3
 80121a6:	68f9      	ldr	r1, [r7, #12]
 80121a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121ac:	4013      	ands	r3, r2
 80121ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121b6:	69da      	ldr	r2, [r3, #28]
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	f003 030f 	and.w	r3, r3, #15
 80121c0:	2101      	movs	r1, #1
 80121c2:	fa01 f303 	lsl.w	r3, r1, r3
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	43db      	mvns	r3, r3
 80121ca:	68f9      	ldr	r1, [r7, #12]
 80121cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121d0:	4013      	ands	r3, r2
 80121d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	015a      	lsls	r2, r3, #5
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	4413      	add	r3, r2
 80121dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121e0:	681a      	ldr	r2, [r3, #0]
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	0159      	lsls	r1, r3, #5
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	440b      	add	r3, r1
 80121ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121ee:	4619      	mov	r1, r3
 80121f0:	4b35      	ldr	r3, [pc, #212]	; (80122c8 <USB_DeactivateEndpoint+0x1b0>)
 80121f2:	4013      	ands	r3, r2
 80121f4:	600b      	str	r3, [r1, #0]
 80121f6:	e060      	b.n	80122ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	015a      	lsls	r2, r3, #5
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	4413      	add	r3, r2
 8012200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801220a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801220e:	d11f      	bne.n	8012250 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	015a      	lsls	r2, r3, #5
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	4413      	add	r3, r2
 8012218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	0151      	lsls	r1, r2, #5
 8012222:	68fa      	ldr	r2, [r7, #12]
 8012224:	440a      	add	r2, r1
 8012226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801222a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801222e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	015a      	lsls	r2, r3, #5
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	4413      	add	r3, r2
 8012238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	68ba      	ldr	r2, [r7, #8]
 8012240:	0151      	lsls	r1, r2, #5
 8012242:	68fa      	ldr	r2, [r7, #12]
 8012244:	440a      	add	r2, r1
 8012246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801224a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801224e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	781b      	ldrb	r3, [r3, #0]
 801225c:	f003 030f 	and.w	r3, r3, #15
 8012260:	2101      	movs	r1, #1
 8012262:	fa01 f303 	lsl.w	r3, r1, r3
 8012266:	041b      	lsls	r3, r3, #16
 8012268:	43db      	mvns	r3, r3
 801226a:	68f9      	ldr	r1, [r7, #12]
 801226c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012270:	4013      	ands	r3, r2
 8012272:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801227a:	69da      	ldr	r2, [r3, #28]
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	781b      	ldrb	r3, [r3, #0]
 8012280:	f003 030f 	and.w	r3, r3, #15
 8012284:	2101      	movs	r1, #1
 8012286:	fa01 f303 	lsl.w	r3, r1, r3
 801228a:	041b      	lsls	r3, r3, #16
 801228c:	43db      	mvns	r3, r3
 801228e:	68f9      	ldr	r1, [r7, #12]
 8012290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012294:	4013      	ands	r3, r2
 8012296:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	015a      	lsls	r2, r3, #5
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	4413      	add	r3, r2
 80122a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122a4:	681a      	ldr	r2, [r3, #0]
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	0159      	lsls	r1, r3, #5
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	440b      	add	r3, r1
 80122ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122b2:	4619      	mov	r1, r3
 80122b4:	4b05      	ldr	r3, [pc, #20]	; (80122cc <USB_DeactivateEndpoint+0x1b4>)
 80122b6:	4013      	ands	r3, r2
 80122b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80122ba:	2300      	movs	r3, #0
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3714      	adds	r7, #20
 80122c0:	46bd      	mov	sp, r7
 80122c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c6:	4770      	bx	lr
 80122c8:	ec337800 	.word	0xec337800
 80122cc:	eff37800 	.word	0xeff37800

080122d0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b086      	sub	sp, #24
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	785b      	ldrb	r3, [r3, #1]
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	f040 810a 	bne.w	8012502 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	695b      	ldr	r3, [r3, #20]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d132      	bne.n	801235c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	015a      	lsls	r2, r3, #5
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	4413      	add	r3, r2
 80122fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012302:	691b      	ldr	r3, [r3, #16]
 8012304:	693a      	ldr	r2, [r7, #16]
 8012306:	0151      	lsls	r1, r2, #5
 8012308:	697a      	ldr	r2, [r7, #20]
 801230a:	440a      	add	r2, r1
 801230c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012310:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012314:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	015a      	lsls	r2, r3, #5
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	4413      	add	r3, r2
 8012322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012326:	691b      	ldr	r3, [r3, #16]
 8012328:	693a      	ldr	r2, [r7, #16]
 801232a:	0151      	lsls	r1, r2, #5
 801232c:	697a      	ldr	r2, [r7, #20]
 801232e:	440a      	add	r2, r1
 8012330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012338:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	015a      	lsls	r2, r3, #5
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	4413      	add	r3, r2
 8012342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012346:	691b      	ldr	r3, [r3, #16]
 8012348:	693a      	ldr	r2, [r7, #16]
 801234a:	0151      	lsls	r1, r2, #5
 801234c:	697a      	ldr	r2, [r7, #20]
 801234e:	440a      	add	r2, r1
 8012350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012354:	0cdb      	lsrs	r3, r3, #19
 8012356:	04db      	lsls	r3, r3, #19
 8012358:	6113      	str	r3, [r2, #16]
 801235a:	e074      	b.n	8012446 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	015a      	lsls	r2, r3, #5
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	4413      	add	r3, r2
 8012364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012368:	691b      	ldr	r3, [r3, #16]
 801236a:	693a      	ldr	r2, [r7, #16]
 801236c:	0151      	lsls	r1, r2, #5
 801236e:	697a      	ldr	r2, [r7, #20]
 8012370:	440a      	add	r2, r1
 8012372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012376:	0cdb      	lsrs	r3, r3, #19
 8012378:	04db      	lsls	r3, r3, #19
 801237a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801237c:	693b      	ldr	r3, [r7, #16]
 801237e:	015a      	lsls	r2, r3, #5
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	4413      	add	r3, r2
 8012384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012388:	691b      	ldr	r3, [r3, #16]
 801238a:	693a      	ldr	r2, [r7, #16]
 801238c:	0151      	lsls	r1, r2, #5
 801238e:	697a      	ldr	r2, [r7, #20]
 8012390:	440a      	add	r2, r1
 8012392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012396:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801239a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801239e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	015a      	lsls	r2, r3, #5
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	4413      	add	r3, r2
 80123a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123ac:	691a      	ldr	r2, [r3, #16]
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	6959      	ldr	r1, [r3, #20]
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	689b      	ldr	r3, [r3, #8]
 80123b6:	440b      	add	r3, r1
 80123b8:	1e59      	subs	r1, r3, #1
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	689b      	ldr	r3, [r3, #8]
 80123be:	fbb1 f3f3 	udiv	r3, r1, r3
 80123c2:	04d9      	lsls	r1, r3, #19
 80123c4:	4baf      	ldr	r3, [pc, #700]	; (8012684 <USB_EPStartXfer+0x3b4>)
 80123c6:	400b      	ands	r3, r1
 80123c8:	6939      	ldr	r1, [r7, #16]
 80123ca:	0148      	lsls	r0, r1, #5
 80123cc:	6979      	ldr	r1, [r7, #20]
 80123ce:	4401      	add	r1, r0
 80123d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80123d4:	4313      	orrs	r3, r2
 80123d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	015a      	lsls	r2, r3, #5
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	4413      	add	r3, r2
 80123e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123e4:	691a      	ldr	r2, [r3, #16]
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	695b      	ldr	r3, [r3, #20]
 80123ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80123ee:	6939      	ldr	r1, [r7, #16]
 80123f0:	0148      	lsls	r0, r1, #5
 80123f2:	6979      	ldr	r1, [r7, #20]
 80123f4:	4401      	add	r1, r0
 80123f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80123fa:	4313      	orrs	r3, r2
 80123fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	78db      	ldrb	r3, [r3, #3]
 8012402:	2b01      	cmp	r3, #1
 8012404:	d11f      	bne.n	8012446 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	015a      	lsls	r2, r3, #5
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	4413      	add	r3, r2
 801240e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012412:	691b      	ldr	r3, [r3, #16]
 8012414:	693a      	ldr	r2, [r7, #16]
 8012416:	0151      	lsls	r1, r2, #5
 8012418:	697a      	ldr	r2, [r7, #20]
 801241a:	440a      	add	r2, r1
 801241c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012420:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012424:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	015a      	lsls	r2, r3, #5
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	4413      	add	r3, r2
 801242e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012432:	691b      	ldr	r3, [r3, #16]
 8012434:	693a      	ldr	r2, [r7, #16]
 8012436:	0151      	lsls	r1, r2, #5
 8012438:	697a      	ldr	r2, [r7, #20]
 801243a:	440a      	add	r2, r1
 801243c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012440:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012444:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	015a      	lsls	r2, r3, #5
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	4413      	add	r3, r2
 801244e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	693a      	ldr	r2, [r7, #16]
 8012456:	0151      	lsls	r1, r2, #5
 8012458:	697a      	ldr	r2, [r7, #20]
 801245a:	440a      	add	r2, r1
 801245c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012460:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012464:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	78db      	ldrb	r3, [r3, #3]
 801246a:	2b01      	cmp	r3, #1
 801246c:	d015      	beq.n	801249a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	695b      	ldr	r3, [r3, #20]
 8012472:	2b00      	cmp	r3, #0
 8012474:	f000 8100 	beq.w	8012678 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801247e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	f003 030f 	and.w	r3, r3, #15
 8012488:	2101      	movs	r1, #1
 801248a:	fa01 f303 	lsl.w	r3, r1, r3
 801248e:	6979      	ldr	r1, [r7, #20]
 8012490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012494:	4313      	orrs	r3, r2
 8012496:	634b      	str	r3, [r1, #52]	; 0x34
 8012498:	e0ee      	b.n	8012678 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124a0:	689b      	ldr	r3, [r3, #8]
 80124a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d110      	bne.n	80124cc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	015a      	lsls	r2, r3, #5
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	4413      	add	r3, r2
 80124b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	693a      	ldr	r2, [r7, #16]
 80124ba:	0151      	lsls	r1, r2, #5
 80124bc:	697a      	ldr	r2, [r7, #20]
 80124be:	440a      	add	r2, r1
 80124c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80124c8:	6013      	str	r3, [r2, #0]
 80124ca:	e00f      	b.n	80124ec <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	015a      	lsls	r2, r3, #5
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	4413      	add	r3, r2
 80124d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	693a      	ldr	r2, [r7, #16]
 80124dc:	0151      	lsls	r1, r2, #5
 80124de:	697a      	ldr	r2, [r7, #20]
 80124e0:	440a      	add	r2, r1
 80124e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80124ea:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	68d9      	ldr	r1, [r3, #12]
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	781a      	ldrb	r2, [r3, #0]
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	695b      	ldr	r3, [r3, #20]
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f000 f9e2 	bl	80128c4 <USB_WritePacket>
 8012500:	e0ba      	b.n	8012678 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	015a      	lsls	r2, r3, #5
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	4413      	add	r3, r2
 801250a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801250e:	691b      	ldr	r3, [r3, #16]
 8012510:	693a      	ldr	r2, [r7, #16]
 8012512:	0151      	lsls	r1, r2, #5
 8012514:	697a      	ldr	r2, [r7, #20]
 8012516:	440a      	add	r2, r1
 8012518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801251c:	0cdb      	lsrs	r3, r3, #19
 801251e:	04db      	lsls	r3, r3, #19
 8012520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	015a      	lsls	r2, r3, #5
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	4413      	add	r3, r2
 801252a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801252e:	691b      	ldr	r3, [r3, #16]
 8012530:	693a      	ldr	r2, [r7, #16]
 8012532:	0151      	lsls	r1, r2, #5
 8012534:	697a      	ldr	r2, [r7, #20]
 8012536:	440a      	add	r2, r1
 8012538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801253c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012540:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012544:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	695b      	ldr	r3, [r3, #20]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d123      	bne.n	8012596 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	015a      	lsls	r2, r3, #5
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	4413      	add	r3, r2
 8012556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801255a:	691a      	ldr	r2, [r3, #16]
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	689b      	ldr	r3, [r3, #8]
 8012560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012564:	6939      	ldr	r1, [r7, #16]
 8012566:	0148      	lsls	r0, r1, #5
 8012568:	6979      	ldr	r1, [r7, #20]
 801256a:	4401      	add	r1, r0
 801256c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012570:	4313      	orrs	r3, r2
 8012572:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	015a      	lsls	r2, r3, #5
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	4413      	add	r3, r2
 801257c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012580:	691b      	ldr	r3, [r3, #16]
 8012582:	693a      	ldr	r2, [r7, #16]
 8012584:	0151      	lsls	r1, r2, #5
 8012586:	697a      	ldr	r2, [r7, #20]
 8012588:	440a      	add	r2, r1
 801258a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801258e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012592:	6113      	str	r3, [r2, #16]
 8012594:	e033      	b.n	80125fe <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	695a      	ldr	r2, [r3, #20]
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	689b      	ldr	r3, [r3, #8]
 801259e:	4413      	add	r3, r2
 80125a0:	1e5a      	subs	r2, r3, #1
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	689b      	ldr	r3, [r3, #8]
 80125a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80125aa:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	015a      	lsls	r2, r3, #5
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	4413      	add	r3, r2
 80125b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125b8:	691a      	ldr	r2, [r3, #16]
 80125ba:	89fb      	ldrh	r3, [r7, #14]
 80125bc:	04d9      	lsls	r1, r3, #19
 80125be:	4b31      	ldr	r3, [pc, #196]	; (8012684 <USB_EPStartXfer+0x3b4>)
 80125c0:	400b      	ands	r3, r1
 80125c2:	6939      	ldr	r1, [r7, #16]
 80125c4:	0148      	lsls	r0, r1, #5
 80125c6:	6979      	ldr	r1, [r7, #20]
 80125c8:	4401      	add	r1, r0
 80125ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80125ce:	4313      	orrs	r3, r2
 80125d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	015a      	lsls	r2, r3, #5
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	4413      	add	r3, r2
 80125da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125de:	691a      	ldr	r2, [r3, #16]
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	689b      	ldr	r3, [r3, #8]
 80125e4:	89f9      	ldrh	r1, [r7, #14]
 80125e6:	fb01 f303 	mul.w	r3, r1, r3
 80125ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80125ee:	6939      	ldr	r1, [r7, #16]
 80125f0:	0148      	lsls	r0, r1, #5
 80125f2:	6979      	ldr	r1, [r7, #20]
 80125f4:	4401      	add	r1, r0
 80125f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80125fa:	4313      	orrs	r3, r2
 80125fc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	78db      	ldrb	r3, [r3, #3]
 8012602:	2b01      	cmp	r3, #1
 8012604:	d128      	bne.n	8012658 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801260c:	689b      	ldr	r3, [r3, #8]
 801260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012612:	2b00      	cmp	r3, #0
 8012614:	d110      	bne.n	8012638 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	015a      	lsls	r2, r3, #5
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	4413      	add	r3, r2
 801261e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	693a      	ldr	r2, [r7, #16]
 8012626:	0151      	lsls	r1, r2, #5
 8012628:	697a      	ldr	r2, [r7, #20]
 801262a:	440a      	add	r2, r1
 801262c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012630:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012634:	6013      	str	r3, [r2, #0]
 8012636:	e00f      	b.n	8012658 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	015a      	lsls	r2, r3, #5
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	4413      	add	r3, r2
 8012640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	693a      	ldr	r2, [r7, #16]
 8012648:	0151      	lsls	r1, r2, #5
 801264a:	697a      	ldr	r2, [r7, #20]
 801264c:	440a      	add	r2, r1
 801264e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012656:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	015a      	lsls	r2, r3, #5
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	4413      	add	r3, r2
 8012660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	693a      	ldr	r2, [r7, #16]
 8012668:	0151      	lsls	r1, r2, #5
 801266a:	697a      	ldr	r2, [r7, #20]
 801266c:	440a      	add	r2, r1
 801266e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012672:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012676:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012678:	2300      	movs	r3, #0
}
 801267a:	4618      	mov	r0, r3
 801267c:	3718      	adds	r7, #24
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	1ff80000 	.word	0x1ff80000

08012688 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012688:	b480      	push	{r7}
 801268a:	b085      	sub	sp, #20
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	781b      	ldrb	r3, [r3, #0]
 801269a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	785b      	ldrb	r3, [r3, #1]
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	f040 80ab 	bne.w	80127fc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	695b      	ldr	r3, [r3, #20]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d132      	bne.n	8012714 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	015a      	lsls	r2, r3, #5
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	4413      	add	r3, r2
 80126b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126ba:	691b      	ldr	r3, [r3, #16]
 80126bc:	68ba      	ldr	r2, [r7, #8]
 80126be:	0151      	lsls	r1, r2, #5
 80126c0:	68fa      	ldr	r2, [r7, #12]
 80126c2:	440a      	add	r2, r1
 80126c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80126cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80126d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	015a      	lsls	r2, r3, #5
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	4413      	add	r3, r2
 80126da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126de:	691b      	ldr	r3, [r3, #16]
 80126e0:	68ba      	ldr	r2, [r7, #8]
 80126e2:	0151      	lsls	r1, r2, #5
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	440a      	add	r2, r1
 80126e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80126f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	015a      	lsls	r2, r3, #5
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	4413      	add	r3, r2
 80126fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126fe:	691b      	ldr	r3, [r3, #16]
 8012700:	68ba      	ldr	r2, [r7, #8]
 8012702:	0151      	lsls	r1, r2, #5
 8012704:	68fa      	ldr	r2, [r7, #12]
 8012706:	440a      	add	r2, r1
 8012708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801270c:	0cdb      	lsrs	r3, r3, #19
 801270e:	04db      	lsls	r3, r3, #19
 8012710:	6113      	str	r3, [r2, #16]
 8012712:	e04e      	b.n	80127b2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	015a      	lsls	r2, r3, #5
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	4413      	add	r3, r2
 801271c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012720:	691b      	ldr	r3, [r3, #16]
 8012722:	68ba      	ldr	r2, [r7, #8]
 8012724:	0151      	lsls	r1, r2, #5
 8012726:	68fa      	ldr	r2, [r7, #12]
 8012728:	440a      	add	r2, r1
 801272a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801272e:	0cdb      	lsrs	r3, r3, #19
 8012730:	04db      	lsls	r3, r3, #19
 8012732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	015a      	lsls	r2, r3, #5
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	4413      	add	r3, r2
 801273c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012740:	691b      	ldr	r3, [r3, #16]
 8012742:	68ba      	ldr	r2, [r7, #8]
 8012744:	0151      	lsls	r1, r2, #5
 8012746:	68fa      	ldr	r2, [r7, #12]
 8012748:	440a      	add	r2, r1
 801274a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801274e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012752:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012756:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	695a      	ldr	r2, [r3, #20]
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	689b      	ldr	r3, [r3, #8]
 8012760:	429a      	cmp	r2, r3
 8012762:	d903      	bls.n	801276c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	689a      	ldr	r2, [r3, #8]
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	015a      	lsls	r2, r3, #5
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	4413      	add	r3, r2
 8012774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012778:	691b      	ldr	r3, [r3, #16]
 801277a:	68ba      	ldr	r2, [r7, #8]
 801277c:	0151      	lsls	r1, r2, #5
 801277e:	68fa      	ldr	r2, [r7, #12]
 8012780:	440a      	add	r2, r1
 8012782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801278a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	015a      	lsls	r2, r3, #5
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	4413      	add	r3, r2
 8012794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012798:	691a      	ldr	r2, [r3, #16]
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	695b      	ldr	r3, [r3, #20]
 801279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80127a2:	68b9      	ldr	r1, [r7, #8]
 80127a4:	0148      	lsls	r0, r1, #5
 80127a6:	68f9      	ldr	r1, [r7, #12]
 80127a8:	4401      	add	r1, r0
 80127aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80127ae:	4313      	orrs	r3, r2
 80127b0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	015a      	lsls	r2, r3, #5
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	4413      	add	r3, r2
 80127ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	68ba      	ldr	r2, [r7, #8]
 80127c2:	0151      	lsls	r1, r2, #5
 80127c4:	68fa      	ldr	r2, [r7, #12]
 80127c6:	440a      	add	r2, r1
 80127c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80127d0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	695b      	ldr	r3, [r3, #20]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d06d      	beq.n	80128b6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	f003 030f 	and.w	r3, r3, #15
 80127ea:	2101      	movs	r1, #1
 80127ec:	fa01 f303 	lsl.w	r3, r1, r3
 80127f0:	68f9      	ldr	r1, [r7, #12]
 80127f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80127f6:	4313      	orrs	r3, r2
 80127f8:	634b      	str	r3, [r1, #52]	; 0x34
 80127fa:	e05c      	b.n	80128b6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	015a      	lsls	r2, r3, #5
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	4413      	add	r3, r2
 8012804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012808:	691b      	ldr	r3, [r3, #16]
 801280a:	68ba      	ldr	r2, [r7, #8]
 801280c:	0151      	lsls	r1, r2, #5
 801280e:	68fa      	ldr	r2, [r7, #12]
 8012810:	440a      	add	r2, r1
 8012812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012816:	0cdb      	lsrs	r3, r3, #19
 8012818:	04db      	lsls	r3, r3, #19
 801281a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	015a      	lsls	r2, r3, #5
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	4413      	add	r3, r2
 8012824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012828:	691b      	ldr	r3, [r3, #16]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	0151      	lsls	r1, r2, #5
 801282e:	68fa      	ldr	r2, [r7, #12]
 8012830:	440a      	add	r2, r1
 8012832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012836:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801283a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801283e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	695b      	ldr	r3, [r3, #20]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d003      	beq.n	8012850 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	689a      	ldr	r2, [r3, #8]
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	015a      	lsls	r2, r3, #5
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	4413      	add	r3, r2
 8012858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801285c:	691b      	ldr	r3, [r3, #16]
 801285e:	68ba      	ldr	r2, [r7, #8]
 8012860:	0151      	lsls	r1, r2, #5
 8012862:	68fa      	ldr	r2, [r7, #12]
 8012864:	440a      	add	r2, r1
 8012866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801286a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801286e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	015a      	lsls	r2, r3, #5
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	4413      	add	r3, r2
 8012878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801287c:	691a      	ldr	r2, [r3, #16]
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	689b      	ldr	r3, [r3, #8]
 8012882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012886:	68b9      	ldr	r1, [r7, #8]
 8012888:	0148      	lsls	r0, r1, #5
 801288a:	68f9      	ldr	r1, [r7, #12]
 801288c:	4401      	add	r1, r0
 801288e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012892:	4313      	orrs	r3, r2
 8012894:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	015a      	lsls	r2, r3, #5
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	4413      	add	r3, r2
 801289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	68ba      	ldr	r2, [r7, #8]
 80128a6:	0151      	lsls	r1, r2, #5
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	440a      	add	r2, r1
 80128ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80128b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80128b6:	2300      	movs	r3, #0
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3714      	adds	r7, #20
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr

080128c4 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b089      	sub	sp, #36	; 0x24
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	4611      	mov	r1, r2
 80128d0:	461a      	mov	r2, r3
 80128d2:	460b      	mov	r3, r1
 80128d4:	71fb      	strb	r3, [r7, #7]
 80128d6:	4613      	mov	r3, r2
 80128d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80128e2:	88bb      	ldrh	r3, [r7, #4]
 80128e4:	3303      	adds	r3, #3
 80128e6:	089b      	lsrs	r3, r3, #2
 80128e8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80128ea:	2300      	movs	r3, #0
 80128ec:	61bb      	str	r3, [r7, #24]
 80128ee:	e00f      	b.n	8012910 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80128f0:	79fb      	ldrb	r3, [r7, #7]
 80128f2:	031a      	lsls	r2, r3, #12
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	4413      	add	r3, r2
 80128f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80128fc:	461a      	mov	r2, r3
 80128fe:	69fb      	ldr	r3, [r7, #28]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	6013      	str	r3, [r2, #0]
    pSrc++;
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	3304      	adds	r3, #4
 8012908:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	3301      	adds	r3, #1
 801290e:	61bb      	str	r3, [r7, #24]
 8012910:	69ba      	ldr	r2, [r7, #24]
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	429a      	cmp	r2, r3
 8012916:	d3eb      	bcc.n	80128f0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8012918:	2300      	movs	r3, #0
}
 801291a:	4618      	mov	r0, r3
 801291c:	3724      	adds	r7, #36	; 0x24
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr

08012926 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012926:	b480      	push	{r7}
 8012928:	b089      	sub	sp, #36	; 0x24
 801292a:	af00      	add	r7, sp, #0
 801292c:	60f8      	str	r0, [r7, #12]
 801292e:	60b9      	str	r1, [r7, #8]
 8012930:	4613      	mov	r3, r2
 8012932:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801293c:	88fb      	ldrh	r3, [r7, #6]
 801293e:	3303      	adds	r3, #3
 8012940:	089b      	lsrs	r3, r3, #2
 8012942:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012944:	2300      	movs	r3, #0
 8012946:	61bb      	str	r3, [r7, #24]
 8012948:	e00b      	b.n	8012962 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012950:	681a      	ldr	r2, [r3, #0]
 8012952:	69fb      	ldr	r3, [r7, #28]
 8012954:	601a      	str	r2, [r3, #0]
    pDest++;
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	3304      	adds	r3, #4
 801295a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801295c:	69bb      	ldr	r3, [r7, #24]
 801295e:	3301      	adds	r3, #1
 8012960:	61bb      	str	r3, [r7, #24]
 8012962:	69ba      	ldr	r2, [r7, #24]
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	429a      	cmp	r2, r3
 8012968:	d3ef      	bcc.n	801294a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801296a:	69fb      	ldr	r3, [r7, #28]
}
 801296c:	4618      	mov	r0, r3
 801296e:	3724      	adds	r7, #36	; 0x24
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr

08012978 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012978:	b480      	push	{r7}
 801297a:	b085      	sub	sp, #20
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	785b      	ldrb	r3, [r3, #1]
 8012990:	2b01      	cmp	r3, #1
 8012992:	d12c      	bne.n	80129ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	015a      	lsls	r2, r3, #5
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	4413      	add	r3, r2
 801299c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	db12      	blt.n	80129cc <USB_EPSetStall+0x54>
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d00f      	beq.n	80129cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	015a      	lsls	r2, r3, #5
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	4413      	add	r3, r2
 80129b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	68ba      	ldr	r2, [r7, #8]
 80129bc:	0151      	lsls	r1, r2, #5
 80129be:	68fa      	ldr	r2, [r7, #12]
 80129c0:	440a      	add	r2, r1
 80129c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80129ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	015a      	lsls	r2, r3, #5
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	4413      	add	r3, r2
 80129d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	68ba      	ldr	r2, [r7, #8]
 80129dc:	0151      	lsls	r1, r2, #5
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	440a      	add	r2, r1
 80129e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80129ea:	6013      	str	r3, [r2, #0]
 80129ec:	e02b      	b.n	8012a46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	015a      	lsls	r2, r3, #5
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	4413      	add	r3, r2
 80129f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	db12      	blt.n	8012a26 <USB_EPSetStall+0xae>
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d00f      	beq.n	8012a26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	015a      	lsls	r2, r3, #5
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	68ba      	ldr	r2, [r7, #8]
 8012a16:	0151      	lsls	r1, r2, #5
 8012a18:	68fa      	ldr	r2, [r7, #12]
 8012a1a:	440a      	add	r2, r1
 8012a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012a24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	015a      	lsls	r2, r3, #5
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	4413      	add	r3, r2
 8012a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	68ba      	ldr	r2, [r7, #8]
 8012a36:	0151      	lsls	r1, r2, #5
 8012a38:	68fa      	ldr	r2, [r7, #12]
 8012a3a:	440a      	add	r2, r1
 8012a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012a44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012a46:	2300      	movs	r3, #0
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3714      	adds	r7, #20
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr

08012a54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012a54:	b480      	push	{r7}
 8012a56:	b085      	sub	sp, #20
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	785b      	ldrb	r3, [r3, #1]
 8012a6c:	2b01      	cmp	r3, #1
 8012a6e:	d128      	bne.n	8012ac2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	015a      	lsls	r2, r3, #5
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	4413      	add	r3, r2
 8012a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	68ba      	ldr	r2, [r7, #8]
 8012a80:	0151      	lsls	r1, r2, #5
 8012a82:	68fa      	ldr	r2, [r7, #12]
 8012a84:	440a      	add	r2, r1
 8012a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012a8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	78db      	ldrb	r3, [r3, #3]
 8012a94:	2b03      	cmp	r3, #3
 8012a96:	d003      	beq.n	8012aa0 <USB_EPClearStall+0x4c>
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	78db      	ldrb	r3, [r3, #3]
 8012a9c:	2b02      	cmp	r3, #2
 8012a9e:	d138      	bne.n	8012b12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	015a      	lsls	r2, r3, #5
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	4413      	add	r3, r2
 8012aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	68ba      	ldr	r2, [r7, #8]
 8012ab0:	0151      	lsls	r1, r2, #5
 8012ab2:	68fa      	ldr	r2, [r7, #12]
 8012ab4:	440a      	add	r2, r1
 8012ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012abe:	6013      	str	r3, [r2, #0]
 8012ac0:	e027      	b.n	8012b12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	015a      	lsls	r2, r3, #5
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	4413      	add	r3, r2
 8012aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	68ba      	ldr	r2, [r7, #8]
 8012ad2:	0151      	lsls	r1, r2, #5
 8012ad4:	68fa      	ldr	r2, [r7, #12]
 8012ad6:	440a      	add	r2, r1
 8012ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012adc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012ae0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	78db      	ldrb	r3, [r3, #3]
 8012ae6:	2b03      	cmp	r3, #3
 8012ae8:	d003      	beq.n	8012af2 <USB_EPClearStall+0x9e>
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	78db      	ldrb	r3, [r3, #3]
 8012aee:	2b02      	cmp	r3, #2
 8012af0:	d10f      	bne.n	8012b12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	015a      	lsls	r2, r3, #5
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	4413      	add	r3, r2
 8012afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	68ba      	ldr	r2, [r7, #8]
 8012b02:	0151      	lsls	r1, r2, #5
 8012b04:	68fa      	ldr	r2, [r7, #12]
 8012b06:	440a      	add	r2, r1
 8012b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012b10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012b12:	2300      	movs	r3, #0
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3714      	adds	r7, #20
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1e:	4770      	bx	lr

08012b20 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012b20:	b480      	push	{r7}
 8012b22:	b085      	sub	sp, #20
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	460b      	mov	r3, r1
 8012b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	68fa      	ldr	r2, [r7, #12]
 8012b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012b42:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b4a:	681a      	ldr	r2, [r3, #0]
 8012b4c:	78fb      	ldrb	r3, [r7, #3]
 8012b4e:	011b      	lsls	r3, r3, #4
 8012b50:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012b54:	68f9      	ldr	r1, [r7, #12]
 8012b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012b5e:	2300      	movs	r3, #0
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3714      	adds	r7, #20
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr

08012b6c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	68fa      	ldr	r2, [r7, #12]
 8012b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b86:	f023 0302 	bic.w	r3, r3, #2
 8012b8a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012b8c:	2003      	movs	r0, #3
 8012b8e:	f7f4 ff55 	bl	8007a3c <HAL_Delay>

  return HAL_OK;
 8012b92:	2300      	movs	r3, #0
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3710      	adds	r7, #16
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b084      	sub	sp, #16
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	68fa      	ldr	r2, [r7, #12]
 8012bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012bb6:	f043 0302 	orr.w	r3, r3, #2
 8012bba:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012bbc:	2003      	movs	r0, #3
 8012bbe:	f7f4 ff3d 	bl	8007a3c <HAL_Delay>

  return HAL_OK;
 8012bc2:	2300      	movs	r3, #0
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3710      	adds	r7, #16
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b085      	sub	sp, #20
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	695b      	ldr	r3, [r3, #20]
 8012bd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	699b      	ldr	r3, [r3, #24]
 8012bde:	68fa      	ldr	r2, [r7, #12]
 8012be0:	4013      	ands	r3, r2
 8012be2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012be4:	68fb      	ldr	r3, [r7, #12]
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3714      	adds	r7, #20
 8012bea:	46bd      	mov	sp, r7
 8012bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf0:	4770      	bx	lr

08012bf2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012bf2:	b480      	push	{r7}
 8012bf4:	b085      	sub	sp, #20
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c04:	699b      	ldr	r3, [r3, #24]
 8012c06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c0e:	69db      	ldr	r3, [r3, #28]
 8012c10:	68ba      	ldr	r2, [r7, #8]
 8012c12:	4013      	ands	r3, r2
 8012c14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	0c1b      	lsrs	r3, r3, #16
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3714      	adds	r7, #20
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr

08012c26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c26:	b480      	push	{r7}
 8012c28:	b085      	sub	sp, #20
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c38:	699b      	ldr	r3, [r3, #24]
 8012c3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c42:	69db      	ldr	r3, [r3, #28]
 8012c44:	68ba      	ldr	r2, [r7, #8]
 8012c46:	4013      	ands	r3, r2
 8012c48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	b29b      	uxth	r3, r3
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3714      	adds	r7, #20
 8012c52:	46bd      	mov	sp, r7
 8012c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c58:	4770      	bx	lr

08012c5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012c5a:	b480      	push	{r7}
 8012c5c:	b085      	sub	sp, #20
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
 8012c62:	460b      	mov	r3, r1
 8012c64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012c6a:	78fb      	ldrb	r3, [r7, #3]
 8012c6c:	015a      	lsls	r2, r3, #5
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	4413      	add	r3, r2
 8012c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c76:	689b      	ldr	r3, [r3, #8]
 8012c78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c80:	695b      	ldr	r3, [r3, #20]
 8012c82:	68ba      	ldr	r2, [r7, #8]
 8012c84:	4013      	ands	r3, r2
 8012c86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012c88:	68bb      	ldr	r3, [r7, #8]
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3714      	adds	r7, #20
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c94:	4770      	bx	lr

08012c96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012c96:	b480      	push	{r7}
 8012c98:	b087      	sub	sp, #28
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
 8012c9e:	460b      	mov	r3, r1
 8012ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cac:	691b      	ldr	r3, [r3, #16]
 8012cae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012cba:	78fb      	ldrb	r3, [r7, #3]
 8012cbc:	f003 030f 	and.w	r3, r3, #15
 8012cc0:	68fa      	ldr	r2, [r7, #12]
 8012cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8012cc6:	01db      	lsls	r3, r3, #7
 8012cc8:	b2db      	uxtb	r3, r3
 8012cca:	693a      	ldr	r2, [r7, #16]
 8012ccc:	4313      	orrs	r3, r2
 8012cce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012cd0:	78fb      	ldrb	r3, [r7, #3]
 8012cd2:	015a      	lsls	r2, r3, #5
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	4413      	add	r3, r2
 8012cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cdc:	689b      	ldr	r3, [r3, #8]
 8012cde:	693a      	ldr	r2, [r7, #16]
 8012ce0:	4013      	ands	r3, r2
 8012ce2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012ce4:	68bb      	ldr	r3, [r7, #8]
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	371c      	adds	r7, #28
 8012cea:	46bd      	mov	sp, r7
 8012cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf0:	4770      	bx	lr

08012cf2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012cf2:	b480      	push	{r7}
 8012cf4:	b083      	sub	sp, #12
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	695b      	ldr	r3, [r3, #20]
 8012cfe:	f003 0301 	and.w	r3, r3, #1
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	370c      	adds	r7, #12
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr

08012d0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012d0e:	b480      	push	{r7}
 8012d10:	b085      	sub	sp, #20
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	68fa      	ldr	r2, [r7, #12]
 8012d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012d2c:	f023 0307 	bic.w	r3, r3, #7
 8012d30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	68fa      	ldr	r2, [r7, #12]
 8012d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012d44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012d46:	2300      	movs	r3, #0
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3714      	adds	r7, #20
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d52:	4770      	bx	lr

08012d54 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8012d54:	b480      	push	{r7}
 8012d56:	b085      	sub	sp, #20
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	333c      	adds	r3, #60	; 0x3c
 8012d66:	3304      	adds	r3, #4
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	4a1c      	ldr	r2, [pc, #112]	; (8012de0 <USB_EP0_OutStart+0x8c>)
 8012d70:	4293      	cmp	r3, r2
 8012d72:	d90a      	bls.n	8012d8a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d84:	d101      	bne.n	8012d8a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8012d86:	2300      	movs	r3, #0
 8012d88:	e024      	b.n	8012dd4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d90:	461a      	mov	r2, r3
 8012d92:	2300      	movs	r3, #0
 8012d94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d9c:	691b      	ldr	r3, [r3, #16]
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012da4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012da8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012db0:	691b      	ldr	r3, [r3, #16]
 8012db2:	68fa      	ldr	r2, [r7, #12]
 8012db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012db8:	f043 0318 	orr.w	r3, r3, #24
 8012dbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dc4:	691b      	ldr	r3, [r3, #16]
 8012dc6:	68fa      	ldr	r2, [r7, #12]
 8012dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012dd0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8012dd2:	2300      	movs	r3, #0
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3714      	adds	r7, #20
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr
 8012de0:	4f54300a 	.word	0x4f54300a

08012de4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012de4:	b480      	push	{r7}
 8012de6:	b085      	sub	sp, #20
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012dec:	2300      	movs	r3, #0
 8012dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	3301      	adds	r3, #1
 8012df4:	60fb      	str	r3, [r7, #12]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	4a13      	ldr	r2, [pc, #76]	; (8012e48 <USB_CoreReset+0x64>)
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	d901      	bls.n	8012e02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012dfe:	2303      	movs	r3, #3
 8012e00:	e01b      	b.n	8012e3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	691b      	ldr	r3, [r3, #16]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	daf2      	bge.n	8012df0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	691b      	ldr	r3, [r3, #16]
 8012e12:	f043 0201 	orr.w	r2, r3, #1
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	3301      	adds	r3, #1
 8012e1e:	60fb      	str	r3, [r7, #12]
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	4a09      	ldr	r2, [pc, #36]	; (8012e48 <USB_CoreReset+0x64>)
 8012e24:	4293      	cmp	r3, r2
 8012e26:	d901      	bls.n	8012e2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012e28:	2303      	movs	r3, #3
 8012e2a:	e006      	b.n	8012e3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	f003 0301 	and.w	r3, r3, #1
 8012e34:	2b01      	cmp	r3, #1
 8012e36:	d0f0      	beq.n	8012e1a <USB_CoreReset+0x36>

  return HAL_OK;
 8012e38:	2300      	movs	r3, #0
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3714      	adds	r7, #20
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr
 8012e46:	bf00      	nop
 8012e48:	00030d40 	.word	0x00030d40

08012e4c <USBD_WCID_STREAMING_Init>:
* @retval status
*/
/* USBD_WCID_STREAMING_HandleTypeDef USBTEST; */
static uint8_t  USBD_WCID_STREAMING_Init (USBD_HandleTypeDef *pdev, 
                                   uint8_t cfgidx)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b084      	sub	sp, #16
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	460b      	mov	r3, r1
 8012e56:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	73fb      	strb	r3, [r7, #15]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid;    
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8012e5c:	2340      	movs	r3, #64	; 0x40
 8012e5e:	2202      	movs	r2, #2
 8012e60:	2181      	movs	r1, #129	; 0x81
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f7f3 f8a3 	bl	8005fae <USBD_LL_OpenEP>
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
  
#if (N_IN_ENDPOINTS >1)  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8012e68:	2340      	movs	r3, #64	; 0x40
 8012e6a:	2202      	movs	r2, #2
 8012e6c:	2182      	movs	r1, #130	; 0x82
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f7f3 f89d 	bl	8005fae <USBD_LL_OpenEP>
                 DATA_IN_EP2,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
#if (N_IN_ENDPOINTS >2)    
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8012e74:	2340      	movs	r3, #64	; 0x40
 8012e76:	2202      	movs	r2, #2
 8012e78:	2183      	movs	r1, #131	; 0x83
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f7f3 f897 	bl	8005fae <USBD_LL_OpenEP>
                 DATA_IN_EP3,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
#if (N_IN_ENDPOINTS >3)  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8012e80:	2340      	movs	r3, #64	; 0x40
 8012e82:	2202      	movs	r2, #2
 8012e84:	2184      	movs	r1, #132	; 0x84
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7f3 f891 	bl	8005fae <USBD_LL_OpenEP>
                 DATA_IN_EP4,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
#if (N_IN_ENDPOINTS >4)  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8012e8c:	2340      	movs	r3, #64	; 0x40
 8012e8e:	2202      	movs	r2, #2
 8012e90:	2185      	movs	r1, #133	; 0x85
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f7f3 f88b 	bl	8005fae <USBD_LL_OpenEP>
#endif  
#endif
#endif  
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 8012e98:	2340      	movs	r3, #64	; 0x40
 8012e9a:	2202      	movs	r2, #2
 8012e9c:	2101      	movs	r1, #1
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f7f3 f885 	bl	8005fae <USBD_LL_OpenEP>
                 DATA_OUT_EP1,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_OUT_PACKET_SIZE);
  
  
  pdev->pClassData = (USBD_WCID_STREAMING_HandleTypeDef *)USBD_malloc(sizeof (USBD_WCID_STREAMING_HandleTypeDef));/* &USBTEST; */
 8012ea4:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
 8012ea8:	f00c fa24 	bl	801f2f4 <malloc>
 8012eac:	4603      	mov	r3, r0
 8012eae:	461a      	mov	r2, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  memset((void *)pdev->pClassData, 0, sizeof (USBD_WCID_STREAMING_HandleTypeDef));
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ebc:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8012ec0:	2100      	movs	r1, #0
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f00c fa4e 	bl	801f364 <memset>

  if(pdev->pClassData == NULL)
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d102      	bne.n	8012ed8 <USBD_WCID_STREAMING_Init+0x8c>
  {
    ret = 1; 
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	73fb      	strb	r3, [r7, #15]
 8012ed6:	e02b      	b.n	8012f30 <USBD_WCID_STREAMING_Init+0xe4>
  }
  else
  {
    hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ede:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Init();
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	4798      	blx	r3
    
    /* Init Xfer states */
    hwcid->RxState =0;
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	2200      	movs	r2, #0
 8012eee:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    
    uint8_t i = 0;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i< N_IN_ENDPOINTS; i++)
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	73bb      	strb	r3, [r7, #14]
 8012efa:	e00e      	b.n	8012f1a <USBD_WCID_STREAMING_Init+0xce>
    {
      hwcid->TXStates[i] = 0;
 8012efc:	7bba      	ldrb	r2, [r7, #14]
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	3246      	adds	r2, #70	; 0x46
 8012f02:	2100      	movs	r1, #0
 8012f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      hwcid->TxBuffStatus[i] = 0;
 8012f08:	7bbb      	ldrb	r3, [r7, #14]
 8012f0a:	68ba      	ldr	r2, [r7, #8]
 8012f0c:	4413      	add	r3, r2
 8012f0e:	2200      	movs	r2, #0
 8012f10:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    for (i = 0; i< N_IN_ENDPOINTS; i++)
 8012f14:	7bbb      	ldrb	r3, [r7, #14]
 8012f16:	3301      	adds	r3, #1
 8012f18:	73bb      	strb	r3, [r7, #14]
 8012f1a:	7bbb      	ldrb	r3, [r7, #14]
 8012f1c:	2b04      	cmp	r3, #4
 8012f1e:	d9ed      	bls.n	8012efc <USBD_WCID_STREAMING_Init+0xb0>
    }
    
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8012f26:	2340      	movs	r3, #64	; 0x40
 8012f28:	2101      	movs	r1, #1
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7f3 f8e8 	bl	8006100 <USBD_LL_PrepareReceive>
                           DATA_OUT_EP1,
                           hwcid->RxBuffer,
                           SS_WCID_DATA_FS_OUT_PACKET_SIZE);    
  }
  return ret;
 8012f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3710      	adds	r7, #16
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}

08012f3a <USBD_WCID_STREAMING_DeInit>:
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_DeInit (USBD_HandleTypeDef *pdev, 
                                     uint8_t cfgidx)
{
 8012f3a:	b580      	push	{r7, lr}
 8012f3c:	b084      	sub	sp, #16
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
 8012f42:	460b      	mov	r3, r1
 8012f44:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;  
 8012f46:	2300      	movs	r3, #0
 8012f48:	73fb      	strb	r3, [r7, #15]
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP1);  
 8012f4a:	2181      	movs	r1, #129	; 0x81
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f7f3 f848 	bl	8005fe2 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >1)  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP2);
 8012f52:	2182      	movs	r1, #130	; 0x82
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f7f3 f844 	bl	8005fe2 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >2)    
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP3);
 8012f5a:	2183      	movs	r1, #131	; 0x83
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7f3 f840 	bl	8005fe2 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >3)  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP4);
 8012f62:	2184      	movs	r1, #132	; 0x84
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7f3 f83c 	bl	8005fe2 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >4)  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP5);
 8012f6a:	2185      	movs	r1, #133	; 0x85
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7f3 f838 	bl	8005fe2 <USBD_LL_CloseEP>
#endif  
#endif
#endif  
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8012f72:	2101      	movs	r1, #1
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f7f3 f834 	bl	8005fe2 <USBD_LL_CloseEP>
                  DATA_OUT_EP1);
  
  pdev->pClassData = NULL;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  
  /* DeInit  physical Interface components */
    if(pdev->pClassData != NULL)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d00e      	beq.n	8012faa <USBD_WCID_STREAMING_DeInit+0x70>
    {
      ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	4798      	blx	r3
      USBD_free(pdev->pClassData);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f00c f9b1 	bl	801f304 <free>
      pdev->pClassData = NULL;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    }  
  return ret;
 8012faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	3710      	adds	r7, #16
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <USBD_WCID_STREAMING_SOF>:
*         Handles start of frame
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_SOF (USBD_HandleTypeDef *pdev)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b08a      	sub	sp, #40	; 0x28
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
    int i = 0; 
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	627b      	str	r3, [r7, #36]	; 0x24
   __IO uint32_t * TX_States = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->TXStates;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fc6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8012fca:	61fb      	str	r3, [r7, #28]
   __IO uint8_t * TxBuffStatus = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->TxBuffStatus;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fd2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8012fd6:	61bb      	str	r3, [r7, #24]
   uint8_t ** TxBuffer = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->TxBuffer;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fde:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012fe2:	617b      	str	r3, [r7, #20]
   uint16_t * USB_DataSizePerEp = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->USB_DataSizePerEp;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fea:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8012fee:	613b      	str	r3, [r7, #16]
   __IO uint8_t * lastPacketSent = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->lastPacketSent;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ff6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8012ffa:	60fb      	str	r3, [r7, #12]
   uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013002:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8013006:	60bb      	str	r3, [r7, #8]
   
  if(*status == STREAMING_STATUS_STARTED)
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	2b01      	cmp	r3, #1
 801300e:	f040 80e3 	bne.w	80131d8 <USBD_WCID_STREAMING_SOF+0x224>
  {  
  for (i = 0; i < N_IN_ENDPOINTS-1; i++)
 8013012:	2300      	movs	r3, #0
 8013014:	627b      	str	r3, [r7, #36]	; 0x24
 8013016:	e075      	b.n	8013104 <USBD_WCID_STREAMING_SOF+0x150>
  {    
    if(!TX_States[i])
 8013018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301a:	009b      	lsls	r3, r3, #2
 801301c:	69fa      	ldr	r2, [r7, #28]
 801301e:	4413      	add	r3, r2
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d16b      	bne.n	80130fe <USBD_WCID_STREAMING_SOF+0x14a>
    {       
      if( TxBuffStatus[i] == 1)
 8013026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013028:	69ba      	ldr	r2, [r7, #24]
 801302a:	4413      	add	r3, r2
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	b2db      	uxtb	r3, r3
 8013030:	2b01      	cmp	r3, #1
 8013032:	d12a      	bne.n	801308a <USBD_WCID_STREAMING_SOF+0xd6>
      {  
         lastPacketSent[i] = 0;
 8013034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013036:	68fa      	ldr	r2, [r7, #12]
 8013038:	4413      	add	r3, r2
 801303a:	2200      	movs	r2, #0
 801303c:	701a      	strb	r2, [r3, #0]
        TxBuffStatus[i] = 0;
 801303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013040:	69ba      	ldr	r2, [r7, #24]
 8013042:	4413      	add	r3, r2
 8013044:	2200      	movs	r2, #0
 8013046:	701a      	strb	r2, [r3, #0]
        /*send*/
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 8013048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801304a:	009b      	lsls	r3, r3, #2
 801304c:	697a      	ldr	r2, [r7, #20]
 801304e:	4413      	add	r3, r2
 8013050:	6819      	ldr	r1, [r3, #0]
 8013052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013054:	005b      	lsls	r3, r3, #1
 8013056:	693a      	ldr	r2, [r7, #16]
 8013058:	4413      	add	r3, r2
 801305a:	881b      	ldrh	r3, [r3, #0]
 801305c:	085b      	lsrs	r3, r3, #1
 801305e:	b29b      	uxth	r3, r3
 8013060:	461a      	mov	r2, r3
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f000 fa7a 	bl	801355c <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev , (i + 1)|0x80) == USBD_OK)
 8013068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306a:	b2db      	uxtb	r3, r3
 801306c:	3301      	adds	r3, #1
 801306e:	b2db      	uxtb	r3, r3
 8013070:	b25b      	sxtb	r3, r3
 8013072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013076:	b25b      	sxtb	r3, r3
 8013078:	b2db      	uxtb	r3, r3
 801307a:	4619      	mov	r1, r3
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f000 fa9b 	bl	80135b8 <USBD_WCID_STREAMING_TransmitPacket>
 8013082:	4603      	mov	r3, r0
 8013084:	2b00      	cmp	r3, #0
 8013086:	d03a      	beq.n	80130fe <USBD_WCID_STREAMING_SOF+0x14a>
        {          
        } 
        else
        {
          while(1);
 8013088:	e7fe      	b.n	8013088 <USBD_WCID_STREAMING_SOF+0xd4>
        }
      }
      else if (TxBuffStatus[i] == 2)
 801308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308c:	69ba      	ldr	r2, [r7, #24]
 801308e:	4413      	add	r3, r2
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	b2db      	uxtb	r3, r3
 8013094:	2b02      	cmp	r3, #2
 8013096:	d132      	bne.n	80130fe <USBD_WCID_STREAMING_SOF+0x14a>
      {
         lastPacketSent[i] = 0;
 8013098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309a:	68fa      	ldr	r2, [r7, #12]
 801309c:	4413      	add	r3, r2
 801309e:	2200      	movs	r2, #0
 80130a0:	701a      	strb	r2, [r3, #0]
        TxBuffStatus[i] = 0;
 80130a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a4:	69ba      	ldr	r2, [r7, #24]
 80130a6:	4413      	add	r3, r2
 80130a8:	2200      	movs	r2, #0
 80130aa:	701a      	strb	r2, [r3, #0]
        /*send*/
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 80130ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ae:	009b      	lsls	r3, r3, #2
 80130b0:	697a      	ldr	r2, [r7, #20]
 80130b2:	4413      	add	r3, r2
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130b8:	0052      	lsls	r2, r2, #1
 80130ba:	6939      	ldr	r1, [r7, #16]
 80130bc:	440a      	add	r2, r1
 80130be:	8812      	ldrh	r2, [r2, #0]
 80130c0:	0852      	lsrs	r2, r2, #1
 80130c2:	b292      	uxth	r2, r2
 80130c4:	1899      	adds	r1, r3, r2
 80130c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c8:	005b      	lsls	r3, r3, #1
 80130ca:	693a      	ldr	r2, [r7, #16]
 80130cc:	4413      	add	r3, r2
 80130ce:	881b      	ldrh	r3, [r3, #0]
 80130d0:	085b      	lsrs	r3, r3, #1
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	461a      	mov	r2, r3
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f000 fa40 	bl	801355c <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev, (i + 1)|0x80) == USBD_OK)
 80130dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	3301      	adds	r3, #1
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	b25b      	sxtb	r3, r3
 80130e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80130ea:	b25b      	sxtb	r3, r3
 80130ec:	b2db      	uxtb	r3, r3
 80130ee:	4619      	mov	r1, r3
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f000 fa61 	bl	80135b8 <USBD_WCID_STREAMING_TransmitPacket>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d000      	beq.n	80130fe <USBD_WCID_STREAMING_SOF+0x14a>
        {          
        }  
        else
        {
          while(1);
 80130fc:	e7fe      	b.n	80130fc <USBD_WCID_STREAMING_SOF+0x148>
  for (i = 0; i < N_IN_ENDPOINTS-1; i++)
 80130fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013100:	3301      	adds	r3, #1
 8013102:	627b      	str	r3, [r7, #36]	; 0x24
 8013104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013106:	2b03      	cmp	r3, #3
 8013108:	dd86      	ble.n	8013018 <USBD_WCID_STREAMING_SOF+0x64>
    } 
       

  }
  
  if(!TX_States[N_IN_ENDPOINTS-1]) /* Todo: check logic */
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	3310      	adds	r3, #16
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	2b00      	cmp	r3, #0
 8013112:	f040 80b8 	bne.w	8013286 <USBD_WCID_STREAMING_SOF+0x2d2>
  {
    for (; i < N_CHANNELS_MAX; i++)
 8013116:	e05b      	b.n	80131d0 <USBD_WCID_STREAMING_SOF+0x21c>
    {       
      if( TxBuffStatus[i] == 1)
 8013118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311a:	69ba      	ldr	r2, [r7, #24]
 801311c:	4413      	add	r3, r2
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	b2db      	uxtb	r3, r3
 8013122:	2b01      	cmp	r3, #1
 8013124:	d121      	bne.n	801316a <USBD_WCID_STREAMING_SOF+0x1b6>
      {          
        /*send*/
        lastPacketSent[i] = 0;
 8013126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013128:	68fa      	ldr	r2, [r7, #12]
 801312a:	4413      	add	r3, r2
 801312c:	2200      	movs	r2, #0
 801312e:	701a      	strb	r2, [r3, #0]
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	009b      	lsls	r3, r3, #2
 8013134:	697a      	ldr	r2, [r7, #20]
 8013136:	4413      	add	r3, r2
 8013138:	6819      	ldr	r1, [r3, #0]
 801313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313c:	005b      	lsls	r3, r3, #1
 801313e:	693a      	ldr	r2, [r7, #16]
 8013140:	4413      	add	r3, r2
 8013142:	881b      	ldrh	r3, [r3, #0]
 8013144:	085b      	lsrs	r3, r3, #1
 8013146:	b29b      	uxth	r3, r3
 8013148:	461a      	mov	r2, r3
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f000 fa06 	bl	801355c <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev , (N_IN_ENDPOINTS /*- 1 + 1*/)|0x80) == USBD_OK)
 8013150:	2185      	movs	r1, #133	; 0x85
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f000 fa30 	bl	80135b8 <USBD_WCID_STREAMING_TransmitPacket>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d135      	bne.n	80131ca <USBD_WCID_STREAMING_SOF+0x216>
        {  
          TxBuffStatus[i] = 0;
 801315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013160:	69ba      	ldr	r2, [r7, #24]
 8013162:	4413      	add	r3, r2
 8013164:	2200      	movs	r2, #0
 8013166:	701a      	strb	r2, [r3, #0]
 8013168:	e02f      	b.n	80131ca <USBD_WCID_STREAMING_SOF+0x216>
        } 
      }
      else if (TxBuffStatus[i] == 2)
 801316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316c:	69ba      	ldr	r2, [r7, #24]
 801316e:	4413      	add	r3, r2
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	b2db      	uxtb	r3, r3
 8013174:	2b02      	cmp	r3, #2
 8013176:	d128      	bne.n	80131ca <USBD_WCID_STREAMING_SOF+0x216>
      {       
        /*send*/
        lastPacketSent[i] = 0;
 8013178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317a:	68fa      	ldr	r2, [r7, #12]
 801317c:	4413      	add	r3, r2
 801317e:	2200      	movs	r2, #0
 8013180:	701a      	strb	r2, [r3, #0]
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 8013182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	697a      	ldr	r2, [r7, #20]
 8013188:	4413      	add	r3, r2
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801318e:	0052      	lsls	r2, r2, #1
 8013190:	6939      	ldr	r1, [r7, #16]
 8013192:	440a      	add	r2, r1
 8013194:	8812      	ldrh	r2, [r2, #0]
 8013196:	0852      	lsrs	r2, r2, #1
 8013198:	b292      	uxth	r2, r2
 801319a:	1899      	adds	r1, r3, r2
 801319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319e:	005b      	lsls	r3, r3, #1
 80131a0:	693a      	ldr	r2, [r7, #16]
 80131a2:	4413      	add	r3, r2
 80131a4:	881b      	ldrh	r3, [r3, #0]
 80131a6:	085b      	lsrs	r3, r3, #1
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	461a      	mov	r2, r3
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f000 f9d5 	bl	801355c <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev, (N_IN_ENDPOINTS /*- 1 + 1*/)|0x80) == USBD_OK)
 80131b2:	2185      	movs	r1, #133	; 0x85
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f000 f9ff 	bl	80135b8 <USBD_WCID_STREAMING_TransmitPacket>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d104      	bne.n	80131ca <USBD_WCID_STREAMING_SOF+0x216>
        {      
          TxBuffStatus[i] = 0;
 80131c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c2:	69ba      	ldr	r2, [r7, #24]
 80131c4:	4413      	add	r3, r2
 80131c6:	2200      	movs	r2, #0
 80131c8:	701a      	strb	r2, [r3, #0]
    for (; i < N_CHANNELS_MAX; i++)
 80131ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131cc:	3301      	adds	r3, #1
 80131ce:	627b      	str	r3, [r7, #36]	; 0x24
 80131d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d2:	2b08      	cmp	r3, #8
 80131d4:	dda0      	ble.n	8013118 <USBD_WCID_STREAMING_SOF+0x164>
 80131d6:	e056      	b.n	8013286 <USBD_WCID_STREAMING_SOF+0x2d2>
      }     
    }  
  }  
  }
  
  else if(*status == STREAMING_STATUS_STOPPING)
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	2b02      	cmp	r3, #2
 80131de:	d152      	bne.n	8013286 <USBD_WCID_STREAMING_SOF+0x2d2>
  {
        int sum = 0;
 80131e0:	2300      	movs	r3, #0
 80131e2:	623b      	str	r3, [r7, #32]

   for (i = 0; i < N_IN_ENDPOINTS; i++)
 80131e4:	2300      	movs	r3, #0
 80131e6:	627b      	str	r3, [r7, #36]	; 0x24
 80131e8:	e04a      	b.n	8013280 <USBD_WCID_STREAMING_SOF+0x2cc>
  {  
    if(/*!TX_States[i] && */!lastPacketSent[i])
 80131ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ec:	68fa      	ldr	r2, [r7, #12]
 80131ee:	4413      	add	r3, r2
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d131      	bne.n	801325c <USBD_WCID_STREAMING_SOF+0x2a8>
    {  
      lastPacketSent[i] = 1;
 80131f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fa:	68fa      	ldr	r2, [r7, #12]
 80131fc:	4413      	add	r3, r2
 80131fe:	2201      	movs	r2, #1
 8013200:	701a      	strb	r2, [r3, #0]
      
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 8013202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	697a      	ldr	r2, [r7, #20]
 8013208:	4413      	add	r3, r2
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801320e:	0052      	lsls	r2, r2, #1
 8013210:	6939      	ldr	r1, [r7, #16]
 8013212:	440a      	add	r2, r1
 8013214:	8812      	ldrh	r2, [r2, #0]
 8013216:	0852      	lsrs	r2, r2, #1
 8013218:	b292      	uxth	r2, r2
 801321a:	1899      	adds	r1, r3, r2
 801321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321e:	005b      	lsls	r3, r3, #1
 8013220:	693a      	ldr	r2, [r7, #16]
 8013222:	4413      	add	r3, r2
 8013224:	881b      	ldrh	r3, [r3, #0]
 8013226:	085b      	lsrs	r3, r3, #1
 8013228:	b29b      	uxth	r3, r3
 801322a:	461a      	mov	r2, r3
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f000 f995 	bl	801355c <USBD_WCID_STREAMING_SetTxBuffer>
      if(USBD_WCID_STREAMING_TransmitPacket(pdev, (i + 1)|0x80) == USBD_OK)
 8013232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013234:	b2db      	uxtb	r3, r3
 8013236:	3301      	adds	r3, #1
 8013238:	b2db      	uxtb	r3, r3
 801323a:	b25b      	sxtb	r3, r3
 801323c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013240:	b25b      	sxtb	r3, r3
 8013242:	b2db      	uxtb	r3, r3
 8013244:	4619      	mov	r1, r3
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f000 f9b6 	bl	80135b8 <USBD_WCID_STREAMING_TransmitPacket>
 801324c:	4603      	mov	r3, r0
 801324e:	2b00      	cmp	r3, #0
 8013250:	d104      	bne.n	801325c <USBD_WCID_STREAMING_SOF+0x2a8>
        {      
          TxBuffStatus[i] = 0;
 8013252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013254:	69ba      	ldr	r2, [r7, #24]
 8013256:	4413      	add	r3, r2
 8013258:	2200      	movs	r2, #0
 801325a:	701a      	strb	r2, [r3, #0]
        } 
    }  
    
    sum += lastPacketSent[i];
 801325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325e:	68fa      	ldr	r2, [r7, #12]
 8013260:	4413      	add	r3, r2
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	b2db      	uxtb	r3, r3
 8013266:	461a      	mov	r2, r3
 8013268:	6a3b      	ldr	r3, [r7, #32]
 801326a:	4413      	add	r3, r2
 801326c:	623b      	str	r3, [r7, #32]
    if(sum == N_IN_ENDPOINTS)
 801326e:	6a3b      	ldr	r3, [r7, #32]
 8013270:	2b05      	cmp	r3, #5
 8013272:	d102      	bne.n	801327a <USBD_WCID_STREAMING_SOF+0x2c6>
    {
      *status = STREAMING_STATUS_IDLE;
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	2200      	movs	r2, #0
 8013278:	701a      	strb	r2, [r3, #0]
   for (i = 0; i < N_IN_ENDPOINTS; i++)
 801327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327c:	3301      	adds	r3, #1
 801327e:	627b      	str	r3, [r7, #36]	; 0x24
 8013280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013282:	2b04      	cmp	r3, #4
 8013284:	ddb1      	ble.n	80131ea <USBD_WCID_STREAMING_SOF+0x236>
    }
    
  }
  }

  return USBD_OK; 
 8013286:	2300      	movs	r3, #0
}
 8013288:	4618      	mov	r0, r3
 801328a:	3728      	adds	r7, #40	; 0x28
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <USBD_WCID_STREAMING_Setup>:
* @param  req: usb requests
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_Setup (USBD_HandleTypeDef *pdev, 
                                    USBD_SetupReqTypedef *req)
{
 8013290:	b5b0      	push	{r4, r5, r7, lr}
 8013292:	b086      	sub	sp, #24
 8013294:	af02      	add	r7, sp, #8
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132a0:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80132aa:	2b40      	cmp	r3, #64	; 0x40
 80132ac:	d051      	beq.n	8013352 <USBD_WCID_STREAMING_Setup+0xc2>
 80132ae:	2b40      	cmp	r3, #64	; 0x40
 80132b0:	d854      	bhi.n	801335c <USBD_WCID_STREAMING_Setup+0xcc>
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d041      	beq.n	801333a <USBD_WCID_STREAMING_Setup+0xaa>
 80132b6:	2b20      	cmp	r3, #32
 80132b8:	d150      	bne.n	801335c <USBD_WCID_STREAMING_Setup+0xcc>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	88db      	ldrh	r3, [r3, #6]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d04e      	beq.n	8013360 <USBD_WCID_STREAMING_Setup+0xd0>
    {
      if (req->bmRequest & 0x80) /* GET */
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	b25b      	sxtb	r3, r3
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	da1a      	bge.n	8013302 <USBD_WCID_STREAMING_Setup+0x72>
      {
        ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex,
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132d2:	689c      	ldr	r4, [r3, #8]
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	7859      	ldrb	r1, [r3, #1]
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	8858      	ldrh	r0, [r3, #2]
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	889d      	ldrh	r5, [r3, #4]
                                                              (uint8_t *)hwcid->data,
 80132e0:	68fb      	ldr	r3, [r7, #12]
        ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex,
 80132e2:	683a      	ldr	r2, [r7, #0]
 80132e4:	88d2      	ldrh	r2, [r2, #6]
 80132e6:	9201      	str	r2, [sp, #4]
 80132e8:	9300      	str	r3, [sp, #0]
 80132ea:	462b      	mov	r3, r5
 80132ec:	4602      	mov	r2, r0
 80132ee:	2000      	movs	r0, #0
 80132f0:	47a0      	blx	r4
                                                              req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hwcid->data,
 80132f2:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	88db      	ldrh	r3, [r3, #6]
 80132f8:	461a      	mov	r2, r3
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f001 fc21 	bl	8014b42 <USBD_CtlSendData>
        USBD_CtlPrepareRx (pdev, 
                           (uint8_t *)hwcid->data,
                           req->wLength);
      }      
    }
    break;
 8013300:	e02e      	b.n	8013360 <USBD_WCID_STREAMING_Setup+0xd0>
        hwcid->CmdOpCode = req->bRequest;
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	785a      	ldrb	r2, [r3, #1]
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        hwcid->CmdLength = req->wLength;
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	88da      	ldrh	r2, [r3, #6]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
        hwcid->wValue = req->wValue;
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	885a      	ldrh	r2, [r3, #2]
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
        hwcid->wIndex = req->wIndex;
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	889a      	ldrh	r2, [r3, #4]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
                           (uint8_t *)hwcid->data,
 801332a:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	88db      	ldrh	r3, [r3, #6]
 8013330:	461a      	mov	r2, r3
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f001 fc33 	bl	8014b9e <USBD_CtlPrepareRx>
    break;
 8013338:	e012      	b.n	8013360 <USBD_WCID_STREAMING_Setup+0xd0>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	785b      	ldrb	r3, [r3, #1]
 801333e:	2b0a      	cmp	r3, #10
 8013340:	d001      	beq.n	8013346 <USBD_WCID_STREAMING_Setup+0xb6>
 8013342:	2b0b      	cmp	r3, #11
      USBD_CtlSendData (pdev,
                        &ifalt,
                        1);
      break;      
    case USB_REQ_SET_INTERFACE :
      break;
 8013344:	e005      	b.n	8013352 <USBD_WCID_STREAMING_Setup+0xc2>
      USBD_CtlSendData (pdev,
 8013346:	2201      	movs	r2, #1
 8013348:	4908      	ldr	r1, [pc, #32]	; (801336c <USBD_WCID_STREAMING_Setup+0xdc>)
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f001 fbf9 	bl	8014b42 <USBD_CtlSendData>
      break;      
 8013350:	bf00      	nop
    }  
  case USB_REQ_TYPE_VENDOR:    
    
    USBD_VendDevReq (pdev ,req);
 8013352:	6839      	ldr	r1, [r7, #0]
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f000 f981 	bl	801365c <USBD_VendDevReq>
    break;
 801335a:	e002      	b.n	8013362 <USBD_WCID_STREAMING_Setup+0xd2>
  default: 
    break;    
 801335c:	bf00      	nop
 801335e:	e000      	b.n	8013362 <USBD_WCID_STREAMING_Setup+0xd2>
    break;
 8013360:	bf00      	nop
  }
  return USBD_OK;
 8013362:	2300      	movs	r3, #0
}
 8013364:	4618      	mov	r0, r3
 8013366:	3710      	adds	r7, #16
 8013368:	46bd      	mov	sp, r7
 801336a:	bdb0      	pop	{r4, r5, r7, pc}
 801336c:	20000d70 	.word	0x20000d70

08013370 <USBD_WCID_STREAMING_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint number
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013370:	b480      	push	{r7}
 8013372:	b085      	sub	sp, #20
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	460b      	mov	r3, r1
 801337a:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013382:	60fb      	str	r3, [r7, #12]
  hwcid->TXStates[(epnum & 0x7F) - 1] = 0;
 8013384:	78fb      	ldrb	r3, [r7, #3]
 8013386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801338a:	1e5a      	subs	r2, r3, #1
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	3246      	adds	r2, #70	; 0x46
 8013390:	2100      	movs	r1, #0
 8013392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  return USBD_OK;
 8013396:	2300      	movs	r3, #0
}
 8013398:	4618      	mov	r0, r3
 801339a:	3714      	adds	r7, #20
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr

080133a4 <USBD_WCID_STREAMING_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint number
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	460b      	mov	r3, r1
 80133ae:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133b6:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hwcid->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80133b8:	78fb      	ldrb	r3, [r7, #3]
 80133ba:	4619      	mov	r1, r3
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f7f2 feb6 	bl	800612e <USBD_LL_GetRxDataSize>
 80133c2:	4602      	mov	r2, r0
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  if(pdev->pClassData != NULL)  
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d010      	beq.n	80133f6 <USBD_WCID_STREAMING_DataOut+0x52>
  {
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Receive(hwcid->RxBuffer, hwcid->RxLength);    
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	68fa      	ldr	r2, [r7, #12]
 80133de:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
 80133e2:	68fa      	ldr	r2, [r7, #12]
 80133e4:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 80133e8:	4611      	mov	r1, r2
 80133ea:	4798      	blx	r3
    USBD_WCID_STREAMING_ReceivePacket(pdev);
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f000 f919 	bl	8013624 <USBD_WCID_STREAMING_ReceivePacket>
    return USBD_OK;
 80133f2:	2300      	movs	r3, #0
 80133f4:	e000      	b.n	80133f8 <USBD_WCID_STREAMING_DataOut+0x54>
  }
  else
  {
    return USBD_FAIL;
 80133f6:	2302      	movs	r3, #2
  }
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3710      	adds	r7, #16
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}

08013400 <USBD_WCID_STREAMING_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_WCID_STREAMING_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8013400:	b5b0      	push	{r4, r5, r7, lr}
 8013402:	b086      	sub	sp, #24
 8013404:	af02      	add	r7, sp, #8
 8013406:	6078      	str	r0, [r7, #4]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801340e:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hwcid->CmdOpCode != 0xFF))
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013416:	2b00      	cmp	r3, #0
 8013418:	d01f      	beq.n	801345a <USBD_WCID_STREAMING_EP0_RxReady+0x5a>
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8013420:	2bff      	cmp	r3, #255	; 0xff
 8013422:	d01a      	beq.n	801345a <USBD_WCID_STREAMING_EP0_RxReady+0x5a>
  {
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(1, hwcid->CmdOpCode, hwcid->wValue,  hwcid->wIndex,
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801342a:	689c      	ldr	r4, [r3, #8]
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	f8b3 5106 	ldrh.w	r5, [r3, #262]	; 0x106
                                                          (uint8_t *)hwcid->data,
 801343e:	68fb      	ldr	r3, [r7, #12]
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(1, hwcid->CmdOpCode, hwcid->wValue,  hwcid->wIndex,
 8013440:	68fa      	ldr	r2, [r7, #12]
 8013442:	f8b2 2102 	ldrh.w	r2, [r2, #258]	; 0x102
 8013446:	9201      	str	r2, [sp, #4]
 8013448:	9300      	str	r3, [sp, #0]
 801344a:	462b      	mov	r3, r5
 801344c:	4602      	mov	r2, r0
 801344e:	2001      	movs	r0, #1
 8013450:	47a0      	blx	r4
                                                          hwcid->CmdLength);
      hwcid->CmdOpCode = 0xFF;     
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	22ff      	movs	r2, #255	; 0xff
 8013456:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
  return USBD_OK;
 801345a:	2300      	movs	r3, #0
}
 801345c:	4618      	mov	r0, r3
 801345e:	3710      	adds	r7, #16
 8013460:	46bd      	mov	sp, r7
 8013462:	bdb0      	pop	{r4, r5, r7, pc}

08013464 <USBD_WCID_STREAMING_GetFSCfgDesc>:
*         Return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetFSCfgDesc (uint16_t *length)
{
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_CfgFSDesc);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	223c      	movs	r2, #60	; 0x3c
 8013470:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_CfgFSDesc;
 8013472:	4b03      	ldr	r3, [pc, #12]	; (8013480 <USBD_WCID_STREAMING_GetFSCfgDesc+0x1c>)
}
 8013474:	4618      	mov	r0, r3
 8013476:	370c      	adds	r7, #12
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr
 8013480:	20000234 	.word	0x20000234

08013484 <USBD_WCID_STREAMING_GetHSCfgDesc>:
*         Return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetHSCfgDesc (uint16_t *length)
{
 8013484:	b480      	push	{r7}
 8013486:	b083      	sub	sp, #12
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_CfgHSDesc);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	223c      	movs	r2, #60	; 0x3c
 8013490:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_CfgHSDesc;
 8013492:	4b03      	ldr	r3, [pc, #12]	; (80134a0 <USBD_WCID_STREAMING_GetHSCfgDesc+0x1c>)
}
 8013494:	4618      	mov	r0, r3
 8013496:	370c      	adds	r7, #12
 8013498:	46bd      	mov	sp, r7
 801349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349e:	4770      	bx	lr
 80134a0:	200001f8 	.word	0x200001f8

080134a4 <USBD_WCID_STREAMING_GetOtherSpeedCfgDesc>:
*         Return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80134a4:	b480      	push	{r7}
 80134a6:	b083      	sub	sp, #12
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_OtherSpeedCfgDesc);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	223c      	movs	r2, #60	; 0x3c
 80134b0:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_OtherSpeedCfgDesc;
 80134b2:	4b03      	ldr	r3, [pc, #12]	; (80134c0 <USBD_WCID_STREAMING_GetOtherSpeedCfgDesc+0x1c>)
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	370c      	adds	r7, #12
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr
 80134c0:	20000270 	.word	0x20000270

080134c4 <USBD_WCID_STREAMING_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_WCID_STREAMING_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80134c4:	b480      	push	{r7}
 80134c6:	b083      	sub	sp, #12
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_DeviceQualifierDesc);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	220a      	movs	r2, #10
 80134d0:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_DeviceQualifierDesc;
 80134d2:	4b03      	ldr	r3, [pc, #12]	; (80134e0 <USBD_WCID_STREAMING_GetDeviceQualifierDescriptor+0x1c>)
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	370c      	adds	r7, #12
 80134d8:	46bd      	mov	sp, r7
 80134da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134de:	4770      	bx	lr
 80134e0:	20000188 	.word	0x20000188

080134e4 <USBD_WCID_STREAMING_GetUsrStrDescriptor>:
* @param  length : pointer data length
* @param  index : index
* @retval pointer to descriptor buffer
*/
uint8_t  * USBD_WCID_STREAMING_GetUsrStrDescriptor(USBD_HandleTypeDef *pdev ,uint8_t index,  uint16_t *length)
{
 80134e4:	b480      	push	{r7}
 80134e6:	b085      	sub	sp, #20
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	460b      	mov	r3, r1
 80134ee:	607a      	str	r2, [r7, #4]
 80134f0:	72fb      	strb	r3, [r7, #11]
  if ((index) == 0xEE)
 80134f2:	7afb      	ldrb	r3, [r7, #11]
 80134f4:	2bee      	cmp	r3, #238	; 0xee
 80134f6:	d104      	bne.n	8013502 <USBD_WCID_STREAMING_GetUsrStrDescriptor+0x1e>
  {    
    *length = sizeof (USBD_OSStringDesc);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2212      	movs	r2, #18
 80134fc:	801a      	strh	r2, [r3, #0]
    return USBD_OSStringDesc;
 80134fe:	4b04      	ldr	r3, [pc, #16]	; (8013510 <USBD_WCID_STREAMING_GetUsrStrDescriptor+0x2c>)
 8013500:	e000      	b.n	8013504 <USBD_WCID_STREAMING_GetUsrStrDescriptor+0x20>
  }
  
  return 0;
 8013502:	2300      	movs	r3, #0
}
 8013504:	4618      	mov	r0, r3
 8013506:	3714      	adds	r7, #20
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr
 8013510:	20000174 	.word	0x20000174

08013514 <USBD_WCID_STREAMING_OSCompIDDescriptor>:
* @param  length : pointer data length
* @param  speed: Current device speed
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_WCID_STREAMING_OSCompIDDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013514:	b480      	push	{r7}
 8013516:	b083      	sub	sp, #12
 8013518:	af00      	add	r7, sp, #0
 801351a:	4603      	mov	r3, r0
 801351c:	6039      	str	r1, [r7, #0]
 801351e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(OS_IDFeatureDescriptor);
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	2228      	movs	r2, #40	; 0x28
 8013524:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)OS_IDFeatureDescriptor;
 8013526:	4b03      	ldr	r3, [pc, #12]	; (8013534 <USBD_WCID_STREAMING_OSCompIDDescriptor+0x20>)
}
 8013528:	4618      	mov	r0, r3
 801352a:	370c      	adds	r7, #12
 801352c:	46bd      	mov	sp, r7
 801352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013532:	4770      	bx	lr
 8013534:	20000194 	.word	0x20000194

08013538 <USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor>:
* @param  speed: Current device speed
* @param  length: Pointer to data length variable
* @retval Pointer to descriptor buffer
*/
static uint8_t *USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013538:	b480      	push	{r7}
 801353a:	b083      	sub	sp, #12
 801353c:	af00      	add	r7, sp, #0
 801353e:	4603      	mov	r3, r0
 8013540:	6039      	str	r1, [r7, #0]
 8013542:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_ExtPropertiesDescStruct);
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	2294      	movs	r2, #148	; 0x94
 8013548:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)&USBD_ExtPropertiesDesc;
 801354a:	4b03      	ldr	r3, [pc, #12]	; (8013558 <USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor+0x20>)
}
 801354c:	4618      	mov	r0, r3
 801354e:	370c      	adds	r7, #12
 8013550:	46bd      	mov	sp, r7
 8013552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013556:	4770      	bx	lr
 8013558:	200000e0 	.word	0x200000e0

0801355c <USBD_WCID_STREAMING_SetTxBuffer>:
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                    uint8_t  *pbuff,
                                    uint16_t length)
{
 801355c:	b480      	push	{r7}
 801355e:	b087      	sub	sp, #28
 8013560:	af00      	add	r7, sp, #0
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	4613      	mov	r3, r2
 8013568:	80fb      	strh	r3, [r7, #6]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013570:	617b      	str	r3, [r7, #20]
  
  hwcid->CurrentTxBuffer = pbuff;
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	68ba      	ldr	r2, [r7, #8]
 8013576:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  hwcid->TxLength = length;    
 801357a:	88fa      	ldrh	r2, [r7, #6]
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  return USBD_OK;  
 8013582:	2300      	movs	r3, #0
}
 8013584:	4618      	mov	r0, r3
 8013586:	371c      	adds	r7, #28
 8013588:	46bd      	mov	sp, r7
 801358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358e:	4770      	bx	lr

08013590 <USBD_WCID_STREAMING_SetRxDataBuffer>:
* @param  ptr: Rx Buffer
* @retval status
*/
uint8_t  USBD_WCID_STREAMING_SetRxDataBuffer  (USBD_HandleTypeDef   *pdev,
                                    uint8_t  *ptr)
{
 8013590:	b480      	push	{r7}
 8013592:	b085      	sub	sp, #20
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	6039      	str	r1, [r7, #0]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135a0:	60fb      	str	r3, [r7, #12]
  
  hwcid->RxBuffer = ptr;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	683a      	ldr	r2, [r7, #0]
 80135a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  
  return USBD_OK;
 80135aa:	2300      	movs	r3, #0
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3714      	adds	r7, #20
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr

080135b8 <USBD_WCID_STREAMING_TransmitPacket>:
* @param  pdev: device instance
* @param  epnum: endpoint number
* @retval status
*/
uint8_t  USBD_WCID_STREAMING_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t epNumber)
{      
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b084      	sub	sp, #16
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	460b      	mov	r3, r1
 80135c2:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135ca:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d021      	beq.n	801361a <USBD_WCID_STREAMING_TransmitPacket+0x62>
  {
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 80135d6:	78fb      	ldrb	r3, [r7, #3]
 80135d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135dc:	1e5a      	subs	r2, r3, #1
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	3246      	adds	r2, #70	; 0x46
 80135e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d115      	bne.n	8013616 <USBD_WCID_STREAMING_TransmitPacket+0x5e>
    {
      /* Tx Transfer in progress */
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 80135ea:	78fb      	ldrb	r3, [r7, #3]
 80135ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135f0:	1e5a      	subs	r2, r3, #1
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	3246      	adds	r2, #70	; 0x46
 80135f6:	2101      	movs	r1, #1
 80135f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
                       (epNumber),
                       hwcid->CurrentTxBuffer,
                       hwcid->TxLength);
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
      USBD_LL_Transmit(pdev,
 8013608:	b29b      	uxth	r3, r3
 801360a:	78f9      	ldrb	r1, [r7, #3]
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7f2 fd60 	bl	80060d2 <USBD_LL_Transmit>
      
      return USBD_OK;
 8013612:	2300      	movs	r3, #0
 8013614:	e002      	b.n	801361c <USBD_WCID_STREAMING_TransmitPacket+0x64>
    }
    else
    {
      return USBD_BUSY;
 8013616:	2301      	movs	r3, #1
 8013618:	e000      	b.n	801361c <USBD_WCID_STREAMING_TransmitPacket+0x64>
    }
  }
  else
  {
    return USBD_FAIL;
 801361a:	2302      	movs	r3, #2
  }
}
 801361c:	4618      	mov	r0, r3
 801361e:	3710      	adds	r7, #16
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <USBD_WCID_STREAMING_ReceivePacket>:
*         prepare OUT Endpoint for reception
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_WCID_STREAMING_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8013624:	b580      	push	{r7, lr}
 8013626:	b084      	sub	sp, #16
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013632:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801363a:	2b00      	cmp	r3, #0
 801363c:	d009      	beq.n	8013652 <USBD_WCID_STREAMING_ReceivePacket+0x2e>
  {
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8013644:	2340      	movs	r3, #64	; 0x40
 8013646:	2101      	movs	r1, #1
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f7f2 fd59 	bl	8006100 <USBD_LL_PrepareReceive>
                           DATA_OUT_EP1,
                           hwcid->RxBuffer,
                           SS_WCID_DATA_FS_OUT_PACKET_SIZE);
    
    return USBD_OK;
 801364e:	2300      	movs	r3, #0
 8013650:	e000      	b.n	8013654 <USBD_WCID_STREAMING_ReceivePacket+0x30>
  }
  else
  {
    return USBD_FAIL;
 8013652:	2302      	movs	r3, #2
  }
}
 8013654:	4618      	mov	r0, r3
 8013656:	3710      	adds	r7, #16
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <USBD_VendDevReq>:
* @param  pdev: instance
* @param  req: usb requests
* @retval status
*/
static USBD_StatusTypeDef  USBD_VendDevReq (USBD_HandleTypeDef *pdev ,USBD_SetupReqTypedef *req)
{
 801365c:	b5b0      	push	{r4, r5, r7, lr}
 801365e:	b088      	sub	sp, #32
 8013660:	af02      	add	r7, sp, #8
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wIndex) 
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	889b      	ldrh	r3, [r3, #4]
 801366a:	2b05      	cmp	r3, #5
 801366c:	d026      	beq.n	80136bc <USBD_VendDevReq+0x60>
 801366e:	2b05      	cmp	r3, #5
 8013670:	f300 8087 	bgt.w	8013782 <USBD_VendDevReq+0x126>
 8013674:	2b00      	cmp	r3, #0
 8013676:	d040      	beq.n	80136fa <USBD_VendDevReq+0x9e>
 8013678:	2b04      	cmp	r3, #4
 801367a:	f040 8082 	bne.w	8013782 <USBD_VendDevReq+0x126>
  {
  case USB_DESC_TYPE_OS_FEATURE_EXT_PROPERTIES:
    {
      pbuf = USBD_WCID_STREAMING_OSCompIDDescriptor(pdev->dev_speed, &len);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	7c1b      	ldrb	r3, [r3, #16]
 8013682:	f107 020e 	add.w	r2, r7, #14
 8013686:	4611      	mov	r1, r2
 8013688:	4618      	mov	r0, r3
 801368a:	f7ff ff43 	bl	8013514 <USBD_WCID_STREAMING_OSCompIDDescriptor>
 801368e:	6178      	str	r0, [r7, #20]
      if((len != 0)&& (req->wLength != 0))
 8013690:	89fb      	ldrh	r3, [r7, #14]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d077      	beq.n	8013786 <USBD_VendDevReq+0x12a>
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	88db      	ldrh	r3, [r3, #6]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d073      	beq.n	8013786 <USBD_VendDevReq+0x12a>
      {
        
        len = MIN(len , req->wLength);
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	88da      	ldrh	r2, [r3, #6]
 80136a2:	89fb      	ldrh	r3, [r7, #14]
 80136a4:	4293      	cmp	r3, r2
 80136a6:	bf28      	it	cs
 80136a8:	4613      	movcs	r3, r2
 80136aa:	b29b      	uxth	r3, r3
 80136ac:	81fb      	strh	r3, [r7, #14]
        
        USBD_CtlSendData (pdev, 
 80136ae:	89fb      	ldrh	r3, [r7, #14]
 80136b0:	461a      	mov	r2, r3
 80136b2:	6979      	ldr	r1, [r7, #20]
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f001 fa44 	bl	8014b42 <USBD_CtlSendData>
                          pbuf,
                          len);
      }
    }    
    break;
 80136ba:	e064      	b.n	8013786 <USBD_VendDevReq+0x12a>
  case USB_DESC_TYPE_OS_FEATURE_EXT_COMPAT_ID:
    {
      pbuf = USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor(pdev->dev_speed, &len);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	7c1b      	ldrb	r3, [r3, #16]
 80136c0:	f107 020e 	add.w	r2, r7, #14
 80136c4:	4611      	mov	r1, r2
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7ff ff36 	bl	8013538 <USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor>
 80136cc:	6178      	str	r0, [r7, #20]
      if((len != 0)&& (req->wLength != 0))
 80136ce:	89fb      	ldrh	r3, [r7, #14]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d05a      	beq.n	801378a <USBD_VendDevReq+0x12e>
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	88db      	ldrh	r3, [r3, #6]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d056      	beq.n	801378a <USBD_VendDevReq+0x12e>
      {
        
        len = MIN(len , req->wLength);
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	88da      	ldrh	r2, [r3, #6]
 80136e0:	89fb      	ldrh	r3, [r7, #14]
 80136e2:	4293      	cmp	r3, r2
 80136e4:	bf28      	it	cs
 80136e6:	4613      	movcs	r3, r2
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	81fb      	strh	r3, [r7, #14]
        
        USBD_CtlSendData (pdev, 
 80136ec:	89fb      	ldrh	r3, [r7, #14]
 80136ee:	461a      	mov	r2, r3
 80136f0:	6979      	ldr	r1, [r7, #20]
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f001 fa25 	bl	8014b42 <USBD_CtlSendData>
                          pbuf,
                          len);
      }
    }    
    break;  
 80136f8:	e047      	b.n	801378a <USBD_VendDevReq+0x12e>
  case USB_DESC_TYPE_USER_CONTROL_ID:
    {
      USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013700:	613b      	str	r3, [r7, #16]
      if (req->wLength)
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	88db      	ldrh	r3, [r3, #6]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d041      	beq.n	801378e <USBD_VendDevReq+0x132>
      {
        if (req->bmRequest & 0x80)
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	b25b      	sxtb	r3, r3
 8013710:	2b00      	cmp	r3, #0
 8013712:	da1a      	bge.n	801374a <USBD_VendDevReq+0xee>
        {
          ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex, 
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801371a:	689c      	ldr	r4, [r3, #8]
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	7859      	ldrb	r1, [r3, #1]
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	8858      	ldrh	r0, [r3, #2]
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	889d      	ldrh	r5, [r3, #4]
                                                                (uint8_t *)hwcid->data,
 8013728:	693b      	ldr	r3, [r7, #16]
          ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex, 
 801372a:	683a      	ldr	r2, [r7, #0]
 801372c:	88d2      	ldrh	r2, [r2, #6]
 801372e:	9201      	str	r2, [sp, #4]
 8013730:	9300      	str	r3, [sp, #0]
 8013732:	462b      	mov	r3, r5
 8013734:	4602      	mov	r2, r0
 8013736:	2000      	movs	r0, #0
 8013738:	47a0      	blx	r4
                                                                req->wLength);
            
            USBD_CtlSendData (pdev, 
                              (uint8_t *)hwcid->data,
 801373a:	6939      	ldr	r1, [r7, #16]
            USBD_CtlSendData (pdev, 
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	88db      	ldrh	r3, [r3, #6]
 8013740:	461a      	mov	r2, r3
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f001 f9fd 	bl	8014b42 <USBD_CtlSendData>
                             (uint8_t *)hwcid->data,
                             req->wLength);
        }      
      }  
    }
    break;    
 8013748:	e021      	b.n	801378e <USBD_VendDevReq+0x132>
          hwcid->CmdOpCode = req->bRequest;
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	785a      	ldrb	r2, [r3, #1]
 801374e:	693b      	ldr	r3, [r7, #16]
 8013750:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          hwcid->CmdLength = req->wLength;
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	88da      	ldrh	r2, [r3, #6]
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
          hwcid->wValue = req->wValue;
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	885a      	ldrh	r2, [r3, #2]
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
          hwcid->wIndex = req->wIndex;
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	889a      	ldrh	r2, [r3, #4]
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
                             (uint8_t *)hwcid->data,
 8013772:	6939      	ldr	r1, [r7, #16]
          USBD_CtlPrepareRx (pdev, 
 8013774:	683b      	ldr	r3, [r7, #0]
 8013776:	88db      	ldrh	r3, [r3, #6]
 8013778:	461a      	mov	r2, r3
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f001 fa0f 	bl	8014b9e <USBD_CtlPrepareRx>
    break;    
 8013780:	e005      	b.n	801378e <USBD_VendDevReq+0x132>
  default :      
    break;    
 8013782:	bf00      	nop
 8013784:	e004      	b.n	8013790 <USBD_VendDevReq+0x134>
    break;
 8013786:	bf00      	nop
 8013788:	e002      	b.n	8013790 <USBD_VendDevReq+0x134>
    break;  
 801378a:	bf00      	nop
 801378c:	e000      	b.n	8013790 <USBD_VendDevReq+0x134>
    break;    
 801378e:	bf00      	nop
  }  
  return USBD_OK;
 8013790:	2300      	movs	r3, #0
}
 8013792:	4618      	mov	r0, r3
 8013794:	3718      	adds	r7, #24
 8013796:	46bd      	mov	sp, r7
 8013798:	bdb0      	pop	{r4, r5, r7, pc}

0801379a <USBD_WCID_STREAMING_RegisterInterface>:
* @param  fops: WCID Interface callback structure
* @retval status
*/
uint8_t  USBD_WCID_STREAMING_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                          USBD_WCID_STREAMING_ItfTypeDef *fops)
{
 801379a:	b480      	push	{r7}
 801379c:	b085      	sub	sp, #20
 801379e:	af00      	add	r7, sp, #0
 80137a0:	6078      	str	r0, [r7, #4]
 80137a2:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;  
 80137a4:	2302      	movs	r3, #2
 80137a6:	73fb      	strb	r3, [r7, #15]
  if(fops != NULL)
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d005      	beq.n	80137ba <USBD_WCID_STREAMING_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	683a      	ldr	r2, [r7, #0]
 80137b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;    
 80137b6:	2300      	movs	r3, #0
 80137b8:	73fb      	strb	r3, [r7, #15]
  }  
  return ret;
 80137ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80137bc:	4618      	mov	r0, r3
 80137be:	3714      	adds	r7, #20
 80137c0:	46bd      	mov	sp, r7
 80137c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c6:	4770      	bx	lr

080137c8 <USBD_WCID_STREAMING_FillTxDataBuffer>:
* @param  size: length of data in bytes
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_FillTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t* buf, uint32_t size)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b08f      	sub	sp, #60	; 0x3c
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	60f8      	str	r0, [r7, #12]
 80137d0:	607a      	str	r2, [r7, #4]
 80137d2:	603b      	str	r3, [r7, #0]
 80137d4:	460b      	mov	r3, r1
 80137d6:	72fb      	strb	r3, [r7, #11]
    USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137de:	62fb      	str	r3, [r7, #44]	; 0x2c

   uint8_t ** TxBuffer = hwcid->TxBuffer;
 80137e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80137e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __IO uint8_t * TxBuffStatus = hwcid->TxBuffStatus;
 80137e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ea:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80137ee:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 80137f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80137f6:	623b      	str	r3, [r7, #32]
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 80137f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137fa:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 80137fe:	61fb      	str	r3, [r7, #28]
   __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 8013800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013802:	f203 1365 	addw	r3, r3, #357	; 0x165
 8013806:	61bb      	str	r3, [r7, #24]
   
  uint32_t i;   
  uint8_t * txBuffptr = (uint8_t*)TxBuffer[ch_number];  
 8013808:	7afb      	ldrb	r3, [r7, #11]
 801380a:	009b      	lsls	r3, r3, #2
 801380c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801380e:	4413      	add	r3, r2
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	617b      	str	r3, [r7, #20]
  
  if(TxBuffReset[ch_number] == 1)
 8013814:	7afb      	ldrb	r3, [r7, #11]
 8013816:	69ba      	ldr	r2, [r7, #24]
 8013818:	4413      	add	r3, r2
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	b2db      	uxtb	r3, r3
 801381e:	2b01      	cmp	r3, #1
 8013820:	d121      	bne.n	8013866 <USBD_WCID_STREAMING_FillTxDataBuffer+0x9e>
  {
    if(ch_number >= (N_IN_ENDPOINTS-1))
 8013822:	7afb      	ldrb	r3, [r7, #11]
 8013824:	2b03      	cmp	r3, #3
 8013826:	d90e      	bls.n	8013846 <USBD_WCID_STREAMING_FillTxDataBuffer+0x7e>
    {
      txBuffptr[0] = ch_number;
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	7afa      	ldrb	r2, [r7, #11]
 801382c:	701a      	strb	r2, [r3, #0]
      TxBuffIdx[ch_number] = 1;
 801382e:	7afb      	ldrb	r3, [r7, #11]
 8013830:	009b      	lsls	r3, r3, #2
 8013832:	6a3a      	ldr	r2, [r7, #32]
 8013834:	4413      	add	r3, r2
 8013836:	2201      	movs	r2, #1
 8013838:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 801383a:	7afb      	ldrb	r3, [r7, #11]
 801383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801383e:	4413      	add	r3, r2
 8013840:	2200      	movs	r2, #0
 8013842:	701a      	strb	r2, [r3, #0]
 8013844:	e00a      	b.n	801385c <USBD_WCID_STREAMING_FillTxDataBuffer+0x94>
    }
    else
    {
      TxBuffIdx[ch_number] = 0;
 8013846:	7afb      	ldrb	r3, [r7, #11]
 8013848:	009b      	lsls	r3, r3, #2
 801384a:	6a3a      	ldr	r2, [r7, #32]
 801384c:	4413      	add	r3, r2
 801384e:	2200      	movs	r2, #0
 8013850:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 8013852:	7afb      	ldrb	r3, [r7, #11]
 8013854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013856:	4413      	add	r3, r2
 8013858:	2200      	movs	r2, #0
 801385a:	701a      	strb	r2, [r3, #0]
      
    }
    TxBuffReset[ch_number] = 0;
 801385c:	7afb      	ldrb	r3, [r7, #11]
 801385e:	69ba      	ldr	r2, [r7, #24]
 8013860:	4413      	add	r3, r2
 8013862:	2200      	movs	r2, #0
 8013864:	701a      	strb	r2, [r3, #0]
  }
  
  uint32_t txBuffIdx = TxBuffIdx[ch_number];  
 8013866:	7afb      	ldrb	r3, [r7, #11]
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	6a3a      	ldr	r2, [r7, #32]
 801386c:	4413      	add	r3, r2
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	633b      	str	r3, [r7, #48]	; 0x30
  
  for (i = 0; i < size; i++)
 8013872:	2300      	movs	r3, #0
 8013874:	637b      	str	r3, [r7, #52]	; 0x34
 8013876:	e046      	b.n	8013906 <USBD_WCID_STREAMING_FillTxDataBuffer+0x13e>
  {
    txBuffptr[txBuffIdx] = buf[i];    
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801387c:	441a      	add	r2, r3
 801387e:	6979      	ldr	r1, [r7, #20]
 8013880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013882:	440b      	add	r3, r1
 8013884:	7812      	ldrb	r2, [r2, #0]
 8013886:	701a      	strb	r2, [r3, #0]
    txBuffIdx = (txBuffIdx + 1) %  (USB_DataSizePerEp[ch_number]);
 8013888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388a:	3301      	adds	r3, #1
 801388c:	7afa      	ldrb	r2, [r7, #11]
 801388e:	0052      	lsls	r2, r2, #1
 8013890:	69f9      	ldr	r1, [r7, #28]
 8013892:	440a      	add	r2, r1
 8013894:	8812      	ldrh	r2, [r2, #0]
 8013896:	fbb3 f1f2 	udiv	r1, r3, r2
 801389a:	fb02 f201 	mul.w	r2, r2, r1
 801389e:	1a9b      	subs	r3, r3, r2
 80138a0:	633b      	str	r3, [r7, #48]	; 0x30
    
    if(txBuffIdx == (USB_DataSizePerEp[ch_number]/2))
 80138a2:	7afb      	ldrb	r3, [r7, #11]
 80138a4:	005b      	lsls	r3, r3, #1
 80138a6:	69fa      	ldr	r2, [r7, #28]
 80138a8:	4413      	add	r3, r2
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	085b      	lsrs	r3, r3, #1
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	461a      	mov	r2, r3
 80138b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b4:	4293      	cmp	r3, r2
 80138b6:	d110      	bne.n	80138da <USBD_WCID_STREAMING_FillTxDataBuffer+0x112>
    {
      TxBuffStatus[ch_number] = 1;
 80138b8:	7afb      	ldrb	r3, [r7, #11]
 80138ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138bc:	4413      	add	r3, r2
 80138be:	2201      	movs	r2, #1
 80138c0:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 80138c2:	7afb      	ldrb	r3, [r7, #11]
 80138c4:	2b03      	cmp	r3, #3
 80138c6:	d91b      	bls.n	8013900 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 80138c8:	697a      	ldr	r2, [r7, #20]
 80138ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138cc:	4413      	add	r3, r2
 80138ce:	7afa      	ldrb	r2, [r7, #11]
 80138d0:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 80138d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d4:	3301      	adds	r3, #1
 80138d6:	633b      	str	r3, [r7, #48]	; 0x30
 80138d8:	e012      	b.n	8013900 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      }
    }
    else if (txBuffIdx == 0)
 80138da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d10f      	bne.n	8013900 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
    {
      TxBuffStatus[ch_number] = 2;
 80138e0:	7afb      	ldrb	r3, [r7, #11]
 80138e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138e4:	4413      	add	r3, r2
 80138e6:	2202      	movs	r2, #2
 80138e8:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 80138ea:	7afb      	ldrb	r3, [r7, #11]
 80138ec:	2b03      	cmp	r3, #3
 80138ee:	d907      	bls.n	8013900 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 80138f0:	697a      	ldr	r2, [r7, #20]
 80138f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f4:	4413      	add	r3, r2
 80138f6:	7afa      	ldrb	r2, [r7, #11]
 80138f8:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 80138fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fc:	3301      	adds	r3, #1
 80138fe:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < size; i++)
 8013900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013902:	3301      	adds	r3, #1
 8013904:	637b      	str	r3, [r7, #52]	; 0x34
 8013906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	429a      	cmp	r2, r3
 801390c:	d3b4      	bcc.n	8013878 <USBD_WCID_STREAMING_FillTxDataBuffer+0xb0>
      }
    }
  }  
  TxBuffIdx[ch_number] = txBuffIdx;  
 801390e:	7afb      	ldrb	r3, [r7, #11]
 8013910:	009b      	lsls	r3, r3, #2
 8013912:	6a3a      	ldr	r2, [r7, #32]
 8013914:	4413      	add	r3, r2
 8013916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013918:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 801391a:	2300      	movs	r3, #0
}
 801391c:	4618      	mov	r0, r3
 801391e:	373c      	adds	r7, #60	; 0x3c
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <USBD_WCID_STREAMING_CleanTxDataBuffer>:
*         discard remaining data in the buffer of the specified ch
* @param  ch_number: channel number
* @retval status
*/
uint8_t USBD_WCID_STREAMING_CleanTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number)
{
 8013928:	b480      	push	{r7}
 801392a:	b085      	sub	sp, #20
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	460b      	mov	r3, r1
 8013932:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801393a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	f203 1365 	addw	r3, r3, #357	; 0x165
 8013942:	60bb      	str	r3, [r7, #8]
   
  TxBuffReset[ch_number] = 1;  
 8013944:	78fb      	ldrb	r3, [r7, #3]
 8013946:	68ba      	ldr	r2, [r7, #8]
 8013948:	4413      	add	r3, r2
 801394a:	2201      	movs	r2, #1
 801394c:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 801394e:	2300      	movs	r3, #0
}
 8013950:	4618      	mov	r0, r3
 8013952:	3714      	adds	r7, #20
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr

0801395c <USBD_WCID_STREAMING_SetTxDataBuffer>:
*              NOTE! Memory allocated must be at least equal to (size * 2) + 2;
* @param  size: length of each packet in bytes
* @retval status
*/
uint8_t USBD_WCID_STREAMING_SetTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t * ptr, uint16_t size)
{
 801395c:	b480      	push	{r7}
 801395e:	b089      	sub	sp, #36	; 0x24
 8013960:	af00      	add	r7, sp, #0
 8013962:	60f8      	str	r0, [r7, #12]
 8013964:	607a      	str	r2, [r7, #4]
 8013966:	461a      	mov	r2, r3
 8013968:	460b      	mov	r3, r1
 801396a:	72fb      	strb	r3, [r7, #11]
 801396c:	4613      	mov	r3, r2
 801396e:	813b      	strh	r3, [r7, #8]
   USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013976:	61fb      	str	r3, [r7, #28]

   uint8_t ** TxBuffer = hwcid->TxBuffer;
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801397e:	61bb      	str	r3, [r7, #24]
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8013986:	617b      	str	r3, [r7, #20]
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 801398e:	613b      	str	r3, [r7, #16]
   
  if(ch_number >= (N_IN_ENDPOINTS-1))
 8013990:	7afb      	ldrb	r3, [r7, #11]
 8013992:	2b03      	cmp	r3, #3
 8013994:	d919      	bls.n	80139ca <USBD_WCID_STREAMING_SetTxDataBuffer+0x6e>
  {
    TxBuffer[ch_number] = ptr;
 8013996:	7afb      	ldrb	r3, [r7, #11]
 8013998:	009b      	lsls	r3, r3, #2
 801399a:	69ba      	ldr	r2, [r7, #24]
 801399c:	4413      	add	r3, r2
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	601a      	str	r2, [r3, #0]
    USB_DataSizePerEp[ch_number] = size * 2 + 2;  /* Double buffer contains 2 * user data packets + 1st byte of tag for each half*/ 
 80139a2:	893b      	ldrh	r3, [r7, #8]
 80139a4:	3301      	adds	r3, #1
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	7afb      	ldrb	r3, [r7, #11]
 80139aa:	005b      	lsls	r3, r3, #1
 80139ac:	6939      	ldr	r1, [r7, #16]
 80139ae:	440b      	add	r3, r1
 80139b0:	0052      	lsls	r2, r2, #1
 80139b2:	b292      	uxth	r2, r2
 80139b4:	801a      	strh	r2, [r3, #0]
    ptr[0] = ch_number;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	7afa      	ldrb	r2, [r7, #11]
 80139ba:	701a      	strb	r2, [r3, #0]
    TxBuffIdx[ch_number] = 1;
 80139bc:	7afb      	ldrb	r3, [r7, #11]
 80139be:	009b      	lsls	r3, r3, #2
 80139c0:	697a      	ldr	r2, [r7, #20]
 80139c2:	4413      	add	r3, r2
 80139c4:	2201      	movs	r2, #1
 80139c6:	601a      	str	r2, [r3, #0]
 80139c8:	e00d      	b.n	80139e6 <USBD_WCID_STREAMING_SetTxDataBuffer+0x8a>
  }
  else
  {
    TxBuffer[ch_number] = ptr;
 80139ca:	7afb      	ldrb	r3, [r7, #11]
 80139cc:	009b      	lsls	r3, r3, #2
 80139ce:	69ba      	ldr	r2, [r7, #24]
 80139d0:	4413      	add	r3, r2
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	601a      	str	r2, [r3, #0]
    USB_DataSizePerEp[ch_number] = size * 2;  /* Double buffer contains 2 * user data packets*/
 80139d6:	7afb      	ldrb	r3, [r7, #11]
 80139d8:	005b      	lsls	r3, r3, #1
 80139da:	693a      	ldr	r2, [r7, #16]
 80139dc:	4413      	add	r3, r2
 80139de:	893a      	ldrh	r2, [r7, #8]
 80139e0:	0052      	lsls	r2, r2, #1
 80139e2:	b292      	uxth	r2, r2
 80139e4:	801a      	strh	r2, [r3, #0]
  }
  return USBD_OK;
 80139e6:	2300      	movs	r3, #0
}
 80139e8:	4618      	mov	r0, r3
 80139ea:	3724      	adds	r7, #36	; 0x24
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr

080139f4 <USBD_WCID_STREAMING_StartStreaming>:
*         Enable USB streaming.
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_StartStreaming(USBD_HandleTypeDef *pdev)
{
 80139f4:	b480      	push	{r7}
 80139f6:	b087      	sub	sp, #28
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
  uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a02:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8013a06:	613b      	str	r3, [r7, #16]
  
  __IO uint8_t * lastPacketSent = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->lastPacketSent;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a0e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8013a12:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < N_IN_ENDPOINTS-1; i++)
 8013a14:	2300      	movs	r3, #0
 8013a16:	617b      	str	r3, [r7, #20]
 8013a18:	e007      	b.n	8013a2a <USBD_WCID_STREAMING_StartStreaming+0x36>
  {
    lastPacketSent[i] = 1;
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	68fa      	ldr	r2, [r7, #12]
 8013a1e:	4413      	add	r3, r2
 8013a20:	2201      	movs	r2, #1
 8013a22:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < N_IN_ENDPOINTS-1; i++)
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	3301      	adds	r3, #1
 8013a28:	617b      	str	r3, [r7, #20]
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	2b03      	cmp	r3, #3
 8013a2e:	ddf4      	ble.n	8013a1a <USBD_WCID_STREAMING_StartStreaming+0x26>
  }
    
    
  *status = STREAMING_STATUS_STARTED;
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	2201      	movs	r2, #1
 8013a34:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8013a36:	2300      	movs	r3, #0
  
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	371c      	adds	r7, #28
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a42:	4770      	bx	lr

08013a44 <USBD_WCID_STREAMING_StopStreaming>:
*         Enable USB streaming.
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_StopStreaming(USBD_HandleTypeDef *pdev)
{
 8013a44:	b480      	push	{r7}
 8013a46:	b085      	sub	sp, #20
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
  uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a52:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8013a56:	60fb      	str	r3, [r7, #12]
  *status = STREAMING_STATUS_STOPPING;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	2202      	movs	r2, #2
 8013a5c:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8013a5e:	2300      	movs	r3, #0
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3714      	adds	r7, #20
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr

08013a6c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b084      	sub	sp, #16
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	60f8      	str	r0, [r7, #12]
 8013a74:	60b9      	str	r1, [r7, #8]
 8013a76:	4613      	mov	r3, r2
 8013a78:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d101      	bne.n	8013a84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013a80:	2302      	movs	r3, #2
 8013a82:	e01a      	b.n	8013aba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d003      	beq.n	8013a96 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	2200      	movs	r2, #0
 8013a92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d003      	beq.n	8013aa4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	79fa      	ldrb	r2, [r7, #7]
 8013ab0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013ab2:	68f8      	ldr	r0, [r7, #12]
 8013ab4:	f7f2 fa08 	bl	8005ec8 <USBD_LL_Init>

  return USBD_OK;
 8013ab8:	2300      	movs	r3, #0
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	3710      	adds	r7, #16
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}

08013ac2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013ac2:	b480      	push	{r7}
 8013ac4:	b085      	sub	sp, #20
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	6078      	str	r0, [r7, #4]
 8013aca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8013acc:	2300      	movs	r3, #0
 8013ace:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d006      	beq.n	8013ae4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	683a      	ldr	r2, [r7, #0]
 8013ada:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	73fb      	strb	r3, [r7, #15]
 8013ae2:	e001      	b.n	8013ae8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8013ae4:	2302      	movs	r3, #2
 8013ae6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3714      	adds	r7, #20
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr

08013af6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013af6:	b580      	push	{r7, lr}
 8013af8:	b082      	sub	sp, #8
 8013afa:	af00      	add	r7, sp, #0
 8013afc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f7f2 fa46 	bl	8005f90 <USBD_LL_Start>

  return USBD_OK;
 8013b04:	2300      	movs	r3, #0
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3708      	adds	r7, #8
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}

08013b0e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013b0e:	b480      	push	{r7}
 8013b10:	b083      	sub	sp, #12
 8013b12:	af00      	add	r7, sp, #0
 8013b14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013b16:	2300      	movs	r3, #0
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	370c      	adds	r7, #12
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b22:	4770      	bx	lr

08013b24 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b084      	sub	sp, #16
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	460b      	mov	r3, r1
 8013b2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013b30:	2302      	movs	r3, #2
 8013b32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d00c      	beq.n	8013b58 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	78fa      	ldrb	r2, [r7, #3]
 8013b48:	4611      	mov	r1, r2
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	4798      	blx	r3
 8013b4e:	4603      	mov	r3, r0
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d101      	bne.n	8013b58 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8013b54:	2300      	movs	r3, #0
 8013b56:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3710      	adds	r7, #16
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}

08013b62 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013b62:	b580      	push	{r7, lr}
 8013b64:	b082      	sub	sp, #8
 8013b66:	af00      	add	r7, sp, #0
 8013b68:	6078      	str	r0, [r7, #4]
 8013b6a:	460b      	mov	r3, r1
 8013b6c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b74:	685b      	ldr	r3, [r3, #4]
 8013b76:	78fa      	ldrb	r2, [r7, #3]
 8013b78:	4611      	mov	r1, r2
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	4798      	blx	r3

  return USBD_OK;
 8013b7e:	2300      	movs	r3, #0
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013b98:	6839      	ldr	r1, [r7, #0]
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f000 ff29 	bl	80149f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2201      	movs	r2, #1
 8013ba4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013bae:	461a      	mov	r2, r3
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013bbc:	f003 031f 	and.w	r3, r3, #31
 8013bc0:	2b02      	cmp	r3, #2
 8013bc2:	d016      	beq.n	8013bf2 <USBD_LL_SetupStage+0x6a>
 8013bc4:	2b02      	cmp	r3, #2
 8013bc6:	d81c      	bhi.n	8013c02 <USBD_LL_SetupStage+0x7a>
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d002      	beq.n	8013bd2 <USBD_LL_SetupStage+0x4a>
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d008      	beq.n	8013be2 <USBD_LL_SetupStage+0x5a>
 8013bd0:	e017      	b.n	8013c02 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013bd8:	4619      	mov	r1, r3
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f000 fa0a 	bl	8013ff4 <USBD_StdDevReq>
      break;
 8013be0:	e01a      	b.n	8013c18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013be8:	4619      	mov	r1, r3
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f000 fa6c 	bl	80140c8 <USBD_StdItfReq>
      break;
 8013bf0:	e012      	b.n	8013c18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013bf8:	4619      	mov	r1, r3
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f000 faac 	bl	8014158 <USBD_StdEPReq>
      break;
 8013c00:	e00a      	b.n	8013c18 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013c08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	4619      	mov	r1, r3
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f7f2 f9f9 	bl	8006008 <USBD_LL_StallEP>
      break;
 8013c16:	bf00      	nop
  }

  return USBD_OK;
 8013c18:	2300      	movs	r3, #0
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3708      	adds	r7, #8
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}

08013c22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013c22:	b580      	push	{r7, lr}
 8013c24:	b086      	sub	sp, #24
 8013c26:	af00      	add	r7, sp, #0
 8013c28:	60f8      	str	r0, [r7, #12]
 8013c2a:	460b      	mov	r3, r1
 8013c2c:	607a      	str	r2, [r7, #4]
 8013c2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013c30:	7afb      	ldrb	r3, [r7, #11]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d14b      	bne.n	8013cce <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013c3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013c44:	2b03      	cmp	r3, #3
 8013c46:	d134      	bne.n	8013cb2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	68da      	ldr	r2, [r3, #12]
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	691b      	ldr	r3, [r3, #16]
 8013c50:	429a      	cmp	r2, r3
 8013c52:	d919      	bls.n	8013c88 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	68da      	ldr	r2, [r3, #12]
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	691b      	ldr	r3, [r3, #16]
 8013c5c:	1ad2      	subs	r2, r2, r3
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	68da      	ldr	r2, [r3, #12]
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	d203      	bcs.n	8013c76 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013c72:	b29b      	uxth	r3, r3
 8013c74:	e002      	b.n	8013c7c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	461a      	mov	r2, r3
 8013c7e:	6879      	ldr	r1, [r7, #4]
 8013c80:	68f8      	ldr	r0, [r7, #12]
 8013c82:	f000 ffaa 	bl	8014bda <USBD_CtlContinueRx>
 8013c86:	e038      	b.n	8013cfa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c8e:	691b      	ldr	r3, [r3, #16]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d00a      	beq.n	8013caa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013c9a:	2b03      	cmp	r3, #3
 8013c9c:	d105      	bne.n	8013caa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ca4:	691b      	ldr	r3, [r3, #16]
 8013ca6:	68f8      	ldr	r0, [r7, #12]
 8013ca8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8013caa:	68f8      	ldr	r0, [r7, #12]
 8013cac:	f000 ffa7 	bl	8014bfe <USBD_CtlSendStatus>
 8013cb0:	e023      	b.n	8013cfa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013cb8:	2b05      	cmp	r3, #5
 8013cba:	d11e      	bne.n	8013cfa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8013cc4:	2100      	movs	r1, #0
 8013cc6:	68f8      	ldr	r0, [r7, #12]
 8013cc8:	f7f2 f99e 	bl	8006008 <USBD_LL_StallEP>
 8013ccc:	e015      	b.n	8013cfa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cd4:	699b      	ldr	r3, [r3, #24]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d00d      	beq.n	8013cf6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8013ce0:	2b03      	cmp	r3, #3
 8013ce2:	d108      	bne.n	8013cf6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cea:	699b      	ldr	r3, [r3, #24]
 8013cec:	7afa      	ldrb	r2, [r7, #11]
 8013cee:	4611      	mov	r1, r2
 8013cf0:	68f8      	ldr	r0, [r7, #12]
 8013cf2:	4798      	blx	r3
 8013cf4:	e001      	b.n	8013cfa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013cf6:	2302      	movs	r3, #2
 8013cf8:	e000      	b.n	8013cfc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8013cfa:	2300      	movs	r3, #0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3718      	adds	r7, #24
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b086      	sub	sp, #24
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	607a      	str	r2, [r7, #4]
 8013d10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013d12:	7afb      	ldrb	r3, [r7, #11]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d17f      	bne.n	8013e18 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	3314      	adds	r3, #20
 8013d1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013d24:	2b02      	cmp	r3, #2
 8013d26:	d15c      	bne.n	8013de2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	68da      	ldr	r2, [r3, #12]
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	691b      	ldr	r3, [r3, #16]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d915      	bls.n	8013d60 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	68da      	ldr	r2, [r3, #12]
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	691b      	ldr	r3, [r3, #16]
 8013d3c:	1ad2      	subs	r2, r2, r3
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	68db      	ldr	r3, [r3, #12]
 8013d46:	b29b      	uxth	r3, r3
 8013d48:	461a      	mov	r2, r3
 8013d4a:	6879      	ldr	r1, [r7, #4]
 8013d4c:	68f8      	ldr	r0, [r7, #12]
 8013d4e:	f000 ff14 	bl	8014b7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013d52:	2300      	movs	r3, #0
 8013d54:	2200      	movs	r2, #0
 8013d56:	2100      	movs	r1, #0
 8013d58:	68f8      	ldr	r0, [r7, #12]
 8013d5a:	f7f2 f9d1 	bl	8006100 <USBD_LL_PrepareReceive>
 8013d5e:	e04e      	b.n	8013dfe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	689b      	ldr	r3, [r3, #8]
 8013d64:	697a      	ldr	r2, [r7, #20]
 8013d66:	6912      	ldr	r2, [r2, #16]
 8013d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d6c:	fb02 f201 	mul.w	r2, r2, r1
 8013d70:	1a9b      	subs	r3, r3, r2
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d11c      	bne.n	8013db0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8013d76:	697b      	ldr	r3, [r7, #20]
 8013d78:	689a      	ldr	r2, [r3, #8]
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d316      	bcc.n	8013db0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	689a      	ldr	r2, [r3, #8]
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d20f      	bcs.n	8013db0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013d90:	2200      	movs	r2, #0
 8013d92:	2100      	movs	r1, #0
 8013d94:	68f8      	ldr	r0, [r7, #12]
 8013d96:	f000 fef0 	bl	8014b7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013da2:	2300      	movs	r3, #0
 8013da4:	2200      	movs	r2, #0
 8013da6:	2100      	movs	r1, #0
 8013da8:	68f8      	ldr	r0, [r7, #12]
 8013daa:	f7f2 f9a9 	bl	8006100 <USBD_LL_PrepareReceive>
 8013dae:	e026      	b.n	8013dfe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013db6:	68db      	ldr	r3, [r3, #12]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d00a      	beq.n	8013dd2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013dc2:	2b03      	cmp	r3, #3
 8013dc4:	d105      	bne.n	8013dd2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dcc:	68db      	ldr	r3, [r3, #12]
 8013dce:	68f8      	ldr	r0, [r7, #12]
 8013dd0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8013dd2:	2180      	movs	r1, #128	; 0x80
 8013dd4:	68f8      	ldr	r0, [r7, #12]
 8013dd6:	f7f2 f917 	bl	8006008 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8013dda:	68f8      	ldr	r0, [r7, #12]
 8013ddc:	f000 ff22 	bl	8014c24 <USBD_CtlReceiveStatus>
 8013de0:	e00d      	b.n	8013dfe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013de8:	2b04      	cmp	r3, #4
 8013dea:	d004      	beq.n	8013df6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d103      	bne.n	8013dfe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8013df6:	2180      	movs	r1, #128	; 0x80
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f7f2 f905 	bl	8006008 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d11d      	bne.n	8013e44 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8013e08:	68f8      	ldr	r0, [r7, #12]
 8013e0a:	f7ff fe80 	bl	8013b0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	2200      	movs	r2, #0
 8013e12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013e16:	e015      	b.n	8013e44 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e1e:	695b      	ldr	r3, [r3, #20]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d00d      	beq.n	8013e40 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8013e2a:	2b03      	cmp	r3, #3
 8013e2c:	d108      	bne.n	8013e40 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e34:	695b      	ldr	r3, [r3, #20]
 8013e36:	7afa      	ldrb	r2, [r7, #11]
 8013e38:	4611      	mov	r1, r2
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	4798      	blx	r3
 8013e3e:	e001      	b.n	8013e44 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013e40:	2302      	movs	r3, #2
 8013e42:	e000      	b.n	8013e46 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8013e44:	2300      	movs	r3, #0
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3718      	adds	r7, #24
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b082      	sub	sp, #8
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013e56:	2340      	movs	r3, #64	; 0x40
 8013e58:	2200      	movs	r2, #0
 8013e5a:	2100      	movs	r1, #0
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f7f2 f8a6 	bl	8005fae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2201      	movs	r2, #1
 8013e66:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2240      	movs	r2, #64	; 0x40
 8013e6e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013e72:	2340      	movs	r3, #64	; 0x40
 8013e74:	2200      	movs	r2, #0
 8013e76:	2180      	movs	r1, #128	; 0x80
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7f2 f898 	bl	8005fae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2201      	movs	r2, #1
 8013e82:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2240      	movs	r2, #64	; 0x40
 8013e88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2200      	movs	r2, #0
 8013e96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d009      	beq.n	8013ec6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	687a      	ldr	r2, [r7, #4]
 8013ebc:	6852      	ldr	r2, [r2, #4]
 8013ebe:	b2d2      	uxtb	r2, r2
 8013ec0:	4611      	mov	r1, r2
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	4798      	blx	r3
  }

  return USBD_OK;
 8013ec6:	2300      	movs	r3, #0
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3708      	adds	r7, #8
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}

08013ed0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	b083      	sub	sp, #12
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	460b      	mov	r3, r1
 8013eda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	78fa      	ldrb	r2, [r7, #3]
 8013ee0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013ee2:	2300      	movs	r3, #0
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	370c      	adds	r7, #12
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr

08013ef0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013ef0:	b480      	push	{r7}
 8013ef2:	b083      	sub	sp, #12
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2204      	movs	r2, #4
 8013f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013f0c:	2300      	movs	r3, #0
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	370c      	adds	r7, #12
 8013f12:	46bd      	mov	sp, r7
 8013f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f18:	4770      	bx	lr

08013f1a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013f1a:	b480      	push	{r7}
 8013f1c:	b083      	sub	sp, #12
 8013f1e:	af00      	add	r7, sp, #0
 8013f20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f28:	2b04      	cmp	r3, #4
 8013f2a:	d105      	bne.n	8013f38 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013f38:	2300      	movs	r3, #0
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	370c      	adds	r7, #12
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f44:	4770      	bx	lr

08013f46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013f46:	b580      	push	{r7, lr}
 8013f48:	b082      	sub	sp, #8
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f54:	2b03      	cmp	r3, #3
 8013f56:	d10b      	bne.n	8013f70 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f5e:	69db      	ldr	r3, [r3, #28]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d005      	beq.n	8013f70 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f6a:	69db      	ldr	r3, [r3, #28]
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013f70:	2300      	movs	r3, #0
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3708      	adds	r7, #8
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013f7a:	b480      	push	{r7}
 8013f7c:	b083      	sub	sp, #12
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
 8013f82:	460b      	mov	r3, r1
 8013f84:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8013f86:	2300      	movs	r3, #0
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	370c      	adds	r7, #12
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f92:	4770      	bx	lr

08013f94 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013f94:	b480      	push	{r7}
 8013f96:	b083      	sub	sp, #12
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	460b      	mov	r3, r1
 8013f9e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8013fa0:	2300      	movs	r3, #0
}
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	370c      	adds	r7, #12
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fac:	4770      	bx	lr

08013fae <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013fae:	b480      	push	{r7}
 8013fb0:	b083      	sub	sp, #12
 8013fb2:	af00      	add	r7, sp, #0
 8013fb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013fb6:	2300      	movs	r3, #0
}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	370c      	adds	r7, #12
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc2:	4770      	bx	lr

08013fc4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2201      	movs	r2, #1
 8013fd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	687a      	ldr	r2, [r7, #4]
 8013fde:	6852      	ldr	r2, [r2, #4]
 8013fe0:	b2d2      	uxtb	r2, r2
 8013fe2:	4611      	mov	r1, r2
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	4798      	blx	r3

  return USBD_OK;
 8013fe8:	2300      	movs	r3, #0
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	3708      	adds	r7, #8
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
	...

08013ff4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b084      	sub	sp, #16
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ffe:	2300      	movs	r3, #0
 8014000:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801400a:	2b40      	cmp	r3, #64	; 0x40
 801400c:	d005      	beq.n	801401a <USBD_StdDevReq+0x26>
 801400e:	2b40      	cmp	r3, #64	; 0x40
 8014010:	d84f      	bhi.n	80140b2 <USBD_StdDevReq+0xbe>
 8014012:	2b00      	cmp	r3, #0
 8014014:	d009      	beq.n	801402a <USBD_StdDevReq+0x36>
 8014016:	2b20      	cmp	r3, #32
 8014018:	d14b      	bne.n	80140b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014020:	689b      	ldr	r3, [r3, #8]
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	4798      	blx	r3
      break;
 8014028:	e048      	b.n	80140bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	785b      	ldrb	r3, [r3, #1]
 801402e:	2b09      	cmp	r3, #9
 8014030:	d839      	bhi.n	80140a6 <USBD_StdDevReq+0xb2>
 8014032:	a201      	add	r2, pc, #4	; (adr r2, 8014038 <USBD_StdDevReq+0x44>)
 8014034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014038:	08014089 	.word	0x08014089
 801403c:	0801409d 	.word	0x0801409d
 8014040:	080140a7 	.word	0x080140a7
 8014044:	08014093 	.word	0x08014093
 8014048:	080140a7 	.word	0x080140a7
 801404c:	0801406b 	.word	0x0801406b
 8014050:	08014061 	.word	0x08014061
 8014054:	080140a7 	.word	0x080140a7
 8014058:	0801407f 	.word	0x0801407f
 801405c:	08014075 	.word	0x08014075
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014060:	6839      	ldr	r1, [r7, #0]
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f000 f9dc 	bl	8014420 <USBD_GetDescriptor>
          break;
 8014068:	e022      	b.n	80140b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801406a:	6839      	ldr	r1, [r7, #0]
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f000 fb51 	bl	8014714 <USBD_SetAddress>
          break;
 8014072:	e01d      	b.n	80140b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8014074:	6839      	ldr	r1, [r7, #0]
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f000 fb90 	bl	801479c <USBD_SetConfig>
          break;
 801407c:	e018      	b.n	80140b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801407e:	6839      	ldr	r1, [r7, #0]
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f000 fc19 	bl	80148b8 <USBD_GetConfig>
          break;
 8014086:	e013      	b.n	80140b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014088:	6839      	ldr	r1, [r7, #0]
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f000 fc49 	bl	8014922 <USBD_GetStatus>
          break;
 8014090:	e00e      	b.n	80140b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014092:	6839      	ldr	r1, [r7, #0]
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f000 fc77 	bl	8014988 <USBD_SetFeature>
          break;
 801409a:	e009      	b.n	80140b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801409c:	6839      	ldr	r1, [r7, #0]
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f000 fc86 	bl	80149b0 <USBD_ClrFeature>
          break;
 80140a4:	e004      	b.n	80140b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80140a6:	6839      	ldr	r1, [r7, #0]
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f000 fcdf 	bl	8014a6c <USBD_CtlError>
          break;
 80140ae:	bf00      	nop
      }
      break;
 80140b0:	e004      	b.n	80140bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80140b2:	6839      	ldr	r1, [r7, #0]
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f000 fcd9 	bl	8014a6c <USBD_CtlError>
      break;
 80140ba:	bf00      	nop
  }

  return ret;
 80140bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80140be:	4618      	mov	r0, r3
 80140c0:	3710      	adds	r7, #16
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop

080140c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b084      	sub	sp, #16
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80140d2:	2300      	movs	r3, #0
 80140d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80140de:	2b40      	cmp	r3, #64	; 0x40
 80140e0:	d005      	beq.n	80140ee <USBD_StdItfReq+0x26>
 80140e2:	2b40      	cmp	r3, #64	; 0x40
 80140e4:	d82e      	bhi.n	8014144 <USBD_StdItfReq+0x7c>
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d001      	beq.n	80140ee <USBD_StdItfReq+0x26>
 80140ea:	2b20      	cmp	r3, #32
 80140ec:	d12a      	bne.n	8014144 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140f4:	3b01      	subs	r3, #1
 80140f6:	2b02      	cmp	r3, #2
 80140f8:	d81d      	bhi.n	8014136 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	889b      	ldrh	r3, [r3, #4]
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	2b01      	cmp	r3, #1
 8014102:	d813      	bhi.n	801412c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801410a:	689b      	ldr	r3, [r3, #8]
 801410c:	6839      	ldr	r1, [r7, #0]
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	4798      	blx	r3
 8014112:	4603      	mov	r3, r0
 8014114:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	88db      	ldrh	r3, [r3, #6]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d110      	bne.n	8014140 <USBD_StdItfReq+0x78>
 801411e:	7bfb      	ldrb	r3, [r7, #15]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d10d      	bne.n	8014140 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f000 fd6a 	bl	8014bfe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801412a:	e009      	b.n	8014140 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 801412c:	6839      	ldr	r1, [r7, #0]
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f000 fc9c 	bl	8014a6c <USBD_CtlError>
          break;
 8014134:	e004      	b.n	8014140 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8014136:	6839      	ldr	r1, [r7, #0]
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f000 fc97 	bl	8014a6c <USBD_CtlError>
          break;
 801413e:	e000      	b.n	8014142 <USBD_StdItfReq+0x7a>
          break;
 8014140:	bf00      	nop
      }
      break;
 8014142:	e004      	b.n	801414e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8014144:	6839      	ldr	r1, [r7, #0]
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f000 fc90 	bl	8014a6c <USBD_CtlError>
      break;
 801414c:	bf00      	nop
  }

  return USBD_OK;
 801414e:	2300      	movs	r3, #0
}
 8014150:	4618      	mov	r0, r3
 8014152:	3710      	adds	r7, #16
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}

08014158 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b084      	sub	sp, #16
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014162:	2300      	movs	r3, #0
 8014164:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	889b      	ldrh	r3, [r3, #4]
 801416a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014174:	2b40      	cmp	r3, #64	; 0x40
 8014176:	d007      	beq.n	8014188 <USBD_StdEPReq+0x30>
 8014178:	2b40      	cmp	r3, #64	; 0x40
 801417a:	f200 8146 	bhi.w	801440a <USBD_StdEPReq+0x2b2>
 801417e:	2b00      	cmp	r3, #0
 8014180:	d00a      	beq.n	8014198 <USBD_StdEPReq+0x40>
 8014182:	2b20      	cmp	r3, #32
 8014184:	f040 8141 	bne.w	801440a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801418e:	689b      	ldr	r3, [r3, #8]
 8014190:	6839      	ldr	r1, [r7, #0]
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	4798      	blx	r3
      break;
 8014196:	e13d      	b.n	8014414 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80141a0:	2b20      	cmp	r3, #32
 80141a2:	d10a      	bne.n	80141ba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80141aa:	689b      	ldr	r3, [r3, #8]
 80141ac:	6839      	ldr	r1, [r7, #0]
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	4798      	blx	r3
 80141b2:	4603      	mov	r3, r0
 80141b4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80141b6:	7bfb      	ldrb	r3, [r7, #15]
 80141b8:	e12d      	b.n	8014416 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	785b      	ldrb	r3, [r3, #1]
 80141be:	2b03      	cmp	r3, #3
 80141c0:	d007      	beq.n	80141d2 <USBD_StdEPReq+0x7a>
 80141c2:	2b03      	cmp	r3, #3
 80141c4:	f300 811b 	bgt.w	80143fe <USBD_StdEPReq+0x2a6>
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d072      	beq.n	80142b2 <USBD_StdEPReq+0x15a>
 80141cc:	2b01      	cmp	r3, #1
 80141ce:	d03a      	beq.n	8014246 <USBD_StdEPReq+0xee>
 80141d0:	e115      	b.n	80143fe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141d8:	2b02      	cmp	r3, #2
 80141da:	d002      	beq.n	80141e2 <USBD_StdEPReq+0x8a>
 80141dc:	2b03      	cmp	r3, #3
 80141de:	d015      	beq.n	801420c <USBD_StdEPReq+0xb4>
 80141e0:	e02b      	b.n	801423a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80141e2:	7bbb      	ldrb	r3, [r7, #14]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d00c      	beq.n	8014202 <USBD_StdEPReq+0xaa>
 80141e8:	7bbb      	ldrb	r3, [r7, #14]
 80141ea:	2b80      	cmp	r3, #128	; 0x80
 80141ec:	d009      	beq.n	8014202 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80141ee:	7bbb      	ldrb	r3, [r7, #14]
 80141f0:	4619      	mov	r1, r3
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f7f1 ff08 	bl	8006008 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80141f8:	2180      	movs	r1, #128	; 0x80
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f7f1 ff04 	bl	8006008 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014200:	e020      	b.n	8014244 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8014202:	6839      	ldr	r1, [r7, #0]
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f000 fc31 	bl	8014a6c <USBD_CtlError>
              break;
 801420a:	e01b      	b.n	8014244 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	885b      	ldrh	r3, [r3, #2]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d10e      	bne.n	8014232 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8014214:	7bbb      	ldrb	r3, [r7, #14]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d00b      	beq.n	8014232 <USBD_StdEPReq+0xda>
 801421a:	7bbb      	ldrb	r3, [r7, #14]
 801421c:	2b80      	cmp	r3, #128	; 0x80
 801421e:	d008      	beq.n	8014232 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	88db      	ldrh	r3, [r3, #6]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d104      	bne.n	8014232 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014228:	7bbb      	ldrb	r3, [r7, #14]
 801422a:	4619      	mov	r1, r3
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f7f1 feeb 	bl	8006008 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	f000 fce3 	bl	8014bfe <USBD_CtlSendStatus>

              break;
 8014238:	e004      	b.n	8014244 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 801423a:	6839      	ldr	r1, [r7, #0]
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f000 fc15 	bl	8014a6c <USBD_CtlError>
              break;
 8014242:	bf00      	nop
          }
          break;
 8014244:	e0e0      	b.n	8014408 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801424c:	2b02      	cmp	r3, #2
 801424e:	d002      	beq.n	8014256 <USBD_StdEPReq+0xfe>
 8014250:	2b03      	cmp	r3, #3
 8014252:	d015      	beq.n	8014280 <USBD_StdEPReq+0x128>
 8014254:	e026      	b.n	80142a4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014256:	7bbb      	ldrb	r3, [r7, #14]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d00c      	beq.n	8014276 <USBD_StdEPReq+0x11e>
 801425c:	7bbb      	ldrb	r3, [r7, #14]
 801425e:	2b80      	cmp	r3, #128	; 0x80
 8014260:	d009      	beq.n	8014276 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8014262:	7bbb      	ldrb	r3, [r7, #14]
 8014264:	4619      	mov	r1, r3
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f7f1 fece 	bl	8006008 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801426c:	2180      	movs	r1, #128	; 0x80
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f7f1 feca 	bl	8006008 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014274:	e01c      	b.n	80142b0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8014276:	6839      	ldr	r1, [r7, #0]
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f000 fbf7 	bl	8014a6c <USBD_CtlError>
              break;
 801427e:	e017      	b.n	80142b0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	885b      	ldrh	r3, [r3, #2]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d112      	bne.n	80142ae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014288:	7bbb      	ldrb	r3, [r7, #14]
 801428a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801428e:	2b00      	cmp	r3, #0
 8014290:	d004      	beq.n	801429c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8014292:	7bbb      	ldrb	r3, [r7, #14]
 8014294:	4619      	mov	r1, r3
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f7f1 fec9 	bl	800602e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f000 fcae 	bl	8014bfe <USBD_CtlSendStatus>
              }
              break;
 80142a2:	e004      	b.n	80142ae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80142a4:	6839      	ldr	r1, [r7, #0]
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f000 fbe0 	bl	8014a6c <USBD_CtlError>
              break;
 80142ac:	e000      	b.n	80142b0 <USBD_StdEPReq+0x158>
              break;
 80142ae:	bf00      	nop
          }
          break;
 80142b0:	e0aa      	b.n	8014408 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142b8:	2b02      	cmp	r3, #2
 80142ba:	d002      	beq.n	80142c2 <USBD_StdEPReq+0x16a>
 80142bc:	2b03      	cmp	r3, #3
 80142be:	d032      	beq.n	8014326 <USBD_StdEPReq+0x1ce>
 80142c0:	e097      	b.n	80143f2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80142c2:	7bbb      	ldrb	r3, [r7, #14]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d007      	beq.n	80142d8 <USBD_StdEPReq+0x180>
 80142c8:	7bbb      	ldrb	r3, [r7, #14]
 80142ca:	2b80      	cmp	r3, #128	; 0x80
 80142cc:	d004      	beq.n	80142d8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80142ce:	6839      	ldr	r1, [r7, #0]
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	f000 fbcb 	bl	8014a6c <USBD_CtlError>
                break;
 80142d6:	e091      	b.n	80143fc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	da0b      	bge.n	80142f8 <USBD_StdEPReq+0x1a0>
 80142e0:	7bbb      	ldrb	r3, [r7, #14]
 80142e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80142e6:	4613      	mov	r3, r2
 80142e8:	009b      	lsls	r3, r3, #2
 80142ea:	4413      	add	r3, r2
 80142ec:	009b      	lsls	r3, r3, #2
 80142ee:	3310      	adds	r3, #16
 80142f0:	687a      	ldr	r2, [r7, #4]
 80142f2:	4413      	add	r3, r2
 80142f4:	3304      	adds	r3, #4
 80142f6:	e00b      	b.n	8014310 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80142f8:	7bbb      	ldrb	r3, [r7, #14]
 80142fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142fe:	4613      	mov	r3, r2
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	4413      	add	r3, r2
 8014304:	009b      	lsls	r3, r3, #2
 8014306:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801430a:	687a      	ldr	r2, [r7, #4]
 801430c:	4413      	add	r3, r2
 801430e:	3304      	adds	r3, #4
 8014310:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	2200      	movs	r2, #0
 8014316:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	2202      	movs	r2, #2
 801431c:	4619      	mov	r1, r3
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	f000 fc0f 	bl	8014b42 <USBD_CtlSendData>
              break;
 8014324:	e06a      	b.n	80143fc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801432a:	2b00      	cmp	r3, #0
 801432c:	da11      	bge.n	8014352 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801432e:	7bbb      	ldrb	r3, [r7, #14]
 8014330:	f003 020f 	and.w	r2, r3, #15
 8014334:	6879      	ldr	r1, [r7, #4]
 8014336:	4613      	mov	r3, r2
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	4413      	add	r3, r2
 801433c:	009b      	lsls	r3, r3, #2
 801433e:	440b      	add	r3, r1
 8014340:	3318      	adds	r3, #24
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d117      	bne.n	8014378 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8014348:	6839      	ldr	r1, [r7, #0]
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f000 fb8e 	bl	8014a6c <USBD_CtlError>
                  break;
 8014350:	e054      	b.n	80143fc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014352:	7bbb      	ldrb	r3, [r7, #14]
 8014354:	f003 020f 	and.w	r2, r3, #15
 8014358:	6879      	ldr	r1, [r7, #4]
 801435a:	4613      	mov	r3, r2
 801435c:	009b      	lsls	r3, r3, #2
 801435e:	4413      	add	r3, r2
 8014360:	009b      	lsls	r3, r3, #2
 8014362:	440b      	add	r3, r1
 8014364:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d104      	bne.n	8014378 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801436e:	6839      	ldr	r1, [r7, #0]
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f000 fb7b 	bl	8014a6c <USBD_CtlError>
                  break;
 8014376:	e041      	b.n	80143fc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801437c:	2b00      	cmp	r3, #0
 801437e:	da0b      	bge.n	8014398 <USBD_StdEPReq+0x240>
 8014380:	7bbb      	ldrb	r3, [r7, #14]
 8014382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014386:	4613      	mov	r3, r2
 8014388:	009b      	lsls	r3, r3, #2
 801438a:	4413      	add	r3, r2
 801438c:	009b      	lsls	r3, r3, #2
 801438e:	3310      	adds	r3, #16
 8014390:	687a      	ldr	r2, [r7, #4]
 8014392:	4413      	add	r3, r2
 8014394:	3304      	adds	r3, #4
 8014396:	e00b      	b.n	80143b0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014398:	7bbb      	ldrb	r3, [r7, #14]
 801439a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801439e:	4613      	mov	r3, r2
 80143a0:	009b      	lsls	r3, r3, #2
 80143a2:	4413      	add	r3, r2
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80143aa:	687a      	ldr	r2, [r7, #4]
 80143ac:	4413      	add	r3, r2
 80143ae:	3304      	adds	r3, #4
 80143b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80143b2:	7bbb      	ldrb	r3, [r7, #14]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d002      	beq.n	80143be <USBD_StdEPReq+0x266>
 80143b8:	7bbb      	ldrb	r3, [r7, #14]
 80143ba:	2b80      	cmp	r3, #128	; 0x80
 80143bc:	d103      	bne.n	80143c6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	2200      	movs	r2, #0
 80143c2:	601a      	str	r2, [r3, #0]
 80143c4:	e00e      	b.n	80143e4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80143c6:	7bbb      	ldrb	r3, [r7, #14]
 80143c8:	4619      	mov	r1, r3
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	f7f1 fe42 	bl	8006054 <USBD_LL_IsStallEP>
 80143d0:	4603      	mov	r3, r0
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d003      	beq.n	80143de <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	2201      	movs	r2, #1
 80143da:	601a      	str	r2, [r3, #0]
 80143dc:	e002      	b.n	80143e4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	2200      	movs	r2, #0
 80143e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	2202      	movs	r2, #2
 80143e8:	4619      	mov	r1, r3
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f000 fba9 	bl	8014b42 <USBD_CtlSendData>
              break;
 80143f0:	e004      	b.n	80143fc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80143f2:	6839      	ldr	r1, [r7, #0]
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f000 fb39 	bl	8014a6c <USBD_CtlError>
              break;
 80143fa:	bf00      	nop
          }
          break;
 80143fc:	e004      	b.n	8014408 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80143fe:	6839      	ldr	r1, [r7, #0]
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f000 fb33 	bl	8014a6c <USBD_CtlError>
          break;
 8014406:	bf00      	nop
      }
      break;
 8014408:	e004      	b.n	8014414 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 801440a:	6839      	ldr	r1, [r7, #0]
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f000 fb2d 	bl	8014a6c <USBD_CtlError>
      break;
 8014412:	bf00      	nop
  }

  return ret;
 8014414:	7bfb      	ldrb	r3, [r7, #15]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3710      	adds	r7, #16
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
	...

08014420 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b084      	sub	sp, #16
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801442a:	2300      	movs	r3, #0
 801442c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801442e:	2300      	movs	r3, #0
 8014430:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014432:	2300      	movs	r3, #0
 8014434:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	885b      	ldrh	r3, [r3, #2]
 801443a:	0a1b      	lsrs	r3, r3, #8
 801443c:	b29b      	uxth	r3, r3
 801443e:	3b01      	subs	r3, #1
 8014440:	2b06      	cmp	r3, #6
 8014442:	f200 813b 	bhi.w	80146bc <USBD_GetDescriptor+0x29c>
 8014446:	a201      	add	r2, pc, #4	; (adr r2, 801444c <USBD_GetDescriptor+0x2c>)
 8014448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801444c:	08014469 	.word	0x08014469
 8014450:	08014481 	.word	0x08014481
 8014454:	080144c1 	.word	0x080144c1
 8014458:	080146bd 	.word	0x080146bd
 801445c:	080146bd 	.word	0x080146bd
 8014460:	0801465d 	.word	0x0801465d
 8014464:	08014689 	.word	0x08014689
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	687a      	ldr	r2, [r7, #4]
 8014472:	7c12      	ldrb	r2, [r2, #16]
 8014474:	f107 0108 	add.w	r1, r7, #8
 8014478:	4610      	mov	r0, r2
 801447a:	4798      	blx	r3
 801447c:	60f8      	str	r0, [r7, #12]
      break;
 801447e:	e125      	b.n	80146cc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	7c1b      	ldrb	r3, [r3, #16]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d10d      	bne.n	80144a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014490:	f107 0208 	add.w	r2, r7, #8
 8014494:	4610      	mov	r0, r2
 8014496:	4798      	blx	r3
 8014498:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	3301      	adds	r3, #1
 801449e:	2202      	movs	r2, #2
 80144a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80144a2:	e113      	b.n	80146cc <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ac:	f107 0208 	add.w	r2, r7, #8
 80144b0:	4610      	mov	r0, r2
 80144b2:	4798      	blx	r3
 80144b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	3301      	adds	r3, #1
 80144ba:	2202      	movs	r2, #2
 80144bc:	701a      	strb	r2, [r3, #0]
      break;
 80144be:	e105      	b.n	80146cc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	885b      	ldrh	r3, [r3, #2]
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	2b05      	cmp	r3, #5
 80144c8:	f200 80ac 	bhi.w	8014624 <USBD_GetDescriptor+0x204>
 80144cc:	a201      	add	r2, pc, #4	; (adr r2, 80144d4 <USBD_GetDescriptor+0xb4>)
 80144ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144d2:	bf00      	nop
 80144d4:	080144ed 	.word	0x080144ed
 80144d8:	08014521 	.word	0x08014521
 80144dc:	08014555 	.word	0x08014555
 80144e0:	08014589 	.word	0x08014589
 80144e4:	080145bd 	.word	0x080145bd
 80144e8:	080145f1 	.word	0x080145f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d00b      	beq.n	8014510 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80144fe:	685b      	ldr	r3, [r3, #4]
 8014500:	687a      	ldr	r2, [r7, #4]
 8014502:	7c12      	ldrb	r2, [r2, #16]
 8014504:	f107 0108 	add.w	r1, r7, #8
 8014508:	4610      	mov	r0, r2
 801450a:	4798      	blx	r3
 801450c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801450e:	e0a4      	b.n	801465a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014510:	6839      	ldr	r1, [r7, #0]
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 faaa 	bl	8014a6c <USBD_CtlError>
            err++;
 8014518:	7afb      	ldrb	r3, [r7, #11]
 801451a:	3301      	adds	r3, #1
 801451c:	72fb      	strb	r3, [r7, #11]
          break;
 801451e:	e09c      	b.n	801465a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014526:	689b      	ldr	r3, [r3, #8]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d00b      	beq.n	8014544 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014532:	689b      	ldr	r3, [r3, #8]
 8014534:	687a      	ldr	r2, [r7, #4]
 8014536:	7c12      	ldrb	r2, [r2, #16]
 8014538:	f107 0108 	add.w	r1, r7, #8
 801453c:	4610      	mov	r0, r2
 801453e:	4798      	blx	r3
 8014540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014542:	e08a      	b.n	801465a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014544:	6839      	ldr	r1, [r7, #0]
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f000 fa90 	bl	8014a6c <USBD_CtlError>
            err++;
 801454c:	7afb      	ldrb	r3, [r7, #11]
 801454e:	3301      	adds	r3, #1
 8014550:	72fb      	strb	r3, [r7, #11]
          break;
 8014552:	e082      	b.n	801465a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d00b      	beq.n	8014578 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	7c12      	ldrb	r2, [r2, #16]
 801456c:	f107 0108 	add.w	r1, r7, #8
 8014570:	4610      	mov	r0, r2
 8014572:	4798      	blx	r3
 8014574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014576:	e070      	b.n	801465a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014578:	6839      	ldr	r1, [r7, #0]
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 fa76 	bl	8014a6c <USBD_CtlError>
            err++;
 8014580:	7afb      	ldrb	r3, [r7, #11]
 8014582:	3301      	adds	r3, #1
 8014584:	72fb      	strb	r3, [r7, #11]
          break;
 8014586:	e068      	b.n	801465a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801458e:	691b      	ldr	r3, [r3, #16]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d00b      	beq.n	80145ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801459a:	691b      	ldr	r3, [r3, #16]
 801459c:	687a      	ldr	r2, [r7, #4]
 801459e:	7c12      	ldrb	r2, [r2, #16]
 80145a0:	f107 0108 	add.w	r1, r7, #8
 80145a4:	4610      	mov	r0, r2
 80145a6:	4798      	blx	r3
 80145a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145aa:	e056      	b.n	801465a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80145ac:	6839      	ldr	r1, [r7, #0]
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f000 fa5c 	bl	8014a6c <USBD_CtlError>
            err++;
 80145b4:	7afb      	ldrb	r3, [r7, #11]
 80145b6:	3301      	adds	r3, #1
 80145b8:	72fb      	strb	r3, [r7, #11]
          break;
 80145ba:	e04e      	b.n	801465a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80145c2:	695b      	ldr	r3, [r3, #20]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d00b      	beq.n	80145e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80145ce:	695b      	ldr	r3, [r3, #20]
 80145d0:	687a      	ldr	r2, [r7, #4]
 80145d2:	7c12      	ldrb	r2, [r2, #16]
 80145d4:	f107 0108 	add.w	r1, r7, #8
 80145d8:	4610      	mov	r0, r2
 80145da:	4798      	blx	r3
 80145dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145de:	e03c      	b.n	801465a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80145e0:	6839      	ldr	r1, [r7, #0]
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 fa42 	bl	8014a6c <USBD_CtlError>
            err++;
 80145e8:	7afb      	ldrb	r3, [r7, #11]
 80145ea:	3301      	adds	r3, #1
 80145ec:	72fb      	strb	r3, [r7, #11]
          break;
 80145ee:	e034      	b.n	801465a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80145f6:	699b      	ldr	r3, [r3, #24]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d00b      	beq.n	8014614 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014602:	699b      	ldr	r3, [r3, #24]
 8014604:	687a      	ldr	r2, [r7, #4]
 8014606:	7c12      	ldrb	r2, [r2, #16]
 8014608:	f107 0108 	add.w	r1, r7, #8
 801460c:	4610      	mov	r0, r2
 801460e:	4798      	blx	r3
 8014610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014612:	e022      	b.n	801465a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014614:	6839      	ldr	r1, [r7, #0]
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f000 fa28 	bl	8014a6c <USBD_CtlError>
            err++;
 801461c:	7afb      	ldrb	r3, [r7, #11]
 801461e:	3301      	adds	r3, #1
 8014620:	72fb      	strb	r3, [r7, #11]
          break;
 8014622:	e01a      	b.n	801465a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801462c:	2b00      	cmp	r3, #0
 801462e:	d00c      	beq.n	801464a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014638:	683a      	ldr	r2, [r7, #0]
 801463a:	8852      	ldrh	r2, [r2, #2]
 801463c:	b2d1      	uxtb	r1, r2
 801463e:	f107 0208 	add.w	r2, r7, #8
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	4798      	blx	r3
 8014646:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014648:	e006      	b.n	8014658 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 801464a:	6839      	ldr	r1, [r7, #0]
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f000 fa0d 	bl	8014a6c <USBD_CtlError>
            err++;
 8014652:	7afb      	ldrb	r3, [r7, #11]
 8014654:	3301      	adds	r3, #1
 8014656:	72fb      	strb	r3, [r7, #11]
          break;
 8014658:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 801465a:	e037      	b.n	80146cc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	7c1b      	ldrb	r3, [r3, #16]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d109      	bne.n	8014678 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801466c:	f107 0208 	add.w	r2, r7, #8
 8014670:	4610      	mov	r0, r2
 8014672:	4798      	blx	r3
 8014674:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014676:	e029      	b.n	80146cc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8014678:	6839      	ldr	r1, [r7, #0]
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f000 f9f6 	bl	8014a6c <USBD_CtlError>
        err++;
 8014680:	7afb      	ldrb	r3, [r7, #11]
 8014682:	3301      	adds	r3, #1
 8014684:	72fb      	strb	r3, [r7, #11]
      break;
 8014686:	e021      	b.n	80146cc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	7c1b      	ldrb	r3, [r3, #16]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d10d      	bne.n	80146ac <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014698:	f107 0208 	add.w	r2, r7, #8
 801469c:	4610      	mov	r0, r2
 801469e:	4798      	blx	r3
 80146a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	3301      	adds	r3, #1
 80146a6:	2207      	movs	r2, #7
 80146a8:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80146aa:	e00f      	b.n	80146cc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80146ac:	6839      	ldr	r1, [r7, #0]
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f000 f9dc 	bl	8014a6c <USBD_CtlError>
        err++;
 80146b4:	7afb      	ldrb	r3, [r7, #11]
 80146b6:	3301      	adds	r3, #1
 80146b8:	72fb      	strb	r3, [r7, #11]
      break;
 80146ba:	e007      	b.n	80146cc <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80146bc:	6839      	ldr	r1, [r7, #0]
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f000 f9d4 	bl	8014a6c <USBD_CtlError>
      err++;
 80146c4:	7afb      	ldrb	r3, [r7, #11]
 80146c6:	3301      	adds	r3, #1
 80146c8:	72fb      	strb	r3, [r7, #11]
      break;
 80146ca:	bf00      	nop
  }

  if (err != 0U)
 80146cc:	7afb      	ldrb	r3, [r7, #11]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d11c      	bne.n	801470c <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80146d2:	893b      	ldrh	r3, [r7, #8]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d011      	beq.n	80146fc <USBD_GetDescriptor+0x2dc>
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	88db      	ldrh	r3, [r3, #6]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d00d      	beq.n	80146fc <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	88da      	ldrh	r2, [r3, #6]
 80146e4:	893b      	ldrh	r3, [r7, #8]
 80146e6:	4293      	cmp	r3, r2
 80146e8:	bf28      	it	cs
 80146ea:	4613      	movcs	r3, r2
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80146f0:	893b      	ldrh	r3, [r7, #8]
 80146f2:	461a      	mov	r2, r3
 80146f4:	68f9      	ldr	r1, [r7, #12]
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f000 fa23 	bl	8014b42 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	88db      	ldrh	r3, [r3, #6]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d104      	bne.n	801470e <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f000 fa7a 	bl	8014bfe <USBD_CtlSendStatus>
 801470a:	e000      	b.n	801470e <USBD_GetDescriptor+0x2ee>
    return;
 801470c:	bf00      	nop
    }
  }
}
 801470e:	3710      	adds	r7, #16
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}

08014714 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b084      	sub	sp, #16
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	889b      	ldrh	r3, [r3, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d130      	bne.n	8014788 <USBD_SetAddress+0x74>
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	88db      	ldrh	r3, [r3, #6]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d12c      	bne.n	8014788 <USBD_SetAddress+0x74>
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	885b      	ldrh	r3, [r3, #2]
 8014732:	2b7f      	cmp	r3, #127	; 0x7f
 8014734:	d828      	bhi.n	8014788 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	885b      	ldrh	r3, [r3, #2]
 801473a:	b2db      	uxtb	r3, r3
 801473c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014740:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014748:	2b03      	cmp	r3, #3
 801474a:	d104      	bne.n	8014756 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801474c:	6839      	ldr	r1, [r7, #0]
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f000 f98c 	bl	8014a6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014754:	e01d      	b.n	8014792 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	7bfa      	ldrb	r2, [r7, #15]
 801475a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801475e:	7bfb      	ldrb	r3, [r7, #15]
 8014760:	4619      	mov	r1, r3
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f7f1 fca2 	bl	80060ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f000 fa48 	bl	8014bfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801476e:	7bfb      	ldrb	r3, [r7, #15]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d004      	beq.n	801477e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2202      	movs	r2, #2
 8014778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801477c:	e009      	b.n	8014792 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2201      	movs	r2, #1
 8014782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014786:	e004      	b.n	8014792 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014788:	6839      	ldr	r1, [r7, #0]
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 f96e 	bl	8014a6c <USBD_CtlError>
  }
}
 8014790:	bf00      	nop
 8014792:	bf00      	nop
 8014794:	3710      	adds	r7, #16
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
	...

0801479c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b082      	sub	sp, #8
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
 80147a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	885b      	ldrh	r3, [r3, #2]
 80147aa:	b2da      	uxtb	r2, r3
 80147ac:	4b41      	ldr	r3, [pc, #260]	; (80148b4 <USBD_SetConfig+0x118>)
 80147ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80147b0:	4b40      	ldr	r3, [pc, #256]	; (80148b4 <USBD_SetConfig+0x118>)
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	2b01      	cmp	r3, #1
 80147b6:	d904      	bls.n	80147c2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80147b8:	6839      	ldr	r1, [r7, #0]
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f000 f956 	bl	8014a6c <USBD_CtlError>
 80147c0:	e075      	b.n	80148ae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147c8:	2b02      	cmp	r3, #2
 80147ca:	d002      	beq.n	80147d2 <USBD_SetConfig+0x36>
 80147cc:	2b03      	cmp	r3, #3
 80147ce:	d023      	beq.n	8014818 <USBD_SetConfig+0x7c>
 80147d0:	e062      	b.n	8014898 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80147d2:	4b38      	ldr	r3, [pc, #224]	; (80148b4 <USBD_SetConfig+0x118>)
 80147d4:	781b      	ldrb	r3, [r3, #0]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d01a      	beq.n	8014810 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80147da:	4b36      	ldr	r3, [pc, #216]	; (80148b4 <USBD_SetConfig+0x118>)
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	461a      	mov	r2, r3
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2203      	movs	r2, #3
 80147e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80147ec:	4b31      	ldr	r3, [pc, #196]	; (80148b4 <USBD_SetConfig+0x118>)
 80147ee:	781b      	ldrb	r3, [r3, #0]
 80147f0:	4619      	mov	r1, r3
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f7ff f996 	bl	8013b24 <USBD_SetClassConfig>
 80147f8:	4603      	mov	r3, r0
 80147fa:	2b02      	cmp	r3, #2
 80147fc:	d104      	bne.n	8014808 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80147fe:	6839      	ldr	r1, [r7, #0]
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f000 f933 	bl	8014a6c <USBD_CtlError>
            return;
 8014806:	e052      	b.n	80148ae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f000 f9f8 	bl	8014bfe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801480e:	e04e      	b.n	80148ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f000 f9f4 	bl	8014bfe <USBD_CtlSendStatus>
        break;
 8014816:	e04a      	b.n	80148ae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014818:	4b26      	ldr	r3, [pc, #152]	; (80148b4 <USBD_SetConfig+0x118>)
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d112      	bne.n	8014846 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2202      	movs	r2, #2
 8014824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8014828:	4b22      	ldr	r3, [pc, #136]	; (80148b4 <USBD_SetConfig+0x118>)
 801482a:	781b      	ldrb	r3, [r3, #0]
 801482c:	461a      	mov	r2, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014832:	4b20      	ldr	r3, [pc, #128]	; (80148b4 <USBD_SetConfig+0x118>)
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	4619      	mov	r1, r3
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f7ff f992 	bl	8013b62 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f000 f9dd 	bl	8014bfe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014844:	e033      	b.n	80148ae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8014846:	4b1b      	ldr	r3, [pc, #108]	; (80148b4 <USBD_SetConfig+0x118>)
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	461a      	mov	r2, r3
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	685b      	ldr	r3, [r3, #4]
 8014850:	429a      	cmp	r2, r3
 8014852:	d01d      	beq.n	8014890 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	685b      	ldr	r3, [r3, #4]
 8014858:	b2db      	uxtb	r3, r3
 801485a:	4619      	mov	r1, r3
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f7ff f980 	bl	8013b62 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014862:	4b14      	ldr	r3, [pc, #80]	; (80148b4 <USBD_SetConfig+0x118>)
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	461a      	mov	r2, r3
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801486c:	4b11      	ldr	r3, [pc, #68]	; (80148b4 <USBD_SetConfig+0x118>)
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	4619      	mov	r1, r3
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f7ff f956 	bl	8013b24 <USBD_SetClassConfig>
 8014878:	4603      	mov	r3, r0
 801487a:	2b02      	cmp	r3, #2
 801487c:	d104      	bne.n	8014888 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801487e:	6839      	ldr	r1, [r7, #0]
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f000 f8f3 	bl	8014a6c <USBD_CtlError>
            return;
 8014886:	e012      	b.n	80148ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f000 f9b8 	bl	8014bfe <USBD_CtlSendStatus>
        break;
 801488e:	e00e      	b.n	80148ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f000 f9b4 	bl	8014bfe <USBD_CtlSendStatus>
        break;
 8014896:	e00a      	b.n	80148ae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8014898:	6839      	ldr	r1, [r7, #0]
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f000 f8e6 	bl	8014a6c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80148a0:	4b04      	ldr	r3, [pc, #16]	; (80148b4 <USBD_SetConfig+0x118>)
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	4619      	mov	r1, r3
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f7ff f95b 	bl	8013b62 <USBD_ClrClassConfig>
        break;
 80148ac:	bf00      	nop
    }
  }
}
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	20000d71 	.word	0x20000d71

080148b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	88db      	ldrh	r3, [r3, #6]
 80148c6:	2b01      	cmp	r3, #1
 80148c8:	d004      	beq.n	80148d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80148ca:	6839      	ldr	r1, [r7, #0]
 80148cc:	6878      	ldr	r0, [r7, #4]
 80148ce:	f000 f8cd 	bl	8014a6c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80148d2:	e022      	b.n	801491a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148da:	2b02      	cmp	r3, #2
 80148dc:	dc02      	bgt.n	80148e4 <USBD_GetConfig+0x2c>
 80148de:	2b00      	cmp	r3, #0
 80148e0:	dc03      	bgt.n	80148ea <USBD_GetConfig+0x32>
 80148e2:	e015      	b.n	8014910 <USBD_GetConfig+0x58>
 80148e4:	2b03      	cmp	r3, #3
 80148e6:	d00b      	beq.n	8014900 <USBD_GetConfig+0x48>
 80148e8:	e012      	b.n	8014910 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2200      	movs	r2, #0
 80148ee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	3308      	adds	r3, #8
 80148f4:	2201      	movs	r2, #1
 80148f6:	4619      	mov	r1, r3
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f000 f922 	bl	8014b42 <USBD_CtlSendData>
        break;
 80148fe:	e00c      	b.n	801491a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	3304      	adds	r3, #4
 8014904:	2201      	movs	r2, #1
 8014906:	4619      	mov	r1, r3
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f000 f91a 	bl	8014b42 <USBD_CtlSendData>
        break;
 801490e:	e004      	b.n	801491a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8014910:	6839      	ldr	r1, [r7, #0]
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f000 f8aa 	bl	8014a6c <USBD_CtlError>
        break;
 8014918:	bf00      	nop
}
 801491a:	bf00      	nop
 801491c:	3708      	adds	r7, #8
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}

08014922 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014922:	b580      	push	{r7, lr}
 8014924:	b082      	sub	sp, #8
 8014926:	af00      	add	r7, sp, #0
 8014928:	6078      	str	r0, [r7, #4]
 801492a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014932:	3b01      	subs	r3, #1
 8014934:	2b02      	cmp	r3, #2
 8014936:	d81e      	bhi.n	8014976 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	88db      	ldrh	r3, [r3, #6]
 801493c:	2b02      	cmp	r3, #2
 801493e:	d004      	beq.n	801494a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8014940:	6839      	ldr	r1, [r7, #0]
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f000 f892 	bl	8014a6c <USBD_CtlError>
        break;
 8014948:	e01a      	b.n	8014980 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2201      	movs	r2, #1
 801494e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014956:	2b00      	cmp	r3, #0
 8014958:	d005      	beq.n	8014966 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	68db      	ldr	r3, [r3, #12]
 801495e:	f043 0202 	orr.w	r2, r3, #2
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	330c      	adds	r3, #12
 801496a:	2202      	movs	r2, #2
 801496c:	4619      	mov	r1, r3
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f000 f8e7 	bl	8014b42 <USBD_CtlSendData>
      break;
 8014974:	e004      	b.n	8014980 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8014976:	6839      	ldr	r1, [r7, #0]
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f000 f877 	bl	8014a6c <USBD_CtlError>
      break;
 801497e:	bf00      	nop
  }
}
 8014980:	bf00      	nop
 8014982:	3708      	adds	r7, #8
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}

08014988 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	885b      	ldrh	r3, [r3, #2]
 8014996:	2b01      	cmp	r3, #1
 8014998:	d106      	bne.n	80149a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2201      	movs	r2, #1
 801499e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f000 f92b 	bl	8014bfe <USBD_CtlSendStatus>
  }
}
 80149a8:	bf00      	nop
 80149aa:	3708      	adds	r7, #8
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}

080149b0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149c0:	3b01      	subs	r3, #1
 80149c2:	2b02      	cmp	r3, #2
 80149c4:	d80b      	bhi.n	80149de <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	885b      	ldrh	r3, [r3, #2]
 80149ca:	2b01      	cmp	r3, #1
 80149cc:	d10c      	bne.n	80149e8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2200      	movs	r2, #0
 80149d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f000 f911 	bl	8014bfe <USBD_CtlSendStatus>
      }
      break;
 80149dc:	e004      	b.n	80149e8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80149de:	6839      	ldr	r1, [r7, #0]
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f000 f843 	bl	8014a6c <USBD_CtlError>
      break;
 80149e6:	e000      	b.n	80149ea <USBD_ClrFeature+0x3a>
      break;
 80149e8:	bf00      	nop
  }
}
 80149ea:	bf00      	nop
 80149ec:	3708      	adds	r7, #8
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}

080149f2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80149f2:	b480      	push	{r7}
 80149f4:	b083      	sub	sp, #12
 80149f6:	af00      	add	r7, sp, #0
 80149f8:	6078      	str	r0, [r7, #4]
 80149fa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	781a      	ldrb	r2, [r3, #0]
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	785a      	ldrb	r2, [r3, #1]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	3302      	adds	r3, #2
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	b29a      	uxth	r2, r3
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	3303      	adds	r3, #3
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	021b      	lsls	r3, r3, #8
 8014a1e:	b29b      	uxth	r3, r3
 8014a20:	4413      	add	r3, r2
 8014a22:	b29a      	uxth	r2, r3
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	3304      	adds	r3, #4
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	b29a      	uxth	r2, r3
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	3305      	adds	r3, #5
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	021b      	lsls	r3, r3, #8
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	4413      	add	r3, r2
 8014a3e:	b29a      	uxth	r2, r3
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	3306      	adds	r3, #6
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	b29a      	uxth	r2, r3
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	3307      	adds	r3, #7
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	b29b      	uxth	r3, r3
 8014a54:	021b      	lsls	r3, r3, #8
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	4413      	add	r3, r2
 8014a5a:	b29a      	uxth	r2, r3
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	80da      	strh	r2, [r3, #6]

}
 8014a60:	bf00      	nop
 8014a62:	370c      	adds	r7, #12
 8014a64:	46bd      	mov	sp, r7
 8014a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6a:	4770      	bx	lr

08014a6c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8014a76:	2180      	movs	r1, #128	; 0x80
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f7f1 fac5 	bl	8006008 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014a7e:	2100      	movs	r1, #0
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f7f1 fac1 	bl	8006008 <USBD_LL_StallEP>
}
 8014a86:	bf00      	nop
 8014a88:	3708      	adds	r7, #8
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd80      	pop	{r7, pc}

08014a8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014a8e:	b580      	push	{r7, lr}
 8014a90:	b086      	sub	sp, #24
 8014a92:	af00      	add	r7, sp, #0
 8014a94:	60f8      	str	r0, [r7, #12]
 8014a96:	60b9      	str	r1, [r7, #8]
 8014a98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d032      	beq.n	8014b0a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8014aa4:	68f8      	ldr	r0, [r7, #12]
 8014aa6:	f000 f834 	bl	8014b12 <USBD_GetLen>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	3301      	adds	r3, #1
 8014aae:	b29b      	uxth	r3, r3
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	b29a      	uxth	r2, r3
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8014ab8:	7dfb      	ldrb	r3, [r7, #23]
 8014aba:	1c5a      	adds	r2, r3, #1
 8014abc:	75fa      	strb	r2, [r7, #23]
 8014abe:	461a      	mov	r2, r3
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	4413      	add	r3, r2
 8014ac4:	687a      	ldr	r2, [r7, #4]
 8014ac6:	7812      	ldrb	r2, [r2, #0]
 8014ac8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8014aca:	7dfb      	ldrb	r3, [r7, #23]
 8014acc:	1c5a      	adds	r2, r3, #1
 8014ace:	75fa      	strb	r2, [r7, #23]
 8014ad0:	461a      	mov	r2, r3
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	2203      	movs	r2, #3
 8014ad8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8014ada:	e012      	b.n	8014b02 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	1c5a      	adds	r2, r3, #1
 8014ae0:	60fa      	str	r2, [r7, #12]
 8014ae2:	7dfa      	ldrb	r2, [r7, #23]
 8014ae4:	1c51      	adds	r1, r2, #1
 8014ae6:	75f9      	strb	r1, [r7, #23]
 8014ae8:	4611      	mov	r1, r2
 8014aea:	68ba      	ldr	r2, [r7, #8]
 8014aec:	440a      	add	r2, r1
 8014aee:	781b      	ldrb	r3, [r3, #0]
 8014af0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8014af2:	7dfb      	ldrb	r3, [r7, #23]
 8014af4:	1c5a      	adds	r2, r3, #1
 8014af6:	75fa      	strb	r2, [r7, #23]
 8014af8:	461a      	mov	r2, r3
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	4413      	add	r3, r2
 8014afe:	2200      	movs	r2, #0
 8014b00:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	781b      	ldrb	r3, [r3, #0]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d1e8      	bne.n	8014adc <USBD_GetString+0x4e>
    }
  }
}
 8014b0a:	bf00      	nop
 8014b0c:	3718      	adds	r7, #24
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}

08014b12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014b12:	b480      	push	{r7}
 8014b14:	b085      	sub	sp, #20
 8014b16:	af00      	add	r7, sp, #0
 8014b18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8014b1e:	e005      	b.n	8014b2c <USBD_GetLen+0x1a>
  {
    len++;
 8014b20:	7bfb      	ldrb	r3, [r7, #15]
 8014b22:	3301      	adds	r3, #1
 8014b24:	73fb      	strb	r3, [r7, #15]
    buf++;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	3301      	adds	r3, #1
 8014b2a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d1f5      	bne.n	8014b20 <USBD_GetLen+0xe>
  }

  return len;
 8014b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3714      	adds	r7, #20
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b40:	4770      	bx	lr

08014b42 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8014b42:	b580      	push	{r7, lr}
 8014b44:	b084      	sub	sp, #16
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	60f8      	str	r0, [r7, #12]
 8014b4a:	60b9      	str	r1, [r7, #8]
 8014b4c:	4613      	mov	r3, r2
 8014b4e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	2202      	movs	r2, #2
 8014b54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014b58:	88fa      	ldrh	r2, [r7, #6]
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8014b5e:	88fa      	ldrh	r2, [r7, #6]
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014b64:	88fb      	ldrh	r3, [r7, #6]
 8014b66:	68ba      	ldr	r2, [r7, #8]
 8014b68:	2100      	movs	r1, #0
 8014b6a:	68f8      	ldr	r0, [r7, #12]
 8014b6c:	f7f1 fab1 	bl	80060d2 <USBD_LL_Transmit>

  return USBD_OK;
 8014b70:	2300      	movs	r3, #0
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3710      	adds	r7, #16
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}

08014b7a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8014b7a:	b580      	push	{r7, lr}
 8014b7c:	b084      	sub	sp, #16
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	60f8      	str	r0, [r7, #12]
 8014b82:	60b9      	str	r1, [r7, #8]
 8014b84:	4613      	mov	r3, r2
 8014b86:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014b88:	88fb      	ldrh	r3, [r7, #6]
 8014b8a:	68ba      	ldr	r2, [r7, #8]
 8014b8c:	2100      	movs	r1, #0
 8014b8e:	68f8      	ldr	r0, [r7, #12]
 8014b90:	f7f1 fa9f 	bl	80060d2 <USBD_LL_Transmit>

  return USBD_OK;
 8014b94:	2300      	movs	r3, #0
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}

08014b9e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8014b9e:	b580      	push	{r7, lr}
 8014ba0:	b084      	sub	sp, #16
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	60f8      	str	r0, [r7, #12]
 8014ba6:	60b9      	str	r1, [r7, #8]
 8014ba8:	4613      	mov	r3, r2
 8014baa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	2203      	movs	r2, #3
 8014bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014bb4:	88fa      	ldrh	r2, [r7, #6]
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8014bbc:	88fa      	ldrh	r2, [r7, #6]
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014bc4:	88fb      	ldrh	r3, [r7, #6]
 8014bc6:	68ba      	ldr	r2, [r7, #8]
 8014bc8:	2100      	movs	r1, #0
 8014bca:	68f8      	ldr	r0, [r7, #12]
 8014bcc:	f7f1 fa98 	bl	8006100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014bd0:	2300      	movs	r3, #0
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3710      	adds	r7, #16
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}

08014bda <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8014bda:	b580      	push	{r7, lr}
 8014bdc:	b084      	sub	sp, #16
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	60f8      	str	r0, [r7, #12]
 8014be2:	60b9      	str	r1, [r7, #8]
 8014be4:	4613      	mov	r3, r2
 8014be6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014be8:	88fb      	ldrh	r3, [r7, #6]
 8014bea:	68ba      	ldr	r2, [r7, #8]
 8014bec:	2100      	movs	r1, #0
 8014bee:	68f8      	ldr	r0, [r7, #12]
 8014bf0:	f7f1 fa86 	bl	8006100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014bf4:	2300      	movs	r3, #0
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	3710      	adds	r7, #16
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}

08014bfe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014bfe:	b580      	push	{r7, lr}
 8014c00:	b082      	sub	sp, #8
 8014c02:	af00      	add	r7, sp, #0
 8014c04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2204      	movs	r2, #4
 8014c0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014c0e:	2300      	movs	r3, #0
 8014c10:	2200      	movs	r2, #0
 8014c12:	2100      	movs	r1, #0
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f7f1 fa5c 	bl	80060d2 <USBD_LL_Transmit>

  return USBD_OK;
 8014c1a:	2300      	movs	r3, #0
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3708      	adds	r7, #8
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2205      	movs	r2, #5
 8014c30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014c34:	2300      	movs	r3, #0
 8014c36:	2200      	movs	r2, #0
 8014c38:	2100      	movs	r1, #0
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f7f1 fa60 	bl	8006100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014c40:	2300      	movs	r3, #0
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3708      	adds	r7, #8
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
	...

08014c4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b084      	sub	sp, #16
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	4603      	mov	r3, r0
 8014c54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014c56:	79fb      	ldrb	r3, [r7, #7]
 8014c58:	4a08      	ldr	r2, [pc, #32]	; (8014c7c <disk_status+0x30>)
 8014c5a:	009b      	lsls	r3, r3, #2
 8014c5c:	4413      	add	r3, r2
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	79fa      	ldrb	r2, [r7, #7]
 8014c64:	4905      	ldr	r1, [pc, #20]	; (8014c7c <disk_status+0x30>)
 8014c66:	440a      	add	r2, r1
 8014c68:	7a12      	ldrb	r2, [r2, #8]
 8014c6a:	4610      	mov	r0, r2
 8014c6c:	4798      	blx	r3
 8014c6e:	4603      	mov	r3, r0
 8014c70:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c74:	4618      	mov	r0, r3
 8014c76:	3710      	adds	r7, #16
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}
 8014c7c:	200010bc 	.word	0x200010bc

08014c80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	4603      	mov	r3, r0
 8014c88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014c8e:	79fb      	ldrb	r3, [r7, #7]
 8014c90:	4a0d      	ldr	r2, [pc, #52]	; (8014cc8 <disk_initialize+0x48>)
 8014c92:	5cd3      	ldrb	r3, [r2, r3]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d111      	bne.n	8014cbc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014c98:	79fb      	ldrb	r3, [r7, #7]
 8014c9a:	4a0b      	ldr	r2, [pc, #44]	; (8014cc8 <disk_initialize+0x48>)
 8014c9c:	2101      	movs	r1, #1
 8014c9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014ca0:	79fb      	ldrb	r3, [r7, #7]
 8014ca2:	4a09      	ldr	r2, [pc, #36]	; (8014cc8 <disk_initialize+0x48>)
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	4413      	add	r3, r2
 8014ca8:	685b      	ldr	r3, [r3, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	79fa      	ldrb	r2, [r7, #7]
 8014cae:	4906      	ldr	r1, [pc, #24]	; (8014cc8 <disk_initialize+0x48>)
 8014cb0:	440a      	add	r2, r1
 8014cb2:	7a12      	ldrb	r2, [r2, #8]
 8014cb4:	4610      	mov	r0, r2
 8014cb6:	4798      	blx	r3
 8014cb8:	4603      	mov	r3, r0
 8014cba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	3710      	adds	r7, #16
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}
 8014cc6:	bf00      	nop
 8014cc8:	200010bc 	.word	0x200010bc

08014ccc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014ccc:	b590      	push	{r4, r7, lr}
 8014cce:	b087      	sub	sp, #28
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	60b9      	str	r1, [r7, #8]
 8014cd4:	607a      	str	r2, [r7, #4]
 8014cd6:	603b      	str	r3, [r7, #0]
 8014cd8:	4603      	mov	r3, r0
 8014cda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014cdc:	7bfb      	ldrb	r3, [r7, #15]
 8014cde:	4a0a      	ldr	r2, [pc, #40]	; (8014d08 <disk_read+0x3c>)
 8014ce0:	009b      	lsls	r3, r3, #2
 8014ce2:	4413      	add	r3, r2
 8014ce4:	685b      	ldr	r3, [r3, #4]
 8014ce6:	689c      	ldr	r4, [r3, #8]
 8014ce8:	7bfb      	ldrb	r3, [r7, #15]
 8014cea:	4a07      	ldr	r2, [pc, #28]	; (8014d08 <disk_read+0x3c>)
 8014cec:	4413      	add	r3, r2
 8014cee:	7a18      	ldrb	r0, [r3, #8]
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	687a      	ldr	r2, [r7, #4]
 8014cf4:	68b9      	ldr	r1, [r7, #8]
 8014cf6:	47a0      	blx	r4
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	75fb      	strb	r3, [r7, #23]
  return res;
 8014cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	371c      	adds	r7, #28
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd90      	pop	{r4, r7, pc}
 8014d06:	bf00      	nop
 8014d08:	200010bc 	.word	0x200010bc

08014d0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014d0c:	b590      	push	{r4, r7, lr}
 8014d0e:	b087      	sub	sp, #28
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	60b9      	str	r1, [r7, #8]
 8014d14:	607a      	str	r2, [r7, #4]
 8014d16:	603b      	str	r3, [r7, #0]
 8014d18:	4603      	mov	r3, r0
 8014d1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014d1c:	7bfb      	ldrb	r3, [r7, #15]
 8014d1e:	4a0a      	ldr	r2, [pc, #40]	; (8014d48 <disk_write+0x3c>)
 8014d20:	009b      	lsls	r3, r3, #2
 8014d22:	4413      	add	r3, r2
 8014d24:	685b      	ldr	r3, [r3, #4]
 8014d26:	68dc      	ldr	r4, [r3, #12]
 8014d28:	7bfb      	ldrb	r3, [r7, #15]
 8014d2a:	4a07      	ldr	r2, [pc, #28]	; (8014d48 <disk_write+0x3c>)
 8014d2c:	4413      	add	r3, r2
 8014d2e:	7a18      	ldrb	r0, [r3, #8]
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	68b9      	ldr	r1, [r7, #8]
 8014d36:	47a0      	blx	r4
 8014d38:	4603      	mov	r3, r0
 8014d3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8014d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	371c      	adds	r7, #28
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd90      	pop	{r4, r7, pc}
 8014d46:	bf00      	nop
 8014d48:	200010bc 	.word	0x200010bc

08014d4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b084      	sub	sp, #16
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	4603      	mov	r3, r0
 8014d54:	603a      	str	r2, [r7, #0]
 8014d56:	71fb      	strb	r3, [r7, #7]
 8014d58:	460b      	mov	r3, r1
 8014d5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014d5c:	79fb      	ldrb	r3, [r7, #7]
 8014d5e:	4a09      	ldr	r2, [pc, #36]	; (8014d84 <disk_ioctl+0x38>)
 8014d60:	009b      	lsls	r3, r3, #2
 8014d62:	4413      	add	r3, r2
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	691b      	ldr	r3, [r3, #16]
 8014d68:	79fa      	ldrb	r2, [r7, #7]
 8014d6a:	4906      	ldr	r1, [pc, #24]	; (8014d84 <disk_ioctl+0x38>)
 8014d6c:	440a      	add	r2, r1
 8014d6e:	7a10      	ldrb	r0, [r2, #8]
 8014d70:	79b9      	ldrb	r1, [r7, #6]
 8014d72:	683a      	ldr	r2, [r7, #0]
 8014d74:	4798      	blx	r3
 8014d76:	4603      	mov	r3, r0
 8014d78:	73fb      	strb	r3, [r7, #15]
  return res;
 8014d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3710      	adds	r7, #16
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	200010bc 	.word	0x200010bc

08014d88 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8014d88:	b480      	push	{r7}
 8014d8a:	af00      	add	r7, sp, #0
  return 0;
 8014d8c:	2300      	movs	r3, #0
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	46bd      	mov	sp, r7
 8014d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d96:	4770      	bx	lr

08014d98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b085      	sub	sp, #20
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	3301      	adds	r3, #1
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014da8:	89fb      	ldrh	r3, [r7, #14]
 8014daa:	021b      	lsls	r3, r3, #8
 8014dac:	b21a      	sxth	r2, r3
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	781b      	ldrb	r3, [r3, #0]
 8014db2:	b21b      	sxth	r3, r3
 8014db4:	4313      	orrs	r3, r2
 8014db6:	b21b      	sxth	r3, r3
 8014db8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014dba:	89fb      	ldrh	r3, [r7, #14]
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	3714      	adds	r7, #20
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc6:	4770      	bx	lr

08014dc8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014dc8:	b480      	push	{r7}
 8014dca:	b085      	sub	sp, #20
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	3303      	adds	r3, #3
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	021b      	lsls	r3, r3, #8
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	3202      	adds	r2, #2
 8014de0:	7812      	ldrb	r2, [r2, #0]
 8014de2:	4313      	orrs	r3, r2
 8014de4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	021b      	lsls	r3, r3, #8
 8014dea:	687a      	ldr	r2, [r7, #4]
 8014dec:	3201      	adds	r2, #1
 8014dee:	7812      	ldrb	r2, [r2, #0]
 8014df0:	4313      	orrs	r3, r2
 8014df2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	021b      	lsls	r3, r3, #8
 8014df8:	687a      	ldr	r2, [r7, #4]
 8014dfa:	7812      	ldrb	r2, [r2, #0]
 8014dfc:	4313      	orrs	r3, r2
 8014dfe:	60fb      	str	r3, [r7, #12]
	return rv;
 8014e00:	68fb      	ldr	r3, [r7, #12]
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3714      	adds	r7, #20
 8014e06:	46bd      	mov	sp, r7
 8014e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0c:	4770      	bx	lr

08014e0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014e0e:	b480      	push	{r7}
 8014e10:	b083      	sub	sp, #12
 8014e12:	af00      	add	r7, sp, #0
 8014e14:	6078      	str	r0, [r7, #4]
 8014e16:	460b      	mov	r3, r1
 8014e18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	1c5a      	adds	r2, r3, #1
 8014e1e:	607a      	str	r2, [r7, #4]
 8014e20:	887a      	ldrh	r2, [r7, #2]
 8014e22:	b2d2      	uxtb	r2, r2
 8014e24:	701a      	strb	r2, [r3, #0]
 8014e26:	887b      	ldrh	r3, [r7, #2]
 8014e28:	0a1b      	lsrs	r3, r3, #8
 8014e2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	1c5a      	adds	r2, r3, #1
 8014e30:	607a      	str	r2, [r7, #4]
 8014e32:	887a      	ldrh	r2, [r7, #2]
 8014e34:	b2d2      	uxtb	r2, r2
 8014e36:	701a      	strb	r2, [r3, #0]
}
 8014e38:	bf00      	nop
 8014e3a:	370c      	adds	r7, #12
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e42:	4770      	bx	lr

08014e44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014e44:	b480      	push	{r7}
 8014e46:	b083      	sub	sp, #12
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	1c5a      	adds	r2, r3, #1
 8014e52:	607a      	str	r2, [r7, #4]
 8014e54:	683a      	ldr	r2, [r7, #0]
 8014e56:	b2d2      	uxtb	r2, r2
 8014e58:	701a      	strb	r2, [r3, #0]
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	0a1b      	lsrs	r3, r3, #8
 8014e5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	1c5a      	adds	r2, r3, #1
 8014e64:	607a      	str	r2, [r7, #4]
 8014e66:	683a      	ldr	r2, [r7, #0]
 8014e68:	b2d2      	uxtb	r2, r2
 8014e6a:	701a      	strb	r2, [r3, #0]
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	0a1b      	lsrs	r3, r3, #8
 8014e70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	1c5a      	adds	r2, r3, #1
 8014e76:	607a      	str	r2, [r7, #4]
 8014e78:	683a      	ldr	r2, [r7, #0]
 8014e7a:	b2d2      	uxtb	r2, r2
 8014e7c:	701a      	strb	r2, [r3, #0]
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	0a1b      	lsrs	r3, r3, #8
 8014e82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	1c5a      	adds	r2, r3, #1
 8014e88:	607a      	str	r2, [r7, #4]
 8014e8a:	683a      	ldr	r2, [r7, #0]
 8014e8c:	b2d2      	uxtb	r2, r2
 8014e8e:	701a      	strb	r2, [r3, #0]
}
 8014e90:	bf00      	nop
 8014e92:	370c      	adds	r7, #12
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014e9c:	b480      	push	{r7}
 8014e9e:	b087      	sub	sp, #28
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	60b9      	str	r1, [r7, #8]
 8014ea6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d00d      	beq.n	8014ed2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014eb6:	693a      	ldr	r2, [r7, #16]
 8014eb8:	1c53      	adds	r3, r2, #1
 8014eba:	613b      	str	r3, [r7, #16]
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	1c59      	adds	r1, r3, #1
 8014ec0:	6179      	str	r1, [r7, #20]
 8014ec2:	7812      	ldrb	r2, [r2, #0]
 8014ec4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	3b01      	subs	r3, #1
 8014eca:	607b      	str	r3, [r7, #4]
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d1f1      	bne.n	8014eb6 <mem_cpy+0x1a>
	}
}
 8014ed2:	bf00      	nop
 8014ed4:	371c      	adds	r7, #28
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014edc:	4770      	bx	lr

08014ede <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014ede:	b480      	push	{r7}
 8014ee0:	b087      	sub	sp, #28
 8014ee2:	af00      	add	r7, sp, #0
 8014ee4:	60f8      	str	r0, [r7, #12]
 8014ee6:	60b9      	str	r1, [r7, #8]
 8014ee8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	1c5a      	adds	r2, r3, #1
 8014ef2:	617a      	str	r2, [r7, #20]
 8014ef4:	68ba      	ldr	r2, [r7, #8]
 8014ef6:	b2d2      	uxtb	r2, r2
 8014ef8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	3b01      	subs	r3, #1
 8014efe:	607b      	str	r3, [r7, #4]
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d1f3      	bne.n	8014eee <mem_set+0x10>
}
 8014f06:	bf00      	nop
 8014f08:	bf00      	nop
 8014f0a:	371c      	adds	r7, #28
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f12:	4770      	bx	lr

08014f14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014f14:	b480      	push	{r7}
 8014f16:	b089      	sub	sp, #36	; 0x24
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	60f8      	str	r0, [r7, #12]
 8014f1c:	60b9      	str	r1, [r7, #8]
 8014f1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	61fb      	str	r3, [r7, #28]
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014f2c:	69fb      	ldr	r3, [r7, #28]
 8014f2e:	1c5a      	adds	r2, r3, #1
 8014f30:	61fa      	str	r2, [r7, #28]
 8014f32:	781b      	ldrb	r3, [r3, #0]
 8014f34:	4619      	mov	r1, r3
 8014f36:	69bb      	ldr	r3, [r7, #24]
 8014f38:	1c5a      	adds	r2, r3, #1
 8014f3a:	61ba      	str	r2, [r7, #24]
 8014f3c:	781b      	ldrb	r3, [r3, #0]
 8014f3e:	1acb      	subs	r3, r1, r3
 8014f40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	3b01      	subs	r3, #1
 8014f46:	607b      	str	r3, [r7, #4]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d002      	beq.n	8014f54 <mem_cmp+0x40>
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d0eb      	beq.n	8014f2c <mem_cmp+0x18>

	return r;
 8014f54:	697b      	ldr	r3, [r7, #20]
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3724      	adds	r7, #36	; 0x24
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f60:	4770      	bx	lr

08014f62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014f62:	b480      	push	{r7}
 8014f64:	b083      	sub	sp, #12
 8014f66:	af00      	add	r7, sp, #0
 8014f68:	6078      	str	r0, [r7, #4]
 8014f6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014f6c:	e002      	b.n	8014f74 <chk_chr+0x12>
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	3301      	adds	r3, #1
 8014f72:	607b      	str	r3, [r7, #4]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	781b      	ldrb	r3, [r3, #0]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d005      	beq.n	8014f88 <chk_chr+0x26>
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	461a      	mov	r2, r3
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	4293      	cmp	r3, r2
 8014f86:	d1f2      	bne.n	8014f6e <chk_chr+0xc>
	return *str;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	781b      	ldrb	r3, [r3, #0]
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	370c      	adds	r7, #12
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr

08014f98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b085      	sub	sp, #20
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	60bb      	str	r3, [r7, #8]
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	60fb      	str	r3, [r7, #12]
 8014faa:	e029      	b.n	8015000 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014fac:	4a27      	ldr	r2, [pc, #156]	; (801504c <chk_lock+0xb4>)
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	011b      	lsls	r3, r3, #4
 8014fb2:	4413      	add	r3, r2
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d01d      	beq.n	8014ff6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014fba:	4a24      	ldr	r2, [pc, #144]	; (801504c <chk_lock+0xb4>)
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	011b      	lsls	r3, r3, #4
 8014fc0:	4413      	add	r3, r2
 8014fc2:	681a      	ldr	r2, [r3, #0]
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d116      	bne.n	8014ffa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014fcc:	4a1f      	ldr	r2, [pc, #124]	; (801504c <chk_lock+0xb4>)
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	011b      	lsls	r3, r3, #4
 8014fd2:	4413      	add	r3, r2
 8014fd4:	3304      	adds	r3, #4
 8014fd6:	681a      	ldr	r2, [r3, #0]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d10c      	bne.n	8014ffa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014fe0:	4a1a      	ldr	r2, [pc, #104]	; (801504c <chk_lock+0xb4>)
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	011b      	lsls	r3, r3, #4
 8014fe6:	4413      	add	r3, r2
 8014fe8:	3308      	adds	r3, #8
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d102      	bne.n	8014ffa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014ff4:	e007      	b.n	8015006 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	3301      	adds	r3, #1
 8014ffe:	60fb      	str	r3, [r7, #12]
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	2b13      	cmp	r3, #19
 8015004:	d9d2      	bls.n	8014fac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	2b14      	cmp	r3, #20
 801500a:	d109      	bne.n	8015020 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d102      	bne.n	8015018 <chk_lock+0x80>
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	2b02      	cmp	r3, #2
 8015016:	d101      	bne.n	801501c <chk_lock+0x84>
 8015018:	2300      	movs	r3, #0
 801501a:	e010      	b.n	801503e <chk_lock+0xa6>
 801501c:	2312      	movs	r3, #18
 801501e:	e00e      	b.n	801503e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d108      	bne.n	8015038 <chk_lock+0xa0>
 8015026:	4a09      	ldr	r2, [pc, #36]	; (801504c <chk_lock+0xb4>)
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	011b      	lsls	r3, r3, #4
 801502c:	4413      	add	r3, r2
 801502e:	330c      	adds	r3, #12
 8015030:	881b      	ldrh	r3, [r3, #0]
 8015032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015036:	d101      	bne.n	801503c <chk_lock+0xa4>
 8015038:	2310      	movs	r3, #16
 801503a:	e000      	b.n	801503e <chk_lock+0xa6>
 801503c:	2300      	movs	r3, #0
}
 801503e:	4618      	mov	r0, r3
 8015040:	3714      	adds	r7, #20
 8015042:	46bd      	mov	sp, r7
 8015044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015048:	4770      	bx	lr
 801504a:	bf00      	nop
 801504c:	20000d7c 	.word	0x20000d7c

08015050 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015050:	b480      	push	{r7}
 8015052:	b083      	sub	sp, #12
 8015054:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015056:	2300      	movs	r3, #0
 8015058:	607b      	str	r3, [r7, #4]
 801505a:	e002      	b.n	8015062 <enq_lock+0x12>
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	3301      	adds	r3, #1
 8015060:	607b      	str	r3, [r7, #4]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2b13      	cmp	r3, #19
 8015066:	d806      	bhi.n	8015076 <enq_lock+0x26>
 8015068:	4a09      	ldr	r2, [pc, #36]	; (8015090 <enq_lock+0x40>)
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	011b      	lsls	r3, r3, #4
 801506e:	4413      	add	r3, r2
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d1f2      	bne.n	801505c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2b14      	cmp	r3, #20
 801507a:	bf14      	ite	ne
 801507c:	2301      	movne	r3, #1
 801507e:	2300      	moveq	r3, #0
 8015080:	b2db      	uxtb	r3, r3
}
 8015082:	4618      	mov	r0, r3
 8015084:	370c      	adds	r7, #12
 8015086:	46bd      	mov	sp, r7
 8015088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508c:	4770      	bx	lr
 801508e:	bf00      	nop
 8015090:	20000d7c 	.word	0x20000d7c

08015094 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015094:	b480      	push	{r7}
 8015096:	b085      	sub	sp, #20
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
 801509c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801509e:	2300      	movs	r3, #0
 80150a0:	60fb      	str	r3, [r7, #12]
 80150a2:	e01f      	b.n	80150e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80150a4:	4a41      	ldr	r2, [pc, #260]	; (80151ac <inc_lock+0x118>)
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	011b      	lsls	r3, r3, #4
 80150aa:	4413      	add	r3, r2
 80150ac:	681a      	ldr	r2, [r3, #0]
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	429a      	cmp	r2, r3
 80150b4:	d113      	bne.n	80150de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80150b6:	4a3d      	ldr	r2, [pc, #244]	; (80151ac <inc_lock+0x118>)
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	011b      	lsls	r3, r3, #4
 80150bc:	4413      	add	r3, r2
 80150be:	3304      	adds	r3, #4
 80150c0:	681a      	ldr	r2, [r3, #0]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d109      	bne.n	80150de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80150ca:	4a38      	ldr	r2, [pc, #224]	; (80151ac <inc_lock+0x118>)
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	011b      	lsls	r3, r3, #4
 80150d0:	4413      	add	r3, r2
 80150d2:	3308      	adds	r3, #8
 80150d4:	681a      	ldr	r2, [r3, #0]
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80150da:	429a      	cmp	r2, r3
 80150dc:	d006      	beq.n	80150ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	3301      	adds	r3, #1
 80150e2:	60fb      	str	r3, [r7, #12]
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	2b13      	cmp	r3, #19
 80150e8:	d9dc      	bls.n	80150a4 <inc_lock+0x10>
 80150ea:	e000      	b.n	80150ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80150ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	2b14      	cmp	r3, #20
 80150f2:	d132      	bne.n	801515a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80150f4:	2300      	movs	r3, #0
 80150f6:	60fb      	str	r3, [r7, #12]
 80150f8:	e002      	b.n	8015100 <inc_lock+0x6c>
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	3301      	adds	r3, #1
 80150fe:	60fb      	str	r3, [r7, #12]
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2b13      	cmp	r3, #19
 8015104:	d806      	bhi.n	8015114 <inc_lock+0x80>
 8015106:	4a29      	ldr	r2, [pc, #164]	; (80151ac <inc_lock+0x118>)
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	011b      	lsls	r3, r3, #4
 801510c:	4413      	add	r3, r2
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d1f2      	bne.n	80150fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	2b14      	cmp	r3, #20
 8015118:	d101      	bne.n	801511e <inc_lock+0x8a>
 801511a:	2300      	movs	r3, #0
 801511c:	e040      	b.n	80151a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681a      	ldr	r2, [r3, #0]
 8015122:	4922      	ldr	r1, [pc, #136]	; (80151ac <inc_lock+0x118>)
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	011b      	lsls	r3, r3, #4
 8015128:	440b      	add	r3, r1
 801512a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	689a      	ldr	r2, [r3, #8]
 8015130:	491e      	ldr	r1, [pc, #120]	; (80151ac <inc_lock+0x118>)
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	011b      	lsls	r3, r3, #4
 8015136:	440b      	add	r3, r1
 8015138:	3304      	adds	r3, #4
 801513a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	695a      	ldr	r2, [r3, #20]
 8015140:	491a      	ldr	r1, [pc, #104]	; (80151ac <inc_lock+0x118>)
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	011b      	lsls	r3, r3, #4
 8015146:	440b      	add	r3, r1
 8015148:	3308      	adds	r3, #8
 801514a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801514c:	4a17      	ldr	r2, [pc, #92]	; (80151ac <inc_lock+0x118>)
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	011b      	lsls	r3, r3, #4
 8015152:	4413      	add	r3, r2
 8015154:	330c      	adds	r3, #12
 8015156:	2200      	movs	r2, #0
 8015158:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d009      	beq.n	8015174 <inc_lock+0xe0>
 8015160:	4a12      	ldr	r2, [pc, #72]	; (80151ac <inc_lock+0x118>)
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	011b      	lsls	r3, r3, #4
 8015166:	4413      	add	r3, r2
 8015168:	330c      	adds	r3, #12
 801516a:	881b      	ldrh	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d001      	beq.n	8015174 <inc_lock+0xe0>
 8015170:	2300      	movs	r3, #0
 8015172:	e015      	b.n	80151a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d108      	bne.n	801518c <inc_lock+0xf8>
 801517a:	4a0c      	ldr	r2, [pc, #48]	; (80151ac <inc_lock+0x118>)
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	011b      	lsls	r3, r3, #4
 8015180:	4413      	add	r3, r2
 8015182:	330c      	adds	r3, #12
 8015184:	881b      	ldrh	r3, [r3, #0]
 8015186:	3301      	adds	r3, #1
 8015188:	b29a      	uxth	r2, r3
 801518a:	e001      	b.n	8015190 <inc_lock+0xfc>
 801518c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015190:	4906      	ldr	r1, [pc, #24]	; (80151ac <inc_lock+0x118>)
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	011b      	lsls	r3, r3, #4
 8015196:	440b      	add	r3, r1
 8015198:	330c      	adds	r3, #12
 801519a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	3301      	adds	r3, #1
}
 80151a0:	4618      	mov	r0, r3
 80151a2:	3714      	adds	r7, #20
 80151a4:	46bd      	mov	sp, r7
 80151a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151aa:	4770      	bx	lr
 80151ac:	20000d7c 	.word	0x20000d7c

080151b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80151b0:	b480      	push	{r7}
 80151b2:	b085      	sub	sp, #20
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	3b01      	subs	r3, #1
 80151bc:	607b      	str	r3, [r7, #4]
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	2b13      	cmp	r3, #19
 80151c2:	d825      	bhi.n	8015210 <dec_lock+0x60>
		n = Files[i].ctr;
 80151c4:	4a17      	ldr	r2, [pc, #92]	; (8015224 <dec_lock+0x74>)
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	011b      	lsls	r3, r3, #4
 80151ca:	4413      	add	r3, r2
 80151cc:	330c      	adds	r3, #12
 80151ce:	881b      	ldrh	r3, [r3, #0]
 80151d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80151d2:	89fb      	ldrh	r3, [r7, #14]
 80151d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80151d8:	d101      	bne.n	80151de <dec_lock+0x2e>
 80151da:	2300      	movs	r3, #0
 80151dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80151de:	89fb      	ldrh	r3, [r7, #14]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d002      	beq.n	80151ea <dec_lock+0x3a>
 80151e4:	89fb      	ldrh	r3, [r7, #14]
 80151e6:	3b01      	subs	r3, #1
 80151e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80151ea:	4a0e      	ldr	r2, [pc, #56]	; (8015224 <dec_lock+0x74>)
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	011b      	lsls	r3, r3, #4
 80151f0:	4413      	add	r3, r2
 80151f2:	330c      	adds	r3, #12
 80151f4:	89fa      	ldrh	r2, [r7, #14]
 80151f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80151f8:	89fb      	ldrh	r3, [r7, #14]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d105      	bne.n	801520a <dec_lock+0x5a>
 80151fe:	4a09      	ldr	r2, [pc, #36]	; (8015224 <dec_lock+0x74>)
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	011b      	lsls	r3, r3, #4
 8015204:	4413      	add	r3, r2
 8015206:	2200      	movs	r2, #0
 8015208:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801520a:	2300      	movs	r3, #0
 801520c:	737b      	strb	r3, [r7, #13]
 801520e:	e001      	b.n	8015214 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015210:	2302      	movs	r3, #2
 8015212:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015214:	7b7b      	ldrb	r3, [r7, #13]
}
 8015216:	4618      	mov	r0, r3
 8015218:	3714      	adds	r7, #20
 801521a:	46bd      	mov	sp, r7
 801521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015220:	4770      	bx	lr
 8015222:	bf00      	nop
 8015224:	20000d7c 	.word	0x20000d7c

08015228 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015228:	b480      	push	{r7}
 801522a:	b085      	sub	sp, #20
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015230:	2300      	movs	r3, #0
 8015232:	60fb      	str	r3, [r7, #12]
 8015234:	e010      	b.n	8015258 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015236:	4a0d      	ldr	r2, [pc, #52]	; (801526c <clear_lock+0x44>)
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	011b      	lsls	r3, r3, #4
 801523c:	4413      	add	r3, r2
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	429a      	cmp	r2, r3
 8015244:	d105      	bne.n	8015252 <clear_lock+0x2a>
 8015246:	4a09      	ldr	r2, [pc, #36]	; (801526c <clear_lock+0x44>)
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	011b      	lsls	r3, r3, #4
 801524c:	4413      	add	r3, r2
 801524e:	2200      	movs	r2, #0
 8015250:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	3301      	adds	r3, #1
 8015256:	60fb      	str	r3, [r7, #12]
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	2b13      	cmp	r3, #19
 801525c:	d9eb      	bls.n	8015236 <clear_lock+0xe>
	}
}
 801525e:	bf00      	nop
 8015260:	bf00      	nop
 8015262:	3714      	adds	r7, #20
 8015264:	46bd      	mov	sp, r7
 8015266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526a:	4770      	bx	lr
 801526c:	20000d7c 	.word	0x20000d7c

08015270 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b086      	sub	sp, #24
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015278:	2300      	movs	r3, #0
 801527a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	78db      	ldrb	r3, [r3, #3]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d034      	beq.n	80152ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015288:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	7858      	ldrb	r0, [r3, #1]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015294:	2301      	movs	r3, #1
 8015296:	697a      	ldr	r2, [r7, #20]
 8015298:	f7ff fd38 	bl	8014d0c <disk_write>
 801529c:	4603      	mov	r3, r0
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d002      	beq.n	80152a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80152a2:	2301      	movs	r3, #1
 80152a4:	73fb      	strb	r3, [r7, #15]
 80152a6:	e022      	b.n	80152ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2200      	movs	r2, #0
 80152ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152b2:	697a      	ldr	r2, [r7, #20]
 80152b4:	1ad2      	subs	r2, r2, r3
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	69db      	ldr	r3, [r3, #28]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d217      	bcs.n	80152ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	789b      	ldrb	r3, [r3, #2]
 80152c2:	613b      	str	r3, [r7, #16]
 80152c4:	e010      	b.n	80152e8 <sync_window+0x78>
					wsect += fs->fsize;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	69db      	ldr	r3, [r3, #28]
 80152ca:	697a      	ldr	r2, [r7, #20]
 80152cc:	4413      	add	r3, r2
 80152ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	7858      	ldrb	r0, [r3, #1]
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80152da:	2301      	movs	r3, #1
 80152dc:	697a      	ldr	r2, [r7, #20]
 80152de:	f7ff fd15 	bl	8014d0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80152e2:	693b      	ldr	r3, [r7, #16]
 80152e4:	3b01      	subs	r3, #1
 80152e6:	613b      	str	r3, [r7, #16]
 80152e8:	693b      	ldr	r3, [r7, #16]
 80152ea:	2b01      	cmp	r3, #1
 80152ec:	d8eb      	bhi.n	80152c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80152ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3718      	adds	r7, #24
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b084      	sub	sp, #16
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015302:	2300      	movs	r3, #0
 8015304:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801530a:	683a      	ldr	r2, [r7, #0]
 801530c:	429a      	cmp	r2, r3
 801530e:	d01b      	beq.n	8015348 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f7ff ffad 	bl	8015270 <sync_window>
 8015316:	4603      	mov	r3, r0
 8015318:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801531a:	7bfb      	ldrb	r3, [r7, #15]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d113      	bne.n	8015348 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	7858      	ldrb	r0, [r3, #1]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801532a:	2301      	movs	r3, #1
 801532c:	683a      	ldr	r2, [r7, #0]
 801532e:	f7ff fccd 	bl	8014ccc <disk_read>
 8015332:	4603      	mov	r3, r0
 8015334:	2b00      	cmp	r3, #0
 8015336:	d004      	beq.n	8015342 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015338:	f04f 33ff 	mov.w	r3, #4294967295
 801533c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801533e:	2301      	movs	r3, #1
 8015340:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	683a      	ldr	r2, [r7, #0]
 8015346:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8015348:	7bfb      	ldrb	r3, [r7, #15]
}
 801534a:	4618      	mov	r0, r3
 801534c:	3710      	adds	r7, #16
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
	...

08015354 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b084      	sub	sp, #16
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f7ff ff87 	bl	8015270 <sync_window>
 8015362:	4603      	mov	r3, r0
 8015364:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015366:	7bfb      	ldrb	r3, [r7, #15]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d158      	bne.n	801541e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	781b      	ldrb	r3, [r3, #0]
 8015370:	2b03      	cmp	r3, #3
 8015372:	d148      	bne.n	8015406 <sync_fs+0xb2>
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	791b      	ldrb	r3, [r3, #4]
 8015378:	2b01      	cmp	r3, #1
 801537a:	d144      	bne.n	8015406 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	3334      	adds	r3, #52	; 0x34
 8015380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015384:	2100      	movs	r1, #0
 8015386:	4618      	mov	r0, r3
 8015388:	f7ff fda9 	bl	8014ede <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	3334      	adds	r3, #52	; 0x34
 8015390:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015394:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015398:	4618      	mov	r0, r3
 801539a:	f7ff fd38 	bl	8014e0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	3334      	adds	r3, #52	; 0x34
 80153a2:	4921      	ldr	r1, [pc, #132]	; (8015428 <sync_fs+0xd4>)
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7ff fd4d 	bl	8014e44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	3334      	adds	r3, #52	; 0x34
 80153ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80153b2:	491e      	ldr	r1, [pc, #120]	; (801542c <sync_fs+0xd8>)
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7ff fd45 	bl	8014e44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	3334      	adds	r3, #52	; 0x34
 80153be:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	695b      	ldr	r3, [r3, #20]
 80153c6:	4619      	mov	r1, r3
 80153c8:	4610      	mov	r0, r2
 80153ca:	f7ff fd3b 	bl	8014e44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	3334      	adds	r3, #52	; 0x34
 80153d2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	691b      	ldr	r3, [r3, #16]
 80153da:	4619      	mov	r1, r3
 80153dc:	4610      	mov	r0, r2
 80153de:	f7ff fd31 	bl	8014e44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	6a1b      	ldr	r3, [r3, #32]
 80153e6:	1c5a      	adds	r2, r3, #1
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	7858      	ldrb	r0, [r3, #1]
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153fa:	2301      	movs	r3, #1
 80153fc:	f7ff fc86 	bl	8014d0c <disk_write>
			fs->fsi_flag = 0;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2200      	movs	r2, #0
 8015404:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	785b      	ldrb	r3, [r3, #1]
 801540a:	2200      	movs	r2, #0
 801540c:	2100      	movs	r1, #0
 801540e:	4618      	mov	r0, r3
 8015410:	f7ff fc9c 	bl	8014d4c <disk_ioctl>
 8015414:	4603      	mov	r3, r0
 8015416:	2b00      	cmp	r3, #0
 8015418:	d001      	beq.n	801541e <sync_fs+0xca>
 801541a:	2301      	movs	r3, #1
 801541c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015420:	4618      	mov	r0, r3
 8015422:	3710      	adds	r7, #16
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}
 8015428:	41615252 	.word	0x41615252
 801542c:	61417272 	.word	0x61417272

08015430 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015430:	b480      	push	{r7}
 8015432:	b083      	sub	sp, #12
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	3b02      	subs	r3, #2
 801543e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	699b      	ldr	r3, [r3, #24]
 8015444:	3b02      	subs	r3, #2
 8015446:	683a      	ldr	r2, [r7, #0]
 8015448:	429a      	cmp	r2, r3
 801544a:	d301      	bcc.n	8015450 <clust2sect+0x20>
 801544c:	2300      	movs	r3, #0
 801544e:	e008      	b.n	8015462 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	895b      	ldrh	r3, [r3, #10]
 8015454:	461a      	mov	r2, r3
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	fb03 f202 	mul.w	r2, r3, r2
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015460:	4413      	add	r3, r2
}
 8015462:	4618      	mov	r0, r3
 8015464:	370c      	adds	r7, #12
 8015466:	46bd      	mov	sp, r7
 8015468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546c:	4770      	bx	lr

0801546e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801546e:	b580      	push	{r7, lr}
 8015470:	b086      	sub	sp, #24
 8015472:	af00      	add	r7, sp, #0
 8015474:	6078      	str	r0, [r7, #4]
 8015476:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	2b01      	cmp	r3, #1
 8015482:	d904      	bls.n	801548e <get_fat+0x20>
 8015484:	693b      	ldr	r3, [r7, #16]
 8015486:	699b      	ldr	r3, [r3, #24]
 8015488:	683a      	ldr	r2, [r7, #0]
 801548a:	429a      	cmp	r2, r3
 801548c:	d302      	bcc.n	8015494 <get_fat+0x26>
		val = 1;	/* Internal error */
 801548e:	2301      	movs	r3, #1
 8015490:	617b      	str	r3, [r7, #20]
 8015492:	e08f      	b.n	80155b4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015494:	f04f 33ff 	mov.w	r3, #4294967295
 8015498:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801549a:	693b      	ldr	r3, [r7, #16]
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	2b03      	cmp	r3, #3
 80154a0:	d062      	beq.n	8015568 <get_fat+0xfa>
 80154a2:	2b03      	cmp	r3, #3
 80154a4:	dc7c      	bgt.n	80155a0 <get_fat+0x132>
 80154a6:	2b01      	cmp	r3, #1
 80154a8:	d002      	beq.n	80154b0 <get_fat+0x42>
 80154aa:	2b02      	cmp	r3, #2
 80154ac:	d042      	beq.n	8015534 <get_fat+0xc6>
 80154ae:	e077      	b.n	80155a0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	60fb      	str	r3, [r7, #12]
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	085b      	lsrs	r3, r3, #1
 80154b8:	68fa      	ldr	r2, [r7, #12]
 80154ba:	4413      	add	r3, r2
 80154bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	0a5b      	lsrs	r3, r3, #9
 80154c6:	4413      	add	r3, r2
 80154c8:	4619      	mov	r1, r3
 80154ca:	6938      	ldr	r0, [r7, #16]
 80154cc:	f7ff ff14 	bl	80152f8 <move_window>
 80154d0:	4603      	mov	r3, r0
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d167      	bne.n	80155a6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	1c5a      	adds	r2, r3, #1
 80154da:	60fa      	str	r2, [r7, #12]
 80154dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80154e0:	693a      	ldr	r2, [r7, #16]
 80154e2:	4413      	add	r3, r2
 80154e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80154e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80154ea:	693b      	ldr	r3, [r7, #16]
 80154ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	0a5b      	lsrs	r3, r3, #9
 80154f2:	4413      	add	r3, r2
 80154f4:	4619      	mov	r1, r3
 80154f6:	6938      	ldr	r0, [r7, #16]
 80154f8:	f7ff fefe 	bl	80152f8 <move_window>
 80154fc:	4603      	mov	r3, r0
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d153      	bne.n	80155aa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015508:	693a      	ldr	r2, [r7, #16]
 801550a:	4413      	add	r3, r2
 801550c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015510:	021b      	lsls	r3, r3, #8
 8015512:	461a      	mov	r2, r3
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	4313      	orrs	r3, r2
 8015518:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801551a:	683b      	ldr	r3, [r7, #0]
 801551c:	f003 0301 	and.w	r3, r3, #1
 8015520:	2b00      	cmp	r3, #0
 8015522:	d002      	beq.n	801552a <get_fat+0xbc>
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	091b      	lsrs	r3, r3, #4
 8015528:	e002      	b.n	8015530 <get_fat+0xc2>
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015530:	617b      	str	r3, [r7, #20]
			break;
 8015532:	e03f      	b.n	80155b4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015534:	693b      	ldr	r3, [r7, #16]
 8015536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	0a1b      	lsrs	r3, r3, #8
 801553c:	4413      	add	r3, r2
 801553e:	4619      	mov	r1, r3
 8015540:	6938      	ldr	r0, [r7, #16]
 8015542:	f7ff fed9 	bl	80152f8 <move_window>
 8015546:	4603      	mov	r3, r0
 8015548:	2b00      	cmp	r3, #0
 801554a:	d130      	bne.n	80155ae <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801554c:	693b      	ldr	r3, [r7, #16]
 801554e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	005b      	lsls	r3, r3, #1
 8015556:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801555a:	4413      	add	r3, r2
 801555c:	4618      	mov	r0, r3
 801555e:	f7ff fc1b 	bl	8014d98 <ld_word>
 8015562:	4603      	mov	r3, r0
 8015564:	617b      	str	r3, [r7, #20]
			break;
 8015566:	e025      	b.n	80155b4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015568:	693b      	ldr	r3, [r7, #16]
 801556a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	09db      	lsrs	r3, r3, #7
 8015570:	4413      	add	r3, r2
 8015572:	4619      	mov	r1, r3
 8015574:	6938      	ldr	r0, [r7, #16]
 8015576:	f7ff febf 	bl	80152f8 <move_window>
 801557a:	4603      	mov	r3, r0
 801557c:	2b00      	cmp	r3, #0
 801557e:	d118      	bne.n	80155b2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015580:	693b      	ldr	r3, [r7, #16]
 8015582:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	009b      	lsls	r3, r3, #2
 801558a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801558e:	4413      	add	r3, r2
 8015590:	4618      	mov	r0, r3
 8015592:	f7ff fc19 	bl	8014dc8 <ld_dword>
 8015596:	4603      	mov	r3, r0
 8015598:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801559c:	617b      	str	r3, [r7, #20]
			break;
 801559e:	e009      	b.n	80155b4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80155a0:	2301      	movs	r3, #1
 80155a2:	617b      	str	r3, [r7, #20]
 80155a4:	e006      	b.n	80155b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80155a6:	bf00      	nop
 80155a8:	e004      	b.n	80155b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80155aa:	bf00      	nop
 80155ac:	e002      	b.n	80155b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80155ae:	bf00      	nop
 80155b0:	e000      	b.n	80155b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80155b2:	bf00      	nop
		}
	}

	return val;
 80155b4:	697b      	ldr	r3, [r7, #20]
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	3718      	adds	r7, #24
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}

080155be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80155be:	b590      	push	{r4, r7, lr}
 80155c0:	b089      	sub	sp, #36	; 0x24
 80155c2:	af00      	add	r7, sp, #0
 80155c4:	60f8      	str	r0, [r7, #12]
 80155c6:	60b9      	str	r1, [r7, #8]
 80155c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80155ca:	2302      	movs	r3, #2
 80155cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	2b01      	cmp	r3, #1
 80155d2:	f240 80d2 	bls.w	801577a <put_fat+0x1bc>
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	699b      	ldr	r3, [r3, #24]
 80155da:	68ba      	ldr	r2, [r7, #8]
 80155dc:	429a      	cmp	r2, r3
 80155de:	f080 80cc 	bcs.w	801577a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	781b      	ldrb	r3, [r3, #0]
 80155e6:	2b03      	cmp	r3, #3
 80155e8:	f000 8096 	beq.w	8015718 <put_fat+0x15a>
 80155ec:	2b03      	cmp	r3, #3
 80155ee:	f300 80cd 	bgt.w	801578c <put_fat+0x1ce>
 80155f2:	2b01      	cmp	r3, #1
 80155f4:	d002      	beq.n	80155fc <put_fat+0x3e>
 80155f6:	2b02      	cmp	r3, #2
 80155f8:	d06e      	beq.n	80156d8 <put_fat+0x11a>
 80155fa:	e0c7      	b.n	801578c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	61bb      	str	r3, [r7, #24]
 8015600:	69bb      	ldr	r3, [r7, #24]
 8015602:	085b      	lsrs	r3, r3, #1
 8015604:	69ba      	ldr	r2, [r7, #24]
 8015606:	4413      	add	r3, r2
 8015608:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801560e:	69bb      	ldr	r3, [r7, #24]
 8015610:	0a5b      	lsrs	r3, r3, #9
 8015612:	4413      	add	r3, r2
 8015614:	4619      	mov	r1, r3
 8015616:	68f8      	ldr	r0, [r7, #12]
 8015618:	f7ff fe6e 	bl	80152f8 <move_window>
 801561c:	4603      	mov	r3, r0
 801561e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015620:	7ffb      	ldrb	r3, [r7, #31]
 8015622:	2b00      	cmp	r3, #0
 8015624:	f040 80ab 	bne.w	801577e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801562e:	69bb      	ldr	r3, [r7, #24]
 8015630:	1c59      	adds	r1, r3, #1
 8015632:	61b9      	str	r1, [r7, #24]
 8015634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015638:	4413      	add	r3, r2
 801563a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	f003 0301 	and.w	r3, r3, #1
 8015642:	2b00      	cmp	r3, #0
 8015644:	d00d      	beq.n	8015662 <put_fat+0xa4>
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	781b      	ldrb	r3, [r3, #0]
 801564a:	b25b      	sxtb	r3, r3
 801564c:	f003 030f 	and.w	r3, r3, #15
 8015650:	b25a      	sxtb	r2, r3
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	b2db      	uxtb	r3, r3
 8015656:	011b      	lsls	r3, r3, #4
 8015658:	b25b      	sxtb	r3, r3
 801565a:	4313      	orrs	r3, r2
 801565c:	b25b      	sxtb	r3, r3
 801565e:	b2db      	uxtb	r3, r3
 8015660:	e001      	b.n	8015666 <put_fat+0xa8>
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	b2db      	uxtb	r3, r3
 8015666:	697a      	ldr	r2, [r7, #20]
 8015668:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	2201      	movs	r2, #1
 801566e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015674:	69bb      	ldr	r3, [r7, #24]
 8015676:	0a5b      	lsrs	r3, r3, #9
 8015678:	4413      	add	r3, r2
 801567a:	4619      	mov	r1, r3
 801567c:	68f8      	ldr	r0, [r7, #12]
 801567e:	f7ff fe3b 	bl	80152f8 <move_window>
 8015682:	4603      	mov	r3, r0
 8015684:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015686:	7ffb      	ldrb	r3, [r7, #31]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d17a      	bne.n	8015782 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015692:	69bb      	ldr	r3, [r7, #24]
 8015694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015698:	4413      	add	r3, r2
 801569a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	f003 0301 	and.w	r3, r3, #1
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d003      	beq.n	80156ae <put_fat+0xf0>
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	091b      	lsrs	r3, r3, #4
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	e00e      	b.n	80156cc <put_fat+0x10e>
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	b25b      	sxtb	r3, r3
 80156b4:	f023 030f 	bic.w	r3, r3, #15
 80156b8:	b25a      	sxtb	r2, r3
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	0a1b      	lsrs	r3, r3, #8
 80156be:	b25b      	sxtb	r3, r3
 80156c0:	f003 030f 	and.w	r3, r3, #15
 80156c4:	b25b      	sxtb	r3, r3
 80156c6:	4313      	orrs	r3, r2
 80156c8:	b25b      	sxtb	r3, r3
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	697a      	ldr	r2, [r7, #20]
 80156ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	2201      	movs	r2, #1
 80156d4:	70da      	strb	r2, [r3, #3]
			break;
 80156d6:	e059      	b.n	801578c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	0a1b      	lsrs	r3, r3, #8
 80156e0:	4413      	add	r3, r2
 80156e2:	4619      	mov	r1, r3
 80156e4:	68f8      	ldr	r0, [r7, #12]
 80156e6:	f7ff fe07 	bl	80152f8 <move_window>
 80156ea:	4603      	mov	r3, r0
 80156ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80156ee:	7ffb      	ldrb	r3, [r7, #31]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d148      	bne.n	8015786 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	005b      	lsls	r3, r3, #1
 80156fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015702:	4413      	add	r3, r2
 8015704:	687a      	ldr	r2, [r7, #4]
 8015706:	b292      	uxth	r2, r2
 8015708:	4611      	mov	r1, r2
 801570a:	4618      	mov	r0, r3
 801570c:	f7ff fb7f 	bl	8014e0e <st_word>
			fs->wflag = 1;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	2201      	movs	r2, #1
 8015714:	70da      	strb	r2, [r3, #3]
			break;
 8015716:	e039      	b.n	801578c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	09db      	lsrs	r3, r3, #7
 8015720:	4413      	add	r3, r2
 8015722:	4619      	mov	r1, r3
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	f7ff fde7 	bl	80152f8 <move_window>
 801572a:	4603      	mov	r3, r0
 801572c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801572e:	7ffb      	ldrb	r3, [r7, #31]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d12a      	bne.n	801578a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015740:	68bb      	ldr	r3, [r7, #8]
 8015742:	009b      	lsls	r3, r3, #2
 8015744:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015748:	4413      	add	r3, r2
 801574a:	4618      	mov	r0, r3
 801574c:	f7ff fb3c 	bl	8014dc8 <ld_dword>
 8015750:	4603      	mov	r3, r0
 8015752:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015756:	4323      	orrs	r3, r4
 8015758:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	009b      	lsls	r3, r3, #2
 8015764:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015768:	4413      	add	r3, r2
 801576a:	6879      	ldr	r1, [r7, #4]
 801576c:	4618      	mov	r0, r3
 801576e:	f7ff fb69 	bl	8014e44 <st_dword>
			fs->wflag = 1;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	2201      	movs	r2, #1
 8015776:	70da      	strb	r2, [r3, #3]
			break;
 8015778:	e008      	b.n	801578c <put_fat+0x1ce>
		}
	}
 801577a:	bf00      	nop
 801577c:	e006      	b.n	801578c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801577e:	bf00      	nop
 8015780:	e004      	b.n	801578c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015782:	bf00      	nop
 8015784:	e002      	b.n	801578c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015786:	bf00      	nop
 8015788:	e000      	b.n	801578c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801578a:	bf00      	nop
	return res;
 801578c:	7ffb      	ldrb	r3, [r7, #31]
}
 801578e:	4618      	mov	r0, r3
 8015790:	3724      	adds	r7, #36	; 0x24
 8015792:	46bd      	mov	sp, r7
 8015794:	bd90      	pop	{r4, r7, pc}

08015796 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015796:	b580      	push	{r7, lr}
 8015798:	b088      	sub	sp, #32
 801579a:	af00      	add	r7, sp, #0
 801579c:	60f8      	str	r0, [r7, #12]
 801579e:	60b9      	str	r1, [r7, #8]
 80157a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80157a2:	2300      	movs	r3, #0
 80157a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	2b01      	cmp	r3, #1
 80157b0:	d904      	bls.n	80157bc <remove_chain+0x26>
 80157b2:	69bb      	ldr	r3, [r7, #24]
 80157b4:	699b      	ldr	r3, [r3, #24]
 80157b6:	68ba      	ldr	r2, [r7, #8]
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d301      	bcc.n	80157c0 <remove_chain+0x2a>
 80157bc:	2302      	movs	r3, #2
 80157be:	e04b      	b.n	8015858 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d00c      	beq.n	80157e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80157c6:	f04f 32ff 	mov.w	r2, #4294967295
 80157ca:	6879      	ldr	r1, [r7, #4]
 80157cc:	69b8      	ldr	r0, [r7, #24]
 80157ce:	f7ff fef6 	bl	80155be <put_fat>
 80157d2:	4603      	mov	r3, r0
 80157d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80157d6:	7ffb      	ldrb	r3, [r7, #31]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d001      	beq.n	80157e0 <remove_chain+0x4a>
 80157dc:	7ffb      	ldrb	r3, [r7, #31]
 80157de:	e03b      	b.n	8015858 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80157e0:	68b9      	ldr	r1, [r7, #8]
 80157e2:	68f8      	ldr	r0, [r7, #12]
 80157e4:	f7ff fe43 	bl	801546e <get_fat>
 80157e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80157ea:	697b      	ldr	r3, [r7, #20]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d031      	beq.n	8015854 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	2b01      	cmp	r3, #1
 80157f4:	d101      	bne.n	80157fa <remove_chain+0x64>
 80157f6:	2302      	movs	r3, #2
 80157f8:	e02e      	b.n	8015858 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015800:	d101      	bne.n	8015806 <remove_chain+0x70>
 8015802:	2301      	movs	r3, #1
 8015804:	e028      	b.n	8015858 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015806:	2200      	movs	r2, #0
 8015808:	68b9      	ldr	r1, [r7, #8]
 801580a:	69b8      	ldr	r0, [r7, #24]
 801580c:	f7ff fed7 	bl	80155be <put_fat>
 8015810:	4603      	mov	r3, r0
 8015812:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015814:	7ffb      	ldrb	r3, [r7, #31]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d001      	beq.n	801581e <remove_chain+0x88>
 801581a:	7ffb      	ldrb	r3, [r7, #31]
 801581c:	e01c      	b.n	8015858 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801581e:	69bb      	ldr	r3, [r7, #24]
 8015820:	695a      	ldr	r2, [r3, #20]
 8015822:	69bb      	ldr	r3, [r7, #24]
 8015824:	699b      	ldr	r3, [r3, #24]
 8015826:	3b02      	subs	r3, #2
 8015828:	429a      	cmp	r2, r3
 801582a:	d20b      	bcs.n	8015844 <remove_chain+0xae>
			fs->free_clst++;
 801582c:	69bb      	ldr	r3, [r7, #24]
 801582e:	695b      	ldr	r3, [r3, #20]
 8015830:	1c5a      	adds	r2, r3, #1
 8015832:	69bb      	ldr	r3, [r7, #24]
 8015834:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	791b      	ldrb	r3, [r3, #4]
 801583a:	f043 0301 	orr.w	r3, r3, #1
 801583e:	b2da      	uxtb	r2, r3
 8015840:	69bb      	ldr	r3, [r7, #24]
 8015842:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015848:	69bb      	ldr	r3, [r7, #24]
 801584a:	699b      	ldr	r3, [r3, #24]
 801584c:	68ba      	ldr	r2, [r7, #8]
 801584e:	429a      	cmp	r2, r3
 8015850:	d3c6      	bcc.n	80157e0 <remove_chain+0x4a>
 8015852:	e000      	b.n	8015856 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015854:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015856:	2300      	movs	r3, #0
}
 8015858:	4618      	mov	r0, r3
 801585a:	3720      	adds	r7, #32
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b088      	sub	sp, #32
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015870:	683b      	ldr	r3, [r7, #0]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d10d      	bne.n	8015892 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	691b      	ldr	r3, [r3, #16]
 801587a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801587c:	69bb      	ldr	r3, [r7, #24]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d004      	beq.n	801588c <create_chain+0x2c>
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	699b      	ldr	r3, [r3, #24]
 8015886:	69ba      	ldr	r2, [r7, #24]
 8015888:	429a      	cmp	r2, r3
 801588a:	d31b      	bcc.n	80158c4 <create_chain+0x64>
 801588c:	2301      	movs	r3, #1
 801588e:	61bb      	str	r3, [r7, #24]
 8015890:	e018      	b.n	80158c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015892:	6839      	ldr	r1, [r7, #0]
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f7ff fdea 	bl	801546e <get_fat>
 801589a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	2b01      	cmp	r3, #1
 80158a0:	d801      	bhi.n	80158a6 <create_chain+0x46>
 80158a2:	2301      	movs	r3, #1
 80158a4:	e070      	b.n	8015988 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ac:	d101      	bne.n	80158b2 <create_chain+0x52>
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	e06a      	b.n	8015988 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	699b      	ldr	r3, [r3, #24]
 80158b6:	68fa      	ldr	r2, [r7, #12]
 80158b8:	429a      	cmp	r2, r3
 80158ba:	d201      	bcs.n	80158c0 <create_chain+0x60>
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	e063      	b.n	8015988 <create_chain+0x128>
		scl = clst;
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80158c4:	69bb      	ldr	r3, [r7, #24]
 80158c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80158c8:	69fb      	ldr	r3, [r7, #28]
 80158ca:	3301      	adds	r3, #1
 80158cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	699b      	ldr	r3, [r3, #24]
 80158d2:	69fa      	ldr	r2, [r7, #28]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d307      	bcc.n	80158e8 <create_chain+0x88>
				ncl = 2;
 80158d8:	2302      	movs	r3, #2
 80158da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80158dc:	69fa      	ldr	r2, [r7, #28]
 80158de:	69bb      	ldr	r3, [r7, #24]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d901      	bls.n	80158e8 <create_chain+0x88>
 80158e4:	2300      	movs	r3, #0
 80158e6:	e04f      	b.n	8015988 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80158e8:	69f9      	ldr	r1, [r7, #28]
 80158ea:	6878      	ldr	r0, [r7, #4]
 80158ec:	f7ff fdbf 	bl	801546e <get_fat>
 80158f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d00e      	beq.n	8015916 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	2b01      	cmp	r3, #1
 80158fc:	d003      	beq.n	8015906 <create_chain+0xa6>
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015904:	d101      	bne.n	801590a <create_chain+0xaa>
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	e03e      	b.n	8015988 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801590a:	69fa      	ldr	r2, [r7, #28]
 801590c:	69bb      	ldr	r3, [r7, #24]
 801590e:	429a      	cmp	r2, r3
 8015910:	d1da      	bne.n	80158c8 <create_chain+0x68>
 8015912:	2300      	movs	r3, #0
 8015914:	e038      	b.n	8015988 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015916:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015918:	f04f 32ff 	mov.w	r2, #4294967295
 801591c:	69f9      	ldr	r1, [r7, #28]
 801591e:	6938      	ldr	r0, [r7, #16]
 8015920:	f7ff fe4d 	bl	80155be <put_fat>
 8015924:	4603      	mov	r3, r0
 8015926:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015928:	7dfb      	ldrb	r3, [r7, #23]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d109      	bne.n	8015942 <create_chain+0xe2>
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d006      	beq.n	8015942 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015934:	69fa      	ldr	r2, [r7, #28]
 8015936:	6839      	ldr	r1, [r7, #0]
 8015938:	6938      	ldr	r0, [r7, #16]
 801593a:	f7ff fe40 	bl	80155be <put_fat>
 801593e:	4603      	mov	r3, r0
 8015940:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015942:	7dfb      	ldrb	r3, [r7, #23]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d116      	bne.n	8015976 <create_chain+0x116>
		fs->last_clst = ncl;
 8015948:	693b      	ldr	r3, [r7, #16]
 801594a:	69fa      	ldr	r2, [r7, #28]
 801594c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801594e:	693b      	ldr	r3, [r7, #16]
 8015950:	695a      	ldr	r2, [r3, #20]
 8015952:	693b      	ldr	r3, [r7, #16]
 8015954:	699b      	ldr	r3, [r3, #24]
 8015956:	3b02      	subs	r3, #2
 8015958:	429a      	cmp	r2, r3
 801595a:	d804      	bhi.n	8015966 <create_chain+0x106>
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	695b      	ldr	r3, [r3, #20]
 8015960:	1e5a      	subs	r2, r3, #1
 8015962:	693b      	ldr	r3, [r7, #16]
 8015964:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8015966:	693b      	ldr	r3, [r7, #16]
 8015968:	791b      	ldrb	r3, [r3, #4]
 801596a:	f043 0301 	orr.w	r3, r3, #1
 801596e:	b2da      	uxtb	r2, r3
 8015970:	693b      	ldr	r3, [r7, #16]
 8015972:	711a      	strb	r2, [r3, #4]
 8015974:	e007      	b.n	8015986 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015976:	7dfb      	ldrb	r3, [r7, #23]
 8015978:	2b01      	cmp	r3, #1
 801597a:	d102      	bne.n	8015982 <create_chain+0x122>
 801597c:	f04f 33ff 	mov.w	r3, #4294967295
 8015980:	e000      	b.n	8015984 <create_chain+0x124>
 8015982:	2301      	movs	r3, #1
 8015984:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015986:	69fb      	ldr	r3, [r7, #28]
}
 8015988:	4618      	mov	r0, r3
 801598a:	3720      	adds	r7, #32
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}

08015990 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015990:	b480      	push	{r7}
 8015992:	b087      	sub	sp, #28
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159a4:	3304      	adds	r3, #4
 80159a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80159a8:	683b      	ldr	r3, [r7, #0]
 80159aa:	0a5b      	lsrs	r3, r3, #9
 80159ac:	68fa      	ldr	r2, [r7, #12]
 80159ae:	8952      	ldrh	r2, [r2, #10]
 80159b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80159b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80159b6:	693b      	ldr	r3, [r7, #16]
 80159b8:	1d1a      	adds	r2, r3, #4
 80159ba:	613a      	str	r2, [r7, #16]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80159c0:	68bb      	ldr	r3, [r7, #8]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d101      	bne.n	80159ca <clmt_clust+0x3a>
 80159c6:	2300      	movs	r3, #0
 80159c8:	e010      	b.n	80159ec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80159ca:	697a      	ldr	r2, [r7, #20]
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d307      	bcc.n	80159e2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80159d2:	697a      	ldr	r2, [r7, #20]
 80159d4:	68bb      	ldr	r3, [r7, #8]
 80159d6:	1ad3      	subs	r3, r2, r3
 80159d8:	617b      	str	r3, [r7, #20]
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	3304      	adds	r3, #4
 80159de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80159e0:	e7e9      	b.n	80159b6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80159e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	681a      	ldr	r2, [r3, #0]
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	4413      	add	r3, r2
}
 80159ec:	4618      	mov	r0, r3
 80159ee:	371c      	adds	r7, #28
 80159f0:	46bd      	mov	sp, r7
 80159f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f6:	4770      	bx	lr

080159f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b086      	sub	sp, #24
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
 8015a00:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015a0e:	d204      	bcs.n	8015a1a <dir_sdi+0x22>
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	f003 031f 	and.w	r3, r3, #31
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d001      	beq.n	8015a1e <dir_sdi+0x26>
		return FR_INT_ERR;
 8015a1a:	2302      	movs	r3, #2
 8015a1c:	e063      	b.n	8015ae6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	683a      	ldr	r2, [r7, #0]
 8015a22:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	689b      	ldr	r3, [r3, #8]
 8015a28:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015a2a:	697b      	ldr	r3, [r7, #20]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d106      	bne.n	8015a3e <dir_sdi+0x46>
 8015a30:	693b      	ldr	r3, [r7, #16]
 8015a32:	781b      	ldrb	r3, [r3, #0]
 8015a34:	2b02      	cmp	r3, #2
 8015a36:	d902      	bls.n	8015a3e <dir_sdi+0x46>
		clst = fs->dirbase;
 8015a38:	693b      	ldr	r3, [r7, #16]
 8015a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a3c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d10c      	bne.n	8015a5e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	095b      	lsrs	r3, r3, #5
 8015a48:	693a      	ldr	r2, [r7, #16]
 8015a4a:	8912      	ldrh	r2, [r2, #8]
 8015a4c:	4293      	cmp	r3, r2
 8015a4e:	d301      	bcc.n	8015a54 <dir_sdi+0x5c>
 8015a50:	2302      	movs	r3, #2
 8015a52:	e048      	b.n	8015ae6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015a54:	693b      	ldr	r3, [r7, #16]
 8015a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	61da      	str	r2, [r3, #28]
 8015a5c:	e029      	b.n	8015ab2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015a5e:	693b      	ldr	r3, [r7, #16]
 8015a60:	895b      	ldrh	r3, [r3, #10]
 8015a62:	025b      	lsls	r3, r3, #9
 8015a64:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015a66:	e019      	b.n	8015a9c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6979      	ldr	r1, [r7, #20]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff fcfe 	bl	801546e <get_fat>
 8015a72:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015a74:	697b      	ldr	r3, [r7, #20]
 8015a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a7a:	d101      	bne.n	8015a80 <dir_sdi+0x88>
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	e032      	b.n	8015ae6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015a80:	697b      	ldr	r3, [r7, #20]
 8015a82:	2b01      	cmp	r3, #1
 8015a84:	d904      	bls.n	8015a90 <dir_sdi+0x98>
 8015a86:	693b      	ldr	r3, [r7, #16]
 8015a88:	699b      	ldr	r3, [r3, #24]
 8015a8a:	697a      	ldr	r2, [r7, #20]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d301      	bcc.n	8015a94 <dir_sdi+0x9c>
 8015a90:	2302      	movs	r3, #2
 8015a92:	e028      	b.n	8015ae6 <dir_sdi+0xee>
			ofs -= csz;
 8015a94:	683a      	ldr	r2, [r7, #0]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	1ad3      	subs	r3, r2, r3
 8015a9a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015a9c:	683a      	ldr	r2, [r7, #0]
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	429a      	cmp	r2, r3
 8015aa2:	d2e1      	bcs.n	8015a68 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015aa4:	6979      	ldr	r1, [r7, #20]
 8015aa6:	6938      	ldr	r0, [r7, #16]
 8015aa8:	f7ff fcc2 	bl	8015430 <clust2sect>
 8015aac:	4602      	mov	r2, r0
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	697a      	ldr	r2, [r7, #20]
 8015ab6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	69db      	ldr	r3, [r3, #28]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d101      	bne.n	8015ac4 <dir_sdi+0xcc>
 8015ac0:	2302      	movs	r3, #2
 8015ac2:	e010      	b.n	8015ae6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	69da      	ldr	r2, [r3, #28]
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	0a5b      	lsrs	r3, r3, #9
 8015acc:	441a      	add	r2, r3
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015ad2:	693b      	ldr	r3, [r7, #16]
 8015ad4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ade:	441a      	add	r2, r3
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015ae4:	2300      	movs	r3, #0
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3718      	adds	r7, #24
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}

08015aee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015aee:	b580      	push	{r7, lr}
 8015af0:	b086      	sub	sp, #24
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	6078      	str	r0, [r7, #4]
 8015af6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	695b      	ldr	r3, [r3, #20]
 8015b02:	3320      	adds	r3, #32
 8015b04:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	69db      	ldr	r3, [r3, #28]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d003      	beq.n	8015b16 <dir_next+0x28>
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015b14:	d301      	bcc.n	8015b1a <dir_next+0x2c>
 8015b16:	2304      	movs	r3, #4
 8015b18:	e0aa      	b.n	8015c70 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015b1a:	68bb      	ldr	r3, [r7, #8]
 8015b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	f040 8098 	bne.w	8015c56 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	69db      	ldr	r3, [r3, #28]
 8015b2a:	1c5a      	adds	r2, r3, #1
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	699b      	ldr	r3, [r3, #24]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d10b      	bne.n	8015b50 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	095b      	lsrs	r3, r3, #5
 8015b3c:	68fa      	ldr	r2, [r7, #12]
 8015b3e:	8912      	ldrh	r2, [r2, #8]
 8015b40:	4293      	cmp	r3, r2
 8015b42:	f0c0 8088 	bcc.w	8015c56 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	2200      	movs	r2, #0
 8015b4a:	61da      	str	r2, [r3, #28]
 8015b4c:	2304      	movs	r3, #4
 8015b4e:	e08f      	b.n	8015c70 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	0a5b      	lsrs	r3, r3, #9
 8015b54:	68fa      	ldr	r2, [r7, #12]
 8015b56:	8952      	ldrh	r2, [r2, #10]
 8015b58:	3a01      	subs	r2, #1
 8015b5a:	4013      	ands	r3, r2
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d17a      	bne.n	8015c56 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015b60:	687a      	ldr	r2, [r7, #4]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	699b      	ldr	r3, [r3, #24]
 8015b66:	4619      	mov	r1, r3
 8015b68:	4610      	mov	r0, r2
 8015b6a:	f7ff fc80 	bl	801546e <get_fat>
 8015b6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	2b01      	cmp	r3, #1
 8015b74:	d801      	bhi.n	8015b7a <dir_next+0x8c>
 8015b76:	2302      	movs	r3, #2
 8015b78:	e07a      	b.n	8015c70 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b80:	d101      	bne.n	8015b86 <dir_next+0x98>
 8015b82:	2301      	movs	r3, #1
 8015b84:	e074      	b.n	8015c70 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	699b      	ldr	r3, [r3, #24]
 8015b8a:	697a      	ldr	r2, [r7, #20]
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d358      	bcc.n	8015c42 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015b90:	683b      	ldr	r3, [r7, #0]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d104      	bne.n	8015ba0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	61da      	str	r2, [r3, #28]
 8015b9c:	2304      	movs	r3, #4
 8015b9e:	e067      	b.n	8015c70 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015ba0:	687a      	ldr	r2, [r7, #4]
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	699b      	ldr	r3, [r3, #24]
 8015ba6:	4619      	mov	r1, r3
 8015ba8:	4610      	mov	r0, r2
 8015baa:	f7ff fe59 	bl	8015860 <create_chain>
 8015bae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015bb0:	697b      	ldr	r3, [r7, #20]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d101      	bne.n	8015bba <dir_next+0xcc>
 8015bb6:	2307      	movs	r3, #7
 8015bb8:	e05a      	b.n	8015c70 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	2b01      	cmp	r3, #1
 8015bbe:	d101      	bne.n	8015bc4 <dir_next+0xd6>
 8015bc0:	2302      	movs	r3, #2
 8015bc2:	e055      	b.n	8015c70 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bca:	d101      	bne.n	8015bd0 <dir_next+0xe2>
 8015bcc:	2301      	movs	r3, #1
 8015bce:	e04f      	b.n	8015c70 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015bd0:	68f8      	ldr	r0, [r7, #12]
 8015bd2:	f7ff fb4d 	bl	8015270 <sync_window>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d001      	beq.n	8015be0 <dir_next+0xf2>
 8015bdc:	2301      	movs	r3, #1
 8015bde:	e047      	b.n	8015c70 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	3334      	adds	r3, #52	; 0x34
 8015be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015be8:	2100      	movs	r1, #0
 8015bea:	4618      	mov	r0, r3
 8015bec:	f7ff f977 	bl	8014ede <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	613b      	str	r3, [r7, #16]
 8015bf4:	6979      	ldr	r1, [r7, #20]
 8015bf6:	68f8      	ldr	r0, [r7, #12]
 8015bf8:	f7ff fc1a 	bl	8015430 <clust2sect>
 8015bfc:	4602      	mov	r2, r0
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	631a      	str	r2, [r3, #48]	; 0x30
 8015c02:	e012      	b.n	8015c2a <dir_next+0x13c>
						fs->wflag = 1;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	2201      	movs	r2, #1
 8015c08:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015c0a:	68f8      	ldr	r0, [r7, #12]
 8015c0c:	f7ff fb30 	bl	8015270 <sync_window>
 8015c10:	4603      	mov	r3, r0
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d001      	beq.n	8015c1a <dir_next+0x12c>
 8015c16:	2301      	movs	r3, #1
 8015c18:	e02a      	b.n	8015c70 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	3301      	adds	r3, #1
 8015c1e:	613b      	str	r3, [r7, #16]
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c24:	1c5a      	adds	r2, r3, #1
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	631a      	str	r2, [r3, #48]	; 0x30
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	895b      	ldrh	r3, [r3, #10]
 8015c2e:	461a      	mov	r2, r3
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	4293      	cmp	r3, r2
 8015c34:	d3e6      	bcc.n	8015c04 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c3a:	693b      	ldr	r3, [r7, #16]
 8015c3c:	1ad2      	subs	r2, r2, r3
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	697a      	ldr	r2, [r7, #20]
 8015c46:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015c48:	6979      	ldr	r1, [r7, #20]
 8015c4a:	68f8      	ldr	r0, [r7, #12]
 8015c4c:	f7ff fbf0 	bl	8015430 <clust2sect>
 8015c50:	4602      	mov	r2, r0
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	68ba      	ldr	r2, [r7, #8]
 8015c5a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c68:	441a      	add	r2, r3
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015c6e:	2300      	movs	r3, #0
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	3718      	adds	r7, #24
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd80      	pop	{r7, pc}

08015c78 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b086      	sub	sp, #24
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
 8015c80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015c88:	2100      	movs	r1, #0
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f7ff feb4 	bl	80159f8 <dir_sdi>
 8015c90:	4603      	mov	r3, r0
 8015c92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015c94:	7dfb      	ldrb	r3, [r7, #23]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d12b      	bne.n	8015cf2 <dir_alloc+0x7a>
		n = 0;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	69db      	ldr	r3, [r3, #28]
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	68f8      	ldr	r0, [r7, #12]
 8015ca6:	f7ff fb27 	bl	80152f8 <move_window>
 8015caa:	4603      	mov	r3, r0
 8015cac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015cae:	7dfb      	ldrb	r3, [r7, #23]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d11d      	bne.n	8015cf0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	6a1b      	ldr	r3, [r3, #32]
 8015cb8:	781b      	ldrb	r3, [r3, #0]
 8015cba:	2be5      	cmp	r3, #229	; 0xe5
 8015cbc:	d004      	beq.n	8015cc8 <dir_alloc+0x50>
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	6a1b      	ldr	r3, [r3, #32]
 8015cc2:	781b      	ldrb	r3, [r3, #0]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d107      	bne.n	8015cd8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	3301      	adds	r3, #1
 8015ccc:	613b      	str	r3, [r7, #16]
 8015cce:	693a      	ldr	r2, [r7, #16]
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d102      	bne.n	8015cdc <dir_alloc+0x64>
 8015cd6:	e00c      	b.n	8015cf2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015cd8:	2300      	movs	r3, #0
 8015cda:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015cdc:	2101      	movs	r1, #1
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f7ff ff05 	bl	8015aee <dir_next>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015ce8:	7dfb      	ldrb	r3, [r7, #23]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d0d7      	beq.n	8015c9e <dir_alloc+0x26>
 8015cee:	e000      	b.n	8015cf2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015cf0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015cf2:	7dfb      	ldrb	r3, [r7, #23]
 8015cf4:	2b04      	cmp	r3, #4
 8015cf6:	d101      	bne.n	8015cfc <dir_alloc+0x84>
 8015cf8:	2307      	movs	r3, #7
 8015cfa:	75fb      	strb	r3, [r7, #23]
	return res;
 8015cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3718      	adds	r7, #24
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}

08015d06 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015d06:	b580      	push	{r7, lr}
 8015d08:	b084      	sub	sp, #16
 8015d0a:	af00      	add	r7, sp, #0
 8015d0c:	6078      	str	r0, [r7, #4]
 8015d0e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	331a      	adds	r3, #26
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7ff f83f 	bl	8014d98 <ld_word>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	2b03      	cmp	r3, #3
 8015d24:	d109      	bne.n	8015d3a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	3314      	adds	r3, #20
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f7ff f834 	bl	8014d98 <ld_word>
 8015d30:	4603      	mov	r3, r0
 8015d32:	041b      	lsls	r3, r3, #16
 8015d34:	68fa      	ldr	r2, [r7, #12]
 8015d36:	4313      	orrs	r3, r2
 8015d38:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015d3a:	68fb      	ldr	r3, [r7, #12]
}
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	3710      	adds	r7, #16
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}

08015d44 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b084      	sub	sp, #16
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	60f8      	str	r0, [r7, #12]
 8015d4c:	60b9      	str	r1, [r7, #8]
 8015d4e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	331a      	adds	r3, #26
 8015d54:	687a      	ldr	r2, [r7, #4]
 8015d56:	b292      	uxth	r2, r2
 8015d58:	4611      	mov	r1, r2
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7ff f857 	bl	8014e0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	781b      	ldrb	r3, [r3, #0]
 8015d64:	2b03      	cmp	r3, #3
 8015d66:	d109      	bne.n	8015d7c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	f103 0214 	add.w	r2, r3, #20
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	0c1b      	lsrs	r3, r3, #16
 8015d72:	b29b      	uxth	r3, r3
 8015d74:	4619      	mov	r1, r3
 8015d76:	4610      	mov	r0, r2
 8015d78:	f7ff f849 	bl	8014e0e <st_word>
	}
}
 8015d7c:	bf00      	nop
 8015d7e:	3710      	adds	r7, #16
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}

08015d84 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8015d84:	b590      	push	{r4, r7, lr}
 8015d86:	b087      	sub	sp, #28
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
 8015d8c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	331a      	adds	r3, #26
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7ff f800 	bl	8014d98 <ld_word>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d001      	beq.n	8015da2 <cmp_lfn+0x1e>
 8015d9e:	2300      	movs	r3, #0
 8015da0:	e059      	b.n	8015e56 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015daa:	1e5a      	subs	r2, r3, #1
 8015dac:	4613      	mov	r3, r2
 8015dae:	005b      	lsls	r3, r3, #1
 8015db0:	4413      	add	r3, r2
 8015db2:	009b      	lsls	r3, r3, #2
 8015db4:	4413      	add	r3, r2
 8015db6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015db8:	2301      	movs	r3, #1
 8015dba:	81fb      	strh	r3, [r7, #14]
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	613b      	str	r3, [r7, #16]
 8015dc0:	e033      	b.n	8015e2a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015dc2:	4a27      	ldr	r2, [pc, #156]	; (8015e60 <cmp_lfn+0xdc>)
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	4413      	add	r3, r2
 8015dc8:	781b      	ldrb	r3, [r3, #0]
 8015dca:	461a      	mov	r2, r3
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	4413      	add	r3, r2
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7fe ffe1 	bl	8014d98 <ld_word>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015dda:	89fb      	ldrh	r3, [r7, #14]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d01a      	beq.n	8015e16 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	2bfe      	cmp	r3, #254	; 0xfe
 8015de4:	d812      	bhi.n	8015e0c <cmp_lfn+0x88>
 8015de6:	89bb      	ldrh	r3, [r7, #12]
 8015de8:	4618      	mov	r0, r3
 8015dea:	f002 fb45 	bl	8018478 <ff_wtoupper>
 8015dee:	4603      	mov	r3, r0
 8015df0:	461c      	mov	r4, r3
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	1c5a      	adds	r2, r3, #1
 8015df6:	617a      	str	r2, [r7, #20]
 8015df8:	005b      	lsls	r3, r3, #1
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	4413      	add	r3, r2
 8015dfe:	881b      	ldrh	r3, [r3, #0]
 8015e00:	4618      	mov	r0, r3
 8015e02:	f002 fb39 	bl	8018478 <ff_wtoupper>
 8015e06:	4603      	mov	r3, r0
 8015e08:	429c      	cmp	r4, r3
 8015e0a:	d001      	beq.n	8015e10 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	e022      	b.n	8015e56 <cmp_lfn+0xd2>
			}
			wc = uc;
 8015e10:	89bb      	ldrh	r3, [r7, #12]
 8015e12:	81fb      	strh	r3, [r7, #14]
 8015e14:	e006      	b.n	8015e24 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015e16:	89bb      	ldrh	r3, [r7, #12]
 8015e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	d001      	beq.n	8015e24 <cmp_lfn+0xa0>
 8015e20:	2300      	movs	r3, #0
 8015e22:	e018      	b.n	8015e56 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015e24:	693b      	ldr	r3, [r7, #16]
 8015e26:	3301      	adds	r3, #1
 8015e28:	613b      	str	r3, [r7, #16]
 8015e2a:	693b      	ldr	r3, [r7, #16]
 8015e2c:	2b0c      	cmp	r3, #12
 8015e2e:	d9c8      	bls.n	8015dc2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	781b      	ldrb	r3, [r3, #0]
 8015e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d00b      	beq.n	8015e54 <cmp_lfn+0xd0>
 8015e3c:	89fb      	ldrh	r3, [r7, #14]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d008      	beq.n	8015e54 <cmp_lfn+0xd0>
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	005b      	lsls	r3, r3, #1
 8015e46:	687a      	ldr	r2, [r7, #4]
 8015e48:	4413      	add	r3, r2
 8015e4a:	881b      	ldrh	r3, [r3, #0]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d001      	beq.n	8015e54 <cmp_lfn+0xd0>
 8015e50:	2300      	movs	r3, #0
 8015e52:	e000      	b.n	8015e56 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8015e54:	2301      	movs	r3, #1
}
 8015e56:	4618      	mov	r0, r3
 8015e58:	371c      	adds	r7, #28
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	bd90      	pop	{r4, r7, pc}
 8015e5e:	bf00      	nop
 8015e60:	08023c1c 	.word	0x08023c1c

08015e64 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b086      	sub	sp, #24
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	331a      	adds	r3, #26
 8015e72:	4618      	mov	r0, r3
 8015e74:	f7fe ff90 	bl	8014d98 <ld_word>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d001      	beq.n	8015e82 <pick_lfn+0x1e>
 8015e7e:	2300      	movs	r3, #0
 8015e80:	e04d      	b.n	8015f1e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	781b      	ldrb	r3, [r3, #0]
 8015e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e8a:	1e5a      	subs	r2, r3, #1
 8015e8c:	4613      	mov	r3, r2
 8015e8e:	005b      	lsls	r3, r3, #1
 8015e90:	4413      	add	r3, r2
 8015e92:	009b      	lsls	r3, r3, #2
 8015e94:	4413      	add	r3, r2
 8015e96:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015e98:	2301      	movs	r3, #1
 8015e9a:	81fb      	strh	r3, [r7, #14]
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	613b      	str	r3, [r7, #16]
 8015ea0:	e028      	b.n	8015ef4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015ea2:	4a21      	ldr	r2, [pc, #132]	; (8015f28 <pick_lfn+0xc4>)
 8015ea4:	693b      	ldr	r3, [r7, #16]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	781b      	ldrb	r3, [r3, #0]
 8015eaa:	461a      	mov	r2, r3
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	4413      	add	r3, r2
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7fe ff71 	bl	8014d98 <ld_word>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015eba:	89fb      	ldrh	r3, [r7, #14]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d00f      	beq.n	8015ee0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	2bfe      	cmp	r3, #254	; 0xfe
 8015ec4:	d901      	bls.n	8015eca <pick_lfn+0x66>
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	e029      	b.n	8015f1e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8015eca:	89bb      	ldrh	r3, [r7, #12]
 8015ecc:	81fb      	strh	r3, [r7, #14]
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	1c5a      	adds	r2, r3, #1
 8015ed2:	617a      	str	r2, [r7, #20]
 8015ed4:	005b      	lsls	r3, r3, #1
 8015ed6:	687a      	ldr	r2, [r7, #4]
 8015ed8:	4413      	add	r3, r2
 8015eda:	89fa      	ldrh	r2, [r7, #14]
 8015edc:	801a      	strh	r2, [r3, #0]
 8015ede:	e006      	b.n	8015eee <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015ee0:	89bb      	ldrh	r3, [r7, #12]
 8015ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ee6:	4293      	cmp	r3, r2
 8015ee8:	d001      	beq.n	8015eee <pick_lfn+0x8a>
 8015eea:	2300      	movs	r3, #0
 8015eec:	e017      	b.n	8015f1e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015eee:	693b      	ldr	r3, [r7, #16]
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	613b      	str	r3, [r7, #16]
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	2b0c      	cmp	r3, #12
 8015ef8:	d9d3      	bls.n	8015ea2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d00a      	beq.n	8015f1c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	2bfe      	cmp	r3, #254	; 0xfe
 8015f0a:	d901      	bls.n	8015f10 <pick_lfn+0xac>
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	e006      	b.n	8015f1e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8015f10:	697b      	ldr	r3, [r7, #20]
 8015f12:	005b      	lsls	r3, r3, #1
 8015f14:	687a      	ldr	r2, [r7, #4]
 8015f16:	4413      	add	r3, r2
 8015f18:	2200      	movs	r2, #0
 8015f1a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8015f1c:	2301      	movs	r3, #1
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3718      	adds	r7, #24
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop
 8015f28:	08023c1c 	.word	0x08023c1c

08015f2c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b088      	sub	sp, #32
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	60f8      	str	r0, [r7, #12]
 8015f34:	60b9      	str	r1, [r7, #8]
 8015f36:	4611      	mov	r1, r2
 8015f38:	461a      	mov	r2, r3
 8015f3a:	460b      	mov	r3, r1
 8015f3c:	71fb      	strb	r3, [r7, #7]
 8015f3e:	4613      	mov	r3, r2
 8015f40:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	330d      	adds	r3, #13
 8015f46:	79ba      	ldrb	r2, [r7, #6]
 8015f48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015f4a:	68bb      	ldr	r3, [r7, #8]
 8015f4c:	330b      	adds	r3, #11
 8015f4e:	220f      	movs	r2, #15
 8015f50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	330c      	adds	r3, #12
 8015f56:	2200      	movs	r2, #0
 8015f58:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8015f5a:	68bb      	ldr	r3, [r7, #8]
 8015f5c:	331a      	adds	r3, #26
 8015f5e:	2100      	movs	r1, #0
 8015f60:	4618      	mov	r0, r3
 8015f62:	f7fe ff54 	bl	8014e0e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015f66:	79fb      	ldrb	r3, [r7, #7]
 8015f68:	1e5a      	subs	r2, r3, #1
 8015f6a:	4613      	mov	r3, r2
 8015f6c:	005b      	lsls	r3, r3, #1
 8015f6e:	4413      	add	r3, r2
 8015f70:	009b      	lsls	r3, r3, #2
 8015f72:	4413      	add	r3, r2
 8015f74:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8015f76:	2300      	movs	r3, #0
 8015f78:	82fb      	strh	r3, [r7, #22]
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015f7e:	8afb      	ldrh	r3, [r7, #22]
 8015f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f84:	4293      	cmp	r3, r2
 8015f86:	d007      	beq.n	8015f98 <put_lfn+0x6c>
 8015f88:	69fb      	ldr	r3, [r7, #28]
 8015f8a:	1c5a      	adds	r2, r3, #1
 8015f8c:	61fa      	str	r2, [r7, #28]
 8015f8e:	005b      	lsls	r3, r3, #1
 8015f90:	68fa      	ldr	r2, [r7, #12]
 8015f92:	4413      	add	r3, r2
 8015f94:	881b      	ldrh	r3, [r3, #0]
 8015f96:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015f98:	4a17      	ldr	r2, [pc, #92]	; (8015ff8 <put_lfn+0xcc>)
 8015f9a:	69bb      	ldr	r3, [r7, #24]
 8015f9c:	4413      	add	r3, r2
 8015f9e:	781b      	ldrb	r3, [r3, #0]
 8015fa0:	461a      	mov	r2, r3
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	4413      	add	r3, r2
 8015fa6:	8afa      	ldrh	r2, [r7, #22]
 8015fa8:	4611      	mov	r1, r2
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7fe ff2f 	bl	8014e0e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015fb0:	8afb      	ldrh	r3, [r7, #22]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d102      	bne.n	8015fbc <put_lfn+0x90>
 8015fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8015fbc:	69bb      	ldr	r3, [r7, #24]
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	61bb      	str	r3, [r7, #24]
 8015fc2:	69bb      	ldr	r3, [r7, #24]
 8015fc4:	2b0c      	cmp	r3, #12
 8015fc6:	d9da      	bls.n	8015f7e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015fc8:	8afb      	ldrh	r3, [r7, #22]
 8015fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015fce:	4293      	cmp	r3, r2
 8015fd0:	d006      	beq.n	8015fe0 <put_lfn+0xb4>
 8015fd2:	69fb      	ldr	r3, [r7, #28]
 8015fd4:	005b      	lsls	r3, r3, #1
 8015fd6:	68fa      	ldr	r2, [r7, #12]
 8015fd8:	4413      	add	r3, r2
 8015fda:	881b      	ldrh	r3, [r3, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d103      	bne.n	8015fe8 <put_lfn+0xbc>
 8015fe0:	79fb      	ldrb	r3, [r7, #7]
 8015fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fe6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	79fa      	ldrb	r2, [r7, #7]
 8015fec:	701a      	strb	r2, [r3, #0]
}
 8015fee:	bf00      	nop
 8015ff0:	3720      	adds	r7, #32
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}
 8015ff6:	bf00      	nop
 8015ff8:	08023c1c 	.word	0x08023c1c

08015ffc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b08c      	sub	sp, #48	; 0x30
 8016000:	af00      	add	r7, sp, #0
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	607a      	str	r2, [r7, #4]
 8016008:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801600a:	220b      	movs	r2, #11
 801600c:	68b9      	ldr	r1, [r7, #8]
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	f7fe ff44 	bl	8014e9c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	2b05      	cmp	r3, #5
 8016018:	d92b      	bls.n	8016072 <gen_numname+0x76>
		sr = seq;
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801601e:	e022      	b.n	8016066 <gen_numname+0x6a>
			wc = *lfn++;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	1c9a      	adds	r2, r3, #2
 8016024:	607a      	str	r2, [r7, #4]
 8016026:	881b      	ldrh	r3, [r3, #0]
 8016028:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801602a:	2300      	movs	r3, #0
 801602c:	62bb      	str	r3, [r7, #40]	; 0x28
 801602e:	e017      	b.n	8016060 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8016030:	69fb      	ldr	r3, [r7, #28]
 8016032:	005a      	lsls	r2, r3, #1
 8016034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016036:	f003 0301 	and.w	r3, r3, #1
 801603a:	4413      	add	r3, r2
 801603c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801603e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016040:	085b      	lsrs	r3, r3, #1
 8016042:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8016044:	69fb      	ldr	r3, [r7, #28]
 8016046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801604a:	2b00      	cmp	r3, #0
 801604c:	d005      	beq.n	801605a <gen_numname+0x5e>
 801604e:	69fb      	ldr	r3, [r7, #28]
 8016050:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8016054:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8016058:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801605c:	3301      	adds	r3, #1
 801605e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016062:	2b0f      	cmp	r3, #15
 8016064:	d9e4      	bls.n	8016030 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	881b      	ldrh	r3, [r3, #0]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d1d8      	bne.n	8016020 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801606e:	69fb      	ldr	r3, [r7, #28]
 8016070:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8016072:	2307      	movs	r3, #7
 8016074:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016076:	683b      	ldr	r3, [r7, #0]
 8016078:	b2db      	uxtb	r3, r3
 801607a:	f003 030f 	and.w	r3, r3, #15
 801607e:	b2db      	uxtb	r3, r3
 8016080:	3330      	adds	r3, #48	; 0x30
 8016082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8016086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801608a:	2b39      	cmp	r3, #57	; 0x39
 801608c:	d904      	bls.n	8016098 <gen_numname+0x9c>
 801608e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016092:	3307      	adds	r3, #7
 8016094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8016098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801609a:	1e5a      	subs	r2, r3, #1
 801609c:	62ba      	str	r2, [r7, #40]	; 0x28
 801609e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80160a2:	4413      	add	r3, r2
 80160a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80160a8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	091b      	lsrs	r3, r3, #4
 80160b0:	603b      	str	r3, [r7, #0]
	} while (seq);
 80160b2:	683b      	ldr	r3, [r7, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d1de      	bne.n	8016076 <gen_numname+0x7a>
	ns[i] = '~';
 80160b8:	f107 0214 	add.w	r2, r7, #20
 80160bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160be:	4413      	add	r3, r2
 80160c0:	227e      	movs	r2, #126	; 0x7e
 80160c2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80160c4:	2300      	movs	r3, #0
 80160c6:	627b      	str	r3, [r7, #36]	; 0x24
 80160c8:	e002      	b.n	80160d0 <gen_numname+0xd4>
 80160ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160cc:	3301      	adds	r3, #1
 80160ce:	627b      	str	r3, [r7, #36]	; 0x24
 80160d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d205      	bcs.n	80160e4 <gen_numname+0xe8>
 80160d8:	68fa      	ldr	r2, [r7, #12]
 80160da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160dc:	4413      	add	r3, r2
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	2b20      	cmp	r3, #32
 80160e2:	d1f2      	bne.n	80160ca <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80160e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160e6:	2b07      	cmp	r3, #7
 80160e8:	d808      	bhi.n	80160fc <gen_numname+0x100>
 80160ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ec:	1c5a      	adds	r2, r3, #1
 80160ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80160f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80160f4:	4413      	add	r3, r2
 80160f6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80160fa:	e000      	b.n	80160fe <gen_numname+0x102>
 80160fc:	2120      	movs	r1, #32
 80160fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016100:	1c5a      	adds	r2, r3, #1
 8016102:	627a      	str	r2, [r7, #36]	; 0x24
 8016104:	68fa      	ldr	r2, [r7, #12]
 8016106:	4413      	add	r3, r2
 8016108:	460a      	mov	r2, r1
 801610a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801610e:	2b07      	cmp	r3, #7
 8016110:	d9e8      	bls.n	80160e4 <gen_numname+0xe8>
}
 8016112:	bf00      	nop
 8016114:	bf00      	nop
 8016116:	3730      	adds	r7, #48	; 0x30
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}

0801611c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801611c:	b480      	push	{r7}
 801611e:	b085      	sub	sp, #20
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8016124:	2300      	movs	r3, #0
 8016126:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8016128:	230b      	movs	r3, #11
 801612a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801612c:	7bfb      	ldrb	r3, [r7, #15]
 801612e:	b2da      	uxtb	r2, r3
 8016130:	0852      	lsrs	r2, r2, #1
 8016132:	01db      	lsls	r3, r3, #7
 8016134:	4313      	orrs	r3, r2
 8016136:	b2da      	uxtb	r2, r3
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	1c59      	adds	r1, r3, #1
 801613c:	6079      	str	r1, [r7, #4]
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	4413      	add	r3, r2
 8016142:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	3b01      	subs	r3, #1
 8016148:	60bb      	str	r3, [r7, #8]
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d1ed      	bne.n	801612c <sum_sfn+0x10>
	return sum;
 8016150:	7bfb      	ldrb	r3, [r7, #15]
}
 8016152:	4618      	mov	r0, r3
 8016154:	3714      	adds	r7, #20
 8016156:	46bd      	mov	sp, r7
 8016158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615c:	4770      	bx	lr

0801615e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801615e:	b580      	push	{r7, lr}
 8016160:	b086      	sub	sp, #24
 8016162:	af00      	add	r7, sp, #0
 8016164:	6078      	str	r0, [r7, #4]
 8016166:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8016168:	2304      	movs	r3, #4
 801616a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8016172:	23ff      	movs	r3, #255	; 0xff
 8016174:	757b      	strb	r3, [r7, #21]
 8016176:	23ff      	movs	r3, #255	; 0xff
 8016178:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801617a:	e081      	b.n	8016280 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	69db      	ldr	r3, [r3, #28]
 8016180:	4619      	mov	r1, r3
 8016182:	6938      	ldr	r0, [r7, #16]
 8016184:	f7ff f8b8 	bl	80152f8 <move_window>
 8016188:	4603      	mov	r3, r0
 801618a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801618c:	7dfb      	ldrb	r3, [r7, #23]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d17c      	bne.n	801628c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6a1b      	ldr	r3, [r3, #32]
 8016196:	781b      	ldrb	r3, [r3, #0]
 8016198:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801619a:	7dbb      	ldrb	r3, [r7, #22]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d102      	bne.n	80161a6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80161a0:	2304      	movs	r3, #4
 80161a2:	75fb      	strb	r3, [r7, #23]
 80161a4:	e077      	b.n	8016296 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	6a1b      	ldr	r3, [r3, #32]
 80161aa:	330b      	adds	r3, #11
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80161b2:	73fb      	strb	r3, [r7, #15]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	7bfa      	ldrb	r2, [r7, #15]
 80161b8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80161ba:	7dbb      	ldrb	r3, [r7, #22]
 80161bc:	2be5      	cmp	r3, #229	; 0xe5
 80161be:	d00e      	beq.n	80161de <dir_read+0x80>
 80161c0:	7dbb      	ldrb	r3, [r7, #22]
 80161c2:	2b2e      	cmp	r3, #46	; 0x2e
 80161c4:	d00b      	beq.n	80161de <dir_read+0x80>
 80161c6:	7bfb      	ldrb	r3, [r7, #15]
 80161c8:	f023 0320 	bic.w	r3, r3, #32
 80161cc:	2b08      	cmp	r3, #8
 80161ce:	bf0c      	ite	eq
 80161d0:	2301      	moveq	r3, #1
 80161d2:	2300      	movne	r3, #0
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	461a      	mov	r2, r3
 80161d8:	683b      	ldr	r3, [r7, #0]
 80161da:	4293      	cmp	r3, r2
 80161dc:	d002      	beq.n	80161e4 <dir_read+0x86>
				ord = 0xFF;
 80161de:	23ff      	movs	r3, #255	; 0xff
 80161e0:	757b      	strb	r3, [r7, #21]
 80161e2:	e044      	b.n	801626e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80161e4:	7bfb      	ldrb	r3, [r7, #15]
 80161e6:	2b0f      	cmp	r3, #15
 80161e8:	d12f      	bne.n	801624a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80161ea:	7dbb      	ldrb	r3, [r7, #22]
 80161ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d00d      	beq.n	8016210 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	6a1b      	ldr	r3, [r3, #32]
 80161f8:	7b5b      	ldrb	r3, [r3, #13]
 80161fa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80161fc:	7dbb      	ldrb	r3, [r7, #22]
 80161fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016202:	75bb      	strb	r3, [r7, #22]
 8016204:	7dbb      	ldrb	r3, [r7, #22]
 8016206:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	695a      	ldr	r2, [r3, #20]
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8016210:	7dba      	ldrb	r2, [r7, #22]
 8016212:	7d7b      	ldrb	r3, [r7, #21]
 8016214:	429a      	cmp	r2, r3
 8016216:	d115      	bne.n	8016244 <dir_read+0xe6>
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	6a1b      	ldr	r3, [r3, #32]
 801621c:	330d      	adds	r3, #13
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	7d3a      	ldrb	r2, [r7, #20]
 8016222:	429a      	cmp	r2, r3
 8016224:	d10e      	bne.n	8016244 <dir_read+0xe6>
 8016226:	693b      	ldr	r3, [r7, #16]
 8016228:	68da      	ldr	r2, [r3, #12]
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	6a1b      	ldr	r3, [r3, #32]
 801622e:	4619      	mov	r1, r3
 8016230:	4610      	mov	r0, r2
 8016232:	f7ff fe17 	bl	8015e64 <pick_lfn>
 8016236:	4603      	mov	r3, r0
 8016238:	2b00      	cmp	r3, #0
 801623a:	d003      	beq.n	8016244 <dir_read+0xe6>
 801623c:	7d7b      	ldrb	r3, [r7, #21]
 801623e:	3b01      	subs	r3, #1
 8016240:	b2db      	uxtb	r3, r3
 8016242:	e000      	b.n	8016246 <dir_read+0xe8>
 8016244:	23ff      	movs	r3, #255	; 0xff
 8016246:	757b      	strb	r3, [r7, #21]
 8016248:	e011      	b.n	801626e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801624a:	7d7b      	ldrb	r3, [r7, #21]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d109      	bne.n	8016264 <dir_read+0x106>
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	6a1b      	ldr	r3, [r3, #32]
 8016254:	4618      	mov	r0, r3
 8016256:	f7ff ff61 	bl	801611c <sum_sfn>
 801625a:	4603      	mov	r3, r0
 801625c:	461a      	mov	r2, r3
 801625e:	7d3b      	ldrb	r3, [r7, #20]
 8016260:	4293      	cmp	r3, r2
 8016262:	d015      	beq.n	8016290 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	f04f 32ff 	mov.w	r2, #4294967295
 801626a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 801626c:	e010      	b.n	8016290 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801626e:	2100      	movs	r1, #0
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f7ff fc3c 	bl	8015aee <dir_next>
 8016276:	4603      	mov	r3, r0
 8016278:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801627a:	7dfb      	ldrb	r3, [r7, #23]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d109      	bne.n	8016294 <dir_read+0x136>
	while (dp->sect) {
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	69db      	ldr	r3, [r3, #28]
 8016284:	2b00      	cmp	r3, #0
 8016286:	f47f af79 	bne.w	801617c <dir_read+0x1e>
 801628a:	e004      	b.n	8016296 <dir_read+0x138>
		if (res != FR_OK) break;
 801628c:	bf00      	nop
 801628e:	e002      	b.n	8016296 <dir_read+0x138>
					break;
 8016290:	bf00      	nop
 8016292:	e000      	b.n	8016296 <dir_read+0x138>
		if (res != FR_OK) break;
 8016294:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8016296:	7dfb      	ldrb	r3, [r7, #23]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d002      	beq.n	80162a2 <dir_read+0x144>
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2200      	movs	r2, #0
 80162a0:	61da      	str	r2, [r3, #28]
	return res;
 80162a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	3718      	adds	r7, #24
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}

080162ac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b086      	sub	sp, #24
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80162ba:	2100      	movs	r1, #0
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f7ff fb9b 	bl	80159f8 <dir_sdi>
 80162c2:	4603      	mov	r3, r0
 80162c4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80162c6:	7dfb      	ldrb	r3, [r7, #23]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d001      	beq.n	80162d0 <dir_find+0x24>
 80162cc:	7dfb      	ldrb	r3, [r7, #23]
 80162ce:	e0a9      	b.n	8016424 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80162d0:	23ff      	movs	r3, #255	; 0xff
 80162d2:	753b      	strb	r3, [r7, #20]
 80162d4:	7d3b      	ldrb	r3, [r7, #20]
 80162d6:	757b      	strb	r3, [r7, #21]
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f04f 32ff 	mov.w	r2, #4294967295
 80162de:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	69db      	ldr	r3, [r3, #28]
 80162e4:	4619      	mov	r1, r3
 80162e6:	6938      	ldr	r0, [r7, #16]
 80162e8:	f7ff f806 	bl	80152f8 <move_window>
 80162ec:	4603      	mov	r3, r0
 80162ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80162f0:	7dfb      	ldrb	r3, [r7, #23]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	f040 8090 	bne.w	8016418 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	6a1b      	ldr	r3, [r3, #32]
 80162fc:	781b      	ldrb	r3, [r3, #0]
 80162fe:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8016300:	7dbb      	ldrb	r3, [r7, #22]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d102      	bne.n	801630c <dir_find+0x60>
 8016306:	2304      	movs	r3, #4
 8016308:	75fb      	strb	r3, [r7, #23]
 801630a:	e08a      	b.n	8016422 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	6a1b      	ldr	r3, [r3, #32]
 8016310:	330b      	adds	r3, #11
 8016312:	781b      	ldrb	r3, [r3, #0]
 8016314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016318:	73fb      	strb	r3, [r7, #15]
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	7bfa      	ldrb	r2, [r7, #15]
 801631e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8016320:	7dbb      	ldrb	r3, [r7, #22]
 8016322:	2be5      	cmp	r3, #229	; 0xe5
 8016324:	d007      	beq.n	8016336 <dir_find+0x8a>
 8016326:	7bfb      	ldrb	r3, [r7, #15]
 8016328:	f003 0308 	and.w	r3, r3, #8
 801632c:	2b00      	cmp	r3, #0
 801632e:	d009      	beq.n	8016344 <dir_find+0x98>
 8016330:	7bfb      	ldrb	r3, [r7, #15]
 8016332:	2b0f      	cmp	r3, #15
 8016334:	d006      	beq.n	8016344 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016336:	23ff      	movs	r3, #255	; 0xff
 8016338:	757b      	strb	r3, [r7, #21]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	f04f 32ff 	mov.w	r2, #4294967295
 8016340:	631a      	str	r2, [r3, #48]	; 0x30
 8016342:	e05e      	b.n	8016402 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8016344:	7bfb      	ldrb	r3, [r7, #15]
 8016346:	2b0f      	cmp	r3, #15
 8016348:	d136      	bne.n	80163b8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016354:	2b00      	cmp	r3, #0
 8016356:	d154      	bne.n	8016402 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8016358:	7dbb      	ldrb	r3, [r7, #22]
 801635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801635e:	2b00      	cmp	r3, #0
 8016360:	d00d      	beq.n	801637e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6a1b      	ldr	r3, [r3, #32]
 8016366:	7b5b      	ldrb	r3, [r3, #13]
 8016368:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801636a:	7dbb      	ldrb	r3, [r7, #22]
 801636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016370:	75bb      	strb	r3, [r7, #22]
 8016372:	7dbb      	ldrb	r3, [r7, #22]
 8016374:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	695a      	ldr	r2, [r3, #20]
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801637e:	7dba      	ldrb	r2, [r7, #22]
 8016380:	7d7b      	ldrb	r3, [r7, #21]
 8016382:	429a      	cmp	r2, r3
 8016384:	d115      	bne.n	80163b2 <dir_find+0x106>
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	6a1b      	ldr	r3, [r3, #32]
 801638a:	330d      	adds	r3, #13
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	7d3a      	ldrb	r2, [r7, #20]
 8016390:	429a      	cmp	r2, r3
 8016392:	d10e      	bne.n	80163b2 <dir_find+0x106>
 8016394:	693b      	ldr	r3, [r7, #16]
 8016396:	68da      	ldr	r2, [r3, #12]
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	6a1b      	ldr	r3, [r3, #32]
 801639c:	4619      	mov	r1, r3
 801639e:	4610      	mov	r0, r2
 80163a0:	f7ff fcf0 	bl	8015d84 <cmp_lfn>
 80163a4:	4603      	mov	r3, r0
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d003      	beq.n	80163b2 <dir_find+0x106>
 80163aa:	7d7b      	ldrb	r3, [r7, #21]
 80163ac:	3b01      	subs	r3, #1
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	e000      	b.n	80163b4 <dir_find+0x108>
 80163b2:	23ff      	movs	r3, #255	; 0xff
 80163b4:	757b      	strb	r3, [r7, #21]
 80163b6:	e024      	b.n	8016402 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80163b8:	7d7b      	ldrb	r3, [r7, #21]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d109      	bne.n	80163d2 <dir_find+0x126>
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	6a1b      	ldr	r3, [r3, #32]
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7ff feaa 	bl	801611c <sum_sfn>
 80163c8:	4603      	mov	r3, r0
 80163ca:	461a      	mov	r2, r3
 80163cc:	7d3b      	ldrb	r3, [r7, #20]
 80163ce:	4293      	cmp	r3, r2
 80163d0:	d024      	beq.n	801641c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80163d8:	f003 0301 	and.w	r3, r3, #1
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d10a      	bne.n	80163f6 <dir_find+0x14a>
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	6a18      	ldr	r0, [r3, #32]
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	3324      	adds	r3, #36	; 0x24
 80163e8:	220b      	movs	r2, #11
 80163ea:	4619      	mov	r1, r3
 80163ec:	f7fe fd92 	bl	8014f14 <mem_cmp>
 80163f0:	4603      	mov	r3, r0
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d014      	beq.n	8016420 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80163f6:	23ff      	movs	r3, #255	; 0xff
 80163f8:	757b      	strb	r3, [r7, #21]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	f04f 32ff 	mov.w	r2, #4294967295
 8016400:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8016402:	2100      	movs	r1, #0
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f7ff fb72 	bl	8015aee <dir_next>
 801640a:	4603      	mov	r3, r0
 801640c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801640e:	7dfb      	ldrb	r3, [r7, #23]
 8016410:	2b00      	cmp	r3, #0
 8016412:	f43f af65 	beq.w	80162e0 <dir_find+0x34>
 8016416:	e004      	b.n	8016422 <dir_find+0x176>
		if (res != FR_OK) break;
 8016418:	bf00      	nop
 801641a:	e002      	b.n	8016422 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801641c:	bf00      	nop
 801641e:	e000      	b.n	8016422 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8016420:	bf00      	nop

	return res;
 8016422:	7dfb      	ldrb	r3, [r7, #23]
}
 8016424:	4618      	mov	r0, r3
 8016426:	3718      	adds	r7, #24
 8016428:	46bd      	mov	sp, r7
 801642a:	bd80      	pop	{r7, pc}

0801642c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b08c      	sub	sp, #48	; 0x30
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016440:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8016444:	2b00      	cmp	r3, #0
 8016446:	d001      	beq.n	801644c <dir_register+0x20>
 8016448:	2306      	movs	r3, #6
 801644a:	e0e0      	b.n	801660e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801644c:	2300      	movs	r3, #0
 801644e:	627b      	str	r3, [r7, #36]	; 0x24
 8016450:	e002      	b.n	8016458 <dir_register+0x2c>
 8016452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016454:	3301      	adds	r3, #1
 8016456:	627b      	str	r3, [r7, #36]	; 0x24
 8016458:	69fb      	ldr	r3, [r7, #28]
 801645a:	68da      	ldr	r2, [r3, #12]
 801645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801645e:	005b      	lsls	r3, r3, #1
 8016460:	4413      	add	r3, r2
 8016462:	881b      	ldrh	r3, [r3, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d1f4      	bne.n	8016452 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801646e:	f107 030c 	add.w	r3, r7, #12
 8016472:	220c      	movs	r2, #12
 8016474:	4618      	mov	r0, r3
 8016476:	f7fe fd11 	bl	8014e9c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801647a:	7dfb      	ldrb	r3, [r7, #23]
 801647c:	f003 0301 	and.w	r3, r3, #1
 8016480:	2b00      	cmp	r3, #0
 8016482:	d032      	beq.n	80164ea <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2240      	movs	r2, #64	; 0x40
 8016488:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801648c:	2301      	movs	r3, #1
 801648e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016490:	e016      	b.n	80164c0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8016498:	69fb      	ldr	r3, [r7, #28]
 801649a:	68da      	ldr	r2, [r3, #12]
 801649c:	f107 010c 	add.w	r1, r7, #12
 80164a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164a2:	f7ff fdab 	bl	8015ffc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80164a6:	6878      	ldr	r0, [r7, #4]
 80164a8:	f7ff ff00 	bl	80162ac <dir_find>
 80164ac:	4603      	mov	r3, r0
 80164ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80164b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d106      	bne.n	80164c8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80164ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164bc:	3301      	adds	r3, #1
 80164be:	62bb      	str	r3, [r7, #40]	; 0x28
 80164c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c2:	2b63      	cmp	r3, #99	; 0x63
 80164c4:	d9e5      	bls.n	8016492 <dir_register+0x66>
 80164c6:	e000      	b.n	80164ca <dir_register+0x9e>
			if (res != FR_OK) break;
 80164c8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80164ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164cc:	2b64      	cmp	r3, #100	; 0x64
 80164ce:	d101      	bne.n	80164d4 <dir_register+0xa8>
 80164d0:	2307      	movs	r3, #7
 80164d2:	e09c      	b.n	801660e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80164d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80164d8:	2b04      	cmp	r3, #4
 80164da:	d002      	beq.n	80164e2 <dir_register+0xb6>
 80164dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80164e0:	e095      	b.n	801660e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80164e2:	7dfa      	ldrb	r2, [r7, #23]
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80164ea:	7dfb      	ldrb	r3, [r7, #23]
 80164ec:	f003 0302 	and.w	r3, r3, #2
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d007      	beq.n	8016504 <dir_register+0xd8>
 80164f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f6:	330c      	adds	r3, #12
 80164f8:	4a47      	ldr	r2, [pc, #284]	; (8016618 <dir_register+0x1ec>)
 80164fa:	fba2 2303 	umull	r2, r3, r2, r3
 80164fe:	089b      	lsrs	r3, r3, #2
 8016500:	3301      	adds	r3, #1
 8016502:	e000      	b.n	8016506 <dir_register+0xda>
 8016504:	2301      	movs	r3, #1
 8016506:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8016508:	6a39      	ldr	r1, [r7, #32]
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f7ff fbb4 	bl	8015c78 <dir_alloc>
 8016510:	4603      	mov	r3, r0
 8016512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8016516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801651a:	2b00      	cmp	r3, #0
 801651c:	d148      	bne.n	80165b0 <dir_register+0x184>
 801651e:	6a3b      	ldr	r3, [r7, #32]
 8016520:	3b01      	subs	r3, #1
 8016522:	623b      	str	r3, [r7, #32]
 8016524:	6a3b      	ldr	r3, [r7, #32]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d042      	beq.n	80165b0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	695a      	ldr	r2, [r3, #20]
 801652e:	6a3b      	ldr	r3, [r7, #32]
 8016530:	015b      	lsls	r3, r3, #5
 8016532:	1ad3      	subs	r3, r2, r3
 8016534:	4619      	mov	r1, r3
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f7ff fa5e 	bl	80159f8 <dir_sdi>
 801653c:	4603      	mov	r3, r0
 801653e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8016542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016546:	2b00      	cmp	r3, #0
 8016548:	d132      	bne.n	80165b0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	3324      	adds	r3, #36	; 0x24
 801654e:	4618      	mov	r0, r3
 8016550:	f7ff fde4 	bl	801611c <sum_sfn>
 8016554:	4603      	mov	r3, r0
 8016556:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	69db      	ldr	r3, [r3, #28]
 801655c:	4619      	mov	r1, r3
 801655e:	69f8      	ldr	r0, [r7, #28]
 8016560:	f7fe feca 	bl	80152f8 <move_window>
 8016564:	4603      	mov	r3, r0
 8016566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801656a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801656e:	2b00      	cmp	r3, #0
 8016570:	d11d      	bne.n	80165ae <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8016572:	69fb      	ldr	r3, [r7, #28]
 8016574:	68d8      	ldr	r0, [r3, #12]
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	6a19      	ldr	r1, [r3, #32]
 801657a:	6a3b      	ldr	r3, [r7, #32]
 801657c:	b2da      	uxtb	r2, r3
 801657e:	7efb      	ldrb	r3, [r7, #27]
 8016580:	f7ff fcd4 	bl	8015f2c <put_lfn>
				fs->wflag = 1;
 8016584:	69fb      	ldr	r3, [r7, #28]
 8016586:	2201      	movs	r2, #1
 8016588:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801658a:	2100      	movs	r1, #0
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f7ff faae 	bl	8015aee <dir_next>
 8016592:	4603      	mov	r3, r0
 8016594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8016598:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801659c:	2b00      	cmp	r3, #0
 801659e:	d107      	bne.n	80165b0 <dir_register+0x184>
 80165a0:	6a3b      	ldr	r3, [r7, #32]
 80165a2:	3b01      	subs	r3, #1
 80165a4:	623b      	str	r3, [r7, #32]
 80165a6:	6a3b      	ldr	r3, [r7, #32]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d1d5      	bne.n	8016558 <dir_register+0x12c>
 80165ac:	e000      	b.n	80165b0 <dir_register+0x184>
				if (res != FR_OK) break;
 80165ae:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80165b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d128      	bne.n	801660a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	69db      	ldr	r3, [r3, #28]
 80165bc:	4619      	mov	r1, r3
 80165be:	69f8      	ldr	r0, [r7, #28]
 80165c0:	f7fe fe9a 	bl	80152f8 <move_window>
 80165c4:	4603      	mov	r3, r0
 80165c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80165ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d11b      	bne.n	801660a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	6a1b      	ldr	r3, [r3, #32]
 80165d6:	2220      	movs	r2, #32
 80165d8:	2100      	movs	r1, #0
 80165da:	4618      	mov	r0, r3
 80165dc:	f7fe fc7f 	bl	8014ede <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	6a18      	ldr	r0, [r3, #32]
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	3324      	adds	r3, #36	; 0x24
 80165e8:	220b      	movs	r2, #11
 80165ea:	4619      	mov	r1, r3
 80165ec:	f7fe fc56 	bl	8014e9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	6a1b      	ldr	r3, [r3, #32]
 80165fa:	330c      	adds	r3, #12
 80165fc:	f002 0218 	and.w	r2, r2, #24
 8016600:	b2d2      	uxtb	r2, r2
 8016602:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8016604:	69fb      	ldr	r3, [r7, #28]
 8016606:	2201      	movs	r2, #1
 8016608:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801660a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801660e:	4618      	mov	r0, r3
 8016610:	3730      	adds	r7, #48	; 0x30
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	4ec4ec4f 	.word	0x4ec4ec4f

0801661c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b088      	sub	sp, #32
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
 8016624:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	2200      	movs	r2, #0
 8016630:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	69db      	ldr	r3, [r3, #28]
 8016636:	2b00      	cmp	r3, #0
 8016638:	f000 80c9 	beq.w	80167ce <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016644:	d032      	beq.n	80166ac <get_fileinfo+0x90>
			i = j = 0;
 8016646:	2300      	movs	r3, #0
 8016648:	61bb      	str	r3, [r7, #24]
 801664a:	69bb      	ldr	r3, [r7, #24]
 801664c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801664e:	e01b      	b.n	8016688 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8016650:	89fb      	ldrh	r3, [r7, #14]
 8016652:	2100      	movs	r1, #0
 8016654:	4618      	mov	r0, r3
 8016656:	f001 fed3 	bl	8018400 <ff_convert>
 801665a:	4603      	mov	r3, r0
 801665c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801665e:	89fb      	ldrh	r3, [r7, #14]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d102      	bne.n	801666a <get_fileinfo+0x4e>
 8016664:	2300      	movs	r3, #0
 8016666:	61fb      	str	r3, [r7, #28]
 8016668:	e01a      	b.n	80166a0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801666a:	69fb      	ldr	r3, [r7, #28]
 801666c:	2bfe      	cmp	r3, #254	; 0xfe
 801666e:	d902      	bls.n	8016676 <get_fileinfo+0x5a>
 8016670:	2300      	movs	r3, #0
 8016672:	61fb      	str	r3, [r7, #28]
 8016674:	e014      	b.n	80166a0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8016676:	69fb      	ldr	r3, [r7, #28]
 8016678:	1c5a      	adds	r2, r3, #1
 801667a:	61fa      	str	r2, [r7, #28]
 801667c:	89fa      	ldrh	r2, [r7, #14]
 801667e:	b2d1      	uxtb	r1, r2
 8016680:	683a      	ldr	r2, [r7, #0]
 8016682:	4413      	add	r3, r2
 8016684:	460a      	mov	r2, r1
 8016686:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8016688:	693b      	ldr	r3, [r7, #16]
 801668a:	68da      	ldr	r2, [r3, #12]
 801668c:	69bb      	ldr	r3, [r7, #24]
 801668e:	1c59      	adds	r1, r3, #1
 8016690:	61b9      	str	r1, [r7, #24]
 8016692:	005b      	lsls	r3, r3, #1
 8016694:	4413      	add	r3, r2
 8016696:	881b      	ldrh	r3, [r3, #0]
 8016698:	81fb      	strh	r3, [r7, #14]
 801669a:	89fb      	ldrh	r3, [r7, #14]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d1d7      	bne.n	8016650 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80166a0:	683a      	ldr	r2, [r7, #0]
 80166a2:	69fb      	ldr	r3, [r7, #28]
 80166a4:	4413      	add	r3, r2
 80166a6:	3316      	adds	r3, #22
 80166a8:	2200      	movs	r2, #0
 80166aa:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80166ac:	2300      	movs	r3, #0
 80166ae:	61bb      	str	r3, [r7, #24]
 80166b0:	69bb      	ldr	r3, [r7, #24]
 80166b2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80166b4:	683a      	ldr	r2, [r7, #0]
 80166b6:	69fb      	ldr	r3, [r7, #28]
 80166b8:	4413      	add	r3, r2
 80166ba:	3316      	adds	r3, #22
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80166c0:	e04c      	b.n	801675c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	6a1a      	ldr	r2, [r3, #32]
 80166c6:	69fb      	ldr	r3, [r7, #28]
 80166c8:	1c59      	adds	r1, r3, #1
 80166ca:	61f9      	str	r1, [r7, #28]
 80166cc:	4413      	add	r3, r2
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80166d2:	7dfb      	ldrb	r3, [r7, #23]
 80166d4:	2b20      	cmp	r3, #32
 80166d6:	d100      	bne.n	80166da <get_fileinfo+0xbe>
 80166d8:	e040      	b.n	801675c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80166da:	7dfb      	ldrb	r3, [r7, #23]
 80166dc:	2b05      	cmp	r3, #5
 80166de:	d101      	bne.n	80166e4 <get_fileinfo+0xc8>
 80166e0:	23e5      	movs	r3, #229	; 0xe5
 80166e2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80166e4:	69fb      	ldr	r3, [r7, #28]
 80166e6:	2b09      	cmp	r3, #9
 80166e8:	d10f      	bne.n	801670a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80166ea:	89bb      	ldrh	r3, [r7, #12]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d105      	bne.n	80166fc <get_fileinfo+0xe0>
 80166f0:	683a      	ldr	r2, [r7, #0]
 80166f2:	69bb      	ldr	r3, [r7, #24]
 80166f4:	4413      	add	r3, r2
 80166f6:	3316      	adds	r3, #22
 80166f8:	222e      	movs	r2, #46	; 0x2e
 80166fa:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80166fc:	69bb      	ldr	r3, [r7, #24]
 80166fe:	1c5a      	adds	r2, r3, #1
 8016700:	61ba      	str	r2, [r7, #24]
 8016702:	683a      	ldr	r2, [r7, #0]
 8016704:	4413      	add	r3, r2
 8016706:	222e      	movs	r2, #46	; 0x2e
 8016708:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801670a:	683a      	ldr	r2, [r7, #0]
 801670c:	69bb      	ldr	r3, [r7, #24]
 801670e:	4413      	add	r3, r2
 8016710:	3309      	adds	r3, #9
 8016712:	7dfa      	ldrb	r2, [r7, #23]
 8016714:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8016716:	89bb      	ldrh	r3, [r7, #12]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d11c      	bne.n	8016756 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801671c:	7dfb      	ldrb	r3, [r7, #23]
 801671e:	2b40      	cmp	r3, #64	; 0x40
 8016720:	d913      	bls.n	801674a <get_fileinfo+0x12e>
 8016722:	7dfb      	ldrb	r3, [r7, #23]
 8016724:	2b5a      	cmp	r3, #90	; 0x5a
 8016726:	d810      	bhi.n	801674a <get_fileinfo+0x12e>
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6a1b      	ldr	r3, [r3, #32]
 801672c:	330c      	adds	r3, #12
 801672e:	781b      	ldrb	r3, [r3, #0]
 8016730:	461a      	mov	r2, r3
 8016732:	69fb      	ldr	r3, [r7, #28]
 8016734:	2b08      	cmp	r3, #8
 8016736:	d901      	bls.n	801673c <get_fileinfo+0x120>
 8016738:	2310      	movs	r3, #16
 801673a:	e000      	b.n	801673e <get_fileinfo+0x122>
 801673c:	2308      	movs	r3, #8
 801673e:	4013      	ands	r3, r2
 8016740:	2b00      	cmp	r3, #0
 8016742:	d002      	beq.n	801674a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8016744:	7dfb      	ldrb	r3, [r7, #23]
 8016746:	3320      	adds	r3, #32
 8016748:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801674a:	683a      	ldr	r2, [r7, #0]
 801674c:	69bb      	ldr	r3, [r7, #24]
 801674e:	4413      	add	r3, r2
 8016750:	3316      	adds	r3, #22
 8016752:	7dfa      	ldrb	r2, [r7, #23]
 8016754:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8016756:	69bb      	ldr	r3, [r7, #24]
 8016758:	3301      	adds	r3, #1
 801675a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 801675c:	69fb      	ldr	r3, [r7, #28]
 801675e:	2b0a      	cmp	r3, #10
 8016760:	d9af      	bls.n	80166c2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8016762:	89bb      	ldrh	r3, [r7, #12]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d10d      	bne.n	8016784 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8016768:	683a      	ldr	r2, [r7, #0]
 801676a:	69bb      	ldr	r3, [r7, #24]
 801676c:	4413      	add	r3, r2
 801676e:	3316      	adds	r3, #22
 8016770:	2200      	movs	r2, #0
 8016772:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	6a1b      	ldr	r3, [r3, #32]
 8016778:	330c      	adds	r3, #12
 801677a:	781b      	ldrb	r3, [r3, #0]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d101      	bne.n	8016784 <get_fileinfo+0x168>
 8016780:	2300      	movs	r3, #0
 8016782:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8016784:	683a      	ldr	r2, [r7, #0]
 8016786:	69bb      	ldr	r3, [r7, #24]
 8016788:	4413      	add	r3, r2
 801678a:	3309      	adds	r3, #9
 801678c:	2200      	movs	r2, #0
 801678e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	6a1b      	ldr	r3, [r3, #32]
 8016794:	7ada      	ldrb	r2, [r3, #11]
 8016796:	683b      	ldr	r3, [r7, #0]
 8016798:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	6a1b      	ldr	r3, [r3, #32]
 801679e:	331c      	adds	r3, #28
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7fe fb11 	bl	8014dc8 <ld_dword>
 80167a6:	4602      	mov	r2, r0
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	6a1b      	ldr	r3, [r3, #32]
 80167b0:	3316      	adds	r3, #22
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7fe fb08 	bl	8014dc8 <ld_dword>
 80167b8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80167ba:	68bb      	ldr	r3, [r7, #8]
 80167bc:	b29a      	uxth	r2, r3
 80167be:	683b      	ldr	r3, [r7, #0]
 80167c0:	80da      	strh	r2, [r3, #6]
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	0c1b      	lsrs	r3, r3, #16
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	809a      	strh	r2, [r3, #4]
 80167cc:	e000      	b.n	80167d0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80167ce:	bf00      	nop
}
 80167d0:	3720      	adds	r7, #32
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
	...

080167d8 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80167d8:	b480      	push	{r7}
 80167da:	b085      	sub	sp, #20
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	1c59      	adds	r1, r3, #1
 80167e6:	687a      	ldr	r2, [r7, #4]
 80167e8:	6011      	str	r1, [r2, #0]
 80167ea:	781b      	ldrb	r3, [r3, #0]
 80167ec:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80167ee:	89fb      	ldrh	r3, [r7, #14]
 80167f0:	2b60      	cmp	r3, #96	; 0x60
 80167f2:	d905      	bls.n	8016800 <get_achar+0x28>
 80167f4:	89fb      	ldrh	r3, [r7, #14]
 80167f6:	2b7a      	cmp	r3, #122	; 0x7a
 80167f8:	d802      	bhi.n	8016800 <get_achar+0x28>
 80167fa:	89fb      	ldrh	r3, [r7, #14]
 80167fc:	3b20      	subs	r3, #32
 80167fe:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8016800:	89fb      	ldrh	r3, [r7, #14]
 8016802:	2b7f      	cmp	r3, #127	; 0x7f
 8016804:	d904      	bls.n	8016810 <get_achar+0x38>
 8016806:	89fb      	ldrh	r3, [r7, #14]
 8016808:	3b80      	subs	r3, #128	; 0x80
 801680a:	4a05      	ldr	r2, [pc, #20]	; (8016820 <get_achar+0x48>)
 801680c:	5cd3      	ldrb	r3, [r2, r3]
 801680e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8016810:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8016812:	4618      	mov	r0, r3
 8016814:	3714      	adds	r7, #20
 8016816:	46bd      	mov	sp, r7
 8016818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681c:	4770      	bx	lr
 801681e:	bf00      	nop
 8016820:	08023b9c 	.word	0x08023b9c

08016824 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b08a      	sub	sp, #40	; 0x28
 8016828:	af00      	add	r7, sp, #0
 801682a:	60f8      	str	r0, [r7, #12]
 801682c:	60b9      	str	r1, [r7, #8]
 801682e:	607a      	str	r2, [r7, #4]
 8016830:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8016832:	e009      	b.n	8016848 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8016834:	f107 0308 	add.w	r3, r7, #8
 8016838:	4618      	mov	r0, r3
 801683a:	f7ff ffcd 	bl	80167d8 <get_achar>
 801683e:	4603      	mov	r3, r0
 8016840:	2b00      	cmp	r3, #0
 8016842:	d101      	bne.n	8016848 <pattern_matching+0x24>
 8016844:	2300      	movs	r3, #0
 8016846:	e064      	b.n	8016912 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	1e5a      	subs	r2, r3, #1
 801684c:	607a      	str	r2, [r7, #4]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d1f0      	bne.n	8016834 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	781b      	ldrb	r3, [r3, #0]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d104      	bne.n	8016864 <pattern_matching+0x40>
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d001      	beq.n	8016864 <pattern_matching+0x40>
 8016860:	2301      	movs	r3, #1
 8016862:	e056      	b.n	8016912 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	617b      	str	r3, [r7, #20]
 8016868:	68bb      	ldr	r3, [r7, #8]
 801686a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 801686c:	697b      	ldr	r3, [r7, #20]
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	2b3f      	cmp	r3, #63	; 0x3f
 8016872:	d003      	beq.n	801687c <pattern_matching+0x58>
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	2b2a      	cmp	r3, #42	; 0x2a
 801687a:	d126      	bne.n	80168ca <pattern_matching+0xa6>
				nm = nx = 0;
 801687c:	2300      	movs	r3, #0
 801687e:	61fb      	str	r3, [r7, #28]
 8016880:	69fb      	ldr	r3, [r7, #28]
 8016882:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	1c5a      	adds	r2, r3, #1
 8016888:	617a      	str	r2, [r7, #20]
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	2b3f      	cmp	r3, #63	; 0x3f
 801688e:	d103      	bne.n	8016898 <pattern_matching+0x74>
 8016890:	6a3b      	ldr	r3, [r7, #32]
 8016892:	3301      	adds	r3, #1
 8016894:	623b      	str	r3, [r7, #32]
 8016896:	e001      	b.n	801689c <pattern_matching+0x78>
 8016898:	2301      	movs	r3, #1
 801689a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	2b3f      	cmp	r3, #63	; 0x3f
 80168a2:	d0ef      	beq.n	8016884 <pattern_matching+0x60>
 80168a4:	697b      	ldr	r3, [r7, #20]
 80168a6:	781b      	ldrb	r3, [r3, #0]
 80168a8:	2b2a      	cmp	r3, #42	; 0x2a
 80168aa:	d0eb      	beq.n	8016884 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80168ac:	6978      	ldr	r0, [r7, #20]
 80168ae:	6939      	ldr	r1, [r7, #16]
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	6a3a      	ldr	r2, [r7, #32]
 80168b4:	f7ff ffb6 	bl	8016824 <pattern_matching>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d001      	beq.n	80168c2 <pattern_matching+0x9e>
 80168be:	2301      	movs	r3, #1
 80168c0:	e027      	b.n	8016912 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80168c2:	693b      	ldr	r3, [r7, #16]
 80168c4:	781b      	ldrb	r3, [r3, #0]
 80168c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80168c8:	e017      	b.n	80168fa <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80168ca:	f107 0314 	add.w	r3, r7, #20
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7ff ff82 	bl	80167d8 <get_achar>
 80168d4:	4603      	mov	r3, r0
 80168d6:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80168d8:	f107 0310 	add.w	r3, r7, #16
 80168dc:	4618      	mov	r0, r3
 80168de:	f7ff ff7b 	bl	80167d8 <get_achar>
 80168e2:	4603      	mov	r3, r0
 80168e4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80168e6:	8b7a      	ldrh	r2, [r7, #26]
 80168e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80168ea:	429a      	cmp	r2, r3
 80168ec:	d104      	bne.n	80168f8 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80168ee:	8b7b      	ldrh	r3, [r7, #26]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d1bb      	bne.n	801686c <pattern_matching+0x48>
 80168f4:	2301      	movs	r3, #1
 80168f6:	e00c      	b.n	8016912 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80168f8:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80168fa:	f107 0308 	add.w	r3, r7, #8
 80168fe:	4618      	mov	r0, r3
 8016900:	f7ff ff6a 	bl	80167d8 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d002      	beq.n	8016910 <pattern_matching+0xec>
 801690a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801690c:	2b00      	cmp	r3, #0
 801690e:	d1a9      	bne.n	8016864 <pattern_matching+0x40>

	return 0;
 8016910:	2300      	movs	r3, #0
}
 8016912:	4618      	mov	r0, r3
 8016914:	3728      	adds	r7, #40	; 0x28
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}
	...

0801691c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b08a      	sub	sp, #40	; 0x28
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
 8016924:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	613b      	str	r3, [r7, #16]
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	68db      	ldr	r3, [r3, #12]
 8016932:	60fb      	str	r3, [r7, #12]
 8016934:	2300      	movs	r3, #0
 8016936:	617b      	str	r3, [r7, #20]
 8016938:	697b      	ldr	r3, [r7, #20]
 801693a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801693c:	69bb      	ldr	r3, [r7, #24]
 801693e:	1c5a      	adds	r2, r3, #1
 8016940:	61ba      	str	r2, [r7, #24]
 8016942:	693a      	ldr	r2, [r7, #16]
 8016944:	4413      	add	r3, r2
 8016946:	781b      	ldrb	r3, [r3, #0]
 8016948:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801694a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801694c:	2b1f      	cmp	r3, #31
 801694e:	d940      	bls.n	80169d2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8016950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016952:	2b2f      	cmp	r3, #47	; 0x2f
 8016954:	d006      	beq.n	8016964 <create_name+0x48>
 8016956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016958:	2b5c      	cmp	r3, #92	; 0x5c
 801695a:	d110      	bne.n	801697e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801695c:	e002      	b.n	8016964 <create_name+0x48>
 801695e:	69bb      	ldr	r3, [r7, #24]
 8016960:	3301      	adds	r3, #1
 8016962:	61bb      	str	r3, [r7, #24]
 8016964:	693a      	ldr	r2, [r7, #16]
 8016966:	69bb      	ldr	r3, [r7, #24]
 8016968:	4413      	add	r3, r2
 801696a:	781b      	ldrb	r3, [r3, #0]
 801696c:	2b2f      	cmp	r3, #47	; 0x2f
 801696e:	d0f6      	beq.n	801695e <create_name+0x42>
 8016970:	693a      	ldr	r2, [r7, #16]
 8016972:	69bb      	ldr	r3, [r7, #24]
 8016974:	4413      	add	r3, r2
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	2b5c      	cmp	r3, #92	; 0x5c
 801697a:	d0f0      	beq.n	801695e <create_name+0x42>
			break;
 801697c:	e02a      	b.n	80169d4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801697e:	697b      	ldr	r3, [r7, #20]
 8016980:	2bfe      	cmp	r3, #254	; 0xfe
 8016982:	d901      	bls.n	8016988 <create_name+0x6c>
 8016984:	2306      	movs	r3, #6
 8016986:	e177      	b.n	8016c78 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8016988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801698a:	b2db      	uxtb	r3, r3
 801698c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801698e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016990:	2101      	movs	r1, #1
 8016992:	4618      	mov	r0, r3
 8016994:	f001 fd34 	bl	8018400 <ff_convert>
 8016998:	4603      	mov	r3, r0
 801699a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801699c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d101      	bne.n	80169a6 <create_name+0x8a>
 80169a2:	2306      	movs	r3, #6
 80169a4:	e168      	b.n	8016c78 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80169a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169a8:	2b7f      	cmp	r3, #127	; 0x7f
 80169aa:	d809      	bhi.n	80169c0 <create_name+0xa4>
 80169ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169ae:	4619      	mov	r1, r3
 80169b0:	48b3      	ldr	r0, [pc, #716]	; (8016c80 <create_name+0x364>)
 80169b2:	f7fe fad6 	bl	8014f62 <chk_chr>
 80169b6:	4603      	mov	r3, r0
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d001      	beq.n	80169c0 <create_name+0xa4>
 80169bc:	2306      	movs	r3, #6
 80169be:	e15b      	b.n	8016c78 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	1c5a      	adds	r2, r3, #1
 80169c4:	617a      	str	r2, [r7, #20]
 80169c6:	005b      	lsls	r3, r3, #1
 80169c8:	68fa      	ldr	r2, [r7, #12]
 80169ca:	4413      	add	r3, r2
 80169cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80169ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80169d0:	e7b4      	b.n	801693c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80169d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80169d4:	693a      	ldr	r2, [r7, #16]
 80169d6:	69bb      	ldr	r3, [r7, #24]
 80169d8:	441a      	add	r2, r3
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80169de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169e0:	2b1f      	cmp	r3, #31
 80169e2:	d801      	bhi.n	80169e8 <create_name+0xcc>
 80169e4:	2304      	movs	r3, #4
 80169e6:	e000      	b.n	80169ea <create_name+0xce>
 80169e8:	2300      	movs	r3, #0
 80169ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80169ee:	e011      	b.n	8016a14 <create_name+0xf8>
		w = lfn[di - 1];
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80169f6:	3b01      	subs	r3, #1
 80169f8:	005b      	lsls	r3, r3, #1
 80169fa:	68fa      	ldr	r2, [r7, #12]
 80169fc:	4413      	add	r3, r2
 80169fe:	881b      	ldrh	r3, [r3, #0]
 8016a00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8016a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a04:	2b20      	cmp	r3, #32
 8016a06:	d002      	beq.n	8016a0e <create_name+0xf2>
 8016a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8016a0c:	d106      	bne.n	8016a1c <create_name+0x100>
		di--;
 8016a0e:	697b      	ldr	r3, [r7, #20]
 8016a10:	3b01      	subs	r3, #1
 8016a12:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016a14:	697b      	ldr	r3, [r7, #20]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d1ea      	bne.n	80169f0 <create_name+0xd4>
 8016a1a:	e000      	b.n	8016a1e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8016a1c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8016a1e:	697b      	ldr	r3, [r7, #20]
 8016a20:	005b      	lsls	r3, r3, #1
 8016a22:	68fa      	ldr	r2, [r7, #12]
 8016a24:	4413      	add	r3, r2
 8016a26:	2200      	movs	r2, #0
 8016a28:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8016a2a:	697b      	ldr	r3, [r7, #20]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d101      	bne.n	8016a34 <create_name+0x118>
 8016a30:	2306      	movs	r3, #6
 8016a32:	e121      	b.n	8016c78 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	3324      	adds	r3, #36	; 0x24
 8016a38:	220b      	movs	r2, #11
 8016a3a:	2120      	movs	r1, #32
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7fe fa4e 	bl	8014ede <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8016a42:	2300      	movs	r3, #0
 8016a44:	61bb      	str	r3, [r7, #24]
 8016a46:	e002      	b.n	8016a4e <create_name+0x132>
 8016a48:	69bb      	ldr	r3, [r7, #24]
 8016a4a:	3301      	adds	r3, #1
 8016a4c:	61bb      	str	r3, [r7, #24]
 8016a4e:	69bb      	ldr	r3, [r7, #24]
 8016a50:	005b      	lsls	r3, r3, #1
 8016a52:	68fa      	ldr	r2, [r7, #12]
 8016a54:	4413      	add	r3, r2
 8016a56:	881b      	ldrh	r3, [r3, #0]
 8016a58:	2b20      	cmp	r3, #32
 8016a5a:	d0f5      	beq.n	8016a48 <create_name+0x12c>
 8016a5c:	69bb      	ldr	r3, [r7, #24]
 8016a5e:	005b      	lsls	r3, r3, #1
 8016a60:	68fa      	ldr	r2, [r7, #12]
 8016a62:	4413      	add	r3, r2
 8016a64:	881b      	ldrh	r3, [r3, #0]
 8016a66:	2b2e      	cmp	r3, #46	; 0x2e
 8016a68:	d0ee      	beq.n	8016a48 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8016a6a:	69bb      	ldr	r3, [r7, #24]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d009      	beq.n	8016a84 <create_name+0x168>
 8016a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a74:	f043 0303 	orr.w	r3, r3, #3
 8016a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8016a7c:	e002      	b.n	8016a84 <create_name+0x168>
 8016a7e:	697b      	ldr	r3, [r7, #20]
 8016a80:	3b01      	subs	r3, #1
 8016a82:	617b      	str	r3, [r7, #20]
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d009      	beq.n	8016a9e <create_name+0x182>
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016a90:	3b01      	subs	r3, #1
 8016a92:	005b      	lsls	r3, r3, #1
 8016a94:	68fa      	ldr	r2, [r7, #12]
 8016a96:	4413      	add	r3, r2
 8016a98:	881b      	ldrh	r3, [r3, #0]
 8016a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8016a9c:	d1ef      	bne.n	8016a7e <create_name+0x162>

	i = b = 0; ni = 8;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	623b      	str	r3, [r7, #32]
 8016aa8:	2308      	movs	r3, #8
 8016aaa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8016aac:	69bb      	ldr	r3, [r7, #24]
 8016aae:	1c5a      	adds	r2, r3, #1
 8016ab0:	61ba      	str	r2, [r7, #24]
 8016ab2:	005b      	lsls	r3, r3, #1
 8016ab4:	68fa      	ldr	r2, [r7, #12]
 8016ab6:	4413      	add	r3, r2
 8016ab8:	881b      	ldrh	r3, [r3, #0]
 8016aba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8016abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	f000 8090 	beq.w	8016be4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8016ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ac6:	2b20      	cmp	r3, #32
 8016ac8:	d006      	beq.n	8016ad8 <create_name+0x1bc>
 8016aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016acc:	2b2e      	cmp	r3, #46	; 0x2e
 8016ace:	d10a      	bne.n	8016ae6 <create_name+0x1ca>
 8016ad0:	69ba      	ldr	r2, [r7, #24]
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d006      	beq.n	8016ae6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8016ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016adc:	f043 0303 	orr.w	r3, r3, #3
 8016ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ae4:	e07d      	b.n	8016be2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8016ae6:	6a3a      	ldr	r2, [r7, #32]
 8016ae8:	69fb      	ldr	r3, [r7, #28]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d203      	bcs.n	8016af6 <create_name+0x1da>
 8016aee:	69ba      	ldr	r2, [r7, #24]
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d123      	bne.n	8016b3e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8016af6:	69fb      	ldr	r3, [r7, #28]
 8016af8:	2b0b      	cmp	r3, #11
 8016afa:	d106      	bne.n	8016b0a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8016afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b00:	f043 0303 	orr.w	r3, r3, #3
 8016b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b08:	e06f      	b.n	8016bea <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8016b0a:	69ba      	ldr	r2, [r7, #24]
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d005      	beq.n	8016b1e <create_name+0x202>
 8016b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b16:	f043 0303 	orr.w	r3, r3, #3
 8016b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8016b1e:	69ba      	ldr	r2, [r7, #24]
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d860      	bhi.n	8016be8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016b26:	697b      	ldr	r3, [r7, #20]
 8016b28:	61bb      	str	r3, [r7, #24]
 8016b2a:	2308      	movs	r3, #8
 8016b2c:	623b      	str	r3, [r7, #32]
 8016b2e:	230b      	movs	r3, #11
 8016b30:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8016b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016b36:	009b      	lsls	r3, r3, #2
 8016b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016b3c:	e051      	b.n	8016be2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8016b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b40:	2b7f      	cmp	r3, #127	; 0x7f
 8016b42:	d914      	bls.n	8016b6e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8016b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b46:	2100      	movs	r1, #0
 8016b48:	4618      	mov	r0, r3
 8016b4a:	f001 fc59 	bl	8018400 <ff_convert>
 8016b4e:	4603      	mov	r3, r0
 8016b50:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d004      	beq.n	8016b62 <create_name+0x246>
 8016b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b5a:	3b80      	subs	r3, #128	; 0x80
 8016b5c:	4a49      	ldr	r2, [pc, #292]	; (8016c84 <create_name+0x368>)
 8016b5e:	5cd3      	ldrb	r3, [r2, r3]
 8016b60:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8016b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b66:	f043 0302 	orr.w	r3, r3, #2
 8016b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8016b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d007      	beq.n	8016b84 <create_name+0x268>
 8016b74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b76:	4619      	mov	r1, r3
 8016b78:	4843      	ldr	r0, [pc, #268]	; (8016c88 <create_name+0x36c>)
 8016b7a:	f7fe f9f2 	bl	8014f62 <chk_chr>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d008      	beq.n	8016b96 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016b84:	235f      	movs	r3, #95	; 0x5f
 8016b86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b8c:	f043 0303 	orr.w	r3, r3, #3
 8016b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b94:	e01b      	b.n	8016bce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8016b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b98:	2b40      	cmp	r3, #64	; 0x40
 8016b9a:	d909      	bls.n	8016bb0 <create_name+0x294>
 8016b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b9e:	2b5a      	cmp	r3, #90	; 0x5a
 8016ba0:	d806      	bhi.n	8016bb0 <create_name+0x294>
					b |= 2;
 8016ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ba6:	f043 0302 	orr.w	r3, r3, #2
 8016baa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016bae:	e00e      	b.n	8016bce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8016bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bb2:	2b60      	cmp	r3, #96	; 0x60
 8016bb4:	d90b      	bls.n	8016bce <create_name+0x2b2>
 8016bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bb8:	2b7a      	cmp	r3, #122	; 0x7a
 8016bba:	d808      	bhi.n	8016bce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8016bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016bc0:	f043 0301 	orr.w	r3, r3, #1
 8016bc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bca:	3b20      	subs	r3, #32
 8016bcc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8016bce:	6a3b      	ldr	r3, [r7, #32]
 8016bd0:	1c5a      	adds	r2, r3, #1
 8016bd2:	623a      	str	r2, [r7, #32]
 8016bd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016bd6:	b2d1      	uxtb	r1, r2
 8016bd8:	687a      	ldr	r2, [r7, #4]
 8016bda:	4413      	add	r3, r2
 8016bdc:	460a      	mov	r2, r1
 8016bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8016be2:	e763      	b.n	8016aac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8016be4:	bf00      	nop
 8016be6:	e000      	b.n	8016bea <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8016be8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016bf0:	2be5      	cmp	r3, #229	; 0xe5
 8016bf2:	d103      	bne.n	8016bfc <create_name+0x2e0>
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	2205      	movs	r2, #5
 8016bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8016bfc:	69fb      	ldr	r3, [r7, #28]
 8016bfe:	2b08      	cmp	r3, #8
 8016c00:	d104      	bne.n	8016c0c <create_name+0x2f0>
 8016c02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c10:	f003 030c 	and.w	r3, r3, #12
 8016c14:	2b0c      	cmp	r3, #12
 8016c16:	d005      	beq.n	8016c24 <create_name+0x308>
 8016c18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c1c:	f003 0303 	and.w	r3, r3, #3
 8016c20:	2b03      	cmp	r3, #3
 8016c22:	d105      	bne.n	8016c30 <create_name+0x314>
 8016c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c28:	f043 0302 	orr.w	r3, r3, #2
 8016c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c34:	f003 0302 	and.w	r3, r3, #2
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d117      	bne.n	8016c6c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8016c3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c40:	f003 0303 	and.w	r3, r3, #3
 8016c44:	2b01      	cmp	r3, #1
 8016c46:	d105      	bne.n	8016c54 <create_name+0x338>
 8016c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c4c:	f043 0310 	orr.w	r3, r3, #16
 8016c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016c54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c58:	f003 030c 	and.w	r3, r3, #12
 8016c5c:	2b04      	cmp	r3, #4
 8016c5e:	d105      	bne.n	8016c6c <create_name+0x350>
 8016c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c64:	f043 0308 	orr.w	r3, r3, #8
 8016c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016c72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8016c76:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	3728      	adds	r7, #40	; 0x28
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd80      	pop	{r7, pc}
 8016c80:	0802391c 	.word	0x0802391c
 8016c84:	08023b9c 	.word	0x08023b9c
 8016c88:	08023928 	.word	0x08023928

08016c8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b086      	sub	sp, #24
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016ca0:	e002      	b.n	8016ca8 <follow_path+0x1c>
 8016ca2:	683b      	ldr	r3, [r7, #0]
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	603b      	str	r3, [r7, #0]
 8016ca8:	683b      	ldr	r3, [r7, #0]
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	2b2f      	cmp	r3, #47	; 0x2f
 8016cae:	d0f8      	beq.n	8016ca2 <follow_path+0x16>
 8016cb0:	683b      	ldr	r3, [r7, #0]
 8016cb2:	781b      	ldrb	r3, [r3, #0]
 8016cb4:	2b5c      	cmp	r3, #92	; 0x5c
 8016cb6:	d0f4      	beq.n	8016ca2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	2200      	movs	r2, #0
 8016cbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	2b1f      	cmp	r3, #31
 8016cc4:	d80a      	bhi.n	8016cdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2280      	movs	r2, #128	; 0x80
 8016cca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8016cce:	2100      	movs	r1, #0
 8016cd0:	6878      	ldr	r0, [r7, #4]
 8016cd2:	f7fe fe91 	bl	80159f8 <dir_sdi>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	75fb      	strb	r3, [r7, #23]
 8016cda:	e043      	b.n	8016d64 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016cdc:	463b      	mov	r3, r7
 8016cde:	4619      	mov	r1, r3
 8016ce0:	6878      	ldr	r0, [r7, #4]
 8016ce2:	f7ff fe1b 	bl	801691c <create_name>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016cea:	7dfb      	ldrb	r3, [r7, #23]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d134      	bne.n	8016d5a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016cf0:	6878      	ldr	r0, [r7, #4]
 8016cf2:	f7ff fadb 	bl	80162ac <dir_find>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016d00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016d02:	7dfb      	ldrb	r3, [r7, #23]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d00a      	beq.n	8016d1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016d08:	7dfb      	ldrb	r3, [r7, #23]
 8016d0a:	2b04      	cmp	r3, #4
 8016d0c:	d127      	bne.n	8016d5e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016d0e:	7afb      	ldrb	r3, [r7, #11]
 8016d10:	f003 0304 	and.w	r3, r3, #4
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d122      	bne.n	8016d5e <follow_path+0xd2>
 8016d18:	2305      	movs	r3, #5
 8016d1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016d1c:	e01f      	b.n	8016d5e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016d1e:	7afb      	ldrb	r3, [r7, #11]
 8016d20:	f003 0304 	and.w	r3, r3, #4
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d11c      	bne.n	8016d62 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016d28:	693b      	ldr	r3, [r7, #16]
 8016d2a:	799b      	ldrb	r3, [r3, #6]
 8016d2c:	f003 0310 	and.w	r3, r3, #16
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d102      	bne.n	8016d3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016d34:	2305      	movs	r3, #5
 8016d36:	75fb      	strb	r3, [r7, #23]
 8016d38:	e014      	b.n	8016d64 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	695b      	ldr	r3, [r3, #20]
 8016d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d48:	4413      	add	r3, r2
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	68f8      	ldr	r0, [r7, #12]
 8016d4e:	f7fe ffda 	bl	8015d06 <ld_clust>
 8016d52:	4602      	mov	r2, r0
 8016d54:	693b      	ldr	r3, [r7, #16]
 8016d56:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016d58:	e7c0      	b.n	8016cdc <follow_path+0x50>
			if (res != FR_OK) break;
 8016d5a:	bf00      	nop
 8016d5c:	e002      	b.n	8016d64 <follow_path+0xd8>
				break;
 8016d5e:	bf00      	nop
 8016d60:	e000      	b.n	8016d64 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016d62:	bf00      	nop
			}
		}
	}

	return res;
 8016d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3718      	adds	r7, #24
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}

08016d6e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016d6e:	b480      	push	{r7}
 8016d70:	b087      	sub	sp, #28
 8016d72:	af00      	add	r7, sp, #0
 8016d74:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016d76:	f04f 33ff 	mov.w	r3, #4294967295
 8016d7a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d031      	beq.n	8016de8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	617b      	str	r3, [r7, #20]
 8016d8a:	e002      	b.n	8016d92 <get_ldnumber+0x24>
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	3301      	adds	r3, #1
 8016d90:	617b      	str	r3, [r7, #20]
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	781b      	ldrb	r3, [r3, #0]
 8016d96:	2b1f      	cmp	r3, #31
 8016d98:	d903      	bls.n	8016da2 <get_ldnumber+0x34>
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	781b      	ldrb	r3, [r3, #0]
 8016d9e:	2b3a      	cmp	r3, #58	; 0x3a
 8016da0:	d1f4      	bne.n	8016d8c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016da2:	697b      	ldr	r3, [r7, #20]
 8016da4:	781b      	ldrb	r3, [r3, #0]
 8016da6:	2b3a      	cmp	r3, #58	; 0x3a
 8016da8:	d11c      	bne.n	8016de4 <get_ldnumber+0x76>
			tp = *path;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	1c5a      	adds	r2, r3, #1
 8016db4:	60fa      	str	r2, [r7, #12]
 8016db6:	781b      	ldrb	r3, [r3, #0]
 8016db8:	3b30      	subs	r3, #48	; 0x30
 8016dba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016dbc:	68bb      	ldr	r3, [r7, #8]
 8016dbe:	2b09      	cmp	r3, #9
 8016dc0:	d80e      	bhi.n	8016de0 <get_ldnumber+0x72>
 8016dc2:	68fa      	ldr	r2, [r7, #12]
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	d10a      	bne.n	8016de0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016dca:	68bb      	ldr	r3, [r7, #8]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d107      	bne.n	8016de0 <get_ldnumber+0x72>
					vol = (int)i;
 8016dd0:	68bb      	ldr	r3, [r7, #8]
 8016dd2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016dd4:	697b      	ldr	r3, [r7, #20]
 8016dd6:	3301      	adds	r3, #1
 8016dd8:	617b      	str	r3, [r7, #20]
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	697a      	ldr	r2, [r7, #20]
 8016dde:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	e002      	b.n	8016dea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016de4:	2300      	movs	r3, #0
 8016de6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016de8:	693b      	ldr	r3, [r7, #16]
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	371c      	adds	r7, #28
 8016dee:	46bd      	mov	sp, r7
 8016df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df4:	4770      	bx	lr
	...

08016df8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b082      	sub	sp, #8
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
 8016e00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	2200      	movs	r2, #0
 8016e06:	70da      	strb	r2, [r3, #3]
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e0e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016e10:	6839      	ldr	r1, [r7, #0]
 8016e12:	6878      	ldr	r0, [r7, #4]
 8016e14:	f7fe fa70 	bl	80152f8 <move_window>
 8016e18:	4603      	mov	r3, r0
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d001      	beq.n	8016e22 <check_fs+0x2a>
 8016e1e:	2304      	movs	r3, #4
 8016e20:	e038      	b.n	8016e94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	3334      	adds	r3, #52	; 0x34
 8016e26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f7fd ffb4 	bl	8014d98 <ld_word>
 8016e30:	4603      	mov	r3, r0
 8016e32:	461a      	mov	r2, r3
 8016e34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016e38:	429a      	cmp	r2, r3
 8016e3a:	d001      	beq.n	8016e40 <check_fs+0x48>
 8016e3c:	2303      	movs	r3, #3
 8016e3e:	e029      	b.n	8016e94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016e46:	2be9      	cmp	r3, #233	; 0xe9
 8016e48:	d009      	beq.n	8016e5e <check_fs+0x66>
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016e50:	2beb      	cmp	r3, #235	; 0xeb
 8016e52:	d11e      	bne.n	8016e92 <check_fs+0x9a>
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8016e5a:	2b90      	cmp	r3, #144	; 0x90
 8016e5c:	d119      	bne.n	8016e92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	3334      	adds	r3, #52	; 0x34
 8016e62:	3336      	adds	r3, #54	; 0x36
 8016e64:	4618      	mov	r0, r3
 8016e66:	f7fd ffaf 	bl	8014dc8 <ld_dword>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016e70:	4a0a      	ldr	r2, [pc, #40]	; (8016e9c <check_fs+0xa4>)
 8016e72:	4293      	cmp	r3, r2
 8016e74:	d101      	bne.n	8016e7a <check_fs+0x82>
 8016e76:	2300      	movs	r3, #0
 8016e78:	e00c      	b.n	8016e94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	3334      	adds	r3, #52	; 0x34
 8016e7e:	3352      	adds	r3, #82	; 0x52
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7fd ffa1 	bl	8014dc8 <ld_dword>
 8016e86:	4603      	mov	r3, r0
 8016e88:	4a05      	ldr	r2, [pc, #20]	; (8016ea0 <check_fs+0xa8>)
 8016e8a:	4293      	cmp	r3, r2
 8016e8c:	d101      	bne.n	8016e92 <check_fs+0x9a>
 8016e8e:	2300      	movs	r3, #0
 8016e90:	e000      	b.n	8016e94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016e92:	2302      	movs	r3, #2
}
 8016e94:	4618      	mov	r0, r3
 8016e96:	3708      	adds	r7, #8
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd80      	pop	{r7, pc}
 8016e9c:	00544146 	.word	0x00544146
 8016ea0:	33544146 	.word	0x33544146

08016ea4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b096      	sub	sp, #88	; 0x58
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	60f8      	str	r0, [r7, #12]
 8016eac:	60b9      	str	r1, [r7, #8]
 8016eae:	4613      	mov	r3, r2
 8016eb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016eb2:	68bb      	ldr	r3, [r7, #8]
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016eb8:	68f8      	ldr	r0, [r7, #12]
 8016eba:	f7ff ff58 	bl	8016d6e <get_ldnumber>
 8016ebe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	da01      	bge.n	8016eca <find_volume+0x26>
 8016ec6:	230b      	movs	r3, #11
 8016ec8:	e231      	b.n	801732e <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016eca:	4aa8      	ldr	r2, [pc, #672]	; (801716c <find_volume+0x2c8>)
 8016ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016ed2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d101      	bne.n	8016ede <find_volume+0x3a>
 8016eda:	230c      	movs	r3, #12
 8016edc:	e227      	b.n	801732e <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016ede:	68bb      	ldr	r3, [r7, #8]
 8016ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016ee2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016ee4:	79fb      	ldrb	r3, [r7, #7]
 8016ee6:	f023 0301 	bic.w	r3, r3, #1
 8016eea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eee:	781b      	ldrb	r3, [r3, #0]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d01a      	beq.n	8016f2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef6:	785b      	ldrb	r3, [r3, #1]
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f7fd fea7 	bl	8014c4c <disk_status>
 8016efe:	4603      	mov	r3, r0
 8016f00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016f04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f08:	f003 0301 	and.w	r3, r3, #1
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d10c      	bne.n	8016f2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016f10:	79fb      	ldrb	r3, [r7, #7]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d007      	beq.n	8016f26 <find_volume+0x82>
 8016f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f1a:	f003 0304 	and.w	r3, r3, #4
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d001      	beq.n	8016f26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8016f22:	230a      	movs	r3, #10
 8016f24:	e203      	b.n	801732e <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8016f26:	2300      	movs	r3, #0
 8016f28:	e201      	b.n	801732e <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f32:	b2da      	uxtb	r2, r3
 8016f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f3a:	785b      	ldrb	r3, [r3, #1]
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f7fd fe9f 	bl	8014c80 <disk_initialize>
 8016f42:	4603      	mov	r3, r0
 8016f44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016f48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f4c:	f003 0301 	and.w	r3, r3, #1
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d001      	beq.n	8016f58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016f54:	2303      	movs	r3, #3
 8016f56:	e1ea      	b.n	801732e <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016f58:	79fb      	ldrb	r3, [r7, #7]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d007      	beq.n	8016f6e <find_volume+0xca>
 8016f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f62:	f003 0304 	and.w	r3, r3, #4
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d001      	beq.n	8016f6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016f6a:	230a      	movs	r3, #10
 8016f6c:	e1df      	b.n	801732e <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016f72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016f74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016f76:	f7ff ff3f 	bl	8016df8 <check_fs>
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016f80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016f84:	2b02      	cmp	r3, #2
 8016f86:	d14b      	bne.n	8017020 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016f88:	2300      	movs	r3, #0
 8016f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8016f8c:	e01f      	b.n	8016fce <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f90:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f96:	011b      	lsls	r3, r3, #4
 8016f98:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016f9c:	4413      	add	r3, r2
 8016f9e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa2:	3304      	adds	r3, #4
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d006      	beq.n	8016fb8 <find_volume+0x114>
 8016faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fac:	3308      	adds	r3, #8
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7fd ff0a 	bl	8014dc8 <ld_dword>
 8016fb4:	4602      	mov	r2, r0
 8016fb6:	e000      	b.n	8016fba <find_volume+0x116>
 8016fb8:	2200      	movs	r2, #0
 8016fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fbc:	009b      	lsls	r3, r3, #2
 8016fbe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016fc2:	440b      	add	r3, r1
 8016fc4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fca:	3301      	adds	r3, #1
 8016fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8016fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fd0:	2b03      	cmp	r3, #3
 8016fd2:	d9dc      	bls.n	8016f8e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d002      	beq.n	8016fe4 <find_volume+0x140>
 8016fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fe0:	3b01      	subs	r3, #1
 8016fe2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fe6:	009b      	lsls	r3, r3, #2
 8016fe8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016fec:	4413      	add	r3, r2
 8016fee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016ff2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d005      	beq.n	8017006 <find_volume+0x162>
 8016ffa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016ffc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016ffe:	f7ff fefb 	bl	8016df8 <check_fs>
 8017002:	4603      	mov	r3, r0
 8017004:	e000      	b.n	8017008 <find_volume+0x164>
 8017006:	2303      	movs	r3, #3
 8017008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801700c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017010:	2b01      	cmp	r3, #1
 8017012:	d905      	bls.n	8017020 <find_volume+0x17c>
 8017014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017016:	3301      	adds	r3, #1
 8017018:	643b      	str	r3, [r7, #64]	; 0x40
 801701a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801701c:	2b03      	cmp	r3, #3
 801701e:	d9e1      	bls.n	8016fe4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017024:	2b04      	cmp	r3, #4
 8017026:	d101      	bne.n	801702c <find_volume+0x188>
 8017028:	2301      	movs	r3, #1
 801702a:	e180      	b.n	801732e <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801702c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017030:	2b01      	cmp	r3, #1
 8017032:	d901      	bls.n	8017038 <find_volume+0x194>
 8017034:	230d      	movs	r3, #13
 8017036:	e17a      	b.n	801732e <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801703a:	3334      	adds	r3, #52	; 0x34
 801703c:	330b      	adds	r3, #11
 801703e:	4618      	mov	r0, r3
 8017040:	f7fd feaa 	bl	8014d98 <ld_word>
 8017044:	4603      	mov	r3, r0
 8017046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801704a:	d001      	beq.n	8017050 <find_volume+0x1ac>
 801704c:	230d      	movs	r3, #13
 801704e:	e16e      	b.n	801732e <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017052:	3334      	adds	r3, #52	; 0x34
 8017054:	3316      	adds	r3, #22
 8017056:	4618      	mov	r0, r3
 8017058:	f7fd fe9e 	bl	8014d98 <ld_word>
 801705c:	4603      	mov	r3, r0
 801705e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017062:	2b00      	cmp	r3, #0
 8017064:	d106      	bne.n	8017074 <find_volume+0x1d0>
 8017066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017068:	3334      	adds	r3, #52	; 0x34
 801706a:	3324      	adds	r3, #36	; 0x24
 801706c:	4618      	mov	r0, r3
 801706e:	f7fd feab 	bl	8014dc8 <ld_dword>
 8017072:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017078:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801707c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8017080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017082:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017086:	789b      	ldrb	r3, [r3, #2]
 8017088:	2b01      	cmp	r3, #1
 801708a:	d005      	beq.n	8017098 <find_volume+0x1f4>
 801708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801708e:	789b      	ldrb	r3, [r3, #2]
 8017090:	2b02      	cmp	r3, #2
 8017092:	d001      	beq.n	8017098 <find_volume+0x1f4>
 8017094:	230d      	movs	r3, #13
 8017096:	e14a      	b.n	801732e <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801709a:	789b      	ldrb	r3, [r3, #2]
 801709c:	461a      	mov	r2, r3
 801709e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170a0:	fb02 f303 	mul.w	r3, r2, r3
 80170a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80170a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80170ac:	b29a      	uxth	r2, r3
 80170ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80170b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170b4:	895b      	ldrh	r3, [r3, #10]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d008      	beq.n	80170cc <find_volume+0x228>
 80170ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170bc:	895b      	ldrh	r3, [r3, #10]
 80170be:	461a      	mov	r2, r3
 80170c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170c2:	895b      	ldrh	r3, [r3, #10]
 80170c4:	3b01      	subs	r3, #1
 80170c6:	4013      	ands	r3, r2
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d001      	beq.n	80170d0 <find_volume+0x22c>
 80170cc:	230d      	movs	r3, #13
 80170ce:	e12e      	b.n	801732e <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80170d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170d2:	3334      	adds	r3, #52	; 0x34
 80170d4:	3311      	adds	r3, #17
 80170d6:	4618      	mov	r0, r3
 80170d8:	f7fd fe5e 	bl	8014d98 <ld_word>
 80170dc:	4603      	mov	r3, r0
 80170de:	461a      	mov	r2, r3
 80170e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80170e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170e6:	891b      	ldrh	r3, [r3, #8]
 80170e8:	f003 030f 	and.w	r3, r3, #15
 80170ec:	b29b      	uxth	r3, r3
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d001      	beq.n	80170f6 <find_volume+0x252>
 80170f2:	230d      	movs	r3, #13
 80170f4:	e11b      	b.n	801732e <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80170f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170f8:	3334      	adds	r3, #52	; 0x34
 80170fa:	3313      	adds	r3, #19
 80170fc:	4618      	mov	r0, r3
 80170fe:	f7fd fe4b 	bl	8014d98 <ld_word>
 8017102:	4603      	mov	r3, r0
 8017104:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017108:	2b00      	cmp	r3, #0
 801710a:	d106      	bne.n	801711a <find_volume+0x276>
 801710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801710e:	3334      	adds	r3, #52	; 0x34
 8017110:	3320      	adds	r3, #32
 8017112:	4618      	mov	r0, r3
 8017114:	f7fd fe58 	bl	8014dc8 <ld_dword>
 8017118:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801711c:	3334      	adds	r3, #52	; 0x34
 801711e:	330e      	adds	r3, #14
 8017120:	4618      	mov	r0, r3
 8017122:	f7fd fe39 	bl	8014d98 <ld_word>
 8017126:	4603      	mov	r3, r0
 8017128:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801712a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801712c:	2b00      	cmp	r3, #0
 801712e:	d101      	bne.n	8017134 <find_volume+0x290>
 8017130:	230d      	movs	r3, #13
 8017132:	e0fc      	b.n	801732e <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017134:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017138:	4413      	add	r3, r2
 801713a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801713c:	8912      	ldrh	r2, [r2, #8]
 801713e:	0912      	lsrs	r2, r2, #4
 8017140:	b292      	uxth	r2, r2
 8017142:	4413      	add	r3, r2
 8017144:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801714a:	429a      	cmp	r2, r3
 801714c:	d201      	bcs.n	8017152 <find_volume+0x2ae>
 801714e:	230d      	movs	r3, #13
 8017150:	e0ed      	b.n	801732e <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017156:	1ad3      	subs	r3, r2, r3
 8017158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801715a:	8952      	ldrh	r2, [r2, #10]
 801715c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017160:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017164:	2b00      	cmp	r3, #0
 8017166:	d103      	bne.n	8017170 <find_volume+0x2cc>
 8017168:	230d      	movs	r3, #13
 801716a:	e0e0      	b.n	801732e <find_volume+0x48a>
 801716c:	20000d74 	.word	0x20000d74
		fmt = FS_FAT32;
 8017170:	2303      	movs	r3, #3
 8017172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017178:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801717c:	4293      	cmp	r3, r2
 801717e:	d802      	bhi.n	8017186 <find_volume+0x2e2>
 8017180:	2302      	movs	r3, #2
 8017182:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017188:	f640 72f5 	movw	r2, #4085	; 0xff5
 801718c:	4293      	cmp	r3, r2
 801718e:	d802      	bhi.n	8017196 <find_volume+0x2f2>
 8017190:	2301      	movs	r3, #1
 8017192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017198:	1c9a      	adds	r2, r3, #2
 801719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801719c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80171a2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80171a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80171a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171a8:	441a      	add	r2, r3
 80171aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ac:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80171ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80171b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b2:	441a      	add	r2, r3
 80171b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171b6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80171b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80171bc:	2b03      	cmp	r3, #3
 80171be:	d11e      	bne.n	80171fe <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80171c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171c2:	3334      	adds	r3, #52	; 0x34
 80171c4:	332a      	adds	r3, #42	; 0x2a
 80171c6:	4618      	mov	r0, r3
 80171c8:	f7fd fde6 	bl	8014d98 <ld_word>
 80171cc:	4603      	mov	r3, r0
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d001      	beq.n	80171d6 <find_volume+0x332>
 80171d2:	230d      	movs	r3, #13
 80171d4:	e0ab      	b.n	801732e <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80171d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d8:	891b      	ldrh	r3, [r3, #8]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d001      	beq.n	80171e2 <find_volume+0x33e>
 80171de:	230d      	movs	r3, #13
 80171e0:	e0a5      	b.n	801732e <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80171e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171e4:	3334      	adds	r3, #52	; 0x34
 80171e6:	332c      	adds	r3, #44	; 0x2c
 80171e8:	4618      	mov	r0, r3
 80171ea:	f7fd fded 	bl	8014dc8 <ld_dword>
 80171ee:	4602      	mov	r2, r0
 80171f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171f2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80171f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171f6:	699b      	ldr	r3, [r3, #24]
 80171f8:	009b      	lsls	r3, r3, #2
 80171fa:	647b      	str	r3, [r7, #68]	; 0x44
 80171fc:	e01f      	b.n	801723e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80171fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017200:	891b      	ldrh	r3, [r3, #8]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d101      	bne.n	801720a <find_volume+0x366>
 8017206:	230d      	movs	r3, #13
 8017208:	e091      	b.n	801732e <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801720c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801720e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017210:	441a      	add	r2, r3
 8017212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017214:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017216:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801721a:	2b02      	cmp	r3, #2
 801721c:	d103      	bne.n	8017226 <find_volume+0x382>
 801721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017220:	699b      	ldr	r3, [r3, #24]
 8017222:	005b      	lsls	r3, r3, #1
 8017224:	e00a      	b.n	801723c <find_volume+0x398>
 8017226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017228:	699a      	ldr	r2, [r3, #24]
 801722a:	4613      	mov	r3, r2
 801722c:	005b      	lsls	r3, r3, #1
 801722e:	4413      	add	r3, r2
 8017230:	085a      	lsrs	r2, r3, #1
 8017232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017234:	699b      	ldr	r3, [r3, #24]
 8017236:	f003 0301 	and.w	r3, r3, #1
 801723a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801723c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017240:	69da      	ldr	r2, [r3, #28]
 8017242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017244:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017248:	0a5b      	lsrs	r3, r3, #9
 801724a:	429a      	cmp	r2, r3
 801724c:	d201      	bcs.n	8017252 <find_volume+0x3ae>
 801724e:	230d      	movs	r3, #13
 8017250:	e06d      	b.n	801732e <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017254:	f04f 32ff 	mov.w	r2, #4294967295
 8017258:	615a      	str	r2, [r3, #20]
 801725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801725c:	695a      	ldr	r2, [r3, #20]
 801725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017260:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8017262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017264:	2280      	movs	r2, #128	; 0x80
 8017266:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801726c:	2b03      	cmp	r3, #3
 801726e:	d149      	bne.n	8017304 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017272:	3334      	adds	r3, #52	; 0x34
 8017274:	3330      	adds	r3, #48	; 0x30
 8017276:	4618      	mov	r0, r3
 8017278:	f7fd fd8e 	bl	8014d98 <ld_word>
 801727c:	4603      	mov	r3, r0
 801727e:	2b01      	cmp	r3, #1
 8017280:	d140      	bne.n	8017304 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017284:	3301      	adds	r3, #1
 8017286:	4619      	mov	r1, r3
 8017288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801728a:	f7fe f835 	bl	80152f8 <move_window>
 801728e:	4603      	mov	r3, r0
 8017290:	2b00      	cmp	r3, #0
 8017292:	d137      	bne.n	8017304 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8017294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017296:	2200      	movs	r2, #0
 8017298:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801729c:	3334      	adds	r3, #52	; 0x34
 801729e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80172a2:	4618      	mov	r0, r3
 80172a4:	f7fd fd78 	bl	8014d98 <ld_word>
 80172a8:	4603      	mov	r3, r0
 80172aa:	461a      	mov	r2, r3
 80172ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d127      	bne.n	8017304 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80172b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172b6:	3334      	adds	r3, #52	; 0x34
 80172b8:	4618      	mov	r0, r3
 80172ba:	f7fd fd85 	bl	8014dc8 <ld_dword>
 80172be:	4603      	mov	r3, r0
 80172c0:	4a1d      	ldr	r2, [pc, #116]	; (8017338 <find_volume+0x494>)
 80172c2:	4293      	cmp	r3, r2
 80172c4:	d11e      	bne.n	8017304 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80172c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172c8:	3334      	adds	r3, #52	; 0x34
 80172ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7fd fd7a 	bl	8014dc8 <ld_dword>
 80172d4:	4603      	mov	r3, r0
 80172d6:	4a19      	ldr	r2, [pc, #100]	; (801733c <find_volume+0x498>)
 80172d8:	4293      	cmp	r3, r2
 80172da:	d113      	bne.n	8017304 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80172dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172de:	3334      	adds	r3, #52	; 0x34
 80172e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80172e4:	4618      	mov	r0, r3
 80172e6:	f7fd fd6f 	bl	8014dc8 <ld_dword>
 80172ea:	4602      	mov	r2, r0
 80172ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ee:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80172f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f2:	3334      	adds	r3, #52	; 0x34
 80172f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80172f8:	4618      	mov	r0, r3
 80172fa:	f7fd fd65 	bl	8014dc8 <ld_dword>
 80172fe:	4602      	mov	r2, r0
 8017300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017302:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017306:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801730a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801730c:	4b0c      	ldr	r3, [pc, #48]	; (8017340 <find_volume+0x49c>)
 801730e:	881b      	ldrh	r3, [r3, #0]
 8017310:	3301      	adds	r3, #1
 8017312:	b29a      	uxth	r2, r3
 8017314:	4b0a      	ldr	r3, [pc, #40]	; (8017340 <find_volume+0x49c>)
 8017316:	801a      	strh	r2, [r3, #0]
 8017318:	4b09      	ldr	r3, [pc, #36]	; (8017340 <find_volume+0x49c>)
 801731a:	881a      	ldrh	r2, [r3, #0]
 801731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801731e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8017320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017322:	4a08      	ldr	r2, [pc, #32]	; (8017344 <find_volume+0x4a0>)
 8017324:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017326:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017328:	f7fd ff7e 	bl	8015228 <clear_lock>
#endif
	return FR_OK;
 801732c:	2300      	movs	r3, #0
}
 801732e:	4618      	mov	r0, r3
 8017330:	3758      	adds	r7, #88	; 0x58
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}
 8017336:	bf00      	nop
 8017338:	41615252 	.word	0x41615252
 801733c:	61417272 	.word	0x61417272
 8017340:	20000d78 	.word	0x20000d78
 8017344:	20000ebc 	.word	0x20000ebc

08017348 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b084      	sub	sp, #16
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
 8017350:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017352:	2309      	movs	r3, #9
 8017354:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d01c      	beq.n	8017396 <validate+0x4e>
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d018      	beq.n	8017396 <validate+0x4e>
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	781b      	ldrb	r3, [r3, #0]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d013      	beq.n	8017396 <validate+0x4e>
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	889a      	ldrh	r2, [r3, #4]
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	88db      	ldrh	r3, [r3, #6]
 8017378:	429a      	cmp	r2, r3
 801737a:	d10c      	bne.n	8017396 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	785b      	ldrb	r3, [r3, #1]
 8017382:	4618      	mov	r0, r3
 8017384:	f7fd fc62 	bl	8014c4c <disk_status>
 8017388:	4603      	mov	r3, r0
 801738a:	f003 0301 	and.w	r3, r3, #1
 801738e:	2b00      	cmp	r3, #0
 8017390:	d101      	bne.n	8017396 <validate+0x4e>
			res = FR_OK;
 8017392:	2300      	movs	r3, #0
 8017394:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017396:	7bfb      	ldrb	r3, [r7, #15]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d102      	bne.n	80173a2 <validate+0x5a>
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	e000      	b.n	80173a4 <validate+0x5c>
 80173a2:	2300      	movs	r3, #0
 80173a4:	683a      	ldr	r2, [r7, #0]
 80173a6:	6013      	str	r3, [r2, #0]
	return res;
 80173a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80173aa:	4618      	mov	r0, r3
 80173ac:	3710      	adds	r7, #16
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd80      	pop	{r7, pc}
	...

080173b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b088      	sub	sp, #32
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	60f8      	str	r0, [r7, #12]
 80173bc:	60b9      	str	r1, [r7, #8]
 80173be:	4613      	mov	r3, r2
 80173c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80173c6:	f107 0310 	add.w	r3, r7, #16
 80173ca:	4618      	mov	r0, r3
 80173cc:	f7ff fccf 	bl	8016d6e <get_ldnumber>
 80173d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80173d2:	69fb      	ldr	r3, [r7, #28]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	da01      	bge.n	80173dc <f_mount+0x28>
 80173d8:	230b      	movs	r3, #11
 80173da:	e02b      	b.n	8017434 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80173dc:	4a17      	ldr	r2, [pc, #92]	; (801743c <f_mount+0x88>)
 80173de:	69fb      	ldr	r3, [r7, #28]
 80173e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80173e6:	69bb      	ldr	r3, [r7, #24]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d005      	beq.n	80173f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80173ec:	69b8      	ldr	r0, [r7, #24]
 80173ee:	f7fd ff1b 	bl	8015228 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80173f2:	69bb      	ldr	r3, [r7, #24]
 80173f4:	2200      	movs	r2, #0
 80173f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d002      	beq.n	8017404 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	2200      	movs	r2, #0
 8017402:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017404:	68fa      	ldr	r2, [r7, #12]
 8017406:	490d      	ldr	r1, [pc, #52]	; (801743c <f_mount+0x88>)
 8017408:	69fb      	ldr	r3, [r7, #28]
 801740a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d002      	beq.n	801741a <f_mount+0x66>
 8017414:	79fb      	ldrb	r3, [r7, #7]
 8017416:	2b01      	cmp	r3, #1
 8017418:	d001      	beq.n	801741e <f_mount+0x6a>
 801741a:	2300      	movs	r3, #0
 801741c:	e00a      	b.n	8017434 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801741e:	f107 010c 	add.w	r1, r7, #12
 8017422:	f107 0308 	add.w	r3, r7, #8
 8017426:	2200      	movs	r2, #0
 8017428:	4618      	mov	r0, r3
 801742a:	f7ff fd3b 	bl	8016ea4 <find_volume>
 801742e:	4603      	mov	r3, r0
 8017430:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017432:	7dfb      	ldrb	r3, [r7, #23]
}
 8017434:	4618      	mov	r0, r3
 8017436:	3720      	adds	r7, #32
 8017438:	46bd      	mov	sp, r7
 801743a:	bd80      	pop	{r7, pc}
 801743c:	20000d74 	.word	0x20000d74

08017440 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b09a      	sub	sp, #104	; 0x68
 8017444:	af00      	add	r7, sp, #0
 8017446:	60f8      	str	r0, [r7, #12]
 8017448:	60b9      	str	r1, [r7, #8]
 801744a:	4613      	mov	r3, r2
 801744c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d101      	bne.n	8017458 <f_open+0x18>
 8017454:	2309      	movs	r3, #9
 8017456:	e1ad      	b.n	80177b4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017458:	79fb      	ldrb	r3, [r7, #7]
 801745a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801745e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017460:	79fa      	ldrb	r2, [r7, #7]
 8017462:	f107 0110 	add.w	r1, r7, #16
 8017466:	f107 0308 	add.w	r3, r7, #8
 801746a:	4618      	mov	r0, r3
 801746c:	f7ff fd1a 	bl	8016ea4 <find_volume>
 8017470:	4603      	mov	r3, r0
 8017472:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8017476:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801747a:	2b00      	cmp	r3, #0
 801747c:	f040 8191 	bne.w	80177a2 <f_open+0x362>
		dj.obj.fs = fs;
 8017480:	693b      	ldr	r3, [r7, #16]
 8017482:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017484:	68ba      	ldr	r2, [r7, #8]
 8017486:	f107 0314 	add.w	r3, r7, #20
 801748a:	4611      	mov	r1, r2
 801748c:	4618      	mov	r0, r3
 801748e:	f7ff fbfd 	bl	8016c8c <follow_path>
 8017492:	4603      	mov	r3, r0
 8017494:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017498:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801749c:	2b00      	cmp	r3, #0
 801749e:	d11a      	bne.n	80174d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80174a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80174a4:	b25b      	sxtb	r3, r3
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	da03      	bge.n	80174b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80174aa:	2306      	movs	r3, #6
 80174ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80174b0:	e011      	b.n	80174d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80174b2:	79fb      	ldrb	r3, [r7, #7]
 80174b4:	f023 0301 	bic.w	r3, r3, #1
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	bf14      	ite	ne
 80174bc:	2301      	movne	r3, #1
 80174be:	2300      	moveq	r3, #0
 80174c0:	b2db      	uxtb	r3, r3
 80174c2:	461a      	mov	r2, r3
 80174c4:	f107 0314 	add.w	r3, r7, #20
 80174c8:	4611      	mov	r1, r2
 80174ca:	4618      	mov	r0, r3
 80174cc:	f7fd fd64 	bl	8014f98 <chk_lock>
 80174d0:	4603      	mov	r3, r0
 80174d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80174d6:	79fb      	ldrb	r3, [r7, #7]
 80174d8:	f003 031c 	and.w	r3, r3, #28
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d07f      	beq.n	80175e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80174e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d017      	beq.n	8017518 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80174e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80174ec:	2b04      	cmp	r3, #4
 80174ee:	d10e      	bne.n	801750e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80174f0:	f7fd fdae 	bl	8015050 <enq_lock>
 80174f4:	4603      	mov	r3, r0
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d006      	beq.n	8017508 <f_open+0xc8>
 80174fa:	f107 0314 	add.w	r3, r7, #20
 80174fe:	4618      	mov	r0, r3
 8017500:	f7fe ff94 	bl	801642c <dir_register>
 8017504:	4603      	mov	r3, r0
 8017506:	e000      	b.n	801750a <f_open+0xca>
 8017508:	2312      	movs	r3, #18
 801750a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801750e:	79fb      	ldrb	r3, [r7, #7]
 8017510:	f043 0308 	orr.w	r3, r3, #8
 8017514:	71fb      	strb	r3, [r7, #7]
 8017516:	e010      	b.n	801753a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017518:	7ebb      	ldrb	r3, [r7, #26]
 801751a:	f003 0311 	and.w	r3, r3, #17
 801751e:	2b00      	cmp	r3, #0
 8017520:	d003      	beq.n	801752a <f_open+0xea>
					res = FR_DENIED;
 8017522:	2307      	movs	r3, #7
 8017524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017528:	e007      	b.n	801753a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801752a:	79fb      	ldrb	r3, [r7, #7]
 801752c:	f003 0304 	and.w	r3, r3, #4
 8017530:	2b00      	cmp	r3, #0
 8017532:	d002      	beq.n	801753a <f_open+0xfa>
 8017534:	2308      	movs	r3, #8
 8017536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801753a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801753e:	2b00      	cmp	r3, #0
 8017540:	d168      	bne.n	8017614 <f_open+0x1d4>
 8017542:	79fb      	ldrb	r3, [r7, #7]
 8017544:	f003 0308 	and.w	r3, r3, #8
 8017548:	2b00      	cmp	r3, #0
 801754a:	d063      	beq.n	8017614 <f_open+0x1d4>
				dw = GET_FATTIME();
 801754c:	f7fd fc1c 	bl	8014d88 <get_fattime>
 8017550:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017554:	330e      	adds	r3, #14
 8017556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017558:	4618      	mov	r0, r3
 801755a:	f7fd fc73 	bl	8014e44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017560:	3316      	adds	r3, #22
 8017562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017564:	4618      	mov	r0, r3
 8017566:	f7fd fc6d 	bl	8014e44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801756a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801756c:	330b      	adds	r3, #11
 801756e:	2220      	movs	r2, #32
 8017570:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017576:	4611      	mov	r1, r2
 8017578:	4618      	mov	r0, r3
 801757a:	f7fe fbc4 	bl	8015d06 <ld_clust>
 801757e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017580:	693b      	ldr	r3, [r7, #16]
 8017582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017584:	2200      	movs	r2, #0
 8017586:	4618      	mov	r0, r3
 8017588:	f7fe fbdc 	bl	8015d44 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801758c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801758e:	331c      	adds	r3, #28
 8017590:	2100      	movs	r1, #0
 8017592:	4618      	mov	r0, r3
 8017594:	f7fd fc56 	bl	8014e44 <st_dword>
					fs->wflag = 1;
 8017598:	693b      	ldr	r3, [r7, #16]
 801759a:	2201      	movs	r2, #1
 801759c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801759e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d037      	beq.n	8017614 <f_open+0x1d4>
						dw = fs->winsect;
 80175a4:	693b      	ldr	r3, [r7, #16]
 80175a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175a8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80175aa:	f107 0314 	add.w	r3, r7, #20
 80175ae:	2200      	movs	r2, #0
 80175b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80175b2:	4618      	mov	r0, r3
 80175b4:	f7fe f8ef 	bl	8015796 <remove_chain>
 80175b8:	4603      	mov	r3, r0
 80175ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80175be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d126      	bne.n	8017614 <f_open+0x1d4>
							res = move_window(fs, dw);
 80175c6:	693b      	ldr	r3, [r7, #16]
 80175c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7fd fe94 	bl	80152f8 <move_window>
 80175d0:	4603      	mov	r3, r0
 80175d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80175d6:	693b      	ldr	r3, [r7, #16]
 80175d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80175da:	3a01      	subs	r2, #1
 80175dc:	611a      	str	r2, [r3, #16]
 80175de:	e019      	b.n	8017614 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80175e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d115      	bne.n	8017614 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80175e8:	7ebb      	ldrb	r3, [r7, #26]
 80175ea:	f003 0310 	and.w	r3, r3, #16
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d003      	beq.n	80175fa <f_open+0x1ba>
					res = FR_NO_FILE;
 80175f2:	2304      	movs	r3, #4
 80175f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80175f8:	e00c      	b.n	8017614 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80175fa:	79fb      	ldrb	r3, [r7, #7]
 80175fc:	f003 0302 	and.w	r3, r3, #2
 8017600:	2b00      	cmp	r3, #0
 8017602:	d007      	beq.n	8017614 <f_open+0x1d4>
 8017604:	7ebb      	ldrb	r3, [r7, #26]
 8017606:	f003 0301 	and.w	r3, r3, #1
 801760a:	2b00      	cmp	r3, #0
 801760c:	d002      	beq.n	8017614 <f_open+0x1d4>
						res = FR_DENIED;
 801760e:	2307      	movs	r3, #7
 8017610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8017614:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017618:	2b00      	cmp	r3, #0
 801761a:	d128      	bne.n	801766e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801761c:	79fb      	ldrb	r3, [r7, #7]
 801761e:	f003 0308 	and.w	r3, r3, #8
 8017622:	2b00      	cmp	r3, #0
 8017624:	d003      	beq.n	801762e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8017626:	79fb      	ldrb	r3, [r7, #7]
 8017628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801762c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801762e:	693b      	ldr	r3, [r7, #16]
 8017630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8017636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801763c:	79fb      	ldrb	r3, [r7, #7]
 801763e:	f023 0301 	bic.w	r3, r3, #1
 8017642:	2b00      	cmp	r3, #0
 8017644:	bf14      	ite	ne
 8017646:	2301      	movne	r3, #1
 8017648:	2300      	moveq	r3, #0
 801764a:	b2db      	uxtb	r3, r3
 801764c:	461a      	mov	r2, r3
 801764e:	f107 0314 	add.w	r3, r7, #20
 8017652:	4611      	mov	r1, r2
 8017654:	4618      	mov	r0, r3
 8017656:	f7fd fd1d 	bl	8015094 <inc_lock>
 801765a:	4602      	mov	r2, r0
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	691b      	ldr	r3, [r3, #16]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d102      	bne.n	801766e <f_open+0x22e>
 8017668:	2302      	movs	r3, #2
 801766a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801766e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017672:	2b00      	cmp	r3, #0
 8017674:	f040 8095 	bne.w	80177a2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8017678:	693b      	ldr	r3, [r7, #16]
 801767a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801767c:	4611      	mov	r1, r2
 801767e:	4618      	mov	r0, r3
 8017680:	f7fe fb41 	bl	8015d06 <ld_clust>
 8017684:	4602      	mov	r2, r0
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801768c:	331c      	adds	r3, #28
 801768e:	4618      	mov	r0, r3
 8017690:	f7fd fb9a 	bl	8014dc8 <ld_dword>
 8017694:	4602      	mov	r2, r0
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	2200      	movs	r2, #0
 801769e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80176a0:	693a      	ldr	r2, [r7, #16]
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80176a6:	693b      	ldr	r3, [r7, #16]
 80176a8:	88da      	ldrh	r2, [r3, #6]
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	79fa      	ldrb	r2, [r7, #7]
 80176b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	2200      	movs	r2, #0
 80176b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	2200      	movs	r2, #0
 80176be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	2200      	movs	r2, #0
 80176c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	3330      	adds	r3, #48	; 0x30
 80176ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176ce:	2100      	movs	r1, #0
 80176d0:	4618      	mov	r0, r3
 80176d2:	f7fd fc04 	bl	8014ede <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80176d6:	79fb      	ldrb	r3, [r7, #7]
 80176d8:	f003 0320 	and.w	r3, r3, #32
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d060      	beq.n	80177a2 <f_open+0x362>
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	68db      	ldr	r3, [r3, #12]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d05c      	beq.n	80177a2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	68da      	ldr	r2, [r3, #12]
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	895b      	ldrh	r3, [r3, #10]
 80176f4:	025b      	lsls	r3, r3, #9
 80176f6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	689b      	ldr	r3, [r3, #8]
 80176fc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	68db      	ldr	r3, [r3, #12]
 8017702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017704:	e016      	b.n	8017734 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801770a:	4618      	mov	r0, r3
 801770c:	f7fd feaf 	bl	801546e <get_fat>
 8017710:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8017712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017714:	2b01      	cmp	r3, #1
 8017716:	d802      	bhi.n	801771e <f_open+0x2de>
 8017718:	2302      	movs	r3, #2
 801771a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801771e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017724:	d102      	bne.n	801772c <f_open+0x2ec>
 8017726:	2301      	movs	r3, #1
 8017728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801772c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801772e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017730:	1ad3      	subs	r3, r2, r3
 8017732:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017734:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017738:	2b00      	cmp	r3, #0
 801773a:	d103      	bne.n	8017744 <f_open+0x304>
 801773c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801773e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017740:	429a      	cmp	r2, r3
 8017742:	d8e0      	bhi.n	8017706 <f_open+0x2c6>
				}
				fp->clust = clst;
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017748:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801774a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801774e:	2b00      	cmp	r3, #0
 8017750:	d127      	bne.n	80177a2 <f_open+0x362>
 8017752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017758:	2b00      	cmp	r3, #0
 801775a:	d022      	beq.n	80177a2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017760:	4618      	mov	r0, r3
 8017762:	f7fd fe65 	bl	8015430 <clust2sect>
 8017766:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801776a:	2b00      	cmp	r3, #0
 801776c:	d103      	bne.n	8017776 <f_open+0x336>
						res = FR_INT_ERR;
 801776e:	2302      	movs	r3, #2
 8017770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017774:	e015      	b.n	80177a2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8017776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017778:	0a5a      	lsrs	r2, r3, #9
 801777a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801777c:	441a      	add	r2, r3
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017782:	693b      	ldr	r3, [r7, #16]
 8017784:	7858      	ldrb	r0, [r3, #1]
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	6a1a      	ldr	r2, [r3, #32]
 8017790:	2301      	movs	r3, #1
 8017792:	f7fd fa9b 	bl	8014ccc <disk_read>
 8017796:	4603      	mov	r3, r0
 8017798:	2b00      	cmp	r3, #0
 801779a:	d002      	beq.n	80177a2 <f_open+0x362>
 801779c:	2301      	movs	r3, #1
 801779e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80177a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d002      	beq.n	80177b0 <f_open+0x370>
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	2200      	movs	r2, #0
 80177ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80177b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	3768      	adds	r7, #104	; 0x68
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}

080177bc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b08e      	sub	sp, #56	; 0x38
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	60f8      	str	r0, [r7, #12]
 80177c4:	60b9      	str	r1, [r7, #8]
 80177c6:	607a      	str	r2, [r7, #4]
 80177c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80177ca:	68bb      	ldr	r3, [r7, #8]
 80177cc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	2200      	movs	r2, #0
 80177d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	f107 0214 	add.w	r2, r7, #20
 80177da:	4611      	mov	r1, r2
 80177dc:	4618      	mov	r0, r3
 80177de:	f7ff fdb3 	bl	8017348 <validate>
 80177e2:	4603      	mov	r3, r0
 80177e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80177e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d107      	bne.n	8017800 <f_read+0x44>
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	7d5b      	ldrb	r3, [r3, #21]
 80177f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80177f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d002      	beq.n	8017806 <f_read+0x4a>
 8017800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017804:	e115      	b.n	8017a32 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	7d1b      	ldrb	r3, [r3, #20]
 801780a:	f003 0301 	and.w	r3, r3, #1
 801780e:	2b00      	cmp	r3, #0
 8017810:	d101      	bne.n	8017816 <f_read+0x5a>
 8017812:	2307      	movs	r3, #7
 8017814:	e10d      	b.n	8017a32 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	68da      	ldr	r2, [r3, #12]
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	699b      	ldr	r3, [r3, #24]
 801781e:	1ad3      	subs	r3, r2, r3
 8017820:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8017822:	687a      	ldr	r2, [r7, #4]
 8017824:	6a3b      	ldr	r3, [r7, #32]
 8017826:	429a      	cmp	r2, r3
 8017828:	f240 80fe 	bls.w	8017a28 <f_read+0x26c>
 801782c:	6a3b      	ldr	r3, [r7, #32]
 801782e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8017830:	e0fa      	b.n	8017a28 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	699b      	ldr	r3, [r3, #24]
 8017836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801783a:	2b00      	cmp	r3, #0
 801783c:	f040 80c6 	bne.w	80179cc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	699b      	ldr	r3, [r3, #24]
 8017844:	0a5b      	lsrs	r3, r3, #9
 8017846:	697a      	ldr	r2, [r7, #20]
 8017848:	8952      	ldrh	r2, [r2, #10]
 801784a:	3a01      	subs	r2, #1
 801784c:	4013      	ands	r3, r2
 801784e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8017850:	69fb      	ldr	r3, [r7, #28]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d12f      	bne.n	80178b6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	699b      	ldr	r3, [r3, #24]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d103      	bne.n	8017866 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	689b      	ldr	r3, [r3, #8]
 8017862:	633b      	str	r3, [r7, #48]	; 0x30
 8017864:	e013      	b.n	801788e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801786a:	2b00      	cmp	r3, #0
 801786c:	d007      	beq.n	801787e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	699b      	ldr	r3, [r3, #24]
 8017872:	4619      	mov	r1, r3
 8017874:	68f8      	ldr	r0, [r7, #12]
 8017876:	f7fe f88b 	bl	8015990 <clmt_clust>
 801787a:	6338      	str	r0, [r7, #48]	; 0x30
 801787c:	e007      	b.n	801788e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801787e:	68fa      	ldr	r2, [r7, #12]
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	69db      	ldr	r3, [r3, #28]
 8017884:	4619      	mov	r1, r3
 8017886:	4610      	mov	r0, r2
 8017888:	f7fd fdf1 	bl	801546e <get_fat>
 801788c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017890:	2b01      	cmp	r3, #1
 8017892:	d804      	bhi.n	801789e <f_read+0xe2>
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	2202      	movs	r2, #2
 8017898:	755a      	strb	r2, [r3, #21]
 801789a:	2302      	movs	r3, #2
 801789c:	e0c9      	b.n	8017a32 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178a4:	d104      	bne.n	80178b0 <f_read+0xf4>
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	2201      	movs	r2, #1
 80178aa:	755a      	strb	r2, [r3, #21]
 80178ac:	2301      	movs	r3, #1
 80178ae:	e0c0      	b.n	8017a32 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178b4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80178b6:	697a      	ldr	r2, [r7, #20]
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	69db      	ldr	r3, [r3, #28]
 80178bc:	4619      	mov	r1, r3
 80178be:	4610      	mov	r0, r2
 80178c0:	f7fd fdb6 	bl	8015430 <clust2sect>
 80178c4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80178c6:	69bb      	ldr	r3, [r7, #24]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d104      	bne.n	80178d6 <f_read+0x11a>
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	2202      	movs	r2, #2
 80178d0:	755a      	strb	r2, [r3, #21]
 80178d2:	2302      	movs	r3, #2
 80178d4:	e0ad      	b.n	8017a32 <f_read+0x276>
			sect += csect;
 80178d6:	69ba      	ldr	r2, [r7, #24]
 80178d8:	69fb      	ldr	r3, [r7, #28]
 80178da:	4413      	add	r3, r2
 80178dc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	0a5b      	lsrs	r3, r3, #9
 80178e2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80178e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d039      	beq.n	801795e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80178ea:	69fa      	ldr	r2, [r7, #28]
 80178ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ee:	4413      	add	r3, r2
 80178f0:	697a      	ldr	r2, [r7, #20]
 80178f2:	8952      	ldrh	r2, [r2, #10]
 80178f4:	4293      	cmp	r3, r2
 80178f6:	d905      	bls.n	8017904 <f_read+0x148>
					cc = fs->csize - csect;
 80178f8:	697b      	ldr	r3, [r7, #20]
 80178fa:	895b      	ldrh	r3, [r3, #10]
 80178fc:	461a      	mov	r2, r3
 80178fe:	69fb      	ldr	r3, [r7, #28]
 8017900:	1ad3      	subs	r3, r2, r3
 8017902:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017904:	697b      	ldr	r3, [r7, #20]
 8017906:	7858      	ldrb	r0, [r3, #1]
 8017908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801790a:	69ba      	ldr	r2, [r7, #24]
 801790c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801790e:	f7fd f9dd 	bl	8014ccc <disk_read>
 8017912:	4603      	mov	r3, r0
 8017914:	2b00      	cmp	r3, #0
 8017916:	d004      	beq.n	8017922 <f_read+0x166>
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	2201      	movs	r2, #1
 801791c:	755a      	strb	r2, [r3, #21]
 801791e:	2301      	movs	r3, #1
 8017920:	e087      	b.n	8017a32 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	7d1b      	ldrb	r3, [r3, #20]
 8017926:	b25b      	sxtb	r3, r3
 8017928:	2b00      	cmp	r3, #0
 801792a:	da14      	bge.n	8017956 <f_read+0x19a>
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	6a1a      	ldr	r2, [r3, #32]
 8017930:	69bb      	ldr	r3, [r7, #24]
 8017932:	1ad3      	subs	r3, r2, r3
 8017934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017936:	429a      	cmp	r2, r3
 8017938:	d90d      	bls.n	8017956 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	6a1a      	ldr	r2, [r3, #32]
 801793e:	69bb      	ldr	r3, [r7, #24]
 8017940:	1ad3      	subs	r3, r2, r3
 8017942:	025b      	lsls	r3, r3, #9
 8017944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017946:	18d0      	adds	r0, r2, r3
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	3330      	adds	r3, #48	; 0x30
 801794c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017950:	4619      	mov	r1, r3
 8017952:	f7fd faa3 	bl	8014e9c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8017956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017958:	025b      	lsls	r3, r3, #9
 801795a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801795c:	e050      	b.n	8017a00 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	6a1b      	ldr	r3, [r3, #32]
 8017962:	69ba      	ldr	r2, [r7, #24]
 8017964:	429a      	cmp	r2, r3
 8017966:	d02e      	beq.n	80179c6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	7d1b      	ldrb	r3, [r3, #20]
 801796c:	b25b      	sxtb	r3, r3
 801796e:	2b00      	cmp	r3, #0
 8017970:	da18      	bge.n	80179a4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017972:	697b      	ldr	r3, [r7, #20]
 8017974:	7858      	ldrb	r0, [r3, #1]
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	6a1a      	ldr	r2, [r3, #32]
 8017980:	2301      	movs	r3, #1
 8017982:	f7fd f9c3 	bl	8014d0c <disk_write>
 8017986:	4603      	mov	r3, r0
 8017988:	2b00      	cmp	r3, #0
 801798a:	d004      	beq.n	8017996 <f_read+0x1da>
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	2201      	movs	r2, #1
 8017990:	755a      	strb	r2, [r3, #21]
 8017992:	2301      	movs	r3, #1
 8017994:	e04d      	b.n	8017a32 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	7d1b      	ldrb	r3, [r3, #20]
 801799a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801799e:	b2da      	uxtb	r2, r3
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	7858      	ldrb	r0, [r3, #1]
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80179ae:	2301      	movs	r3, #1
 80179b0:	69ba      	ldr	r2, [r7, #24]
 80179b2:	f7fd f98b 	bl	8014ccc <disk_read>
 80179b6:	4603      	mov	r3, r0
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d004      	beq.n	80179c6 <f_read+0x20a>
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	2201      	movs	r2, #1
 80179c0:	755a      	strb	r2, [r3, #21]
 80179c2:	2301      	movs	r3, #1
 80179c4:	e035      	b.n	8017a32 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	69ba      	ldr	r2, [r7, #24]
 80179ca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	699b      	ldr	r3, [r3, #24]
 80179d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80179d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80179d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80179da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	429a      	cmp	r2, r3
 80179e0:	d901      	bls.n	80179e6 <f_read+0x22a>
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	699b      	ldr	r3, [r3, #24]
 80179f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80179f4:	4413      	add	r3, r2
 80179f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179f8:	4619      	mov	r1, r3
 80179fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179fc:	f7fd fa4e 	bl	8014e9c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a04:	4413      	add	r3, r2
 8017a06:	627b      	str	r3, [r7, #36]	; 0x24
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	699a      	ldr	r2, [r3, #24]
 8017a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a0e:	441a      	add	r2, r3
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	619a      	str	r2, [r3, #24]
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	681a      	ldr	r2, [r3, #0]
 8017a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a1a:	441a      	add	r2, r3
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	601a      	str	r2, [r3, #0]
 8017a20:	687a      	ldr	r2, [r7, #4]
 8017a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a24:	1ad3      	subs	r3, r2, r3
 8017a26:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	f47f af01 	bne.w	8017832 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8017a30:	2300      	movs	r3, #0
}
 8017a32:	4618      	mov	r0, r3
 8017a34:	3738      	adds	r7, #56	; 0x38
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}

08017a3a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017a3a:	b580      	push	{r7, lr}
 8017a3c:	b08c      	sub	sp, #48	; 0x30
 8017a3e:	af00      	add	r7, sp, #0
 8017a40:	60f8      	str	r0, [r7, #12]
 8017a42:	60b9      	str	r1, [r7, #8]
 8017a44:	607a      	str	r2, [r7, #4]
 8017a46:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	2200      	movs	r2, #0
 8017a50:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	f107 0210 	add.w	r2, r7, #16
 8017a58:	4611      	mov	r1, r2
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	f7ff fc74 	bl	8017348 <validate>
 8017a60:	4603      	mov	r3, r0
 8017a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d107      	bne.n	8017a7e <f_write+0x44>
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	7d5b      	ldrb	r3, [r3, #21]
 8017a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d002      	beq.n	8017a84 <f_write+0x4a>
 8017a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017a82:	e14b      	b.n	8017d1c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	7d1b      	ldrb	r3, [r3, #20]
 8017a88:	f003 0302 	and.w	r3, r3, #2
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d101      	bne.n	8017a94 <f_write+0x5a>
 8017a90:	2307      	movs	r3, #7
 8017a92:	e143      	b.n	8017d1c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	699a      	ldr	r2, [r3, #24]
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	441a      	add	r2, r3
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	699b      	ldr	r3, [r3, #24]
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	f080 812d 	bcs.w	8017d00 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	699b      	ldr	r3, [r3, #24]
 8017aaa:	43db      	mvns	r3, r3
 8017aac:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8017aae:	e127      	b.n	8017d00 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	699b      	ldr	r3, [r3, #24]
 8017ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	f040 80e3 	bne.w	8017c84 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	699b      	ldr	r3, [r3, #24]
 8017ac2:	0a5b      	lsrs	r3, r3, #9
 8017ac4:	693a      	ldr	r2, [r7, #16]
 8017ac6:	8952      	ldrh	r2, [r2, #10]
 8017ac8:	3a01      	subs	r2, #1
 8017aca:	4013      	ands	r3, r2
 8017acc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8017ace:	69bb      	ldr	r3, [r7, #24]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d143      	bne.n	8017b5c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	699b      	ldr	r3, [r3, #24]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d10c      	bne.n	8017af6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	689b      	ldr	r3, [r3, #8]
 8017ae0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8017ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d11a      	bne.n	8017b1e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	2100      	movs	r1, #0
 8017aec:	4618      	mov	r0, r3
 8017aee:	f7fd feb7 	bl	8015860 <create_chain>
 8017af2:	62b8      	str	r0, [r7, #40]	; 0x28
 8017af4:	e013      	b.n	8017b1e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d007      	beq.n	8017b0e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	699b      	ldr	r3, [r3, #24]
 8017b02:	4619      	mov	r1, r3
 8017b04:	68f8      	ldr	r0, [r7, #12]
 8017b06:	f7fd ff43 	bl	8015990 <clmt_clust>
 8017b0a:	62b8      	str	r0, [r7, #40]	; 0x28
 8017b0c:	e007      	b.n	8017b1e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017b0e:	68fa      	ldr	r2, [r7, #12]
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	69db      	ldr	r3, [r3, #28]
 8017b14:	4619      	mov	r1, r3
 8017b16:	4610      	mov	r0, r2
 8017b18:	f7fd fea2 	bl	8015860 <create_chain>
 8017b1c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f000 80f2 	beq.w	8017d0a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b28:	2b01      	cmp	r3, #1
 8017b2a:	d104      	bne.n	8017b36 <f_write+0xfc>
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	2202      	movs	r2, #2
 8017b30:	755a      	strb	r2, [r3, #21]
 8017b32:	2302      	movs	r3, #2
 8017b34:	e0f2      	b.n	8017d1c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b3c:	d104      	bne.n	8017b48 <f_write+0x10e>
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	2201      	movs	r2, #1
 8017b42:	755a      	strb	r2, [r3, #21]
 8017b44:	2301      	movs	r3, #1
 8017b46:	e0e9      	b.n	8017d1c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b4c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	689b      	ldr	r3, [r3, #8]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d102      	bne.n	8017b5c <f_write+0x122>
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b5a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	7d1b      	ldrb	r3, [r3, #20]
 8017b60:	b25b      	sxtb	r3, r3
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	da18      	bge.n	8017b98 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017b66:	693b      	ldr	r3, [r7, #16]
 8017b68:	7858      	ldrb	r0, [r3, #1]
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	6a1a      	ldr	r2, [r3, #32]
 8017b74:	2301      	movs	r3, #1
 8017b76:	f7fd f8c9 	bl	8014d0c <disk_write>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d004      	beq.n	8017b8a <f_write+0x150>
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	2201      	movs	r2, #1
 8017b84:	755a      	strb	r2, [r3, #21]
 8017b86:	2301      	movs	r3, #1
 8017b88:	e0c8      	b.n	8017d1c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	7d1b      	ldrb	r3, [r3, #20]
 8017b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017b92:	b2da      	uxtb	r2, r3
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017b98:	693a      	ldr	r2, [r7, #16]
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	69db      	ldr	r3, [r3, #28]
 8017b9e:	4619      	mov	r1, r3
 8017ba0:	4610      	mov	r0, r2
 8017ba2:	f7fd fc45 	bl	8015430 <clust2sect>
 8017ba6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017ba8:	697b      	ldr	r3, [r7, #20]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d104      	bne.n	8017bb8 <f_write+0x17e>
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	2202      	movs	r2, #2
 8017bb2:	755a      	strb	r2, [r3, #21]
 8017bb4:	2302      	movs	r3, #2
 8017bb6:	e0b1      	b.n	8017d1c <f_write+0x2e2>
			sect += csect;
 8017bb8:	697a      	ldr	r2, [r7, #20]
 8017bba:	69bb      	ldr	r3, [r7, #24]
 8017bbc:	4413      	add	r3, r2
 8017bbe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	0a5b      	lsrs	r3, r3, #9
 8017bc4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8017bc6:	6a3b      	ldr	r3, [r7, #32]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d03c      	beq.n	8017c46 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017bcc:	69ba      	ldr	r2, [r7, #24]
 8017bce:	6a3b      	ldr	r3, [r7, #32]
 8017bd0:	4413      	add	r3, r2
 8017bd2:	693a      	ldr	r2, [r7, #16]
 8017bd4:	8952      	ldrh	r2, [r2, #10]
 8017bd6:	4293      	cmp	r3, r2
 8017bd8:	d905      	bls.n	8017be6 <f_write+0x1ac>
					cc = fs->csize - csect;
 8017bda:	693b      	ldr	r3, [r7, #16]
 8017bdc:	895b      	ldrh	r3, [r3, #10]
 8017bde:	461a      	mov	r2, r3
 8017be0:	69bb      	ldr	r3, [r7, #24]
 8017be2:	1ad3      	subs	r3, r2, r3
 8017be4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017be6:	693b      	ldr	r3, [r7, #16]
 8017be8:	7858      	ldrb	r0, [r3, #1]
 8017bea:	6a3b      	ldr	r3, [r7, #32]
 8017bec:	697a      	ldr	r2, [r7, #20]
 8017bee:	69f9      	ldr	r1, [r7, #28]
 8017bf0:	f7fd f88c 	bl	8014d0c <disk_write>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d004      	beq.n	8017c04 <f_write+0x1ca>
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	2201      	movs	r2, #1
 8017bfe:	755a      	strb	r2, [r3, #21]
 8017c00:	2301      	movs	r3, #1
 8017c02:	e08b      	b.n	8017d1c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	6a1a      	ldr	r2, [r3, #32]
 8017c08:	697b      	ldr	r3, [r7, #20]
 8017c0a:	1ad3      	subs	r3, r2, r3
 8017c0c:	6a3a      	ldr	r2, [r7, #32]
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d915      	bls.n	8017c3e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	6a1a      	ldr	r2, [r3, #32]
 8017c1c:	697b      	ldr	r3, [r7, #20]
 8017c1e:	1ad3      	subs	r3, r2, r3
 8017c20:	025b      	lsls	r3, r3, #9
 8017c22:	69fa      	ldr	r2, [r7, #28]
 8017c24:	4413      	add	r3, r2
 8017c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c2a:	4619      	mov	r1, r3
 8017c2c:	f7fd f936 	bl	8014e9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	7d1b      	ldrb	r3, [r3, #20]
 8017c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017c38:	b2da      	uxtb	r2, r3
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017c3e:	6a3b      	ldr	r3, [r7, #32]
 8017c40:	025b      	lsls	r3, r3, #9
 8017c42:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017c44:	e03f      	b.n	8017cc6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	6a1b      	ldr	r3, [r3, #32]
 8017c4a:	697a      	ldr	r2, [r7, #20]
 8017c4c:	429a      	cmp	r2, r3
 8017c4e:	d016      	beq.n	8017c7e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	699a      	ldr	r2, [r3, #24]
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d210      	bcs.n	8017c7e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017c5c:	693b      	ldr	r3, [r7, #16]
 8017c5e:	7858      	ldrb	r0, [r3, #1]
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017c66:	2301      	movs	r3, #1
 8017c68:	697a      	ldr	r2, [r7, #20]
 8017c6a:	f7fd f82f 	bl	8014ccc <disk_read>
 8017c6e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d004      	beq.n	8017c7e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	2201      	movs	r2, #1
 8017c78:	755a      	strb	r2, [r3, #21]
 8017c7a:	2301      	movs	r3, #1
 8017c7c:	e04e      	b.n	8017d1c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	697a      	ldr	r2, [r7, #20]
 8017c82:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	699b      	ldr	r3, [r3, #24]
 8017c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017c8c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017c90:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	429a      	cmp	r2, r3
 8017c98:	d901      	bls.n	8017c9e <f_write+0x264>
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	699b      	ldr	r3, [r3, #24]
 8017ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017cac:	4413      	add	r3, r2
 8017cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cb0:	69f9      	ldr	r1, [r7, #28]
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7fd f8f2 	bl	8014e9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	7d1b      	ldrb	r3, [r3, #20]
 8017cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017cc0:	b2da      	uxtb	r2, r3
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017cc6:	69fa      	ldr	r2, [r7, #28]
 8017cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cca:	4413      	add	r3, r2
 8017ccc:	61fb      	str	r3, [r7, #28]
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	699a      	ldr	r2, [r3, #24]
 8017cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cd4:	441a      	add	r2, r3
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	619a      	str	r2, [r3, #24]
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	68da      	ldr	r2, [r3, #12]
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	699b      	ldr	r3, [r3, #24]
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	bf38      	it	cc
 8017ce6:	461a      	movcc	r2, r3
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	60da      	str	r2, [r3, #12]
 8017cec:	683b      	ldr	r3, [r7, #0]
 8017cee:	681a      	ldr	r2, [r3, #0]
 8017cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf2:	441a      	add	r2, r3
 8017cf4:	683b      	ldr	r3, [r7, #0]
 8017cf6:	601a      	str	r2, [r3, #0]
 8017cf8:	687a      	ldr	r2, [r7, #4]
 8017cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cfc:	1ad3      	subs	r3, r2, r3
 8017cfe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	f47f aed4 	bne.w	8017ab0 <f_write+0x76>
 8017d08:	e000      	b.n	8017d0c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017d0a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	7d1b      	ldrb	r3, [r3, #20]
 8017d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d14:	b2da      	uxtb	r2, r3
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017d1a:	2300      	movs	r3, #0
}
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	3730      	adds	r7, #48	; 0x30
 8017d20:	46bd      	mov	sp, r7
 8017d22:	bd80      	pop	{r7, pc}

08017d24 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b086      	sub	sp, #24
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	f107 0208 	add.w	r2, r7, #8
 8017d32:	4611      	mov	r1, r2
 8017d34:	4618      	mov	r0, r3
 8017d36:	f7ff fb07 	bl	8017348 <validate>
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017d3e:	7dfb      	ldrb	r3, [r7, #23]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d168      	bne.n	8017e16 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	7d1b      	ldrb	r3, [r3, #20]
 8017d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d062      	beq.n	8017e16 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	7d1b      	ldrb	r3, [r3, #20]
 8017d54:	b25b      	sxtb	r3, r3
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	da15      	bge.n	8017d86 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	7858      	ldrb	r0, [r3, #1]
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	6a1a      	ldr	r2, [r3, #32]
 8017d68:	2301      	movs	r3, #1
 8017d6a:	f7fc ffcf 	bl	8014d0c <disk_write>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d001      	beq.n	8017d78 <f_sync+0x54>
 8017d74:	2301      	movs	r3, #1
 8017d76:	e04f      	b.n	8017e18 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	7d1b      	ldrb	r3, [r3, #20]
 8017d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d80:	b2da      	uxtb	r2, r3
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017d86:	f7fc ffff 	bl	8014d88 <get_fattime>
 8017d8a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017d8c:	68ba      	ldr	r2, [r7, #8]
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d92:	4619      	mov	r1, r3
 8017d94:	4610      	mov	r0, r2
 8017d96:	f7fd faaf 	bl	80152f8 <move_window>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017d9e:	7dfb      	ldrb	r3, [r7, #23]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d138      	bne.n	8017e16 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017da8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	330b      	adds	r3, #11
 8017dae:	781a      	ldrb	r2, [r3, #0]
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	330b      	adds	r3, #11
 8017db4:	f042 0220 	orr.w	r2, r2, #32
 8017db8:	b2d2      	uxtb	r2, r2
 8017dba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	6818      	ldr	r0, [r3, #0]
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	689b      	ldr	r3, [r3, #8]
 8017dc4:	461a      	mov	r2, r3
 8017dc6:	68f9      	ldr	r1, [r7, #12]
 8017dc8:	f7fd ffbc 	bl	8015d44 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	f103 021c 	add.w	r2, r3, #28
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	68db      	ldr	r3, [r3, #12]
 8017dd6:	4619      	mov	r1, r3
 8017dd8:	4610      	mov	r0, r2
 8017dda:	f7fd f833 	bl	8014e44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	3316      	adds	r3, #22
 8017de2:	6939      	ldr	r1, [r7, #16]
 8017de4:	4618      	mov	r0, r3
 8017de6:	f7fd f82d 	bl	8014e44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	3312      	adds	r3, #18
 8017dee:	2100      	movs	r1, #0
 8017df0:	4618      	mov	r0, r3
 8017df2:	f7fd f80c 	bl	8014e0e <st_word>
					fs->wflag = 1;
 8017df6:	68bb      	ldr	r3, [r7, #8]
 8017df8:	2201      	movs	r2, #1
 8017dfa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017dfc:	68bb      	ldr	r3, [r7, #8]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f7fd faa8 	bl	8015354 <sync_fs>
 8017e04:	4603      	mov	r3, r0
 8017e06:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	7d1b      	ldrb	r3, [r3, #20]
 8017e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017e10:	b2da      	uxtb	r2, r3
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	3718      	adds	r7, #24
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}

08017e20 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b084      	sub	sp, #16
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f7ff ff7b 	bl	8017d24 <f_sync>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017e32:	7bfb      	ldrb	r3, [r7, #15]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d118      	bne.n	8017e6a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f107 0208 	add.w	r2, r7, #8
 8017e3e:	4611      	mov	r1, r2
 8017e40:	4618      	mov	r0, r3
 8017e42:	f7ff fa81 	bl	8017348 <validate>
 8017e46:	4603      	mov	r3, r0
 8017e48:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017e4a:	7bfb      	ldrb	r3, [r7, #15]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d10c      	bne.n	8017e6a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	691b      	ldr	r3, [r3, #16]
 8017e54:	4618      	mov	r0, r3
 8017e56:	f7fd f9ab 	bl	80151b0 <dec_lock>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8017e5e:	7bfb      	ldrb	r3, [r7, #15]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d102      	bne.n	8017e6a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	2200      	movs	r2, #0
 8017e68:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	3710      	adds	r7, #16
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}

08017e74 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b086      	sub	sp, #24
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
 8017e7c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d101      	bne.n	8017e88 <f_opendir+0x14>
 8017e84:	2309      	movs	r3, #9
 8017e86:	e064      	b.n	8017f52 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8017e8c:	f107 010c 	add.w	r1, r7, #12
 8017e90:	463b      	mov	r3, r7
 8017e92:	2200      	movs	r2, #0
 8017e94:	4618      	mov	r0, r3
 8017e96:	f7ff f805 	bl	8016ea4 <find_volume>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017e9e:	7dfb      	ldrb	r3, [r7, #23]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d14f      	bne.n	8017f44 <f_opendir+0xd0>
		obj->fs = fs;
 8017ea4:	68fa      	ldr	r2, [r7, #12]
 8017ea6:	693b      	ldr	r3, [r7, #16]
 8017ea8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8017eaa:	683b      	ldr	r3, [r7, #0]
 8017eac:	4619      	mov	r1, r3
 8017eae:	6878      	ldr	r0, [r7, #4]
 8017eb0:	f7fe feec 	bl	8016c8c <follow_path>
 8017eb4:	4603      	mov	r3, r0
 8017eb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8017eb8:	7dfb      	ldrb	r3, [r7, #23]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d13d      	bne.n	8017f3a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017ec4:	b25b      	sxtb	r3, r3
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	db12      	blt.n	8017ef0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8017eca:	693b      	ldr	r3, [r7, #16]
 8017ecc:	799b      	ldrb	r3, [r3, #6]
 8017ece:	f003 0310 	and.w	r3, r3, #16
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d00a      	beq.n	8017eec <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8017ed6:	68fa      	ldr	r2, [r7, #12]
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	6a1b      	ldr	r3, [r3, #32]
 8017edc:	4619      	mov	r1, r3
 8017ede:	4610      	mov	r0, r2
 8017ee0:	f7fd ff11 	bl	8015d06 <ld_clust>
 8017ee4:	4602      	mov	r2, r0
 8017ee6:	693b      	ldr	r3, [r7, #16]
 8017ee8:	609a      	str	r2, [r3, #8]
 8017eea:	e001      	b.n	8017ef0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8017eec:	2305      	movs	r3, #5
 8017eee:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8017ef0:	7dfb      	ldrb	r3, [r7, #23]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d121      	bne.n	8017f3a <f_opendir+0xc6>
				obj->id = fs->id;
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	88da      	ldrh	r2, [r3, #6]
 8017efa:	693b      	ldr	r3, [r7, #16]
 8017efc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8017efe:	2100      	movs	r1, #0
 8017f00:	6878      	ldr	r0, [r7, #4]
 8017f02:	f7fd fd79 	bl	80159f8 <dir_sdi>
 8017f06:	4603      	mov	r3, r0
 8017f08:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8017f0a:	7dfb      	ldrb	r3, [r7, #23]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d114      	bne.n	8017f3a <f_opendir+0xc6>
					if (obj->sclust) {
 8017f10:	693b      	ldr	r3, [r7, #16]
 8017f12:	689b      	ldr	r3, [r3, #8]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d00d      	beq.n	8017f34 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8017f18:	2100      	movs	r1, #0
 8017f1a:	6878      	ldr	r0, [r7, #4]
 8017f1c:	f7fd f8ba 	bl	8015094 <inc_lock>
 8017f20:	4602      	mov	r2, r0
 8017f22:	693b      	ldr	r3, [r7, #16]
 8017f24:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8017f26:	693b      	ldr	r3, [r7, #16]
 8017f28:	691b      	ldr	r3, [r3, #16]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d105      	bne.n	8017f3a <f_opendir+0xc6>
 8017f2e:	2312      	movs	r3, #18
 8017f30:	75fb      	strb	r3, [r7, #23]
 8017f32:	e002      	b.n	8017f3a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8017f34:	693b      	ldr	r3, [r7, #16]
 8017f36:	2200      	movs	r2, #0
 8017f38:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8017f3a:	7dfb      	ldrb	r3, [r7, #23]
 8017f3c:	2b04      	cmp	r3, #4
 8017f3e:	d101      	bne.n	8017f44 <f_opendir+0xd0>
 8017f40:	2305      	movs	r3, #5
 8017f42:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017f44:	7dfb      	ldrb	r3, [r7, #23]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d002      	beq.n	8017f50 <f_opendir+0xdc>
 8017f4a:	693b      	ldr	r3, [r7, #16]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f52:	4618      	mov	r0, r3
 8017f54:	3718      	adds	r7, #24
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}

08017f5a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8017f5a:	b580      	push	{r7, lr}
 8017f5c:	b084      	sub	sp, #16
 8017f5e:	af00      	add	r7, sp, #0
 8017f60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	f107 0208 	add.w	r2, r7, #8
 8017f68:	4611      	mov	r1, r2
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f7ff f9ec 	bl	8017348 <validate>
 8017f70:	4603      	mov	r3, r0
 8017f72:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017f74:	7bfb      	ldrb	r3, [r7, #15]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d110      	bne.n	8017f9c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	691b      	ldr	r3, [r3, #16]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d006      	beq.n	8017f90 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	691b      	ldr	r3, [r3, #16]
 8017f86:	4618      	mov	r0, r3
 8017f88:	f7fd f912 	bl	80151b0 <dec_lock>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8017f90:	7bfb      	ldrb	r3, [r7, #15]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d102      	bne.n	8017f9c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	2200      	movs	r2, #0
 8017f9a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8017f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	3710      	adds	r7, #16
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	bd80      	pop	{r7, pc}

08017fa6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8017fa6:	b580      	push	{r7, lr}
 8017fa8:	b084      	sub	sp, #16
 8017faa:	af00      	add	r7, sp, #0
 8017fac:	6078      	str	r0, [r7, #4]
 8017fae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	f107 0208 	add.w	r2, r7, #8
 8017fb6:	4611      	mov	r1, r2
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f7ff f9c5 	bl	8017348 <validate>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017fc2:	7bfb      	ldrb	r3, [r7, #15]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d126      	bne.n	8018016 <f_readdir+0x70>
		if (!fno) {
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d106      	bne.n	8017fdc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8017fce:	2100      	movs	r1, #0
 8017fd0:	6878      	ldr	r0, [r7, #4]
 8017fd2:	f7fd fd11 	bl	80159f8 <dir_sdi>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	73fb      	strb	r3, [r7, #15]
 8017fda:	e01c      	b.n	8018016 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8017fdc:	2100      	movs	r1, #0
 8017fde:	6878      	ldr	r0, [r7, #4]
 8017fe0:	f7fe f8bd 	bl	801615e <dir_read>
 8017fe4:	4603      	mov	r3, r0
 8017fe6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8017fe8:	7bfb      	ldrb	r3, [r7, #15]
 8017fea:	2b04      	cmp	r3, #4
 8017fec:	d101      	bne.n	8017ff2 <f_readdir+0x4c>
 8017fee:	2300      	movs	r3, #0
 8017ff0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8017ff2:	7bfb      	ldrb	r3, [r7, #15]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d10e      	bne.n	8018016 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8017ff8:	6839      	ldr	r1, [r7, #0]
 8017ffa:	6878      	ldr	r0, [r7, #4]
 8017ffc:	f7fe fb0e 	bl	801661c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8018000:	2100      	movs	r1, #0
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	f7fd fd73 	bl	8015aee <dir_next>
 8018008:	4603      	mov	r3, r0
 801800a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801800c:	7bfb      	ldrb	r3, [r7, #15]
 801800e:	2b04      	cmp	r3, #4
 8018010:	d101      	bne.n	8018016 <f_readdir+0x70>
 8018012:	2300      	movs	r3, #0
 8018014:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8018016:	7bfb      	ldrb	r3, [r7, #15]
}
 8018018:	4618      	mov	r0, r3
 801801a:	3710      	adds	r7, #16
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b084      	sub	sp, #16
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
 8018028:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801802a:	6839      	ldr	r1, [r7, #0]
 801802c:	6878      	ldr	r0, [r7, #4]
 801802e:	f7ff ffba 	bl	8017fa6 <f_readdir>
 8018032:	4603      	mov	r3, r0
 8018034:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8018036:	7bfb      	ldrb	r3, [r7, #15]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d114      	bne.n	8018066 <f_findnext+0x46>
 801803c:	683b      	ldr	r3, [r7, #0]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d011      	beq.n	8018066 <f_findnext+0x46>
 8018042:	683b      	ldr	r3, [r7, #0]
 8018044:	7d9b      	ldrb	r3, [r3, #22]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d00d      	beq.n	8018066 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801804e:	683b      	ldr	r3, [r7, #0]
 8018050:	f103 0116 	add.w	r1, r3, #22
 8018054:	2300      	movs	r3, #0
 8018056:	2200      	movs	r2, #0
 8018058:	f7fe fbe4 	bl	8016824 <pattern_matching>
 801805c:	4603      	mov	r3, r0
 801805e:	2b00      	cmp	r3, #0
 8018060:	d100      	bne.n	8018064 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8018062:	e7e2      	b.n	801802a <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8018064:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8018066:	7bfb      	ldrb	r3, [r7, #15]
}
 8018068:	4618      	mov	r0, r3
 801806a:	3710      	adds	r7, #16
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}

08018070 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b086      	sub	sp, #24
 8018074:	af00      	add	r7, sp, #0
 8018076:	60f8      	str	r0, [r7, #12]
 8018078:	60b9      	str	r1, [r7, #8]
 801807a:	607a      	str	r2, [r7, #4]
 801807c:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	683a      	ldr	r2, [r7, #0]
 8018082:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8018084:	6879      	ldr	r1, [r7, #4]
 8018086:	68f8      	ldr	r0, [r7, #12]
 8018088:	f7ff fef4 	bl	8017e74 <f_opendir>
 801808c:	4603      	mov	r3, r0
 801808e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018090:	7dfb      	ldrb	r3, [r7, #23]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d105      	bne.n	80180a2 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8018096:	68b9      	ldr	r1, [r7, #8]
 8018098:	68f8      	ldr	r0, [r7, #12]
 801809a:	f7ff ffc1 	bl	8018020 <f_findnext>
 801809e:	4603      	mov	r3, r0
 80180a0:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 80180a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80180a4:	4618      	mov	r0, r3
 80180a6:	3718      	adds	r7, #24
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bd80      	pop	{r7, pc}

080180ac <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b098      	sub	sp, #96	; 0x60
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80180b4:	f107 0108 	add.w	r1, r7, #8
 80180b8:	1d3b      	adds	r3, r7, #4
 80180ba:	2202      	movs	r2, #2
 80180bc:	4618      	mov	r0, r3
 80180be:	f7fe fef1 	bl	8016ea4 <find_volume>
 80180c2:	4603      	mov	r3, r0
 80180c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 80180c8:	68bb      	ldr	r3, [r7, #8]
 80180ca:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80180cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	f040 80ec 	bne.w	80182ae <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80180d6:	687a      	ldr	r2, [r7, #4]
 80180d8:	f107 030c 	add.w	r3, r7, #12
 80180dc:	4611      	mov	r1, r2
 80180de:	4618      	mov	r0, r3
 80180e0:	f7fe fdd4 	bl	8016c8c <follow_path>
 80180e4:	4603      	mov	r3, r0
 80180e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80180ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d102      	bne.n	80180f8 <f_mkdir+0x4c>
 80180f2:	2308      	movs	r3, #8
 80180f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80180f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180fc:	2b04      	cmp	r3, #4
 80180fe:	f040 80d6 	bne.w	80182ae <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8018102:	f107 030c 	add.w	r3, r7, #12
 8018106:	2100      	movs	r1, #0
 8018108:	4618      	mov	r0, r3
 801810a:	f7fd fba9 	bl	8015860 <create_chain>
 801810e:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8018110:	68bb      	ldr	r3, [r7, #8]
 8018112:	895b      	ldrh	r3, [r3, #10]
 8018114:	025b      	lsls	r3, r3, #9
 8018116:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8018118:	2300      	movs	r3, #0
 801811a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801811e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018120:	2b00      	cmp	r3, #0
 8018122:	d102      	bne.n	801812a <f_mkdir+0x7e>
 8018124:	2307      	movs	r3, #7
 8018126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 801812a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801812c:	2b01      	cmp	r3, #1
 801812e:	d102      	bne.n	8018136 <f_mkdir+0x8a>
 8018130:	2302      	movs	r3, #2
 8018132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801813c:	d102      	bne.n	8018144 <f_mkdir+0x98>
 801813e:	2301      	movs	r3, #1
 8018140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8018144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018148:	2b00      	cmp	r3, #0
 801814a:	d106      	bne.n	801815a <f_mkdir+0xae>
 801814c:	68bb      	ldr	r3, [r7, #8]
 801814e:	4618      	mov	r0, r3
 8018150:	f7fd f88e 	bl	8015270 <sync_window>
 8018154:	4603      	mov	r3, r0
 8018156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 801815a:	f7fc fe15 	bl	8014d88 <get_fattime>
 801815e:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8018160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018164:	2b00      	cmp	r3, #0
 8018166:	d16a      	bne.n	801823e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801816c:	4618      	mov	r0, r3
 801816e:	f7fd f95f 	bl	8015430 <clust2sect>
 8018172:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8018174:	68bb      	ldr	r3, [r7, #8]
 8018176:	3334      	adds	r3, #52	; 0x34
 8018178:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 801817a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801817e:	2100      	movs	r1, #0
 8018180:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018182:	f7fc feac 	bl	8014ede <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8018186:	220b      	movs	r2, #11
 8018188:	2120      	movs	r1, #32
 801818a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801818c:	f7fc fea7 	bl	8014ede <mem_set>
					dir[DIR_Name] = '.';
 8018190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018192:	222e      	movs	r2, #46	; 0x2e
 8018194:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8018196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018198:	330b      	adds	r3, #11
 801819a:	2210      	movs	r2, #16
 801819c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801819e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181a0:	3316      	adds	r3, #22
 80181a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80181a4:	4618      	mov	r0, r3
 80181a6:	f7fc fe4d 	bl	8014e44 <st_dword>
					st_clust(fs, dir, dcl);
 80181aa:	68bb      	ldr	r3, [r7, #8]
 80181ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80181ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80181b0:	4618      	mov	r0, r3
 80181b2:	f7fd fdc7 	bl	8015d44 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80181b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181b8:	3320      	adds	r3, #32
 80181ba:	2220      	movs	r2, #32
 80181bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80181be:	4618      	mov	r0, r3
 80181c0:	f7fc fe6c 	bl	8014e9c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80181c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181c6:	3321      	adds	r3, #33	; 0x21
 80181c8:	222e      	movs	r2, #46	; 0x2e
 80181ca:	701a      	strb	r2, [r3, #0]
 80181cc:	697b      	ldr	r3, [r7, #20]
 80181ce:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	781b      	ldrb	r3, [r3, #0]
 80181d4:	2b03      	cmp	r3, #3
 80181d6:	d106      	bne.n	80181e6 <f_mkdir+0x13a>
 80181d8:	68bb      	ldr	r3, [r7, #8]
 80181da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181de:	429a      	cmp	r2, r3
 80181e0:	d101      	bne.n	80181e6 <f_mkdir+0x13a>
 80181e2:	2300      	movs	r3, #0
 80181e4:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 80181e6:	68b8      	ldr	r0, [r7, #8]
 80181e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181ea:	3320      	adds	r3, #32
 80181ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181ee:	4619      	mov	r1, r3
 80181f0:	f7fd fda8 	bl	8015d44 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80181f4:	68bb      	ldr	r3, [r7, #8]
 80181f6:	895b      	ldrh	r3, [r3, #10]
 80181f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80181fa:	e01b      	b.n	8018234 <f_mkdir+0x188>
					fs->winsect = dsc++;
 80181fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181fe:	1c5a      	adds	r2, r3, #1
 8018200:	657a      	str	r2, [r7, #84]	; 0x54
 8018202:	68ba      	ldr	r2, [r7, #8]
 8018204:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	2201      	movs	r2, #1
 801820a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	4618      	mov	r0, r3
 8018210:	f7fd f82e 	bl	8015270 <sync_window>
 8018214:	4603      	mov	r3, r0
 8018216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 801821a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801821e:	2b00      	cmp	r3, #0
 8018220:	d10c      	bne.n	801823c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8018222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018226:	2100      	movs	r1, #0
 8018228:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801822a:	f7fc fe58 	bl	8014ede <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801822e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018230:	3b01      	subs	r3, #1
 8018232:	65bb      	str	r3, [r7, #88]	; 0x58
 8018234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018236:	2b00      	cmp	r3, #0
 8018238:	d1e0      	bne.n	80181fc <f_mkdir+0x150>
 801823a:	e000      	b.n	801823e <f_mkdir+0x192>
					if (res != FR_OK) break;
 801823c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801823e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018242:	2b00      	cmp	r3, #0
 8018244:	d107      	bne.n	8018256 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8018246:	f107 030c 	add.w	r3, r7, #12
 801824a:	4618      	mov	r0, r3
 801824c:	f7fe f8ee 	bl	801642c <dir_register>
 8018250:	4603      	mov	r3, r0
 8018252:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8018256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801825a:	2b00      	cmp	r3, #0
 801825c:	d120      	bne.n	80182a0 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801825e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018260:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8018262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018264:	3316      	adds	r3, #22
 8018266:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8018268:	4618      	mov	r0, r3
 801826a:	f7fc fdeb 	bl	8014e44 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801826e:	68bb      	ldr	r3, [r7, #8]
 8018270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018272:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018274:	4618      	mov	r0, r3
 8018276:	f7fd fd65 	bl	8015d44 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801827a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801827c:	330b      	adds	r3, #11
 801827e:	2210      	movs	r2, #16
 8018280:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8018282:	68bb      	ldr	r3, [r7, #8]
 8018284:	2201      	movs	r2, #1
 8018286:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8018288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801828c:	2b00      	cmp	r3, #0
 801828e:	d10e      	bne.n	80182ae <f_mkdir+0x202>
					res = sync_fs(fs);
 8018290:	68bb      	ldr	r3, [r7, #8]
 8018292:	4618      	mov	r0, r3
 8018294:	f7fd f85e 	bl	8015354 <sync_fs>
 8018298:	4603      	mov	r3, r0
 801829a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801829e:	e006      	b.n	80182ae <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80182a0:	f107 030c 	add.w	r3, r7, #12
 80182a4:	2200      	movs	r2, #0
 80182a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80182a8:	4618      	mov	r0, r3
 80182aa:	f7fd fa74 	bl	8015796 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80182ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80182b2:	4618      	mov	r0, r3
 80182b4:	3760      	adds	r7, #96	; 0x60
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}
	...

080182bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80182bc:	b480      	push	{r7}
 80182be:	b087      	sub	sp, #28
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	60f8      	str	r0, [r7, #12]
 80182c4:	60b9      	str	r1, [r7, #8]
 80182c6:	4613      	mov	r3, r2
 80182c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80182ca:	2301      	movs	r3, #1
 80182cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80182ce:	2300      	movs	r3, #0
 80182d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80182d2:	4b1f      	ldr	r3, [pc, #124]	; (8018350 <FATFS_LinkDriverEx+0x94>)
 80182d4:	7a5b      	ldrb	r3, [r3, #9]
 80182d6:	b2db      	uxtb	r3, r3
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d131      	bne.n	8018340 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80182dc:	4b1c      	ldr	r3, [pc, #112]	; (8018350 <FATFS_LinkDriverEx+0x94>)
 80182de:	7a5b      	ldrb	r3, [r3, #9]
 80182e0:	b2db      	uxtb	r3, r3
 80182e2:	461a      	mov	r2, r3
 80182e4:	4b1a      	ldr	r3, [pc, #104]	; (8018350 <FATFS_LinkDriverEx+0x94>)
 80182e6:	2100      	movs	r1, #0
 80182e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80182ea:	4b19      	ldr	r3, [pc, #100]	; (8018350 <FATFS_LinkDriverEx+0x94>)
 80182ec:	7a5b      	ldrb	r3, [r3, #9]
 80182ee:	b2db      	uxtb	r3, r3
 80182f0:	4a17      	ldr	r2, [pc, #92]	; (8018350 <FATFS_LinkDriverEx+0x94>)
 80182f2:	009b      	lsls	r3, r3, #2
 80182f4:	4413      	add	r3, r2
 80182f6:	68fa      	ldr	r2, [r7, #12]
 80182f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80182fa:	4b15      	ldr	r3, [pc, #84]	; (8018350 <FATFS_LinkDriverEx+0x94>)
 80182fc:	7a5b      	ldrb	r3, [r3, #9]
 80182fe:	b2db      	uxtb	r3, r3
 8018300:	461a      	mov	r2, r3
 8018302:	4b13      	ldr	r3, [pc, #76]	; (8018350 <FATFS_LinkDriverEx+0x94>)
 8018304:	4413      	add	r3, r2
 8018306:	79fa      	ldrb	r2, [r7, #7]
 8018308:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801830a:	4b11      	ldr	r3, [pc, #68]	; (8018350 <FATFS_LinkDriverEx+0x94>)
 801830c:	7a5b      	ldrb	r3, [r3, #9]
 801830e:	b2db      	uxtb	r3, r3
 8018310:	1c5a      	adds	r2, r3, #1
 8018312:	b2d1      	uxtb	r1, r2
 8018314:	4a0e      	ldr	r2, [pc, #56]	; (8018350 <FATFS_LinkDriverEx+0x94>)
 8018316:	7251      	strb	r1, [r2, #9]
 8018318:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801831a:	7dbb      	ldrb	r3, [r7, #22]
 801831c:	3330      	adds	r3, #48	; 0x30
 801831e:	b2da      	uxtb	r2, r3
 8018320:	68bb      	ldr	r3, [r7, #8]
 8018322:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	3301      	adds	r3, #1
 8018328:	223a      	movs	r2, #58	; 0x3a
 801832a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	3302      	adds	r3, #2
 8018330:	222f      	movs	r2, #47	; 0x2f
 8018332:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018334:	68bb      	ldr	r3, [r7, #8]
 8018336:	3303      	adds	r3, #3
 8018338:	2200      	movs	r2, #0
 801833a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801833c:	2300      	movs	r3, #0
 801833e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018340:	7dfb      	ldrb	r3, [r7, #23]
}
 8018342:	4618      	mov	r0, r3
 8018344:	371c      	adds	r7, #28
 8018346:	46bd      	mov	sp, r7
 8018348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834c:	4770      	bx	lr
 801834e:	bf00      	nop
 8018350:	200010bc 	.word	0x200010bc

08018354 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018354:	b580      	push	{r7, lr}
 8018356:	b082      	sub	sp, #8
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
 801835c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801835e:	2200      	movs	r2, #0
 8018360:	6839      	ldr	r1, [r7, #0]
 8018362:	6878      	ldr	r0, [r7, #4]
 8018364:	f7ff ffaa 	bl	80182bc <FATFS_LinkDriverEx>
 8018368:	4603      	mov	r3, r0
}
 801836a:	4618      	mov	r0, r3
 801836c:	3708      	adds	r7, #8
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}
	...

08018374 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8018374:	b480      	push	{r7}
 8018376:	b085      	sub	sp, #20
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
 801837c:	460b      	mov	r3, r1
 801837e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8018380:	2300      	movs	r3, #0
 8018382:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8018384:	2301      	movs	r3, #1
 8018386:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8018388:	4b15      	ldr	r3, [pc, #84]	; (80183e0 <FATFS_UnLinkDriverEx+0x6c>)
 801838a:	7a5b      	ldrb	r3, [r3, #9]
 801838c:	b2db      	uxtb	r3, r3
 801838e:	2b00      	cmp	r3, #0
 8018390:	d01e      	beq.n	80183d0 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	781b      	ldrb	r3, [r3, #0]
 8018396:	3b30      	subs	r3, #48	; 0x30
 8018398:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 801839a:	7bbb      	ldrb	r3, [r7, #14]
 801839c:	4a10      	ldr	r2, [pc, #64]	; (80183e0 <FATFS_UnLinkDriverEx+0x6c>)
 801839e:	009b      	lsls	r3, r3, #2
 80183a0:	4413      	add	r3, r2
 80183a2:	685b      	ldr	r3, [r3, #4]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d013      	beq.n	80183d0 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80183a8:	7bbb      	ldrb	r3, [r7, #14]
 80183aa:	4a0d      	ldr	r2, [pc, #52]	; (80183e0 <FATFS_UnLinkDriverEx+0x6c>)
 80183ac:	009b      	lsls	r3, r3, #2
 80183ae:	4413      	add	r3, r2
 80183b0:	2200      	movs	r2, #0
 80183b2:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80183b4:	7bbb      	ldrb	r3, [r7, #14]
 80183b6:	4a0a      	ldr	r2, [pc, #40]	; (80183e0 <FATFS_UnLinkDriverEx+0x6c>)
 80183b8:	4413      	add	r3, r2
 80183ba:	2200      	movs	r2, #0
 80183bc:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 80183be:	4b08      	ldr	r3, [pc, #32]	; (80183e0 <FATFS_UnLinkDriverEx+0x6c>)
 80183c0:	7a5b      	ldrb	r3, [r3, #9]
 80183c2:	b2db      	uxtb	r3, r3
 80183c4:	3b01      	subs	r3, #1
 80183c6:	b2da      	uxtb	r2, r3
 80183c8:	4b05      	ldr	r3, [pc, #20]	; (80183e0 <FATFS_UnLinkDriverEx+0x6c>)
 80183ca:	725a      	strb	r2, [r3, #9]
      ret = 0;
 80183cc:	2300      	movs	r3, #0
 80183ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80183d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80183d2:	4618      	mov	r0, r3
 80183d4:	3714      	adds	r7, #20
 80183d6:	46bd      	mov	sp, r7
 80183d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183dc:	4770      	bx	lr
 80183de:	bf00      	nop
 80183e0:	200010bc 	.word	0x200010bc

080183e4 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b082      	sub	sp, #8
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 80183ec:	2100      	movs	r1, #0
 80183ee:	6878      	ldr	r0, [r7, #4]
 80183f0:	f7ff ffc0 	bl	8018374 <FATFS_UnLinkDriverEx>
 80183f4:	4603      	mov	r3, r0
}
 80183f6:	4618      	mov	r0, r3
 80183f8:	3708      	adds	r7, #8
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bd80      	pop	{r7, pc}
	...

08018400 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8018400:	b480      	push	{r7}
 8018402:	b085      	sub	sp, #20
 8018404:	af00      	add	r7, sp, #0
 8018406:	4603      	mov	r3, r0
 8018408:	6039      	str	r1, [r7, #0]
 801840a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801840c:	88fb      	ldrh	r3, [r7, #6]
 801840e:	2b7f      	cmp	r3, #127	; 0x7f
 8018410:	d802      	bhi.n	8018418 <ff_convert+0x18>
		c = chr;
 8018412:	88fb      	ldrh	r3, [r7, #6]
 8018414:	81fb      	strh	r3, [r7, #14]
 8018416:	e025      	b.n	8018464 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018418:	683b      	ldr	r3, [r7, #0]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d00b      	beq.n	8018436 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801841e:	88fb      	ldrh	r3, [r7, #6]
 8018420:	2bff      	cmp	r3, #255	; 0xff
 8018422:	d805      	bhi.n	8018430 <ff_convert+0x30>
 8018424:	88fb      	ldrh	r3, [r7, #6]
 8018426:	3b80      	subs	r3, #128	; 0x80
 8018428:	4a12      	ldr	r2, [pc, #72]	; (8018474 <ff_convert+0x74>)
 801842a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801842e:	e000      	b.n	8018432 <ff_convert+0x32>
 8018430:	2300      	movs	r3, #0
 8018432:	81fb      	strh	r3, [r7, #14]
 8018434:	e016      	b.n	8018464 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8018436:	2300      	movs	r3, #0
 8018438:	81fb      	strh	r3, [r7, #14]
 801843a:	e009      	b.n	8018450 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801843c:	89fb      	ldrh	r3, [r7, #14]
 801843e:	4a0d      	ldr	r2, [pc, #52]	; (8018474 <ff_convert+0x74>)
 8018440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018444:	88fa      	ldrh	r2, [r7, #6]
 8018446:	429a      	cmp	r2, r3
 8018448:	d006      	beq.n	8018458 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801844a:	89fb      	ldrh	r3, [r7, #14]
 801844c:	3301      	adds	r3, #1
 801844e:	81fb      	strh	r3, [r7, #14]
 8018450:	89fb      	ldrh	r3, [r7, #14]
 8018452:	2b7f      	cmp	r3, #127	; 0x7f
 8018454:	d9f2      	bls.n	801843c <ff_convert+0x3c>
 8018456:	e000      	b.n	801845a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8018458:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801845a:	89fb      	ldrh	r3, [r7, #14]
 801845c:	3380      	adds	r3, #128	; 0x80
 801845e:	b29b      	uxth	r3, r3
 8018460:	b2db      	uxtb	r3, r3
 8018462:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8018464:	89fb      	ldrh	r3, [r7, #14]
}
 8018466:	4618      	mov	r0, r3
 8018468:	3714      	adds	r7, #20
 801846a:	46bd      	mov	sp, r7
 801846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018470:	4770      	bx	lr
 8018472:	bf00      	nop
 8018474:	08023c2c 	.word	0x08023c2c

08018478 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8018478:	b480      	push	{r7}
 801847a:	b087      	sub	sp, #28
 801847c:	af00      	add	r7, sp, #0
 801847e:	4603      	mov	r3, r0
 8018480:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8018482:	88fb      	ldrh	r3, [r7, #6]
 8018484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018488:	d201      	bcs.n	801848e <ff_wtoupper+0x16>
 801848a:	4b3e      	ldr	r3, [pc, #248]	; (8018584 <ff_wtoupper+0x10c>)
 801848c:	e000      	b.n	8018490 <ff_wtoupper+0x18>
 801848e:	4b3e      	ldr	r3, [pc, #248]	; (8018588 <ff_wtoupper+0x110>)
 8018490:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8018492:	697b      	ldr	r3, [r7, #20]
 8018494:	1c9a      	adds	r2, r3, #2
 8018496:	617a      	str	r2, [r7, #20]
 8018498:	881b      	ldrh	r3, [r3, #0]
 801849a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801849c:	8a7b      	ldrh	r3, [r7, #18]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d068      	beq.n	8018574 <ff_wtoupper+0xfc>
 80184a2:	88fa      	ldrh	r2, [r7, #6]
 80184a4:	8a7b      	ldrh	r3, [r7, #18]
 80184a6:	429a      	cmp	r2, r3
 80184a8:	d364      	bcc.n	8018574 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80184aa:	697b      	ldr	r3, [r7, #20]
 80184ac:	1c9a      	adds	r2, r3, #2
 80184ae:	617a      	str	r2, [r7, #20]
 80184b0:	881b      	ldrh	r3, [r3, #0]
 80184b2:	823b      	strh	r3, [r7, #16]
 80184b4:	8a3b      	ldrh	r3, [r7, #16]
 80184b6:	0a1b      	lsrs	r3, r3, #8
 80184b8:	81fb      	strh	r3, [r7, #14]
 80184ba:	8a3b      	ldrh	r3, [r7, #16]
 80184bc:	b2db      	uxtb	r3, r3
 80184be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80184c0:	88fa      	ldrh	r2, [r7, #6]
 80184c2:	8a79      	ldrh	r1, [r7, #18]
 80184c4:	8a3b      	ldrh	r3, [r7, #16]
 80184c6:	440b      	add	r3, r1
 80184c8:	429a      	cmp	r2, r3
 80184ca:	da49      	bge.n	8018560 <ff_wtoupper+0xe8>
			switch (cmd) {
 80184cc:	89fb      	ldrh	r3, [r7, #14]
 80184ce:	2b08      	cmp	r3, #8
 80184d0:	d84f      	bhi.n	8018572 <ff_wtoupper+0xfa>
 80184d2:	a201      	add	r2, pc, #4	; (adr r2, 80184d8 <ff_wtoupper+0x60>)
 80184d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184d8:	080184fd 	.word	0x080184fd
 80184dc:	0801850f 	.word	0x0801850f
 80184e0:	08018525 	.word	0x08018525
 80184e4:	0801852d 	.word	0x0801852d
 80184e8:	08018535 	.word	0x08018535
 80184ec:	0801853d 	.word	0x0801853d
 80184f0:	08018545 	.word	0x08018545
 80184f4:	0801854d 	.word	0x0801854d
 80184f8:	08018555 	.word	0x08018555
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80184fc:	88fa      	ldrh	r2, [r7, #6]
 80184fe:	8a7b      	ldrh	r3, [r7, #18]
 8018500:	1ad3      	subs	r3, r2, r3
 8018502:	005b      	lsls	r3, r3, #1
 8018504:	697a      	ldr	r2, [r7, #20]
 8018506:	4413      	add	r3, r2
 8018508:	881b      	ldrh	r3, [r3, #0]
 801850a:	80fb      	strh	r3, [r7, #6]
 801850c:	e027      	b.n	801855e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801850e:	88fa      	ldrh	r2, [r7, #6]
 8018510:	8a7b      	ldrh	r3, [r7, #18]
 8018512:	1ad3      	subs	r3, r2, r3
 8018514:	b29b      	uxth	r3, r3
 8018516:	f003 0301 	and.w	r3, r3, #1
 801851a:	b29b      	uxth	r3, r3
 801851c:	88fa      	ldrh	r2, [r7, #6]
 801851e:	1ad3      	subs	r3, r2, r3
 8018520:	80fb      	strh	r3, [r7, #6]
 8018522:	e01c      	b.n	801855e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8018524:	88fb      	ldrh	r3, [r7, #6]
 8018526:	3b10      	subs	r3, #16
 8018528:	80fb      	strh	r3, [r7, #6]
 801852a:	e018      	b.n	801855e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801852c:	88fb      	ldrh	r3, [r7, #6]
 801852e:	3b20      	subs	r3, #32
 8018530:	80fb      	strh	r3, [r7, #6]
 8018532:	e014      	b.n	801855e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8018534:	88fb      	ldrh	r3, [r7, #6]
 8018536:	3b30      	subs	r3, #48	; 0x30
 8018538:	80fb      	strh	r3, [r7, #6]
 801853a:	e010      	b.n	801855e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801853c:	88fb      	ldrh	r3, [r7, #6]
 801853e:	3b1a      	subs	r3, #26
 8018540:	80fb      	strh	r3, [r7, #6]
 8018542:	e00c      	b.n	801855e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8018544:	88fb      	ldrh	r3, [r7, #6]
 8018546:	3308      	adds	r3, #8
 8018548:	80fb      	strh	r3, [r7, #6]
 801854a:	e008      	b.n	801855e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801854c:	88fb      	ldrh	r3, [r7, #6]
 801854e:	3b50      	subs	r3, #80	; 0x50
 8018550:	80fb      	strh	r3, [r7, #6]
 8018552:	e004      	b.n	801855e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8018554:	88fb      	ldrh	r3, [r7, #6]
 8018556:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801855a:	80fb      	strh	r3, [r7, #6]
 801855c:	bf00      	nop
			}
			break;
 801855e:	e008      	b.n	8018572 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8018560:	89fb      	ldrh	r3, [r7, #14]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d195      	bne.n	8018492 <ff_wtoupper+0x1a>
 8018566:	8a3b      	ldrh	r3, [r7, #16]
 8018568:	005b      	lsls	r3, r3, #1
 801856a:	697a      	ldr	r2, [r7, #20]
 801856c:	4413      	add	r3, r2
 801856e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8018570:	e78f      	b.n	8018492 <ff_wtoupper+0x1a>
			break;
 8018572:	bf00      	nop
	}

	return chr;
 8018574:	88fb      	ldrh	r3, [r7, #6]
}
 8018576:	4618      	mov	r0, r3
 8018578:	371c      	adds	r7, #28
 801857a:	46bd      	mov	sp, r7
 801857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018580:	4770      	bx	lr
 8018582:	bf00      	nop
 8018584:	08023d2c 	.word	0x08023d2c
 8018588:	08023f20 	.word	0x08023f20

0801858c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801858c:	b480      	push	{r7}
 801858e:	b085      	sub	sp, #20
 8018590:	af00      	add	r7, sp, #0
 8018592:	4603      	mov	r3, r0
 8018594:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8018596:	2300      	movs	r3, #0
 8018598:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801859a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801859e:	2b84      	cmp	r3, #132	; 0x84
 80185a0:	d005      	beq.n	80185ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80185a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	4413      	add	r3, r2
 80185aa:	3303      	adds	r3, #3
 80185ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80185ae:	68fb      	ldr	r3, [r7, #12]
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	3714      	adds	r7, #20
 80185b4:	46bd      	mov	sp, r7
 80185b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ba:	4770      	bx	lr

080185bc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80185bc:	b480      	push	{r7}
 80185be:	b083      	sub	sp, #12
 80185c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80185c2:	f3ef 8305 	mrs	r3, IPSR
 80185c6:	607b      	str	r3, [r7, #4]
  return(result);
 80185c8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	bf14      	ite	ne
 80185ce:	2301      	movne	r3, #1
 80185d0:	2300      	moveq	r3, #0
 80185d2:	b2db      	uxtb	r3, r3
}
 80185d4:	4618      	mov	r0, r3
 80185d6:	370c      	adds	r7, #12
 80185d8:	46bd      	mov	sp, r7
 80185da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185de:	4770      	bx	lr

080185e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80185e4:	f001 fd6c 	bl	801a0c0 <vTaskStartScheduler>
  
  return osOK;
 80185e8:	2300      	movs	r3, #0
}
 80185ea:	4618      	mov	r0, r3
 80185ec:	bd80      	pop	{r7, pc}

080185ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80185ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185f0:	b087      	sub	sp, #28
 80185f2:	af02      	add	r7, sp, #8
 80185f4:	6078      	str	r0, [r7, #4]
 80185f6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	685c      	ldr	r4, [r3, #4]
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018604:	b29e      	uxth	r6, r3
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801860c:	4618      	mov	r0, r3
 801860e:	f7ff ffbd 	bl	801858c <makeFreeRtosPriority>
 8018612:	4602      	mov	r2, r0
 8018614:	f107 030c 	add.w	r3, r7, #12
 8018618:	9301      	str	r3, [sp, #4]
 801861a:	9200      	str	r2, [sp, #0]
 801861c:	683b      	ldr	r3, [r7, #0]
 801861e:	4632      	mov	r2, r6
 8018620:	4629      	mov	r1, r5
 8018622:	4620      	mov	r0, r4
 8018624:	f001 fa76 	bl	8019b14 <xTaskCreate>
 8018628:	4603      	mov	r3, r0
 801862a:	2b01      	cmp	r3, #1
 801862c:	d001      	beq.n	8018632 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 801862e:	2300      	movs	r3, #0
 8018630:	e000      	b.n	8018634 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8018632:	68fb      	ldr	r3, [r7, #12]
}
 8018634:	4618      	mov	r0, r3
 8018636:	3714      	adds	r7, #20
 8018638:	46bd      	mov	sp, r7
 801863a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801863c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801863c:	b580      	push	{r7, lr}
 801863e:	b084      	sub	sp, #16
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
 8018644:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8018646:	683b      	ldr	r3, [r7, #0]
 8018648:	2b01      	cmp	r3, #1
 801864a:	d110      	bne.n	801866e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 801864c:	2203      	movs	r2, #3
 801864e:	2100      	movs	r1, #0
 8018650:	2001      	movs	r0, #1
 8018652:	f000 fbb7 	bl	8018dc4 <xQueueGenericCreate>
 8018656:	60f8      	str	r0, [r7, #12]
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d005      	beq.n	801866a <osSemaphoreCreate+0x2e>
 801865e:	2300      	movs	r3, #0
 8018660:	2200      	movs	r2, #0
 8018662:	2100      	movs	r1, #0
 8018664:	68f8      	ldr	r0, [r7, #12]
 8018666:	f000 fc3f 	bl	8018ee8 <xQueueGenericSend>
    return sema;
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	e006      	b.n	801867c <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	683a      	ldr	r2, [r7, #0]
 8018672:	4611      	mov	r1, r2
 8018674:	4618      	mov	r0, r3
 8018676:	f000 fc04 	bl	8018e82 <xQueueCreateCountingSemaphore>
 801867a:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 801867c:	4618      	mov	r0, r3
 801867e:	3710      	adds	r7, #16
 8018680:	46bd      	mov	sp, r7
 8018682:	bd80      	pop	{r7, pc}

08018684 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8018684:	b580      	push	{r7, lr}
 8018686:	b084      	sub	sp, #16
 8018688:	af00      	add	r7, sp, #0
 801868a:	6078      	str	r0, [r7, #4]
 801868c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801868e:	2300      	movs	r3, #0
 8018690:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d101      	bne.n	801869c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8018698:	2380      	movs	r3, #128	; 0x80
 801869a:	e03a      	b.n	8018712 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801869c:	2300      	movs	r3, #0
 801869e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80186a0:	683b      	ldr	r3, [r7, #0]
 80186a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186a6:	d103      	bne.n	80186b0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80186a8:	f04f 33ff 	mov.w	r3, #4294967295
 80186ac:	60fb      	str	r3, [r7, #12]
 80186ae:	e009      	b.n	80186c4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d006      	beq.n	80186c4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80186b6:	683b      	ldr	r3, [r7, #0]
 80186b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d101      	bne.n	80186c4 <osSemaphoreWait+0x40>
      ticks = 1;
 80186c0:	2301      	movs	r3, #1
 80186c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80186c4:	f7ff ff7a 	bl	80185bc <inHandlerMode>
 80186c8:	4603      	mov	r3, r0
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d017      	beq.n	80186fe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80186ce:	f107 0308 	add.w	r3, r7, #8
 80186d2:	461a      	mov	r2, r3
 80186d4:	2100      	movs	r1, #0
 80186d6:	6878      	ldr	r0, [r7, #4]
 80186d8:	f001 f816 	bl	8019708 <xQueueReceiveFromISR>
 80186dc:	4603      	mov	r3, r0
 80186de:	2b01      	cmp	r3, #1
 80186e0:	d001      	beq.n	80186e6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80186e2:	23ff      	movs	r3, #255	; 0xff
 80186e4:	e015      	b.n	8018712 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80186e6:	68bb      	ldr	r3, [r7, #8]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d011      	beq.n	8018710 <osSemaphoreWait+0x8c>
 80186ec:	4b0b      	ldr	r3, [pc, #44]	; (801871c <osSemaphoreWait+0x98>)
 80186ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186f2:	601a      	str	r2, [r3, #0]
 80186f4:	f3bf 8f4f 	dsb	sy
 80186f8:	f3bf 8f6f 	isb	sy
 80186fc:	e008      	b.n	8018710 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80186fe:	68f9      	ldr	r1, [r7, #12]
 8018700:	6878      	ldr	r0, [r7, #4]
 8018702:	f000 fef5 	bl	80194f0 <xQueueSemaphoreTake>
 8018706:	4603      	mov	r3, r0
 8018708:	2b01      	cmp	r3, #1
 801870a:	d001      	beq.n	8018710 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801870c:	23ff      	movs	r3, #255	; 0xff
 801870e:	e000      	b.n	8018712 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8018710:	2300      	movs	r3, #0
}
 8018712:	4618      	mov	r0, r3
 8018714:	3710      	adds	r7, #16
 8018716:	46bd      	mov	sp, r7
 8018718:	bd80      	pop	{r7, pc}
 801871a:	bf00      	nop
 801871c:	e000ed04 	.word	0xe000ed04

08018720 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b084      	sub	sp, #16
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8018728:	2300      	movs	r3, #0
 801872a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801872c:	2300      	movs	r3, #0
 801872e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8018730:	f7ff ff44 	bl	80185bc <inHandlerMode>
 8018734:	4603      	mov	r3, r0
 8018736:	2b00      	cmp	r3, #0
 8018738:	d016      	beq.n	8018768 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801873a:	f107 0308 	add.w	r3, r7, #8
 801873e:	4619      	mov	r1, r3
 8018740:	6878      	ldr	r0, [r7, #4]
 8018742:	f000 fd67 	bl	8019214 <xQueueGiveFromISR>
 8018746:	4603      	mov	r3, r0
 8018748:	2b01      	cmp	r3, #1
 801874a:	d001      	beq.n	8018750 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801874c:	23ff      	movs	r3, #255	; 0xff
 801874e:	e017      	b.n	8018780 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018750:	68bb      	ldr	r3, [r7, #8]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d013      	beq.n	801877e <osSemaphoreRelease+0x5e>
 8018756:	4b0c      	ldr	r3, [pc, #48]	; (8018788 <osSemaphoreRelease+0x68>)
 8018758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801875c:	601a      	str	r2, [r3, #0]
 801875e:	f3bf 8f4f 	dsb	sy
 8018762:	f3bf 8f6f 	isb	sy
 8018766:	e00a      	b.n	801877e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8018768:	2300      	movs	r3, #0
 801876a:	2200      	movs	r2, #0
 801876c:	2100      	movs	r1, #0
 801876e:	6878      	ldr	r0, [r7, #4]
 8018770:	f000 fbba 	bl	8018ee8 <xQueueGenericSend>
 8018774:	4603      	mov	r3, r0
 8018776:	2b01      	cmp	r3, #1
 8018778:	d001      	beq.n	801877e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801877a:	23ff      	movs	r3, #255	; 0xff
 801877c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801877e:	68fb      	ldr	r3, [r7, #12]
}
 8018780:	4618      	mov	r0, r3
 8018782:	3710      	adds	r7, #16
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}
 8018788:	e000ed04 	.word	0xe000ed04

0801878c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b086      	sub	sp, #24
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	685b      	ldr	r3, [r3, #4]
 8018798:	3303      	adds	r3, #3
 801879a:	f023 0303 	bic.w	r3, r3, #3
 801879e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80187a0:	2014      	movs	r0, #20
 80187a2:	f003 f861 	bl	801b868 <pvPortMalloc>
 80187a6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80187a8:	697b      	ldr	r3, [r7, #20]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d046      	beq.n	801883c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	681a      	ldr	r2, [r3, #0]
 80187b2:	697b      	ldr	r3, [r7, #20]
 80187b4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80187b6:	68fa      	ldr	r2, [r7, #12]
 80187b8:	697b      	ldr	r3, [r7, #20]
 80187ba:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80187bc:	697b      	ldr	r3, [r7, #20]
 80187be:	2200      	movs	r2, #0
 80187c0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	4618      	mov	r0, r3
 80187c8:	f003 f84e 	bl	801b868 <pvPortMalloc>
 80187cc:	4602      	mov	r2, r0
 80187ce:	697b      	ldr	r3, [r7, #20]
 80187d0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80187d2:	697b      	ldr	r3, [r7, #20]
 80187d4:	685b      	ldr	r3, [r3, #4]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d02b      	beq.n	8018832 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	68fa      	ldr	r2, [r7, #12]
 80187e0:	fb02 f303 	mul.w	r3, r2, r3
 80187e4:	4618      	mov	r0, r3
 80187e6:	f003 f83f 	bl	801b868 <pvPortMalloc>
 80187ea:	4602      	mov	r2, r0
 80187ec:	697b      	ldr	r3, [r7, #20]
 80187ee:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80187f0:	697b      	ldr	r3, [r7, #20]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d011      	beq.n	801881c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80187f8:	2300      	movs	r3, #0
 80187fa:	613b      	str	r3, [r7, #16]
 80187fc:	e008      	b.n	8018810 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80187fe:	697b      	ldr	r3, [r7, #20]
 8018800:	685a      	ldr	r2, [r3, #4]
 8018802:	693b      	ldr	r3, [r7, #16]
 8018804:	4413      	add	r3, r2
 8018806:	2200      	movs	r2, #0
 8018808:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801880a:	693b      	ldr	r3, [r7, #16]
 801880c:	3301      	adds	r3, #1
 801880e:	613b      	str	r3, [r7, #16]
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	693a      	ldr	r2, [r7, #16]
 8018816:	429a      	cmp	r2, r3
 8018818:	d3f1      	bcc.n	80187fe <osPoolCreate+0x72>
 801881a:	e00f      	b.n	801883c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 801881c:	697b      	ldr	r3, [r7, #20]
 801881e:	685b      	ldr	r3, [r3, #4]
 8018820:	4618      	mov	r0, r3
 8018822:	f003 f8e5 	bl	801b9f0 <vPortFree>
        vPortFree(thePool);
 8018826:	6978      	ldr	r0, [r7, #20]
 8018828:	f003 f8e2 	bl	801b9f0 <vPortFree>
        thePool = NULL;
 801882c:	2300      	movs	r3, #0
 801882e:	617b      	str	r3, [r7, #20]
 8018830:	e004      	b.n	801883c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8018832:	6978      	ldr	r0, [r7, #20]
 8018834:	f003 f8dc 	bl	801b9f0 <vPortFree>
      thePool = NULL;
 8018838:	2300      	movs	r3, #0
 801883a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 801883c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 801883e:	4618      	mov	r0, r3
 8018840:	3718      	adds	r7, #24
 8018842:	46bd      	mov	sp, r7
 8018844:	bd80      	pop	{r7, pc}

08018846 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8018846:	b580      	push	{r7, lr}
 8018848:	b08a      	sub	sp, #40	; 0x28
 801884a:	af00      	add	r7, sp, #0
 801884c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 801884e:	2300      	movs	r3, #0
 8018850:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8018852:	2300      	movs	r3, #0
 8018854:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8018856:	f7ff feb1 	bl	80185bc <inHandlerMode>
 801885a:	4603      	mov	r3, r0
 801885c:	2b00      	cmp	r3, #0
 801885e:	d00e      	beq.n	801887e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018860:	f3ef 8211 	mrs	r2, BASEPRI
 8018864:	f04f 0320 	mov.w	r3, #32
 8018868:	f383 8811 	msr	BASEPRI, r3
 801886c:	f3bf 8f6f 	isb	sy
 8018870:	f3bf 8f4f 	dsb	sy
 8018874:	617a      	str	r2, [r7, #20]
 8018876:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8018878:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 801887a:	627b      	str	r3, [r7, #36]	; 0x24
 801887c:	e001      	b.n	8018882 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 801887e:	f002 fed1 	bl	801b624 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8018882:	2300      	movs	r3, #0
 8018884:	61fb      	str	r3, [r7, #28]
 8018886:	e029      	b.n	80188dc <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	691a      	ldr	r2, [r3, #16]
 801888c:	69fb      	ldr	r3, [r7, #28]
 801888e:	4413      	add	r3, r2
 8018890:	687a      	ldr	r2, [r7, #4]
 8018892:	6892      	ldr	r2, [r2, #8]
 8018894:	fbb3 f1f2 	udiv	r1, r3, r2
 8018898:	fb02 f201 	mul.w	r2, r2, r1
 801889c:	1a9b      	subs	r3, r3, r2
 801889e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	685a      	ldr	r2, [r3, #4]
 80188a4:	69bb      	ldr	r3, [r7, #24]
 80188a6:	4413      	add	r3, r2
 80188a8:	781b      	ldrb	r3, [r3, #0]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d113      	bne.n	80188d6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	685a      	ldr	r2, [r3, #4]
 80188b2:	69bb      	ldr	r3, [r7, #24]
 80188b4:	4413      	add	r3, r2
 80188b6:	2201      	movs	r2, #1
 80188b8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	4619      	mov	r1, r3
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	69ba      	ldr	r2, [r7, #24]
 80188c6:	fb02 f303 	mul.w	r3, r2, r3
 80188ca:	440b      	add	r3, r1
 80188cc:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	69ba      	ldr	r2, [r7, #24]
 80188d2:	611a      	str	r2, [r3, #16]
      break;
 80188d4:	e007      	b.n	80188e6 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80188d6:	69fb      	ldr	r3, [r7, #28]
 80188d8:	3301      	adds	r3, #1
 80188da:	61fb      	str	r3, [r7, #28]
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	689b      	ldr	r3, [r3, #8]
 80188e0:	69fa      	ldr	r2, [r7, #28]
 80188e2:	429a      	cmp	r2, r3
 80188e4:	d3d0      	bcc.n	8018888 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80188e6:	f7ff fe69 	bl	80185bc <inHandlerMode>
 80188ea:	4603      	mov	r3, r0
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d005      	beq.n	80188fc <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80188f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80188fa:	e001      	b.n	8018900 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80188fc:	f002 fec2 	bl	801b684 <vPortExitCritical>
  }
  
  return p;
 8018900:	6a3b      	ldr	r3, [r7, #32]
}
 8018902:	4618      	mov	r0, r3
 8018904:	3728      	adds	r7, #40	; 0x28
 8018906:	46bd      	mov	sp, r7
 8018908:	bd80      	pop	{r7, pc}

0801890a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801890a:	b480      	push	{r7}
 801890c:	b085      	sub	sp, #20
 801890e:	af00      	add	r7, sp, #0
 8018910:	6078      	str	r0, [r7, #4]
 8018912:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d101      	bne.n	801891e <osPoolFree+0x14>
    return osErrorParameter;
 801891a:	2380      	movs	r3, #128	; 0x80
 801891c:	e030      	b.n	8018980 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d101      	bne.n	8018928 <osPoolFree+0x1e>
    return osErrorParameter;
 8018924:	2380      	movs	r3, #128	; 0x80
 8018926:	e02b      	b.n	8018980 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	683a      	ldr	r2, [r7, #0]
 801892e:	429a      	cmp	r2, r3
 8018930:	d201      	bcs.n	8018936 <osPoolFree+0x2c>
    return osErrorParameter;
 8018932:	2380      	movs	r3, #128	; 0x80
 8018934:	e024      	b.n	8018980 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8018936:	683b      	ldr	r3, [r7, #0]
 8018938:	687a      	ldr	r2, [r7, #4]
 801893a:	6812      	ldr	r2, [r2, #0]
 801893c:	1a9b      	subs	r3, r3, r2
 801893e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	68da      	ldr	r2, [r3, #12]
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	fbb3 f1f2 	udiv	r1, r3, r2
 801894a:	fb02 f201 	mul.w	r2, r2, r1
 801894e:	1a9b      	subs	r3, r3, r2
 8018950:	2b00      	cmp	r3, #0
 8018952:	d001      	beq.n	8018958 <osPoolFree+0x4e>
    return osErrorParameter;
 8018954:	2380      	movs	r3, #128	; 0x80
 8018956:	e013      	b.n	8018980 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	68db      	ldr	r3, [r3, #12]
 801895c:	68fa      	ldr	r2, [r7, #12]
 801895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018962:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	689b      	ldr	r3, [r3, #8]
 8018968:	68fa      	ldr	r2, [r7, #12]
 801896a:	429a      	cmp	r2, r3
 801896c:	d301      	bcc.n	8018972 <osPoolFree+0x68>
    return osErrorParameter;
 801896e:	2380      	movs	r3, #128	; 0x80
 8018970:	e006      	b.n	8018980 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	685a      	ldr	r2, [r3, #4]
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	4413      	add	r3, r2
 801897a:	2200      	movs	r2, #0
 801897c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 801897e:	2300      	movs	r3, #0
}
 8018980:	4618      	mov	r0, r3
 8018982:	3714      	adds	r7, #20
 8018984:	46bd      	mov	sp, r7
 8018986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801898a:	4770      	bx	lr

0801898c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b082      	sub	sp, #8
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
 8018994:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	6818      	ldr	r0, [r3, #0]
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	685b      	ldr	r3, [r3, #4]
 801899e:	2200      	movs	r2, #0
 80189a0:	4619      	mov	r1, r3
 80189a2:	f000 fa0f 	bl	8018dc4 <xQueueGenericCreate>
 80189a6:	4603      	mov	r3, r0
#endif
}
 80189a8:	4618      	mov	r0, r3
 80189aa:	3708      	adds	r7, #8
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}

080189b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b086      	sub	sp, #24
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	60f8      	str	r0, [r7, #12]
 80189b8:	60b9      	str	r1, [r7, #8]
 80189ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80189bc:	2300      	movs	r3, #0
 80189be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80189c4:	697b      	ldr	r3, [r7, #20]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d101      	bne.n	80189ce <osMessagePut+0x1e>
    ticks = 1;
 80189ca:	2301      	movs	r3, #1
 80189cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80189ce:	f7ff fdf5 	bl	80185bc <inHandlerMode>
 80189d2:	4603      	mov	r3, r0
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d018      	beq.n	8018a0a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80189d8:	f107 0210 	add.w	r2, r7, #16
 80189dc:	f107 0108 	add.w	r1, r7, #8
 80189e0:	2300      	movs	r3, #0
 80189e2:	68f8      	ldr	r0, [r7, #12]
 80189e4:	f000 fb7e 	bl	80190e4 <xQueueGenericSendFromISR>
 80189e8:	4603      	mov	r3, r0
 80189ea:	2b01      	cmp	r3, #1
 80189ec:	d001      	beq.n	80189f2 <osMessagePut+0x42>
      return osErrorOS;
 80189ee:	23ff      	movs	r3, #255	; 0xff
 80189f0:	e018      	b.n	8018a24 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80189f2:	693b      	ldr	r3, [r7, #16]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d014      	beq.n	8018a22 <osMessagePut+0x72>
 80189f8:	4b0c      	ldr	r3, [pc, #48]	; (8018a2c <osMessagePut+0x7c>)
 80189fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189fe:	601a      	str	r2, [r3, #0]
 8018a00:	f3bf 8f4f 	dsb	sy
 8018a04:	f3bf 8f6f 	isb	sy
 8018a08:	e00b      	b.n	8018a22 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8018a0a:	f107 0108 	add.w	r1, r7, #8
 8018a0e:	2300      	movs	r3, #0
 8018a10:	697a      	ldr	r2, [r7, #20]
 8018a12:	68f8      	ldr	r0, [r7, #12]
 8018a14:	f000 fa68 	bl	8018ee8 <xQueueGenericSend>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	2b01      	cmp	r3, #1
 8018a1c:	d001      	beq.n	8018a22 <osMessagePut+0x72>
      return osErrorOS;
 8018a1e:	23ff      	movs	r3, #255	; 0xff
 8018a20:	e000      	b.n	8018a24 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8018a22:	2300      	movs	r3, #0
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3718      	adds	r7, #24
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}
 8018a2c:	e000ed04 	.word	0xe000ed04

08018a30 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8018a30:	b590      	push	{r4, r7, lr}
 8018a32:	b08b      	sub	sp, #44	; 0x2c
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	60f8      	str	r0, [r7, #12]
 8018a38:	60b9      	str	r1, [r7, #8]
 8018a3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8018a3c:	68bb      	ldr	r3, [r7, #8]
 8018a3e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8018a40:	2300      	movs	r3, #0
 8018a42:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8018a44:	68bb      	ldr	r3, [r7, #8]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d10a      	bne.n	8018a60 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8018a4a:	2380      	movs	r3, #128	; 0x80
 8018a4c:	617b      	str	r3, [r7, #20]
    return event;
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	461c      	mov	r4, r3
 8018a52:	f107 0314 	add.w	r3, r7, #20
 8018a56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018a5e:	e054      	b.n	8018b0a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8018a60:	2300      	movs	r3, #0
 8018a62:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8018a64:	2300      	movs	r3, #0
 8018a66:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a6e:	d103      	bne.n	8018a78 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8018a70:	f04f 33ff 	mov.w	r3, #4294967295
 8018a74:	627b      	str	r3, [r7, #36]	; 0x24
 8018a76:	e009      	b.n	8018a8c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d006      	beq.n	8018a8c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8018a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d101      	bne.n	8018a8c <osMessageGet+0x5c>
      ticks = 1;
 8018a88:	2301      	movs	r3, #1
 8018a8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8018a8c:	f7ff fd96 	bl	80185bc <inHandlerMode>
 8018a90:	4603      	mov	r3, r0
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d01c      	beq.n	8018ad0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8018a96:	f107 0220 	add.w	r2, r7, #32
 8018a9a:	f107 0314 	add.w	r3, r7, #20
 8018a9e:	3304      	adds	r3, #4
 8018aa0:	4619      	mov	r1, r3
 8018aa2:	68b8      	ldr	r0, [r7, #8]
 8018aa4:	f000 fe30 	bl	8019708 <xQueueReceiveFromISR>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	2b01      	cmp	r3, #1
 8018aac:	d102      	bne.n	8018ab4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8018aae:	2310      	movs	r3, #16
 8018ab0:	617b      	str	r3, [r7, #20]
 8018ab2:	e001      	b.n	8018ab8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018ab8:	6a3b      	ldr	r3, [r7, #32]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d01d      	beq.n	8018afa <osMessageGet+0xca>
 8018abe:	4b15      	ldr	r3, [pc, #84]	; (8018b14 <osMessageGet+0xe4>)
 8018ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ac4:	601a      	str	r2, [r3, #0]
 8018ac6:	f3bf 8f4f 	dsb	sy
 8018aca:	f3bf 8f6f 	isb	sy
 8018ace:	e014      	b.n	8018afa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8018ad0:	f107 0314 	add.w	r3, r7, #20
 8018ad4:	3304      	adds	r3, #4
 8018ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ad8:	4619      	mov	r1, r3
 8018ada:	68b8      	ldr	r0, [r7, #8]
 8018adc:	f000 fc28 	bl	8019330 <xQueueReceive>
 8018ae0:	4603      	mov	r3, r0
 8018ae2:	2b01      	cmp	r3, #1
 8018ae4:	d102      	bne.n	8018aec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8018ae6:	2310      	movs	r3, #16
 8018ae8:	617b      	str	r3, [r7, #20]
 8018aea:	e006      	b.n	8018afa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8018aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d101      	bne.n	8018af6 <osMessageGet+0xc6>
 8018af2:	2300      	movs	r3, #0
 8018af4:	e000      	b.n	8018af8 <osMessageGet+0xc8>
 8018af6:	2340      	movs	r3, #64	; 0x40
 8018af8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	461c      	mov	r4, r3
 8018afe:	f107 0314 	add.w	r3, r7, #20
 8018b02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8018b0a:	68f8      	ldr	r0, [r7, #12]
 8018b0c:	372c      	adds	r7, #44	; 0x2c
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd90      	pop	{r4, r7, pc}
 8018b12:	bf00      	nop
 8018b14:	e000ed04 	.word	0xe000ed04

08018b18 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8018b1c:	f001 ff08 	bl	801a930 <xTaskGetSchedulerState>
 8018b20:	4603      	mov	r3, r0
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	d001      	beq.n	8018b2a <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8018b26:	f002 fe0f 	bl	801b748 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8018b2a:	bf00      	nop
 8018b2c:	bd80      	pop	{r7, pc}

08018b2e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8018b2e:	b580      	push	{r7, lr}
 8018b30:	b082      	sub	sp, #8
 8018b32:	af00      	add	r7, sp, #0
 8018b34:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8018b36:	6878      	ldr	r0, [r7, #4]
 8018b38:	f001 f92e 	bl	8019d98 <vTaskSuspend>
  
  return osOK;
 8018b3c:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8018b3e:	4618      	mov	r0, r3
 8018b40:	3708      	adds	r7, #8
 8018b42:	46bd      	mov	sp, r7
 8018b44:	bd80      	pop	{r7, pc}
	...

08018b48 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b082      	sub	sp, #8
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8018b50:	f7ff fd34 	bl	80185bc <inHandlerMode>
 8018b54:	4603      	mov	r3, r0
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d00e      	beq.n	8018b78 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8018b5a:	6878      	ldr	r0, [r7, #4]
 8018b5c:	f001 fa3e 	bl	8019fdc <xTaskResumeFromISR>
 8018b60:	4603      	mov	r3, r0
 8018b62:	2b01      	cmp	r3, #1
 8018b64:	d10b      	bne.n	8018b7e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8018b66:	4b08      	ldr	r3, [pc, #32]	; (8018b88 <osThreadResume+0x40>)
 8018b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b6c:	601a      	str	r2, [r3, #0]
 8018b6e:	f3bf 8f4f 	dsb	sy
 8018b72:	f3bf 8f6f 	isb	sy
 8018b76:	e002      	b.n	8018b7e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f001 f9d1 	bl	8019f20 <vTaskResume>
  }
  return osOK;
 8018b7e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8018b80:	4618      	mov	r0, r3
 8018b82:	3708      	adds	r7, #8
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bd80      	pop	{r7, pc}
 8018b88:	e000ed04 	.word	0xe000ed04

08018b8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018b8c:	b480      	push	{r7}
 8018b8e:	b083      	sub	sp, #12
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	f103 0208 	add.w	r2, r3, #8
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8018ba4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	f103 0208 	add.w	r2, r3, #8
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	f103 0208 	add.w	r2, r3, #8
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018bc0:	bf00      	nop
 8018bc2:	370c      	adds	r7, #12
 8018bc4:	46bd      	mov	sp, r7
 8018bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bca:	4770      	bx	lr

08018bcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018bcc:	b480      	push	{r7}
 8018bce:	b083      	sub	sp, #12
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	2200      	movs	r2, #0
 8018bd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018bda:	bf00      	nop
 8018bdc:	370c      	adds	r7, #12
 8018bde:	46bd      	mov	sp, r7
 8018be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be4:	4770      	bx	lr

08018be6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018be6:	b480      	push	{r7}
 8018be8:	b085      	sub	sp, #20
 8018bea:	af00      	add	r7, sp, #0
 8018bec:	6078      	str	r0, [r7, #4]
 8018bee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	685b      	ldr	r3, [r3, #4]
 8018bf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018bf6:	683b      	ldr	r3, [r7, #0]
 8018bf8:	68fa      	ldr	r2, [r7, #12]
 8018bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	689a      	ldr	r2, [r3, #8]
 8018c00:	683b      	ldr	r3, [r7, #0]
 8018c02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	689b      	ldr	r3, [r3, #8]
 8018c08:	683a      	ldr	r2, [r7, #0]
 8018c0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	683a      	ldr	r2, [r7, #0]
 8018c10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018c12:	683b      	ldr	r3, [r7, #0]
 8018c14:	687a      	ldr	r2, [r7, #4]
 8018c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	1c5a      	adds	r2, r3, #1
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	601a      	str	r2, [r3, #0]
}
 8018c22:	bf00      	nop
 8018c24:	3714      	adds	r7, #20
 8018c26:	46bd      	mov	sp, r7
 8018c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2c:	4770      	bx	lr

08018c2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018c2e:	b480      	push	{r7}
 8018c30:	b085      	sub	sp, #20
 8018c32:	af00      	add	r7, sp, #0
 8018c34:	6078      	str	r0, [r7, #4]
 8018c36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018c38:	683b      	ldr	r3, [r7, #0]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018c3e:	68bb      	ldr	r3, [r7, #8]
 8018c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c44:	d103      	bne.n	8018c4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	691b      	ldr	r3, [r3, #16]
 8018c4a:	60fb      	str	r3, [r7, #12]
 8018c4c:	e00c      	b.n	8018c68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	3308      	adds	r3, #8
 8018c52:	60fb      	str	r3, [r7, #12]
 8018c54:	e002      	b.n	8018c5c <vListInsert+0x2e>
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	685b      	ldr	r3, [r3, #4]
 8018c5a:	60fb      	str	r3, [r7, #12]
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	685b      	ldr	r3, [r3, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	68ba      	ldr	r2, [r7, #8]
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d2f6      	bcs.n	8018c56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	685a      	ldr	r2, [r3, #4]
 8018c6c:	683b      	ldr	r3, [r7, #0]
 8018c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018c70:	683b      	ldr	r3, [r7, #0]
 8018c72:	685b      	ldr	r3, [r3, #4]
 8018c74:	683a      	ldr	r2, [r7, #0]
 8018c76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018c78:	683b      	ldr	r3, [r7, #0]
 8018c7a:	68fa      	ldr	r2, [r7, #12]
 8018c7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	683a      	ldr	r2, [r7, #0]
 8018c82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018c84:	683b      	ldr	r3, [r7, #0]
 8018c86:	687a      	ldr	r2, [r7, #4]
 8018c88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	1c5a      	adds	r2, r3, #1
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	601a      	str	r2, [r3, #0]
}
 8018c94:	bf00      	nop
 8018c96:	3714      	adds	r7, #20
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9e:	4770      	bx	lr

08018ca0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018ca0:	b480      	push	{r7}
 8018ca2:	b085      	sub	sp, #20
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	691b      	ldr	r3, [r3, #16]
 8018cac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	685b      	ldr	r3, [r3, #4]
 8018cb2:	687a      	ldr	r2, [r7, #4]
 8018cb4:	6892      	ldr	r2, [r2, #8]
 8018cb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	689b      	ldr	r3, [r3, #8]
 8018cbc:	687a      	ldr	r2, [r7, #4]
 8018cbe:	6852      	ldr	r2, [r2, #4]
 8018cc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	685b      	ldr	r3, [r3, #4]
 8018cc6:	687a      	ldr	r2, [r7, #4]
 8018cc8:	429a      	cmp	r2, r3
 8018cca:	d103      	bne.n	8018cd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	689a      	ldr	r2, [r3, #8]
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	1e5a      	subs	r2, r3, #1
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	681b      	ldr	r3, [r3, #0]
}
 8018ce8:	4618      	mov	r0, r3
 8018cea:	3714      	adds	r7, #20
 8018cec:	46bd      	mov	sp, r7
 8018cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf2:	4770      	bx	lr

08018cf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b084      	sub	sp, #16
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
 8018cfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d10a      	bne.n	8018d1e <xQueueGenericReset+0x2a>
	__asm volatile
 8018d08:	f04f 0320 	mov.w	r3, #32
 8018d0c:	f383 8811 	msr	BASEPRI, r3
 8018d10:	f3bf 8f6f 	isb	sy
 8018d14:	f3bf 8f4f 	dsb	sy
 8018d18:	60bb      	str	r3, [r7, #8]
}
 8018d1a:	bf00      	nop
 8018d1c:	e7fe      	b.n	8018d1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8018d1e:	f002 fc81 	bl	801b624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	681a      	ldr	r2, [r3, #0]
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d2a:	68f9      	ldr	r1, [r7, #12]
 8018d2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018d2e:	fb01 f303 	mul.w	r3, r1, r3
 8018d32:	441a      	add	r2, r3
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	681a      	ldr	r2, [r3, #0]
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	681a      	ldr	r2, [r3, #0]
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d4e:	3b01      	subs	r3, #1
 8018d50:	68f9      	ldr	r1, [r7, #12]
 8018d52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018d54:	fb01 f303 	mul.w	r3, r1, r3
 8018d58:	441a      	add	r2, r3
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	22ff      	movs	r2, #255	; 0xff
 8018d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	22ff      	movs	r2, #255	; 0xff
 8018d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d114      	bne.n	8018d9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	691b      	ldr	r3, [r3, #16]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d01a      	beq.n	8018db2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	3310      	adds	r3, #16
 8018d80:	4618      	mov	r0, r3
 8018d82:	f001 fc37 	bl	801a5f4 <xTaskRemoveFromEventList>
 8018d86:	4603      	mov	r3, r0
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d012      	beq.n	8018db2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018d8c:	4b0c      	ldr	r3, [pc, #48]	; (8018dc0 <xQueueGenericReset+0xcc>)
 8018d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d92:	601a      	str	r2, [r3, #0]
 8018d94:	f3bf 8f4f 	dsb	sy
 8018d98:	f3bf 8f6f 	isb	sy
 8018d9c:	e009      	b.n	8018db2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	3310      	adds	r3, #16
 8018da2:	4618      	mov	r0, r3
 8018da4:	f7ff fef2 	bl	8018b8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	3324      	adds	r3, #36	; 0x24
 8018dac:	4618      	mov	r0, r3
 8018dae:	f7ff feed 	bl	8018b8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018db2:	f002 fc67 	bl	801b684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018db6:	2301      	movs	r3, #1
}
 8018db8:	4618      	mov	r0, r3
 8018dba:	3710      	adds	r7, #16
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	bd80      	pop	{r7, pc}
 8018dc0:	e000ed04 	.word	0xe000ed04

08018dc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b08a      	sub	sp, #40	; 0x28
 8018dc8:	af02      	add	r7, sp, #8
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	60b9      	str	r1, [r7, #8]
 8018dce:	4613      	mov	r3, r2
 8018dd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d10a      	bne.n	8018dee <xQueueGenericCreate+0x2a>
	__asm volatile
 8018dd8:	f04f 0320 	mov.w	r3, #32
 8018ddc:	f383 8811 	msr	BASEPRI, r3
 8018de0:	f3bf 8f6f 	isb	sy
 8018de4:	f3bf 8f4f 	dsb	sy
 8018de8:	613b      	str	r3, [r7, #16]
}
 8018dea:	bf00      	nop
 8018dec:	e7fe      	b.n	8018dec <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8018dee:	68bb      	ldr	r3, [r7, #8]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d102      	bne.n	8018dfa <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8018df4:	2300      	movs	r3, #0
 8018df6:	61fb      	str	r3, [r7, #28]
 8018df8:	e004      	b.n	8018e04 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	68ba      	ldr	r2, [r7, #8]
 8018dfe:	fb02 f303 	mul.w	r3, r2, r3
 8018e02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018e04:	69fb      	ldr	r3, [r7, #28]
 8018e06:	3350      	adds	r3, #80	; 0x50
 8018e08:	4618      	mov	r0, r3
 8018e0a:	f002 fd2d 	bl	801b868 <pvPortMalloc>
 8018e0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8018e10:	69bb      	ldr	r3, [r7, #24]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d00d      	beq.n	8018e32 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018e16:	69bb      	ldr	r3, [r7, #24]
 8018e18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	3350      	adds	r3, #80	; 0x50
 8018e1e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018e20:	79fa      	ldrb	r2, [r7, #7]
 8018e22:	69bb      	ldr	r3, [r7, #24]
 8018e24:	9300      	str	r3, [sp, #0]
 8018e26:	4613      	mov	r3, r2
 8018e28:	697a      	ldr	r2, [r7, #20]
 8018e2a:	68b9      	ldr	r1, [r7, #8]
 8018e2c:	68f8      	ldr	r0, [r7, #12]
 8018e2e:	f000 f805 	bl	8018e3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018e32:	69bb      	ldr	r3, [r7, #24]
	}
 8018e34:	4618      	mov	r0, r3
 8018e36:	3720      	adds	r7, #32
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	bd80      	pop	{r7, pc}

08018e3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b084      	sub	sp, #16
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	60f8      	str	r0, [r7, #12]
 8018e44:	60b9      	str	r1, [r7, #8]
 8018e46:	607a      	str	r2, [r7, #4]
 8018e48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018e4a:	68bb      	ldr	r3, [r7, #8]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d103      	bne.n	8018e58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018e50:	69bb      	ldr	r3, [r7, #24]
 8018e52:	69ba      	ldr	r2, [r7, #24]
 8018e54:	601a      	str	r2, [r3, #0]
 8018e56:	e002      	b.n	8018e5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018e58:	69bb      	ldr	r3, [r7, #24]
 8018e5a:	687a      	ldr	r2, [r7, #4]
 8018e5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018e5e:	69bb      	ldr	r3, [r7, #24]
 8018e60:	68fa      	ldr	r2, [r7, #12]
 8018e62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018e64:	69bb      	ldr	r3, [r7, #24]
 8018e66:	68ba      	ldr	r2, [r7, #8]
 8018e68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018e6a:	2101      	movs	r1, #1
 8018e6c:	69b8      	ldr	r0, [r7, #24]
 8018e6e:	f7ff ff41 	bl	8018cf4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8018e72:	69bb      	ldr	r3, [r7, #24]
 8018e74:	78fa      	ldrb	r2, [r7, #3]
 8018e76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018e7a:	bf00      	nop
 8018e7c:	3710      	adds	r7, #16
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}

08018e82 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8018e82:	b580      	push	{r7, lr}
 8018e84:	b086      	sub	sp, #24
 8018e86:	af00      	add	r7, sp, #0
 8018e88:	6078      	str	r0, [r7, #4]
 8018e8a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d10a      	bne.n	8018ea8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8018e92:	f04f 0320 	mov.w	r3, #32
 8018e96:	f383 8811 	msr	BASEPRI, r3
 8018e9a:	f3bf 8f6f 	isb	sy
 8018e9e:	f3bf 8f4f 	dsb	sy
 8018ea2:	613b      	str	r3, [r7, #16]
}
 8018ea4:	bf00      	nop
 8018ea6:	e7fe      	b.n	8018ea6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018ea8:	683a      	ldr	r2, [r7, #0]
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	429a      	cmp	r2, r3
 8018eae:	d90a      	bls.n	8018ec6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8018eb0:	f04f 0320 	mov.w	r3, #32
 8018eb4:	f383 8811 	msr	BASEPRI, r3
 8018eb8:	f3bf 8f6f 	isb	sy
 8018ebc:	f3bf 8f4f 	dsb	sy
 8018ec0:	60fb      	str	r3, [r7, #12]
}
 8018ec2:	bf00      	nop
 8018ec4:	e7fe      	b.n	8018ec4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018ec6:	2202      	movs	r2, #2
 8018ec8:	2100      	movs	r1, #0
 8018eca:	6878      	ldr	r0, [r7, #4]
 8018ecc:	f7ff ff7a 	bl	8018dc4 <xQueueGenericCreate>
 8018ed0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8018ed2:	697b      	ldr	r3, [r7, #20]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d002      	beq.n	8018ede <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018ed8:	697b      	ldr	r3, [r7, #20]
 8018eda:	683a      	ldr	r2, [r7, #0]
 8018edc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8018ede:	697b      	ldr	r3, [r7, #20]
	}
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	3718      	adds	r7, #24
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	bd80      	pop	{r7, pc}

08018ee8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b08e      	sub	sp, #56	; 0x38
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	60f8      	str	r0, [r7, #12]
 8018ef0:	60b9      	str	r1, [r7, #8]
 8018ef2:	607a      	str	r2, [r7, #4]
 8018ef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d10a      	bne.n	8018f1a <xQueueGenericSend+0x32>
	__asm volatile
 8018f04:	f04f 0320 	mov.w	r3, #32
 8018f08:	f383 8811 	msr	BASEPRI, r3
 8018f0c:	f3bf 8f6f 	isb	sy
 8018f10:	f3bf 8f4f 	dsb	sy
 8018f14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018f16:	bf00      	nop
 8018f18:	e7fe      	b.n	8018f18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018f1a:	68bb      	ldr	r3, [r7, #8]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d103      	bne.n	8018f28 <xQueueGenericSend+0x40>
 8018f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d101      	bne.n	8018f2c <xQueueGenericSend+0x44>
 8018f28:	2301      	movs	r3, #1
 8018f2a:	e000      	b.n	8018f2e <xQueueGenericSend+0x46>
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d10a      	bne.n	8018f48 <xQueueGenericSend+0x60>
	__asm volatile
 8018f32:	f04f 0320 	mov.w	r3, #32
 8018f36:	f383 8811 	msr	BASEPRI, r3
 8018f3a:	f3bf 8f6f 	isb	sy
 8018f3e:	f3bf 8f4f 	dsb	sy
 8018f42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018f44:	bf00      	nop
 8018f46:	e7fe      	b.n	8018f46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	2b02      	cmp	r3, #2
 8018f4c:	d103      	bne.n	8018f56 <xQueueGenericSend+0x6e>
 8018f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f52:	2b01      	cmp	r3, #1
 8018f54:	d101      	bne.n	8018f5a <xQueueGenericSend+0x72>
 8018f56:	2301      	movs	r3, #1
 8018f58:	e000      	b.n	8018f5c <xQueueGenericSend+0x74>
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d10a      	bne.n	8018f76 <xQueueGenericSend+0x8e>
	__asm volatile
 8018f60:	f04f 0320 	mov.w	r3, #32
 8018f64:	f383 8811 	msr	BASEPRI, r3
 8018f68:	f3bf 8f6f 	isb	sy
 8018f6c:	f3bf 8f4f 	dsb	sy
 8018f70:	623b      	str	r3, [r7, #32]
}
 8018f72:	bf00      	nop
 8018f74:	e7fe      	b.n	8018f74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018f76:	f001 fcdb 	bl	801a930 <xTaskGetSchedulerState>
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d102      	bne.n	8018f86 <xQueueGenericSend+0x9e>
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d101      	bne.n	8018f8a <xQueueGenericSend+0xa2>
 8018f86:	2301      	movs	r3, #1
 8018f88:	e000      	b.n	8018f8c <xQueueGenericSend+0xa4>
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d10a      	bne.n	8018fa6 <xQueueGenericSend+0xbe>
	__asm volatile
 8018f90:	f04f 0320 	mov.w	r3, #32
 8018f94:	f383 8811 	msr	BASEPRI, r3
 8018f98:	f3bf 8f6f 	isb	sy
 8018f9c:	f3bf 8f4f 	dsb	sy
 8018fa0:	61fb      	str	r3, [r7, #28]
}
 8018fa2:	bf00      	nop
 8018fa4:	e7fe      	b.n	8018fa4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018fa6:	f002 fb3d 	bl	801b624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fb2:	429a      	cmp	r2, r3
 8018fb4:	d302      	bcc.n	8018fbc <xQueueGenericSend+0xd4>
 8018fb6:	683b      	ldr	r3, [r7, #0]
 8018fb8:	2b02      	cmp	r3, #2
 8018fba:	d129      	bne.n	8019010 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018fbc:	683a      	ldr	r2, [r7, #0]
 8018fbe:	68b9      	ldr	r1, [r7, #8]
 8018fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018fc2:	f000 fc39 	bl	8019838 <prvCopyDataToQueue>
 8018fc6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d010      	beq.n	8018ff2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fd2:	3324      	adds	r3, #36	; 0x24
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	f001 fb0d 	bl	801a5f4 <xTaskRemoveFromEventList>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d013      	beq.n	8019008 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018fe0:	4b3f      	ldr	r3, [pc, #252]	; (80190e0 <xQueueGenericSend+0x1f8>)
 8018fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018fe6:	601a      	str	r2, [r3, #0]
 8018fe8:	f3bf 8f4f 	dsb	sy
 8018fec:	f3bf 8f6f 	isb	sy
 8018ff0:	e00a      	b.n	8019008 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d007      	beq.n	8019008 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018ff8:	4b39      	ldr	r3, [pc, #228]	; (80190e0 <xQueueGenericSend+0x1f8>)
 8018ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ffe:	601a      	str	r2, [r3, #0]
 8019000:	f3bf 8f4f 	dsb	sy
 8019004:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019008:	f002 fb3c 	bl	801b684 <vPortExitCritical>
				return pdPASS;
 801900c:	2301      	movs	r3, #1
 801900e:	e063      	b.n	80190d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d103      	bne.n	801901e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019016:	f002 fb35 	bl	801b684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801901a:	2300      	movs	r3, #0
 801901c:	e05c      	b.n	80190d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801901e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019020:	2b00      	cmp	r3, #0
 8019022:	d106      	bne.n	8019032 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019024:	f107 0314 	add.w	r3, r7, #20
 8019028:	4618      	mov	r0, r3
 801902a:	f001 fb45 	bl	801a6b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801902e:	2301      	movs	r3, #1
 8019030:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019032:	f002 fb27 	bl	801b684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019036:	f001 f899 	bl	801a16c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801903a:	f002 faf3 	bl	801b624 <vPortEnterCritical>
 801903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019044:	b25b      	sxtb	r3, r3
 8019046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801904a:	d103      	bne.n	8019054 <xQueueGenericSend+0x16c>
 801904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801904e:	2200      	movs	r2, #0
 8019050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801905a:	b25b      	sxtb	r3, r3
 801905c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019060:	d103      	bne.n	801906a <xQueueGenericSend+0x182>
 8019062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019064:	2200      	movs	r2, #0
 8019066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801906a:	f002 fb0b 	bl	801b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801906e:	1d3a      	adds	r2, r7, #4
 8019070:	f107 0314 	add.w	r3, r7, #20
 8019074:	4611      	mov	r1, r2
 8019076:	4618      	mov	r0, r3
 8019078:	f001 fb34 	bl	801a6e4 <xTaskCheckForTimeOut>
 801907c:	4603      	mov	r3, r0
 801907e:	2b00      	cmp	r3, #0
 8019080:	d124      	bne.n	80190cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019084:	f000 fcd0 	bl	8019a28 <prvIsQueueFull>
 8019088:	4603      	mov	r3, r0
 801908a:	2b00      	cmp	r3, #0
 801908c:	d018      	beq.n	80190c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019090:	3310      	adds	r3, #16
 8019092:	687a      	ldr	r2, [r7, #4]
 8019094:	4611      	mov	r1, r2
 8019096:	4618      	mov	r0, r3
 8019098:	f001 fa5c 	bl	801a554 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801909c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801909e:	f000 fc5b 	bl	8019958 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80190a2:	f001 f871 	bl	801a188 <xTaskResumeAll>
 80190a6:	4603      	mov	r3, r0
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	f47f af7c 	bne.w	8018fa6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80190ae:	4b0c      	ldr	r3, [pc, #48]	; (80190e0 <xQueueGenericSend+0x1f8>)
 80190b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190b4:	601a      	str	r2, [r3, #0]
 80190b6:	f3bf 8f4f 	dsb	sy
 80190ba:	f3bf 8f6f 	isb	sy
 80190be:	e772      	b.n	8018fa6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80190c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190c2:	f000 fc49 	bl	8019958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80190c6:	f001 f85f 	bl	801a188 <xTaskResumeAll>
 80190ca:	e76c      	b.n	8018fa6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80190cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190ce:	f000 fc43 	bl	8019958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80190d2:	f001 f859 	bl	801a188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80190d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80190d8:	4618      	mov	r0, r3
 80190da:	3738      	adds	r7, #56	; 0x38
 80190dc:	46bd      	mov	sp, r7
 80190de:	bd80      	pop	{r7, pc}
 80190e0:	e000ed04 	.word	0xe000ed04

080190e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	b08e      	sub	sp, #56	; 0x38
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	60f8      	str	r0, [r7, #12]
 80190ec:	60b9      	str	r1, [r7, #8]
 80190ee:	607a      	str	r2, [r7, #4]
 80190f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80190f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d10a      	bne.n	8019112 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80190fc:	f04f 0320 	mov.w	r3, #32
 8019100:	f383 8811 	msr	BASEPRI, r3
 8019104:	f3bf 8f6f 	isb	sy
 8019108:	f3bf 8f4f 	dsb	sy
 801910c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801910e:	bf00      	nop
 8019110:	e7fe      	b.n	8019110 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019112:	68bb      	ldr	r3, [r7, #8]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d103      	bne.n	8019120 <xQueueGenericSendFromISR+0x3c>
 8019118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801911a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801911c:	2b00      	cmp	r3, #0
 801911e:	d101      	bne.n	8019124 <xQueueGenericSendFromISR+0x40>
 8019120:	2301      	movs	r3, #1
 8019122:	e000      	b.n	8019126 <xQueueGenericSendFromISR+0x42>
 8019124:	2300      	movs	r3, #0
 8019126:	2b00      	cmp	r3, #0
 8019128:	d10a      	bne.n	8019140 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801912a:	f04f 0320 	mov.w	r3, #32
 801912e:	f383 8811 	msr	BASEPRI, r3
 8019132:	f3bf 8f6f 	isb	sy
 8019136:	f3bf 8f4f 	dsb	sy
 801913a:	623b      	str	r3, [r7, #32]
}
 801913c:	bf00      	nop
 801913e:	e7fe      	b.n	801913e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	2b02      	cmp	r3, #2
 8019144:	d103      	bne.n	801914e <xQueueGenericSendFromISR+0x6a>
 8019146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801914a:	2b01      	cmp	r3, #1
 801914c:	d101      	bne.n	8019152 <xQueueGenericSendFromISR+0x6e>
 801914e:	2301      	movs	r3, #1
 8019150:	e000      	b.n	8019154 <xQueueGenericSendFromISR+0x70>
 8019152:	2300      	movs	r3, #0
 8019154:	2b00      	cmp	r3, #0
 8019156:	d10a      	bne.n	801916e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8019158:	f04f 0320 	mov.w	r3, #32
 801915c:	f383 8811 	msr	BASEPRI, r3
 8019160:	f3bf 8f6f 	isb	sy
 8019164:	f3bf 8f4f 	dsb	sy
 8019168:	61fb      	str	r3, [r7, #28]
}
 801916a:	bf00      	nop
 801916c:	e7fe      	b.n	801916c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801916e:	f002 fb3b 	bl	801b7e8 <vPortValidateInterruptPriority>
	__asm volatile
 8019172:	f3ef 8211 	mrs	r2, BASEPRI
 8019176:	f04f 0320 	mov.w	r3, #32
 801917a:	f383 8811 	msr	BASEPRI, r3
 801917e:	f3bf 8f6f 	isb	sy
 8019182:	f3bf 8f4f 	dsb	sy
 8019186:	61ba      	str	r2, [r7, #24]
 8019188:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801918a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801918c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019196:	429a      	cmp	r2, r3
 8019198:	d302      	bcc.n	80191a0 <xQueueGenericSendFromISR+0xbc>
 801919a:	683b      	ldr	r3, [r7, #0]
 801919c:	2b02      	cmp	r3, #2
 801919e:	d12c      	bne.n	80191fa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80191a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80191a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80191aa:	683a      	ldr	r2, [r7, #0]
 80191ac:	68b9      	ldr	r1, [r7, #8]
 80191ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80191b0:	f000 fb42 	bl	8019838 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80191b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80191b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191bc:	d112      	bne.n	80191e4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80191be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d016      	beq.n	80191f4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80191c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191c8:	3324      	adds	r3, #36	; 0x24
 80191ca:	4618      	mov	r0, r3
 80191cc:	f001 fa12 	bl	801a5f4 <xTaskRemoveFromEventList>
 80191d0:	4603      	mov	r3, r0
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d00e      	beq.n	80191f4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d00b      	beq.n	80191f4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	2201      	movs	r2, #1
 80191e0:	601a      	str	r2, [r3, #0]
 80191e2:	e007      	b.n	80191f4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80191e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80191e8:	3301      	adds	r3, #1
 80191ea:	b2db      	uxtb	r3, r3
 80191ec:	b25a      	sxtb	r2, r3
 80191ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80191f4:	2301      	movs	r3, #1
 80191f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80191f8:	e001      	b.n	80191fe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80191fa:	2300      	movs	r3, #0
 80191fc:	637b      	str	r3, [r7, #52]	; 0x34
 80191fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019200:	613b      	str	r3, [r7, #16]
	__asm volatile
 8019202:	693b      	ldr	r3, [r7, #16]
 8019204:	f383 8811 	msr	BASEPRI, r3
}
 8019208:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801920a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801920c:	4618      	mov	r0, r3
 801920e:	3738      	adds	r7, #56	; 0x38
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}

08019214 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b08e      	sub	sp, #56	; 0x38
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
 801921c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8019222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019224:	2b00      	cmp	r3, #0
 8019226:	d10a      	bne.n	801923e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8019228:	f04f 0320 	mov.w	r3, #32
 801922c:	f383 8811 	msr	BASEPRI, r3
 8019230:	f3bf 8f6f 	isb	sy
 8019234:	f3bf 8f4f 	dsb	sy
 8019238:	623b      	str	r3, [r7, #32]
}
 801923a:	bf00      	nop
 801923c:	e7fe      	b.n	801923c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019242:	2b00      	cmp	r3, #0
 8019244:	d00a      	beq.n	801925c <xQueueGiveFromISR+0x48>
	__asm volatile
 8019246:	f04f 0320 	mov.w	r3, #32
 801924a:	f383 8811 	msr	BASEPRI, r3
 801924e:	f3bf 8f6f 	isb	sy
 8019252:	f3bf 8f4f 	dsb	sy
 8019256:	61fb      	str	r3, [r7, #28]
}
 8019258:	bf00      	nop
 801925a:	e7fe      	b.n	801925a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	2b00      	cmp	r3, #0
 8019262:	d103      	bne.n	801926c <xQueueGiveFromISR+0x58>
 8019264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019266:	689b      	ldr	r3, [r3, #8]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d101      	bne.n	8019270 <xQueueGiveFromISR+0x5c>
 801926c:	2301      	movs	r3, #1
 801926e:	e000      	b.n	8019272 <xQueueGiveFromISR+0x5e>
 8019270:	2300      	movs	r3, #0
 8019272:	2b00      	cmp	r3, #0
 8019274:	d10a      	bne.n	801928c <xQueueGiveFromISR+0x78>
	__asm volatile
 8019276:	f04f 0320 	mov.w	r3, #32
 801927a:	f383 8811 	msr	BASEPRI, r3
 801927e:	f3bf 8f6f 	isb	sy
 8019282:	f3bf 8f4f 	dsb	sy
 8019286:	61bb      	str	r3, [r7, #24]
}
 8019288:	bf00      	nop
 801928a:	e7fe      	b.n	801928a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801928c:	f002 faac 	bl	801b7e8 <vPortValidateInterruptPriority>
	__asm volatile
 8019290:	f3ef 8211 	mrs	r2, BASEPRI
 8019294:	f04f 0320 	mov.w	r3, #32
 8019298:	f383 8811 	msr	BASEPRI, r3
 801929c:	f3bf 8f6f 	isb	sy
 80192a0:	f3bf 8f4f 	dsb	sy
 80192a4:	617a      	str	r2, [r7, #20]
 80192a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80192a8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80192aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80192ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192b0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80192b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192b8:	429a      	cmp	r2, r3
 80192ba:	d22b      	bcs.n	8019314 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80192bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80192c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80192c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192c8:	1c5a      	adds	r2, r3, #1
 80192ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192cc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80192ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80192d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192d6:	d112      	bne.n	80192fe <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80192d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d016      	beq.n	801930e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80192e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192e2:	3324      	adds	r3, #36	; 0x24
 80192e4:	4618      	mov	r0, r3
 80192e6:	f001 f985 	bl	801a5f4 <xTaskRemoveFromEventList>
 80192ea:	4603      	mov	r3, r0
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d00e      	beq.n	801930e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80192f0:	683b      	ldr	r3, [r7, #0]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d00b      	beq.n	801930e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80192f6:	683b      	ldr	r3, [r7, #0]
 80192f8:	2201      	movs	r2, #1
 80192fa:	601a      	str	r2, [r3, #0]
 80192fc:	e007      	b.n	801930e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80192fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019302:	3301      	adds	r3, #1
 8019304:	b2db      	uxtb	r3, r3
 8019306:	b25a      	sxtb	r2, r3
 8019308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801930a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801930e:	2301      	movs	r3, #1
 8019310:	637b      	str	r3, [r7, #52]	; 0x34
 8019312:	e001      	b.n	8019318 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019314:	2300      	movs	r3, #0
 8019316:	637b      	str	r3, [r7, #52]	; 0x34
 8019318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801931a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	f383 8811 	msr	BASEPRI, r3
}
 8019322:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019326:	4618      	mov	r0, r3
 8019328:	3738      	adds	r7, #56	; 0x38
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}
	...

08019330 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b08c      	sub	sp, #48	; 0x30
 8019334:	af00      	add	r7, sp, #0
 8019336:	60f8      	str	r0, [r7, #12]
 8019338:	60b9      	str	r1, [r7, #8]
 801933a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801933c:	2300      	movs	r3, #0
 801933e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019346:	2b00      	cmp	r3, #0
 8019348:	d10a      	bne.n	8019360 <xQueueReceive+0x30>
	__asm volatile
 801934a:	f04f 0320 	mov.w	r3, #32
 801934e:	f383 8811 	msr	BASEPRI, r3
 8019352:	f3bf 8f6f 	isb	sy
 8019356:	f3bf 8f4f 	dsb	sy
 801935a:	623b      	str	r3, [r7, #32]
}
 801935c:	bf00      	nop
 801935e:	e7fe      	b.n	801935e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019360:	68bb      	ldr	r3, [r7, #8]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d103      	bne.n	801936e <xQueueReceive+0x3e>
 8019366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801936a:	2b00      	cmp	r3, #0
 801936c:	d101      	bne.n	8019372 <xQueueReceive+0x42>
 801936e:	2301      	movs	r3, #1
 8019370:	e000      	b.n	8019374 <xQueueReceive+0x44>
 8019372:	2300      	movs	r3, #0
 8019374:	2b00      	cmp	r3, #0
 8019376:	d10a      	bne.n	801938e <xQueueReceive+0x5e>
	__asm volatile
 8019378:	f04f 0320 	mov.w	r3, #32
 801937c:	f383 8811 	msr	BASEPRI, r3
 8019380:	f3bf 8f6f 	isb	sy
 8019384:	f3bf 8f4f 	dsb	sy
 8019388:	61fb      	str	r3, [r7, #28]
}
 801938a:	bf00      	nop
 801938c:	e7fe      	b.n	801938c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801938e:	f001 facf 	bl	801a930 <xTaskGetSchedulerState>
 8019392:	4603      	mov	r3, r0
 8019394:	2b00      	cmp	r3, #0
 8019396:	d102      	bne.n	801939e <xQueueReceive+0x6e>
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d101      	bne.n	80193a2 <xQueueReceive+0x72>
 801939e:	2301      	movs	r3, #1
 80193a0:	e000      	b.n	80193a4 <xQueueReceive+0x74>
 80193a2:	2300      	movs	r3, #0
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d10a      	bne.n	80193be <xQueueReceive+0x8e>
	__asm volatile
 80193a8:	f04f 0320 	mov.w	r3, #32
 80193ac:	f383 8811 	msr	BASEPRI, r3
 80193b0:	f3bf 8f6f 	isb	sy
 80193b4:	f3bf 8f4f 	dsb	sy
 80193b8:	61bb      	str	r3, [r7, #24]
}
 80193ba:	bf00      	nop
 80193bc:	e7fe      	b.n	80193bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80193be:	f002 f931 	bl	801b624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80193c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80193c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d01f      	beq.n	801940e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80193ce:	68b9      	ldr	r1, [r7, #8]
 80193d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193d2:	f000 fa9b 	bl	801990c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80193d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193d8:	1e5a      	subs	r2, r3, #1
 80193da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80193de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e0:	691b      	ldr	r3, [r3, #16]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d00f      	beq.n	8019406 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80193e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e8:	3310      	adds	r3, #16
 80193ea:	4618      	mov	r0, r3
 80193ec:	f001 f902 	bl	801a5f4 <xTaskRemoveFromEventList>
 80193f0:	4603      	mov	r3, r0
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d007      	beq.n	8019406 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80193f6:	4b3d      	ldr	r3, [pc, #244]	; (80194ec <xQueueReceive+0x1bc>)
 80193f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193fc:	601a      	str	r2, [r3, #0]
 80193fe:	f3bf 8f4f 	dsb	sy
 8019402:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019406:	f002 f93d 	bl	801b684 <vPortExitCritical>
				return pdPASS;
 801940a:	2301      	movs	r3, #1
 801940c:	e069      	b.n	80194e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d103      	bne.n	801941c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019414:	f002 f936 	bl	801b684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019418:	2300      	movs	r3, #0
 801941a:	e062      	b.n	80194e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801941c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801941e:	2b00      	cmp	r3, #0
 8019420:	d106      	bne.n	8019430 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019422:	f107 0310 	add.w	r3, r7, #16
 8019426:	4618      	mov	r0, r3
 8019428:	f001 f946 	bl	801a6b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801942c:	2301      	movs	r3, #1
 801942e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019430:	f002 f928 	bl	801b684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019434:	f000 fe9a 	bl	801a16c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019438:	f002 f8f4 	bl	801b624 <vPortEnterCritical>
 801943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801943e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019442:	b25b      	sxtb	r3, r3
 8019444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019448:	d103      	bne.n	8019452 <xQueueReceive+0x122>
 801944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801944c:	2200      	movs	r2, #0
 801944e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019458:	b25b      	sxtb	r3, r3
 801945a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801945e:	d103      	bne.n	8019468 <xQueueReceive+0x138>
 8019460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019462:	2200      	movs	r2, #0
 8019464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019468:	f002 f90c 	bl	801b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801946c:	1d3a      	adds	r2, r7, #4
 801946e:	f107 0310 	add.w	r3, r7, #16
 8019472:	4611      	mov	r1, r2
 8019474:	4618      	mov	r0, r3
 8019476:	f001 f935 	bl	801a6e4 <xTaskCheckForTimeOut>
 801947a:	4603      	mov	r3, r0
 801947c:	2b00      	cmp	r3, #0
 801947e:	d123      	bne.n	80194c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019482:	f000 fabb 	bl	80199fc <prvIsQueueEmpty>
 8019486:	4603      	mov	r3, r0
 8019488:	2b00      	cmp	r3, #0
 801948a:	d017      	beq.n	80194bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801948e:	3324      	adds	r3, #36	; 0x24
 8019490:	687a      	ldr	r2, [r7, #4]
 8019492:	4611      	mov	r1, r2
 8019494:	4618      	mov	r0, r3
 8019496:	f001 f85d 	bl	801a554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801949a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801949c:	f000 fa5c 	bl	8019958 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80194a0:	f000 fe72 	bl	801a188 <xTaskResumeAll>
 80194a4:	4603      	mov	r3, r0
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d189      	bne.n	80193be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80194aa:	4b10      	ldr	r3, [pc, #64]	; (80194ec <xQueueReceive+0x1bc>)
 80194ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80194b0:	601a      	str	r2, [r3, #0]
 80194b2:	f3bf 8f4f 	dsb	sy
 80194b6:	f3bf 8f6f 	isb	sy
 80194ba:	e780      	b.n	80193be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80194bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194be:	f000 fa4b 	bl	8019958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80194c2:	f000 fe61 	bl	801a188 <xTaskResumeAll>
 80194c6:	e77a      	b.n	80193be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80194c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194ca:	f000 fa45 	bl	8019958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80194ce:	f000 fe5b 	bl	801a188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80194d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194d4:	f000 fa92 	bl	80199fc <prvIsQueueEmpty>
 80194d8:	4603      	mov	r3, r0
 80194da:	2b00      	cmp	r3, #0
 80194dc:	f43f af6f 	beq.w	80193be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80194e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80194e2:	4618      	mov	r0, r3
 80194e4:	3730      	adds	r7, #48	; 0x30
 80194e6:	46bd      	mov	sp, r7
 80194e8:	bd80      	pop	{r7, pc}
 80194ea:	bf00      	nop
 80194ec:	e000ed04 	.word	0xe000ed04

080194f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b08e      	sub	sp, #56	; 0x38
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	6078      	str	r0, [r7, #4]
 80194f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80194fa:	2300      	movs	r3, #0
 80194fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8019502:	2300      	movs	r3, #0
 8019504:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019508:	2b00      	cmp	r3, #0
 801950a:	d10a      	bne.n	8019522 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801950c:	f04f 0320 	mov.w	r3, #32
 8019510:	f383 8811 	msr	BASEPRI, r3
 8019514:	f3bf 8f6f 	isb	sy
 8019518:	f3bf 8f4f 	dsb	sy
 801951c:	623b      	str	r3, [r7, #32]
}
 801951e:	bf00      	nop
 8019520:	e7fe      	b.n	8019520 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019526:	2b00      	cmp	r3, #0
 8019528:	d00a      	beq.n	8019540 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801952a:	f04f 0320 	mov.w	r3, #32
 801952e:	f383 8811 	msr	BASEPRI, r3
 8019532:	f3bf 8f6f 	isb	sy
 8019536:	f3bf 8f4f 	dsb	sy
 801953a:	61fb      	str	r3, [r7, #28]
}
 801953c:	bf00      	nop
 801953e:	e7fe      	b.n	801953e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019540:	f001 f9f6 	bl	801a930 <xTaskGetSchedulerState>
 8019544:	4603      	mov	r3, r0
 8019546:	2b00      	cmp	r3, #0
 8019548:	d102      	bne.n	8019550 <xQueueSemaphoreTake+0x60>
 801954a:	683b      	ldr	r3, [r7, #0]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d101      	bne.n	8019554 <xQueueSemaphoreTake+0x64>
 8019550:	2301      	movs	r3, #1
 8019552:	e000      	b.n	8019556 <xQueueSemaphoreTake+0x66>
 8019554:	2300      	movs	r3, #0
 8019556:	2b00      	cmp	r3, #0
 8019558:	d10a      	bne.n	8019570 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801955a:	f04f 0320 	mov.w	r3, #32
 801955e:	f383 8811 	msr	BASEPRI, r3
 8019562:	f3bf 8f6f 	isb	sy
 8019566:	f3bf 8f4f 	dsb	sy
 801956a:	61bb      	str	r3, [r7, #24]
}
 801956c:	bf00      	nop
 801956e:	e7fe      	b.n	801956e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019570:	f002 f858 	bl	801b624 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019578:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801957c:	2b00      	cmp	r3, #0
 801957e:	d024      	beq.n	80195ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019582:	1e5a      	subs	r2, r3, #1
 8019584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019586:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d104      	bne.n	801959a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019590:	f001 fb8c 	bl	801acac <pvTaskIncrementMutexHeldCount>
 8019594:	4602      	mov	r2, r0
 8019596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019598:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801959c:	691b      	ldr	r3, [r3, #16]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d00f      	beq.n	80195c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80195a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195a4:	3310      	adds	r3, #16
 80195a6:	4618      	mov	r0, r3
 80195a8:	f001 f824 	bl	801a5f4 <xTaskRemoveFromEventList>
 80195ac:	4603      	mov	r3, r0
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d007      	beq.n	80195c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80195b2:	4b54      	ldr	r3, [pc, #336]	; (8019704 <xQueueSemaphoreTake+0x214>)
 80195b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80195b8:	601a      	str	r2, [r3, #0]
 80195ba:	f3bf 8f4f 	dsb	sy
 80195be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80195c2:	f002 f85f 	bl	801b684 <vPortExitCritical>
				return pdPASS;
 80195c6:	2301      	movs	r3, #1
 80195c8:	e097      	b.n	80196fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d111      	bne.n	80195f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80195d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d00a      	beq.n	80195ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80195d6:	f04f 0320 	mov.w	r3, #32
 80195da:	f383 8811 	msr	BASEPRI, r3
 80195de:	f3bf 8f6f 	isb	sy
 80195e2:	f3bf 8f4f 	dsb	sy
 80195e6:	617b      	str	r3, [r7, #20]
}
 80195e8:	bf00      	nop
 80195ea:	e7fe      	b.n	80195ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80195ec:	f002 f84a 	bl	801b684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80195f0:	2300      	movs	r3, #0
 80195f2:	e082      	b.n	80196fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80195f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d106      	bne.n	8019608 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80195fa:	f107 030c 	add.w	r3, r7, #12
 80195fe:	4618      	mov	r0, r3
 8019600:	f001 f85a 	bl	801a6b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019604:	2301      	movs	r3, #1
 8019606:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019608:	f002 f83c 	bl	801b684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801960c:	f000 fdae 	bl	801a16c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019610:	f002 f808 	bl	801b624 <vPortEnterCritical>
 8019614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801961a:	b25b      	sxtb	r3, r3
 801961c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019620:	d103      	bne.n	801962a <xQueueSemaphoreTake+0x13a>
 8019622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019624:	2200      	movs	r2, #0
 8019626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801962c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019630:	b25b      	sxtb	r3, r3
 8019632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019636:	d103      	bne.n	8019640 <xQueueSemaphoreTake+0x150>
 8019638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801963a:	2200      	movs	r2, #0
 801963c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019640:	f002 f820 	bl	801b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019644:	463a      	mov	r2, r7
 8019646:	f107 030c 	add.w	r3, r7, #12
 801964a:	4611      	mov	r1, r2
 801964c:	4618      	mov	r0, r3
 801964e:	f001 f849 	bl	801a6e4 <xTaskCheckForTimeOut>
 8019652:	4603      	mov	r3, r0
 8019654:	2b00      	cmp	r3, #0
 8019656:	d132      	bne.n	80196be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801965a:	f000 f9cf 	bl	80199fc <prvIsQueueEmpty>
 801965e:	4603      	mov	r3, r0
 8019660:	2b00      	cmp	r3, #0
 8019662:	d026      	beq.n	80196b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d109      	bne.n	8019680 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801966c:	f001 ffda 	bl	801b624 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019672:	689b      	ldr	r3, [r3, #8]
 8019674:	4618      	mov	r0, r3
 8019676:	f001 f979 	bl	801a96c <xTaskPriorityInherit>
 801967a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801967c:	f002 f802 	bl	801b684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019682:	3324      	adds	r3, #36	; 0x24
 8019684:	683a      	ldr	r2, [r7, #0]
 8019686:	4611      	mov	r1, r2
 8019688:	4618      	mov	r0, r3
 801968a:	f000 ff63 	bl	801a554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801968e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019690:	f000 f962 	bl	8019958 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019694:	f000 fd78 	bl	801a188 <xTaskResumeAll>
 8019698:	4603      	mov	r3, r0
 801969a:	2b00      	cmp	r3, #0
 801969c:	f47f af68 	bne.w	8019570 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80196a0:	4b18      	ldr	r3, [pc, #96]	; (8019704 <xQueueSemaphoreTake+0x214>)
 80196a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80196a6:	601a      	str	r2, [r3, #0]
 80196a8:	f3bf 8f4f 	dsb	sy
 80196ac:	f3bf 8f6f 	isb	sy
 80196b0:	e75e      	b.n	8019570 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80196b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196b4:	f000 f950 	bl	8019958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80196b8:	f000 fd66 	bl	801a188 <xTaskResumeAll>
 80196bc:	e758      	b.n	8019570 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80196be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196c0:	f000 f94a 	bl	8019958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80196c4:	f000 fd60 	bl	801a188 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80196c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196ca:	f000 f997 	bl	80199fc <prvIsQueueEmpty>
 80196ce:	4603      	mov	r3, r0
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	f43f af4d 	beq.w	8019570 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80196d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d00d      	beq.n	80196f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80196dc:	f001 ffa2 	bl	801b624 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80196e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196e2:	f000 f891 	bl	8019808 <prvGetDisinheritPriorityAfterTimeout>
 80196e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80196e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ea:	689b      	ldr	r3, [r3, #8]
 80196ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80196ee:	4618      	mov	r0, r3
 80196f0:	f001 fa42 	bl	801ab78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80196f4:	f001 ffc6 	bl	801b684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80196f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80196fa:	4618      	mov	r0, r3
 80196fc:	3738      	adds	r7, #56	; 0x38
 80196fe:	46bd      	mov	sp, r7
 8019700:	bd80      	pop	{r7, pc}
 8019702:	bf00      	nop
 8019704:	e000ed04 	.word	0xe000ed04

08019708 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019708:	b580      	push	{r7, lr}
 801970a:	b08e      	sub	sp, #56	; 0x38
 801970c:	af00      	add	r7, sp, #0
 801970e:	60f8      	str	r0, [r7, #12]
 8019710:	60b9      	str	r1, [r7, #8]
 8019712:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801971a:	2b00      	cmp	r3, #0
 801971c:	d10a      	bne.n	8019734 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801971e:	f04f 0320 	mov.w	r3, #32
 8019722:	f383 8811 	msr	BASEPRI, r3
 8019726:	f3bf 8f6f 	isb	sy
 801972a:	f3bf 8f4f 	dsb	sy
 801972e:	623b      	str	r3, [r7, #32]
}
 8019730:	bf00      	nop
 8019732:	e7fe      	b.n	8019732 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019734:	68bb      	ldr	r3, [r7, #8]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d103      	bne.n	8019742 <xQueueReceiveFromISR+0x3a>
 801973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801973e:	2b00      	cmp	r3, #0
 8019740:	d101      	bne.n	8019746 <xQueueReceiveFromISR+0x3e>
 8019742:	2301      	movs	r3, #1
 8019744:	e000      	b.n	8019748 <xQueueReceiveFromISR+0x40>
 8019746:	2300      	movs	r3, #0
 8019748:	2b00      	cmp	r3, #0
 801974a:	d10a      	bne.n	8019762 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801974c:	f04f 0320 	mov.w	r3, #32
 8019750:	f383 8811 	msr	BASEPRI, r3
 8019754:	f3bf 8f6f 	isb	sy
 8019758:	f3bf 8f4f 	dsb	sy
 801975c:	61fb      	str	r3, [r7, #28]
}
 801975e:	bf00      	nop
 8019760:	e7fe      	b.n	8019760 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019762:	f002 f841 	bl	801b7e8 <vPortValidateInterruptPriority>
	__asm volatile
 8019766:	f3ef 8211 	mrs	r2, BASEPRI
 801976a:	f04f 0320 	mov.w	r3, #32
 801976e:	f383 8811 	msr	BASEPRI, r3
 8019772:	f3bf 8f6f 	isb	sy
 8019776:	f3bf 8f4f 	dsb	sy
 801977a:	61ba      	str	r2, [r7, #24]
 801977c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801977e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019780:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019786:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801978a:	2b00      	cmp	r3, #0
 801978c:	d02f      	beq.n	80197ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019798:	68b9      	ldr	r1, [r7, #8]
 801979a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801979c:	f000 f8b6 	bl	801990c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80197a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197a2:	1e5a      	subs	r2, r3, #1
 80197a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80197a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80197ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197b0:	d112      	bne.n	80197d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80197b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197b4:	691b      	ldr	r3, [r3, #16]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d016      	beq.n	80197e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80197ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197bc:	3310      	adds	r3, #16
 80197be:	4618      	mov	r0, r3
 80197c0:	f000 ff18 	bl	801a5f4 <xTaskRemoveFromEventList>
 80197c4:	4603      	mov	r3, r0
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d00e      	beq.n	80197e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d00b      	beq.n	80197e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	2201      	movs	r2, #1
 80197d4:	601a      	str	r2, [r3, #0]
 80197d6:	e007      	b.n	80197e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80197d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197dc:	3301      	adds	r3, #1
 80197de:	b2db      	uxtb	r3, r3
 80197e0:	b25a      	sxtb	r2, r3
 80197e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80197e8:	2301      	movs	r3, #1
 80197ea:	637b      	str	r3, [r7, #52]	; 0x34
 80197ec:	e001      	b.n	80197f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80197ee:	2300      	movs	r3, #0
 80197f0:	637b      	str	r3, [r7, #52]	; 0x34
 80197f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80197f6:	693b      	ldr	r3, [r7, #16]
 80197f8:	f383 8811 	msr	BASEPRI, r3
}
 80197fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80197fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019800:	4618      	mov	r0, r3
 8019802:	3738      	adds	r7, #56	; 0x38
 8019804:	46bd      	mov	sp, r7
 8019806:	bd80      	pop	{r7, pc}

08019808 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8019808:	b480      	push	{r7}
 801980a:	b085      	sub	sp, #20
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019814:	2b00      	cmp	r3, #0
 8019816:	d006      	beq.n	8019826 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	f1c3 0307 	rsb	r3, r3, #7
 8019822:	60fb      	str	r3, [r7, #12]
 8019824:	e001      	b.n	801982a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8019826:	2300      	movs	r3, #0
 8019828:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801982a:	68fb      	ldr	r3, [r7, #12]
	}
 801982c:	4618      	mov	r0, r3
 801982e:	3714      	adds	r7, #20
 8019830:	46bd      	mov	sp, r7
 8019832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019836:	4770      	bx	lr

08019838 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b086      	sub	sp, #24
 801983c:	af00      	add	r7, sp, #0
 801983e:	60f8      	str	r0, [r7, #12]
 8019840:	60b9      	str	r1, [r7, #8]
 8019842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019844:	2300      	movs	r3, #0
 8019846:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801984c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019852:	2b00      	cmp	r3, #0
 8019854:	d10d      	bne.n	8019872 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d14d      	bne.n	80198fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	689b      	ldr	r3, [r3, #8]
 8019862:	4618      	mov	r0, r3
 8019864:	f001 f902 	bl	801aa6c <xTaskPriorityDisinherit>
 8019868:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	2200      	movs	r2, #0
 801986e:	609a      	str	r2, [r3, #8]
 8019870:	e043      	b.n	80198fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d119      	bne.n	80198ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	6858      	ldr	r0, [r3, #4]
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019880:	461a      	mov	r2, r3
 8019882:	68b9      	ldr	r1, [r7, #8]
 8019884:	f005 fd46 	bl	801f314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	685a      	ldr	r2, [r3, #4]
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019890:	441a      	add	r2, r3
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	685a      	ldr	r2, [r3, #4]
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	689b      	ldr	r3, [r3, #8]
 801989e:	429a      	cmp	r2, r3
 80198a0:	d32b      	bcc.n	80198fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	681a      	ldr	r2, [r3, #0]
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	605a      	str	r2, [r3, #4]
 80198aa:	e026      	b.n	80198fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	68d8      	ldr	r0, [r3, #12]
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198b4:	461a      	mov	r2, r3
 80198b6:	68b9      	ldr	r1, [r7, #8]
 80198b8:	f005 fd2c 	bl	801f314 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	68da      	ldr	r2, [r3, #12]
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198c4:	425b      	negs	r3, r3
 80198c6:	441a      	add	r2, r3
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	68da      	ldr	r2, [r3, #12]
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	429a      	cmp	r2, r3
 80198d6:	d207      	bcs.n	80198e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	689a      	ldr	r2, [r3, #8]
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198e0:	425b      	negs	r3, r3
 80198e2:	441a      	add	r2, r3
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	2b02      	cmp	r3, #2
 80198ec:	d105      	bne.n	80198fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80198ee:	693b      	ldr	r3, [r7, #16]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d002      	beq.n	80198fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80198f4:	693b      	ldr	r3, [r7, #16]
 80198f6:	3b01      	subs	r3, #1
 80198f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80198fa:	693b      	ldr	r3, [r7, #16]
 80198fc:	1c5a      	adds	r2, r3, #1
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8019902:	697b      	ldr	r3, [r7, #20]
}
 8019904:	4618      	mov	r0, r3
 8019906:	3718      	adds	r7, #24
 8019908:	46bd      	mov	sp, r7
 801990a:	bd80      	pop	{r7, pc}

0801990c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b082      	sub	sp, #8
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
 8019914:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801991a:	2b00      	cmp	r3, #0
 801991c:	d018      	beq.n	8019950 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	68da      	ldr	r2, [r3, #12]
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019926:	441a      	add	r2, r3
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	68da      	ldr	r2, [r3, #12]
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	689b      	ldr	r3, [r3, #8]
 8019934:	429a      	cmp	r2, r3
 8019936:	d303      	bcc.n	8019940 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	681a      	ldr	r2, [r3, #0]
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	68d9      	ldr	r1, [r3, #12]
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019948:	461a      	mov	r2, r3
 801994a:	6838      	ldr	r0, [r7, #0]
 801994c:	f005 fce2 	bl	801f314 <memcpy>
	}
}
 8019950:	bf00      	nop
 8019952:	3708      	adds	r7, #8
 8019954:	46bd      	mov	sp, r7
 8019956:	bd80      	pop	{r7, pc}

08019958 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b084      	sub	sp, #16
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019960:	f001 fe60 	bl	801b624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801996a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801996c:	e011      	b.n	8019992 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019972:	2b00      	cmp	r3, #0
 8019974:	d012      	beq.n	801999c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	3324      	adds	r3, #36	; 0x24
 801997a:	4618      	mov	r0, r3
 801997c:	f000 fe3a 	bl	801a5f4 <xTaskRemoveFromEventList>
 8019980:	4603      	mov	r3, r0
 8019982:	2b00      	cmp	r3, #0
 8019984:	d001      	beq.n	801998a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019986:	f000 ff0f 	bl	801a7a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801998a:	7bfb      	ldrb	r3, [r7, #15]
 801998c:	3b01      	subs	r3, #1
 801998e:	b2db      	uxtb	r3, r3
 8019990:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019996:	2b00      	cmp	r3, #0
 8019998:	dce9      	bgt.n	801996e <prvUnlockQueue+0x16>
 801999a:	e000      	b.n	801999e <prvUnlockQueue+0x46>
					break;
 801999c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	22ff      	movs	r2, #255	; 0xff
 80199a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80199a6:	f001 fe6d 	bl	801b684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80199aa:	f001 fe3b 	bl	801b624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80199b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80199b6:	e011      	b.n	80199dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	691b      	ldr	r3, [r3, #16]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d012      	beq.n	80199e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	3310      	adds	r3, #16
 80199c4:	4618      	mov	r0, r3
 80199c6:	f000 fe15 	bl	801a5f4 <xTaskRemoveFromEventList>
 80199ca:	4603      	mov	r3, r0
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d001      	beq.n	80199d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80199d0:	f000 feea 	bl	801a7a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80199d4:	7bbb      	ldrb	r3, [r7, #14]
 80199d6:	3b01      	subs	r3, #1
 80199d8:	b2db      	uxtb	r3, r3
 80199da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80199dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	dce9      	bgt.n	80199b8 <prvUnlockQueue+0x60>
 80199e4:	e000      	b.n	80199e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80199e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	22ff      	movs	r2, #255	; 0xff
 80199ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80199f0:	f001 fe48 	bl	801b684 <vPortExitCritical>
}
 80199f4:	bf00      	nop
 80199f6:	3710      	adds	r7, #16
 80199f8:	46bd      	mov	sp, r7
 80199fa:	bd80      	pop	{r7, pc}

080199fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80199fc:	b580      	push	{r7, lr}
 80199fe:	b084      	sub	sp, #16
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019a04:	f001 fe0e 	bl	801b624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d102      	bne.n	8019a16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019a10:	2301      	movs	r3, #1
 8019a12:	60fb      	str	r3, [r7, #12]
 8019a14:	e001      	b.n	8019a1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019a16:	2300      	movs	r3, #0
 8019a18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019a1a:	f001 fe33 	bl	801b684 <vPortExitCritical>

	return xReturn;
 8019a1e:	68fb      	ldr	r3, [r7, #12]
}
 8019a20:	4618      	mov	r0, r3
 8019a22:	3710      	adds	r7, #16
 8019a24:	46bd      	mov	sp, r7
 8019a26:	bd80      	pop	{r7, pc}

08019a28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8019a28:	b580      	push	{r7, lr}
 8019a2a:	b084      	sub	sp, #16
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019a30:	f001 fdf8 	bl	801b624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a3c:	429a      	cmp	r2, r3
 8019a3e:	d102      	bne.n	8019a46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019a40:	2301      	movs	r3, #1
 8019a42:	60fb      	str	r3, [r7, #12]
 8019a44:	e001      	b.n	8019a4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8019a46:	2300      	movs	r3, #0
 8019a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019a4a:	f001 fe1b 	bl	801b684 <vPortExitCritical>

	return xReturn;
 8019a4e:	68fb      	ldr	r3, [r7, #12]
}
 8019a50:	4618      	mov	r0, r3
 8019a52:	3710      	adds	r7, #16
 8019a54:	46bd      	mov	sp, r7
 8019a56:	bd80      	pop	{r7, pc}

08019a58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8019a58:	b480      	push	{r7}
 8019a5a:	b085      	sub	sp, #20
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	6078      	str	r0, [r7, #4]
 8019a60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019a62:	2300      	movs	r3, #0
 8019a64:	60fb      	str	r3, [r7, #12]
 8019a66:	e014      	b.n	8019a92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019a68:	4a0f      	ldr	r2, [pc, #60]	; (8019aa8 <vQueueAddToRegistry+0x50>)
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d10b      	bne.n	8019a8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019a74:	490c      	ldr	r1, [pc, #48]	; (8019aa8 <vQueueAddToRegistry+0x50>)
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	683a      	ldr	r2, [r7, #0]
 8019a7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019a7e:	4a0a      	ldr	r2, [pc, #40]	; (8019aa8 <vQueueAddToRegistry+0x50>)
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	00db      	lsls	r3, r3, #3
 8019a84:	4413      	add	r3, r2
 8019a86:	687a      	ldr	r2, [r7, #4]
 8019a88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019a8a:	e006      	b.n	8019a9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	3301      	adds	r3, #1
 8019a90:	60fb      	str	r3, [r7, #12]
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	2b63      	cmp	r3, #99	; 0x63
 8019a96:	d9e7      	bls.n	8019a68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019a98:	bf00      	nop
 8019a9a:	bf00      	nop
 8019a9c:	3714      	adds	r7, #20
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa4:	4770      	bx	lr
 8019aa6:	bf00      	nop
 8019aa8:	2001d140 	.word	0x2001d140

08019aac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b086      	sub	sp, #24
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	60f8      	str	r0, [r7, #12]
 8019ab4:	60b9      	str	r1, [r7, #8]
 8019ab6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019abc:	f001 fdb2 	bl	801b624 <vPortEnterCritical>
 8019ac0:	697b      	ldr	r3, [r7, #20]
 8019ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019ac6:	b25b      	sxtb	r3, r3
 8019ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019acc:	d103      	bne.n	8019ad6 <vQueueWaitForMessageRestricted+0x2a>
 8019ace:	697b      	ldr	r3, [r7, #20]
 8019ad0:	2200      	movs	r2, #0
 8019ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019ad6:	697b      	ldr	r3, [r7, #20]
 8019ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019adc:	b25b      	sxtb	r3, r3
 8019ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ae2:	d103      	bne.n	8019aec <vQueueWaitForMessageRestricted+0x40>
 8019ae4:	697b      	ldr	r3, [r7, #20]
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019aec:	f001 fdca 	bl	801b684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019af0:	697b      	ldr	r3, [r7, #20]
 8019af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d106      	bne.n	8019b06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019af8:	697b      	ldr	r3, [r7, #20]
 8019afa:	3324      	adds	r3, #36	; 0x24
 8019afc:	687a      	ldr	r2, [r7, #4]
 8019afe:	68b9      	ldr	r1, [r7, #8]
 8019b00:	4618      	mov	r0, r3
 8019b02:	f000 fd4b 	bl	801a59c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8019b06:	6978      	ldr	r0, [r7, #20]
 8019b08:	f7ff ff26 	bl	8019958 <prvUnlockQueue>
	}
 8019b0c:	bf00      	nop
 8019b0e:	3718      	adds	r7, #24
 8019b10:	46bd      	mov	sp, r7
 8019b12:	bd80      	pop	{r7, pc}

08019b14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b08c      	sub	sp, #48	; 0x30
 8019b18:	af04      	add	r7, sp, #16
 8019b1a:	60f8      	str	r0, [r7, #12]
 8019b1c:	60b9      	str	r1, [r7, #8]
 8019b1e:	603b      	str	r3, [r7, #0]
 8019b20:	4613      	mov	r3, r2
 8019b22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019b24:	88fb      	ldrh	r3, [r7, #6]
 8019b26:	009b      	lsls	r3, r3, #2
 8019b28:	4618      	mov	r0, r3
 8019b2a:	f001 fe9d 	bl	801b868 <pvPortMalloc>
 8019b2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019b30:	697b      	ldr	r3, [r7, #20]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d00e      	beq.n	8019b54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019b36:	2060      	movs	r0, #96	; 0x60
 8019b38:	f001 fe96 	bl	801b868 <pvPortMalloc>
 8019b3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019b3e:	69fb      	ldr	r3, [r7, #28]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d003      	beq.n	8019b4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019b44:	69fb      	ldr	r3, [r7, #28]
 8019b46:	697a      	ldr	r2, [r7, #20]
 8019b48:	631a      	str	r2, [r3, #48]	; 0x30
 8019b4a:	e005      	b.n	8019b58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019b4c:	6978      	ldr	r0, [r7, #20]
 8019b4e:	f001 ff4f 	bl	801b9f0 <vPortFree>
 8019b52:	e001      	b.n	8019b58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019b54:	2300      	movs	r3, #0
 8019b56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019b58:	69fb      	ldr	r3, [r7, #28]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d013      	beq.n	8019b86 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019b5e:	88fa      	ldrh	r2, [r7, #6]
 8019b60:	2300      	movs	r3, #0
 8019b62:	9303      	str	r3, [sp, #12]
 8019b64:	69fb      	ldr	r3, [r7, #28]
 8019b66:	9302      	str	r3, [sp, #8]
 8019b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b6a:	9301      	str	r3, [sp, #4]
 8019b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b6e:	9300      	str	r3, [sp, #0]
 8019b70:	683b      	ldr	r3, [r7, #0]
 8019b72:	68b9      	ldr	r1, [r7, #8]
 8019b74:	68f8      	ldr	r0, [r7, #12]
 8019b76:	f000 f80e 	bl	8019b96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019b7a:	69f8      	ldr	r0, [r7, #28]
 8019b7c:	f000 f89e 	bl	8019cbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019b80:	2301      	movs	r3, #1
 8019b82:	61bb      	str	r3, [r7, #24]
 8019b84:	e002      	b.n	8019b8c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019b86:	f04f 33ff 	mov.w	r3, #4294967295
 8019b8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019b8c:	69bb      	ldr	r3, [r7, #24]
	}
 8019b8e:	4618      	mov	r0, r3
 8019b90:	3720      	adds	r7, #32
 8019b92:	46bd      	mov	sp, r7
 8019b94:	bd80      	pop	{r7, pc}

08019b96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019b96:	b580      	push	{r7, lr}
 8019b98:	b088      	sub	sp, #32
 8019b9a:	af00      	add	r7, sp, #0
 8019b9c:	60f8      	str	r0, [r7, #12]
 8019b9e:	60b9      	str	r1, [r7, #8]
 8019ba0:	607a      	str	r2, [r7, #4]
 8019ba2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ba6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	009b      	lsls	r3, r3, #2
 8019bac:	461a      	mov	r2, r3
 8019bae:	21a5      	movs	r1, #165	; 0xa5
 8019bb0:	f005 fbd8 	bl	801f364 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019bbe:	3b01      	subs	r3, #1
 8019bc0:	009b      	lsls	r3, r3, #2
 8019bc2:	4413      	add	r3, r2
 8019bc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019bc6:	69bb      	ldr	r3, [r7, #24]
 8019bc8:	f023 0307 	bic.w	r3, r3, #7
 8019bcc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019bce:	69bb      	ldr	r3, [r7, #24]
 8019bd0:	f003 0307 	and.w	r3, r3, #7
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d00a      	beq.n	8019bee <prvInitialiseNewTask+0x58>
	__asm volatile
 8019bd8:	f04f 0320 	mov.w	r3, #32
 8019bdc:	f383 8811 	msr	BASEPRI, r3
 8019be0:	f3bf 8f6f 	isb	sy
 8019be4:	f3bf 8f4f 	dsb	sy
 8019be8:	617b      	str	r3, [r7, #20]
}
 8019bea:	bf00      	nop
 8019bec:	e7fe      	b.n	8019bec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019bee:	68bb      	ldr	r3, [r7, #8]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d01f      	beq.n	8019c34 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	61fb      	str	r3, [r7, #28]
 8019bf8:	e012      	b.n	8019c20 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019bfa:	68ba      	ldr	r2, [r7, #8]
 8019bfc:	69fb      	ldr	r3, [r7, #28]
 8019bfe:	4413      	add	r3, r2
 8019c00:	7819      	ldrb	r1, [r3, #0]
 8019c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c04:	69fb      	ldr	r3, [r7, #28]
 8019c06:	4413      	add	r3, r2
 8019c08:	3334      	adds	r3, #52	; 0x34
 8019c0a:	460a      	mov	r2, r1
 8019c0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019c0e:	68ba      	ldr	r2, [r7, #8]
 8019c10:	69fb      	ldr	r3, [r7, #28]
 8019c12:	4413      	add	r3, r2
 8019c14:	781b      	ldrb	r3, [r3, #0]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d006      	beq.n	8019c28 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019c1a:	69fb      	ldr	r3, [r7, #28]
 8019c1c:	3301      	adds	r3, #1
 8019c1e:	61fb      	str	r3, [r7, #28]
 8019c20:	69fb      	ldr	r3, [r7, #28]
 8019c22:	2b0f      	cmp	r3, #15
 8019c24:	d9e9      	bls.n	8019bfa <prvInitialiseNewTask+0x64>
 8019c26:	e000      	b.n	8019c2a <prvInitialiseNewTask+0x94>
			{
				break;
 8019c28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c2c:	2200      	movs	r2, #0
 8019c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019c32:	e003      	b.n	8019c3c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c36:	2200      	movs	r2, #0
 8019c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c3e:	2b06      	cmp	r3, #6
 8019c40:	d901      	bls.n	8019c46 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019c42:	2306      	movs	r3, #6
 8019c44:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c50:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c54:	2200      	movs	r2, #0
 8019c56:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c5a:	3304      	adds	r3, #4
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	f7fe ffb5 	bl	8018bcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c64:	3318      	adds	r3, #24
 8019c66:	4618      	mov	r0, r3
 8019c68:	f7fe ffb0 	bl	8018bcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c74:	f1c3 0207 	rsb	r2, r3, #7
 8019c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8019c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c84:	2200      	movs	r2, #0
 8019c86:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c8a:	2200      	movs	r2, #0
 8019c8c:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c90:	2200      	movs	r2, #0
 8019c92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019c96:	683a      	ldr	r2, [r7, #0]
 8019c98:	68f9      	ldr	r1, [r7, #12]
 8019c9a:	69b8      	ldr	r0, [r7, #24]
 8019c9c:	f001 fb92 	bl	801b3c4 <pxPortInitialiseStack>
 8019ca0:	4602      	mov	r2, r0
 8019ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ca4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d002      	beq.n	8019cb2 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019cb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019cb2:	bf00      	nop
 8019cb4:	3720      	adds	r7, #32
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	bd80      	pop	{r7, pc}
	...

08019cbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b082      	sub	sp, #8
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019cc4:	f001 fcae 	bl	801b624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019cc8:	4b2c      	ldr	r3, [pc, #176]	; (8019d7c <prvAddNewTaskToReadyList+0xc0>)
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	3301      	adds	r3, #1
 8019cce:	4a2b      	ldr	r2, [pc, #172]	; (8019d7c <prvAddNewTaskToReadyList+0xc0>)
 8019cd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019cd2:	4b2b      	ldr	r3, [pc, #172]	; (8019d80 <prvAddNewTaskToReadyList+0xc4>)
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d109      	bne.n	8019cee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019cda:	4a29      	ldr	r2, [pc, #164]	; (8019d80 <prvAddNewTaskToReadyList+0xc4>)
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019ce0:	4b26      	ldr	r3, [pc, #152]	; (8019d7c <prvAddNewTaskToReadyList+0xc0>)
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	2b01      	cmp	r3, #1
 8019ce6:	d110      	bne.n	8019d0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019ce8:	f000 fd84 	bl	801a7f4 <prvInitialiseTaskLists>
 8019cec:	e00d      	b.n	8019d0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019cee:	4b25      	ldr	r3, [pc, #148]	; (8019d84 <prvAddNewTaskToReadyList+0xc8>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d109      	bne.n	8019d0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019cf6:	4b22      	ldr	r3, [pc, #136]	; (8019d80 <prvAddNewTaskToReadyList+0xc4>)
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d00:	429a      	cmp	r2, r3
 8019d02:	d802      	bhi.n	8019d0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019d04:	4a1e      	ldr	r2, [pc, #120]	; (8019d80 <prvAddNewTaskToReadyList+0xc4>)
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019d0a:	4b1f      	ldr	r3, [pc, #124]	; (8019d88 <prvAddNewTaskToReadyList+0xcc>)
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	3301      	adds	r3, #1
 8019d10:	4a1d      	ldr	r2, [pc, #116]	; (8019d88 <prvAddNewTaskToReadyList+0xcc>)
 8019d12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019d14:	4b1c      	ldr	r3, [pc, #112]	; (8019d88 <prvAddNewTaskToReadyList+0xcc>)
 8019d16:	681a      	ldr	r2, [r3, #0]
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d20:	2201      	movs	r2, #1
 8019d22:	409a      	lsls	r2, r3
 8019d24:	4b19      	ldr	r3, [pc, #100]	; (8019d8c <prvAddNewTaskToReadyList+0xd0>)
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	4313      	orrs	r3, r2
 8019d2a:	4a18      	ldr	r2, [pc, #96]	; (8019d8c <prvAddNewTaskToReadyList+0xd0>)
 8019d2c:	6013      	str	r3, [r2, #0]
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d32:	4613      	mov	r3, r2
 8019d34:	009b      	lsls	r3, r3, #2
 8019d36:	4413      	add	r3, r2
 8019d38:	009b      	lsls	r3, r3, #2
 8019d3a:	4a15      	ldr	r2, [pc, #84]	; (8019d90 <prvAddNewTaskToReadyList+0xd4>)
 8019d3c:	441a      	add	r2, r3
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	3304      	adds	r3, #4
 8019d42:	4619      	mov	r1, r3
 8019d44:	4610      	mov	r0, r2
 8019d46:	f7fe ff4e 	bl	8018be6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019d4a:	f001 fc9b 	bl	801b684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019d4e:	4b0d      	ldr	r3, [pc, #52]	; (8019d84 <prvAddNewTaskToReadyList+0xc8>)
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d00e      	beq.n	8019d74 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019d56:	4b0a      	ldr	r3, [pc, #40]	; (8019d80 <prvAddNewTaskToReadyList+0xc4>)
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d60:	429a      	cmp	r2, r3
 8019d62:	d207      	bcs.n	8019d74 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019d64:	4b0b      	ldr	r3, [pc, #44]	; (8019d94 <prvAddNewTaskToReadyList+0xd8>)
 8019d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d6a:	601a      	str	r2, [r3, #0]
 8019d6c:	f3bf 8f4f 	dsb	sy
 8019d70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019d74:	bf00      	nop
 8019d76:	3708      	adds	r7, #8
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bd80      	pop	{r7, pc}
 8019d7c:	200011c8 	.word	0x200011c8
 8019d80:	200010c8 	.word	0x200010c8
 8019d84:	200011d4 	.word	0x200011d4
 8019d88:	200011e4 	.word	0x200011e4
 8019d8c:	200011d0 	.word	0x200011d0
 8019d90:	200010cc 	.word	0x200010cc
 8019d94:	e000ed04 	.word	0xe000ed04

08019d98 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b084      	sub	sp, #16
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8019da0:	f001 fc40 	bl	801b624 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d102      	bne.n	8019db0 <vTaskSuspend+0x18>
 8019daa:	4b3c      	ldr	r3, [pc, #240]	; (8019e9c <vTaskSuspend+0x104>)
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	e000      	b.n	8019db2 <vTaskSuspend+0x1a>
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	3304      	adds	r3, #4
 8019db8:	4618      	mov	r0, r3
 8019dba:	f7fe ff71 	bl	8018ca0 <uxListRemove>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d115      	bne.n	8019df0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019dc8:	4935      	ldr	r1, [pc, #212]	; (8019ea0 <vTaskSuspend+0x108>)
 8019dca:	4613      	mov	r3, r2
 8019dcc:	009b      	lsls	r3, r3, #2
 8019dce:	4413      	add	r3, r2
 8019dd0:	009b      	lsls	r3, r3, #2
 8019dd2:	440b      	add	r3, r1
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d10a      	bne.n	8019df0 <vTaskSuspend+0x58>
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dde:	2201      	movs	r2, #1
 8019de0:	fa02 f303 	lsl.w	r3, r2, r3
 8019de4:	43da      	mvns	r2, r3
 8019de6:	4b2f      	ldr	r3, [pc, #188]	; (8019ea4 <vTaskSuspend+0x10c>)
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	4013      	ands	r3, r2
 8019dec:	4a2d      	ldr	r2, [pc, #180]	; (8019ea4 <vTaskSuspend+0x10c>)
 8019dee:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d004      	beq.n	8019e02 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	3318      	adds	r3, #24
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	f7fe ff4f 	bl	8018ca0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	3304      	adds	r3, #4
 8019e06:	4619      	mov	r1, r3
 8019e08:	4827      	ldr	r0, [pc, #156]	; (8019ea8 <vTaskSuspend+0x110>)
 8019e0a:	f7fe feec 	bl	8018be6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8019e14:	b2db      	uxtb	r3, r3
 8019e16:	2b01      	cmp	r3, #1
 8019e18:	d103      	bne.n	8019e22 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	2200      	movs	r2, #0
 8019e1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8019e22:	f001 fc2f 	bl	801b684 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8019e26:	4b21      	ldr	r3, [pc, #132]	; (8019eac <vTaskSuspend+0x114>)
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d005      	beq.n	8019e3a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8019e2e:	f001 fbf9 	bl	801b624 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8019e32:	f000 fd5d 	bl	801a8f0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8019e36:	f001 fc25 	bl	801b684 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8019e3a:	4b18      	ldr	r3, [pc, #96]	; (8019e9c <vTaskSuspend+0x104>)
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	68fa      	ldr	r2, [r7, #12]
 8019e40:	429a      	cmp	r2, r3
 8019e42:	d127      	bne.n	8019e94 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8019e44:	4b19      	ldr	r3, [pc, #100]	; (8019eac <vTaskSuspend+0x114>)
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d017      	beq.n	8019e7c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8019e4c:	4b18      	ldr	r3, [pc, #96]	; (8019eb0 <vTaskSuspend+0x118>)
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d00a      	beq.n	8019e6a <vTaskSuspend+0xd2>
	__asm volatile
 8019e54:	f04f 0320 	mov.w	r3, #32
 8019e58:	f383 8811 	msr	BASEPRI, r3
 8019e5c:	f3bf 8f6f 	isb	sy
 8019e60:	f3bf 8f4f 	dsb	sy
 8019e64:	60bb      	str	r3, [r7, #8]
}
 8019e66:	bf00      	nop
 8019e68:	e7fe      	b.n	8019e68 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8019e6a:	4b12      	ldr	r3, [pc, #72]	; (8019eb4 <vTaskSuspend+0x11c>)
 8019e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e70:	601a      	str	r2, [r3, #0]
 8019e72:	f3bf 8f4f 	dsb	sy
 8019e76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019e7a:	e00b      	b.n	8019e94 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8019e7c:	4b0a      	ldr	r3, [pc, #40]	; (8019ea8 <vTaskSuspend+0x110>)
 8019e7e:	681a      	ldr	r2, [r3, #0]
 8019e80:	4b0d      	ldr	r3, [pc, #52]	; (8019eb8 <vTaskSuspend+0x120>)
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	429a      	cmp	r2, r3
 8019e86:	d103      	bne.n	8019e90 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8019e88:	4b04      	ldr	r3, [pc, #16]	; (8019e9c <vTaskSuspend+0x104>)
 8019e8a:	2200      	movs	r2, #0
 8019e8c:	601a      	str	r2, [r3, #0]
	}
 8019e8e:	e001      	b.n	8019e94 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8019e90:	f000 fafa 	bl	801a488 <vTaskSwitchContext>
	}
 8019e94:	bf00      	nop
 8019e96:	3710      	adds	r7, #16
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	bd80      	pop	{r7, pc}
 8019e9c:	200010c8 	.word	0x200010c8
 8019ea0:	200010cc 	.word	0x200010cc
 8019ea4:	200011d0 	.word	0x200011d0
 8019ea8:	200011b4 	.word	0x200011b4
 8019eac:	200011d4 	.word	0x200011d4
 8019eb0:	200011f0 	.word	0x200011f0
 8019eb4:	e000ed04 	.word	0xe000ed04
 8019eb8:	200011c8 	.word	0x200011c8

08019ebc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8019ebc:	b480      	push	{r7}
 8019ebe:	b087      	sub	sp, #28
 8019ec0:	af00      	add	r7, sp, #0
 8019ec2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d10a      	bne.n	8019ee8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8019ed2:	f04f 0320 	mov.w	r3, #32
 8019ed6:	f383 8811 	msr	BASEPRI, r3
 8019eda:	f3bf 8f6f 	isb	sy
 8019ede:	f3bf 8f4f 	dsb	sy
 8019ee2:	60fb      	str	r3, [r7, #12]
}
 8019ee4:	bf00      	nop
 8019ee6:	e7fe      	b.n	8019ee6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019ee8:	693b      	ldr	r3, [r7, #16]
 8019eea:	695b      	ldr	r3, [r3, #20]
 8019eec:	4a0a      	ldr	r2, [pc, #40]	; (8019f18 <prvTaskIsTaskSuspended+0x5c>)
 8019eee:	4293      	cmp	r3, r2
 8019ef0:	d10a      	bne.n	8019f08 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8019ef2:	693b      	ldr	r3, [r7, #16]
 8019ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ef6:	4a09      	ldr	r2, [pc, #36]	; (8019f1c <prvTaskIsTaskSuspended+0x60>)
 8019ef8:	4293      	cmp	r3, r2
 8019efa:	d005      	beq.n	8019f08 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8019efc:	693b      	ldr	r3, [r7, #16]
 8019efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d101      	bne.n	8019f08 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8019f04:	2301      	movs	r3, #1
 8019f06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019f08:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	371c      	adds	r7, #28
 8019f0e:	46bd      	mov	sp, r7
 8019f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f14:	4770      	bx	lr
 8019f16:	bf00      	nop
 8019f18:	200011b4 	.word	0x200011b4
 8019f1c:	20001188 	.word	0x20001188

08019f20 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b084      	sub	sp, #16
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d10a      	bne.n	8019f48 <vTaskResume+0x28>
	__asm volatile
 8019f32:	f04f 0320 	mov.w	r3, #32
 8019f36:	f383 8811 	msr	BASEPRI, r3
 8019f3a:	f3bf 8f6f 	isb	sy
 8019f3e:	f3bf 8f4f 	dsb	sy
 8019f42:	60bb      	str	r3, [r7, #8]
}
 8019f44:	bf00      	nop
 8019f46:	e7fe      	b.n	8019f46 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8019f48:	4b20      	ldr	r3, [pc, #128]	; (8019fcc <vTaskResume+0xac>)
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	68fa      	ldr	r2, [r7, #12]
 8019f4e:	429a      	cmp	r2, r3
 8019f50:	d037      	beq.n	8019fc2 <vTaskResume+0xa2>
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d034      	beq.n	8019fc2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8019f58:	f001 fb64 	bl	801b624 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8019f5c:	68f8      	ldr	r0, [r7, #12]
 8019f5e:	f7ff ffad 	bl	8019ebc <prvTaskIsTaskSuspended>
 8019f62:	4603      	mov	r3, r0
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d02a      	beq.n	8019fbe <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	3304      	adds	r3, #4
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f7fe fe97 	bl	8018ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f76:	2201      	movs	r2, #1
 8019f78:	409a      	lsls	r2, r3
 8019f7a:	4b15      	ldr	r3, [pc, #84]	; (8019fd0 <vTaskResume+0xb0>)
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	4313      	orrs	r3, r2
 8019f80:	4a13      	ldr	r2, [pc, #76]	; (8019fd0 <vTaskResume+0xb0>)
 8019f82:	6013      	str	r3, [r2, #0]
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f88:	4613      	mov	r3, r2
 8019f8a:	009b      	lsls	r3, r3, #2
 8019f8c:	4413      	add	r3, r2
 8019f8e:	009b      	lsls	r3, r3, #2
 8019f90:	4a10      	ldr	r2, [pc, #64]	; (8019fd4 <vTaskResume+0xb4>)
 8019f92:	441a      	add	r2, r3
 8019f94:	68fb      	ldr	r3, [r7, #12]
 8019f96:	3304      	adds	r3, #4
 8019f98:	4619      	mov	r1, r3
 8019f9a:	4610      	mov	r0, r2
 8019f9c:	f7fe fe23 	bl	8018be6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fa4:	4b09      	ldr	r3, [pc, #36]	; (8019fcc <vTaskResume+0xac>)
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019faa:	429a      	cmp	r2, r3
 8019fac:	d307      	bcc.n	8019fbe <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8019fae:	4b0a      	ldr	r3, [pc, #40]	; (8019fd8 <vTaskResume+0xb8>)
 8019fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019fb4:	601a      	str	r2, [r3, #0]
 8019fb6:	f3bf 8f4f 	dsb	sy
 8019fba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8019fbe:	f001 fb61 	bl	801b684 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019fc2:	bf00      	nop
 8019fc4:	3710      	adds	r7, #16
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	bd80      	pop	{r7, pc}
 8019fca:	bf00      	nop
 8019fcc:	200010c8 	.word	0x200010c8
 8019fd0:	200011d0 	.word	0x200011d0
 8019fd4:	200010cc 	.word	0x200010cc
 8019fd8:	e000ed04 	.word	0xe000ed04

08019fdc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8019fdc:	b580      	push	{r7, lr}
 8019fde:	b08a      	sub	sp, #40	; 0x28
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d10a      	bne.n	801a008 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8019ff2:	f04f 0320 	mov.w	r3, #32
 8019ff6:	f383 8811 	msr	BASEPRI, r3
 8019ffa:	f3bf 8f6f 	isb	sy
 8019ffe:	f3bf 8f4f 	dsb	sy
 801a002:	61bb      	str	r3, [r7, #24]
}
 801a004:	bf00      	nop
 801a006:	e7fe      	b.n	801a006 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a008:	f001 fbee 	bl	801b7e8 <vPortValidateInterruptPriority>
	__asm volatile
 801a00c:	f3ef 8211 	mrs	r2, BASEPRI
 801a010:	f04f 0320 	mov.w	r3, #32
 801a014:	f383 8811 	msr	BASEPRI, r3
 801a018:	f3bf 8f6f 	isb	sy
 801a01c:	f3bf 8f4f 	dsb	sy
 801a020:	617a      	str	r2, [r7, #20]
 801a022:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801a024:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a026:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801a028:	6a38      	ldr	r0, [r7, #32]
 801a02a:	f7ff ff47 	bl	8019ebc <prvTaskIsTaskSuspended>
 801a02e:	4603      	mov	r3, r0
 801a030:	2b00      	cmp	r3, #0
 801a032:	d02f      	beq.n	801a094 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a034:	4b1d      	ldr	r3, [pc, #116]	; (801a0ac <xTaskResumeFromISR+0xd0>)
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d125      	bne.n	801a088 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a03c:	6a3b      	ldr	r3, [r7, #32]
 801a03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a040:	4b1b      	ldr	r3, [pc, #108]	; (801a0b0 <xTaskResumeFromISR+0xd4>)
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a046:	429a      	cmp	r2, r3
 801a048:	d301      	bcc.n	801a04e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 801a04a:	2301      	movs	r3, #1
 801a04c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a04e:	6a3b      	ldr	r3, [r7, #32]
 801a050:	3304      	adds	r3, #4
 801a052:	4618      	mov	r0, r3
 801a054:	f7fe fe24 	bl	8018ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a058:	6a3b      	ldr	r3, [r7, #32]
 801a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a05c:	2201      	movs	r2, #1
 801a05e:	409a      	lsls	r2, r3
 801a060:	4b14      	ldr	r3, [pc, #80]	; (801a0b4 <xTaskResumeFromISR+0xd8>)
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	4313      	orrs	r3, r2
 801a066:	4a13      	ldr	r2, [pc, #76]	; (801a0b4 <xTaskResumeFromISR+0xd8>)
 801a068:	6013      	str	r3, [r2, #0]
 801a06a:	6a3b      	ldr	r3, [r7, #32]
 801a06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a06e:	4613      	mov	r3, r2
 801a070:	009b      	lsls	r3, r3, #2
 801a072:	4413      	add	r3, r2
 801a074:	009b      	lsls	r3, r3, #2
 801a076:	4a10      	ldr	r2, [pc, #64]	; (801a0b8 <xTaskResumeFromISR+0xdc>)
 801a078:	441a      	add	r2, r3
 801a07a:	6a3b      	ldr	r3, [r7, #32]
 801a07c:	3304      	adds	r3, #4
 801a07e:	4619      	mov	r1, r3
 801a080:	4610      	mov	r0, r2
 801a082:	f7fe fdb0 	bl	8018be6 <vListInsertEnd>
 801a086:	e005      	b.n	801a094 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801a088:	6a3b      	ldr	r3, [r7, #32]
 801a08a:	3318      	adds	r3, #24
 801a08c:	4619      	mov	r1, r3
 801a08e:	480b      	ldr	r0, [pc, #44]	; (801a0bc <xTaskResumeFromISR+0xe0>)
 801a090:	f7fe fda9 	bl	8018be6 <vListInsertEnd>
 801a094:	69fb      	ldr	r3, [r7, #28]
 801a096:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	f383 8811 	msr	BASEPRI, r3
}
 801a09e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	3728      	adds	r7, #40	; 0x28
 801a0a6:	46bd      	mov	sp, r7
 801a0a8:	bd80      	pop	{r7, pc}
 801a0aa:	bf00      	nop
 801a0ac:	200011f0 	.word	0x200011f0
 801a0b0:	200010c8 	.word	0x200010c8
 801a0b4:	200011d0 	.word	0x200011d0
 801a0b8:	200010cc 	.word	0x200010cc
 801a0bc:	20001188 	.word	0x20001188

0801a0c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b086      	sub	sp, #24
 801a0c4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801a0c6:	4b22      	ldr	r3, [pc, #136]	; (801a150 <vTaskStartScheduler+0x90>)
 801a0c8:	9301      	str	r3, [sp, #4]
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	9300      	str	r3, [sp, #0]
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	2280      	movs	r2, #128	; 0x80
 801a0d2:	4920      	ldr	r1, [pc, #128]	; (801a154 <vTaskStartScheduler+0x94>)
 801a0d4:	4820      	ldr	r0, [pc, #128]	; (801a158 <vTaskStartScheduler+0x98>)
 801a0d6:	f7ff fd1d 	bl	8019b14 <xTaskCreate>
 801a0da:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	2b01      	cmp	r3, #1
 801a0e0:	d102      	bne.n	801a0e8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 801a0e2:	f000 fe5d 	bl	801ada0 <xTimerCreateTimerTask>
 801a0e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	2b01      	cmp	r3, #1
 801a0ec:	d11c      	bne.n	801a128 <vTaskStartScheduler+0x68>
	__asm volatile
 801a0ee:	f04f 0320 	mov.w	r3, #32
 801a0f2:	f383 8811 	msr	BASEPRI, r3
 801a0f6:	f3bf 8f6f 	isb	sy
 801a0fa:	f3bf 8f4f 	dsb	sy
 801a0fe:	60bb      	str	r3, [r7, #8]
}
 801a100:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a102:	4b16      	ldr	r3, [pc, #88]	; (801a15c <vTaskStartScheduler+0x9c>)
 801a104:	f04f 32ff 	mov.w	r2, #4294967295
 801a108:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a10a:	4b15      	ldr	r3, [pc, #84]	; (801a160 <vTaskStartScheduler+0xa0>)
 801a10c:	2201      	movs	r2, #1
 801a10e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a110:	4b14      	ldr	r3, [pc, #80]	; (801a164 <vTaskStartScheduler+0xa4>)
 801a112:	2200      	movs	r2, #0
 801a114:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 801a116:	4b14      	ldr	r3, [pc, #80]	; (801a168 <vTaskStartScheduler+0xa8>)
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a11c:	4618      	mov	r0, r3
 801a11e:	f7ed faad 	bl	800767c <BSP_DEBUG_PIN_On>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a122:	f001 f9dd 	bl	801b4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a126:	e00e      	b.n	801a146 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a12e:	d10a      	bne.n	801a146 <vTaskStartScheduler+0x86>
	__asm volatile
 801a130:	f04f 0320 	mov.w	r3, #32
 801a134:	f383 8811 	msr	BASEPRI, r3
 801a138:	f3bf 8f6f 	isb	sy
 801a13c:	f3bf 8f4f 	dsb	sy
 801a140:	607b      	str	r3, [r7, #4]
}
 801a142:	bf00      	nop
 801a144:	e7fe      	b.n	801a144 <vTaskStartScheduler+0x84>
}
 801a146:	bf00      	nop
 801a148:	3710      	adds	r7, #16
 801a14a:	46bd      	mov	sp, r7
 801a14c:	bd80      	pop	{r7, pc}
 801a14e:	bf00      	nop
 801a150:	200011ec 	.word	0x200011ec
 801a154:	08023964 	.word	0x08023964
 801a158:	0801a7c1 	.word	0x0801a7c1
 801a15c:	200011e8 	.word	0x200011e8
 801a160:	200011d4 	.word	0x200011d4
 801a164:	200011cc 	.word	0x200011cc
 801a168:	200010c8 	.word	0x200010c8

0801a16c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a16c:	b480      	push	{r7}
 801a16e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801a170:	4b04      	ldr	r3, [pc, #16]	; (801a184 <vTaskSuspendAll+0x18>)
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	3301      	adds	r3, #1
 801a176:	4a03      	ldr	r2, [pc, #12]	; (801a184 <vTaskSuspendAll+0x18>)
 801a178:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801a17a:	bf00      	nop
 801a17c:	46bd      	mov	sp, r7
 801a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a182:	4770      	bx	lr
 801a184:	200011f0 	.word	0x200011f0

0801a188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b084      	sub	sp, #16
 801a18c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a18e:	2300      	movs	r3, #0
 801a190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a192:	2300      	movs	r3, #0
 801a194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a196:	4b41      	ldr	r3, [pc, #260]	; (801a29c <xTaskResumeAll+0x114>)
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d10a      	bne.n	801a1b4 <xTaskResumeAll+0x2c>
	__asm volatile
 801a19e:	f04f 0320 	mov.w	r3, #32
 801a1a2:	f383 8811 	msr	BASEPRI, r3
 801a1a6:	f3bf 8f6f 	isb	sy
 801a1aa:	f3bf 8f4f 	dsb	sy
 801a1ae:	603b      	str	r3, [r7, #0]
}
 801a1b0:	bf00      	nop
 801a1b2:	e7fe      	b.n	801a1b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a1b4:	f001 fa36 	bl	801b624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a1b8:	4b38      	ldr	r3, [pc, #224]	; (801a29c <xTaskResumeAll+0x114>)
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	3b01      	subs	r3, #1
 801a1be:	4a37      	ldr	r2, [pc, #220]	; (801a29c <xTaskResumeAll+0x114>)
 801a1c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a1c2:	4b36      	ldr	r3, [pc, #216]	; (801a29c <xTaskResumeAll+0x114>)
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d161      	bne.n	801a28e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a1ca:	4b35      	ldr	r3, [pc, #212]	; (801a2a0 <xTaskResumeAll+0x118>)
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d05d      	beq.n	801a28e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a1d2:	e02e      	b.n	801a232 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a1d4:	4b33      	ldr	r3, [pc, #204]	; (801a2a4 <xTaskResumeAll+0x11c>)
 801a1d6:	68db      	ldr	r3, [r3, #12]
 801a1d8:	68db      	ldr	r3, [r3, #12]
 801a1da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	3318      	adds	r3, #24
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7fe fd5d 	bl	8018ca0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	3304      	adds	r3, #4
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f7fe fd58 	bl	8018ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1f4:	2201      	movs	r2, #1
 801a1f6:	409a      	lsls	r2, r3
 801a1f8:	4b2b      	ldr	r3, [pc, #172]	; (801a2a8 <xTaskResumeAll+0x120>)
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	4313      	orrs	r3, r2
 801a1fe:	4a2a      	ldr	r2, [pc, #168]	; (801a2a8 <xTaskResumeAll+0x120>)
 801a200:	6013      	str	r3, [r2, #0]
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a206:	4613      	mov	r3, r2
 801a208:	009b      	lsls	r3, r3, #2
 801a20a:	4413      	add	r3, r2
 801a20c:	009b      	lsls	r3, r3, #2
 801a20e:	4a27      	ldr	r2, [pc, #156]	; (801a2ac <xTaskResumeAll+0x124>)
 801a210:	441a      	add	r2, r3
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	3304      	adds	r3, #4
 801a216:	4619      	mov	r1, r3
 801a218:	4610      	mov	r0, r2
 801a21a:	f7fe fce4 	bl	8018be6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a222:	4b23      	ldr	r3, [pc, #140]	; (801a2b0 <xTaskResumeAll+0x128>)
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a228:	429a      	cmp	r2, r3
 801a22a:	d302      	bcc.n	801a232 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801a22c:	4b21      	ldr	r3, [pc, #132]	; (801a2b4 <xTaskResumeAll+0x12c>)
 801a22e:	2201      	movs	r2, #1
 801a230:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a232:	4b1c      	ldr	r3, [pc, #112]	; (801a2a4 <xTaskResumeAll+0x11c>)
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d1cc      	bne.n	801a1d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d001      	beq.n	801a244 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a240:	f000 fb56 	bl	801a8f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801a244:	4b1c      	ldr	r3, [pc, #112]	; (801a2b8 <xTaskResumeAll+0x130>)
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d010      	beq.n	801a272 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a250:	f000 f846 	bl	801a2e0 <xTaskIncrementTick>
 801a254:	4603      	mov	r3, r0
 801a256:	2b00      	cmp	r3, #0
 801a258:	d002      	beq.n	801a260 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801a25a:	4b16      	ldr	r3, [pc, #88]	; (801a2b4 <xTaskResumeAll+0x12c>)
 801a25c:	2201      	movs	r2, #1
 801a25e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	3b01      	subs	r3, #1
 801a264:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d1f1      	bne.n	801a250 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801a26c:	4b12      	ldr	r3, [pc, #72]	; (801a2b8 <xTaskResumeAll+0x130>)
 801a26e:	2200      	movs	r2, #0
 801a270:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a272:	4b10      	ldr	r3, [pc, #64]	; (801a2b4 <xTaskResumeAll+0x12c>)
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d009      	beq.n	801a28e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a27a:	2301      	movs	r3, #1
 801a27c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a27e:	4b0f      	ldr	r3, [pc, #60]	; (801a2bc <xTaskResumeAll+0x134>)
 801a280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a284:	601a      	str	r2, [r3, #0]
 801a286:	f3bf 8f4f 	dsb	sy
 801a28a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a28e:	f001 f9f9 	bl	801b684 <vPortExitCritical>

	return xAlreadyYielded;
 801a292:	68bb      	ldr	r3, [r7, #8]
}
 801a294:	4618      	mov	r0, r3
 801a296:	3710      	adds	r7, #16
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}
 801a29c:	200011f0 	.word	0x200011f0
 801a2a0:	200011c8 	.word	0x200011c8
 801a2a4:	20001188 	.word	0x20001188
 801a2a8:	200011d0 	.word	0x200011d0
 801a2ac:	200010cc 	.word	0x200010cc
 801a2b0:	200010c8 	.word	0x200010c8
 801a2b4:	200011dc 	.word	0x200011dc
 801a2b8:	200011d8 	.word	0x200011d8
 801a2bc:	e000ed04 	.word	0xe000ed04

0801a2c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a2c0:	b480      	push	{r7}
 801a2c2:	b083      	sub	sp, #12
 801a2c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a2c6:	4b05      	ldr	r3, [pc, #20]	; (801a2dc <xTaskGetTickCount+0x1c>)
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a2cc:	687b      	ldr	r3, [r7, #4]
}
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	370c      	adds	r7, #12
 801a2d2:	46bd      	mov	sp, r7
 801a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d8:	4770      	bx	lr
 801a2da:	bf00      	nop
 801a2dc:	200011cc 	.word	0x200011cc

0801a2e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b086      	sub	sp, #24
 801a2e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a2ea:	4b4e      	ldr	r3, [pc, #312]	; (801a424 <xTaskIncrementTick+0x144>)
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	f040 8088 	bne.w	801a404 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a2f4:	4b4c      	ldr	r3, [pc, #304]	; (801a428 <xTaskIncrementTick+0x148>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	3301      	adds	r3, #1
 801a2fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a2fc:	4a4a      	ldr	r2, [pc, #296]	; (801a428 <xTaskIncrementTick+0x148>)
 801a2fe:	693b      	ldr	r3, [r7, #16]
 801a300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a302:	693b      	ldr	r3, [r7, #16]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d120      	bne.n	801a34a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801a308:	4b48      	ldr	r3, [pc, #288]	; (801a42c <xTaskIncrementTick+0x14c>)
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d00a      	beq.n	801a328 <xTaskIncrementTick+0x48>
	__asm volatile
 801a312:	f04f 0320 	mov.w	r3, #32
 801a316:	f383 8811 	msr	BASEPRI, r3
 801a31a:	f3bf 8f6f 	isb	sy
 801a31e:	f3bf 8f4f 	dsb	sy
 801a322:	603b      	str	r3, [r7, #0]
}
 801a324:	bf00      	nop
 801a326:	e7fe      	b.n	801a326 <xTaskIncrementTick+0x46>
 801a328:	4b40      	ldr	r3, [pc, #256]	; (801a42c <xTaskIncrementTick+0x14c>)
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	60fb      	str	r3, [r7, #12]
 801a32e:	4b40      	ldr	r3, [pc, #256]	; (801a430 <xTaskIncrementTick+0x150>)
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	4a3e      	ldr	r2, [pc, #248]	; (801a42c <xTaskIncrementTick+0x14c>)
 801a334:	6013      	str	r3, [r2, #0]
 801a336:	4a3e      	ldr	r2, [pc, #248]	; (801a430 <xTaskIncrementTick+0x150>)
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	6013      	str	r3, [r2, #0]
 801a33c:	4b3d      	ldr	r3, [pc, #244]	; (801a434 <xTaskIncrementTick+0x154>)
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	3301      	adds	r3, #1
 801a342:	4a3c      	ldr	r2, [pc, #240]	; (801a434 <xTaskIncrementTick+0x154>)
 801a344:	6013      	str	r3, [r2, #0]
 801a346:	f000 fad3 	bl	801a8f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a34a:	4b3b      	ldr	r3, [pc, #236]	; (801a438 <xTaskIncrementTick+0x158>)
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	693a      	ldr	r2, [r7, #16]
 801a350:	429a      	cmp	r2, r3
 801a352:	d348      	bcc.n	801a3e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a354:	4b35      	ldr	r3, [pc, #212]	; (801a42c <xTaskIncrementTick+0x14c>)
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d104      	bne.n	801a368 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a35e:	4b36      	ldr	r3, [pc, #216]	; (801a438 <xTaskIncrementTick+0x158>)
 801a360:	f04f 32ff 	mov.w	r2, #4294967295
 801a364:	601a      	str	r2, [r3, #0]
					break;
 801a366:	e03e      	b.n	801a3e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a368:	4b30      	ldr	r3, [pc, #192]	; (801a42c <xTaskIncrementTick+0x14c>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	68db      	ldr	r3, [r3, #12]
 801a36e:	68db      	ldr	r3, [r3, #12]
 801a370:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a372:	68bb      	ldr	r3, [r7, #8]
 801a374:	685b      	ldr	r3, [r3, #4]
 801a376:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a378:	693a      	ldr	r2, [r7, #16]
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	429a      	cmp	r2, r3
 801a37e:	d203      	bcs.n	801a388 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a380:	4a2d      	ldr	r2, [pc, #180]	; (801a438 <xTaskIncrementTick+0x158>)
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a386:	e02e      	b.n	801a3e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a388:	68bb      	ldr	r3, [r7, #8]
 801a38a:	3304      	adds	r3, #4
 801a38c:	4618      	mov	r0, r3
 801a38e:	f7fe fc87 	bl	8018ca0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a392:	68bb      	ldr	r3, [r7, #8]
 801a394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a396:	2b00      	cmp	r3, #0
 801a398:	d004      	beq.n	801a3a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a39a:	68bb      	ldr	r3, [r7, #8]
 801a39c:	3318      	adds	r3, #24
 801a39e:	4618      	mov	r0, r3
 801a3a0:	f7fe fc7e 	bl	8018ca0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3a8:	2201      	movs	r2, #1
 801a3aa:	409a      	lsls	r2, r3
 801a3ac:	4b23      	ldr	r3, [pc, #140]	; (801a43c <xTaskIncrementTick+0x15c>)
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	4313      	orrs	r3, r2
 801a3b2:	4a22      	ldr	r2, [pc, #136]	; (801a43c <xTaskIncrementTick+0x15c>)
 801a3b4:	6013      	str	r3, [r2, #0]
 801a3b6:	68bb      	ldr	r3, [r7, #8]
 801a3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3ba:	4613      	mov	r3, r2
 801a3bc:	009b      	lsls	r3, r3, #2
 801a3be:	4413      	add	r3, r2
 801a3c0:	009b      	lsls	r3, r3, #2
 801a3c2:	4a1f      	ldr	r2, [pc, #124]	; (801a440 <xTaskIncrementTick+0x160>)
 801a3c4:	441a      	add	r2, r3
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	3304      	adds	r3, #4
 801a3ca:	4619      	mov	r1, r3
 801a3cc:	4610      	mov	r0, r2
 801a3ce:	f7fe fc0a 	bl	8018be6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a3d2:	68bb      	ldr	r3, [r7, #8]
 801a3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3d6:	4b1b      	ldr	r3, [pc, #108]	; (801a444 <xTaskIncrementTick+0x164>)
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3dc:	429a      	cmp	r2, r3
 801a3de:	d3b9      	bcc.n	801a354 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801a3e0:	2301      	movs	r3, #1
 801a3e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a3e4:	e7b6      	b.n	801a354 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a3e6:	4b17      	ldr	r3, [pc, #92]	; (801a444 <xTaskIncrementTick+0x164>)
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3ec:	4914      	ldr	r1, [pc, #80]	; (801a440 <xTaskIncrementTick+0x160>)
 801a3ee:	4613      	mov	r3, r2
 801a3f0:	009b      	lsls	r3, r3, #2
 801a3f2:	4413      	add	r3, r2
 801a3f4:	009b      	lsls	r3, r3, #2
 801a3f6:	440b      	add	r3, r1
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	2b01      	cmp	r3, #1
 801a3fc:	d907      	bls.n	801a40e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801a3fe:	2301      	movs	r3, #1
 801a400:	617b      	str	r3, [r7, #20]
 801a402:	e004      	b.n	801a40e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801a404:	4b10      	ldr	r3, [pc, #64]	; (801a448 <xTaskIncrementTick+0x168>)
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	3301      	adds	r3, #1
 801a40a:	4a0f      	ldr	r2, [pc, #60]	; (801a448 <xTaskIncrementTick+0x168>)
 801a40c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801a40e:	4b0f      	ldr	r3, [pc, #60]	; (801a44c <xTaskIncrementTick+0x16c>)
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	2b00      	cmp	r3, #0
 801a414:	d001      	beq.n	801a41a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801a416:	2301      	movs	r3, #1
 801a418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801a41a:	697b      	ldr	r3, [r7, #20]
}
 801a41c:	4618      	mov	r0, r3
 801a41e:	3718      	adds	r7, #24
 801a420:	46bd      	mov	sp, r7
 801a422:	bd80      	pop	{r7, pc}
 801a424:	200011f0 	.word	0x200011f0
 801a428:	200011cc 	.word	0x200011cc
 801a42c:	20001180 	.word	0x20001180
 801a430:	20001184 	.word	0x20001184
 801a434:	200011e0 	.word	0x200011e0
 801a438:	200011e8 	.word	0x200011e8
 801a43c:	200011d0 	.word	0x200011d0
 801a440:	200010cc 	.word	0x200010cc
 801a444:	200010c8 	.word	0x200010c8
 801a448:	200011d8 	.word	0x200011d8
 801a44c:	200011dc 	.word	0x200011dc

0801a450 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 801a450:	b580      	push	{r7, lr}
 801a452:	b084      	sub	sp, #16
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d103      	bne.n	801a468 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 801a460:	4b08      	ldr	r3, [pc, #32]	; (801a484 <vTaskSetApplicationTaskTag+0x34>)
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	60fb      	str	r3, [r7, #12]
 801a466:	e001      	b.n	801a46c <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 801a46c:	f001 f8da 	bl	801b624 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	683a      	ldr	r2, [r7, #0]
 801a474:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 801a476:	f001 f905 	bl	801b684 <vPortExitCritical>
	}
 801a47a:	bf00      	nop
 801a47c:	3710      	adds	r7, #16
 801a47e:	46bd      	mov	sp, r7
 801a480:	bd80      	pop	{r7, pc}
 801a482:	bf00      	nop
 801a484:	200010c8 	.word	0x200010c8

0801a488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b086      	sub	sp, #24
 801a48c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a48e:	4b2c      	ldr	r3, [pc, #176]	; (801a540 <vTaskSwitchContext+0xb8>)
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	2b00      	cmp	r3, #0
 801a494:	d003      	beq.n	801a49e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a496:	4b2b      	ldr	r3, [pc, #172]	; (801a544 <vTaskSwitchContext+0xbc>)
 801a498:	2201      	movs	r2, #1
 801a49a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a49c:	e04b      	b.n	801a536 <vTaskSwitchContext+0xae>
		xYieldPending = pdFALSE;
 801a49e:	4b29      	ldr	r3, [pc, #164]	; (801a544 <vTaskSwitchContext+0xbc>)
 801a4a0:	2200      	movs	r2, #0
 801a4a2:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 801a4a4:	4b28      	ldr	r3, [pc, #160]	; (801a548 <vTaskSwitchContext+0xc0>)
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	f7ed f900 	bl	80076b0 <BSP_DEBUG_PIN_Off>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a4b0:	4b26      	ldr	r3, [pc, #152]	; (801a54c <vTaskSwitchContext+0xc4>)
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	fab3 f383 	clz	r3, r3
 801a4bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801a4be:	7afb      	ldrb	r3, [r7, #11]
 801a4c0:	f1c3 031f 	rsb	r3, r3, #31
 801a4c4:	617b      	str	r3, [r7, #20]
 801a4c6:	4922      	ldr	r1, [pc, #136]	; (801a550 <vTaskSwitchContext+0xc8>)
 801a4c8:	697a      	ldr	r2, [r7, #20]
 801a4ca:	4613      	mov	r3, r2
 801a4cc:	009b      	lsls	r3, r3, #2
 801a4ce:	4413      	add	r3, r2
 801a4d0:	009b      	lsls	r3, r3, #2
 801a4d2:	440b      	add	r3, r1
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d10a      	bne.n	801a4f0 <vTaskSwitchContext+0x68>
	__asm volatile
 801a4da:	f04f 0320 	mov.w	r3, #32
 801a4de:	f383 8811 	msr	BASEPRI, r3
 801a4e2:	f3bf 8f6f 	isb	sy
 801a4e6:	f3bf 8f4f 	dsb	sy
 801a4ea:	607b      	str	r3, [r7, #4]
}
 801a4ec:	bf00      	nop
 801a4ee:	e7fe      	b.n	801a4ee <vTaskSwitchContext+0x66>
 801a4f0:	697a      	ldr	r2, [r7, #20]
 801a4f2:	4613      	mov	r3, r2
 801a4f4:	009b      	lsls	r3, r3, #2
 801a4f6:	4413      	add	r3, r2
 801a4f8:	009b      	lsls	r3, r3, #2
 801a4fa:	4a15      	ldr	r2, [pc, #84]	; (801a550 <vTaskSwitchContext+0xc8>)
 801a4fc:	4413      	add	r3, r2
 801a4fe:	613b      	str	r3, [r7, #16]
 801a500:	693b      	ldr	r3, [r7, #16]
 801a502:	685b      	ldr	r3, [r3, #4]
 801a504:	685a      	ldr	r2, [r3, #4]
 801a506:	693b      	ldr	r3, [r7, #16]
 801a508:	605a      	str	r2, [r3, #4]
 801a50a:	693b      	ldr	r3, [r7, #16]
 801a50c:	685a      	ldr	r2, [r3, #4]
 801a50e:	693b      	ldr	r3, [r7, #16]
 801a510:	3308      	adds	r3, #8
 801a512:	429a      	cmp	r2, r3
 801a514:	d104      	bne.n	801a520 <vTaskSwitchContext+0x98>
 801a516:	693b      	ldr	r3, [r7, #16]
 801a518:	685b      	ldr	r3, [r3, #4]
 801a51a:	685a      	ldr	r2, [r3, #4]
 801a51c:	693b      	ldr	r3, [r7, #16]
 801a51e:	605a      	str	r2, [r3, #4]
 801a520:	693b      	ldr	r3, [r7, #16]
 801a522:	685b      	ldr	r3, [r3, #4]
 801a524:	68db      	ldr	r3, [r3, #12]
 801a526:	4a08      	ldr	r2, [pc, #32]	; (801a548 <vTaskSwitchContext+0xc0>)
 801a528:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801a52a:	4b07      	ldr	r3, [pc, #28]	; (801a548 <vTaskSwitchContext+0xc0>)
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a530:	4618      	mov	r0, r3
 801a532:	f7ed f8a3 	bl	800767c <BSP_DEBUG_PIN_On>
}
 801a536:	bf00      	nop
 801a538:	3718      	adds	r7, #24
 801a53a:	46bd      	mov	sp, r7
 801a53c:	bd80      	pop	{r7, pc}
 801a53e:	bf00      	nop
 801a540:	200011f0 	.word	0x200011f0
 801a544:	200011dc 	.word	0x200011dc
 801a548:	200010c8 	.word	0x200010c8
 801a54c:	200011d0 	.word	0x200011d0
 801a550:	200010cc 	.word	0x200010cc

0801a554 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a554:	b580      	push	{r7, lr}
 801a556:	b084      	sub	sp, #16
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
 801a55c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d10a      	bne.n	801a57a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801a564:	f04f 0320 	mov.w	r3, #32
 801a568:	f383 8811 	msr	BASEPRI, r3
 801a56c:	f3bf 8f6f 	isb	sy
 801a570:	f3bf 8f4f 	dsb	sy
 801a574:	60fb      	str	r3, [r7, #12]
}
 801a576:	bf00      	nop
 801a578:	e7fe      	b.n	801a578 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a57a:	4b07      	ldr	r3, [pc, #28]	; (801a598 <vTaskPlaceOnEventList+0x44>)
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	3318      	adds	r3, #24
 801a580:	4619      	mov	r1, r3
 801a582:	6878      	ldr	r0, [r7, #4]
 801a584:	f7fe fb53 	bl	8018c2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a588:	2101      	movs	r1, #1
 801a58a:	6838      	ldr	r0, [r7, #0]
 801a58c:	f000 fba2 	bl	801acd4 <prvAddCurrentTaskToDelayedList>
}
 801a590:	bf00      	nop
 801a592:	3710      	adds	r7, #16
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}
 801a598:	200010c8 	.word	0x200010c8

0801a59c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b086      	sub	sp, #24
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	60f8      	str	r0, [r7, #12]
 801a5a4:	60b9      	str	r1, [r7, #8]
 801a5a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d10a      	bne.n	801a5c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801a5ae:	f04f 0320 	mov.w	r3, #32
 801a5b2:	f383 8811 	msr	BASEPRI, r3
 801a5b6:	f3bf 8f6f 	isb	sy
 801a5ba:	f3bf 8f4f 	dsb	sy
 801a5be:	617b      	str	r3, [r7, #20]
}
 801a5c0:	bf00      	nop
 801a5c2:	e7fe      	b.n	801a5c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a5c4:	4b0a      	ldr	r3, [pc, #40]	; (801a5f0 <vTaskPlaceOnEventListRestricted+0x54>)
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	3318      	adds	r3, #24
 801a5ca:	4619      	mov	r1, r3
 801a5cc:	68f8      	ldr	r0, [r7, #12]
 801a5ce:	f7fe fb0a 	bl	8018be6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d002      	beq.n	801a5de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801a5d8:	f04f 33ff 	mov.w	r3, #4294967295
 801a5dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a5de:	6879      	ldr	r1, [r7, #4]
 801a5e0:	68b8      	ldr	r0, [r7, #8]
 801a5e2:	f000 fb77 	bl	801acd4 <prvAddCurrentTaskToDelayedList>
	}
 801a5e6:	bf00      	nop
 801a5e8:	3718      	adds	r7, #24
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}
 801a5ee:	bf00      	nop
 801a5f0:	200010c8 	.word	0x200010c8

0801a5f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b086      	sub	sp, #24
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	68db      	ldr	r3, [r3, #12]
 801a600:	68db      	ldr	r3, [r3, #12]
 801a602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a604:	693b      	ldr	r3, [r7, #16]
 801a606:	2b00      	cmp	r3, #0
 801a608:	d10a      	bne.n	801a620 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801a60a:	f04f 0320 	mov.w	r3, #32
 801a60e:	f383 8811 	msr	BASEPRI, r3
 801a612:	f3bf 8f6f 	isb	sy
 801a616:	f3bf 8f4f 	dsb	sy
 801a61a:	60fb      	str	r3, [r7, #12]
}
 801a61c:	bf00      	nop
 801a61e:	e7fe      	b.n	801a61e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a620:	693b      	ldr	r3, [r7, #16]
 801a622:	3318      	adds	r3, #24
 801a624:	4618      	mov	r0, r3
 801a626:	f7fe fb3b 	bl	8018ca0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a62a:	4b1d      	ldr	r3, [pc, #116]	; (801a6a0 <xTaskRemoveFromEventList+0xac>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d11c      	bne.n	801a66c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a632:	693b      	ldr	r3, [r7, #16]
 801a634:	3304      	adds	r3, #4
 801a636:	4618      	mov	r0, r3
 801a638:	f7fe fb32 	bl	8018ca0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a63c:	693b      	ldr	r3, [r7, #16]
 801a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a640:	2201      	movs	r2, #1
 801a642:	409a      	lsls	r2, r3
 801a644:	4b17      	ldr	r3, [pc, #92]	; (801a6a4 <xTaskRemoveFromEventList+0xb0>)
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	4313      	orrs	r3, r2
 801a64a:	4a16      	ldr	r2, [pc, #88]	; (801a6a4 <xTaskRemoveFromEventList+0xb0>)
 801a64c:	6013      	str	r3, [r2, #0]
 801a64e:	693b      	ldr	r3, [r7, #16]
 801a650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a652:	4613      	mov	r3, r2
 801a654:	009b      	lsls	r3, r3, #2
 801a656:	4413      	add	r3, r2
 801a658:	009b      	lsls	r3, r3, #2
 801a65a:	4a13      	ldr	r2, [pc, #76]	; (801a6a8 <xTaskRemoveFromEventList+0xb4>)
 801a65c:	441a      	add	r2, r3
 801a65e:	693b      	ldr	r3, [r7, #16]
 801a660:	3304      	adds	r3, #4
 801a662:	4619      	mov	r1, r3
 801a664:	4610      	mov	r0, r2
 801a666:	f7fe fabe 	bl	8018be6 <vListInsertEnd>
 801a66a:	e005      	b.n	801a678 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a66c:	693b      	ldr	r3, [r7, #16]
 801a66e:	3318      	adds	r3, #24
 801a670:	4619      	mov	r1, r3
 801a672:	480e      	ldr	r0, [pc, #56]	; (801a6ac <xTaskRemoveFromEventList+0xb8>)
 801a674:	f7fe fab7 	bl	8018be6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a678:	693b      	ldr	r3, [r7, #16]
 801a67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a67c:	4b0c      	ldr	r3, [pc, #48]	; (801a6b0 <xTaskRemoveFromEventList+0xbc>)
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a682:	429a      	cmp	r2, r3
 801a684:	d905      	bls.n	801a692 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a686:	2301      	movs	r3, #1
 801a688:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a68a:	4b0a      	ldr	r3, [pc, #40]	; (801a6b4 <xTaskRemoveFromEventList+0xc0>)
 801a68c:	2201      	movs	r2, #1
 801a68e:	601a      	str	r2, [r3, #0]
 801a690:	e001      	b.n	801a696 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801a692:	2300      	movs	r3, #0
 801a694:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a696:	697b      	ldr	r3, [r7, #20]
}
 801a698:	4618      	mov	r0, r3
 801a69a:	3718      	adds	r7, #24
 801a69c:	46bd      	mov	sp, r7
 801a69e:	bd80      	pop	{r7, pc}
 801a6a0:	200011f0 	.word	0x200011f0
 801a6a4:	200011d0 	.word	0x200011d0
 801a6a8:	200010cc 	.word	0x200010cc
 801a6ac:	20001188 	.word	0x20001188
 801a6b0:	200010c8 	.word	0x200010c8
 801a6b4:	200011dc 	.word	0x200011dc

0801a6b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a6b8:	b480      	push	{r7}
 801a6ba:	b083      	sub	sp, #12
 801a6bc:	af00      	add	r7, sp, #0
 801a6be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a6c0:	4b06      	ldr	r3, [pc, #24]	; (801a6dc <vTaskInternalSetTimeOutState+0x24>)
 801a6c2:	681a      	ldr	r2, [r3, #0]
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a6c8:	4b05      	ldr	r3, [pc, #20]	; (801a6e0 <vTaskInternalSetTimeOutState+0x28>)
 801a6ca:	681a      	ldr	r2, [r3, #0]
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	605a      	str	r2, [r3, #4]
}
 801a6d0:	bf00      	nop
 801a6d2:	370c      	adds	r7, #12
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6da:	4770      	bx	lr
 801a6dc:	200011e0 	.word	0x200011e0
 801a6e0:	200011cc 	.word	0x200011cc

0801a6e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a6e4:	b580      	push	{r7, lr}
 801a6e6:	b088      	sub	sp, #32
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
 801a6ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d10a      	bne.n	801a70a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801a6f4:	f04f 0320 	mov.w	r3, #32
 801a6f8:	f383 8811 	msr	BASEPRI, r3
 801a6fc:	f3bf 8f6f 	isb	sy
 801a700:	f3bf 8f4f 	dsb	sy
 801a704:	613b      	str	r3, [r7, #16]
}
 801a706:	bf00      	nop
 801a708:	e7fe      	b.n	801a708 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a70a:	683b      	ldr	r3, [r7, #0]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d10a      	bne.n	801a726 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801a710:	f04f 0320 	mov.w	r3, #32
 801a714:	f383 8811 	msr	BASEPRI, r3
 801a718:	f3bf 8f6f 	isb	sy
 801a71c:	f3bf 8f4f 	dsb	sy
 801a720:	60fb      	str	r3, [r7, #12]
}
 801a722:	bf00      	nop
 801a724:	e7fe      	b.n	801a724 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801a726:	f000 ff7d 	bl	801b624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a72a:	4b1d      	ldr	r3, [pc, #116]	; (801a7a0 <xTaskCheckForTimeOut+0xbc>)
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	685b      	ldr	r3, [r3, #4]
 801a734:	69ba      	ldr	r2, [r7, #24]
 801a736:	1ad3      	subs	r3, r2, r3
 801a738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a742:	d102      	bne.n	801a74a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a744:	2300      	movs	r3, #0
 801a746:	61fb      	str	r3, [r7, #28]
 801a748:	e023      	b.n	801a792 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	681a      	ldr	r2, [r3, #0]
 801a74e:	4b15      	ldr	r3, [pc, #84]	; (801a7a4 <xTaskCheckForTimeOut+0xc0>)
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	429a      	cmp	r2, r3
 801a754:	d007      	beq.n	801a766 <xTaskCheckForTimeOut+0x82>
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	685b      	ldr	r3, [r3, #4]
 801a75a:	69ba      	ldr	r2, [r7, #24]
 801a75c:	429a      	cmp	r2, r3
 801a75e:	d302      	bcc.n	801a766 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a760:	2301      	movs	r3, #1
 801a762:	61fb      	str	r3, [r7, #28]
 801a764:	e015      	b.n	801a792 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a766:	683b      	ldr	r3, [r7, #0]
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	697a      	ldr	r2, [r7, #20]
 801a76c:	429a      	cmp	r2, r3
 801a76e:	d20b      	bcs.n	801a788 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a770:	683b      	ldr	r3, [r7, #0]
 801a772:	681a      	ldr	r2, [r3, #0]
 801a774:	697b      	ldr	r3, [r7, #20]
 801a776:	1ad2      	subs	r2, r2, r3
 801a778:	683b      	ldr	r3, [r7, #0]
 801a77a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a77c:	6878      	ldr	r0, [r7, #4]
 801a77e:	f7ff ff9b 	bl	801a6b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a782:	2300      	movs	r3, #0
 801a784:	61fb      	str	r3, [r7, #28]
 801a786:	e004      	b.n	801a792 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801a788:	683b      	ldr	r3, [r7, #0]
 801a78a:	2200      	movs	r2, #0
 801a78c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a78e:	2301      	movs	r3, #1
 801a790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a792:	f000 ff77 	bl	801b684 <vPortExitCritical>

	return xReturn;
 801a796:	69fb      	ldr	r3, [r7, #28]
}
 801a798:	4618      	mov	r0, r3
 801a79a:	3720      	adds	r7, #32
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd80      	pop	{r7, pc}
 801a7a0:	200011cc 	.word	0x200011cc
 801a7a4:	200011e0 	.word	0x200011e0

0801a7a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a7a8:	b480      	push	{r7}
 801a7aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a7ac:	4b03      	ldr	r3, [pc, #12]	; (801a7bc <vTaskMissedYield+0x14>)
 801a7ae:	2201      	movs	r2, #1
 801a7b0:	601a      	str	r2, [r3, #0]
}
 801a7b2:	bf00      	nop
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ba:	4770      	bx	lr
 801a7bc:	200011dc 	.word	0x200011dc

0801a7c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a7c0:	b580      	push	{r7, lr}
 801a7c2:	b082      	sub	sp, #8
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a7c8:	f000 f854 	bl	801a874 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a7cc:	4b07      	ldr	r3, [pc, #28]	; (801a7ec <prvIdleTask+0x2c>)
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	2b01      	cmp	r3, #1
 801a7d2:	d907      	bls.n	801a7e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 801a7d4:	4b06      	ldr	r3, [pc, #24]	; (801a7f0 <prvIdleTask+0x30>)
 801a7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a7da:	601a      	str	r2, [r3, #0]
 801a7dc:	f3bf 8f4f 	dsb	sy
 801a7e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801a7e4:	f7e9 faaa 	bl	8003d3c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801a7e8:	e7ee      	b.n	801a7c8 <prvIdleTask+0x8>
 801a7ea:	bf00      	nop
 801a7ec:	200010cc 	.word	0x200010cc
 801a7f0:	e000ed04 	.word	0xe000ed04

0801a7f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a7f4:	b580      	push	{r7, lr}
 801a7f6:	b082      	sub	sp, #8
 801a7f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	607b      	str	r3, [r7, #4]
 801a7fe:	e00c      	b.n	801a81a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a800:	687a      	ldr	r2, [r7, #4]
 801a802:	4613      	mov	r3, r2
 801a804:	009b      	lsls	r3, r3, #2
 801a806:	4413      	add	r3, r2
 801a808:	009b      	lsls	r3, r3, #2
 801a80a:	4a12      	ldr	r2, [pc, #72]	; (801a854 <prvInitialiseTaskLists+0x60>)
 801a80c:	4413      	add	r3, r2
 801a80e:	4618      	mov	r0, r3
 801a810:	f7fe f9bc 	bl	8018b8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	3301      	adds	r3, #1
 801a818:	607b      	str	r3, [r7, #4]
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	2b06      	cmp	r3, #6
 801a81e:	d9ef      	bls.n	801a800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a820:	480d      	ldr	r0, [pc, #52]	; (801a858 <prvInitialiseTaskLists+0x64>)
 801a822:	f7fe f9b3 	bl	8018b8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a826:	480d      	ldr	r0, [pc, #52]	; (801a85c <prvInitialiseTaskLists+0x68>)
 801a828:	f7fe f9b0 	bl	8018b8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a82c:	480c      	ldr	r0, [pc, #48]	; (801a860 <prvInitialiseTaskLists+0x6c>)
 801a82e:	f7fe f9ad 	bl	8018b8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a832:	480c      	ldr	r0, [pc, #48]	; (801a864 <prvInitialiseTaskLists+0x70>)
 801a834:	f7fe f9aa 	bl	8018b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a838:	480b      	ldr	r0, [pc, #44]	; (801a868 <prvInitialiseTaskLists+0x74>)
 801a83a:	f7fe f9a7 	bl	8018b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a83e:	4b0b      	ldr	r3, [pc, #44]	; (801a86c <prvInitialiseTaskLists+0x78>)
 801a840:	4a05      	ldr	r2, [pc, #20]	; (801a858 <prvInitialiseTaskLists+0x64>)
 801a842:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a844:	4b0a      	ldr	r3, [pc, #40]	; (801a870 <prvInitialiseTaskLists+0x7c>)
 801a846:	4a05      	ldr	r2, [pc, #20]	; (801a85c <prvInitialiseTaskLists+0x68>)
 801a848:	601a      	str	r2, [r3, #0]
}
 801a84a:	bf00      	nop
 801a84c:	3708      	adds	r7, #8
 801a84e:	46bd      	mov	sp, r7
 801a850:	bd80      	pop	{r7, pc}
 801a852:	bf00      	nop
 801a854:	200010cc 	.word	0x200010cc
 801a858:	20001158 	.word	0x20001158
 801a85c:	2000116c 	.word	0x2000116c
 801a860:	20001188 	.word	0x20001188
 801a864:	2000119c 	.word	0x2000119c
 801a868:	200011b4 	.word	0x200011b4
 801a86c:	20001180 	.word	0x20001180
 801a870:	20001184 	.word	0x20001184

0801a874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a874:	b580      	push	{r7, lr}
 801a876:	b082      	sub	sp, #8
 801a878:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a87a:	e019      	b.n	801a8b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a87c:	f000 fed2 	bl	801b624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a880:	4b10      	ldr	r3, [pc, #64]	; (801a8c4 <prvCheckTasksWaitingTermination+0x50>)
 801a882:	68db      	ldr	r3, [r3, #12]
 801a884:	68db      	ldr	r3, [r3, #12]
 801a886:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	3304      	adds	r3, #4
 801a88c:	4618      	mov	r0, r3
 801a88e:	f7fe fa07 	bl	8018ca0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a892:	4b0d      	ldr	r3, [pc, #52]	; (801a8c8 <prvCheckTasksWaitingTermination+0x54>)
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	3b01      	subs	r3, #1
 801a898:	4a0b      	ldr	r2, [pc, #44]	; (801a8c8 <prvCheckTasksWaitingTermination+0x54>)
 801a89a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a89c:	4b0b      	ldr	r3, [pc, #44]	; (801a8cc <prvCheckTasksWaitingTermination+0x58>)
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	3b01      	subs	r3, #1
 801a8a2:	4a0a      	ldr	r2, [pc, #40]	; (801a8cc <prvCheckTasksWaitingTermination+0x58>)
 801a8a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a8a6:	f000 feed 	bl	801b684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a8aa:	6878      	ldr	r0, [r7, #4]
 801a8ac:	f000 f810 	bl	801a8d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a8b0:	4b06      	ldr	r3, [pc, #24]	; (801a8cc <prvCheckTasksWaitingTermination+0x58>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d1e1      	bne.n	801a87c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a8b8:	bf00      	nop
 801a8ba:	bf00      	nop
 801a8bc:	3708      	adds	r7, #8
 801a8be:	46bd      	mov	sp, r7
 801a8c0:	bd80      	pop	{r7, pc}
 801a8c2:	bf00      	nop
 801a8c4:	2000119c 	.word	0x2000119c
 801a8c8:	200011c8 	.word	0x200011c8
 801a8cc:	200011b0 	.word	0x200011b0

0801a8d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b082      	sub	sp, #8
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8dc:	4618      	mov	r0, r3
 801a8de:	f001 f887 	bl	801b9f0 <vPortFree>
			vPortFree( pxTCB );
 801a8e2:	6878      	ldr	r0, [r7, #4]
 801a8e4:	f001 f884 	bl	801b9f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a8e8:	bf00      	nop
 801a8ea:	3708      	adds	r7, #8
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	bd80      	pop	{r7, pc}

0801a8f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a8f0:	b480      	push	{r7}
 801a8f2:	b083      	sub	sp, #12
 801a8f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a8f6:	4b0c      	ldr	r3, [pc, #48]	; (801a928 <prvResetNextTaskUnblockTime+0x38>)
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d104      	bne.n	801a90a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a900:	4b0a      	ldr	r3, [pc, #40]	; (801a92c <prvResetNextTaskUnblockTime+0x3c>)
 801a902:	f04f 32ff 	mov.w	r2, #4294967295
 801a906:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a908:	e008      	b.n	801a91c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a90a:	4b07      	ldr	r3, [pc, #28]	; (801a928 <prvResetNextTaskUnblockTime+0x38>)
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	68db      	ldr	r3, [r3, #12]
 801a910:	68db      	ldr	r3, [r3, #12]
 801a912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	685b      	ldr	r3, [r3, #4]
 801a918:	4a04      	ldr	r2, [pc, #16]	; (801a92c <prvResetNextTaskUnblockTime+0x3c>)
 801a91a:	6013      	str	r3, [r2, #0]
}
 801a91c:	bf00      	nop
 801a91e:	370c      	adds	r7, #12
 801a920:	46bd      	mov	sp, r7
 801a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a926:	4770      	bx	lr
 801a928:	20001180 	.word	0x20001180
 801a92c:	200011e8 	.word	0x200011e8

0801a930 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a930:	b480      	push	{r7}
 801a932:	b083      	sub	sp, #12
 801a934:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a936:	4b0b      	ldr	r3, [pc, #44]	; (801a964 <xTaskGetSchedulerState+0x34>)
 801a938:	681b      	ldr	r3, [r3, #0]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d102      	bne.n	801a944 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a93e:	2301      	movs	r3, #1
 801a940:	607b      	str	r3, [r7, #4]
 801a942:	e008      	b.n	801a956 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a944:	4b08      	ldr	r3, [pc, #32]	; (801a968 <xTaskGetSchedulerState+0x38>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d102      	bne.n	801a952 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a94c:	2302      	movs	r3, #2
 801a94e:	607b      	str	r3, [r7, #4]
 801a950:	e001      	b.n	801a956 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a952:	2300      	movs	r3, #0
 801a954:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a956:	687b      	ldr	r3, [r7, #4]
	}
 801a958:	4618      	mov	r0, r3
 801a95a:	370c      	adds	r7, #12
 801a95c:	46bd      	mov	sp, r7
 801a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a962:	4770      	bx	lr
 801a964:	200011d4 	.word	0x200011d4
 801a968:	200011f0 	.word	0x200011f0

0801a96c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a96c:	b580      	push	{r7, lr}
 801a96e:	b084      	sub	sp, #16
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a978:	2300      	movs	r3, #0
 801a97a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d069      	beq.n	801aa56 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a982:	68bb      	ldr	r3, [r7, #8]
 801a984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a986:	4b36      	ldr	r3, [pc, #216]	; (801aa60 <xTaskPriorityInherit+0xf4>)
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a98c:	429a      	cmp	r2, r3
 801a98e:	d259      	bcs.n	801aa44 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a990:	68bb      	ldr	r3, [r7, #8]
 801a992:	699b      	ldr	r3, [r3, #24]
 801a994:	2b00      	cmp	r3, #0
 801a996:	db06      	blt.n	801a9a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a998:	4b31      	ldr	r3, [pc, #196]	; (801aa60 <xTaskPriorityInherit+0xf4>)
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a99e:	f1c3 0207 	rsb	r2, r3, #7
 801a9a2:	68bb      	ldr	r3, [r7, #8]
 801a9a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a9a6:	68bb      	ldr	r3, [r7, #8]
 801a9a8:	6959      	ldr	r1, [r3, #20]
 801a9aa:	68bb      	ldr	r3, [r7, #8]
 801a9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9ae:	4613      	mov	r3, r2
 801a9b0:	009b      	lsls	r3, r3, #2
 801a9b2:	4413      	add	r3, r2
 801a9b4:	009b      	lsls	r3, r3, #2
 801a9b6:	4a2b      	ldr	r2, [pc, #172]	; (801aa64 <xTaskPriorityInherit+0xf8>)
 801a9b8:	4413      	add	r3, r2
 801a9ba:	4299      	cmp	r1, r3
 801a9bc:	d13a      	bne.n	801aa34 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a9be:	68bb      	ldr	r3, [r7, #8]
 801a9c0:	3304      	adds	r3, #4
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	f7fe f96c 	bl	8018ca0 <uxListRemove>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d115      	bne.n	801a9fa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801a9ce:	68bb      	ldr	r3, [r7, #8]
 801a9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9d2:	4924      	ldr	r1, [pc, #144]	; (801aa64 <xTaskPriorityInherit+0xf8>)
 801a9d4:	4613      	mov	r3, r2
 801a9d6:	009b      	lsls	r3, r3, #2
 801a9d8:	4413      	add	r3, r2
 801a9da:	009b      	lsls	r3, r3, #2
 801a9dc:	440b      	add	r3, r1
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d10a      	bne.n	801a9fa <xTaskPriorityInherit+0x8e>
 801a9e4:	68bb      	ldr	r3, [r7, #8]
 801a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9e8:	2201      	movs	r2, #1
 801a9ea:	fa02 f303 	lsl.w	r3, r2, r3
 801a9ee:	43da      	mvns	r2, r3
 801a9f0:	4b1d      	ldr	r3, [pc, #116]	; (801aa68 <xTaskPriorityInherit+0xfc>)
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	4013      	ands	r3, r2
 801a9f6:	4a1c      	ldr	r2, [pc, #112]	; (801aa68 <xTaskPriorityInherit+0xfc>)
 801a9f8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a9fa:	4b19      	ldr	r3, [pc, #100]	; (801aa60 <xTaskPriorityInherit+0xf4>)
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa00:	68bb      	ldr	r3, [r7, #8]
 801aa02:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa08:	2201      	movs	r2, #1
 801aa0a:	409a      	lsls	r2, r3
 801aa0c:	4b16      	ldr	r3, [pc, #88]	; (801aa68 <xTaskPriorityInherit+0xfc>)
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	4313      	orrs	r3, r2
 801aa12:	4a15      	ldr	r2, [pc, #84]	; (801aa68 <xTaskPriorityInherit+0xfc>)
 801aa14:	6013      	str	r3, [r2, #0]
 801aa16:	68bb      	ldr	r3, [r7, #8]
 801aa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa1a:	4613      	mov	r3, r2
 801aa1c:	009b      	lsls	r3, r3, #2
 801aa1e:	4413      	add	r3, r2
 801aa20:	009b      	lsls	r3, r3, #2
 801aa22:	4a10      	ldr	r2, [pc, #64]	; (801aa64 <xTaskPriorityInherit+0xf8>)
 801aa24:	441a      	add	r2, r3
 801aa26:	68bb      	ldr	r3, [r7, #8]
 801aa28:	3304      	adds	r3, #4
 801aa2a:	4619      	mov	r1, r3
 801aa2c:	4610      	mov	r0, r2
 801aa2e:	f7fe f8da 	bl	8018be6 <vListInsertEnd>
 801aa32:	e004      	b.n	801aa3e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801aa34:	4b0a      	ldr	r3, [pc, #40]	; (801aa60 <xTaskPriorityInherit+0xf4>)
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa3a:	68bb      	ldr	r3, [r7, #8]
 801aa3c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801aa3e:	2301      	movs	r3, #1
 801aa40:	60fb      	str	r3, [r7, #12]
 801aa42:	e008      	b.n	801aa56 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801aa44:	68bb      	ldr	r3, [r7, #8]
 801aa46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801aa48:	4b05      	ldr	r3, [pc, #20]	; (801aa60 <xTaskPriorityInherit+0xf4>)
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa4e:	429a      	cmp	r2, r3
 801aa50:	d201      	bcs.n	801aa56 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801aa52:	2301      	movs	r3, #1
 801aa54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801aa56:	68fb      	ldr	r3, [r7, #12]
	}
 801aa58:	4618      	mov	r0, r3
 801aa5a:	3710      	adds	r7, #16
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	bd80      	pop	{r7, pc}
 801aa60:	200010c8 	.word	0x200010c8
 801aa64:	200010cc 	.word	0x200010cc
 801aa68:	200011d0 	.word	0x200011d0

0801aa6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b086      	sub	sp, #24
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801aa78:	2300      	movs	r3, #0
 801aa7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d06e      	beq.n	801ab60 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801aa82:	4b3a      	ldr	r3, [pc, #232]	; (801ab6c <xTaskPriorityDisinherit+0x100>)
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	693a      	ldr	r2, [r7, #16]
 801aa88:	429a      	cmp	r2, r3
 801aa8a:	d00a      	beq.n	801aaa2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801aa8c:	f04f 0320 	mov.w	r3, #32
 801aa90:	f383 8811 	msr	BASEPRI, r3
 801aa94:	f3bf 8f6f 	isb	sy
 801aa98:	f3bf 8f4f 	dsb	sy
 801aa9c:	60fb      	str	r3, [r7, #12]
}
 801aa9e:	bf00      	nop
 801aaa0:	e7fe      	b.n	801aaa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801aaa2:	693b      	ldr	r3, [r7, #16]
 801aaa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d10a      	bne.n	801aac0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801aaaa:	f04f 0320 	mov.w	r3, #32
 801aaae:	f383 8811 	msr	BASEPRI, r3
 801aab2:	f3bf 8f6f 	isb	sy
 801aab6:	f3bf 8f4f 	dsb	sy
 801aaba:	60bb      	str	r3, [r7, #8]
}
 801aabc:	bf00      	nop
 801aabe:	e7fe      	b.n	801aabe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801aac0:	693b      	ldr	r3, [r7, #16]
 801aac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aac4:	1e5a      	subs	r2, r3, #1
 801aac6:	693b      	ldr	r3, [r7, #16]
 801aac8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801aaca:	693b      	ldr	r3, [r7, #16]
 801aacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aace:	693b      	ldr	r3, [r7, #16]
 801aad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aad2:	429a      	cmp	r2, r3
 801aad4:	d044      	beq.n	801ab60 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801aad6:	693b      	ldr	r3, [r7, #16]
 801aad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d140      	bne.n	801ab60 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aade:	693b      	ldr	r3, [r7, #16]
 801aae0:	3304      	adds	r3, #4
 801aae2:	4618      	mov	r0, r3
 801aae4:	f7fe f8dc 	bl	8018ca0 <uxListRemove>
 801aae8:	4603      	mov	r3, r0
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d115      	bne.n	801ab1a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801aaee:	693b      	ldr	r3, [r7, #16]
 801aaf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aaf2:	491f      	ldr	r1, [pc, #124]	; (801ab70 <xTaskPriorityDisinherit+0x104>)
 801aaf4:	4613      	mov	r3, r2
 801aaf6:	009b      	lsls	r3, r3, #2
 801aaf8:	4413      	add	r3, r2
 801aafa:	009b      	lsls	r3, r3, #2
 801aafc:	440b      	add	r3, r1
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d10a      	bne.n	801ab1a <xTaskPriorityDisinherit+0xae>
 801ab04:	693b      	ldr	r3, [r7, #16]
 801ab06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab08:	2201      	movs	r2, #1
 801ab0a:	fa02 f303 	lsl.w	r3, r2, r3
 801ab0e:	43da      	mvns	r2, r3
 801ab10:	4b18      	ldr	r3, [pc, #96]	; (801ab74 <xTaskPriorityDisinherit+0x108>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	4013      	ands	r3, r2
 801ab16:	4a17      	ldr	r2, [pc, #92]	; (801ab74 <xTaskPriorityDisinherit+0x108>)
 801ab18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801ab1a:	693b      	ldr	r3, [r7, #16]
 801ab1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ab1e:	693b      	ldr	r3, [r7, #16]
 801ab20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ab22:	693b      	ldr	r3, [r7, #16]
 801ab24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab26:	f1c3 0207 	rsb	r2, r3, #7
 801ab2a:	693b      	ldr	r3, [r7, #16]
 801ab2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801ab2e:	693b      	ldr	r3, [r7, #16]
 801ab30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab32:	2201      	movs	r2, #1
 801ab34:	409a      	lsls	r2, r3
 801ab36:	4b0f      	ldr	r3, [pc, #60]	; (801ab74 <xTaskPriorityDisinherit+0x108>)
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	4313      	orrs	r3, r2
 801ab3c:	4a0d      	ldr	r2, [pc, #52]	; (801ab74 <xTaskPriorityDisinherit+0x108>)
 801ab3e:	6013      	str	r3, [r2, #0]
 801ab40:	693b      	ldr	r3, [r7, #16]
 801ab42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab44:	4613      	mov	r3, r2
 801ab46:	009b      	lsls	r3, r3, #2
 801ab48:	4413      	add	r3, r2
 801ab4a:	009b      	lsls	r3, r3, #2
 801ab4c:	4a08      	ldr	r2, [pc, #32]	; (801ab70 <xTaskPriorityDisinherit+0x104>)
 801ab4e:	441a      	add	r2, r3
 801ab50:	693b      	ldr	r3, [r7, #16]
 801ab52:	3304      	adds	r3, #4
 801ab54:	4619      	mov	r1, r3
 801ab56:	4610      	mov	r0, r2
 801ab58:	f7fe f845 	bl	8018be6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801ab5c:	2301      	movs	r3, #1
 801ab5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ab60:	697b      	ldr	r3, [r7, #20]
	}
 801ab62:	4618      	mov	r0, r3
 801ab64:	3718      	adds	r7, #24
 801ab66:	46bd      	mov	sp, r7
 801ab68:	bd80      	pop	{r7, pc}
 801ab6a:	bf00      	nop
 801ab6c:	200010c8 	.word	0x200010c8
 801ab70:	200010cc 	.word	0x200010cc
 801ab74:	200011d0 	.word	0x200011d0

0801ab78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b088      	sub	sp, #32
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
 801ab80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801ab86:	2301      	movs	r3, #1
 801ab88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	f000 8083 	beq.w	801ac98 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801ab92:	69bb      	ldr	r3, [r7, #24]
 801ab94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d10a      	bne.n	801abb0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801ab9a:	f04f 0320 	mov.w	r3, #32
 801ab9e:	f383 8811 	msr	BASEPRI, r3
 801aba2:	f3bf 8f6f 	isb	sy
 801aba6:	f3bf 8f4f 	dsb	sy
 801abaa:	60fb      	str	r3, [r7, #12]
}
 801abac:	bf00      	nop
 801abae:	e7fe      	b.n	801abae <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801abb0:	69bb      	ldr	r3, [r7, #24]
 801abb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801abb4:	683a      	ldr	r2, [r7, #0]
 801abb6:	429a      	cmp	r2, r3
 801abb8:	d902      	bls.n	801abc0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801abba:	683b      	ldr	r3, [r7, #0]
 801abbc:	61fb      	str	r3, [r7, #28]
 801abbe:	e002      	b.n	801abc6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801abc0:	69bb      	ldr	r3, [r7, #24]
 801abc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801abc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801abc6:	69bb      	ldr	r3, [r7, #24]
 801abc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abca:	69fa      	ldr	r2, [r7, #28]
 801abcc:	429a      	cmp	r2, r3
 801abce:	d063      	beq.n	801ac98 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801abd0:	69bb      	ldr	r3, [r7, #24]
 801abd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801abd4:	697a      	ldr	r2, [r7, #20]
 801abd6:	429a      	cmp	r2, r3
 801abd8:	d15e      	bne.n	801ac98 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801abda:	4b31      	ldr	r3, [pc, #196]	; (801aca0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	69ba      	ldr	r2, [r7, #24]
 801abe0:	429a      	cmp	r2, r3
 801abe2:	d10a      	bne.n	801abfa <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 801abe4:	f04f 0320 	mov.w	r3, #32
 801abe8:	f383 8811 	msr	BASEPRI, r3
 801abec:	f3bf 8f6f 	isb	sy
 801abf0:	f3bf 8f4f 	dsb	sy
 801abf4:	60bb      	str	r3, [r7, #8]
}
 801abf6:	bf00      	nop
 801abf8:	e7fe      	b.n	801abf8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801abfa:	69bb      	ldr	r3, [r7, #24]
 801abfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abfe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801ac00:	69bb      	ldr	r3, [r7, #24]
 801ac02:	69fa      	ldr	r2, [r7, #28]
 801ac04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801ac06:	69bb      	ldr	r3, [r7, #24]
 801ac08:	699b      	ldr	r3, [r3, #24]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	db04      	blt.n	801ac18 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ac0e:	69fb      	ldr	r3, [r7, #28]
 801ac10:	f1c3 0207 	rsb	r2, r3, #7
 801ac14:	69bb      	ldr	r3, [r7, #24]
 801ac16:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801ac18:	69bb      	ldr	r3, [r7, #24]
 801ac1a:	6959      	ldr	r1, [r3, #20]
 801ac1c:	693a      	ldr	r2, [r7, #16]
 801ac1e:	4613      	mov	r3, r2
 801ac20:	009b      	lsls	r3, r3, #2
 801ac22:	4413      	add	r3, r2
 801ac24:	009b      	lsls	r3, r3, #2
 801ac26:	4a1f      	ldr	r2, [pc, #124]	; (801aca4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801ac28:	4413      	add	r3, r2
 801ac2a:	4299      	cmp	r1, r3
 801ac2c:	d134      	bne.n	801ac98 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ac2e:	69bb      	ldr	r3, [r7, #24]
 801ac30:	3304      	adds	r3, #4
 801ac32:	4618      	mov	r0, r3
 801ac34:	f7fe f834 	bl	8018ca0 <uxListRemove>
 801ac38:	4603      	mov	r3, r0
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d115      	bne.n	801ac6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801ac3e:	69bb      	ldr	r3, [r7, #24]
 801ac40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac42:	4918      	ldr	r1, [pc, #96]	; (801aca4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801ac44:	4613      	mov	r3, r2
 801ac46:	009b      	lsls	r3, r3, #2
 801ac48:	4413      	add	r3, r2
 801ac4a:	009b      	lsls	r3, r3, #2
 801ac4c:	440b      	add	r3, r1
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d10a      	bne.n	801ac6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
 801ac54:	69bb      	ldr	r3, [r7, #24]
 801ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac58:	2201      	movs	r2, #1
 801ac5a:	fa02 f303 	lsl.w	r3, r2, r3
 801ac5e:	43da      	mvns	r2, r3
 801ac60:	4b11      	ldr	r3, [pc, #68]	; (801aca8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	4013      	ands	r3, r2
 801ac66:	4a10      	ldr	r2, [pc, #64]	; (801aca8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801ac68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801ac6a:	69bb      	ldr	r3, [r7, #24]
 801ac6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac6e:	2201      	movs	r2, #1
 801ac70:	409a      	lsls	r2, r3
 801ac72:	4b0d      	ldr	r3, [pc, #52]	; (801aca8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	4313      	orrs	r3, r2
 801ac78:	4a0b      	ldr	r2, [pc, #44]	; (801aca8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801ac7a:	6013      	str	r3, [r2, #0]
 801ac7c:	69bb      	ldr	r3, [r7, #24]
 801ac7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac80:	4613      	mov	r3, r2
 801ac82:	009b      	lsls	r3, r3, #2
 801ac84:	4413      	add	r3, r2
 801ac86:	009b      	lsls	r3, r3, #2
 801ac88:	4a06      	ldr	r2, [pc, #24]	; (801aca4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801ac8a:	441a      	add	r2, r3
 801ac8c:	69bb      	ldr	r3, [r7, #24]
 801ac8e:	3304      	adds	r3, #4
 801ac90:	4619      	mov	r1, r3
 801ac92:	4610      	mov	r0, r2
 801ac94:	f7fd ffa7 	bl	8018be6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ac98:	bf00      	nop
 801ac9a:	3720      	adds	r7, #32
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	bd80      	pop	{r7, pc}
 801aca0:	200010c8 	.word	0x200010c8
 801aca4:	200010cc 	.word	0x200010cc
 801aca8:	200011d0 	.word	0x200011d0

0801acac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801acac:	b480      	push	{r7}
 801acae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801acb0:	4b07      	ldr	r3, [pc, #28]	; (801acd0 <pvTaskIncrementMutexHeldCount+0x24>)
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d004      	beq.n	801acc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801acb8:	4b05      	ldr	r3, [pc, #20]	; (801acd0 <pvTaskIncrementMutexHeldCount+0x24>)
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801acbe:	3201      	adds	r2, #1
 801acc0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801acc2:	4b03      	ldr	r3, [pc, #12]	; (801acd0 <pvTaskIncrementMutexHeldCount+0x24>)
 801acc4:	681b      	ldr	r3, [r3, #0]
	}
 801acc6:	4618      	mov	r0, r3
 801acc8:	46bd      	mov	sp, r7
 801acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acce:	4770      	bx	lr
 801acd0:	200010c8 	.word	0x200010c8

0801acd4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b084      	sub	sp, #16
 801acd8:	af00      	add	r7, sp, #0
 801acda:	6078      	str	r0, [r7, #4]
 801acdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801acde:	4b29      	ldr	r3, [pc, #164]	; (801ad84 <prvAddCurrentTaskToDelayedList+0xb0>)
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ace4:	4b28      	ldr	r3, [pc, #160]	; (801ad88 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	3304      	adds	r3, #4
 801acea:	4618      	mov	r0, r3
 801acec:	f7fd ffd8 	bl	8018ca0 <uxListRemove>
 801acf0:	4603      	mov	r3, r0
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d10b      	bne.n	801ad0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801acf6:	4b24      	ldr	r3, [pc, #144]	; (801ad88 <prvAddCurrentTaskToDelayedList+0xb4>)
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acfc:	2201      	movs	r2, #1
 801acfe:	fa02 f303 	lsl.w	r3, r2, r3
 801ad02:	43da      	mvns	r2, r3
 801ad04:	4b21      	ldr	r3, [pc, #132]	; (801ad8c <prvAddCurrentTaskToDelayedList+0xb8>)
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	4013      	ands	r3, r2
 801ad0a:	4a20      	ldr	r2, [pc, #128]	; (801ad8c <prvAddCurrentTaskToDelayedList+0xb8>)
 801ad0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad14:	d10a      	bne.n	801ad2c <prvAddCurrentTaskToDelayedList+0x58>
 801ad16:	683b      	ldr	r3, [r7, #0]
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d007      	beq.n	801ad2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ad1c:	4b1a      	ldr	r3, [pc, #104]	; (801ad88 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	3304      	adds	r3, #4
 801ad22:	4619      	mov	r1, r3
 801ad24:	481a      	ldr	r0, [pc, #104]	; (801ad90 <prvAddCurrentTaskToDelayedList+0xbc>)
 801ad26:	f7fd ff5e 	bl	8018be6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801ad2a:	e026      	b.n	801ad7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801ad2c:	68fa      	ldr	r2, [r7, #12]
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	4413      	add	r3, r2
 801ad32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801ad34:	4b14      	ldr	r3, [pc, #80]	; (801ad88 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	68ba      	ldr	r2, [r7, #8]
 801ad3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801ad3c:	68ba      	ldr	r2, [r7, #8]
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	429a      	cmp	r2, r3
 801ad42:	d209      	bcs.n	801ad58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ad44:	4b13      	ldr	r3, [pc, #76]	; (801ad94 <prvAddCurrentTaskToDelayedList+0xc0>)
 801ad46:	681a      	ldr	r2, [r3, #0]
 801ad48:	4b0f      	ldr	r3, [pc, #60]	; (801ad88 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	3304      	adds	r3, #4
 801ad4e:	4619      	mov	r1, r3
 801ad50:	4610      	mov	r0, r2
 801ad52:	f7fd ff6c 	bl	8018c2e <vListInsert>
}
 801ad56:	e010      	b.n	801ad7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ad58:	4b0f      	ldr	r3, [pc, #60]	; (801ad98 <prvAddCurrentTaskToDelayedList+0xc4>)
 801ad5a:	681a      	ldr	r2, [r3, #0]
 801ad5c:	4b0a      	ldr	r3, [pc, #40]	; (801ad88 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	3304      	adds	r3, #4
 801ad62:	4619      	mov	r1, r3
 801ad64:	4610      	mov	r0, r2
 801ad66:	f7fd ff62 	bl	8018c2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ad6a:	4b0c      	ldr	r3, [pc, #48]	; (801ad9c <prvAddCurrentTaskToDelayedList+0xc8>)
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	68ba      	ldr	r2, [r7, #8]
 801ad70:	429a      	cmp	r2, r3
 801ad72:	d202      	bcs.n	801ad7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801ad74:	4a09      	ldr	r2, [pc, #36]	; (801ad9c <prvAddCurrentTaskToDelayedList+0xc8>)
 801ad76:	68bb      	ldr	r3, [r7, #8]
 801ad78:	6013      	str	r3, [r2, #0]
}
 801ad7a:	bf00      	nop
 801ad7c:	3710      	adds	r7, #16
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
 801ad82:	bf00      	nop
 801ad84:	200011cc 	.word	0x200011cc
 801ad88:	200010c8 	.word	0x200010c8
 801ad8c:	200011d0 	.word	0x200011d0
 801ad90:	200011b4 	.word	0x200011b4
 801ad94:	20001184 	.word	0x20001184
 801ad98:	20001180 	.word	0x20001180
 801ad9c:	200011e8 	.word	0x200011e8

0801ada0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b084      	sub	sp, #16
 801ada4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 801ada6:	2300      	movs	r3, #0
 801ada8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801adaa:	f000 fad5 	bl	801b358 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801adae:	4b11      	ldr	r3, [pc, #68]	; (801adf4 <xTimerCreateTimerTask+0x54>)
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d00b      	beq.n	801adce <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 801adb6:	4b10      	ldr	r3, [pc, #64]	; (801adf8 <xTimerCreateTimerTask+0x58>)
 801adb8:	9301      	str	r3, [sp, #4]
 801adba:	2306      	movs	r3, #6
 801adbc:	9300      	str	r3, [sp, #0]
 801adbe:	2300      	movs	r3, #0
 801adc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801adc4:	490d      	ldr	r1, [pc, #52]	; (801adfc <xTimerCreateTimerTask+0x5c>)
 801adc6:	480e      	ldr	r0, [pc, #56]	; (801ae00 <xTimerCreateTimerTask+0x60>)
 801adc8:	f7fe fea4 	bl	8019b14 <xTaskCreate>
 801adcc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d10a      	bne.n	801adea <xTimerCreateTimerTask+0x4a>
	__asm volatile
 801add4:	f04f 0320 	mov.w	r3, #32
 801add8:	f383 8811 	msr	BASEPRI, r3
 801addc:	f3bf 8f6f 	isb	sy
 801ade0:	f3bf 8f4f 	dsb	sy
 801ade4:	603b      	str	r3, [r7, #0]
}
 801ade6:	bf00      	nop
 801ade8:	e7fe      	b.n	801ade8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 801adea:	687b      	ldr	r3, [r7, #4]
}
 801adec:	4618      	mov	r0, r3
 801adee:	3708      	adds	r7, #8
 801adf0:	46bd      	mov	sp, r7
 801adf2:	bd80      	pop	{r7, pc}
 801adf4:	20001224 	.word	0x20001224
 801adf8:	20001228 	.word	0x20001228
 801adfc:	0802396c 	.word	0x0802396c
 801ae00:	0801af39 	.word	0x0801af39

0801ae04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801ae04:	b580      	push	{r7, lr}
 801ae06:	b08a      	sub	sp, #40	; 0x28
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	60f8      	str	r0, [r7, #12]
 801ae0c:	60b9      	str	r1, [r7, #8]
 801ae0e:	607a      	str	r2, [r7, #4]
 801ae10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801ae12:	2300      	movs	r3, #0
 801ae14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d10a      	bne.n	801ae32 <xTimerGenericCommand+0x2e>
	__asm volatile
 801ae1c:	f04f 0320 	mov.w	r3, #32
 801ae20:	f383 8811 	msr	BASEPRI, r3
 801ae24:	f3bf 8f6f 	isb	sy
 801ae28:	f3bf 8f4f 	dsb	sy
 801ae2c:	623b      	str	r3, [r7, #32]
}
 801ae2e:	bf00      	nop
 801ae30:	e7fe      	b.n	801ae30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801ae32:	4b1a      	ldr	r3, [pc, #104]	; (801ae9c <xTimerGenericCommand+0x98>)
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d02a      	beq.n	801ae90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801ae3a:	68bb      	ldr	r3, [r7, #8]
 801ae3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801ae46:	68bb      	ldr	r3, [r7, #8]
 801ae48:	2b05      	cmp	r3, #5
 801ae4a:	dc18      	bgt.n	801ae7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801ae4c:	f7ff fd70 	bl	801a930 <xTaskGetSchedulerState>
 801ae50:	4603      	mov	r3, r0
 801ae52:	2b02      	cmp	r3, #2
 801ae54:	d109      	bne.n	801ae6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801ae56:	4b11      	ldr	r3, [pc, #68]	; (801ae9c <xTimerGenericCommand+0x98>)
 801ae58:	6818      	ldr	r0, [r3, #0]
 801ae5a:	f107 0114 	add.w	r1, r7, #20
 801ae5e:	2300      	movs	r3, #0
 801ae60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae62:	f7fe f841 	bl	8018ee8 <xQueueGenericSend>
 801ae66:	6278      	str	r0, [r7, #36]	; 0x24
 801ae68:	e012      	b.n	801ae90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801ae6a:	4b0c      	ldr	r3, [pc, #48]	; (801ae9c <xTimerGenericCommand+0x98>)
 801ae6c:	6818      	ldr	r0, [r3, #0]
 801ae6e:	f107 0114 	add.w	r1, r7, #20
 801ae72:	2300      	movs	r3, #0
 801ae74:	2200      	movs	r2, #0
 801ae76:	f7fe f837 	bl	8018ee8 <xQueueGenericSend>
 801ae7a:	6278      	str	r0, [r7, #36]	; 0x24
 801ae7c:	e008      	b.n	801ae90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801ae7e:	4b07      	ldr	r3, [pc, #28]	; (801ae9c <xTimerGenericCommand+0x98>)
 801ae80:	6818      	ldr	r0, [r3, #0]
 801ae82:	f107 0114 	add.w	r1, r7, #20
 801ae86:	2300      	movs	r3, #0
 801ae88:	683a      	ldr	r2, [r7, #0]
 801ae8a:	f7fe f92b 	bl	80190e4 <xQueueGenericSendFromISR>
 801ae8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ae92:	4618      	mov	r0, r3
 801ae94:	3728      	adds	r7, #40	; 0x28
 801ae96:	46bd      	mov	sp, r7
 801ae98:	bd80      	pop	{r7, pc}
 801ae9a:	bf00      	nop
 801ae9c:	20001224 	.word	0x20001224

0801aea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b088      	sub	sp, #32
 801aea4:	af02      	add	r7, sp, #8
 801aea6:	6078      	str	r0, [r7, #4]
 801aea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aeaa:	4b22      	ldr	r3, [pc, #136]	; (801af34 <prvProcessExpiredTimer+0x94>)
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	68db      	ldr	r3, [r3, #12]
 801aeb0:	68db      	ldr	r3, [r3, #12]
 801aeb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801aeb4:	697b      	ldr	r3, [r7, #20]
 801aeb6:	3304      	adds	r3, #4
 801aeb8:	4618      	mov	r0, r3
 801aeba:	f7fd fef1 	bl	8018ca0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801aebe:	697b      	ldr	r3, [r7, #20]
 801aec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aec4:	f003 0304 	and.w	r3, r3, #4
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d022      	beq.n	801af12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801aecc:	697b      	ldr	r3, [r7, #20]
 801aece:	699a      	ldr	r2, [r3, #24]
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	18d1      	adds	r1, r2, r3
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	683a      	ldr	r2, [r7, #0]
 801aed8:	6978      	ldr	r0, [r7, #20]
 801aeda:	f000 f8d1 	bl	801b080 <prvInsertTimerInActiveList>
 801aede:	4603      	mov	r3, r0
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d01f      	beq.n	801af24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aee4:	2300      	movs	r3, #0
 801aee6:	9300      	str	r3, [sp, #0]
 801aee8:	2300      	movs	r3, #0
 801aeea:	687a      	ldr	r2, [r7, #4]
 801aeec:	2100      	movs	r1, #0
 801aeee:	6978      	ldr	r0, [r7, #20]
 801aef0:	f7ff ff88 	bl	801ae04 <xTimerGenericCommand>
 801aef4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801aef6:	693b      	ldr	r3, [r7, #16]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d113      	bne.n	801af24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801aefc:	f04f 0320 	mov.w	r3, #32
 801af00:	f383 8811 	msr	BASEPRI, r3
 801af04:	f3bf 8f6f 	isb	sy
 801af08:	f3bf 8f4f 	dsb	sy
 801af0c:	60fb      	str	r3, [r7, #12]
}
 801af0e:	bf00      	nop
 801af10:	e7fe      	b.n	801af10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801af12:	697b      	ldr	r3, [r7, #20]
 801af14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801af18:	f023 0301 	bic.w	r3, r3, #1
 801af1c:	b2da      	uxtb	r2, r3
 801af1e:	697b      	ldr	r3, [r7, #20]
 801af20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801af24:	697b      	ldr	r3, [r7, #20]
 801af26:	6a1b      	ldr	r3, [r3, #32]
 801af28:	6978      	ldr	r0, [r7, #20]
 801af2a:	4798      	blx	r3
}
 801af2c:	bf00      	nop
 801af2e:	3718      	adds	r7, #24
 801af30:	46bd      	mov	sp, r7
 801af32:	bd80      	pop	{r7, pc}
 801af34:	2000121c 	.word	0x2000121c

0801af38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b084      	sub	sp, #16
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801af40:	f107 0308 	add.w	r3, r7, #8
 801af44:	4618      	mov	r0, r3
 801af46:	f000 f857 	bl	801aff8 <prvGetNextExpireTime>
 801af4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801af4c:	68bb      	ldr	r3, [r7, #8]
 801af4e:	4619      	mov	r1, r3
 801af50:	68f8      	ldr	r0, [r7, #12]
 801af52:	f000 f803 	bl	801af5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801af56:	f000 f8d5 	bl	801b104 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801af5a:	e7f1      	b.n	801af40 <prvTimerTask+0x8>

0801af5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801af5c:	b580      	push	{r7, lr}
 801af5e:	b084      	sub	sp, #16
 801af60:	af00      	add	r7, sp, #0
 801af62:	6078      	str	r0, [r7, #4]
 801af64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801af66:	f7ff f901 	bl	801a16c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801af6a:	f107 0308 	add.w	r3, r7, #8
 801af6e:	4618      	mov	r0, r3
 801af70:	f000 f866 	bl	801b040 <prvSampleTimeNow>
 801af74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801af76:	68bb      	ldr	r3, [r7, #8]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d130      	bne.n	801afde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801af7c:	683b      	ldr	r3, [r7, #0]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d10a      	bne.n	801af98 <prvProcessTimerOrBlockTask+0x3c>
 801af82:	687a      	ldr	r2, [r7, #4]
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	429a      	cmp	r2, r3
 801af88:	d806      	bhi.n	801af98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801af8a:	f7ff f8fd 	bl	801a188 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801af8e:	68f9      	ldr	r1, [r7, #12]
 801af90:	6878      	ldr	r0, [r7, #4]
 801af92:	f7ff ff85 	bl	801aea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801af96:	e024      	b.n	801afe2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801af98:	683b      	ldr	r3, [r7, #0]
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d008      	beq.n	801afb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801af9e:	4b13      	ldr	r3, [pc, #76]	; (801afec <prvProcessTimerOrBlockTask+0x90>)
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d101      	bne.n	801afac <prvProcessTimerOrBlockTask+0x50>
 801afa8:	2301      	movs	r3, #1
 801afaa:	e000      	b.n	801afae <prvProcessTimerOrBlockTask+0x52>
 801afac:	2300      	movs	r3, #0
 801afae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801afb0:	4b0f      	ldr	r3, [pc, #60]	; (801aff0 <prvProcessTimerOrBlockTask+0x94>)
 801afb2:	6818      	ldr	r0, [r3, #0]
 801afb4:	687a      	ldr	r2, [r7, #4]
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	1ad3      	subs	r3, r2, r3
 801afba:	683a      	ldr	r2, [r7, #0]
 801afbc:	4619      	mov	r1, r3
 801afbe:	f7fe fd75 	bl	8019aac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801afc2:	f7ff f8e1 	bl	801a188 <xTaskResumeAll>
 801afc6:	4603      	mov	r3, r0
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d10a      	bne.n	801afe2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801afcc:	4b09      	ldr	r3, [pc, #36]	; (801aff4 <prvProcessTimerOrBlockTask+0x98>)
 801afce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801afd2:	601a      	str	r2, [r3, #0]
 801afd4:	f3bf 8f4f 	dsb	sy
 801afd8:	f3bf 8f6f 	isb	sy
}
 801afdc:	e001      	b.n	801afe2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801afde:	f7ff f8d3 	bl	801a188 <xTaskResumeAll>
}
 801afe2:	bf00      	nop
 801afe4:	3710      	adds	r7, #16
 801afe6:	46bd      	mov	sp, r7
 801afe8:	bd80      	pop	{r7, pc}
 801afea:	bf00      	nop
 801afec:	20001220 	.word	0x20001220
 801aff0:	20001224 	.word	0x20001224
 801aff4:	e000ed04 	.word	0xe000ed04

0801aff8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801aff8:	b480      	push	{r7}
 801affa:	b085      	sub	sp, #20
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b000:	4b0e      	ldr	r3, [pc, #56]	; (801b03c <prvGetNextExpireTime+0x44>)
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d101      	bne.n	801b00e <prvGetNextExpireTime+0x16>
 801b00a:	2201      	movs	r2, #1
 801b00c:	e000      	b.n	801b010 <prvGetNextExpireTime+0x18>
 801b00e:	2200      	movs	r2, #0
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d105      	bne.n	801b028 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b01c:	4b07      	ldr	r3, [pc, #28]	; (801b03c <prvGetNextExpireTime+0x44>)
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	68db      	ldr	r3, [r3, #12]
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	60fb      	str	r3, [r7, #12]
 801b026:	e001      	b.n	801b02c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801b028:	2300      	movs	r3, #0
 801b02a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801b02c:	68fb      	ldr	r3, [r7, #12]
}
 801b02e:	4618      	mov	r0, r3
 801b030:	3714      	adds	r7, #20
 801b032:	46bd      	mov	sp, r7
 801b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b038:	4770      	bx	lr
 801b03a:	bf00      	nop
 801b03c:	2000121c 	.word	0x2000121c

0801b040 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801b040:	b580      	push	{r7, lr}
 801b042:	b084      	sub	sp, #16
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801b048:	f7ff f93a 	bl	801a2c0 <xTaskGetTickCount>
 801b04c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801b04e:	4b0b      	ldr	r3, [pc, #44]	; (801b07c <prvSampleTimeNow+0x3c>)
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	68fa      	ldr	r2, [r7, #12]
 801b054:	429a      	cmp	r2, r3
 801b056:	d205      	bcs.n	801b064 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801b058:	f000 f91a 	bl	801b290 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	2201      	movs	r2, #1
 801b060:	601a      	str	r2, [r3, #0]
 801b062:	e002      	b.n	801b06a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	2200      	movs	r2, #0
 801b068:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801b06a:	4a04      	ldr	r2, [pc, #16]	; (801b07c <prvSampleTimeNow+0x3c>)
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801b070:	68fb      	ldr	r3, [r7, #12]
}
 801b072:	4618      	mov	r0, r3
 801b074:	3710      	adds	r7, #16
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}
 801b07a:	bf00      	nop
 801b07c:	2000122c 	.word	0x2000122c

0801b080 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b080:	b580      	push	{r7, lr}
 801b082:	b086      	sub	sp, #24
 801b084:	af00      	add	r7, sp, #0
 801b086:	60f8      	str	r0, [r7, #12]
 801b088:	60b9      	str	r1, [r7, #8]
 801b08a:	607a      	str	r2, [r7, #4]
 801b08c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801b08e:	2300      	movs	r3, #0
 801b090:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	68ba      	ldr	r2, [r7, #8]
 801b096:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	68fa      	ldr	r2, [r7, #12]
 801b09c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b09e:	68ba      	ldr	r2, [r7, #8]
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	429a      	cmp	r2, r3
 801b0a4:	d812      	bhi.n	801b0cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b0a6:	687a      	ldr	r2, [r7, #4]
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	1ad2      	subs	r2, r2, r3
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	699b      	ldr	r3, [r3, #24]
 801b0b0:	429a      	cmp	r2, r3
 801b0b2:	d302      	bcc.n	801b0ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b0b4:	2301      	movs	r3, #1
 801b0b6:	617b      	str	r3, [r7, #20]
 801b0b8:	e01b      	b.n	801b0f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b0ba:	4b10      	ldr	r3, [pc, #64]	; (801b0fc <prvInsertTimerInActiveList+0x7c>)
 801b0bc:	681a      	ldr	r2, [r3, #0]
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	3304      	adds	r3, #4
 801b0c2:	4619      	mov	r1, r3
 801b0c4:	4610      	mov	r0, r2
 801b0c6:	f7fd fdb2 	bl	8018c2e <vListInsert>
 801b0ca:	e012      	b.n	801b0f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b0cc:	687a      	ldr	r2, [r7, #4]
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	429a      	cmp	r2, r3
 801b0d2:	d206      	bcs.n	801b0e2 <prvInsertTimerInActiveList+0x62>
 801b0d4:	68ba      	ldr	r2, [r7, #8]
 801b0d6:	683b      	ldr	r3, [r7, #0]
 801b0d8:	429a      	cmp	r2, r3
 801b0da:	d302      	bcc.n	801b0e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801b0dc:	2301      	movs	r3, #1
 801b0de:	617b      	str	r3, [r7, #20]
 801b0e0:	e007      	b.n	801b0f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b0e2:	4b07      	ldr	r3, [pc, #28]	; (801b100 <prvInsertTimerInActiveList+0x80>)
 801b0e4:	681a      	ldr	r2, [r3, #0]
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	3304      	adds	r3, #4
 801b0ea:	4619      	mov	r1, r3
 801b0ec:	4610      	mov	r0, r2
 801b0ee:	f7fd fd9e 	bl	8018c2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801b0f2:	697b      	ldr	r3, [r7, #20]
}
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	3718      	adds	r7, #24
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	bd80      	pop	{r7, pc}
 801b0fc:	20001220 	.word	0x20001220
 801b100:	2000121c 	.word	0x2000121c

0801b104 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801b104:	b580      	push	{r7, lr}
 801b106:	b08c      	sub	sp, #48	; 0x30
 801b108:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b10a:	e0ae      	b.n	801b26a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b10c:	68bb      	ldr	r3, [r7, #8]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	f2c0 80aa 	blt.w	801b268 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b114:	693b      	ldr	r3, [r7, #16]
 801b116:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b11a:	695b      	ldr	r3, [r3, #20]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d004      	beq.n	801b12a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b122:	3304      	adds	r3, #4
 801b124:	4618      	mov	r0, r3
 801b126:	f7fd fdbb 	bl	8018ca0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b12a:	1d3b      	adds	r3, r7, #4
 801b12c:	4618      	mov	r0, r3
 801b12e:	f7ff ff87 	bl	801b040 <prvSampleTimeNow>
 801b132:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 801b134:	68bb      	ldr	r3, [r7, #8]
 801b136:	2b09      	cmp	r3, #9
 801b138:	f200 8097 	bhi.w	801b26a <prvProcessReceivedCommands+0x166>
 801b13c:	a201      	add	r2, pc, #4	; (adr r2, 801b144 <prvProcessReceivedCommands+0x40>)
 801b13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b142:	bf00      	nop
 801b144:	0801b16d 	.word	0x0801b16d
 801b148:	0801b16d 	.word	0x0801b16d
 801b14c:	0801b16d 	.word	0x0801b16d
 801b150:	0801b1e1 	.word	0x0801b1e1
 801b154:	0801b1f5 	.word	0x0801b1f5
 801b158:	0801b23f 	.word	0x0801b23f
 801b15c:	0801b16d 	.word	0x0801b16d
 801b160:	0801b16d 	.word	0x0801b16d
 801b164:	0801b1e1 	.word	0x0801b1e1
 801b168:	0801b1f5 	.word	0x0801b1f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b16e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b172:	f043 0301 	orr.w	r3, r3, #1
 801b176:	b2da      	uxtb	r2, r3
 801b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b17a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b17e:	68fa      	ldr	r2, [r7, #12]
 801b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b182:	699b      	ldr	r3, [r3, #24]
 801b184:	18d1      	adds	r1, r2, r3
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	6a3a      	ldr	r2, [r7, #32]
 801b18a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b18c:	f7ff ff78 	bl	801b080 <prvInsertTimerInActiveList>
 801b190:	4603      	mov	r3, r0
 801b192:	2b00      	cmp	r3, #0
 801b194:	d069      	beq.n	801b26a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b198:	6a1b      	ldr	r3, [r3, #32]
 801b19a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b19c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b1a4:	f003 0304 	and.w	r3, r3, #4
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d05e      	beq.n	801b26a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b1ac:	68fa      	ldr	r2, [r7, #12]
 801b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1b0:	699b      	ldr	r3, [r3, #24]
 801b1b2:	441a      	add	r2, r3
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	9300      	str	r3, [sp, #0]
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	2100      	movs	r1, #0
 801b1bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b1be:	f7ff fe21 	bl	801ae04 <xTimerGenericCommand>
 801b1c2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 801b1c4:	69fb      	ldr	r3, [r7, #28]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d14f      	bne.n	801b26a <prvProcessReceivedCommands+0x166>
	__asm volatile
 801b1ca:	f04f 0320 	mov.w	r3, #32
 801b1ce:	f383 8811 	msr	BASEPRI, r3
 801b1d2:	f3bf 8f6f 	isb	sy
 801b1d6:	f3bf 8f4f 	dsb	sy
 801b1da:	61bb      	str	r3, [r7, #24]
}
 801b1dc:	bf00      	nop
 801b1de:	e7fe      	b.n	801b1de <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b1e6:	f023 0301 	bic.w	r3, r3, #1
 801b1ea:	b2da      	uxtb	r2, r3
 801b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801b1f2:	e03a      	b.n	801b26a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b1fa:	f043 0301 	orr.w	r3, r3, #1
 801b1fe:	b2da      	uxtb	r2, r3
 801b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b206:	68fa      	ldr	r2, [r7, #12]
 801b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b20a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b20e:	699b      	ldr	r3, [r3, #24]
 801b210:	2b00      	cmp	r3, #0
 801b212:	d10a      	bne.n	801b22a <prvProcessReceivedCommands+0x126>
	__asm volatile
 801b214:	f04f 0320 	mov.w	r3, #32
 801b218:	f383 8811 	msr	BASEPRI, r3
 801b21c:	f3bf 8f6f 	isb	sy
 801b220:	f3bf 8f4f 	dsb	sy
 801b224:	617b      	str	r3, [r7, #20]
}
 801b226:	bf00      	nop
 801b228:	e7fe      	b.n	801b228 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b22c:	699a      	ldr	r2, [r3, #24]
 801b22e:	6a3b      	ldr	r3, [r7, #32]
 801b230:	18d1      	adds	r1, r2, r3
 801b232:	6a3b      	ldr	r3, [r7, #32]
 801b234:	6a3a      	ldr	r2, [r7, #32]
 801b236:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b238:	f7ff ff22 	bl	801b080 <prvInsertTimerInActiveList>
					break;
 801b23c:	e015      	b.n	801b26a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b244:	f003 0302 	and.w	r3, r3, #2
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d103      	bne.n	801b254 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 801b24c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b24e:	f000 fbcf 	bl	801b9f0 <vPortFree>
 801b252:	e00a      	b.n	801b26a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b25a:	f023 0301 	bic.w	r3, r3, #1
 801b25e:	b2da      	uxtb	r2, r3
 801b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801b266:	e000      	b.n	801b26a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801b268:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b26a:	4b08      	ldr	r3, [pc, #32]	; (801b28c <prvProcessReceivedCommands+0x188>)
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	f107 0108 	add.w	r1, r7, #8
 801b272:	2200      	movs	r2, #0
 801b274:	4618      	mov	r0, r3
 801b276:	f7fe f85b 	bl	8019330 <xQueueReceive>
 801b27a:	4603      	mov	r3, r0
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	f47f af45 	bne.w	801b10c <prvProcessReceivedCommands+0x8>
	}
}
 801b282:	bf00      	nop
 801b284:	bf00      	nop
 801b286:	3728      	adds	r7, #40	; 0x28
 801b288:	46bd      	mov	sp, r7
 801b28a:	bd80      	pop	{r7, pc}
 801b28c:	20001224 	.word	0x20001224

0801b290 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801b290:	b580      	push	{r7, lr}
 801b292:	b088      	sub	sp, #32
 801b294:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b296:	e048      	b.n	801b32a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b298:	4b2d      	ldr	r3, [pc, #180]	; (801b350 <prvSwitchTimerLists+0xc0>)
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	68db      	ldr	r3, [r3, #12]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b2a2:	4b2b      	ldr	r3, [pc, #172]	; (801b350 <prvSwitchTimerLists+0xc0>)
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	68db      	ldr	r3, [r3, #12]
 801b2a8:	68db      	ldr	r3, [r3, #12]
 801b2aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	3304      	adds	r3, #4
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	f7fd fcf5 	bl	8018ca0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	6a1b      	ldr	r3, [r3, #32]
 801b2ba:	68f8      	ldr	r0, [r7, #12]
 801b2bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b2c4:	f003 0304 	and.w	r3, r3, #4
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d02e      	beq.n	801b32a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	699b      	ldr	r3, [r3, #24]
 801b2d0:	693a      	ldr	r2, [r7, #16]
 801b2d2:	4413      	add	r3, r2
 801b2d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801b2d6:	68ba      	ldr	r2, [r7, #8]
 801b2d8:	693b      	ldr	r3, [r7, #16]
 801b2da:	429a      	cmp	r2, r3
 801b2dc:	d90e      	bls.n	801b2fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b2de:	68fb      	ldr	r3, [r7, #12]
 801b2e0:	68ba      	ldr	r2, [r7, #8]
 801b2e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	68fa      	ldr	r2, [r7, #12]
 801b2e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b2ea:	4b19      	ldr	r3, [pc, #100]	; (801b350 <prvSwitchTimerLists+0xc0>)
 801b2ec:	681a      	ldr	r2, [r3, #0]
 801b2ee:	68fb      	ldr	r3, [r7, #12]
 801b2f0:	3304      	adds	r3, #4
 801b2f2:	4619      	mov	r1, r3
 801b2f4:	4610      	mov	r0, r2
 801b2f6:	f7fd fc9a 	bl	8018c2e <vListInsert>
 801b2fa:	e016      	b.n	801b32a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	9300      	str	r3, [sp, #0]
 801b300:	2300      	movs	r3, #0
 801b302:	693a      	ldr	r2, [r7, #16]
 801b304:	2100      	movs	r1, #0
 801b306:	68f8      	ldr	r0, [r7, #12]
 801b308:	f7ff fd7c 	bl	801ae04 <xTimerGenericCommand>
 801b30c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	2b00      	cmp	r3, #0
 801b312:	d10a      	bne.n	801b32a <prvSwitchTimerLists+0x9a>
	__asm volatile
 801b314:	f04f 0320 	mov.w	r3, #32
 801b318:	f383 8811 	msr	BASEPRI, r3
 801b31c:	f3bf 8f6f 	isb	sy
 801b320:	f3bf 8f4f 	dsb	sy
 801b324:	603b      	str	r3, [r7, #0]
}
 801b326:	bf00      	nop
 801b328:	e7fe      	b.n	801b328 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b32a:	4b09      	ldr	r3, [pc, #36]	; (801b350 <prvSwitchTimerLists+0xc0>)
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d1b1      	bne.n	801b298 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801b334:	4b06      	ldr	r3, [pc, #24]	; (801b350 <prvSwitchTimerLists+0xc0>)
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801b33a:	4b06      	ldr	r3, [pc, #24]	; (801b354 <prvSwitchTimerLists+0xc4>)
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	4a04      	ldr	r2, [pc, #16]	; (801b350 <prvSwitchTimerLists+0xc0>)
 801b340:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801b342:	4a04      	ldr	r2, [pc, #16]	; (801b354 <prvSwitchTimerLists+0xc4>)
 801b344:	697b      	ldr	r3, [r7, #20]
 801b346:	6013      	str	r3, [r2, #0]
}
 801b348:	bf00      	nop
 801b34a:	3718      	adds	r7, #24
 801b34c:	46bd      	mov	sp, r7
 801b34e:	bd80      	pop	{r7, pc}
 801b350:	2000121c 	.word	0x2000121c
 801b354:	20001220 	.word	0x20001220

0801b358 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b358:	b580      	push	{r7, lr}
 801b35a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b35c:	f000 f962 	bl	801b624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b360:	4b12      	ldr	r3, [pc, #72]	; (801b3ac <prvCheckForValidListAndQueue+0x54>)
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d11d      	bne.n	801b3a4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 801b368:	4811      	ldr	r0, [pc, #68]	; (801b3b0 <prvCheckForValidListAndQueue+0x58>)
 801b36a:	f7fd fc0f 	bl	8018b8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b36e:	4811      	ldr	r0, [pc, #68]	; (801b3b4 <prvCheckForValidListAndQueue+0x5c>)
 801b370:	f7fd fc0c 	bl	8018b8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b374:	4b10      	ldr	r3, [pc, #64]	; (801b3b8 <prvCheckForValidListAndQueue+0x60>)
 801b376:	4a0e      	ldr	r2, [pc, #56]	; (801b3b0 <prvCheckForValidListAndQueue+0x58>)
 801b378:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b37a:	4b10      	ldr	r3, [pc, #64]	; (801b3bc <prvCheckForValidListAndQueue+0x64>)
 801b37c:	4a0d      	ldr	r2, [pc, #52]	; (801b3b4 <prvCheckForValidListAndQueue+0x5c>)
 801b37e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801b380:	2200      	movs	r2, #0
 801b382:	210c      	movs	r1, #12
 801b384:	2064      	movs	r0, #100	; 0x64
 801b386:	f7fd fd1d 	bl	8018dc4 <xQueueGenericCreate>
 801b38a:	4603      	mov	r3, r0
 801b38c:	4a07      	ldr	r2, [pc, #28]	; (801b3ac <prvCheckForValidListAndQueue+0x54>)
 801b38e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801b390:	4b06      	ldr	r3, [pc, #24]	; (801b3ac <prvCheckForValidListAndQueue+0x54>)
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	2b00      	cmp	r3, #0
 801b396:	d005      	beq.n	801b3a4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b398:	4b04      	ldr	r3, [pc, #16]	; (801b3ac <prvCheckForValidListAndQueue+0x54>)
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	4908      	ldr	r1, [pc, #32]	; (801b3c0 <prvCheckForValidListAndQueue+0x68>)
 801b39e:	4618      	mov	r0, r3
 801b3a0:	f7fe fb5a 	bl	8019a58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b3a4:	f000 f96e 	bl	801b684 <vPortExitCritical>
}
 801b3a8:	bf00      	nop
 801b3aa:	bd80      	pop	{r7, pc}
 801b3ac:	20001224 	.word	0x20001224
 801b3b0:	200011f4 	.word	0x200011f4
 801b3b4:	20001208 	.word	0x20001208
 801b3b8:	2000121c 	.word	0x2000121c
 801b3bc:	20001220 	.word	0x20001220
 801b3c0:	08023974 	.word	0x08023974

0801b3c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b3c4:	b480      	push	{r7}
 801b3c6:	b085      	sub	sp, #20
 801b3c8:	af00      	add	r7, sp, #0
 801b3ca:	60f8      	str	r0, [r7, #12]
 801b3cc:	60b9      	str	r1, [r7, #8]
 801b3ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	3b04      	subs	r3, #4
 801b3d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b3dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	3b04      	subs	r3, #4
 801b3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b3e4:	68bb      	ldr	r3, [r7, #8]
 801b3e6:	f023 0201 	bic.w	r2, r3, #1
 801b3ea:	68fb      	ldr	r3, [r7, #12]
 801b3ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	3b04      	subs	r3, #4
 801b3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b3f4:	4a0c      	ldr	r2, [pc, #48]	; (801b428 <pxPortInitialiseStack+0x64>)
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b3fa:	68fb      	ldr	r3, [r7, #12]
 801b3fc:	3b14      	subs	r3, #20
 801b3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b400:	687a      	ldr	r2, [r7, #4]
 801b402:	68fb      	ldr	r3, [r7, #12]
 801b404:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b406:	68fb      	ldr	r3, [r7, #12]
 801b408:	3b04      	subs	r3, #4
 801b40a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	f06f 0202 	mvn.w	r2, #2
 801b412:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	3b20      	subs	r3, #32
 801b418:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b41a:	68fb      	ldr	r3, [r7, #12]
}
 801b41c:	4618      	mov	r0, r3
 801b41e:	3714      	adds	r7, #20
 801b420:	46bd      	mov	sp, r7
 801b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b426:	4770      	bx	lr
 801b428:	0801b42d 	.word	0x0801b42d

0801b42c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b42c:	b480      	push	{r7}
 801b42e:	b085      	sub	sp, #20
 801b430:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b432:	2300      	movs	r3, #0
 801b434:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b436:	4b12      	ldr	r3, [pc, #72]	; (801b480 <prvTaskExitError+0x54>)
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b43e:	d00a      	beq.n	801b456 <prvTaskExitError+0x2a>
	__asm volatile
 801b440:	f04f 0320 	mov.w	r3, #32
 801b444:	f383 8811 	msr	BASEPRI, r3
 801b448:	f3bf 8f6f 	isb	sy
 801b44c:	f3bf 8f4f 	dsb	sy
 801b450:	60fb      	str	r3, [r7, #12]
}
 801b452:	bf00      	nop
 801b454:	e7fe      	b.n	801b454 <prvTaskExitError+0x28>
	__asm volatile
 801b456:	f04f 0320 	mov.w	r3, #32
 801b45a:	f383 8811 	msr	BASEPRI, r3
 801b45e:	f3bf 8f6f 	isb	sy
 801b462:	f3bf 8f4f 	dsb	sy
 801b466:	60bb      	str	r3, [r7, #8]
}
 801b468:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b46a:	bf00      	nop
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d0fc      	beq.n	801b46c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b472:	bf00      	nop
 801b474:	bf00      	nop
 801b476:	3714      	adds	r7, #20
 801b478:	46bd      	mov	sp, r7
 801b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b47e:	4770      	bx	lr
 801b480:	200002ac 	.word	0x200002ac
	...

0801b490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b490:	4b07      	ldr	r3, [pc, #28]	; (801b4b0 <pxCurrentTCBConst2>)
 801b492:	6819      	ldr	r1, [r3, #0]
 801b494:	6808      	ldr	r0, [r1, #0]
 801b496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b49a:	f380 8809 	msr	PSP, r0
 801b49e:	f3bf 8f6f 	isb	sy
 801b4a2:	f04f 0000 	mov.w	r0, #0
 801b4a6:	f380 8811 	msr	BASEPRI, r0
 801b4aa:	4770      	bx	lr
 801b4ac:	f3af 8000 	nop.w

0801b4b0 <pxCurrentTCBConst2>:
 801b4b0:	200010c8 	.word	0x200010c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b4b4:	bf00      	nop
 801b4b6:	bf00      	nop

0801b4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b4b8:	4808      	ldr	r0, [pc, #32]	; (801b4dc <prvPortStartFirstTask+0x24>)
 801b4ba:	6800      	ldr	r0, [r0, #0]
 801b4bc:	6800      	ldr	r0, [r0, #0]
 801b4be:	f380 8808 	msr	MSP, r0
 801b4c2:	f04f 0000 	mov.w	r0, #0
 801b4c6:	f380 8814 	msr	CONTROL, r0
 801b4ca:	b662      	cpsie	i
 801b4cc:	b661      	cpsie	f
 801b4ce:	f3bf 8f4f 	dsb	sy
 801b4d2:	f3bf 8f6f 	isb	sy
 801b4d6:	df00      	svc	0
 801b4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b4da:	bf00      	nop
 801b4dc:	e000ed08 	.word	0xe000ed08

0801b4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b4e0:	b580      	push	{r7, lr}
 801b4e2:	b086      	sub	sp, #24
 801b4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b4e6:	4b46      	ldr	r3, [pc, #280]	; (801b600 <xPortStartScheduler+0x120>)
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	4a46      	ldr	r2, [pc, #280]	; (801b604 <xPortStartScheduler+0x124>)
 801b4ec:	4293      	cmp	r3, r2
 801b4ee:	d10a      	bne.n	801b506 <xPortStartScheduler+0x26>
	__asm volatile
 801b4f0:	f04f 0320 	mov.w	r3, #32
 801b4f4:	f383 8811 	msr	BASEPRI, r3
 801b4f8:	f3bf 8f6f 	isb	sy
 801b4fc:	f3bf 8f4f 	dsb	sy
 801b500:	613b      	str	r3, [r7, #16]
}
 801b502:	bf00      	nop
 801b504:	e7fe      	b.n	801b504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b506:	4b3e      	ldr	r3, [pc, #248]	; (801b600 <xPortStartScheduler+0x120>)
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	4a3f      	ldr	r2, [pc, #252]	; (801b608 <xPortStartScheduler+0x128>)
 801b50c:	4293      	cmp	r3, r2
 801b50e:	d10a      	bne.n	801b526 <xPortStartScheduler+0x46>
	__asm volatile
 801b510:	f04f 0320 	mov.w	r3, #32
 801b514:	f383 8811 	msr	BASEPRI, r3
 801b518:	f3bf 8f6f 	isb	sy
 801b51c:	f3bf 8f4f 	dsb	sy
 801b520:	60fb      	str	r3, [r7, #12]
}
 801b522:	bf00      	nop
 801b524:	e7fe      	b.n	801b524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b526:	4b39      	ldr	r3, [pc, #228]	; (801b60c <xPortStartScheduler+0x12c>)
 801b528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b52a:	697b      	ldr	r3, [r7, #20]
 801b52c:	781b      	ldrb	r3, [r3, #0]
 801b52e:	b2db      	uxtb	r3, r3
 801b530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b532:	697b      	ldr	r3, [r7, #20]
 801b534:	22ff      	movs	r2, #255	; 0xff
 801b536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b538:	697b      	ldr	r3, [r7, #20]
 801b53a:	781b      	ldrb	r3, [r3, #0]
 801b53c:	b2db      	uxtb	r3, r3
 801b53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b540:	78fb      	ldrb	r3, [r7, #3]
 801b542:	b2db      	uxtb	r3, r3
 801b544:	f003 0320 	and.w	r3, r3, #32
 801b548:	b2da      	uxtb	r2, r3
 801b54a:	4b31      	ldr	r3, [pc, #196]	; (801b610 <xPortStartScheduler+0x130>)
 801b54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b54e:	4b31      	ldr	r3, [pc, #196]	; (801b614 <xPortStartScheduler+0x134>)
 801b550:	2207      	movs	r2, #7
 801b552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b554:	e009      	b.n	801b56a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801b556:	4b2f      	ldr	r3, [pc, #188]	; (801b614 <xPortStartScheduler+0x134>)
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	3b01      	subs	r3, #1
 801b55c:	4a2d      	ldr	r2, [pc, #180]	; (801b614 <xPortStartScheduler+0x134>)
 801b55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b560:	78fb      	ldrb	r3, [r7, #3]
 801b562:	b2db      	uxtb	r3, r3
 801b564:	005b      	lsls	r3, r3, #1
 801b566:	b2db      	uxtb	r3, r3
 801b568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b56a:	78fb      	ldrb	r3, [r7, #3]
 801b56c:	b2db      	uxtb	r3, r3
 801b56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b572:	2b80      	cmp	r3, #128	; 0x80
 801b574:	d0ef      	beq.n	801b556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b576:	4b27      	ldr	r3, [pc, #156]	; (801b614 <xPortStartScheduler+0x134>)
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	f1c3 0307 	rsb	r3, r3, #7
 801b57e:	2b04      	cmp	r3, #4
 801b580:	d00a      	beq.n	801b598 <xPortStartScheduler+0xb8>
	__asm volatile
 801b582:	f04f 0320 	mov.w	r3, #32
 801b586:	f383 8811 	msr	BASEPRI, r3
 801b58a:	f3bf 8f6f 	isb	sy
 801b58e:	f3bf 8f4f 	dsb	sy
 801b592:	60bb      	str	r3, [r7, #8]
}
 801b594:	bf00      	nop
 801b596:	e7fe      	b.n	801b596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b598:	4b1e      	ldr	r3, [pc, #120]	; (801b614 <xPortStartScheduler+0x134>)
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	021b      	lsls	r3, r3, #8
 801b59e:	4a1d      	ldr	r2, [pc, #116]	; (801b614 <xPortStartScheduler+0x134>)
 801b5a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b5a2:	4b1c      	ldr	r3, [pc, #112]	; (801b614 <xPortStartScheduler+0x134>)
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b5aa:	4a1a      	ldr	r2, [pc, #104]	; (801b614 <xPortStartScheduler+0x134>)
 801b5ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	b2da      	uxtb	r2, r3
 801b5b2:	697b      	ldr	r3, [r7, #20]
 801b5b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b5b6:	4b18      	ldr	r3, [pc, #96]	; (801b618 <xPortStartScheduler+0x138>)
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	4a17      	ldr	r2, [pc, #92]	; (801b618 <xPortStartScheduler+0x138>)
 801b5bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b5c2:	4b15      	ldr	r3, [pc, #84]	; (801b618 <xPortStartScheduler+0x138>)
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	4a14      	ldr	r2, [pc, #80]	; (801b618 <xPortStartScheduler+0x138>)
 801b5c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b5cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b5ce:	f000 f8dd 	bl	801b78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b5d2:	4b12      	ldr	r3, [pc, #72]	; (801b61c <xPortStartScheduler+0x13c>)
 801b5d4:	2200      	movs	r2, #0
 801b5d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b5d8:	f000 f8fc 	bl	801b7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b5dc:	4b10      	ldr	r3, [pc, #64]	; (801b620 <xPortStartScheduler+0x140>)
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	4a0f      	ldr	r2, [pc, #60]	; (801b620 <xPortStartScheduler+0x140>)
 801b5e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b5e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b5e8:	f7ff ff66 	bl	801b4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b5ec:	f7fe ff4c 	bl	801a488 <vTaskSwitchContext>
	prvTaskExitError();
 801b5f0:	f7ff ff1c 	bl	801b42c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b5f4:	2300      	movs	r3, #0
}
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	3718      	adds	r7, #24
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bd80      	pop	{r7, pc}
 801b5fe:	bf00      	nop
 801b600:	e000ed00 	.word	0xe000ed00
 801b604:	410fc271 	.word	0x410fc271
 801b608:	410fc270 	.word	0x410fc270
 801b60c:	e000e400 	.word	0xe000e400
 801b610:	20001230 	.word	0x20001230
 801b614:	20001234 	.word	0x20001234
 801b618:	e000ed20 	.word	0xe000ed20
 801b61c:	200002ac 	.word	0x200002ac
 801b620:	e000ef34 	.word	0xe000ef34

0801b624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b624:	b480      	push	{r7}
 801b626:	b083      	sub	sp, #12
 801b628:	af00      	add	r7, sp, #0
	__asm volatile
 801b62a:	f04f 0320 	mov.w	r3, #32
 801b62e:	f383 8811 	msr	BASEPRI, r3
 801b632:	f3bf 8f6f 	isb	sy
 801b636:	f3bf 8f4f 	dsb	sy
 801b63a:	607b      	str	r3, [r7, #4]
}
 801b63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b63e:	4b0f      	ldr	r3, [pc, #60]	; (801b67c <vPortEnterCritical+0x58>)
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	3301      	adds	r3, #1
 801b644:	4a0d      	ldr	r2, [pc, #52]	; (801b67c <vPortEnterCritical+0x58>)
 801b646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b648:	4b0c      	ldr	r3, [pc, #48]	; (801b67c <vPortEnterCritical+0x58>)
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	2b01      	cmp	r3, #1
 801b64e:	d10f      	bne.n	801b670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b650:	4b0b      	ldr	r3, [pc, #44]	; (801b680 <vPortEnterCritical+0x5c>)
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	b2db      	uxtb	r3, r3
 801b656:	2b00      	cmp	r3, #0
 801b658:	d00a      	beq.n	801b670 <vPortEnterCritical+0x4c>
	__asm volatile
 801b65a:	f04f 0320 	mov.w	r3, #32
 801b65e:	f383 8811 	msr	BASEPRI, r3
 801b662:	f3bf 8f6f 	isb	sy
 801b666:	f3bf 8f4f 	dsb	sy
 801b66a:	603b      	str	r3, [r7, #0]
}
 801b66c:	bf00      	nop
 801b66e:	e7fe      	b.n	801b66e <vPortEnterCritical+0x4a>
	}
}
 801b670:	bf00      	nop
 801b672:	370c      	adds	r7, #12
 801b674:	46bd      	mov	sp, r7
 801b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b67a:	4770      	bx	lr
 801b67c:	200002ac 	.word	0x200002ac
 801b680:	e000ed04 	.word	0xe000ed04

0801b684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b684:	b480      	push	{r7}
 801b686:	b083      	sub	sp, #12
 801b688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b68a:	4b12      	ldr	r3, [pc, #72]	; (801b6d4 <vPortExitCritical+0x50>)
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d10a      	bne.n	801b6a8 <vPortExitCritical+0x24>
	__asm volatile
 801b692:	f04f 0320 	mov.w	r3, #32
 801b696:	f383 8811 	msr	BASEPRI, r3
 801b69a:	f3bf 8f6f 	isb	sy
 801b69e:	f3bf 8f4f 	dsb	sy
 801b6a2:	607b      	str	r3, [r7, #4]
}
 801b6a4:	bf00      	nop
 801b6a6:	e7fe      	b.n	801b6a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b6a8:	4b0a      	ldr	r3, [pc, #40]	; (801b6d4 <vPortExitCritical+0x50>)
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	3b01      	subs	r3, #1
 801b6ae:	4a09      	ldr	r2, [pc, #36]	; (801b6d4 <vPortExitCritical+0x50>)
 801b6b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b6b2:	4b08      	ldr	r3, [pc, #32]	; (801b6d4 <vPortExitCritical+0x50>)
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d105      	bne.n	801b6c6 <vPortExitCritical+0x42>
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b6be:	683b      	ldr	r3, [r7, #0]
 801b6c0:	f383 8811 	msr	BASEPRI, r3
}
 801b6c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b6c6:	bf00      	nop
 801b6c8:	370c      	adds	r7, #12
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d0:	4770      	bx	lr
 801b6d2:	bf00      	nop
 801b6d4:	200002ac 	.word	0x200002ac
	...

0801b6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b6e0:	f3ef 8009 	mrs	r0, PSP
 801b6e4:	f3bf 8f6f 	isb	sy
 801b6e8:	4b15      	ldr	r3, [pc, #84]	; (801b740 <pxCurrentTCBConst>)
 801b6ea:	681a      	ldr	r2, [r3, #0]
 801b6ec:	f01e 0f10 	tst.w	lr, #16
 801b6f0:	bf08      	it	eq
 801b6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6fa:	6010      	str	r0, [r2, #0]
 801b6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b700:	f04f 0020 	mov.w	r0, #32
 801b704:	f380 8811 	msr	BASEPRI, r0
 801b708:	f3bf 8f4f 	dsb	sy
 801b70c:	f3bf 8f6f 	isb	sy
 801b710:	f7fe feba 	bl	801a488 <vTaskSwitchContext>
 801b714:	f04f 0000 	mov.w	r0, #0
 801b718:	f380 8811 	msr	BASEPRI, r0
 801b71c:	bc09      	pop	{r0, r3}
 801b71e:	6819      	ldr	r1, [r3, #0]
 801b720:	6808      	ldr	r0, [r1, #0]
 801b722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b726:	f01e 0f10 	tst.w	lr, #16
 801b72a:	bf08      	it	eq
 801b72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b730:	f380 8809 	msr	PSP, r0
 801b734:	f3bf 8f6f 	isb	sy
 801b738:	4770      	bx	lr
 801b73a:	bf00      	nop
 801b73c:	f3af 8000 	nop.w

0801b740 <pxCurrentTCBConst>:
 801b740:	200010c8 	.word	0x200010c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b744:	bf00      	nop
 801b746:	bf00      	nop

0801b748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b748:	b580      	push	{r7, lr}
 801b74a:	b082      	sub	sp, #8
 801b74c:	af00      	add	r7, sp, #0
	__asm volatile
 801b74e:	f04f 0320 	mov.w	r3, #32
 801b752:	f383 8811 	msr	BASEPRI, r3
 801b756:	f3bf 8f6f 	isb	sy
 801b75a:	f3bf 8f4f 	dsb	sy
 801b75e:	607b      	str	r3, [r7, #4]
}
 801b760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b762:	f7fe fdbd 	bl	801a2e0 <xTaskIncrementTick>
 801b766:	4603      	mov	r3, r0
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d003      	beq.n	801b774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b76c:	4b06      	ldr	r3, [pc, #24]	; (801b788 <xPortSysTickHandler+0x40>)
 801b76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b772:	601a      	str	r2, [r3, #0]
 801b774:	2300      	movs	r3, #0
 801b776:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b778:	683b      	ldr	r3, [r7, #0]
 801b77a:	f383 8811 	msr	BASEPRI, r3
}
 801b77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b780:	bf00      	nop
 801b782:	3708      	adds	r7, #8
 801b784:	46bd      	mov	sp, r7
 801b786:	bd80      	pop	{r7, pc}
 801b788:	e000ed04 	.word	0xe000ed04

0801b78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b78c:	b480      	push	{r7}
 801b78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b790:	4b0b      	ldr	r3, [pc, #44]	; (801b7c0 <vPortSetupTimerInterrupt+0x34>)
 801b792:	2200      	movs	r2, #0
 801b794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b796:	4b0b      	ldr	r3, [pc, #44]	; (801b7c4 <vPortSetupTimerInterrupt+0x38>)
 801b798:	2200      	movs	r2, #0
 801b79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b79c:	4b0a      	ldr	r3, [pc, #40]	; (801b7c8 <vPortSetupTimerInterrupt+0x3c>)
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	4a0a      	ldr	r2, [pc, #40]	; (801b7cc <vPortSetupTimerInterrupt+0x40>)
 801b7a2:	fba2 2303 	umull	r2, r3, r2, r3
 801b7a6:	099b      	lsrs	r3, r3, #6
 801b7a8:	4a09      	ldr	r2, [pc, #36]	; (801b7d0 <vPortSetupTimerInterrupt+0x44>)
 801b7aa:	3b01      	subs	r3, #1
 801b7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b7ae:	4b04      	ldr	r3, [pc, #16]	; (801b7c0 <vPortSetupTimerInterrupt+0x34>)
 801b7b0:	2207      	movs	r2, #7
 801b7b2:	601a      	str	r2, [r3, #0]
}
 801b7b4:	bf00      	nop
 801b7b6:	46bd      	mov	sp, r7
 801b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7bc:	4770      	bx	lr
 801b7be:	bf00      	nop
 801b7c0:	e000e010 	.word	0xe000e010
 801b7c4:	e000e018 	.word	0xe000e018
 801b7c8:	20000038 	.word	0x20000038
 801b7cc:	10624dd3 	.word	0x10624dd3
 801b7d0:	e000e014 	.word	0xe000e014

0801b7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b7e4 <vPortEnableVFP+0x10>
 801b7d8:	6801      	ldr	r1, [r0, #0]
 801b7da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b7de:	6001      	str	r1, [r0, #0]
 801b7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b7e2:	bf00      	nop
 801b7e4:	e000ed88 	.word	0xe000ed88

0801b7e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b7e8:	b480      	push	{r7}
 801b7ea:	b085      	sub	sp, #20
 801b7ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b7ee:	f3ef 8305 	mrs	r3, IPSR
 801b7f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	2b0f      	cmp	r3, #15
 801b7f8:	d914      	bls.n	801b824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b7fa:	4a17      	ldr	r2, [pc, #92]	; (801b858 <vPortValidateInterruptPriority+0x70>)
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	4413      	add	r3, r2
 801b800:	781b      	ldrb	r3, [r3, #0]
 801b802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b804:	4b15      	ldr	r3, [pc, #84]	; (801b85c <vPortValidateInterruptPriority+0x74>)
 801b806:	781b      	ldrb	r3, [r3, #0]
 801b808:	7afa      	ldrb	r2, [r7, #11]
 801b80a:	429a      	cmp	r2, r3
 801b80c:	d20a      	bcs.n	801b824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801b80e:	f04f 0320 	mov.w	r3, #32
 801b812:	f383 8811 	msr	BASEPRI, r3
 801b816:	f3bf 8f6f 	isb	sy
 801b81a:	f3bf 8f4f 	dsb	sy
 801b81e:	607b      	str	r3, [r7, #4]
}
 801b820:	bf00      	nop
 801b822:	e7fe      	b.n	801b822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b824:	4b0e      	ldr	r3, [pc, #56]	; (801b860 <vPortValidateInterruptPriority+0x78>)
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b82c:	4b0d      	ldr	r3, [pc, #52]	; (801b864 <vPortValidateInterruptPriority+0x7c>)
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	429a      	cmp	r2, r3
 801b832:	d90a      	bls.n	801b84a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801b834:	f04f 0320 	mov.w	r3, #32
 801b838:	f383 8811 	msr	BASEPRI, r3
 801b83c:	f3bf 8f6f 	isb	sy
 801b840:	f3bf 8f4f 	dsb	sy
 801b844:	603b      	str	r3, [r7, #0]
}
 801b846:	bf00      	nop
 801b848:	e7fe      	b.n	801b848 <vPortValidateInterruptPriority+0x60>
	}
 801b84a:	bf00      	nop
 801b84c:	3714      	adds	r7, #20
 801b84e:	46bd      	mov	sp, r7
 801b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b854:	4770      	bx	lr
 801b856:	bf00      	nop
 801b858:	e000e3f0 	.word	0xe000e3f0
 801b85c:	20001230 	.word	0x20001230
 801b860:	e000ed0c 	.word	0xe000ed0c
 801b864:	20001234 	.word	0x20001234

0801b868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b868:	b580      	push	{r7, lr}
 801b86a:	b08a      	sub	sp, #40	; 0x28
 801b86c:	af00      	add	r7, sp, #0
 801b86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b870:	2300      	movs	r3, #0
 801b872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b874:	f7fe fc7a 	bl	801a16c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b878:	4b58      	ldr	r3, [pc, #352]	; (801b9dc <pvPortMalloc+0x174>)
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d101      	bne.n	801b884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b880:	f000 f910 	bl	801baa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b884:	4b56      	ldr	r3, [pc, #344]	; (801b9e0 <pvPortMalloc+0x178>)
 801b886:	681a      	ldr	r2, [r3, #0]
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	4013      	ands	r3, r2
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	f040 808e 	bne.w	801b9ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	2b00      	cmp	r3, #0
 801b896:	d01d      	beq.n	801b8d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801b898:	2208      	movs	r2, #8
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	4413      	add	r3, r2
 801b89e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	f003 0307 	and.w	r3, r3, #7
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d014      	beq.n	801b8d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	f023 0307 	bic.w	r3, r3, #7
 801b8b0:	3308      	adds	r3, #8
 801b8b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	f003 0307 	and.w	r3, r3, #7
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d00a      	beq.n	801b8d4 <pvPortMalloc+0x6c>
	__asm volatile
 801b8be:	f04f 0320 	mov.w	r3, #32
 801b8c2:	f383 8811 	msr	BASEPRI, r3
 801b8c6:	f3bf 8f6f 	isb	sy
 801b8ca:	f3bf 8f4f 	dsb	sy
 801b8ce:	617b      	str	r3, [r7, #20]
}
 801b8d0:	bf00      	nop
 801b8d2:	e7fe      	b.n	801b8d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d069      	beq.n	801b9ae <pvPortMalloc+0x146>
 801b8da:	4b42      	ldr	r3, [pc, #264]	; (801b9e4 <pvPortMalloc+0x17c>)
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	687a      	ldr	r2, [r7, #4]
 801b8e0:	429a      	cmp	r2, r3
 801b8e2:	d864      	bhi.n	801b9ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b8e4:	4b40      	ldr	r3, [pc, #256]	; (801b9e8 <pvPortMalloc+0x180>)
 801b8e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b8e8:	4b3f      	ldr	r3, [pc, #252]	; (801b9e8 <pvPortMalloc+0x180>)
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b8ee:	e004      	b.n	801b8fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8fc:	685b      	ldr	r3, [r3, #4]
 801b8fe:	687a      	ldr	r2, [r7, #4]
 801b900:	429a      	cmp	r2, r3
 801b902:	d903      	bls.n	801b90c <pvPortMalloc+0xa4>
 801b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d1f1      	bne.n	801b8f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b90c:	4b33      	ldr	r3, [pc, #204]	; (801b9dc <pvPortMalloc+0x174>)
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b912:	429a      	cmp	r2, r3
 801b914:	d04b      	beq.n	801b9ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b916:	6a3b      	ldr	r3, [r7, #32]
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	2208      	movs	r2, #8
 801b91c:	4413      	add	r3, r2
 801b91e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b922:	681a      	ldr	r2, [r3, #0]
 801b924:	6a3b      	ldr	r3, [r7, #32]
 801b926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b92a:	685a      	ldr	r2, [r3, #4]
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	1ad2      	subs	r2, r2, r3
 801b930:	2308      	movs	r3, #8
 801b932:	005b      	lsls	r3, r3, #1
 801b934:	429a      	cmp	r2, r3
 801b936:	d91f      	bls.n	801b978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	4413      	add	r3, r2
 801b93e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b940:	69bb      	ldr	r3, [r7, #24]
 801b942:	f003 0307 	and.w	r3, r3, #7
 801b946:	2b00      	cmp	r3, #0
 801b948:	d00a      	beq.n	801b960 <pvPortMalloc+0xf8>
	__asm volatile
 801b94a:	f04f 0320 	mov.w	r3, #32
 801b94e:	f383 8811 	msr	BASEPRI, r3
 801b952:	f3bf 8f6f 	isb	sy
 801b956:	f3bf 8f4f 	dsb	sy
 801b95a:	613b      	str	r3, [r7, #16]
}
 801b95c:	bf00      	nop
 801b95e:	e7fe      	b.n	801b95e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b962:	685a      	ldr	r2, [r3, #4]
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	1ad2      	subs	r2, r2, r3
 801b968:	69bb      	ldr	r3, [r7, #24]
 801b96a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b96e:	687a      	ldr	r2, [r7, #4]
 801b970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b972:	69b8      	ldr	r0, [r7, #24]
 801b974:	f000 f8f8 	bl	801bb68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b978:	4b1a      	ldr	r3, [pc, #104]	; (801b9e4 <pvPortMalloc+0x17c>)
 801b97a:	681a      	ldr	r2, [r3, #0]
 801b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b97e:	685b      	ldr	r3, [r3, #4]
 801b980:	1ad3      	subs	r3, r2, r3
 801b982:	4a18      	ldr	r2, [pc, #96]	; (801b9e4 <pvPortMalloc+0x17c>)
 801b984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b986:	4b17      	ldr	r3, [pc, #92]	; (801b9e4 <pvPortMalloc+0x17c>)
 801b988:	681a      	ldr	r2, [r3, #0]
 801b98a:	4b18      	ldr	r3, [pc, #96]	; (801b9ec <pvPortMalloc+0x184>)
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	429a      	cmp	r2, r3
 801b990:	d203      	bcs.n	801b99a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b992:	4b14      	ldr	r3, [pc, #80]	; (801b9e4 <pvPortMalloc+0x17c>)
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	4a15      	ldr	r2, [pc, #84]	; (801b9ec <pvPortMalloc+0x184>)
 801b998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b99c:	685a      	ldr	r2, [r3, #4]
 801b99e:	4b10      	ldr	r3, [pc, #64]	; (801b9e0 <pvPortMalloc+0x178>)
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	431a      	orrs	r2, r3
 801b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9aa:	2200      	movs	r2, #0
 801b9ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b9ae:	f7fe fbeb 	bl	801a188 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b9b2:	69fb      	ldr	r3, [r7, #28]
 801b9b4:	f003 0307 	and.w	r3, r3, #7
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d00a      	beq.n	801b9d2 <pvPortMalloc+0x16a>
	__asm volatile
 801b9bc:	f04f 0320 	mov.w	r3, #32
 801b9c0:	f383 8811 	msr	BASEPRI, r3
 801b9c4:	f3bf 8f6f 	isb	sy
 801b9c8:	f3bf 8f4f 	dsb	sy
 801b9cc:	60fb      	str	r3, [r7, #12]
}
 801b9ce:	bf00      	nop
 801b9d0:	e7fe      	b.n	801b9d0 <pvPortMalloc+0x168>
	return pvReturn;
 801b9d2:	69fb      	ldr	r3, [r7, #28]
}
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	3728      	adds	r7, #40	; 0x28
 801b9d8:	46bd      	mov	sp, r7
 801b9da:	bd80      	pop	{r7, pc}
 801b9dc:	20010240 	.word	0x20010240
 801b9e0:	2001024c 	.word	0x2001024c
 801b9e4:	20010244 	.word	0x20010244
 801b9e8:	20010238 	.word	0x20010238
 801b9ec:	20010248 	.word	0x20010248

0801b9f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b9f0:	b580      	push	{r7, lr}
 801b9f2:	b086      	sub	sp, #24
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d048      	beq.n	801ba94 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ba02:	2308      	movs	r3, #8
 801ba04:	425b      	negs	r3, r3
 801ba06:	697a      	ldr	r2, [r7, #20]
 801ba08:	4413      	add	r3, r2
 801ba0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ba0c:	697b      	ldr	r3, [r7, #20]
 801ba0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ba10:	693b      	ldr	r3, [r7, #16]
 801ba12:	685a      	ldr	r2, [r3, #4]
 801ba14:	4b21      	ldr	r3, [pc, #132]	; (801ba9c <vPortFree+0xac>)
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	4013      	ands	r3, r2
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d10a      	bne.n	801ba34 <vPortFree+0x44>
	__asm volatile
 801ba1e:	f04f 0320 	mov.w	r3, #32
 801ba22:	f383 8811 	msr	BASEPRI, r3
 801ba26:	f3bf 8f6f 	isb	sy
 801ba2a:	f3bf 8f4f 	dsb	sy
 801ba2e:	60fb      	str	r3, [r7, #12]
}
 801ba30:	bf00      	nop
 801ba32:	e7fe      	b.n	801ba32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ba34:	693b      	ldr	r3, [r7, #16]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d00a      	beq.n	801ba52 <vPortFree+0x62>
	__asm volatile
 801ba3c:	f04f 0320 	mov.w	r3, #32
 801ba40:	f383 8811 	msr	BASEPRI, r3
 801ba44:	f3bf 8f6f 	isb	sy
 801ba48:	f3bf 8f4f 	dsb	sy
 801ba4c:	60bb      	str	r3, [r7, #8]
}
 801ba4e:	bf00      	nop
 801ba50:	e7fe      	b.n	801ba50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ba52:	693b      	ldr	r3, [r7, #16]
 801ba54:	685a      	ldr	r2, [r3, #4]
 801ba56:	4b11      	ldr	r3, [pc, #68]	; (801ba9c <vPortFree+0xac>)
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	4013      	ands	r3, r2
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d019      	beq.n	801ba94 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801ba60:	693b      	ldr	r3, [r7, #16]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d115      	bne.n	801ba94 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ba68:	693b      	ldr	r3, [r7, #16]
 801ba6a:	685a      	ldr	r2, [r3, #4]
 801ba6c:	4b0b      	ldr	r3, [pc, #44]	; (801ba9c <vPortFree+0xac>)
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	43db      	mvns	r3, r3
 801ba72:	401a      	ands	r2, r3
 801ba74:	693b      	ldr	r3, [r7, #16]
 801ba76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801ba78:	f7fe fb78 	bl	801a16c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ba7c:	693b      	ldr	r3, [r7, #16]
 801ba7e:	685a      	ldr	r2, [r3, #4]
 801ba80:	4b07      	ldr	r3, [pc, #28]	; (801baa0 <vPortFree+0xb0>)
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	4413      	add	r3, r2
 801ba86:	4a06      	ldr	r2, [pc, #24]	; (801baa0 <vPortFree+0xb0>)
 801ba88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ba8a:	6938      	ldr	r0, [r7, #16]
 801ba8c:	f000 f86c 	bl	801bb68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801ba90:	f7fe fb7a 	bl	801a188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801ba94:	bf00      	nop
 801ba96:	3718      	adds	r7, #24
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	bd80      	pop	{r7, pc}
 801ba9c:	2001024c 	.word	0x2001024c
 801baa0:	20010244 	.word	0x20010244

0801baa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801baa4:	b480      	push	{r7}
 801baa6:	b085      	sub	sp, #20
 801baa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801baaa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801baae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801bab0:	4b27      	ldr	r3, [pc, #156]	; (801bb50 <prvHeapInit+0xac>)
 801bab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801bab4:	68fb      	ldr	r3, [r7, #12]
 801bab6:	f003 0307 	and.w	r3, r3, #7
 801baba:	2b00      	cmp	r3, #0
 801babc:	d00c      	beq.n	801bad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	3307      	adds	r3, #7
 801bac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	f023 0307 	bic.w	r3, r3, #7
 801baca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801bacc:	68ba      	ldr	r2, [r7, #8]
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	1ad3      	subs	r3, r2, r3
 801bad2:	4a1f      	ldr	r2, [pc, #124]	; (801bb50 <prvHeapInit+0xac>)
 801bad4:	4413      	add	r3, r2
 801bad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801bad8:	68fb      	ldr	r3, [r7, #12]
 801bada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801badc:	4a1d      	ldr	r2, [pc, #116]	; (801bb54 <prvHeapInit+0xb0>)
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801bae2:	4b1c      	ldr	r3, [pc, #112]	; (801bb54 <prvHeapInit+0xb0>)
 801bae4:	2200      	movs	r2, #0
 801bae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	68ba      	ldr	r2, [r7, #8]
 801baec:	4413      	add	r3, r2
 801baee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801baf0:	2208      	movs	r2, #8
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	1a9b      	subs	r3, r3, r2
 801baf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	f023 0307 	bic.w	r3, r3, #7
 801bafe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	4a15      	ldr	r2, [pc, #84]	; (801bb58 <prvHeapInit+0xb4>)
 801bb04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801bb06:	4b14      	ldr	r3, [pc, #80]	; (801bb58 <prvHeapInit+0xb4>)
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801bb0e:	4b12      	ldr	r3, [pc, #72]	; (801bb58 <prvHeapInit+0xb4>)
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	2200      	movs	r2, #0
 801bb14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801bb1a:	683b      	ldr	r3, [r7, #0]
 801bb1c:	68fa      	ldr	r2, [r7, #12]
 801bb1e:	1ad2      	subs	r2, r2, r3
 801bb20:	683b      	ldr	r3, [r7, #0]
 801bb22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801bb24:	4b0c      	ldr	r3, [pc, #48]	; (801bb58 <prvHeapInit+0xb4>)
 801bb26:	681a      	ldr	r2, [r3, #0]
 801bb28:	683b      	ldr	r3, [r7, #0]
 801bb2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bb2c:	683b      	ldr	r3, [r7, #0]
 801bb2e:	685b      	ldr	r3, [r3, #4]
 801bb30:	4a0a      	ldr	r2, [pc, #40]	; (801bb5c <prvHeapInit+0xb8>)
 801bb32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bb34:	683b      	ldr	r3, [r7, #0]
 801bb36:	685b      	ldr	r3, [r3, #4]
 801bb38:	4a09      	ldr	r2, [pc, #36]	; (801bb60 <prvHeapInit+0xbc>)
 801bb3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801bb3c:	4b09      	ldr	r3, [pc, #36]	; (801bb64 <prvHeapInit+0xc0>)
 801bb3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801bb42:	601a      	str	r2, [r3, #0]
}
 801bb44:	bf00      	nop
 801bb46:	3714      	adds	r7, #20
 801bb48:	46bd      	mov	sp, r7
 801bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb4e:	4770      	bx	lr
 801bb50:	20001238 	.word	0x20001238
 801bb54:	20010238 	.word	0x20010238
 801bb58:	20010240 	.word	0x20010240
 801bb5c:	20010248 	.word	0x20010248
 801bb60:	20010244 	.word	0x20010244
 801bb64:	2001024c 	.word	0x2001024c

0801bb68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801bb68:	b480      	push	{r7}
 801bb6a:	b085      	sub	sp, #20
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801bb70:	4b28      	ldr	r3, [pc, #160]	; (801bc14 <prvInsertBlockIntoFreeList+0xac>)
 801bb72:	60fb      	str	r3, [r7, #12]
 801bb74:	e002      	b.n	801bb7c <prvInsertBlockIntoFreeList+0x14>
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	60fb      	str	r3, [r7, #12]
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	687a      	ldr	r2, [r7, #4]
 801bb82:	429a      	cmp	r2, r3
 801bb84:	d8f7      	bhi.n	801bb76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	685b      	ldr	r3, [r3, #4]
 801bb8e:	68ba      	ldr	r2, [r7, #8]
 801bb90:	4413      	add	r3, r2
 801bb92:	687a      	ldr	r2, [r7, #4]
 801bb94:	429a      	cmp	r2, r3
 801bb96:	d108      	bne.n	801bbaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	685a      	ldr	r2, [r3, #4]
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	685b      	ldr	r3, [r3, #4]
 801bba0:	441a      	add	r2, r3
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	685b      	ldr	r3, [r3, #4]
 801bbb2:	68ba      	ldr	r2, [r7, #8]
 801bbb4:	441a      	add	r2, r3
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	429a      	cmp	r2, r3
 801bbbc:	d118      	bne.n	801bbf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	681a      	ldr	r2, [r3, #0]
 801bbc2:	4b15      	ldr	r3, [pc, #84]	; (801bc18 <prvInsertBlockIntoFreeList+0xb0>)
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	429a      	cmp	r2, r3
 801bbc8:	d00d      	beq.n	801bbe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	685a      	ldr	r2, [r3, #4]
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	685b      	ldr	r3, [r3, #4]
 801bbd4:	441a      	add	r2, r3
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	681a      	ldr	r2, [r3, #0]
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	601a      	str	r2, [r3, #0]
 801bbe4:	e008      	b.n	801bbf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801bbe6:	4b0c      	ldr	r3, [pc, #48]	; (801bc18 <prvInsertBlockIntoFreeList+0xb0>)
 801bbe8:	681a      	ldr	r2, [r3, #0]
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	601a      	str	r2, [r3, #0]
 801bbee:	e003      	b.n	801bbf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	681a      	ldr	r2, [r3, #0]
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801bbf8:	68fa      	ldr	r2, [r7, #12]
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	429a      	cmp	r2, r3
 801bbfe:	d002      	beq.n	801bc06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	687a      	ldr	r2, [r7, #4]
 801bc04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801bc06:	bf00      	nop
 801bc08:	3714      	adds	r7, #20
 801bc0a:	46bd      	mov	sp, r7
 801bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc10:	4770      	bx	lr
 801bc12:	bf00      	nop
 801bc14:	20010238 	.word	0x20010238
 801bc18:	20010240 	.word	0x20010240

0801bc1c <parson_strndup>:
static int    json_serialize_string(const char *string, char *buf);
static int    append_indent(char *buf, int level);
static int    append_string(char *buf, const char *string);

/* Various */
static char * parson_strndup(const char *string, size_t n) {
 801bc1c:	b580      	push	{r7, lr}
 801bc1e:	b084      	sub	sp, #16
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	6078      	str	r0, [r7, #4]
 801bc24:	6039      	str	r1, [r7, #0]
    char *output_string = (char*)parson_malloc(n + 1);
 801bc26:	4b0d      	ldr	r3, [pc, #52]	; (801bc5c <parson_strndup+0x40>)
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	683a      	ldr	r2, [r7, #0]
 801bc2c:	3201      	adds	r2, #1
 801bc2e:	4610      	mov	r0, r2
 801bc30:	4798      	blx	r3
 801bc32:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d101      	bne.n	801bc3e <parson_strndup+0x22>
        return NULL;
 801bc3a:	2300      	movs	r3, #0
 801bc3c:	e00a      	b.n	801bc54 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 801bc3e:	68fa      	ldr	r2, [r7, #12]
 801bc40:	683b      	ldr	r3, [r7, #0]
 801bc42:	4413      	add	r3, r2
 801bc44:	2200      	movs	r2, #0
 801bc46:	701a      	strb	r2, [r3, #0]
    strncpy(output_string, string, n);
 801bc48:	683a      	ldr	r2, [r7, #0]
 801bc4a:	6879      	ldr	r1, [r7, #4]
 801bc4c:	68f8      	ldr	r0, [r7, #12]
 801bc4e:	f004 f947 	bl	801fee0 <strncpy>
    return output_string;
 801bc52:	68fb      	ldr	r3, [r7, #12]
}
 801bc54:	4618      	mov	r0, r3
 801bc56:	3710      	adds	r7, #16
 801bc58:	46bd      	mov	sp, r7
 801bc5a:	bd80      	pop	{r7, pc}
 801bc5c:	200002b0 	.word	0x200002b0

0801bc60 <hex_char_to_int>:

static char * parson_strdup(const char *string) {
    return parson_strndup(string, strlen(string));
}

static int hex_char_to_int(char c) {
 801bc60:	b480      	push	{r7}
 801bc62:	b083      	sub	sp, #12
 801bc64:	af00      	add	r7, sp, #0
 801bc66:	4603      	mov	r3, r0
 801bc68:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 801bc6a:	79fb      	ldrb	r3, [r7, #7]
 801bc6c:	2b2f      	cmp	r3, #47	; 0x2f
 801bc6e:	d905      	bls.n	801bc7c <hex_char_to_int+0x1c>
 801bc70:	79fb      	ldrb	r3, [r7, #7]
 801bc72:	2b39      	cmp	r3, #57	; 0x39
 801bc74:	d802      	bhi.n	801bc7c <hex_char_to_int+0x1c>
        return c - '0';
 801bc76:	79fb      	ldrb	r3, [r7, #7]
 801bc78:	3b30      	subs	r3, #48	; 0x30
 801bc7a:	e013      	b.n	801bca4 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 801bc7c:	79fb      	ldrb	r3, [r7, #7]
 801bc7e:	2b60      	cmp	r3, #96	; 0x60
 801bc80:	d905      	bls.n	801bc8e <hex_char_to_int+0x2e>
 801bc82:	79fb      	ldrb	r3, [r7, #7]
 801bc84:	2b66      	cmp	r3, #102	; 0x66
 801bc86:	d802      	bhi.n	801bc8e <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 801bc88:	79fb      	ldrb	r3, [r7, #7]
 801bc8a:	3b57      	subs	r3, #87	; 0x57
 801bc8c:	e00a      	b.n	801bca4 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 801bc8e:	79fb      	ldrb	r3, [r7, #7]
 801bc90:	2b40      	cmp	r3, #64	; 0x40
 801bc92:	d905      	bls.n	801bca0 <hex_char_to_int+0x40>
 801bc94:	79fb      	ldrb	r3, [r7, #7]
 801bc96:	2b46      	cmp	r3, #70	; 0x46
 801bc98:	d802      	bhi.n	801bca0 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 801bc9a:	79fb      	ldrb	r3, [r7, #7]
 801bc9c:	3b37      	subs	r3, #55	; 0x37
 801bc9e:	e001      	b.n	801bca4 <hex_char_to_int+0x44>
    }
    return -1;
 801bca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bca4:	4618      	mov	r0, r3
 801bca6:	370c      	adds	r7, #12
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcae:	4770      	bx	lr

0801bcb0 <parse_utf16_hex>:

static int parse_utf16_hex(const char *s, unsigned int *result) {
 801bcb0:	b580      	push	{r7, lr}
 801bcb2:	b086      	sub	sp, #24
 801bcb4:	af00      	add	r7, sp, #0
 801bcb6:	6078      	str	r0, [r7, #4]
 801bcb8:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	781b      	ldrb	r3, [r3, #0]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d00e      	beq.n	801bce0 <parse_utf16_hex+0x30>
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	3301      	adds	r3, #1
 801bcc6:	781b      	ldrb	r3, [r3, #0]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d009      	beq.n	801bce0 <parse_utf16_hex+0x30>
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	3302      	adds	r3, #2
 801bcd0:	781b      	ldrb	r3, [r3, #0]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d004      	beq.n	801bce0 <parse_utf16_hex+0x30>
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	3303      	adds	r3, #3
 801bcda:	781b      	ldrb	r3, [r3, #0]
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d101      	bne.n	801bce4 <parse_utf16_hex+0x34>
        return 0;
 801bce0:	2300      	movs	r3, #0
 801bce2:	e03a      	b.n	801bd5a <parse_utf16_hex+0xaa>
    }
    x1 = hex_char_to_int(s[0]);
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	781b      	ldrb	r3, [r3, #0]
 801bce8:	4618      	mov	r0, r3
 801bcea:	f7ff ffb9 	bl	801bc60 <hex_char_to_int>
 801bcee:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	3301      	adds	r3, #1
 801bcf4:	781b      	ldrb	r3, [r3, #0]
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	f7ff ffb2 	bl	801bc60 <hex_char_to_int>
 801bcfc:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	3302      	adds	r3, #2
 801bd02:	781b      	ldrb	r3, [r3, #0]
 801bd04:	4618      	mov	r0, r3
 801bd06:	f7ff ffab 	bl	801bc60 <hex_char_to_int>
 801bd0a:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	3303      	adds	r3, #3
 801bd10:	781b      	ldrb	r3, [r3, #0]
 801bd12:	4618      	mov	r0, r3
 801bd14:	f7ff ffa4 	bl	801bc60 <hex_char_to_int>
 801bd18:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 801bd1a:	697b      	ldr	r3, [r7, #20]
 801bd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd20:	d00b      	beq.n	801bd3a <parse_utf16_hex+0x8a>
 801bd22:	693b      	ldr	r3, [r7, #16]
 801bd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd28:	d007      	beq.n	801bd3a <parse_utf16_hex+0x8a>
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd30:	d003      	beq.n	801bd3a <parse_utf16_hex+0x8a>
 801bd32:	68bb      	ldr	r3, [r7, #8]
 801bd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd38:	d101      	bne.n	801bd3e <parse_utf16_hex+0x8e>
        return 0;
 801bd3a:	2300      	movs	r3, #0
 801bd3c:	e00d      	b.n	801bd5a <parse_utf16_hex+0xaa>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 801bd3e:	697b      	ldr	r3, [r7, #20]
 801bd40:	031a      	lsls	r2, r3, #12
 801bd42:	693b      	ldr	r3, [r7, #16]
 801bd44:	021b      	lsls	r3, r3, #8
 801bd46:	431a      	orrs	r2, r3
 801bd48:	68fb      	ldr	r3, [r7, #12]
 801bd4a:	011b      	lsls	r3, r3, #4
 801bd4c:	431a      	orrs	r2, r3
 801bd4e:	68bb      	ldr	r3, [r7, #8]
 801bd50:	4313      	orrs	r3, r2
 801bd52:	461a      	mov	r2, r3
 801bd54:	683b      	ldr	r3, [r7, #0]
 801bd56:	601a      	str	r2, [r3, #0]
    return 1;
 801bd58:	2301      	movs	r3, #1
}
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	3718      	adds	r7, #24
 801bd5e:	46bd      	mov	sp, r7
 801bd60:	bd80      	pop	{r7, pc}

0801bd62 <num_bytes_in_utf8_sequence>:

static int num_bytes_in_utf8_sequence(unsigned char c) {
 801bd62:	b480      	push	{r7}
 801bd64:	b083      	sub	sp, #12
 801bd66:	af00      	add	r7, sp, #0
 801bd68:	4603      	mov	r3, r0
 801bd6a:	71fb      	strb	r3, [r7, #7]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 801bd6c:	79fb      	ldrb	r3, [r7, #7]
 801bd6e:	2bc0      	cmp	r3, #192	; 0xc0
 801bd70:	d00a      	beq.n	801bd88 <num_bytes_in_utf8_sequence+0x26>
 801bd72:	79fb      	ldrb	r3, [r7, #7]
 801bd74:	2bc1      	cmp	r3, #193	; 0xc1
 801bd76:	d007      	beq.n	801bd88 <num_bytes_in_utf8_sequence+0x26>
 801bd78:	79fb      	ldrb	r3, [r7, #7]
 801bd7a:	2bf4      	cmp	r3, #244	; 0xf4
 801bd7c:	d804      	bhi.n	801bd88 <num_bytes_in_utf8_sequence+0x26>
 801bd7e:	79fb      	ldrb	r3, [r7, #7]
 801bd80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bd84:	2b80      	cmp	r3, #128	; 0x80
 801bd86:	d101      	bne.n	801bd8c <num_bytes_in_utf8_sequence+0x2a>
        return 0;
 801bd88:	2300      	movs	r3, #0
 801bd8a:	e01b      	b.n	801bdc4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 801bd8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	db01      	blt.n	801bd98 <num_bytes_in_utf8_sequence+0x36>
        return 1;
 801bd94:	2301      	movs	r3, #1
 801bd96:	e015      	b.n	801bdc4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 801bd98:	79fb      	ldrb	r3, [r7, #7]
 801bd9a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801bd9e:	2bc0      	cmp	r3, #192	; 0xc0
 801bda0:	d101      	bne.n	801bda6 <num_bytes_in_utf8_sequence+0x44>
        return 2;
 801bda2:	2302      	movs	r3, #2
 801bda4:	e00e      	b.n	801bdc4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 801bda6:	79fb      	ldrb	r3, [r7, #7]
 801bda8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bdac:	2be0      	cmp	r3, #224	; 0xe0
 801bdae:	d101      	bne.n	801bdb4 <num_bytes_in_utf8_sequence+0x52>
        return 3;
 801bdb0:	2303      	movs	r3, #3
 801bdb2:	e007      	b.n	801bdc4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 801bdb4:	79fb      	ldrb	r3, [r7, #7]
 801bdb6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801bdba:	2bf0      	cmp	r3, #240	; 0xf0
 801bdbc:	d101      	bne.n	801bdc2 <num_bytes_in_utf8_sequence+0x60>
        return 4;
 801bdbe:	2304      	movs	r3, #4
 801bdc0:	e000      	b.n	801bdc4 <num_bytes_in_utf8_sequence+0x62>
    }
    return 0; /* won't happen */
 801bdc2:	2300      	movs	r3, #0
}
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	370c      	adds	r7, #12
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdce:	4770      	bx	lr

0801bdd0 <verify_utf8_sequence>:

static int verify_utf8_sequence(const unsigned char *string, int *len) {
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b084      	sub	sp, #16
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
 801bdd8:	6039      	str	r1, [r7, #0]
    unsigned int cp = 0;
 801bdda:	2300      	movs	r3, #0
 801bddc:	60fb      	str	r3, [r7, #12]
    *len = num_bytes_in_utf8_sequence(string[0]);
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	781b      	ldrb	r3, [r3, #0]
 801bde2:	4618      	mov	r0, r3
 801bde4:	f7ff ffbd 	bl	801bd62 <num_bytes_in_utf8_sequence>
 801bde8:	4602      	mov	r2, r0
 801bdea:	683b      	ldr	r3, [r7, #0]
 801bdec:	601a      	str	r2, [r3, #0]

    if (*len == 1) {
 801bdee:	683b      	ldr	r3, [r7, #0]
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	2b01      	cmp	r3, #1
 801bdf4:	d103      	bne.n	801bdfe <verify_utf8_sequence+0x2e>
        cp = string[0];
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	781b      	ldrb	r3, [r3, #0]
 801bdfa:	60fb      	str	r3, [r7, #12]
 801bdfc:	e07f      	b.n	801befe <verify_utf8_sequence+0x12e>
    } else if (*len == 2 && IS_CONT(string[1])) {
 801bdfe:	683b      	ldr	r3, [r7, #0]
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	2b02      	cmp	r3, #2
 801be04:	d115      	bne.n	801be32 <verify_utf8_sequence+0x62>
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	3301      	adds	r3, #1
 801be0a:	781b      	ldrb	r3, [r3, #0]
 801be0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801be10:	2b80      	cmp	r3, #128	; 0x80
 801be12:	d10e      	bne.n	801be32 <verify_utf8_sequence+0x62>
        cp = string[0] & 0x1F;
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	781b      	ldrb	r3, [r3, #0]
 801be18:	f003 031f 	and.w	r3, r3, #31
 801be1c:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	019a      	lsls	r2, r3, #6
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	3301      	adds	r3, #1
 801be26:	781b      	ldrb	r3, [r3, #0]
 801be28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801be2c:	4313      	orrs	r3, r2
 801be2e:	60fb      	str	r3, [r7, #12]
 801be30:	e065      	b.n	801befe <verify_utf8_sequence+0x12e>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 801be32:	683b      	ldr	r3, [r7, #0]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	2b03      	cmp	r3, #3
 801be38:	d125      	bne.n	801be86 <verify_utf8_sequence+0xb6>
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	3301      	adds	r3, #1
 801be3e:	781b      	ldrb	r3, [r3, #0]
 801be40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801be44:	2b80      	cmp	r3, #128	; 0x80
 801be46:	d11e      	bne.n	801be86 <verify_utf8_sequence+0xb6>
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	3302      	adds	r3, #2
 801be4c:	781b      	ldrb	r3, [r3, #0]
 801be4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801be52:	2b80      	cmp	r3, #128	; 0x80
 801be54:	d117      	bne.n	801be86 <verify_utf8_sequence+0xb6>
        cp = ((unsigned char)string[0]) & 0xF;
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	781b      	ldrb	r3, [r3, #0]
 801be5a:	f003 030f 	and.w	r3, r3, #15
 801be5e:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	019a      	lsls	r2, r3, #6
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	3301      	adds	r3, #1
 801be68:	781b      	ldrb	r3, [r3, #0]
 801be6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801be6e:	4313      	orrs	r3, r2
 801be70:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	019a      	lsls	r2, r3, #6
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	3302      	adds	r3, #2
 801be7a:	781b      	ldrb	r3, [r3, #0]
 801be7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801be80:	4313      	orrs	r3, r2
 801be82:	60fb      	str	r3, [r7, #12]
 801be84:	e03b      	b.n	801befe <verify_utf8_sequence+0x12e>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 801be86:	683b      	ldr	r3, [r7, #0]
 801be88:	681b      	ldr	r3, [r3, #0]
 801be8a:	2b04      	cmp	r3, #4
 801be8c:	d135      	bne.n	801befa <verify_utf8_sequence+0x12a>
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	3301      	adds	r3, #1
 801be92:	781b      	ldrb	r3, [r3, #0]
 801be94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801be98:	2b80      	cmp	r3, #128	; 0x80
 801be9a:	d12e      	bne.n	801befa <verify_utf8_sequence+0x12a>
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	3302      	adds	r3, #2
 801bea0:	781b      	ldrb	r3, [r3, #0]
 801bea2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bea6:	2b80      	cmp	r3, #128	; 0x80
 801bea8:	d127      	bne.n	801befa <verify_utf8_sequence+0x12a>
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	3303      	adds	r3, #3
 801beae:	781b      	ldrb	r3, [r3, #0]
 801beb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801beb4:	2b80      	cmp	r3, #128	; 0x80
 801beb6:	d120      	bne.n	801befa <verify_utf8_sequence+0x12a>
        cp = string[0] & 0x7;
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	781b      	ldrb	r3, [r3, #0]
 801bebc:	f003 0307 	and.w	r3, r3, #7
 801bec0:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	019a      	lsls	r2, r3, #6
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	3301      	adds	r3, #1
 801beca:	781b      	ldrb	r3, [r3, #0]
 801becc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bed0:	4313      	orrs	r3, r2
 801bed2:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	019a      	lsls	r2, r3, #6
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	3302      	adds	r3, #2
 801bedc:	781b      	ldrb	r3, [r3, #0]
 801bede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bee2:	4313      	orrs	r3, r2
 801bee4:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[3] & 0x3F);
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	019a      	lsls	r2, r3, #6
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	3303      	adds	r3, #3
 801beee:	781b      	ldrb	r3, [r3, #0]
 801bef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bef4:	4313      	orrs	r3, r2
 801bef6:	60fb      	str	r3, [r7, #12]
 801bef8:	e001      	b.n	801befe <verify_utf8_sequence+0x12e>
    } else {
        return 0;
 801befa:	2300      	movs	r3, #0
 801befc:	e029      	b.n	801bf52 <verify_utf8_sequence+0x182>
    }

    /* overlong encodings */
    if ((cp < 0x80    && *len > 1) ||
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	2b7f      	cmp	r3, #127	; 0x7f
 801bf02:	d803      	bhi.n	801bf0c <verify_utf8_sequence+0x13c>
 801bf04:	683b      	ldr	r3, [r7, #0]
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	2b01      	cmp	r3, #1
 801bf0a:	dc0f      	bgt.n	801bf2c <verify_utf8_sequence+0x15c>
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bf12:	d203      	bcs.n	801bf1c <verify_utf8_sequence+0x14c>
        (cp < 0x800   && *len > 2) ||
 801bf14:	683b      	ldr	r3, [r7, #0]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	2b02      	cmp	r3, #2
 801bf1a:	dc07      	bgt.n	801bf2c <verify_utf8_sequence+0x15c>
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bf22:	d205      	bcs.n	801bf30 <verify_utf8_sequence+0x160>
        (cp < 0x10000 && *len > 3)) {
 801bf24:	683b      	ldr	r3, [r7, #0]
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	2b03      	cmp	r3, #3
 801bf2a:	dd01      	ble.n	801bf30 <verify_utf8_sequence+0x160>
        return 0;
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	e010      	b.n	801bf52 <verify_utf8_sequence+0x182>
    }

    /* invalid unicode */
    if (cp > 0x10FFFF) {
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 801bf36:	d301      	bcc.n	801bf3c <verify_utf8_sequence+0x16c>
        return 0;
 801bf38:	2300      	movs	r3, #0
 801bf3a:	e00a      	b.n	801bf52 <verify_utf8_sequence+0x182>
    }

    /* surrogate halves */
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 801bf3c:	68fb      	ldr	r3, [r7, #12]
 801bf3e:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801bf42:	d305      	bcc.n	801bf50 <verify_utf8_sequence+0x180>
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801bf4a:	d201      	bcs.n	801bf50 <verify_utf8_sequence+0x180>
        return 0;
 801bf4c:	2300      	movs	r3, #0
 801bf4e:	e000      	b.n	801bf52 <verify_utf8_sequence+0x182>
    }

    return 1;
 801bf50:	2301      	movs	r3, #1
}
 801bf52:	4618      	mov	r0, r3
 801bf54:	3710      	adds	r7, #16
 801bf56:	46bd      	mov	sp, r7
 801bf58:	bd80      	pop	{r7, pc}

0801bf5a <is_valid_utf8>:

static int is_valid_utf8(const char *string, size_t string_len) {
 801bf5a:	b580      	push	{r7, lr}
 801bf5c:	b084      	sub	sp, #16
 801bf5e:	af00      	add	r7, sp, #0
 801bf60:	6078      	str	r0, [r7, #4]
 801bf62:	6039      	str	r1, [r7, #0]
    int len = 0;
 801bf64:	2300      	movs	r3, #0
 801bf66:	60bb      	str	r3, [r7, #8]
    const char *string_end =  string + string_len;
 801bf68:	687a      	ldr	r2, [r7, #4]
 801bf6a:	683b      	ldr	r3, [r7, #0]
 801bf6c:	4413      	add	r3, r2
 801bf6e:	60fb      	str	r3, [r7, #12]
    while (string < string_end) {
 801bf70:	e00f      	b.n	801bf92 <is_valid_utf8+0x38>
        if (!verify_utf8_sequence((const unsigned char*)string, &len)) {
 801bf72:	f107 0308 	add.w	r3, r7, #8
 801bf76:	4619      	mov	r1, r3
 801bf78:	6878      	ldr	r0, [r7, #4]
 801bf7a:	f7ff ff29 	bl	801bdd0 <verify_utf8_sequence>
 801bf7e:	4603      	mov	r3, r0
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d101      	bne.n	801bf88 <is_valid_utf8+0x2e>
            return 0;
 801bf84:	2300      	movs	r3, #0
 801bf86:	e009      	b.n	801bf9c <is_valid_utf8+0x42>
        }
        string += len;
 801bf88:	68bb      	ldr	r3, [r7, #8]
 801bf8a:	461a      	mov	r2, r3
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	4413      	add	r3, r2
 801bf90:	607b      	str	r3, [r7, #4]
    while (string < string_end) {
 801bf92:	687a      	ldr	r2, [r7, #4]
 801bf94:	68fb      	ldr	r3, [r7, #12]
 801bf96:	429a      	cmp	r2, r3
 801bf98:	d3eb      	bcc.n	801bf72 <is_valid_utf8+0x18>
    }
    return 1;
 801bf9a:	2301      	movs	r3, #1
}
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	3710      	adds	r7, #16
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	bd80      	pop	{r7, pc}

0801bfa4 <is_decimal>:

static int is_decimal(const char *string, size_t length) {
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	b082      	sub	sp, #8
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	6078      	str	r0, [r7, #4]
 801bfac:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 801bfae:	683b      	ldr	r3, [r7, #0]
 801bfb0:	2b01      	cmp	r3, #1
 801bfb2:	d90a      	bls.n	801bfca <is_decimal+0x26>
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	781b      	ldrb	r3, [r3, #0]
 801bfb8:	2b30      	cmp	r3, #48	; 0x30
 801bfba:	d106      	bne.n	801bfca <is_decimal+0x26>
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	3301      	adds	r3, #1
 801bfc0:	781b      	ldrb	r3, [r3, #0]
 801bfc2:	2b2e      	cmp	r3, #46	; 0x2e
 801bfc4:	d001      	beq.n	801bfca <is_decimal+0x26>
        return 0;
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	e024      	b.n	801c014 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 801bfca:	683b      	ldr	r3, [r7, #0]
 801bfcc:	2b02      	cmp	r3, #2
 801bfce:	d91b      	bls.n	801c008 <is_decimal+0x64>
 801bfd0:	2202      	movs	r2, #2
 801bfd2:	4912      	ldr	r1, [pc, #72]	; (801c01c <is_decimal+0x78>)
 801bfd4:	6878      	ldr	r0, [r7, #4]
 801bfd6:	f003 ff71 	bl	801febc <strncmp>
 801bfda:	4603      	mov	r3, r0
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d113      	bne.n	801c008 <is_decimal+0x64>
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	3302      	adds	r3, #2
 801bfe4:	781b      	ldrb	r3, [r3, #0]
 801bfe6:	2b2e      	cmp	r3, #46	; 0x2e
 801bfe8:	d00e      	beq.n	801c008 <is_decimal+0x64>
        return 0;
 801bfea:	2300      	movs	r3, #0
 801bfec:	e012      	b.n	801c014 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 801bfee:	687a      	ldr	r2, [r7, #4]
 801bff0:	683b      	ldr	r3, [r7, #0]
 801bff2:	4413      	add	r3, r2
 801bff4:	781b      	ldrb	r3, [r3, #0]
 801bff6:	4619      	mov	r1, r3
 801bff8:	4809      	ldr	r0, [pc, #36]	; (801c020 <is_decimal+0x7c>)
 801bffa:	f003 ff52 	bl	801fea2 <strchr>
 801bffe:	4603      	mov	r3, r0
 801c000:	2b00      	cmp	r3, #0
 801c002:	d001      	beq.n	801c008 <is_decimal+0x64>
            return 0;
 801c004:	2300      	movs	r3, #0
 801c006:	e005      	b.n	801c014 <is_decimal+0x70>
    while (length--) {
 801c008:	683b      	ldr	r3, [r7, #0]
 801c00a:	1e5a      	subs	r2, r3, #1
 801c00c:	603a      	str	r2, [r7, #0]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d1ed      	bne.n	801bfee <is_decimal+0x4a>
        }
    }
    return 1;
 801c012:	2301      	movs	r3, #1
}
 801c014:	4618      	mov	r0, r3
 801c016:	3708      	adds	r7, #8
 801c018:	46bd      	mov	sp, r7
 801c01a:	bd80      	pop	{r7, pc}
 801c01c:	0802397c 	.word	0x0802397c
 801c020:	08023980 	.word	0x08023980

0801c024 <json_object_init>:
        string++;
    }
}

/* JSON Object */
static JSON_Object * json_object_init(JSON_Value *wrapping_value) {
 801c024:	b580      	push	{r7, lr}
 801c026:	b084      	sub	sp, #16
 801c028:	af00      	add	r7, sp, #0
 801c02a:	6078      	str	r0, [r7, #4]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 801c02c:	4b0e      	ldr	r3, [pc, #56]	; (801c068 <json_object_init+0x44>)
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	2014      	movs	r0, #20
 801c032:	4798      	blx	r3
 801c034:	60f8      	str	r0, [r7, #12]
    if (new_obj == NULL) {
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d101      	bne.n	801c040 <json_object_init+0x1c>
        return NULL;
 801c03c:	2300      	movs	r3, #0
 801c03e:	e00f      	b.n	801c060 <json_object_init+0x3c>
    }
    new_obj->wrapping_value = wrapping_value;
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	687a      	ldr	r2, [r7, #4]
 801c044:	601a      	str	r2, [r3, #0]
    new_obj->names = (char**)NULL;
 801c046:	68fb      	ldr	r3, [r7, #12]
 801c048:	2200      	movs	r2, #0
 801c04a:	605a      	str	r2, [r3, #4]
    new_obj->values = (JSON_Value**)NULL;
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	2200      	movs	r2, #0
 801c050:	609a      	str	r2, [r3, #8]
    new_obj->capacity = 0;
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	2200      	movs	r2, #0
 801c056:	611a      	str	r2, [r3, #16]
    new_obj->count = 0;
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	2200      	movs	r2, #0
 801c05c:	60da      	str	r2, [r3, #12]
    return new_obj;
 801c05e:	68fb      	ldr	r3, [r7, #12]
}
 801c060:	4618      	mov	r0, r3
 801c062:	3710      	adds	r7, #16
 801c064:	46bd      	mov	sp, r7
 801c066:	bd80      	pop	{r7, pc}
 801c068:	200002b0 	.word	0x200002b0

0801c06c <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
 801c06c:	b580      	push	{r7, lr}
 801c06e:	b084      	sub	sp, #16
 801c070:	af00      	add	r7, sp, #0
 801c072:	60f8      	str	r0, [r7, #12]
 801c074:	60b9      	str	r1, [r7, #8]
 801c076:	607a      	str	r2, [r7, #4]
    if (name == NULL) {
 801c078:	68bb      	ldr	r3, [r7, #8]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d102      	bne.n	801c084 <json_object_add+0x18>
        return JSONFailure;
 801c07e:	f04f 33ff 	mov.w	r3, #4294967295
 801c082:	e009      	b.n	801c098 <json_object_add+0x2c>
    }
    return json_object_addn(object, name, strlen(name), value);
 801c084:	68b8      	ldr	r0, [r7, #8]
 801c086:	f7e4 f8c5 	bl	8000214 <strlen>
 801c08a:	4602      	mov	r2, r0
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	68b9      	ldr	r1, [r7, #8]
 801c090:	68f8      	ldr	r0, [r7, #12]
 801c092:	f000 f805 	bl	801c0a0 <json_object_addn>
 801c096:	4603      	mov	r3, r0
}
 801c098:	4618      	mov	r0, r3
 801c09a:	3710      	adds	r7, #16
 801c09c:	46bd      	mov	sp, r7
 801c09e:	bd80      	pop	{r7, pc}

0801c0a0 <json_object_addn>:

static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 801c0a0:	b590      	push	{r4, r7, lr}
 801c0a2:	b087      	sub	sp, #28
 801c0a4:	af00      	add	r7, sp, #0
 801c0a6:	60f8      	str	r0, [r7, #12]
 801c0a8:	60b9      	str	r1, [r7, #8]
 801c0aa:	607a      	str	r2, [r7, #4]
 801c0ac:	603b      	str	r3, [r7, #0]
    size_t index = 0;
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d005      	beq.n	801c0c4 <json_object_addn+0x24>
 801c0b8:	68bb      	ldr	r3, [r7, #8]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d002      	beq.n	801c0c4 <json_object_addn+0x24>
 801c0be:	683b      	ldr	r3, [r7, #0]
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d102      	bne.n	801c0ca <json_object_addn+0x2a>
        return JSONFailure;
 801c0c4:	f04f 33ff 	mov.w	r3, #4294967295
 801c0c8:	e04e      	b.n	801c168 <json_object_addn+0xc8>
    }
    if (json_object_getn_value(object, name, name_len) != NULL) {
 801c0ca:	687a      	ldr	r2, [r7, #4]
 801c0cc:	68b9      	ldr	r1, [r7, #8]
 801c0ce:	68f8      	ldr	r0, [r7, #12]
 801c0d0:	f000 f8c8 	bl	801c264 <json_object_getn_value>
 801c0d4:	4603      	mov	r3, r0
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d002      	beq.n	801c0e0 <json_object_addn+0x40>
        return JSONFailure;
 801c0da:	f04f 33ff 	mov.w	r3, #4294967295
 801c0de:	e043      	b.n	801c168 <json_object_addn+0xc8>
    }
    if (object->count >= object->capacity) {
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	68da      	ldr	r2, [r3, #12]
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	691b      	ldr	r3, [r3, #16]
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d311      	bcc.n	801c110 <json_object_addn+0x70>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	691b      	ldr	r3, [r3, #16]
 801c0f0:	005b      	lsls	r3, r3, #1
 801c0f2:	2b10      	cmp	r3, #16
 801c0f4:	bf38      	it	cc
 801c0f6:	2310      	movcc	r3, #16
 801c0f8:	613b      	str	r3, [r7, #16]
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 801c0fa:	6939      	ldr	r1, [r7, #16]
 801c0fc:	68f8      	ldr	r0, [r7, #12]
 801c0fe:	f000 f837 	bl	801c170 <json_object_resize>
 801c102:	4603      	mov	r3, r0
 801c104:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c108:	d102      	bne.n	801c110 <json_object_addn+0x70>
            return JSONFailure;
 801c10a:	f04f 33ff 	mov.w	r3, #4294967295
 801c10e:	e02b      	b.n	801c168 <json_object_addn+0xc8>
        }
    }
    index = object->count;
 801c110:	68fb      	ldr	r3, [r7, #12]
 801c112:	68db      	ldr	r3, [r3, #12]
 801c114:	617b      	str	r3, [r7, #20]
    object->names[index] = parson_strndup(name, name_len);
 801c116:	68fb      	ldr	r3, [r7, #12]
 801c118:	685a      	ldr	r2, [r3, #4]
 801c11a:	697b      	ldr	r3, [r7, #20]
 801c11c:	009b      	lsls	r3, r3, #2
 801c11e:	18d4      	adds	r4, r2, r3
 801c120:	6879      	ldr	r1, [r7, #4]
 801c122:	68b8      	ldr	r0, [r7, #8]
 801c124:	f7ff fd7a 	bl	801bc1c <parson_strndup>
 801c128:	4603      	mov	r3, r0
 801c12a:	6023      	str	r3, [r4, #0]
    if (object->names[index] == NULL) {
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	685a      	ldr	r2, [r3, #4]
 801c130:	697b      	ldr	r3, [r7, #20]
 801c132:	009b      	lsls	r3, r3, #2
 801c134:	4413      	add	r3, r2
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d102      	bne.n	801c142 <json_object_addn+0xa2>
        return JSONFailure;
 801c13c:	f04f 33ff 	mov.w	r3, #4294967295
 801c140:	e012      	b.n	801c168 <json_object_addn+0xc8>
    }
    value->parent = json_object_get_wrapping_value(object);
 801c142:	68f8      	ldr	r0, [r7, #12]
 801c144:	f002 f8d4 	bl	801e2f0 <json_object_get_wrapping_value>
 801c148:	4602      	mov	r2, r0
 801c14a:	683b      	ldr	r3, [r7, #0]
 801c14c:	601a      	str	r2, [r3, #0]
    object->values[index] = value;
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	689a      	ldr	r2, [r3, #8]
 801c152:	697b      	ldr	r3, [r7, #20]
 801c154:	009b      	lsls	r3, r3, #2
 801c156:	4413      	add	r3, r2
 801c158:	683a      	ldr	r2, [r7, #0]
 801c15a:	601a      	str	r2, [r3, #0]
    object->count++;
 801c15c:	68fb      	ldr	r3, [r7, #12]
 801c15e:	68db      	ldr	r3, [r3, #12]
 801c160:	1c5a      	adds	r2, r3, #1
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801c166:	2300      	movs	r3, #0
}
 801c168:	4618      	mov	r0, r3
 801c16a:	371c      	adds	r7, #28
 801c16c:	46bd      	mov	sp, r7
 801c16e:	bd90      	pop	{r4, r7, pc}

0801c170 <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 801c170:	b580      	push	{r7, lr}
 801c172:	b084      	sub	sp, #16
 801c174:	af00      	add	r7, sp, #0
 801c176:	6078      	str	r0, [r7, #4]
 801c178:	6039      	str	r1, [r7, #0]
    char **temp_names = NULL;
 801c17a:	2300      	movs	r3, #0
 801c17c:	60fb      	str	r3, [r7, #12]
    JSON_Value **temp_values = NULL;
 801c17e:	2300      	movs	r3, #0
 801c180:	60bb      	str	r3, [r7, #8]

    if ((object->names == NULL && object->values != NULL) ||
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	685b      	ldr	r3, [r3, #4]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d103      	bne.n	801c192 <json_object_resize+0x22>
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	689b      	ldr	r3, [r3, #8]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d10a      	bne.n	801c1a8 <json_object_resize+0x38>
        (object->names != NULL && object->values == NULL) ||
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	685b      	ldr	r3, [r3, #4]
    if ((object->names == NULL && object->values != NULL) ||
 801c196:	2b00      	cmp	r3, #0
 801c198:	d003      	beq.n	801c1a2 <json_object_resize+0x32>
        (object->names != NULL && object->values == NULL) ||
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	689b      	ldr	r3, [r3, #8]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d002      	beq.n	801c1a8 <json_object_resize+0x38>
 801c1a2:	683b      	ldr	r3, [r7, #0]
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d102      	bne.n	801c1ae <json_object_resize+0x3e>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
 801c1a8:	f04f 33ff 	mov.w	r3, #4294967295
 801c1ac:	e051      	b.n	801c252 <json_object_resize+0xe2>
    }
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 801c1ae:	4b2b      	ldr	r3, [pc, #172]	; (801c25c <json_object_resize+0xec>)
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	683a      	ldr	r2, [r7, #0]
 801c1b4:	0092      	lsls	r2, r2, #2
 801c1b6:	4610      	mov	r0, r2
 801c1b8:	4798      	blx	r3
 801c1ba:	60f8      	str	r0, [r7, #12]
    if (temp_names == NULL) {
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d102      	bne.n	801c1c8 <json_object_resize+0x58>
        return JSONFailure;
 801c1c2:	f04f 33ff 	mov.w	r3, #4294967295
 801c1c6:	e044      	b.n	801c252 <json_object_resize+0xe2>
    }
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801c1c8:	4b24      	ldr	r3, [pc, #144]	; (801c25c <json_object_resize+0xec>)
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	683a      	ldr	r2, [r7, #0]
 801c1ce:	0092      	lsls	r2, r2, #2
 801c1d0:	4610      	mov	r0, r2
 801c1d2:	4798      	blx	r3
 801c1d4:	60b8      	str	r0, [r7, #8]
    if (temp_values == NULL) {
 801c1d6:	68bb      	ldr	r3, [r7, #8]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d106      	bne.n	801c1ea <json_object_resize+0x7a>
        parson_free(temp_names);
 801c1dc:	4b20      	ldr	r3, [pc, #128]	; (801c260 <json_object_resize+0xf0>)
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	68f8      	ldr	r0, [r7, #12]
 801c1e2:	4798      	blx	r3
        return JSONFailure;
 801c1e4:	f04f 33ff 	mov.w	r3, #4294967295
 801c1e8:	e033      	b.n	801c252 <json_object_resize+0xe2>
    }
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	685b      	ldr	r3, [r3, #4]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d019      	beq.n	801c226 <json_object_resize+0xb6>
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	689b      	ldr	r3, [r3, #8]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d015      	beq.n	801c226 <json_object_resize+0xb6>
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	68db      	ldr	r3, [r3, #12]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d011      	beq.n	801c226 <json_object_resize+0xb6>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	6859      	ldr	r1, [r3, #4]
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	68db      	ldr	r3, [r3, #12]
 801c20a:	009b      	lsls	r3, r3, #2
 801c20c:	461a      	mov	r2, r3
 801c20e:	68f8      	ldr	r0, [r7, #12]
 801c210:	f003 f880 	bl	801f314 <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	6899      	ldr	r1, [r3, #8]
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	68db      	ldr	r3, [r3, #12]
 801c21c:	009b      	lsls	r3, r3, #2
 801c21e:	461a      	mov	r2, r3
 801c220:	68b8      	ldr	r0, [r7, #8]
 801c222:	f003 f877 	bl	801f314 <memcpy>
    }
    parson_free(object->names);
 801c226:	4b0e      	ldr	r3, [pc, #56]	; (801c260 <json_object_resize+0xf0>)
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	6852      	ldr	r2, [r2, #4]
 801c22e:	4610      	mov	r0, r2
 801c230:	4798      	blx	r3
    parson_free(object->values);
 801c232:	4b0b      	ldr	r3, [pc, #44]	; (801c260 <json_object_resize+0xf0>)
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	687a      	ldr	r2, [r7, #4]
 801c238:	6892      	ldr	r2, [r2, #8]
 801c23a:	4610      	mov	r0, r2
 801c23c:	4798      	blx	r3
    object->names = temp_names;
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	68fa      	ldr	r2, [r7, #12]
 801c242:	605a      	str	r2, [r3, #4]
    object->values = temp_values;
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	68ba      	ldr	r2, [r7, #8]
 801c248:	609a      	str	r2, [r3, #8]
    object->capacity = new_capacity;
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	683a      	ldr	r2, [r7, #0]
 801c24e:	611a      	str	r2, [r3, #16]
    return JSONSuccess;
 801c250:	2300      	movs	r3, #0
}
 801c252:	4618      	mov	r0, r3
 801c254:	3710      	adds	r7, #16
 801c256:	46bd      	mov	sp, r7
 801c258:	bd80      	pop	{r7, pc}
 801c25a:	bf00      	nop
 801c25c:	200002b0 	.word	0x200002b0
 801c260:	200002b4 	.word	0x200002b4

0801c264 <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 801c264:	b580      	push	{r7, lr}
 801c266:	b086      	sub	sp, #24
 801c268:	af00      	add	r7, sp, #0
 801c26a:	60f8      	str	r0, [r7, #12]
 801c26c:	60b9      	str	r1, [r7, #8]
 801c26e:	607a      	str	r2, [r7, #4]
    size_t i, name_length;
    for (i = 0; i < json_object_get_count(object); i++) {
 801c270:	2300      	movs	r3, #0
 801c272:	617b      	str	r3, [r7, #20]
 801c274:	e026      	b.n	801c2c4 <json_object_getn_value+0x60>
        name_length = strlen(object->names[i]);
 801c276:	68fb      	ldr	r3, [r7, #12]
 801c278:	685a      	ldr	r2, [r3, #4]
 801c27a:	697b      	ldr	r3, [r7, #20]
 801c27c:	009b      	lsls	r3, r3, #2
 801c27e:	4413      	add	r3, r2
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	4618      	mov	r0, r3
 801c284:	f7e3 ffc6 	bl	8000214 <strlen>
 801c288:	6138      	str	r0, [r7, #16]
        if (name_length != name_len) {
 801c28a:	693a      	ldr	r2, [r7, #16]
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	429a      	cmp	r2, r3
 801c290:	d114      	bne.n	801c2bc <json_object_getn_value+0x58>
            continue;
        }
        if (strncmp(object->names[i], name, name_len) == 0) {
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	685a      	ldr	r2, [r3, #4]
 801c296:	697b      	ldr	r3, [r7, #20]
 801c298:	009b      	lsls	r3, r3, #2
 801c29a:	4413      	add	r3, r2
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	687a      	ldr	r2, [r7, #4]
 801c2a0:	68b9      	ldr	r1, [r7, #8]
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	f003 fe0a 	bl	801febc <strncmp>
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d107      	bne.n	801c2be <json_object_getn_value+0x5a>
            return object->values[i];
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	689a      	ldr	r2, [r3, #8]
 801c2b2:	697b      	ldr	r3, [r7, #20]
 801c2b4:	009b      	lsls	r3, r3, #2
 801c2b6:	4413      	add	r3, r2
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	e00b      	b.n	801c2d4 <json_object_getn_value+0x70>
            continue;
 801c2bc:	bf00      	nop
    for (i = 0; i < json_object_get_count(object); i++) {
 801c2be:	697b      	ldr	r3, [r7, #20]
 801c2c0:	3301      	adds	r3, #1
 801c2c2:	617b      	str	r3, [r7, #20]
 801c2c4:	68f8      	ldr	r0, [r7, #12]
 801c2c6:	f001 ffe7 	bl	801e298 <json_object_get_count>
 801c2ca:	4602      	mov	r2, r0
 801c2cc:	697b      	ldr	r3, [r7, #20]
 801c2ce:	4293      	cmp	r3, r2
 801c2d0:	d3d1      	bcc.n	801c276 <json_object_getn_value+0x12>
        }
    }
    return NULL;
 801c2d2:	2300      	movs	r3, #0
}
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	3718      	adds	r7, #24
 801c2d8:	46bd      	mov	sp, r7
 801c2da:	bd80      	pop	{r7, pc}

0801c2dc <json_object_remove_internal>:

static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b086      	sub	sp, #24
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	60f8      	str	r0, [r7, #12]
 801c2e4:	60b9      	str	r1, [r7, #8]
 801c2e6:	607a      	str	r2, [r7, #4]
    size_t i = 0, last_item_index = 0;
 801c2e8:	2300      	movs	r3, #0
 801c2ea:	617b      	str	r3, [r7, #20]
 801c2ec:	2300      	movs	r3, #0
 801c2ee:	613b      	str	r3, [r7, #16]
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d006      	beq.n	801c304 <json_object_remove_internal+0x28>
 801c2f6:	68b9      	ldr	r1, [r7, #8]
 801c2f8:	68f8      	ldr	r0, [r7, #12]
 801c2fa:	f001 ff39 	bl	801e170 <json_object_get_value>
 801c2fe:	4603      	mov	r3, r0
 801c300:	2b00      	cmp	r3, #0
 801c302:	d102      	bne.n	801c30a <json_object_remove_internal+0x2e>
        return JSONFailure;
 801c304:	f04f 33ff 	mov.w	r3, #4294967295
 801c308:	e05a      	b.n	801c3c0 <json_object_remove_internal+0xe4>
    }
    last_item_index = json_object_get_count(object) - 1;
 801c30a:	68f8      	ldr	r0, [r7, #12]
 801c30c:	f001 ffc4 	bl	801e298 <json_object_get_count>
 801c310:	4603      	mov	r3, r0
 801c312:	3b01      	subs	r3, #1
 801c314:	613b      	str	r3, [r7, #16]
    for (i = 0; i < json_object_get_count(object); i++) {
 801c316:	2300      	movs	r3, #0
 801c318:	617b      	str	r3, [r7, #20]
 801c31a:	e048      	b.n	801c3ae <json_object_remove_internal+0xd2>
        if (strcmp(object->names[i], name) == 0) {
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	685a      	ldr	r2, [r3, #4]
 801c320:	697b      	ldr	r3, [r7, #20]
 801c322:	009b      	lsls	r3, r3, #2
 801c324:	4413      	add	r3, r2
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	68b9      	ldr	r1, [r7, #8]
 801c32a:	4618      	mov	r0, r3
 801c32c:	f7e3 ff68 	bl	8000200 <strcmp>
 801c330:	4603      	mov	r3, r0
 801c332:	2b00      	cmp	r3, #0
 801c334:	d138      	bne.n	801c3a8 <json_object_remove_internal+0xcc>
            parson_free(object->names[i]);
 801c336:	4b24      	ldr	r3, [pc, #144]	; (801c3c8 <json_object_remove_internal+0xec>)
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	68fa      	ldr	r2, [r7, #12]
 801c33c:	6851      	ldr	r1, [r2, #4]
 801c33e:	697a      	ldr	r2, [r7, #20]
 801c340:	0092      	lsls	r2, r2, #2
 801c342:	440a      	add	r2, r1
 801c344:	6812      	ldr	r2, [r2, #0]
 801c346:	4610      	mov	r0, r2
 801c348:	4798      	blx	r3
            if (free_value) {
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d008      	beq.n	801c362 <json_object_remove_internal+0x86>
                json_value_free(object->values[i]);
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	689a      	ldr	r2, [r3, #8]
 801c354:	697b      	ldr	r3, [r7, #20]
 801c356:	009b      	lsls	r3, r3, #2
 801c358:	4413      	add	r3, r2
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	4618      	mov	r0, r3
 801c35e:	f002 f8a7 	bl	801e4b0 <json_value_free>
            }
            if (i != last_item_index) { /* Replace key value pair with one from the end */
 801c362:	697a      	ldr	r2, [r7, #20]
 801c364:	693b      	ldr	r3, [r7, #16]
 801c366:	429a      	cmp	r2, r3
 801c368:	d017      	beq.n	801c39a <json_object_remove_internal+0xbe>
                object->names[i] = object->names[last_item_index];
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	685a      	ldr	r2, [r3, #4]
 801c36e:	693b      	ldr	r3, [r7, #16]
 801c370:	009b      	lsls	r3, r3, #2
 801c372:	441a      	add	r2, r3
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	6859      	ldr	r1, [r3, #4]
 801c378:	697b      	ldr	r3, [r7, #20]
 801c37a:	009b      	lsls	r3, r3, #2
 801c37c:	440b      	add	r3, r1
 801c37e:	6812      	ldr	r2, [r2, #0]
 801c380:	601a      	str	r2, [r3, #0]
                object->values[i] = object->values[last_item_index];
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	689a      	ldr	r2, [r3, #8]
 801c386:	693b      	ldr	r3, [r7, #16]
 801c388:	009b      	lsls	r3, r3, #2
 801c38a:	441a      	add	r2, r3
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	6899      	ldr	r1, [r3, #8]
 801c390:	697b      	ldr	r3, [r7, #20]
 801c392:	009b      	lsls	r3, r3, #2
 801c394:	440b      	add	r3, r1
 801c396:	6812      	ldr	r2, [r2, #0]
 801c398:	601a      	str	r2, [r3, #0]
            }
            object->count -= 1;
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	68db      	ldr	r3, [r3, #12]
 801c39e:	1e5a      	subs	r2, r3, #1
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	60da      	str	r2, [r3, #12]
            return JSONSuccess;
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	e00b      	b.n	801c3c0 <json_object_remove_internal+0xe4>
    for (i = 0; i < json_object_get_count(object); i++) {
 801c3a8:	697b      	ldr	r3, [r7, #20]
 801c3aa:	3301      	adds	r3, #1
 801c3ac:	617b      	str	r3, [r7, #20]
 801c3ae:	68f8      	ldr	r0, [r7, #12]
 801c3b0:	f001 ff72 	bl	801e298 <json_object_get_count>
 801c3b4:	4602      	mov	r2, r0
 801c3b6:	697b      	ldr	r3, [r7, #20]
 801c3b8:	4293      	cmp	r3, r2
 801c3ba:	d3af      	bcc.n	801c31c <json_object_remove_internal+0x40>
        }
    }
    return JSONFailure; /* No execution path should end here */
 801c3bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c3c0:	4618      	mov	r0, r3
 801c3c2:	3718      	adds	r7, #24
 801c3c4:	46bd      	mov	sp, r7
 801c3c6:	bd80      	pop	{r7, pc}
 801c3c8:	200002b4 	.word	0x200002b4

0801c3cc <json_object_dotremove_internal>:

static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, int free_value) {
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	b088      	sub	sp, #32
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	60f8      	str	r0, [r7, #12]
 801c3d4:	60b9      	str	r1, [r7, #8]
 801c3d6:	607a      	str	r2, [r7, #4]
    JSON_Value *temp_value = NULL;
 801c3d8:	2300      	movs	r3, #0
 801c3da:	61fb      	str	r3, [r7, #28]
    JSON_Object *temp_object = NULL;
 801c3dc:	2300      	movs	r3, #0
 801c3de:	61bb      	str	r3, [r7, #24]
    const char *dot_pos = strchr(name, '.');
 801c3e0:	212e      	movs	r1, #46	; 0x2e
 801c3e2:	68b8      	ldr	r0, [r7, #8]
 801c3e4:	f003 fd5d 	bl	801fea2 <strchr>
 801c3e8:	6178      	str	r0, [r7, #20]
    if (dot_pos == NULL) {
 801c3ea:	697b      	ldr	r3, [r7, #20]
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d106      	bne.n	801c3fe <json_object_dotremove_internal+0x32>
        return json_object_remove_internal(object, name, free_value);
 801c3f0:	687a      	ldr	r2, [r7, #4]
 801c3f2:	68b9      	ldr	r1, [r7, #8]
 801c3f4:	68f8      	ldr	r0, [r7, #12]
 801c3f6:	f7ff ff71 	bl	801c2dc <json_object_remove_internal>
 801c3fa:	4603      	mov	r3, r0
 801c3fc:	e01d      	b.n	801c43a <json_object_dotremove_internal+0x6e>
    }
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 801c3fe:	697a      	ldr	r2, [r7, #20]
 801c400:	68bb      	ldr	r3, [r7, #8]
 801c402:	1ad3      	subs	r3, r2, r3
 801c404:	461a      	mov	r2, r3
 801c406:	68b9      	ldr	r1, [r7, #8]
 801c408:	68f8      	ldr	r0, [r7, #12]
 801c40a:	f7ff ff2b 	bl	801c264 <json_object_getn_value>
 801c40e:	61f8      	str	r0, [r7, #28]
    if (json_value_get_type(temp_value) != JSONObject) {
 801c410:	69f8      	ldr	r0, [r7, #28]
 801c412:	f001 ffd6 	bl	801e3c2 <json_value_get_type>
 801c416:	4603      	mov	r3, r0
 801c418:	2b04      	cmp	r3, #4
 801c41a:	d002      	beq.n	801c422 <json_object_dotremove_internal+0x56>
        return JSONFailure;
 801c41c:	f04f 33ff 	mov.w	r3, #4294967295
 801c420:	e00b      	b.n	801c43a <json_object_dotremove_internal+0x6e>
    }
    temp_object = json_value_get_object(temp_value);
 801c422:	69f8      	ldr	r0, [r7, #28]
 801c424:	f001 ffdf 	bl	801e3e6 <json_value_get_object>
 801c428:	61b8      	str	r0, [r7, #24]
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 801c42a:	697b      	ldr	r3, [r7, #20]
 801c42c:	3301      	adds	r3, #1
 801c42e:	687a      	ldr	r2, [r7, #4]
 801c430:	4619      	mov	r1, r3
 801c432:	69b8      	ldr	r0, [r7, #24]
 801c434:	f7ff ffca 	bl	801c3cc <json_object_dotremove_internal>
 801c438:	4603      	mov	r3, r0
}
 801c43a:	4618      	mov	r0, r3
 801c43c:	3720      	adds	r7, #32
 801c43e:	46bd      	mov	sp, r7
 801c440:	bd80      	pop	{r7, pc}
	...

0801c444 <json_object_free>:

static void json_object_free(JSON_Object *object) {
 801c444:	b580      	push	{r7, lr}
 801c446:	b084      	sub	sp, #16
 801c448:	af00      	add	r7, sp, #0
 801c44a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < object->count; i++) {
 801c44c:	2300      	movs	r3, #0
 801c44e:	60fb      	str	r3, [r7, #12]
 801c450:	e015      	b.n	801c47e <json_object_free+0x3a>
        parson_free(object->names[i]);
 801c452:	4b17      	ldr	r3, [pc, #92]	; (801c4b0 <json_object_free+0x6c>)
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	687a      	ldr	r2, [r7, #4]
 801c458:	6851      	ldr	r1, [r2, #4]
 801c45a:	68fa      	ldr	r2, [r7, #12]
 801c45c:	0092      	lsls	r2, r2, #2
 801c45e:	440a      	add	r2, r1
 801c460:	6812      	ldr	r2, [r2, #0]
 801c462:	4610      	mov	r0, r2
 801c464:	4798      	blx	r3
        json_value_free(object->values[i]);
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	689a      	ldr	r2, [r3, #8]
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	009b      	lsls	r3, r3, #2
 801c46e:	4413      	add	r3, r2
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	4618      	mov	r0, r3
 801c474:	f002 f81c 	bl	801e4b0 <json_value_free>
    for (i = 0; i < object->count; i++) {
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	3301      	adds	r3, #1
 801c47c:	60fb      	str	r3, [r7, #12]
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	68db      	ldr	r3, [r3, #12]
 801c482:	68fa      	ldr	r2, [r7, #12]
 801c484:	429a      	cmp	r2, r3
 801c486:	d3e4      	bcc.n	801c452 <json_object_free+0xe>
    }
    parson_free(object->names);
 801c488:	4b09      	ldr	r3, [pc, #36]	; (801c4b0 <json_object_free+0x6c>)
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	687a      	ldr	r2, [r7, #4]
 801c48e:	6852      	ldr	r2, [r2, #4]
 801c490:	4610      	mov	r0, r2
 801c492:	4798      	blx	r3
    parson_free(object->values);
 801c494:	4b06      	ldr	r3, [pc, #24]	; (801c4b0 <json_object_free+0x6c>)
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	687a      	ldr	r2, [r7, #4]
 801c49a:	6892      	ldr	r2, [r2, #8]
 801c49c:	4610      	mov	r0, r2
 801c49e:	4798      	blx	r3
    parson_free(object);
 801c4a0:	4b03      	ldr	r3, [pc, #12]	; (801c4b0 <json_object_free+0x6c>)
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	6878      	ldr	r0, [r7, #4]
 801c4a6:	4798      	blx	r3
}
 801c4a8:	bf00      	nop
 801c4aa:	3710      	adds	r7, #16
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	bd80      	pop	{r7, pc}
 801c4b0:	200002b4 	.word	0x200002b4

0801c4b4 <json_array_init>:

/* JSON Array */
static JSON_Array * json_array_init(JSON_Value *wrapping_value) {
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b084      	sub	sp, #16
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 801c4bc:	4b0d      	ldr	r3, [pc, #52]	; (801c4f4 <json_array_init+0x40>)
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	2010      	movs	r0, #16
 801c4c2:	4798      	blx	r3
 801c4c4:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d101      	bne.n	801c4d0 <json_array_init+0x1c>
        return NULL;
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	e00c      	b.n	801c4ea <json_array_init+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 801c4d0:	68fb      	ldr	r3, [r7, #12]
 801c4d2:	687a      	ldr	r2, [r7, #4]
 801c4d4:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 801c4d6:	68fb      	ldr	r3, [r7, #12]
 801c4d8:	2200      	movs	r2, #0
 801c4da:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	2200      	movs	r2, #0
 801c4e0:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 801c4e2:	68fb      	ldr	r3, [r7, #12]
 801c4e4:	2200      	movs	r2, #0
 801c4e6:	609a      	str	r2, [r3, #8]
    return new_array;
 801c4e8:	68fb      	ldr	r3, [r7, #12]
}
 801c4ea:	4618      	mov	r0, r3
 801c4ec:	3710      	adds	r7, #16
 801c4ee:	46bd      	mov	sp, r7
 801c4f0:	bd80      	pop	{r7, pc}
 801c4f2:	bf00      	nop
 801c4f4:	200002b0 	.word	0x200002b0

0801c4f8 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 801c4f8:	b580      	push	{r7, lr}
 801c4fa:	b084      	sub	sp, #16
 801c4fc:	af00      	add	r7, sp, #0
 801c4fe:	6078      	str	r0, [r7, #4]
 801c500:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	689a      	ldr	r2, [r3, #8]
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	68db      	ldr	r3, [r3, #12]
 801c50a:	429a      	cmp	r2, r3
 801c50c:	d311      	bcc.n	801c532 <json_array_add+0x3a>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	68db      	ldr	r3, [r3, #12]
 801c512:	005b      	lsls	r3, r3, #1
 801c514:	2b10      	cmp	r3, #16
 801c516:	bf38      	it	cc
 801c518:	2310      	movcc	r3, #16
 801c51a:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) == JSONFailure) {
 801c51c:	68f9      	ldr	r1, [r7, #12]
 801c51e:	6878      	ldr	r0, [r7, #4]
 801c520:	f000 f820 	bl	801c564 <json_array_resize>
 801c524:	4603      	mov	r3, r0
 801c526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c52a:	d102      	bne.n	801c532 <json_array_add+0x3a>
            return JSONFailure;
 801c52c:	f04f 33ff 	mov.w	r3, #4294967295
 801c530:	e013      	b.n	801c55a <json_array_add+0x62>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 801c532:	6878      	ldr	r0, [r7, #4]
 801c534:	f001 ff39 	bl	801e3aa <json_array_get_wrapping_value>
 801c538:	4602      	mov	r2, r0
 801c53a:	683b      	ldr	r3, [r7, #0]
 801c53c:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	685a      	ldr	r2, [r3, #4]
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	689b      	ldr	r3, [r3, #8]
 801c546:	009b      	lsls	r3, r3, #2
 801c548:	4413      	add	r3, r2
 801c54a:	683a      	ldr	r2, [r7, #0]
 801c54c:	601a      	str	r2, [r3, #0]
    array->count++;
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	689b      	ldr	r3, [r3, #8]
 801c552:	1c5a      	adds	r2, r3, #1
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 801c558:	2300      	movs	r3, #0
}
 801c55a:	4618      	mov	r0, r3
 801c55c:	3710      	adds	r7, #16
 801c55e:	46bd      	mov	sp, r7
 801c560:	bd80      	pop	{r7, pc}
	...

0801c564 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 801c564:	b580      	push	{r7, lr}
 801c566:	b084      	sub	sp, #16
 801c568:	af00      	add	r7, sp, #0
 801c56a:	6078      	str	r0, [r7, #4]
 801c56c:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 801c56e:	2300      	movs	r3, #0
 801c570:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 801c572:	683b      	ldr	r3, [r7, #0]
 801c574:	2b00      	cmp	r3, #0
 801c576:	d102      	bne.n	801c57e <json_array_resize+0x1a>
        return JSONFailure;
 801c578:	f04f 33ff 	mov.w	r3, #4294967295
 801c57c:	e02a      	b.n	801c5d4 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801c57e:	4b17      	ldr	r3, [pc, #92]	; (801c5dc <json_array_resize+0x78>)
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	683a      	ldr	r2, [r7, #0]
 801c584:	0092      	lsls	r2, r2, #2
 801c586:	4610      	mov	r0, r2
 801c588:	4798      	blx	r3
 801c58a:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 801c58c:	68fb      	ldr	r3, [r7, #12]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d102      	bne.n	801c598 <json_array_resize+0x34>
        return JSONFailure;
 801c592:	f04f 33ff 	mov.w	r3, #4294967295
 801c596:	e01d      	b.n	801c5d4 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	685b      	ldr	r3, [r3, #4]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d00c      	beq.n	801c5ba <json_array_resize+0x56>
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	689b      	ldr	r3, [r3, #8]
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	d008      	beq.n	801c5ba <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	6859      	ldr	r1, [r3, #4]
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	689b      	ldr	r3, [r3, #8]
 801c5b0:	009b      	lsls	r3, r3, #2
 801c5b2:	461a      	mov	r2, r3
 801c5b4:	68f8      	ldr	r0, [r7, #12]
 801c5b6:	f002 fead 	bl	801f314 <memcpy>
    }
    parson_free(array->items);
 801c5ba:	4b09      	ldr	r3, [pc, #36]	; (801c5e0 <json_array_resize+0x7c>)
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	687a      	ldr	r2, [r7, #4]
 801c5c0:	6852      	ldr	r2, [r2, #4]
 801c5c2:	4610      	mov	r0, r2
 801c5c4:	4798      	blx	r3
    array->items = new_items;
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	68fa      	ldr	r2, [r7, #12]
 801c5ca:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	683a      	ldr	r2, [r7, #0]
 801c5d0:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801c5d2:	2300      	movs	r3, #0
}
 801c5d4:	4618      	mov	r0, r3
 801c5d6:	3710      	adds	r7, #16
 801c5d8:	46bd      	mov	sp, r7
 801c5da:	bd80      	pop	{r7, pc}
 801c5dc:	200002b0 	.word	0x200002b0
 801c5e0:	200002b4 	.word	0x200002b4

0801c5e4 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 801c5e4:	b580      	push	{r7, lr}
 801c5e6:	b084      	sub	sp, #16
 801c5e8:	af00      	add	r7, sp, #0
 801c5ea:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 801c5ec:	2300      	movs	r3, #0
 801c5ee:	60fb      	str	r3, [r7, #12]
 801c5f0:	e00b      	b.n	801c60a <json_array_free+0x26>
        json_value_free(array->items[i]);
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	685a      	ldr	r2, [r3, #4]
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	009b      	lsls	r3, r3, #2
 801c5fa:	4413      	add	r3, r2
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	4618      	mov	r0, r3
 801c600:	f001 ff56 	bl	801e4b0 <json_value_free>
    for (i = 0; i < array->count; i++) {
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	3301      	adds	r3, #1
 801c608:	60fb      	str	r3, [r7, #12]
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	689b      	ldr	r3, [r3, #8]
 801c60e:	68fa      	ldr	r2, [r7, #12]
 801c610:	429a      	cmp	r2, r3
 801c612:	d3ee      	bcc.n	801c5f2 <json_array_free+0xe>
    }
    parson_free(array->items);
 801c614:	4b06      	ldr	r3, [pc, #24]	; (801c630 <json_array_free+0x4c>)
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	687a      	ldr	r2, [r7, #4]
 801c61a:	6852      	ldr	r2, [r2, #4]
 801c61c:	4610      	mov	r0, r2
 801c61e:	4798      	blx	r3
    parson_free(array);
 801c620:	4b03      	ldr	r3, [pc, #12]	; (801c630 <json_array_free+0x4c>)
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	6878      	ldr	r0, [r7, #4]
 801c626:	4798      	blx	r3
}
 801c628:	bf00      	nop
 801c62a:	3710      	adds	r7, #16
 801c62c:	46bd      	mov	sp, r7
 801c62e:	bd80      	pop	{r7, pc}
 801c630:	200002b4 	.word	0x200002b4

0801c634 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
 801c634:	b580      	push	{r7, lr}
 801c636:	b084      	sub	sp, #16
 801c638:	af00      	add	r7, sp, #0
 801c63a:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801c63c:	4b0b      	ldr	r3, [pc, #44]	; (801c66c <json_value_init_string_no_copy+0x38>)
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	2010      	movs	r0, #16
 801c642:	4798      	blx	r3
 801c644:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d101      	bne.n	801c650 <json_value_init_string_no_copy+0x1c>
        return NULL;
 801c64c:	2300      	movs	r3, #0
 801c64e:	e009      	b.n	801c664 <json_value_init_string_no_copy+0x30>
    }
    new_value->parent = NULL;
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	2200      	movs	r2, #0
 801c654:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	2202      	movs	r2, #2
 801c65a:	605a      	str	r2, [r3, #4]
    new_value->value.string = string;
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	687a      	ldr	r2, [r7, #4]
 801c660:	609a      	str	r2, [r3, #8]
    return new_value;
 801c662:	68fb      	ldr	r3, [r7, #12]
}
 801c664:	4618      	mov	r0, r3
 801c666:	3710      	adds	r7, #16
 801c668:	46bd      	mov	sp, r7
 801c66a:	bd80      	pop	{r7, pc}
 801c66c:	200002b0 	.word	0x200002b0

0801c670 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 801c670:	b480      	push	{r7}
 801c672:	b083      	sub	sp, #12
 801c674:	af00      	add	r7, sp, #0
 801c676:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	781b      	ldrb	r3, [r3, #0]
 801c67e:	2b22      	cmp	r3, #34	; 0x22
 801c680:	d002      	beq.n	801c688 <skip_quotes+0x18>
        return JSONFailure;
 801c682:	f04f 33ff 	mov.w	r3, #4294967295
 801c686:	e02f      	b.n	801c6e8 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	681b      	ldr	r3, [r3, #0]
 801c68c:	1c5a      	adds	r2, r3, #1
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801c692:	e01e      	b.n	801c6d2 <skip_quotes+0x62>
        if (**string == '\0') {
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	681b      	ldr	r3, [r3, #0]
 801c698:	781b      	ldrb	r3, [r3, #0]
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d102      	bne.n	801c6a4 <skip_quotes+0x34>
            return JSONFailure;
 801c69e:	f04f 33ff 	mov.w	r3, #4294967295
 801c6a2:	e021      	b.n	801c6e8 <skip_quotes+0x78>
        } else if (**string == '\\') {
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	781b      	ldrb	r3, [r3, #0]
 801c6aa:	2b5c      	cmp	r3, #92	; 0x5c
 801c6ac:	d10c      	bne.n	801c6c8 <skip_quotes+0x58>
            SKIP_CHAR(string);
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	1c5a      	adds	r2, r3, #1
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	781b      	ldrb	r3, [r3, #0]
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d102      	bne.n	801c6c8 <skip_quotes+0x58>
                return JSONFailure;
 801c6c2:	f04f 33ff 	mov.w	r3, #4294967295
 801c6c6:	e00f      	b.n	801c6e8 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	1c5a      	adds	r2, r3, #1
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	781b      	ldrb	r3, [r3, #0]
 801c6d8:	2b22      	cmp	r3, #34	; 0x22
 801c6da:	d1db      	bne.n	801c694 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	1c5a      	adds	r2, r3, #1
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801c6e6:	2300      	movs	r3, #0
}
 801c6e8:	4618      	mov	r0, r3
 801c6ea:	370c      	adds	r7, #12
 801c6ec:	46bd      	mov	sp, r7
 801c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6f2:	4770      	bx	lr

0801c6f4 <parse_utf16>:

static int parse_utf16(const char **unprocessed, char **processed) {
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	b088      	sub	sp, #32
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	6078      	str	r0, [r7, #4]
 801c6fc:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    int parse_succeeded = 0;
 801c6fe:	2300      	movs	r3, #0
 801c700:	617b      	str	r3, [r7, #20]
    char *processed_ptr = *processed;
 801c702:	683b      	ldr	r3, [r7, #0]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	61bb      	str	r3, [r7, #24]
    unprocessed_ptr++; /* skips u */
 801c70e:	69bb      	ldr	r3, [r7, #24]
 801c710:	3301      	adds	r3, #1
 801c712:	61bb      	str	r3, [r7, #24]
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 801c714:	f107 030c 	add.w	r3, r7, #12
 801c718:	4619      	mov	r1, r3
 801c71a:	69b8      	ldr	r0, [r7, #24]
 801c71c:	f7ff fac8 	bl	801bcb0 <parse_utf16_hex>
 801c720:	6178      	str	r0, [r7, #20]
    if (!parse_succeeded) {
 801c722:	697b      	ldr	r3, [r7, #20]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d102      	bne.n	801c72e <parse_utf16+0x3a>
        return JSONFailure;
 801c728:	f04f 33ff 	mov.w	r3, #4294967295
 801c72c:	e0ce      	b.n	801c8cc <parse_utf16+0x1d8>
    }
    if (cp < 0x80) {
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	2b7f      	cmp	r3, #127	; 0x7f
 801c732:	d804      	bhi.n	801c73e <parse_utf16+0x4a>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	b2da      	uxtb	r2, r3
 801c738:	69fb      	ldr	r3, [r7, #28]
 801c73a:	701a      	strb	r2, [r3, #0]
 801c73c:	e0bc      	b.n	801c8b8 <parse_utf16+0x1c4>
    } else if (cp < 0x800) {
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c744:	d219      	bcs.n	801c77a <parse_utf16+0x86>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	099b      	lsrs	r3, r3, #6
 801c74a:	b2db      	uxtb	r3, r3
 801c74c:	f003 031f 	and.w	r3, r3, #31
 801c750:	b2db      	uxtb	r3, r3
 801c752:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801c756:	b2da      	uxtb	r2, r3
 801c758:	69fb      	ldr	r3, [r7, #28]
 801c75a:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	b2db      	uxtb	r3, r3
 801c760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c764:	b2da      	uxtb	r2, r3
 801c766:	69fb      	ldr	r3, [r7, #28]
 801c768:	3301      	adds	r3, #1
 801c76a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c76e:	b2d2      	uxtb	r2, r2
 801c770:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 801c772:	69fb      	ldr	r3, [r7, #28]
 801c774:	3301      	adds	r3, #1
 801c776:	61fb      	str	r3, [r7, #28]
 801c778:	e09e      	b.n	801c8b8 <parse_utf16+0x1c4>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801c780:	d303      	bcc.n	801c78a <parse_utf16+0x96>
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801c788:	d325      	bcc.n	801c7d6 <parse_utf16+0xe2>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	0b1b      	lsrs	r3, r3, #12
 801c78e:	b2db      	uxtb	r3, r3
 801c790:	f003 030f 	and.w	r3, r3, #15
 801c794:	b2db      	uxtb	r3, r3
 801c796:	f063 031f 	orn	r3, r3, #31
 801c79a:	b2da      	uxtb	r2, r3
 801c79c:	69fb      	ldr	r3, [r7, #28]
 801c79e:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	099b      	lsrs	r3, r3, #6
 801c7a4:	b2db      	uxtb	r3, r3
 801c7a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c7aa:	b2da      	uxtb	r2, r3
 801c7ac:	69fb      	ldr	r3, [r7, #28]
 801c7ae:	3301      	adds	r3, #1
 801c7b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c7b4:	b2d2      	uxtb	r2, r2
 801c7b6:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	b2db      	uxtb	r3, r3
 801c7bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c7c0:	b2da      	uxtb	r2, r3
 801c7c2:	69fb      	ldr	r3, [r7, #28]
 801c7c4:	3302      	adds	r3, #2
 801c7c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c7ca:	b2d2      	uxtb	r2, r2
 801c7cc:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 801c7ce:	69fb      	ldr	r3, [r7, #28]
 801c7d0:	3302      	adds	r3, #2
 801c7d2:	61fb      	str	r3, [r7, #28]
 801c7d4:	e070      	b.n	801c8b8 <parse_utf16+0x1c4>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801c7dc:	d369      	bcc.n	801c8b2 <parse_utf16+0x1be>
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801c7e4:	d265      	bcs.n	801c8b2 <parse_utf16+0x1be>
        lead = cp;
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 801c7ea:	69bb      	ldr	r3, [r7, #24]
 801c7ec:	3304      	adds	r3, #4
 801c7ee:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 801c7f0:	69bb      	ldr	r3, [r7, #24]
 801c7f2:	1c5a      	adds	r2, r3, #1
 801c7f4:	61ba      	str	r2, [r7, #24]
 801c7f6:	781b      	ldrb	r3, [r3, #0]
 801c7f8:	2b5c      	cmp	r3, #92	; 0x5c
 801c7fa:	d105      	bne.n	801c808 <parse_utf16+0x114>
 801c7fc:	69bb      	ldr	r3, [r7, #24]
 801c7fe:	1c5a      	adds	r2, r3, #1
 801c800:	61ba      	str	r2, [r7, #24]
 801c802:	781b      	ldrb	r3, [r3, #0]
 801c804:	2b75      	cmp	r3, #117	; 0x75
 801c806:	d002      	beq.n	801c80e <parse_utf16+0x11a>
            return JSONFailure;
 801c808:	f04f 33ff 	mov.w	r3, #4294967295
 801c80c:	e05e      	b.n	801c8cc <parse_utf16+0x1d8>
        }
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 801c80e:	f107 0308 	add.w	r3, r7, #8
 801c812:	4619      	mov	r1, r3
 801c814:	69b8      	ldr	r0, [r7, #24]
 801c816:	f7ff fa4b 	bl	801bcb0 <parse_utf16_hex>
 801c81a:	6178      	str	r0, [r7, #20]
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 801c81c:	697b      	ldr	r3, [r7, #20]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d007      	beq.n	801c832 <parse_utf16+0x13e>
 801c822:	68bb      	ldr	r3, [r7, #8]
 801c824:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801c828:	d303      	bcc.n	801c832 <parse_utf16+0x13e>
 801c82a:	68bb      	ldr	r3, [r7, #8]
 801c82c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801c830:	d302      	bcc.n	801c838 <parse_utf16+0x144>
            return JSONFailure;
 801c832:	f04f 33ff 	mov.w	r3, #4294967295
 801c836:	e049      	b.n	801c8cc <parse_utf16+0x1d8>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 801c838:	693b      	ldr	r3, [r7, #16]
 801c83a:	029a      	lsls	r2, r3, #10
 801c83c:	4b25      	ldr	r3, [pc, #148]	; (801c8d4 <parse_utf16+0x1e0>)
 801c83e:	4013      	ands	r3, r2
 801c840:	68ba      	ldr	r2, [r7, #8]
 801c842:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801c846:	4313      	orrs	r3, r2
 801c848:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801c84c:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	0c9b      	lsrs	r3, r3, #18
 801c852:	b2db      	uxtb	r3, r3
 801c854:	f003 0307 	and.w	r3, r3, #7
 801c858:	b2db      	uxtb	r3, r3
 801c85a:	f063 030f 	orn	r3, r3, #15
 801c85e:	b2da      	uxtb	r2, r3
 801c860:	69fb      	ldr	r3, [r7, #28]
 801c862:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	0b1b      	lsrs	r3, r3, #12
 801c868:	b2db      	uxtb	r3, r3
 801c86a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c86e:	b2da      	uxtb	r2, r3
 801c870:	69fb      	ldr	r3, [r7, #28]
 801c872:	3301      	adds	r3, #1
 801c874:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c878:	b2d2      	uxtb	r2, r2
 801c87a:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	099b      	lsrs	r3, r3, #6
 801c880:	b2db      	uxtb	r3, r3
 801c882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c886:	b2da      	uxtb	r2, r3
 801c888:	69fb      	ldr	r3, [r7, #28]
 801c88a:	3302      	adds	r3, #2
 801c88c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c890:	b2d2      	uxtb	r2, r2
 801c892:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	b2db      	uxtb	r3, r3
 801c898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c89c:	b2da      	uxtb	r2, r3
 801c89e:	69fb      	ldr	r3, [r7, #28]
 801c8a0:	3303      	adds	r3, #3
 801c8a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c8a6:	b2d2      	uxtb	r2, r2
 801c8a8:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 801c8aa:	69fb      	ldr	r3, [r7, #28]
 801c8ac:	3303      	adds	r3, #3
 801c8ae:	61fb      	str	r3, [r7, #28]
 801c8b0:	e002      	b.n	801c8b8 <parse_utf16+0x1c4>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 801c8b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c8b6:	e009      	b.n	801c8cc <parse_utf16+0x1d8>
    }
    unprocessed_ptr += 3;
 801c8b8:	69bb      	ldr	r3, [r7, #24]
 801c8ba:	3303      	adds	r3, #3
 801c8bc:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 801c8be:	683b      	ldr	r3, [r7, #0]
 801c8c0:	69fa      	ldr	r2, [r7, #28]
 801c8c2:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	69ba      	ldr	r2, [r7, #24]
 801c8c8:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801c8ca:	2300      	movs	r3, #0
}
 801c8cc:	4618      	mov	r0, r3
 801c8ce:	3720      	adds	r7, #32
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	bd80      	pop	{r7, pc}
 801c8d4:	000ffc00 	.word	0x000ffc00

0801c8d8 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t len) {
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	b088      	sub	sp, #32
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
 801c8e0:	6039      	str	r1, [r7, #0]
    const char *input_ptr = input;
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	60fb      	str	r3, [r7, #12]
    size_t initial_size = (len + 1) * sizeof(char);
 801c8e6:	683b      	ldr	r3, [r7, #0]
 801c8e8:	3301      	adds	r3, #1
 801c8ea:	61fb      	str	r3, [r7, #28]
    size_t final_size = 0;
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	61bb      	str	r3, [r7, #24]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	617b      	str	r3, [r7, #20]
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	60bb      	str	r3, [r7, #8]
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	613b      	str	r3, [r7, #16]
    output = (char*)parson_malloc(initial_size);
 801c8fc:	4b66      	ldr	r3, [pc, #408]	; (801ca98 <process_string+0x1c0>)
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	69f8      	ldr	r0, [r7, #28]
 801c902:	4798      	blx	r3
 801c904:	6178      	str	r0, [r7, #20]
    if (output == NULL) {
 801c906:	697b      	ldr	r3, [r7, #20]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	f000 80b5 	beq.w	801ca78 <process_string+0x1a0>
        goto error;
    }
    output_ptr = output;
 801c90e:	697b      	ldr	r3, [r7, #20]
 801c910:	60bb      	str	r3, [r7, #8]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801c912:	e08a      	b.n	801ca2a <process_string+0x152>
        if (*input_ptr == '\\') {
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	781b      	ldrb	r3, [r3, #0]
 801c918:	2b5c      	cmp	r3, #92	; 0x5c
 801c91a:	d176      	bne.n	801ca0a <process_string+0x132>
            input_ptr++;
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	3301      	adds	r3, #1
 801c920:	60fb      	str	r3, [r7, #12]
            switch (*input_ptr) {
 801c922:	68fb      	ldr	r3, [r7, #12]
 801c924:	781b      	ldrb	r3, [r3, #0]
 801c926:	2b75      	cmp	r3, #117	; 0x75
 801c928:	f300 80a8 	bgt.w	801ca7c <process_string+0x1a4>
 801c92c:	2b5c      	cmp	r3, #92	; 0x5c
 801c92e:	da04      	bge.n	801c93a <process_string+0x62>
 801c930:	2b22      	cmp	r3, #34	; 0x22
 801c932:	d03d      	beq.n	801c9b0 <process_string+0xd8>
 801c934:	2b2f      	cmp	r3, #47	; 0x2f
 801c936:	d043      	beq.n	801c9c0 <process_string+0xe8>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 801c938:	e0a0      	b.n	801ca7c <process_string+0x1a4>
 801c93a:	3b5c      	subs	r3, #92	; 0x5c
 801c93c:	2b19      	cmp	r3, #25
 801c93e:	f200 809d 	bhi.w	801ca7c <process_string+0x1a4>
 801c942:	a201      	add	r2, pc, #4	; (adr r2, 801c948 <process_string+0x70>)
 801c944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c948:	0801c9b9 	.word	0x0801c9b9
 801c94c:	0801ca7d 	.word	0x0801ca7d
 801c950:	0801ca7d 	.word	0x0801ca7d
 801c954:	0801ca7d 	.word	0x0801ca7d
 801c958:	0801ca7d 	.word	0x0801ca7d
 801c95c:	0801ca7d 	.word	0x0801ca7d
 801c960:	0801c9c9 	.word	0x0801c9c9
 801c964:	0801ca7d 	.word	0x0801ca7d
 801c968:	0801ca7d 	.word	0x0801ca7d
 801c96c:	0801ca7d 	.word	0x0801ca7d
 801c970:	0801c9d1 	.word	0x0801c9d1
 801c974:	0801ca7d 	.word	0x0801ca7d
 801c978:	0801ca7d 	.word	0x0801ca7d
 801c97c:	0801ca7d 	.word	0x0801ca7d
 801c980:	0801ca7d 	.word	0x0801ca7d
 801c984:	0801ca7d 	.word	0x0801ca7d
 801c988:	0801ca7d 	.word	0x0801ca7d
 801c98c:	0801ca7d 	.word	0x0801ca7d
 801c990:	0801c9d9 	.word	0x0801c9d9
 801c994:	0801ca7d 	.word	0x0801ca7d
 801c998:	0801ca7d 	.word	0x0801ca7d
 801c99c:	0801ca7d 	.word	0x0801ca7d
 801c9a0:	0801c9e1 	.word	0x0801c9e1
 801c9a4:	0801ca7d 	.word	0x0801ca7d
 801c9a8:	0801c9e9 	.word	0x0801c9e9
 801c9ac:	0801c9f1 	.word	0x0801c9f1
                case '\"': *output_ptr = '\"'; break;
 801c9b0:	68bb      	ldr	r3, [r7, #8]
 801c9b2:	2222      	movs	r2, #34	; 0x22
 801c9b4:	701a      	strb	r2, [r3, #0]
 801c9b6:	e032      	b.n	801ca1e <process_string+0x146>
                case '\\': *output_ptr = '\\'; break;
 801c9b8:	68bb      	ldr	r3, [r7, #8]
 801c9ba:	225c      	movs	r2, #92	; 0x5c
 801c9bc:	701a      	strb	r2, [r3, #0]
 801c9be:	e02e      	b.n	801ca1e <process_string+0x146>
                case '/':  *output_ptr = '/';  break;
 801c9c0:	68bb      	ldr	r3, [r7, #8]
 801c9c2:	222f      	movs	r2, #47	; 0x2f
 801c9c4:	701a      	strb	r2, [r3, #0]
 801c9c6:	e02a      	b.n	801ca1e <process_string+0x146>
                case 'b':  *output_ptr = '\b'; break;
 801c9c8:	68bb      	ldr	r3, [r7, #8]
 801c9ca:	2208      	movs	r2, #8
 801c9cc:	701a      	strb	r2, [r3, #0]
 801c9ce:	e026      	b.n	801ca1e <process_string+0x146>
                case 'f':  *output_ptr = '\f'; break;
 801c9d0:	68bb      	ldr	r3, [r7, #8]
 801c9d2:	220c      	movs	r2, #12
 801c9d4:	701a      	strb	r2, [r3, #0]
 801c9d6:	e022      	b.n	801ca1e <process_string+0x146>
                case 'n':  *output_ptr = '\n'; break;
 801c9d8:	68bb      	ldr	r3, [r7, #8]
 801c9da:	220a      	movs	r2, #10
 801c9dc:	701a      	strb	r2, [r3, #0]
 801c9de:	e01e      	b.n	801ca1e <process_string+0x146>
                case 'r':  *output_ptr = '\r'; break;
 801c9e0:	68bb      	ldr	r3, [r7, #8]
 801c9e2:	220d      	movs	r2, #13
 801c9e4:	701a      	strb	r2, [r3, #0]
 801c9e6:	e01a      	b.n	801ca1e <process_string+0x146>
                case 't':  *output_ptr = '\t'; break;
 801c9e8:	68bb      	ldr	r3, [r7, #8]
 801c9ea:	2209      	movs	r2, #9
 801c9ec:	701a      	strb	r2, [r3, #0]
 801c9ee:	e016      	b.n	801ca1e <process_string+0x146>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
 801c9f0:	f107 0208 	add.w	r2, r7, #8
 801c9f4:	f107 030c 	add.w	r3, r7, #12
 801c9f8:	4611      	mov	r1, r2
 801c9fa:	4618      	mov	r0, r3
 801c9fc:	f7ff fe7a 	bl	801c6f4 <parse_utf16>
 801ca00:	4603      	mov	r3, r0
 801ca02:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca06:	d109      	bne.n	801ca1c <process_string+0x144>
                        goto error;
 801ca08:	e03d      	b.n	801ca86 <process_string+0x1ae>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	781b      	ldrb	r3, [r3, #0]
 801ca0e:	2b1f      	cmp	r3, #31
 801ca10:	d936      	bls.n	801ca80 <process_string+0x1a8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 801ca12:	68fa      	ldr	r2, [r7, #12]
 801ca14:	68bb      	ldr	r3, [r7, #8]
 801ca16:	7812      	ldrb	r2, [r2, #0]
 801ca18:	701a      	strb	r2, [r3, #0]
 801ca1a:	e000      	b.n	801ca1e <process_string+0x146>
                    break;
 801ca1c:	bf00      	nop
        }
        output_ptr++;
 801ca1e:	68bb      	ldr	r3, [r7, #8]
 801ca20:	3301      	adds	r3, #1
 801ca22:	60bb      	str	r3, [r7, #8]
        input_ptr++;
 801ca24:	68fb      	ldr	r3, [r7, #12]
 801ca26:	3301      	adds	r3, #1
 801ca28:	60fb      	str	r3, [r7, #12]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	781b      	ldrb	r3, [r3, #0]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d007      	beq.n	801ca42 <process_string+0x16a>
 801ca32:	68fa      	ldr	r2, [r7, #12]
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	1ad3      	subs	r3, r2, r3
 801ca38:	461a      	mov	r2, r3
 801ca3a:	683b      	ldr	r3, [r7, #0]
 801ca3c:	4293      	cmp	r3, r2
 801ca3e:	f63f af69 	bhi.w	801c914 <process_string+0x3c>
    }
    *output_ptr = '\0';
 801ca42:	68bb      	ldr	r3, [r7, #8]
 801ca44:	2200      	movs	r2, #0
 801ca46:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 801ca48:	68ba      	ldr	r2, [r7, #8]
 801ca4a:	697b      	ldr	r3, [r7, #20]
 801ca4c:	1ad3      	subs	r3, r2, r3
 801ca4e:	3301      	adds	r3, #1
 801ca50:	61bb      	str	r3, [r7, #24]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 801ca52:	4b11      	ldr	r3, [pc, #68]	; (801ca98 <process_string+0x1c0>)
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	69b8      	ldr	r0, [r7, #24]
 801ca58:	4798      	blx	r3
 801ca5a:	6138      	str	r0, [r7, #16]
    if (resized_output == NULL) {
 801ca5c:	693b      	ldr	r3, [r7, #16]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d010      	beq.n	801ca84 <process_string+0x1ac>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 801ca62:	69ba      	ldr	r2, [r7, #24]
 801ca64:	6979      	ldr	r1, [r7, #20]
 801ca66:	6938      	ldr	r0, [r7, #16]
 801ca68:	f002 fc54 	bl	801f314 <memcpy>
    parson_free(output);
 801ca6c:	4b0b      	ldr	r3, [pc, #44]	; (801ca9c <process_string+0x1c4>)
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	6978      	ldr	r0, [r7, #20]
 801ca72:	4798      	blx	r3
    return resized_output;
 801ca74:	693b      	ldr	r3, [r7, #16]
 801ca76:	e00b      	b.n	801ca90 <process_string+0x1b8>
        goto error;
 801ca78:	bf00      	nop
 801ca7a:	e004      	b.n	801ca86 <process_string+0x1ae>
                    goto error;
 801ca7c:	bf00      	nop
 801ca7e:	e002      	b.n	801ca86 <process_string+0x1ae>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 801ca80:	bf00      	nop
 801ca82:	e000      	b.n	801ca86 <process_string+0x1ae>
        goto error;
 801ca84:	bf00      	nop
error:
    parson_free(output);
 801ca86:	4b05      	ldr	r3, [pc, #20]	; (801ca9c <process_string+0x1c4>)
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	6978      	ldr	r0, [r7, #20]
 801ca8c:	4798      	blx	r3
    return NULL;
 801ca8e:	2300      	movs	r3, #0
}
 801ca90:	4618      	mov	r0, r3
 801ca92:	3720      	adds	r7, #32
 801ca94:	46bd      	mov	sp, r7
 801ca96:	bd80      	pop	{r7, pc}
 801ca98:	200002b0 	.word	0x200002b0
 801ca9c:	200002b4 	.word	0x200002b4

0801caa0 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b086      	sub	sp, #24
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]
    const char *string_start = *string;
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	617b      	str	r3, [r7, #20]
    size_t string_len = 0;
 801caae:	2300      	movs	r3, #0
 801cab0:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 801cab2:	6878      	ldr	r0, [r7, #4]
 801cab4:	f7ff fddc 	bl	801c670 <skip_quotes>
 801cab8:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d001      	beq.n	801cac4 <get_quoted_string+0x24>
        return NULL;
 801cac0:	2300      	movs	r3, #0
 801cac2:	e00c      	b.n	801cade <get_quoted_string+0x3e>
    }
    string_len = *string - string_start - 2; /* length without quotes */
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	681a      	ldr	r2, [r3, #0]
 801cac8:	697b      	ldr	r3, [r7, #20]
 801caca:	1ad3      	subs	r3, r2, r3
 801cacc:	3b02      	subs	r3, #2
 801cace:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, string_len);
 801cad0:	697b      	ldr	r3, [r7, #20]
 801cad2:	3301      	adds	r3, #1
 801cad4:	6939      	ldr	r1, [r7, #16]
 801cad6:	4618      	mov	r0, r3
 801cad8:	f7ff fefe 	bl	801c8d8 <process_string>
 801cadc:	4603      	mov	r3, r0
}
 801cade:	4618      	mov	r0, r3
 801cae0:	3718      	adds	r7, #24
 801cae2:	46bd      	mov	sp, r7
 801cae4:	bd80      	pop	{r7, pc}
	...

0801cae8 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 801cae8:	b580      	push	{r7, lr}
 801caea:	b082      	sub	sp, #8
 801caec:	af00      	add	r7, sp, #0
 801caee:	6078      	str	r0, [r7, #4]
 801caf0:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 801caf2:	683b      	ldr	r3, [r7, #0]
 801caf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801caf8:	d906      	bls.n	801cb08 <parse_value+0x20>
        return NULL;
 801cafa:	2300      	movs	r3, #0
 801cafc:	e08d      	b.n	801cc1a <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	1c5a      	adds	r2, r3, #1
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	601a      	str	r2, [r3, #0]
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	781b      	ldrb	r3, [r3, #0]
 801cb0e:	3301      	adds	r3, #1
 801cb10:	4a44      	ldr	r2, [pc, #272]	; (801cc24 <parse_value+0x13c>)
 801cb12:	4413      	add	r3, r2
 801cb14:	781b      	ldrb	r3, [r3, #0]
 801cb16:	f003 0308 	and.w	r3, r3, #8
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d1ef      	bne.n	801cafe <parse_value+0x16>
    switch (**string) {
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	781b      	ldrb	r3, [r3, #0]
 801cb24:	2b7b      	cmp	r3, #123	; 0x7b
 801cb26:	dc77      	bgt.n	801cc18 <parse_value+0x130>
 801cb28:	2b5b      	cmp	r3, #91	; 0x5b
 801cb2a:	da08      	bge.n	801cb3e <parse_value+0x56>
 801cb2c:	2b39      	cmp	r3, #57	; 0x39
 801cb2e:	dc73      	bgt.n	801cc18 <parse_value+0x130>
 801cb30:	2b30      	cmp	r3, #48	; 0x30
 801cb32:	da67      	bge.n	801cc04 <parse_value+0x11c>
 801cb34:	2b22      	cmp	r3, #34	; 0x22
 801cb36:	d05b      	beq.n	801cbf0 <parse_value+0x108>
 801cb38:	2b2d      	cmp	r3, #45	; 0x2d
 801cb3a:	d063      	beq.n	801cc04 <parse_value+0x11c>
 801cb3c:	e06c      	b.n	801cc18 <parse_value+0x130>
 801cb3e:	3b5b      	subs	r3, #91	; 0x5b
 801cb40:	2b20      	cmp	r3, #32
 801cb42:	d869      	bhi.n	801cc18 <parse_value+0x130>
 801cb44:	a201      	add	r2, pc, #4	; (adr r2, 801cb4c <parse_value+0x64>)
 801cb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb4a:	bf00      	nop
 801cb4c:	0801cbe1 	.word	0x0801cbe1
 801cb50:	0801cc19 	.word	0x0801cc19
 801cb54:	0801cc19 	.word	0x0801cc19
 801cb58:	0801cc19 	.word	0x0801cc19
 801cb5c:	0801cc19 	.word	0x0801cc19
 801cb60:	0801cc19 	.word	0x0801cc19
 801cb64:	0801cc19 	.word	0x0801cc19
 801cb68:	0801cc19 	.word	0x0801cc19
 801cb6c:	0801cc19 	.word	0x0801cc19
 801cb70:	0801cc19 	.word	0x0801cc19
 801cb74:	0801cc19 	.word	0x0801cc19
 801cb78:	0801cbfb 	.word	0x0801cbfb
 801cb7c:	0801cc19 	.word	0x0801cc19
 801cb80:	0801cc19 	.word	0x0801cc19
 801cb84:	0801cc19 	.word	0x0801cc19
 801cb88:	0801cc19 	.word	0x0801cc19
 801cb8c:	0801cc19 	.word	0x0801cc19
 801cb90:	0801cc19 	.word	0x0801cc19
 801cb94:	0801cc19 	.word	0x0801cc19
 801cb98:	0801cc0f 	.word	0x0801cc0f
 801cb9c:	0801cc19 	.word	0x0801cc19
 801cba0:	0801cc19 	.word	0x0801cc19
 801cba4:	0801cc19 	.word	0x0801cc19
 801cba8:	0801cc19 	.word	0x0801cc19
 801cbac:	0801cc19 	.word	0x0801cc19
 801cbb0:	0801cbfb 	.word	0x0801cbfb
 801cbb4:	0801cc19 	.word	0x0801cc19
 801cbb8:	0801cc19 	.word	0x0801cc19
 801cbbc:	0801cc19 	.word	0x0801cc19
 801cbc0:	0801cc19 	.word	0x0801cc19
 801cbc4:	0801cc19 	.word	0x0801cc19
 801cbc8:	0801cc19 	.word	0x0801cc19
 801cbcc:	0801cbd1 	.word	0x0801cbd1
        case '{':
            return parse_object_value(string, nesting + 1);
 801cbd0:	683b      	ldr	r3, [r7, #0]
 801cbd2:	3301      	adds	r3, #1
 801cbd4:	4619      	mov	r1, r3
 801cbd6:	6878      	ldr	r0, [r7, #4]
 801cbd8:	f000 f826 	bl	801cc28 <parse_object_value>
 801cbdc:	4603      	mov	r3, r0
 801cbde:	e01c      	b.n	801cc1a <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 801cbe0:	683b      	ldr	r3, [r7, #0]
 801cbe2:	3301      	adds	r3, #1
 801cbe4:	4619      	mov	r1, r3
 801cbe6:	6878      	ldr	r0, [r7, #4]
 801cbe8:	f000 f926 	bl	801ce38 <parse_array_value>
 801cbec:	4603      	mov	r3, r0
 801cbee:	e014      	b.n	801cc1a <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 801cbf0:	6878      	ldr	r0, [r7, #4]
 801cbf2:	f000 f9e7 	bl	801cfc4 <parse_string_value>
 801cbf6:	4603      	mov	r3, r0
 801cbf8:	e00f      	b.n	801cc1a <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 801cbfa:	6878      	ldr	r0, [r7, #4]
 801cbfc:	f000 fa06 	bl	801d00c <parse_boolean_value>
 801cc00:	4603      	mov	r3, r0
 801cc02:	e00a      	b.n	801cc1a <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 801cc04:	6878      	ldr	r0, [r7, #4]
 801cc06:	f000 fa3d 	bl	801d084 <parse_number_value>
 801cc0a:	4603      	mov	r3, r0
 801cc0c:	e005      	b.n	801cc1a <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 801cc0e:	6878      	ldr	r0, [r7, #4]
 801cc10:	f000 fa72 	bl	801d0f8 <parse_null_value>
 801cc14:	4603      	mov	r3, r0
 801cc16:	e000      	b.n	801cc1a <parse_value+0x132>
        default:
            return NULL;
 801cc18:	2300      	movs	r3, #0
    }
}
 801cc1a:	4618      	mov	r0, r3
 801cc1c:	3708      	adds	r7, #8
 801cc1e:	46bd      	mov	sp, r7
 801cc20:	bd80      	pop	{r7, pc}
 801cc22:	bf00      	nop
 801cc24:	08023fdc 	.word	0x08023fdc

0801cc28 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b086      	sub	sp, #24
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
 801cc30:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_value = NULL;
 801cc32:	2300      	movs	r3, #0
 801cc34:	617b      	str	r3, [r7, #20]
 801cc36:	2300      	movs	r3, #0
 801cc38:	613b      	str	r3, [r7, #16]
    JSON_Object *output_object = NULL;
 801cc3a:	2300      	movs	r3, #0
 801cc3c:	60fb      	str	r3, [r7, #12]
    char *new_key = NULL;
 801cc3e:	2300      	movs	r3, #0
 801cc40:	60bb      	str	r3, [r7, #8]
    output_value = json_value_init_object();
 801cc42:	f001 fc63 	bl	801e50c <json_value_init_object>
 801cc46:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801cc48:	697b      	ldr	r3, [r7, #20]
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d101      	bne.n	801cc52 <parse_object_value+0x2a>
        return NULL;
 801cc4e:	2300      	movs	r3, #0
 801cc50:	e0ea      	b.n	801ce28 <parse_object_value+0x200>
    }
    if (**string != '{') {
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	781b      	ldrb	r3, [r3, #0]
 801cc58:	2b7b      	cmp	r3, #123	; 0x7b
 801cc5a:	d004      	beq.n	801cc66 <parse_object_value+0x3e>
        json_value_free(output_value);
 801cc5c:	6978      	ldr	r0, [r7, #20]
 801cc5e:	f001 fc27 	bl	801e4b0 <json_value_free>
        return NULL;
 801cc62:	2300      	movs	r3, #0
 801cc64:	e0e0      	b.n	801ce28 <parse_object_value+0x200>
    }
    output_object = json_value_get_object(output_value);
 801cc66:	6978      	ldr	r0, [r7, #20]
 801cc68:	f001 fbbd 	bl	801e3e6 <json_value_get_object>
 801cc6c:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	1c5a      	adds	r2, r3, #1
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801cc78:	e004      	b.n	801cc84 <parse_object_value+0x5c>
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	1c5a      	adds	r2, r3, #1
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	601a      	str	r2, [r3, #0]
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	781b      	ldrb	r3, [r3, #0]
 801cc8a:	3301      	adds	r3, #1
 801cc8c:	4a68      	ldr	r2, [pc, #416]	; (801ce30 <parse_object_value+0x208>)
 801cc8e:	4413      	add	r3, r2
 801cc90:	781b      	ldrb	r3, [r3, #0]
 801cc92:	f003 0308 	and.w	r3, r3, #8
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d1ef      	bne.n	801cc7a <parse_object_value+0x52>
    if (**string == '}') { /* empty object */
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	781b      	ldrb	r3, [r3, #0]
 801cca0:	2b7d      	cmp	r3, #125	; 0x7d
 801cca2:	f040 808c 	bne.w	801cdbe <parse_object_value+0x196>
        SKIP_CHAR(string);
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	1c5a      	adds	r2, r3, #1
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	601a      	str	r2, [r3, #0]
        return output_value;
 801ccb0:	697b      	ldr	r3, [r7, #20]
 801ccb2:	e0b9      	b.n	801ce28 <parse_object_value+0x200>
    }
    while (**string != '\0') {
        new_key = get_quoted_string(string);
 801ccb4:	6878      	ldr	r0, [r7, #4]
 801ccb6:	f7ff fef3 	bl	801caa0 <get_quoted_string>
 801ccba:	60b8      	str	r0, [r7, #8]
        if (new_key == NULL) {
 801ccbc:	68bb      	ldr	r3, [r7, #8]
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d109      	bne.n	801ccd6 <parse_object_value+0xae>
            json_value_free(output_value);
 801ccc2:	6978      	ldr	r0, [r7, #20]
 801ccc4:	f001 fbf4 	bl	801e4b0 <json_value_free>
            return NULL;
 801ccc8:	2300      	movs	r3, #0
 801ccca:	e0ad      	b.n	801ce28 <parse_object_value+0x200>
        }
        SKIP_WHITESPACES(string);
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	1c5a      	adds	r2, r3, #1
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	601a      	str	r2, [r3, #0]
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	781b      	ldrb	r3, [r3, #0]
 801ccdc:	3301      	adds	r3, #1
 801ccde:	4a54      	ldr	r2, [pc, #336]	; (801ce30 <parse_object_value+0x208>)
 801cce0:	4413      	add	r3, r2
 801cce2:	781b      	ldrb	r3, [r3, #0]
 801cce4:	f003 0308 	and.w	r3, r3, #8
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d1ef      	bne.n	801cccc <parse_object_value+0xa4>
        if (**string != ':') {
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	781b      	ldrb	r3, [r3, #0]
 801ccf2:	2b3a      	cmp	r3, #58	; 0x3a
 801ccf4:	d008      	beq.n	801cd08 <parse_object_value+0xe0>
            parson_free(new_key);
 801ccf6:	4b4f      	ldr	r3, [pc, #316]	; (801ce34 <parse_object_value+0x20c>)
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	68b8      	ldr	r0, [r7, #8]
 801ccfc:	4798      	blx	r3
            json_value_free(output_value);
 801ccfe:	6978      	ldr	r0, [r7, #20]
 801cd00:	f001 fbd6 	bl	801e4b0 <json_value_free>
            return NULL;
 801cd04:	2300      	movs	r3, #0
 801cd06:	e08f      	b.n	801ce28 <parse_object_value+0x200>
        }
        SKIP_CHAR(string);
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	1c5a      	adds	r2, r3, #1
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 801cd12:	6839      	ldr	r1, [r7, #0]
 801cd14:	6878      	ldr	r0, [r7, #4]
 801cd16:	f7ff fee7 	bl	801cae8 <parse_value>
 801cd1a:	6138      	str	r0, [r7, #16]
        if (new_value == NULL) {
 801cd1c:	693b      	ldr	r3, [r7, #16]
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d108      	bne.n	801cd34 <parse_object_value+0x10c>
            parson_free(new_key);
 801cd22:	4b44      	ldr	r3, [pc, #272]	; (801ce34 <parse_object_value+0x20c>)
 801cd24:	681b      	ldr	r3, [r3, #0]
 801cd26:	68b8      	ldr	r0, [r7, #8]
 801cd28:	4798      	blx	r3
            json_value_free(output_value);
 801cd2a:	6978      	ldr	r0, [r7, #20]
 801cd2c:	f001 fbc0 	bl	801e4b0 <json_value_free>
            return NULL;
 801cd30:	2300      	movs	r3, #0
 801cd32:	e079      	b.n	801ce28 <parse_object_value+0x200>
        }
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 801cd34:	693a      	ldr	r2, [r7, #16]
 801cd36:	68b9      	ldr	r1, [r7, #8]
 801cd38:	68f8      	ldr	r0, [r7, #12]
 801cd3a:	f7ff f997 	bl	801c06c <json_object_add>
 801cd3e:	4603      	mov	r3, r0
 801cd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd44:	d10b      	bne.n	801cd5e <parse_object_value+0x136>
            parson_free(new_key);
 801cd46:	4b3b      	ldr	r3, [pc, #236]	; (801ce34 <parse_object_value+0x20c>)
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	68b8      	ldr	r0, [r7, #8]
 801cd4c:	4798      	blx	r3
            json_value_free(new_value);
 801cd4e:	6938      	ldr	r0, [r7, #16]
 801cd50:	f001 fbae 	bl	801e4b0 <json_value_free>
            json_value_free(output_value);
 801cd54:	6978      	ldr	r0, [r7, #20]
 801cd56:	f001 fbab 	bl	801e4b0 <json_value_free>
            return NULL;
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	e064      	b.n	801ce28 <parse_object_value+0x200>
        }
        parson_free(new_key);
 801cd5e:	4b35      	ldr	r3, [pc, #212]	; (801ce34 <parse_object_value+0x20c>)
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	68b8      	ldr	r0, [r7, #8]
 801cd64:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 801cd66:	e004      	b.n	801cd72 <parse_object_value+0x14a>
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	1c5a      	adds	r2, r3, #1
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	601a      	str	r2, [r3, #0]
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	781b      	ldrb	r3, [r3, #0]
 801cd78:	3301      	adds	r3, #1
 801cd7a:	4a2d      	ldr	r2, [pc, #180]	; (801ce30 <parse_object_value+0x208>)
 801cd7c:	4413      	add	r3, r2
 801cd7e:	781b      	ldrb	r3, [r3, #0]
 801cd80:	f003 0308 	and.w	r3, r3, #8
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d1ef      	bne.n	801cd68 <parse_object_value+0x140>
        if (**string != ',') {
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	681b      	ldr	r3, [r3, #0]
 801cd8c:	781b      	ldrb	r3, [r3, #0]
 801cd8e:	2b2c      	cmp	r3, #44	; 0x2c
 801cd90:	d11c      	bne.n	801cdcc <parse_object_value+0x1a4>
            break;
        }
        SKIP_CHAR(string);
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	1c5a      	adds	r2, r3, #1
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801cd9c:	e004      	b.n	801cda8 <parse_object_value+0x180>
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	681b      	ldr	r3, [r3, #0]
 801cda2:	1c5a      	adds	r2, r3, #1
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	601a      	str	r2, [r3, #0]
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	781b      	ldrb	r3, [r3, #0]
 801cdae:	3301      	adds	r3, #1
 801cdb0:	4a1f      	ldr	r2, [pc, #124]	; (801ce30 <parse_object_value+0x208>)
 801cdb2:	4413      	add	r3, r2
 801cdb4:	781b      	ldrb	r3, [r3, #0]
 801cdb6:	f003 0308 	and.w	r3, r3, #8
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d1ef      	bne.n	801cd9e <parse_object_value+0x176>
    while (**string != '\0') {
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	781b      	ldrb	r3, [r3, #0]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	f47f af75 	bne.w	801ccb4 <parse_object_value+0x8c>
 801cdca:	e006      	b.n	801cdda <parse_object_value+0x1b2>
            break;
 801cdcc:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801cdce:	e004      	b.n	801cdda <parse_object_value+0x1b2>
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	1c5a      	adds	r2, r3, #1
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	601a      	str	r2, [r3, #0]
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	781b      	ldrb	r3, [r3, #0]
 801cde0:	3301      	adds	r3, #1
 801cde2:	4a13      	ldr	r2, [pc, #76]	; (801ce30 <parse_object_value+0x208>)
 801cde4:	4413      	add	r3, r2
 801cde6:	781b      	ldrb	r3, [r3, #0]
 801cde8:	f003 0308 	and.w	r3, r3, #8
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d1ef      	bne.n	801cdd0 <parse_object_value+0x1a8>
    if (**string != '}' || /* Trim object after parsing is over */
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	781b      	ldrb	r3, [r3, #0]
 801cdf6:	2b7d      	cmp	r3, #125	; 0x7d
 801cdf8:	d10b      	bne.n	801ce12 <parse_object_value+0x1ea>
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 801cdfa:	68f8      	ldr	r0, [r7, #12]
 801cdfc:	f001 fa4c 	bl	801e298 <json_object_get_count>
 801ce00:	4603      	mov	r3, r0
 801ce02:	4619      	mov	r1, r3
 801ce04:	68f8      	ldr	r0, [r7, #12]
 801ce06:	f7ff f9b3 	bl	801c170 <json_object_resize>
 801ce0a:	4603      	mov	r3, r0
    if (**string != '}' || /* Trim object after parsing is over */
 801ce0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce10:	d104      	bne.n	801ce1c <parse_object_value+0x1f4>
            json_value_free(output_value);
 801ce12:	6978      	ldr	r0, [r7, #20]
 801ce14:	f001 fb4c 	bl	801e4b0 <json_value_free>
            return NULL;
 801ce18:	2300      	movs	r3, #0
 801ce1a:	e005      	b.n	801ce28 <parse_object_value+0x200>
    }
    SKIP_CHAR(string);
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	1c5a      	adds	r2, r3, #1
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	601a      	str	r2, [r3, #0]
    return output_value;
 801ce26:	697b      	ldr	r3, [r7, #20]
}
 801ce28:	4618      	mov	r0, r3
 801ce2a:	3718      	adds	r7, #24
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	bd80      	pop	{r7, pc}
 801ce30:	08023fdc 	.word	0x08023fdc
 801ce34:	200002b4 	.word	0x200002b4

0801ce38 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 801ce38:	b580      	push	{r7, lr}
 801ce3a:	b086      	sub	sp, #24
 801ce3c:	af00      	add	r7, sp, #0
 801ce3e:	6078      	str	r0, [r7, #4]
 801ce40:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 801ce42:	2300      	movs	r3, #0
 801ce44:	617b      	str	r3, [r7, #20]
 801ce46:	2300      	movs	r3, #0
 801ce48:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 801ce4a:	2300      	movs	r3, #0
 801ce4c:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 801ce4e:	f001 fb89 	bl	801e564 <json_value_init_array>
 801ce52:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801ce54:	697b      	ldr	r3, [r7, #20]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d101      	bne.n	801ce5e <parse_array_value+0x26>
        return NULL;
 801ce5a:	2300      	movs	r3, #0
 801ce5c:	e0ab      	b.n	801cfb6 <parse_array_value+0x17e>
    }
    if (**string != '[') {
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	781b      	ldrb	r3, [r3, #0]
 801ce64:	2b5b      	cmp	r3, #91	; 0x5b
 801ce66:	d004      	beq.n	801ce72 <parse_array_value+0x3a>
        json_value_free(output_value);
 801ce68:	6978      	ldr	r0, [r7, #20]
 801ce6a:	f001 fb21 	bl	801e4b0 <json_value_free>
        return NULL;
 801ce6e:	2300      	movs	r3, #0
 801ce70:	e0a1      	b.n	801cfb6 <parse_array_value+0x17e>
    }
    output_array = json_value_get_array(output_value);
 801ce72:	6978      	ldr	r0, [r7, #20]
 801ce74:	f001 fac9 	bl	801e40a <json_value_get_array>
 801ce78:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	1c5a      	adds	r2, r3, #1
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801ce84:	e004      	b.n	801ce90 <parse_array_value+0x58>
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	1c5a      	adds	r2, r3, #1
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	601a      	str	r2, [r3, #0]
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	781b      	ldrb	r3, [r3, #0]
 801ce96:	3301      	adds	r3, #1
 801ce98:	4a49      	ldr	r2, [pc, #292]	; (801cfc0 <parse_array_value+0x188>)
 801ce9a:	4413      	add	r3, r2
 801ce9c:	781b      	ldrb	r3, [r3, #0]
 801ce9e:	f003 0308 	and.w	r3, r3, #8
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d1ef      	bne.n	801ce86 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	781b      	ldrb	r3, [r3, #0]
 801ceac:	2b5d      	cmp	r3, #93	; 0x5d
 801ceae:	d14e      	bne.n	801cf4e <parse_array_value+0x116>
        SKIP_CHAR(string);
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	1c5a      	adds	r2, r3, #1
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	601a      	str	r2, [r3, #0]
        return output_value;
 801ceba:	697b      	ldr	r3, [r7, #20]
 801cebc:	e07b      	b.n	801cfb6 <parse_array_value+0x17e>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 801cebe:	6839      	ldr	r1, [r7, #0]
 801cec0:	6878      	ldr	r0, [r7, #4]
 801cec2:	f7ff fe11 	bl	801cae8 <parse_value>
 801cec6:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 801cec8:	693b      	ldr	r3, [r7, #16]
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	d104      	bne.n	801ced8 <parse_array_value+0xa0>
            json_value_free(output_value);
 801cece:	6978      	ldr	r0, [r7, #20]
 801ced0:	f001 faee 	bl	801e4b0 <json_value_free>
            return NULL;
 801ced4:	2300      	movs	r3, #0
 801ced6:	e06e      	b.n	801cfb6 <parse_array_value+0x17e>
        }
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 801ced8:	6939      	ldr	r1, [r7, #16]
 801ceda:	68f8      	ldr	r0, [r7, #12]
 801cedc:	f7ff fb0c 	bl	801c4f8 <json_array_add>
 801cee0:	4603      	mov	r3, r0
 801cee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cee6:	d10c      	bne.n	801cf02 <parse_array_value+0xca>
            json_value_free(new_array_value);
 801cee8:	6938      	ldr	r0, [r7, #16]
 801ceea:	f001 fae1 	bl	801e4b0 <json_value_free>
            json_value_free(output_value);
 801ceee:	6978      	ldr	r0, [r7, #20]
 801cef0:	f001 fade 	bl	801e4b0 <json_value_free>
            return NULL;
 801cef4:	2300      	movs	r3, #0
 801cef6:	e05e      	b.n	801cfb6 <parse_array_value+0x17e>
        }
        SKIP_WHITESPACES(string);
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	1c5a      	adds	r2, r3, #1
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	601a      	str	r2, [r3, #0]
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	781b      	ldrb	r3, [r3, #0]
 801cf08:	3301      	adds	r3, #1
 801cf0a:	4a2d      	ldr	r2, [pc, #180]	; (801cfc0 <parse_array_value+0x188>)
 801cf0c:	4413      	add	r3, r2
 801cf0e:	781b      	ldrb	r3, [r3, #0]
 801cf10:	f003 0308 	and.w	r3, r3, #8
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d1ef      	bne.n	801cef8 <parse_array_value+0xc0>
        if (**string != ',') {
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	781b      	ldrb	r3, [r3, #0]
 801cf1e:	2b2c      	cmp	r3, #44	; 0x2c
 801cf20:	d11b      	bne.n	801cf5a <parse_array_value+0x122>
            break;
        }
        SKIP_CHAR(string);
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	1c5a      	adds	r2, r3, #1
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801cf2c:	e004      	b.n	801cf38 <parse_array_value+0x100>
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	1c5a      	adds	r2, r3, #1
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	601a      	str	r2, [r3, #0]
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	781b      	ldrb	r3, [r3, #0]
 801cf3e:	3301      	adds	r3, #1
 801cf40:	4a1f      	ldr	r2, [pc, #124]	; (801cfc0 <parse_array_value+0x188>)
 801cf42:	4413      	add	r3, r2
 801cf44:	781b      	ldrb	r3, [r3, #0]
 801cf46:	f003 0308 	and.w	r3, r3, #8
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d1ef      	bne.n	801cf2e <parse_array_value+0xf6>
    while (**string != '\0') {
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	781b      	ldrb	r3, [r3, #0]
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d1b2      	bne.n	801cebe <parse_array_value+0x86>
 801cf58:	e006      	b.n	801cf68 <parse_array_value+0x130>
            break;
 801cf5a:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801cf5c:	e004      	b.n	801cf68 <parse_array_value+0x130>
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	1c5a      	adds	r2, r3, #1
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	601a      	str	r2, [r3, #0]
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	781b      	ldrb	r3, [r3, #0]
 801cf6e:	3301      	adds	r3, #1
 801cf70:	4a13      	ldr	r2, [pc, #76]	; (801cfc0 <parse_array_value+0x188>)
 801cf72:	4413      	add	r3, r2
 801cf74:	781b      	ldrb	r3, [r3, #0]
 801cf76:	f003 0308 	and.w	r3, r3, #8
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d1ef      	bne.n	801cf5e <parse_array_value+0x126>
    if (**string != ']' || /* Trim array after parsing is over */
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	781b      	ldrb	r3, [r3, #0]
 801cf84:	2b5d      	cmp	r3, #93	; 0x5d
 801cf86:	d10b      	bne.n	801cfa0 <parse_array_value+0x168>
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
 801cf88:	68f8      	ldr	r0, [r7, #12]
 801cf8a:	f001 f9fd 	bl	801e388 <json_array_get_count>
 801cf8e:	4603      	mov	r3, r0
 801cf90:	4619      	mov	r1, r3
 801cf92:	68f8      	ldr	r0, [r7, #12]
 801cf94:	f7ff fae6 	bl	801c564 <json_array_resize>
 801cf98:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 801cf9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf9e:	d104      	bne.n	801cfaa <parse_array_value+0x172>
            json_value_free(output_value);
 801cfa0:	6978      	ldr	r0, [r7, #20]
 801cfa2:	f001 fa85 	bl	801e4b0 <json_value_free>
            return NULL;
 801cfa6:	2300      	movs	r3, #0
 801cfa8:	e005      	b.n	801cfb6 <parse_array_value+0x17e>
    }
    SKIP_CHAR(string);
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	1c5a      	adds	r2, r3, #1
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	601a      	str	r2, [r3, #0]
    return output_value;
 801cfb4:	697b      	ldr	r3, [r7, #20]
}
 801cfb6:	4618      	mov	r0, r3
 801cfb8:	3718      	adds	r7, #24
 801cfba:	46bd      	mov	sp, r7
 801cfbc:	bd80      	pop	{r7, pc}
 801cfbe:	bf00      	nop
 801cfc0:	08023fdc 	.word	0x08023fdc

0801cfc4 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 801cfc4:	b580      	push	{r7, lr}
 801cfc6:	b084      	sub	sp, #16
 801cfc8:	af00      	add	r7, sp, #0
 801cfca:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 801cfcc:	2300      	movs	r3, #0
 801cfce:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string);
 801cfd0:	6878      	ldr	r0, [r7, #4]
 801cfd2:	f7ff fd65 	bl	801caa0 <get_quoted_string>
 801cfd6:	60b8      	str	r0, [r7, #8]
    if (new_string == NULL) {
 801cfd8:	68bb      	ldr	r3, [r7, #8]
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d101      	bne.n	801cfe2 <parse_string_value+0x1e>
        return NULL;
 801cfde:	2300      	movs	r3, #0
 801cfe0:	e00d      	b.n	801cffe <parse_string_value+0x3a>
    }
    value = json_value_init_string_no_copy(new_string);
 801cfe2:	68b8      	ldr	r0, [r7, #8]
 801cfe4:	f7ff fb26 	bl	801c634 <json_value_init_string_no_copy>
 801cfe8:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d105      	bne.n	801cffc <parse_string_value+0x38>
        parson_free(new_string);
 801cff0:	4b05      	ldr	r3, [pc, #20]	; (801d008 <parse_string_value+0x44>)
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	68b8      	ldr	r0, [r7, #8]
 801cff6:	4798      	blx	r3
        return NULL;
 801cff8:	2300      	movs	r3, #0
 801cffa:	e000      	b.n	801cffe <parse_string_value+0x3a>
    }
    return value;
 801cffc:	68fb      	ldr	r3, [r7, #12]
}
 801cffe:	4618      	mov	r0, r3
 801d000:	3710      	adds	r7, #16
 801d002:	46bd      	mov	sp, r7
 801d004:	bd80      	pop	{r7, pc}
 801d006:	bf00      	nop
 801d008:	200002b4 	.word	0x200002b4

0801d00c <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b084      	sub	sp, #16
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 801d014:	2304      	movs	r3, #4
 801d016:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 801d018:	2305      	movs	r3, #5
 801d01a:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	68fa      	ldr	r2, [r7, #12]
 801d022:	4619      	mov	r1, r3
 801d024:	4815      	ldr	r0, [pc, #84]	; (801d07c <parse_boolean_value+0x70>)
 801d026:	f002 ff49 	bl	801febc <strncmp>
 801d02a:	4603      	mov	r3, r0
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d10a      	bne.n	801d046 <parse_boolean_value+0x3a>
        *string += true_token_size;
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681a      	ldr	r2, [r3, #0]
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	441a      	add	r2, r3
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 801d03c:	2001      	movs	r0, #1
 801d03e:	f001 fb45 	bl	801e6cc <json_value_init_boolean>
 801d042:	4603      	mov	r3, r0
 801d044:	e015      	b.n	801d072 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	68ba      	ldr	r2, [r7, #8]
 801d04c:	4619      	mov	r1, r3
 801d04e:	480c      	ldr	r0, [pc, #48]	; (801d080 <parse_boolean_value+0x74>)
 801d050:	f002 ff34 	bl	801febc <strncmp>
 801d054:	4603      	mov	r3, r0
 801d056:	2b00      	cmp	r3, #0
 801d058:	d10a      	bne.n	801d070 <parse_boolean_value+0x64>
        *string += false_token_size;
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	681a      	ldr	r2, [r3, #0]
 801d05e:	68bb      	ldr	r3, [r7, #8]
 801d060:	441a      	add	r2, r3
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 801d066:	2000      	movs	r0, #0
 801d068:	f001 fb30 	bl	801e6cc <json_value_init_boolean>
 801d06c:	4603      	mov	r3, r0
 801d06e:	e000      	b.n	801d072 <parse_boolean_value+0x66>
    }
    return NULL;
 801d070:	2300      	movs	r3, #0
}
 801d072:	4618      	mov	r0, r3
 801d074:	3710      	adds	r7, #16
 801d076:	46bd      	mov	sp, r7
 801d078:	bd80      	pop	{r7, pc}
 801d07a:	bf00      	nop
 801d07c:	08023988 	.word	0x08023988
 801d080:	08023990 	.word	0x08023990

0801d084 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 801d084:	b580      	push	{r7, lr}
 801d086:	b086      	sub	sp, #24
 801d088:	af00      	add	r7, sp, #0
 801d08a:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 801d08c:	f04f 0200 	mov.w	r2, #0
 801d090:	f04f 0300 	mov.w	r3, #0
 801d094:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 801d098:	f001 fee2 	bl	801ee60 <__errno>
 801d09c:	4603      	mov	r3, r0
 801d09e:	2200      	movs	r2, #0
 801d0a0:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	f107 020c 	add.w	r2, r7, #12
 801d0aa:	4611      	mov	r1, r2
 801d0ac:	4618      	mov	r0, r3
 801d0ae:	f003 fd51 	bl	8020b54 <strtod>
 801d0b2:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno || !is_decimal(*string, end - *string)) {
 801d0b6:	f001 fed3 	bl	801ee60 <__errno>
 801d0ba:	4603      	mov	r3, r0
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d10b      	bne.n	801d0da <parse_number_value+0x56>
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	6818      	ldr	r0, [r3, #0]
 801d0c6:	68fa      	ldr	r2, [r7, #12]
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	1ad3      	subs	r3, r2, r3
 801d0ce:	4619      	mov	r1, r3
 801d0d0:	f7fe ff68 	bl	801bfa4 <is_decimal>
 801d0d4:	4603      	mov	r3, r0
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d101      	bne.n	801d0de <parse_number_value+0x5a>
        return NULL;
 801d0da:	2300      	movs	r3, #0
 801d0dc:	e007      	b.n	801d0ee <parse_number_value+0x6a>
    }
    *string = end;
 801d0de:	68fa      	ldr	r2, [r7, #12]
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 801d0e4:	ed97 0b04 	vldr	d0, [r7, #16]
 801d0e8:	f001 fa9e 	bl	801e628 <json_value_init_number>
 801d0ec:	4603      	mov	r3, r0
}
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	3718      	adds	r7, #24
 801d0f2:	46bd      	mov	sp, r7
 801d0f4:	bd80      	pop	{r7, pc}
	...

0801d0f8 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 801d0f8:	b580      	push	{r7, lr}
 801d0fa:	b084      	sub	sp, #16
 801d0fc:	af00      	add	r7, sp, #0
 801d0fe:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 801d100:	2304      	movs	r3, #4
 801d102:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	68fa      	ldr	r2, [r7, #12]
 801d10a:	4619      	mov	r1, r3
 801d10c:	480a      	ldr	r0, [pc, #40]	; (801d138 <parse_null_value+0x40>)
 801d10e:	f002 fed5 	bl	801febc <strncmp>
 801d112:	4603      	mov	r3, r0
 801d114:	2b00      	cmp	r3, #0
 801d116:	d109      	bne.n	801d12c <parse_null_value+0x34>
        *string += token_size;
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	681a      	ldr	r2, [r3, #0]
 801d11c:	68fb      	ldr	r3, [r7, #12]
 801d11e:	441a      	add	r2, r3
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 801d124:	f001 faf6 	bl	801e714 <json_value_init_null>
 801d128:	4603      	mov	r3, r0
 801d12a:	e000      	b.n	801d12e <parse_null_value+0x36>
    }
    return NULL;
 801d12c:	2300      	movs	r3, #0
}
 801d12e:	4618      	mov	r0, r3
 801d130:	3710      	adds	r7, #16
 801d132:	46bd      	mov	sp, r7
 801d134:	bd80      	pop	{r7, pc}
 801d136:	bf00      	nop
 801d138:	08023998 	.word	0x08023998

0801d13c <json_serialize_to_buffer_r>:
                                  if (written < 0) { return -1; }\
                                  if (buf != NULL) { buf += written; }\
                                  written_total += written; } while(0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)
{
 801d13c:	b580      	push	{r7, lr}
 801d13e:	b092      	sub	sp, #72	; 0x48
 801d140:	af02      	add	r7, sp, #8
 801d142:	60f8      	str	r0, [r7, #12]
 801d144:	60b9      	str	r1, [r7, #8]
 801d146:	607a      	str	r2, [r7, #4]
 801d148:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 801d14a:	2300      	movs	r3, #0
 801d14c:	637b      	str	r3, [r7, #52]	; 0x34
 801d14e:	2300      	movs	r3, #0
 801d150:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Value *temp_value = NULL;
 801d152:	2300      	movs	r3, #0
 801d154:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Array *array = NULL;
 801d156:	2300      	movs	r3, #0
 801d158:	62bb      	str	r3, [r7, #40]	; 0x28
    JSON_Object *object = NULL;
 801d15a:	2300      	movs	r3, #0
 801d15c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i = 0, count = 0;
 801d15e:	2300      	movs	r3, #0
 801d160:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d162:	2300      	movs	r3, #0
 801d164:	623b      	str	r3, [r7, #32]
    double num = 0.0;
 801d166:	f04f 0200 	mov.w	r2, #0
 801d16a:	f04f 0300 	mov.w	r3, #0
 801d16e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 801d172:	f04f 33ff 	mov.w	r3, #4294967295
 801d176:	617b      	str	r3, [r7, #20]
 801d178:	2300      	movs	r3, #0
 801d17a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (json_value_get_type(value)) {
 801d17c:	68f8      	ldr	r0, [r7, #12]
 801d17e:	f001 f920 	bl	801e3c2 <json_value_get_type>
 801d182:	4603      	mov	r3, r0
 801d184:	3301      	adds	r3, #1
 801d186:	2b07      	cmp	r3, #7
 801d188:	f200 82e4 	bhi.w	801d754 <json_serialize_to_buffer_r+0x618>
 801d18c:	a201      	add	r2, pc, #4	; (adr r2, 801d194 <json_serialize_to_buffer_r+0x58>)
 801d18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d192:	bf00      	nop
 801d194:	0801d74f 	.word	0x0801d74f
 801d198:	0801d755 	.word	0x0801d755
 801d19c:	0801d71f 	.word	0x0801d71f
 801d1a0:	0801d609 	.word	0x0801d609
 801d1a4:	0801d6b7 	.word	0x0801d6b7
 801d1a8:	0801d383 	.word	0x0801d383
 801d1ac:	0801d1b5 	.word	0x0801d1b5
 801d1b0:	0801d64d 	.word	0x0801d64d
        case JSONArray:
            array = json_value_get_array(value);
 801d1b4:	68f8      	ldr	r0, [r7, #12]
 801d1b6:	f001 f928 	bl	801e40a <json_value_get_array>
 801d1ba:	62b8      	str	r0, [r7, #40]	; 0x28
            count = json_array_get_count(array);
 801d1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d1be:	f001 f8e3 	bl	801e388 <json_array_get_count>
 801d1c2:	6238      	str	r0, [r7, #32]
            APPEND_STRING("[");
 801d1c4:	499b      	ldr	r1, [pc, #620]	; (801d434 <json_serialize_to_buffer_r+0x2f8>)
 801d1c6:	68b8      	ldr	r0, [r7, #8]
 801d1c8:	f000 ff94 	bl	801e0f4 <append_string>
 801d1cc:	6178      	str	r0, [r7, #20]
 801d1ce:	697b      	ldr	r3, [r7, #20]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	da02      	bge.n	801d1da <json_serialize_to_buffer_r+0x9e>
 801d1d4:	f04f 33ff 	mov.w	r3, #4294967295
 801d1d8:	e2be      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d1da:	68bb      	ldr	r3, [r7, #8]
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d003      	beq.n	801d1e8 <json_serialize_to_buffer_r+0xac>
 801d1e0:	697b      	ldr	r3, [r7, #20]
 801d1e2:	68ba      	ldr	r2, [r7, #8]
 801d1e4:	4413      	add	r3, r2
 801d1e6:	60bb      	str	r3, [r7, #8]
 801d1e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d1ea:	697b      	ldr	r3, [r7, #20]
 801d1ec:	4413      	add	r3, r2
 801d1ee:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801d1f0:	6a3b      	ldr	r3, [r7, #32]
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d018      	beq.n	801d228 <json_serialize_to_buffer_r+0xec>
 801d1f6:	683b      	ldr	r3, [r7, #0]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d015      	beq.n	801d228 <json_serialize_to_buffer_r+0xec>
                APPEND_STRING("\n");
 801d1fc:	498e      	ldr	r1, [pc, #568]	; (801d438 <json_serialize_to_buffer_r+0x2fc>)
 801d1fe:	68b8      	ldr	r0, [r7, #8]
 801d200:	f000 ff78 	bl	801e0f4 <append_string>
 801d204:	6178      	str	r0, [r7, #20]
 801d206:	697b      	ldr	r3, [r7, #20]
 801d208:	2b00      	cmp	r3, #0
 801d20a:	da02      	bge.n	801d212 <json_serialize_to_buffer_r+0xd6>
 801d20c:	f04f 33ff 	mov.w	r3, #4294967295
 801d210:	e2a2      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d212:	68bb      	ldr	r3, [r7, #8]
 801d214:	2b00      	cmp	r3, #0
 801d216:	d003      	beq.n	801d220 <json_serialize_to_buffer_r+0xe4>
 801d218:	697b      	ldr	r3, [r7, #20]
 801d21a:	68ba      	ldr	r2, [r7, #8]
 801d21c:	4413      	add	r3, r2
 801d21e:	60bb      	str	r3, [r7, #8]
 801d220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d222:	697b      	ldr	r3, [r7, #20]
 801d224:	4413      	add	r3, r2
 801d226:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801d228:	2300      	movs	r3, #0
 801d22a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d22c:	e071      	b.n	801d312 <json_serialize_to_buffer_r+0x1d6>
                if (is_pretty) {
 801d22e:	683b      	ldr	r3, [r7, #0]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d017      	beq.n	801d264 <json_serialize_to_buffer_r+0x128>
                    APPEND_INDENT(level+1);
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	3301      	adds	r3, #1
 801d238:	4619      	mov	r1, r3
 801d23a:	68b8      	ldr	r0, [r7, #8]
 801d23c:	f000 ff28 	bl	801e090 <append_indent>
 801d240:	6178      	str	r0, [r7, #20]
 801d242:	697b      	ldr	r3, [r7, #20]
 801d244:	2b00      	cmp	r3, #0
 801d246:	da02      	bge.n	801d24e <json_serialize_to_buffer_r+0x112>
 801d248:	f04f 33ff 	mov.w	r3, #4294967295
 801d24c:	e284      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d24e:	68bb      	ldr	r3, [r7, #8]
 801d250:	2b00      	cmp	r3, #0
 801d252:	d003      	beq.n	801d25c <json_serialize_to_buffer_r+0x120>
 801d254:	697b      	ldr	r3, [r7, #20]
 801d256:	68ba      	ldr	r2, [r7, #8]
 801d258:	4413      	add	r3, r2
 801d25a:	60bb      	str	r3, [r7, #8]
 801d25c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d25e:	697b      	ldr	r3, [r7, #20]
 801d260:	4413      	add	r3, r2
 801d262:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_array_get_value(array, i);
 801d264:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d268:	f001 f861 	bl	801e32e <json_array_get_value>
 801d26c:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	1c5a      	adds	r2, r3, #1
 801d272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d274:	9300      	str	r3, [sp, #0]
 801d276:	683b      	ldr	r3, [r7, #0]
 801d278:	68b9      	ldr	r1, [r7, #8]
 801d27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d27c:	f7ff ff5e 	bl	801d13c <json_serialize_to_buffer_r>
 801d280:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801d282:	697b      	ldr	r3, [r7, #20]
 801d284:	2b00      	cmp	r3, #0
 801d286:	da02      	bge.n	801d28e <json_serialize_to_buffer_r+0x152>
                    return -1;
 801d288:	f04f 33ff 	mov.w	r3, #4294967295
 801d28c:	e264      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801d28e:	68bb      	ldr	r3, [r7, #8]
 801d290:	2b00      	cmp	r3, #0
 801d292:	d003      	beq.n	801d29c <json_serialize_to_buffer_r+0x160>
                    buf += written;
 801d294:	697b      	ldr	r3, [r7, #20]
 801d296:	68ba      	ldr	r2, [r7, #8]
 801d298:	4413      	add	r3, r2
 801d29a:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801d29c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d29e:	697b      	ldr	r3, [r7, #20]
 801d2a0:	4413      	add	r3, r2
 801d2a2:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801d2a4:	6a3b      	ldr	r3, [r7, #32]
 801d2a6:	3b01      	subs	r3, #1
 801d2a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d2aa:	429a      	cmp	r2, r3
 801d2ac:	d215      	bcs.n	801d2da <json_serialize_to_buffer_r+0x19e>
                    APPEND_STRING(",");
 801d2ae:	4963      	ldr	r1, [pc, #396]	; (801d43c <json_serialize_to_buffer_r+0x300>)
 801d2b0:	68b8      	ldr	r0, [r7, #8]
 801d2b2:	f000 ff1f 	bl	801e0f4 <append_string>
 801d2b6:	6178      	str	r0, [r7, #20]
 801d2b8:	697b      	ldr	r3, [r7, #20]
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	da02      	bge.n	801d2c4 <json_serialize_to_buffer_r+0x188>
 801d2be:	f04f 33ff 	mov.w	r3, #4294967295
 801d2c2:	e249      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d2c4:	68bb      	ldr	r3, [r7, #8]
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d003      	beq.n	801d2d2 <json_serialize_to_buffer_r+0x196>
 801d2ca:	697b      	ldr	r3, [r7, #20]
 801d2cc:	68ba      	ldr	r2, [r7, #8]
 801d2ce:	4413      	add	r3, r2
 801d2d0:	60bb      	str	r3, [r7, #8]
 801d2d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d2d4:	697b      	ldr	r3, [r7, #20]
 801d2d6:	4413      	add	r3, r2
 801d2d8:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801d2da:	683b      	ldr	r3, [r7, #0]
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d015      	beq.n	801d30c <json_serialize_to_buffer_r+0x1d0>
                    APPEND_STRING("\n");
 801d2e0:	4955      	ldr	r1, [pc, #340]	; (801d438 <json_serialize_to_buffer_r+0x2fc>)
 801d2e2:	68b8      	ldr	r0, [r7, #8]
 801d2e4:	f000 ff06 	bl	801e0f4 <append_string>
 801d2e8:	6178      	str	r0, [r7, #20]
 801d2ea:	697b      	ldr	r3, [r7, #20]
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	da02      	bge.n	801d2f6 <json_serialize_to_buffer_r+0x1ba>
 801d2f0:	f04f 33ff 	mov.w	r3, #4294967295
 801d2f4:	e230      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d2f6:	68bb      	ldr	r3, [r7, #8]
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	d003      	beq.n	801d304 <json_serialize_to_buffer_r+0x1c8>
 801d2fc:	697b      	ldr	r3, [r7, #20]
 801d2fe:	68ba      	ldr	r2, [r7, #8]
 801d300:	4413      	add	r3, r2
 801d302:	60bb      	str	r3, [r7, #8]
 801d304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d306:	697b      	ldr	r3, [r7, #20]
 801d308:	4413      	add	r3, r2
 801d30a:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801d30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d30e:	3301      	adds	r3, #1
 801d310:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d314:	6a3b      	ldr	r3, [r7, #32]
 801d316:	429a      	cmp	r2, r3
 801d318:	d389      	bcc.n	801d22e <json_serialize_to_buffer_r+0xf2>
                }
            }
            if (count > 0 && is_pretty) {
 801d31a:	6a3b      	ldr	r3, [r7, #32]
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d018      	beq.n	801d352 <json_serialize_to_buffer_r+0x216>
 801d320:	683b      	ldr	r3, [r7, #0]
 801d322:	2b00      	cmp	r3, #0
 801d324:	d015      	beq.n	801d352 <json_serialize_to_buffer_r+0x216>
                APPEND_INDENT(level);
 801d326:	6879      	ldr	r1, [r7, #4]
 801d328:	68b8      	ldr	r0, [r7, #8]
 801d32a:	f000 feb1 	bl	801e090 <append_indent>
 801d32e:	6178      	str	r0, [r7, #20]
 801d330:	697b      	ldr	r3, [r7, #20]
 801d332:	2b00      	cmp	r3, #0
 801d334:	da02      	bge.n	801d33c <json_serialize_to_buffer_r+0x200>
 801d336:	f04f 33ff 	mov.w	r3, #4294967295
 801d33a:	e20d      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d33c:	68bb      	ldr	r3, [r7, #8]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d003      	beq.n	801d34a <json_serialize_to_buffer_r+0x20e>
 801d342:	697b      	ldr	r3, [r7, #20]
 801d344:	68ba      	ldr	r2, [r7, #8]
 801d346:	4413      	add	r3, r2
 801d348:	60bb      	str	r3, [r7, #8]
 801d34a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d34c:	697b      	ldr	r3, [r7, #20]
 801d34e:	4413      	add	r3, r2
 801d350:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("]");
 801d352:	493b      	ldr	r1, [pc, #236]	; (801d440 <json_serialize_to_buffer_r+0x304>)
 801d354:	68b8      	ldr	r0, [r7, #8]
 801d356:	f000 fecd 	bl	801e0f4 <append_string>
 801d35a:	6178      	str	r0, [r7, #20]
 801d35c:	697b      	ldr	r3, [r7, #20]
 801d35e:	2b00      	cmp	r3, #0
 801d360:	da02      	bge.n	801d368 <json_serialize_to_buffer_r+0x22c>
 801d362:	f04f 33ff 	mov.w	r3, #4294967295
 801d366:	e1f7      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d368:	68bb      	ldr	r3, [r7, #8]
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d003      	beq.n	801d376 <json_serialize_to_buffer_r+0x23a>
 801d36e:	697b      	ldr	r3, [r7, #20]
 801d370:	68ba      	ldr	r2, [r7, #8]
 801d372:	4413      	add	r3, r2
 801d374:	60bb      	str	r3, [r7, #8]
 801d376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d378:	697b      	ldr	r3, [r7, #20]
 801d37a:	4413      	add	r3, r2
 801d37c:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801d37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d380:	e1ea      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
        case JSONObject:
            object = json_value_get_object(value);
 801d382:	68f8      	ldr	r0, [r7, #12]
 801d384:	f001 f82f 	bl	801e3e6 <json_value_get_object>
 801d388:	6278      	str	r0, [r7, #36]	; 0x24
            count  = json_object_get_count(object);
 801d38a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d38c:	f000 ff84 	bl	801e298 <json_object_get_count>
 801d390:	6238      	str	r0, [r7, #32]
            APPEND_STRING("{");
 801d392:	492c      	ldr	r1, [pc, #176]	; (801d444 <json_serialize_to_buffer_r+0x308>)
 801d394:	68b8      	ldr	r0, [r7, #8]
 801d396:	f000 fead 	bl	801e0f4 <append_string>
 801d39a:	6178      	str	r0, [r7, #20]
 801d39c:	697b      	ldr	r3, [r7, #20]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	da02      	bge.n	801d3a8 <json_serialize_to_buffer_r+0x26c>
 801d3a2:	f04f 33ff 	mov.w	r3, #4294967295
 801d3a6:	e1d7      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d3a8:	68bb      	ldr	r3, [r7, #8]
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d003      	beq.n	801d3b6 <json_serialize_to_buffer_r+0x27a>
 801d3ae:	697b      	ldr	r3, [r7, #20]
 801d3b0:	68ba      	ldr	r2, [r7, #8]
 801d3b2:	4413      	add	r3, r2
 801d3b4:	60bb      	str	r3, [r7, #8]
 801d3b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d3b8:	697b      	ldr	r3, [r7, #20]
 801d3ba:	4413      	add	r3, r2
 801d3bc:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801d3be:	6a3b      	ldr	r3, [r7, #32]
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d018      	beq.n	801d3f6 <json_serialize_to_buffer_r+0x2ba>
 801d3c4:	683b      	ldr	r3, [r7, #0]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d015      	beq.n	801d3f6 <json_serialize_to_buffer_r+0x2ba>
                APPEND_STRING("\n");
 801d3ca:	491b      	ldr	r1, [pc, #108]	; (801d438 <json_serialize_to_buffer_r+0x2fc>)
 801d3cc:	68b8      	ldr	r0, [r7, #8]
 801d3ce:	f000 fe91 	bl	801e0f4 <append_string>
 801d3d2:	6178      	str	r0, [r7, #20]
 801d3d4:	697b      	ldr	r3, [r7, #20]
 801d3d6:	2b00      	cmp	r3, #0
 801d3d8:	da02      	bge.n	801d3e0 <json_serialize_to_buffer_r+0x2a4>
 801d3da:	f04f 33ff 	mov.w	r3, #4294967295
 801d3de:	e1bb      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d3e0:	68bb      	ldr	r3, [r7, #8]
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d003      	beq.n	801d3ee <json_serialize_to_buffer_r+0x2b2>
 801d3e6:	697b      	ldr	r3, [r7, #20]
 801d3e8:	68ba      	ldr	r2, [r7, #8]
 801d3ea:	4413      	add	r3, r2
 801d3ec:	60bb      	str	r3, [r7, #8]
 801d3ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d3f0:	697b      	ldr	r3, [r7, #20]
 801d3f2:	4413      	add	r3, r2
 801d3f4:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801d3f6:	2300      	movs	r3, #0
 801d3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d3fa:	e0cc      	b.n	801d596 <json_serialize_to_buffer_r+0x45a>
                key = json_object_get_name(object, i);
 801d3fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d3fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d400:	f000 ff5b 	bl	801e2ba <json_object_get_name>
 801d404:	6378      	str	r0, [r7, #52]	; 0x34
                if (key == NULL) {
 801d406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d102      	bne.n	801d412 <json_serialize_to_buffer_r+0x2d6>
                    return -1;
 801d40c:	f04f 33ff 	mov.w	r3, #4294967295
 801d410:	e1a2      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
                }
                if (is_pretty) {
 801d412:	683b      	ldr	r3, [r7, #0]
 801d414:	2b00      	cmp	r3, #0
 801d416:	d022      	beq.n	801d45e <json_serialize_to_buffer_r+0x322>
                    APPEND_INDENT(level+1);
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	3301      	adds	r3, #1
 801d41c:	4619      	mov	r1, r3
 801d41e:	68b8      	ldr	r0, [r7, #8]
 801d420:	f000 fe36 	bl	801e090 <append_indent>
 801d424:	6178      	str	r0, [r7, #20]
 801d426:	697b      	ldr	r3, [r7, #20]
 801d428:	2b00      	cmp	r3, #0
 801d42a:	da0d      	bge.n	801d448 <json_serialize_to_buffer_r+0x30c>
 801d42c:	f04f 33ff 	mov.w	r3, #4294967295
 801d430:	e192      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d432:	bf00      	nop
 801d434:	080239a0 	.word	0x080239a0
 801d438:	080239a4 	.word	0x080239a4
 801d43c:	080239a8 	.word	0x080239a8
 801d440:	080239ac 	.word	0x080239ac
 801d444:	080239b0 	.word	0x080239b0
 801d448:	68bb      	ldr	r3, [r7, #8]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d003      	beq.n	801d456 <json_serialize_to_buffer_r+0x31a>
 801d44e:	697b      	ldr	r3, [r7, #20]
 801d450:	68ba      	ldr	r2, [r7, #8]
 801d452:	4413      	add	r3, r2
 801d454:	60bb      	str	r3, [r7, #8]
 801d456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d458:	697b      	ldr	r3, [r7, #20]
 801d45a:	4413      	add	r3, r2
 801d45c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                written = json_serialize_string(key, buf);
 801d45e:	68b9      	ldr	r1, [r7, #8]
 801d460:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d462:	f000 f97f 	bl	801d764 <json_serialize_string>
 801d466:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801d468:	697b      	ldr	r3, [r7, #20]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	da02      	bge.n	801d474 <json_serialize_to_buffer_r+0x338>
                    return -1;
 801d46e:	f04f 33ff 	mov.w	r3, #4294967295
 801d472:	e171      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801d474:	68bb      	ldr	r3, [r7, #8]
 801d476:	2b00      	cmp	r3, #0
 801d478:	d003      	beq.n	801d482 <json_serialize_to_buffer_r+0x346>
                    buf += written;
 801d47a:	697b      	ldr	r3, [r7, #20]
 801d47c:	68ba      	ldr	r2, [r7, #8]
 801d47e:	4413      	add	r3, r2
 801d480:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801d482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d484:	697b      	ldr	r3, [r7, #20]
 801d486:	4413      	add	r3, r2
 801d488:	63bb      	str	r3, [r7, #56]	; 0x38
                APPEND_STRING(":");
 801d48a:	4996      	ldr	r1, [pc, #600]	; (801d6e4 <json_serialize_to_buffer_r+0x5a8>)
 801d48c:	68b8      	ldr	r0, [r7, #8]
 801d48e:	f000 fe31 	bl	801e0f4 <append_string>
 801d492:	6178      	str	r0, [r7, #20]
 801d494:	697b      	ldr	r3, [r7, #20]
 801d496:	2b00      	cmp	r3, #0
 801d498:	da02      	bge.n	801d4a0 <json_serialize_to_buffer_r+0x364>
 801d49a:	f04f 33ff 	mov.w	r3, #4294967295
 801d49e:	e15b      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d4a0:	68bb      	ldr	r3, [r7, #8]
 801d4a2:	2b00      	cmp	r3, #0
 801d4a4:	d003      	beq.n	801d4ae <json_serialize_to_buffer_r+0x372>
 801d4a6:	697b      	ldr	r3, [r7, #20]
 801d4a8:	68ba      	ldr	r2, [r7, #8]
 801d4aa:	4413      	add	r3, r2
 801d4ac:	60bb      	str	r3, [r7, #8]
 801d4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d4b0:	697b      	ldr	r3, [r7, #20]
 801d4b2:	4413      	add	r3, r2
 801d4b4:	63bb      	str	r3, [r7, #56]	; 0x38
                if (is_pretty) {
 801d4b6:	683b      	ldr	r3, [r7, #0]
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d015      	beq.n	801d4e8 <json_serialize_to_buffer_r+0x3ac>
                    APPEND_STRING(" ");
 801d4bc:	498a      	ldr	r1, [pc, #552]	; (801d6e8 <json_serialize_to_buffer_r+0x5ac>)
 801d4be:	68b8      	ldr	r0, [r7, #8]
 801d4c0:	f000 fe18 	bl	801e0f4 <append_string>
 801d4c4:	6178      	str	r0, [r7, #20]
 801d4c6:	697b      	ldr	r3, [r7, #20]
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	da02      	bge.n	801d4d2 <json_serialize_to_buffer_r+0x396>
 801d4cc:	f04f 33ff 	mov.w	r3, #4294967295
 801d4d0:	e142      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d4d2:	68bb      	ldr	r3, [r7, #8]
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d003      	beq.n	801d4e0 <json_serialize_to_buffer_r+0x3a4>
 801d4d8:	697b      	ldr	r3, [r7, #20]
 801d4da:	68ba      	ldr	r2, [r7, #8]
 801d4dc:	4413      	add	r3, r2
 801d4de:	60bb      	str	r3, [r7, #8]
 801d4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d4e2:	697b      	ldr	r3, [r7, #20]
 801d4e4:	4413      	add	r3, r2
 801d4e6:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_object_get_value(object, key);
 801d4e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d4ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d4ec:	f000 fe40 	bl	801e170 <json_object_get_value>
 801d4f0:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	1c5a      	adds	r2, r3, #1
 801d4f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d4f8:	9300      	str	r3, [sp, #0]
 801d4fa:	683b      	ldr	r3, [r7, #0]
 801d4fc:	68b9      	ldr	r1, [r7, #8]
 801d4fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d500:	f7ff fe1c 	bl	801d13c <json_serialize_to_buffer_r>
 801d504:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801d506:	697b      	ldr	r3, [r7, #20]
 801d508:	2b00      	cmp	r3, #0
 801d50a:	da02      	bge.n	801d512 <json_serialize_to_buffer_r+0x3d6>
                    return -1;
 801d50c:	f04f 33ff 	mov.w	r3, #4294967295
 801d510:	e122      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801d512:	68bb      	ldr	r3, [r7, #8]
 801d514:	2b00      	cmp	r3, #0
 801d516:	d003      	beq.n	801d520 <json_serialize_to_buffer_r+0x3e4>
                    buf += written;
 801d518:	697b      	ldr	r3, [r7, #20]
 801d51a:	68ba      	ldr	r2, [r7, #8]
 801d51c:	4413      	add	r3, r2
 801d51e:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801d520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d522:	697b      	ldr	r3, [r7, #20]
 801d524:	4413      	add	r3, r2
 801d526:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801d528:	6a3b      	ldr	r3, [r7, #32]
 801d52a:	3b01      	subs	r3, #1
 801d52c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d52e:	429a      	cmp	r2, r3
 801d530:	d215      	bcs.n	801d55e <json_serialize_to_buffer_r+0x422>
                    APPEND_STRING(",");
 801d532:	496e      	ldr	r1, [pc, #440]	; (801d6ec <json_serialize_to_buffer_r+0x5b0>)
 801d534:	68b8      	ldr	r0, [r7, #8]
 801d536:	f000 fddd 	bl	801e0f4 <append_string>
 801d53a:	6178      	str	r0, [r7, #20]
 801d53c:	697b      	ldr	r3, [r7, #20]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	da02      	bge.n	801d548 <json_serialize_to_buffer_r+0x40c>
 801d542:	f04f 33ff 	mov.w	r3, #4294967295
 801d546:	e107      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d548:	68bb      	ldr	r3, [r7, #8]
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d003      	beq.n	801d556 <json_serialize_to_buffer_r+0x41a>
 801d54e:	697b      	ldr	r3, [r7, #20]
 801d550:	68ba      	ldr	r2, [r7, #8]
 801d552:	4413      	add	r3, r2
 801d554:	60bb      	str	r3, [r7, #8]
 801d556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d558:	697b      	ldr	r3, [r7, #20]
 801d55a:	4413      	add	r3, r2
 801d55c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801d55e:	683b      	ldr	r3, [r7, #0]
 801d560:	2b00      	cmp	r3, #0
 801d562:	d015      	beq.n	801d590 <json_serialize_to_buffer_r+0x454>
                    APPEND_STRING("\n");
 801d564:	4962      	ldr	r1, [pc, #392]	; (801d6f0 <json_serialize_to_buffer_r+0x5b4>)
 801d566:	68b8      	ldr	r0, [r7, #8]
 801d568:	f000 fdc4 	bl	801e0f4 <append_string>
 801d56c:	6178      	str	r0, [r7, #20]
 801d56e:	697b      	ldr	r3, [r7, #20]
 801d570:	2b00      	cmp	r3, #0
 801d572:	da02      	bge.n	801d57a <json_serialize_to_buffer_r+0x43e>
 801d574:	f04f 33ff 	mov.w	r3, #4294967295
 801d578:	e0ee      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d57a:	68bb      	ldr	r3, [r7, #8]
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d003      	beq.n	801d588 <json_serialize_to_buffer_r+0x44c>
 801d580:	697b      	ldr	r3, [r7, #20]
 801d582:	68ba      	ldr	r2, [r7, #8]
 801d584:	4413      	add	r3, r2
 801d586:	60bb      	str	r3, [r7, #8]
 801d588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d58a:	697b      	ldr	r3, [r7, #20]
 801d58c:	4413      	add	r3, r2
 801d58e:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801d590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d592:	3301      	adds	r3, #1
 801d594:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d598:	6a3b      	ldr	r3, [r7, #32]
 801d59a:	429a      	cmp	r2, r3
 801d59c:	f4ff af2e 	bcc.w	801d3fc <json_serialize_to_buffer_r+0x2c0>
                }
            }
            if (count > 0 && is_pretty) {
 801d5a0:	6a3b      	ldr	r3, [r7, #32]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d018      	beq.n	801d5d8 <json_serialize_to_buffer_r+0x49c>
 801d5a6:	683b      	ldr	r3, [r7, #0]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d015      	beq.n	801d5d8 <json_serialize_to_buffer_r+0x49c>
                APPEND_INDENT(level);
 801d5ac:	6879      	ldr	r1, [r7, #4]
 801d5ae:	68b8      	ldr	r0, [r7, #8]
 801d5b0:	f000 fd6e 	bl	801e090 <append_indent>
 801d5b4:	6178      	str	r0, [r7, #20]
 801d5b6:	697b      	ldr	r3, [r7, #20]
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	da02      	bge.n	801d5c2 <json_serialize_to_buffer_r+0x486>
 801d5bc:	f04f 33ff 	mov.w	r3, #4294967295
 801d5c0:	e0ca      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d5c2:	68bb      	ldr	r3, [r7, #8]
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d003      	beq.n	801d5d0 <json_serialize_to_buffer_r+0x494>
 801d5c8:	697b      	ldr	r3, [r7, #20]
 801d5ca:	68ba      	ldr	r2, [r7, #8]
 801d5cc:	4413      	add	r3, r2
 801d5ce:	60bb      	str	r3, [r7, #8]
 801d5d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d5d2:	697b      	ldr	r3, [r7, #20]
 801d5d4:	4413      	add	r3, r2
 801d5d6:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("}");
 801d5d8:	4946      	ldr	r1, [pc, #280]	; (801d6f4 <json_serialize_to_buffer_r+0x5b8>)
 801d5da:	68b8      	ldr	r0, [r7, #8]
 801d5dc:	f000 fd8a 	bl	801e0f4 <append_string>
 801d5e0:	6178      	str	r0, [r7, #20]
 801d5e2:	697b      	ldr	r3, [r7, #20]
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	da02      	bge.n	801d5ee <json_serialize_to_buffer_r+0x4b2>
 801d5e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d5ec:	e0b4      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d5ee:	68bb      	ldr	r3, [r7, #8]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d003      	beq.n	801d5fc <json_serialize_to_buffer_r+0x4c0>
 801d5f4:	697b      	ldr	r3, [r7, #20]
 801d5f6:	68ba      	ldr	r2, [r7, #8]
 801d5f8:	4413      	add	r3, r2
 801d5fa:	60bb      	str	r3, [r7, #8]
 801d5fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d5fe:	697b      	ldr	r3, [r7, #20]
 801d600:	4413      	add	r3, r2
 801d602:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801d604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d606:	e0a7      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
        case JSONString:
            string = json_value_get_string(value);
 801d608:	68f8      	ldr	r0, [r7, #12]
 801d60a:	f000 ff10 	bl	801e42e <json_value_get_string>
 801d60e:	6338      	str	r0, [r7, #48]	; 0x30
            if (string == NULL) {
 801d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d612:	2b00      	cmp	r3, #0
 801d614:	d102      	bne.n	801d61c <json_serialize_to_buffer_r+0x4e0>
                return -1;
 801d616:	f04f 33ff 	mov.w	r3, #4294967295
 801d61a:	e09d      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
            }
            written = json_serialize_string(string, buf);
 801d61c:	68b9      	ldr	r1, [r7, #8]
 801d61e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d620:	f000 f8a0 	bl	801d764 <json_serialize_string>
 801d624:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801d626:	697b      	ldr	r3, [r7, #20]
 801d628:	2b00      	cmp	r3, #0
 801d62a:	da02      	bge.n	801d632 <json_serialize_to_buffer_r+0x4f6>
                return -1;
 801d62c:	f04f 33ff 	mov.w	r3, #4294967295
 801d630:	e092      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
            }
            if (buf != NULL) {
 801d632:	68bb      	ldr	r3, [r7, #8]
 801d634:	2b00      	cmp	r3, #0
 801d636:	d003      	beq.n	801d640 <json_serialize_to_buffer_r+0x504>
                buf += written;
 801d638:	697b      	ldr	r3, [r7, #20]
 801d63a:	68ba      	ldr	r2, [r7, #8]
 801d63c:	4413      	add	r3, r2
 801d63e:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801d640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d642:	697b      	ldr	r3, [r7, #20]
 801d644:	4413      	add	r3, r2
 801d646:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801d648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d64a:	e085      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 801d64c:	68f8      	ldr	r0, [r7, #12]
 801d64e:	f000 ff1b 	bl	801e488 <json_value_get_boolean>
 801d652:	4603      	mov	r3, r0
 801d654:	2b00      	cmp	r3, #0
 801d656:	d016      	beq.n	801d686 <json_serialize_to_buffer_r+0x54a>
                APPEND_STRING("true");
 801d658:	4927      	ldr	r1, [pc, #156]	; (801d6f8 <json_serialize_to_buffer_r+0x5bc>)
 801d65a:	68b8      	ldr	r0, [r7, #8]
 801d65c:	f000 fd4a 	bl	801e0f4 <append_string>
 801d660:	6178      	str	r0, [r7, #20]
 801d662:	697b      	ldr	r3, [r7, #20]
 801d664:	2b00      	cmp	r3, #0
 801d666:	da02      	bge.n	801d66e <json_serialize_to_buffer_r+0x532>
 801d668:	f04f 33ff 	mov.w	r3, #4294967295
 801d66c:	e074      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d66e:	68bb      	ldr	r3, [r7, #8]
 801d670:	2b00      	cmp	r3, #0
 801d672:	d003      	beq.n	801d67c <json_serialize_to_buffer_r+0x540>
 801d674:	697b      	ldr	r3, [r7, #20]
 801d676:	68ba      	ldr	r2, [r7, #8]
 801d678:	4413      	add	r3, r2
 801d67a:	60bb      	str	r3, [r7, #8]
 801d67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d67e:	697b      	ldr	r3, [r7, #20]
 801d680:	4413      	add	r3, r2
 801d682:	63bb      	str	r3, [r7, #56]	; 0x38
 801d684:	e015      	b.n	801d6b2 <json_serialize_to_buffer_r+0x576>
            } else {
                APPEND_STRING("false");
 801d686:	491d      	ldr	r1, [pc, #116]	; (801d6fc <json_serialize_to_buffer_r+0x5c0>)
 801d688:	68b8      	ldr	r0, [r7, #8]
 801d68a:	f000 fd33 	bl	801e0f4 <append_string>
 801d68e:	6178      	str	r0, [r7, #20]
 801d690:	697b      	ldr	r3, [r7, #20]
 801d692:	2b00      	cmp	r3, #0
 801d694:	da02      	bge.n	801d69c <json_serialize_to_buffer_r+0x560>
 801d696:	f04f 33ff 	mov.w	r3, #4294967295
 801d69a:	e05d      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d69c:	68bb      	ldr	r3, [r7, #8]
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d003      	beq.n	801d6aa <json_serialize_to_buffer_r+0x56e>
 801d6a2:	697b      	ldr	r3, [r7, #20]
 801d6a4:	68ba      	ldr	r2, [r7, #8]
 801d6a6:	4413      	add	r3, r2
 801d6a8:	60bb      	str	r3, [r7, #8]
 801d6aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d6ac:	697b      	ldr	r3, [r7, #20]
 801d6ae:	4413      	add	r3, r2
 801d6b0:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            return written_total;
 801d6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6b4:	e050      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
        case JSONNumber:
            num = json_value_get_number(value);
 801d6b6:	68f8      	ldr	r0, [r7, #12]
 801d6b8:	f000 fecb 	bl	801e452 <json_value_get_number>
 801d6bc:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 801d6c0:	68bb      	ldr	r3, [r7, #8]
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d001      	beq.n	801d6ca <json_serialize_to_buffer_r+0x58e>
                num_buf = buf;
 801d6c6:	68bb      	ldr	r3, [r7, #8]
 801d6c8:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 801d6ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d6ce:	490c      	ldr	r1, [pc, #48]	; (801d700 <json_serialize_to_buffer_r+0x5c4>)
 801d6d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d6d2:	f002 fb83 	bl	801fddc <siprintf>
 801d6d6:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801d6d8:	697b      	ldr	r3, [r7, #20]
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	da12      	bge.n	801d704 <json_serialize_to_buffer_r+0x5c8>
                return -1;
 801d6de:	f04f 33ff 	mov.w	r3, #4294967295
 801d6e2:	e039      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d6e4:	080239b4 	.word	0x080239b4
 801d6e8:	080239b8 	.word	0x080239b8
 801d6ec:	080239a8 	.word	0x080239a8
 801d6f0:	080239a4 	.word	0x080239a4
 801d6f4:	080239bc 	.word	0x080239bc
 801d6f8:	08023988 	.word	0x08023988
 801d6fc:	08023990 	.word	0x08023990
 801d700:	080239c0 	.word	0x080239c0
            }
            if (buf != NULL) {
 801d704:	68bb      	ldr	r3, [r7, #8]
 801d706:	2b00      	cmp	r3, #0
 801d708:	d003      	beq.n	801d712 <json_serialize_to_buffer_r+0x5d6>
                buf += written;
 801d70a:	697b      	ldr	r3, [r7, #20]
 801d70c:	68ba      	ldr	r2, [r7, #8]
 801d70e:	4413      	add	r3, r2
 801d710:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801d712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d714:	697b      	ldr	r3, [r7, #20]
 801d716:	4413      	add	r3, r2
 801d718:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801d71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d71c:	e01c      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
        case JSONNull:
            APPEND_STRING("null");
 801d71e:	4910      	ldr	r1, [pc, #64]	; (801d760 <json_serialize_to_buffer_r+0x624>)
 801d720:	68b8      	ldr	r0, [r7, #8]
 801d722:	f000 fce7 	bl	801e0f4 <append_string>
 801d726:	6178      	str	r0, [r7, #20]
 801d728:	697b      	ldr	r3, [r7, #20]
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	da02      	bge.n	801d734 <json_serialize_to_buffer_r+0x5f8>
 801d72e:	f04f 33ff 	mov.w	r3, #4294967295
 801d732:	e011      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
 801d734:	68bb      	ldr	r3, [r7, #8]
 801d736:	2b00      	cmp	r3, #0
 801d738:	d003      	beq.n	801d742 <json_serialize_to_buffer_r+0x606>
 801d73a:	697b      	ldr	r3, [r7, #20]
 801d73c:	68ba      	ldr	r2, [r7, #8]
 801d73e:	4413      	add	r3, r2
 801d740:	60bb      	str	r3, [r7, #8]
 801d742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d744:	697b      	ldr	r3, [r7, #20]
 801d746:	4413      	add	r3, r2
 801d748:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801d74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d74c:	e004      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
        case JSONError:
            return -1;
 801d74e:	f04f 33ff 	mov.w	r3, #4294967295
 801d752:	e001      	b.n	801d758 <json_serialize_to_buffer_r+0x61c>
        default:
            return -1;
 801d754:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801d758:	4618      	mov	r0, r3
 801d75a:	3740      	adds	r7, #64	; 0x40
 801d75c:	46bd      	mov	sp, r7
 801d75e:	bd80      	pop	{r7, pc}
 801d760:	08023998 	.word	0x08023998

0801d764 <json_serialize_string>:

static int json_serialize_string(const char *string, char *buf) {
 801d764:	b580      	push	{r7, lr}
 801d766:	b088      	sub	sp, #32
 801d768:	af00      	add	r7, sp, #0
 801d76a:	6078      	str	r0, [r7, #4]
 801d76c:	6039      	str	r1, [r7, #0]
    size_t i = 0, len = strlen(string);
 801d76e:	2300      	movs	r3, #0
 801d770:	61fb      	str	r3, [r7, #28]
 801d772:	6878      	ldr	r0, [r7, #4]
 801d774:	f7e2 fd4e 	bl	8000214 <strlen>
 801d778:	6178      	str	r0, [r7, #20]
    char c = '\0';
 801d77a:	2300      	movs	r3, #0
 801d77c:	74fb      	strb	r3, [r7, #19]
    int written = -1, written_total = 0;
 801d77e:	f04f 33ff 	mov.w	r3, #4294967295
 801d782:	60fb      	str	r3, [r7, #12]
 801d784:	2300      	movs	r3, #0
 801d786:	61bb      	str	r3, [r7, #24]
    APPEND_STRING("\"");
 801d788:	49bb      	ldr	r1, [pc, #748]	; (801da78 <json_serialize_string+0x314>)
 801d78a:	6838      	ldr	r0, [r7, #0]
 801d78c:	f000 fcb2 	bl	801e0f4 <append_string>
 801d790:	60f8      	str	r0, [r7, #12]
 801d792:	68fb      	ldr	r3, [r7, #12]
 801d794:	2b00      	cmp	r3, #0
 801d796:	da03      	bge.n	801d7a0 <json_serialize_string+0x3c>
 801d798:	f04f 33ff 	mov.w	r3, #4294967295
 801d79c:	f000 bc6e 	b.w	801e07c <json_serialize_string+0x918>
 801d7a0:	683b      	ldr	r3, [r7, #0]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d003      	beq.n	801d7ae <json_serialize_string+0x4a>
 801d7a6:	68fb      	ldr	r3, [r7, #12]
 801d7a8:	683a      	ldr	r2, [r7, #0]
 801d7aa:	4413      	add	r3, r2
 801d7ac:	603b      	str	r3, [r7, #0]
 801d7ae:	69ba      	ldr	r2, [r7, #24]
 801d7b0:	68fb      	ldr	r3, [r7, #12]
 801d7b2:	4413      	add	r3, r2
 801d7b4:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 801d7b6:	2300      	movs	r3, #0
 801d7b8:	61fb      	str	r3, [r7, #28]
 801d7ba:	f000 bc43 	b.w	801e044 <json_serialize_string+0x8e0>
        c = string[i];
 801d7be:	687a      	ldr	r2, [r7, #4]
 801d7c0:	69fb      	ldr	r3, [r7, #28]
 801d7c2:	4413      	add	r3, r2
 801d7c4:	781b      	ldrb	r3, [r3, #0]
 801d7c6:	74fb      	strb	r3, [r7, #19]
        switch (c) {
 801d7c8:	7cfb      	ldrb	r3, [r7, #19]
 801d7ca:	2b5c      	cmp	r3, #92	; 0x5c
 801d7cc:	f200 842a 	bhi.w	801e024 <json_serialize_string+0x8c0>
 801d7d0:	a201      	add	r2, pc, #4	; (adr r2, 801d7d8 <json_serialize_string+0x74>)
 801d7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d7d6:	bf00      	nop
 801d7d8:	0801dadf 	.word	0x0801dadf
 801d7dc:	0801db0d 	.word	0x0801db0d
 801d7e0:	0801db3b 	.word	0x0801db3b
 801d7e4:	0801db69 	.word	0x0801db69
 801d7e8:	0801db97 	.word	0x0801db97
 801d7ec:	0801dbc5 	.word	0x0801dbc5
 801d7f0:	0801dbf3 	.word	0x0801dbf3
 801d7f4:	0801dc21 	.word	0x0801dc21
 801d7f8:	0801d9d7 	.word	0x0801d9d7
 801d7fc:	0801dab1 	.word	0x0801dab1
 801d800:	0801da33 	.word	0x0801da33
 801d804:	0801dc4f 	.word	0x0801dc4f
 801d808:	0801da05 	.word	0x0801da05
 801d80c:	0801da61 	.word	0x0801da61
 801d810:	0801dc7d 	.word	0x0801dc7d
 801d814:	0801dcab 	.word	0x0801dcab
 801d818:	0801dcd9 	.word	0x0801dcd9
 801d81c:	0801dd3d 	.word	0x0801dd3d
 801d820:	0801dd6b 	.word	0x0801dd6b
 801d824:	0801dd99 	.word	0x0801dd99
 801d828:	0801ddc7 	.word	0x0801ddc7
 801d82c:	0801ddf5 	.word	0x0801ddf5
 801d830:	0801de23 	.word	0x0801de23
 801d834:	0801de51 	.word	0x0801de51
 801d838:	0801de7f 	.word	0x0801de7f
 801d83c:	0801dead 	.word	0x0801dead
 801d840:	0801dedb 	.word	0x0801dedb
 801d844:	0801df09 	.word	0x0801df09
 801d848:	0801df37 	.word	0x0801df37
 801d84c:	0801df65 	.word	0x0801df65
 801d850:	0801dfc9 	.word	0x0801dfc9
 801d854:	0801dff7 	.word	0x0801dff7
 801d858:	0801e025 	.word	0x0801e025
 801d85c:	0801e025 	.word	0x0801e025
 801d860:	0801d94d 	.word	0x0801d94d
 801d864:	0801e025 	.word	0x0801e025
 801d868:	0801e025 	.word	0x0801e025
 801d86c:	0801e025 	.word	0x0801e025
 801d870:	0801e025 	.word	0x0801e025
 801d874:	0801e025 	.word	0x0801e025
 801d878:	0801e025 	.word	0x0801e025
 801d87c:	0801e025 	.word	0x0801e025
 801d880:	0801e025 	.word	0x0801e025
 801d884:	0801e025 	.word	0x0801e025
 801d888:	0801e025 	.word	0x0801e025
 801d88c:	0801e025 	.word	0x0801e025
 801d890:	0801e025 	.word	0x0801e025
 801d894:	0801d9a9 	.word	0x0801d9a9
 801d898:	0801e025 	.word	0x0801e025
 801d89c:	0801e025 	.word	0x0801e025
 801d8a0:	0801e025 	.word	0x0801e025
 801d8a4:	0801e025 	.word	0x0801e025
 801d8a8:	0801e025 	.word	0x0801e025
 801d8ac:	0801e025 	.word	0x0801e025
 801d8b0:	0801e025 	.word	0x0801e025
 801d8b4:	0801e025 	.word	0x0801e025
 801d8b8:	0801e025 	.word	0x0801e025
 801d8bc:	0801e025 	.word	0x0801e025
 801d8c0:	0801e025 	.word	0x0801e025
 801d8c4:	0801e025 	.word	0x0801e025
 801d8c8:	0801e025 	.word	0x0801e025
 801d8cc:	0801e025 	.word	0x0801e025
 801d8d0:	0801e025 	.word	0x0801e025
 801d8d4:	0801e025 	.word	0x0801e025
 801d8d8:	0801e025 	.word	0x0801e025
 801d8dc:	0801e025 	.word	0x0801e025
 801d8e0:	0801e025 	.word	0x0801e025
 801d8e4:	0801e025 	.word	0x0801e025
 801d8e8:	0801e025 	.word	0x0801e025
 801d8ec:	0801e025 	.word	0x0801e025
 801d8f0:	0801e025 	.word	0x0801e025
 801d8f4:	0801e025 	.word	0x0801e025
 801d8f8:	0801e025 	.word	0x0801e025
 801d8fc:	0801e025 	.word	0x0801e025
 801d900:	0801e025 	.word	0x0801e025
 801d904:	0801e025 	.word	0x0801e025
 801d908:	0801e025 	.word	0x0801e025
 801d90c:	0801e025 	.word	0x0801e025
 801d910:	0801e025 	.word	0x0801e025
 801d914:	0801e025 	.word	0x0801e025
 801d918:	0801e025 	.word	0x0801e025
 801d91c:	0801e025 	.word	0x0801e025
 801d920:	0801e025 	.word	0x0801e025
 801d924:	0801e025 	.word	0x0801e025
 801d928:	0801e025 	.word	0x0801e025
 801d92c:	0801e025 	.word	0x0801e025
 801d930:	0801e025 	.word	0x0801e025
 801d934:	0801e025 	.word	0x0801e025
 801d938:	0801e025 	.word	0x0801e025
 801d93c:	0801e025 	.word	0x0801e025
 801d940:	0801e025 	.word	0x0801e025
 801d944:	0801e025 	.word	0x0801e025
 801d948:	0801d97b 	.word	0x0801d97b
            case '\"': APPEND_STRING("\\\""); break;
 801d94c:	494b      	ldr	r1, [pc, #300]	; (801da7c <json_serialize_string+0x318>)
 801d94e:	6838      	ldr	r0, [r7, #0]
 801d950:	f000 fbd0 	bl	801e0f4 <append_string>
 801d954:	60f8      	str	r0, [r7, #12]
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	da02      	bge.n	801d962 <json_serialize_string+0x1fe>
 801d95c:	f04f 33ff 	mov.w	r3, #4294967295
 801d960:	e38c      	b.n	801e07c <json_serialize_string+0x918>
 801d962:	683b      	ldr	r3, [r7, #0]
 801d964:	2b00      	cmp	r3, #0
 801d966:	d003      	beq.n	801d970 <json_serialize_string+0x20c>
 801d968:	68fb      	ldr	r3, [r7, #12]
 801d96a:	683a      	ldr	r2, [r7, #0]
 801d96c:	4413      	add	r3, r2
 801d96e:	603b      	str	r3, [r7, #0]
 801d970:	69ba      	ldr	r2, [r7, #24]
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	4413      	add	r3, r2
 801d976:	61bb      	str	r3, [r7, #24]
 801d978:	e361      	b.n	801e03e <json_serialize_string+0x8da>
            case '\\': APPEND_STRING("\\\\"); break;
 801d97a:	4941      	ldr	r1, [pc, #260]	; (801da80 <json_serialize_string+0x31c>)
 801d97c:	6838      	ldr	r0, [r7, #0]
 801d97e:	f000 fbb9 	bl	801e0f4 <append_string>
 801d982:	60f8      	str	r0, [r7, #12]
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	2b00      	cmp	r3, #0
 801d988:	da02      	bge.n	801d990 <json_serialize_string+0x22c>
 801d98a:	f04f 33ff 	mov.w	r3, #4294967295
 801d98e:	e375      	b.n	801e07c <json_serialize_string+0x918>
 801d990:	683b      	ldr	r3, [r7, #0]
 801d992:	2b00      	cmp	r3, #0
 801d994:	d003      	beq.n	801d99e <json_serialize_string+0x23a>
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	683a      	ldr	r2, [r7, #0]
 801d99a:	4413      	add	r3, r2
 801d99c:	603b      	str	r3, [r7, #0]
 801d99e:	69ba      	ldr	r2, [r7, #24]
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	4413      	add	r3, r2
 801d9a4:	61bb      	str	r3, [r7, #24]
 801d9a6:	e34a      	b.n	801e03e <json_serialize_string+0x8da>
            case '/':  APPEND_STRING("\\/"); break; /* to make json embeddable in xml\/html */
 801d9a8:	4936      	ldr	r1, [pc, #216]	; (801da84 <json_serialize_string+0x320>)
 801d9aa:	6838      	ldr	r0, [r7, #0]
 801d9ac:	f000 fba2 	bl	801e0f4 <append_string>
 801d9b0:	60f8      	str	r0, [r7, #12]
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	da02      	bge.n	801d9be <json_serialize_string+0x25a>
 801d9b8:	f04f 33ff 	mov.w	r3, #4294967295
 801d9bc:	e35e      	b.n	801e07c <json_serialize_string+0x918>
 801d9be:	683b      	ldr	r3, [r7, #0]
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d003      	beq.n	801d9cc <json_serialize_string+0x268>
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	683a      	ldr	r2, [r7, #0]
 801d9c8:	4413      	add	r3, r2
 801d9ca:	603b      	str	r3, [r7, #0]
 801d9cc:	69ba      	ldr	r2, [r7, #24]
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	4413      	add	r3, r2
 801d9d2:	61bb      	str	r3, [r7, #24]
 801d9d4:	e333      	b.n	801e03e <json_serialize_string+0x8da>
            case '\b': APPEND_STRING("\\b"); break;
 801d9d6:	492c      	ldr	r1, [pc, #176]	; (801da88 <json_serialize_string+0x324>)
 801d9d8:	6838      	ldr	r0, [r7, #0]
 801d9da:	f000 fb8b 	bl	801e0f4 <append_string>
 801d9de:	60f8      	str	r0, [r7, #12]
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	da02      	bge.n	801d9ec <json_serialize_string+0x288>
 801d9e6:	f04f 33ff 	mov.w	r3, #4294967295
 801d9ea:	e347      	b.n	801e07c <json_serialize_string+0x918>
 801d9ec:	683b      	ldr	r3, [r7, #0]
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	d003      	beq.n	801d9fa <json_serialize_string+0x296>
 801d9f2:	68fb      	ldr	r3, [r7, #12]
 801d9f4:	683a      	ldr	r2, [r7, #0]
 801d9f6:	4413      	add	r3, r2
 801d9f8:	603b      	str	r3, [r7, #0]
 801d9fa:	69ba      	ldr	r2, [r7, #24]
 801d9fc:	68fb      	ldr	r3, [r7, #12]
 801d9fe:	4413      	add	r3, r2
 801da00:	61bb      	str	r3, [r7, #24]
 801da02:	e31c      	b.n	801e03e <json_serialize_string+0x8da>
            case '\f': APPEND_STRING("\\f"); break;
 801da04:	4921      	ldr	r1, [pc, #132]	; (801da8c <json_serialize_string+0x328>)
 801da06:	6838      	ldr	r0, [r7, #0]
 801da08:	f000 fb74 	bl	801e0f4 <append_string>
 801da0c:	60f8      	str	r0, [r7, #12]
 801da0e:	68fb      	ldr	r3, [r7, #12]
 801da10:	2b00      	cmp	r3, #0
 801da12:	da02      	bge.n	801da1a <json_serialize_string+0x2b6>
 801da14:	f04f 33ff 	mov.w	r3, #4294967295
 801da18:	e330      	b.n	801e07c <json_serialize_string+0x918>
 801da1a:	683b      	ldr	r3, [r7, #0]
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d003      	beq.n	801da28 <json_serialize_string+0x2c4>
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	683a      	ldr	r2, [r7, #0]
 801da24:	4413      	add	r3, r2
 801da26:	603b      	str	r3, [r7, #0]
 801da28:	69ba      	ldr	r2, [r7, #24]
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	4413      	add	r3, r2
 801da2e:	61bb      	str	r3, [r7, #24]
 801da30:	e305      	b.n	801e03e <json_serialize_string+0x8da>
            case '\n': APPEND_STRING("\\n"); break;
 801da32:	4917      	ldr	r1, [pc, #92]	; (801da90 <json_serialize_string+0x32c>)
 801da34:	6838      	ldr	r0, [r7, #0]
 801da36:	f000 fb5d 	bl	801e0f4 <append_string>
 801da3a:	60f8      	str	r0, [r7, #12]
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	2b00      	cmp	r3, #0
 801da40:	da02      	bge.n	801da48 <json_serialize_string+0x2e4>
 801da42:	f04f 33ff 	mov.w	r3, #4294967295
 801da46:	e319      	b.n	801e07c <json_serialize_string+0x918>
 801da48:	683b      	ldr	r3, [r7, #0]
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d003      	beq.n	801da56 <json_serialize_string+0x2f2>
 801da4e:	68fb      	ldr	r3, [r7, #12]
 801da50:	683a      	ldr	r2, [r7, #0]
 801da52:	4413      	add	r3, r2
 801da54:	603b      	str	r3, [r7, #0]
 801da56:	69ba      	ldr	r2, [r7, #24]
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	4413      	add	r3, r2
 801da5c:	61bb      	str	r3, [r7, #24]
 801da5e:	e2ee      	b.n	801e03e <json_serialize_string+0x8da>
            case '\r': APPEND_STRING("\\r"); break;
 801da60:	490c      	ldr	r1, [pc, #48]	; (801da94 <json_serialize_string+0x330>)
 801da62:	6838      	ldr	r0, [r7, #0]
 801da64:	f000 fb46 	bl	801e0f4 <append_string>
 801da68:	60f8      	str	r0, [r7, #12]
 801da6a:	68fb      	ldr	r3, [r7, #12]
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	da13      	bge.n	801da98 <json_serialize_string+0x334>
 801da70:	f04f 33ff 	mov.w	r3, #4294967295
 801da74:	e302      	b.n	801e07c <json_serialize_string+0x918>
 801da76:	bf00      	nop
 801da78:	080239c8 	.word	0x080239c8
 801da7c:	080239cc 	.word	0x080239cc
 801da80:	080239d0 	.word	0x080239d0
 801da84:	080239d4 	.word	0x080239d4
 801da88:	080239d8 	.word	0x080239d8
 801da8c:	080239dc 	.word	0x080239dc
 801da90:	080239e0 	.word	0x080239e0
 801da94:	080239e4 	.word	0x080239e4
 801da98:	683b      	ldr	r3, [r7, #0]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d003      	beq.n	801daa6 <json_serialize_string+0x342>
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	683a      	ldr	r2, [r7, #0]
 801daa2:	4413      	add	r3, r2
 801daa4:	603b      	str	r3, [r7, #0]
 801daa6:	69ba      	ldr	r2, [r7, #24]
 801daa8:	68fb      	ldr	r3, [r7, #12]
 801daaa:	4413      	add	r3, r2
 801daac:	61bb      	str	r3, [r7, #24]
 801daae:	e2c6      	b.n	801e03e <json_serialize_string+0x8da>
            case '\t': APPEND_STRING("\\t"); break;
 801dab0:	4995      	ldr	r1, [pc, #596]	; (801dd08 <json_serialize_string+0x5a4>)
 801dab2:	6838      	ldr	r0, [r7, #0]
 801dab4:	f000 fb1e 	bl	801e0f4 <append_string>
 801dab8:	60f8      	str	r0, [r7, #12]
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	da02      	bge.n	801dac6 <json_serialize_string+0x362>
 801dac0:	f04f 33ff 	mov.w	r3, #4294967295
 801dac4:	e2da      	b.n	801e07c <json_serialize_string+0x918>
 801dac6:	683b      	ldr	r3, [r7, #0]
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d003      	beq.n	801dad4 <json_serialize_string+0x370>
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	683a      	ldr	r2, [r7, #0]
 801dad0:	4413      	add	r3, r2
 801dad2:	603b      	str	r3, [r7, #0]
 801dad4:	69ba      	ldr	r2, [r7, #24]
 801dad6:	68fb      	ldr	r3, [r7, #12]
 801dad8:	4413      	add	r3, r2
 801dada:	61bb      	str	r3, [r7, #24]
 801dadc:	e2af      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x00': APPEND_STRING("\\u0000"); break;
 801dade:	498b      	ldr	r1, [pc, #556]	; (801dd0c <json_serialize_string+0x5a8>)
 801dae0:	6838      	ldr	r0, [r7, #0]
 801dae2:	f000 fb07 	bl	801e0f4 <append_string>
 801dae6:	60f8      	str	r0, [r7, #12]
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	2b00      	cmp	r3, #0
 801daec:	da02      	bge.n	801daf4 <json_serialize_string+0x390>
 801daee:	f04f 33ff 	mov.w	r3, #4294967295
 801daf2:	e2c3      	b.n	801e07c <json_serialize_string+0x918>
 801daf4:	683b      	ldr	r3, [r7, #0]
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d003      	beq.n	801db02 <json_serialize_string+0x39e>
 801dafa:	68fb      	ldr	r3, [r7, #12]
 801dafc:	683a      	ldr	r2, [r7, #0]
 801dafe:	4413      	add	r3, r2
 801db00:	603b      	str	r3, [r7, #0]
 801db02:	69ba      	ldr	r2, [r7, #24]
 801db04:	68fb      	ldr	r3, [r7, #12]
 801db06:	4413      	add	r3, r2
 801db08:	61bb      	str	r3, [r7, #24]
 801db0a:	e298      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x01': APPEND_STRING("\\u0001"); break;
 801db0c:	4980      	ldr	r1, [pc, #512]	; (801dd10 <json_serialize_string+0x5ac>)
 801db0e:	6838      	ldr	r0, [r7, #0]
 801db10:	f000 faf0 	bl	801e0f4 <append_string>
 801db14:	60f8      	str	r0, [r7, #12]
 801db16:	68fb      	ldr	r3, [r7, #12]
 801db18:	2b00      	cmp	r3, #0
 801db1a:	da02      	bge.n	801db22 <json_serialize_string+0x3be>
 801db1c:	f04f 33ff 	mov.w	r3, #4294967295
 801db20:	e2ac      	b.n	801e07c <json_serialize_string+0x918>
 801db22:	683b      	ldr	r3, [r7, #0]
 801db24:	2b00      	cmp	r3, #0
 801db26:	d003      	beq.n	801db30 <json_serialize_string+0x3cc>
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	683a      	ldr	r2, [r7, #0]
 801db2c:	4413      	add	r3, r2
 801db2e:	603b      	str	r3, [r7, #0]
 801db30:	69ba      	ldr	r2, [r7, #24]
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	4413      	add	r3, r2
 801db36:	61bb      	str	r3, [r7, #24]
 801db38:	e281      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x02': APPEND_STRING("\\u0002"); break;
 801db3a:	4976      	ldr	r1, [pc, #472]	; (801dd14 <json_serialize_string+0x5b0>)
 801db3c:	6838      	ldr	r0, [r7, #0]
 801db3e:	f000 fad9 	bl	801e0f4 <append_string>
 801db42:	60f8      	str	r0, [r7, #12]
 801db44:	68fb      	ldr	r3, [r7, #12]
 801db46:	2b00      	cmp	r3, #0
 801db48:	da02      	bge.n	801db50 <json_serialize_string+0x3ec>
 801db4a:	f04f 33ff 	mov.w	r3, #4294967295
 801db4e:	e295      	b.n	801e07c <json_serialize_string+0x918>
 801db50:	683b      	ldr	r3, [r7, #0]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d003      	beq.n	801db5e <json_serialize_string+0x3fa>
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	683a      	ldr	r2, [r7, #0]
 801db5a:	4413      	add	r3, r2
 801db5c:	603b      	str	r3, [r7, #0]
 801db5e:	69ba      	ldr	r2, [r7, #24]
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	4413      	add	r3, r2
 801db64:	61bb      	str	r3, [r7, #24]
 801db66:	e26a      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x03': APPEND_STRING("\\u0003"); break;
 801db68:	496b      	ldr	r1, [pc, #428]	; (801dd18 <json_serialize_string+0x5b4>)
 801db6a:	6838      	ldr	r0, [r7, #0]
 801db6c:	f000 fac2 	bl	801e0f4 <append_string>
 801db70:	60f8      	str	r0, [r7, #12]
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	2b00      	cmp	r3, #0
 801db76:	da02      	bge.n	801db7e <json_serialize_string+0x41a>
 801db78:	f04f 33ff 	mov.w	r3, #4294967295
 801db7c:	e27e      	b.n	801e07c <json_serialize_string+0x918>
 801db7e:	683b      	ldr	r3, [r7, #0]
 801db80:	2b00      	cmp	r3, #0
 801db82:	d003      	beq.n	801db8c <json_serialize_string+0x428>
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	683a      	ldr	r2, [r7, #0]
 801db88:	4413      	add	r3, r2
 801db8a:	603b      	str	r3, [r7, #0]
 801db8c:	69ba      	ldr	r2, [r7, #24]
 801db8e:	68fb      	ldr	r3, [r7, #12]
 801db90:	4413      	add	r3, r2
 801db92:	61bb      	str	r3, [r7, #24]
 801db94:	e253      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x04': APPEND_STRING("\\u0004"); break;
 801db96:	4961      	ldr	r1, [pc, #388]	; (801dd1c <json_serialize_string+0x5b8>)
 801db98:	6838      	ldr	r0, [r7, #0]
 801db9a:	f000 faab 	bl	801e0f4 <append_string>
 801db9e:	60f8      	str	r0, [r7, #12]
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	da02      	bge.n	801dbac <json_serialize_string+0x448>
 801dba6:	f04f 33ff 	mov.w	r3, #4294967295
 801dbaa:	e267      	b.n	801e07c <json_serialize_string+0x918>
 801dbac:	683b      	ldr	r3, [r7, #0]
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d003      	beq.n	801dbba <json_serialize_string+0x456>
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	683a      	ldr	r2, [r7, #0]
 801dbb6:	4413      	add	r3, r2
 801dbb8:	603b      	str	r3, [r7, #0]
 801dbba:	69ba      	ldr	r2, [r7, #24]
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	4413      	add	r3, r2
 801dbc0:	61bb      	str	r3, [r7, #24]
 801dbc2:	e23c      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x05': APPEND_STRING("\\u0005"); break;
 801dbc4:	4956      	ldr	r1, [pc, #344]	; (801dd20 <json_serialize_string+0x5bc>)
 801dbc6:	6838      	ldr	r0, [r7, #0]
 801dbc8:	f000 fa94 	bl	801e0f4 <append_string>
 801dbcc:	60f8      	str	r0, [r7, #12]
 801dbce:	68fb      	ldr	r3, [r7, #12]
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	da02      	bge.n	801dbda <json_serialize_string+0x476>
 801dbd4:	f04f 33ff 	mov.w	r3, #4294967295
 801dbd8:	e250      	b.n	801e07c <json_serialize_string+0x918>
 801dbda:	683b      	ldr	r3, [r7, #0]
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	d003      	beq.n	801dbe8 <json_serialize_string+0x484>
 801dbe0:	68fb      	ldr	r3, [r7, #12]
 801dbe2:	683a      	ldr	r2, [r7, #0]
 801dbe4:	4413      	add	r3, r2
 801dbe6:	603b      	str	r3, [r7, #0]
 801dbe8:	69ba      	ldr	r2, [r7, #24]
 801dbea:	68fb      	ldr	r3, [r7, #12]
 801dbec:	4413      	add	r3, r2
 801dbee:	61bb      	str	r3, [r7, #24]
 801dbf0:	e225      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x06': APPEND_STRING("\\u0006"); break;
 801dbf2:	494c      	ldr	r1, [pc, #304]	; (801dd24 <json_serialize_string+0x5c0>)
 801dbf4:	6838      	ldr	r0, [r7, #0]
 801dbf6:	f000 fa7d 	bl	801e0f4 <append_string>
 801dbfa:	60f8      	str	r0, [r7, #12]
 801dbfc:	68fb      	ldr	r3, [r7, #12]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	da02      	bge.n	801dc08 <json_serialize_string+0x4a4>
 801dc02:	f04f 33ff 	mov.w	r3, #4294967295
 801dc06:	e239      	b.n	801e07c <json_serialize_string+0x918>
 801dc08:	683b      	ldr	r3, [r7, #0]
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	d003      	beq.n	801dc16 <json_serialize_string+0x4b2>
 801dc0e:	68fb      	ldr	r3, [r7, #12]
 801dc10:	683a      	ldr	r2, [r7, #0]
 801dc12:	4413      	add	r3, r2
 801dc14:	603b      	str	r3, [r7, #0]
 801dc16:	69ba      	ldr	r2, [r7, #24]
 801dc18:	68fb      	ldr	r3, [r7, #12]
 801dc1a:	4413      	add	r3, r2
 801dc1c:	61bb      	str	r3, [r7, #24]
 801dc1e:	e20e      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x07': APPEND_STRING("\\u0007"); break;
 801dc20:	4941      	ldr	r1, [pc, #260]	; (801dd28 <json_serialize_string+0x5c4>)
 801dc22:	6838      	ldr	r0, [r7, #0]
 801dc24:	f000 fa66 	bl	801e0f4 <append_string>
 801dc28:	60f8      	str	r0, [r7, #12]
 801dc2a:	68fb      	ldr	r3, [r7, #12]
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	da02      	bge.n	801dc36 <json_serialize_string+0x4d2>
 801dc30:	f04f 33ff 	mov.w	r3, #4294967295
 801dc34:	e222      	b.n	801e07c <json_serialize_string+0x918>
 801dc36:	683b      	ldr	r3, [r7, #0]
 801dc38:	2b00      	cmp	r3, #0
 801dc3a:	d003      	beq.n	801dc44 <json_serialize_string+0x4e0>
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	683a      	ldr	r2, [r7, #0]
 801dc40:	4413      	add	r3, r2
 801dc42:	603b      	str	r3, [r7, #0]
 801dc44:	69ba      	ldr	r2, [r7, #24]
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	4413      	add	r3, r2
 801dc4a:	61bb      	str	r3, [r7, #24]
 801dc4c:	e1f7      	b.n	801e03e <json_serialize_string+0x8da>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 801dc4e:	4937      	ldr	r1, [pc, #220]	; (801dd2c <json_serialize_string+0x5c8>)
 801dc50:	6838      	ldr	r0, [r7, #0]
 801dc52:	f000 fa4f 	bl	801e0f4 <append_string>
 801dc56:	60f8      	str	r0, [r7, #12]
 801dc58:	68fb      	ldr	r3, [r7, #12]
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	da02      	bge.n	801dc64 <json_serialize_string+0x500>
 801dc5e:	f04f 33ff 	mov.w	r3, #4294967295
 801dc62:	e20b      	b.n	801e07c <json_serialize_string+0x918>
 801dc64:	683b      	ldr	r3, [r7, #0]
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d003      	beq.n	801dc72 <json_serialize_string+0x50e>
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	683a      	ldr	r2, [r7, #0]
 801dc6e:	4413      	add	r3, r2
 801dc70:	603b      	str	r3, [r7, #0]
 801dc72:	69ba      	ldr	r2, [r7, #24]
 801dc74:	68fb      	ldr	r3, [r7, #12]
 801dc76:	4413      	add	r3, r2
 801dc78:	61bb      	str	r3, [r7, #24]
 801dc7a:	e1e0      	b.n	801e03e <json_serialize_string+0x8da>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 801dc7c:	492c      	ldr	r1, [pc, #176]	; (801dd30 <json_serialize_string+0x5cc>)
 801dc7e:	6838      	ldr	r0, [r7, #0]
 801dc80:	f000 fa38 	bl	801e0f4 <append_string>
 801dc84:	60f8      	str	r0, [r7, #12]
 801dc86:	68fb      	ldr	r3, [r7, #12]
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	da02      	bge.n	801dc92 <json_serialize_string+0x52e>
 801dc8c:	f04f 33ff 	mov.w	r3, #4294967295
 801dc90:	e1f4      	b.n	801e07c <json_serialize_string+0x918>
 801dc92:	683b      	ldr	r3, [r7, #0]
 801dc94:	2b00      	cmp	r3, #0
 801dc96:	d003      	beq.n	801dca0 <json_serialize_string+0x53c>
 801dc98:	68fb      	ldr	r3, [r7, #12]
 801dc9a:	683a      	ldr	r2, [r7, #0]
 801dc9c:	4413      	add	r3, r2
 801dc9e:	603b      	str	r3, [r7, #0]
 801dca0:	69ba      	ldr	r2, [r7, #24]
 801dca2:	68fb      	ldr	r3, [r7, #12]
 801dca4:	4413      	add	r3, r2
 801dca6:	61bb      	str	r3, [r7, #24]
 801dca8:	e1c9      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 801dcaa:	4922      	ldr	r1, [pc, #136]	; (801dd34 <json_serialize_string+0x5d0>)
 801dcac:	6838      	ldr	r0, [r7, #0]
 801dcae:	f000 fa21 	bl	801e0f4 <append_string>
 801dcb2:	60f8      	str	r0, [r7, #12]
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	2b00      	cmp	r3, #0
 801dcb8:	da02      	bge.n	801dcc0 <json_serialize_string+0x55c>
 801dcba:	f04f 33ff 	mov.w	r3, #4294967295
 801dcbe:	e1dd      	b.n	801e07c <json_serialize_string+0x918>
 801dcc0:	683b      	ldr	r3, [r7, #0]
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d003      	beq.n	801dcce <json_serialize_string+0x56a>
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	683a      	ldr	r2, [r7, #0]
 801dcca:	4413      	add	r3, r2
 801dccc:	603b      	str	r3, [r7, #0]
 801dcce:	69ba      	ldr	r2, [r7, #24]
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	4413      	add	r3, r2
 801dcd4:	61bb      	str	r3, [r7, #24]
 801dcd6:	e1b2      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x10': APPEND_STRING("\\u0010"); break;
 801dcd8:	4917      	ldr	r1, [pc, #92]	; (801dd38 <json_serialize_string+0x5d4>)
 801dcda:	6838      	ldr	r0, [r7, #0]
 801dcdc:	f000 fa0a 	bl	801e0f4 <append_string>
 801dce0:	60f8      	str	r0, [r7, #12]
 801dce2:	68fb      	ldr	r3, [r7, #12]
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	da02      	bge.n	801dcee <json_serialize_string+0x58a>
 801dce8:	f04f 33ff 	mov.w	r3, #4294967295
 801dcec:	e1c6      	b.n	801e07c <json_serialize_string+0x918>
 801dcee:	683b      	ldr	r3, [r7, #0]
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	d003      	beq.n	801dcfc <json_serialize_string+0x598>
 801dcf4:	68fb      	ldr	r3, [r7, #12]
 801dcf6:	683a      	ldr	r2, [r7, #0]
 801dcf8:	4413      	add	r3, r2
 801dcfa:	603b      	str	r3, [r7, #0]
 801dcfc:	69ba      	ldr	r2, [r7, #24]
 801dcfe:	68fb      	ldr	r3, [r7, #12]
 801dd00:	4413      	add	r3, r2
 801dd02:	61bb      	str	r3, [r7, #24]
 801dd04:	e19b      	b.n	801e03e <json_serialize_string+0x8da>
 801dd06:	bf00      	nop
 801dd08:	080239e8 	.word	0x080239e8
 801dd0c:	080239ec 	.word	0x080239ec
 801dd10:	080239f4 	.word	0x080239f4
 801dd14:	080239fc 	.word	0x080239fc
 801dd18:	08023a04 	.word	0x08023a04
 801dd1c:	08023a0c 	.word	0x08023a0c
 801dd20:	08023a14 	.word	0x08023a14
 801dd24:	08023a1c 	.word	0x08023a1c
 801dd28:	08023a24 	.word	0x08023a24
 801dd2c:	08023a2c 	.word	0x08023a2c
 801dd30:	08023a34 	.word	0x08023a34
 801dd34:	08023a3c 	.word	0x08023a3c
 801dd38:	08023a44 	.word	0x08023a44
            case '\x11': APPEND_STRING("\\u0011"); break;
 801dd3c:	4995      	ldr	r1, [pc, #596]	; (801df94 <json_serialize_string+0x830>)
 801dd3e:	6838      	ldr	r0, [r7, #0]
 801dd40:	f000 f9d8 	bl	801e0f4 <append_string>
 801dd44:	60f8      	str	r0, [r7, #12]
 801dd46:	68fb      	ldr	r3, [r7, #12]
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	da02      	bge.n	801dd52 <json_serialize_string+0x5ee>
 801dd4c:	f04f 33ff 	mov.w	r3, #4294967295
 801dd50:	e194      	b.n	801e07c <json_serialize_string+0x918>
 801dd52:	683b      	ldr	r3, [r7, #0]
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d003      	beq.n	801dd60 <json_serialize_string+0x5fc>
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	683a      	ldr	r2, [r7, #0]
 801dd5c:	4413      	add	r3, r2
 801dd5e:	603b      	str	r3, [r7, #0]
 801dd60:	69ba      	ldr	r2, [r7, #24]
 801dd62:	68fb      	ldr	r3, [r7, #12]
 801dd64:	4413      	add	r3, r2
 801dd66:	61bb      	str	r3, [r7, #24]
 801dd68:	e169      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x12': APPEND_STRING("\\u0012"); break;
 801dd6a:	498b      	ldr	r1, [pc, #556]	; (801df98 <json_serialize_string+0x834>)
 801dd6c:	6838      	ldr	r0, [r7, #0]
 801dd6e:	f000 f9c1 	bl	801e0f4 <append_string>
 801dd72:	60f8      	str	r0, [r7, #12]
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	da02      	bge.n	801dd80 <json_serialize_string+0x61c>
 801dd7a:	f04f 33ff 	mov.w	r3, #4294967295
 801dd7e:	e17d      	b.n	801e07c <json_serialize_string+0x918>
 801dd80:	683b      	ldr	r3, [r7, #0]
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	d003      	beq.n	801dd8e <json_serialize_string+0x62a>
 801dd86:	68fb      	ldr	r3, [r7, #12]
 801dd88:	683a      	ldr	r2, [r7, #0]
 801dd8a:	4413      	add	r3, r2
 801dd8c:	603b      	str	r3, [r7, #0]
 801dd8e:	69ba      	ldr	r2, [r7, #24]
 801dd90:	68fb      	ldr	r3, [r7, #12]
 801dd92:	4413      	add	r3, r2
 801dd94:	61bb      	str	r3, [r7, #24]
 801dd96:	e152      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x13': APPEND_STRING("\\u0013"); break;
 801dd98:	4980      	ldr	r1, [pc, #512]	; (801df9c <json_serialize_string+0x838>)
 801dd9a:	6838      	ldr	r0, [r7, #0]
 801dd9c:	f000 f9aa 	bl	801e0f4 <append_string>
 801dda0:	60f8      	str	r0, [r7, #12]
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	da02      	bge.n	801ddae <json_serialize_string+0x64a>
 801dda8:	f04f 33ff 	mov.w	r3, #4294967295
 801ddac:	e166      	b.n	801e07c <json_serialize_string+0x918>
 801ddae:	683b      	ldr	r3, [r7, #0]
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d003      	beq.n	801ddbc <json_serialize_string+0x658>
 801ddb4:	68fb      	ldr	r3, [r7, #12]
 801ddb6:	683a      	ldr	r2, [r7, #0]
 801ddb8:	4413      	add	r3, r2
 801ddba:	603b      	str	r3, [r7, #0]
 801ddbc:	69ba      	ldr	r2, [r7, #24]
 801ddbe:	68fb      	ldr	r3, [r7, #12]
 801ddc0:	4413      	add	r3, r2
 801ddc2:	61bb      	str	r3, [r7, #24]
 801ddc4:	e13b      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x14': APPEND_STRING("\\u0014"); break;
 801ddc6:	4976      	ldr	r1, [pc, #472]	; (801dfa0 <json_serialize_string+0x83c>)
 801ddc8:	6838      	ldr	r0, [r7, #0]
 801ddca:	f000 f993 	bl	801e0f4 <append_string>
 801ddce:	60f8      	str	r0, [r7, #12]
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	2b00      	cmp	r3, #0
 801ddd4:	da02      	bge.n	801dddc <json_serialize_string+0x678>
 801ddd6:	f04f 33ff 	mov.w	r3, #4294967295
 801ddda:	e14f      	b.n	801e07c <json_serialize_string+0x918>
 801dddc:	683b      	ldr	r3, [r7, #0]
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d003      	beq.n	801ddea <json_serialize_string+0x686>
 801dde2:	68fb      	ldr	r3, [r7, #12]
 801dde4:	683a      	ldr	r2, [r7, #0]
 801dde6:	4413      	add	r3, r2
 801dde8:	603b      	str	r3, [r7, #0]
 801ddea:	69ba      	ldr	r2, [r7, #24]
 801ddec:	68fb      	ldr	r3, [r7, #12]
 801ddee:	4413      	add	r3, r2
 801ddf0:	61bb      	str	r3, [r7, #24]
 801ddf2:	e124      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x15': APPEND_STRING("\\u0015"); break;
 801ddf4:	496b      	ldr	r1, [pc, #428]	; (801dfa4 <json_serialize_string+0x840>)
 801ddf6:	6838      	ldr	r0, [r7, #0]
 801ddf8:	f000 f97c 	bl	801e0f4 <append_string>
 801ddfc:	60f8      	str	r0, [r7, #12]
 801ddfe:	68fb      	ldr	r3, [r7, #12]
 801de00:	2b00      	cmp	r3, #0
 801de02:	da02      	bge.n	801de0a <json_serialize_string+0x6a6>
 801de04:	f04f 33ff 	mov.w	r3, #4294967295
 801de08:	e138      	b.n	801e07c <json_serialize_string+0x918>
 801de0a:	683b      	ldr	r3, [r7, #0]
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d003      	beq.n	801de18 <json_serialize_string+0x6b4>
 801de10:	68fb      	ldr	r3, [r7, #12]
 801de12:	683a      	ldr	r2, [r7, #0]
 801de14:	4413      	add	r3, r2
 801de16:	603b      	str	r3, [r7, #0]
 801de18:	69ba      	ldr	r2, [r7, #24]
 801de1a:	68fb      	ldr	r3, [r7, #12]
 801de1c:	4413      	add	r3, r2
 801de1e:	61bb      	str	r3, [r7, #24]
 801de20:	e10d      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x16': APPEND_STRING("\\u0016"); break;
 801de22:	4961      	ldr	r1, [pc, #388]	; (801dfa8 <json_serialize_string+0x844>)
 801de24:	6838      	ldr	r0, [r7, #0]
 801de26:	f000 f965 	bl	801e0f4 <append_string>
 801de2a:	60f8      	str	r0, [r7, #12]
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	da02      	bge.n	801de38 <json_serialize_string+0x6d4>
 801de32:	f04f 33ff 	mov.w	r3, #4294967295
 801de36:	e121      	b.n	801e07c <json_serialize_string+0x918>
 801de38:	683b      	ldr	r3, [r7, #0]
 801de3a:	2b00      	cmp	r3, #0
 801de3c:	d003      	beq.n	801de46 <json_serialize_string+0x6e2>
 801de3e:	68fb      	ldr	r3, [r7, #12]
 801de40:	683a      	ldr	r2, [r7, #0]
 801de42:	4413      	add	r3, r2
 801de44:	603b      	str	r3, [r7, #0]
 801de46:	69ba      	ldr	r2, [r7, #24]
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	4413      	add	r3, r2
 801de4c:	61bb      	str	r3, [r7, #24]
 801de4e:	e0f6      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x17': APPEND_STRING("\\u0017"); break;
 801de50:	4956      	ldr	r1, [pc, #344]	; (801dfac <json_serialize_string+0x848>)
 801de52:	6838      	ldr	r0, [r7, #0]
 801de54:	f000 f94e 	bl	801e0f4 <append_string>
 801de58:	60f8      	str	r0, [r7, #12]
 801de5a:	68fb      	ldr	r3, [r7, #12]
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	da02      	bge.n	801de66 <json_serialize_string+0x702>
 801de60:	f04f 33ff 	mov.w	r3, #4294967295
 801de64:	e10a      	b.n	801e07c <json_serialize_string+0x918>
 801de66:	683b      	ldr	r3, [r7, #0]
 801de68:	2b00      	cmp	r3, #0
 801de6a:	d003      	beq.n	801de74 <json_serialize_string+0x710>
 801de6c:	68fb      	ldr	r3, [r7, #12]
 801de6e:	683a      	ldr	r2, [r7, #0]
 801de70:	4413      	add	r3, r2
 801de72:	603b      	str	r3, [r7, #0]
 801de74:	69ba      	ldr	r2, [r7, #24]
 801de76:	68fb      	ldr	r3, [r7, #12]
 801de78:	4413      	add	r3, r2
 801de7a:	61bb      	str	r3, [r7, #24]
 801de7c:	e0df      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x18': APPEND_STRING("\\u0018"); break;
 801de7e:	494c      	ldr	r1, [pc, #304]	; (801dfb0 <json_serialize_string+0x84c>)
 801de80:	6838      	ldr	r0, [r7, #0]
 801de82:	f000 f937 	bl	801e0f4 <append_string>
 801de86:	60f8      	str	r0, [r7, #12]
 801de88:	68fb      	ldr	r3, [r7, #12]
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	da02      	bge.n	801de94 <json_serialize_string+0x730>
 801de8e:	f04f 33ff 	mov.w	r3, #4294967295
 801de92:	e0f3      	b.n	801e07c <json_serialize_string+0x918>
 801de94:	683b      	ldr	r3, [r7, #0]
 801de96:	2b00      	cmp	r3, #0
 801de98:	d003      	beq.n	801dea2 <json_serialize_string+0x73e>
 801de9a:	68fb      	ldr	r3, [r7, #12]
 801de9c:	683a      	ldr	r2, [r7, #0]
 801de9e:	4413      	add	r3, r2
 801dea0:	603b      	str	r3, [r7, #0]
 801dea2:	69ba      	ldr	r2, [r7, #24]
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	4413      	add	r3, r2
 801dea8:	61bb      	str	r3, [r7, #24]
 801deaa:	e0c8      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x19': APPEND_STRING("\\u0019"); break;
 801deac:	4941      	ldr	r1, [pc, #260]	; (801dfb4 <json_serialize_string+0x850>)
 801deae:	6838      	ldr	r0, [r7, #0]
 801deb0:	f000 f920 	bl	801e0f4 <append_string>
 801deb4:	60f8      	str	r0, [r7, #12]
 801deb6:	68fb      	ldr	r3, [r7, #12]
 801deb8:	2b00      	cmp	r3, #0
 801deba:	da02      	bge.n	801dec2 <json_serialize_string+0x75e>
 801debc:	f04f 33ff 	mov.w	r3, #4294967295
 801dec0:	e0dc      	b.n	801e07c <json_serialize_string+0x918>
 801dec2:	683b      	ldr	r3, [r7, #0]
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	d003      	beq.n	801ded0 <json_serialize_string+0x76c>
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	683a      	ldr	r2, [r7, #0]
 801decc:	4413      	add	r3, r2
 801dece:	603b      	str	r3, [r7, #0]
 801ded0:	69ba      	ldr	r2, [r7, #24]
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	4413      	add	r3, r2
 801ded6:	61bb      	str	r3, [r7, #24]
 801ded8:	e0b1      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 801deda:	4937      	ldr	r1, [pc, #220]	; (801dfb8 <json_serialize_string+0x854>)
 801dedc:	6838      	ldr	r0, [r7, #0]
 801dede:	f000 f909 	bl	801e0f4 <append_string>
 801dee2:	60f8      	str	r0, [r7, #12]
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	2b00      	cmp	r3, #0
 801dee8:	da02      	bge.n	801def0 <json_serialize_string+0x78c>
 801deea:	f04f 33ff 	mov.w	r3, #4294967295
 801deee:	e0c5      	b.n	801e07c <json_serialize_string+0x918>
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	2b00      	cmp	r3, #0
 801def4:	d003      	beq.n	801defe <json_serialize_string+0x79a>
 801def6:	68fb      	ldr	r3, [r7, #12]
 801def8:	683a      	ldr	r2, [r7, #0]
 801defa:	4413      	add	r3, r2
 801defc:	603b      	str	r3, [r7, #0]
 801defe:	69ba      	ldr	r2, [r7, #24]
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	4413      	add	r3, r2
 801df04:	61bb      	str	r3, [r7, #24]
 801df06:	e09a      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 801df08:	492c      	ldr	r1, [pc, #176]	; (801dfbc <json_serialize_string+0x858>)
 801df0a:	6838      	ldr	r0, [r7, #0]
 801df0c:	f000 f8f2 	bl	801e0f4 <append_string>
 801df10:	60f8      	str	r0, [r7, #12]
 801df12:	68fb      	ldr	r3, [r7, #12]
 801df14:	2b00      	cmp	r3, #0
 801df16:	da02      	bge.n	801df1e <json_serialize_string+0x7ba>
 801df18:	f04f 33ff 	mov.w	r3, #4294967295
 801df1c:	e0ae      	b.n	801e07c <json_serialize_string+0x918>
 801df1e:	683b      	ldr	r3, [r7, #0]
 801df20:	2b00      	cmp	r3, #0
 801df22:	d003      	beq.n	801df2c <json_serialize_string+0x7c8>
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	683a      	ldr	r2, [r7, #0]
 801df28:	4413      	add	r3, r2
 801df2a:	603b      	str	r3, [r7, #0]
 801df2c:	69ba      	ldr	r2, [r7, #24]
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	4413      	add	r3, r2
 801df32:	61bb      	str	r3, [r7, #24]
 801df34:	e083      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 801df36:	4922      	ldr	r1, [pc, #136]	; (801dfc0 <json_serialize_string+0x85c>)
 801df38:	6838      	ldr	r0, [r7, #0]
 801df3a:	f000 f8db 	bl	801e0f4 <append_string>
 801df3e:	60f8      	str	r0, [r7, #12]
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	2b00      	cmp	r3, #0
 801df44:	da02      	bge.n	801df4c <json_serialize_string+0x7e8>
 801df46:	f04f 33ff 	mov.w	r3, #4294967295
 801df4a:	e097      	b.n	801e07c <json_serialize_string+0x918>
 801df4c:	683b      	ldr	r3, [r7, #0]
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d003      	beq.n	801df5a <json_serialize_string+0x7f6>
 801df52:	68fb      	ldr	r3, [r7, #12]
 801df54:	683a      	ldr	r2, [r7, #0]
 801df56:	4413      	add	r3, r2
 801df58:	603b      	str	r3, [r7, #0]
 801df5a:	69ba      	ldr	r2, [r7, #24]
 801df5c:	68fb      	ldr	r3, [r7, #12]
 801df5e:	4413      	add	r3, r2
 801df60:	61bb      	str	r3, [r7, #24]
 801df62:	e06c      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 801df64:	4917      	ldr	r1, [pc, #92]	; (801dfc4 <json_serialize_string+0x860>)
 801df66:	6838      	ldr	r0, [r7, #0]
 801df68:	f000 f8c4 	bl	801e0f4 <append_string>
 801df6c:	60f8      	str	r0, [r7, #12]
 801df6e:	68fb      	ldr	r3, [r7, #12]
 801df70:	2b00      	cmp	r3, #0
 801df72:	da02      	bge.n	801df7a <json_serialize_string+0x816>
 801df74:	f04f 33ff 	mov.w	r3, #4294967295
 801df78:	e080      	b.n	801e07c <json_serialize_string+0x918>
 801df7a:	683b      	ldr	r3, [r7, #0]
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	d003      	beq.n	801df88 <json_serialize_string+0x824>
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	683a      	ldr	r2, [r7, #0]
 801df84:	4413      	add	r3, r2
 801df86:	603b      	str	r3, [r7, #0]
 801df88:	69ba      	ldr	r2, [r7, #24]
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	4413      	add	r3, r2
 801df8e:	61bb      	str	r3, [r7, #24]
 801df90:	e055      	b.n	801e03e <json_serialize_string+0x8da>
 801df92:	bf00      	nop
 801df94:	08023a4c 	.word	0x08023a4c
 801df98:	08023a54 	.word	0x08023a54
 801df9c:	08023a5c 	.word	0x08023a5c
 801dfa0:	08023a64 	.word	0x08023a64
 801dfa4:	08023a6c 	.word	0x08023a6c
 801dfa8:	08023a74 	.word	0x08023a74
 801dfac:	08023a7c 	.word	0x08023a7c
 801dfb0:	08023a84 	.word	0x08023a84
 801dfb4:	08023a8c 	.word	0x08023a8c
 801dfb8:	08023a94 	.word	0x08023a94
 801dfbc:	08023a9c 	.word	0x08023a9c
 801dfc0:	08023aa4 	.word	0x08023aa4
 801dfc4:	08023aac 	.word	0x08023aac
            case '\x1e': APPEND_STRING("\\u001e"); break;
 801dfc8:	492e      	ldr	r1, [pc, #184]	; (801e084 <json_serialize_string+0x920>)
 801dfca:	6838      	ldr	r0, [r7, #0]
 801dfcc:	f000 f892 	bl	801e0f4 <append_string>
 801dfd0:	60f8      	str	r0, [r7, #12]
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	da02      	bge.n	801dfde <json_serialize_string+0x87a>
 801dfd8:	f04f 33ff 	mov.w	r3, #4294967295
 801dfdc:	e04e      	b.n	801e07c <json_serialize_string+0x918>
 801dfde:	683b      	ldr	r3, [r7, #0]
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	d003      	beq.n	801dfec <json_serialize_string+0x888>
 801dfe4:	68fb      	ldr	r3, [r7, #12]
 801dfe6:	683a      	ldr	r2, [r7, #0]
 801dfe8:	4413      	add	r3, r2
 801dfea:	603b      	str	r3, [r7, #0]
 801dfec:	69ba      	ldr	r2, [r7, #24]
 801dfee:	68fb      	ldr	r3, [r7, #12]
 801dff0:	4413      	add	r3, r2
 801dff2:	61bb      	str	r3, [r7, #24]
 801dff4:	e023      	b.n	801e03e <json_serialize_string+0x8da>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 801dff6:	4924      	ldr	r1, [pc, #144]	; (801e088 <json_serialize_string+0x924>)
 801dff8:	6838      	ldr	r0, [r7, #0]
 801dffa:	f000 f87b 	bl	801e0f4 <append_string>
 801dffe:	60f8      	str	r0, [r7, #12]
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	2b00      	cmp	r3, #0
 801e004:	da02      	bge.n	801e00c <json_serialize_string+0x8a8>
 801e006:	f04f 33ff 	mov.w	r3, #4294967295
 801e00a:	e037      	b.n	801e07c <json_serialize_string+0x918>
 801e00c:	683b      	ldr	r3, [r7, #0]
 801e00e:	2b00      	cmp	r3, #0
 801e010:	d003      	beq.n	801e01a <json_serialize_string+0x8b6>
 801e012:	68fb      	ldr	r3, [r7, #12]
 801e014:	683a      	ldr	r2, [r7, #0]
 801e016:	4413      	add	r3, r2
 801e018:	603b      	str	r3, [r7, #0]
 801e01a:	69ba      	ldr	r2, [r7, #24]
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	4413      	add	r3, r2
 801e020:	61bb      	str	r3, [r7, #24]
 801e022:	e00c      	b.n	801e03e <json_serialize_string+0x8da>
            default:
                if (buf != NULL) {
 801e024:	683b      	ldr	r3, [r7, #0]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d005      	beq.n	801e036 <json_serialize_string+0x8d2>
                    buf[0] = c;
 801e02a:	683b      	ldr	r3, [r7, #0]
 801e02c:	7cfa      	ldrb	r2, [r7, #19]
 801e02e:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 801e030:	683b      	ldr	r3, [r7, #0]
 801e032:	3301      	adds	r3, #1
 801e034:	603b      	str	r3, [r7, #0]
                }
                written_total += 1;
 801e036:	69bb      	ldr	r3, [r7, #24]
 801e038:	3301      	adds	r3, #1
 801e03a:	61bb      	str	r3, [r7, #24]
                break;
 801e03c:	bf00      	nop
    for (i = 0; i < len; i++) {
 801e03e:	69fb      	ldr	r3, [r7, #28]
 801e040:	3301      	adds	r3, #1
 801e042:	61fb      	str	r3, [r7, #28]
 801e044:	69fa      	ldr	r2, [r7, #28]
 801e046:	697b      	ldr	r3, [r7, #20]
 801e048:	429a      	cmp	r2, r3
 801e04a:	f4ff abb8 	bcc.w	801d7be <json_serialize_string+0x5a>
        }
    }
    APPEND_STRING("\"");
 801e04e:	490f      	ldr	r1, [pc, #60]	; (801e08c <json_serialize_string+0x928>)
 801e050:	6838      	ldr	r0, [r7, #0]
 801e052:	f000 f84f 	bl	801e0f4 <append_string>
 801e056:	60f8      	str	r0, [r7, #12]
 801e058:	68fb      	ldr	r3, [r7, #12]
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	da02      	bge.n	801e064 <json_serialize_string+0x900>
 801e05e:	f04f 33ff 	mov.w	r3, #4294967295
 801e062:	e00b      	b.n	801e07c <json_serialize_string+0x918>
 801e064:	683b      	ldr	r3, [r7, #0]
 801e066:	2b00      	cmp	r3, #0
 801e068:	d003      	beq.n	801e072 <json_serialize_string+0x90e>
 801e06a:	68fb      	ldr	r3, [r7, #12]
 801e06c:	683a      	ldr	r2, [r7, #0]
 801e06e:	4413      	add	r3, r2
 801e070:	603b      	str	r3, [r7, #0]
 801e072:	69ba      	ldr	r2, [r7, #24]
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	4413      	add	r3, r2
 801e078:	61bb      	str	r3, [r7, #24]
    return written_total;
 801e07a:	69bb      	ldr	r3, [r7, #24]
}
 801e07c:	4618      	mov	r0, r3
 801e07e:	3720      	adds	r7, #32
 801e080:	46bd      	mov	sp, r7
 801e082:	bd80      	pop	{r7, pc}
 801e084:	08023ab4 	.word	0x08023ab4
 801e088:	08023abc 	.word	0x08023abc
 801e08c:	080239c8 	.word	0x080239c8

0801e090 <append_indent>:

static int append_indent(char *buf, int level) {
 801e090:	b580      	push	{r7, lr}
 801e092:	b086      	sub	sp, #24
 801e094:	af00      	add	r7, sp, #0
 801e096:	6078      	str	r0, [r7, #4]
 801e098:	6039      	str	r1, [r7, #0]
    int i;
    int written = -1, written_total = 0;
 801e09a:	f04f 33ff 	mov.w	r3, #4294967295
 801e09e:	60fb      	str	r3, [r7, #12]
 801e0a0:	2300      	movs	r3, #0
 801e0a2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801e0a4:	2300      	movs	r3, #0
 801e0a6:	617b      	str	r3, [r7, #20]
 801e0a8:	e018      	b.n	801e0dc <append_indent+0x4c>
        APPEND_STRING("    ");
 801e0aa:	4911      	ldr	r1, [pc, #68]	; (801e0f0 <append_indent+0x60>)
 801e0ac:	6878      	ldr	r0, [r7, #4]
 801e0ae:	f000 f821 	bl	801e0f4 <append_string>
 801e0b2:	60f8      	str	r0, [r7, #12]
 801e0b4:	68fb      	ldr	r3, [r7, #12]
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	da02      	bge.n	801e0c0 <append_indent+0x30>
 801e0ba:	f04f 33ff 	mov.w	r3, #4294967295
 801e0be:	e012      	b.n	801e0e6 <append_indent+0x56>
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	d003      	beq.n	801e0ce <append_indent+0x3e>
 801e0c6:	68fb      	ldr	r3, [r7, #12]
 801e0c8:	687a      	ldr	r2, [r7, #4]
 801e0ca:	4413      	add	r3, r2
 801e0cc:	607b      	str	r3, [r7, #4]
 801e0ce:	693a      	ldr	r2, [r7, #16]
 801e0d0:	68fb      	ldr	r3, [r7, #12]
 801e0d2:	4413      	add	r3, r2
 801e0d4:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801e0d6:	697b      	ldr	r3, [r7, #20]
 801e0d8:	3301      	adds	r3, #1
 801e0da:	617b      	str	r3, [r7, #20]
 801e0dc:	697a      	ldr	r2, [r7, #20]
 801e0de:	683b      	ldr	r3, [r7, #0]
 801e0e0:	429a      	cmp	r2, r3
 801e0e2:	dbe2      	blt.n	801e0aa <append_indent+0x1a>
    }
    return written_total;
 801e0e4:	693b      	ldr	r3, [r7, #16]
}
 801e0e6:	4618      	mov	r0, r3
 801e0e8:	3718      	adds	r7, #24
 801e0ea:	46bd      	mov	sp, r7
 801e0ec:	bd80      	pop	{r7, pc}
 801e0ee:	bf00      	nop
 801e0f0:	08023ac4 	.word	0x08023ac4

0801e0f4 <append_string>:

static int append_string(char *buf, const char *string) {
 801e0f4:	b580      	push	{r7, lr}
 801e0f6:	b082      	sub	sp, #8
 801e0f8:	af00      	add	r7, sp, #0
 801e0fa:	6078      	str	r0, [r7, #4]
 801e0fc:	6039      	str	r1, [r7, #0]
    if (buf == NULL) {
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	2b00      	cmp	r3, #0
 801e102:	d104      	bne.n	801e10e <append_string+0x1a>
        return (int)strlen(string);
 801e104:	6838      	ldr	r0, [r7, #0]
 801e106:	f7e2 f885 	bl	8000214 <strlen>
 801e10a:	4603      	mov	r3, r0
 801e10c:	e005      	b.n	801e11a <append_string+0x26>
    }
    return sprintf(buf, "%s", string);
 801e10e:	683a      	ldr	r2, [r7, #0]
 801e110:	4904      	ldr	r1, [pc, #16]	; (801e124 <append_string+0x30>)
 801e112:	6878      	ldr	r0, [r7, #4]
 801e114:	f001 fe62 	bl	801fddc <siprintf>
 801e118:	4603      	mov	r3, r0
}
 801e11a:	4618      	mov	r0, r3
 801e11c:	3708      	adds	r7, #8
 801e11e:	46bd      	mov	sp, r7
 801e120:	bd80      	pop	{r7, pc}
 801e122:	bf00      	nop
 801e124:	08023acc 	.word	0x08023acc

0801e128 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 801e128:	b580      	push	{r7, lr}
 801e12a:	b082      	sub	sp, #8
 801e12c:	af00      	add	r7, sp, #0
 801e12e:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	2b00      	cmp	r3, #0
 801e134:	d101      	bne.n	801e13a <json_parse_string+0x12>
        return NULL;
 801e136:	2300      	movs	r3, #0
 801e138:	e016      	b.n	801e168 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	781b      	ldrb	r3, [r3, #0]
 801e13e:	2bef      	cmp	r3, #239	; 0xef
 801e140:	d10c      	bne.n	801e15c <json_parse_string+0x34>
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	3301      	adds	r3, #1
 801e146:	781b      	ldrb	r3, [r3, #0]
 801e148:	2bbb      	cmp	r3, #187	; 0xbb
 801e14a:	d107      	bne.n	801e15c <json_parse_string+0x34>
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	3302      	adds	r3, #2
 801e150:	781b      	ldrb	r3, [r3, #0]
 801e152:	2bbf      	cmp	r3, #191	; 0xbf
 801e154:	d102      	bne.n	801e15c <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	3303      	adds	r3, #3
 801e15a:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 801e15c:	1d3b      	adds	r3, r7, #4
 801e15e:	2100      	movs	r1, #0
 801e160:	4618      	mov	r0, r3
 801e162:	f7fe fcc1 	bl	801cae8 <parse_value>
 801e166:	4603      	mov	r3, r0
}
 801e168:	4618      	mov	r0, r3
 801e16a:	3708      	adds	r7, #8
 801e16c:	46bd      	mov	sp, r7
 801e16e:	bd80      	pop	{r7, pc}

0801e170 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 801e170:	b580      	push	{r7, lr}
 801e172:	b082      	sub	sp, #8
 801e174:	af00      	add	r7, sp, #0
 801e176:	6078      	str	r0, [r7, #4]
 801e178:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d002      	beq.n	801e186 <json_object_get_value+0x16>
 801e180:	683b      	ldr	r3, [r7, #0]
 801e182:	2b00      	cmp	r3, #0
 801e184:	d101      	bne.n	801e18a <json_object_get_value+0x1a>
        return NULL;
 801e186:	2300      	movs	r3, #0
 801e188:	e009      	b.n	801e19e <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 801e18a:	6838      	ldr	r0, [r7, #0]
 801e18c:	f7e2 f842 	bl	8000214 <strlen>
 801e190:	4603      	mov	r3, r0
 801e192:	461a      	mov	r2, r3
 801e194:	6839      	ldr	r1, [r7, #0]
 801e196:	6878      	ldr	r0, [r7, #4]
 801e198:	f7fe f864 	bl	801c264 <json_object_getn_value>
 801e19c:	4603      	mov	r3, r0
}
 801e19e:	4618      	mov	r0, r3
 801e1a0:	3708      	adds	r7, #8
 801e1a2:	46bd      	mov	sp, r7
 801e1a4:	bd80      	pop	{r7, pc}

0801e1a6 <json_object_dotget_value>:

int json_object_get_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_get_value(object, name));
}

JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 801e1a6:	b580      	push	{r7, lr}
 801e1a8:	b084      	sub	sp, #16
 801e1aa:	af00      	add	r7, sp, #0
 801e1ac:	6078      	str	r0, [r7, #4]
 801e1ae:	6039      	str	r1, [r7, #0]
    const char *dot_position = strchr(name, '.');
 801e1b0:	212e      	movs	r1, #46	; 0x2e
 801e1b2:	6838      	ldr	r0, [r7, #0]
 801e1b4:	f001 fe75 	bl	801fea2 <strchr>
 801e1b8:	60f8      	str	r0, [r7, #12]
    if (!dot_position) {
 801e1ba:	68fb      	ldr	r3, [r7, #12]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d105      	bne.n	801e1cc <json_object_dotget_value+0x26>
        return json_object_get_value(object, name);
 801e1c0:	6839      	ldr	r1, [r7, #0]
 801e1c2:	6878      	ldr	r0, [r7, #4]
 801e1c4:	f7ff ffd4 	bl	801e170 <json_object_get_value>
 801e1c8:	4603      	mov	r3, r0
 801e1ca:	e013      	b.n	801e1f4 <json_object_dotget_value+0x4e>
    }
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 801e1cc:	68fa      	ldr	r2, [r7, #12]
 801e1ce:	683b      	ldr	r3, [r7, #0]
 801e1d0:	1ad3      	subs	r3, r2, r3
 801e1d2:	461a      	mov	r2, r3
 801e1d4:	6839      	ldr	r1, [r7, #0]
 801e1d6:	6878      	ldr	r0, [r7, #4]
 801e1d8:	f7fe f844 	bl	801c264 <json_object_getn_value>
 801e1dc:	4603      	mov	r3, r0
 801e1de:	4618      	mov	r0, r3
 801e1e0:	f000 f901 	bl	801e3e6 <json_value_get_object>
 801e1e4:	6078      	str	r0, [r7, #4]
    return json_object_dotget_value(object, dot_position + 1);
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	3301      	adds	r3, #1
 801e1ea:	4619      	mov	r1, r3
 801e1ec:	6878      	ldr	r0, [r7, #4]
 801e1ee:	f7ff ffda 	bl	801e1a6 <json_object_dotget_value>
 801e1f2:	4603      	mov	r3, r0
}
 801e1f4:	4618      	mov	r0, r3
 801e1f6:	3710      	adds	r7, #16
 801e1f8:	46bd      	mov	sp, r7
 801e1fa:	bd80      	pop	{r7, pc}

0801e1fc <json_object_dotget_string>:

const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
 801e1fc:	b580      	push	{r7, lr}
 801e1fe:	b082      	sub	sp, #8
 801e200:	af00      	add	r7, sp, #0
 801e202:	6078      	str	r0, [r7, #4]
 801e204:	6039      	str	r1, [r7, #0]
    return json_value_get_string(json_object_dotget_value(object, name));
 801e206:	6839      	ldr	r1, [r7, #0]
 801e208:	6878      	ldr	r0, [r7, #4]
 801e20a:	f7ff ffcc 	bl	801e1a6 <json_object_dotget_value>
 801e20e:	4603      	mov	r3, r0
 801e210:	4618      	mov	r0, r3
 801e212:	f000 f90c 	bl	801e42e <json_value_get_string>
 801e216:	4603      	mov	r3, r0
}
 801e218:	4618      	mov	r0, r3
 801e21a:	3708      	adds	r7, #8
 801e21c:	46bd      	mov	sp, r7
 801e21e:	bd80      	pop	{r7, pc}

0801e220 <json_object_dotget_number>:

double json_object_dotget_number(const JSON_Object *object, const char *name) {
 801e220:	b580      	push	{r7, lr}
 801e222:	b082      	sub	sp, #8
 801e224:	af00      	add	r7, sp, #0
 801e226:	6078      	str	r0, [r7, #4]
 801e228:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_dotget_value(object, name));
 801e22a:	6839      	ldr	r1, [r7, #0]
 801e22c:	6878      	ldr	r0, [r7, #4]
 801e22e:	f7ff ffba 	bl	801e1a6 <json_object_dotget_value>
 801e232:	4603      	mov	r3, r0
 801e234:	4618      	mov	r0, r3
 801e236:	f000 f90c 	bl	801e452 <json_value_get_number>
 801e23a:	eeb0 7a40 	vmov.f32	s14, s0
 801e23e:	eef0 7a60 	vmov.f32	s15, s1
}
 801e242:	eeb0 0a47 	vmov.f32	s0, s14
 801e246:	eef0 0a67 	vmov.f32	s1, s15
 801e24a:	3708      	adds	r7, #8
 801e24c:	46bd      	mov	sp, r7
 801e24e:	bd80      	pop	{r7, pc}

0801e250 <json_object_dotget_array>:

JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
    return json_value_get_object(json_object_dotget_value(object, name));
}

JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 801e250:	b580      	push	{r7, lr}
 801e252:	b082      	sub	sp, #8
 801e254:	af00      	add	r7, sp, #0
 801e256:	6078      	str	r0, [r7, #4]
 801e258:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_dotget_value(object, name));
 801e25a:	6839      	ldr	r1, [r7, #0]
 801e25c:	6878      	ldr	r0, [r7, #4]
 801e25e:	f7ff ffa2 	bl	801e1a6 <json_object_dotget_value>
 801e262:	4603      	mov	r3, r0
 801e264:	4618      	mov	r0, r3
 801e266:	f000 f8d0 	bl	801e40a <json_value_get_array>
 801e26a:	4603      	mov	r3, r0
}
 801e26c:	4618      	mov	r0, r3
 801e26e:	3708      	adds	r7, #8
 801e270:	46bd      	mov	sp, r7
 801e272:	bd80      	pop	{r7, pc}

0801e274 <json_object_dotget_boolean>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
 801e274:	b580      	push	{r7, lr}
 801e276:	b082      	sub	sp, #8
 801e278:	af00      	add	r7, sp, #0
 801e27a:	6078      	str	r0, [r7, #4]
 801e27c:	6039      	str	r1, [r7, #0]
    return json_value_get_boolean(json_object_dotget_value(object, name));
 801e27e:	6839      	ldr	r1, [r7, #0]
 801e280:	6878      	ldr	r0, [r7, #4]
 801e282:	f7ff ff90 	bl	801e1a6 <json_object_dotget_value>
 801e286:	4603      	mov	r3, r0
 801e288:	4618      	mov	r0, r3
 801e28a:	f000 f8fd 	bl	801e488 <json_value_get_boolean>
 801e28e:	4603      	mov	r3, r0
}
 801e290:	4618      	mov	r0, r3
 801e292:	3708      	adds	r7, #8
 801e294:	46bd      	mov	sp, r7
 801e296:	bd80      	pop	{r7, pc}

0801e298 <json_object_get_count>:

size_t json_object_get_count(const JSON_Object *object) {
 801e298:	b480      	push	{r7}
 801e29a:	b083      	sub	sp, #12
 801e29c:	af00      	add	r7, sp, #0
 801e29e:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d002      	beq.n	801e2ac <json_object_get_count+0x14>
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	68db      	ldr	r3, [r3, #12]
 801e2aa:	e000      	b.n	801e2ae <json_object_get_count+0x16>
 801e2ac:	2300      	movs	r3, #0
}
 801e2ae:	4618      	mov	r0, r3
 801e2b0:	370c      	adds	r7, #12
 801e2b2:	46bd      	mov	sp, r7
 801e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2b8:	4770      	bx	lr

0801e2ba <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 801e2ba:	b580      	push	{r7, lr}
 801e2bc:	b082      	sub	sp, #8
 801e2be:	af00      	add	r7, sp, #0
 801e2c0:	6078      	str	r0, [r7, #4]
 801e2c2:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d006      	beq.n	801e2d8 <json_object_get_name+0x1e>
 801e2ca:	6878      	ldr	r0, [r7, #4]
 801e2cc:	f7ff ffe4 	bl	801e298 <json_object_get_count>
 801e2d0:	4602      	mov	r2, r0
 801e2d2:	683b      	ldr	r3, [r7, #0]
 801e2d4:	4293      	cmp	r3, r2
 801e2d6:	d301      	bcc.n	801e2dc <json_object_get_name+0x22>
        return NULL;
 801e2d8:	2300      	movs	r3, #0
 801e2da:	e005      	b.n	801e2e8 <json_object_get_name+0x2e>
    }
    return object->names[index];
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	685a      	ldr	r2, [r3, #4]
 801e2e0:	683b      	ldr	r3, [r7, #0]
 801e2e2:	009b      	lsls	r3, r3, #2
 801e2e4:	4413      	add	r3, r2
 801e2e6:	681b      	ldr	r3, [r3, #0]
}
 801e2e8:	4618      	mov	r0, r3
 801e2ea:	3708      	adds	r7, #8
 801e2ec:	46bd      	mov	sp, r7
 801e2ee:	bd80      	pop	{r7, pc}

0801e2f0 <json_object_get_wrapping_value>:
        return NULL;
    }
    return object->values[index];
}

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 801e2f0:	b480      	push	{r7}
 801e2f2:	b083      	sub	sp, #12
 801e2f4:	af00      	add	r7, sp, #0
 801e2f6:	6078      	str	r0, [r7, #4]
    return object->wrapping_value;
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	681b      	ldr	r3, [r3, #0]
}
 801e2fc:	4618      	mov	r0, r3
 801e2fe:	370c      	adds	r7, #12
 801e300:	46bd      	mov	sp, r7
 801e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e306:	4770      	bx	lr

0801e308 <json_object_dothas_value>:
int json_object_has_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {
    JSON_Value *val = json_object_get_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

int json_object_dothas_value (const JSON_Object *object, const char *name) {
 801e308:	b580      	push	{r7, lr}
 801e30a:	b082      	sub	sp, #8
 801e30c:	af00      	add	r7, sp, #0
 801e30e:	6078      	str	r0, [r7, #4]
 801e310:	6039      	str	r1, [r7, #0]
    return json_object_dotget_value(object, name) != NULL;
 801e312:	6839      	ldr	r1, [r7, #0]
 801e314:	6878      	ldr	r0, [r7, #4]
 801e316:	f7ff ff46 	bl	801e1a6 <json_object_dotget_value>
 801e31a:	4603      	mov	r3, r0
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	bf14      	ite	ne
 801e320:	2301      	movne	r3, #1
 801e322:	2300      	moveq	r3, #0
 801e324:	b2db      	uxtb	r3, r3
}
 801e326:	4618      	mov	r0, r3
 801e328:	3708      	adds	r7, #8
 801e32a:	46bd      	mov	sp, r7
 801e32c:	bd80      	pop	{r7, pc}

0801e32e <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 801e32e:	b580      	push	{r7, lr}
 801e330:	b082      	sub	sp, #8
 801e332:	af00      	add	r7, sp, #0
 801e334:	6078      	str	r0, [r7, #4]
 801e336:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	d006      	beq.n	801e34c <json_array_get_value+0x1e>
 801e33e:	6878      	ldr	r0, [r7, #4]
 801e340:	f000 f822 	bl	801e388 <json_array_get_count>
 801e344:	4602      	mov	r2, r0
 801e346:	683b      	ldr	r3, [r7, #0]
 801e348:	4293      	cmp	r3, r2
 801e34a:	d301      	bcc.n	801e350 <json_array_get_value+0x22>
        return NULL;
 801e34c:	2300      	movs	r3, #0
 801e34e:	e005      	b.n	801e35c <json_array_get_value+0x2e>
    }
    return array->items[index];
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	685a      	ldr	r2, [r3, #4]
 801e354:	683b      	ldr	r3, [r7, #0]
 801e356:	009b      	lsls	r3, r3, #2
 801e358:	4413      	add	r3, r2
 801e35a:	681b      	ldr	r3, [r3, #0]
}
 801e35c:	4618      	mov	r0, r3
 801e35e:	3708      	adds	r7, #8
 801e360:	46bd      	mov	sp, r7
 801e362:	bd80      	pop	{r7, pc}

0801e364 <json_array_get_object>:

double json_array_get_number(const JSON_Array *array, size_t index) {
    return json_value_get_number(json_array_get_value(array, index));
}

JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {
 801e364:	b580      	push	{r7, lr}
 801e366:	b082      	sub	sp, #8
 801e368:	af00      	add	r7, sp, #0
 801e36a:	6078      	str	r0, [r7, #4]
 801e36c:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_array_get_value(array, index));
 801e36e:	6839      	ldr	r1, [r7, #0]
 801e370:	6878      	ldr	r0, [r7, #4]
 801e372:	f7ff ffdc 	bl	801e32e <json_array_get_value>
 801e376:	4603      	mov	r3, r0
 801e378:	4618      	mov	r0, r3
 801e37a:	f000 f834 	bl	801e3e6 <json_value_get_object>
 801e37e:	4603      	mov	r3, r0
}
 801e380:	4618      	mov	r0, r3
 801e382:	3708      	adds	r7, #8
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}

0801e388 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 801e388:	b480      	push	{r7}
 801e38a:	b083      	sub	sp, #12
 801e38c:	af00      	add	r7, sp, #0
 801e38e:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	2b00      	cmp	r3, #0
 801e394:	d002      	beq.n	801e39c <json_array_get_count+0x14>
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	689b      	ldr	r3, [r3, #8]
 801e39a:	e000      	b.n	801e39e <json_array_get_count+0x16>
 801e39c:	2300      	movs	r3, #0
}
 801e39e:	4618      	mov	r0, r3
 801e3a0:	370c      	adds	r7, #12
 801e3a2:	46bd      	mov	sp, r7
 801e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3a8:	4770      	bx	lr

0801e3aa <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 801e3aa:	b480      	push	{r7}
 801e3ac:	b083      	sub	sp, #12
 801e3ae:	af00      	add	r7, sp, #0
 801e3b0:	6078      	str	r0, [r7, #4]
    return array->wrapping_value;
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	681b      	ldr	r3, [r3, #0]
}
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	370c      	adds	r7, #12
 801e3ba:	46bd      	mov	sp, r7
 801e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3c0:	4770      	bx	lr

0801e3c2 <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 801e3c2:	b480      	push	{r7}
 801e3c4:	b083      	sub	sp, #12
 801e3c6:	af00      	add	r7, sp, #0
 801e3c8:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 801e3ca:	687b      	ldr	r3, [r7, #4]
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d002      	beq.n	801e3d6 <json_value_get_type+0x14>
 801e3d0:	687b      	ldr	r3, [r7, #4]
 801e3d2:	685b      	ldr	r3, [r3, #4]
 801e3d4:	e001      	b.n	801e3da <json_value_get_type+0x18>
 801e3d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e3da:	4618      	mov	r0, r3
 801e3dc:	370c      	adds	r7, #12
 801e3de:	46bd      	mov	sp, r7
 801e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3e4:	4770      	bx	lr

0801e3e6 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 801e3e6:	b580      	push	{r7, lr}
 801e3e8:	b082      	sub	sp, #8
 801e3ea:	af00      	add	r7, sp, #0
 801e3ec:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801e3ee:	6878      	ldr	r0, [r7, #4]
 801e3f0:	f7ff ffe7 	bl	801e3c2 <json_value_get_type>
 801e3f4:	4603      	mov	r3, r0
 801e3f6:	2b04      	cmp	r3, #4
 801e3f8:	d102      	bne.n	801e400 <json_value_get_object+0x1a>
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	689b      	ldr	r3, [r3, #8]
 801e3fe:	e000      	b.n	801e402 <json_value_get_object+0x1c>
 801e400:	2300      	movs	r3, #0
}
 801e402:	4618      	mov	r0, r3
 801e404:	3708      	adds	r7, #8
 801e406:	46bd      	mov	sp, r7
 801e408:	bd80      	pop	{r7, pc}

0801e40a <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 801e40a:	b580      	push	{r7, lr}
 801e40c:	b082      	sub	sp, #8
 801e40e:	af00      	add	r7, sp, #0
 801e410:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 801e412:	6878      	ldr	r0, [r7, #4]
 801e414:	f7ff ffd5 	bl	801e3c2 <json_value_get_type>
 801e418:	4603      	mov	r3, r0
 801e41a:	2b05      	cmp	r3, #5
 801e41c:	d102      	bne.n	801e424 <json_value_get_array+0x1a>
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	689b      	ldr	r3, [r3, #8]
 801e422:	e000      	b.n	801e426 <json_value_get_array+0x1c>
 801e424:	2300      	movs	r3, #0
}
 801e426:	4618      	mov	r0, r3
 801e428:	3708      	adds	r7, #8
 801e42a:	46bd      	mov	sp, r7
 801e42c:	bd80      	pop	{r7, pc}

0801e42e <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 801e42e:	b580      	push	{r7, lr}
 801e430:	b082      	sub	sp, #8
 801e432:	af00      	add	r7, sp, #0
 801e434:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
 801e436:	6878      	ldr	r0, [r7, #4]
 801e438:	f7ff ffc3 	bl	801e3c2 <json_value_get_type>
 801e43c:	4603      	mov	r3, r0
 801e43e:	2b02      	cmp	r3, #2
 801e440:	d102      	bne.n	801e448 <json_value_get_string+0x1a>
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	689b      	ldr	r3, [r3, #8]
 801e446:	e000      	b.n	801e44a <json_value_get_string+0x1c>
 801e448:	2300      	movs	r3, #0
}
 801e44a:	4618      	mov	r0, r3
 801e44c:	3708      	adds	r7, #8
 801e44e:	46bd      	mov	sp, r7
 801e450:	bd80      	pop	{r7, pc}

0801e452 <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 801e452:	b580      	push	{r7, lr}
 801e454:	b082      	sub	sp, #8
 801e456:	af00      	add	r7, sp, #0
 801e458:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 801e45a:	6878      	ldr	r0, [r7, #4]
 801e45c:	f7ff ffb1 	bl	801e3c2 <json_value_get_type>
 801e460:	4603      	mov	r3, r0
 801e462:	2b03      	cmp	r3, #3
 801e464:	d103      	bne.n	801e46e <json_value_get_number+0x1c>
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e46c:	e003      	b.n	801e476 <json_value_get_number+0x24>
 801e46e:	f04f 0200 	mov.w	r2, #0
 801e472:	f04f 0300 	mov.w	r3, #0
 801e476:	ec43 2b17 	vmov	d7, r2, r3
}
 801e47a:	eeb0 0a47 	vmov.f32	s0, s14
 801e47e:	eef0 0a67 	vmov.f32	s1, s15
 801e482:	3708      	adds	r7, #8
 801e484:	46bd      	mov	sp, r7
 801e486:	bd80      	pop	{r7, pc}

0801e488 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 801e488:	b580      	push	{r7, lr}
 801e48a:	b082      	sub	sp, #8
 801e48c:	af00      	add	r7, sp, #0
 801e48e:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 801e490:	6878      	ldr	r0, [r7, #4]
 801e492:	f7ff ff96 	bl	801e3c2 <json_value_get_type>
 801e496:	4603      	mov	r3, r0
 801e498:	2b06      	cmp	r3, #6
 801e49a:	d102      	bne.n	801e4a2 <json_value_get_boolean+0x1a>
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	689b      	ldr	r3, [r3, #8]
 801e4a0:	e001      	b.n	801e4a6 <json_value_get_boolean+0x1e>
 801e4a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	3708      	adds	r7, #8
 801e4aa:	46bd      	mov	sp, r7
 801e4ac:	bd80      	pop	{r7, pc}
	...

0801e4b0 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 801e4b0:	b580      	push	{r7, lr}
 801e4b2:	b082      	sub	sp, #8
 801e4b4:	af00      	add	r7, sp, #0
 801e4b6:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 801e4b8:	6878      	ldr	r0, [r7, #4]
 801e4ba:	f7ff ff82 	bl	801e3c2 <json_value_get_type>
 801e4be:	4603      	mov	r3, r0
 801e4c0:	2b05      	cmp	r3, #5
 801e4c2:	d012      	beq.n	801e4ea <json_value_free+0x3a>
 801e4c4:	2b05      	cmp	r3, #5
 801e4c6:	dc16      	bgt.n	801e4f6 <json_value_free+0x46>
 801e4c8:	2b02      	cmp	r3, #2
 801e4ca:	d007      	beq.n	801e4dc <json_value_free+0x2c>
 801e4cc:	2b04      	cmp	r3, #4
 801e4ce:	d112      	bne.n	801e4f6 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	689b      	ldr	r3, [r3, #8]
 801e4d4:	4618      	mov	r0, r3
 801e4d6:	f7fd ffb5 	bl	801c444 <json_object_free>
            break;
 801e4da:	e00d      	b.n	801e4f8 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string);
 801e4dc:	4b0a      	ldr	r3, [pc, #40]	; (801e508 <json_value_free+0x58>)
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	687a      	ldr	r2, [r7, #4]
 801e4e2:	6892      	ldr	r2, [r2, #8]
 801e4e4:	4610      	mov	r0, r2
 801e4e6:	4798      	blx	r3
            break;
 801e4e8:	e006      	b.n	801e4f8 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	689b      	ldr	r3, [r3, #8]
 801e4ee:	4618      	mov	r0, r3
 801e4f0:	f7fe f878 	bl	801c5e4 <json_array_free>
            break;
 801e4f4:	e000      	b.n	801e4f8 <json_value_free+0x48>
        default:
            break;
 801e4f6:	bf00      	nop
    }
    parson_free(value);
 801e4f8:	4b03      	ldr	r3, [pc, #12]	; (801e508 <json_value_free+0x58>)
 801e4fa:	681b      	ldr	r3, [r3, #0]
 801e4fc:	6878      	ldr	r0, [r7, #4]
 801e4fe:	4798      	blx	r3
}
 801e500:	bf00      	nop
 801e502:	3708      	adds	r7, #8
 801e504:	46bd      	mov	sp, r7
 801e506:	bd80      	pop	{r7, pc}
 801e508:	200002b4 	.word	0x200002b4

0801e50c <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 801e50c:	b580      	push	{r7, lr}
 801e50e:	b082      	sub	sp, #8
 801e510:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801e512:	4b12      	ldr	r3, [pc, #72]	; (801e55c <json_value_init_object+0x50>)
 801e514:	681b      	ldr	r3, [r3, #0]
 801e516:	2010      	movs	r0, #16
 801e518:	4798      	blx	r3
 801e51a:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d101      	bne.n	801e526 <json_value_init_object+0x1a>
        return NULL;
 801e522:	2300      	movs	r3, #0
 801e524:	e016      	b.n	801e554 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	2200      	movs	r2, #0
 801e52a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	2204      	movs	r2, #4
 801e530:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_init(new_value);
 801e532:	6878      	ldr	r0, [r7, #4]
 801e534:	f7fd fd76 	bl	801c024 <json_object_init>
 801e538:	4602      	mov	r2, r0
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	689b      	ldr	r3, [r3, #8]
 801e542:	2b00      	cmp	r3, #0
 801e544:	d105      	bne.n	801e552 <json_value_init_object+0x46>
        parson_free(new_value);
 801e546:	4b06      	ldr	r3, [pc, #24]	; (801e560 <json_value_init_object+0x54>)
 801e548:	681b      	ldr	r3, [r3, #0]
 801e54a:	6878      	ldr	r0, [r7, #4]
 801e54c:	4798      	blx	r3
        return NULL;
 801e54e:	2300      	movs	r3, #0
 801e550:	e000      	b.n	801e554 <json_value_init_object+0x48>
    }
    return new_value;
 801e552:	687b      	ldr	r3, [r7, #4]
}
 801e554:	4618      	mov	r0, r3
 801e556:	3708      	adds	r7, #8
 801e558:	46bd      	mov	sp, r7
 801e55a:	bd80      	pop	{r7, pc}
 801e55c:	200002b0 	.word	0x200002b0
 801e560:	200002b4 	.word	0x200002b4

0801e564 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 801e564:	b580      	push	{r7, lr}
 801e566:	b082      	sub	sp, #8
 801e568:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801e56a:	4b12      	ldr	r3, [pc, #72]	; (801e5b4 <json_value_init_array+0x50>)
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	2010      	movs	r0, #16
 801e570:	4798      	blx	r3
 801e572:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	2b00      	cmp	r3, #0
 801e578:	d101      	bne.n	801e57e <json_value_init_array+0x1a>
        return NULL;
 801e57a:	2300      	movs	r3, #0
 801e57c:	e016      	b.n	801e5ac <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	2200      	movs	r2, #0
 801e582:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	2205      	movs	r2, #5
 801e588:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_init(new_value);
 801e58a:	6878      	ldr	r0, [r7, #4]
 801e58c:	f7fd ff92 	bl	801c4b4 <json_array_init>
 801e590:	4602      	mov	r2, r0
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	689b      	ldr	r3, [r3, #8]
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	d105      	bne.n	801e5aa <json_value_init_array+0x46>
        parson_free(new_value);
 801e59e:	4b06      	ldr	r3, [pc, #24]	; (801e5b8 <json_value_init_array+0x54>)
 801e5a0:	681b      	ldr	r3, [r3, #0]
 801e5a2:	6878      	ldr	r0, [r7, #4]
 801e5a4:	4798      	blx	r3
        return NULL;
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	e000      	b.n	801e5ac <json_value_init_array+0x48>
    }
    return new_value;
 801e5aa:	687b      	ldr	r3, [r7, #4]
}
 801e5ac:	4618      	mov	r0, r3
 801e5ae:	3708      	adds	r7, #8
 801e5b0:	46bd      	mov	sp, r7
 801e5b2:	bd80      	pop	{r7, pc}
 801e5b4:	200002b0 	.word	0x200002b0
 801e5b8:	200002b4 	.word	0x200002b4

0801e5bc <json_value_init_string>:

JSON_Value * json_value_init_string(const char *string) {
 801e5bc:	b580      	push	{r7, lr}
 801e5be:	b086      	sub	sp, #24
 801e5c0:	af00      	add	r7, sp, #0
 801e5c2:	6078      	str	r0, [r7, #4]
    char *copy = NULL;
 801e5c4:	2300      	movs	r3, #0
 801e5c6:	617b      	str	r3, [r7, #20]
    JSON_Value *value;
    size_t string_len = 0;
 801e5c8:	2300      	movs	r3, #0
 801e5ca:	613b      	str	r3, [r7, #16]
    if (string == NULL) {
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d101      	bne.n	801e5d6 <json_value_init_string+0x1a>
        return NULL;
 801e5d2:	2300      	movs	r3, #0
 801e5d4:	e022      	b.n	801e61c <json_value_init_string+0x60>
    }
    string_len = strlen(string);
 801e5d6:	6878      	ldr	r0, [r7, #4]
 801e5d8:	f7e1 fe1c 	bl	8000214 <strlen>
 801e5dc:	6138      	str	r0, [r7, #16]
    if (!is_valid_utf8(string, string_len)) {
 801e5de:	6939      	ldr	r1, [r7, #16]
 801e5e0:	6878      	ldr	r0, [r7, #4]
 801e5e2:	f7fd fcba 	bl	801bf5a <is_valid_utf8>
 801e5e6:	4603      	mov	r3, r0
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d101      	bne.n	801e5f0 <json_value_init_string+0x34>
        return NULL;
 801e5ec:	2300      	movs	r3, #0
 801e5ee:	e015      	b.n	801e61c <json_value_init_string+0x60>
    }
    copy = parson_strndup(string, string_len);
 801e5f0:	6939      	ldr	r1, [r7, #16]
 801e5f2:	6878      	ldr	r0, [r7, #4]
 801e5f4:	f7fd fb12 	bl	801bc1c <parson_strndup>
 801e5f8:	6178      	str	r0, [r7, #20]
    if (copy == NULL) {
 801e5fa:	697b      	ldr	r3, [r7, #20]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d101      	bne.n	801e604 <json_value_init_string+0x48>
        return NULL;
 801e600:	2300      	movs	r3, #0
 801e602:	e00b      	b.n	801e61c <json_value_init_string+0x60>
    }
    value = json_value_init_string_no_copy(copy);
 801e604:	6978      	ldr	r0, [r7, #20]
 801e606:	f7fe f815 	bl	801c634 <json_value_init_string_no_copy>
 801e60a:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801e60c:	68fb      	ldr	r3, [r7, #12]
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d103      	bne.n	801e61a <json_value_init_string+0x5e>
        parson_free(copy);
 801e612:	4b04      	ldr	r3, [pc, #16]	; (801e624 <json_value_init_string+0x68>)
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	6978      	ldr	r0, [r7, #20]
 801e618:	4798      	blx	r3
    }
    return value;
 801e61a:	68fb      	ldr	r3, [r7, #12]
}
 801e61c:	4618      	mov	r0, r3
 801e61e:	3718      	adds	r7, #24
 801e620:	46bd      	mov	sp, r7
 801e622:	bd80      	pop	{r7, pc}
 801e624:	200002b4 	.word	0x200002b4

0801e628 <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 801e628:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e62a:	b085      	sub	sp, #20
 801e62c:	af00      	add	r7, sp, #0
 801e62e:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 801e632:	2300      	movs	r3, #0
 801e634:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 801e636:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e63a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e63e:	f7e2 fa9d 	bl	8000b7c <__aeabi_dcmpun>
 801e642:	4603      	mov	r3, r0
 801e644:	2b00      	cmp	r3, #0
 801e646:	d121      	bne.n	801e68c <json_value_init_number+0x64>
 801e648:	683c      	ldr	r4, [r7, #0]
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801e650:	2301      	movs	r3, #1
 801e652:	461e      	mov	r6, r3
 801e654:	f04f 32ff 	mov.w	r2, #4294967295
 801e658:	4b1a      	ldr	r3, [pc, #104]	; (801e6c4 <json_value_init_number+0x9c>)
 801e65a:	4620      	mov	r0, r4
 801e65c:	4629      	mov	r1, r5
 801e65e:	f7e2 fa8d 	bl	8000b7c <__aeabi_dcmpun>
 801e662:	4603      	mov	r3, r0
 801e664:	2b00      	cmp	r3, #0
 801e666:	d10b      	bne.n	801e680 <json_value_init_number+0x58>
 801e668:	f04f 32ff 	mov.w	r2, #4294967295
 801e66c:	4b15      	ldr	r3, [pc, #84]	; (801e6c4 <json_value_init_number+0x9c>)
 801e66e:	4620      	mov	r0, r4
 801e670:	4629      	mov	r1, r5
 801e672:	f7e2 fa65 	bl	8000b40 <__aeabi_dcmple>
 801e676:	4603      	mov	r3, r0
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d101      	bne.n	801e680 <json_value_init_number+0x58>
 801e67c:	2300      	movs	r3, #0
 801e67e:	461e      	mov	r6, r3
 801e680:	b2f3      	uxtb	r3, r6
 801e682:	f083 0301 	eor.w	r3, r3, #1
 801e686:	b2db      	uxtb	r3, r3
 801e688:	2b00      	cmp	r3, #0
 801e68a:	d001      	beq.n	801e690 <json_value_init_number+0x68>
        return NULL;
 801e68c:	2300      	movs	r3, #0
 801e68e:	e015      	b.n	801e6bc <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801e690:	4b0d      	ldr	r3, [pc, #52]	; (801e6c8 <json_value_init_number+0xa0>)
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	2010      	movs	r0, #16
 801e696:	4798      	blx	r3
 801e698:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 801e69a:	68fb      	ldr	r3, [r7, #12]
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d101      	bne.n	801e6a4 <json_value_init_number+0x7c>
        return NULL;
 801e6a0:	2300      	movs	r3, #0
 801e6a2:	e00b      	b.n	801e6bc <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 801e6a4:	68fb      	ldr	r3, [r7, #12]
 801e6a6:	2200      	movs	r2, #0
 801e6a8:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 801e6aa:	68fb      	ldr	r3, [r7, #12]
 801e6ac:	2203      	movs	r2, #3
 801e6ae:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 801e6b0:	68f9      	ldr	r1, [r7, #12]
 801e6b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e6b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 801e6ba:	68fb      	ldr	r3, [r7, #12]
}
 801e6bc:	4618      	mov	r0, r3
 801e6be:	3714      	adds	r7, #20
 801e6c0:	46bd      	mov	sp, r7
 801e6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6c4:	7fefffff 	.word	0x7fefffff
 801e6c8:	200002b0 	.word	0x200002b0

0801e6cc <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 801e6cc:	b580      	push	{r7, lr}
 801e6ce:	b084      	sub	sp, #16
 801e6d0:	af00      	add	r7, sp, #0
 801e6d2:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801e6d4:	4b0e      	ldr	r3, [pc, #56]	; (801e710 <json_value_init_boolean+0x44>)
 801e6d6:	681b      	ldr	r3, [r3, #0]
 801e6d8:	2010      	movs	r0, #16
 801e6da:	4798      	blx	r3
 801e6dc:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	d101      	bne.n	801e6e8 <json_value_init_boolean+0x1c>
        return NULL;
 801e6e4:	2300      	movs	r3, #0
 801e6e6:	e00f      	b.n	801e708 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	2200      	movs	r2, #0
 801e6ec:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	2206      	movs	r2, #6
 801e6f2:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	bf14      	ite	ne
 801e6fa:	2301      	movne	r3, #1
 801e6fc:	2300      	moveq	r3, #0
 801e6fe:	b2db      	uxtb	r3, r3
 801e700:	461a      	mov	r2, r3
 801e702:	68fb      	ldr	r3, [r7, #12]
 801e704:	609a      	str	r2, [r3, #8]
    return new_value;
 801e706:	68fb      	ldr	r3, [r7, #12]
}
 801e708:	4618      	mov	r0, r3
 801e70a:	3710      	adds	r7, #16
 801e70c:	46bd      	mov	sp, r7
 801e70e:	bd80      	pop	{r7, pc}
 801e710:	200002b0 	.word	0x200002b0

0801e714 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 801e714:	b580      	push	{r7, lr}
 801e716:	b082      	sub	sp, #8
 801e718:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801e71a:	4b0a      	ldr	r3, [pc, #40]	; (801e744 <json_value_init_null+0x30>)
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	2010      	movs	r0, #16
 801e720:	4798      	blx	r3
 801e722:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	2b00      	cmp	r3, #0
 801e728:	d101      	bne.n	801e72e <json_value_init_null+0x1a>
        return NULL;
 801e72a:	2300      	movs	r3, #0
 801e72c:	e006      	b.n	801e73c <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	2200      	movs	r2, #0
 801e732:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	2201      	movs	r2, #1
 801e738:	605a      	str	r2, [r3, #4]
    return new_value;
 801e73a:	687b      	ldr	r3, [r7, #4]
}
 801e73c:	4618      	mov	r0, r3
 801e73e:	3708      	adds	r7, #8
 801e740:	46bd      	mov	sp, r7
 801e742:	bd80      	pop	{r7, pc}
 801e744:	200002b0 	.word	0x200002b0

0801e748 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 801e748:	b580      	push	{r7, lr}
 801e74a:	b096      	sub	sp, #88	; 0x58
 801e74c:	af02      	add	r7, sp, #8
 801e74e:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 801e750:	f107 030c 	add.w	r3, r7, #12
 801e754:	9300      	str	r3, [sp, #0]
 801e756:	2300      	movs	r3, #0
 801e758:	2200      	movs	r2, #0
 801e75a:	2100      	movs	r1, #0
 801e75c:	6878      	ldr	r0, [r7, #4]
 801e75e:	f7fe fced 	bl	801d13c <json_serialize_to_buffer_r>
 801e762:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801e764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e766:	2b00      	cmp	r3, #0
 801e768:	db02      	blt.n	801e770 <json_serialization_size+0x28>
 801e76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e76c:	3301      	adds	r3, #1
 801e76e:	e000      	b.n	801e772 <json_serialization_size+0x2a>
 801e770:	2300      	movs	r3, #0
}
 801e772:	4618      	mov	r0, r3
 801e774:	3750      	adds	r7, #80	; 0x50
 801e776:	46bd      	mov	sp, r7
 801e778:	bd80      	pop	{r7, pc}

0801e77a <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801e77a:	b580      	push	{r7, lr}
 801e77c:	b088      	sub	sp, #32
 801e77e:	af02      	add	r7, sp, #8
 801e780:	60f8      	str	r0, [r7, #12]
 801e782:	60b9      	str	r1, [r7, #8]
 801e784:	607a      	str	r2, [r7, #4]
    int written = -1;
 801e786:	f04f 33ff 	mov.w	r3, #4294967295
 801e78a:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 801e78c:	68f8      	ldr	r0, [r7, #12]
 801e78e:	f7ff ffdb 	bl	801e748 <json_serialization_size>
 801e792:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801e794:	693b      	ldr	r3, [r7, #16]
 801e796:	2b00      	cmp	r3, #0
 801e798:	d003      	beq.n	801e7a2 <json_serialize_to_buffer+0x28>
 801e79a:	687a      	ldr	r2, [r7, #4]
 801e79c:	693b      	ldr	r3, [r7, #16]
 801e79e:	429a      	cmp	r2, r3
 801e7a0:	d202      	bcs.n	801e7a8 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 801e7a2:	f04f 33ff 	mov.w	r3, #4294967295
 801e7a6:	e00f      	b.n	801e7c8 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 0, NULL);
 801e7a8:	2300      	movs	r3, #0
 801e7aa:	9300      	str	r3, [sp, #0]
 801e7ac:	2300      	movs	r3, #0
 801e7ae:	2200      	movs	r2, #0
 801e7b0:	68b9      	ldr	r1, [r7, #8]
 801e7b2:	68f8      	ldr	r0, [r7, #12]
 801e7b4:	f7fe fcc2 	bl	801d13c <json_serialize_to_buffer_r>
 801e7b8:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801e7ba:	697b      	ldr	r3, [r7, #20]
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	da02      	bge.n	801e7c6 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 801e7c0:	f04f 33ff 	mov.w	r3, #4294967295
 801e7c4:	e000      	b.n	801e7c8 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 801e7c6:	2300      	movs	r3, #0
}
 801e7c8:	4618      	mov	r0, r3
 801e7ca:	3718      	adds	r7, #24
 801e7cc:	46bd      	mov	sp, r7
 801e7ce:	bd80      	pop	{r7, pc}

0801e7d0 <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 801e7d0:	b580      	push	{r7, lr}
 801e7d2:	b086      	sub	sp, #24
 801e7d4:	af00      	add	r7, sp, #0
 801e7d6:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801e7d8:	f04f 33ff 	mov.w	r3, #4294967295
 801e7dc:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 801e7de:	6878      	ldr	r0, [r7, #4]
 801e7e0:	f7ff ffb2 	bl	801e748 <json_serialization_size>
 801e7e4:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801e7e6:	2300      	movs	r3, #0
 801e7e8:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801e7ea:	693b      	ldr	r3, [r7, #16]
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	d101      	bne.n	801e7f4 <json_serialize_to_string+0x24>
        return NULL;
 801e7f0:	2300      	movs	r3, #0
 801e7f2:	e019      	b.n	801e828 <json_serialize_to_string+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801e7f4:	4b0e      	ldr	r3, [pc, #56]	; (801e830 <json_serialize_to_string+0x60>)
 801e7f6:	681b      	ldr	r3, [r3, #0]
 801e7f8:	6938      	ldr	r0, [r7, #16]
 801e7fa:	4798      	blx	r3
 801e7fc:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801e7fe:	68fb      	ldr	r3, [r7, #12]
 801e800:	2b00      	cmp	r3, #0
 801e802:	d101      	bne.n	801e808 <json_serialize_to_string+0x38>
        return NULL;
 801e804:	2300      	movs	r3, #0
 801e806:	e00f      	b.n	801e828 <json_serialize_to_string+0x58>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 801e808:	693a      	ldr	r2, [r7, #16]
 801e80a:	68f9      	ldr	r1, [r7, #12]
 801e80c:	6878      	ldr	r0, [r7, #4]
 801e80e:	f7ff ffb4 	bl	801e77a <json_serialize_to_buffer>
 801e812:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801e814:	697b      	ldr	r3, [r7, #20]
 801e816:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e81a:	d104      	bne.n	801e826 <json_serialize_to_string+0x56>
        json_free_serialized_string(buf);
 801e81c:	68f8      	ldr	r0, [r7, #12]
 801e81e:	f000 f87f 	bl	801e920 <json_free_serialized_string>
        return NULL;
 801e822:	2300      	movs	r3, #0
 801e824:	e000      	b.n	801e828 <json_serialize_to_string+0x58>
    }
    return buf;
 801e826:	68fb      	ldr	r3, [r7, #12]
}
 801e828:	4618      	mov	r0, r3
 801e82a:	3718      	adds	r7, #24
 801e82c:	46bd      	mov	sp, r7
 801e82e:	bd80      	pop	{r7, pc}
 801e830:	200002b0 	.word	0x200002b0

0801e834 <json_serialization_size_pretty>:

size_t json_serialization_size_pretty(const JSON_Value *value) {
 801e834:	b580      	push	{r7, lr}
 801e836:	b096      	sub	sp, #88	; 0x58
 801e838:	af02      	add	r7, sp, #8
 801e83a:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 801e83c:	f107 030c 	add.w	r3, r7, #12
 801e840:	9300      	str	r3, [sp, #0]
 801e842:	2301      	movs	r3, #1
 801e844:	2200      	movs	r2, #0
 801e846:	2100      	movs	r1, #0
 801e848:	6878      	ldr	r0, [r7, #4]
 801e84a:	f7fe fc77 	bl	801d13c <json_serialize_to_buffer_r>
 801e84e:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801e850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e852:	2b00      	cmp	r3, #0
 801e854:	db02      	blt.n	801e85c <json_serialization_size_pretty+0x28>
 801e856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e858:	3301      	adds	r3, #1
 801e85a:	e000      	b.n	801e85e <json_serialization_size_pretty+0x2a>
 801e85c:	2300      	movs	r3, #0
}
 801e85e:	4618      	mov	r0, r3
 801e860:	3750      	adds	r7, #80	; 0x50
 801e862:	46bd      	mov	sp, r7
 801e864:	bd80      	pop	{r7, pc}

0801e866 <json_serialize_to_buffer_pretty>:

JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801e866:	b580      	push	{r7, lr}
 801e868:	b088      	sub	sp, #32
 801e86a:	af02      	add	r7, sp, #8
 801e86c:	60f8      	str	r0, [r7, #12]
 801e86e:	60b9      	str	r1, [r7, #8]
 801e870:	607a      	str	r2, [r7, #4]
    int written = -1;
 801e872:	f04f 33ff 	mov.w	r3, #4294967295
 801e876:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size_pretty(value);
 801e878:	68f8      	ldr	r0, [r7, #12]
 801e87a:	f7ff ffdb 	bl	801e834 <json_serialization_size_pretty>
 801e87e:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801e880:	693b      	ldr	r3, [r7, #16]
 801e882:	2b00      	cmp	r3, #0
 801e884:	d003      	beq.n	801e88e <json_serialize_to_buffer_pretty+0x28>
 801e886:	687a      	ldr	r2, [r7, #4]
 801e888:	693b      	ldr	r3, [r7, #16]
 801e88a:	429a      	cmp	r2, r3
 801e88c:	d202      	bcs.n	801e894 <json_serialize_to_buffer_pretty+0x2e>
        return JSONFailure;
 801e88e:	f04f 33ff 	mov.w	r3, #4294967295
 801e892:	e00f      	b.n	801e8b4 <json_serialize_to_buffer_pretty+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 1, NULL);
 801e894:	2300      	movs	r3, #0
 801e896:	9300      	str	r3, [sp, #0]
 801e898:	2301      	movs	r3, #1
 801e89a:	2200      	movs	r2, #0
 801e89c:	68b9      	ldr	r1, [r7, #8]
 801e89e:	68f8      	ldr	r0, [r7, #12]
 801e8a0:	f7fe fc4c 	bl	801d13c <json_serialize_to_buffer_r>
 801e8a4:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801e8a6:	697b      	ldr	r3, [r7, #20]
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	da02      	bge.n	801e8b2 <json_serialize_to_buffer_pretty+0x4c>
        return JSONFailure;
 801e8ac:	f04f 33ff 	mov.w	r3, #4294967295
 801e8b0:	e000      	b.n	801e8b4 <json_serialize_to_buffer_pretty+0x4e>
    }
    return JSONSuccess;
 801e8b2:	2300      	movs	r3, #0
}
 801e8b4:	4618      	mov	r0, r3
 801e8b6:	3718      	adds	r7, #24
 801e8b8:	46bd      	mov	sp, r7
 801e8ba:	bd80      	pop	{r7, pc}

0801e8bc <json_serialize_to_string_pretty>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string_pretty(const JSON_Value *value) {
 801e8bc:	b580      	push	{r7, lr}
 801e8be:	b086      	sub	sp, #24
 801e8c0:	af00      	add	r7, sp, #0
 801e8c2:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801e8c4:	f04f 33ff 	mov.w	r3, #4294967295
 801e8c8:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size_pretty(value);
 801e8ca:	6878      	ldr	r0, [r7, #4]
 801e8cc:	f7ff ffb2 	bl	801e834 <json_serialization_size_pretty>
 801e8d0:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801e8d2:	2300      	movs	r3, #0
 801e8d4:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801e8d6:	693b      	ldr	r3, [r7, #16]
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	d101      	bne.n	801e8e0 <json_serialize_to_string_pretty+0x24>
        return NULL;
 801e8dc:	2300      	movs	r3, #0
 801e8de:	e019      	b.n	801e914 <json_serialize_to_string_pretty+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801e8e0:	4b0e      	ldr	r3, [pc, #56]	; (801e91c <json_serialize_to_string_pretty+0x60>)
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	6938      	ldr	r0, [r7, #16]
 801e8e6:	4798      	blx	r3
 801e8e8:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801e8ea:	68fb      	ldr	r3, [r7, #12]
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	d101      	bne.n	801e8f4 <json_serialize_to_string_pretty+0x38>
        return NULL;
 801e8f0:	2300      	movs	r3, #0
 801e8f2:	e00f      	b.n	801e914 <json_serialize_to_string_pretty+0x58>
    }
    serialization_result = json_serialize_to_buffer_pretty(value, buf, buf_size_bytes);
 801e8f4:	693a      	ldr	r2, [r7, #16]
 801e8f6:	68f9      	ldr	r1, [r7, #12]
 801e8f8:	6878      	ldr	r0, [r7, #4]
 801e8fa:	f7ff ffb4 	bl	801e866 <json_serialize_to_buffer_pretty>
 801e8fe:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801e900:	697b      	ldr	r3, [r7, #20]
 801e902:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e906:	d104      	bne.n	801e912 <json_serialize_to_string_pretty+0x56>
        json_free_serialized_string(buf);
 801e908:	68f8      	ldr	r0, [r7, #12]
 801e90a:	f000 f809 	bl	801e920 <json_free_serialized_string>
        return NULL;
 801e90e:	2300      	movs	r3, #0
 801e910:	e000      	b.n	801e914 <json_serialize_to_string_pretty+0x58>
    }
    return buf;
 801e912:	68fb      	ldr	r3, [r7, #12]
}
 801e914:	4618      	mov	r0, r3
 801e916:	3718      	adds	r7, #24
 801e918:	46bd      	mov	sp, r7
 801e91a:	bd80      	pop	{r7, pc}
 801e91c:	200002b0 	.word	0x200002b0

0801e920 <json_free_serialized_string>:

void json_free_serialized_string(char *string) {
 801e920:	b580      	push	{r7, lr}
 801e922:	b082      	sub	sp, #8
 801e924:	af00      	add	r7, sp, #0
 801e926:	6078      	str	r0, [r7, #4]
    parson_free(string);
 801e928:	4b03      	ldr	r3, [pc, #12]	; (801e938 <json_free_serialized_string+0x18>)
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	6878      	ldr	r0, [r7, #4]
 801e92e:	4798      	blx	r3
}
 801e930:	bf00      	nop
 801e932:	3708      	adds	r7, #8
 801e934:	46bd      	mov	sp, r7
 801e936:	bd80      	pop	{r7, pc}
 801e938:	200002b4 	.word	0x200002b4

0801e93c <json_array_append_value>:
    }
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
 801e93c:	b580      	push	{r7, lr}
 801e93e:	b082      	sub	sp, #8
 801e940:	af00      	add	r7, sp, #0
 801e942:	6078      	str	r0, [r7, #4]
 801e944:	6039      	str	r1, [r7, #0]
    if (array == NULL || value == NULL || value->parent != NULL) {
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	2b00      	cmp	r3, #0
 801e94a:	d006      	beq.n	801e95a <json_array_append_value+0x1e>
 801e94c:	683b      	ldr	r3, [r7, #0]
 801e94e:	2b00      	cmp	r3, #0
 801e950:	d003      	beq.n	801e95a <json_array_append_value+0x1e>
 801e952:	683b      	ldr	r3, [r7, #0]
 801e954:	681b      	ldr	r3, [r3, #0]
 801e956:	2b00      	cmp	r3, #0
 801e958:	d002      	beq.n	801e960 <json_array_append_value+0x24>
        return JSONFailure;
 801e95a:	f04f 33ff 	mov.w	r3, #4294967295
 801e95e:	e004      	b.n	801e96a <json_array_append_value+0x2e>
    }
    return json_array_add(array, value);
 801e960:	6839      	ldr	r1, [r7, #0]
 801e962:	6878      	ldr	r0, [r7, #4]
 801e964:	f7fd fdc8 	bl	801c4f8 <json_array_add>
 801e968:	4603      	mov	r3, r0
}
 801e96a:	4618      	mov	r0, r3
 801e96c:	3708      	adds	r7, #8
 801e96e:	46bd      	mov	sp, r7
 801e970:	bd80      	pop	{r7, pc}

0801e972 <json_array_append_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_array_append_number(JSON_Array *array, double number) {
 801e972:	b580      	push	{r7, lr}
 801e974:	b086      	sub	sp, #24
 801e976:	af00      	add	r7, sp, #0
 801e978:	60f8      	str	r0, [r7, #12]
 801e97a:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801e97e:	ed97 0b00 	vldr	d0, [r7]
 801e982:	f7ff fe51 	bl	801e628 <json_value_init_number>
 801e986:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801e988:	697b      	ldr	r3, [r7, #20]
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d102      	bne.n	801e994 <json_array_append_number+0x22>
        return JSONFailure;
 801e98e:	f04f 33ff 	mov.w	r3, #4294967295
 801e992:	e00e      	b.n	801e9b2 <json_array_append_number+0x40>
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 801e994:	6979      	ldr	r1, [r7, #20]
 801e996:	68f8      	ldr	r0, [r7, #12]
 801e998:	f7ff ffd0 	bl	801e93c <json_array_append_value>
 801e99c:	4603      	mov	r3, r0
 801e99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e9a2:	d105      	bne.n	801e9b0 <json_array_append_number+0x3e>
        json_value_free(value);
 801e9a4:	6978      	ldr	r0, [r7, #20]
 801e9a6:	f7ff fd83 	bl	801e4b0 <json_value_free>
        return JSONFailure;
 801e9aa:	f04f 33ff 	mov.w	r3, #4294967295
 801e9ae:	e000      	b.n	801e9b2 <json_array_append_number+0x40>
    }
    return JSONSuccess;
 801e9b0:	2300      	movs	r3, #0
}
 801e9b2:	4618      	mov	r0, r3
 801e9b4:	3718      	adds	r7, #24
 801e9b6:	46bd      	mov	sp, r7
 801e9b8:	bd80      	pop	{r7, pc}

0801e9ba <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801e9ba:	b580      	push	{r7, lr}
 801e9bc:	b086      	sub	sp, #24
 801e9be:	af00      	add	r7, sp, #0
 801e9c0:	60f8      	str	r0, [r7, #12]
 801e9c2:	60b9      	str	r1, [r7, #8]
 801e9c4:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 801e9c6:	2300      	movs	r3, #0
 801e9c8:	617b      	str	r3, [r7, #20]
    JSON_Value *old_value;
    if (object == NULL || name == NULL || value == NULL || value->parent != NULL) {
 801e9ca:	68fb      	ldr	r3, [r7, #12]
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d009      	beq.n	801e9e4 <json_object_set_value+0x2a>
 801e9d0:	68bb      	ldr	r3, [r7, #8]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d006      	beq.n	801e9e4 <json_object_set_value+0x2a>
 801e9d6:	687b      	ldr	r3, [r7, #4]
 801e9d8:	2b00      	cmp	r3, #0
 801e9da:	d003      	beq.n	801e9e4 <json_object_set_value+0x2a>
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	d002      	beq.n	801e9ea <json_object_set_value+0x30>
        return JSONFailure;
 801e9e4:	f04f 33ff 	mov.w	r3, #4294967295
 801e9e8:	e039      	b.n	801ea5e <json_object_set_value+0xa4>
    }
    old_value = json_object_get_value(object, name);
 801e9ea:	68b9      	ldr	r1, [r7, #8]
 801e9ec:	68f8      	ldr	r0, [r7, #12]
 801e9ee:	f7ff fbbf 	bl	801e170 <json_object_get_value>
 801e9f2:	6138      	str	r0, [r7, #16]
    if (old_value != NULL) { /* free and overwrite old value */
 801e9f4:	693b      	ldr	r3, [r7, #16]
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	d02b      	beq.n	801ea52 <json_object_set_value+0x98>
        json_value_free(old_value);
 801e9fa:	6938      	ldr	r0, [r7, #16]
 801e9fc:	f7ff fd58 	bl	801e4b0 <json_value_free>
        for (i = 0; i < json_object_get_count(object); i++) {
 801ea00:	2300      	movs	r3, #0
 801ea02:	617b      	str	r3, [r7, #20]
 801ea04:	e01e      	b.n	801ea44 <json_object_set_value+0x8a>
            if (strcmp(object->names[i], name) == 0) {
 801ea06:	68fb      	ldr	r3, [r7, #12]
 801ea08:	685a      	ldr	r2, [r3, #4]
 801ea0a:	697b      	ldr	r3, [r7, #20]
 801ea0c:	009b      	lsls	r3, r3, #2
 801ea0e:	4413      	add	r3, r2
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	68b9      	ldr	r1, [r7, #8]
 801ea14:	4618      	mov	r0, r3
 801ea16:	f7e1 fbf3 	bl	8000200 <strcmp>
 801ea1a:	4603      	mov	r3, r0
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d10e      	bne.n	801ea3e <json_object_set_value+0x84>
                value->parent = json_object_get_wrapping_value(object);
 801ea20:	68f8      	ldr	r0, [r7, #12]
 801ea22:	f7ff fc65 	bl	801e2f0 <json_object_get_wrapping_value>
 801ea26:	4602      	mov	r2, r0
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	601a      	str	r2, [r3, #0]
                object->values[i] = value;
 801ea2c:	68fb      	ldr	r3, [r7, #12]
 801ea2e:	689a      	ldr	r2, [r3, #8]
 801ea30:	697b      	ldr	r3, [r7, #20]
 801ea32:	009b      	lsls	r3, r3, #2
 801ea34:	4413      	add	r3, r2
 801ea36:	687a      	ldr	r2, [r7, #4]
 801ea38:	601a      	str	r2, [r3, #0]
                return JSONSuccess;
 801ea3a:	2300      	movs	r3, #0
 801ea3c:	e00f      	b.n	801ea5e <json_object_set_value+0xa4>
        for (i = 0; i < json_object_get_count(object); i++) {
 801ea3e:	697b      	ldr	r3, [r7, #20]
 801ea40:	3301      	adds	r3, #1
 801ea42:	617b      	str	r3, [r7, #20]
 801ea44:	68f8      	ldr	r0, [r7, #12]
 801ea46:	f7ff fc27 	bl	801e298 <json_object_get_count>
 801ea4a:	4602      	mov	r2, r0
 801ea4c:	697b      	ldr	r3, [r7, #20]
 801ea4e:	4293      	cmp	r3, r2
 801ea50:	d3d9      	bcc.n	801ea06 <json_object_set_value+0x4c>
            }
        }
    }
    /* add new key value pair */
    return json_object_add(object, name, value);
 801ea52:	687a      	ldr	r2, [r7, #4]
 801ea54:	68b9      	ldr	r1, [r7, #8]
 801ea56:	68f8      	ldr	r0, [r7, #12]
 801ea58:	f7fd fb08 	bl	801c06c <json_object_add>
 801ea5c:	4603      	mov	r3, r0
}
 801ea5e:	4618      	mov	r0, r3
 801ea60:	3718      	adds	r7, #24
 801ea62:	46bd      	mov	sp, r7
 801ea64:	bd80      	pop	{r7, pc}

0801ea66 <json_object_dotset_value>:

JSON_Status json_object_set_null(JSON_Object *object, const char *name) {
    return json_object_set_value(object, name, json_value_init_null());
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801ea66:	b580      	push	{r7, lr}
 801ea68:	b08c      	sub	sp, #48	; 0x30
 801ea6a:	af00      	add	r7, sp, #0
 801ea6c:	60f8      	str	r0, [r7, #12]
 801ea6e:	60b9      	str	r1, [r7, #8]
 801ea70:	607a      	str	r2, [r7, #4]
    const char *dot_pos = NULL;
 801ea72:	2300      	movs	r3, #0
 801ea74:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Value *temp_value = NULL, *new_value = NULL;
 801ea76:	2300      	movs	r3, #0
 801ea78:	62bb      	str	r3, [r7, #40]	; 0x28
 801ea7a:	2300      	movs	r3, #0
 801ea7c:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Object *temp_object = NULL, *new_object = NULL;
 801ea7e:	2300      	movs	r3, #0
 801ea80:	623b      	str	r3, [r7, #32]
 801ea82:	2300      	movs	r3, #0
 801ea84:	61fb      	str	r3, [r7, #28]
    JSON_Status status = JSONFailure;
 801ea86:	f04f 33ff 	mov.w	r3, #4294967295
 801ea8a:	61bb      	str	r3, [r7, #24]
    size_t name_len = 0;
 801ea8c:	2300      	movs	r3, #0
 801ea8e:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	2b00      	cmp	r3, #0
 801ea94:	d005      	beq.n	801eaa2 <json_object_dotset_value+0x3c>
 801ea96:	68bb      	ldr	r3, [r7, #8]
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	d002      	beq.n	801eaa2 <json_object_dotset_value+0x3c>
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	2b00      	cmp	r3, #0
 801eaa0:	d102      	bne.n	801eaa8 <json_object_dotset_value+0x42>
        return JSONFailure;
 801eaa2:	f04f 33ff 	mov.w	r3, #4294967295
 801eaa6:	e067      	b.n	801eb78 <json_object_dotset_value+0x112>
    }
    dot_pos = strchr(name, '.');
 801eaa8:	212e      	movs	r1, #46	; 0x2e
 801eaaa:	68b8      	ldr	r0, [r7, #8]
 801eaac:	f001 f9f9 	bl	801fea2 <strchr>
 801eab0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (dot_pos == NULL) {
 801eab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	d106      	bne.n	801eac6 <json_object_dotset_value+0x60>
        return json_object_set_value(object, name, value);
 801eab8:	687a      	ldr	r2, [r7, #4]
 801eaba:	68b9      	ldr	r1, [r7, #8]
 801eabc:	68f8      	ldr	r0, [r7, #12]
 801eabe:	f7ff ff7c 	bl	801e9ba <json_object_set_value>
 801eac2:	4603      	mov	r3, r0
 801eac4:	e058      	b.n	801eb78 <json_object_dotset_value+0x112>
    }
    name_len = dot_pos - name;
 801eac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801eac8:	68bb      	ldr	r3, [r7, #8]
 801eaca:	1ad3      	subs	r3, r2, r3
 801eacc:	617b      	str	r3, [r7, #20]
    temp_value = json_object_getn_value(object, name, name_len);
 801eace:	697a      	ldr	r2, [r7, #20]
 801ead0:	68b9      	ldr	r1, [r7, #8]
 801ead2:	68f8      	ldr	r0, [r7, #12]
 801ead4:	f7fd fbc6 	bl	801c264 <json_object_getn_value>
 801ead8:	62b8      	str	r0, [r7, #40]	; 0x28
    if (temp_value) {
 801eada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d015      	beq.n	801eb0c <json_object_dotset_value+0xa6>
        /* Don't overwrite existing non-object (unlike json_object_set_value, but it shouldn't be changed at this point) */
        if (json_value_get_type(temp_value) != JSONObject) {
 801eae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eae2:	f7ff fc6e 	bl	801e3c2 <json_value_get_type>
 801eae6:	4603      	mov	r3, r0
 801eae8:	2b04      	cmp	r3, #4
 801eaea:	d002      	beq.n	801eaf2 <json_object_dotset_value+0x8c>
            return JSONFailure;
 801eaec:	f04f 33ff 	mov.w	r3, #4294967295
 801eaf0:	e042      	b.n	801eb78 <json_object_dotset_value+0x112>
        }
        temp_object = json_value_get_object(temp_value);
 801eaf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eaf4:	f7ff fc77 	bl	801e3e6 <json_value_get_object>
 801eaf8:	6238      	str	r0, [r7, #32]
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 801eafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eafc:	3301      	adds	r3, #1
 801eafe:	687a      	ldr	r2, [r7, #4]
 801eb00:	4619      	mov	r1, r3
 801eb02:	6a38      	ldr	r0, [r7, #32]
 801eb04:	f7ff ffaf 	bl	801ea66 <json_object_dotset_value>
 801eb08:	4603      	mov	r3, r0
 801eb0a:	e035      	b.n	801eb78 <json_object_dotset_value+0x112>
    }
    new_value = json_value_init_object();
 801eb0c:	f7ff fcfe 	bl	801e50c <json_value_init_object>
 801eb10:	6278      	str	r0, [r7, #36]	; 0x24
    if (new_value == NULL) {
 801eb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	d102      	bne.n	801eb1e <json_object_dotset_value+0xb8>
        return JSONFailure;
 801eb18:	f04f 33ff 	mov.w	r3, #4294967295
 801eb1c:	e02c      	b.n	801eb78 <json_object_dotset_value+0x112>
    }
    new_object = json_value_get_object(new_value);
 801eb1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb20:	f7ff fc61 	bl	801e3e6 <json_value_get_object>
 801eb24:	61f8      	str	r0, [r7, #28]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 801eb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb28:	3301      	adds	r3, #1
 801eb2a:	687a      	ldr	r2, [r7, #4]
 801eb2c:	4619      	mov	r1, r3
 801eb2e:	69f8      	ldr	r0, [r7, #28]
 801eb30:	f7ff ff99 	bl	801ea66 <json_object_dotset_value>
 801eb34:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801eb36:	69bb      	ldr	r3, [r7, #24]
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d005      	beq.n	801eb48 <json_object_dotset_value+0xe2>
        json_value_free(new_value);
 801eb3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb3e:	f7ff fcb7 	bl	801e4b0 <json_value_free>
        return JSONFailure;
 801eb42:	f04f 33ff 	mov.w	r3, #4294967295
 801eb46:	e017      	b.n	801eb78 <json_object_dotset_value+0x112>
    }
    status = json_object_addn(object, name, name_len, new_value);
 801eb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb4a:	697a      	ldr	r2, [r7, #20]
 801eb4c:	68b9      	ldr	r1, [r7, #8]
 801eb4e:	68f8      	ldr	r0, [r7, #12]
 801eb50:	f7fd faa6 	bl	801c0a0 <json_object_addn>
 801eb54:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801eb56:	69bb      	ldr	r3, [r7, #24]
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	d00c      	beq.n	801eb76 <json_object_dotset_value+0x110>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 801eb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb5e:	3301      	adds	r3, #1
 801eb60:	2200      	movs	r2, #0
 801eb62:	4619      	mov	r1, r3
 801eb64:	69f8      	ldr	r0, [r7, #28]
 801eb66:	f7fd fc31 	bl	801c3cc <json_object_dotremove_internal>
        json_value_free(new_value);
 801eb6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb6c:	f7ff fca0 	bl	801e4b0 <json_value_free>
        return JSONFailure;
 801eb70:	f04f 33ff 	mov.w	r3, #4294967295
 801eb74:	e000      	b.n	801eb78 <json_object_dotset_value+0x112>
    }
    return JSONSuccess;
 801eb76:	2300      	movs	r3, #0
}
 801eb78:	4618      	mov	r0, r3
 801eb7a:	3730      	adds	r7, #48	; 0x30
 801eb7c:	46bd      	mov	sp, r7
 801eb7e:	bd80      	pop	{r7, pc}

0801eb80 <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801eb80:	b580      	push	{r7, lr}
 801eb82:	b086      	sub	sp, #24
 801eb84:	af00      	add	r7, sp, #0
 801eb86:	60f8      	str	r0, [r7, #12]
 801eb88:	60b9      	str	r1, [r7, #8]
 801eb8a:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_string(string);
 801eb8c:	6878      	ldr	r0, [r7, #4]
 801eb8e:	f7ff fd15 	bl	801e5bc <json_value_init_string>
 801eb92:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801eb94:	697b      	ldr	r3, [r7, #20]
 801eb96:	2b00      	cmp	r3, #0
 801eb98:	d102      	bne.n	801eba0 <json_object_dotset_string+0x20>
        return JSONFailure;
 801eb9a:	f04f 33ff 	mov.w	r3, #4294967295
 801eb9e:	e00f      	b.n	801ebc0 <json_object_dotset_string+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801eba0:	697a      	ldr	r2, [r7, #20]
 801eba2:	68b9      	ldr	r1, [r7, #8]
 801eba4:	68f8      	ldr	r0, [r7, #12]
 801eba6:	f7ff ff5e 	bl	801ea66 <json_object_dotset_value>
 801ebaa:	4603      	mov	r3, r0
 801ebac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ebb0:	d105      	bne.n	801ebbe <json_object_dotset_string+0x3e>
        json_value_free(value);
 801ebb2:	6978      	ldr	r0, [r7, #20]
 801ebb4:	f7ff fc7c 	bl	801e4b0 <json_value_free>
        return JSONFailure;
 801ebb8:	f04f 33ff 	mov.w	r3, #4294967295
 801ebbc:	e000      	b.n	801ebc0 <json_object_dotset_string+0x40>
    }
    return JSONSuccess;
 801ebbe:	2300      	movs	r3, #0
}
 801ebc0:	4618      	mov	r0, r3
 801ebc2:	3718      	adds	r7, #24
 801ebc4:	46bd      	mov	sp, r7
 801ebc6:	bd80      	pop	{r7, pc}

0801ebc8 <json_object_dotset_number>:

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 801ebc8:	b580      	push	{r7, lr}
 801ebca:	b086      	sub	sp, #24
 801ebcc:	af00      	add	r7, sp, #0
 801ebce:	60f8      	str	r0, [r7, #12]
 801ebd0:	60b9      	str	r1, [r7, #8]
 801ebd2:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801ebd6:	ed97 0b00 	vldr	d0, [r7]
 801ebda:	f7ff fd25 	bl	801e628 <json_value_init_number>
 801ebde:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801ebe0:	697b      	ldr	r3, [r7, #20]
 801ebe2:	2b00      	cmp	r3, #0
 801ebe4:	d102      	bne.n	801ebec <json_object_dotset_number+0x24>
        return JSONFailure;
 801ebe6:	f04f 33ff 	mov.w	r3, #4294967295
 801ebea:	e00f      	b.n	801ec0c <json_object_dotset_number+0x44>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801ebec:	697a      	ldr	r2, [r7, #20]
 801ebee:	68b9      	ldr	r1, [r7, #8]
 801ebf0:	68f8      	ldr	r0, [r7, #12]
 801ebf2:	f7ff ff38 	bl	801ea66 <json_object_dotset_value>
 801ebf6:	4603      	mov	r3, r0
 801ebf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ebfc:	d105      	bne.n	801ec0a <json_object_dotset_number+0x42>
        json_value_free(value);
 801ebfe:	6978      	ldr	r0, [r7, #20]
 801ec00:	f7ff fc56 	bl	801e4b0 <json_value_free>
        return JSONFailure;
 801ec04:	f04f 33ff 	mov.w	r3, #4294967295
 801ec08:	e000      	b.n	801ec0c <json_object_dotset_number+0x44>
    }
    return JSONSuccess;
 801ec0a:	2300      	movs	r3, #0
}
 801ec0c:	4618      	mov	r0, r3
 801ec0e:	3718      	adds	r7, #24
 801ec10:	46bd      	mov	sp, r7
 801ec12:	bd80      	pop	{r7, pc}

0801ec14 <json_object_dotset_boolean>:

JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 801ec14:	b580      	push	{r7, lr}
 801ec16:	b086      	sub	sp, #24
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	60f8      	str	r0, [r7, #12]
 801ec1c:	60b9      	str	r1, [r7, #8]
 801ec1e:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_boolean(boolean);
 801ec20:	6878      	ldr	r0, [r7, #4]
 801ec22:	f7ff fd53 	bl	801e6cc <json_value_init_boolean>
 801ec26:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801ec28:	697b      	ldr	r3, [r7, #20]
 801ec2a:	2b00      	cmp	r3, #0
 801ec2c:	d102      	bne.n	801ec34 <json_object_dotset_boolean+0x20>
        return JSONFailure;
 801ec2e:	f04f 33ff 	mov.w	r3, #4294967295
 801ec32:	e00f      	b.n	801ec54 <json_object_dotset_boolean+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801ec34:	697a      	ldr	r2, [r7, #20]
 801ec36:	68b9      	ldr	r1, [r7, #8]
 801ec38:	68f8      	ldr	r0, [r7, #12]
 801ec3a:	f7ff ff14 	bl	801ea66 <json_object_dotset_value>
 801ec3e:	4603      	mov	r3, r0
 801ec40:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ec44:	d105      	bne.n	801ec52 <json_object_dotset_boolean+0x3e>
        json_value_free(value);
 801ec46:	6978      	ldr	r0, [r7, #20]
 801ec48:	f7ff fc32 	bl	801e4b0 <json_value_free>
        return JSONFailure;
 801ec4c:	f04f 33ff 	mov.w	r3, #4294967295
 801ec50:	e000      	b.n	801ec54 <json_object_dotset_boolean+0x40>
    }
    return JSONSuccess;
 801ec52:	2300      	movs	r3, #0
}
 801ec54:	4618      	mov	r0, r3
 801ec56:	3718      	adds	r7, #24
 801ec58:	46bd      	mov	sp, r7
 801ec5a:	bd80      	pop	{r7, pc}

0801ec5c <json_set_allocation_functions>:

int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
 801ec5c:	b480      	push	{r7}
 801ec5e:	b083      	sub	sp, #12
 801ec60:	af00      	add	r7, sp, #0
 801ec62:	6078      	str	r0, [r7, #4]
 801ec64:	6039      	str	r1, [r7, #0]
    parson_malloc = malloc_fun;
 801ec66:	4a06      	ldr	r2, [pc, #24]	; (801ec80 <json_set_allocation_functions+0x24>)
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	6013      	str	r3, [r2, #0]
    parson_free = free_fun;
 801ec6c:	4a05      	ldr	r2, [pc, #20]	; (801ec84 <json_set_allocation_functions+0x28>)
 801ec6e:	683b      	ldr	r3, [r7, #0]
 801ec70:	6013      	str	r3, [r2, #0]
}
 801ec72:	bf00      	nop
 801ec74:	370c      	adds	r7, #12
 801ec76:	46bd      	mov	sp, r7
 801ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec7c:	4770      	bx	lr
 801ec7e:	bf00      	nop
 801ec80:	200002b0 	.word	0x200002b0
 801ec84:	200002b4 	.word	0x200002b4

0801ec88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801ec88:	480d      	ldr	r0, [pc, #52]	; (801ecc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801ec8a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 801ec8c:	f7e6 ffe4 	bl	8005c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801ec90:	480c      	ldr	r0, [pc, #48]	; (801ecc4 <LoopForever+0x6>)
  ldr r1, =_edata
 801ec92:	490d      	ldr	r1, [pc, #52]	; (801ecc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 801ec94:	4a0d      	ldr	r2, [pc, #52]	; (801eccc <LoopForever+0xe>)
  movs r3, #0
 801ec96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801ec98:	e002      	b.n	801eca0 <LoopCopyDataInit>

0801ec9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801ec9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801ec9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801ec9e:	3304      	adds	r3, #4

0801eca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801eca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801eca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801eca4:	d3f9      	bcc.n	801ec9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801eca6:	4a0a      	ldr	r2, [pc, #40]	; (801ecd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 801eca8:	4c0a      	ldr	r4, [pc, #40]	; (801ecd4 <LoopForever+0x16>)
  movs r3, #0
 801ecaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 801ecac:	e001      	b.n	801ecb2 <LoopFillZerobss>

0801ecae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801ecae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801ecb0:	3204      	adds	r2, #4

0801ecb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801ecb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801ecb4:	d3fb      	bcc.n	801ecae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 801ecb6:	f000 fa91 	bl	801f1dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801ecba:	f7e4 fedb 	bl	8003a74 <main>

0801ecbe <LoopForever>:

LoopForever:
    b LoopForever
 801ecbe:	e7fe      	b.n	801ecbe <LoopForever>
  ldr   r0, =_estack
 801ecc0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 801ecc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801ecc8:	2000048c 	.word	0x2000048c
  ldr r2, =_sidata
 801eccc:	08024494 	.word	0x08024494
  ldr r2, =_sbss
 801ecd0:	20000490 	.word	0x20000490
  ldr r4, =_ebss
 801ecd4:	2001d470 	.word	0x2001d470

0801ecd8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801ecd8:	e7fe      	b.n	801ecd8 <ADC1_IRQHandler>
	...

0801ecdc <_sbrk>:




caddr_t _sbrk(int incr)
{
 801ecdc:	b580      	push	{r7, lr}
 801ecde:	b084      	sub	sp, #16
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	6078      	str	r0, [r7, #4]
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 801ece4:	4b15      	ldr	r3, [pc, #84]	; (801ed3c <_sbrk+0x60>)
 801ece6:	681b      	ldr	r3, [r3, #0]
 801ece8:	2b00      	cmp	r3, #0
 801ecea:	d102      	bne.n	801ecf2 <_sbrk+0x16>
		heap_end = &end;
 801ecec:	4b13      	ldr	r3, [pc, #76]	; (801ed3c <_sbrk+0x60>)
 801ecee:	4a14      	ldr	r2, [pc, #80]	; (801ed40 <_sbrk+0x64>)
 801ecf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801ecf2:	4b12      	ldr	r3, [pc, #72]	; (801ed3c <_sbrk+0x60>)
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 801ecf8:	4b12      	ldr	r3, [pc, #72]	; (801ed44 <_sbrk+0x68>)
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	681b      	ldr	r3, [r3, #0]
 801ecfe:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 801ed00:	68bb      	ldr	r3, [r7, #8]
 801ed02:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 801ed06:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 801ed08:	4b0c      	ldr	r3, [pc, #48]	; (801ed3c <_sbrk+0x60>)
 801ed0a:	681a      	ldr	r2, [r3, #0]
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	4413      	add	r3, r2
 801ed10:	68ba      	ldr	r2, [r7, #8]
 801ed12:	429a      	cmp	r2, r3
 801ed14:	d207      	bcs.n	801ed26 <_sbrk+0x4a>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801ed16:	f000 f8a3 	bl	801ee60 <__errno>
 801ed1a:	4603      	mov	r3, r0
 801ed1c:	220c      	movs	r2, #12
 801ed1e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801ed20:	f04f 33ff 	mov.w	r3, #4294967295
 801ed24:	e006      	b.n	801ed34 <_sbrk+0x58>
	}

	heap_end += incr;
 801ed26:	4b05      	ldr	r3, [pc, #20]	; (801ed3c <_sbrk+0x60>)
 801ed28:	681a      	ldr	r2, [r3, #0]
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	4413      	add	r3, r2
 801ed2e:	4a03      	ldr	r2, [pc, #12]	; (801ed3c <_sbrk+0x60>)
 801ed30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801ed32:	68fb      	ldr	r3, [r7, #12]
}
 801ed34:	4618      	mov	r0, r3
 801ed36:	3710      	adds	r7, #16
 801ed38:	46bd      	mov	sp, r7
 801ed3a:	bd80      	pop	{r7, pc}
 801ed3c:	20010250 	.word	0x20010250
 801ed40:	2001d470 	.word	0x2001d470
 801ed44:	e000ed08 	.word	0xe000ed08

0801ed48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801ed48:	b480      	push	{r7}
 801ed4a:	af00      	add	r7, sp, #0
	return 1;
 801ed4c:	2301      	movs	r3, #1
}
 801ed4e:	4618      	mov	r0, r3
 801ed50:	46bd      	mov	sp, r7
 801ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed56:	4770      	bx	lr

0801ed58 <_kill>:

int _kill(int pid, int sig)
{
 801ed58:	b580      	push	{r7, lr}
 801ed5a:	b082      	sub	sp, #8
 801ed5c:	af00      	add	r7, sp, #0
 801ed5e:	6078      	str	r0, [r7, #4]
 801ed60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801ed62:	f000 f87d 	bl	801ee60 <__errno>
 801ed66:	4603      	mov	r3, r0
 801ed68:	2216      	movs	r2, #22
 801ed6a:	601a      	str	r2, [r3, #0]
	return -1;
 801ed6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ed70:	4618      	mov	r0, r3
 801ed72:	3708      	adds	r7, #8
 801ed74:	46bd      	mov	sp, r7
 801ed76:	bd80      	pop	{r7, pc}

0801ed78 <_exit>:

void _exit (int status)
{
 801ed78:	b580      	push	{r7, lr}
 801ed7a:	b082      	sub	sp, #8
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801ed80:	f04f 31ff 	mov.w	r1, #4294967295
 801ed84:	6878      	ldr	r0, [r7, #4]
 801ed86:	f7ff ffe7 	bl	801ed58 <_kill>
	while (1) {}
 801ed8a:	e7fe      	b.n	801ed8a <_exit+0x12>

0801ed8c <_write>:
}

int _write(int file, char *ptr, int len)
{
 801ed8c:	b580      	push	{r7, lr}
 801ed8e:	b086      	sub	sp, #24
 801ed90:	af00      	add	r7, sp, #0
 801ed92:	60f8      	str	r0, [r7, #12]
 801ed94:	60b9      	str	r1, [r7, #8]
 801ed96:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ed98:	2300      	movs	r3, #0
 801ed9a:	617b      	str	r3, [r7, #20]
 801ed9c:	e009      	b.n	801edb2 <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 801ed9e:	68bb      	ldr	r3, [r7, #8]
 801eda0:	1c5a      	adds	r2, r3, #1
 801eda2:	60ba      	str	r2, [r7, #8]
 801eda4:	781b      	ldrb	r3, [r3, #0]
 801eda6:	4618      	mov	r0, r3
 801eda8:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801edac:	697b      	ldr	r3, [r7, #20]
 801edae:	3301      	adds	r3, #1
 801edb0:	617b      	str	r3, [r7, #20]
 801edb2:	697a      	ldr	r2, [r7, #20]
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	429a      	cmp	r2, r3
 801edb8:	dbf1      	blt.n	801ed9e <_write+0x12>
		}
	return len;
 801edba:	687b      	ldr	r3, [r7, #4]
}
 801edbc:	4618      	mov	r0, r3
 801edbe:	3718      	adds	r7, #24
 801edc0:	46bd      	mov	sp, r7
 801edc2:	bd80      	pop	{r7, pc}

0801edc4 <_close>:

int _close(int file)
{
 801edc4:	b480      	push	{r7}
 801edc6:	b083      	sub	sp, #12
 801edc8:	af00      	add	r7, sp, #0
 801edca:	6078      	str	r0, [r7, #4]
	return -1;
 801edcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801edd0:	4618      	mov	r0, r3
 801edd2:	370c      	adds	r7, #12
 801edd4:	46bd      	mov	sp, r7
 801edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edda:	4770      	bx	lr

0801eddc <_fstat>:

int _fstat(int file, struct stat *st)
{
 801eddc:	b480      	push	{r7}
 801edde:	b083      	sub	sp, #12
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	6078      	str	r0, [r7, #4]
 801ede4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801ede6:	683b      	ldr	r3, [r7, #0]
 801ede8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801edec:	605a      	str	r2, [r3, #4]
	return 0;
 801edee:	2300      	movs	r3, #0
}
 801edf0:	4618      	mov	r0, r3
 801edf2:	370c      	adds	r7, #12
 801edf4:	46bd      	mov	sp, r7
 801edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edfa:	4770      	bx	lr

0801edfc <_isatty>:

int _isatty(int file)
{
 801edfc:	b480      	push	{r7}
 801edfe:	b083      	sub	sp, #12
 801ee00:	af00      	add	r7, sp, #0
 801ee02:	6078      	str	r0, [r7, #4]
	return 1;
 801ee04:	2301      	movs	r3, #1
}
 801ee06:	4618      	mov	r0, r3
 801ee08:	370c      	adds	r7, #12
 801ee0a:	46bd      	mov	sp, r7
 801ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee10:	4770      	bx	lr

0801ee12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801ee12:	b480      	push	{r7}
 801ee14:	b085      	sub	sp, #20
 801ee16:	af00      	add	r7, sp, #0
 801ee18:	60f8      	str	r0, [r7, #12]
 801ee1a:	60b9      	str	r1, [r7, #8]
 801ee1c:	607a      	str	r2, [r7, #4]
	return 0;
 801ee1e:	2300      	movs	r3, #0
}
 801ee20:	4618      	mov	r0, r3
 801ee22:	3714      	adds	r7, #20
 801ee24:	46bd      	mov	sp, r7
 801ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee2a:	4770      	bx	lr

0801ee2c <_read>:

int _read(int file, char *ptr, int len)
{
 801ee2c:	b580      	push	{r7, lr}
 801ee2e:	b084      	sub	sp, #16
 801ee30:	af00      	add	r7, sp, #0
 801ee32:	60f8      	str	r0, [r7, #12]
 801ee34:	60b9      	str	r1, [r7, #8]
 801ee36:	607a      	str	r2, [r7, #4]
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 801ee38:	f3af 8000 	nop.w
 801ee3c:	4603      	mov	r3, r0
 801ee3e:	b2da      	uxtb	r2, r3
 801ee40:	68bb      	ldr	r3, [r7, #8]
 801ee42:	701a      	strb	r2, [r3, #0]
	return 1;
 801ee44:	2301      	movs	r3, #1
}
 801ee46:	4618      	mov	r0, r3
 801ee48:	3710      	adds	r7, #16
 801ee4a:	46bd      	mov	sp, r7
 801ee4c:	bd80      	pop	{r7, pc}
	...

0801ee50 <calloc>:
 801ee50:	4b02      	ldr	r3, [pc, #8]	; (801ee5c <calloc+0xc>)
 801ee52:	460a      	mov	r2, r1
 801ee54:	4601      	mov	r1, r0
 801ee56:	6818      	ldr	r0, [r3, #0]
 801ee58:	f000 ba8c 	b.w	801f374 <_calloc_r>
 801ee5c:	200002b8 	.word	0x200002b8

0801ee60 <__errno>:
 801ee60:	4b01      	ldr	r3, [pc, #4]	; (801ee68 <__errno+0x8>)
 801ee62:	6818      	ldr	r0, [r3, #0]
 801ee64:	4770      	bx	lr
 801ee66:	bf00      	nop
 801ee68:	200002b8 	.word	0x200002b8

0801ee6c <__sflush_r>:
 801ee6c:	898a      	ldrh	r2, [r1, #12]
 801ee6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee72:	4605      	mov	r5, r0
 801ee74:	0710      	lsls	r0, r2, #28
 801ee76:	460c      	mov	r4, r1
 801ee78:	d458      	bmi.n	801ef2c <__sflush_r+0xc0>
 801ee7a:	684b      	ldr	r3, [r1, #4]
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	dc05      	bgt.n	801ee8c <__sflush_r+0x20>
 801ee80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	dc02      	bgt.n	801ee8c <__sflush_r+0x20>
 801ee86:	2000      	movs	r0, #0
 801ee88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ee8e:	2e00      	cmp	r6, #0
 801ee90:	d0f9      	beq.n	801ee86 <__sflush_r+0x1a>
 801ee92:	2300      	movs	r3, #0
 801ee94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ee98:	682f      	ldr	r7, [r5, #0]
 801ee9a:	602b      	str	r3, [r5, #0]
 801ee9c:	d032      	beq.n	801ef04 <__sflush_r+0x98>
 801ee9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801eea0:	89a3      	ldrh	r3, [r4, #12]
 801eea2:	075a      	lsls	r2, r3, #29
 801eea4:	d505      	bpl.n	801eeb2 <__sflush_r+0x46>
 801eea6:	6863      	ldr	r3, [r4, #4]
 801eea8:	1ac0      	subs	r0, r0, r3
 801eeaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eeac:	b10b      	cbz	r3, 801eeb2 <__sflush_r+0x46>
 801eeae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eeb0:	1ac0      	subs	r0, r0, r3
 801eeb2:	2300      	movs	r3, #0
 801eeb4:	4602      	mov	r2, r0
 801eeb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eeb8:	6a21      	ldr	r1, [r4, #32]
 801eeba:	4628      	mov	r0, r5
 801eebc:	47b0      	blx	r6
 801eebe:	1c43      	adds	r3, r0, #1
 801eec0:	89a3      	ldrh	r3, [r4, #12]
 801eec2:	d106      	bne.n	801eed2 <__sflush_r+0x66>
 801eec4:	6829      	ldr	r1, [r5, #0]
 801eec6:	291d      	cmp	r1, #29
 801eec8:	d82c      	bhi.n	801ef24 <__sflush_r+0xb8>
 801eeca:	4a2a      	ldr	r2, [pc, #168]	; (801ef74 <__sflush_r+0x108>)
 801eecc:	40ca      	lsrs	r2, r1
 801eece:	07d6      	lsls	r6, r2, #31
 801eed0:	d528      	bpl.n	801ef24 <__sflush_r+0xb8>
 801eed2:	2200      	movs	r2, #0
 801eed4:	6062      	str	r2, [r4, #4]
 801eed6:	04d9      	lsls	r1, r3, #19
 801eed8:	6922      	ldr	r2, [r4, #16]
 801eeda:	6022      	str	r2, [r4, #0]
 801eedc:	d504      	bpl.n	801eee8 <__sflush_r+0x7c>
 801eede:	1c42      	adds	r2, r0, #1
 801eee0:	d101      	bne.n	801eee6 <__sflush_r+0x7a>
 801eee2:	682b      	ldr	r3, [r5, #0]
 801eee4:	b903      	cbnz	r3, 801eee8 <__sflush_r+0x7c>
 801eee6:	6560      	str	r0, [r4, #84]	; 0x54
 801eee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801eeea:	602f      	str	r7, [r5, #0]
 801eeec:	2900      	cmp	r1, #0
 801eeee:	d0ca      	beq.n	801ee86 <__sflush_r+0x1a>
 801eef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eef4:	4299      	cmp	r1, r3
 801eef6:	d002      	beq.n	801eefe <__sflush_r+0x92>
 801eef8:	4628      	mov	r0, r5
 801eefa:	f000 fa4b 	bl	801f394 <_free_r>
 801eefe:	2000      	movs	r0, #0
 801ef00:	6360      	str	r0, [r4, #52]	; 0x34
 801ef02:	e7c1      	b.n	801ee88 <__sflush_r+0x1c>
 801ef04:	6a21      	ldr	r1, [r4, #32]
 801ef06:	2301      	movs	r3, #1
 801ef08:	4628      	mov	r0, r5
 801ef0a:	47b0      	blx	r6
 801ef0c:	1c41      	adds	r1, r0, #1
 801ef0e:	d1c7      	bne.n	801eea0 <__sflush_r+0x34>
 801ef10:	682b      	ldr	r3, [r5, #0]
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	d0c4      	beq.n	801eea0 <__sflush_r+0x34>
 801ef16:	2b1d      	cmp	r3, #29
 801ef18:	d001      	beq.n	801ef1e <__sflush_r+0xb2>
 801ef1a:	2b16      	cmp	r3, #22
 801ef1c:	d101      	bne.n	801ef22 <__sflush_r+0xb6>
 801ef1e:	602f      	str	r7, [r5, #0]
 801ef20:	e7b1      	b.n	801ee86 <__sflush_r+0x1a>
 801ef22:	89a3      	ldrh	r3, [r4, #12]
 801ef24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef28:	81a3      	strh	r3, [r4, #12]
 801ef2a:	e7ad      	b.n	801ee88 <__sflush_r+0x1c>
 801ef2c:	690f      	ldr	r7, [r1, #16]
 801ef2e:	2f00      	cmp	r7, #0
 801ef30:	d0a9      	beq.n	801ee86 <__sflush_r+0x1a>
 801ef32:	0793      	lsls	r3, r2, #30
 801ef34:	680e      	ldr	r6, [r1, #0]
 801ef36:	bf08      	it	eq
 801ef38:	694b      	ldreq	r3, [r1, #20]
 801ef3a:	600f      	str	r7, [r1, #0]
 801ef3c:	bf18      	it	ne
 801ef3e:	2300      	movne	r3, #0
 801ef40:	eba6 0807 	sub.w	r8, r6, r7
 801ef44:	608b      	str	r3, [r1, #8]
 801ef46:	f1b8 0f00 	cmp.w	r8, #0
 801ef4a:	dd9c      	ble.n	801ee86 <__sflush_r+0x1a>
 801ef4c:	6a21      	ldr	r1, [r4, #32]
 801ef4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ef50:	4643      	mov	r3, r8
 801ef52:	463a      	mov	r2, r7
 801ef54:	4628      	mov	r0, r5
 801ef56:	47b0      	blx	r6
 801ef58:	2800      	cmp	r0, #0
 801ef5a:	dc06      	bgt.n	801ef6a <__sflush_r+0xfe>
 801ef5c:	89a3      	ldrh	r3, [r4, #12]
 801ef5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef62:	81a3      	strh	r3, [r4, #12]
 801ef64:	f04f 30ff 	mov.w	r0, #4294967295
 801ef68:	e78e      	b.n	801ee88 <__sflush_r+0x1c>
 801ef6a:	4407      	add	r7, r0
 801ef6c:	eba8 0800 	sub.w	r8, r8, r0
 801ef70:	e7e9      	b.n	801ef46 <__sflush_r+0xda>
 801ef72:	bf00      	nop
 801ef74:	20400001 	.word	0x20400001

0801ef78 <_fflush_r>:
 801ef78:	b538      	push	{r3, r4, r5, lr}
 801ef7a:	690b      	ldr	r3, [r1, #16]
 801ef7c:	4605      	mov	r5, r0
 801ef7e:	460c      	mov	r4, r1
 801ef80:	b913      	cbnz	r3, 801ef88 <_fflush_r+0x10>
 801ef82:	2500      	movs	r5, #0
 801ef84:	4628      	mov	r0, r5
 801ef86:	bd38      	pop	{r3, r4, r5, pc}
 801ef88:	b118      	cbz	r0, 801ef92 <_fflush_r+0x1a>
 801ef8a:	6983      	ldr	r3, [r0, #24]
 801ef8c:	b90b      	cbnz	r3, 801ef92 <_fflush_r+0x1a>
 801ef8e:	f000 f887 	bl	801f0a0 <__sinit>
 801ef92:	4b14      	ldr	r3, [pc, #80]	; (801efe4 <_fflush_r+0x6c>)
 801ef94:	429c      	cmp	r4, r3
 801ef96:	d11b      	bne.n	801efd0 <_fflush_r+0x58>
 801ef98:	686c      	ldr	r4, [r5, #4]
 801ef9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ef9e:	2b00      	cmp	r3, #0
 801efa0:	d0ef      	beq.n	801ef82 <_fflush_r+0xa>
 801efa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801efa4:	07d0      	lsls	r0, r2, #31
 801efa6:	d404      	bmi.n	801efb2 <_fflush_r+0x3a>
 801efa8:	0599      	lsls	r1, r3, #22
 801efaa:	d402      	bmi.n	801efb2 <_fflush_r+0x3a>
 801efac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801efae:	f000 f93a 	bl	801f226 <__retarget_lock_acquire_recursive>
 801efb2:	4628      	mov	r0, r5
 801efb4:	4621      	mov	r1, r4
 801efb6:	f7ff ff59 	bl	801ee6c <__sflush_r>
 801efba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801efbc:	07da      	lsls	r2, r3, #31
 801efbe:	4605      	mov	r5, r0
 801efc0:	d4e0      	bmi.n	801ef84 <_fflush_r+0xc>
 801efc2:	89a3      	ldrh	r3, [r4, #12]
 801efc4:	059b      	lsls	r3, r3, #22
 801efc6:	d4dd      	bmi.n	801ef84 <_fflush_r+0xc>
 801efc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801efca:	f000 f92d 	bl	801f228 <__retarget_lock_release_recursive>
 801efce:	e7d9      	b.n	801ef84 <_fflush_r+0xc>
 801efd0:	4b05      	ldr	r3, [pc, #20]	; (801efe8 <_fflush_r+0x70>)
 801efd2:	429c      	cmp	r4, r3
 801efd4:	d101      	bne.n	801efda <_fflush_r+0x62>
 801efd6:	68ac      	ldr	r4, [r5, #8]
 801efd8:	e7df      	b.n	801ef9a <_fflush_r+0x22>
 801efda:	4b04      	ldr	r3, [pc, #16]	; (801efec <_fflush_r+0x74>)
 801efdc:	429c      	cmp	r4, r3
 801efde:	bf08      	it	eq
 801efe0:	68ec      	ldreq	r4, [r5, #12]
 801efe2:	e7da      	b.n	801ef9a <_fflush_r+0x22>
 801efe4:	08024100 	.word	0x08024100
 801efe8:	08024120 	.word	0x08024120
 801efec:	080240e0 	.word	0x080240e0

0801eff0 <std>:
 801eff0:	2300      	movs	r3, #0
 801eff2:	b510      	push	{r4, lr}
 801eff4:	4604      	mov	r4, r0
 801eff6:	e9c0 3300 	strd	r3, r3, [r0]
 801effa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801effe:	6083      	str	r3, [r0, #8]
 801f000:	8181      	strh	r1, [r0, #12]
 801f002:	6643      	str	r3, [r0, #100]	; 0x64
 801f004:	81c2      	strh	r2, [r0, #14]
 801f006:	6183      	str	r3, [r0, #24]
 801f008:	4619      	mov	r1, r3
 801f00a:	2208      	movs	r2, #8
 801f00c:	305c      	adds	r0, #92	; 0x5c
 801f00e:	f000 f9a9 	bl	801f364 <memset>
 801f012:	4b05      	ldr	r3, [pc, #20]	; (801f028 <std+0x38>)
 801f014:	6263      	str	r3, [r4, #36]	; 0x24
 801f016:	4b05      	ldr	r3, [pc, #20]	; (801f02c <std+0x3c>)
 801f018:	62a3      	str	r3, [r4, #40]	; 0x28
 801f01a:	4b05      	ldr	r3, [pc, #20]	; (801f030 <std+0x40>)
 801f01c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f01e:	4b05      	ldr	r3, [pc, #20]	; (801f034 <std+0x44>)
 801f020:	6224      	str	r4, [r4, #32]
 801f022:	6323      	str	r3, [r4, #48]	; 0x30
 801f024:	bd10      	pop	{r4, pc}
 801f026:	bf00      	nop
 801f028:	0801fe1d 	.word	0x0801fe1d
 801f02c:	0801fe3f 	.word	0x0801fe3f
 801f030:	0801fe77 	.word	0x0801fe77
 801f034:	0801fe9b 	.word	0x0801fe9b

0801f038 <_cleanup_r>:
 801f038:	4901      	ldr	r1, [pc, #4]	; (801f040 <_cleanup_r+0x8>)
 801f03a:	f000 b8af 	b.w	801f19c <_fwalk_reent>
 801f03e:	bf00      	nop
 801f040:	0801ef79 	.word	0x0801ef79

0801f044 <__sfmoreglue>:
 801f044:	b570      	push	{r4, r5, r6, lr}
 801f046:	1e4a      	subs	r2, r1, #1
 801f048:	2568      	movs	r5, #104	; 0x68
 801f04a:	4355      	muls	r5, r2
 801f04c:	460e      	mov	r6, r1
 801f04e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f052:	f000 f9ef 	bl	801f434 <_malloc_r>
 801f056:	4604      	mov	r4, r0
 801f058:	b140      	cbz	r0, 801f06c <__sfmoreglue+0x28>
 801f05a:	2100      	movs	r1, #0
 801f05c:	e9c0 1600 	strd	r1, r6, [r0]
 801f060:	300c      	adds	r0, #12
 801f062:	60a0      	str	r0, [r4, #8]
 801f064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f068:	f000 f97c 	bl	801f364 <memset>
 801f06c:	4620      	mov	r0, r4
 801f06e:	bd70      	pop	{r4, r5, r6, pc}

0801f070 <__sfp_lock_acquire>:
 801f070:	4801      	ldr	r0, [pc, #4]	; (801f078 <__sfp_lock_acquire+0x8>)
 801f072:	f000 b8d8 	b.w	801f226 <__retarget_lock_acquire_recursive>
 801f076:	bf00      	nop
 801f078:	2001d464 	.word	0x2001d464

0801f07c <__sfp_lock_release>:
 801f07c:	4801      	ldr	r0, [pc, #4]	; (801f084 <__sfp_lock_release+0x8>)
 801f07e:	f000 b8d3 	b.w	801f228 <__retarget_lock_release_recursive>
 801f082:	bf00      	nop
 801f084:	2001d464 	.word	0x2001d464

0801f088 <__sinit_lock_acquire>:
 801f088:	4801      	ldr	r0, [pc, #4]	; (801f090 <__sinit_lock_acquire+0x8>)
 801f08a:	f000 b8cc 	b.w	801f226 <__retarget_lock_acquire_recursive>
 801f08e:	bf00      	nop
 801f090:	2001d463 	.word	0x2001d463

0801f094 <__sinit_lock_release>:
 801f094:	4801      	ldr	r0, [pc, #4]	; (801f09c <__sinit_lock_release+0x8>)
 801f096:	f000 b8c7 	b.w	801f228 <__retarget_lock_release_recursive>
 801f09a:	bf00      	nop
 801f09c:	2001d463 	.word	0x2001d463

0801f0a0 <__sinit>:
 801f0a0:	b510      	push	{r4, lr}
 801f0a2:	4604      	mov	r4, r0
 801f0a4:	f7ff fff0 	bl	801f088 <__sinit_lock_acquire>
 801f0a8:	69a3      	ldr	r3, [r4, #24]
 801f0aa:	b11b      	cbz	r3, 801f0b4 <__sinit+0x14>
 801f0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0b0:	f7ff bff0 	b.w	801f094 <__sinit_lock_release>
 801f0b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f0b8:	6523      	str	r3, [r4, #80]	; 0x50
 801f0ba:	4b13      	ldr	r3, [pc, #76]	; (801f108 <__sinit+0x68>)
 801f0bc:	4a13      	ldr	r2, [pc, #76]	; (801f10c <__sinit+0x6c>)
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	62a2      	str	r2, [r4, #40]	; 0x28
 801f0c2:	42a3      	cmp	r3, r4
 801f0c4:	bf04      	itt	eq
 801f0c6:	2301      	moveq	r3, #1
 801f0c8:	61a3      	streq	r3, [r4, #24]
 801f0ca:	4620      	mov	r0, r4
 801f0cc:	f000 f820 	bl	801f110 <__sfp>
 801f0d0:	6060      	str	r0, [r4, #4]
 801f0d2:	4620      	mov	r0, r4
 801f0d4:	f000 f81c 	bl	801f110 <__sfp>
 801f0d8:	60a0      	str	r0, [r4, #8]
 801f0da:	4620      	mov	r0, r4
 801f0dc:	f000 f818 	bl	801f110 <__sfp>
 801f0e0:	2200      	movs	r2, #0
 801f0e2:	60e0      	str	r0, [r4, #12]
 801f0e4:	2104      	movs	r1, #4
 801f0e6:	6860      	ldr	r0, [r4, #4]
 801f0e8:	f7ff ff82 	bl	801eff0 <std>
 801f0ec:	68a0      	ldr	r0, [r4, #8]
 801f0ee:	2201      	movs	r2, #1
 801f0f0:	2109      	movs	r1, #9
 801f0f2:	f7ff ff7d 	bl	801eff0 <std>
 801f0f6:	68e0      	ldr	r0, [r4, #12]
 801f0f8:	2202      	movs	r2, #2
 801f0fa:	2112      	movs	r1, #18
 801f0fc:	f7ff ff78 	bl	801eff0 <std>
 801f100:	2301      	movs	r3, #1
 801f102:	61a3      	str	r3, [r4, #24]
 801f104:	e7d2      	b.n	801f0ac <__sinit+0xc>
 801f106:	bf00      	nop
 801f108:	08024140 	.word	0x08024140
 801f10c:	0801f039 	.word	0x0801f039

0801f110 <__sfp>:
 801f110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f112:	4607      	mov	r7, r0
 801f114:	f7ff ffac 	bl	801f070 <__sfp_lock_acquire>
 801f118:	4b1e      	ldr	r3, [pc, #120]	; (801f194 <__sfp+0x84>)
 801f11a:	681e      	ldr	r6, [r3, #0]
 801f11c:	69b3      	ldr	r3, [r6, #24]
 801f11e:	b913      	cbnz	r3, 801f126 <__sfp+0x16>
 801f120:	4630      	mov	r0, r6
 801f122:	f7ff ffbd 	bl	801f0a0 <__sinit>
 801f126:	3648      	adds	r6, #72	; 0x48
 801f128:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f12c:	3b01      	subs	r3, #1
 801f12e:	d503      	bpl.n	801f138 <__sfp+0x28>
 801f130:	6833      	ldr	r3, [r6, #0]
 801f132:	b30b      	cbz	r3, 801f178 <__sfp+0x68>
 801f134:	6836      	ldr	r6, [r6, #0]
 801f136:	e7f7      	b.n	801f128 <__sfp+0x18>
 801f138:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f13c:	b9d5      	cbnz	r5, 801f174 <__sfp+0x64>
 801f13e:	4b16      	ldr	r3, [pc, #88]	; (801f198 <__sfp+0x88>)
 801f140:	60e3      	str	r3, [r4, #12]
 801f142:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f146:	6665      	str	r5, [r4, #100]	; 0x64
 801f148:	f000 f86c 	bl	801f224 <__retarget_lock_init_recursive>
 801f14c:	f7ff ff96 	bl	801f07c <__sfp_lock_release>
 801f150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f158:	6025      	str	r5, [r4, #0]
 801f15a:	61a5      	str	r5, [r4, #24]
 801f15c:	2208      	movs	r2, #8
 801f15e:	4629      	mov	r1, r5
 801f160:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f164:	f000 f8fe 	bl	801f364 <memset>
 801f168:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f16c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f170:	4620      	mov	r0, r4
 801f172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f174:	3468      	adds	r4, #104	; 0x68
 801f176:	e7d9      	b.n	801f12c <__sfp+0x1c>
 801f178:	2104      	movs	r1, #4
 801f17a:	4638      	mov	r0, r7
 801f17c:	f7ff ff62 	bl	801f044 <__sfmoreglue>
 801f180:	4604      	mov	r4, r0
 801f182:	6030      	str	r0, [r6, #0]
 801f184:	2800      	cmp	r0, #0
 801f186:	d1d5      	bne.n	801f134 <__sfp+0x24>
 801f188:	f7ff ff78 	bl	801f07c <__sfp_lock_release>
 801f18c:	230c      	movs	r3, #12
 801f18e:	603b      	str	r3, [r7, #0]
 801f190:	e7ee      	b.n	801f170 <__sfp+0x60>
 801f192:	bf00      	nop
 801f194:	08024140 	.word	0x08024140
 801f198:	ffff0001 	.word	0xffff0001

0801f19c <_fwalk_reent>:
 801f19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f1a0:	4606      	mov	r6, r0
 801f1a2:	4688      	mov	r8, r1
 801f1a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f1a8:	2700      	movs	r7, #0
 801f1aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f1ae:	f1b9 0901 	subs.w	r9, r9, #1
 801f1b2:	d505      	bpl.n	801f1c0 <_fwalk_reent+0x24>
 801f1b4:	6824      	ldr	r4, [r4, #0]
 801f1b6:	2c00      	cmp	r4, #0
 801f1b8:	d1f7      	bne.n	801f1aa <_fwalk_reent+0xe>
 801f1ba:	4638      	mov	r0, r7
 801f1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f1c0:	89ab      	ldrh	r3, [r5, #12]
 801f1c2:	2b01      	cmp	r3, #1
 801f1c4:	d907      	bls.n	801f1d6 <_fwalk_reent+0x3a>
 801f1c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f1ca:	3301      	adds	r3, #1
 801f1cc:	d003      	beq.n	801f1d6 <_fwalk_reent+0x3a>
 801f1ce:	4629      	mov	r1, r5
 801f1d0:	4630      	mov	r0, r6
 801f1d2:	47c0      	blx	r8
 801f1d4:	4307      	orrs	r7, r0
 801f1d6:	3568      	adds	r5, #104	; 0x68
 801f1d8:	e7e9      	b.n	801f1ae <_fwalk_reent+0x12>
	...

0801f1dc <__libc_init_array>:
 801f1dc:	b570      	push	{r4, r5, r6, lr}
 801f1de:	4d0d      	ldr	r5, [pc, #52]	; (801f214 <__libc_init_array+0x38>)
 801f1e0:	4c0d      	ldr	r4, [pc, #52]	; (801f218 <__libc_init_array+0x3c>)
 801f1e2:	1b64      	subs	r4, r4, r5
 801f1e4:	10a4      	asrs	r4, r4, #2
 801f1e6:	2600      	movs	r6, #0
 801f1e8:	42a6      	cmp	r6, r4
 801f1ea:	d109      	bne.n	801f200 <__libc_init_array+0x24>
 801f1ec:	4d0b      	ldr	r5, [pc, #44]	; (801f21c <__libc_init_array+0x40>)
 801f1ee:	4c0c      	ldr	r4, [pc, #48]	; (801f220 <__libc_init_array+0x44>)
 801f1f0:	f004 f8b0 	bl	8023354 <_init>
 801f1f4:	1b64      	subs	r4, r4, r5
 801f1f6:	10a4      	asrs	r4, r4, #2
 801f1f8:	2600      	movs	r6, #0
 801f1fa:	42a6      	cmp	r6, r4
 801f1fc:	d105      	bne.n	801f20a <__libc_init_array+0x2e>
 801f1fe:	bd70      	pop	{r4, r5, r6, pc}
 801f200:	f855 3b04 	ldr.w	r3, [r5], #4
 801f204:	4798      	blx	r3
 801f206:	3601      	adds	r6, #1
 801f208:	e7ee      	b.n	801f1e8 <__libc_init_array+0xc>
 801f20a:	f855 3b04 	ldr.w	r3, [r5], #4
 801f20e:	4798      	blx	r3
 801f210:	3601      	adds	r6, #1
 801f212:	e7f2      	b.n	801f1fa <__libc_init_array+0x1e>
 801f214:	0802448c 	.word	0x0802448c
 801f218:	0802448c 	.word	0x0802448c
 801f21c:	0802448c 	.word	0x0802448c
 801f220:	08024490 	.word	0x08024490

0801f224 <__retarget_lock_init_recursive>:
 801f224:	4770      	bx	lr

0801f226 <__retarget_lock_acquire_recursive>:
 801f226:	4770      	bx	lr

0801f228 <__retarget_lock_release_recursive>:
 801f228:	4770      	bx	lr

0801f22a <__swhatbuf_r>:
 801f22a:	b570      	push	{r4, r5, r6, lr}
 801f22c:	460e      	mov	r6, r1
 801f22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f232:	2900      	cmp	r1, #0
 801f234:	b096      	sub	sp, #88	; 0x58
 801f236:	4614      	mov	r4, r2
 801f238:	461d      	mov	r5, r3
 801f23a:	da07      	bge.n	801f24c <__swhatbuf_r+0x22>
 801f23c:	2300      	movs	r3, #0
 801f23e:	602b      	str	r3, [r5, #0]
 801f240:	89b3      	ldrh	r3, [r6, #12]
 801f242:	061a      	lsls	r2, r3, #24
 801f244:	d410      	bmi.n	801f268 <__swhatbuf_r+0x3e>
 801f246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f24a:	e00e      	b.n	801f26a <__swhatbuf_r+0x40>
 801f24c:	466a      	mov	r2, sp
 801f24e:	f002 fc77 	bl	8021b40 <_fstat_r>
 801f252:	2800      	cmp	r0, #0
 801f254:	dbf2      	blt.n	801f23c <__swhatbuf_r+0x12>
 801f256:	9a01      	ldr	r2, [sp, #4]
 801f258:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f25c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f260:	425a      	negs	r2, r3
 801f262:	415a      	adcs	r2, r3
 801f264:	602a      	str	r2, [r5, #0]
 801f266:	e7ee      	b.n	801f246 <__swhatbuf_r+0x1c>
 801f268:	2340      	movs	r3, #64	; 0x40
 801f26a:	2000      	movs	r0, #0
 801f26c:	6023      	str	r3, [r4, #0]
 801f26e:	b016      	add	sp, #88	; 0x58
 801f270:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f274 <__smakebuf_r>:
 801f274:	898b      	ldrh	r3, [r1, #12]
 801f276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f278:	079d      	lsls	r5, r3, #30
 801f27a:	4606      	mov	r6, r0
 801f27c:	460c      	mov	r4, r1
 801f27e:	d507      	bpl.n	801f290 <__smakebuf_r+0x1c>
 801f280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f284:	6023      	str	r3, [r4, #0]
 801f286:	6123      	str	r3, [r4, #16]
 801f288:	2301      	movs	r3, #1
 801f28a:	6163      	str	r3, [r4, #20]
 801f28c:	b002      	add	sp, #8
 801f28e:	bd70      	pop	{r4, r5, r6, pc}
 801f290:	ab01      	add	r3, sp, #4
 801f292:	466a      	mov	r2, sp
 801f294:	f7ff ffc9 	bl	801f22a <__swhatbuf_r>
 801f298:	9900      	ldr	r1, [sp, #0]
 801f29a:	4605      	mov	r5, r0
 801f29c:	4630      	mov	r0, r6
 801f29e:	f000 f8c9 	bl	801f434 <_malloc_r>
 801f2a2:	b948      	cbnz	r0, 801f2b8 <__smakebuf_r+0x44>
 801f2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2a8:	059a      	lsls	r2, r3, #22
 801f2aa:	d4ef      	bmi.n	801f28c <__smakebuf_r+0x18>
 801f2ac:	f023 0303 	bic.w	r3, r3, #3
 801f2b0:	f043 0302 	orr.w	r3, r3, #2
 801f2b4:	81a3      	strh	r3, [r4, #12]
 801f2b6:	e7e3      	b.n	801f280 <__smakebuf_r+0xc>
 801f2b8:	4b0d      	ldr	r3, [pc, #52]	; (801f2f0 <__smakebuf_r+0x7c>)
 801f2ba:	62b3      	str	r3, [r6, #40]	; 0x28
 801f2bc:	89a3      	ldrh	r3, [r4, #12]
 801f2be:	6020      	str	r0, [r4, #0]
 801f2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f2c4:	81a3      	strh	r3, [r4, #12]
 801f2c6:	9b00      	ldr	r3, [sp, #0]
 801f2c8:	6163      	str	r3, [r4, #20]
 801f2ca:	9b01      	ldr	r3, [sp, #4]
 801f2cc:	6120      	str	r0, [r4, #16]
 801f2ce:	b15b      	cbz	r3, 801f2e8 <__smakebuf_r+0x74>
 801f2d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f2d4:	4630      	mov	r0, r6
 801f2d6:	f002 ffb5 	bl	8022244 <_isatty_r>
 801f2da:	b128      	cbz	r0, 801f2e8 <__smakebuf_r+0x74>
 801f2dc:	89a3      	ldrh	r3, [r4, #12]
 801f2de:	f023 0303 	bic.w	r3, r3, #3
 801f2e2:	f043 0301 	orr.w	r3, r3, #1
 801f2e6:	81a3      	strh	r3, [r4, #12]
 801f2e8:	89a0      	ldrh	r0, [r4, #12]
 801f2ea:	4305      	orrs	r5, r0
 801f2ec:	81a5      	strh	r5, [r4, #12]
 801f2ee:	e7cd      	b.n	801f28c <__smakebuf_r+0x18>
 801f2f0:	0801f039 	.word	0x0801f039

0801f2f4 <malloc>:
 801f2f4:	4b02      	ldr	r3, [pc, #8]	; (801f300 <malloc+0xc>)
 801f2f6:	4601      	mov	r1, r0
 801f2f8:	6818      	ldr	r0, [r3, #0]
 801f2fa:	f000 b89b 	b.w	801f434 <_malloc_r>
 801f2fe:	bf00      	nop
 801f300:	200002b8 	.word	0x200002b8

0801f304 <free>:
 801f304:	4b02      	ldr	r3, [pc, #8]	; (801f310 <free+0xc>)
 801f306:	4601      	mov	r1, r0
 801f308:	6818      	ldr	r0, [r3, #0]
 801f30a:	f000 b843 	b.w	801f394 <_free_r>
 801f30e:	bf00      	nop
 801f310:	200002b8 	.word	0x200002b8

0801f314 <memcpy>:
 801f314:	440a      	add	r2, r1
 801f316:	4291      	cmp	r1, r2
 801f318:	f100 33ff 	add.w	r3, r0, #4294967295
 801f31c:	d100      	bne.n	801f320 <memcpy+0xc>
 801f31e:	4770      	bx	lr
 801f320:	b510      	push	{r4, lr}
 801f322:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f326:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f32a:	4291      	cmp	r1, r2
 801f32c:	d1f9      	bne.n	801f322 <memcpy+0xe>
 801f32e:	bd10      	pop	{r4, pc}

0801f330 <memmove>:
 801f330:	4288      	cmp	r0, r1
 801f332:	b510      	push	{r4, lr}
 801f334:	eb01 0402 	add.w	r4, r1, r2
 801f338:	d902      	bls.n	801f340 <memmove+0x10>
 801f33a:	4284      	cmp	r4, r0
 801f33c:	4623      	mov	r3, r4
 801f33e:	d807      	bhi.n	801f350 <memmove+0x20>
 801f340:	1e43      	subs	r3, r0, #1
 801f342:	42a1      	cmp	r1, r4
 801f344:	d008      	beq.n	801f358 <memmove+0x28>
 801f346:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f34a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f34e:	e7f8      	b.n	801f342 <memmove+0x12>
 801f350:	4402      	add	r2, r0
 801f352:	4601      	mov	r1, r0
 801f354:	428a      	cmp	r2, r1
 801f356:	d100      	bne.n	801f35a <memmove+0x2a>
 801f358:	bd10      	pop	{r4, pc}
 801f35a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f35e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f362:	e7f7      	b.n	801f354 <memmove+0x24>

0801f364 <memset>:
 801f364:	4402      	add	r2, r0
 801f366:	4603      	mov	r3, r0
 801f368:	4293      	cmp	r3, r2
 801f36a:	d100      	bne.n	801f36e <memset+0xa>
 801f36c:	4770      	bx	lr
 801f36e:	f803 1b01 	strb.w	r1, [r3], #1
 801f372:	e7f9      	b.n	801f368 <memset+0x4>

0801f374 <_calloc_r>:
 801f374:	b513      	push	{r0, r1, r4, lr}
 801f376:	434a      	muls	r2, r1
 801f378:	4611      	mov	r1, r2
 801f37a:	9201      	str	r2, [sp, #4]
 801f37c:	f000 f85a 	bl	801f434 <_malloc_r>
 801f380:	4604      	mov	r4, r0
 801f382:	b118      	cbz	r0, 801f38c <_calloc_r+0x18>
 801f384:	9a01      	ldr	r2, [sp, #4]
 801f386:	2100      	movs	r1, #0
 801f388:	f7ff ffec 	bl	801f364 <memset>
 801f38c:	4620      	mov	r0, r4
 801f38e:	b002      	add	sp, #8
 801f390:	bd10      	pop	{r4, pc}
	...

0801f394 <_free_r>:
 801f394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f396:	2900      	cmp	r1, #0
 801f398:	d048      	beq.n	801f42c <_free_r+0x98>
 801f39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f39e:	9001      	str	r0, [sp, #4]
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	f1a1 0404 	sub.w	r4, r1, #4
 801f3a6:	bfb8      	it	lt
 801f3a8:	18e4      	addlt	r4, r4, r3
 801f3aa:	f002 ff83 	bl	80222b4 <__malloc_lock>
 801f3ae:	4a20      	ldr	r2, [pc, #128]	; (801f430 <_free_r+0x9c>)
 801f3b0:	9801      	ldr	r0, [sp, #4]
 801f3b2:	6813      	ldr	r3, [r2, #0]
 801f3b4:	4615      	mov	r5, r2
 801f3b6:	b933      	cbnz	r3, 801f3c6 <_free_r+0x32>
 801f3b8:	6063      	str	r3, [r4, #4]
 801f3ba:	6014      	str	r4, [r2, #0]
 801f3bc:	b003      	add	sp, #12
 801f3be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f3c2:	f002 bf7d 	b.w	80222c0 <__malloc_unlock>
 801f3c6:	42a3      	cmp	r3, r4
 801f3c8:	d90b      	bls.n	801f3e2 <_free_r+0x4e>
 801f3ca:	6821      	ldr	r1, [r4, #0]
 801f3cc:	1862      	adds	r2, r4, r1
 801f3ce:	4293      	cmp	r3, r2
 801f3d0:	bf04      	itt	eq
 801f3d2:	681a      	ldreq	r2, [r3, #0]
 801f3d4:	685b      	ldreq	r3, [r3, #4]
 801f3d6:	6063      	str	r3, [r4, #4]
 801f3d8:	bf04      	itt	eq
 801f3da:	1852      	addeq	r2, r2, r1
 801f3dc:	6022      	streq	r2, [r4, #0]
 801f3de:	602c      	str	r4, [r5, #0]
 801f3e0:	e7ec      	b.n	801f3bc <_free_r+0x28>
 801f3e2:	461a      	mov	r2, r3
 801f3e4:	685b      	ldr	r3, [r3, #4]
 801f3e6:	b10b      	cbz	r3, 801f3ec <_free_r+0x58>
 801f3e8:	42a3      	cmp	r3, r4
 801f3ea:	d9fa      	bls.n	801f3e2 <_free_r+0x4e>
 801f3ec:	6811      	ldr	r1, [r2, #0]
 801f3ee:	1855      	adds	r5, r2, r1
 801f3f0:	42a5      	cmp	r5, r4
 801f3f2:	d10b      	bne.n	801f40c <_free_r+0x78>
 801f3f4:	6824      	ldr	r4, [r4, #0]
 801f3f6:	4421      	add	r1, r4
 801f3f8:	1854      	adds	r4, r2, r1
 801f3fa:	42a3      	cmp	r3, r4
 801f3fc:	6011      	str	r1, [r2, #0]
 801f3fe:	d1dd      	bne.n	801f3bc <_free_r+0x28>
 801f400:	681c      	ldr	r4, [r3, #0]
 801f402:	685b      	ldr	r3, [r3, #4]
 801f404:	6053      	str	r3, [r2, #4]
 801f406:	4421      	add	r1, r4
 801f408:	6011      	str	r1, [r2, #0]
 801f40a:	e7d7      	b.n	801f3bc <_free_r+0x28>
 801f40c:	d902      	bls.n	801f414 <_free_r+0x80>
 801f40e:	230c      	movs	r3, #12
 801f410:	6003      	str	r3, [r0, #0]
 801f412:	e7d3      	b.n	801f3bc <_free_r+0x28>
 801f414:	6825      	ldr	r5, [r4, #0]
 801f416:	1961      	adds	r1, r4, r5
 801f418:	428b      	cmp	r3, r1
 801f41a:	bf04      	itt	eq
 801f41c:	6819      	ldreq	r1, [r3, #0]
 801f41e:	685b      	ldreq	r3, [r3, #4]
 801f420:	6063      	str	r3, [r4, #4]
 801f422:	bf04      	itt	eq
 801f424:	1949      	addeq	r1, r1, r5
 801f426:	6021      	streq	r1, [r4, #0]
 801f428:	6054      	str	r4, [r2, #4]
 801f42a:	e7c7      	b.n	801f3bc <_free_r+0x28>
 801f42c:	b003      	add	sp, #12
 801f42e:	bd30      	pop	{r4, r5, pc}
 801f430:	20010254 	.word	0x20010254

0801f434 <_malloc_r>:
 801f434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f436:	1ccd      	adds	r5, r1, #3
 801f438:	f025 0503 	bic.w	r5, r5, #3
 801f43c:	3508      	adds	r5, #8
 801f43e:	2d0c      	cmp	r5, #12
 801f440:	bf38      	it	cc
 801f442:	250c      	movcc	r5, #12
 801f444:	2d00      	cmp	r5, #0
 801f446:	4606      	mov	r6, r0
 801f448:	db01      	blt.n	801f44e <_malloc_r+0x1a>
 801f44a:	42a9      	cmp	r1, r5
 801f44c:	d903      	bls.n	801f456 <_malloc_r+0x22>
 801f44e:	230c      	movs	r3, #12
 801f450:	6033      	str	r3, [r6, #0]
 801f452:	2000      	movs	r0, #0
 801f454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f456:	f002 ff2d 	bl	80222b4 <__malloc_lock>
 801f45a:	4921      	ldr	r1, [pc, #132]	; (801f4e0 <_malloc_r+0xac>)
 801f45c:	680a      	ldr	r2, [r1, #0]
 801f45e:	4614      	mov	r4, r2
 801f460:	b99c      	cbnz	r4, 801f48a <_malloc_r+0x56>
 801f462:	4f20      	ldr	r7, [pc, #128]	; (801f4e4 <_malloc_r+0xb0>)
 801f464:	683b      	ldr	r3, [r7, #0]
 801f466:	b923      	cbnz	r3, 801f472 <_malloc_r+0x3e>
 801f468:	4621      	mov	r1, r4
 801f46a:	4630      	mov	r0, r6
 801f46c:	f000 fca6 	bl	801fdbc <_sbrk_r>
 801f470:	6038      	str	r0, [r7, #0]
 801f472:	4629      	mov	r1, r5
 801f474:	4630      	mov	r0, r6
 801f476:	f000 fca1 	bl	801fdbc <_sbrk_r>
 801f47a:	1c43      	adds	r3, r0, #1
 801f47c:	d123      	bne.n	801f4c6 <_malloc_r+0x92>
 801f47e:	230c      	movs	r3, #12
 801f480:	6033      	str	r3, [r6, #0]
 801f482:	4630      	mov	r0, r6
 801f484:	f002 ff1c 	bl	80222c0 <__malloc_unlock>
 801f488:	e7e3      	b.n	801f452 <_malloc_r+0x1e>
 801f48a:	6823      	ldr	r3, [r4, #0]
 801f48c:	1b5b      	subs	r3, r3, r5
 801f48e:	d417      	bmi.n	801f4c0 <_malloc_r+0x8c>
 801f490:	2b0b      	cmp	r3, #11
 801f492:	d903      	bls.n	801f49c <_malloc_r+0x68>
 801f494:	6023      	str	r3, [r4, #0]
 801f496:	441c      	add	r4, r3
 801f498:	6025      	str	r5, [r4, #0]
 801f49a:	e004      	b.n	801f4a6 <_malloc_r+0x72>
 801f49c:	6863      	ldr	r3, [r4, #4]
 801f49e:	42a2      	cmp	r2, r4
 801f4a0:	bf0c      	ite	eq
 801f4a2:	600b      	streq	r3, [r1, #0]
 801f4a4:	6053      	strne	r3, [r2, #4]
 801f4a6:	4630      	mov	r0, r6
 801f4a8:	f002 ff0a 	bl	80222c0 <__malloc_unlock>
 801f4ac:	f104 000b 	add.w	r0, r4, #11
 801f4b0:	1d23      	adds	r3, r4, #4
 801f4b2:	f020 0007 	bic.w	r0, r0, #7
 801f4b6:	1ac2      	subs	r2, r0, r3
 801f4b8:	d0cc      	beq.n	801f454 <_malloc_r+0x20>
 801f4ba:	1a1b      	subs	r3, r3, r0
 801f4bc:	50a3      	str	r3, [r4, r2]
 801f4be:	e7c9      	b.n	801f454 <_malloc_r+0x20>
 801f4c0:	4622      	mov	r2, r4
 801f4c2:	6864      	ldr	r4, [r4, #4]
 801f4c4:	e7cc      	b.n	801f460 <_malloc_r+0x2c>
 801f4c6:	1cc4      	adds	r4, r0, #3
 801f4c8:	f024 0403 	bic.w	r4, r4, #3
 801f4cc:	42a0      	cmp	r0, r4
 801f4ce:	d0e3      	beq.n	801f498 <_malloc_r+0x64>
 801f4d0:	1a21      	subs	r1, r4, r0
 801f4d2:	4630      	mov	r0, r6
 801f4d4:	f000 fc72 	bl	801fdbc <_sbrk_r>
 801f4d8:	3001      	adds	r0, #1
 801f4da:	d1dd      	bne.n	801f498 <_malloc_r+0x64>
 801f4dc:	e7cf      	b.n	801f47e <_malloc_r+0x4a>
 801f4de:	bf00      	nop
 801f4e0:	20010254 	.word	0x20010254
 801f4e4:	20010258 	.word	0x20010258

0801f4e8 <__cvt>:
 801f4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f4ec:	ec55 4b10 	vmov	r4, r5, d0
 801f4f0:	2d00      	cmp	r5, #0
 801f4f2:	460e      	mov	r6, r1
 801f4f4:	4619      	mov	r1, r3
 801f4f6:	462b      	mov	r3, r5
 801f4f8:	bfbb      	ittet	lt
 801f4fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f4fe:	461d      	movlt	r5, r3
 801f500:	2300      	movge	r3, #0
 801f502:	232d      	movlt	r3, #45	; 0x2d
 801f504:	700b      	strb	r3, [r1, #0]
 801f506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f50c:	4691      	mov	r9, r2
 801f50e:	f023 0820 	bic.w	r8, r3, #32
 801f512:	bfbc      	itt	lt
 801f514:	4622      	movlt	r2, r4
 801f516:	4614      	movlt	r4, r2
 801f518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f51c:	d005      	beq.n	801f52a <__cvt+0x42>
 801f51e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801f522:	d100      	bne.n	801f526 <__cvt+0x3e>
 801f524:	3601      	adds	r6, #1
 801f526:	2102      	movs	r1, #2
 801f528:	e000      	b.n	801f52c <__cvt+0x44>
 801f52a:	2103      	movs	r1, #3
 801f52c:	ab03      	add	r3, sp, #12
 801f52e:	9301      	str	r3, [sp, #4]
 801f530:	ab02      	add	r3, sp, #8
 801f532:	9300      	str	r3, [sp, #0]
 801f534:	ec45 4b10 	vmov	d0, r4, r5
 801f538:	4653      	mov	r3, sl
 801f53a:	4632      	mov	r2, r6
 801f53c:	f001 fd14 	bl	8020f68 <_dtoa_r>
 801f540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f544:	4607      	mov	r7, r0
 801f546:	d102      	bne.n	801f54e <__cvt+0x66>
 801f548:	f019 0f01 	tst.w	r9, #1
 801f54c:	d022      	beq.n	801f594 <__cvt+0xac>
 801f54e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f552:	eb07 0906 	add.w	r9, r7, r6
 801f556:	d110      	bne.n	801f57a <__cvt+0x92>
 801f558:	783b      	ldrb	r3, [r7, #0]
 801f55a:	2b30      	cmp	r3, #48	; 0x30
 801f55c:	d10a      	bne.n	801f574 <__cvt+0x8c>
 801f55e:	2200      	movs	r2, #0
 801f560:	2300      	movs	r3, #0
 801f562:	4620      	mov	r0, r4
 801f564:	4629      	mov	r1, r5
 801f566:	f7e1 fad7 	bl	8000b18 <__aeabi_dcmpeq>
 801f56a:	b918      	cbnz	r0, 801f574 <__cvt+0x8c>
 801f56c:	f1c6 0601 	rsb	r6, r6, #1
 801f570:	f8ca 6000 	str.w	r6, [sl]
 801f574:	f8da 3000 	ldr.w	r3, [sl]
 801f578:	4499      	add	r9, r3
 801f57a:	2200      	movs	r2, #0
 801f57c:	2300      	movs	r3, #0
 801f57e:	4620      	mov	r0, r4
 801f580:	4629      	mov	r1, r5
 801f582:	f7e1 fac9 	bl	8000b18 <__aeabi_dcmpeq>
 801f586:	b108      	cbz	r0, 801f58c <__cvt+0xa4>
 801f588:	f8cd 900c 	str.w	r9, [sp, #12]
 801f58c:	2230      	movs	r2, #48	; 0x30
 801f58e:	9b03      	ldr	r3, [sp, #12]
 801f590:	454b      	cmp	r3, r9
 801f592:	d307      	bcc.n	801f5a4 <__cvt+0xbc>
 801f594:	9b03      	ldr	r3, [sp, #12]
 801f596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f598:	1bdb      	subs	r3, r3, r7
 801f59a:	4638      	mov	r0, r7
 801f59c:	6013      	str	r3, [r2, #0]
 801f59e:	b004      	add	sp, #16
 801f5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5a4:	1c59      	adds	r1, r3, #1
 801f5a6:	9103      	str	r1, [sp, #12]
 801f5a8:	701a      	strb	r2, [r3, #0]
 801f5aa:	e7f0      	b.n	801f58e <__cvt+0xa6>

0801f5ac <__exponent>:
 801f5ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f5ae:	4603      	mov	r3, r0
 801f5b0:	2900      	cmp	r1, #0
 801f5b2:	bfb8      	it	lt
 801f5b4:	4249      	neglt	r1, r1
 801f5b6:	f803 2b02 	strb.w	r2, [r3], #2
 801f5ba:	bfb4      	ite	lt
 801f5bc:	222d      	movlt	r2, #45	; 0x2d
 801f5be:	222b      	movge	r2, #43	; 0x2b
 801f5c0:	2909      	cmp	r1, #9
 801f5c2:	7042      	strb	r2, [r0, #1]
 801f5c4:	dd2a      	ble.n	801f61c <__exponent+0x70>
 801f5c6:	f10d 0407 	add.w	r4, sp, #7
 801f5ca:	46a4      	mov	ip, r4
 801f5cc:	270a      	movs	r7, #10
 801f5ce:	46a6      	mov	lr, r4
 801f5d0:	460a      	mov	r2, r1
 801f5d2:	fb91 f6f7 	sdiv	r6, r1, r7
 801f5d6:	fb07 1516 	mls	r5, r7, r6, r1
 801f5da:	3530      	adds	r5, #48	; 0x30
 801f5dc:	2a63      	cmp	r2, #99	; 0x63
 801f5de:	f104 34ff 	add.w	r4, r4, #4294967295
 801f5e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f5e6:	4631      	mov	r1, r6
 801f5e8:	dcf1      	bgt.n	801f5ce <__exponent+0x22>
 801f5ea:	3130      	adds	r1, #48	; 0x30
 801f5ec:	f1ae 0502 	sub.w	r5, lr, #2
 801f5f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f5f4:	1c44      	adds	r4, r0, #1
 801f5f6:	4629      	mov	r1, r5
 801f5f8:	4561      	cmp	r1, ip
 801f5fa:	d30a      	bcc.n	801f612 <__exponent+0x66>
 801f5fc:	f10d 0209 	add.w	r2, sp, #9
 801f600:	eba2 020e 	sub.w	r2, r2, lr
 801f604:	4565      	cmp	r5, ip
 801f606:	bf88      	it	hi
 801f608:	2200      	movhi	r2, #0
 801f60a:	4413      	add	r3, r2
 801f60c:	1a18      	subs	r0, r3, r0
 801f60e:	b003      	add	sp, #12
 801f610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f612:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f616:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f61a:	e7ed      	b.n	801f5f8 <__exponent+0x4c>
 801f61c:	2330      	movs	r3, #48	; 0x30
 801f61e:	3130      	adds	r1, #48	; 0x30
 801f620:	7083      	strb	r3, [r0, #2]
 801f622:	70c1      	strb	r1, [r0, #3]
 801f624:	1d03      	adds	r3, r0, #4
 801f626:	e7f1      	b.n	801f60c <__exponent+0x60>

0801f628 <_printf_float>:
 801f628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f62c:	ed2d 8b02 	vpush	{d8}
 801f630:	b08d      	sub	sp, #52	; 0x34
 801f632:	460c      	mov	r4, r1
 801f634:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f638:	4616      	mov	r6, r2
 801f63a:	461f      	mov	r7, r3
 801f63c:	4605      	mov	r5, r0
 801f63e:	f002 fe11 	bl	8022264 <_localeconv_r>
 801f642:	f8d0 a000 	ldr.w	sl, [r0]
 801f646:	4650      	mov	r0, sl
 801f648:	f7e0 fde4 	bl	8000214 <strlen>
 801f64c:	2300      	movs	r3, #0
 801f64e:	930a      	str	r3, [sp, #40]	; 0x28
 801f650:	6823      	ldr	r3, [r4, #0]
 801f652:	9305      	str	r3, [sp, #20]
 801f654:	f8d8 3000 	ldr.w	r3, [r8]
 801f658:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f65c:	3307      	adds	r3, #7
 801f65e:	f023 0307 	bic.w	r3, r3, #7
 801f662:	f103 0208 	add.w	r2, r3, #8
 801f666:	f8c8 2000 	str.w	r2, [r8]
 801f66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f66e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f672:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f67a:	9307      	str	r3, [sp, #28]
 801f67c:	f8cd 8018 	str.w	r8, [sp, #24]
 801f680:	ee08 0a10 	vmov	s16, r0
 801f684:	4b9f      	ldr	r3, [pc, #636]	; (801f904 <_printf_float+0x2dc>)
 801f686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f68a:	f04f 32ff 	mov.w	r2, #4294967295
 801f68e:	f7e1 fa75 	bl	8000b7c <__aeabi_dcmpun>
 801f692:	bb88      	cbnz	r0, 801f6f8 <_printf_float+0xd0>
 801f694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f698:	4b9a      	ldr	r3, [pc, #616]	; (801f904 <_printf_float+0x2dc>)
 801f69a:	f04f 32ff 	mov.w	r2, #4294967295
 801f69e:	f7e1 fa4f 	bl	8000b40 <__aeabi_dcmple>
 801f6a2:	bb48      	cbnz	r0, 801f6f8 <_printf_float+0xd0>
 801f6a4:	2200      	movs	r2, #0
 801f6a6:	2300      	movs	r3, #0
 801f6a8:	4640      	mov	r0, r8
 801f6aa:	4649      	mov	r1, r9
 801f6ac:	f7e1 fa3e 	bl	8000b2c <__aeabi_dcmplt>
 801f6b0:	b110      	cbz	r0, 801f6b8 <_printf_float+0x90>
 801f6b2:	232d      	movs	r3, #45	; 0x2d
 801f6b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f6b8:	4b93      	ldr	r3, [pc, #588]	; (801f908 <_printf_float+0x2e0>)
 801f6ba:	4894      	ldr	r0, [pc, #592]	; (801f90c <_printf_float+0x2e4>)
 801f6bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f6c0:	bf94      	ite	ls
 801f6c2:	4698      	movls	r8, r3
 801f6c4:	4680      	movhi	r8, r0
 801f6c6:	2303      	movs	r3, #3
 801f6c8:	6123      	str	r3, [r4, #16]
 801f6ca:	9b05      	ldr	r3, [sp, #20]
 801f6cc:	f023 0204 	bic.w	r2, r3, #4
 801f6d0:	6022      	str	r2, [r4, #0]
 801f6d2:	f04f 0900 	mov.w	r9, #0
 801f6d6:	9700      	str	r7, [sp, #0]
 801f6d8:	4633      	mov	r3, r6
 801f6da:	aa0b      	add	r2, sp, #44	; 0x2c
 801f6dc:	4621      	mov	r1, r4
 801f6de:	4628      	mov	r0, r5
 801f6e0:	f000 f9d8 	bl	801fa94 <_printf_common>
 801f6e4:	3001      	adds	r0, #1
 801f6e6:	f040 8090 	bne.w	801f80a <_printf_float+0x1e2>
 801f6ea:	f04f 30ff 	mov.w	r0, #4294967295
 801f6ee:	b00d      	add	sp, #52	; 0x34
 801f6f0:	ecbd 8b02 	vpop	{d8}
 801f6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6f8:	4642      	mov	r2, r8
 801f6fa:	464b      	mov	r3, r9
 801f6fc:	4640      	mov	r0, r8
 801f6fe:	4649      	mov	r1, r9
 801f700:	f7e1 fa3c 	bl	8000b7c <__aeabi_dcmpun>
 801f704:	b140      	cbz	r0, 801f718 <_printf_float+0xf0>
 801f706:	464b      	mov	r3, r9
 801f708:	2b00      	cmp	r3, #0
 801f70a:	bfbc      	itt	lt
 801f70c:	232d      	movlt	r3, #45	; 0x2d
 801f70e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f712:	487f      	ldr	r0, [pc, #508]	; (801f910 <_printf_float+0x2e8>)
 801f714:	4b7f      	ldr	r3, [pc, #508]	; (801f914 <_printf_float+0x2ec>)
 801f716:	e7d1      	b.n	801f6bc <_printf_float+0x94>
 801f718:	6863      	ldr	r3, [r4, #4]
 801f71a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f71e:	9206      	str	r2, [sp, #24]
 801f720:	1c5a      	adds	r2, r3, #1
 801f722:	d13f      	bne.n	801f7a4 <_printf_float+0x17c>
 801f724:	2306      	movs	r3, #6
 801f726:	6063      	str	r3, [r4, #4]
 801f728:	9b05      	ldr	r3, [sp, #20]
 801f72a:	6861      	ldr	r1, [r4, #4]
 801f72c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f730:	2300      	movs	r3, #0
 801f732:	9303      	str	r3, [sp, #12]
 801f734:	ab0a      	add	r3, sp, #40	; 0x28
 801f736:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f73a:	ab09      	add	r3, sp, #36	; 0x24
 801f73c:	ec49 8b10 	vmov	d0, r8, r9
 801f740:	9300      	str	r3, [sp, #0]
 801f742:	6022      	str	r2, [r4, #0]
 801f744:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f748:	4628      	mov	r0, r5
 801f74a:	f7ff fecd 	bl	801f4e8 <__cvt>
 801f74e:	9b06      	ldr	r3, [sp, #24]
 801f750:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f752:	2b47      	cmp	r3, #71	; 0x47
 801f754:	4680      	mov	r8, r0
 801f756:	d108      	bne.n	801f76a <_printf_float+0x142>
 801f758:	1cc8      	adds	r0, r1, #3
 801f75a:	db02      	blt.n	801f762 <_printf_float+0x13a>
 801f75c:	6863      	ldr	r3, [r4, #4]
 801f75e:	4299      	cmp	r1, r3
 801f760:	dd41      	ble.n	801f7e6 <_printf_float+0x1be>
 801f762:	f1ab 0b02 	sub.w	fp, fp, #2
 801f766:	fa5f fb8b 	uxtb.w	fp, fp
 801f76a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f76e:	d820      	bhi.n	801f7b2 <_printf_float+0x18a>
 801f770:	3901      	subs	r1, #1
 801f772:	465a      	mov	r2, fp
 801f774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f778:	9109      	str	r1, [sp, #36]	; 0x24
 801f77a:	f7ff ff17 	bl	801f5ac <__exponent>
 801f77e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f780:	1813      	adds	r3, r2, r0
 801f782:	2a01      	cmp	r2, #1
 801f784:	4681      	mov	r9, r0
 801f786:	6123      	str	r3, [r4, #16]
 801f788:	dc02      	bgt.n	801f790 <_printf_float+0x168>
 801f78a:	6822      	ldr	r2, [r4, #0]
 801f78c:	07d2      	lsls	r2, r2, #31
 801f78e:	d501      	bpl.n	801f794 <_printf_float+0x16c>
 801f790:	3301      	adds	r3, #1
 801f792:	6123      	str	r3, [r4, #16]
 801f794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f798:	2b00      	cmp	r3, #0
 801f79a:	d09c      	beq.n	801f6d6 <_printf_float+0xae>
 801f79c:	232d      	movs	r3, #45	; 0x2d
 801f79e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f7a2:	e798      	b.n	801f6d6 <_printf_float+0xae>
 801f7a4:	9a06      	ldr	r2, [sp, #24]
 801f7a6:	2a47      	cmp	r2, #71	; 0x47
 801f7a8:	d1be      	bne.n	801f728 <_printf_float+0x100>
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	d1bc      	bne.n	801f728 <_printf_float+0x100>
 801f7ae:	2301      	movs	r3, #1
 801f7b0:	e7b9      	b.n	801f726 <_printf_float+0xfe>
 801f7b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f7b6:	d118      	bne.n	801f7ea <_printf_float+0x1c2>
 801f7b8:	2900      	cmp	r1, #0
 801f7ba:	6863      	ldr	r3, [r4, #4]
 801f7bc:	dd0b      	ble.n	801f7d6 <_printf_float+0x1ae>
 801f7be:	6121      	str	r1, [r4, #16]
 801f7c0:	b913      	cbnz	r3, 801f7c8 <_printf_float+0x1a0>
 801f7c2:	6822      	ldr	r2, [r4, #0]
 801f7c4:	07d0      	lsls	r0, r2, #31
 801f7c6:	d502      	bpl.n	801f7ce <_printf_float+0x1a6>
 801f7c8:	3301      	adds	r3, #1
 801f7ca:	440b      	add	r3, r1
 801f7cc:	6123      	str	r3, [r4, #16]
 801f7ce:	65a1      	str	r1, [r4, #88]	; 0x58
 801f7d0:	f04f 0900 	mov.w	r9, #0
 801f7d4:	e7de      	b.n	801f794 <_printf_float+0x16c>
 801f7d6:	b913      	cbnz	r3, 801f7de <_printf_float+0x1b6>
 801f7d8:	6822      	ldr	r2, [r4, #0]
 801f7da:	07d2      	lsls	r2, r2, #31
 801f7dc:	d501      	bpl.n	801f7e2 <_printf_float+0x1ba>
 801f7de:	3302      	adds	r3, #2
 801f7e0:	e7f4      	b.n	801f7cc <_printf_float+0x1a4>
 801f7e2:	2301      	movs	r3, #1
 801f7e4:	e7f2      	b.n	801f7cc <_printf_float+0x1a4>
 801f7e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7ec:	4299      	cmp	r1, r3
 801f7ee:	db05      	blt.n	801f7fc <_printf_float+0x1d4>
 801f7f0:	6823      	ldr	r3, [r4, #0]
 801f7f2:	6121      	str	r1, [r4, #16]
 801f7f4:	07d8      	lsls	r0, r3, #31
 801f7f6:	d5ea      	bpl.n	801f7ce <_printf_float+0x1a6>
 801f7f8:	1c4b      	adds	r3, r1, #1
 801f7fa:	e7e7      	b.n	801f7cc <_printf_float+0x1a4>
 801f7fc:	2900      	cmp	r1, #0
 801f7fe:	bfd4      	ite	le
 801f800:	f1c1 0202 	rsble	r2, r1, #2
 801f804:	2201      	movgt	r2, #1
 801f806:	4413      	add	r3, r2
 801f808:	e7e0      	b.n	801f7cc <_printf_float+0x1a4>
 801f80a:	6823      	ldr	r3, [r4, #0]
 801f80c:	055a      	lsls	r2, r3, #21
 801f80e:	d407      	bmi.n	801f820 <_printf_float+0x1f8>
 801f810:	6923      	ldr	r3, [r4, #16]
 801f812:	4642      	mov	r2, r8
 801f814:	4631      	mov	r1, r6
 801f816:	4628      	mov	r0, r5
 801f818:	47b8      	blx	r7
 801f81a:	3001      	adds	r0, #1
 801f81c:	d12c      	bne.n	801f878 <_printf_float+0x250>
 801f81e:	e764      	b.n	801f6ea <_printf_float+0xc2>
 801f820:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f824:	f240 80e0 	bls.w	801f9e8 <_printf_float+0x3c0>
 801f828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f82c:	2200      	movs	r2, #0
 801f82e:	2300      	movs	r3, #0
 801f830:	f7e1 f972 	bl	8000b18 <__aeabi_dcmpeq>
 801f834:	2800      	cmp	r0, #0
 801f836:	d034      	beq.n	801f8a2 <_printf_float+0x27a>
 801f838:	4a37      	ldr	r2, [pc, #220]	; (801f918 <_printf_float+0x2f0>)
 801f83a:	2301      	movs	r3, #1
 801f83c:	4631      	mov	r1, r6
 801f83e:	4628      	mov	r0, r5
 801f840:	47b8      	blx	r7
 801f842:	3001      	adds	r0, #1
 801f844:	f43f af51 	beq.w	801f6ea <_printf_float+0xc2>
 801f848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f84c:	429a      	cmp	r2, r3
 801f84e:	db02      	blt.n	801f856 <_printf_float+0x22e>
 801f850:	6823      	ldr	r3, [r4, #0]
 801f852:	07d8      	lsls	r0, r3, #31
 801f854:	d510      	bpl.n	801f878 <_printf_float+0x250>
 801f856:	ee18 3a10 	vmov	r3, s16
 801f85a:	4652      	mov	r2, sl
 801f85c:	4631      	mov	r1, r6
 801f85e:	4628      	mov	r0, r5
 801f860:	47b8      	blx	r7
 801f862:	3001      	adds	r0, #1
 801f864:	f43f af41 	beq.w	801f6ea <_printf_float+0xc2>
 801f868:	f04f 0800 	mov.w	r8, #0
 801f86c:	f104 091a 	add.w	r9, r4, #26
 801f870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f872:	3b01      	subs	r3, #1
 801f874:	4543      	cmp	r3, r8
 801f876:	dc09      	bgt.n	801f88c <_printf_float+0x264>
 801f878:	6823      	ldr	r3, [r4, #0]
 801f87a:	079b      	lsls	r3, r3, #30
 801f87c:	f100 8105 	bmi.w	801fa8a <_printf_float+0x462>
 801f880:	68e0      	ldr	r0, [r4, #12]
 801f882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f884:	4298      	cmp	r0, r3
 801f886:	bfb8      	it	lt
 801f888:	4618      	movlt	r0, r3
 801f88a:	e730      	b.n	801f6ee <_printf_float+0xc6>
 801f88c:	2301      	movs	r3, #1
 801f88e:	464a      	mov	r2, r9
 801f890:	4631      	mov	r1, r6
 801f892:	4628      	mov	r0, r5
 801f894:	47b8      	blx	r7
 801f896:	3001      	adds	r0, #1
 801f898:	f43f af27 	beq.w	801f6ea <_printf_float+0xc2>
 801f89c:	f108 0801 	add.w	r8, r8, #1
 801f8a0:	e7e6      	b.n	801f870 <_printf_float+0x248>
 801f8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	dc39      	bgt.n	801f91c <_printf_float+0x2f4>
 801f8a8:	4a1b      	ldr	r2, [pc, #108]	; (801f918 <_printf_float+0x2f0>)
 801f8aa:	2301      	movs	r3, #1
 801f8ac:	4631      	mov	r1, r6
 801f8ae:	4628      	mov	r0, r5
 801f8b0:	47b8      	blx	r7
 801f8b2:	3001      	adds	r0, #1
 801f8b4:	f43f af19 	beq.w	801f6ea <_printf_float+0xc2>
 801f8b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f8bc:	4313      	orrs	r3, r2
 801f8be:	d102      	bne.n	801f8c6 <_printf_float+0x29e>
 801f8c0:	6823      	ldr	r3, [r4, #0]
 801f8c2:	07d9      	lsls	r1, r3, #31
 801f8c4:	d5d8      	bpl.n	801f878 <_printf_float+0x250>
 801f8c6:	ee18 3a10 	vmov	r3, s16
 801f8ca:	4652      	mov	r2, sl
 801f8cc:	4631      	mov	r1, r6
 801f8ce:	4628      	mov	r0, r5
 801f8d0:	47b8      	blx	r7
 801f8d2:	3001      	adds	r0, #1
 801f8d4:	f43f af09 	beq.w	801f6ea <_printf_float+0xc2>
 801f8d8:	f04f 0900 	mov.w	r9, #0
 801f8dc:	f104 0a1a 	add.w	sl, r4, #26
 801f8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8e2:	425b      	negs	r3, r3
 801f8e4:	454b      	cmp	r3, r9
 801f8e6:	dc01      	bgt.n	801f8ec <_printf_float+0x2c4>
 801f8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8ea:	e792      	b.n	801f812 <_printf_float+0x1ea>
 801f8ec:	2301      	movs	r3, #1
 801f8ee:	4652      	mov	r2, sl
 801f8f0:	4631      	mov	r1, r6
 801f8f2:	4628      	mov	r0, r5
 801f8f4:	47b8      	blx	r7
 801f8f6:	3001      	adds	r0, #1
 801f8f8:	f43f aef7 	beq.w	801f6ea <_printf_float+0xc2>
 801f8fc:	f109 0901 	add.w	r9, r9, #1
 801f900:	e7ee      	b.n	801f8e0 <_printf_float+0x2b8>
 801f902:	bf00      	nop
 801f904:	7fefffff 	.word	0x7fefffff
 801f908:	08024144 	.word	0x08024144
 801f90c:	08024148 	.word	0x08024148
 801f910:	08024150 	.word	0x08024150
 801f914:	0802414c 	.word	0x0802414c
 801f918:	08024154 	.word	0x08024154
 801f91c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f91e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f920:	429a      	cmp	r2, r3
 801f922:	bfa8      	it	ge
 801f924:	461a      	movge	r2, r3
 801f926:	2a00      	cmp	r2, #0
 801f928:	4691      	mov	r9, r2
 801f92a:	dc37      	bgt.n	801f99c <_printf_float+0x374>
 801f92c:	f04f 0b00 	mov.w	fp, #0
 801f930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f934:	f104 021a 	add.w	r2, r4, #26
 801f938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f93a:	9305      	str	r3, [sp, #20]
 801f93c:	eba3 0309 	sub.w	r3, r3, r9
 801f940:	455b      	cmp	r3, fp
 801f942:	dc33      	bgt.n	801f9ac <_printf_float+0x384>
 801f944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f948:	429a      	cmp	r2, r3
 801f94a:	db3b      	blt.n	801f9c4 <_printf_float+0x39c>
 801f94c:	6823      	ldr	r3, [r4, #0]
 801f94e:	07da      	lsls	r2, r3, #31
 801f950:	d438      	bmi.n	801f9c4 <_printf_float+0x39c>
 801f952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f954:	9b05      	ldr	r3, [sp, #20]
 801f956:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f958:	1ad3      	subs	r3, r2, r3
 801f95a:	eba2 0901 	sub.w	r9, r2, r1
 801f95e:	4599      	cmp	r9, r3
 801f960:	bfa8      	it	ge
 801f962:	4699      	movge	r9, r3
 801f964:	f1b9 0f00 	cmp.w	r9, #0
 801f968:	dc35      	bgt.n	801f9d6 <_printf_float+0x3ae>
 801f96a:	f04f 0800 	mov.w	r8, #0
 801f96e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f972:	f104 0a1a 	add.w	sl, r4, #26
 801f976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f97a:	1a9b      	subs	r3, r3, r2
 801f97c:	eba3 0309 	sub.w	r3, r3, r9
 801f980:	4543      	cmp	r3, r8
 801f982:	f77f af79 	ble.w	801f878 <_printf_float+0x250>
 801f986:	2301      	movs	r3, #1
 801f988:	4652      	mov	r2, sl
 801f98a:	4631      	mov	r1, r6
 801f98c:	4628      	mov	r0, r5
 801f98e:	47b8      	blx	r7
 801f990:	3001      	adds	r0, #1
 801f992:	f43f aeaa 	beq.w	801f6ea <_printf_float+0xc2>
 801f996:	f108 0801 	add.w	r8, r8, #1
 801f99a:	e7ec      	b.n	801f976 <_printf_float+0x34e>
 801f99c:	4613      	mov	r3, r2
 801f99e:	4631      	mov	r1, r6
 801f9a0:	4642      	mov	r2, r8
 801f9a2:	4628      	mov	r0, r5
 801f9a4:	47b8      	blx	r7
 801f9a6:	3001      	adds	r0, #1
 801f9a8:	d1c0      	bne.n	801f92c <_printf_float+0x304>
 801f9aa:	e69e      	b.n	801f6ea <_printf_float+0xc2>
 801f9ac:	2301      	movs	r3, #1
 801f9ae:	4631      	mov	r1, r6
 801f9b0:	4628      	mov	r0, r5
 801f9b2:	9205      	str	r2, [sp, #20]
 801f9b4:	47b8      	blx	r7
 801f9b6:	3001      	adds	r0, #1
 801f9b8:	f43f ae97 	beq.w	801f6ea <_printf_float+0xc2>
 801f9bc:	9a05      	ldr	r2, [sp, #20]
 801f9be:	f10b 0b01 	add.w	fp, fp, #1
 801f9c2:	e7b9      	b.n	801f938 <_printf_float+0x310>
 801f9c4:	ee18 3a10 	vmov	r3, s16
 801f9c8:	4652      	mov	r2, sl
 801f9ca:	4631      	mov	r1, r6
 801f9cc:	4628      	mov	r0, r5
 801f9ce:	47b8      	blx	r7
 801f9d0:	3001      	adds	r0, #1
 801f9d2:	d1be      	bne.n	801f952 <_printf_float+0x32a>
 801f9d4:	e689      	b.n	801f6ea <_printf_float+0xc2>
 801f9d6:	9a05      	ldr	r2, [sp, #20]
 801f9d8:	464b      	mov	r3, r9
 801f9da:	4442      	add	r2, r8
 801f9dc:	4631      	mov	r1, r6
 801f9de:	4628      	mov	r0, r5
 801f9e0:	47b8      	blx	r7
 801f9e2:	3001      	adds	r0, #1
 801f9e4:	d1c1      	bne.n	801f96a <_printf_float+0x342>
 801f9e6:	e680      	b.n	801f6ea <_printf_float+0xc2>
 801f9e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f9ea:	2a01      	cmp	r2, #1
 801f9ec:	dc01      	bgt.n	801f9f2 <_printf_float+0x3ca>
 801f9ee:	07db      	lsls	r3, r3, #31
 801f9f0:	d538      	bpl.n	801fa64 <_printf_float+0x43c>
 801f9f2:	2301      	movs	r3, #1
 801f9f4:	4642      	mov	r2, r8
 801f9f6:	4631      	mov	r1, r6
 801f9f8:	4628      	mov	r0, r5
 801f9fa:	47b8      	blx	r7
 801f9fc:	3001      	adds	r0, #1
 801f9fe:	f43f ae74 	beq.w	801f6ea <_printf_float+0xc2>
 801fa02:	ee18 3a10 	vmov	r3, s16
 801fa06:	4652      	mov	r2, sl
 801fa08:	4631      	mov	r1, r6
 801fa0a:	4628      	mov	r0, r5
 801fa0c:	47b8      	blx	r7
 801fa0e:	3001      	adds	r0, #1
 801fa10:	f43f ae6b 	beq.w	801f6ea <_printf_float+0xc2>
 801fa14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801fa18:	2200      	movs	r2, #0
 801fa1a:	2300      	movs	r3, #0
 801fa1c:	f7e1 f87c 	bl	8000b18 <__aeabi_dcmpeq>
 801fa20:	b9d8      	cbnz	r0, 801fa5a <_printf_float+0x432>
 801fa22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa24:	f108 0201 	add.w	r2, r8, #1
 801fa28:	3b01      	subs	r3, #1
 801fa2a:	4631      	mov	r1, r6
 801fa2c:	4628      	mov	r0, r5
 801fa2e:	47b8      	blx	r7
 801fa30:	3001      	adds	r0, #1
 801fa32:	d10e      	bne.n	801fa52 <_printf_float+0x42a>
 801fa34:	e659      	b.n	801f6ea <_printf_float+0xc2>
 801fa36:	2301      	movs	r3, #1
 801fa38:	4652      	mov	r2, sl
 801fa3a:	4631      	mov	r1, r6
 801fa3c:	4628      	mov	r0, r5
 801fa3e:	47b8      	blx	r7
 801fa40:	3001      	adds	r0, #1
 801fa42:	f43f ae52 	beq.w	801f6ea <_printf_float+0xc2>
 801fa46:	f108 0801 	add.w	r8, r8, #1
 801fa4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa4c:	3b01      	subs	r3, #1
 801fa4e:	4543      	cmp	r3, r8
 801fa50:	dcf1      	bgt.n	801fa36 <_printf_float+0x40e>
 801fa52:	464b      	mov	r3, r9
 801fa54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fa58:	e6dc      	b.n	801f814 <_printf_float+0x1ec>
 801fa5a:	f04f 0800 	mov.w	r8, #0
 801fa5e:	f104 0a1a 	add.w	sl, r4, #26
 801fa62:	e7f2      	b.n	801fa4a <_printf_float+0x422>
 801fa64:	2301      	movs	r3, #1
 801fa66:	4642      	mov	r2, r8
 801fa68:	e7df      	b.n	801fa2a <_printf_float+0x402>
 801fa6a:	2301      	movs	r3, #1
 801fa6c:	464a      	mov	r2, r9
 801fa6e:	4631      	mov	r1, r6
 801fa70:	4628      	mov	r0, r5
 801fa72:	47b8      	blx	r7
 801fa74:	3001      	adds	r0, #1
 801fa76:	f43f ae38 	beq.w	801f6ea <_printf_float+0xc2>
 801fa7a:	f108 0801 	add.w	r8, r8, #1
 801fa7e:	68e3      	ldr	r3, [r4, #12]
 801fa80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fa82:	1a5b      	subs	r3, r3, r1
 801fa84:	4543      	cmp	r3, r8
 801fa86:	dcf0      	bgt.n	801fa6a <_printf_float+0x442>
 801fa88:	e6fa      	b.n	801f880 <_printf_float+0x258>
 801fa8a:	f04f 0800 	mov.w	r8, #0
 801fa8e:	f104 0919 	add.w	r9, r4, #25
 801fa92:	e7f4      	b.n	801fa7e <_printf_float+0x456>

0801fa94 <_printf_common>:
 801fa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa98:	4616      	mov	r6, r2
 801fa9a:	4699      	mov	r9, r3
 801fa9c:	688a      	ldr	r2, [r1, #8]
 801fa9e:	690b      	ldr	r3, [r1, #16]
 801faa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801faa4:	4293      	cmp	r3, r2
 801faa6:	bfb8      	it	lt
 801faa8:	4613      	movlt	r3, r2
 801faaa:	6033      	str	r3, [r6, #0]
 801faac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fab0:	4607      	mov	r7, r0
 801fab2:	460c      	mov	r4, r1
 801fab4:	b10a      	cbz	r2, 801faba <_printf_common+0x26>
 801fab6:	3301      	adds	r3, #1
 801fab8:	6033      	str	r3, [r6, #0]
 801faba:	6823      	ldr	r3, [r4, #0]
 801fabc:	0699      	lsls	r1, r3, #26
 801fabe:	bf42      	ittt	mi
 801fac0:	6833      	ldrmi	r3, [r6, #0]
 801fac2:	3302      	addmi	r3, #2
 801fac4:	6033      	strmi	r3, [r6, #0]
 801fac6:	6825      	ldr	r5, [r4, #0]
 801fac8:	f015 0506 	ands.w	r5, r5, #6
 801facc:	d106      	bne.n	801fadc <_printf_common+0x48>
 801face:	f104 0a19 	add.w	sl, r4, #25
 801fad2:	68e3      	ldr	r3, [r4, #12]
 801fad4:	6832      	ldr	r2, [r6, #0]
 801fad6:	1a9b      	subs	r3, r3, r2
 801fad8:	42ab      	cmp	r3, r5
 801fada:	dc26      	bgt.n	801fb2a <_printf_common+0x96>
 801fadc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fae0:	1e13      	subs	r3, r2, #0
 801fae2:	6822      	ldr	r2, [r4, #0]
 801fae4:	bf18      	it	ne
 801fae6:	2301      	movne	r3, #1
 801fae8:	0692      	lsls	r2, r2, #26
 801faea:	d42b      	bmi.n	801fb44 <_printf_common+0xb0>
 801faec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801faf0:	4649      	mov	r1, r9
 801faf2:	4638      	mov	r0, r7
 801faf4:	47c0      	blx	r8
 801faf6:	3001      	adds	r0, #1
 801faf8:	d01e      	beq.n	801fb38 <_printf_common+0xa4>
 801fafa:	6823      	ldr	r3, [r4, #0]
 801fafc:	68e5      	ldr	r5, [r4, #12]
 801fafe:	6832      	ldr	r2, [r6, #0]
 801fb00:	f003 0306 	and.w	r3, r3, #6
 801fb04:	2b04      	cmp	r3, #4
 801fb06:	bf08      	it	eq
 801fb08:	1aad      	subeq	r5, r5, r2
 801fb0a:	68a3      	ldr	r3, [r4, #8]
 801fb0c:	6922      	ldr	r2, [r4, #16]
 801fb0e:	bf0c      	ite	eq
 801fb10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fb14:	2500      	movne	r5, #0
 801fb16:	4293      	cmp	r3, r2
 801fb18:	bfc4      	itt	gt
 801fb1a:	1a9b      	subgt	r3, r3, r2
 801fb1c:	18ed      	addgt	r5, r5, r3
 801fb1e:	2600      	movs	r6, #0
 801fb20:	341a      	adds	r4, #26
 801fb22:	42b5      	cmp	r5, r6
 801fb24:	d11a      	bne.n	801fb5c <_printf_common+0xc8>
 801fb26:	2000      	movs	r0, #0
 801fb28:	e008      	b.n	801fb3c <_printf_common+0xa8>
 801fb2a:	2301      	movs	r3, #1
 801fb2c:	4652      	mov	r2, sl
 801fb2e:	4649      	mov	r1, r9
 801fb30:	4638      	mov	r0, r7
 801fb32:	47c0      	blx	r8
 801fb34:	3001      	adds	r0, #1
 801fb36:	d103      	bne.n	801fb40 <_printf_common+0xac>
 801fb38:	f04f 30ff 	mov.w	r0, #4294967295
 801fb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb40:	3501      	adds	r5, #1
 801fb42:	e7c6      	b.n	801fad2 <_printf_common+0x3e>
 801fb44:	18e1      	adds	r1, r4, r3
 801fb46:	1c5a      	adds	r2, r3, #1
 801fb48:	2030      	movs	r0, #48	; 0x30
 801fb4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fb4e:	4422      	add	r2, r4
 801fb50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fb54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fb58:	3302      	adds	r3, #2
 801fb5a:	e7c7      	b.n	801faec <_printf_common+0x58>
 801fb5c:	2301      	movs	r3, #1
 801fb5e:	4622      	mov	r2, r4
 801fb60:	4649      	mov	r1, r9
 801fb62:	4638      	mov	r0, r7
 801fb64:	47c0      	blx	r8
 801fb66:	3001      	adds	r0, #1
 801fb68:	d0e6      	beq.n	801fb38 <_printf_common+0xa4>
 801fb6a:	3601      	adds	r6, #1
 801fb6c:	e7d9      	b.n	801fb22 <_printf_common+0x8e>
	...

0801fb70 <_printf_i>:
 801fb70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fb74:	460c      	mov	r4, r1
 801fb76:	4691      	mov	r9, r2
 801fb78:	7e27      	ldrb	r7, [r4, #24]
 801fb7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fb7c:	2f78      	cmp	r7, #120	; 0x78
 801fb7e:	4680      	mov	r8, r0
 801fb80:	469a      	mov	sl, r3
 801fb82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fb86:	d807      	bhi.n	801fb98 <_printf_i+0x28>
 801fb88:	2f62      	cmp	r7, #98	; 0x62
 801fb8a:	d80a      	bhi.n	801fba2 <_printf_i+0x32>
 801fb8c:	2f00      	cmp	r7, #0
 801fb8e:	f000 80d8 	beq.w	801fd42 <_printf_i+0x1d2>
 801fb92:	2f58      	cmp	r7, #88	; 0x58
 801fb94:	f000 80a3 	beq.w	801fcde <_printf_i+0x16e>
 801fb98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fb9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fba0:	e03a      	b.n	801fc18 <_printf_i+0xa8>
 801fba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fba6:	2b15      	cmp	r3, #21
 801fba8:	d8f6      	bhi.n	801fb98 <_printf_i+0x28>
 801fbaa:	a001      	add	r0, pc, #4	; (adr r0, 801fbb0 <_printf_i+0x40>)
 801fbac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801fbb0:	0801fc09 	.word	0x0801fc09
 801fbb4:	0801fc1d 	.word	0x0801fc1d
 801fbb8:	0801fb99 	.word	0x0801fb99
 801fbbc:	0801fb99 	.word	0x0801fb99
 801fbc0:	0801fb99 	.word	0x0801fb99
 801fbc4:	0801fb99 	.word	0x0801fb99
 801fbc8:	0801fc1d 	.word	0x0801fc1d
 801fbcc:	0801fb99 	.word	0x0801fb99
 801fbd0:	0801fb99 	.word	0x0801fb99
 801fbd4:	0801fb99 	.word	0x0801fb99
 801fbd8:	0801fb99 	.word	0x0801fb99
 801fbdc:	0801fd29 	.word	0x0801fd29
 801fbe0:	0801fc4d 	.word	0x0801fc4d
 801fbe4:	0801fd0b 	.word	0x0801fd0b
 801fbe8:	0801fb99 	.word	0x0801fb99
 801fbec:	0801fb99 	.word	0x0801fb99
 801fbf0:	0801fd4b 	.word	0x0801fd4b
 801fbf4:	0801fb99 	.word	0x0801fb99
 801fbf8:	0801fc4d 	.word	0x0801fc4d
 801fbfc:	0801fb99 	.word	0x0801fb99
 801fc00:	0801fb99 	.word	0x0801fb99
 801fc04:	0801fd13 	.word	0x0801fd13
 801fc08:	680b      	ldr	r3, [r1, #0]
 801fc0a:	1d1a      	adds	r2, r3, #4
 801fc0c:	681b      	ldr	r3, [r3, #0]
 801fc0e:	600a      	str	r2, [r1, #0]
 801fc10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fc14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fc18:	2301      	movs	r3, #1
 801fc1a:	e0a3      	b.n	801fd64 <_printf_i+0x1f4>
 801fc1c:	6825      	ldr	r5, [r4, #0]
 801fc1e:	6808      	ldr	r0, [r1, #0]
 801fc20:	062e      	lsls	r6, r5, #24
 801fc22:	f100 0304 	add.w	r3, r0, #4
 801fc26:	d50a      	bpl.n	801fc3e <_printf_i+0xce>
 801fc28:	6805      	ldr	r5, [r0, #0]
 801fc2a:	600b      	str	r3, [r1, #0]
 801fc2c:	2d00      	cmp	r5, #0
 801fc2e:	da03      	bge.n	801fc38 <_printf_i+0xc8>
 801fc30:	232d      	movs	r3, #45	; 0x2d
 801fc32:	426d      	negs	r5, r5
 801fc34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fc38:	485e      	ldr	r0, [pc, #376]	; (801fdb4 <_printf_i+0x244>)
 801fc3a:	230a      	movs	r3, #10
 801fc3c:	e019      	b.n	801fc72 <_printf_i+0x102>
 801fc3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801fc42:	6805      	ldr	r5, [r0, #0]
 801fc44:	600b      	str	r3, [r1, #0]
 801fc46:	bf18      	it	ne
 801fc48:	b22d      	sxthne	r5, r5
 801fc4a:	e7ef      	b.n	801fc2c <_printf_i+0xbc>
 801fc4c:	680b      	ldr	r3, [r1, #0]
 801fc4e:	6825      	ldr	r5, [r4, #0]
 801fc50:	1d18      	adds	r0, r3, #4
 801fc52:	6008      	str	r0, [r1, #0]
 801fc54:	0628      	lsls	r0, r5, #24
 801fc56:	d501      	bpl.n	801fc5c <_printf_i+0xec>
 801fc58:	681d      	ldr	r5, [r3, #0]
 801fc5a:	e002      	b.n	801fc62 <_printf_i+0xf2>
 801fc5c:	0669      	lsls	r1, r5, #25
 801fc5e:	d5fb      	bpl.n	801fc58 <_printf_i+0xe8>
 801fc60:	881d      	ldrh	r5, [r3, #0]
 801fc62:	4854      	ldr	r0, [pc, #336]	; (801fdb4 <_printf_i+0x244>)
 801fc64:	2f6f      	cmp	r7, #111	; 0x6f
 801fc66:	bf0c      	ite	eq
 801fc68:	2308      	moveq	r3, #8
 801fc6a:	230a      	movne	r3, #10
 801fc6c:	2100      	movs	r1, #0
 801fc6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fc72:	6866      	ldr	r6, [r4, #4]
 801fc74:	60a6      	str	r6, [r4, #8]
 801fc76:	2e00      	cmp	r6, #0
 801fc78:	bfa2      	ittt	ge
 801fc7a:	6821      	ldrge	r1, [r4, #0]
 801fc7c:	f021 0104 	bicge.w	r1, r1, #4
 801fc80:	6021      	strge	r1, [r4, #0]
 801fc82:	b90d      	cbnz	r5, 801fc88 <_printf_i+0x118>
 801fc84:	2e00      	cmp	r6, #0
 801fc86:	d04d      	beq.n	801fd24 <_printf_i+0x1b4>
 801fc88:	4616      	mov	r6, r2
 801fc8a:	fbb5 f1f3 	udiv	r1, r5, r3
 801fc8e:	fb03 5711 	mls	r7, r3, r1, r5
 801fc92:	5dc7      	ldrb	r7, [r0, r7]
 801fc94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801fc98:	462f      	mov	r7, r5
 801fc9a:	42bb      	cmp	r3, r7
 801fc9c:	460d      	mov	r5, r1
 801fc9e:	d9f4      	bls.n	801fc8a <_printf_i+0x11a>
 801fca0:	2b08      	cmp	r3, #8
 801fca2:	d10b      	bne.n	801fcbc <_printf_i+0x14c>
 801fca4:	6823      	ldr	r3, [r4, #0]
 801fca6:	07df      	lsls	r7, r3, #31
 801fca8:	d508      	bpl.n	801fcbc <_printf_i+0x14c>
 801fcaa:	6923      	ldr	r3, [r4, #16]
 801fcac:	6861      	ldr	r1, [r4, #4]
 801fcae:	4299      	cmp	r1, r3
 801fcb0:	bfde      	ittt	le
 801fcb2:	2330      	movle	r3, #48	; 0x30
 801fcb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801fcb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801fcbc:	1b92      	subs	r2, r2, r6
 801fcbe:	6122      	str	r2, [r4, #16]
 801fcc0:	f8cd a000 	str.w	sl, [sp]
 801fcc4:	464b      	mov	r3, r9
 801fcc6:	aa03      	add	r2, sp, #12
 801fcc8:	4621      	mov	r1, r4
 801fcca:	4640      	mov	r0, r8
 801fccc:	f7ff fee2 	bl	801fa94 <_printf_common>
 801fcd0:	3001      	adds	r0, #1
 801fcd2:	d14c      	bne.n	801fd6e <_printf_i+0x1fe>
 801fcd4:	f04f 30ff 	mov.w	r0, #4294967295
 801fcd8:	b004      	add	sp, #16
 801fcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fcde:	4835      	ldr	r0, [pc, #212]	; (801fdb4 <_printf_i+0x244>)
 801fce0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fce4:	6823      	ldr	r3, [r4, #0]
 801fce6:	680e      	ldr	r6, [r1, #0]
 801fce8:	061f      	lsls	r7, r3, #24
 801fcea:	f856 5b04 	ldr.w	r5, [r6], #4
 801fcee:	600e      	str	r6, [r1, #0]
 801fcf0:	d514      	bpl.n	801fd1c <_printf_i+0x1ac>
 801fcf2:	07d9      	lsls	r1, r3, #31
 801fcf4:	bf44      	itt	mi
 801fcf6:	f043 0320 	orrmi.w	r3, r3, #32
 801fcfa:	6023      	strmi	r3, [r4, #0]
 801fcfc:	b91d      	cbnz	r5, 801fd06 <_printf_i+0x196>
 801fcfe:	6823      	ldr	r3, [r4, #0]
 801fd00:	f023 0320 	bic.w	r3, r3, #32
 801fd04:	6023      	str	r3, [r4, #0]
 801fd06:	2310      	movs	r3, #16
 801fd08:	e7b0      	b.n	801fc6c <_printf_i+0xfc>
 801fd0a:	6823      	ldr	r3, [r4, #0]
 801fd0c:	f043 0320 	orr.w	r3, r3, #32
 801fd10:	6023      	str	r3, [r4, #0]
 801fd12:	2378      	movs	r3, #120	; 0x78
 801fd14:	4828      	ldr	r0, [pc, #160]	; (801fdb8 <_printf_i+0x248>)
 801fd16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fd1a:	e7e3      	b.n	801fce4 <_printf_i+0x174>
 801fd1c:	065e      	lsls	r6, r3, #25
 801fd1e:	bf48      	it	mi
 801fd20:	b2ad      	uxthmi	r5, r5
 801fd22:	e7e6      	b.n	801fcf2 <_printf_i+0x182>
 801fd24:	4616      	mov	r6, r2
 801fd26:	e7bb      	b.n	801fca0 <_printf_i+0x130>
 801fd28:	680b      	ldr	r3, [r1, #0]
 801fd2a:	6826      	ldr	r6, [r4, #0]
 801fd2c:	6960      	ldr	r0, [r4, #20]
 801fd2e:	1d1d      	adds	r5, r3, #4
 801fd30:	600d      	str	r5, [r1, #0]
 801fd32:	0635      	lsls	r5, r6, #24
 801fd34:	681b      	ldr	r3, [r3, #0]
 801fd36:	d501      	bpl.n	801fd3c <_printf_i+0x1cc>
 801fd38:	6018      	str	r0, [r3, #0]
 801fd3a:	e002      	b.n	801fd42 <_printf_i+0x1d2>
 801fd3c:	0671      	lsls	r1, r6, #25
 801fd3e:	d5fb      	bpl.n	801fd38 <_printf_i+0x1c8>
 801fd40:	8018      	strh	r0, [r3, #0]
 801fd42:	2300      	movs	r3, #0
 801fd44:	6123      	str	r3, [r4, #16]
 801fd46:	4616      	mov	r6, r2
 801fd48:	e7ba      	b.n	801fcc0 <_printf_i+0x150>
 801fd4a:	680b      	ldr	r3, [r1, #0]
 801fd4c:	1d1a      	adds	r2, r3, #4
 801fd4e:	600a      	str	r2, [r1, #0]
 801fd50:	681e      	ldr	r6, [r3, #0]
 801fd52:	6862      	ldr	r2, [r4, #4]
 801fd54:	2100      	movs	r1, #0
 801fd56:	4630      	mov	r0, r6
 801fd58:	f7e0 fa6a 	bl	8000230 <memchr>
 801fd5c:	b108      	cbz	r0, 801fd62 <_printf_i+0x1f2>
 801fd5e:	1b80      	subs	r0, r0, r6
 801fd60:	6060      	str	r0, [r4, #4]
 801fd62:	6863      	ldr	r3, [r4, #4]
 801fd64:	6123      	str	r3, [r4, #16]
 801fd66:	2300      	movs	r3, #0
 801fd68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fd6c:	e7a8      	b.n	801fcc0 <_printf_i+0x150>
 801fd6e:	6923      	ldr	r3, [r4, #16]
 801fd70:	4632      	mov	r2, r6
 801fd72:	4649      	mov	r1, r9
 801fd74:	4640      	mov	r0, r8
 801fd76:	47d0      	blx	sl
 801fd78:	3001      	adds	r0, #1
 801fd7a:	d0ab      	beq.n	801fcd4 <_printf_i+0x164>
 801fd7c:	6823      	ldr	r3, [r4, #0]
 801fd7e:	079b      	lsls	r3, r3, #30
 801fd80:	d413      	bmi.n	801fdaa <_printf_i+0x23a>
 801fd82:	68e0      	ldr	r0, [r4, #12]
 801fd84:	9b03      	ldr	r3, [sp, #12]
 801fd86:	4298      	cmp	r0, r3
 801fd88:	bfb8      	it	lt
 801fd8a:	4618      	movlt	r0, r3
 801fd8c:	e7a4      	b.n	801fcd8 <_printf_i+0x168>
 801fd8e:	2301      	movs	r3, #1
 801fd90:	4632      	mov	r2, r6
 801fd92:	4649      	mov	r1, r9
 801fd94:	4640      	mov	r0, r8
 801fd96:	47d0      	blx	sl
 801fd98:	3001      	adds	r0, #1
 801fd9a:	d09b      	beq.n	801fcd4 <_printf_i+0x164>
 801fd9c:	3501      	adds	r5, #1
 801fd9e:	68e3      	ldr	r3, [r4, #12]
 801fda0:	9903      	ldr	r1, [sp, #12]
 801fda2:	1a5b      	subs	r3, r3, r1
 801fda4:	42ab      	cmp	r3, r5
 801fda6:	dcf2      	bgt.n	801fd8e <_printf_i+0x21e>
 801fda8:	e7eb      	b.n	801fd82 <_printf_i+0x212>
 801fdaa:	2500      	movs	r5, #0
 801fdac:	f104 0619 	add.w	r6, r4, #25
 801fdb0:	e7f5      	b.n	801fd9e <_printf_i+0x22e>
 801fdb2:	bf00      	nop
 801fdb4:	08024156 	.word	0x08024156
 801fdb8:	08024167 	.word	0x08024167

0801fdbc <_sbrk_r>:
 801fdbc:	b538      	push	{r3, r4, r5, lr}
 801fdbe:	4d06      	ldr	r5, [pc, #24]	; (801fdd8 <_sbrk_r+0x1c>)
 801fdc0:	2300      	movs	r3, #0
 801fdc2:	4604      	mov	r4, r0
 801fdc4:	4608      	mov	r0, r1
 801fdc6:	602b      	str	r3, [r5, #0]
 801fdc8:	f7fe ff88 	bl	801ecdc <_sbrk>
 801fdcc:	1c43      	adds	r3, r0, #1
 801fdce:	d102      	bne.n	801fdd6 <_sbrk_r+0x1a>
 801fdd0:	682b      	ldr	r3, [r5, #0]
 801fdd2:	b103      	cbz	r3, 801fdd6 <_sbrk_r+0x1a>
 801fdd4:	6023      	str	r3, [r4, #0]
 801fdd6:	bd38      	pop	{r3, r4, r5, pc}
 801fdd8:	2001d46c 	.word	0x2001d46c

0801fddc <siprintf>:
 801fddc:	b40e      	push	{r1, r2, r3}
 801fdde:	b500      	push	{lr}
 801fde0:	b09c      	sub	sp, #112	; 0x70
 801fde2:	ab1d      	add	r3, sp, #116	; 0x74
 801fde4:	9002      	str	r0, [sp, #8]
 801fde6:	9006      	str	r0, [sp, #24]
 801fde8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fdec:	4809      	ldr	r0, [pc, #36]	; (801fe14 <siprintf+0x38>)
 801fdee:	9107      	str	r1, [sp, #28]
 801fdf0:	9104      	str	r1, [sp, #16]
 801fdf2:	4909      	ldr	r1, [pc, #36]	; (801fe18 <siprintf+0x3c>)
 801fdf4:	f853 2b04 	ldr.w	r2, [r3], #4
 801fdf8:	9105      	str	r1, [sp, #20]
 801fdfa:	6800      	ldr	r0, [r0, #0]
 801fdfc:	9301      	str	r3, [sp, #4]
 801fdfe:	a902      	add	r1, sp, #8
 801fe00:	f002 ff7a 	bl	8022cf8 <_svfiprintf_r>
 801fe04:	9b02      	ldr	r3, [sp, #8]
 801fe06:	2200      	movs	r2, #0
 801fe08:	701a      	strb	r2, [r3, #0]
 801fe0a:	b01c      	add	sp, #112	; 0x70
 801fe0c:	f85d eb04 	ldr.w	lr, [sp], #4
 801fe10:	b003      	add	sp, #12
 801fe12:	4770      	bx	lr
 801fe14:	200002b8 	.word	0x200002b8
 801fe18:	ffff0208 	.word	0xffff0208

0801fe1c <__sread>:
 801fe1c:	b510      	push	{r4, lr}
 801fe1e:	460c      	mov	r4, r1
 801fe20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe24:	f003 f868 	bl	8022ef8 <_read_r>
 801fe28:	2800      	cmp	r0, #0
 801fe2a:	bfab      	itete	ge
 801fe2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fe2e:	89a3      	ldrhlt	r3, [r4, #12]
 801fe30:	181b      	addge	r3, r3, r0
 801fe32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fe36:	bfac      	ite	ge
 801fe38:	6563      	strge	r3, [r4, #84]	; 0x54
 801fe3a:	81a3      	strhlt	r3, [r4, #12]
 801fe3c:	bd10      	pop	{r4, pc}

0801fe3e <__swrite>:
 801fe3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe42:	461f      	mov	r7, r3
 801fe44:	898b      	ldrh	r3, [r1, #12]
 801fe46:	05db      	lsls	r3, r3, #23
 801fe48:	4605      	mov	r5, r0
 801fe4a:	460c      	mov	r4, r1
 801fe4c:	4616      	mov	r6, r2
 801fe4e:	d505      	bpl.n	801fe5c <__swrite+0x1e>
 801fe50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe54:	2302      	movs	r3, #2
 801fe56:	2200      	movs	r2, #0
 801fe58:	f002 fa08 	bl	802226c <_lseek_r>
 801fe5c:	89a3      	ldrh	r3, [r4, #12]
 801fe5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fe62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fe66:	81a3      	strh	r3, [r4, #12]
 801fe68:	4632      	mov	r2, r6
 801fe6a:	463b      	mov	r3, r7
 801fe6c:	4628      	mov	r0, r5
 801fe6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fe72:	f000 bf5b 	b.w	8020d2c <_write_r>

0801fe76 <__sseek>:
 801fe76:	b510      	push	{r4, lr}
 801fe78:	460c      	mov	r4, r1
 801fe7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe7e:	f002 f9f5 	bl	802226c <_lseek_r>
 801fe82:	1c43      	adds	r3, r0, #1
 801fe84:	89a3      	ldrh	r3, [r4, #12]
 801fe86:	bf15      	itete	ne
 801fe88:	6560      	strne	r0, [r4, #84]	; 0x54
 801fe8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fe8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fe92:	81a3      	strheq	r3, [r4, #12]
 801fe94:	bf18      	it	ne
 801fe96:	81a3      	strhne	r3, [r4, #12]
 801fe98:	bd10      	pop	{r4, pc}

0801fe9a <__sclose>:
 801fe9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe9e:	f000 bfc5 	b.w	8020e2c <_close_r>

0801fea2 <strchr>:
 801fea2:	b2c9      	uxtb	r1, r1
 801fea4:	4603      	mov	r3, r0
 801fea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801feaa:	b11a      	cbz	r2, 801feb4 <strchr+0x12>
 801feac:	428a      	cmp	r2, r1
 801feae:	d1f9      	bne.n	801fea4 <strchr+0x2>
 801feb0:	4618      	mov	r0, r3
 801feb2:	4770      	bx	lr
 801feb4:	2900      	cmp	r1, #0
 801feb6:	bf18      	it	ne
 801feb8:	2300      	movne	r3, #0
 801feba:	e7f9      	b.n	801feb0 <strchr+0xe>

0801febc <strncmp>:
 801febc:	b510      	push	{r4, lr}
 801febe:	b16a      	cbz	r2, 801fedc <strncmp+0x20>
 801fec0:	3901      	subs	r1, #1
 801fec2:	1884      	adds	r4, r0, r2
 801fec4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fec8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801fecc:	4293      	cmp	r3, r2
 801fece:	d103      	bne.n	801fed8 <strncmp+0x1c>
 801fed0:	42a0      	cmp	r0, r4
 801fed2:	d001      	beq.n	801fed8 <strncmp+0x1c>
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	d1f5      	bne.n	801fec4 <strncmp+0x8>
 801fed8:	1a98      	subs	r0, r3, r2
 801feda:	bd10      	pop	{r4, pc}
 801fedc:	4610      	mov	r0, r2
 801fede:	e7fc      	b.n	801feda <strncmp+0x1e>

0801fee0 <strncpy>:
 801fee0:	b510      	push	{r4, lr}
 801fee2:	3901      	subs	r1, #1
 801fee4:	4603      	mov	r3, r0
 801fee6:	b132      	cbz	r2, 801fef6 <strncpy+0x16>
 801fee8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801feec:	f803 4b01 	strb.w	r4, [r3], #1
 801fef0:	3a01      	subs	r2, #1
 801fef2:	2c00      	cmp	r4, #0
 801fef4:	d1f7      	bne.n	801fee6 <strncpy+0x6>
 801fef6:	441a      	add	r2, r3
 801fef8:	2100      	movs	r1, #0
 801fefa:	4293      	cmp	r3, r2
 801fefc:	d100      	bne.n	801ff00 <strncpy+0x20>
 801fefe:	bd10      	pop	{r4, pc}
 801ff00:	f803 1b01 	strb.w	r1, [r3], #1
 801ff04:	e7f9      	b.n	801fefa <strncpy+0x1a>

0801ff06 <sulp>:
 801ff06:	b570      	push	{r4, r5, r6, lr}
 801ff08:	4604      	mov	r4, r0
 801ff0a:	460d      	mov	r5, r1
 801ff0c:	ec45 4b10 	vmov	d0, r4, r5
 801ff10:	4616      	mov	r6, r2
 801ff12:	f002 fd47 	bl	80229a4 <__ulp>
 801ff16:	ec51 0b10 	vmov	r0, r1, d0
 801ff1a:	b17e      	cbz	r6, 801ff3c <sulp+0x36>
 801ff1c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ff20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ff24:	2b00      	cmp	r3, #0
 801ff26:	dd09      	ble.n	801ff3c <sulp+0x36>
 801ff28:	051b      	lsls	r3, r3, #20
 801ff2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801ff2e:	2400      	movs	r4, #0
 801ff30:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801ff34:	4622      	mov	r2, r4
 801ff36:	462b      	mov	r3, r5
 801ff38:	f7e0 fb86 	bl	8000648 <__aeabi_dmul>
 801ff3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ff40 <_strtod_l>:
 801ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff44:	b0a3      	sub	sp, #140	; 0x8c
 801ff46:	461f      	mov	r7, r3
 801ff48:	2300      	movs	r3, #0
 801ff4a:	931e      	str	r3, [sp, #120]	; 0x78
 801ff4c:	4ba4      	ldr	r3, [pc, #656]	; (80201e0 <_strtod_l+0x2a0>)
 801ff4e:	9219      	str	r2, [sp, #100]	; 0x64
 801ff50:	681b      	ldr	r3, [r3, #0]
 801ff52:	9307      	str	r3, [sp, #28]
 801ff54:	4604      	mov	r4, r0
 801ff56:	4618      	mov	r0, r3
 801ff58:	4688      	mov	r8, r1
 801ff5a:	f7e0 f95b 	bl	8000214 <strlen>
 801ff5e:	f04f 0a00 	mov.w	sl, #0
 801ff62:	4605      	mov	r5, r0
 801ff64:	f04f 0b00 	mov.w	fp, #0
 801ff68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ff6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ff6e:	781a      	ldrb	r2, [r3, #0]
 801ff70:	2a2b      	cmp	r2, #43	; 0x2b
 801ff72:	d04c      	beq.n	802000e <_strtod_l+0xce>
 801ff74:	d839      	bhi.n	801ffea <_strtod_l+0xaa>
 801ff76:	2a0d      	cmp	r2, #13
 801ff78:	d832      	bhi.n	801ffe0 <_strtod_l+0xa0>
 801ff7a:	2a08      	cmp	r2, #8
 801ff7c:	d832      	bhi.n	801ffe4 <_strtod_l+0xa4>
 801ff7e:	2a00      	cmp	r2, #0
 801ff80:	d03c      	beq.n	801fffc <_strtod_l+0xbc>
 801ff82:	2300      	movs	r3, #0
 801ff84:	930e      	str	r3, [sp, #56]	; 0x38
 801ff86:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ff88:	7833      	ldrb	r3, [r6, #0]
 801ff8a:	2b30      	cmp	r3, #48	; 0x30
 801ff8c:	f040 80b4 	bne.w	80200f8 <_strtod_l+0x1b8>
 801ff90:	7873      	ldrb	r3, [r6, #1]
 801ff92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ff96:	2b58      	cmp	r3, #88	; 0x58
 801ff98:	d16c      	bne.n	8020074 <_strtod_l+0x134>
 801ff9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff9c:	9301      	str	r3, [sp, #4]
 801ff9e:	ab1e      	add	r3, sp, #120	; 0x78
 801ffa0:	9702      	str	r7, [sp, #8]
 801ffa2:	9300      	str	r3, [sp, #0]
 801ffa4:	4a8f      	ldr	r2, [pc, #572]	; (80201e4 <_strtod_l+0x2a4>)
 801ffa6:	ab1f      	add	r3, sp, #124	; 0x7c
 801ffa8:	a91d      	add	r1, sp, #116	; 0x74
 801ffaa:	4620      	mov	r0, r4
 801ffac:	f001 fe42 	bl	8021c34 <__gethex>
 801ffb0:	f010 0707 	ands.w	r7, r0, #7
 801ffb4:	4605      	mov	r5, r0
 801ffb6:	d005      	beq.n	801ffc4 <_strtod_l+0x84>
 801ffb8:	2f06      	cmp	r7, #6
 801ffba:	d12a      	bne.n	8020012 <_strtod_l+0xd2>
 801ffbc:	3601      	adds	r6, #1
 801ffbe:	2300      	movs	r3, #0
 801ffc0:	961d      	str	r6, [sp, #116]	; 0x74
 801ffc2:	930e      	str	r3, [sp, #56]	; 0x38
 801ffc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ffc6:	2b00      	cmp	r3, #0
 801ffc8:	f040 8596 	bne.w	8020af8 <_strtod_l+0xbb8>
 801ffcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffce:	b1db      	cbz	r3, 8020008 <_strtod_l+0xc8>
 801ffd0:	4652      	mov	r2, sl
 801ffd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ffd6:	ec43 2b10 	vmov	d0, r2, r3
 801ffda:	b023      	add	sp, #140	; 0x8c
 801ffdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffe0:	2a20      	cmp	r2, #32
 801ffe2:	d1ce      	bne.n	801ff82 <_strtod_l+0x42>
 801ffe4:	3301      	adds	r3, #1
 801ffe6:	931d      	str	r3, [sp, #116]	; 0x74
 801ffe8:	e7c0      	b.n	801ff6c <_strtod_l+0x2c>
 801ffea:	2a2d      	cmp	r2, #45	; 0x2d
 801ffec:	d1c9      	bne.n	801ff82 <_strtod_l+0x42>
 801ffee:	2201      	movs	r2, #1
 801fff0:	920e      	str	r2, [sp, #56]	; 0x38
 801fff2:	1c5a      	adds	r2, r3, #1
 801fff4:	921d      	str	r2, [sp, #116]	; 0x74
 801fff6:	785b      	ldrb	r3, [r3, #1]
 801fff8:	2b00      	cmp	r3, #0
 801fffa:	d1c4      	bne.n	801ff86 <_strtod_l+0x46>
 801fffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fffe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8020002:	2b00      	cmp	r3, #0
 8020004:	f040 8576 	bne.w	8020af4 <_strtod_l+0xbb4>
 8020008:	4652      	mov	r2, sl
 802000a:	465b      	mov	r3, fp
 802000c:	e7e3      	b.n	801ffd6 <_strtod_l+0x96>
 802000e:	2200      	movs	r2, #0
 8020010:	e7ee      	b.n	801fff0 <_strtod_l+0xb0>
 8020012:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020014:	b13a      	cbz	r2, 8020026 <_strtod_l+0xe6>
 8020016:	2135      	movs	r1, #53	; 0x35
 8020018:	a820      	add	r0, sp, #128	; 0x80
 802001a:	f002 fdce 	bl	8022bba <__copybits>
 802001e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020020:	4620      	mov	r0, r4
 8020022:	f002 f993 	bl	802234c <_Bfree>
 8020026:	3f01      	subs	r7, #1
 8020028:	2f05      	cmp	r7, #5
 802002a:	d807      	bhi.n	802003c <_strtod_l+0xfc>
 802002c:	e8df f007 	tbb	[pc, r7]
 8020030:	1d180b0e 	.word	0x1d180b0e
 8020034:	030e      	.short	0x030e
 8020036:	f04f 0b00 	mov.w	fp, #0
 802003a:	46da      	mov	sl, fp
 802003c:	0728      	lsls	r0, r5, #28
 802003e:	d5c1      	bpl.n	801ffc4 <_strtod_l+0x84>
 8020040:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8020044:	e7be      	b.n	801ffc4 <_strtod_l+0x84>
 8020046:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 802004a:	e7f7      	b.n	802003c <_strtod_l+0xfc>
 802004c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8020050:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020052:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8020056:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802005a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802005e:	e7ed      	b.n	802003c <_strtod_l+0xfc>
 8020060:	f8df b184 	ldr.w	fp, [pc, #388]	; 80201e8 <_strtod_l+0x2a8>
 8020064:	f04f 0a00 	mov.w	sl, #0
 8020068:	e7e8      	b.n	802003c <_strtod_l+0xfc>
 802006a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 802006e:	f04f 3aff 	mov.w	sl, #4294967295
 8020072:	e7e3      	b.n	802003c <_strtod_l+0xfc>
 8020074:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020076:	1c5a      	adds	r2, r3, #1
 8020078:	921d      	str	r2, [sp, #116]	; 0x74
 802007a:	785b      	ldrb	r3, [r3, #1]
 802007c:	2b30      	cmp	r3, #48	; 0x30
 802007e:	d0f9      	beq.n	8020074 <_strtod_l+0x134>
 8020080:	2b00      	cmp	r3, #0
 8020082:	d09f      	beq.n	801ffc4 <_strtod_l+0x84>
 8020084:	2301      	movs	r3, #1
 8020086:	f04f 0900 	mov.w	r9, #0
 802008a:	9304      	str	r3, [sp, #16]
 802008c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802008e:	930a      	str	r3, [sp, #40]	; 0x28
 8020090:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020094:	464f      	mov	r7, r9
 8020096:	220a      	movs	r2, #10
 8020098:	981d      	ldr	r0, [sp, #116]	; 0x74
 802009a:	7806      	ldrb	r6, [r0, #0]
 802009c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80200a0:	b2d9      	uxtb	r1, r3
 80200a2:	2909      	cmp	r1, #9
 80200a4:	d92a      	bls.n	80200fc <_strtod_l+0x1bc>
 80200a6:	9907      	ldr	r1, [sp, #28]
 80200a8:	462a      	mov	r2, r5
 80200aa:	f7ff ff07 	bl	801febc <strncmp>
 80200ae:	b398      	cbz	r0, 8020118 <_strtod_l+0x1d8>
 80200b0:	2000      	movs	r0, #0
 80200b2:	4633      	mov	r3, r6
 80200b4:	463d      	mov	r5, r7
 80200b6:	9007      	str	r0, [sp, #28]
 80200b8:	4602      	mov	r2, r0
 80200ba:	2b65      	cmp	r3, #101	; 0x65
 80200bc:	d001      	beq.n	80200c2 <_strtod_l+0x182>
 80200be:	2b45      	cmp	r3, #69	; 0x45
 80200c0:	d118      	bne.n	80200f4 <_strtod_l+0x1b4>
 80200c2:	b91d      	cbnz	r5, 80200cc <_strtod_l+0x18c>
 80200c4:	9b04      	ldr	r3, [sp, #16]
 80200c6:	4303      	orrs	r3, r0
 80200c8:	d098      	beq.n	801fffc <_strtod_l+0xbc>
 80200ca:	2500      	movs	r5, #0
 80200cc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80200d0:	f108 0301 	add.w	r3, r8, #1
 80200d4:	931d      	str	r3, [sp, #116]	; 0x74
 80200d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80200da:	2b2b      	cmp	r3, #43	; 0x2b
 80200dc:	d075      	beq.n	80201ca <_strtod_l+0x28a>
 80200de:	2b2d      	cmp	r3, #45	; 0x2d
 80200e0:	d07b      	beq.n	80201da <_strtod_l+0x29a>
 80200e2:	f04f 0c00 	mov.w	ip, #0
 80200e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80200ea:	2909      	cmp	r1, #9
 80200ec:	f240 8082 	bls.w	80201f4 <_strtod_l+0x2b4>
 80200f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80200f4:	2600      	movs	r6, #0
 80200f6:	e09d      	b.n	8020234 <_strtod_l+0x2f4>
 80200f8:	2300      	movs	r3, #0
 80200fa:	e7c4      	b.n	8020086 <_strtod_l+0x146>
 80200fc:	2f08      	cmp	r7, #8
 80200fe:	bfd8      	it	le
 8020100:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8020102:	f100 0001 	add.w	r0, r0, #1
 8020106:	bfda      	itte	le
 8020108:	fb02 3301 	mlale	r3, r2, r1, r3
 802010c:	9309      	strle	r3, [sp, #36]	; 0x24
 802010e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8020112:	3701      	adds	r7, #1
 8020114:	901d      	str	r0, [sp, #116]	; 0x74
 8020116:	e7bf      	b.n	8020098 <_strtod_l+0x158>
 8020118:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802011a:	195a      	adds	r2, r3, r5
 802011c:	921d      	str	r2, [sp, #116]	; 0x74
 802011e:	5d5b      	ldrb	r3, [r3, r5]
 8020120:	2f00      	cmp	r7, #0
 8020122:	d037      	beq.n	8020194 <_strtod_l+0x254>
 8020124:	9007      	str	r0, [sp, #28]
 8020126:	463d      	mov	r5, r7
 8020128:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802012c:	2a09      	cmp	r2, #9
 802012e:	d912      	bls.n	8020156 <_strtod_l+0x216>
 8020130:	2201      	movs	r2, #1
 8020132:	e7c2      	b.n	80200ba <_strtod_l+0x17a>
 8020134:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020136:	1c5a      	adds	r2, r3, #1
 8020138:	921d      	str	r2, [sp, #116]	; 0x74
 802013a:	785b      	ldrb	r3, [r3, #1]
 802013c:	3001      	adds	r0, #1
 802013e:	2b30      	cmp	r3, #48	; 0x30
 8020140:	d0f8      	beq.n	8020134 <_strtod_l+0x1f4>
 8020142:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8020146:	2a08      	cmp	r2, #8
 8020148:	f200 84db 	bhi.w	8020b02 <_strtod_l+0xbc2>
 802014c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802014e:	9007      	str	r0, [sp, #28]
 8020150:	2000      	movs	r0, #0
 8020152:	920a      	str	r2, [sp, #40]	; 0x28
 8020154:	4605      	mov	r5, r0
 8020156:	3b30      	subs	r3, #48	; 0x30
 8020158:	f100 0201 	add.w	r2, r0, #1
 802015c:	d014      	beq.n	8020188 <_strtod_l+0x248>
 802015e:	9907      	ldr	r1, [sp, #28]
 8020160:	4411      	add	r1, r2
 8020162:	9107      	str	r1, [sp, #28]
 8020164:	462a      	mov	r2, r5
 8020166:	eb00 0e05 	add.w	lr, r0, r5
 802016a:	210a      	movs	r1, #10
 802016c:	4572      	cmp	r2, lr
 802016e:	d113      	bne.n	8020198 <_strtod_l+0x258>
 8020170:	182a      	adds	r2, r5, r0
 8020172:	2a08      	cmp	r2, #8
 8020174:	f105 0501 	add.w	r5, r5, #1
 8020178:	4405      	add	r5, r0
 802017a:	dc1c      	bgt.n	80201b6 <_strtod_l+0x276>
 802017c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802017e:	220a      	movs	r2, #10
 8020180:	fb02 3301 	mla	r3, r2, r1, r3
 8020184:	9309      	str	r3, [sp, #36]	; 0x24
 8020186:	2200      	movs	r2, #0
 8020188:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802018a:	1c59      	adds	r1, r3, #1
 802018c:	911d      	str	r1, [sp, #116]	; 0x74
 802018e:	785b      	ldrb	r3, [r3, #1]
 8020190:	4610      	mov	r0, r2
 8020192:	e7c9      	b.n	8020128 <_strtod_l+0x1e8>
 8020194:	4638      	mov	r0, r7
 8020196:	e7d2      	b.n	802013e <_strtod_l+0x1fe>
 8020198:	2a08      	cmp	r2, #8
 802019a:	dc04      	bgt.n	80201a6 <_strtod_l+0x266>
 802019c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802019e:	434e      	muls	r6, r1
 80201a0:	9609      	str	r6, [sp, #36]	; 0x24
 80201a2:	3201      	adds	r2, #1
 80201a4:	e7e2      	b.n	802016c <_strtod_l+0x22c>
 80201a6:	f102 0c01 	add.w	ip, r2, #1
 80201aa:	f1bc 0f10 	cmp.w	ip, #16
 80201ae:	bfd8      	it	le
 80201b0:	fb01 f909 	mulle.w	r9, r1, r9
 80201b4:	e7f5      	b.n	80201a2 <_strtod_l+0x262>
 80201b6:	2d10      	cmp	r5, #16
 80201b8:	bfdc      	itt	le
 80201ba:	220a      	movle	r2, #10
 80201bc:	fb02 3909 	mlale	r9, r2, r9, r3
 80201c0:	e7e1      	b.n	8020186 <_strtod_l+0x246>
 80201c2:	2300      	movs	r3, #0
 80201c4:	9307      	str	r3, [sp, #28]
 80201c6:	2201      	movs	r2, #1
 80201c8:	e77c      	b.n	80200c4 <_strtod_l+0x184>
 80201ca:	f04f 0c00 	mov.w	ip, #0
 80201ce:	f108 0302 	add.w	r3, r8, #2
 80201d2:	931d      	str	r3, [sp, #116]	; 0x74
 80201d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80201d8:	e785      	b.n	80200e6 <_strtod_l+0x1a6>
 80201da:	f04f 0c01 	mov.w	ip, #1
 80201de:	e7f6      	b.n	80201ce <_strtod_l+0x28e>
 80201e0:	080242c8 	.word	0x080242c8
 80201e4:	08024178 	.word	0x08024178
 80201e8:	7ff00000 	.word	0x7ff00000
 80201ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80201ee:	1c59      	adds	r1, r3, #1
 80201f0:	911d      	str	r1, [sp, #116]	; 0x74
 80201f2:	785b      	ldrb	r3, [r3, #1]
 80201f4:	2b30      	cmp	r3, #48	; 0x30
 80201f6:	d0f9      	beq.n	80201ec <_strtod_l+0x2ac>
 80201f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80201fc:	2908      	cmp	r1, #8
 80201fe:	f63f af79 	bhi.w	80200f4 <_strtod_l+0x1b4>
 8020202:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8020206:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020208:	9308      	str	r3, [sp, #32]
 802020a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802020c:	1c59      	adds	r1, r3, #1
 802020e:	911d      	str	r1, [sp, #116]	; 0x74
 8020210:	785b      	ldrb	r3, [r3, #1]
 8020212:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8020216:	2e09      	cmp	r6, #9
 8020218:	d937      	bls.n	802028a <_strtod_l+0x34a>
 802021a:	9e08      	ldr	r6, [sp, #32]
 802021c:	1b89      	subs	r1, r1, r6
 802021e:	2908      	cmp	r1, #8
 8020220:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8020224:	dc02      	bgt.n	802022c <_strtod_l+0x2ec>
 8020226:	4576      	cmp	r6, lr
 8020228:	bfa8      	it	ge
 802022a:	4676      	movge	r6, lr
 802022c:	f1bc 0f00 	cmp.w	ip, #0
 8020230:	d000      	beq.n	8020234 <_strtod_l+0x2f4>
 8020232:	4276      	negs	r6, r6
 8020234:	2d00      	cmp	r5, #0
 8020236:	d14f      	bne.n	80202d8 <_strtod_l+0x398>
 8020238:	9904      	ldr	r1, [sp, #16]
 802023a:	4301      	orrs	r1, r0
 802023c:	f47f aec2 	bne.w	801ffc4 <_strtod_l+0x84>
 8020240:	2a00      	cmp	r2, #0
 8020242:	f47f aedb 	bne.w	801fffc <_strtod_l+0xbc>
 8020246:	2b69      	cmp	r3, #105	; 0x69
 8020248:	d027      	beq.n	802029a <_strtod_l+0x35a>
 802024a:	dc24      	bgt.n	8020296 <_strtod_l+0x356>
 802024c:	2b49      	cmp	r3, #73	; 0x49
 802024e:	d024      	beq.n	802029a <_strtod_l+0x35a>
 8020250:	2b4e      	cmp	r3, #78	; 0x4e
 8020252:	f47f aed3 	bne.w	801fffc <_strtod_l+0xbc>
 8020256:	499e      	ldr	r1, [pc, #632]	; (80204d0 <_strtod_l+0x590>)
 8020258:	a81d      	add	r0, sp, #116	; 0x74
 802025a:	f001 ff43 	bl	80220e4 <__match>
 802025e:	2800      	cmp	r0, #0
 8020260:	f43f aecc 	beq.w	801fffc <_strtod_l+0xbc>
 8020264:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020266:	781b      	ldrb	r3, [r3, #0]
 8020268:	2b28      	cmp	r3, #40	; 0x28
 802026a:	d12d      	bne.n	80202c8 <_strtod_l+0x388>
 802026c:	4999      	ldr	r1, [pc, #612]	; (80204d4 <_strtod_l+0x594>)
 802026e:	aa20      	add	r2, sp, #128	; 0x80
 8020270:	a81d      	add	r0, sp, #116	; 0x74
 8020272:	f001 ff4b 	bl	802210c <__hexnan>
 8020276:	2805      	cmp	r0, #5
 8020278:	d126      	bne.n	80202c8 <_strtod_l+0x388>
 802027a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802027c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8020280:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8020284:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8020288:	e69c      	b.n	801ffc4 <_strtod_l+0x84>
 802028a:	210a      	movs	r1, #10
 802028c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8020290:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8020294:	e7b9      	b.n	802020a <_strtod_l+0x2ca>
 8020296:	2b6e      	cmp	r3, #110	; 0x6e
 8020298:	e7db      	b.n	8020252 <_strtod_l+0x312>
 802029a:	498f      	ldr	r1, [pc, #572]	; (80204d8 <_strtod_l+0x598>)
 802029c:	a81d      	add	r0, sp, #116	; 0x74
 802029e:	f001 ff21 	bl	80220e4 <__match>
 80202a2:	2800      	cmp	r0, #0
 80202a4:	f43f aeaa 	beq.w	801fffc <_strtod_l+0xbc>
 80202a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80202aa:	498c      	ldr	r1, [pc, #560]	; (80204dc <_strtod_l+0x59c>)
 80202ac:	3b01      	subs	r3, #1
 80202ae:	a81d      	add	r0, sp, #116	; 0x74
 80202b0:	931d      	str	r3, [sp, #116]	; 0x74
 80202b2:	f001 ff17 	bl	80220e4 <__match>
 80202b6:	b910      	cbnz	r0, 80202be <_strtod_l+0x37e>
 80202b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80202ba:	3301      	adds	r3, #1
 80202bc:	931d      	str	r3, [sp, #116]	; 0x74
 80202be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80204ec <_strtod_l+0x5ac>
 80202c2:	f04f 0a00 	mov.w	sl, #0
 80202c6:	e67d      	b.n	801ffc4 <_strtod_l+0x84>
 80202c8:	4885      	ldr	r0, [pc, #532]	; (80204e0 <_strtod_l+0x5a0>)
 80202ca:	f002 fe29 	bl	8022f20 <nan>
 80202ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 80202d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80202d6:	e675      	b.n	801ffc4 <_strtod_l+0x84>
 80202d8:	9b07      	ldr	r3, [sp, #28]
 80202da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80202dc:	1af3      	subs	r3, r6, r3
 80202de:	2f00      	cmp	r7, #0
 80202e0:	bf08      	it	eq
 80202e2:	462f      	moveq	r7, r5
 80202e4:	2d10      	cmp	r5, #16
 80202e6:	9308      	str	r3, [sp, #32]
 80202e8:	46a8      	mov	r8, r5
 80202ea:	bfa8      	it	ge
 80202ec:	f04f 0810 	movge.w	r8, #16
 80202f0:	f7e0 f930 	bl	8000554 <__aeabi_ui2d>
 80202f4:	2d09      	cmp	r5, #9
 80202f6:	4682      	mov	sl, r0
 80202f8:	468b      	mov	fp, r1
 80202fa:	dd13      	ble.n	8020324 <_strtod_l+0x3e4>
 80202fc:	4b79      	ldr	r3, [pc, #484]	; (80204e4 <_strtod_l+0x5a4>)
 80202fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8020302:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8020306:	f7e0 f99f 	bl	8000648 <__aeabi_dmul>
 802030a:	4682      	mov	sl, r0
 802030c:	4648      	mov	r0, r9
 802030e:	468b      	mov	fp, r1
 8020310:	f7e0 f920 	bl	8000554 <__aeabi_ui2d>
 8020314:	4602      	mov	r2, r0
 8020316:	460b      	mov	r3, r1
 8020318:	4650      	mov	r0, sl
 802031a:	4659      	mov	r1, fp
 802031c:	f7df ffde 	bl	80002dc <__adddf3>
 8020320:	4682      	mov	sl, r0
 8020322:	468b      	mov	fp, r1
 8020324:	2d0f      	cmp	r5, #15
 8020326:	dc38      	bgt.n	802039a <_strtod_l+0x45a>
 8020328:	9b08      	ldr	r3, [sp, #32]
 802032a:	2b00      	cmp	r3, #0
 802032c:	f43f ae4a 	beq.w	801ffc4 <_strtod_l+0x84>
 8020330:	dd24      	ble.n	802037c <_strtod_l+0x43c>
 8020332:	2b16      	cmp	r3, #22
 8020334:	dc0b      	bgt.n	802034e <_strtod_l+0x40e>
 8020336:	4d6b      	ldr	r5, [pc, #428]	; (80204e4 <_strtod_l+0x5a4>)
 8020338:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 802033c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8020340:	4652      	mov	r2, sl
 8020342:	465b      	mov	r3, fp
 8020344:	f7e0 f980 	bl	8000648 <__aeabi_dmul>
 8020348:	4682      	mov	sl, r0
 802034a:	468b      	mov	fp, r1
 802034c:	e63a      	b.n	801ffc4 <_strtod_l+0x84>
 802034e:	9a08      	ldr	r2, [sp, #32]
 8020350:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8020354:	4293      	cmp	r3, r2
 8020356:	db20      	blt.n	802039a <_strtod_l+0x45a>
 8020358:	4c62      	ldr	r4, [pc, #392]	; (80204e4 <_strtod_l+0x5a4>)
 802035a:	f1c5 050f 	rsb	r5, r5, #15
 802035e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020362:	4652      	mov	r2, sl
 8020364:	465b      	mov	r3, fp
 8020366:	e9d1 0100 	ldrd	r0, r1, [r1]
 802036a:	f7e0 f96d 	bl	8000648 <__aeabi_dmul>
 802036e:	9b08      	ldr	r3, [sp, #32]
 8020370:	1b5d      	subs	r5, r3, r5
 8020372:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020376:	e9d4 2300 	ldrd	r2, r3, [r4]
 802037a:	e7e3      	b.n	8020344 <_strtod_l+0x404>
 802037c:	9b08      	ldr	r3, [sp, #32]
 802037e:	3316      	adds	r3, #22
 8020380:	db0b      	blt.n	802039a <_strtod_l+0x45a>
 8020382:	9b07      	ldr	r3, [sp, #28]
 8020384:	4a57      	ldr	r2, [pc, #348]	; (80204e4 <_strtod_l+0x5a4>)
 8020386:	1b9e      	subs	r6, r3, r6
 8020388:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 802038c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020390:	4650      	mov	r0, sl
 8020392:	4659      	mov	r1, fp
 8020394:	f7e0 fa82 	bl	800089c <__aeabi_ddiv>
 8020398:	e7d6      	b.n	8020348 <_strtod_l+0x408>
 802039a:	9b08      	ldr	r3, [sp, #32]
 802039c:	eba5 0808 	sub.w	r8, r5, r8
 80203a0:	4498      	add	r8, r3
 80203a2:	f1b8 0f00 	cmp.w	r8, #0
 80203a6:	dd71      	ble.n	802048c <_strtod_l+0x54c>
 80203a8:	f018 030f 	ands.w	r3, r8, #15
 80203ac:	d00a      	beq.n	80203c4 <_strtod_l+0x484>
 80203ae:	494d      	ldr	r1, [pc, #308]	; (80204e4 <_strtod_l+0x5a4>)
 80203b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80203b4:	4652      	mov	r2, sl
 80203b6:	465b      	mov	r3, fp
 80203b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80203bc:	f7e0 f944 	bl	8000648 <__aeabi_dmul>
 80203c0:	4682      	mov	sl, r0
 80203c2:	468b      	mov	fp, r1
 80203c4:	f038 080f 	bics.w	r8, r8, #15
 80203c8:	d04d      	beq.n	8020466 <_strtod_l+0x526>
 80203ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80203ce:	dd22      	ble.n	8020416 <_strtod_l+0x4d6>
 80203d0:	2500      	movs	r5, #0
 80203d2:	462e      	mov	r6, r5
 80203d4:	9509      	str	r5, [sp, #36]	; 0x24
 80203d6:	9507      	str	r5, [sp, #28]
 80203d8:	2322      	movs	r3, #34	; 0x22
 80203da:	f8df b110 	ldr.w	fp, [pc, #272]	; 80204ec <_strtod_l+0x5ac>
 80203de:	6023      	str	r3, [r4, #0]
 80203e0:	f04f 0a00 	mov.w	sl, #0
 80203e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	f43f adec 	beq.w	801ffc4 <_strtod_l+0x84>
 80203ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80203ee:	4620      	mov	r0, r4
 80203f0:	f001 ffac 	bl	802234c <_Bfree>
 80203f4:	9907      	ldr	r1, [sp, #28]
 80203f6:	4620      	mov	r0, r4
 80203f8:	f001 ffa8 	bl	802234c <_Bfree>
 80203fc:	4631      	mov	r1, r6
 80203fe:	4620      	mov	r0, r4
 8020400:	f001 ffa4 	bl	802234c <_Bfree>
 8020404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020406:	4620      	mov	r0, r4
 8020408:	f001 ffa0 	bl	802234c <_Bfree>
 802040c:	4629      	mov	r1, r5
 802040e:	4620      	mov	r0, r4
 8020410:	f001 ff9c 	bl	802234c <_Bfree>
 8020414:	e5d6      	b.n	801ffc4 <_strtod_l+0x84>
 8020416:	2300      	movs	r3, #0
 8020418:	ea4f 1828 	mov.w	r8, r8, asr #4
 802041c:	4650      	mov	r0, sl
 802041e:	4659      	mov	r1, fp
 8020420:	4699      	mov	r9, r3
 8020422:	f1b8 0f01 	cmp.w	r8, #1
 8020426:	dc21      	bgt.n	802046c <_strtod_l+0x52c>
 8020428:	b10b      	cbz	r3, 802042e <_strtod_l+0x4ee>
 802042a:	4682      	mov	sl, r0
 802042c:	468b      	mov	fp, r1
 802042e:	4b2e      	ldr	r3, [pc, #184]	; (80204e8 <_strtod_l+0x5a8>)
 8020430:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8020434:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8020438:	4652      	mov	r2, sl
 802043a:	465b      	mov	r3, fp
 802043c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8020440:	f7e0 f902 	bl	8000648 <__aeabi_dmul>
 8020444:	4b29      	ldr	r3, [pc, #164]	; (80204ec <_strtod_l+0x5ac>)
 8020446:	460a      	mov	r2, r1
 8020448:	400b      	ands	r3, r1
 802044a:	4929      	ldr	r1, [pc, #164]	; (80204f0 <_strtod_l+0x5b0>)
 802044c:	428b      	cmp	r3, r1
 802044e:	4682      	mov	sl, r0
 8020450:	d8be      	bhi.n	80203d0 <_strtod_l+0x490>
 8020452:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8020456:	428b      	cmp	r3, r1
 8020458:	bf86      	itte	hi
 802045a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80204f4 <_strtod_l+0x5b4>
 802045e:	f04f 3aff 	movhi.w	sl, #4294967295
 8020462:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8020466:	2300      	movs	r3, #0
 8020468:	9304      	str	r3, [sp, #16]
 802046a:	e081      	b.n	8020570 <_strtod_l+0x630>
 802046c:	f018 0f01 	tst.w	r8, #1
 8020470:	d007      	beq.n	8020482 <_strtod_l+0x542>
 8020472:	4b1d      	ldr	r3, [pc, #116]	; (80204e8 <_strtod_l+0x5a8>)
 8020474:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8020478:	e9d3 2300 	ldrd	r2, r3, [r3]
 802047c:	f7e0 f8e4 	bl	8000648 <__aeabi_dmul>
 8020480:	2301      	movs	r3, #1
 8020482:	f109 0901 	add.w	r9, r9, #1
 8020486:	ea4f 0868 	mov.w	r8, r8, asr #1
 802048a:	e7ca      	b.n	8020422 <_strtod_l+0x4e2>
 802048c:	d0eb      	beq.n	8020466 <_strtod_l+0x526>
 802048e:	f1c8 0800 	rsb	r8, r8, #0
 8020492:	f018 020f 	ands.w	r2, r8, #15
 8020496:	d00a      	beq.n	80204ae <_strtod_l+0x56e>
 8020498:	4b12      	ldr	r3, [pc, #72]	; (80204e4 <_strtod_l+0x5a4>)
 802049a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802049e:	4650      	mov	r0, sl
 80204a0:	4659      	mov	r1, fp
 80204a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204a6:	f7e0 f9f9 	bl	800089c <__aeabi_ddiv>
 80204aa:	4682      	mov	sl, r0
 80204ac:	468b      	mov	fp, r1
 80204ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 80204b2:	d0d8      	beq.n	8020466 <_strtod_l+0x526>
 80204b4:	f1b8 0f1f 	cmp.w	r8, #31
 80204b8:	dd1e      	ble.n	80204f8 <_strtod_l+0x5b8>
 80204ba:	2500      	movs	r5, #0
 80204bc:	462e      	mov	r6, r5
 80204be:	9509      	str	r5, [sp, #36]	; 0x24
 80204c0:	9507      	str	r5, [sp, #28]
 80204c2:	2322      	movs	r3, #34	; 0x22
 80204c4:	f04f 0a00 	mov.w	sl, #0
 80204c8:	f04f 0b00 	mov.w	fp, #0
 80204cc:	6023      	str	r3, [r4, #0]
 80204ce:	e789      	b.n	80203e4 <_strtod_l+0x4a4>
 80204d0:	08024151 	.word	0x08024151
 80204d4:	0802418c 	.word	0x0802418c
 80204d8:	08024149 	.word	0x08024149
 80204dc:	080241cb 	.word	0x080241cb
 80204e0:	08024488 	.word	0x08024488
 80204e4:	08024368 	.word	0x08024368
 80204e8:	08024340 	.word	0x08024340
 80204ec:	7ff00000 	.word	0x7ff00000
 80204f0:	7ca00000 	.word	0x7ca00000
 80204f4:	7fefffff 	.word	0x7fefffff
 80204f8:	f018 0310 	ands.w	r3, r8, #16
 80204fc:	bf18      	it	ne
 80204fe:	236a      	movne	r3, #106	; 0x6a
 8020500:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80208b8 <_strtod_l+0x978>
 8020504:	9304      	str	r3, [sp, #16]
 8020506:	4650      	mov	r0, sl
 8020508:	4659      	mov	r1, fp
 802050a:	2300      	movs	r3, #0
 802050c:	f018 0f01 	tst.w	r8, #1
 8020510:	d004      	beq.n	802051c <_strtod_l+0x5dc>
 8020512:	e9d9 2300 	ldrd	r2, r3, [r9]
 8020516:	f7e0 f897 	bl	8000648 <__aeabi_dmul>
 802051a:	2301      	movs	r3, #1
 802051c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8020520:	f109 0908 	add.w	r9, r9, #8
 8020524:	d1f2      	bne.n	802050c <_strtod_l+0x5cc>
 8020526:	b10b      	cbz	r3, 802052c <_strtod_l+0x5ec>
 8020528:	4682      	mov	sl, r0
 802052a:	468b      	mov	fp, r1
 802052c:	9b04      	ldr	r3, [sp, #16]
 802052e:	b1bb      	cbz	r3, 8020560 <_strtod_l+0x620>
 8020530:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8020534:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020538:	2b00      	cmp	r3, #0
 802053a:	4659      	mov	r1, fp
 802053c:	dd10      	ble.n	8020560 <_strtod_l+0x620>
 802053e:	2b1f      	cmp	r3, #31
 8020540:	f340 8128 	ble.w	8020794 <_strtod_l+0x854>
 8020544:	2b34      	cmp	r3, #52	; 0x34
 8020546:	bfde      	ittt	le
 8020548:	3b20      	suble	r3, #32
 802054a:	f04f 32ff 	movle.w	r2, #4294967295
 802054e:	fa02 f303 	lslle.w	r3, r2, r3
 8020552:	f04f 0a00 	mov.w	sl, #0
 8020556:	bfcc      	ite	gt
 8020558:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802055c:	ea03 0b01 	andle.w	fp, r3, r1
 8020560:	2200      	movs	r2, #0
 8020562:	2300      	movs	r3, #0
 8020564:	4650      	mov	r0, sl
 8020566:	4659      	mov	r1, fp
 8020568:	f7e0 fad6 	bl	8000b18 <__aeabi_dcmpeq>
 802056c:	2800      	cmp	r0, #0
 802056e:	d1a4      	bne.n	80204ba <_strtod_l+0x57a>
 8020570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020572:	9300      	str	r3, [sp, #0]
 8020574:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020576:	462b      	mov	r3, r5
 8020578:	463a      	mov	r2, r7
 802057a:	4620      	mov	r0, r4
 802057c:	f001 ff52 	bl	8022424 <__s2b>
 8020580:	9009      	str	r0, [sp, #36]	; 0x24
 8020582:	2800      	cmp	r0, #0
 8020584:	f43f af24 	beq.w	80203d0 <_strtod_l+0x490>
 8020588:	9b07      	ldr	r3, [sp, #28]
 802058a:	1b9e      	subs	r6, r3, r6
 802058c:	9b08      	ldr	r3, [sp, #32]
 802058e:	2b00      	cmp	r3, #0
 8020590:	bfb4      	ite	lt
 8020592:	4633      	movlt	r3, r6
 8020594:	2300      	movge	r3, #0
 8020596:	9310      	str	r3, [sp, #64]	; 0x40
 8020598:	9b08      	ldr	r3, [sp, #32]
 802059a:	2500      	movs	r5, #0
 802059c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80205a0:	9318      	str	r3, [sp, #96]	; 0x60
 80205a2:	462e      	mov	r6, r5
 80205a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205a6:	4620      	mov	r0, r4
 80205a8:	6859      	ldr	r1, [r3, #4]
 80205aa:	f001 fe8f 	bl	80222cc <_Balloc>
 80205ae:	9007      	str	r0, [sp, #28]
 80205b0:	2800      	cmp	r0, #0
 80205b2:	f43f af11 	beq.w	80203d8 <_strtod_l+0x498>
 80205b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205b8:	691a      	ldr	r2, [r3, #16]
 80205ba:	3202      	adds	r2, #2
 80205bc:	f103 010c 	add.w	r1, r3, #12
 80205c0:	0092      	lsls	r2, r2, #2
 80205c2:	300c      	adds	r0, #12
 80205c4:	f7fe fea6 	bl	801f314 <memcpy>
 80205c8:	ec4b ab10 	vmov	d0, sl, fp
 80205cc:	aa20      	add	r2, sp, #128	; 0x80
 80205ce:	a91f      	add	r1, sp, #124	; 0x7c
 80205d0:	4620      	mov	r0, r4
 80205d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80205d6:	f002 fa61 	bl	8022a9c <__d2b>
 80205da:	901e      	str	r0, [sp, #120]	; 0x78
 80205dc:	2800      	cmp	r0, #0
 80205de:	f43f aefb 	beq.w	80203d8 <_strtod_l+0x498>
 80205e2:	2101      	movs	r1, #1
 80205e4:	4620      	mov	r0, r4
 80205e6:	f001 ffb7 	bl	8022558 <__i2b>
 80205ea:	4606      	mov	r6, r0
 80205ec:	2800      	cmp	r0, #0
 80205ee:	f43f aef3 	beq.w	80203d8 <_strtod_l+0x498>
 80205f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80205f4:	9904      	ldr	r1, [sp, #16]
 80205f6:	2b00      	cmp	r3, #0
 80205f8:	bfab      	itete	ge
 80205fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80205fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80205fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8020600:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8020604:	bfac      	ite	ge
 8020606:	eb03 0902 	addge.w	r9, r3, r2
 802060a:	1ad7      	sublt	r7, r2, r3
 802060c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802060e:	eba3 0801 	sub.w	r8, r3, r1
 8020612:	4490      	add	r8, r2
 8020614:	4ba3      	ldr	r3, [pc, #652]	; (80208a4 <_strtod_l+0x964>)
 8020616:	f108 38ff 	add.w	r8, r8, #4294967295
 802061a:	4598      	cmp	r8, r3
 802061c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8020620:	f280 80cc 	bge.w	80207bc <_strtod_l+0x87c>
 8020624:	eba3 0308 	sub.w	r3, r3, r8
 8020628:	2b1f      	cmp	r3, #31
 802062a:	eba2 0203 	sub.w	r2, r2, r3
 802062e:	f04f 0101 	mov.w	r1, #1
 8020632:	f300 80b6 	bgt.w	80207a2 <_strtod_l+0x862>
 8020636:	fa01 f303 	lsl.w	r3, r1, r3
 802063a:	9311      	str	r3, [sp, #68]	; 0x44
 802063c:	2300      	movs	r3, #0
 802063e:	930c      	str	r3, [sp, #48]	; 0x30
 8020640:	eb09 0802 	add.w	r8, r9, r2
 8020644:	9b04      	ldr	r3, [sp, #16]
 8020646:	45c1      	cmp	r9, r8
 8020648:	4417      	add	r7, r2
 802064a:	441f      	add	r7, r3
 802064c:	464b      	mov	r3, r9
 802064e:	bfa8      	it	ge
 8020650:	4643      	movge	r3, r8
 8020652:	42bb      	cmp	r3, r7
 8020654:	bfa8      	it	ge
 8020656:	463b      	movge	r3, r7
 8020658:	2b00      	cmp	r3, #0
 802065a:	bfc2      	ittt	gt
 802065c:	eba8 0803 	subgt.w	r8, r8, r3
 8020660:	1aff      	subgt	r7, r7, r3
 8020662:	eba9 0903 	subgt.w	r9, r9, r3
 8020666:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020668:	2b00      	cmp	r3, #0
 802066a:	dd17      	ble.n	802069c <_strtod_l+0x75c>
 802066c:	4631      	mov	r1, r6
 802066e:	461a      	mov	r2, r3
 8020670:	4620      	mov	r0, r4
 8020672:	f002 f82d 	bl	80226d0 <__pow5mult>
 8020676:	4606      	mov	r6, r0
 8020678:	2800      	cmp	r0, #0
 802067a:	f43f aead 	beq.w	80203d8 <_strtod_l+0x498>
 802067e:	4601      	mov	r1, r0
 8020680:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020682:	4620      	mov	r0, r4
 8020684:	f001 ff7e 	bl	8022584 <__multiply>
 8020688:	900f      	str	r0, [sp, #60]	; 0x3c
 802068a:	2800      	cmp	r0, #0
 802068c:	f43f aea4 	beq.w	80203d8 <_strtod_l+0x498>
 8020690:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020692:	4620      	mov	r0, r4
 8020694:	f001 fe5a 	bl	802234c <_Bfree>
 8020698:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802069a:	931e      	str	r3, [sp, #120]	; 0x78
 802069c:	f1b8 0f00 	cmp.w	r8, #0
 80206a0:	f300 8091 	bgt.w	80207c6 <_strtod_l+0x886>
 80206a4:	9b08      	ldr	r3, [sp, #32]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	dd08      	ble.n	80206bc <_strtod_l+0x77c>
 80206aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80206ac:	9907      	ldr	r1, [sp, #28]
 80206ae:	4620      	mov	r0, r4
 80206b0:	f002 f80e 	bl	80226d0 <__pow5mult>
 80206b4:	9007      	str	r0, [sp, #28]
 80206b6:	2800      	cmp	r0, #0
 80206b8:	f43f ae8e 	beq.w	80203d8 <_strtod_l+0x498>
 80206bc:	2f00      	cmp	r7, #0
 80206be:	dd08      	ble.n	80206d2 <_strtod_l+0x792>
 80206c0:	9907      	ldr	r1, [sp, #28]
 80206c2:	463a      	mov	r2, r7
 80206c4:	4620      	mov	r0, r4
 80206c6:	f002 f85d 	bl	8022784 <__lshift>
 80206ca:	9007      	str	r0, [sp, #28]
 80206cc:	2800      	cmp	r0, #0
 80206ce:	f43f ae83 	beq.w	80203d8 <_strtod_l+0x498>
 80206d2:	f1b9 0f00 	cmp.w	r9, #0
 80206d6:	dd08      	ble.n	80206ea <_strtod_l+0x7aa>
 80206d8:	4631      	mov	r1, r6
 80206da:	464a      	mov	r2, r9
 80206dc:	4620      	mov	r0, r4
 80206de:	f002 f851 	bl	8022784 <__lshift>
 80206e2:	4606      	mov	r6, r0
 80206e4:	2800      	cmp	r0, #0
 80206e6:	f43f ae77 	beq.w	80203d8 <_strtod_l+0x498>
 80206ea:	9a07      	ldr	r2, [sp, #28]
 80206ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80206ee:	4620      	mov	r0, r4
 80206f0:	f002 f8d0 	bl	8022894 <__mdiff>
 80206f4:	4605      	mov	r5, r0
 80206f6:	2800      	cmp	r0, #0
 80206f8:	f43f ae6e 	beq.w	80203d8 <_strtod_l+0x498>
 80206fc:	68c3      	ldr	r3, [r0, #12]
 80206fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8020700:	2300      	movs	r3, #0
 8020702:	60c3      	str	r3, [r0, #12]
 8020704:	4631      	mov	r1, r6
 8020706:	f002 f8a9 	bl	802285c <__mcmp>
 802070a:	2800      	cmp	r0, #0
 802070c:	da65      	bge.n	80207da <_strtod_l+0x89a>
 802070e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020710:	ea53 030a 	orrs.w	r3, r3, sl
 8020714:	f040 8087 	bne.w	8020826 <_strtod_l+0x8e6>
 8020718:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802071c:	2b00      	cmp	r3, #0
 802071e:	f040 8082 	bne.w	8020826 <_strtod_l+0x8e6>
 8020722:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020726:	0d1b      	lsrs	r3, r3, #20
 8020728:	051b      	lsls	r3, r3, #20
 802072a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802072e:	d97a      	bls.n	8020826 <_strtod_l+0x8e6>
 8020730:	696b      	ldr	r3, [r5, #20]
 8020732:	b913      	cbnz	r3, 802073a <_strtod_l+0x7fa>
 8020734:	692b      	ldr	r3, [r5, #16]
 8020736:	2b01      	cmp	r3, #1
 8020738:	dd75      	ble.n	8020826 <_strtod_l+0x8e6>
 802073a:	4629      	mov	r1, r5
 802073c:	2201      	movs	r2, #1
 802073e:	4620      	mov	r0, r4
 8020740:	f002 f820 	bl	8022784 <__lshift>
 8020744:	4631      	mov	r1, r6
 8020746:	4605      	mov	r5, r0
 8020748:	f002 f888 	bl	802285c <__mcmp>
 802074c:	2800      	cmp	r0, #0
 802074e:	dd6a      	ble.n	8020826 <_strtod_l+0x8e6>
 8020750:	9904      	ldr	r1, [sp, #16]
 8020752:	4a55      	ldr	r2, [pc, #340]	; (80208a8 <_strtod_l+0x968>)
 8020754:	465b      	mov	r3, fp
 8020756:	2900      	cmp	r1, #0
 8020758:	f000 8085 	beq.w	8020866 <_strtod_l+0x926>
 802075c:	ea02 010b 	and.w	r1, r2, fp
 8020760:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8020764:	dc7f      	bgt.n	8020866 <_strtod_l+0x926>
 8020766:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802076a:	f77f aeaa 	ble.w	80204c2 <_strtod_l+0x582>
 802076e:	4a4f      	ldr	r2, [pc, #316]	; (80208ac <_strtod_l+0x96c>)
 8020770:	2300      	movs	r3, #0
 8020772:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8020776:	4650      	mov	r0, sl
 8020778:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 802077c:	4659      	mov	r1, fp
 802077e:	f7df ff63 	bl	8000648 <__aeabi_dmul>
 8020782:	460b      	mov	r3, r1
 8020784:	4303      	orrs	r3, r0
 8020786:	bf08      	it	eq
 8020788:	2322      	moveq	r3, #34	; 0x22
 802078a:	4682      	mov	sl, r0
 802078c:	468b      	mov	fp, r1
 802078e:	bf08      	it	eq
 8020790:	6023      	streq	r3, [r4, #0]
 8020792:	e62b      	b.n	80203ec <_strtod_l+0x4ac>
 8020794:	f04f 32ff 	mov.w	r2, #4294967295
 8020798:	fa02 f303 	lsl.w	r3, r2, r3
 802079c:	ea03 0a0a 	and.w	sl, r3, sl
 80207a0:	e6de      	b.n	8020560 <_strtod_l+0x620>
 80207a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80207a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80207aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80207ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80207b2:	fa01 f308 	lsl.w	r3, r1, r8
 80207b6:	930c      	str	r3, [sp, #48]	; 0x30
 80207b8:	9111      	str	r1, [sp, #68]	; 0x44
 80207ba:	e741      	b.n	8020640 <_strtod_l+0x700>
 80207bc:	2300      	movs	r3, #0
 80207be:	930c      	str	r3, [sp, #48]	; 0x30
 80207c0:	2301      	movs	r3, #1
 80207c2:	9311      	str	r3, [sp, #68]	; 0x44
 80207c4:	e73c      	b.n	8020640 <_strtod_l+0x700>
 80207c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80207c8:	4642      	mov	r2, r8
 80207ca:	4620      	mov	r0, r4
 80207cc:	f001 ffda 	bl	8022784 <__lshift>
 80207d0:	901e      	str	r0, [sp, #120]	; 0x78
 80207d2:	2800      	cmp	r0, #0
 80207d4:	f47f af66 	bne.w	80206a4 <_strtod_l+0x764>
 80207d8:	e5fe      	b.n	80203d8 <_strtod_l+0x498>
 80207da:	465f      	mov	r7, fp
 80207dc:	d16e      	bne.n	80208bc <_strtod_l+0x97c>
 80207de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80207e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80207e4:	b342      	cbz	r2, 8020838 <_strtod_l+0x8f8>
 80207e6:	4a32      	ldr	r2, [pc, #200]	; (80208b0 <_strtod_l+0x970>)
 80207e8:	4293      	cmp	r3, r2
 80207ea:	d128      	bne.n	802083e <_strtod_l+0x8fe>
 80207ec:	9b04      	ldr	r3, [sp, #16]
 80207ee:	4650      	mov	r0, sl
 80207f0:	b1eb      	cbz	r3, 802082e <_strtod_l+0x8ee>
 80207f2:	4a2d      	ldr	r2, [pc, #180]	; (80208a8 <_strtod_l+0x968>)
 80207f4:	403a      	ands	r2, r7
 80207f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80207fa:	f04f 31ff 	mov.w	r1, #4294967295
 80207fe:	d819      	bhi.n	8020834 <_strtod_l+0x8f4>
 8020800:	0d12      	lsrs	r2, r2, #20
 8020802:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8020806:	fa01 f303 	lsl.w	r3, r1, r3
 802080a:	4298      	cmp	r0, r3
 802080c:	d117      	bne.n	802083e <_strtod_l+0x8fe>
 802080e:	4b29      	ldr	r3, [pc, #164]	; (80208b4 <_strtod_l+0x974>)
 8020810:	429f      	cmp	r7, r3
 8020812:	d102      	bne.n	802081a <_strtod_l+0x8da>
 8020814:	3001      	adds	r0, #1
 8020816:	f43f addf 	beq.w	80203d8 <_strtod_l+0x498>
 802081a:	4b23      	ldr	r3, [pc, #140]	; (80208a8 <_strtod_l+0x968>)
 802081c:	403b      	ands	r3, r7
 802081e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8020822:	f04f 0a00 	mov.w	sl, #0
 8020826:	9b04      	ldr	r3, [sp, #16]
 8020828:	2b00      	cmp	r3, #0
 802082a:	d1a0      	bne.n	802076e <_strtod_l+0x82e>
 802082c:	e5de      	b.n	80203ec <_strtod_l+0x4ac>
 802082e:	f04f 33ff 	mov.w	r3, #4294967295
 8020832:	e7ea      	b.n	802080a <_strtod_l+0x8ca>
 8020834:	460b      	mov	r3, r1
 8020836:	e7e8      	b.n	802080a <_strtod_l+0x8ca>
 8020838:	ea53 030a 	orrs.w	r3, r3, sl
 802083c:	d088      	beq.n	8020750 <_strtod_l+0x810>
 802083e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020840:	b1db      	cbz	r3, 802087a <_strtod_l+0x93a>
 8020842:	423b      	tst	r3, r7
 8020844:	d0ef      	beq.n	8020826 <_strtod_l+0x8e6>
 8020846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020848:	9a04      	ldr	r2, [sp, #16]
 802084a:	4650      	mov	r0, sl
 802084c:	4659      	mov	r1, fp
 802084e:	b1c3      	cbz	r3, 8020882 <_strtod_l+0x942>
 8020850:	f7ff fb59 	bl	801ff06 <sulp>
 8020854:	4602      	mov	r2, r0
 8020856:	460b      	mov	r3, r1
 8020858:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802085c:	f7df fd3e 	bl	80002dc <__adddf3>
 8020860:	4682      	mov	sl, r0
 8020862:	468b      	mov	fp, r1
 8020864:	e7df      	b.n	8020826 <_strtod_l+0x8e6>
 8020866:	4013      	ands	r3, r2
 8020868:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802086c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020870:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020874:	f04f 3aff 	mov.w	sl, #4294967295
 8020878:	e7d5      	b.n	8020826 <_strtod_l+0x8e6>
 802087a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802087c:	ea13 0f0a 	tst.w	r3, sl
 8020880:	e7e0      	b.n	8020844 <_strtod_l+0x904>
 8020882:	f7ff fb40 	bl	801ff06 <sulp>
 8020886:	4602      	mov	r2, r0
 8020888:	460b      	mov	r3, r1
 802088a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802088e:	f7df fd23 	bl	80002d8 <__aeabi_dsub>
 8020892:	2200      	movs	r2, #0
 8020894:	2300      	movs	r3, #0
 8020896:	4682      	mov	sl, r0
 8020898:	468b      	mov	fp, r1
 802089a:	f7e0 f93d 	bl	8000b18 <__aeabi_dcmpeq>
 802089e:	2800      	cmp	r0, #0
 80208a0:	d0c1      	beq.n	8020826 <_strtod_l+0x8e6>
 80208a2:	e60e      	b.n	80204c2 <_strtod_l+0x582>
 80208a4:	fffffc02 	.word	0xfffffc02
 80208a8:	7ff00000 	.word	0x7ff00000
 80208ac:	39500000 	.word	0x39500000
 80208b0:	000fffff 	.word	0x000fffff
 80208b4:	7fefffff 	.word	0x7fefffff
 80208b8:	080241a0 	.word	0x080241a0
 80208bc:	4631      	mov	r1, r6
 80208be:	4628      	mov	r0, r5
 80208c0:	f002 f948 	bl	8022b54 <__ratio>
 80208c4:	ec59 8b10 	vmov	r8, r9, d0
 80208c8:	ee10 0a10 	vmov	r0, s0
 80208cc:	2200      	movs	r2, #0
 80208ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80208d2:	4649      	mov	r1, r9
 80208d4:	f7e0 f934 	bl	8000b40 <__aeabi_dcmple>
 80208d8:	2800      	cmp	r0, #0
 80208da:	d07c      	beq.n	80209d6 <_strtod_l+0xa96>
 80208dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80208de:	2b00      	cmp	r3, #0
 80208e0:	d04c      	beq.n	802097c <_strtod_l+0xa3c>
 80208e2:	4b95      	ldr	r3, [pc, #596]	; (8020b38 <_strtod_l+0xbf8>)
 80208e4:	2200      	movs	r2, #0
 80208e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80208ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8020b38 <_strtod_l+0xbf8>
 80208ee:	f04f 0800 	mov.w	r8, #0
 80208f2:	4b92      	ldr	r3, [pc, #584]	; (8020b3c <_strtod_l+0xbfc>)
 80208f4:	403b      	ands	r3, r7
 80208f6:	9311      	str	r3, [sp, #68]	; 0x44
 80208f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80208fa:	4b91      	ldr	r3, [pc, #580]	; (8020b40 <_strtod_l+0xc00>)
 80208fc:	429a      	cmp	r2, r3
 80208fe:	f040 80b2 	bne.w	8020a66 <_strtod_l+0xb26>
 8020902:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802090a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 802090e:	ec4b ab10 	vmov	d0, sl, fp
 8020912:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8020916:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802091a:	f002 f843 	bl	80229a4 <__ulp>
 802091e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020922:	ec53 2b10 	vmov	r2, r3, d0
 8020926:	f7df fe8f 	bl	8000648 <__aeabi_dmul>
 802092a:	4652      	mov	r2, sl
 802092c:	465b      	mov	r3, fp
 802092e:	f7df fcd5 	bl	80002dc <__adddf3>
 8020932:	460b      	mov	r3, r1
 8020934:	4981      	ldr	r1, [pc, #516]	; (8020b3c <_strtod_l+0xbfc>)
 8020936:	4a83      	ldr	r2, [pc, #524]	; (8020b44 <_strtod_l+0xc04>)
 8020938:	4019      	ands	r1, r3
 802093a:	4291      	cmp	r1, r2
 802093c:	4682      	mov	sl, r0
 802093e:	d95e      	bls.n	80209fe <_strtod_l+0xabe>
 8020940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020942:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020946:	4293      	cmp	r3, r2
 8020948:	d103      	bne.n	8020952 <_strtod_l+0xa12>
 802094a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802094c:	3301      	adds	r3, #1
 802094e:	f43f ad43 	beq.w	80203d8 <_strtod_l+0x498>
 8020952:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8020b50 <_strtod_l+0xc10>
 8020956:	f04f 3aff 	mov.w	sl, #4294967295
 802095a:	991e      	ldr	r1, [sp, #120]	; 0x78
 802095c:	4620      	mov	r0, r4
 802095e:	f001 fcf5 	bl	802234c <_Bfree>
 8020962:	9907      	ldr	r1, [sp, #28]
 8020964:	4620      	mov	r0, r4
 8020966:	f001 fcf1 	bl	802234c <_Bfree>
 802096a:	4631      	mov	r1, r6
 802096c:	4620      	mov	r0, r4
 802096e:	f001 fced 	bl	802234c <_Bfree>
 8020972:	4629      	mov	r1, r5
 8020974:	4620      	mov	r0, r4
 8020976:	f001 fce9 	bl	802234c <_Bfree>
 802097a:	e613      	b.n	80205a4 <_strtod_l+0x664>
 802097c:	f1ba 0f00 	cmp.w	sl, #0
 8020980:	d11b      	bne.n	80209ba <_strtod_l+0xa7a>
 8020982:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020986:	b9f3      	cbnz	r3, 80209c6 <_strtod_l+0xa86>
 8020988:	4b6b      	ldr	r3, [pc, #428]	; (8020b38 <_strtod_l+0xbf8>)
 802098a:	2200      	movs	r2, #0
 802098c:	4640      	mov	r0, r8
 802098e:	4649      	mov	r1, r9
 8020990:	f7e0 f8cc 	bl	8000b2c <__aeabi_dcmplt>
 8020994:	b9d0      	cbnz	r0, 80209cc <_strtod_l+0xa8c>
 8020996:	4640      	mov	r0, r8
 8020998:	4649      	mov	r1, r9
 802099a:	4b6b      	ldr	r3, [pc, #428]	; (8020b48 <_strtod_l+0xc08>)
 802099c:	2200      	movs	r2, #0
 802099e:	f7df fe53 	bl	8000648 <__aeabi_dmul>
 80209a2:	4680      	mov	r8, r0
 80209a4:	4689      	mov	r9, r1
 80209a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80209aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80209ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80209b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80209b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80209b8:	e79b      	b.n	80208f2 <_strtod_l+0x9b2>
 80209ba:	f1ba 0f01 	cmp.w	sl, #1
 80209be:	d102      	bne.n	80209c6 <_strtod_l+0xa86>
 80209c0:	2f00      	cmp	r7, #0
 80209c2:	f43f ad7e 	beq.w	80204c2 <_strtod_l+0x582>
 80209c6:	4b61      	ldr	r3, [pc, #388]	; (8020b4c <_strtod_l+0xc0c>)
 80209c8:	2200      	movs	r2, #0
 80209ca:	e78c      	b.n	80208e6 <_strtod_l+0x9a6>
 80209cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8020b48 <_strtod_l+0xc08>
 80209d0:	f04f 0800 	mov.w	r8, #0
 80209d4:	e7e7      	b.n	80209a6 <_strtod_l+0xa66>
 80209d6:	4b5c      	ldr	r3, [pc, #368]	; (8020b48 <_strtod_l+0xc08>)
 80209d8:	4640      	mov	r0, r8
 80209da:	4649      	mov	r1, r9
 80209dc:	2200      	movs	r2, #0
 80209de:	f7df fe33 	bl	8000648 <__aeabi_dmul>
 80209e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80209e4:	4680      	mov	r8, r0
 80209e6:	4689      	mov	r9, r1
 80209e8:	b933      	cbnz	r3, 80209f8 <_strtod_l+0xab8>
 80209ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80209ee:	9012      	str	r0, [sp, #72]	; 0x48
 80209f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80209f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80209f6:	e7dd      	b.n	80209b4 <_strtod_l+0xa74>
 80209f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80209fc:	e7f9      	b.n	80209f2 <_strtod_l+0xab2>
 80209fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8020a02:	9b04      	ldr	r3, [sp, #16]
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	d1a8      	bne.n	802095a <_strtod_l+0xa1a>
 8020a08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020a0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020a0e:	0d1b      	lsrs	r3, r3, #20
 8020a10:	051b      	lsls	r3, r3, #20
 8020a12:	429a      	cmp	r2, r3
 8020a14:	d1a1      	bne.n	802095a <_strtod_l+0xa1a>
 8020a16:	4640      	mov	r0, r8
 8020a18:	4649      	mov	r1, r9
 8020a1a:	f7e0 f95d 	bl	8000cd8 <__aeabi_d2lz>
 8020a1e:	f7df fde5 	bl	80005ec <__aeabi_l2d>
 8020a22:	4602      	mov	r2, r0
 8020a24:	460b      	mov	r3, r1
 8020a26:	4640      	mov	r0, r8
 8020a28:	4649      	mov	r1, r9
 8020a2a:	f7df fc55 	bl	80002d8 <__aeabi_dsub>
 8020a2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020a30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020a34:	ea43 030a 	orr.w	r3, r3, sl
 8020a38:	4313      	orrs	r3, r2
 8020a3a:	4680      	mov	r8, r0
 8020a3c:	4689      	mov	r9, r1
 8020a3e:	d053      	beq.n	8020ae8 <_strtod_l+0xba8>
 8020a40:	a335      	add	r3, pc, #212	; (adr r3, 8020b18 <_strtod_l+0xbd8>)
 8020a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a46:	f7e0 f871 	bl	8000b2c <__aeabi_dcmplt>
 8020a4a:	2800      	cmp	r0, #0
 8020a4c:	f47f acce 	bne.w	80203ec <_strtod_l+0x4ac>
 8020a50:	a333      	add	r3, pc, #204	; (adr r3, 8020b20 <_strtod_l+0xbe0>)
 8020a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a56:	4640      	mov	r0, r8
 8020a58:	4649      	mov	r1, r9
 8020a5a:	f7e0 f885 	bl	8000b68 <__aeabi_dcmpgt>
 8020a5e:	2800      	cmp	r0, #0
 8020a60:	f43f af7b 	beq.w	802095a <_strtod_l+0xa1a>
 8020a64:	e4c2      	b.n	80203ec <_strtod_l+0x4ac>
 8020a66:	9b04      	ldr	r3, [sp, #16]
 8020a68:	b333      	cbz	r3, 8020ab8 <_strtod_l+0xb78>
 8020a6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020a6c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8020a70:	d822      	bhi.n	8020ab8 <_strtod_l+0xb78>
 8020a72:	a32d      	add	r3, pc, #180	; (adr r3, 8020b28 <_strtod_l+0xbe8>)
 8020a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a78:	4640      	mov	r0, r8
 8020a7a:	4649      	mov	r1, r9
 8020a7c:	f7e0 f860 	bl	8000b40 <__aeabi_dcmple>
 8020a80:	b1a0      	cbz	r0, 8020aac <_strtod_l+0xb6c>
 8020a82:	4649      	mov	r1, r9
 8020a84:	4640      	mov	r0, r8
 8020a86:	f7e0 f8b7 	bl	8000bf8 <__aeabi_d2uiz>
 8020a8a:	2801      	cmp	r0, #1
 8020a8c:	bf38      	it	cc
 8020a8e:	2001      	movcc	r0, #1
 8020a90:	f7df fd60 	bl	8000554 <__aeabi_ui2d>
 8020a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020a96:	4680      	mov	r8, r0
 8020a98:	4689      	mov	r9, r1
 8020a9a:	bb13      	cbnz	r3, 8020ae2 <_strtod_l+0xba2>
 8020a9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020aa0:	9014      	str	r0, [sp, #80]	; 0x50
 8020aa2:	9315      	str	r3, [sp, #84]	; 0x54
 8020aa4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8020aa8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020aae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ab0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8020ab4:	1a9b      	subs	r3, r3, r2
 8020ab6:	930d      	str	r3, [sp, #52]	; 0x34
 8020ab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020abc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020ac0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020ac4:	f001 ff6e 	bl	80229a4 <__ulp>
 8020ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020acc:	ec53 2b10 	vmov	r2, r3, d0
 8020ad0:	f7df fdba 	bl	8000648 <__aeabi_dmul>
 8020ad4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020ad8:	f7df fc00 	bl	80002dc <__adddf3>
 8020adc:	4682      	mov	sl, r0
 8020ade:	468b      	mov	fp, r1
 8020ae0:	e78f      	b.n	8020a02 <_strtod_l+0xac2>
 8020ae2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8020ae6:	e7dd      	b.n	8020aa4 <_strtod_l+0xb64>
 8020ae8:	a311      	add	r3, pc, #68	; (adr r3, 8020b30 <_strtod_l+0xbf0>)
 8020aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020aee:	f7e0 f81d 	bl	8000b2c <__aeabi_dcmplt>
 8020af2:	e7b4      	b.n	8020a5e <_strtod_l+0xb1e>
 8020af4:	2300      	movs	r3, #0
 8020af6:	930e      	str	r3, [sp, #56]	; 0x38
 8020af8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020afa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020afc:	6013      	str	r3, [r2, #0]
 8020afe:	f7ff ba65 	b.w	801ffcc <_strtod_l+0x8c>
 8020b02:	2b65      	cmp	r3, #101	; 0x65
 8020b04:	f43f ab5d 	beq.w	80201c2 <_strtod_l+0x282>
 8020b08:	2b45      	cmp	r3, #69	; 0x45
 8020b0a:	f43f ab5a 	beq.w	80201c2 <_strtod_l+0x282>
 8020b0e:	2201      	movs	r2, #1
 8020b10:	f7ff bb92 	b.w	8020238 <_strtod_l+0x2f8>
 8020b14:	f3af 8000 	nop.w
 8020b18:	94a03595 	.word	0x94a03595
 8020b1c:	3fdfffff 	.word	0x3fdfffff
 8020b20:	35afe535 	.word	0x35afe535
 8020b24:	3fe00000 	.word	0x3fe00000
 8020b28:	ffc00000 	.word	0xffc00000
 8020b2c:	41dfffff 	.word	0x41dfffff
 8020b30:	94a03595 	.word	0x94a03595
 8020b34:	3fcfffff 	.word	0x3fcfffff
 8020b38:	3ff00000 	.word	0x3ff00000
 8020b3c:	7ff00000 	.word	0x7ff00000
 8020b40:	7fe00000 	.word	0x7fe00000
 8020b44:	7c9fffff 	.word	0x7c9fffff
 8020b48:	3fe00000 	.word	0x3fe00000
 8020b4c:	bff00000 	.word	0xbff00000
 8020b50:	7fefffff 	.word	0x7fefffff

08020b54 <strtod>:
 8020b54:	460a      	mov	r2, r1
 8020b56:	4601      	mov	r1, r0
 8020b58:	4802      	ldr	r0, [pc, #8]	; (8020b64 <strtod+0x10>)
 8020b5a:	4b03      	ldr	r3, [pc, #12]	; (8020b68 <strtod+0x14>)
 8020b5c:	6800      	ldr	r0, [r0, #0]
 8020b5e:	f7ff b9ef 	b.w	801ff40 <_strtod_l>
 8020b62:	bf00      	nop
 8020b64:	200002b8 	.word	0x200002b8
 8020b68:	20000320 	.word	0x20000320

08020b6c <_strtol_l.isra.0>:
 8020b6c:	2b01      	cmp	r3, #1
 8020b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b72:	d001      	beq.n	8020b78 <_strtol_l.isra.0+0xc>
 8020b74:	2b24      	cmp	r3, #36	; 0x24
 8020b76:	d906      	bls.n	8020b86 <_strtol_l.isra.0+0x1a>
 8020b78:	f7fe f972 	bl	801ee60 <__errno>
 8020b7c:	2316      	movs	r3, #22
 8020b7e:	6003      	str	r3, [r0, #0]
 8020b80:	2000      	movs	r0, #0
 8020b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b86:	4f3a      	ldr	r7, [pc, #232]	; (8020c70 <_strtol_l.isra.0+0x104>)
 8020b88:	468e      	mov	lr, r1
 8020b8a:	4676      	mov	r6, lr
 8020b8c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020b90:	5de5      	ldrb	r5, [r4, r7]
 8020b92:	f015 0508 	ands.w	r5, r5, #8
 8020b96:	d1f8      	bne.n	8020b8a <_strtol_l.isra.0+0x1e>
 8020b98:	2c2d      	cmp	r4, #45	; 0x2d
 8020b9a:	d134      	bne.n	8020c06 <_strtol_l.isra.0+0x9a>
 8020b9c:	f89e 4000 	ldrb.w	r4, [lr]
 8020ba0:	f04f 0801 	mov.w	r8, #1
 8020ba4:	f106 0e02 	add.w	lr, r6, #2
 8020ba8:	2b00      	cmp	r3, #0
 8020baa:	d05c      	beq.n	8020c66 <_strtol_l.isra.0+0xfa>
 8020bac:	2b10      	cmp	r3, #16
 8020bae:	d10c      	bne.n	8020bca <_strtol_l.isra.0+0x5e>
 8020bb0:	2c30      	cmp	r4, #48	; 0x30
 8020bb2:	d10a      	bne.n	8020bca <_strtol_l.isra.0+0x5e>
 8020bb4:	f89e 4000 	ldrb.w	r4, [lr]
 8020bb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020bbc:	2c58      	cmp	r4, #88	; 0x58
 8020bbe:	d14d      	bne.n	8020c5c <_strtol_l.isra.0+0xf0>
 8020bc0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020bc4:	2310      	movs	r3, #16
 8020bc6:	f10e 0e02 	add.w	lr, lr, #2
 8020bca:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020bce:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020bd2:	2600      	movs	r6, #0
 8020bd4:	fbbc f9f3 	udiv	r9, ip, r3
 8020bd8:	4635      	mov	r5, r6
 8020bda:	fb03 ca19 	mls	sl, r3, r9, ip
 8020bde:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020be2:	2f09      	cmp	r7, #9
 8020be4:	d818      	bhi.n	8020c18 <_strtol_l.isra.0+0xac>
 8020be6:	463c      	mov	r4, r7
 8020be8:	42a3      	cmp	r3, r4
 8020bea:	dd24      	ble.n	8020c36 <_strtol_l.isra.0+0xca>
 8020bec:	2e00      	cmp	r6, #0
 8020bee:	db1f      	blt.n	8020c30 <_strtol_l.isra.0+0xc4>
 8020bf0:	45a9      	cmp	r9, r5
 8020bf2:	d31d      	bcc.n	8020c30 <_strtol_l.isra.0+0xc4>
 8020bf4:	d101      	bne.n	8020bfa <_strtol_l.isra.0+0x8e>
 8020bf6:	45a2      	cmp	sl, r4
 8020bf8:	db1a      	blt.n	8020c30 <_strtol_l.isra.0+0xc4>
 8020bfa:	fb05 4503 	mla	r5, r5, r3, r4
 8020bfe:	2601      	movs	r6, #1
 8020c00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020c04:	e7eb      	b.n	8020bde <_strtol_l.isra.0+0x72>
 8020c06:	2c2b      	cmp	r4, #43	; 0x2b
 8020c08:	bf08      	it	eq
 8020c0a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020c0e:	46a8      	mov	r8, r5
 8020c10:	bf08      	it	eq
 8020c12:	f106 0e02 	addeq.w	lr, r6, #2
 8020c16:	e7c7      	b.n	8020ba8 <_strtol_l.isra.0+0x3c>
 8020c18:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020c1c:	2f19      	cmp	r7, #25
 8020c1e:	d801      	bhi.n	8020c24 <_strtol_l.isra.0+0xb8>
 8020c20:	3c37      	subs	r4, #55	; 0x37
 8020c22:	e7e1      	b.n	8020be8 <_strtol_l.isra.0+0x7c>
 8020c24:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8020c28:	2f19      	cmp	r7, #25
 8020c2a:	d804      	bhi.n	8020c36 <_strtol_l.isra.0+0xca>
 8020c2c:	3c57      	subs	r4, #87	; 0x57
 8020c2e:	e7db      	b.n	8020be8 <_strtol_l.isra.0+0x7c>
 8020c30:	f04f 36ff 	mov.w	r6, #4294967295
 8020c34:	e7e4      	b.n	8020c00 <_strtol_l.isra.0+0x94>
 8020c36:	2e00      	cmp	r6, #0
 8020c38:	da05      	bge.n	8020c46 <_strtol_l.isra.0+0xda>
 8020c3a:	2322      	movs	r3, #34	; 0x22
 8020c3c:	6003      	str	r3, [r0, #0]
 8020c3e:	4665      	mov	r5, ip
 8020c40:	b942      	cbnz	r2, 8020c54 <_strtol_l.isra.0+0xe8>
 8020c42:	4628      	mov	r0, r5
 8020c44:	e79d      	b.n	8020b82 <_strtol_l.isra.0+0x16>
 8020c46:	f1b8 0f00 	cmp.w	r8, #0
 8020c4a:	d000      	beq.n	8020c4e <_strtol_l.isra.0+0xe2>
 8020c4c:	426d      	negs	r5, r5
 8020c4e:	2a00      	cmp	r2, #0
 8020c50:	d0f7      	beq.n	8020c42 <_strtol_l.isra.0+0xd6>
 8020c52:	b10e      	cbz	r6, 8020c58 <_strtol_l.isra.0+0xec>
 8020c54:	f10e 31ff 	add.w	r1, lr, #4294967295
 8020c58:	6011      	str	r1, [r2, #0]
 8020c5a:	e7f2      	b.n	8020c42 <_strtol_l.isra.0+0xd6>
 8020c5c:	2430      	movs	r4, #48	; 0x30
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	d1b3      	bne.n	8020bca <_strtol_l.isra.0+0x5e>
 8020c62:	2308      	movs	r3, #8
 8020c64:	e7b1      	b.n	8020bca <_strtol_l.isra.0+0x5e>
 8020c66:	2c30      	cmp	r4, #48	; 0x30
 8020c68:	d0a4      	beq.n	8020bb4 <_strtol_l.isra.0+0x48>
 8020c6a:	230a      	movs	r3, #10
 8020c6c:	e7ad      	b.n	8020bca <_strtol_l.isra.0+0x5e>
 8020c6e:	bf00      	nop
 8020c70:	08023fdd 	.word	0x08023fdd

08020c74 <strtol>:
 8020c74:	4613      	mov	r3, r2
 8020c76:	460a      	mov	r2, r1
 8020c78:	4601      	mov	r1, r0
 8020c7a:	4802      	ldr	r0, [pc, #8]	; (8020c84 <strtol+0x10>)
 8020c7c:	6800      	ldr	r0, [r0, #0]
 8020c7e:	f7ff bf75 	b.w	8020b6c <_strtol_l.isra.0>
 8020c82:	bf00      	nop
 8020c84:	200002b8 	.word	0x200002b8

08020c88 <__swbuf_r>:
 8020c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c8a:	460e      	mov	r6, r1
 8020c8c:	4614      	mov	r4, r2
 8020c8e:	4605      	mov	r5, r0
 8020c90:	b118      	cbz	r0, 8020c9a <__swbuf_r+0x12>
 8020c92:	6983      	ldr	r3, [r0, #24]
 8020c94:	b90b      	cbnz	r3, 8020c9a <__swbuf_r+0x12>
 8020c96:	f7fe fa03 	bl	801f0a0 <__sinit>
 8020c9a:	4b21      	ldr	r3, [pc, #132]	; (8020d20 <__swbuf_r+0x98>)
 8020c9c:	429c      	cmp	r4, r3
 8020c9e:	d12b      	bne.n	8020cf8 <__swbuf_r+0x70>
 8020ca0:	686c      	ldr	r4, [r5, #4]
 8020ca2:	69a3      	ldr	r3, [r4, #24]
 8020ca4:	60a3      	str	r3, [r4, #8]
 8020ca6:	89a3      	ldrh	r3, [r4, #12]
 8020ca8:	071a      	lsls	r2, r3, #28
 8020caa:	d52f      	bpl.n	8020d0c <__swbuf_r+0x84>
 8020cac:	6923      	ldr	r3, [r4, #16]
 8020cae:	b36b      	cbz	r3, 8020d0c <__swbuf_r+0x84>
 8020cb0:	6923      	ldr	r3, [r4, #16]
 8020cb2:	6820      	ldr	r0, [r4, #0]
 8020cb4:	1ac0      	subs	r0, r0, r3
 8020cb6:	6963      	ldr	r3, [r4, #20]
 8020cb8:	b2f6      	uxtb	r6, r6
 8020cba:	4283      	cmp	r3, r0
 8020cbc:	4637      	mov	r7, r6
 8020cbe:	dc04      	bgt.n	8020cca <__swbuf_r+0x42>
 8020cc0:	4621      	mov	r1, r4
 8020cc2:	4628      	mov	r0, r5
 8020cc4:	f7fe f958 	bl	801ef78 <_fflush_r>
 8020cc8:	bb30      	cbnz	r0, 8020d18 <__swbuf_r+0x90>
 8020cca:	68a3      	ldr	r3, [r4, #8]
 8020ccc:	3b01      	subs	r3, #1
 8020cce:	60a3      	str	r3, [r4, #8]
 8020cd0:	6823      	ldr	r3, [r4, #0]
 8020cd2:	1c5a      	adds	r2, r3, #1
 8020cd4:	6022      	str	r2, [r4, #0]
 8020cd6:	701e      	strb	r6, [r3, #0]
 8020cd8:	6963      	ldr	r3, [r4, #20]
 8020cda:	3001      	adds	r0, #1
 8020cdc:	4283      	cmp	r3, r0
 8020cde:	d004      	beq.n	8020cea <__swbuf_r+0x62>
 8020ce0:	89a3      	ldrh	r3, [r4, #12]
 8020ce2:	07db      	lsls	r3, r3, #31
 8020ce4:	d506      	bpl.n	8020cf4 <__swbuf_r+0x6c>
 8020ce6:	2e0a      	cmp	r6, #10
 8020ce8:	d104      	bne.n	8020cf4 <__swbuf_r+0x6c>
 8020cea:	4621      	mov	r1, r4
 8020cec:	4628      	mov	r0, r5
 8020cee:	f7fe f943 	bl	801ef78 <_fflush_r>
 8020cf2:	b988      	cbnz	r0, 8020d18 <__swbuf_r+0x90>
 8020cf4:	4638      	mov	r0, r7
 8020cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020cf8:	4b0a      	ldr	r3, [pc, #40]	; (8020d24 <__swbuf_r+0x9c>)
 8020cfa:	429c      	cmp	r4, r3
 8020cfc:	d101      	bne.n	8020d02 <__swbuf_r+0x7a>
 8020cfe:	68ac      	ldr	r4, [r5, #8]
 8020d00:	e7cf      	b.n	8020ca2 <__swbuf_r+0x1a>
 8020d02:	4b09      	ldr	r3, [pc, #36]	; (8020d28 <__swbuf_r+0xa0>)
 8020d04:	429c      	cmp	r4, r3
 8020d06:	bf08      	it	eq
 8020d08:	68ec      	ldreq	r4, [r5, #12]
 8020d0a:	e7ca      	b.n	8020ca2 <__swbuf_r+0x1a>
 8020d0c:	4621      	mov	r1, r4
 8020d0e:	4628      	mov	r0, r5
 8020d10:	f000 f81e 	bl	8020d50 <__swsetup_r>
 8020d14:	2800      	cmp	r0, #0
 8020d16:	d0cb      	beq.n	8020cb0 <__swbuf_r+0x28>
 8020d18:	f04f 37ff 	mov.w	r7, #4294967295
 8020d1c:	e7ea      	b.n	8020cf4 <__swbuf_r+0x6c>
 8020d1e:	bf00      	nop
 8020d20:	08024100 	.word	0x08024100
 8020d24:	08024120 	.word	0x08024120
 8020d28:	080240e0 	.word	0x080240e0

08020d2c <_write_r>:
 8020d2c:	b538      	push	{r3, r4, r5, lr}
 8020d2e:	4d07      	ldr	r5, [pc, #28]	; (8020d4c <_write_r+0x20>)
 8020d30:	4604      	mov	r4, r0
 8020d32:	4608      	mov	r0, r1
 8020d34:	4611      	mov	r1, r2
 8020d36:	2200      	movs	r2, #0
 8020d38:	602a      	str	r2, [r5, #0]
 8020d3a:	461a      	mov	r2, r3
 8020d3c:	f7fe f826 	bl	801ed8c <_write>
 8020d40:	1c43      	adds	r3, r0, #1
 8020d42:	d102      	bne.n	8020d4a <_write_r+0x1e>
 8020d44:	682b      	ldr	r3, [r5, #0]
 8020d46:	b103      	cbz	r3, 8020d4a <_write_r+0x1e>
 8020d48:	6023      	str	r3, [r4, #0]
 8020d4a:	bd38      	pop	{r3, r4, r5, pc}
 8020d4c:	2001d46c 	.word	0x2001d46c

08020d50 <__swsetup_r>:
 8020d50:	4b32      	ldr	r3, [pc, #200]	; (8020e1c <__swsetup_r+0xcc>)
 8020d52:	b570      	push	{r4, r5, r6, lr}
 8020d54:	681d      	ldr	r5, [r3, #0]
 8020d56:	4606      	mov	r6, r0
 8020d58:	460c      	mov	r4, r1
 8020d5a:	b125      	cbz	r5, 8020d66 <__swsetup_r+0x16>
 8020d5c:	69ab      	ldr	r3, [r5, #24]
 8020d5e:	b913      	cbnz	r3, 8020d66 <__swsetup_r+0x16>
 8020d60:	4628      	mov	r0, r5
 8020d62:	f7fe f99d 	bl	801f0a0 <__sinit>
 8020d66:	4b2e      	ldr	r3, [pc, #184]	; (8020e20 <__swsetup_r+0xd0>)
 8020d68:	429c      	cmp	r4, r3
 8020d6a:	d10f      	bne.n	8020d8c <__swsetup_r+0x3c>
 8020d6c:	686c      	ldr	r4, [r5, #4]
 8020d6e:	89a3      	ldrh	r3, [r4, #12]
 8020d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020d74:	0719      	lsls	r1, r3, #28
 8020d76:	d42c      	bmi.n	8020dd2 <__swsetup_r+0x82>
 8020d78:	06dd      	lsls	r5, r3, #27
 8020d7a:	d411      	bmi.n	8020da0 <__swsetup_r+0x50>
 8020d7c:	2309      	movs	r3, #9
 8020d7e:	6033      	str	r3, [r6, #0]
 8020d80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020d84:	81a3      	strh	r3, [r4, #12]
 8020d86:	f04f 30ff 	mov.w	r0, #4294967295
 8020d8a:	e03e      	b.n	8020e0a <__swsetup_r+0xba>
 8020d8c:	4b25      	ldr	r3, [pc, #148]	; (8020e24 <__swsetup_r+0xd4>)
 8020d8e:	429c      	cmp	r4, r3
 8020d90:	d101      	bne.n	8020d96 <__swsetup_r+0x46>
 8020d92:	68ac      	ldr	r4, [r5, #8]
 8020d94:	e7eb      	b.n	8020d6e <__swsetup_r+0x1e>
 8020d96:	4b24      	ldr	r3, [pc, #144]	; (8020e28 <__swsetup_r+0xd8>)
 8020d98:	429c      	cmp	r4, r3
 8020d9a:	bf08      	it	eq
 8020d9c:	68ec      	ldreq	r4, [r5, #12]
 8020d9e:	e7e6      	b.n	8020d6e <__swsetup_r+0x1e>
 8020da0:	0758      	lsls	r0, r3, #29
 8020da2:	d512      	bpl.n	8020dca <__swsetup_r+0x7a>
 8020da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020da6:	b141      	cbz	r1, 8020dba <__swsetup_r+0x6a>
 8020da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020dac:	4299      	cmp	r1, r3
 8020dae:	d002      	beq.n	8020db6 <__swsetup_r+0x66>
 8020db0:	4630      	mov	r0, r6
 8020db2:	f7fe faef 	bl	801f394 <_free_r>
 8020db6:	2300      	movs	r3, #0
 8020db8:	6363      	str	r3, [r4, #52]	; 0x34
 8020dba:	89a3      	ldrh	r3, [r4, #12]
 8020dbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020dc0:	81a3      	strh	r3, [r4, #12]
 8020dc2:	2300      	movs	r3, #0
 8020dc4:	6063      	str	r3, [r4, #4]
 8020dc6:	6923      	ldr	r3, [r4, #16]
 8020dc8:	6023      	str	r3, [r4, #0]
 8020dca:	89a3      	ldrh	r3, [r4, #12]
 8020dcc:	f043 0308 	orr.w	r3, r3, #8
 8020dd0:	81a3      	strh	r3, [r4, #12]
 8020dd2:	6923      	ldr	r3, [r4, #16]
 8020dd4:	b94b      	cbnz	r3, 8020dea <__swsetup_r+0x9a>
 8020dd6:	89a3      	ldrh	r3, [r4, #12]
 8020dd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020de0:	d003      	beq.n	8020dea <__swsetup_r+0x9a>
 8020de2:	4621      	mov	r1, r4
 8020de4:	4630      	mov	r0, r6
 8020de6:	f7fe fa45 	bl	801f274 <__smakebuf_r>
 8020dea:	89a0      	ldrh	r0, [r4, #12]
 8020dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020df0:	f010 0301 	ands.w	r3, r0, #1
 8020df4:	d00a      	beq.n	8020e0c <__swsetup_r+0xbc>
 8020df6:	2300      	movs	r3, #0
 8020df8:	60a3      	str	r3, [r4, #8]
 8020dfa:	6963      	ldr	r3, [r4, #20]
 8020dfc:	425b      	negs	r3, r3
 8020dfe:	61a3      	str	r3, [r4, #24]
 8020e00:	6923      	ldr	r3, [r4, #16]
 8020e02:	b943      	cbnz	r3, 8020e16 <__swsetup_r+0xc6>
 8020e04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020e08:	d1ba      	bne.n	8020d80 <__swsetup_r+0x30>
 8020e0a:	bd70      	pop	{r4, r5, r6, pc}
 8020e0c:	0781      	lsls	r1, r0, #30
 8020e0e:	bf58      	it	pl
 8020e10:	6963      	ldrpl	r3, [r4, #20]
 8020e12:	60a3      	str	r3, [r4, #8]
 8020e14:	e7f4      	b.n	8020e00 <__swsetup_r+0xb0>
 8020e16:	2000      	movs	r0, #0
 8020e18:	e7f7      	b.n	8020e0a <__swsetup_r+0xba>
 8020e1a:	bf00      	nop
 8020e1c:	200002b8 	.word	0x200002b8
 8020e20:	08024100 	.word	0x08024100
 8020e24:	08024120 	.word	0x08024120
 8020e28:	080240e0 	.word	0x080240e0

08020e2c <_close_r>:
 8020e2c:	b538      	push	{r3, r4, r5, lr}
 8020e2e:	4d06      	ldr	r5, [pc, #24]	; (8020e48 <_close_r+0x1c>)
 8020e30:	2300      	movs	r3, #0
 8020e32:	4604      	mov	r4, r0
 8020e34:	4608      	mov	r0, r1
 8020e36:	602b      	str	r3, [r5, #0]
 8020e38:	f7fd ffc4 	bl	801edc4 <_close>
 8020e3c:	1c43      	adds	r3, r0, #1
 8020e3e:	d102      	bne.n	8020e46 <_close_r+0x1a>
 8020e40:	682b      	ldr	r3, [r5, #0]
 8020e42:	b103      	cbz	r3, 8020e46 <_close_r+0x1a>
 8020e44:	6023      	str	r3, [r4, #0]
 8020e46:	bd38      	pop	{r3, r4, r5, pc}
 8020e48:	2001d46c 	.word	0x2001d46c

08020e4c <quorem>:
 8020e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e50:	6903      	ldr	r3, [r0, #16]
 8020e52:	690c      	ldr	r4, [r1, #16]
 8020e54:	42a3      	cmp	r3, r4
 8020e56:	4607      	mov	r7, r0
 8020e58:	f2c0 8081 	blt.w	8020f5e <quorem+0x112>
 8020e5c:	3c01      	subs	r4, #1
 8020e5e:	f101 0814 	add.w	r8, r1, #20
 8020e62:	f100 0514 	add.w	r5, r0, #20
 8020e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020e6a:	9301      	str	r3, [sp, #4]
 8020e6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020e70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020e74:	3301      	adds	r3, #1
 8020e76:	429a      	cmp	r2, r3
 8020e78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020e7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020e80:	fbb2 f6f3 	udiv	r6, r2, r3
 8020e84:	d331      	bcc.n	8020eea <quorem+0x9e>
 8020e86:	f04f 0e00 	mov.w	lr, #0
 8020e8a:	4640      	mov	r0, r8
 8020e8c:	46ac      	mov	ip, r5
 8020e8e:	46f2      	mov	sl, lr
 8020e90:	f850 2b04 	ldr.w	r2, [r0], #4
 8020e94:	b293      	uxth	r3, r2
 8020e96:	fb06 e303 	mla	r3, r6, r3, lr
 8020e9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020e9e:	b29b      	uxth	r3, r3
 8020ea0:	ebaa 0303 	sub.w	r3, sl, r3
 8020ea4:	0c12      	lsrs	r2, r2, #16
 8020ea6:	f8dc a000 	ldr.w	sl, [ip]
 8020eaa:	fb06 e202 	mla	r2, r6, r2, lr
 8020eae:	fa13 f38a 	uxtah	r3, r3, sl
 8020eb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020eb6:	fa1f fa82 	uxth.w	sl, r2
 8020eba:	f8dc 2000 	ldr.w	r2, [ip]
 8020ebe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8020ec2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020ec6:	b29b      	uxth	r3, r3
 8020ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020ecc:	4581      	cmp	r9, r0
 8020ece:	f84c 3b04 	str.w	r3, [ip], #4
 8020ed2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020ed6:	d2db      	bcs.n	8020e90 <quorem+0x44>
 8020ed8:	f855 300b 	ldr.w	r3, [r5, fp]
 8020edc:	b92b      	cbnz	r3, 8020eea <quorem+0x9e>
 8020ede:	9b01      	ldr	r3, [sp, #4]
 8020ee0:	3b04      	subs	r3, #4
 8020ee2:	429d      	cmp	r5, r3
 8020ee4:	461a      	mov	r2, r3
 8020ee6:	d32e      	bcc.n	8020f46 <quorem+0xfa>
 8020ee8:	613c      	str	r4, [r7, #16]
 8020eea:	4638      	mov	r0, r7
 8020eec:	f001 fcb6 	bl	802285c <__mcmp>
 8020ef0:	2800      	cmp	r0, #0
 8020ef2:	db24      	blt.n	8020f3e <quorem+0xf2>
 8020ef4:	3601      	adds	r6, #1
 8020ef6:	4628      	mov	r0, r5
 8020ef8:	f04f 0c00 	mov.w	ip, #0
 8020efc:	f858 2b04 	ldr.w	r2, [r8], #4
 8020f00:	f8d0 e000 	ldr.w	lr, [r0]
 8020f04:	b293      	uxth	r3, r2
 8020f06:	ebac 0303 	sub.w	r3, ip, r3
 8020f0a:	0c12      	lsrs	r2, r2, #16
 8020f0c:	fa13 f38e 	uxtah	r3, r3, lr
 8020f10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020f18:	b29b      	uxth	r3, r3
 8020f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020f1e:	45c1      	cmp	r9, r8
 8020f20:	f840 3b04 	str.w	r3, [r0], #4
 8020f24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020f28:	d2e8      	bcs.n	8020efc <quorem+0xb0>
 8020f2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020f32:	b922      	cbnz	r2, 8020f3e <quorem+0xf2>
 8020f34:	3b04      	subs	r3, #4
 8020f36:	429d      	cmp	r5, r3
 8020f38:	461a      	mov	r2, r3
 8020f3a:	d30a      	bcc.n	8020f52 <quorem+0x106>
 8020f3c:	613c      	str	r4, [r7, #16]
 8020f3e:	4630      	mov	r0, r6
 8020f40:	b003      	add	sp, #12
 8020f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f46:	6812      	ldr	r2, [r2, #0]
 8020f48:	3b04      	subs	r3, #4
 8020f4a:	2a00      	cmp	r2, #0
 8020f4c:	d1cc      	bne.n	8020ee8 <quorem+0x9c>
 8020f4e:	3c01      	subs	r4, #1
 8020f50:	e7c7      	b.n	8020ee2 <quorem+0x96>
 8020f52:	6812      	ldr	r2, [r2, #0]
 8020f54:	3b04      	subs	r3, #4
 8020f56:	2a00      	cmp	r2, #0
 8020f58:	d1f0      	bne.n	8020f3c <quorem+0xf0>
 8020f5a:	3c01      	subs	r4, #1
 8020f5c:	e7eb      	b.n	8020f36 <quorem+0xea>
 8020f5e:	2000      	movs	r0, #0
 8020f60:	e7ee      	b.n	8020f40 <quorem+0xf4>
 8020f62:	0000      	movs	r0, r0
 8020f64:	0000      	movs	r0, r0
	...

08020f68 <_dtoa_r>:
 8020f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f6c:	ed2d 8b02 	vpush	{d8}
 8020f70:	ec57 6b10 	vmov	r6, r7, d0
 8020f74:	b095      	sub	sp, #84	; 0x54
 8020f76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020f78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8020f7c:	9105      	str	r1, [sp, #20]
 8020f7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8020f82:	4604      	mov	r4, r0
 8020f84:	9209      	str	r2, [sp, #36]	; 0x24
 8020f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8020f88:	b975      	cbnz	r5, 8020fa8 <_dtoa_r+0x40>
 8020f8a:	2010      	movs	r0, #16
 8020f8c:	f7fe f9b2 	bl	801f2f4 <malloc>
 8020f90:	4602      	mov	r2, r0
 8020f92:	6260      	str	r0, [r4, #36]	; 0x24
 8020f94:	b920      	cbnz	r0, 8020fa0 <_dtoa_r+0x38>
 8020f96:	4bb2      	ldr	r3, [pc, #712]	; (8021260 <_dtoa_r+0x2f8>)
 8020f98:	21ea      	movs	r1, #234	; 0xea
 8020f9a:	48b2      	ldr	r0, [pc, #712]	; (8021264 <_dtoa_r+0x2fc>)
 8020f9c:	f001 ffd6 	bl	8022f4c <__assert_func>
 8020fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020fa4:	6005      	str	r5, [r0, #0]
 8020fa6:	60c5      	str	r5, [r0, #12]
 8020fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020faa:	6819      	ldr	r1, [r3, #0]
 8020fac:	b151      	cbz	r1, 8020fc4 <_dtoa_r+0x5c>
 8020fae:	685a      	ldr	r2, [r3, #4]
 8020fb0:	604a      	str	r2, [r1, #4]
 8020fb2:	2301      	movs	r3, #1
 8020fb4:	4093      	lsls	r3, r2
 8020fb6:	608b      	str	r3, [r1, #8]
 8020fb8:	4620      	mov	r0, r4
 8020fba:	f001 f9c7 	bl	802234c <_Bfree>
 8020fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020fc0:	2200      	movs	r2, #0
 8020fc2:	601a      	str	r2, [r3, #0]
 8020fc4:	1e3b      	subs	r3, r7, #0
 8020fc6:	bfb9      	ittee	lt
 8020fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8020fcc:	9303      	strlt	r3, [sp, #12]
 8020fce:	2300      	movge	r3, #0
 8020fd0:	f8c8 3000 	strge.w	r3, [r8]
 8020fd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8020fd8:	4ba3      	ldr	r3, [pc, #652]	; (8021268 <_dtoa_r+0x300>)
 8020fda:	bfbc      	itt	lt
 8020fdc:	2201      	movlt	r2, #1
 8020fde:	f8c8 2000 	strlt.w	r2, [r8]
 8020fe2:	ea33 0309 	bics.w	r3, r3, r9
 8020fe6:	d11b      	bne.n	8021020 <_dtoa_r+0xb8>
 8020fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8020fee:	6013      	str	r3, [r2, #0]
 8020ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020ff4:	4333      	orrs	r3, r6
 8020ff6:	f000 857a 	beq.w	8021aee <_dtoa_r+0xb86>
 8020ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020ffc:	b963      	cbnz	r3, 8021018 <_dtoa_r+0xb0>
 8020ffe:	4b9b      	ldr	r3, [pc, #620]	; (802126c <_dtoa_r+0x304>)
 8021000:	e024      	b.n	802104c <_dtoa_r+0xe4>
 8021002:	4b9b      	ldr	r3, [pc, #620]	; (8021270 <_dtoa_r+0x308>)
 8021004:	9300      	str	r3, [sp, #0]
 8021006:	3308      	adds	r3, #8
 8021008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802100a:	6013      	str	r3, [r2, #0]
 802100c:	9800      	ldr	r0, [sp, #0]
 802100e:	b015      	add	sp, #84	; 0x54
 8021010:	ecbd 8b02 	vpop	{d8}
 8021014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021018:	4b94      	ldr	r3, [pc, #592]	; (802126c <_dtoa_r+0x304>)
 802101a:	9300      	str	r3, [sp, #0]
 802101c:	3303      	adds	r3, #3
 802101e:	e7f3      	b.n	8021008 <_dtoa_r+0xa0>
 8021020:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021024:	2200      	movs	r2, #0
 8021026:	ec51 0b17 	vmov	r0, r1, d7
 802102a:	2300      	movs	r3, #0
 802102c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8021030:	f7df fd72 	bl	8000b18 <__aeabi_dcmpeq>
 8021034:	4680      	mov	r8, r0
 8021036:	b158      	cbz	r0, 8021050 <_dtoa_r+0xe8>
 8021038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802103a:	2301      	movs	r3, #1
 802103c:	6013      	str	r3, [r2, #0]
 802103e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021040:	2b00      	cmp	r3, #0
 8021042:	f000 8551 	beq.w	8021ae8 <_dtoa_r+0xb80>
 8021046:	488b      	ldr	r0, [pc, #556]	; (8021274 <_dtoa_r+0x30c>)
 8021048:	6018      	str	r0, [r3, #0]
 802104a:	1e43      	subs	r3, r0, #1
 802104c:	9300      	str	r3, [sp, #0]
 802104e:	e7dd      	b.n	802100c <_dtoa_r+0xa4>
 8021050:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8021054:	aa12      	add	r2, sp, #72	; 0x48
 8021056:	a913      	add	r1, sp, #76	; 0x4c
 8021058:	4620      	mov	r0, r4
 802105a:	f001 fd1f 	bl	8022a9c <__d2b>
 802105e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8021062:	4683      	mov	fp, r0
 8021064:	2d00      	cmp	r5, #0
 8021066:	d07c      	beq.n	8021162 <_dtoa_r+0x1fa>
 8021068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802106a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 802106e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021072:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8021076:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 802107a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802107e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8021082:	4b7d      	ldr	r3, [pc, #500]	; (8021278 <_dtoa_r+0x310>)
 8021084:	2200      	movs	r2, #0
 8021086:	4630      	mov	r0, r6
 8021088:	4639      	mov	r1, r7
 802108a:	f7df f925 	bl	80002d8 <__aeabi_dsub>
 802108e:	a36e      	add	r3, pc, #440	; (adr r3, 8021248 <_dtoa_r+0x2e0>)
 8021090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021094:	f7df fad8 	bl	8000648 <__aeabi_dmul>
 8021098:	a36d      	add	r3, pc, #436	; (adr r3, 8021250 <_dtoa_r+0x2e8>)
 802109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802109e:	f7df f91d 	bl	80002dc <__adddf3>
 80210a2:	4606      	mov	r6, r0
 80210a4:	4628      	mov	r0, r5
 80210a6:	460f      	mov	r7, r1
 80210a8:	f7df fa64 	bl	8000574 <__aeabi_i2d>
 80210ac:	a36a      	add	r3, pc, #424	; (adr r3, 8021258 <_dtoa_r+0x2f0>)
 80210ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210b2:	f7df fac9 	bl	8000648 <__aeabi_dmul>
 80210b6:	4602      	mov	r2, r0
 80210b8:	460b      	mov	r3, r1
 80210ba:	4630      	mov	r0, r6
 80210bc:	4639      	mov	r1, r7
 80210be:	f7df f90d 	bl	80002dc <__adddf3>
 80210c2:	4606      	mov	r6, r0
 80210c4:	460f      	mov	r7, r1
 80210c6:	f7df fd6f 	bl	8000ba8 <__aeabi_d2iz>
 80210ca:	2200      	movs	r2, #0
 80210cc:	4682      	mov	sl, r0
 80210ce:	2300      	movs	r3, #0
 80210d0:	4630      	mov	r0, r6
 80210d2:	4639      	mov	r1, r7
 80210d4:	f7df fd2a 	bl	8000b2c <__aeabi_dcmplt>
 80210d8:	b148      	cbz	r0, 80210ee <_dtoa_r+0x186>
 80210da:	4650      	mov	r0, sl
 80210dc:	f7df fa4a 	bl	8000574 <__aeabi_i2d>
 80210e0:	4632      	mov	r2, r6
 80210e2:	463b      	mov	r3, r7
 80210e4:	f7df fd18 	bl	8000b18 <__aeabi_dcmpeq>
 80210e8:	b908      	cbnz	r0, 80210ee <_dtoa_r+0x186>
 80210ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80210ee:	f1ba 0f16 	cmp.w	sl, #22
 80210f2:	d854      	bhi.n	802119e <_dtoa_r+0x236>
 80210f4:	4b61      	ldr	r3, [pc, #388]	; (802127c <_dtoa_r+0x314>)
 80210f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80210fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021102:	f7df fd13 	bl	8000b2c <__aeabi_dcmplt>
 8021106:	2800      	cmp	r0, #0
 8021108:	d04b      	beq.n	80211a2 <_dtoa_r+0x23a>
 802110a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802110e:	2300      	movs	r3, #0
 8021110:	930e      	str	r3, [sp, #56]	; 0x38
 8021112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021114:	1b5d      	subs	r5, r3, r5
 8021116:	1e6b      	subs	r3, r5, #1
 8021118:	9304      	str	r3, [sp, #16]
 802111a:	bf43      	ittte	mi
 802111c:	2300      	movmi	r3, #0
 802111e:	f1c5 0801 	rsbmi	r8, r5, #1
 8021122:	9304      	strmi	r3, [sp, #16]
 8021124:	f04f 0800 	movpl.w	r8, #0
 8021128:	f1ba 0f00 	cmp.w	sl, #0
 802112c:	db3b      	blt.n	80211a6 <_dtoa_r+0x23e>
 802112e:	9b04      	ldr	r3, [sp, #16]
 8021130:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8021134:	4453      	add	r3, sl
 8021136:	9304      	str	r3, [sp, #16]
 8021138:	2300      	movs	r3, #0
 802113a:	9306      	str	r3, [sp, #24]
 802113c:	9b05      	ldr	r3, [sp, #20]
 802113e:	2b09      	cmp	r3, #9
 8021140:	d869      	bhi.n	8021216 <_dtoa_r+0x2ae>
 8021142:	2b05      	cmp	r3, #5
 8021144:	bfc4      	itt	gt
 8021146:	3b04      	subgt	r3, #4
 8021148:	9305      	strgt	r3, [sp, #20]
 802114a:	9b05      	ldr	r3, [sp, #20]
 802114c:	f1a3 0302 	sub.w	r3, r3, #2
 8021150:	bfcc      	ite	gt
 8021152:	2500      	movgt	r5, #0
 8021154:	2501      	movle	r5, #1
 8021156:	2b03      	cmp	r3, #3
 8021158:	d869      	bhi.n	802122e <_dtoa_r+0x2c6>
 802115a:	e8df f003 	tbb	[pc, r3]
 802115e:	4e2c      	.short	0x4e2c
 8021160:	5a4c      	.short	0x5a4c
 8021162:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8021166:	441d      	add	r5, r3
 8021168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802116c:	2b20      	cmp	r3, #32
 802116e:	bfc1      	itttt	gt
 8021170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8021174:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8021178:	fa09 f303 	lslgt.w	r3, r9, r3
 802117c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8021180:	bfda      	itte	le
 8021182:	f1c3 0320 	rsble	r3, r3, #32
 8021186:	fa06 f003 	lslle.w	r0, r6, r3
 802118a:	4318      	orrgt	r0, r3
 802118c:	f7df f9e2 	bl	8000554 <__aeabi_ui2d>
 8021190:	2301      	movs	r3, #1
 8021192:	4606      	mov	r6, r0
 8021194:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8021198:	3d01      	subs	r5, #1
 802119a:	9310      	str	r3, [sp, #64]	; 0x40
 802119c:	e771      	b.n	8021082 <_dtoa_r+0x11a>
 802119e:	2301      	movs	r3, #1
 80211a0:	e7b6      	b.n	8021110 <_dtoa_r+0x1a8>
 80211a2:	900e      	str	r0, [sp, #56]	; 0x38
 80211a4:	e7b5      	b.n	8021112 <_dtoa_r+0x1aa>
 80211a6:	f1ca 0300 	rsb	r3, sl, #0
 80211aa:	9306      	str	r3, [sp, #24]
 80211ac:	2300      	movs	r3, #0
 80211ae:	eba8 080a 	sub.w	r8, r8, sl
 80211b2:	930d      	str	r3, [sp, #52]	; 0x34
 80211b4:	e7c2      	b.n	802113c <_dtoa_r+0x1d4>
 80211b6:	2300      	movs	r3, #0
 80211b8:	9308      	str	r3, [sp, #32]
 80211ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211bc:	2b00      	cmp	r3, #0
 80211be:	dc39      	bgt.n	8021234 <_dtoa_r+0x2cc>
 80211c0:	f04f 0901 	mov.w	r9, #1
 80211c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80211c8:	464b      	mov	r3, r9
 80211ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80211ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80211d0:	2200      	movs	r2, #0
 80211d2:	6042      	str	r2, [r0, #4]
 80211d4:	2204      	movs	r2, #4
 80211d6:	f102 0614 	add.w	r6, r2, #20
 80211da:	429e      	cmp	r6, r3
 80211dc:	6841      	ldr	r1, [r0, #4]
 80211de:	d92f      	bls.n	8021240 <_dtoa_r+0x2d8>
 80211e0:	4620      	mov	r0, r4
 80211e2:	f001 f873 	bl	80222cc <_Balloc>
 80211e6:	9000      	str	r0, [sp, #0]
 80211e8:	2800      	cmp	r0, #0
 80211ea:	d14b      	bne.n	8021284 <_dtoa_r+0x31c>
 80211ec:	4b24      	ldr	r3, [pc, #144]	; (8021280 <_dtoa_r+0x318>)
 80211ee:	4602      	mov	r2, r0
 80211f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80211f4:	e6d1      	b.n	8020f9a <_dtoa_r+0x32>
 80211f6:	2301      	movs	r3, #1
 80211f8:	e7de      	b.n	80211b8 <_dtoa_r+0x250>
 80211fa:	2300      	movs	r3, #0
 80211fc:	9308      	str	r3, [sp, #32]
 80211fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021200:	eb0a 0903 	add.w	r9, sl, r3
 8021204:	f109 0301 	add.w	r3, r9, #1
 8021208:	2b01      	cmp	r3, #1
 802120a:	9301      	str	r3, [sp, #4]
 802120c:	bfb8      	it	lt
 802120e:	2301      	movlt	r3, #1
 8021210:	e7dd      	b.n	80211ce <_dtoa_r+0x266>
 8021212:	2301      	movs	r3, #1
 8021214:	e7f2      	b.n	80211fc <_dtoa_r+0x294>
 8021216:	2501      	movs	r5, #1
 8021218:	2300      	movs	r3, #0
 802121a:	9305      	str	r3, [sp, #20]
 802121c:	9508      	str	r5, [sp, #32]
 802121e:	f04f 39ff 	mov.w	r9, #4294967295
 8021222:	2200      	movs	r2, #0
 8021224:	f8cd 9004 	str.w	r9, [sp, #4]
 8021228:	2312      	movs	r3, #18
 802122a:	9209      	str	r2, [sp, #36]	; 0x24
 802122c:	e7cf      	b.n	80211ce <_dtoa_r+0x266>
 802122e:	2301      	movs	r3, #1
 8021230:	9308      	str	r3, [sp, #32]
 8021232:	e7f4      	b.n	802121e <_dtoa_r+0x2b6>
 8021234:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8021238:	f8cd 9004 	str.w	r9, [sp, #4]
 802123c:	464b      	mov	r3, r9
 802123e:	e7c6      	b.n	80211ce <_dtoa_r+0x266>
 8021240:	3101      	adds	r1, #1
 8021242:	6041      	str	r1, [r0, #4]
 8021244:	0052      	lsls	r2, r2, #1
 8021246:	e7c6      	b.n	80211d6 <_dtoa_r+0x26e>
 8021248:	636f4361 	.word	0x636f4361
 802124c:	3fd287a7 	.word	0x3fd287a7
 8021250:	8b60c8b3 	.word	0x8b60c8b3
 8021254:	3fc68a28 	.word	0x3fc68a28
 8021258:	509f79fb 	.word	0x509f79fb
 802125c:	3fd34413 	.word	0x3fd34413
 8021260:	080241d5 	.word	0x080241d5
 8021264:	080241ec 	.word	0x080241ec
 8021268:	7ff00000 	.word	0x7ff00000
 802126c:	080241d1 	.word	0x080241d1
 8021270:	080241c8 	.word	0x080241c8
 8021274:	08024155 	.word	0x08024155
 8021278:	3ff80000 	.word	0x3ff80000
 802127c:	08024368 	.word	0x08024368
 8021280:	0802424b 	.word	0x0802424b
 8021284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021286:	9a00      	ldr	r2, [sp, #0]
 8021288:	601a      	str	r2, [r3, #0]
 802128a:	9b01      	ldr	r3, [sp, #4]
 802128c:	2b0e      	cmp	r3, #14
 802128e:	f200 80ad 	bhi.w	80213ec <_dtoa_r+0x484>
 8021292:	2d00      	cmp	r5, #0
 8021294:	f000 80aa 	beq.w	80213ec <_dtoa_r+0x484>
 8021298:	f1ba 0f00 	cmp.w	sl, #0
 802129c:	dd36      	ble.n	802130c <_dtoa_r+0x3a4>
 802129e:	4ac3      	ldr	r2, [pc, #780]	; (80215ac <_dtoa_r+0x644>)
 80212a0:	f00a 030f 	and.w	r3, sl, #15
 80212a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80212a8:	ed93 7b00 	vldr	d7, [r3]
 80212ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80212b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80212b4:	eeb0 8a47 	vmov.f32	s16, s14
 80212b8:	eef0 8a67 	vmov.f32	s17, s15
 80212bc:	d016      	beq.n	80212ec <_dtoa_r+0x384>
 80212be:	4bbc      	ldr	r3, [pc, #752]	; (80215b0 <_dtoa_r+0x648>)
 80212c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80212c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80212c8:	f7df fae8 	bl	800089c <__aeabi_ddiv>
 80212cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80212d0:	f007 070f 	and.w	r7, r7, #15
 80212d4:	2503      	movs	r5, #3
 80212d6:	4eb6      	ldr	r6, [pc, #728]	; (80215b0 <_dtoa_r+0x648>)
 80212d8:	b957      	cbnz	r7, 80212f0 <_dtoa_r+0x388>
 80212da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80212de:	ec53 2b18 	vmov	r2, r3, d8
 80212e2:	f7df fadb 	bl	800089c <__aeabi_ddiv>
 80212e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80212ea:	e029      	b.n	8021340 <_dtoa_r+0x3d8>
 80212ec:	2502      	movs	r5, #2
 80212ee:	e7f2      	b.n	80212d6 <_dtoa_r+0x36e>
 80212f0:	07f9      	lsls	r1, r7, #31
 80212f2:	d508      	bpl.n	8021306 <_dtoa_r+0x39e>
 80212f4:	ec51 0b18 	vmov	r0, r1, d8
 80212f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80212fc:	f7df f9a4 	bl	8000648 <__aeabi_dmul>
 8021300:	ec41 0b18 	vmov	d8, r0, r1
 8021304:	3501      	adds	r5, #1
 8021306:	107f      	asrs	r7, r7, #1
 8021308:	3608      	adds	r6, #8
 802130a:	e7e5      	b.n	80212d8 <_dtoa_r+0x370>
 802130c:	f000 80a6 	beq.w	802145c <_dtoa_r+0x4f4>
 8021310:	f1ca 0600 	rsb	r6, sl, #0
 8021314:	4ba5      	ldr	r3, [pc, #660]	; (80215ac <_dtoa_r+0x644>)
 8021316:	4fa6      	ldr	r7, [pc, #664]	; (80215b0 <_dtoa_r+0x648>)
 8021318:	f006 020f 	and.w	r2, r6, #15
 802131c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021324:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021328:	f7df f98e 	bl	8000648 <__aeabi_dmul>
 802132c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021330:	1136      	asrs	r6, r6, #4
 8021332:	2300      	movs	r3, #0
 8021334:	2502      	movs	r5, #2
 8021336:	2e00      	cmp	r6, #0
 8021338:	f040 8085 	bne.w	8021446 <_dtoa_r+0x4de>
 802133c:	2b00      	cmp	r3, #0
 802133e:	d1d2      	bne.n	80212e6 <_dtoa_r+0x37e>
 8021340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021342:	2b00      	cmp	r3, #0
 8021344:	f000 808c 	beq.w	8021460 <_dtoa_r+0x4f8>
 8021348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802134c:	4b99      	ldr	r3, [pc, #612]	; (80215b4 <_dtoa_r+0x64c>)
 802134e:	2200      	movs	r2, #0
 8021350:	4630      	mov	r0, r6
 8021352:	4639      	mov	r1, r7
 8021354:	f7df fbea 	bl	8000b2c <__aeabi_dcmplt>
 8021358:	2800      	cmp	r0, #0
 802135a:	f000 8081 	beq.w	8021460 <_dtoa_r+0x4f8>
 802135e:	9b01      	ldr	r3, [sp, #4]
 8021360:	2b00      	cmp	r3, #0
 8021362:	d07d      	beq.n	8021460 <_dtoa_r+0x4f8>
 8021364:	f1b9 0f00 	cmp.w	r9, #0
 8021368:	dd3c      	ble.n	80213e4 <_dtoa_r+0x47c>
 802136a:	f10a 33ff 	add.w	r3, sl, #4294967295
 802136e:	9307      	str	r3, [sp, #28]
 8021370:	2200      	movs	r2, #0
 8021372:	4b91      	ldr	r3, [pc, #580]	; (80215b8 <_dtoa_r+0x650>)
 8021374:	4630      	mov	r0, r6
 8021376:	4639      	mov	r1, r7
 8021378:	f7df f966 	bl	8000648 <__aeabi_dmul>
 802137c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021380:	3501      	adds	r5, #1
 8021382:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8021386:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802138a:	4628      	mov	r0, r5
 802138c:	f7df f8f2 	bl	8000574 <__aeabi_i2d>
 8021390:	4632      	mov	r2, r6
 8021392:	463b      	mov	r3, r7
 8021394:	f7df f958 	bl	8000648 <__aeabi_dmul>
 8021398:	4b88      	ldr	r3, [pc, #544]	; (80215bc <_dtoa_r+0x654>)
 802139a:	2200      	movs	r2, #0
 802139c:	f7de ff9e 	bl	80002dc <__adddf3>
 80213a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80213a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80213a8:	9303      	str	r3, [sp, #12]
 80213aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213ac:	2b00      	cmp	r3, #0
 80213ae:	d15c      	bne.n	802146a <_dtoa_r+0x502>
 80213b0:	4b83      	ldr	r3, [pc, #524]	; (80215c0 <_dtoa_r+0x658>)
 80213b2:	2200      	movs	r2, #0
 80213b4:	4630      	mov	r0, r6
 80213b6:	4639      	mov	r1, r7
 80213b8:	f7de ff8e 	bl	80002d8 <__aeabi_dsub>
 80213bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80213c0:	4606      	mov	r6, r0
 80213c2:	460f      	mov	r7, r1
 80213c4:	f7df fbd0 	bl	8000b68 <__aeabi_dcmpgt>
 80213c8:	2800      	cmp	r0, #0
 80213ca:	f040 8296 	bne.w	80218fa <_dtoa_r+0x992>
 80213ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80213d2:	4630      	mov	r0, r6
 80213d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80213d8:	4639      	mov	r1, r7
 80213da:	f7df fba7 	bl	8000b2c <__aeabi_dcmplt>
 80213de:	2800      	cmp	r0, #0
 80213e0:	f040 8288 	bne.w	80218f4 <_dtoa_r+0x98c>
 80213e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80213e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80213ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	f2c0 8158 	blt.w	80216a4 <_dtoa_r+0x73c>
 80213f4:	f1ba 0f0e 	cmp.w	sl, #14
 80213f8:	f300 8154 	bgt.w	80216a4 <_dtoa_r+0x73c>
 80213fc:	4b6b      	ldr	r3, [pc, #428]	; (80215ac <_dtoa_r+0x644>)
 80213fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8021402:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021408:	2b00      	cmp	r3, #0
 802140a:	f280 80e3 	bge.w	80215d4 <_dtoa_r+0x66c>
 802140e:	9b01      	ldr	r3, [sp, #4]
 8021410:	2b00      	cmp	r3, #0
 8021412:	f300 80df 	bgt.w	80215d4 <_dtoa_r+0x66c>
 8021416:	f040 826d 	bne.w	80218f4 <_dtoa_r+0x98c>
 802141a:	4b69      	ldr	r3, [pc, #420]	; (80215c0 <_dtoa_r+0x658>)
 802141c:	2200      	movs	r2, #0
 802141e:	4640      	mov	r0, r8
 8021420:	4649      	mov	r1, r9
 8021422:	f7df f911 	bl	8000648 <__aeabi_dmul>
 8021426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802142a:	f7df fb93 	bl	8000b54 <__aeabi_dcmpge>
 802142e:	9e01      	ldr	r6, [sp, #4]
 8021430:	4637      	mov	r7, r6
 8021432:	2800      	cmp	r0, #0
 8021434:	f040 8243 	bne.w	80218be <_dtoa_r+0x956>
 8021438:	9d00      	ldr	r5, [sp, #0]
 802143a:	2331      	movs	r3, #49	; 0x31
 802143c:	f805 3b01 	strb.w	r3, [r5], #1
 8021440:	f10a 0a01 	add.w	sl, sl, #1
 8021444:	e23f      	b.n	80218c6 <_dtoa_r+0x95e>
 8021446:	07f2      	lsls	r2, r6, #31
 8021448:	d505      	bpl.n	8021456 <_dtoa_r+0x4ee>
 802144a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802144e:	f7df f8fb 	bl	8000648 <__aeabi_dmul>
 8021452:	3501      	adds	r5, #1
 8021454:	2301      	movs	r3, #1
 8021456:	1076      	asrs	r6, r6, #1
 8021458:	3708      	adds	r7, #8
 802145a:	e76c      	b.n	8021336 <_dtoa_r+0x3ce>
 802145c:	2502      	movs	r5, #2
 802145e:	e76f      	b.n	8021340 <_dtoa_r+0x3d8>
 8021460:	9b01      	ldr	r3, [sp, #4]
 8021462:	f8cd a01c 	str.w	sl, [sp, #28]
 8021466:	930c      	str	r3, [sp, #48]	; 0x30
 8021468:	e78d      	b.n	8021386 <_dtoa_r+0x41e>
 802146a:	9900      	ldr	r1, [sp, #0]
 802146c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802146e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021470:	4b4e      	ldr	r3, [pc, #312]	; (80215ac <_dtoa_r+0x644>)
 8021472:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021476:	4401      	add	r1, r0
 8021478:	9102      	str	r1, [sp, #8]
 802147a:	9908      	ldr	r1, [sp, #32]
 802147c:	eeb0 8a47 	vmov.f32	s16, s14
 8021480:	eef0 8a67 	vmov.f32	s17, s15
 8021484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802148c:	2900      	cmp	r1, #0
 802148e:	d045      	beq.n	802151c <_dtoa_r+0x5b4>
 8021490:	494c      	ldr	r1, [pc, #304]	; (80215c4 <_dtoa_r+0x65c>)
 8021492:	2000      	movs	r0, #0
 8021494:	f7df fa02 	bl	800089c <__aeabi_ddiv>
 8021498:	ec53 2b18 	vmov	r2, r3, d8
 802149c:	f7de ff1c 	bl	80002d8 <__aeabi_dsub>
 80214a0:	9d00      	ldr	r5, [sp, #0]
 80214a2:	ec41 0b18 	vmov	d8, r0, r1
 80214a6:	4639      	mov	r1, r7
 80214a8:	4630      	mov	r0, r6
 80214aa:	f7df fb7d 	bl	8000ba8 <__aeabi_d2iz>
 80214ae:	900c      	str	r0, [sp, #48]	; 0x30
 80214b0:	f7df f860 	bl	8000574 <__aeabi_i2d>
 80214b4:	4602      	mov	r2, r0
 80214b6:	460b      	mov	r3, r1
 80214b8:	4630      	mov	r0, r6
 80214ba:	4639      	mov	r1, r7
 80214bc:	f7de ff0c 	bl	80002d8 <__aeabi_dsub>
 80214c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80214c2:	3330      	adds	r3, #48	; 0x30
 80214c4:	f805 3b01 	strb.w	r3, [r5], #1
 80214c8:	ec53 2b18 	vmov	r2, r3, d8
 80214cc:	4606      	mov	r6, r0
 80214ce:	460f      	mov	r7, r1
 80214d0:	f7df fb2c 	bl	8000b2c <__aeabi_dcmplt>
 80214d4:	2800      	cmp	r0, #0
 80214d6:	d165      	bne.n	80215a4 <_dtoa_r+0x63c>
 80214d8:	4632      	mov	r2, r6
 80214da:	463b      	mov	r3, r7
 80214dc:	4935      	ldr	r1, [pc, #212]	; (80215b4 <_dtoa_r+0x64c>)
 80214de:	2000      	movs	r0, #0
 80214e0:	f7de fefa 	bl	80002d8 <__aeabi_dsub>
 80214e4:	ec53 2b18 	vmov	r2, r3, d8
 80214e8:	f7df fb20 	bl	8000b2c <__aeabi_dcmplt>
 80214ec:	2800      	cmp	r0, #0
 80214ee:	f040 80b9 	bne.w	8021664 <_dtoa_r+0x6fc>
 80214f2:	9b02      	ldr	r3, [sp, #8]
 80214f4:	429d      	cmp	r5, r3
 80214f6:	f43f af75 	beq.w	80213e4 <_dtoa_r+0x47c>
 80214fa:	4b2f      	ldr	r3, [pc, #188]	; (80215b8 <_dtoa_r+0x650>)
 80214fc:	ec51 0b18 	vmov	r0, r1, d8
 8021500:	2200      	movs	r2, #0
 8021502:	f7df f8a1 	bl	8000648 <__aeabi_dmul>
 8021506:	4b2c      	ldr	r3, [pc, #176]	; (80215b8 <_dtoa_r+0x650>)
 8021508:	ec41 0b18 	vmov	d8, r0, r1
 802150c:	2200      	movs	r2, #0
 802150e:	4630      	mov	r0, r6
 8021510:	4639      	mov	r1, r7
 8021512:	f7df f899 	bl	8000648 <__aeabi_dmul>
 8021516:	4606      	mov	r6, r0
 8021518:	460f      	mov	r7, r1
 802151a:	e7c4      	b.n	80214a6 <_dtoa_r+0x53e>
 802151c:	ec51 0b17 	vmov	r0, r1, d7
 8021520:	f7df f892 	bl	8000648 <__aeabi_dmul>
 8021524:	9b02      	ldr	r3, [sp, #8]
 8021526:	9d00      	ldr	r5, [sp, #0]
 8021528:	930c      	str	r3, [sp, #48]	; 0x30
 802152a:	ec41 0b18 	vmov	d8, r0, r1
 802152e:	4639      	mov	r1, r7
 8021530:	4630      	mov	r0, r6
 8021532:	f7df fb39 	bl	8000ba8 <__aeabi_d2iz>
 8021536:	9011      	str	r0, [sp, #68]	; 0x44
 8021538:	f7df f81c 	bl	8000574 <__aeabi_i2d>
 802153c:	4602      	mov	r2, r0
 802153e:	460b      	mov	r3, r1
 8021540:	4630      	mov	r0, r6
 8021542:	4639      	mov	r1, r7
 8021544:	f7de fec8 	bl	80002d8 <__aeabi_dsub>
 8021548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802154a:	3330      	adds	r3, #48	; 0x30
 802154c:	f805 3b01 	strb.w	r3, [r5], #1
 8021550:	9b02      	ldr	r3, [sp, #8]
 8021552:	429d      	cmp	r5, r3
 8021554:	4606      	mov	r6, r0
 8021556:	460f      	mov	r7, r1
 8021558:	f04f 0200 	mov.w	r2, #0
 802155c:	d134      	bne.n	80215c8 <_dtoa_r+0x660>
 802155e:	4b19      	ldr	r3, [pc, #100]	; (80215c4 <_dtoa_r+0x65c>)
 8021560:	ec51 0b18 	vmov	r0, r1, d8
 8021564:	f7de feba 	bl	80002dc <__adddf3>
 8021568:	4602      	mov	r2, r0
 802156a:	460b      	mov	r3, r1
 802156c:	4630      	mov	r0, r6
 802156e:	4639      	mov	r1, r7
 8021570:	f7df fafa 	bl	8000b68 <__aeabi_dcmpgt>
 8021574:	2800      	cmp	r0, #0
 8021576:	d175      	bne.n	8021664 <_dtoa_r+0x6fc>
 8021578:	ec53 2b18 	vmov	r2, r3, d8
 802157c:	4911      	ldr	r1, [pc, #68]	; (80215c4 <_dtoa_r+0x65c>)
 802157e:	2000      	movs	r0, #0
 8021580:	f7de feaa 	bl	80002d8 <__aeabi_dsub>
 8021584:	4602      	mov	r2, r0
 8021586:	460b      	mov	r3, r1
 8021588:	4630      	mov	r0, r6
 802158a:	4639      	mov	r1, r7
 802158c:	f7df face 	bl	8000b2c <__aeabi_dcmplt>
 8021590:	2800      	cmp	r0, #0
 8021592:	f43f af27 	beq.w	80213e4 <_dtoa_r+0x47c>
 8021596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021598:	1e6b      	subs	r3, r5, #1
 802159a:	930c      	str	r3, [sp, #48]	; 0x30
 802159c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80215a0:	2b30      	cmp	r3, #48	; 0x30
 80215a2:	d0f8      	beq.n	8021596 <_dtoa_r+0x62e>
 80215a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80215a8:	e04a      	b.n	8021640 <_dtoa_r+0x6d8>
 80215aa:	bf00      	nop
 80215ac:	08024368 	.word	0x08024368
 80215b0:	08024340 	.word	0x08024340
 80215b4:	3ff00000 	.word	0x3ff00000
 80215b8:	40240000 	.word	0x40240000
 80215bc:	401c0000 	.word	0x401c0000
 80215c0:	40140000 	.word	0x40140000
 80215c4:	3fe00000 	.word	0x3fe00000
 80215c8:	4baf      	ldr	r3, [pc, #700]	; (8021888 <_dtoa_r+0x920>)
 80215ca:	f7df f83d 	bl	8000648 <__aeabi_dmul>
 80215ce:	4606      	mov	r6, r0
 80215d0:	460f      	mov	r7, r1
 80215d2:	e7ac      	b.n	802152e <_dtoa_r+0x5c6>
 80215d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80215d8:	9d00      	ldr	r5, [sp, #0]
 80215da:	4642      	mov	r2, r8
 80215dc:	464b      	mov	r3, r9
 80215de:	4630      	mov	r0, r6
 80215e0:	4639      	mov	r1, r7
 80215e2:	f7df f95b 	bl	800089c <__aeabi_ddiv>
 80215e6:	f7df fadf 	bl	8000ba8 <__aeabi_d2iz>
 80215ea:	9002      	str	r0, [sp, #8]
 80215ec:	f7de ffc2 	bl	8000574 <__aeabi_i2d>
 80215f0:	4642      	mov	r2, r8
 80215f2:	464b      	mov	r3, r9
 80215f4:	f7df f828 	bl	8000648 <__aeabi_dmul>
 80215f8:	4602      	mov	r2, r0
 80215fa:	460b      	mov	r3, r1
 80215fc:	4630      	mov	r0, r6
 80215fe:	4639      	mov	r1, r7
 8021600:	f7de fe6a 	bl	80002d8 <__aeabi_dsub>
 8021604:	9e02      	ldr	r6, [sp, #8]
 8021606:	9f01      	ldr	r7, [sp, #4]
 8021608:	3630      	adds	r6, #48	; 0x30
 802160a:	f805 6b01 	strb.w	r6, [r5], #1
 802160e:	9e00      	ldr	r6, [sp, #0]
 8021610:	1bae      	subs	r6, r5, r6
 8021612:	42b7      	cmp	r7, r6
 8021614:	4602      	mov	r2, r0
 8021616:	460b      	mov	r3, r1
 8021618:	d137      	bne.n	802168a <_dtoa_r+0x722>
 802161a:	f7de fe5f 	bl	80002dc <__adddf3>
 802161e:	4642      	mov	r2, r8
 8021620:	464b      	mov	r3, r9
 8021622:	4606      	mov	r6, r0
 8021624:	460f      	mov	r7, r1
 8021626:	f7df fa9f 	bl	8000b68 <__aeabi_dcmpgt>
 802162a:	b9c8      	cbnz	r0, 8021660 <_dtoa_r+0x6f8>
 802162c:	4642      	mov	r2, r8
 802162e:	464b      	mov	r3, r9
 8021630:	4630      	mov	r0, r6
 8021632:	4639      	mov	r1, r7
 8021634:	f7df fa70 	bl	8000b18 <__aeabi_dcmpeq>
 8021638:	b110      	cbz	r0, 8021640 <_dtoa_r+0x6d8>
 802163a:	9b02      	ldr	r3, [sp, #8]
 802163c:	07d9      	lsls	r1, r3, #31
 802163e:	d40f      	bmi.n	8021660 <_dtoa_r+0x6f8>
 8021640:	4620      	mov	r0, r4
 8021642:	4659      	mov	r1, fp
 8021644:	f000 fe82 	bl	802234c <_Bfree>
 8021648:	2300      	movs	r3, #0
 802164a:	702b      	strb	r3, [r5, #0]
 802164c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802164e:	f10a 0001 	add.w	r0, sl, #1
 8021652:	6018      	str	r0, [r3, #0]
 8021654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021656:	2b00      	cmp	r3, #0
 8021658:	f43f acd8 	beq.w	802100c <_dtoa_r+0xa4>
 802165c:	601d      	str	r5, [r3, #0]
 802165e:	e4d5      	b.n	802100c <_dtoa_r+0xa4>
 8021660:	f8cd a01c 	str.w	sl, [sp, #28]
 8021664:	462b      	mov	r3, r5
 8021666:	461d      	mov	r5, r3
 8021668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802166c:	2a39      	cmp	r2, #57	; 0x39
 802166e:	d108      	bne.n	8021682 <_dtoa_r+0x71a>
 8021670:	9a00      	ldr	r2, [sp, #0]
 8021672:	429a      	cmp	r2, r3
 8021674:	d1f7      	bne.n	8021666 <_dtoa_r+0x6fe>
 8021676:	9a07      	ldr	r2, [sp, #28]
 8021678:	9900      	ldr	r1, [sp, #0]
 802167a:	3201      	adds	r2, #1
 802167c:	9207      	str	r2, [sp, #28]
 802167e:	2230      	movs	r2, #48	; 0x30
 8021680:	700a      	strb	r2, [r1, #0]
 8021682:	781a      	ldrb	r2, [r3, #0]
 8021684:	3201      	adds	r2, #1
 8021686:	701a      	strb	r2, [r3, #0]
 8021688:	e78c      	b.n	80215a4 <_dtoa_r+0x63c>
 802168a:	4b7f      	ldr	r3, [pc, #508]	; (8021888 <_dtoa_r+0x920>)
 802168c:	2200      	movs	r2, #0
 802168e:	f7de ffdb 	bl	8000648 <__aeabi_dmul>
 8021692:	2200      	movs	r2, #0
 8021694:	2300      	movs	r3, #0
 8021696:	4606      	mov	r6, r0
 8021698:	460f      	mov	r7, r1
 802169a:	f7df fa3d 	bl	8000b18 <__aeabi_dcmpeq>
 802169e:	2800      	cmp	r0, #0
 80216a0:	d09b      	beq.n	80215da <_dtoa_r+0x672>
 80216a2:	e7cd      	b.n	8021640 <_dtoa_r+0x6d8>
 80216a4:	9a08      	ldr	r2, [sp, #32]
 80216a6:	2a00      	cmp	r2, #0
 80216a8:	f000 80c4 	beq.w	8021834 <_dtoa_r+0x8cc>
 80216ac:	9a05      	ldr	r2, [sp, #20]
 80216ae:	2a01      	cmp	r2, #1
 80216b0:	f300 80a8 	bgt.w	8021804 <_dtoa_r+0x89c>
 80216b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80216b6:	2a00      	cmp	r2, #0
 80216b8:	f000 80a0 	beq.w	80217fc <_dtoa_r+0x894>
 80216bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80216c0:	9e06      	ldr	r6, [sp, #24]
 80216c2:	4645      	mov	r5, r8
 80216c4:	9a04      	ldr	r2, [sp, #16]
 80216c6:	2101      	movs	r1, #1
 80216c8:	441a      	add	r2, r3
 80216ca:	4620      	mov	r0, r4
 80216cc:	4498      	add	r8, r3
 80216ce:	9204      	str	r2, [sp, #16]
 80216d0:	f000 ff42 	bl	8022558 <__i2b>
 80216d4:	4607      	mov	r7, r0
 80216d6:	2d00      	cmp	r5, #0
 80216d8:	dd0b      	ble.n	80216f2 <_dtoa_r+0x78a>
 80216da:	9b04      	ldr	r3, [sp, #16]
 80216dc:	2b00      	cmp	r3, #0
 80216de:	dd08      	ble.n	80216f2 <_dtoa_r+0x78a>
 80216e0:	42ab      	cmp	r3, r5
 80216e2:	9a04      	ldr	r2, [sp, #16]
 80216e4:	bfa8      	it	ge
 80216e6:	462b      	movge	r3, r5
 80216e8:	eba8 0803 	sub.w	r8, r8, r3
 80216ec:	1aed      	subs	r5, r5, r3
 80216ee:	1ad3      	subs	r3, r2, r3
 80216f0:	9304      	str	r3, [sp, #16]
 80216f2:	9b06      	ldr	r3, [sp, #24]
 80216f4:	b1fb      	cbz	r3, 8021736 <_dtoa_r+0x7ce>
 80216f6:	9b08      	ldr	r3, [sp, #32]
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	f000 809f 	beq.w	802183c <_dtoa_r+0x8d4>
 80216fe:	2e00      	cmp	r6, #0
 8021700:	dd11      	ble.n	8021726 <_dtoa_r+0x7be>
 8021702:	4639      	mov	r1, r7
 8021704:	4632      	mov	r2, r6
 8021706:	4620      	mov	r0, r4
 8021708:	f000 ffe2 	bl	80226d0 <__pow5mult>
 802170c:	465a      	mov	r2, fp
 802170e:	4601      	mov	r1, r0
 8021710:	4607      	mov	r7, r0
 8021712:	4620      	mov	r0, r4
 8021714:	f000 ff36 	bl	8022584 <__multiply>
 8021718:	4659      	mov	r1, fp
 802171a:	9007      	str	r0, [sp, #28]
 802171c:	4620      	mov	r0, r4
 802171e:	f000 fe15 	bl	802234c <_Bfree>
 8021722:	9b07      	ldr	r3, [sp, #28]
 8021724:	469b      	mov	fp, r3
 8021726:	9b06      	ldr	r3, [sp, #24]
 8021728:	1b9a      	subs	r2, r3, r6
 802172a:	d004      	beq.n	8021736 <_dtoa_r+0x7ce>
 802172c:	4659      	mov	r1, fp
 802172e:	4620      	mov	r0, r4
 8021730:	f000 ffce 	bl	80226d0 <__pow5mult>
 8021734:	4683      	mov	fp, r0
 8021736:	2101      	movs	r1, #1
 8021738:	4620      	mov	r0, r4
 802173a:	f000 ff0d 	bl	8022558 <__i2b>
 802173e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021740:	2b00      	cmp	r3, #0
 8021742:	4606      	mov	r6, r0
 8021744:	dd7c      	ble.n	8021840 <_dtoa_r+0x8d8>
 8021746:	461a      	mov	r2, r3
 8021748:	4601      	mov	r1, r0
 802174a:	4620      	mov	r0, r4
 802174c:	f000 ffc0 	bl	80226d0 <__pow5mult>
 8021750:	9b05      	ldr	r3, [sp, #20]
 8021752:	2b01      	cmp	r3, #1
 8021754:	4606      	mov	r6, r0
 8021756:	dd76      	ble.n	8021846 <_dtoa_r+0x8de>
 8021758:	2300      	movs	r3, #0
 802175a:	9306      	str	r3, [sp, #24]
 802175c:	6933      	ldr	r3, [r6, #16]
 802175e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021762:	6918      	ldr	r0, [r3, #16]
 8021764:	f000 fea8 	bl	80224b8 <__hi0bits>
 8021768:	f1c0 0020 	rsb	r0, r0, #32
 802176c:	9b04      	ldr	r3, [sp, #16]
 802176e:	4418      	add	r0, r3
 8021770:	f010 001f 	ands.w	r0, r0, #31
 8021774:	f000 8086 	beq.w	8021884 <_dtoa_r+0x91c>
 8021778:	f1c0 0320 	rsb	r3, r0, #32
 802177c:	2b04      	cmp	r3, #4
 802177e:	dd7f      	ble.n	8021880 <_dtoa_r+0x918>
 8021780:	f1c0 001c 	rsb	r0, r0, #28
 8021784:	9b04      	ldr	r3, [sp, #16]
 8021786:	4403      	add	r3, r0
 8021788:	4480      	add	r8, r0
 802178a:	4405      	add	r5, r0
 802178c:	9304      	str	r3, [sp, #16]
 802178e:	f1b8 0f00 	cmp.w	r8, #0
 8021792:	dd05      	ble.n	80217a0 <_dtoa_r+0x838>
 8021794:	4659      	mov	r1, fp
 8021796:	4642      	mov	r2, r8
 8021798:	4620      	mov	r0, r4
 802179a:	f000 fff3 	bl	8022784 <__lshift>
 802179e:	4683      	mov	fp, r0
 80217a0:	9b04      	ldr	r3, [sp, #16]
 80217a2:	2b00      	cmp	r3, #0
 80217a4:	dd05      	ble.n	80217b2 <_dtoa_r+0x84a>
 80217a6:	4631      	mov	r1, r6
 80217a8:	461a      	mov	r2, r3
 80217aa:	4620      	mov	r0, r4
 80217ac:	f000 ffea 	bl	8022784 <__lshift>
 80217b0:	4606      	mov	r6, r0
 80217b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	d069      	beq.n	802188c <_dtoa_r+0x924>
 80217b8:	4631      	mov	r1, r6
 80217ba:	4658      	mov	r0, fp
 80217bc:	f001 f84e 	bl	802285c <__mcmp>
 80217c0:	2800      	cmp	r0, #0
 80217c2:	da63      	bge.n	802188c <_dtoa_r+0x924>
 80217c4:	2300      	movs	r3, #0
 80217c6:	4659      	mov	r1, fp
 80217c8:	220a      	movs	r2, #10
 80217ca:	4620      	mov	r0, r4
 80217cc:	f000 fde0 	bl	8022390 <__multadd>
 80217d0:	9b08      	ldr	r3, [sp, #32]
 80217d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80217d6:	4683      	mov	fp, r0
 80217d8:	2b00      	cmp	r3, #0
 80217da:	f000 818f 	beq.w	8021afc <_dtoa_r+0xb94>
 80217de:	4639      	mov	r1, r7
 80217e0:	2300      	movs	r3, #0
 80217e2:	220a      	movs	r2, #10
 80217e4:	4620      	mov	r0, r4
 80217e6:	f000 fdd3 	bl	8022390 <__multadd>
 80217ea:	f1b9 0f00 	cmp.w	r9, #0
 80217ee:	4607      	mov	r7, r0
 80217f0:	f300 808e 	bgt.w	8021910 <_dtoa_r+0x9a8>
 80217f4:	9b05      	ldr	r3, [sp, #20]
 80217f6:	2b02      	cmp	r3, #2
 80217f8:	dc50      	bgt.n	802189c <_dtoa_r+0x934>
 80217fa:	e089      	b.n	8021910 <_dtoa_r+0x9a8>
 80217fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80217fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021802:	e75d      	b.n	80216c0 <_dtoa_r+0x758>
 8021804:	9b01      	ldr	r3, [sp, #4]
 8021806:	1e5e      	subs	r6, r3, #1
 8021808:	9b06      	ldr	r3, [sp, #24]
 802180a:	42b3      	cmp	r3, r6
 802180c:	bfbf      	itttt	lt
 802180e:	9b06      	ldrlt	r3, [sp, #24]
 8021810:	9606      	strlt	r6, [sp, #24]
 8021812:	1af2      	sublt	r2, r6, r3
 8021814:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8021816:	bfb6      	itet	lt
 8021818:	189b      	addlt	r3, r3, r2
 802181a:	1b9e      	subge	r6, r3, r6
 802181c:	930d      	strlt	r3, [sp, #52]	; 0x34
 802181e:	9b01      	ldr	r3, [sp, #4]
 8021820:	bfb8      	it	lt
 8021822:	2600      	movlt	r6, #0
 8021824:	2b00      	cmp	r3, #0
 8021826:	bfb5      	itete	lt
 8021828:	eba8 0503 	sublt.w	r5, r8, r3
 802182c:	9b01      	ldrge	r3, [sp, #4]
 802182e:	2300      	movlt	r3, #0
 8021830:	4645      	movge	r5, r8
 8021832:	e747      	b.n	80216c4 <_dtoa_r+0x75c>
 8021834:	9e06      	ldr	r6, [sp, #24]
 8021836:	9f08      	ldr	r7, [sp, #32]
 8021838:	4645      	mov	r5, r8
 802183a:	e74c      	b.n	80216d6 <_dtoa_r+0x76e>
 802183c:	9a06      	ldr	r2, [sp, #24]
 802183e:	e775      	b.n	802172c <_dtoa_r+0x7c4>
 8021840:	9b05      	ldr	r3, [sp, #20]
 8021842:	2b01      	cmp	r3, #1
 8021844:	dc18      	bgt.n	8021878 <_dtoa_r+0x910>
 8021846:	9b02      	ldr	r3, [sp, #8]
 8021848:	b9b3      	cbnz	r3, 8021878 <_dtoa_r+0x910>
 802184a:	9b03      	ldr	r3, [sp, #12]
 802184c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021850:	b9a3      	cbnz	r3, 802187c <_dtoa_r+0x914>
 8021852:	9b03      	ldr	r3, [sp, #12]
 8021854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021858:	0d1b      	lsrs	r3, r3, #20
 802185a:	051b      	lsls	r3, r3, #20
 802185c:	b12b      	cbz	r3, 802186a <_dtoa_r+0x902>
 802185e:	9b04      	ldr	r3, [sp, #16]
 8021860:	3301      	adds	r3, #1
 8021862:	9304      	str	r3, [sp, #16]
 8021864:	f108 0801 	add.w	r8, r8, #1
 8021868:	2301      	movs	r3, #1
 802186a:	9306      	str	r3, [sp, #24]
 802186c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802186e:	2b00      	cmp	r3, #0
 8021870:	f47f af74 	bne.w	802175c <_dtoa_r+0x7f4>
 8021874:	2001      	movs	r0, #1
 8021876:	e779      	b.n	802176c <_dtoa_r+0x804>
 8021878:	2300      	movs	r3, #0
 802187a:	e7f6      	b.n	802186a <_dtoa_r+0x902>
 802187c:	9b02      	ldr	r3, [sp, #8]
 802187e:	e7f4      	b.n	802186a <_dtoa_r+0x902>
 8021880:	d085      	beq.n	802178e <_dtoa_r+0x826>
 8021882:	4618      	mov	r0, r3
 8021884:	301c      	adds	r0, #28
 8021886:	e77d      	b.n	8021784 <_dtoa_r+0x81c>
 8021888:	40240000 	.word	0x40240000
 802188c:	9b01      	ldr	r3, [sp, #4]
 802188e:	2b00      	cmp	r3, #0
 8021890:	dc38      	bgt.n	8021904 <_dtoa_r+0x99c>
 8021892:	9b05      	ldr	r3, [sp, #20]
 8021894:	2b02      	cmp	r3, #2
 8021896:	dd35      	ble.n	8021904 <_dtoa_r+0x99c>
 8021898:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802189c:	f1b9 0f00 	cmp.w	r9, #0
 80218a0:	d10d      	bne.n	80218be <_dtoa_r+0x956>
 80218a2:	4631      	mov	r1, r6
 80218a4:	464b      	mov	r3, r9
 80218a6:	2205      	movs	r2, #5
 80218a8:	4620      	mov	r0, r4
 80218aa:	f000 fd71 	bl	8022390 <__multadd>
 80218ae:	4601      	mov	r1, r0
 80218b0:	4606      	mov	r6, r0
 80218b2:	4658      	mov	r0, fp
 80218b4:	f000 ffd2 	bl	802285c <__mcmp>
 80218b8:	2800      	cmp	r0, #0
 80218ba:	f73f adbd 	bgt.w	8021438 <_dtoa_r+0x4d0>
 80218be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80218c0:	9d00      	ldr	r5, [sp, #0]
 80218c2:	ea6f 0a03 	mvn.w	sl, r3
 80218c6:	f04f 0800 	mov.w	r8, #0
 80218ca:	4631      	mov	r1, r6
 80218cc:	4620      	mov	r0, r4
 80218ce:	f000 fd3d 	bl	802234c <_Bfree>
 80218d2:	2f00      	cmp	r7, #0
 80218d4:	f43f aeb4 	beq.w	8021640 <_dtoa_r+0x6d8>
 80218d8:	f1b8 0f00 	cmp.w	r8, #0
 80218dc:	d005      	beq.n	80218ea <_dtoa_r+0x982>
 80218de:	45b8      	cmp	r8, r7
 80218e0:	d003      	beq.n	80218ea <_dtoa_r+0x982>
 80218e2:	4641      	mov	r1, r8
 80218e4:	4620      	mov	r0, r4
 80218e6:	f000 fd31 	bl	802234c <_Bfree>
 80218ea:	4639      	mov	r1, r7
 80218ec:	4620      	mov	r0, r4
 80218ee:	f000 fd2d 	bl	802234c <_Bfree>
 80218f2:	e6a5      	b.n	8021640 <_dtoa_r+0x6d8>
 80218f4:	2600      	movs	r6, #0
 80218f6:	4637      	mov	r7, r6
 80218f8:	e7e1      	b.n	80218be <_dtoa_r+0x956>
 80218fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80218fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021900:	4637      	mov	r7, r6
 8021902:	e599      	b.n	8021438 <_dtoa_r+0x4d0>
 8021904:	9b08      	ldr	r3, [sp, #32]
 8021906:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802190a:	2b00      	cmp	r3, #0
 802190c:	f000 80fd 	beq.w	8021b0a <_dtoa_r+0xba2>
 8021910:	2d00      	cmp	r5, #0
 8021912:	dd05      	ble.n	8021920 <_dtoa_r+0x9b8>
 8021914:	4639      	mov	r1, r7
 8021916:	462a      	mov	r2, r5
 8021918:	4620      	mov	r0, r4
 802191a:	f000 ff33 	bl	8022784 <__lshift>
 802191e:	4607      	mov	r7, r0
 8021920:	9b06      	ldr	r3, [sp, #24]
 8021922:	2b00      	cmp	r3, #0
 8021924:	d05c      	beq.n	80219e0 <_dtoa_r+0xa78>
 8021926:	6879      	ldr	r1, [r7, #4]
 8021928:	4620      	mov	r0, r4
 802192a:	f000 fccf 	bl	80222cc <_Balloc>
 802192e:	4605      	mov	r5, r0
 8021930:	b928      	cbnz	r0, 802193e <_dtoa_r+0x9d6>
 8021932:	4b80      	ldr	r3, [pc, #512]	; (8021b34 <_dtoa_r+0xbcc>)
 8021934:	4602      	mov	r2, r0
 8021936:	f240 21ea 	movw	r1, #746	; 0x2ea
 802193a:	f7ff bb2e 	b.w	8020f9a <_dtoa_r+0x32>
 802193e:	693a      	ldr	r2, [r7, #16]
 8021940:	3202      	adds	r2, #2
 8021942:	0092      	lsls	r2, r2, #2
 8021944:	f107 010c 	add.w	r1, r7, #12
 8021948:	300c      	adds	r0, #12
 802194a:	f7fd fce3 	bl	801f314 <memcpy>
 802194e:	2201      	movs	r2, #1
 8021950:	4629      	mov	r1, r5
 8021952:	4620      	mov	r0, r4
 8021954:	f000 ff16 	bl	8022784 <__lshift>
 8021958:	9b00      	ldr	r3, [sp, #0]
 802195a:	3301      	adds	r3, #1
 802195c:	9301      	str	r3, [sp, #4]
 802195e:	9b00      	ldr	r3, [sp, #0]
 8021960:	444b      	add	r3, r9
 8021962:	9307      	str	r3, [sp, #28]
 8021964:	9b02      	ldr	r3, [sp, #8]
 8021966:	f003 0301 	and.w	r3, r3, #1
 802196a:	46b8      	mov	r8, r7
 802196c:	9306      	str	r3, [sp, #24]
 802196e:	4607      	mov	r7, r0
 8021970:	9b01      	ldr	r3, [sp, #4]
 8021972:	4631      	mov	r1, r6
 8021974:	3b01      	subs	r3, #1
 8021976:	4658      	mov	r0, fp
 8021978:	9302      	str	r3, [sp, #8]
 802197a:	f7ff fa67 	bl	8020e4c <quorem>
 802197e:	4603      	mov	r3, r0
 8021980:	3330      	adds	r3, #48	; 0x30
 8021982:	9004      	str	r0, [sp, #16]
 8021984:	4641      	mov	r1, r8
 8021986:	4658      	mov	r0, fp
 8021988:	9308      	str	r3, [sp, #32]
 802198a:	f000 ff67 	bl	802285c <__mcmp>
 802198e:	463a      	mov	r2, r7
 8021990:	4681      	mov	r9, r0
 8021992:	4631      	mov	r1, r6
 8021994:	4620      	mov	r0, r4
 8021996:	f000 ff7d 	bl	8022894 <__mdiff>
 802199a:	68c2      	ldr	r2, [r0, #12]
 802199c:	9b08      	ldr	r3, [sp, #32]
 802199e:	4605      	mov	r5, r0
 80219a0:	bb02      	cbnz	r2, 80219e4 <_dtoa_r+0xa7c>
 80219a2:	4601      	mov	r1, r0
 80219a4:	4658      	mov	r0, fp
 80219a6:	f000 ff59 	bl	802285c <__mcmp>
 80219aa:	9b08      	ldr	r3, [sp, #32]
 80219ac:	4602      	mov	r2, r0
 80219ae:	4629      	mov	r1, r5
 80219b0:	4620      	mov	r0, r4
 80219b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80219b6:	f000 fcc9 	bl	802234c <_Bfree>
 80219ba:	9b05      	ldr	r3, [sp, #20]
 80219bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80219be:	9d01      	ldr	r5, [sp, #4]
 80219c0:	ea43 0102 	orr.w	r1, r3, r2
 80219c4:	9b06      	ldr	r3, [sp, #24]
 80219c6:	430b      	orrs	r3, r1
 80219c8:	9b08      	ldr	r3, [sp, #32]
 80219ca:	d10d      	bne.n	80219e8 <_dtoa_r+0xa80>
 80219cc:	2b39      	cmp	r3, #57	; 0x39
 80219ce:	d029      	beq.n	8021a24 <_dtoa_r+0xabc>
 80219d0:	f1b9 0f00 	cmp.w	r9, #0
 80219d4:	dd01      	ble.n	80219da <_dtoa_r+0xa72>
 80219d6:	9b04      	ldr	r3, [sp, #16]
 80219d8:	3331      	adds	r3, #49	; 0x31
 80219da:	9a02      	ldr	r2, [sp, #8]
 80219dc:	7013      	strb	r3, [r2, #0]
 80219de:	e774      	b.n	80218ca <_dtoa_r+0x962>
 80219e0:	4638      	mov	r0, r7
 80219e2:	e7b9      	b.n	8021958 <_dtoa_r+0x9f0>
 80219e4:	2201      	movs	r2, #1
 80219e6:	e7e2      	b.n	80219ae <_dtoa_r+0xa46>
 80219e8:	f1b9 0f00 	cmp.w	r9, #0
 80219ec:	db06      	blt.n	80219fc <_dtoa_r+0xa94>
 80219ee:	9905      	ldr	r1, [sp, #20]
 80219f0:	ea41 0909 	orr.w	r9, r1, r9
 80219f4:	9906      	ldr	r1, [sp, #24]
 80219f6:	ea59 0101 	orrs.w	r1, r9, r1
 80219fa:	d120      	bne.n	8021a3e <_dtoa_r+0xad6>
 80219fc:	2a00      	cmp	r2, #0
 80219fe:	ddec      	ble.n	80219da <_dtoa_r+0xa72>
 8021a00:	4659      	mov	r1, fp
 8021a02:	2201      	movs	r2, #1
 8021a04:	4620      	mov	r0, r4
 8021a06:	9301      	str	r3, [sp, #4]
 8021a08:	f000 febc 	bl	8022784 <__lshift>
 8021a0c:	4631      	mov	r1, r6
 8021a0e:	4683      	mov	fp, r0
 8021a10:	f000 ff24 	bl	802285c <__mcmp>
 8021a14:	2800      	cmp	r0, #0
 8021a16:	9b01      	ldr	r3, [sp, #4]
 8021a18:	dc02      	bgt.n	8021a20 <_dtoa_r+0xab8>
 8021a1a:	d1de      	bne.n	80219da <_dtoa_r+0xa72>
 8021a1c:	07da      	lsls	r2, r3, #31
 8021a1e:	d5dc      	bpl.n	80219da <_dtoa_r+0xa72>
 8021a20:	2b39      	cmp	r3, #57	; 0x39
 8021a22:	d1d8      	bne.n	80219d6 <_dtoa_r+0xa6e>
 8021a24:	9a02      	ldr	r2, [sp, #8]
 8021a26:	2339      	movs	r3, #57	; 0x39
 8021a28:	7013      	strb	r3, [r2, #0]
 8021a2a:	462b      	mov	r3, r5
 8021a2c:	461d      	mov	r5, r3
 8021a2e:	3b01      	subs	r3, #1
 8021a30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021a34:	2a39      	cmp	r2, #57	; 0x39
 8021a36:	d050      	beq.n	8021ada <_dtoa_r+0xb72>
 8021a38:	3201      	adds	r2, #1
 8021a3a:	701a      	strb	r2, [r3, #0]
 8021a3c:	e745      	b.n	80218ca <_dtoa_r+0x962>
 8021a3e:	2a00      	cmp	r2, #0
 8021a40:	dd03      	ble.n	8021a4a <_dtoa_r+0xae2>
 8021a42:	2b39      	cmp	r3, #57	; 0x39
 8021a44:	d0ee      	beq.n	8021a24 <_dtoa_r+0xabc>
 8021a46:	3301      	adds	r3, #1
 8021a48:	e7c7      	b.n	80219da <_dtoa_r+0xa72>
 8021a4a:	9a01      	ldr	r2, [sp, #4]
 8021a4c:	9907      	ldr	r1, [sp, #28]
 8021a4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021a52:	428a      	cmp	r2, r1
 8021a54:	d02a      	beq.n	8021aac <_dtoa_r+0xb44>
 8021a56:	4659      	mov	r1, fp
 8021a58:	2300      	movs	r3, #0
 8021a5a:	220a      	movs	r2, #10
 8021a5c:	4620      	mov	r0, r4
 8021a5e:	f000 fc97 	bl	8022390 <__multadd>
 8021a62:	45b8      	cmp	r8, r7
 8021a64:	4683      	mov	fp, r0
 8021a66:	f04f 0300 	mov.w	r3, #0
 8021a6a:	f04f 020a 	mov.w	r2, #10
 8021a6e:	4641      	mov	r1, r8
 8021a70:	4620      	mov	r0, r4
 8021a72:	d107      	bne.n	8021a84 <_dtoa_r+0xb1c>
 8021a74:	f000 fc8c 	bl	8022390 <__multadd>
 8021a78:	4680      	mov	r8, r0
 8021a7a:	4607      	mov	r7, r0
 8021a7c:	9b01      	ldr	r3, [sp, #4]
 8021a7e:	3301      	adds	r3, #1
 8021a80:	9301      	str	r3, [sp, #4]
 8021a82:	e775      	b.n	8021970 <_dtoa_r+0xa08>
 8021a84:	f000 fc84 	bl	8022390 <__multadd>
 8021a88:	4639      	mov	r1, r7
 8021a8a:	4680      	mov	r8, r0
 8021a8c:	2300      	movs	r3, #0
 8021a8e:	220a      	movs	r2, #10
 8021a90:	4620      	mov	r0, r4
 8021a92:	f000 fc7d 	bl	8022390 <__multadd>
 8021a96:	4607      	mov	r7, r0
 8021a98:	e7f0      	b.n	8021a7c <_dtoa_r+0xb14>
 8021a9a:	f1b9 0f00 	cmp.w	r9, #0
 8021a9e:	9a00      	ldr	r2, [sp, #0]
 8021aa0:	bfcc      	ite	gt
 8021aa2:	464d      	movgt	r5, r9
 8021aa4:	2501      	movle	r5, #1
 8021aa6:	4415      	add	r5, r2
 8021aa8:	f04f 0800 	mov.w	r8, #0
 8021aac:	4659      	mov	r1, fp
 8021aae:	2201      	movs	r2, #1
 8021ab0:	4620      	mov	r0, r4
 8021ab2:	9301      	str	r3, [sp, #4]
 8021ab4:	f000 fe66 	bl	8022784 <__lshift>
 8021ab8:	4631      	mov	r1, r6
 8021aba:	4683      	mov	fp, r0
 8021abc:	f000 fece 	bl	802285c <__mcmp>
 8021ac0:	2800      	cmp	r0, #0
 8021ac2:	dcb2      	bgt.n	8021a2a <_dtoa_r+0xac2>
 8021ac4:	d102      	bne.n	8021acc <_dtoa_r+0xb64>
 8021ac6:	9b01      	ldr	r3, [sp, #4]
 8021ac8:	07db      	lsls	r3, r3, #31
 8021aca:	d4ae      	bmi.n	8021a2a <_dtoa_r+0xac2>
 8021acc:	462b      	mov	r3, r5
 8021ace:	461d      	mov	r5, r3
 8021ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021ad4:	2a30      	cmp	r2, #48	; 0x30
 8021ad6:	d0fa      	beq.n	8021ace <_dtoa_r+0xb66>
 8021ad8:	e6f7      	b.n	80218ca <_dtoa_r+0x962>
 8021ada:	9a00      	ldr	r2, [sp, #0]
 8021adc:	429a      	cmp	r2, r3
 8021ade:	d1a5      	bne.n	8021a2c <_dtoa_r+0xac4>
 8021ae0:	f10a 0a01 	add.w	sl, sl, #1
 8021ae4:	2331      	movs	r3, #49	; 0x31
 8021ae6:	e779      	b.n	80219dc <_dtoa_r+0xa74>
 8021ae8:	4b13      	ldr	r3, [pc, #76]	; (8021b38 <_dtoa_r+0xbd0>)
 8021aea:	f7ff baaf 	b.w	802104c <_dtoa_r+0xe4>
 8021aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	f47f aa86 	bne.w	8021002 <_dtoa_r+0x9a>
 8021af6:	4b11      	ldr	r3, [pc, #68]	; (8021b3c <_dtoa_r+0xbd4>)
 8021af8:	f7ff baa8 	b.w	802104c <_dtoa_r+0xe4>
 8021afc:	f1b9 0f00 	cmp.w	r9, #0
 8021b00:	dc03      	bgt.n	8021b0a <_dtoa_r+0xba2>
 8021b02:	9b05      	ldr	r3, [sp, #20]
 8021b04:	2b02      	cmp	r3, #2
 8021b06:	f73f aec9 	bgt.w	802189c <_dtoa_r+0x934>
 8021b0a:	9d00      	ldr	r5, [sp, #0]
 8021b0c:	4631      	mov	r1, r6
 8021b0e:	4658      	mov	r0, fp
 8021b10:	f7ff f99c 	bl	8020e4c <quorem>
 8021b14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021b18:	f805 3b01 	strb.w	r3, [r5], #1
 8021b1c:	9a00      	ldr	r2, [sp, #0]
 8021b1e:	1aaa      	subs	r2, r5, r2
 8021b20:	4591      	cmp	r9, r2
 8021b22:	ddba      	ble.n	8021a9a <_dtoa_r+0xb32>
 8021b24:	4659      	mov	r1, fp
 8021b26:	2300      	movs	r3, #0
 8021b28:	220a      	movs	r2, #10
 8021b2a:	4620      	mov	r0, r4
 8021b2c:	f000 fc30 	bl	8022390 <__multadd>
 8021b30:	4683      	mov	fp, r0
 8021b32:	e7eb      	b.n	8021b0c <_dtoa_r+0xba4>
 8021b34:	0802424b 	.word	0x0802424b
 8021b38:	08024154 	.word	0x08024154
 8021b3c:	080241c8 	.word	0x080241c8

08021b40 <_fstat_r>:
 8021b40:	b538      	push	{r3, r4, r5, lr}
 8021b42:	4d07      	ldr	r5, [pc, #28]	; (8021b60 <_fstat_r+0x20>)
 8021b44:	2300      	movs	r3, #0
 8021b46:	4604      	mov	r4, r0
 8021b48:	4608      	mov	r0, r1
 8021b4a:	4611      	mov	r1, r2
 8021b4c:	602b      	str	r3, [r5, #0]
 8021b4e:	f7fd f945 	bl	801eddc <_fstat>
 8021b52:	1c43      	adds	r3, r0, #1
 8021b54:	d102      	bne.n	8021b5c <_fstat_r+0x1c>
 8021b56:	682b      	ldr	r3, [r5, #0]
 8021b58:	b103      	cbz	r3, 8021b5c <_fstat_r+0x1c>
 8021b5a:	6023      	str	r3, [r4, #0]
 8021b5c:	bd38      	pop	{r3, r4, r5, pc}
 8021b5e:	bf00      	nop
 8021b60:	2001d46c 	.word	0x2001d46c

08021b64 <rshift>:
 8021b64:	6903      	ldr	r3, [r0, #16]
 8021b66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021b6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021b6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021b72:	f100 0414 	add.w	r4, r0, #20
 8021b76:	dd45      	ble.n	8021c04 <rshift+0xa0>
 8021b78:	f011 011f 	ands.w	r1, r1, #31
 8021b7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021b80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021b84:	d10c      	bne.n	8021ba0 <rshift+0x3c>
 8021b86:	f100 0710 	add.w	r7, r0, #16
 8021b8a:	4629      	mov	r1, r5
 8021b8c:	42b1      	cmp	r1, r6
 8021b8e:	d334      	bcc.n	8021bfa <rshift+0x96>
 8021b90:	1a9b      	subs	r3, r3, r2
 8021b92:	009b      	lsls	r3, r3, #2
 8021b94:	1eea      	subs	r2, r5, #3
 8021b96:	4296      	cmp	r6, r2
 8021b98:	bf38      	it	cc
 8021b9a:	2300      	movcc	r3, #0
 8021b9c:	4423      	add	r3, r4
 8021b9e:	e015      	b.n	8021bcc <rshift+0x68>
 8021ba0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021ba4:	f1c1 0820 	rsb	r8, r1, #32
 8021ba8:	40cf      	lsrs	r7, r1
 8021baa:	f105 0e04 	add.w	lr, r5, #4
 8021bae:	46a1      	mov	r9, r4
 8021bb0:	4576      	cmp	r6, lr
 8021bb2:	46f4      	mov	ip, lr
 8021bb4:	d815      	bhi.n	8021be2 <rshift+0x7e>
 8021bb6:	1a9b      	subs	r3, r3, r2
 8021bb8:	009a      	lsls	r2, r3, #2
 8021bba:	3a04      	subs	r2, #4
 8021bbc:	3501      	adds	r5, #1
 8021bbe:	42ae      	cmp	r6, r5
 8021bc0:	bf38      	it	cc
 8021bc2:	2200      	movcc	r2, #0
 8021bc4:	18a3      	adds	r3, r4, r2
 8021bc6:	50a7      	str	r7, [r4, r2]
 8021bc8:	b107      	cbz	r7, 8021bcc <rshift+0x68>
 8021bca:	3304      	adds	r3, #4
 8021bcc:	1b1a      	subs	r2, r3, r4
 8021bce:	42a3      	cmp	r3, r4
 8021bd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021bd4:	bf08      	it	eq
 8021bd6:	2300      	moveq	r3, #0
 8021bd8:	6102      	str	r2, [r0, #16]
 8021bda:	bf08      	it	eq
 8021bdc:	6143      	streq	r3, [r0, #20]
 8021bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021be2:	f8dc c000 	ldr.w	ip, [ip]
 8021be6:	fa0c fc08 	lsl.w	ip, ip, r8
 8021bea:	ea4c 0707 	orr.w	r7, ip, r7
 8021bee:	f849 7b04 	str.w	r7, [r9], #4
 8021bf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021bf6:	40cf      	lsrs	r7, r1
 8021bf8:	e7da      	b.n	8021bb0 <rshift+0x4c>
 8021bfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8021bfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8021c02:	e7c3      	b.n	8021b8c <rshift+0x28>
 8021c04:	4623      	mov	r3, r4
 8021c06:	e7e1      	b.n	8021bcc <rshift+0x68>

08021c08 <__hexdig_fun>:
 8021c08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8021c0c:	2b09      	cmp	r3, #9
 8021c0e:	d802      	bhi.n	8021c16 <__hexdig_fun+0xe>
 8021c10:	3820      	subs	r0, #32
 8021c12:	b2c0      	uxtb	r0, r0
 8021c14:	4770      	bx	lr
 8021c16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8021c1a:	2b05      	cmp	r3, #5
 8021c1c:	d801      	bhi.n	8021c22 <__hexdig_fun+0x1a>
 8021c1e:	3847      	subs	r0, #71	; 0x47
 8021c20:	e7f7      	b.n	8021c12 <__hexdig_fun+0xa>
 8021c22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021c26:	2b05      	cmp	r3, #5
 8021c28:	d801      	bhi.n	8021c2e <__hexdig_fun+0x26>
 8021c2a:	3827      	subs	r0, #39	; 0x27
 8021c2c:	e7f1      	b.n	8021c12 <__hexdig_fun+0xa>
 8021c2e:	2000      	movs	r0, #0
 8021c30:	4770      	bx	lr
	...

08021c34 <__gethex>:
 8021c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c38:	ed2d 8b02 	vpush	{d8}
 8021c3c:	b089      	sub	sp, #36	; 0x24
 8021c3e:	ee08 0a10 	vmov	s16, r0
 8021c42:	9304      	str	r3, [sp, #16]
 8021c44:	4bbc      	ldr	r3, [pc, #752]	; (8021f38 <__gethex+0x304>)
 8021c46:	681b      	ldr	r3, [r3, #0]
 8021c48:	9301      	str	r3, [sp, #4]
 8021c4a:	4618      	mov	r0, r3
 8021c4c:	468b      	mov	fp, r1
 8021c4e:	4690      	mov	r8, r2
 8021c50:	f7de fae0 	bl	8000214 <strlen>
 8021c54:	9b01      	ldr	r3, [sp, #4]
 8021c56:	f8db 2000 	ldr.w	r2, [fp]
 8021c5a:	4403      	add	r3, r0
 8021c5c:	4682      	mov	sl, r0
 8021c5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8021c62:	9305      	str	r3, [sp, #20]
 8021c64:	1c93      	adds	r3, r2, #2
 8021c66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8021c6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8021c6e:	32fe      	adds	r2, #254	; 0xfe
 8021c70:	18d1      	adds	r1, r2, r3
 8021c72:	461f      	mov	r7, r3
 8021c74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021c78:	9100      	str	r1, [sp, #0]
 8021c7a:	2830      	cmp	r0, #48	; 0x30
 8021c7c:	d0f8      	beq.n	8021c70 <__gethex+0x3c>
 8021c7e:	f7ff ffc3 	bl	8021c08 <__hexdig_fun>
 8021c82:	4604      	mov	r4, r0
 8021c84:	2800      	cmp	r0, #0
 8021c86:	d13a      	bne.n	8021cfe <__gethex+0xca>
 8021c88:	9901      	ldr	r1, [sp, #4]
 8021c8a:	4652      	mov	r2, sl
 8021c8c:	4638      	mov	r0, r7
 8021c8e:	f7fe f915 	bl	801febc <strncmp>
 8021c92:	4605      	mov	r5, r0
 8021c94:	2800      	cmp	r0, #0
 8021c96:	d168      	bne.n	8021d6a <__gethex+0x136>
 8021c98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8021c9c:	eb07 060a 	add.w	r6, r7, sl
 8021ca0:	f7ff ffb2 	bl	8021c08 <__hexdig_fun>
 8021ca4:	2800      	cmp	r0, #0
 8021ca6:	d062      	beq.n	8021d6e <__gethex+0x13a>
 8021ca8:	4633      	mov	r3, r6
 8021caa:	7818      	ldrb	r0, [r3, #0]
 8021cac:	2830      	cmp	r0, #48	; 0x30
 8021cae:	461f      	mov	r7, r3
 8021cb0:	f103 0301 	add.w	r3, r3, #1
 8021cb4:	d0f9      	beq.n	8021caa <__gethex+0x76>
 8021cb6:	f7ff ffa7 	bl	8021c08 <__hexdig_fun>
 8021cba:	2301      	movs	r3, #1
 8021cbc:	fab0 f480 	clz	r4, r0
 8021cc0:	0964      	lsrs	r4, r4, #5
 8021cc2:	4635      	mov	r5, r6
 8021cc4:	9300      	str	r3, [sp, #0]
 8021cc6:	463a      	mov	r2, r7
 8021cc8:	4616      	mov	r6, r2
 8021cca:	3201      	adds	r2, #1
 8021ccc:	7830      	ldrb	r0, [r6, #0]
 8021cce:	f7ff ff9b 	bl	8021c08 <__hexdig_fun>
 8021cd2:	2800      	cmp	r0, #0
 8021cd4:	d1f8      	bne.n	8021cc8 <__gethex+0x94>
 8021cd6:	9901      	ldr	r1, [sp, #4]
 8021cd8:	4652      	mov	r2, sl
 8021cda:	4630      	mov	r0, r6
 8021cdc:	f7fe f8ee 	bl	801febc <strncmp>
 8021ce0:	b980      	cbnz	r0, 8021d04 <__gethex+0xd0>
 8021ce2:	b94d      	cbnz	r5, 8021cf8 <__gethex+0xc4>
 8021ce4:	eb06 050a 	add.w	r5, r6, sl
 8021ce8:	462a      	mov	r2, r5
 8021cea:	4616      	mov	r6, r2
 8021cec:	3201      	adds	r2, #1
 8021cee:	7830      	ldrb	r0, [r6, #0]
 8021cf0:	f7ff ff8a 	bl	8021c08 <__hexdig_fun>
 8021cf4:	2800      	cmp	r0, #0
 8021cf6:	d1f8      	bne.n	8021cea <__gethex+0xb6>
 8021cf8:	1bad      	subs	r5, r5, r6
 8021cfa:	00ad      	lsls	r5, r5, #2
 8021cfc:	e004      	b.n	8021d08 <__gethex+0xd4>
 8021cfe:	2400      	movs	r4, #0
 8021d00:	4625      	mov	r5, r4
 8021d02:	e7e0      	b.n	8021cc6 <__gethex+0x92>
 8021d04:	2d00      	cmp	r5, #0
 8021d06:	d1f7      	bne.n	8021cf8 <__gethex+0xc4>
 8021d08:	7833      	ldrb	r3, [r6, #0]
 8021d0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021d0e:	2b50      	cmp	r3, #80	; 0x50
 8021d10:	d13b      	bne.n	8021d8a <__gethex+0x156>
 8021d12:	7873      	ldrb	r3, [r6, #1]
 8021d14:	2b2b      	cmp	r3, #43	; 0x2b
 8021d16:	d02c      	beq.n	8021d72 <__gethex+0x13e>
 8021d18:	2b2d      	cmp	r3, #45	; 0x2d
 8021d1a:	d02e      	beq.n	8021d7a <__gethex+0x146>
 8021d1c:	1c71      	adds	r1, r6, #1
 8021d1e:	f04f 0900 	mov.w	r9, #0
 8021d22:	7808      	ldrb	r0, [r1, #0]
 8021d24:	f7ff ff70 	bl	8021c08 <__hexdig_fun>
 8021d28:	1e43      	subs	r3, r0, #1
 8021d2a:	b2db      	uxtb	r3, r3
 8021d2c:	2b18      	cmp	r3, #24
 8021d2e:	d82c      	bhi.n	8021d8a <__gethex+0x156>
 8021d30:	f1a0 0210 	sub.w	r2, r0, #16
 8021d34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021d38:	f7ff ff66 	bl	8021c08 <__hexdig_fun>
 8021d3c:	1e43      	subs	r3, r0, #1
 8021d3e:	b2db      	uxtb	r3, r3
 8021d40:	2b18      	cmp	r3, #24
 8021d42:	d91d      	bls.n	8021d80 <__gethex+0x14c>
 8021d44:	f1b9 0f00 	cmp.w	r9, #0
 8021d48:	d000      	beq.n	8021d4c <__gethex+0x118>
 8021d4a:	4252      	negs	r2, r2
 8021d4c:	4415      	add	r5, r2
 8021d4e:	f8cb 1000 	str.w	r1, [fp]
 8021d52:	b1e4      	cbz	r4, 8021d8e <__gethex+0x15a>
 8021d54:	9b00      	ldr	r3, [sp, #0]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	bf14      	ite	ne
 8021d5a:	2700      	movne	r7, #0
 8021d5c:	2706      	moveq	r7, #6
 8021d5e:	4638      	mov	r0, r7
 8021d60:	b009      	add	sp, #36	; 0x24
 8021d62:	ecbd 8b02 	vpop	{d8}
 8021d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d6a:	463e      	mov	r6, r7
 8021d6c:	4625      	mov	r5, r4
 8021d6e:	2401      	movs	r4, #1
 8021d70:	e7ca      	b.n	8021d08 <__gethex+0xd4>
 8021d72:	f04f 0900 	mov.w	r9, #0
 8021d76:	1cb1      	adds	r1, r6, #2
 8021d78:	e7d3      	b.n	8021d22 <__gethex+0xee>
 8021d7a:	f04f 0901 	mov.w	r9, #1
 8021d7e:	e7fa      	b.n	8021d76 <__gethex+0x142>
 8021d80:	230a      	movs	r3, #10
 8021d82:	fb03 0202 	mla	r2, r3, r2, r0
 8021d86:	3a10      	subs	r2, #16
 8021d88:	e7d4      	b.n	8021d34 <__gethex+0x100>
 8021d8a:	4631      	mov	r1, r6
 8021d8c:	e7df      	b.n	8021d4e <__gethex+0x11a>
 8021d8e:	1bf3      	subs	r3, r6, r7
 8021d90:	3b01      	subs	r3, #1
 8021d92:	4621      	mov	r1, r4
 8021d94:	2b07      	cmp	r3, #7
 8021d96:	dc0b      	bgt.n	8021db0 <__gethex+0x17c>
 8021d98:	ee18 0a10 	vmov	r0, s16
 8021d9c:	f000 fa96 	bl	80222cc <_Balloc>
 8021da0:	4604      	mov	r4, r0
 8021da2:	b940      	cbnz	r0, 8021db6 <__gethex+0x182>
 8021da4:	4b65      	ldr	r3, [pc, #404]	; (8021f3c <__gethex+0x308>)
 8021da6:	4602      	mov	r2, r0
 8021da8:	21de      	movs	r1, #222	; 0xde
 8021daa:	4865      	ldr	r0, [pc, #404]	; (8021f40 <__gethex+0x30c>)
 8021dac:	f001 f8ce 	bl	8022f4c <__assert_func>
 8021db0:	3101      	adds	r1, #1
 8021db2:	105b      	asrs	r3, r3, #1
 8021db4:	e7ee      	b.n	8021d94 <__gethex+0x160>
 8021db6:	f100 0914 	add.w	r9, r0, #20
 8021dba:	f04f 0b00 	mov.w	fp, #0
 8021dbe:	f1ca 0301 	rsb	r3, sl, #1
 8021dc2:	f8cd 9008 	str.w	r9, [sp, #8]
 8021dc6:	f8cd b000 	str.w	fp, [sp]
 8021dca:	9306      	str	r3, [sp, #24]
 8021dcc:	42b7      	cmp	r7, r6
 8021dce:	d340      	bcc.n	8021e52 <__gethex+0x21e>
 8021dd0:	9802      	ldr	r0, [sp, #8]
 8021dd2:	9b00      	ldr	r3, [sp, #0]
 8021dd4:	f840 3b04 	str.w	r3, [r0], #4
 8021dd8:	eba0 0009 	sub.w	r0, r0, r9
 8021ddc:	1080      	asrs	r0, r0, #2
 8021dde:	0146      	lsls	r6, r0, #5
 8021de0:	6120      	str	r0, [r4, #16]
 8021de2:	4618      	mov	r0, r3
 8021de4:	f000 fb68 	bl	80224b8 <__hi0bits>
 8021de8:	1a30      	subs	r0, r6, r0
 8021dea:	f8d8 6000 	ldr.w	r6, [r8]
 8021dee:	42b0      	cmp	r0, r6
 8021df0:	dd63      	ble.n	8021eba <__gethex+0x286>
 8021df2:	1b87      	subs	r7, r0, r6
 8021df4:	4639      	mov	r1, r7
 8021df6:	4620      	mov	r0, r4
 8021df8:	f000 ff02 	bl	8022c00 <__any_on>
 8021dfc:	4682      	mov	sl, r0
 8021dfe:	b1a8      	cbz	r0, 8021e2c <__gethex+0x1f8>
 8021e00:	1e7b      	subs	r3, r7, #1
 8021e02:	1159      	asrs	r1, r3, #5
 8021e04:	f003 021f 	and.w	r2, r3, #31
 8021e08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8021e0c:	f04f 0a01 	mov.w	sl, #1
 8021e10:	fa0a f202 	lsl.w	r2, sl, r2
 8021e14:	420a      	tst	r2, r1
 8021e16:	d009      	beq.n	8021e2c <__gethex+0x1f8>
 8021e18:	4553      	cmp	r3, sl
 8021e1a:	dd05      	ble.n	8021e28 <__gethex+0x1f4>
 8021e1c:	1eb9      	subs	r1, r7, #2
 8021e1e:	4620      	mov	r0, r4
 8021e20:	f000 feee 	bl	8022c00 <__any_on>
 8021e24:	2800      	cmp	r0, #0
 8021e26:	d145      	bne.n	8021eb4 <__gethex+0x280>
 8021e28:	f04f 0a02 	mov.w	sl, #2
 8021e2c:	4639      	mov	r1, r7
 8021e2e:	4620      	mov	r0, r4
 8021e30:	f7ff fe98 	bl	8021b64 <rshift>
 8021e34:	443d      	add	r5, r7
 8021e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021e3a:	42ab      	cmp	r3, r5
 8021e3c:	da4c      	bge.n	8021ed8 <__gethex+0x2a4>
 8021e3e:	ee18 0a10 	vmov	r0, s16
 8021e42:	4621      	mov	r1, r4
 8021e44:	f000 fa82 	bl	802234c <_Bfree>
 8021e48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e4a:	2300      	movs	r3, #0
 8021e4c:	6013      	str	r3, [r2, #0]
 8021e4e:	27a3      	movs	r7, #163	; 0xa3
 8021e50:	e785      	b.n	8021d5e <__gethex+0x12a>
 8021e52:	1e73      	subs	r3, r6, #1
 8021e54:	9a05      	ldr	r2, [sp, #20]
 8021e56:	9303      	str	r3, [sp, #12]
 8021e58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8021e5c:	4293      	cmp	r3, r2
 8021e5e:	d019      	beq.n	8021e94 <__gethex+0x260>
 8021e60:	f1bb 0f20 	cmp.w	fp, #32
 8021e64:	d107      	bne.n	8021e76 <__gethex+0x242>
 8021e66:	9b02      	ldr	r3, [sp, #8]
 8021e68:	9a00      	ldr	r2, [sp, #0]
 8021e6a:	f843 2b04 	str.w	r2, [r3], #4
 8021e6e:	9302      	str	r3, [sp, #8]
 8021e70:	2300      	movs	r3, #0
 8021e72:	9300      	str	r3, [sp, #0]
 8021e74:	469b      	mov	fp, r3
 8021e76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8021e7a:	f7ff fec5 	bl	8021c08 <__hexdig_fun>
 8021e7e:	9b00      	ldr	r3, [sp, #0]
 8021e80:	f000 000f 	and.w	r0, r0, #15
 8021e84:	fa00 f00b 	lsl.w	r0, r0, fp
 8021e88:	4303      	orrs	r3, r0
 8021e8a:	9300      	str	r3, [sp, #0]
 8021e8c:	f10b 0b04 	add.w	fp, fp, #4
 8021e90:	9b03      	ldr	r3, [sp, #12]
 8021e92:	e00d      	b.n	8021eb0 <__gethex+0x27c>
 8021e94:	9b03      	ldr	r3, [sp, #12]
 8021e96:	9a06      	ldr	r2, [sp, #24]
 8021e98:	4413      	add	r3, r2
 8021e9a:	42bb      	cmp	r3, r7
 8021e9c:	d3e0      	bcc.n	8021e60 <__gethex+0x22c>
 8021e9e:	4618      	mov	r0, r3
 8021ea0:	9901      	ldr	r1, [sp, #4]
 8021ea2:	9307      	str	r3, [sp, #28]
 8021ea4:	4652      	mov	r2, sl
 8021ea6:	f7fe f809 	bl	801febc <strncmp>
 8021eaa:	9b07      	ldr	r3, [sp, #28]
 8021eac:	2800      	cmp	r0, #0
 8021eae:	d1d7      	bne.n	8021e60 <__gethex+0x22c>
 8021eb0:	461e      	mov	r6, r3
 8021eb2:	e78b      	b.n	8021dcc <__gethex+0x198>
 8021eb4:	f04f 0a03 	mov.w	sl, #3
 8021eb8:	e7b8      	b.n	8021e2c <__gethex+0x1f8>
 8021eba:	da0a      	bge.n	8021ed2 <__gethex+0x29e>
 8021ebc:	1a37      	subs	r7, r6, r0
 8021ebe:	4621      	mov	r1, r4
 8021ec0:	ee18 0a10 	vmov	r0, s16
 8021ec4:	463a      	mov	r2, r7
 8021ec6:	f000 fc5d 	bl	8022784 <__lshift>
 8021eca:	1bed      	subs	r5, r5, r7
 8021ecc:	4604      	mov	r4, r0
 8021ece:	f100 0914 	add.w	r9, r0, #20
 8021ed2:	f04f 0a00 	mov.w	sl, #0
 8021ed6:	e7ae      	b.n	8021e36 <__gethex+0x202>
 8021ed8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021edc:	42a8      	cmp	r0, r5
 8021ede:	dd72      	ble.n	8021fc6 <__gethex+0x392>
 8021ee0:	1b45      	subs	r5, r0, r5
 8021ee2:	42ae      	cmp	r6, r5
 8021ee4:	dc36      	bgt.n	8021f54 <__gethex+0x320>
 8021ee6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021eea:	2b02      	cmp	r3, #2
 8021eec:	d02a      	beq.n	8021f44 <__gethex+0x310>
 8021eee:	2b03      	cmp	r3, #3
 8021ef0:	d02c      	beq.n	8021f4c <__gethex+0x318>
 8021ef2:	2b01      	cmp	r3, #1
 8021ef4:	d115      	bne.n	8021f22 <__gethex+0x2ee>
 8021ef6:	42ae      	cmp	r6, r5
 8021ef8:	d113      	bne.n	8021f22 <__gethex+0x2ee>
 8021efa:	2e01      	cmp	r6, #1
 8021efc:	d10b      	bne.n	8021f16 <__gethex+0x2e2>
 8021efe:	9a04      	ldr	r2, [sp, #16]
 8021f00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021f04:	6013      	str	r3, [r2, #0]
 8021f06:	2301      	movs	r3, #1
 8021f08:	6123      	str	r3, [r4, #16]
 8021f0a:	f8c9 3000 	str.w	r3, [r9]
 8021f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021f10:	2762      	movs	r7, #98	; 0x62
 8021f12:	601c      	str	r4, [r3, #0]
 8021f14:	e723      	b.n	8021d5e <__gethex+0x12a>
 8021f16:	1e71      	subs	r1, r6, #1
 8021f18:	4620      	mov	r0, r4
 8021f1a:	f000 fe71 	bl	8022c00 <__any_on>
 8021f1e:	2800      	cmp	r0, #0
 8021f20:	d1ed      	bne.n	8021efe <__gethex+0x2ca>
 8021f22:	ee18 0a10 	vmov	r0, s16
 8021f26:	4621      	mov	r1, r4
 8021f28:	f000 fa10 	bl	802234c <_Bfree>
 8021f2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021f2e:	2300      	movs	r3, #0
 8021f30:	6013      	str	r3, [r2, #0]
 8021f32:	2750      	movs	r7, #80	; 0x50
 8021f34:	e713      	b.n	8021d5e <__gethex+0x12a>
 8021f36:	bf00      	nop
 8021f38:	080242c8 	.word	0x080242c8
 8021f3c:	0802424b 	.word	0x0802424b
 8021f40:	0802425c 	.word	0x0802425c
 8021f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021f46:	2b00      	cmp	r3, #0
 8021f48:	d1eb      	bne.n	8021f22 <__gethex+0x2ee>
 8021f4a:	e7d8      	b.n	8021efe <__gethex+0x2ca>
 8021f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021f4e:	2b00      	cmp	r3, #0
 8021f50:	d1d5      	bne.n	8021efe <__gethex+0x2ca>
 8021f52:	e7e6      	b.n	8021f22 <__gethex+0x2ee>
 8021f54:	1e6f      	subs	r7, r5, #1
 8021f56:	f1ba 0f00 	cmp.w	sl, #0
 8021f5a:	d131      	bne.n	8021fc0 <__gethex+0x38c>
 8021f5c:	b127      	cbz	r7, 8021f68 <__gethex+0x334>
 8021f5e:	4639      	mov	r1, r7
 8021f60:	4620      	mov	r0, r4
 8021f62:	f000 fe4d 	bl	8022c00 <__any_on>
 8021f66:	4682      	mov	sl, r0
 8021f68:	117b      	asrs	r3, r7, #5
 8021f6a:	2101      	movs	r1, #1
 8021f6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8021f70:	f007 071f 	and.w	r7, r7, #31
 8021f74:	fa01 f707 	lsl.w	r7, r1, r7
 8021f78:	421f      	tst	r7, r3
 8021f7a:	4629      	mov	r1, r5
 8021f7c:	4620      	mov	r0, r4
 8021f7e:	bf18      	it	ne
 8021f80:	f04a 0a02 	orrne.w	sl, sl, #2
 8021f84:	1b76      	subs	r6, r6, r5
 8021f86:	f7ff fded 	bl	8021b64 <rshift>
 8021f8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021f8e:	2702      	movs	r7, #2
 8021f90:	f1ba 0f00 	cmp.w	sl, #0
 8021f94:	d048      	beq.n	8022028 <__gethex+0x3f4>
 8021f96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021f9a:	2b02      	cmp	r3, #2
 8021f9c:	d015      	beq.n	8021fca <__gethex+0x396>
 8021f9e:	2b03      	cmp	r3, #3
 8021fa0:	d017      	beq.n	8021fd2 <__gethex+0x39e>
 8021fa2:	2b01      	cmp	r3, #1
 8021fa4:	d109      	bne.n	8021fba <__gethex+0x386>
 8021fa6:	f01a 0f02 	tst.w	sl, #2
 8021faa:	d006      	beq.n	8021fba <__gethex+0x386>
 8021fac:	f8d9 0000 	ldr.w	r0, [r9]
 8021fb0:	ea4a 0a00 	orr.w	sl, sl, r0
 8021fb4:	f01a 0f01 	tst.w	sl, #1
 8021fb8:	d10e      	bne.n	8021fd8 <__gethex+0x3a4>
 8021fba:	f047 0710 	orr.w	r7, r7, #16
 8021fbe:	e033      	b.n	8022028 <__gethex+0x3f4>
 8021fc0:	f04f 0a01 	mov.w	sl, #1
 8021fc4:	e7d0      	b.n	8021f68 <__gethex+0x334>
 8021fc6:	2701      	movs	r7, #1
 8021fc8:	e7e2      	b.n	8021f90 <__gethex+0x35c>
 8021fca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021fcc:	f1c3 0301 	rsb	r3, r3, #1
 8021fd0:	9315      	str	r3, [sp, #84]	; 0x54
 8021fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	d0f0      	beq.n	8021fba <__gethex+0x386>
 8021fd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021fdc:	f104 0314 	add.w	r3, r4, #20
 8021fe0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021fe4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021fe8:	f04f 0c00 	mov.w	ip, #0
 8021fec:	4618      	mov	r0, r3
 8021fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8021ff2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021ff6:	d01c      	beq.n	8022032 <__gethex+0x3fe>
 8021ff8:	3201      	adds	r2, #1
 8021ffa:	6002      	str	r2, [r0, #0]
 8021ffc:	2f02      	cmp	r7, #2
 8021ffe:	f104 0314 	add.w	r3, r4, #20
 8022002:	d13f      	bne.n	8022084 <__gethex+0x450>
 8022004:	f8d8 2000 	ldr.w	r2, [r8]
 8022008:	3a01      	subs	r2, #1
 802200a:	42b2      	cmp	r2, r6
 802200c:	d10a      	bne.n	8022024 <__gethex+0x3f0>
 802200e:	1171      	asrs	r1, r6, #5
 8022010:	2201      	movs	r2, #1
 8022012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022016:	f006 061f 	and.w	r6, r6, #31
 802201a:	fa02 f606 	lsl.w	r6, r2, r6
 802201e:	421e      	tst	r6, r3
 8022020:	bf18      	it	ne
 8022022:	4617      	movne	r7, r2
 8022024:	f047 0720 	orr.w	r7, r7, #32
 8022028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802202a:	601c      	str	r4, [r3, #0]
 802202c:	9b04      	ldr	r3, [sp, #16]
 802202e:	601d      	str	r5, [r3, #0]
 8022030:	e695      	b.n	8021d5e <__gethex+0x12a>
 8022032:	4299      	cmp	r1, r3
 8022034:	f843 cc04 	str.w	ip, [r3, #-4]
 8022038:	d8d8      	bhi.n	8021fec <__gethex+0x3b8>
 802203a:	68a3      	ldr	r3, [r4, #8]
 802203c:	459b      	cmp	fp, r3
 802203e:	db19      	blt.n	8022074 <__gethex+0x440>
 8022040:	6861      	ldr	r1, [r4, #4]
 8022042:	ee18 0a10 	vmov	r0, s16
 8022046:	3101      	adds	r1, #1
 8022048:	f000 f940 	bl	80222cc <_Balloc>
 802204c:	4681      	mov	r9, r0
 802204e:	b918      	cbnz	r0, 8022058 <__gethex+0x424>
 8022050:	4b1a      	ldr	r3, [pc, #104]	; (80220bc <__gethex+0x488>)
 8022052:	4602      	mov	r2, r0
 8022054:	2184      	movs	r1, #132	; 0x84
 8022056:	e6a8      	b.n	8021daa <__gethex+0x176>
 8022058:	6922      	ldr	r2, [r4, #16]
 802205a:	3202      	adds	r2, #2
 802205c:	f104 010c 	add.w	r1, r4, #12
 8022060:	0092      	lsls	r2, r2, #2
 8022062:	300c      	adds	r0, #12
 8022064:	f7fd f956 	bl	801f314 <memcpy>
 8022068:	4621      	mov	r1, r4
 802206a:	ee18 0a10 	vmov	r0, s16
 802206e:	f000 f96d 	bl	802234c <_Bfree>
 8022072:	464c      	mov	r4, r9
 8022074:	6923      	ldr	r3, [r4, #16]
 8022076:	1c5a      	adds	r2, r3, #1
 8022078:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802207c:	6122      	str	r2, [r4, #16]
 802207e:	2201      	movs	r2, #1
 8022080:	615a      	str	r2, [r3, #20]
 8022082:	e7bb      	b.n	8021ffc <__gethex+0x3c8>
 8022084:	6922      	ldr	r2, [r4, #16]
 8022086:	455a      	cmp	r2, fp
 8022088:	dd0b      	ble.n	80220a2 <__gethex+0x46e>
 802208a:	2101      	movs	r1, #1
 802208c:	4620      	mov	r0, r4
 802208e:	f7ff fd69 	bl	8021b64 <rshift>
 8022092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022096:	3501      	adds	r5, #1
 8022098:	42ab      	cmp	r3, r5
 802209a:	f6ff aed0 	blt.w	8021e3e <__gethex+0x20a>
 802209e:	2701      	movs	r7, #1
 80220a0:	e7c0      	b.n	8022024 <__gethex+0x3f0>
 80220a2:	f016 061f 	ands.w	r6, r6, #31
 80220a6:	d0fa      	beq.n	802209e <__gethex+0x46a>
 80220a8:	449a      	add	sl, r3
 80220aa:	f1c6 0620 	rsb	r6, r6, #32
 80220ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80220b2:	f000 fa01 	bl	80224b8 <__hi0bits>
 80220b6:	42b0      	cmp	r0, r6
 80220b8:	dbe7      	blt.n	802208a <__gethex+0x456>
 80220ba:	e7f0      	b.n	802209e <__gethex+0x46a>
 80220bc:	0802424b 	.word	0x0802424b

080220c0 <L_shift>:
 80220c0:	f1c2 0208 	rsb	r2, r2, #8
 80220c4:	0092      	lsls	r2, r2, #2
 80220c6:	b570      	push	{r4, r5, r6, lr}
 80220c8:	f1c2 0620 	rsb	r6, r2, #32
 80220cc:	6843      	ldr	r3, [r0, #4]
 80220ce:	6804      	ldr	r4, [r0, #0]
 80220d0:	fa03 f506 	lsl.w	r5, r3, r6
 80220d4:	432c      	orrs	r4, r5
 80220d6:	40d3      	lsrs	r3, r2
 80220d8:	6004      	str	r4, [r0, #0]
 80220da:	f840 3f04 	str.w	r3, [r0, #4]!
 80220de:	4288      	cmp	r0, r1
 80220e0:	d3f4      	bcc.n	80220cc <L_shift+0xc>
 80220e2:	bd70      	pop	{r4, r5, r6, pc}

080220e4 <__match>:
 80220e4:	b530      	push	{r4, r5, lr}
 80220e6:	6803      	ldr	r3, [r0, #0]
 80220e8:	3301      	adds	r3, #1
 80220ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80220ee:	b914      	cbnz	r4, 80220f6 <__match+0x12>
 80220f0:	6003      	str	r3, [r0, #0]
 80220f2:	2001      	movs	r0, #1
 80220f4:	bd30      	pop	{r4, r5, pc}
 80220f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80220fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80220fe:	2d19      	cmp	r5, #25
 8022100:	bf98      	it	ls
 8022102:	3220      	addls	r2, #32
 8022104:	42a2      	cmp	r2, r4
 8022106:	d0f0      	beq.n	80220ea <__match+0x6>
 8022108:	2000      	movs	r0, #0
 802210a:	e7f3      	b.n	80220f4 <__match+0x10>

0802210c <__hexnan>:
 802210c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022110:	680b      	ldr	r3, [r1, #0]
 8022112:	6801      	ldr	r1, [r0, #0]
 8022114:	115e      	asrs	r6, r3, #5
 8022116:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802211a:	f013 031f 	ands.w	r3, r3, #31
 802211e:	b087      	sub	sp, #28
 8022120:	bf18      	it	ne
 8022122:	3604      	addne	r6, #4
 8022124:	2500      	movs	r5, #0
 8022126:	1f37      	subs	r7, r6, #4
 8022128:	4682      	mov	sl, r0
 802212a:	4690      	mov	r8, r2
 802212c:	9301      	str	r3, [sp, #4]
 802212e:	f846 5c04 	str.w	r5, [r6, #-4]
 8022132:	46b9      	mov	r9, r7
 8022134:	463c      	mov	r4, r7
 8022136:	9502      	str	r5, [sp, #8]
 8022138:	46ab      	mov	fp, r5
 802213a:	784a      	ldrb	r2, [r1, #1]
 802213c:	1c4b      	adds	r3, r1, #1
 802213e:	9303      	str	r3, [sp, #12]
 8022140:	b342      	cbz	r2, 8022194 <__hexnan+0x88>
 8022142:	4610      	mov	r0, r2
 8022144:	9105      	str	r1, [sp, #20]
 8022146:	9204      	str	r2, [sp, #16]
 8022148:	f7ff fd5e 	bl	8021c08 <__hexdig_fun>
 802214c:	2800      	cmp	r0, #0
 802214e:	d14f      	bne.n	80221f0 <__hexnan+0xe4>
 8022150:	9a04      	ldr	r2, [sp, #16]
 8022152:	9905      	ldr	r1, [sp, #20]
 8022154:	2a20      	cmp	r2, #32
 8022156:	d818      	bhi.n	802218a <__hexnan+0x7e>
 8022158:	9b02      	ldr	r3, [sp, #8]
 802215a:	459b      	cmp	fp, r3
 802215c:	dd13      	ble.n	8022186 <__hexnan+0x7a>
 802215e:	454c      	cmp	r4, r9
 8022160:	d206      	bcs.n	8022170 <__hexnan+0x64>
 8022162:	2d07      	cmp	r5, #7
 8022164:	dc04      	bgt.n	8022170 <__hexnan+0x64>
 8022166:	462a      	mov	r2, r5
 8022168:	4649      	mov	r1, r9
 802216a:	4620      	mov	r0, r4
 802216c:	f7ff ffa8 	bl	80220c0 <L_shift>
 8022170:	4544      	cmp	r4, r8
 8022172:	d950      	bls.n	8022216 <__hexnan+0x10a>
 8022174:	2300      	movs	r3, #0
 8022176:	f1a4 0904 	sub.w	r9, r4, #4
 802217a:	f844 3c04 	str.w	r3, [r4, #-4]
 802217e:	f8cd b008 	str.w	fp, [sp, #8]
 8022182:	464c      	mov	r4, r9
 8022184:	461d      	mov	r5, r3
 8022186:	9903      	ldr	r1, [sp, #12]
 8022188:	e7d7      	b.n	802213a <__hexnan+0x2e>
 802218a:	2a29      	cmp	r2, #41	; 0x29
 802218c:	d156      	bne.n	802223c <__hexnan+0x130>
 802218e:	3102      	adds	r1, #2
 8022190:	f8ca 1000 	str.w	r1, [sl]
 8022194:	f1bb 0f00 	cmp.w	fp, #0
 8022198:	d050      	beq.n	802223c <__hexnan+0x130>
 802219a:	454c      	cmp	r4, r9
 802219c:	d206      	bcs.n	80221ac <__hexnan+0xa0>
 802219e:	2d07      	cmp	r5, #7
 80221a0:	dc04      	bgt.n	80221ac <__hexnan+0xa0>
 80221a2:	462a      	mov	r2, r5
 80221a4:	4649      	mov	r1, r9
 80221a6:	4620      	mov	r0, r4
 80221a8:	f7ff ff8a 	bl	80220c0 <L_shift>
 80221ac:	4544      	cmp	r4, r8
 80221ae:	d934      	bls.n	802221a <__hexnan+0x10e>
 80221b0:	f1a8 0204 	sub.w	r2, r8, #4
 80221b4:	4623      	mov	r3, r4
 80221b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80221ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80221be:	429f      	cmp	r7, r3
 80221c0:	d2f9      	bcs.n	80221b6 <__hexnan+0xaa>
 80221c2:	1b3b      	subs	r3, r7, r4
 80221c4:	f023 0303 	bic.w	r3, r3, #3
 80221c8:	3304      	adds	r3, #4
 80221ca:	3401      	adds	r4, #1
 80221cc:	3e03      	subs	r6, #3
 80221ce:	42b4      	cmp	r4, r6
 80221d0:	bf88      	it	hi
 80221d2:	2304      	movhi	r3, #4
 80221d4:	4443      	add	r3, r8
 80221d6:	2200      	movs	r2, #0
 80221d8:	f843 2b04 	str.w	r2, [r3], #4
 80221dc:	429f      	cmp	r7, r3
 80221de:	d2fb      	bcs.n	80221d8 <__hexnan+0xcc>
 80221e0:	683b      	ldr	r3, [r7, #0]
 80221e2:	b91b      	cbnz	r3, 80221ec <__hexnan+0xe0>
 80221e4:	4547      	cmp	r7, r8
 80221e6:	d127      	bne.n	8022238 <__hexnan+0x12c>
 80221e8:	2301      	movs	r3, #1
 80221ea:	603b      	str	r3, [r7, #0]
 80221ec:	2005      	movs	r0, #5
 80221ee:	e026      	b.n	802223e <__hexnan+0x132>
 80221f0:	3501      	adds	r5, #1
 80221f2:	2d08      	cmp	r5, #8
 80221f4:	f10b 0b01 	add.w	fp, fp, #1
 80221f8:	dd06      	ble.n	8022208 <__hexnan+0xfc>
 80221fa:	4544      	cmp	r4, r8
 80221fc:	d9c3      	bls.n	8022186 <__hexnan+0x7a>
 80221fe:	2300      	movs	r3, #0
 8022200:	f844 3c04 	str.w	r3, [r4, #-4]
 8022204:	2501      	movs	r5, #1
 8022206:	3c04      	subs	r4, #4
 8022208:	6822      	ldr	r2, [r4, #0]
 802220a:	f000 000f 	and.w	r0, r0, #15
 802220e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8022212:	6022      	str	r2, [r4, #0]
 8022214:	e7b7      	b.n	8022186 <__hexnan+0x7a>
 8022216:	2508      	movs	r5, #8
 8022218:	e7b5      	b.n	8022186 <__hexnan+0x7a>
 802221a:	9b01      	ldr	r3, [sp, #4]
 802221c:	2b00      	cmp	r3, #0
 802221e:	d0df      	beq.n	80221e0 <__hexnan+0xd4>
 8022220:	f04f 32ff 	mov.w	r2, #4294967295
 8022224:	f1c3 0320 	rsb	r3, r3, #32
 8022228:	fa22 f303 	lsr.w	r3, r2, r3
 802222c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8022230:	401a      	ands	r2, r3
 8022232:	f846 2c04 	str.w	r2, [r6, #-4]
 8022236:	e7d3      	b.n	80221e0 <__hexnan+0xd4>
 8022238:	3f04      	subs	r7, #4
 802223a:	e7d1      	b.n	80221e0 <__hexnan+0xd4>
 802223c:	2004      	movs	r0, #4
 802223e:	b007      	add	sp, #28
 8022240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022244 <_isatty_r>:
 8022244:	b538      	push	{r3, r4, r5, lr}
 8022246:	4d06      	ldr	r5, [pc, #24]	; (8022260 <_isatty_r+0x1c>)
 8022248:	2300      	movs	r3, #0
 802224a:	4604      	mov	r4, r0
 802224c:	4608      	mov	r0, r1
 802224e:	602b      	str	r3, [r5, #0]
 8022250:	f7fc fdd4 	bl	801edfc <_isatty>
 8022254:	1c43      	adds	r3, r0, #1
 8022256:	d102      	bne.n	802225e <_isatty_r+0x1a>
 8022258:	682b      	ldr	r3, [r5, #0]
 802225a:	b103      	cbz	r3, 802225e <_isatty_r+0x1a>
 802225c:	6023      	str	r3, [r4, #0]
 802225e:	bd38      	pop	{r3, r4, r5, pc}
 8022260:	2001d46c 	.word	0x2001d46c

08022264 <_localeconv_r>:
 8022264:	4800      	ldr	r0, [pc, #0]	; (8022268 <_localeconv_r+0x4>)
 8022266:	4770      	bx	lr
 8022268:	20000410 	.word	0x20000410

0802226c <_lseek_r>:
 802226c:	b538      	push	{r3, r4, r5, lr}
 802226e:	4d07      	ldr	r5, [pc, #28]	; (802228c <_lseek_r+0x20>)
 8022270:	4604      	mov	r4, r0
 8022272:	4608      	mov	r0, r1
 8022274:	4611      	mov	r1, r2
 8022276:	2200      	movs	r2, #0
 8022278:	602a      	str	r2, [r5, #0]
 802227a:	461a      	mov	r2, r3
 802227c:	f7fc fdc9 	bl	801ee12 <_lseek>
 8022280:	1c43      	adds	r3, r0, #1
 8022282:	d102      	bne.n	802228a <_lseek_r+0x1e>
 8022284:	682b      	ldr	r3, [r5, #0]
 8022286:	b103      	cbz	r3, 802228a <_lseek_r+0x1e>
 8022288:	6023      	str	r3, [r4, #0]
 802228a:	bd38      	pop	{r3, r4, r5, pc}
 802228c:	2001d46c 	.word	0x2001d46c

08022290 <__ascii_mbtowc>:
 8022290:	b082      	sub	sp, #8
 8022292:	b901      	cbnz	r1, 8022296 <__ascii_mbtowc+0x6>
 8022294:	a901      	add	r1, sp, #4
 8022296:	b142      	cbz	r2, 80222aa <__ascii_mbtowc+0x1a>
 8022298:	b14b      	cbz	r3, 80222ae <__ascii_mbtowc+0x1e>
 802229a:	7813      	ldrb	r3, [r2, #0]
 802229c:	600b      	str	r3, [r1, #0]
 802229e:	7812      	ldrb	r2, [r2, #0]
 80222a0:	1e10      	subs	r0, r2, #0
 80222a2:	bf18      	it	ne
 80222a4:	2001      	movne	r0, #1
 80222a6:	b002      	add	sp, #8
 80222a8:	4770      	bx	lr
 80222aa:	4610      	mov	r0, r2
 80222ac:	e7fb      	b.n	80222a6 <__ascii_mbtowc+0x16>
 80222ae:	f06f 0001 	mvn.w	r0, #1
 80222b2:	e7f8      	b.n	80222a6 <__ascii_mbtowc+0x16>

080222b4 <__malloc_lock>:
 80222b4:	4801      	ldr	r0, [pc, #4]	; (80222bc <__malloc_lock+0x8>)
 80222b6:	f7fc bfb6 	b.w	801f226 <__retarget_lock_acquire_recursive>
 80222ba:	bf00      	nop
 80222bc:	2001d460 	.word	0x2001d460

080222c0 <__malloc_unlock>:
 80222c0:	4801      	ldr	r0, [pc, #4]	; (80222c8 <__malloc_unlock+0x8>)
 80222c2:	f7fc bfb1 	b.w	801f228 <__retarget_lock_release_recursive>
 80222c6:	bf00      	nop
 80222c8:	2001d460 	.word	0x2001d460

080222cc <_Balloc>:
 80222cc:	b570      	push	{r4, r5, r6, lr}
 80222ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80222d0:	4604      	mov	r4, r0
 80222d2:	460d      	mov	r5, r1
 80222d4:	b976      	cbnz	r6, 80222f4 <_Balloc+0x28>
 80222d6:	2010      	movs	r0, #16
 80222d8:	f7fd f80c 	bl	801f2f4 <malloc>
 80222dc:	4602      	mov	r2, r0
 80222de:	6260      	str	r0, [r4, #36]	; 0x24
 80222e0:	b920      	cbnz	r0, 80222ec <_Balloc+0x20>
 80222e2:	4b18      	ldr	r3, [pc, #96]	; (8022344 <_Balloc+0x78>)
 80222e4:	4818      	ldr	r0, [pc, #96]	; (8022348 <_Balloc+0x7c>)
 80222e6:	2166      	movs	r1, #102	; 0x66
 80222e8:	f000 fe30 	bl	8022f4c <__assert_func>
 80222ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80222f0:	6006      	str	r6, [r0, #0]
 80222f2:	60c6      	str	r6, [r0, #12]
 80222f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80222f6:	68f3      	ldr	r3, [r6, #12]
 80222f8:	b183      	cbz	r3, 802231c <_Balloc+0x50>
 80222fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80222fc:	68db      	ldr	r3, [r3, #12]
 80222fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8022302:	b9b8      	cbnz	r0, 8022334 <_Balloc+0x68>
 8022304:	2101      	movs	r1, #1
 8022306:	fa01 f605 	lsl.w	r6, r1, r5
 802230a:	1d72      	adds	r2, r6, #5
 802230c:	0092      	lsls	r2, r2, #2
 802230e:	4620      	mov	r0, r4
 8022310:	f7fd f830 	bl	801f374 <_calloc_r>
 8022314:	b160      	cbz	r0, 8022330 <_Balloc+0x64>
 8022316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802231a:	e00e      	b.n	802233a <_Balloc+0x6e>
 802231c:	2221      	movs	r2, #33	; 0x21
 802231e:	2104      	movs	r1, #4
 8022320:	4620      	mov	r0, r4
 8022322:	f7fd f827 	bl	801f374 <_calloc_r>
 8022326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022328:	60f0      	str	r0, [r6, #12]
 802232a:	68db      	ldr	r3, [r3, #12]
 802232c:	2b00      	cmp	r3, #0
 802232e:	d1e4      	bne.n	80222fa <_Balloc+0x2e>
 8022330:	2000      	movs	r0, #0
 8022332:	bd70      	pop	{r4, r5, r6, pc}
 8022334:	6802      	ldr	r2, [r0, #0]
 8022336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802233a:	2300      	movs	r3, #0
 802233c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022340:	e7f7      	b.n	8022332 <_Balloc+0x66>
 8022342:	bf00      	nop
 8022344:	080241d5 	.word	0x080241d5
 8022348:	080242dc 	.word	0x080242dc

0802234c <_Bfree>:
 802234c:	b570      	push	{r4, r5, r6, lr}
 802234e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022350:	4605      	mov	r5, r0
 8022352:	460c      	mov	r4, r1
 8022354:	b976      	cbnz	r6, 8022374 <_Bfree+0x28>
 8022356:	2010      	movs	r0, #16
 8022358:	f7fc ffcc 	bl	801f2f4 <malloc>
 802235c:	4602      	mov	r2, r0
 802235e:	6268      	str	r0, [r5, #36]	; 0x24
 8022360:	b920      	cbnz	r0, 802236c <_Bfree+0x20>
 8022362:	4b09      	ldr	r3, [pc, #36]	; (8022388 <_Bfree+0x3c>)
 8022364:	4809      	ldr	r0, [pc, #36]	; (802238c <_Bfree+0x40>)
 8022366:	218a      	movs	r1, #138	; 0x8a
 8022368:	f000 fdf0 	bl	8022f4c <__assert_func>
 802236c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022370:	6006      	str	r6, [r0, #0]
 8022372:	60c6      	str	r6, [r0, #12]
 8022374:	b13c      	cbz	r4, 8022386 <_Bfree+0x3a>
 8022376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022378:	6862      	ldr	r2, [r4, #4]
 802237a:	68db      	ldr	r3, [r3, #12]
 802237c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022380:	6021      	str	r1, [r4, #0]
 8022382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022386:	bd70      	pop	{r4, r5, r6, pc}
 8022388:	080241d5 	.word	0x080241d5
 802238c:	080242dc 	.word	0x080242dc

08022390 <__multadd>:
 8022390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022394:	690e      	ldr	r6, [r1, #16]
 8022396:	4607      	mov	r7, r0
 8022398:	4698      	mov	r8, r3
 802239a:	460c      	mov	r4, r1
 802239c:	f101 0014 	add.w	r0, r1, #20
 80223a0:	2300      	movs	r3, #0
 80223a2:	6805      	ldr	r5, [r0, #0]
 80223a4:	b2a9      	uxth	r1, r5
 80223a6:	fb02 8101 	mla	r1, r2, r1, r8
 80223aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80223ae:	0c2d      	lsrs	r5, r5, #16
 80223b0:	fb02 c505 	mla	r5, r2, r5, ip
 80223b4:	b289      	uxth	r1, r1
 80223b6:	3301      	adds	r3, #1
 80223b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80223bc:	429e      	cmp	r6, r3
 80223be:	f840 1b04 	str.w	r1, [r0], #4
 80223c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80223c6:	dcec      	bgt.n	80223a2 <__multadd+0x12>
 80223c8:	f1b8 0f00 	cmp.w	r8, #0
 80223cc:	d022      	beq.n	8022414 <__multadd+0x84>
 80223ce:	68a3      	ldr	r3, [r4, #8]
 80223d0:	42b3      	cmp	r3, r6
 80223d2:	dc19      	bgt.n	8022408 <__multadd+0x78>
 80223d4:	6861      	ldr	r1, [r4, #4]
 80223d6:	4638      	mov	r0, r7
 80223d8:	3101      	adds	r1, #1
 80223da:	f7ff ff77 	bl	80222cc <_Balloc>
 80223de:	4605      	mov	r5, r0
 80223e0:	b928      	cbnz	r0, 80223ee <__multadd+0x5e>
 80223e2:	4602      	mov	r2, r0
 80223e4:	4b0d      	ldr	r3, [pc, #52]	; (802241c <__multadd+0x8c>)
 80223e6:	480e      	ldr	r0, [pc, #56]	; (8022420 <__multadd+0x90>)
 80223e8:	21b5      	movs	r1, #181	; 0xb5
 80223ea:	f000 fdaf 	bl	8022f4c <__assert_func>
 80223ee:	6922      	ldr	r2, [r4, #16]
 80223f0:	3202      	adds	r2, #2
 80223f2:	f104 010c 	add.w	r1, r4, #12
 80223f6:	0092      	lsls	r2, r2, #2
 80223f8:	300c      	adds	r0, #12
 80223fa:	f7fc ff8b 	bl	801f314 <memcpy>
 80223fe:	4621      	mov	r1, r4
 8022400:	4638      	mov	r0, r7
 8022402:	f7ff ffa3 	bl	802234c <_Bfree>
 8022406:	462c      	mov	r4, r5
 8022408:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802240c:	3601      	adds	r6, #1
 802240e:	f8c3 8014 	str.w	r8, [r3, #20]
 8022412:	6126      	str	r6, [r4, #16]
 8022414:	4620      	mov	r0, r4
 8022416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802241a:	bf00      	nop
 802241c:	0802424b 	.word	0x0802424b
 8022420:	080242dc 	.word	0x080242dc

08022424 <__s2b>:
 8022424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022428:	460c      	mov	r4, r1
 802242a:	4615      	mov	r5, r2
 802242c:	461f      	mov	r7, r3
 802242e:	2209      	movs	r2, #9
 8022430:	3308      	adds	r3, #8
 8022432:	4606      	mov	r6, r0
 8022434:	fb93 f3f2 	sdiv	r3, r3, r2
 8022438:	2100      	movs	r1, #0
 802243a:	2201      	movs	r2, #1
 802243c:	429a      	cmp	r2, r3
 802243e:	db09      	blt.n	8022454 <__s2b+0x30>
 8022440:	4630      	mov	r0, r6
 8022442:	f7ff ff43 	bl	80222cc <_Balloc>
 8022446:	b940      	cbnz	r0, 802245a <__s2b+0x36>
 8022448:	4602      	mov	r2, r0
 802244a:	4b19      	ldr	r3, [pc, #100]	; (80224b0 <__s2b+0x8c>)
 802244c:	4819      	ldr	r0, [pc, #100]	; (80224b4 <__s2b+0x90>)
 802244e:	21ce      	movs	r1, #206	; 0xce
 8022450:	f000 fd7c 	bl	8022f4c <__assert_func>
 8022454:	0052      	lsls	r2, r2, #1
 8022456:	3101      	adds	r1, #1
 8022458:	e7f0      	b.n	802243c <__s2b+0x18>
 802245a:	9b08      	ldr	r3, [sp, #32]
 802245c:	6143      	str	r3, [r0, #20]
 802245e:	2d09      	cmp	r5, #9
 8022460:	f04f 0301 	mov.w	r3, #1
 8022464:	6103      	str	r3, [r0, #16]
 8022466:	dd16      	ble.n	8022496 <__s2b+0x72>
 8022468:	f104 0909 	add.w	r9, r4, #9
 802246c:	46c8      	mov	r8, r9
 802246e:	442c      	add	r4, r5
 8022470:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022474:	4601      	mov	r1, r0
 8022476:	3b30      	subs	r3, #48	; 0x30
 8022478:	220a      	movs	r2, #10
 802247a:	4630      	mov	r0, r6
 802247c:	f7ff ff88 	bl	8022390 <__multadd>
 8022480:	45a0      	cmp	r8, r4
 8022482:	d1f5      	bne.n	8022470 <__s2b+0x4c>
 8022484:	f1a5 0408 	sub.w	r4, r5, #8
 8022488:	444c      	add	r4, r9
 802248a:	1b2d      	subs	r5, r5, r4
 802248c:	1963      	adds	r3, r4, r5
 802248e:	42bb      	cmp	r3, r7
 8022490:	db04      	blt.n	802249c <__s2b+0x78>
 8022492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022496:	340a      	adds	r4, #10
 8022498:	2509      	movs	r5, #9
 802249a:	e7f6      	b.n	802248a <__s2b+0x66>
 802249c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80224a0:	4601      	mov	r1, r0
 80224a2:	3b30      	subs	r3, #48	; 0x30
 80224a4:	220a      	movs	r2, #10
 80224a6:	4630      	mov	r0, r6
 80224a8:	f7ff ff72 	bl	8022390 <__multadd>
 80224ac:	e7ee      	b.n	802248c <__s2b+0x68>
 80224ae:	bf00      	nop
 80224b0:	0802424b 	.word	0x0802424b
 80224b4:	080242dc 	.word	0x080242dc

080224b8 <__hi0bits>:
 80224b8:	0c03      	lsrs	r3, r0, #16
 80224ba:	041b      	lsls	r3, r3, #16
 80224bc:	b9d3      	cbnz	r3, 80224f4 <__hi0bits+0x3c>
 80224be:	0400      	lsls	r0, r0, #16
 80224c0:	2310      	movs	r3, #16
 80224c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80224c6:	bf04      	itt	eq
 80224c8:	0200      	lsleq	r0, r0, #8
 80224ca:	3308      	addeq	r3, #8
 80224cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80224d0:	bf04      	itt	eq
 80224d2:	0100      	lsleq	r0, r0, #4
 80224d4:	3304      	addeq	r3, #4
 80224d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80224da:	bf04      	itt	eq
 80224dc:	0080      	lsleq	r0, r0, #2
 80224de:	3302      	addeq	r3, #2
 80224e0:	2800      	cmp	r0, #0
 80224e2:	db05      	blt.n	80224f0 <__hi0bits+0x38>
 80224e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80224e8:	f103 0301 	add.w	r3, r3, #1
 80224ec:	bf08      	it	eq
 80224ee:	2320      	moveq	r3, #32
 80224f0:	4618      	mov	r0, r3
 80224f2:	4770      	bx	lr
 80224f4:	2300      	movs	r3, #0
 80224f6:	e7e4      	b.n	80224c2 <__hi0bits+0xa>

080224f8 <__lo0bits>:
 80224f8:	6803      	ldr	r3, [r0, #0]
 80224fa:	f013 0207 	ands.w	r2, r3, #7
 80224fe:	4601      	mov	r1, r0
 8022500:	d00b      	beq.n	802251a <__lo0bits+0x22>
 8022502:	07da      	lsls	r2, r3, #31
 8022504:	d424      	bmi.n	8022550 <__lo0bits+0x58>
 8022506:	0798      	lsls	r0, r3, #30
 8022508:	bf49      	itett	mi
 802250a:	085b      	lsrmi	r3, r3, #1
 802250c:	089b      	lsrpl	r3, r3, #2
 802250e:	2001      	movmi	r0, #1
 8022510:	600b      	strmi	r3, [r1, #0]
 8022512:	bf5c      	itt	pl
 8022514:	600b      	strpl	r3, [r1, #0]
 8022516:	2002      	movpl	r0, #2
 8022518:	4770      	bx	lr
 802251a:	b298      	uxth	r0, r3
 802251c:	b9b0      	cbnz	r0, 802254c <__lo0bits+0x54>
 802251e:	0c1b      	lsrs	r3, r3, #16
 8022520:	2010      	movs	r0, #16
 8022522:	f013 0fff 	tst.w	r3, #255	; 0xff
 8022526:	bf04      	itt	eq
 8022528:	0a1b      	lsreq	r3, r3, #8
 802252a:	3008      	addeq	r0, #8
 802252c:	071a      	lsls	r2, r3, #28
 802252e:	bf04      	itt	eq
 8022530:	091b      	lsreq	r3, r3, #4
 8022532:	3004      	addeq	r0, #4
 8022534:	079a      	lsls	r2, r3, #30
 8022536:	bf04      	itt	eq
 8022538:	089b      	lsreq	r3, r3, #2
 802253a:	3002      	addeq	r0, #2
 802253c:	07da      	lsls	r2, r3, #31
 802253e:	d403      	bmi.n	8022548 <__lo0bits+0x50>
 8022540:	085b      	lsrs	r3, r3, #1
 8022542:	f100 0001 	add.w	r0, r0, #1
 8022546:	d005      	beq.n	8022554 <__lo0bits+0x5c>
 8022548:	600b      	str	r3, [r1, #0]
 802254a:	4770      	bx	lr
 802254c:	4610      	mov	r0, r2
 802254e:	e7e8      	b.n	8022522 <__lo0bits+0x2a>
 8022550:	2000      	movs	r0, #0
 8022552:	4770      	bx	lr
 8022554:	2020      	movs	r0, #32
 8022556:	4770      	bx	lr

08022558 <__i2b>:
 8022558:	b510      	push	{r4, lr}
 802255a:	460c      	mov	r4, r1
 802255c:	2101      	movs	r1, #1
 802255e:	f7ff feb5 	bl	80222cc <_Balloc>
 8022562:	4602      	mov	r2, r0
 8022564:	b928      	cbnz	r0, 8022572 <__i2b+0x1a>
 8022566:	4b05      	ldr	r3, [pc, #20]	; (802257c <__i2b+0x24>)
 8022568:	4805      	ldr	r0, [pc, #20]	; (8022580 <__i2b+0x28>)
 802256a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802256e:	f000 fced 	bl	8022f4c <__assert_func>
 8022572:	2301      	movs	r3, #1
 8022574:	6144      	str	r4, [r0, #20]
 8022576:	6103      	str	r3, [r0, #16]
 8022578:	bd10      	pop	{r4, pc}
 802257a:	bf00      	nop
 802257c:	0802424b 	.word	0x0802424b
 8022580:	080242dc 	.word	0x080242dc

08022584 <__multiply>:
 8022584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022588:	4614      	mov	r4, r2
 802258a:	690a      	ldr	r2, [r1, #16]
 802258c:	6923      	ldr	r3, [r4, #16]
 802258e:	429a      	cmp	r2, r3
 8022590:	bfb8      	it	lt
 8022592:	460b      	movlt	r3, r1
 8022594:	460d      	mov	r5, r1
 8022596:	bfbc      	itt	lt
 8022598:	4625      	movlt	r5, r4
 802259a:	461c      	movlt	r4, r3
 802259c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80225a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80225a4:	68ab      	ldr	r3, [r5, #8]
 80225a6:	6869      	ldr	r1, [r5, #4]
 80225a8:	eb0a 0709 	add.w	r7, sl, r9
 80225ac:	42bb      	cmp	r3, r7
 80225ae:	b085      	sub	sp, #20
 80225b0:	bfb8      	it	lt
 80225b2:	3101      	addlt	r1, #1
 80225b4:	f7ff fe8a 	bl	80222cc <_Balloc>
 80225b8:	b930      	cbnz	r0, 80225c8 <__multiply+0x44>
 80225ba:	4602      	mov	r2, r0
 80225bc:	4b42      	ldr	r3, [pc, #264]	; (80226c8 <__multiply+0x144>)
 80225be:	4843      	ldr	r0, [pc, #268]	; (80226cc <__multiply+0x148>)
 80225c0:	f240 115d 	movw	r1, #349	; 0x15d
 80225c4:	f000 fcc2 	bl	8022f4c <__assert_func>
 80225c8:	f100 0614 	add.w	r6, r0, #20
 80225cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80225d0:	4633      	mov	r3, r6
 80225d2:	2200      	movs	r2, #0
 80225d4:	4543      	cmp	r3, r8
 80225d6:	d31e      	bcc.n	8022616 <__multiply+0x92>
 80225d8:	f105 0c14 	add.w	ip, r5, #20
 80225dc:	f104 0314 	add.w	r3, r4, #20
 80225e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80225e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80225e8:	9202      	str	r2, [sp, #8]
 80225ea:	ebac 0205 	sub.w	r2, ip, r5
 80225ee:	3a15      	subs	r2, #21
 80225f0:	f022 0203 	bic.w	r2, r2, #3
 80225f4:	3204      	adds	r2, #4
 80225f6:	f105 0115 	add.w	r1, r5, #21
 80225fa:	458c      	cmp	ip, r1
 80225fc:	bf38      	it	cc
 80225fe:	2204      	movcc	r2, #4
 8022600:	9201      	str	r2, [sp, #4]
 8022602:	9a02      	ldr	r2, [sp, #8]
 8022604:	9303      	str	r3, [sp, #12]
 8022606:	429a      	cmp	r2, r3
 8022608:	d808      	bhi.n	802261c <__multiply+0x98>
 802260a:	2f00      	cmp	r7, #0
 802260c:	dc55      	bgt.n	80226ba <__multiply+0x136>
 802260e:	6107      	str	r7, [r0, #16]
 8022610:	b005      	add	sp, #20
 8022612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022616:	f843 2b04 	str.w	r2, [r3], #4
 802261a:	e7db      	b.n	80225d4 <__multiply+0x50>
 802261c:	f8b3 a000 	ldrh.w	sl, [r3]
 8022620:	f1ba 0f00 	cmp.w	sl, #0
 8022624:	d020      	beq.n	8022668 <__multiply+0xe4>
 8022626:	f105 0e14 	add.w	lr, r5, #20
 802262a:	46b1      	mov	r9, r6
 802262c:	2200      	movs	r2, #0
 802262e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8022632:	f8d9 b000 	ldr.w	fp, [r9]
 8022636:	b2a1      	uxth	r1, r4
 8022638:	fa1f fb8b 	uxth.w	fp, fp
 802263c:	fb0a b101 	mla	r1, sl, r1, fp
 8022640:	4411      	add	r1, r2
 8022642:	f8d9 2000 	ldr.w	r2, [r9]
 8022646:	0c24      	lsrs	r4, r4, #16
 8022648:	0c12      	lsrs	r2, r2, #16
 802264a:	fb0a 2404 	mla	r4, sl, r4, r2
 802264e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8022652:	b289      	uxth	r1, r1
 8022654:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8022658:	45f4      	cmp	ip, lr
 802265a:	f849 1b04 	str.w	r1, [r9], #4
 802265e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8022662:	d8e4      	bhi.n	802262e <__multiply+0xaa>
 8022664:	9901      	ldr	r1, [sp, #4]
 8022666:	5072      	str	r2, [r6, r1]
 8022668:	9a03      	ldr	r2, [sp, #12]
 802266a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802266e:	3304      	adds	r3, #4
 8022670:	f1b9 0f00 	cmp.w	r9, #0
 8022674:	d01f      	beq.n	80226b6 <__multiply+0x132>
 8022676:	6834      	ldr	r4, [r6, #0]
 8022678:	f105 0114 	add.w	r1, r5, #20
 802267c:	46b6      	mov	lr, r6
 802267e:	f04f 0a00 	mov.w	sl, #0
 8022682:	880a      	ldrh	r2, [r1, #0]
 8022684:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022688:	fb09 b202 	mla	r2, r9, r2, fp
 802268c:	4492      	add	sl, r2
 802268e:	b2a4      	uxth	r4, r4
 8022690:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8022694:	f84e 4b04 	str.w	r4, [lr], #4
 8022698:	f851 4b04 	ldr.w	r4, [r1], #4
 802269c:	f8be 2000 	ldrh.w	r2, [lr]
 80226a0:	0c24      	lsrs	r4, r4, #16
 80226a2:	fb09 2404 	mla	r4, r9, r4, r2
 80226a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80226aa:	458c      	cmp	ip, r1
 80226ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80226b0:	d8e7      	bhi.n	8022682 <__multiply+0xfe>
 80226b2:	9a01      	ldr	r2, [sp, #4]
 80226b4:	50b4      	str	r4, [r6, r2]
 80226b6:	3604      	adds	r6, #4
 80226b8:	e7a3      	b.n	8022602 <__multiply+0x7e>
 80226ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80226be:	2b00      	cmp	r3, #0
 80226c0:	d1a5      	bne.n	802260e <__multiply+0x8a>
 80226c2:	3f01      	subs	r7, #1
 80226c4:	e7a1      	b.n	802260a <__multiply+0x86>
 80226c6:	bf00      	nop
 80226c8:	0802424b 	.word	0x0802424b
 80226cc:	080242dc 	.word	0x080242dc

080226d0 <__pow5mult>:
 80226d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80226d4:	4615      	mov	r5, r2
 80226d6:	f012 0203 	ands.w	r2, r2, #3
 80226da:	4606      	mov	r6, r0
 80226dc:	460f      	mov	r7, r1
 80226de:	d007      	beq.n	80226f0 <__pow5mult+0x20>
 80226e0:	4c25      	ldr	r4, [pc, #148]	; (8022778 <__pow5mult+0xa8>)
 80226e2:	3a01      	subs	r2, #1
 80226e4:	2300      	movs	r3, #0
 80226e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80226ea:	f7ff fe51 	bl	8022390 <__multadd>
 80226ee:	4607      	mov	r7, r0
 80226f0:	10ad      	asrs	r5, r5, #2
 80226f2:	d03d      	beq.n	8022770 <__pow5mult+0xa0>
 80226f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80226f6:	b97c      	cbnz	r4, 8022718 <__pow5mult+0x48>
 80226f8:	2010      	movs	r0, #16
 80226fa:	f7fc fdfb 	bl	801f2f4 <malloc>
 80226fe:	4602      	mov	r2, r0
 8022700:	6270      	str	r0, [r6, #36]	; 0x24
 8022702:	b928      	cbnz	r0, 8022710 <__pow5mult+0x40>
 8022704:	4b1d      	ldr	r3, [pc, #116]	; (802277c <__pow5mult+0xac>)
 8022706:	481e      	ldr	r0, [pc, #120]	; (8022780 <__pow5mult+0xb0>)
 8022708:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802270c:	f000 fc1e 	bl	8022f4c <__assert_func>
 8022710:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022714:	6004      	str	r4, [r0, #0]
 8022716:	60c4      	str	r4, [r0, #12]
 8022718:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802271c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022720:	b94c      	cbnz	r4, 8022736 <__pow5mult+0x66>
 8022722:	f240 2171 	movw	r1, #625	; 0x271
 8022726:	4630      	mov	r0, r6
 8022728:	f7ff ff16 	bl	8022558 <__i2b>
 802272c:	2300      	movs	r3, #0
 802272e:	f8c8 0008 	str.w	r0, [r8, #8]
 8022732:	4604      	mov	r4, r0
 8022734:	6003      	str	r3, [r0, #0]
 8022736:	f04f 0900 	mov.w	r9, #0
 802273a:	07eb      	lsls	r3, r5, #31
 802273c:	d50a      	bpl.n	8022754 <__pow5mult+0x84>
 802273e:	4639      	mov	r1, r7
 8022740:	4622      	mov	r2, r4
 8022742:	4630      	mov	r0, r6
 8022744:	f7ff ff1e 	bl	8022584 <__multiply>
 8022748:	4639      	mov	r1, r7
 802274a:	4680      	mov	r8, r0
 802274c:	4630      	mov	r0, r6
 802274e:	f7ff fdfd 	bl	802234c <_Bfree>
 8022752:	4647      	mov	r7, r8
 8022754:	106d      	asrs	r5, r5, #1
 8022756:	d00b      	beq.n	8022770 <__pow5mult+0xa0>
 8022758:	6820      	ldr	r0, [r4, #0]
 802275a:	b938      	cbnz	r0, 802276c <__pow5mult+0x9c>
 802275c:	4622      	mov	r2, r4
 802275e:	4621      	mov	r1, r4
 8022760:	4630      	mov	r0, r6
 8022762:	f7ff ff0f 	bl	8022584 <__multiply>
 8022766:	6020      	str	r0, [r4, #0]
 8022768:	f8c0 9000 	str.w	r9, [r0]
 802276c:	4604      	mov	r4, r0
 802276e:	e7e4      	b.n	802273a <__pow5mult+0x6a>
 8022770:	4638      	mov	r0, r7
 8022772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022776:	bf00      	nop
 8022778:	08024430 	.word	0x08024430
 802277c:	080241d5 	.word	0x080241d5
 8022780:	080242dc 	.word	0x080242dc

08022784 <__lshift>:
 8022784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022788:	460c      	mov	r4, r1
 802278a:	6849      	ldr	r1, [r1, #4]
 802278c:	6923      	ldr	r3, [r4, #16]
 802278e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022792:	68a3      	ldr	r3, [r4, #8]
 8022794:	4607      	mov	r7, r0
 8022796:	4691      	mov	r9, r2
 8022798:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802279c:	f108 0601 	add.w	r6, r8, #1
 80227a0:	42b3      	cmp	r3, r6
 80227a2:	db0b      	blt.n	80227bc <__lshift+0x38>
 80227a4:	4638      	mov	r0, r7
 80227a6:	f7ff fd91 	bl	80222cc <_Balloc>
 80227aa:	4605      	mov	r5, r0
 80227ac:	b948      	cbnz	r0, 80227c2 <__lshift+0x3e>
 80227ae:	4602      	mov	r2, r0
 80227b0:	4b28      	ldr	r3, [pc, #160]	; (8022854 <__lshift+0xd0>)
 80227b2:	4829      	ldr	r0, [pc, #164]	; (8022858 <__lshift+0xd4>)
 80227b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80227b8:	f000 fbc8 	bl	8022f4c <__assert_func>
 80227bc:	3101      	adds	r1, #1
 80227be:	005b      	lsls	r3, r3, #1
 80227c0:	e7ee      	b.n	80227a0 <__lshift+0x1c>
 80227c2:	2300      	movs	r3, #0
 80227c4:	f100 0114 	add.w	r1, r0, #20
 80227c8:	f100 0210 	add.w	r2, r0, #16
 80227cc:	4618      	mov	r0, r3
 80227ce:	4553      	cmp	r3, sl
 80227d0:	db33      	blt.n	802283a <__lshift+0xb6>
 80227d2:	6920      	ldr	r0, [r4, #16]
 80227d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80227d8:	f104 0314 	add.w	r3, r4, #20
 80227dc:	f019 091f 	ands.w	r9, r9, #31
 80227e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80227e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80227e8:	d02b      	beq.n	8022842 <__lshift+0xbe>
 80227ea:	f1c9 0e20 	rsb	lr, r9, #32
 80227ee:	468a      	mov	sl, r1
 80227f0:	2200      	movs	r2, #0
 80227f2:	6818      	ldr	r0, [r3, #0]
 80227f4:	fa00 f009 	lsl.w	r0, r0, r9
 80227f8:	4302      	orrs	r2, r0
 80227fa:	f84a 2b04 	str.w	r2, [sl], #4
 80227fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8022802:	459c      	cmp	ip, r3
 8022804:	fa22 f20e 	lsr.w	r2, r2, lr
 8022808:	d8f3      	bhi.n	80227f2 <__lshift+0x6e>
 802280a:	ebac 0304 	sub.w	r3, ip, r4
 802280e:	3b15      	subs	r3, #21
 8022810:	f023 0303 	bic.w	r3, r3, #3
 8022814:	3304      	adds	r3, #4
 8022816:	f104 0015 	add.w	r0, r4, #21
 802281a:	4584      	cmp	ip, r0
 802281c:	bf38      	it	cc
 802281e:	2304      	movcc	r3, #4
 8022820:	50ca      	str	r2, [r1, r3]
 8022822:	b10a      	cbz	r2, 8022828 <__lshift+0xa4>
 8022824:	f108 0602 	add.w	r6, r8, #2
 8022828:	3e01      	subs	r6, #1
 802282a:	4638      	mov	r0, r7
 802282c:	612e      	str	r6, [r5, #16]
 802282e:	4621      	mov	r1, r4
 8022830:	f7ff fd8c 	bl	802234c <_Bfree>
 8022834:	4628      	mov	r0, r5
 8022836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802283a:	f842 0f04 	str.w	r0, [r2, #4]!
 802283e:	3301      	adds	r3, #1
 8022840:	e7c5      	b.n	80227ce <__lshift+0x4a>
 8022842:	3904      	subs	r1, #4
 8022844:	f853 2b04 	ldr.w	r2, [r3], #4
 8022848:	f841 2f04 	str.w	r2, [r1, #4]!
 802284c:	459c      	cmp	ip, r3
 802284e:	d8f9      	bhi.n	8022844 <__lshift+0xc0>
 8022850:	e7ea      	b.n	8022828 <__lshift+0xa4>
 8022852:	bf00      	nop
 8022854:	0802424b 	.word	0x0802424b
 8022858:	080242dc 	.word	0x080242dc

0802285c <__mcmp>:
 802285c:	b530      	push	{r4, r5, lr}
 802285e:	6902      	ldr	r2, [r0, #16]
 8022860:	690c      	ldr	r4, [r1, #16]
 8022862:	1b12      	subs	r2, r2, r4
 8022864:	d10e      	bne.n	8022884 <__mcmp+0x28>
 8022866:	f100 0314 	add.w	r3, r0, #20
 802286a:	3114      	adds	r1, #20
 802286c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022870:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022874:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022878:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802287c:	42a5      	cmp	r5, r4
 802287e:	d003      	beq.n	8022888 <__mcmp+0x2c>
 8022880:	d305      	bcc.n	802288e <__mcmp+0x32>
 8022882:	2201      	movs	r2, #1
 8022884:	4610      	mov	r0, r2
 8022886:	bd30      	pop	{r4, r5, pc}
 8022888:	4283      	cmp	r3, r0
 802288a:	d3f3      	bcc.n	8022874 <__mcmp+0x18>
 802288c:	e7fa      	b.n	8022884 <__mcmp+0x28>
 802288e:	f04f 32ff 	mov.w	r2, #4294967295
 8022892:	e7f7      	b.n	8022884 <__mcmp+0x28>

08022894 <__mdiff>:
 8022894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022898:	460c      	mov	r4, r1
 802289a:	4606      	mov	r6, r0
 802289c:	4611      	mov	r1, r2
 802289e:	4620      	mov	r0, r4
 80228a0:	4617      	mov	r7, r2
 80228a2:	f7ff ffdb 	bl	802285c <__mcmp>
 80228a6:	1e05      	subs	r5, r0, #0
 80228a8:	d110      	bne.n	80228cc <__mdiff+0x38>
 80228aa:	4629      	mov	r1, r5
 80228ac:	4630      	mov	r0, r6
 80228ae:	f7ff fd0d 	bl	80222cc <_Balloc>
 80228b2:	b930      	cbnz	r0, 80228c2 <__mdiff+0x2e>
 80228b4:	4b39      	ldr	r3, [pc, #228]	; (802299c <__mdiff+0x108>)
 80228b6:	4602      	mov	r2, r0
 80228b8:	f240 2132 	movw	r1, #562	; 0x232
 80228bc:	4838      	ldr	r0, [pc, #224]	; (80229a0 <__mdiff+0x10c>)
 80228be:	f000 fb45 	bl	8022f4c <__assert_func>
 80228c2:	2301      	movs	r3, #1
 80228c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80228c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228cc:	bfa4      	itt	ge
 80228ce:	463b      	movge	r3, r7
 80228d0:	4627      	movge	r7, r4
 80228d2:	4630      	mov	r0, r6
 80228d4:	6879      	ldr	r1, [r7, #4]
 80228d6:	bfa6      	itte	ge
 80228d8:	461c      	movge	r4, r3
 80228da:	2500      	movge	r5, #0
 80228dc:	2501      	movlt	r5, #1
 80228de:	f7ff fcf5 	bl	80222cc <_Balloc>
 80228e2:	b920      	cbnz	r0, 80228ee <__mdiff+0x5a>
 80228e4:	4b2d      	ldr	r3, [pc, #180]	; (802299c <__mdiff+0x108>)
 80228e6:	4602      	mov	r2, r0
 80228e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80228ec:	e7e6      	b.n	80228bc <__mdiff+0x28>
 80228ee:	693e      	ldr	r6, [r7, #16]
 80228f0:	60c5      	str	r5, [r0, #12]
 80228f2:	6925      	ldr	r5, [r4, #16]
 80228f4:	f107 0114 	add.w	r1, r7, #20
 80228f8:	f104 0914 	add.w	r9, r4, #20
 80228fc:	f100 0e14 	add.w	lr, r0, #20
 8022900:	f107 0210 	add.w	r2, r7, #16
 8022904:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8022908:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802290c:	46f2      	mov	sl, lr
 802290e:	2700      	movs	r7, #0
 8022910:	f859 3b04 	ldr.w	r3, [r9], #4
 8022914:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022918:	fa1f f883 	uxth.w	r8, r3
 802291c:	fa17 f78b 	uxtah	r7, r7, fp
 8022920:	0c1b      	lsrs	r3, r3, #16
 8022922:	eba7 0808 	sub.w	r8, r7, r8
 8022926:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802292a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802292e:	fa1f f888 	uxth.w	r8, r8
 8022932:	141f      	asrs	r7, r3, #16
 8022934:	454d      	cmp	r5, r9
 8022936:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802293a:	f84a 3b04 	str.w	r3, [sl], #4
 802293e:	d8e7      	bhi.n	8022910 <__mdiff+0x7c>
 8022940:	1b2b      	subs	r3, r5, r4
 8022942:	3b15      	subs	r3, #21
 8022944:	f023 0303 	bic.w	r3, r3, #3
 8022948:	3304      	adds	r3, #4
 802294a:	3415      	adds	r4, #21
 802294c:	42a5      	cmp	r5, r4
 802294e:	bf38      	it	cc
 8022950:	2304      	movcc	r3, #4
 8022952:	4419      	add	r1, r3
 8022954:	4473      	add	r3, lr
 8022956:	469e      	mov	lr, r3
 8022958:	460d      	mov	r5, r1
 802295a:	4565      	cmp	r5, ip
 802295c:	d30e      	bcc.n	802297c <__mdiff+0xe8>
 802295e:	f10c 0203 	add.w	r2, ip, #3
 8022962:	1a52      	subs	r2, r2, r1
 8022964:	f022 0203 	bic.w	r2, r2, #3
 8022968:	3903      	subs	r1, #3
 802296a:	458c      	cmp	ip, r1
 802296c:	bf38      	it	cc
 802296e:	2200      	movcc	r2, #0
 8022970:	441a      	add	r2, r3
 8022972:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022976:	b17b      	cbz	r3, 8022998 <__mdiff+0x104>
 8022978:	6106      	str	r6, [r0, #16]
 802297a:	e7a5      	b.n	80228c8 <__mdiff+0x34>
 802297c:	f855 8b04 	ldr.w	r8, [r5], #4
 8022980:	fa17 f488 	uxtah	r4, r7, r8
 8022984:	1422      	asrs	r2, r4, #16
 8022986:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802298a:	b2a4      	uxth	r4, r4
 802298c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022990:	f84e 4b04 	str.w	r4, [lr], #4
 8022994:	1417      	asrs	r7, r2, #16
 8022996:	e7e0      	b.n	802295a <__mdiff+0xc6>
 8022998:	3e01      	subs	r6, #1
 802299a:	e7ea      	b.n	8022972 <__mdiff+0xde>
 802299c:	0802424b 	.word	0x0802424b
 80229a0:	080242dc 	.word	0x080242dc

080229a4 <__ulp>:
 80229a4:	b082      	sub	sp, #8
 80229a6:	ed8d 0b00 	vstr	d0, [sp]
 80229aa:	9b01      	ldr	r3, [sp, #4]
 80229ac:	4912      	ldr	r1, [pc, #72]	; (80229f8 <__ulp+0x54>)
 80229ae:	4019      	ands	r1, r3
 80229b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80229b4:	2900      	cmp	r1, #0
 80229b6:	dd05      	ble.n	80229c4 <__ulp+0x20>
 80229b8:	2200      	movs	r2, #0
 80229ba:	460b      	mov	r3, r1
 80229bc:	ec43 2b10 	vmov	d0, r2, r3
 80229c0:	b002      	add	sp, #8
 80229c2:	4770      	bx	lr
 80229c4:	4249      	negs	r1, r1
 80229c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80229ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 80229ce:	f04f 0200 	mov.w	r2, #0
 80229d2:	f04f 0300 	mov.w	r3, #0
 80229d6:	da04      	bge.n	80229e2 <__ulp+0x3e>
 80229d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80229dc:	fa41 f300 	asr.w	r3, r1, r0
 80229e0:	e7ec      	b.n	80229bc <__ulp+0x18>
 80229e2:	f1a0 0114 	sub.w	r1, r0, #20
 80229e6:	291e      	cmp	r1, #30
 80229e8:	bfda      	itte	le
 80229ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80229ee:	fa20 f101 	lsrle.w	r1, r0, r1
 80229f2:	2101      	movgt	r1, #1
 80229f4:	460a      	mov	r2, r1
 80229f6:	e7e1      	b.n	80229bc <__ulp+0x18>
 80229f8:	7ff00000 	.word	0x7ff00000

080229fc <__b2d>:
 80229fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229fe:	6905      	ldr	r5, [r0, #16]
 8022a00:	f100 0714 	add.w	r7, r0, #20
 8022a04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8022a08:	1f2e      	subs	r6, r5, #4
 8022a0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8022a0e:	4620      	mov	r0, r4
 8022a10:	f7ff fd52 	bl	80224b8 <__hi0bits>
 8022a14:	f1c0 0320 	rsb	r3, r0, #32
 8022a18:	280a      	cmp	r0, #10
 8022a1a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022a98 <__b2d+0x9c>
 8022a1e:	600b      	str	r3, [r1, #0]
 8022a20:	dc14      	bgt.n	8022a4c <__b2d+0x50>
 8022a22:	f1c0 0e0b 	rsb	lr, r0, #11
 8022a26:	fa24 f10e 	lsr.w	r1, r4, lr
 8022a2a:	42b7      	cmp	r7, r6
 8022a2c:	ea41 030c 	orr.w	r3, r1, ip
 8022a30:	bf34      	ite	cc
 8022a32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022a36:	2100      	movcs	r1, #0
 8022a38:	3015      	adds	r0, #21
 8022a3a:	fa04 f000 	lsl.w	r0, r4, r0
 8022a3e:	fa21 f10e 	lsr.w	r1, r1, lr
 8022a42:	ea40 0201 	orr.w	r2, r0, r1
 8022a46:	ec43 2b10 	vmov	d0, r2, r3
 8022a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a4c:	42b7      	cmp	r7, r6
 8022a4e:	bf3a      	itte	cc
 8022a50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022a54:	f1a5 0608 	subcc.w	r6, r5, #8
 8022a58:	2100      	movcs	r1, #0
 8022a5a:	380b      	subs	r0, #11
 8022a5c:	d017      	beq.n	8022a8e <__b2d+0x92>
 8022a5e:	f1c0 0c20 	rsb	ip, r0, #32
 8022a62:	fa04 f500 	lsl.w	r5, r4, r0
 8022a66:	42be      	cmp	r6, r7
 8022a68:	fa21 f40c 	lsr.w	r4, r1, ip
 8022a6c:	ea45 0504 	orr.w	r5, r5, r4
 8022a70:	bf8c      	ite	hi
 8022a72:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022a76:	2400      	movls	r4, #0
 8022a78:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8022a7c:	fa01 f000 	lsl.w	r0, r1, r0
 8022a80:	fa24 f40c 	lsr.w	r4, r4, ip
 8022a84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022a88:	ea40 0204 	orr.w	r2, r0, r4
 8022a8c:	e7db      	b.n	8022a46 <__b2d+0x4a>
 8022a8e:	ea44 030c 	orr.w	r3, r4, ip
 8022a92:	460a      	mov	r2, r1
 8022a94:	e7d7      	b.n	8022a46 <__b2d+0x4a>
 8022a96:	bf00      	nop
 8022a98:	3ff00000 	.word	0x3ff00000

08022a9c <__d2b>:
 8022a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022aa0:	4689      	mov	r9, r1
 8022aa2:	2101      	movs	r1, #1
 8022aa4:	ec57 6b10 	vmov	r6, r7, d0
 8022aa8:	4690      	mov	r8, r2
 8022aaa:	f7ff fc0f 	bl	80222cc <_Balloc>
 8022aae:	4604      	mov	r4, r0
 8022ab0:	b930      	cbnz	r0, 8022ac0 <__d2b+0x24>
 8022ab2:	4602      	mov	r2, r0
 8022ab4:	4b25      	ldr	r3, [pc, #148]	; (8022b4c <__d2b+0xb0>)
 8022ab6:	4826      	ldr	r0, [pc, #152]	; (8022b50 <__d2b+0xb4>)
 8022ab8:	f240 310a 	movw	r1, #778	; 0x30a
 8022abc:	f000 fa46 	bl	8022f4c <__assert_func>
 8022ac0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022ac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022ac8:	bb35      	cbnz	r5, 8022b18 <__d2b+0x7c>
 8022aca:	2e00      	cmp	r6, #0
 8022acc:	9301      	str	r3, [sp, #4]
 8022ace:	d028      	beq.n	8022b22 <__d2b+0x86>
 8022ad0:	4668      	mov	r0, sp
 8022ad2:	9600      	str	r6, [sp, #0]
 8022ad4:	f7ff fd10 	bl	80224f8 <__lo0bits>
 8022ad8:	9900      	ldr	r1, [sp, #0]
 8022ada:	b300      	cbz	r0, 8022b1e <__d2b+0x82>
 8022adc:	9a01      	ldr	r2, [sp, #4]
 8022ade:	f1c0 0320 	rsb	r3, r0, #32
 8022ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8022ae6:	430b      	orrs	r3, r1
 8022ae8:	40c2      	lsrs	r2, r0
 8022aea:	6163      	str	r3, [r4, #20]
 8022aec:	9201      	str	r2, [sp, #4]
 8022aee:	9b01      	ldr	r3, [sp, #4]
 8022af0:	61a3      	str	r3, [r4, #24]
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	bf14      	ite	ne
 8022af6:	2202      	movne	r2, #2
 8022af8:	2201      	moveq	r2, #1
 8022afa:	6122      	str	r2, [r4, #16]
 8022afc:	b1d5      	cbz	r5, 8022b34 <__d2b+0x98>
 8022afe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022b02:	4405      	add	r5, r0
 8022b04:	f8c9 5000 	str.w	r5, [r9]
 8022b08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022b0c:	f8c8 0000 	str.w	r0, [r8]
 8022b10:	4620      	mov	r0, r4
 8022b12:	b003      	add	sp, #12
 8022b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022b1c:	e7d5      	b.n	8022aca <__d2b+0x2e>
 8022b1e:	6161      	str	r1, [r4, #20]
 8022b20:	e7e5      	b.n	8022aee <__d2b+0x52>
 8022b22:	a801      	add	r0, sp, #4
 8022b24:	f7ff fce8 	bl	80224f8 <__lo0bits>
 8022b28:	9b01      	ldr	r3, [sp, #4]
 8022b2a:	6163      	str	r3, [r4, #20]
 8022b2c:	2201      	movs	r2, #1
 8022b2e:	6122      	str	r2, [r4, #16]
 8022b30:	3020      	adds	r0, #32
 8022b32:	e7e3      	b.n	8022afc <__d2b+0x60>
 8022b34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022b38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022b3c:	f8c9 0000 	str.w	r0, [r9]
 8022b40:	6918      	ldr	r0, [r3, #16]
 8022b42:	f7ff fcb9 	bl	80224b8 <__hi0bits>
 8022b46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022b4a:	e7df      	b.n	8022b0c <__d2b+0x70>
 8022b4c:	0802424b 	.word	0x0802424b
 8022b50:	080242dc 	.word	0x080242dc

08022b54 <__ratio>:
 8022b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b58:	4688      	mov	r8, r1
 8022b5a:	4669      	mov	r1, sp
 8022b5c:	4681      	mov	r9, r0
 8022b5e:	f7ff ff4d 	bl	80229fc <__b2d>
 8022b62:	a901      	add	r1, sp, #4
 8022b64:	4640      	mov	r0, r8
 8022b66:	ec55 4b10 	vmov	r4, r5, d0
 8022b6a:	f7ff ff47 	bl	80229fc <__b2d>
 8022b6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022b72:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8022b76:	eba3 0c02 	sub.w	ip, r3, r2
 8022b7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022b7e:	1a9b      	subs	r3, r3, r2
 8022b80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022b84:	ec51 0b10 	vmov	r0, r1, d0
 8022b88:	2b00      	cmp	r3, #0
 8022b8a:	bfd6      	itet	le
 8022b8c:	460a      	movle	r2, r1
 8022b8e:	462a      	movgt	r2, r5
 8022b90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022b94:	468b      	mov	fp, r1
 8022b96:	462f      	mov	r7, r5
 8022b98:	bfd4      	ite	le
 8022b9a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8022b9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8022ba2:	4620      	mov	r0, r4
 8022ba4:	ee10 2a10 	vmov	r2, s0
 8022ba8:	465b      	mov	r3, fp
 8022baa:	4639      	mov	r1, r7
 8022bac:	f7dd fe76 	bl	800089c <__aeabi_ddiv>
 8022bb0:	ec41 0b10 	vmov	d0, r0, r1
 8022bb4:	b003      	add	sp, #12
 8022bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022bba <__copybits>:
 8022bba:	3901      	subs	r1, #1
 8022bbc:	b570      	push	{r4, r5, r6, lr}
 8022bbe:	1149      	asrs	r1, r1, #5
 8022bc0:	6914      	ldr	r4, [r2, #16]
 8022bc2:	3101      	adds	r1, #1
 8022bc4:	f102 0314 	add.w	r3, r2, #20
 8022bc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022bcc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022bd0:	1f05      	subs	r5, r0, #4
 8022bd2:	42a3      	cmp	r3, r4
 8022bd4:	d30c      	bcc.n	8022bf0 <__copybits+0x36>
 8022bd6:	1aa3      	subs	r3, r4, r2
 8022bd8:	3b11      	subs	r3, #17
 8022bda:	f023 0303 	bic.w	r3, r3, #3
 8022bde:	3211      	adds	r2, #17
 8022be0:	42a2      	cmp	r2, r4
 8022be2:	bf88      	it	hi
 8022be4:	2300      	movhi	r3, #0
 8022be6:	4418      	add	r0, r3
 8022be8:	2300      	movs	r3, #0
 8022bea:	4288      	cmp	r0, r1
 8022bec:	d305      	bcc.n	8022bfa <__copybits+0x40>
 8022bee:	bd70      	pop	{r4, r5, r6, pc}
 8022bf0:	f853 6b04 	ldr.w	r6, [r3], #4
 8022bf4:	f845 6f04 	str.w	r6, [r5, #4]!
 8022bf8:	e7eb      	b.n	8022bd2 <__copybits+0x18>
 8022bfa:	f840 3b04 	str.w	r3, [r0], #4
 8022bfe:	e7f4      	b.n	8022bea <__copybits+0x30>

08022c00 <__any_on>:
 8022c00:	f100 0214 	add.w	r2, r0, #20
 8022c04:	6900      	ldr	r0, [r0, #16]
 8022c06:	114b      	asrs	r3, r1, #5
 8022c08:	4298      	cmp	r0, r3
 8022c0a:	b510      	push	{r4, lr}
 8022c0c:	db11      	blt.n	8022c32 <__any_on+0x32>
 8022c0e:	dd0a      	ble.n	8022c26 <__any_on+0x26>
 8022c10:	f011 011f 	ands.w	r1, r1, #31
 8022c14:	d007      	beq.n	8022c26 <__any_on+0x26>
 8022c16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022c1a:	fa24 f001 	lsr.w	r0, r4, r1
 8022c1e:	fa00 f101 	lsl.w	r1, r0, r1
 8022c22:	428c      	cmp	r4, r1
 8022c24:	d10b      	bne.n	8022c3e <__any_on+0x3e>
 8022c26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022c2a:	4293      	cmp	r3, r2
 8022c2c:	d803      	bhi.n	8022c36 <__any_on+0x36>
 8022c2e:	2000      	movs	r0, #0
 8022c30:	bd10      	pop	{r4, pc}
 8022c32:	4603      	mov	r3, r0
 8022c34:	e7f7      	b.n	8022c26 <__any_on+0x26>
 8022c36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022c3a:	2900      	cmp	r1, #0
 8022c3c:	d0f5      	beq.n	8022c2a <__any_on+0x2a>
 8022c3e:	2001      	movs	r0, #1
 8022c40:	e7f6      	b.n	8022c30 <__any_on+0x30>

08022c42 <__ssputs_r>:
 8022c42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c46:	688e      	ldr	r6, [r1, #8]
 8022c48:	429e      	cmp	r6, r3
 8022c4a:	4682      	mov	sl, r0
 8022c4c:	460c      	mov	r4, r1
 8022c4e:	4690      	mov	r8, r2
 8022c50:	461f      	mov	r7, r3
 8022c52:	d838      	bhi.n	8022cc6 <__ssputs_r+0x84>
 8022c54:	898a      	ldrh	r2, [r1, #12]
 8022c56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022c5a:	d032      	beq.n	8022cc2 <__ssputs_r+0x80>
 8022c5c:	6825      	ldr	r5, [r4, #0]
 8022c5e:	6909      	ldr	r1, [r1, #16]
 8022c60:	eba5 0901 	sub.w	r9, r5, r1
 8022c64:	6965      	ldr	r5, [r4, #20]
 8022c66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022c6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022c6e:	3301      	adds	r3, #1
 8022c70:	444b      	add	r3, r9
 8022c72:	106d      	asrs	r5, r5, #1
 8022c74:	429d      	cmp	r5, r3
 8022c76:	bf38      	it	cc
 8022c78:	461d      	movcc	r5, r3
 8022c7a:	0553      	lsls	r3, r2, #21
 8022c7c:	d531      	bpl.n	8022ce2 <__ssputs_r+0xa0>
 8022c7e:	4629      	mov	r1, r5
 8022c80:	f7fc fbd8 	bl	801f434 <_malloc_r>
 8022c84:	4606      	mov	r6, r0
 8022c86:	b950      	cbnz	r0, 8022c9e <__ssputs_r+0x5c>
 8022c88:	230c      	movs	r3, #12
 8022c8a:	f8ca 3000 	str.w	r3, [sl]
 8022c8e:	89a3      	ldrh	r3, [r4, #12]
 8022c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c94:	81a3      	strh	r3, [r4, #12]
 8022c96:	f04f 30ff 	mov.w	r0, #4294967295
 8022c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c9e:	6921      	ldr	r1, [r4, #16]
 8022ca0:	464a      	mov	r2, r9
 8022ca2:	f7fc fb37 	bl	801f314 <memcpy>
 8022ca6:	89a3      	ldrh	r3, [r4, #12]
 8022ca8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022cb0:	81a3      	strh	r3, [r4, #12]
 8022cb2:	6126      	str	r6, [r4, #16]
 8022cb4:	6165      	str	r5, [r4, #20]
 8022cb6:	444e      	add	r6, r9
 8022cb8:	eba5 0509 	sub.w	r5, r5, r9
 8022cbc:	6026      	str	r6, [r4, #0]
 8022cbe:	60a5      	str	r5, [r4, #8]
 8022cc0:	463e      	mov	r6, r7
 8022cc2:	42be      	cmp	r6, r7
 8022cc4:	d900      	bls.n	8022cc8 <__ssputs_r+0x86>
 8022cc6:	463e      	mov	r6, r7
 8022cc8:	4632      	mov	r2, r6
 8022cca:	6820      	ldr	r0, [r4, #0]
 8022ccc:	4641      	mov	r1, r8
 8022cce:	f7fc fb2f 	bl	801f330 <memmove>
 8022cd2:	68a3      	ldr	r3, [r4, #8]
 8022cd4:	6822      	ldr	r2, [r4, #0]
 8022cd6:	1b9b      	subs	r3, r3, r6
 8022cd8:	4432      	add	r2, r6
 8022cda:	60a3      	str	r3, [r4, #8]
 8022cdc:	6022      	str	r2, [r4, #0]
 8022cde:	2000      	movs	r0, #0
 8022ce0:	e7db      	b.n	8022c9a <__ssputs_r+0x58>
 8022ce2:	462a      	mov	r2, r5
 8022ce4:	f000 f962 	bl	8022fac <_realloc_r>
 8022ce8:	4606      	mov	r6, r0
 8022cea:	2800      	cmp	r0, #0
 8022cec:	d1e1      	bne.n	8022cb2 <__ssputs_r+0x70>
 8022cee:	6921      	ldr	r1, [r4, #16]
 8022cf0:	4650      	mov	r0, sl
 8022cf2:	f7fc fb4f 	bl	801f394 <_free_r>
 8022cf6:	e7c7      	b.n	8022c88 <__ssputs_r+0x46>

08022cf8 <_svfiprintf_r>:
 8022cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cfc:	4698      	mov	r8, r3
 8022cfe:	898b      	ldrh	r3, [r1, #12]
 8022d00:	061b      	lsls	r3, r3, #24
 8022d02:	b09d      	sub	sp, #116	; 0x74
 8022d04:	4607      	mov	r7, r0
 8022d06:	460d      	mov	r5, r1
 8022d08:	4614      	mov	r4, r2
 8022d0a:	d50e      	bpl.n	8022d2a <_svfiprintf_r+0x32>
 8022d0c:	690b      	ldr	r3, [r1, #16]
 8022d0e:	b963      	cbnz	r3, 8022d2a <_svfiprintf_r+0x32>
 8022d10:	2140      	movs	r1, #64	; 0x40
 8022d12:	f7fc fb8f 	bl	801f434 <_malloc_r>
 8022d16:	6028      	str	r0, [r5, #0]
 8022d18:	6128      	str	r0, [r5, #16]
 8022d1a:	b920      	cbnz	r0, 8022d26 <_svfiprintf_r+0x2e>
 8022d1c:	230c      	movs	r3, #12
 8022d1e:	603b      	str	r3, [r7, #0]
 8022d20:	f04f 30ff 	mov.w	r0, #4294967295
 8022d24:	e0d1      	b.n	8022eca <_svfiprintf_r+0x1d2>
 8022d26:	2340      	movs	r3, #64	; 0x40
 8022d28:	616b      	str	r3, [r5, #20]
 8022d2a:	2300      	movs	r3, #0
 8022d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8022d2e:	2320      	movs	r3, #32
 8022d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8022d38:	2330      	movs	r3, #48	; 0x30
 8022d3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022ee4 <_svfiprintf_r+0x1ec>
 8022d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022d42:	f04f 0901 	mov.w	r9, #1
 8022d46:	4623      	mov	r3, r4
 8022d48:	469a      	mov	sl, r3
 8022d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022d4e:	b10a      	cbz	r2, 8022d54 <_svfiprintf_r+0x5c>
 8022d50:	2a25      	cmp	r2, #37	; 0x25
 8022d52:	d1f9      	bne.n	8022d48 <_svfiprintf_r+0x50>
 8022d54:	ebba 0b04 	subs.w	fp, sl, r4
 8022d58:	d00b      	beq.n	8022d72 <_svfiprintf_r+0x7a>
 8022d5a:	465b      	mov	r3, fp
 8022d5c:	4622      	mov	r2, r4
 8022d5e:	4629      	mov	r1, r5
 8022d60:	4638      	mov	r0, r7
 8022d62:	f7ff ff6e 	bl	8022c42 <__ssputs_r>
 8022d66:	3001      	adds	r0, #1
 8022d68:	f000 80aa 	beq.w	8022ec0 <_svfiprintf_r+0x1c8>
 8022d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d6e:	445a      	add	r2, fp
 8022d70:	9209      	str	r2, [sp, #36]	; 0x24
 8022d72:	f89a 3000 	ldrb.w	r3, [sl]
 8022d76:	2b00      	cmp	r3, #0
 8022d78:	f000 80a2 	beq.w	8022ec0 <_svfiprintf_r+0x1c8>
 8022d7c:	2300      	movs	r3, #0
 8022d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8022d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022d86:	f10a 0a01 	add.w	sl, sl, #1
 8022d8a:	9304      	str	r3, [sp, #16]
 8022d8c:	9307      	str	r3, [sp, #28]
 8022d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022d92:	931a      	str	r3, [sp, #104]	; 0x68
 8022d94:	4654      	mov	r4, sl
 8022d96:	2205      	movs	r2, #5
 8022d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d9c:	4851      	ldr	r0, [pc, #324]	; (8022ee4 <_svfiprintf_r+0x1ec>)
 8022d9e:	f7dd fa47 	bl	8000230 <memchr>
 8022da2:	9a04      	ldr	r2, [sp, #16]
 8022da4:	b9d8      	cbnz	r0, 8022dde <_svfiprintf_r+0xe6>
 8022da6:	06d0      	lsls	r0, r2, #27
 8022da8:	bf44      	itt	mi
 8022daa:	2320      	movmi	r3, #32
 8022dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022db0:	0711      	lsls	r1, r2, #28
 8022db2:	bf44      	itt	mi
 8022db4:	232b      	movmi	r3, #43	; 0x2b
 8022db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022dba:	f89a 3000 	ldrb.w	r3, [sl]
 8022dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8022dc0:	d015      	beq.n	8022dee <_svfiprintf_r+0xf6>
 8022dc2:	9a07      	ldr	r2, [sp, #28]
 8022dc4:	4654      	mov	r4, sl
 8022dc6:	2000      	movs	r0, #0
 8022dc8:	f04f 0c0a 	mov.w	ip, #10
 8022dcc:	4621      	mov	r1, r4
 8022dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022dd2:	3b30      	subs	r3, #48	; 0x30
 8022dd4:	2b09      	cmp	r3, #9
 8022dd6:	d94e      	bls.n	8022e76 <_svfiprintf_r+0x17e>
 8022dd8:	b1b0      	cbz	r0, 8022e08 <_svfiprintf_r+0x110>
 8022dda:	9207      	str	r2, [sp, #28]
 8022ddc:	e014      	b.n	8022e08 <_svfiprintf_r+0x110>
 8022dde:	eba0 0308 	sub.w	r3, r0, r8
 8022de2:	fa09 f303 	lsl.w	r3, r9, r3
 8022de6:	4313      	orrs	r3, r2
 8022de8:	9304      	str	r3, [sp, #16]
 8022dea:	46a2      	mov	sl, r4
 8022dec:	e7d2      	b.n	8022d94 <_svfiprintf_r+0x9c>
 8022dee:	9b03      	ldr	r3, [sp, #12]
 8022df0:	1d19      	adds	r1, r3, #4
 8022df2:	681b      	ldr	r3, [r3, #0]
 8022df4:	9103      	str	r1, [sp, #12]
 8022df6:	2b00      	cmp	r3, #0
 8022df8:	bfbb      	ittet	lt
 8022dfa:	425b      	neglt	r3, r3
 8022dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8022e00:	9307      	strge	r3, [sp, #28]
 8022e02:	9307      	strlt	r3, [sp, #28]
 8022e04:	bfb8      	it	lt
 8022e06:	9204      	strlt	r2, [sp, #16]
 8022e08:	7823      	ldrb	r3, [r4, #0]
 8022e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8022e0c:	d10c      	bne.n	8022e28 <_svfiprintf_r+0x130>
 8022e0e:	7863      	ldrb	r3, [r4, #1]
 8022e10:	2b2a      	cmp	r3, #42	; 0x2a
 8022e12:	d135      	bne.n	8022e80 <_svfiprintf_r+0x188>
 8022e14:	9b03      	ldr	r3, [sp, #12]
 8022e16:	1d1a      	adds	r2, r3, #4
 8022e18:	681b      	ldr	r3, [r3, #0]
 8022e1a:	9203      	str	r2, [sp, #12]
 8022e1c:	2b00      	cmp	r3, #0
 8022e1e:	bfb8      	it	lt
 8022e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8022e24:	3402      	adds	r4, #2
 8022e26:	9305      	str	r3, [sp, #20]
 8022e28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022ef4 <_svfiprintf_r+0x1fc>
 8022e2c:	7821      	ldrb	r1, [r4, #0]
 8022e2e:	2203      	movs	r2, #3
 8022e30:	4650      	mov	r0, sl
 8022e32:	f7dd f9fd 	bl	8000230 <memchr>
 8022e36:	b140      	cbz	r0, 8022e4a <_svfiprintf_r+0x152>
 8022e38:	2340      	movs	r3, #64	; 0x40
 8022e3a:	eba0 000a 	sub.w	r0, r0, sl
 8022e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8022e42:	9b04      	ldr	r3, [sp, #16]
 8022e44:	4303      	orrs	r3, r0
 8022e46:	3401      	adds	r4, #1
 8022e48:	9304      	str	r3, [sp, #16]
 8022e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022e4e:	4826      	ldr	r0, [pc, #152]	; (8022ee8 <_svfiprintf_r+0x1f0>)
 8022e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022e54:	2206      	movs	r2, #6
 8022e56:	f7dd f9eb 	bl	8000230 <memchr>
 8022e5a:	2800      	cmp	r0, #0
 8022e5c:	d038      	beq.n	8022ed0 <_svfiprintf_r+0x1d8>
 8022e5e:	4b23      	ldr	r3, [pc, #140]	; (8022eec <_svfiprintf_r+0x1f4>)
 8022e60:	bb1b      	cbnz	r3, 8022eaa <_svfiprintf_r+0x1b2>
 8022e62:	9b03      	ldr	r3, [sp, #12]
 8022e64:	3307      	adds	r3, #7
 8022e66:	f023 0307 	bic.w	r3, r3, #7
 8022e6a:	3308      	adds	r3, #8
 8022e6c:	9303      	str	r3, [sp, #12]
 8022e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e70:	4433      	add	r3, r6
 8022e72:	9309      	str	r3, [sp, #36]	; 0x24
 8022e74:	e767      	b.n	8022d46 <_svfiprintf_r+0x4e>
 8022e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8022e7a:	460c      	mov	r4, r1
 8022e7c:	2001      	movs	r0, #1
 8022e7e:	e7a5      	b.n	8022dcc <_svfiprintf_r+0xd4>
 8022e80:	2300      	movs	r3, #0
 8022e82:	3401      	adds	r4, #1
 8022e84:	9305      	str	r3, [sp, #20]
 8022e86:	4619      	mov	r1, r3
 8022e88:	f04f 0c0a 	mov.w	ip, #10
 8022e8c:	4620      	mov	r0, r4
 8022e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022e92:	3a30      	subs	r2, #48	; 0x30
 8022e94:	2a09      	cmp	r2, #9
 8022e96:	d903      	bls.n	8022ea0 <_svfiprintf_r+0x1a8>
 8022e98:	2b00      	cmp	r3, #0
 8022e9a:	d0c5      	beq.n	8022e28 <_svfiprintf_r+0x130>
 8022e9c:	9105      	str	r1, [sp, #20]
 8022e9e:	e7c3      	b.n	8022e28 <_svfiprintf_r+0x130>
 8022ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8022ea4:	4604      	mov	r4, r0
 8022ea6:	2301      	movs	r3, #1
 8022ea8:	e7f0      	b.n	8022e8c <_svfiprintf_r+0x194>
 8022eaa:	ab03      	add	r3, sp, #12
 8022eac:	9300      	str	r3, [sp, #0]
 8022eae:	462a      	mov	r2, r5
 8022eb0:	4b0f      	ldr	r3, [pc, #60]	; (8022ef0 <_svfiprintf_r+0x1f8>)
 8022eb2:	a904      	add	r1, sp, #16
 8022eb4:	4638      	mov	r0, r7
 8022eb6:	f7fc fbb7 	bl	801f628 <_printf_float>
 8022eba:	1c42      	adds	r2, r0, #1
 8022ebc:	4606      	mov	r6, r0
 8022ebe:	d1d6      	bne.n	8022e6e <_svfiprintf_r+0x176>
 8022ec0:	89ab      	ldrh	r3, [r5, #12]
 8022ec2:	065b      	lsls	r3, r3, #25
 8022ec4:	f53f af2c 	bmi.w	8022d20 <_svfiprintf_r+0x28>
 8022ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022eca:	b01d      	add	sp, #116	; 0x74
 8022ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ed0:	ab03      	add	r3, sp, #12
 8022ed2:	9300      	str	r3, [sp, #0]
 8022ed4:	462a      	mov	r2, r5
 8022ed6:	4b06      	ldr	r3, [pc, #24]	; (8022ef0 <_svfiprintf_r+0x1f8>)
 8022ed8:	a904      	add	r1, sp, #16
 8022eda:	4638      	mov	r0, r7
 8022edc:	f7fc fe48 	bl	801fb70 <_printf_i>
 8022ee0:	e7eb      	b.n	8022eba <_svfiprintf_r+0x1c2>
 8022ee2:	bf00      	nop
 8022ee4:	0802443c 	.word	0x0802443c
 8022ee8:	08024446 	.word	0x08024446
 8022eec:	0801f629 	.word	0x0801f629
 8022ef0:	08022c43 	.word	0x08022c43
 8022ef4:	08024442 	.word	0x08024442

08022ef8 <_read_r>:
 8022ef8:	b538      	push	{r3, r4, r5, lr}
 8022efa:	4d07      	ldr	r5, [pc, #28]	; (8022f18 <_read_r+0x20>)
 8022efc:	4604      	mov	r4, r0
 8022efe:	4608      	mov	r0, r1
 8022f00:	4611      	mov	r1, r2
 8022f02:	2200      	movs	r2, #0
 8022f04:	602a      	str	r2, [r5, #0]
 8022f06:	461a      	mov	r2, r3
 8022f08:	f7fb ff90 	bl	801ee2c <_read>
 8022f0c:	1c43      	adds	r3, r0, #1
 8022f0e:	d102      	bne.n	8022f16 <_read_r+0x1e>
 8022f10:	682b      	ldr	r3, [r5, #0]
 8022f12:	b103      	cbz	r3, 8022f16 <_read_r+0x1e>
 8022f14:	6023      	str	r3, [r4, #0]
 8022f16:	bd38      	pop	{r3, r4, r5, pc}
 8022f18:	2001d46c 	.word	0x2001d46c
 8022f1c:	00000000 	.word	0x00000000

08022f20 <nan>:
 8022f20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022f28 <nan+0x8>
 8022f24:	4770      	bx	lr
 8022f26:	bf00      	nop
 8022f28:	00000000 	.word	0x00000000
 8022f2c:	7ff80000 	.word	0x7ff80000

08022f30 <__ascii_wctomb>:
 8022f30:	b149      	cbz	r1, 8022f46 <__ascii_wctomb+0x16>
 8022f32:	2aff      	cmp	r2, #255	; 0xff
 8022f34:	bf85      	ittet	hi
 8022f36:	238a      	movhi	r3, #138	; 0x8a
 8022f38:	6003      	strhi	r3, [r0, #0]
 8022f3a:	700a      	strbls	r2, [r1, #0]
 8022f3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8022f40:	bf98      	it	ls
 8022f42:	2001      	movls	r0, #1
 8022f44:	4770      	bx	lr
 8022f46:	4608      	mov	r0, r1
 8022f48:	4770      	bx	lr
	...

08022f4c <__assert_func>:
 8022f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022f4e:	4614      	mov	r4, r2
 8022f50:	461a      	mov	r2, r3
 8022f52:	4b09      	ldr	r3, [pc, #36]	; (8022f78 <__assert_func+0x2c>)
 8022f54:	681b      	ldr	r3, [r3, #0]
 8022f56:	4605      	mov	r5, r0
 8022f58:	68d8      	ldr	r0, [r3, #12]
 8022f5a:	b14c      	cbz	r4, 8022f70 <__assert_func+0x24>
 8022f5c:	4b07      	ldr	r3, [pc, #28]	; (8022f7c <__assert_func+0x30>)
 8022f5e:	9100      	str	r1, [sp, #0]
 8022f60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022f64:	4906      	ldr	r1, [pc, #24]	; (8022f80 <__assert_func+0x34>)
 8022f66:	462b      	mov	r3, r5
 8022f68:	f000 f80e 	bl	8022f88 <fiprintf>
 8022f6c:	f000 f99e 	bl	80232ac <abort>
 8022f70:	4b04      	ldr	r3, [pc, #16]	; (8022f84 <__assert_func+0x38>)
 8022f72:	461c      	mov	r4, r3
 8022f74:	e7f3      	b.n	8022f5e <__assert_func+0x12>
 8022f76:	bf00      	nop
 8022f78:	200002b8 	.word	0x200002b8
 8022f7c:	0802444d 	.word	0x0802444d
 8022f80:	0802445a 	.word	0x0802445a
 8022f84:	08024488 	.word	0x08024488

08022f88 <fiprintf>:
 8022f88:	b40e      	push	{r1, r2, r3}
 8022f8a:	b503      	push	{r0, r1, lr}
 8022f8c:	4601      	mov	r1, r0
 8022f8e:	ab03      	add	r3, sp, #12
 8022f90:	4805      	ldr	r0, [pc, #20]	; (8022fa8 <fiprintf+0x20>)
 8022f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8022f96:	6800      	ldr	r0, [r0, #0]
 8022f98:	9301      	str	r3, [sp, #4]
 8022f9a:	f000 f857 	bl	802304c <_vfiprintf_r>
 8022f9e:	b002      	add	sp, #8
 8022fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8022fa4:	b003      	add	sp, #12
 8022fa6:	4770      	bx	lr
 8022fa8:	200002b8 	.word	0x200002b8

08022fac <_realloc_r>:
 8022fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fae:	4607      	mov	r7, r0
 8022fb0:	4614      	mov	r4, r2
 8022fb2:	460e      	mov	r6, r1
 8022fb4:	b921      	cbnz	r1, 8022fc0 <_realloc_r+0x14>
 8022fb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022fba:	4611      	mov	r1, r2
 8022fbc:	f7fc ba3a 	b.w	801f434 <_malloc_r>
 8022fc0:	b922      	cbnz	r2, 8022fcc <_realloc_r+0x20>
 8022fc2:	f7fc f9e7 	bl	801f394 <_free_r>
 8022fc6:	4625      	mov	r5, r4
 8022fc8:	4628      	mov	r0, r5
 8022fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022fcc:	f000 f975 	bl	80232ba <_malloc_usable_size_r>
 8022fd0:	42a0      	cmp	r0, r4
 8022fd2:	d20f      	bcs.n	8022ff4 <_realloc_r+0x48>
 8022fd4:	4621      	mov	r1, r4
 8022fd6:	4638      	mov	r0, r7
 8022fd8:	f7fc fa2c 	bl	801f434 <_malloc_r>
 8022fdc:	4605      	mov	r5, r0
 8022fde:	2800      	cmp	r0, #0
 8022fe0:	d0f2      	beq.n	8022fc8 <_realloc_r+0x1c>
 8022fe2:	4631      	mov	r1, r6
 8022fe4:	4622      	mov	r2, r4
 8022fe6:	f7fc f995 	bl	801f314 <memcpy>
 8022fea:	4631      	mov	r1, r6
 8022fec:	4638      	mov	r0, r7
 8022fee:	f7fc f9d1 	bl	801f394 <_free_r>
 8022ff2:	e7e9      	b.n	8022fc8 <_realloc_r+0x1c>
 8022ff4:	4635      	mov	r5, r6
 8022ff6:	e7e7      	b.n	8022fc8 <_realloc_r+0x1c>

08022ff8 <__sfputc_r>:
 8022ff8:	6893      	ldr	r3, [r2, #8]
 8022ffa:	3b01      	subs	r3, #1
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	b410      	push	{r4}
 8023000:	6093      	str	r3, [r2, #8]
 8023002:	da08      	bge.n	8023016 <__sfputc_r+0x1e>
 8023004:	6994      	ldr	r4, [r2, #24]
 8023006:	42a3      	cmp	r3, r4
 8023008:	db01      	blt.n	802300e <__sfputc_r+0x16>
 802300a:	290a      	cmp	r1, #10
 802300c:	d103      	bne.n	8023016 <__sfputc_r+0x1e>
 802300e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023012:	f7fd be39 	b.w	8020c88 <__swbuf_r>
 8023016:	6813      	ldr	r3, [r2, #0]
 8023018:	1c58      	adds	r0, r3, #1
 802301a:	6010      	str	r0, [r2, #0]
 802301c:	7019      	strb	r1, [r3, #0]
 802301e:	4608      	mov	r0, r1
 8023020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023024:	4770      	bx	lr

08023026 <__sfputs_r>:
 8023026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023028:	4606      	mov	r6, r0
 802302a:	460f      	mov	r7, r1
 802302c:	4614      	mov	r4, r2
 802302e:	18d5      	adds	r5, r2, r3
 8023030:	42ac      	cmp	r4, r5
 8023032:	d101      	bne.n	8023038 <__sfputs_r+0x12>
 8023034:	2000      	movs	r0, #0
 8023036:	e007      	b.n	8023048 <__sfputs_r+0x22>
 8023038:	f814 1b01 	ldrb.w	r1, [r4], #1
 802303c:	463a      	mov	r2, r7
 802303e:	4630      	mov	r0, r6
 8023040:	f7ff ffda 	bl	8022ff8 <__sfputc_r>
 8023044:	1c43      	adds	r3, r0, #1
 8023046:	d1f3      	bne.n	8023030 <__sfputs_r+0xa>
 8023048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802304c <_vfiprintf_r>:
 802304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023050:	460d      	mov	r5, r1
 8023052:	b09d      	sub	sp, #116	; 0x74
 8023054:	4614      	mov	r4, r2
 8023056:	4698      	mov	r8, r3
 8023058:	4606      	mov	r6, r0
 802305a:	b118      	cbz	r0, 8023064 <_vfiprintf_r+0x18>
 802305c:	6983      	ldr	r3, [r0, #24]
 802305e:	b90b      	cbnz	r3, 8023064 <_vfiprintf_r+0x18>
 8023060:	f7fc f81e 	bl	801f0a0 <__sinit>
 8023064:	4b89      	ldr	r3, [pc, #548]	; (802328c <_vfiprintf_r+0x240>)
 8023066:	429d      	cmp	r5, r3
 8023068:	d11b      	bne.n	80230a2 <_vfiprintf_r+0x56>
 802306a:	6875      	ldr	r5, [r6, #4]
 802306c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802306e:	07d9      	lsls	r1, r3, #31
 8023070:	d405      	bmi.n	802307e <_vfiprintf_r+0x32>
 8023072:	89ab      	ldrh	r3, [r5, #12]
 8023074:	059a      	lsls	r2, r3, #22
 8023076:	d402      	bmi.n	802307e <_vfiprintf_r+0x32>
 8023078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802307a:	f7fc f8d4 	bl	801f226 <__retarget_lock_acquire_recursive>
 802307e:	89ab      	ldrh	r3, [r5, #12]
 8023080:	071b      	lsls	r3, r3, #28
 8023082:	d501      	bpl.n	8023088 <_vfiprintf_r+0x3c>
 8023084:	692b      	ldr	r3, [r5, #16]
 8023086:	b9eb      	cbnz	r3, 80230c4 <_vfiprintf_r+0x78>
 8023088:	4629      	mov	r1, r5
 802308a:	4630      	mov	r0, r6
 802308c:	f7fd fe60 	bl	8020d50 <__swsetup_r>
 8023090:	b1c0      	cbz	r0, 80230c4 <_vfiprintf_r+0x78>
 8023092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023094:	07dc      	lsls	r4, r3, #31
 8023096:	d50e      	bpl.n	80230b6 <_vfiprintf_r+0x6a>
 8023098:	f04f 30ff 	mov.w	r0, #4294967295
 802309c:	b01d      	add	sp, #116	; 0x74
 802309e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230a2:	4b7b      	ldr	r3, [pc, #492]	; (8023290 <_vfiprintf_r+0x244>)
 80230a4:	429d      	cmp	r5, r3
 80230a6:	d101      	bne.n	80230ac <_vfiprintf_r+0x60>
 80230a8:	68b5      	ldr	r5, [r6, #8]
 80230aa:	e7df      	b.n	802306c <_vfiprintf_r+0x20>
 80230ac:	4b79      	ldr	r3, [pc, #484]	; (8023294 <_vfiprintf_r+0x248>)
 80230ae:	429d      	cmp	r5, r3
 80230b0:	bf08      	it	eq
 80230b2:	68f5      	ldreq	r5, [r6, #12]
 80230b4:	e7da      	b.n	802306c <_vfiprintf_r+0x20>
 80230b6:	89ab      	ldrh	r3, [r5, #12]
 80230b8:	0598      	lsls	r0, r3, #22
 80230ba:	d4ed      	bmi.n	8023098 <_vfiprintf_r+0x4c>
 80230bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80230be:	f7fc f8b3 	bl	801f228 <__retarget_lock_release_recursive>
 80230c2:	e7e9      	b.n	8023098 <_vfiprintf_r+0x4c>
 80230c4:	2300      	movs	r3, #0
 80230c6:	9309      	str	r3, [sp, #36]	; 0x24
 80230c8:	2320      	movs	r3, #32
 80230ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80230ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80230d2:	2330      	movs	r3, #48	; 0x30
 80230d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023298 <_vfiprintf_r+0x24c>
 80230d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80230dc:	f04f 0901 	mov.w	r9, #1
 80230e0:	4623      	mov	r3, r4
 80230e2:	469a      	mov	sl, r3
 80230e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80230e8:	b10a      	cbz	r2, 80230ee <_vfiprintf_r+0xa2>
 80230ea:	2a25      	cmp	r2, #37	; 0x25
 80230ec:	d1f9      	bne.n	80230e2 <_vfiprintf_r+0x96>
 80230ee:	ebba 0b04 	subs.w	fp, sl, r4
 80230f2:	d00b      	beq.n	802310c <_vfiprintf_r+0xc0>
 80230f4:	465b      	mov	r3, fp
 80230f6:	4622      	mov	r2, r4
 80230f8:	4629      	mov	r1, r5
 80230fa:	4630      	mov	r0, r6
 80230fc:	f7ff ff93 	bl	8023026 <__sfputs_r>
 8023100:	3001      	adds	r0, #1
 8023102:	f000 80aa 	beq.w	802325a <_vfiprintf_r+0x20e>
 8023106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023108:	445a      	add	r2, fp
 802310a:	9209      	str	r2, [sp, #36]	; 0x24
 802310c:	f89a 3000 	ldrb.w	r3, [sl]
 8023110:	2b00      	cmp	r3, #0
 8023112:	f000 80a2 	beq.w	802325a <_vfiprintf_r+0x20e>
 8023116:	2300      	movs	r3, #0
 8023118:	f04f 32ff 	mov.w	r2, #4294967295
 802311c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023120:	f10a 0a01 	add.w	sl, sl, #1
 8023124:	9304      	str	r3, [sp, #16]
 8023126:	9307      	str	r3, [sp, #28]
 8023128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802312c:	931a      	str	r3, [sp, #104]	; 0x68
 802312e:	4654      	mov	r4, sl
 8023130:	2205      	movs	r2, #5
 8023132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023136:	4858      	ldr	r0, [pc, #352]	; (8023298 <_vfiprintf_r+0x24c>)
 8023138:	f7dd f87a 	bl	8000230 <memchr>
 802313c:	9a04      	ldr	r2, [sp, #16]
 802313e:	b9d8      	cbnz	r0, 8023178 <_vfiprintf_r+0x12c>
 8023140:	06d1      	lsls	r1, r2, #27
 8023142:	bf44      	itt	mi
 8023144:	2320      	movmi	r3, #32
 8023146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802314a:	0713      	lsls	r3, r2, #28
 802314c:	bf44      	itt	mi
 802314e:	232b      	movmi	r3, #43	; 0x2b
 8023150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023154:	f89a 3000 	ldrb.w	r3, [sl]
 8023158:	2b2a      	cmp	r3, #42	; 0x2a
 802315a:	d015      	beq.n	8023188 <_vfiprintf_r+0x13c>
 802315c:	9a07      	ldr	r2, [sp, #28]
 802315e:	4654      	mov	r4, sl
 8023160:	2000      	movs	r0, #0
 8023162:	f04f 0c0a 	mov.w	ip, #10
 8023166:	4621      	mov	r1, r4
 8023168:	f811 3b01 	ldrb.w	r3, [r1], #1
 802316c:	3b30      	subs	r3, #48	; 0x30
 802316e:	2b09      	cmp	r3, #9
 8023170:	d94e      	bls.n	8023210 <_vfiprintf_r+0x1c4>
 8023172:	b1b0      	cbz	r0, 80231a2 <_vfiprintf_r+0x156>
 8023174:	9207      	str	r2, [sp, #28]
 8023176:	e014      	b.n	80231a2 <_vfiprintf_r+0x156>
 8023178:	eba0 0308 	sub.w	r3, r0, r8
 802317c:	fa09 f303 	lsl.w	r3, r9, r3
 8023180:	4313      	orrs	r3, r2
 8023182:	9304      	str	r3, [sp, #16]
 8023184:	46a2      	mov	sl, r4
 8023186:	e7d2      	b.n	802312e <_vfiprintf_r+0xe2>
 8023188:	9b03      	ldr	r3, [sp, #12]
 802318a:	1d19      	adds	r1, r3, #4
 802318c:	681b      	ldr	r3, [r3, #0]
 802318e:	9103      	str	r1, [sp, #12]
 8023190:	2b00      	cmp	r3, #0
 8023192:	bfbb      	ittet	lt
 8023194:	425b      	neglt	r3, r3
 8023196:	f042 0202 	orrlt.w	r2, r2, #2
 802319a:	9307      	strge	r3, [sp, #28]
 802319c:	9307      	strlt	r3, [sp, #28]
 802319e:	bfb8      	it	lt
 80231a0:	9204      	strlt	r2, [sp, #16]
 80231a2:	7823      	ldrb	r3, [r4, #0]
 80231a4:	2b2e      	cmp	r3, #46	; 0x2e
 80231a6:	d10c      	bne.n	80231c2 <_vfiprintf_r+0x176>
 80231a8:	7863      	ldrb	r3, [r4, #1]
 80231aa:	2b2a      	cmp	r3, #42	; 0x2a
 80231ac:	d135      	bne.n	802321a <_vfiprintf_r+0x1ce>
 80231ae:	9b03      	ldr	r3, [sp, #12]
 80231b0:	1d1a      	adds	r2, r3, #4
 80231b2:	681b      	ldr	r3, [r3, #0]
 80231b4:	9203      	str	r2, [sp, #12]
 80231b6:	2b00      	cmp	r3, #0
 80231b8:	bfb8      	it	lt
 80231ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80231be:	3402      	adds	r4, #2
 80231c0:	9305      	str	r3, [sp, #20]
 80231c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80232a8 <_vfiprintf_r+0x25c>
 80231c6:	7821      	ldrb	r1, [r4, #0]
 80231c8:	2203      	movs	r2, #3
 80231ca:	4650      	mov	r0, sl
 80231cc:	f7dd f830 	bl	8000230 <memchr>
 80231d0:	b140      	cbz	r0, 80231e4 <_vfiprintf_r+0x198>
 80231d2:	2340      	movs	r3, #64	; 0x40
 80231d4:	eba0 000a 	sub.w	r0, r0, sl
 80231d8:	fa03 f000 	lsl.w	r0, r3, r0
 80231dc:	9b04      	ldr	r3, [sp, #16]
 80231de:	4303      	orrs	r3, r0
 80231e0:	3401      	adds	r4, #1
 80231e2:	9304      	str	r3, [sp, #16]
 80231e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80231e8:	482c      	ldr	r0, [pc, #176]	; (802329c <_vfiprintf_r+0x250>)
 80231ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80231ee:	2206      	movs	r2, #6
 80231f0:	f7dd f81e 	bl	8000230 <memchr>
 80231f4:	2800      	cmp	r0, #0
 80231f6:	d03f      	beq.n	8023278 <_vfiprintf_r+0x22c>
 80231f8:	4b29      	ldr	r3, [pc, #164]	; (80232a0 <_vfiprintf_r+0x254>)
 80231fa:	bb1b      	cbnz	r3, 8023244 <_vfiprintf_r+0x1f8>
 80231fc:	9b03      	ldr	r3, [sp, #12]
 80231fe:	3307      	adds	r3, #7
 8023200:	f023 0307 	bic.w	r3, r3, #7
 8023204:	3308      	adds	r3, #8
 8023206:	9303      	str	r3, [sp, #12]
 8023208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802320a:	443b      	add	r3, r7
 802320c:	9309      	str	r3, [sp, #36]	; 0x24
 802320e:	e767      	b.n	80230e0 <_vfiprintf_r+0x94>
 8023210:	fb0c 3202 	mla	r2, ip, r2, r3
 8023214:	460c      	mov	r4, r1
 8023216:	2001      	movs	r0, #1
 8023218:	e7a5      	b.n	8023166 <_vfiprintf_r+0x11a>
 802321a:	2300      	movs	r3, #0
 802321c:	3401      	adds	r4, #1
 802321e:	9305      	str	r3, [sp, #20]
 8023220:	4619      	mov	r1, r3
 8023222:	f04f 0c0a 	mov.w	ip, #10
 8023226:	4620      	mov	r0, r4
 8023228:	f810 2b01 	ldrb.w	r2, [r0], #1
 802322c:	3a30      	subs	r2, #48	; 0x30
 802322e:	2a09      	cmp	r2, #9
 8023230:	d903      	bls.n	802323a <_vfiprintf_r+0x1ee>
 8023232:	2b00      	cmp	r3, #0
 8023234:	d0c5      	beq.n	80231c2 <_vfiprintf_r+0x176>
 8023236:	9105      	str	r1, [sp, #20]
 8023238:	e7c3      	b.n	80231c2 <_vfiprintf_r+0x176>
 802323a:	fb0c 2101 	mla	r1, ip, r1, r2
 802323e:	4604      	mov	r4, r0
 8023240:	2301      	movs	r3, #1
 8023242:	e7f0      	b.n	8023226 <_vfiprintf_r+0x1da>
 8023244:	ab03      	add	r3, sp, #12
 8023246:	9300      	str	r3, [sp, #0]
 8023248:	462a      	mov	r2, r5
 802324a:	4b16      	ldr	r3, [pc, #88]	; (80232a4 <_vfiprintf_r+0x258>)
 802324c:	a904      	add	r1, sp, #16
 802324e:	4630      	mov	r0, r6
 8023250:	f7fc f9ea 	bl	801f628 <_printf_float>
 8023254:	4607      	mov	r7, r0
 8023256:	1c78      	adds	r0, r7, #1
 8023258:	d1d6      	bne.n	8023208 <_vfiprintf_r+0x1bc>
 802325a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802325c:	07d9      	lsls	r1, r3, #31
 802325e:	d405      	bmi.n	802326c <_vfiprintf_r+0x220>
 8023260:	89ab      	ldrh	r3, [r5, #12]
 8023262:	059a      	lsls	r2, r3, #22
 8023264:	d402      	bmi.n	802326c <_vfiprintf_r+0x220>
 8023266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023268:	f7fb ffde 	bl	801f228 <__retarget_lock_release_recursive>
 802326c:	89ab      	ldrh	r3, [r5, #12]
 802326e:	065b      	lsls	r3, r3, #25
 8023270:	f53f af12 	bmi.w	8023098 <_vfiprintf_r+0x4c>
 8023274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023276:	e711      	b.n	802309c <_vfiprintf_r+0x50>
 8023278:	ab03      	add	r3, sp, #12
 802327a:	9300      	str	r3, [sp, #0]
 802327c:	462a      	mov	r2, r5
 802327e:	4b09      	ldr	r3, [pc, #36]	; (80232a4 <_vfiprintf_r+0x258>)
 8023280:	a904      	add	r1, sp, #16
 8023282:	4630      	mov	r0, r6
 8023284:	f7fc fc74 	bl	801fb70 <_printf_i>
 8023288:	e7e4      	b.n	8023254 <_vfiprintf_r+0x208>
 802328a:	bf00      	nop
 802328c:	08024100 	.word	0x08024100
 8023290:	08024120 	.word	0x08024120
 8023294:	080240e0 	.word	0x080240e0
 8023298:	0802443c 	.word	0x0802443c
 802329c:	08024446 	.word	0x08024446
 80232a0:	0801f629 	.word	0x0801f629
 80232a4:	08023027 	.word	0x08023027
 80232a8:	08024442 	.word	0x08024442

080232ac <abort>:
 80232ac:	b508      	push	{r3, lr}
 80232ae:	2006      	movs	r0, #6
 80232b0:	f000 f834 	bl	802331c <raise>
 80232b4:	2001      	movs	r0, #1
 80232b6:	f7fb fd5f 	bl	801ed78 <_exit>

080232ba <_malloc_usable_size_r>:
 80232ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80232be:	1f18      	subs	r0, r3, #4
 80232c0:	2b00      	cmp	r3, #0
 80232c2:	bfbc      	itt	lt
 80232c4:	580b      	ldrlt	r3, [r1, r0]
 80232c6:	18c0      	addlt	r0, r0, r3
 80232c8:	4770      	bx	lr

080232ca <_raise_r>:
 80232ca:	291f      	cmp	r1, #31
 80232cc:	b538      	push	{r3, r4, r5, lr}
 80232ce:	4604      	mov	r4, r0
 80232d0:	460d      	mov	r5, r1
 80232d2:	d904      	bls.n	80232de <_raise_r+0x14>
 80232d4:	2316      	movs	r3, #22
 80232d6:	6003      	str	r3, [r0, #0]
 80232d8:	f04f 30ff 	mov.w	r0, #4294967295
 80232dc:	bd38      	pop	{r3, r4, r5, pc}
 80232de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80232e0:	b112      	cbz	r2, 80232e8 <_raise_r+0x1e>
 80232e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80232e6:	b94b      	cbnz	r3, 80232fc <_raise_r+0x32>
 80232e8:	4620      	mov	r0, r4
 80232ea:	f000 f831 	bl	8023350 <_getpid_r>
 80232ee:	462a      	mov	r2, r5
 80232f0:	4601      	mov	r1, r0
 80232f2:	4620      	mov	r0, r4
 80232f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80232f8:	f000 b818 	b.w	802332c <_kill_r>
 80232fc:	2b01      	cmp	r3, #1
 80232fe:	d00a      	beq.n	8023316 <_raise_r+0x4c>
 8023300:	1c59      	adds	r1, r3, #1
 8023302:	d103      	bne.n	802330c <_raise_r+0x42>
 8023304:	2316      	movs	r3, #22
 8023306:	6003      	str	r3, [r0, #0]
 8023308:	2001      	movs	r0, #1
 802330a:	e7e7      	b.n	80232dc <_raise_r+0x12>
 802330c:	2400      	movs	r4, #0
 802330e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023312:	4628      	mov	r0, r5
 8023314:	4798      	blx	r3
 8023316:	2000      	movs	r0, #0
 8023318:	e7e0      	b.n	80232dc <_raise_r+0x12>
	...

0802331c <raise>:
 802331c:	4b02      	ldr	r3, [pc, #8]	; (8023328 <raise+0xc>)
 802331e:	4601      	mov	r1, r0
 8023320:	6818      	ldr	r0, [r3, #0]
 8023322:	f7ff bfd2 	b.w	80232ca <_raise_r>
 8023326:	bf00      	nop
 8023328:	200002b8 	.word	0x200002b8

0802332c <_kill_r>:
 802332c:	b538      	push	{r3, r4, r5, lr}
 802332e:	4d07      	ldr	r5, [pc, #28]	; (802334c <_kill_r+0x20>)
 8023330:	2300      	movs	r3, #0
 8023332:	4604      	mov	r4, r0
 8023334:	4608      	mov	r0, r1
 8023336:	4611      	mov	r1, r2
 8023338:	602b      	str	r3, [r5, #0]
 802333a:	f7fb fd0d 	bl	801ed58 <_kill>
 802333e:	1c43      	adds	r3, r0, #1
 8023340:	d102      	bne.n	8023348 <_kill_r+0x1c>
 8023342:	682b      	ldr	r3, [r5, #0]
 8023344:	b103      	cbz	r3, 8023348 <_kill_r+0x1c>
 8023346:	6023      	str	r3, [r4, #0]
 8023348:	bd38      	pop	{r3, r4, r5, pc}
 802334a:	bf00      	nop
 802334c:	2001d46c 	.word	0x2001d46c

08023350 <_getpid_r>:
 8023350:	f7fb bcfa 	b.w	801ed48 <_getpid>

08023354 <_init>:
 8023354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023356:	bf00      	nop
 8023358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802335a:	bc08      	pop	{r3}
 802335c:	469e      	mov	lr, r3
 802335e:	4770      	bx	lr

08023360 <_fini>:
 8023360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023362:	bf00      	nop
 8023364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023366:	bc08      	pop	{r3}
 8023368:	469e      	mov	lr, r3
 802336a:	4770      	bx	lr
