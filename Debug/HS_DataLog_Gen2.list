
HS_DataLog_Gen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002117c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001084  08021340  08021340  00031340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080223c4  080223c4  00040260  2**0
                  CONTENTS
  4 .ARM          00000008  080223c4  080223c4  000323c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080223cc  080223cc  00040260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080223cc  080223cc  000323cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080223d0  080223d0  000323d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  080223d4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00040260  2**0
                  CONTENTS
 10 .bss          00018fc4  20000260  20000260  00040260  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20019224  20019224  00040260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040260  2**0
                  CONTENTS, READONLY
 13 .debug_info   00078f9e  00000000  00000000  00040290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000abf8  00000000  00000000  000b922e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004058  00000000  00000000  000c3e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003c80  00000000  00000000  000c7e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00047e28  00000000  00000000  000cbb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00056ab1  00000000  00000000  00113928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e91f  00000000  00000000  0016a3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002d8cf8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00012688  00000000  00000000  002d8d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000260 	.word	0x20000260
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08021324 	.word	0x08021324

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000264 	.word	0x20000264
 80001fc:	08021324 	.word	0x08021324

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <HSD_JSON_set_allocation_functions>:
* @param  malloc_function: malloc() implementation
* @param  free_function: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_set_allocation_functions(void * (*malloc_function)(size_t), void (*free_function)(void *))
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  json_set_allocation_functions(malloc_function, free_function);
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f01b fd85 	bl	801cb58 <json_set_allocation_functions>
  JSON_free_function = free_function;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HSD_JSON_set_allocation_functions+0x24>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	6013      	str	r3, [r2, #0]
  return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000027c 	.word	0x2000027c

08001064 <HSD_JSON_free>:

int32_t HSD_JSON_free(void * mem)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  JSON_free_function(mem);
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HSD_JSON_free+0x1c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	4798      	blx	r3
  return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000027c 	.word	0x2000027c

08001084 <HSD_JSON_serialize_Device>:
* @param  Device: COM_Device_t struct instance to be serialized 
* @param  SerializedJSON: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_serialize_Device(COM_Device_t *Device, char **SerializedJSON, uint8_t pretty)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]
  return get_JSON_from_Device(Device, SerializedJSON, pretty);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	461a      	mov	r2, r3
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 f813 	bl	80010c4 <get_JSON_from_Device>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HSD_JSON_parse_Device>:
{
  return get_JSON_from_SubSensorStatus(SubSensorStatus, SerializedJSON);
}

int32_t HSD_JSON_parse_Device(char *SerializedJSON, COM_Device_t *Device)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  return parse_Device_from_JSON(SerializedJSON, Device);
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f87f 	bl	80011b8 <parse_Device_from_JSON>
 80010ba:	4603      	mov	r3, r0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <get_JSON_from_Device>:
}


/* Private function ----------------------------------------------------------*/
static int32_t get_JSON_from_Device(COM_Device_t *device, char **serialized_string, uint8_t pretty)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	4613      	mov	r3, r2
 80010d0:	71fb      	strb	r3, [r7, #7]
  JSON_Object *JSON_Device;
  JSON_Array *JSON_SensorArray;
  uint32_t size;
  uint32_t i;
  
  tempJSON = json_value_init_object();
 80010d2:	f01b f999 	bl	801c408 <json_value_init_object>
 80010d6:	61f8      	str	r0, [r7, #28]
  JSON_Device = json_value_get_object(tempJSON);
 80010d8:	69f8      	ldr	r0, [r7, #28]
 80010da:	f01b f902 	bl	801c2e2 <json_value_get_object>
 80010de:	61b8      	str	r0, [r7, #24]
  
  json_object_dotset_string(JSON_Device, "device.deviceInfo.serialNumber", device->deviceDescriptor.serialNumber);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4930      	ldr	r1, [pc, #192]	; (80011a8 <get_JSON_from_Device+0xe4>)
 80010e6:	69b8      	ldr	r0, [r7, #24]
 80010e8:	f01b fcc8 	bl	801ca7c <json_object_dotset_string>
  json_object_dotset_string(JSON_Device, "device.deviceInfo.alias", device->deviceDescriptor.alias);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3315      	adds	r3, #21
 80010f0:	461a      	mov	r2, r3
 80010f2:	492e      	ldr	r1, [pc, #184]	; (80011ac <get_JSON_from_Device+0xe8>)
 80010f4:	69b8      	ldr	r0, [r7, #24]
 80010f6:	f01b fcc1 	bl	801ca7c <json_object_dotset_string>
  json_object_dotset_number(JSON_Device, "device.deviceInfo.nSensor", device->deviceDescriptor.nSensor);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa28 	bl	8000554 <__aeabi_ui2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	ec43 2b10 	vmov	d0, r2, r3
 800110c:	4928      	ldr	r1, [pc, #160]	; (80011b0 <get_JSON_from_Device+0xec>)
 800110e:	69b8      	ldr	r0, [r7, #24]
 8001110:	f01b fcd8 	bl	801cac4 <json_object_dotset_number>
  
  json_object_dotset_value(JSON_Device, "device.sensor", json_value_init_array());
 8001114:	f01b f9a4 	bl	801c460 <json_value_init_array>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4925      	ldr	r1, [pc, #148]	; (80011b4 <get_JSON_from_Device+0xf0>)
 800111e:	69b8      	ldr	r0, [r7, #24]
 8001120:	f01b fc1f 	bl	801c962 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_Device, "device.sensor");
 8001124:	4923      	ldr	r1, [pc, #140]	; (80011b4 <get_JSON_from_Device+0xf0>)
 8001126:	69b8      	ldr	r0, [r7, #24]
 8001128:	f01b f810 	bl	801c14c <json_object_dotget_array>
 800112c:	6178      	str	r0, [r7, #20]
  
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
 8001132:	e013      	b.n	800115c <get_JSON_from_Device+0x98>
  {        
    tempJSON1 = json_value_init_object();  
 8001134:	f01b f968 	bl	801c408 <json_value_init_object>
 8001138:	6138      	str	r0, [r7, #16]
    create_JSON_Sensor(device->sensors[i], tempJSON1);    
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	330a      	adds	r3, #10
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	6939      	ldr	r1, [r7, #16]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f9cd 	bl	80014e8 <create_JSON_Sensor>
    json_array_append_value(JSON_SensorArray,tempJSON1);
 800114e:	6939      	ldr	r1, [r7, #16]
 8001150:	6978      	ldr	r0, [r7, #20]
 8001152:	f01b fb71 	bl	801c838 <json_array_append_value>
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	3301      	adds	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	6a3a      	ldr	r2, [r7, #32]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3e6      	bcc.n	8001134 <get_JSON_from_Device+0x70>
  }  
  
  /* convert to a json string and write to file */
  if (pretty == 1)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d10a      	bne.n	8001182 <get_JSON_from_Device+0xbe>
  {
    *serialized_string = json_serialize_to_string_pretty(tempJSON);
 800116c:	69f8      	ldr	r0, [r7, #28]
 800116e:	f01b fb23 	bl	801c7b8 <json_serialize_to_string_pretty>
 8001172:	4602      	mov	r2, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	601a      	str	r2, [r3, #0]
    size = json_serialization_size_pretty(tempJSON);    
 8001178:	69f8      	ldr	r0, [r7, #28]
 800117a:	f01b fad9 	bl	801c730 <json_serialization_size_pretty>
 800117e:	6278      	str	r0, [r7, #36]	; 0x24
 8001180:	e009      	b.n	8001196 <get_JSON_from_Device+0xd2>
  }
  else
  {
    *serialized_string = json_serialize_to_string(tempJSON);
 8001182:	69f8      	ldr	r0, [r7, #28]
 8001184:	f01b faa2 	bl	801c6cc <json_serialize_to_string>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	601a      	str	r2, [r3, #0]
    size = json_serialization_size(tempJSON);    
 800118e:	69f8      	ldr	r0, [r7, #28]
 8001190:	f01b fa58 	bl	801c644 <json_serialization_size>
 8001194:	6278      	str	r0, [r7, #36]	; 0x24
  }
  
  json_value_free(tempJSON);
 8001196:	69f8      	ldr	r0, [r7, #28]
 8001198:	f01b f908 	bl	801c3ac <json_value_free>
  
  return size;    
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08021340 	.word	0x08021340
 80011ac:	08021360 	.word	0x08021360
 80011b0:	08021378 	.word	0x08021378
 80011b4:	08021394 	.word	0x08021394

080011b8 <parse_Device_from_JSON>:
  return size;
}


static int32_t parse_Device_from_JSON(char *SerializedJSON, COM_Device_t* Device)
{  
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  char *StatusText;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f01a ff40 	bl	801c048 <json_parse_string>
 80011c8:	6238      	str	r0, [r7, #32]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80011ca:	6a38      	ldr	r0, [r7, #32]
 80011cc:	f01b f889 	bl	801c2e2 <json_value_get_object>
 80011d0:	61f8      	str	r0, [r7, #28]
  
  if (json_object_dothas_value(JSON_ParseHandler,"device.sensor"))
 80011d2:	4921      	ldr	r1, [pc, #132]	; (8001258 <parse_Device_from_JSON+0xa0>)
 80011d4:	69f8      	ldr	r0, [r7, #28]
 80011d6:	f01b f815 	bl	801c204 <json_object_dothas_value>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d033      	beq.n	8001248 <parse_Device_from_JSON+0x90>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "device.sensor");    
 80011e0:	491d      	ldr	r1, [pc, #116]	; (8001258 <parse_Device_from_JSON+0xa0>)
 80011e2:	69f8      	ldr	r0, [r7, #28]
 80011e4:	f01a ffb2 	bl	801c14c <json_object_dotget_array>
 80011e8:	61b8      	str	r0, [r7, #24]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 80011ea:	69b8      	ldr	r0, [r7, #24]
 80011ec:	f01b f84a 	bl	801c284 <json_array_get_count>
 80011f0:	6178      	str	r0, [r7, #20]
    
    for (ii = 0; ii < size; ii++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	e023      	b.n	8001240 <parse_Device_from_JSON+0x88>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);
 80011f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011fa:	69b8      	ldr	r0, [r7, #24]
 80011fc:	f01b f830 	bl	801c260 <json_array_get_object>
 8001200:	6138      	str	r0, [r7, #16]
      if (json_object_dothas_value(JSON_subSensorObj,"sensorStatus"))
 8001202:	4916      	ldr	r1, [pc, #88]	; (800125c <parse_Device_from_JSON+0xa4>)
 8001204:	6938      	ldr	r0, [r7, #16]
 8001206:	f01a fffd 	bl	801c204 <json_object_dothas_value>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d014      	beq.n	800123a <parse_Device_from_JSON+0x82>
      {
        StatusText = json_serialize_to_string(json_object_get_value(JSON_subSensorObj,"sensorStatus"));
 8001210:	4912      	ldr	r1, [pc, #72]	; (800125c <parse_Device_from_JSON+0xa4>)
 8001212:	6938      	ldr	r0, [r7, #16]
 8001214:	f01a ff3c 	bl	801c090 <json_object_get_value>
 8001218:	4603      	mov	r3, r0
 800121a:	4618      	mov	r0, r3
 800121c:	f01b fa56 	bl	801c6cc <json_serialize_to_string>
 8001220:	60f8      	str	r0, [r7, #12]
        parse_Status_from_JSON(StatusText, &Device->sensors[ii]->sensorStatus);
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	330a      	adds	r3, #10
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8001232:	4619      	mov	r1, r3
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 f813 	bl	8001260 <parse_Status_from_JSON>
    for (ii = 0; ii < size; ii++)
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	3301      	adds	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
 8001240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3d7      	bcc.n	80011f8 <parse_Device_from_JSON+0x40>
      }
    }
  }
  
  json_value_free(tempJSON);
 8001248:	6a38      	ldr	r0, [r7, #32]
 800124a:	f01b f8af 	bl	801c3ac <json_value_free>
  
  return 0;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08021394 	.word	0x08021394
 800125c:	080213a4 	.word	0x080213a4

08001260 <parse_Status_from_JSON>:
  
  return 0;  
}
volatile  int8_t subid = -1;
static int32_t parse_Status_from_JSON(char *SerializedJSON, COM_SensorStatus_t * sensorStatus)
{  
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f01a feec 	bl	801c048 <json_parse_string>
 8001270:	61b8      	str	r0, [r7, #24]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8001272:	69b8      	ldr	r0, [r7, #24]
 8001274:	f01b f835 	bl	801c2e2 <json_value_get_object>
 8001278:	6178      	str	r0, [r7, #20]
  
  if (json_object_dothas_value(JSON_ParseHandler,"odr"))
 800127a:	4990      	ldr	r1, [pc, #576]	; (80014bc <parse_Status_from_JSON+0x25c>)
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f01a ffc1 	bl	801c204 <json_object_dothas_value>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00c      	beq.n	80012a2 <parse_Status_from_JSON+0x42>
  {
    sensorStatus->ODR = json_object_dotget_number(JSON_ParseHandler, "odr");
 8001288:	498c      	ldr	r1, [pc, #560]	; (80014bc <parse_Status_from_JSON+0x25c>)
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f01a ff46 	bl	801c11c <json_object_dotget_number>
 8001290:	ec53 2b10 	vmov	r2, r3, d0
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fcce 	bl	8000c38 <__aeabi_d2f>
 800129c:	4602      	mov	r2, r0
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	601a      	str	r2, [r3, #0]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"usbDataPacketSize"))
 80012a2:	4987      	ldr	r1, [pc, #540]	; (80014c0 <parse_Status_from_JSON+0x260>)
 80012a4:	6978      	ldr	r0, [r7, #20]
 80012a6:	f01a ffad 	bl	801c204 <json_object_dothas_value>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00d      	beq.n	80012cc <parse_Status_from_JSON+0x6c>
  {
    sensorStatus->usbDataPacketSize = (uint16_t) json_object_dotget_number(JSON_ParseHandler, "usbDataPacketSize");
 80012b0:	4983      	ldr	r1, [pc, #524]	; (80014c0 <parse_Status_from_JSON+0x260>)
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f01a ff32 	bl	801c11c <json_object_dotget_number>
 80012b8:	ec53 2b10 	vmov	r2, r3, d0
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc9a 	bl	8000bf8 <__aeabi_d2uiz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	821a      	strh	r2, [r3, #16]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"sdWriteBufferSize"))
 80012cc:	497d      	ldr	r1, [pc, #500]	; (80014c4 <parse_Status_from_JSON+0x264>)
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f01a ff98 	bl	801c204 <json_object_dothas_value>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <parse_Status_from_JSON+0x94>
  {
    sensorStatus->sdWriteBufferSize = (uint32_t) json_object_dotget_number(JSON_ParseHandler, "sdWriteBufferSize");
 80012da:	497a      	ldr	r1, [pc, #488]	; (80014c4 <parse_Status_from_JSON+0x264>)
 80012dc:	6978      	ldr	r0, [r7, #20]
 80012de:	f01a ff1d 	bl	801c11c <json_object_dotget_number>
 80012e2:	ec53 2b10 	vmov	r2, r3, d0
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc85 	bl	8000bf8 <__aeabi_d2uiz>
 80012ee:	4602      	mov	r2, r0
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	615a      	str	r2, [r3, #20]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"comChannelNumber"))
 80012f4:	4974      	ldr	r1, [pc, #464]	; (80014c8 <parse_Status_from_JSON+0x268>)
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f01a ff84 	bl	801c204 <json_object_dothas_value>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00d      	beq.n	800131e <parse_Status_from_JSON+0xbe>
  {
    sensorStatus->comChannelNumber = (int16_t) json_object_dotget_number(JSON_ParseHandler, "comChannelNumber");
 8001302:	4971      	ldr	r1, [pc, #452]	; (80014c8 <parse_Status_from_JSON+0x268>)
 8001304:	6978      	ldr	r0, [r7, #20]
 8001306:	f01a ff09 	bl	801c11c <json_object_dotget_number>
 800130a:	ec53 2b10 	vmov	r2, r3, d0
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc49 	bl	8000ba8 <__aeabi_d2iz>
 8001316:	4603      	mov	r3, r0
 8001318:	b21a      	sxth	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	831a      	strh	r2, [r3, #24]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"samplesPerTs"))
 800131e:	496b      	ldr	r1, [pc, #428]	; (80014cc <parse_Status_from_JSON+0x26c>)
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f01a ff6f 	bl	801c204 <json_object_dothas_value>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00d      	beq.n	8001348 <parse_Status_from_JSON+0xe8>
  {
    sensorStatus->samplesPerTimestamp = (uint16_t)json_object_dotget_number(JSON_ParseHandler, "samplesPerTs");
 800132c:	4967      	ldr	r1, [pc, #412]	; (80014cc <parse_Status_from_JSON+0x26c>)
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f01a fef4 	bl	801c11c <json_object_dotget_number>
 8001334:	ec53 2b10 	vmov	r2, r3, d0
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fc5c 	bl	8000bf8 <__aeabi_d2uiz>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	819a      	strh	r2, [r3, #12]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"isActive"))
 8001348:	4961      	ldr	r1, [pc, #388]	; (80014d0 <parse_Status_from_JSON+0x270>)
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f01a ff5a 	bl	801c204 <json_object_dothas_value>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00d      	beq.n	8001372 <parse_Status_from_JSON+0x112>
  {
    if (json_object_dotget_boolean(JSON_ParseHandler,"isActive") == 1)
 8001356:	495e      	ldr	r1, [pc, #376]	; (80014d0 <parse_Status_from_JSON+0x270>)
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f01a ff09 	bl	801c170 <json_object_dotget_boolean>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d103      	bne.n	800136c <parse_Status_from_JSON+0x10c>
    {
      sensorStatus->isActive = 1;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	739a      	strb	r2, [r3, #14]
 800136a:	e002      	b.n	8001372 <parse_Status_from_JSON+0x112>
    }
    else 
    {
      sensorStatus->isActive = 0;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	739a      	strb	r2, [r3, #14]
    }
  }
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorStatus"))
 8001372:	4958      	ldr	r1, [pc, #352]	; (80014d4 <parse_Status_from_JSON+0x274>)
 8001374:	6978      	ldr	r0, [r7, #20]
 8001376:	f01a ff45 	bl	801c204 <json_object_dothas_value>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8094 	beq.w	80014aa <parse_Status_from_JSON+0x24a>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "subSensorStatus");    
 8001382:	4954      	ldr	r1, [pc, #336]	; (80014d4 <parse_Status_from_JSON+0x274>)
 8001384:	6978      	ldr	r0, [r7, #20]
 8001386:	f01a fee1 	bl	801c14c <json_object_dotget_array>
 800138a:	6138      	str	r0, [r7, #16]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 800138c:	6938      	ldr	r0, [r7, #16]
 800138e:	f01a ff79 	bl	801c284 <json_array_get_count>
 8001392:	60f8      	str	r0, [r7, #12]
    
    for (ii = 0; ii < size; ii++)
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	e082      	b.n	80014a0 <parse_Status_from_JSON+0x240>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);      
 800139a:	69f9      	ldr	r1, [r7, #28]
 800139c:	6938      	ldr	r0, [r7, #16]
 800139e:	f01a ff5f 	bl	801c260 <json_array_get_object>
 80013a2:	60b8      	str	r0, [r7, #8]
      
      if (json_object_dothas_value(JSON_subSensorObj,"id"))  
 80013a4:	494c      	ldr	r1, [pc, #304]	; (80014d8 <parse_Status_from_JSON+0x278>)
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	f01a ff2c 	bl	801c204 <json_object_dothas_value>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00e      	beq.n	80013d0 <parse_Status_from_JSON+0x170>
      {
        subid = (int8_t)json_object_dotget_number(JSON_subSensorObj, "id");
 80013b2:	4949      	ldr	r1, [pc, #292]	; (80014d8 <parse_Status_from_JSON+0x278>)
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f01a feb1 	bl	801c11c <json_object_dotget_number>
 80013ba:	ec53 2b10 	vmov	r2, r3, d0
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fbf1 	bl	8000ba8 <__aeabi_d2iz>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b25a      	sxtb	r2, r3
 80013ca:	4b44      	ldr	r3, [pc, #272]	; (80014dc <parse_Status_from_JSON+0x27c>)
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e003      	b.n	80013d8 <parse_Status_from_JSON+0x178>
      }
      else
      {
        subid = ii;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	b25a      	sxtb	r2, r3
 80013d4:	4b41      	ldr	r3, [pc, #260]	; (80014dc <parse_Status_from_JSON+0x27c>)
 80013d6:	701a      	strb	r2, [r3, #0]
      }
      
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 80013d8:	4941      	ldr	r1, [pc, #260]	; (80014e0 <parse_Status_from_JSON+0x280>)
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f01a ff12 	bl	801c204 <json_object_dothas_value>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d014      	beq.n	8001410 <parse_Status_from_JSON+0x1b0>
      {
        sensorStatus->subSensorStatus[subid].FS = json_object_dotget_number(JSON_subSensorObj, "fs");
 80013e6:	493e      	ldr	r1, [pc, #248]	; (80014e0 <parse_Status_from_JSON+0x280>)
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	f01a fe97 	bl	801c11c <json_object_dotget_number>
 80013ee:	ec51 0b10 	vmov	r0, r1, d0
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <parse_Status_from_JSON+0x27c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	461c      	mov	r4, r3
 80013fa:	f7ff fc1d 	bl	8000c38 <__aeabi_d2f>
 80013fe:	4601      	mov	r1, r0
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	4623      	mov	r3, r4
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4423      	add	r3, r4
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	331c      	adds	r3, #28
 800140e:	6019      	str	r1, [r3, #0]
      }
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 8001410:	4934      	ldr	r1, [pc, #208]	; (80014e4 <parse_Status_from_JSON+0x284>)
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f01a fef6 	bl	801c204 <json_object_dothas_value>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d014      	beq.n	8001448 <parse_Status_from_JSON+0x1e8>
      {
        sensorStatus->subSensorStatus[subid].sensitivity = json_object_dotget_number(JSON_subSensorObj, "sensitivity");
 800141e:	4931      	ldr	r1, [pc, #196]	; (80014e4 <parse_Status_from_JSON+0x284>)
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f01a fe7b 	bl	801c11c <json_object_dotget_number>
 8001426:	ec51 0b10 	vmov	r0, r1, d0
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <parse_Status_from_JSON+0x27c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b25b      	sxtb	r3, r3
 8001430:	461c      	mov	r4, r3
 8001432:	f7ff fc01 	bl	8000c38 <__aeabi_d2f>
 8001436:	4601      	mov	r1, r0
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4623      	mov	r3, r4
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4423      	add	r3, r4
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3320      	adds	r3, #32
 8001446:	6019      	str	r1, [r3, #0]
      }      
      if (json_object_dothas_value(JSON_subSensorObj,"isActive"))
 8001448:	4921      	ldr	r1, [pc, #132]	; (80014d0 <parse_Status_from_JSON+0x270>)
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f01a feda 	bl	801c204 <json_object_dothas_value>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d021      	beq.n	800149a <parse_Status_from_JSON+0x23a>
      {
        if (json_object_dotget_boolean(JSON_subSensorObj,"isActive") == 1)
 8001456:	491e      	ldr	r1, [pc, #120]	; (80014d0 <parse_Status_from_JSON+0x270>)
 8001458:	68b8      	ldr	r0, [r7, #8]
 800145a:	f01a fe89 	bl	801c170 <json_object_dotget_boolean>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d10d      	bne.n	8001480 <parse_Status_from_JSON+0x220>
        {
          sensorStatus->subSensorStatus[subid].isActive = 1;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <parse_Status_from_JSON+0x27c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	460b      	mov	r3, r1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	440b      	add	r3, r1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3324      	adds	r3, #36	; 0x24
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e00c      	b.n	800149a <parse_Status_from_JSON+0x23a>
        }
        else 
        {
          sensorStatus->subSensorStatus[subid].isActive = 0;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <parse_Status_from_JSON+0x27c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	460b      	mov	r3, r1
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	440b      	add	r3, r1
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3324      	adds	r3, #36	; 0x24
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
    for (ii = 0; ii < size; ii++)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3301      	adds	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f4ff af78 	bcc.w	800139a <parse_Status_from_JSON+0x13a>
        }
      }
    }
  }  
  json_value_free(tempJSON);
 80014aa:	69b8      	ldr	r0, [r7, #24]
 80014ac:	f01a ff7e 	bl	801c3ac <json_value_free>
  
  return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	0802141c 	.word	0x0802141c
 80014c0:	08021420 	.word	0x08021420
 80014c4:	08021434 	.word	0x08021434
 80014c8:	08021448 	.word	0x08021448
 80014cc:	0802145c 	.word	0x0802145c
 80014d0:	0802146c 	.word	0x0802146c
 80014d4:	08021478 	.word	0x08021478
 80014d8:	08021488 	.word	0x08021488
 80014dc:	20000000 	.word	0x20000000
 80014e0:	0802148c 	.word	0x0802148c
 80014e4:	08021490 	.word	0x08021490

080014e8 <create_JSON_Sensor>:
  
}


static void create_JSON_Sensor(COM_Sensor_t *sensor, JSON_Value *tempJSON)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON1;
  JSON_Value *tempJSON2;
  JSON_Array *JSON_SensorArray1;
  JSON_Array *JSON_SensorArray2;
  uint32_t ii = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t nSubSensors = sensor->sensorDescriptor.nSubSensors; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80014fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t nSensor = sensor->sensorDescriptor.id;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  
  JSON_Object *JSON_Sensor = json_value_get_object(tempJSON);
 8001508:	6838      	ldr	r0, [r7, #0]
 800150a:	f01a feea 	bl	801c2e2 <json_value_get_object>
 800150e:	6278      	str	r0, [r7, #36]	; 0x24
  
  json_object_dotset_number(JSON_Sensor, "id", nSensor);
 8001510:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f81d 	bl	8000554 <__aeabi_ui2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ec43 2b10 	vmov	d0, r2, r3
 8001522:	493e      	ldr	r1, [pc, #248]	; (800161c <create_JSON_Sensor+0x134>)
 8001524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001526:	f01b facd 	bl	801cac4 <json_object_dotset_number>
  
  JSON_Value *DescriptorJSON = json_value_init_object();
 800152a:	f01a ff6d 	bl	801c408 <json_value_init_object>
 800152e:	6238      	str	r0, [r7, #32]
  json_object_set_value(JSON_Sensor, "sensorDescriptor", DescriptorJSON);
 8001530:	6a3a      	ldr	r2, [r7, #32]
 8001532:	493b      	ldr	r1, [pc, #236]	; (8001620 <create_JSON_Sensor+0x138>)
 8001534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001536:	f01b f9be 	bl	801c8b6 <json_object_set_value>
  create_JSON_SensorDescriptor(&sensor->sensorDescriptor, DescriptorJSON); 
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a39      	ldr	r1, [r7, #32]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f876 	bl	8001630 <create_JSON_SensorDescriptor>
  
  json_object_dotset_value(JSON_Sensor, "sensorDescriptor.subSensorDescriptor", json_value_init_array());
 8001544:	f01a ff8c 	bl	801c460 <json_value_init_array>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4935      	ldr	r1, [pc, #212]	; (8001624 <create_JSON_Sensor+0x13c>)
 800154e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001550:	f01b fa07 	bl	801c962 <json_object_dotset_value>
  
  JSON_SensorArray1 = json_object_dotget_array(JSON_Sensor, "sensorDescriptor.subSensorDescriptor"); 
 8001554:	4933      	ldr	r1, [pc, #204]	; (8001624 <create_JSON_Sensor+0x13c>)
 8001556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001558:	f01a fdf8 	bl	801c14c <json_object_dotget_array>
 800155c:	61f8      	str	r0, [r7, #28]
  for (ii = 0; ii < nSubSensors; ii++)
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001562:	e015      	b.n	8001590 <create_JSON_Sensor+0xa8>
  {
    tempJSON1 = json_value_init_object();  
 8001564:	f01a ff50 	bl	801c408 <json_value_init_object>
 8001568:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor->sensorDescriptor.subSensorDescriptor[ii], tempJSON1);  
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	2254      	movs	r2, #84	; 0x54
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	3358      	adds	r3, #88	; 0x58
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	3304      	adds	r3, #4
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f9cf 	bl	8001920 <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	69f8      	ldr	r0, [r7, #28]
 8001586:	f01b f957 	bl	801c838 <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	3301      	adds	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001590:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001596:	429a      	cmp	r2, r3
 8001598:	d3e4      	bcc.n	8001564 <create_JSON_Sensor+0x7c>
  }
  
  JSON_Value *statusJSON = json_value_init_object();
 800159a:	f01a ff35 	bl	801c408 <json_value_init_object>
 800159e:	61b8      	str	r0, [r7, #24]
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4921      	ldr	r1, [pc, #132]	; (8001628 <create_JSON_Sensor+0x140>)
 80015a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015a6:	f01b f986 	bl	801c8b6 <json_object_set_value>
  create_JSON_SensorStatus(&sensor->sensorStatus, statusJSON); 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80015b0:	69b9      	ldr	r1, [r7, #24]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f934 	bl	8001820 <create_JSON_SensorStatus>
  
  json_object_dotset_value(JSON_Sensor, "sensorStatus.subSensorStatus", json_value_init_array());
 80015b8:	f01a ff52 	bl	801c460 <json_value_init_array>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	491a      	ldr	r1, [pc, #104]	; (800162c <create_JSON_Sensor+0x144>)
 80015c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015c4:	f01b f9cd 	bl	801c962 <json_object_dotset_value>
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 80015c8:	4918      	ldr	r1, [pc, #96]	; (800162c <create_JSON_Sensor+0x144>)
 80015ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015cc:	f01a fdbe 	bl	801c14c <json_object_dotget_array>
 80015d0:	6178      	str	r0, [r7, #20]
  for (ii = 0; ii < nSubSensors; ii++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e017      	b.n	8001608 <create_JSON_Sensor+0x120>
  {
    tempJSON2 = json_value_init_object();  
 80015d8:	f01a ff16 	bl	801c408 <json_value_init_object>
 80015dc:	6138      	str	r0, [r7, #16]
    create_JSON_SubSensorStatus(&sensor->sensorStatus.subSensorStatus[ii], tempJSON2);    
 80015de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	3308      	adds	r3, #8
 80015f2:	6939      	ldr	r1, [r7, #16]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fa5d 	bl	8001ab4 <create_JSON_SubSensorStatus>
    json_array_append_value(JSON_SensorArray2,tempJSON2);
 80015fa:	6939      	ldr	r1, [r7, #16]
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f01b f91b 	bl	801c838 <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	3301      	adds	r3, #1
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001608:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800160c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160e:	429a      	cmp	r2, r3
 8001610:	d3e2      	bcc.n	80015d8 <create_JSON_Sensor+0xf0>
  }
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3730      	adds	r7, #48	; 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08021488 	.word	0x08021488
 8001620:	080214bc 	.word	0x080214bc
 8001624:	080214d0 	.word	0x080214d0
 8001628:	080213a4 	.word	0x080213a4
 800162c:	080214f8 	.word	0x080214f8

08001630 <create_JSON_SensorDescriptor>:


static void create_JSON_SensorDescriptor(COM_SensorDescriptor_t *sensor_descriptor, JSON_Value *tempJSON)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  
  JSON_Object *JSON_SensorDescriptor = json_value_get_object(tempJSON);
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f01a fe4f 	bl	801c2e2 <json_value_get_object>
 8001644:	61b8      	str	r0, [r7, #24]
  JSON_Array *JSON_SensorArray1;
  JSON_Value *tempJSON1;
  
  json_object_dotset_string(JSON_SensorDescriptor, "name", sensor_descriptor->name);  
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3301      	adds	r3, #1
 800164a:	461a      	mov	r2, r3
 800164c:	4965      	ldr	r1, [pc, #404]	; (80017e4 <create_JSON_SensorDescriptor+0x1b4>)
 800164e:	69b8      	ldr	r0, [r7, #24]
 8001650:	f01b fa14 	bl	801ca7c <json_object_dotset_string>
  
  switch (sensor_descriptor->dataType)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7c5b      	ldrb	r3, [r3, #17]
 8001658:	2b06      	cmp	r3, #6
 800165a:	d83b      	bhi.n	80016d4 <create_JSON_SensorDescriptor+0xa4>
 800165c:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <create_JSON_SensorDescriptor+0x34>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	08001681 	.word	0x08001681
 8001668:	0800168d 	.word	0x0800168d
 800166c:	08001699 	.word	0x08001699
 8001670:	080016a5 	.word	0x080016a5
 8001674:	080016b1 	.word	0x080016b1
 8001678:	080016bd 	.word	0x080016bd
 800167c:	080016c9 	.word	0x080016c9
  {
  case DATA_TYPE_UINT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint8_t");
 8001680:	4a59      	ldr	r2, [pc, #356]	; (80017e8 <create_JSON_SensorDescriptor+0x1b8>)
 8001682:	495a      	ldr	r1, [pc, #360]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 8001684:	69b8      	ldr	r0, [r7, #24]
 8001686:	f01b f9f9 	bl	801ca7c <json_object_dotset_string>
    break;
 800168a:	e029      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int8_t");
 800168c:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <create_JSON_SensorDescriptor+0x1c0>)
 800168e:	4957      	ldr	r1, [pc, #348]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 8001690:	69b8      	ldr	r0, [r7, #24]
 8001692:	f01b f9f3 	bl	801ca7c <json_object_dotset_string>
    break;
 8001696:	e023      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint16_t");
 8001698:	4a56      	ldr	r2, [pc, #344]	; (80017f4 <create_JSON_SensorDescriptor+0x1c4>)
 800169a:	4954      	ldr	r1, [pc, #336]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 800169c:	69b8      	ldr	r0, [r7, #24]
 800169e:	f01b f9ed 	bl	801ca7c <json_object_dotset_string>
    break;
 80016a2:	e01d      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int16_t");
 80016a4:	4a54      	ldr	r2, [pc, #336]	; (80017f8 <create_JSON_SensorDescriptor+0x1c8>)
 80016a6:	4951      	ldr	r1, [pc, #324]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016a8:	69b8      	ldr	r0, [r7, #24]
 80016aa:	f01b f9e7 	bl	801ca7c <json_object_dotset_string>
    break;
 80016ae:	e017      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint32_t");
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <create_JSON_SensorDescriptor+0x1cc>)
 80016b2:	494e      	ldr	r1, [pc, #312]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016b4:	69b8      	ldr	r0, [r7, #24]
 80016b6:	f01b f9e1 	bl	801ca7c <json_object_dotset_string>
    break;
 80016ba:	e011      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int32_t");
 80016bc:	4a50      	ldr	r2, [pc, #320]	; (8001800 <create_JSON_SensorDescriptor+0x1d0>)
 80016be:	494b      	ldr	r1, [pc, #300]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016c0:	69b8      	ldr	r0, [r7, #24]
 80016c2:	f01b f9db 	bl	801ca7c <json_object_dotset_string>
    break;
 80016c6:	e00b      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_FLOAT:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "float");
 80016c8:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <create_JSON_SensorDescriptor+0x1d4>)
 80016ca:	4948      	ldr	r1, [pc, #288]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016cc:	69b8      	ldr	r0, [r7, #24]
 80016ce:	f01b f9d5 	bl	801ca7c <json_object_dotset_string>
    break;
 80016d2:	e005      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  default:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "NA");
 80016d4:	4a4c      	ldr	r2, [pc, #304]	; (8001808 <create_JSON_SensorDescriptor+0x1d8>)
 80016d6:	4945      	ldr	r1, [pc, #276]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016d8:	69b8      	ldr	r0, [r7, #24]
 80016da:	f01b f9cf 	bl	801ca7c <json_object_dotset_string>
    break;
 80016de:	bf00      	nop
  }  
  
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.min", sensor_descriptor->samplesPerTimestamp[0]);  
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff34 	bl	8000554 <__aeabi_ui2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	ec43 2b10 	vmov	d0, r2, r3
 80016f4:	4945      	ldr	r1, [pc, #276]	; (800180c <create_JSON_SensorDescriptor+0x1dc>)
 80016f6:	69b8      	ldr	r0, [r7, #24]
 80016f8:	f01b f9e4 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.max", sensor_descriptor->samplesPerTimestamp[1]);  
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff26 	bl	8000554 <__aeabi_ui2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	ec43 2b10 	vmov	d0, r2, r3
 8001710:	493f      	ldr	r1, [pc, #252]	; (8001810 <create_JSON_SensorDescriptor+0x1e0>)
 8001712:	69b8      	ldr	r0, [r7, #24]
 8001714:	f01b f9d6 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_string(JSON_SensorDescriptor, "samplesPerTs.dataType", "int16_t");  
 8001718:	4a37      	ldr	r2, [pc, #220]	; (80017f8 <create_JSON_SensorDescriptor+0x1c8>)
 800171a:	493e      	ldr	r1, [pc, #248]	; (8001814 <create_JSON_SensorDescriptor+0x1e4>)
 800171c:	69b8      	ldr	r0, [r7, #24]
 800171e:	f01b f9ad 	bl	801ca7c <json_object_dotset_string>
  
  json_object_dotset_value(JSON_SensorDescriptor, "odr.values", json_value_init_array());
 8001722:	f01a fe9d 	bl	801c460 <json_value_init_array>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	493b      	ldr	r1, [pc, #236]	; (8001818 <create_JSON_SensorDescriptor+0x1e8>)
 800172c:	69b8      	ldr	r0, [r7, #24]
 800172e:	f01b f918 	bl	801c962 <json_object_dotset_value>
  JSON_Array *JSON_SensorArray = json_object_dotget_array(JSON_SensorDescriptor, "odr.values");
 8001732:	4939      	ldr	r1, [pc, #228]	; (8001818 <create_JSON_SensorDescriptor+0x1e8>)
 8001734:	69b8      	ldr	r0, [r7, #24]
 8001736:	f01a fd09 	bl	801c14c <json_object_dotget_array>
 800173a:	6178      	str	r0, [r7, #20]
  
  while (sensor_descriptor->ODR[ii] > 0)
 800173c:	e013      	b.n	8001766 <create_JSON_SensorDescriptor+0x136>
  {
    json_array_append_number(JSON_SensorArray, sensor_descriptor->ODR[ii]);
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	3304      	adds	r3, #4
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3304      	adds	r3, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff23 	bl	8000598 <__aeabi_f2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	ec43 2b10 	vmov	d0, r2, r3
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f01b f887 	bl	801c86e <json_array_append_number>
    ii++;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	3301      	adds	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
  while (sensor_descriptor->ODR[ii] > 0)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3304      	adds	r3, #4
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	3304      	adds	r3, #4
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	dcde      	bgt.n	800173e <create_JSON_SensorDescriptor+0x10e>
  }
  
  json_object_dotset_value(JSON_SensorDescriptor, "subSensorDescriptor", json_value_init_array());  
 8001780:	f01a fe6e 	bl	801c460 <json_value_init_array>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4924      	ldr	r1, [pc, #144]	; (800181c <create_JSON_SensorDescriptor+0x1ec>)
 800178a:	69b8      	ldr	r0, [r7, #24]
 800178c:	f01b f8e9 	bl	801c962 <json_object_dotset_value>
  JSON_SensorArray1 = json_object_dotget_array(JSON_SensorDescriptor, "subSensorDescriptor"); 
 8001790:	4922      	ldr	r1, [pc, #136]	; (800181c <create_JSON_SensorDescriptor+0x1ec>)
 8001792:	69b8      	ldr	r0, [r7, #24]
 8001794:	f01a fcda 	bl	801c14c <json_object_dotget_array>
 8001798:	6138      	str	r0, [r7, #16]
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e015      	b.n	80017cc <create_JSON_SensorDescriptor+0x19c>
  {
    tempJSON1 = json_value_init_object();  
 80017a0:	f01a fe32 	bl	801c408 <json_value_init_object>
 80017a4:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor_descriptor->subSensorDescriptor[ii], tempJSON1);  
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	2254      	movs	r2, #84	; 0x54
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	3358      	adds	r3, #88	; 0x58
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	3304      	adds	r3, #4
 80017b6:	68f9      	ldr	r1, [r7, #12]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f8b1 	bl	8001920 <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	6938      	ldr	r0, [r7, #16]
 80017c2:	f01b f839 	bl	801c838 <json_array_append_value>
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017d2:	461a      	mov	r2, r3
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d3e2      	bcc.n	80017a0 <create_JSON_SensorDescriptor+0x170>
  }  
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	08021518 	.word	0x08021518
 80017e8:	08021520 	.word	0x08021520
 80017ec:	08021528 	.word	0x08021528
 80017f0:	08021534 	.word	0x08021534
 80017f4:	0802153c 	.word	0x0802153c
 80017f8:	08021548 	.word	0x08021548
 80017fc:	08021550 	.word	0x08021550
 8001800:	0802155c 	.word	0x0802155c
 8001804:	08021564 	.word	0x08021564
 8001808:	0802156c 	.word	0x0802156c
 800180c:	08021570 	.word	0x08021570
 8001810:	08021584 	.word	0x08021584
 8001814:	08021598 	.word	0x08021598
 8001818:	080215b0 	.word	0x080215b0
 800181c:	080215bc 	.word	0x080215bc

08001820 <create_JSON_SensorStatus>:


static void create_JSON_SensorStatus(COM_SensorStatus_t *sensor_status, JSON_Value *tempJSON)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SensorStatus= json_value_get_object(tempJSON);
 800182a:	6838      	ldr	r0, [r7, #0]
 800182c:	f01a fd59 	bl	801c2e2 <json_value_get_object>
 8001830:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SensorStatus, "odr", sensor_status->ODR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe feae 	bl	8000598 <__aeabi_f2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	ec43 2b10 	vmov	d0, r2, r3
 8001844:	492e      	ldr	r1, [pc, #184]	; (8001900 <create_JSON_SensorStatus+0xe0>)
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f01b f93c 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "odrMeasured", sensor_status->measuredODR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fea1 	bl	8000598 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	ec43 2b10 	vmov	d0, r2, r3
 800185e:	4929      	ldr	r1, [pc, #164]	; (8001904 <create_JSON_SensorStatus+0xe4>)
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f01b f92f 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "initialOffset", sensor_status->initialOffset);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe94 	bl	8000598 <__aeabi_f2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	ec43 2b10 	vmov	d0, r2, r3
 8001878:	4923      	ldr	r1, [pc, #140]	; (8001908 <create_JSON_SensorStatus+0xe8>)
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f01b f922 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SensorStatus, "isActive", sensor_status->isActive);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7b9b      	ldrb	r3, [r3, #14]
 8001884:	461a      	mov	r2, r3
 8001886:	4921      	ldr	r1, [pc, #132]	; (800190c <create_JSON_SensorStatus+0xec>)
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f01b f941 	bl	801cb10 <json_object_dotset_boolean>
  json_object_dotset_number(JSON_SensorStatus, "samplesPerTs", sensor_status->samplesPerTimestamp);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	899b      	ldrh	r3, [r3, #12]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe5e 	bl	8000554 <__aeabi_ui2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	ec43 2b10 	vmov	d0, r2, r3
 80018a0:	491b      	ldr	r1, [pc, #108]	; (8001910 <create_JSON_SensorStatus+0xf0>)
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f01b f90e 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "usbDataPacketSize", sensor_status->usbDataPacketSize);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8a1b      	ldrh	r3, [r3, #16]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe51 	bl	8000554 <__aeabi_ui2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	ec43 2b10 	vmov	d0, r2, r3
 80018ba:	4916      	ldr	r1, [pc, #88]	; (8001914 <create_JSON_SensorStatus+0xf4>)
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f01b f901 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "sdWriteBufferSize", sensor_status->sdWriteBufferSize);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe44 	bl	8000554 <__aeabi_ui2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	ec43 2b10 	vmov	d0, r2, r3
 80018d4:	4910      	ldr	r1, [pc, #64]	; (8001918 <create_JSON_SensorStatus+0xf8>)
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f01b f8f4 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "comChannelNumber", sensor_status->comChannelNumber);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe46 	bl	8000574 <__aeabi_i2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	ec43 2b10 	vmov	d0, r2, r3
 80018f0:	490a      	ldr	r1, [pc, #40]	; (800191c <create_JSON_SensorStatus+0xfc>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f01b f8e6 	bl	801cac4 <json_object_dotset_number>
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	0802141c 	.word	0x0802141c
 8001904:	080215d0 	.word	0x080215d0
 8001908:	080215dc 	.word	0x080215dc
 800190c:	0802146c 	.word	0x0802146c
 8001910:	0802145c 	.word	0x0802145c
 8001914:	08021420 	.word	0x08021420
 8001918:	08021434 	.word	0x08021434
 800191c:	08021448 	.word	0x08021448

08001920 <create_JSON_SubSensorDescriptor>:


static void create_JSON_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, JSON_Value *tempJSON)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  
  JSON_Value *tempJSONarray = json_value_init_object();
 800192e:	f01a fd6b 	bl	801c408 <json_value_init_object>
 8001932:	6138      	str	r0, [r7, #16]
  JSON_Array *JSON_SensorArray = json_value_get_array(tempJSONarray);
 8001934:	6938      	ldr	r0, [r7, #16]
 8001936:	f01a fce6 	bl	801c306 <json_value_get_array>
 800193a:	60f8      	str	r0, [r7, #12]
  JSON_Object *JSON_SubSensorDescriptor= json_value_get_object(tempJSON);
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f01a fcd0 	bl	801c2e2 <json_value_get_object>
 8001942:	60b8      	str	r0, [r7, #8]
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "id", sub_sensor_descriptor->id);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe03 	bl	8000554 <__aeabi_ui2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ec43 2b10 	vmov	d0, r2, r3
 8001956:	494a      	ldr	r1, [pc, #296]	; (8001a80 <create_JSON_SubSensorDescriptor+0x160>)
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f01b f8b3 	bl	801cac4 <json_object_dotset_number>
  
  switch (sub_sensor_descriptor->sensorType)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	3b01      	subs	r3, #1
 8001964:	2b06      	cmp	r3, #6
 8001966:	d83b      	bhi.n	80019e0 <create_JSON_SubSensorDescriptor+0xc0>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <create_JSON_SubSensorDescriptor+0x50>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	0800198d 	.word	0x0800198d
 8001974:	08001999 	.word	0x08001999
 8001978:	080019a5 	.word	0x080019a5
 800197c:	080019b1 	.word	0x080019b1
 8001980:	080019bd 	.word	0x080019bd
 8001984:	080019c9 	.word	0x080019c9
 8001988:	080019d5 	.word	0x080019d5
  {
  case COM_TYPE_ACC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "ACC");
 800198c:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <create_JSON_SubSensorDescriptor+0x164>)
 800198e:	493e      	ldr	r1, [pc, #248]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f01b f873 	bl	801ca7c <json_object_dotset_string>
    break;
 8001996:	e029      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MAG:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MAG");
 8001998:	4a3c      	ldr	r2, [pc, #240]	; (8001a8c <create_JSON_SubSensorDescriptor+0x16c>)
 800199a:	493b      	ldr	r1, [pc, #236]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 800199c:	68b8      	ldr	r0, [r7, #8]
 800199e:	f01b f86d 	bl	801ca7c <json_object_dotset_string>
    break;
 80019a2:	e023      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_GYRO:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "GYRO");
 80019a4:	4a3a      	ldr	r2, [pc, #232]	; (8001a90 <create_JSON_SubSensorDescriptor+0x170>)
 80019a6:	4938      	ldr	r1, [pc, #224]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019a8:	68b8      	ldr	r0, [r7, #8]
 80019aa:	f01b f867 	bl	801ca7c <json_object_dotset_string>
    break;
 80019ae:	e01d      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_TEMP:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "TEMP");
 80019b0:	4a38      	ldr	r2, [pc, #224]	; (8001a94 <create_JSON_SubSensorDescriptor+0x174>)
 80019b2:	4935      	ldr	r1, [pc, #212]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019b4:	68b8      	ldr	r0, [r7, #8]
 80019b6:	f01b f861 	bl	801ca7c <json_object_dotset_string>
    break;
 80019ba:	e017      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_PRESS:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "PRESS");
 80019bc:	4a36      	ldr	r2, [pc, #216]	; (8001a98 <create_JSON_SubSensorDescriptor+0x178>)
 80019be:	4932      	ldr	r1, [pc, #200]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019c0:	68b8      	ldr	r0, [r7, #8]
 80019c2:	f01b f85b 	bl	801ca7c <json_object_dotset_string>
    break;
 80019c6:	e011      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_HUM:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "HUM");
 80019c8:	4a34      	ldr	r2, [pc, #208]	; (8001a9c <create_JSON_SubSensorDescriptor+0x17c>)
 80019ca:	492f      	ldr	r1, [pc, #188]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f01b f855 	bl	801ca7c <json_object_dotset_string>
    break;
 80019d2:	e00b      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MIC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MIC");
 80019d4:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <create_JSON_SubSensorDescriptor+0x180>)
 80019d6:	492c      	ldr	r1, [pc, #176]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f01b f84f 	bl	801ca7c <json_object_dotset_string>
    break;
 80019de:	e005      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  default:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "NA");
 80019e0:	4a30      	ldr	r2, [pc, #192]	; (8001aa4 <create_JSON_SubSensorDescriptor+0x184>)
 80019e2:	4929      	ldr	r1, [pc, #164]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019e4:	68b8      	ldr	r0, [r7, #8]
 80019e6:	f01b f849 	bl	801ca7c <json_object_dotset_string>
    break;      
 80019ea:	bf00      	nop
  }
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "dataPerSample", sub_sensor_descriptor->dataPerSample);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	789b      	ldrb	r3, [r3, #2]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdaf 	bl	8000554 <__aeabi_ui2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	ec43 2b10 	vmov	d0, r2, r3
 80019fe:	492a      	ldr	r1, [pc, #168]	; (8001aa8 <create_JSON_SubSensorDescriptor+0x188>)
 8001a00:	68b8      	ldr	r0, [r7, #8]
 8001a02:	f01b f85f 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_string(JSON_SubSensorDescriptor, "unit", sub_sensor_descriptor->unit);  
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3303      	adds	r3, #3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4927      	ldr	r1, [pc, #156]	; (8001aac <create_JSON_SubSensorDescriptor+0x18c>)
 8001a0e:	68b8      	ldr	r0, [r7, #8]
 8001a10:	f01b f834 	bl	801ca7c <json_object_dotset_string>
  json_object_dotset_value(JSON_SubSensorDescriptor, "fs.values", json_value_init_array());
 8001a14:	f01a fd24 	bl	801c460 <json_value_init_array>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4924      	ldr	r1, [pc, #144]	; (8001ab0 <create_JSON_SubSensorDescriptor+0x190>)
 8001a1e:	68b8      	ldr	r0, [r7, #8]
 8001a20:	f01a ff9f 	bl	801c962 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_SubSensorDescriptor, "fs.values");
 8001a24:	4922      	ldr	r1, [pc, #136]	; (8001ab0 <create_JSON_SubSensorDescriptor+0x190>)
 8001a26:	68b8      	ldr	r0, [r7, #8]
 8001a28:	f01a fb90 	bl	801c14c <json_object_dotget_array>
 8001a2c:	60f8      	str	r0, [r7, #12]
  
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001a2e:	e013      	b.n	8001a58 <create_JSON_SubSensorDescriptor+0x138>
  {
    json_array_append_number(JSON_SensorArray, sub_sensor_descriptor->FS[ii]);
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3304      	adds	r3, #4
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fdaa 	bl	8000598 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	ec43 2b10 	vmov	d0, r2, r3
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f01a ff0e 	bl	801c86e <json_array_append_number>
    ii++;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3304      	adds	r3, #4
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	dcde      	bgt.n	8001a30 <create_JSON_SubSensorDescriptor+0x110>
  }  
  json_value_free(tempJSONarray);
 8001a72:	6938      	ldr	r0, [r7, #16]
 8001a74:	f01a fc9a 	bl	801c3ac <json_value_free>
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	08021488 	.word	0x08021488
 8001a84:	080215ec 	.word	0x080215ec
 8001a88:	080215f0 	.word	0x080215f0
 8001a8c:	080215fc 	.word	0x080215fc
 8001a90:	08021600 	.word	0x08021600
 8001a94:	08021608 	.word	0x08021608
 8001a98:	08021610 	.word	0x08021610
 8001a9c:	08021618 	.word	0x08021618
 8001aa0:	0802161c 	.word	0x0802161c
 8001aa4:	0802156c 	.word	0x0802156c
 8001aa8:	08021620 	.word	0x08021620
 8001aac:	08021630 	.word	0x08021630
 8001ab0:	08021638 	.word	0x08021638

08001ab4 <create_JSON_SubSensorStatus>:


static void create_JSON_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, JSON_Value *tempJSON)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SubSensorStatus = json_value_get_object(tempJSON);
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f01a fc0f 	bl	801c2e2 <json_value_get_object>
 8001ac4:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SubSensorStatus, "fs", sub_sensor_status->FS);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd64 	bl	8000598 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	ec43 2b10 	vmov	d0, r2, r3
 8001ad8:	490d      	ldr	r1, [pc, #52]	; (8001b10 <create_JSON_SubSensorStatus+0x5c>)
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f01a fff2 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SubSensorStatus, "sensitivity", sub_sensor_status->sensitivity);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd57 	bl	8000598 <__aeabi_f2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	ec43 2b10 	vmov	d0, r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <create_JSON_SubSensorStatus+0x60>)
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f01a ffe5 	bl	801cac4 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SubSensorStatus, "isActive", sub_sensor_status->isActive);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7a1b      	ldrb	r3, [r3, #8]
 8001afe:	461a      	mov	r2, r3
 8001b00:	4905      	ldr	r1, [pc, #20]	; (8001b18 <create_JSON_SubSensorStatus+0x64>)
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f01b f804 	bl	801cb10 <json_object_dotset_boolean>
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	0802148c 	.word	0x0802148c
 8001b14:	08021490 	.word	0x08021490
 8001b18:	0802146c 	.word	0x0802146c

08001b1c <COM_AddSensor>:
* @brief Add Sensor to Db
* @param None
* @retval Sensor unique sID
*/
int32_t COM_AddSensor(void)
{  
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  uint32_t ii = COM_device.deviceDescriptor.nSensor;
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <COM_AddSensor+0x68>)
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	607b      	str	r3, [r7, #4]
  
  COM_device.sensors[ii] = calloc(1, sizeof(COM_Sensor_t));   
 8001b28:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f01b f90d 	bl	801cd4c <calloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4619      	mov	r1, r3
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <COM_AddSensor+0x68>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	330a      	adds	r3, #10
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	6059      	str	r1, [r3, #4]
  
  if(COM_device.sensors[ii] == NULL)
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <COM_AddSensor+0x68>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330a      	adds	r3, #10
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <COM_AddSensor+0x3c>
    return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e010      	b.n	8001b7a <COM_AddSensor+0x5e>
  
  COM_device.sensors[ii]->sensorDescriptor.id = ii;
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <COM_AddSensor+0x68>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	330a      	adds	r3, #10
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
  COM_device.deviceDescriptor.nSensor++;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <COM_AddSensor+0x68>)
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <COM_AddSensor+0x68>)
 8001b72:	6293      	str	r3, [r2, #40]	; 0x28
  return COM_device.deviceDescriptor.nSensor - 1;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <COM_AddSensor+0x68>)
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	3b01      	subs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000280 	.word	0x20000280

08001b88 <COM_GetDevice>:
* @brief Get Device Struct
* @param None
* @retval whole device Structure
*/
COM_Device_t * COM_GetDevice(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return (COM_Device_t *)&COM_device;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <COM_GetDevice+0x10>)
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	20000280 	.word	0x20000280

08001b9c <COM_GetDeviceDescriptor>:
* @brief Get Device Descriptor
* @param None
* @retval Device Descriptor
*/
COM_DeviceDescriptor_t * COM_GetDeviceDescriptor(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return (COM_DeviceDescriptor_t *)&(COM_device.deviceDescriptor);
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <COM_GetDeviceDescriptor+0x10>)
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	20000280 	.word	0x20000280

08001bb0 <COM_GetSensor>:
* @brief Get Sensor 
* @param None
* @retval Sensor unique sID
*/
COM_Sensor_t * COM_GetSensor(uint8_t sID)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  return COM_device.sensors[sID];
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <COM_GetSensor+0x24>)
 8001bbe:	330a      	adds	r3, #10
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	685b      	ldr	r3, [r3, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000280 	.word	0x20000280

08001bd8 <COM_GetSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SensorDescriptor_t * COM_GetSensorDescriptor(uint8_t sID)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorDescriptor);  
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <COM_GetSensorDescriptor+0x24>)
 8001be6:	330a      	adds	r3, #10
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	685b      	ldr	r3, [r3, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000280 	.word	0x20000280

08001c00 <COM_GetSensorStatus>:
* @brief Get Sensor Status
* @param None
* @retval Sensor unique sID
*/
COM_SensorStatus_t * COM_GetSensorStatus(uint8_t sID)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorStatus);  
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <COM_GetSensorStatus+0x28>)
 8001c0e:	330a      	adds	r3, #10
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000280 	.word	0x20000280

08001c2c <COM_GetSubSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorDescriptor_t * COM_GetSubSensorDescriptor(uint8_t sID, uint8_t ssID)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71bb      	strb	r3, [r7, #6]
    return &(COM_device.sensors[sID]->sensorDescriptor.subSensorDescriptor[ssID]);  
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <COM_GetSubSensorDescriptor+0x38>)
 8001c40:	330a      	adds	r3, #10
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	2154      	movs	r1, #84	; 0x54
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	3358      	adds	r3, #88	; 0x58
 8001c52:	4413      	add	r3, r2
 8001c54:	3304      	adds	r3, #4
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000280 	.word	0x20000280

08001c68 <COM_GetSubSensorNumber>:
* @brief Get Sensor Status
* @param Sensor unique sID
* @retval number of subsensors
*/
uint8_t COM_GetSubSensorNumber(uint8_t sID)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
    return COM_device.sensors[sID]->sensorDescriptor.nSubSensors;  
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <COM_GetSubSensorNumber+0x28>)
 8001c76:	330a      	adds	r3, #10
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000280 	.word	0x20000280

08001c94 <COM_IsOdrLegal>:
  
  return ret;
}

uint8_t COM_IsOdrLegal(float value, uint8_t sID)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	70fb      	strb	r3, [r7, #3]
  uint16_t i = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	737b      	strb	r3, [r7, #13]
  float * list = COM_device.sensors[sID]->sensorDescriptor.ODR;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <COM_IsOdrLegal+0x74>)
 8001cae:	330a      	adds	r3, #10
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	60bb      	str	r3, [r7, #8]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001cba:	e011      	b.n	8001ce0 <COM_IsOdrLegal+0x4c>
  {
    if(list[i] == value)
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ccc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d101      	bne.n	8001cda <COM_IsOdrLegal+0x46>
      ret = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	737b      	strb	r3, [r7, #13]
    i++;
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	81fb      	strh	r3, [r7, #14]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001cf0:	eef4 7a47 	vcmp.f32	s15, s14
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	d1e0      	bne.n	8001cbc <COM_IsOdrLegal+0x28>
  }
  
  return ret;
 8001cfa:	7b7b      	ldrb	r3, [r7, #13]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000280 	.word	0x20000280

08001d0c <get_unique_id>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


static void get_unique_id(char * id)
{ 
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t deviceserial[3];
  
  deviceserial[0] = *(uint32_t*)DEVICE_ID_REG_1;
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <get_unique_id+0xd4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  deviceserial[1] = *(uint32_t*)DEVICE_ID_REG_2;
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <get_unique_id+0xd8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
  deviceserial[2] = *(uint32_t*)DEVICE_ID_REG_3; 
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <get_unique_id+0xdc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	617b      	str	r3, [r7, #20]
  
  uint16_t y = (deviceserial[0] & 0xFFFF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t x = ((deviceserial[0] >> 16) & 0xFFFF);  
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t waf_num = (deviceserial[1] & 0xFF);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  id[0] = (deviceserial[1]>>8) & 0xFF;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	701a      	strb	r2, [r3, #0]
  id[1] = (deviceserial[1]>>16) & 0xFF;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	0c1a      	lsrs	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3301      	adds	r3, #1
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
  id[2] = (deviceserial[1]>>24) & 0xFF;  
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	0e1a      	lsrs	r2, r3, #24
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3302      	adds	r3, #2
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]
  id[3] = (deviceserial[2]) & 0xFF;
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3303      	adds	r3, #3
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
  id[4] = (deviceserial[2]>>8) & 0xFF;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	0a1a      	lsrs	r2, r3, #8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]
  id[5] = (deviceserial[2]>>16) & 0xFF;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	0c1a      	lsrs	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3305      	adds	r3, #5
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]
  id[6] = (deviceserial[2]>>24) & 0xFF;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	0e1a      	lsrs	r2, r3, #24
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3306      	adds	r3, #6
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	701a      	strb	r2, [r3, #0]
  
  int n;
  char * p = &id[7];
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3307      	adds	r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%03u", waf_num);
 8001d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d90:	461a      	mov	r2, r3
 8001d92:	4916      	ldr	r1, [pc, #88]	; (8001dec <get_unique_id+0xe0>)
 8001d94:	69f8      	ldr	r0, [r7, #28]
 8001d96:	f01b ffb9 	bl	801dd0c <siprintf>
 8001d9a:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4413      	add	r3, r2
 8001da2:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", x);
 8001da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001da6:	461a      	mov	r2, r3
 8001da8:	4911      	ldr	r1, [pc, #68]	; (8001df0 <get_unique_id+0xe4>)
 8001daa:	69f8      	ldr	r0, [r7, #28]
 8001dac:	f01b ffae 	bl	801dd0c <siprintf>
 8001db0:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	4413      	add	r3, r2
 8001db8:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", y);
 8001dba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	490c      	ldr	r1, [pc, #48]	; (8001df0 <get_unique_id+0xe4>)
 8001dc0:	69f8      	ldr	r0, [r7, #28]
 8001dc2:	f01b ffa3 	bl	801dd0c <siprintf>
 8001dc6:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	61fb      	str	r3, [r7, #28]
  
  *p = '\0';
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
  /*OUT: | LOT NUMBER [7] | WAF NUMBER [3] | X ON WAF [5] | Y ON WAF [5] | */  
}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	1fff7590 	.word	0x1fff7590
 8001de4:	1fff7594 	.word	0x1fff7594
 8001de8:	1fff7598 	.word	0x1fff7598
 8001dec:	08021644 	.word	0x08021644
 8001df0:	0802164c 	.word	0x0802164c

08001df4 <set_default_description>:
* @brief Set default device description
* @param None
* @retval None
*/
void set_default_description(void)
{  
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;
  COM_DeviceDescriptor_t * tempDeviceDescriptor;
  tempDeviceDescriptor = COM_GetDeviceDescriptor();
 8001dfa:	f7ff fecf 	bl	8001b9c <COM_GetDeviceDescriptor>
 8001dfe:	6078      	str	r0, [r7, #4]
  
  get_unique_id(tempDeviceDescriptor->serialNumber);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff82 	bl	8001d0c <get_unique_id>
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3315      	adds	r3, #21
 8001e0c:	495e      	ldr	r1, [pc, #376]	; (8001f88 <set_default_description+0x194>)
 8001e0e:	461a      	mov	r2, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	cb03      	ldmia	r3!, {r0, r1}
 8001e14:	6010      	str	r0, [r2, #0]
 8001e16:	6051      	str	r1, [r2, #4]
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	8113      	strh	r3, [r2, #8]
    
  /***** IIS3DWB *****/
  iis3dwb_com_id = COM_AddSensor();
 8001e1c:	f7ff fe7e 	bl	8001b1c <COM_AddSensor>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <set_default_description+0x198>)
 8001e26:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);
 8001e28:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <set_default_description+0x198>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff febf 	bl	8001bb0 <COM_GetSensor>
 8001e32:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4955      	ldr	r1, [pc, #340]	; (8001f90 <set_default_description+0x19c>)
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	cb03      	ldmia	r3!, {r0, r1}
 8001e40:	6010      	str	r0, [r2, #0]
 8001e42:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2203      	movs	r2, #3
 8001e48:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 26667.0f;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	4a51      	ldr	r2, [pc, #324]	; (8001f94 <set_default_description+0x1a0>)
 8001e4e:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  /* Terminate list */
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4a51      	ldr	r2, [pc, #324]	; (8001f98 <set_default_description+0x1a4>)
 8001e54:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 26667.0f;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <set_default_description+0x1a0>)
 8001e74:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e92:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 1;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 3000;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ea4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS3DWB;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001eae:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	335f      	adds	r3, #95	; 0x5f
 8001ed8:	4a30      	ldr	r2, [pc, #192]	; (8001f9c <set_default_description+0x1a8>)
 8001eda:	8811      	ldrh	r1, [r2, #0]
 8001edc:	7892      	ldrb	r2, [r2, #2]
 8001ede:	8019      	strh	r1, [r3, #0]
 8001ee0:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee8:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001ef0:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001ef8:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001f00:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <set_default_description+0x1a4>)
 8001f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001f10:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8001f22:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001fa0 <set_default_description+0x1ac>
 8001f26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f2a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc

  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001f3e:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <set_default_description+0x1b0>)
 8001f40:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001f48:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <set_default_description+0x1b0>)
 8001f4a:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <set_default_description+0x1b0>)
 8001f54:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis3dwb_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS3DWB / (uint32_t)(IIS3DWB_Init_Param.ODR * 6); 
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <set_default_description+0x1b0>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f68:	ee17 2a90 	vmov	r2, s15
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <set_default_description+0x198>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <set_default_description+0x1b4>)
 8001f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f78:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <set_default_description+0x1b8>)
 8001f7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  

  maxWriteTimeSensor[stts751_com_id] = 1000 * WRITE_BUFFER_SIZE_STTS751 / (uint32_t)(STTS751_Init_Param.ODR * 4); 
#endif
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	08021654 	.word	0x08021654
 8001f8c:	20016040 	.word	0x20016040
 8001f90:	08021660 	.word	0x08021660
 8001f94:	46d05600 	.word	0x46d05600
 8001f98:	bf800000 	.word	0xbf800000
 8001f9c:	08021668 	.word	0x08021668
 8001fa0:	3d79db23 	.word	0x3d79db23
 8001fa4:	2000ff08 	.word	0x2000ff08
 8001fa8:	01e84800 	.word	0x01e84800
 8001fac:	20016320 	.word	0x20016320

08001fb0 <update_sensorStatus>:

void update_sensorStatus(COM_SensorStatus_t * oldSensorStatus, COM_SensorStatus_t * newSensorStatus, uint8_t sID)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	71fb      	strb	r3, [r7, #7]
  /* Check differencies between oldSensorStatus and newSensorStatus, act properly*/
  /* ODR */
  if(oldSensorStatus->ODR != newSensorStatus->ODR)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	ed93 7a00 	vldr	s14, [r3]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	d00f      	beq.n	8001ff4 <update_sensorStatus+0x44>
  {
    if(COM_IsOdrLegal(newSensorStatus->ODR, sID))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	f7ff fe57 	bl	8001c94 <COM_IsOdrLegal>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <update_sensorStatus+0x44>
    {
      oldSensorStatus->ODR = newSensorStatus->ODR; /* Todo Setters and getters */
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* isActive */
  if(oldSensorStatus->isActive != newSensorStatus->isActive)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	7b9a      	ldrb	r2, [r3, #14]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	7b9b      	ldrb	r3, [r3, #14]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d003      	beq.n	8002008 <update_sensorStatus+0x58>
  {
    oldSensorStatus->isActive = newSensorStatus->isActive;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	7b9a      	ldrb	r2, [r3, #14]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	739a      	strb	r2, [r3, #14]
  }
  
  /* subsensor: FS, is Active*/
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e054      	b.n	80020b8 <update_sensorStatus+0x108>
  {
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 800200e:	68f9      	ldr	r1, [r7, #12]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	331c      	adds	r3, #28
 800201e:	ed93 7a00 	vldr	s14, [r3]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	331c      	adds	r3, #28
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	eeb4 7a67 	vcmp.f32	s14, s15
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	d011      	beq.n	8002064 <update_sensorStatus+0xb4>
    {
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	331c      	adds	r3, #28
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4403      	add	r3, r0
 8002060:	331c      	adds	r3, #28
 8002062:	6019      	str	r1, [r3, #0]
    }
    
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8002064:	68f9      	ldr	r1, [r7, #12]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3324      	adds	r3, #36	; 0x24
 8002074:	7819      	ldrb	r1, [r3, #0]
 8002076:	68b8      	ldr	r0, [r7, #8]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4403      	add	r3, r0
 8002084:	3324      	adds	r3, #36	; 0x24
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4299      	cmp	r1, r3
 800208a:	d012      	beq.n	80020b2 <update_sensorStatus+0x102>
    {
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	3324      	adds	r3, #36	; 0x24
 800209c:	7818      	ldrb	r0, [r3, #0]
 800209e:	68f9      	ldr	r1, [r7, #12]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3324      	adds	r3, #36	; 0x24
 80020ae:	4602      	mov	r2, r0
 80020b0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fdd4 	bl	8001c68 <COM_GetSubSensorNumber>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4293      	cmp	r3, r2
 80020c8:	dba1      	blt.n	800200e <update_sensorStatus+0x5e>
    }
  }
  
  if (sID == iis3dwb_com_id)
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <update_sensorStatus+0x200>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10e      	bne.n	80020f2 <update_sensorStatus+0x142>
  {
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80020da:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80021b4 <update_sensorStatus+0x204>
 80020de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	edc3 7a08 	vstr	s15, [r3, #32]
 80020f0:	e043      	b.n	800217a <update_sensorStatus+0x1ca>
  }
  else if (sID == iis2dh_com_id)
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <update_sensorStatus+0x208>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	79fa      	ldrb	r2, [r7, #7]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d11d      	bne.n	8002138 <update_sensorStatus+0x188>
  {    
    if (oldSensorStatus->subSensorStatus[0].FS == 16.0f)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002102:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002106:	eef4 7a47 	vcmp.f32	s15, s14
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210e:	d104      	bne.n	800211a <update_sensorStatus+0x16a>
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.75f;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002116:	621a      	str	r2, [r3, #32]
 8002118:	e02f      	b.n	800217a <update_sensorStatus+0x1ca>
    }
    else
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.0625f *  oldSensorStatus->subSensorStatus[0].FS/2;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002120:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80021bc <update_sensorStatus+0x20c>
 8002124:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002128:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800212c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	edc3 7a08 	vstr	s15, [r3, #32]
 8002136:	e020      	b.n	800217a <update_sensorStatus+0x1ca>
    }
  }
  else if (sID == ism330dhcx_com_id)
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <update_sensorStatus+0x210>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	429a      	cmp	r2, r3
 8002140:	d11b      	bne.n	800217a <update_sensorStatus+0x1ca>
  {        
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	edd3 7a07 	vldr	s15, [r3, #28]
 8002148:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021b4 <update_sensorStatus+0x204>
 800214c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002150:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	edc3 7a08 	vstr	s15, [r3, #32]
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002164:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80021c4 <update_sensorStatus+0x214>
 8002168:	ee27 7a87 	vmul.f32	s14, s15, s14
 800216c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80021c8 <update_sensorStatus+0x218>
 8002170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  }
  
  /* CHANNEL NUMBER */
  if(oldSensorStatus->comChannelNumber != newSensorStatus->comChannelNumber)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002186:	429a      	cmp	r2, r3
 8002188:	d004      	beq.n	8002194 <update_sensorStatus+0x1e4>
  {
    oldSensorStatus->comChannelNumber = newSensorStatus->comChannelNumber; /* Todo Setters and getters */         
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	831a      	strh	r2, [r3, #24]
  }  
  
   /* CHANNEL NUMBER */
  if(oldSensorStatus->samplesPerTimestamp != newSensorStatus->samplesPerTimestamp)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	899a      	ldrh	r2, [r3, #12]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	899b      	ldrh	r3, [r3, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d003      	beq.n	80021a8 <update_sensorStatus+0x1f8>
  {
    oldSensorStatus->samplesPerTimestamp = newSensorStatus->samplesPerTimestamp; /* Todo Setters and getters */         
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	899a      	ldrh	r2, [r3, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	819a      	strh	r2, [r3, #12]
  }  
}
 80021a8:	bf00      	nop
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20016040 	.word	0x20016040
 80021b4:	3d79db23 	.word	0x3d79db23
 80021b8:	200163f0 	.word	0x200163f0
 80021bc:	3d800000 	.word	0x3d800000
 80021c0:	20016355 	.word	0x20016355
 80021c4:	408c0000 	.word	0x408c0000
 80021c8:	42fa0000 	.word	0x42fa0000

080021cc <update_sensors_config>:

void update_sensors_config(void)
{  
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;  
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);  
 80021d2:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <update_sensors_config+0x1c4>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fcea 	bl	8001bb0 <COM_GetSensor>
 80021dc:	6078      	str	r0, [r7, #4]
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80021e4:	4a6b      	ldr	r2, [pc, #428]	; (8002394 <update_sensors_config+0x1c8>)
 80021e6:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80021ee:	4a69      	ldr	r2, [pc, #420]	; (8002394 <update_sensors_config+0x1c8>)
 80021f0:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80021f8:	4b66      	ldr	r3, [pc, #408]	; (8002394 <update_sensors_config+0x1c8>)
 80021fa:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(hts221_com_id);
 80021fc:	4b66      	ldr	r3, [pc, #408]	; (8002398 <update_sensors_config+0x1cc>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fcd5 	bl	8001bb0 <COM_GetSensor>
 8002206:	6078      	str	r0, [r7, #4]
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800220e:	4a63      	ldr	r2, [pc, #396]	; (800239c <update_sensors_config+0x1d0>)
 8002210:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002218:	4a60      	ldr	r2, [pc, #384]	; (800239c <update_sensors_config+0x1d0>)
 800221a:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002222:	4a5e      	ldr	r2, [pc, #376]	; (800239c <update_sensors_config+0x1d0>)
 8002224:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800222c:	4b5b      	ldr	r3, [pc, #364]	; (800239c <update_sensors_config+0x1d0>)
 800222e:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8002236:	4b59      	ldr	r3, [pc, #356]	; (800239c <update_sensors_config+0x1d0>)
 8002238:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(iis2dh_com_id);
 800223a:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <update_sensors_config+0x1d4>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fcb6 	bl	8001bb0 <COM_GetSensor>
 8002244:	6078      	str	r0, [r7, #4]
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800224c:	4a55      	ldr	r2, [pc, #340]	; (80023a4 <update_sensors_config+0x1d8>)
 800224e:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002256:	4a53      	ldr	r2, [pc, #332]	; (80023a4 <update_sensors_config+0x1d8>)
 8002258:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <update_sensors_config+0x1d8>)
 8002262:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <update_sensors_config+0x1dc>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fca1 	bl	8001bb0 <COM_GetSensor>
 800226e:	6078      	str	r0, [r7, #4]
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002276:	4a4d      	ldr	r2, [pc, #308]	; (80023ac <update_sensors_config+0x1e0>)
 8002278:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002280:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <update_sensors_config+0x1e0>)
 8002282:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800228a:	4b48      	ldr	r3, [pc, #288]	; (80023ac <update_sensors_config+0x1e0>)
 800228c:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 800228e:	4b48      	ldr	r3, [pc, #288]	; (80023b0 <update_sensors_config+0x1e4>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fc8c 	bl	8001bb0 <COM_GetSensor>
 8002298:	6078      	str	r0, [r7, #4]
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80022a0:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <update_sensors_config+0x1e8>)
 80022a2:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80022aa:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <update_sensors_config+0x1e8>)
 80022ac:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <update_sensors_config+0x1e8>)
 80022b6:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(ism330dhcx_com_id);
 80022b8:	4b3f      	ldr	r3, [pc, #252]	; (80023b8 <update_sensors_config+0x1ec>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fc77 	bl	8001bb0 <COM_GetSensor>
 80022c2:	6078      	str	r0, [r7, #4]
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80022ca:	4a3c      	ldr	r2, [pc, #240]	; (80023bc <update_sensors_config+0x1f0>)
 80022cc:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80022d4:	4a39      	ldr	r2, [pc, #228]	; (80023bc <update_sensors_config+0x1f0>)
 80022d6:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80022de:	4a37      	ldr	r2, [pc, #220]	; (80023bc <update_sensors_config+0x1f0>)
 80022e0:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80022e8:	4b34      	ldr	r3, [pc, #208]	; (80023bc <update_sensors_config+0x1f0>)
 80022ea:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80022f2:	4b32      	ldr	r3, [pc, #200]	; (80023bc <update_sensors_config+0x1f0>)
 80022f4:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 80022f6:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <update_sensors_config+0x1f4>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fc58 	bl	8001bb0 <COM_GetSensor>
 8002300:	6078      	str	r0, [r7, #4]
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002308:	4a2e      	ldr	r2, [pc, #184]	; (80023c4 <update_sensors_config+0x1f8>)
 800230a:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002312:	4a2c      	ldr	r2, [pc, #176]	; (80023c4 <update_sensors_config+0x1f8>)
 8002314:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800231c:	4a29      	ldr	r2, [pc, #164]	; (80023c4 <update_sensors_config+0x1f8>)
 800231e:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002326:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <update_sensors_config+0x1f8>)
 8002328:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive; 
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <update_sensors_config+0x1f8>)
 8002332:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(mp23abs1_com_id);
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <update_sensors_config+0x1fc>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fc39 	bl	8001bb0 <COM_GetSensor>
 800233e:	6078      	str	r0, [r7, #4]
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002346:	4a21      	ldr	r2, [pc, #132]	; (80023cc <update_sensors_config+0x200>)
 8002348:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002350:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <update_sensors_config+0x200>)
 8002352:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <update_sensors_config+0x200>)
 800235c:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 800235e:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <update_sensors_config+0x204>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fc24 	bl	8001bb0 <COM_GetSensor>
 8002368:	6078      	str	r0, [r7, #4]
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002370:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <update_sensors_config+0x208>)
 8002372:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800237a:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <update_sensors_config+0x208>)
 800237c:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <update_sensors_config+0x208>)
 8002386:	751a      	strb	r2, [r3, #20]
  
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20016040 	.word	0x20016040
 8002394:	2000ff08 	.word	0x2000ff08
 8002398:	20016354 	.word	0x20016354
 800239c:	2000fe78 	.word	0x2000fe78
 80023a0:	200163f0 	.word	0x200163f0
 80023a4:	2000fea4 	.word	0x2000fea4
 80023a8:	20016315 	.word	0x20016315
 80023ac:	2000fedc 	.word	0x2000fedc
 80023b0:	200163e8 	.word	0x200163e8
 80023b4:	20014e58 	.word	0x20014e58
 80023b8:	20016355 	.word	0x20016355
 80023bc:	20015f8c 	.word	0x20015f8c
 80023c0:	200163f9 	.word	0x200163f9
 80023c4:	20015fa8 	.word	0x20015fa8
 80023c8:	20016314 	.word	0x20016314
 80023cc:	20016544 	.word	0x20016544
 80023d0:	200163f8 	.word	0x200163f8
 80023d4:	200189f0 	.word	0x200189f0

080023d8 <HTS221_Set_State>:
  
  osSemaphoreRelease(hts221_data_ready_sem_id);    
}

void HTS221_Set_State(SM_Sensor_State_t newState)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  HTS221_Sensor_State = newState;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HTS221_Set_State+0x1c>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	7013      	strb	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	20000001 	.word	0x20000001

080023f8 <HTS221_Start>:
  HTS221_Init_Param.FS[0] = newFS1;
  HTS221_Init_Param.FS[0] = newFS2;
}

void HTS221_Start(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f7ff ffeb 	bl	80023d8 <HTS221_Set_State>
  osThreadResume(HTS221_Thread_Id);
 8002402:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HTS221_Start+0x18>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f014 fb30 	bl	8016a6c <osThreadResume>
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000fe98 	.word	0x2000fe98

08002414 <HTS221_Stop>:

void HTS221_Stop(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002418:	2001      	movs	r0, #1
 800241a:	f7ff ffdd 	bl	80023d8 <HTS221_Set_State>
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <IIS2DH_Set_State>:
{
  osSemaphoreRelease( iis2dh_DreadySem_id);    
}

void IIS2DH_Set_State(SM_Sensor_State_t newState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  IIS2DH_Sensor_State = newState;
 800242e:	4a04      	ldr	r2, [pc, #16]	; (8002440 <IIS2DH_Set_State+0x1c>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	7013      	strb	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	20000002 	.word	0x20000002

08002444 <IIS2DH_Start>:
  IIS2DH_Init_Param.FS[0] = newFS1;
  IIS2DH_Init_Param.FS[0] = newFS2;
}

void IIS2DH_Start(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002448:	2003      	movs	r0, #3
 800244a:	f7ff ffeb 	bl	8002424 <IIS2DH_Set_State>
  osThreadResume(IIS2DH_Thread_Id);
 800244e:	4b03      	ldr	r3, [pc, #12]	; (800245c <IIS2DH_Start+0x18>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f014 fb0a 	bl	8016a6c <osThreadResume>
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000fec0 	.word	0x2000fec0

08002460 <IIS2DH_Stop>:

void IIS2DH_Stop(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002464:	2001      	movs	r0, #1
 8002466:	f7ff ffdd 	bl	8002424 <IIS2DH_Set_State>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <IIS2MDC_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(iis2mdc_data_ready_sem_id);    
}

void IIS2MDC_Set_State(SM_Sensor_State_t newState)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  IIS2MDC_Sensor_State = newState;
 800247a:	4a04      	ldr	r2, [pc, #16]	; (800248c <IIS2MDC_Set_State+0x1c>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	7013      	strb	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	20000003 	.word	0x20000003

08002490 <IIS2MDC_Start>:
  IIS2MDC_Init_Param.FS[0] = newFS1;
  IIS2MDC_Init_Param.FS[0] = newFS2;
}

void IIS2MDC_Start(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002494:	2003      	movs	r0, #3
 8002496:	f7ff ffeb 	bl	8002470 <IIS2MDC_Set_State>
  osThreadResume(IIS2MDC_Thread_Id);
 800249a:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <IIS2MDC_Start+0x18>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f014 fae4 	bl	8016a6c <osThreadResume>
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	2000fef4 	.word	0x2000fef4

080024ac <IIS2MDC_Stop>:

void IIS2MDC_Stop(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80024b0:	2001      	movs	r0, #1
 80024b2:	f7ff ffdd 	bl	8002470 <IIS2MDC_Set_State>
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <IIS3DWB_Peripheral_Init>:
* @brief IIS3DWB GPIO Initialization Function
* @param None
* @retval None
*/
void IIS3DWB_Peripheral_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOE_CLK_ENABLE();
//  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();		//SPI2_CS
 80024d2:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	4a39      	ldr	r2, [pc, #228]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024de:	4b37      	ldr	r3, [pc, #220]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();		//SPI2_MOSI,SPI2_INT
 80024ea:	4b34      	ldr	r3, [pc, #208]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a33      	ldr	r2, [pc, #204]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f6:	4b31      	ldr	r3, [pc, #196]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();		//SPI2_CLK,SPI2_MISO
 8002502:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	4a2d      	ldr	r2, [pc, #180]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();		//SEL_3_4
 800251a:	4b28      	ldr	r3, [pc, #160]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	4a27      	ldr	r2, [pc, #156]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002526:	4b25      	ldr	r3, [pc, #148]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();		//SEL_1_2
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 8002538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800253c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253e:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <IIS3DWB_Peripheral_Init+0x100>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 800254a:	2201      	movs	r2, #1
 800254c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002550:	481b      	ldr	r0, [pc, #108]	; (80025c0 <IIS3DWB_Peripheral_Init+0x104>)
 8002552:	f006 f813 	bl	800857c <HAL_GPIO_WritePin>

  //Configure GPIO pin Output Level of 1_2_SEL and 3_4_SEL
  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
 8002556:	2200      	movs	r2, #0
 8002558:	2101      	movs	r1, #1
 800255a:	481a      	ldr	r0, [pc, #104]	; (80025c4 <IIS3DWB_Peripheral_Init+0x108>)
 800255c:	f006 f80e 	bl	800857c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);
 8002560:	2201      	movs	r2, #1
 8002562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002566:	4818      	ldr	r0, [pc, #96]	; (80025c8 <IIS3DWB_Peripheral_Init+0x10c>)
 8002568:	f006 f808 	bl	800857c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IIS3DWB_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 800256c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800257a:	2302      	movs	r3, #2
 800257c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	480e      	ldr	r0, [pc, #56]	; (80025c0 <IIS3DWB_Peripheral_Init+0x104>)
 8002586:	f005 fe4f 	bl	8008228 <HAL_GPIO_Init>

  /*Configure GPIO pins : STTS751_INT_Pin IIS3DWB_INT1_Pin */
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 800258a:	2320      	movs	r3, #32
 800258c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 8002590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IIS3DWB_INT1_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	4619      	mov	r1, r3
 800259c:	480c      	ldr	r0, [pc, #48]	; (80025d0 <IIS3DWB_Peripheral_Init+0x114>)
 800259e:	f005 fe43 	bl	8008228 <HAL_GPIO_Init>
//
//  SM_SPIx_CLK_ENABLE();
  //---------------------------------------------------------

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2105      	movs	r1, #5
 80025a6:	2017      	movs	r0, #23
 80025a8:	f005 fb87 	bl	8007cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025ac:	2017      	movs	r0, #23
 80025ae:	f005 fba0 	bl	8007cf2 <HAL_NVIC_EnableIRQ>
//  HAL_EXTI_GetHandle(&iis3dwb_exti, EXTI_LINE_5);
//  HAL_EXTI_RegisterCallback(&iis3dwb_exti,  HAL_EXTI_COMMON_CB_ID, IIS3DWB_Int_Callback);
  
}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	; 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	48000400 	.word	0x48000400
 80025c4:	48001800 	.word	0x48001800
 80025c8:	48001400 	.word	0x48001400
 80025cc:	10110000 	.word	0x10110000
 80025d0:	48000800 	.word	0x48000800

080025d4 <IIS3DWB_OS_Init>:
* @brief IIS3DWB Threads Creation
* @param None
* @retval None
*/
void IIS3DWB_OS_Init(void)
{  
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
  /* Data read complete semaphore initialization */  
  iis3dwb_data_read_cmplt_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_read_cmplt_sem), 1);
 80025da:	2101      	movs	r1, #1
 80025dc:	481f      	ldr	r0, [pc, #124]	; (800265c <IIS3DWB_OS_Init+0x88>)
 80025de:	f013 ffbf 	bl	8016560 <osSemaphoreCreate>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <IIS3DWB_OS_Init+0x8c>)
 80025e6:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_read_cmplt_sem_id, "iis3dwb_data_read_cmplt_sem_id" );
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <IIS3DWB_OS_Init+0x8c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	491d      	ldr	r1, [pc, #116]	; (8002664 <IIS3DWB_OS_Init+0x90>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f015 f9c4 	bl	801797c <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_read_cmplt_sem_id,osWaitForever);
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <IIS3DWB_OS_Init+0x8c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	4618      	mov	r0, r3
 80025fe:	f013 ffd3 	bl	80165a8 <osSemaphoreWait>
  
  /* Data ready interrupt semaphore initialization */  
  iis3dwb_data_ready_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_ready_sem), 1);
 8002602:	2101      	movs	r1, #1
 8002604:	4818      	ldr	r0, [pc, #96]	; (8002668 <IIS3DWB_OS_Init+0x94>)
 8002606:	f013 ffab 	bl	8016560 <osSemaphoreCreate>
 800260a:	4603      	mov	r3, r0
 800260c:	4a17      	ldr	r2, [pc, #92]	; (800266c <IIS3DWB_OS_Init+0x98>)
 800260e:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_ready_sem_id, "iis3dwb_data_ready_sem_id" );
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <IIS3DWB_OS_Init+0x98>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4916      	ldr	r1, [pc, #88]	; (8002670 <IIS3DWB_OS_Init+0x9c>)
 8002616:	4618      	mov	r0, r3
 8002618:	f015 f9b0 	bl	801797c <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <IIS3DWB_OS_Init+0x98>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	4618      	mov	r0, r3
 8002626:	f013 ffbf 	bl	80165a8 <osSemaphoreWait>
  

  /* Thread definition: read data */  
  osThreadDef(IIS3DWB_Acquisition_Thread, IIS3DWB_Thread, IIS3DWB_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);  
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <IIS3DWB_OS_Init+0xa0>)
 800262c:	1d3c      	adds	r4, r7, #4
 800262e:	461d      	mov	r5, r3
 8002630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  IIS3DWB_Thread_Id = osThreadCreate(osThread(IIS3DWB_Acquisition_Thread), NULL); 
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f013 ff68 	bl	8016512 <osThreadCreate>
 8002642:	4603      	mov	r3, r0
 8002644:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <IIS3DWB_OS_Init+0xa4>)
 8002646:	6013      	str	r3, [r2, #0]
  osThreadSuspend(IIS3DWB_Thread_Id);
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <IIS3DWB_OS_Init+0xa4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f014 fa00 	bl	8016a52 <osThreadSuspend>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bdb0      	pop	{r4, r5, r7, pc}
 800265a:	bf00      	nop
 800265c:	08021a14 	.word	0x08021a14
 8002660:	200002dc 	.word	0x200002dc
 8002664:	08021688 	.word	0x08021688
 8002668:	08021a10 	.word	0x08021a10
 800266c:	200002d8 	.word	0x200002d8
 8002670:	080216a8 	.word	0x080216a8
 8002674:	080216c4 	.word	0x080216c4
 8002678:	2000ff04 	.word	0x2000ff04

0800267c <IIS3DWB_Thread>:


static void IIS3DWB_Thread(void const *argument)
{
 800267c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002680:	b088      	sub	sp, #32
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  (void) argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_IIS3DWB_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_IIS3DWB_DEBUG_PIN );
 8002686:	2101      	movs	r1, #1
 8002688:	2000      	movs	r0, #0
 800268a:	f015 fe73 	bl	8018374 <vTaskSetApplicationTaskTag>
#endif
  
  uint8_t reg0;
  uint8_t reg1;
  
  volatile uint16_t fifo_level = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	823b      	strh	r3, [r7, #16]
  
  for (;;)
  {
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 8002692:	4bae      	ldr	r3, [pc, #696]	; (800294c <IIS3DWB_Thread+0x2d0>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b03      	cmp	r3, #3
 8002698:	f040 8094 	bne.w	80027c4 <IIS3DWB_Thread+0x148>
    {  
      ts_iis3dwb = 0;
 800269c:	49ac      	ldr	r1, [pc, #688]	; (8002950 <IIS3DWB_Thread+0x2d4>)
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9c1 2300 	strd	r2, r3, [r1]
      tim_value_old = 0;
 80026aa:	4baa      	ldr	r3, [pc, #680]	; (8002954 <IIS3DWB_Thread+0x2d8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
      
      iis3dwb_device_id_get( &iis3dwb_ctx_instance, (uint8_t *)&reg0);
 80026b0:	f107 0313 	add.w	r3, r7, #19
 80026b4:	4619      	mov	r1, r3
 80026b6:	48a8      	ldr	r0, [pc, #672]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80026b8:	f002 fd8f 	bl	80051da <iis3dwb_device_id_get>
      iis3dwb_reset_set(&iis3dwb_ctx_instance, 1);
 80026bc:	2101      	movs	r1, #1
 80026be:	48a6      	ldr	r0, [pc, #664]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80026c0:	f002 fd9c 	bl	80051fc <iis3dwb_reset_set>
      iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80026c4:	f107 0213 	add.w	r2, r7, #19
 80026c8:	2301      	movs	r3, #1
 80026ca:	2110      	movs	r1, #16
 80026cc:	48a2      	ldr	r0, [pc, #648]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80026ce:	f002 fd08 	bl	80050e2 <iis3dwb_read_reg>
      reg0 |= 0xA0;
 80026d2:	7cfb      	ldrb	r3, [r7, #19]
 80026d4:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	74fb      	strb	r3, [r7, #19]
      iis3dwb_write_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80026dc:	f107 0213 	add.w	r2, r7, #19
 80026e0:	2301      	movs	r3, #1
 80026e2:	2110      	movs	r1, #16
 80026e4:	489c      	ldr	r0, [pc, #624]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80026e6:	f002 fd14 	bl	8005112 <iis3dwb_write_reg>
      /*Set fifo in continuous / stream mode*/
      iis3dwb_i2c_interface_set(&iis3dwb_ctx_instance, IIS3DWB_I2C_DISABLE); 
 80026ea:	2101      	movs	r1, #1
 80026ec:	489a      	ldr	r0, [pc, #616]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80026ee:	f002 fe03 	bl	80052f8 <iis3dwb_i2c_interface_set>
      iis3dwb_fifo_mode_set(&iis3dwb_ctx_instance, IIS3DWB_STREAM_MODE); 
 80026f2:	2106      	movs	r1, #6
 80026f4:	4898      	ldr	r0, [pc, #608]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80026f6:	f002 fe9d 	bl	8005434 <iis3dwb_fifo_mode_set>
      /*Set watermark*/
      iis3dwb_fifo_watermark_set(&iis3dwb_ctx_instance, IIS3DWB_WTM_LEVEL);
 80026fa:	2180      	movs	r1, #128	; 0x80
 80026fc:	4896      	ldr	r0, [pc, #600]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80026fe:	f002 fe3d 	bl	800537c <iis3dwb_fifo_watermark_set>
      /*Data Ready pulse mode*/
      iis3dwb_data_ready_mode_set(&iis3dwb_ctx_instance, IIS3DWB_DRDY_PULSED);
 8002702:	2101      	movs	r1, #1
 8002704:	4894      	ldr	r0, [pc, #592]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 8002706:	f002 fd42 	bl	800518e <iis3dwb_data_ready_mode_set>
      /*Set full scale*/
      if(IIS3DWB_Init_Param.FS[0] < 3.0f)
 800270a:	4b94      	ldr	r3, [pc, #592]	; (800295c <IIS3DWB_Thread+0x2e0>)
 800270c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002710:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	d504      	bpl.n	8002728 <IIS3DWB_Thread+0xac>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_2g);
 800271e:	2100      	movs	r1, #0
 8002720:	488d      	ldr	r0, [pc, #564]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 8002722:	f002 fd0e 	bl	8005142 <iis3dwb_xl_full_scale_set>
 8002726:	e02b      	b.n	8002780 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 5.0f)
 8002728:	4b8c      	ldr	r3, [pc, #560]	; (800295c <IIS3DWB_Thread+0x2e0>)
 800272a:	edd3 7a01 	vldr	s15, [r3, #4]
 800272e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273a:	d504      	bpl.n	8002746 <IIS3DWB_Thread+0xca>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_4g);
 800273c:	2102      	movs	r1, #2
 800273e:	4886      	ldr	r0, [pc, #536]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 8002740:	f002 fcff 	bl	8005142 <iis3dwb_xl_full_scale_set>
 8002744:	e01c      	b.n	8002780 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 9.0f)
 8002746:	4b85      	ldr	r3, [pc, #532]	; (800295c <IIS3DWB_Thread+0x2e0>)
 8002748:	edd3 7a01 	vldr	s15, [r3, #4]
 800274c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002758:	d504      	bpl.n	8002764 <IIS3DWB_Thread+0xe8>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_8g);
 800275a:	2103      	movs	r1, #3
 800275c:	487e      	ldr	r0, [pc, #504]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 800275e:	f002 fcf0 	bl	8005142 <iis3dwb_xl_full_scale_set>
 8002762:	e00d      	b.n	8002780 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 17.0f)
 8002764:	4b7d      	ldr	r3, [pc, #500]	; (800295c <IIS3DWB_Thread+0x2e0>)
 8002766:	edd3 7a01 	vldr	s15, [r3, #4]
 800276a:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 800276e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	d503      	bpl.n	8002780 <IIS3DWB_Thread+0x104>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_16g);
 8002778:	2101      	movs	r1, #1
 800277a:	4877      	ldr	r0, [pc, #476]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 800277c:	f002 fce1 	bl	8005142 <iis3dwb_xl_full_scale_set>
      
      /*Set 2nd stage filter*/
      iis3dwb_xl_hp_path_on_out_set(&iis3dwb_ctx_instance,IIS3DWB_LP_5kHz);
 8002780:	2100      	movs	r1, #0
 8002782:	4875      	ldr	r0, [pc, #468]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 8002784:	f002 fd60 	bl	8005248 <iis3dwb_xl_hp_path_on_out_set>
      /* FIFO_WTM_IA routing on pin INT1 */
      iis3dwb_pin_int1_route_t pin_int1_route;
      *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
      *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
 8002790:	f107 030c 	add.w	r3, r7, #12
 8002794:	3301      	adds	r3, #1
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
      pin_int1_route.int1_ctrl.int1_fifo_th = 1;
 800279a:	7b3b      	ldrb	r3, [r7, #12]
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	733b      	strb	r3, [r7, #12]
      iis3dwb_pin_int1_route_set(&iis3dwb_ctx_instance, &pin_int1_route);
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	4619      	mov	r1, r3
 80027a8:	486b      	ldr	r0, [pc, #428]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80027aa:	f002 fdcb 	bl	8005344 <iis3dwb_pin_int1_route_set>
      
      /*Enable writing to FIFO*/
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 80027ae:	210a      	movs	r1, #10
 80027b0:	4869      	ldr	r0, [pc, #420]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80027b2:	f002 fe19 	bl	80053e8 <iis3dwb_fifo_xl_batch_set>
      
      HAL_NVIC_EnableIRQ(IIS3DWB_INT1_EXTI_IRQn); 
 80027b6:	2017      	movs	r0, #23
 80027b8:	f005 fa9b 	bl	8007cf2 <HAL_NVIC_EnableIRQ>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_RUNNING;      
 80027bc:	4b63      	ldr	r3, [pc, #396]	; (800294c <IIS3DWB_Thread+0x2d0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e766      	b.n	8002692 <IIS3DWB_Thread+0x16>
    }
    else if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING)
 80027c4:	4b61      	ldr	r3, [pc, #388]	; (800294c <IIS3DWB_Thread+0x2d0>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f040 80ad 	bne.w	8002928 <IIS3DWB_Thread+0x2ac>
    {  
      osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);     
 80027ce:	4b64      	ldr	r3, [pc, #400]	; (8002960 <IIS3DWB_Thread+0x2e4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f04f 31ff 	mov.w	r1, #4294967295
 80027d6:	4618      	mov	r0, r3
 80027d8:	f013 fee6 	bl	80165a8 <osSemaphoreWait>
      
      if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING) /* Change of state can happen while task blocked */
 80027dc:	4b5b      	ldr	r3, [pc, #364]	; (800294c <IIS3DWB_Thread+0x2d0>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f47f af56 	bne.w	8002692 <IIS3DWB_Thread+0x16>
      {
        /* Check FIFO_WTM_IA anf fifo level. We do not use PID in order to avoid reading one register twice */
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS1, &reg0, 1);
 80027e6:	f107 0213 	add.w	r2, r7, #19
 80027ea:	2301      	movs	r3, #1
 80027ec:	213a      	movs	r1, #58	; 0x3a
 80027ee:	485a      	ldr	r0, [pc, #360]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80027f0:	f002 fc77 	bl	80050e2 <iis3dwb_read_reg>
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS2, &reg1, 1);        
 80027f4:	f107 0212 	add.w	r2, r7, #18
 80027f8:	2301      	movs	r3, #1
 80027fa:	213b      	movs	r1, #59	; 0x3b
 80027fc:	4856      	ldr	r0, [pc, #344]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 80027fe:	f002 fc70 	bl	80050e2 <iis3dwb_read_reg>
        fifo_level = ((reg1 & 0x03) << 8) + reg0; 
 8002802:	7cbb      	ldrb	r3, [r7, #18]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	b29b      	uxth	r3, r3
 8002808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280c:	b29a      	uxth	r2, r3
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	b29b      	uxth	r3, r3
 8002812:	4413      	add	r3, r2
 8002814:	b29b      	uxth	r3, r3
 8002816:	823b      	strh	r3, [r7, #16]
        if((reg1) & 0x80  && (fifo_level>=IIS3DWB_SAMPLES_PER_IT) )
 8002818:	7cbb      	ldrb	r3, [r7, #18]
 800281a:	b25b      	sxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	f6bf af38 	bge.w	8002692 <IIS3DWB_Thread+0x16>
 8002822:	8a3b      	ldrh	r3, [r7, #16]
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b7f      	cmp	r3, #127	; 0x7f
 8002828:	f67f af33 	bls.w	8002692 <IIS3DWB_Thread+0x16>
        {        
          if(tim_value >= tim_value_old)
 800282c:	4b4d      	ldr	r3, [pc, #308]	; (8002964 <IIS3DWB_Thread+0x2e8>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b48      	ldr	r3, [pc, #288]	; (8002954 <IIS3DWB_Thread+0x2d8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d307      	bcc.n	8002848 <IIS3DWB_Thread+0x1cc>
          {
            period = tim_value - tim_value_old;
 8002838:	4b4a      	ldr	r3, [pc, #296]	; (8002964 <IIS3DWB_Thread+0x2e8>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b45      	ldr	r3, [pc, #276]	; (8002954 <IIS3DWB_Thread+0x2d8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	4a49      	ldr	r2, [pc, #292]	; (8002968 <IIS3DWB_Thread+0x2ec>)
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e007      	b.n	8002858 <IIS3DWB_Thread+0x1dc>
          }
          else
          {
            period = tim_value + (0xFFFFFFFF - tim_value_old);
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <IIS3DWB_Thread+0x2e8>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b41      	ldr	r3, [pc, #260]	; (8002954 <IIS3DWB_Thread+0x2d8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	4a44      	ldr	r2, [pc, #272]	; (8002968 <IIS3DWB_Thread+0x2ec>)
 8002856:	6013      	str	r3, [r2, #0]
          }
          
          tim_value_old = tim_value;
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <IIS3DWB_Thread+0x2e8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3d      	ldr	r2, [pc, #244]	; (8002954 <IIS3DWB_Thread+0x2d8>)
 800285e:	6013      	str	r3, [r2, #0]
          ts_iis3dwb +=  period;
 8002860:	4b41      	ldr	r3, [pc, #260]	; (8002968 <IIS3DWB_Thread+0x2ec>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f04f 0100 	mov.w	r1, #0
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <IIS3DWB_Thread+0x2d4>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	1884      	adds	r4, r0, r2
 8002872:	eb41 0503 	adc.w	r5, r1, r3
 8002876:	4b36      	ldr	r3, [pc, #216]	; (8002950 <IIS3DWB_Thread+0x2d4>)
 8002878:	e9c3 4500 	strd	r4, r5, [r3]
          
          uint16_t i = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	83fb      	strh	r3, [r7, #30]
          iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 8002880:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002884:	4a39      	ldr	r2, [pc, #228]	; (800296c <IIS3DWB_Thread+0x2f0>)
 8002886:	2178      	movs	r1, #120	; 0x78
 8002888:	4833      	ldr	r0, [pc, #204]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 800288a:	f002 fc2a 	bl	80050e2 <iis3dwb_read_reg>
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
          }
#else
          int16_t * p16src = (int16_t *)iis3dwb_mem;
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <IIS3DWB_Thread+0x2f0>)
 8002890:	61bb      	str	r3, [r7, #24]
          int16_t * p16dest = (int16_t *)iis3dwb_mem;
 8002892:	4b36      	ldr	r3, [pc, #216]	; (800296c <IIS3DWB_Thread+0x2f0>)
 8002894:	617b      	str	r3, [r7, #20]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 8002896:	2300      	movs	r3, #0
 8002898:	83fb      	strh	r3, [r7, #30]
 800289a:	e020      	b.n	80028de <IIS3DWB_Thread+0x262>
          {      
            p16src = (int16_t *)&((uint8_t *)(p16src))[1];          
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	3301      	adds	r3, #1
 80028a0:	61bb      	str	r3, [r7, #24]
            *p16dest++ = *p16src++;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	1c93      	adds	r3, r2, #2
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	1c99      	adds	r1, r3, #2
 80028ac:	6179      	str	r1, [r7, #20]
 80028ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028b2:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	1c93      	adds	r3, r2, #2
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	1c99      	adds	r1, r3, #2
 80028be:	6179      	str	r1, [r7, #20]
 80028c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028c4:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	1c93      	adds	r3, r2, #2
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	1c99      	adds	r1, r3, #2
 80028d0:	6179      	str	r1, [r7, #20]
 80028d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028d6:	801a      	strh	r2, [r3, #0]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 80028d8:	8bfb      	ldrh	r3, [r7, #30]
 80028da:	3301      	adds	r3, #1
 80028dc:	83fb      	strh	r3, [r7, #30]
 80028de:	8bfb      	ldrh	r3, [r7, #30]
 80028e0:	2b7f      	cmp	r3, #127	; 0x7f
 80028e2:	d9db      	bls.n	800289c <IIS3DWB_Thread+0x220>
          }
#endif  
          IIS3DWB_Data_Ready((uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 6, (double)ts_iis3dwb/(double)SystemCoreClock);        
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <IIS3DWB_Thread+0x2d4>)
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fd fe75 	bl	80005dc <__aeabi_ul2d>
 80028f2:	4680      	mov	r8, r0
 80028f4:	4689      	mov	r9, r1
 80028f6:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <IIS3DWB_Thread+0x2f4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fe2a 	bl	8000554 <__aeabi_ui2d>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4640      	mov	r0, r8
 8002906:	4649      	mov	r1, r9
 8002908:	f7fd ffc8 	bl	800089c <__aeabi_ddiv>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	ec43 2b17 	vmov	d7, r2, r3
 8002914:	eeb0 0a47 	vmov.f32	s0, s14
 8002918:	eef0 0a67 	vmov.f32	s1, s15
 800291c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002920:	4812      	ldr	r0, [pc, #72]	; (800296c <IIS3DWB_Thread+0x2f0>)
 8002922:	f000 fd4b 	bl	80033bc <IIS3DWB_Data_Ready>
 8002926:	e6b4      	b.n	8002692 <IIS3DWB_Thread+0x16>
        }
      }
    }
    else if ( IIS3DWB_Sensor_State == SM_SENSOR_STATE_SUSPENDING)
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <IIS3DWB_Thread+0x2d0>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	f47f aeb0 	bne.w	8002692 <IIS3DWB_Thread+0x16>
    {
#ifdef DATA_TEST
      usbTestData = 0;
#endif      
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_NOT_BATCHED);
 8002932:	2100      	movs	r1, #0
 8002934:	4808      	ldr	r0, [pc, #32]	; (8002958 <IIS3DWB_Thread+0x2dc>)
 8002936:	f002 fd57 	bl	80053e8 <iis3dwb_fifo_xl_batch_set>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_SUSPENDED;
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <IIS3DWB_Thread+0x2d0>)
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]
      osThreadSuspend(IIS3DWB_Thread_Id);
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <IIS3DWB_Thread+0x2f8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f014 f884 	bl	8016a52 <osThreadSuspend>
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 800294a:	e6a2      	b.n	8002692 <IIS3DWB_Thread+0x16>
 800294c:	20000004 	.word	0x20000004
 8002950:	20000670 	.word	0x20000670
 8002954:	20000664 	.word	0x20000664
 8002958:	20000018 	.word	0x20000018
 800295c:	2000ff08 	.word	0x2000ff08
 8002960:	200002d8 	.word	0x200002d8
 8002964:	20000660 	.word	0x20000660
 8002968:	20000668 	.word	0x20000668
 800296c:	200002e0 	.word	0x200002e0
 8002970:	20000038 	.word	0x20000038
 8002974:	2000ff04 	.word	0x2000ff04

08002978 <UpdateTimerValue>:
{
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(iis3dwb_data_ready_sem_id);
}

void UpdateTimerValue(void){
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	tim_value = hsm_tim.Instance->CNT;
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <UpdateTimerValue+0x1c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <UpdateTimerValue+0x20>)
 8002984:	6013      	str	r3, [r2, #0]
	osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <UpdateTimerValue+0x24>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f013 fe5a 	bl	8016644 <osSemaphoreRelease>
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200187d8 	.word	0x200187d8
 8002998:	20000660 	.word	0x20000660
 800299c:	200002d8 	.word	0x200002d8

080029a0 <IIS3DWB_Set_State>:

void IIS3DWB_Set_State(SM_Sensor_State_t newState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  IIS3DWB_Sensor_State = newState;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <IIS3DWB_Set_State+0x1c>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	7013      	strb	r3, [r2, #0]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	20000004 	.word	0x20000004

080029c0 <IIS3DWB_Start>:
  IIS3DWB_Init_Param.FS[0] = newFS1;
  IIS3DWB_Init_Param.FS[0] = newFS2;
}

void IIS3DWB_Start(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80029c4:	2003      	movs	r0, #3
 80029c6:	f7ff ffeb 	bl	80029a0 <IIS3DWB_Set_State>
  osThreadResume(IIS3DWB_Thread_Id);
 80029ca:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <IIS3DWB_Start+0x18>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f014 f84c 	bl	8016a6c <osThreadResume>
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	2000ff04 	.word	0x2000ff04

080029dc <IIS3DWB_Stop>:

void IIS3DWB_Stop(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_SUSPENDING);  
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7ff ffdd 	bl	80029a0 <IIS3DWB_Set_State>
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <IMP34DT05_Set_State>:
  
}


void IMP34DT05_Set_State(SM_Sensor_State_t newState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  IMP34DT05_Sensor_State = newState;
 80029f6:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <IMP34DT05_Set_State+0x1c>)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	7013      	strb	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	20000024 	.word	0x20000024

08002a0c <IMP34DT05_Start>:
  IMP34DT05_Init_Param.FS[0] = newFS1;
  IMP34DT05_Init_Param.FS[0] = newFS2;
}

void IMP34DT05_Start(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002a10:	2003      	movs	r0, #3
 8002a12:	f7ff ffeb 	bl	80029ec <IMP34DT05_Set_State>
  osThreadResume(IMP34DT05_Thread_Id);
 8002a16:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <IMP34DT05_Start+0x18>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f014 f826 	bl	8016a6c <osThreadResume>
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	2000ff28 	.word	0x2000ff28

08002a28 <IMP34DT05_Stop>:

void IMP34DT05_Stop(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f7ff ffdd 	bl	80029ec <IMP34DT05_Set_State>
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <ISM330DHCX_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(ism330dhcx_DreadySem_id);    
}

void ISM330DHCX_Set_State(SM_Sensor_State_t newState)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
  ISM330DHCX_Sensor_State = newState;
 8002a42:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <ISM330DHCX_Set_State+0x1c>)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	7013      	strb	r3, [r2, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	20000025 	.word	0x20000025

08002a58 <ISM330DHCX_Start>:
  ISM330DHCX_Init_Param.FS[0] = newFS1;
  ISM330DHCX_Init_Param.FS[0] = newFS2;
}

void ISM330DHCX_Start(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	f7ff ffeb 	bl	8002a38 <ISM330DHCX_Set_State>
  osThreadResume(ISM330DHCX_Thread_Id);
 8002a62:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <ISM330DHCX_Start+0x18>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f014 f800 	bl	8016a6c <osThreadResume>
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20015e80 	.word	0x20015e80

08002a74 <ISM330DHCX_Stop>:

void ISM330DHCX_Stop(void)
{  
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f7ff ffdd 	bl	8002a38 <ISM330DHCX_Set_State>
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <LPS22HH_Set_State>:
    }    
  }     
}

void LPS22HH_Set_State(SM_Sensor_State_t newState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  LPS22HH_Sensor_State = newState;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <LPS22HH_Set_State+0x1c>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	7013      	strb	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	20000026 	.word	0x20000026

08002aa4 <LPS22HH_Start>:
  LPS22HH_Init_Param.FS[0] = newFS1;
  LPS22HH_Init_Param.FS[0] = newFS2;
}

void LPS22HH_Start(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002aa8:	2003      	movs	r0, #3
 8002aaa:	f7ff ffeb 	bl	8002a84 <LPS22HH_Set_State>
  osThreadResume(LPS22HH_Thread_Id);
 8002aae:	4b03      	ldr	r3, [pc, #12]	; (8002abc <LPS22HH_Start+0x18>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f013 ffda 	bl	8016a6c <osThreadResume>
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20015fa4 	.word	0x20015fa4

08002ac0 <LPS22HH_Stop>:

void LPS22HH_Stop(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7ff ffdd 	bl	8002a84 <LPS22HH_Set_State>
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <main>:
* @brief  Main program
* @param  None
* @retval None
*/  
int main(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08e      	sub	sp, #56	; 0x38
 8002ad4:	af00      	add	r7, sp, #0



	HAL_Init();
 8002ad6:	f003 fb39 	bl	800614c <HAL_Init>

	SystemClock_Config();
 8002ada:	f000 f92d 	bl	8002d38 <SystemClock_Config>
    
	/* Enable Power Clock for low power modes*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <main+0x104>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	4a3c      	ldr	r2, [pc, #240]	; (8002bd4 <main+0x104>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aea:	4b3a      	ldr	r3, [pc, #232]	; (8002bd4 <main+0x104>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
	MX_SDMMC1_SD_Init();
 8002af6:	f000 f87d 	bl	8002bf4 <MX_SDMMC1_SD_Init>
	//HAL_PWREx_EnableVddUSB();		/* USB */
	//HAL_PWREx_EnableVddIO2();		/* VddIO2 is for Port G, since we are not using it */
	//BSP_Enable_DCDC2();				//Only for I2C 3, WiFi
  
	/* Configure the Battery Charger */
	BattChrg_Init();
 8002afa:	f000 f9bd 	bl	8002e78 <BattChrg_Init>
  
	/* Configure Power Voltage Detector(PVD) to detect if battery voltage is low */
	PVD_Config();
 8002afe:	f000 f9ef 	bl	8002ee0 <PVD_Config>
  
	/* Configure DEBUG PIN and LED */
	//BSP_DEBUG_PIN_Init_All();
	BSP_LED_Init(LED1);				//Green
 8002b02:	2000      	movs	r0, #0
 8002b04:	f002 fdce 	bl	80056a4 <BSP_LED_Init>
	BSP_LED_Init(LED2);				//Orange
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f002 fdcb 	bl	80056a4 <BSP_LED_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();		//PA13, 14 are for DEBUG
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <main+0x104>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	4a30      	ldr	r2, [pc, #192]	; (8002bd4 <main+0x104>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <main+0x104>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
   
	HSD_JSON_set_allocation_functions(HSD_malloc, HSD_free);
 8002b26:	492c      	ldr	r1, [pc, #176]	; (8002bd8 <main+0x108>)
 8002b28:	482c      	ldr	r0, [pc, #176]	; (8002bdc <main+0x10c>)
 8002b2a:	f7fe fa87 	bl	800103c <HSD_JSON_set_allocation_functions>
  
  /* Start USB */  
  //MX_USB_DEVICE_Init();			//Dont know why this is disabled
  
  /* Set default device description */
  set_default_description();
 8002b2e:	f7ff f961 	bl	8001df4 <set_default_description>
  
  /* USER Button initialization */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002b32:	2101      	movs	r1, #1
 8002b34:	2000      	movs	r0, #0
 8002b36:	f002 fd63 	bl	8005600 <BSP_PB_Init>
  BSP_PB_PWR_Init();
 8002b3a:	f002 fd31 	bl	80055a0 <BSP_PB_PWR_Init>
  
  /* Sensor Manager initilization, only using PID (Platform Indepentent Drivers) */
  SM_Peripheral_Init();
 8002b3e:	f001 feb9 	bl	80048b4 <SM_Peripheral_Init>
  SM_OS_Init();
 8002b42:	f001 fd7b 	bl	800463c <SM_OS_Init>
  
  MX_USART2_Init();
 8002b46:	f000 f877 	bl	8002c38 <MX_USART2_Init>
  Peripheral_MSP_Init_All();  
 8002b4a:	f000 fc4f 	bl	80033ec <Peripheral_MSP_Init_All>
  SDM_Peripheral_Init();
 8002b4e:	f000 ffcd 	bl	8003aec <SDM_Peripheral_Init>
  
  Peripheral_OS_Init_All();  
 8002b52:	f000 fc51 	bl	80033f8 <Peripheral_OS_Init_All>
  SDM_OS_Init();
 8002b56:	f000 ffcf 	bl	8003af8 <SDM_OS_Init>
  
  //Show reset
  char wakeUp [] = {"MCU WAKE UP"};
 8002b5a:	4a21      	ldr	r2, [pc, #132]	; (8002be0 <main+0x110>)
 8002b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b60:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t *) wakeUp, sizeof(wakeUp), HAL_MAX_DELAY);
 8002b66:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	220c      	movs	r2, #12
 8002b70:	481c      	ldr	r0, [pc, #112]	; (8002be4 <main+0x114>)
 8002b72:	f00b fdb3 	bl	800e6dc <HAL_UART_Transmit>

  //Get SOC
  BSP_BC_GetVoltageAndLevel(&mvLevel, &batteryLevel);
 8002b76:	491c      	ldr	r1, [pc, #112]	; (8002be8 <main+0x118>)
 8002b78:	481c      	ldr	r0, [pc, #112]	; (8002bec <main+0x11c>)
 8002b7a:	f002 fea5 	bl	80058c8 <BSP_BC_GetVoltageAndLevel>

  //Show SOC
  char soc[21] = {"SOC in % :"};
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <main+0x120>)
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b86:	c303      	stmia	r3!, {r0, r1}
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	0c12      	lsrs	r2, r2, #16
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	f107 031f 	add.w	r3, r7, #31
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	811a      	strh	r2, [r3, #8]
  char batVal[5];
  itoa(batteryLevel, batVal,10);
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <main+0x118>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	220a      	movs	r2, #10
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f01a fad1 	bl	801d150 <itoa>
  strcat(soc, batVal);
 8002bae:	f107 020c 	add.w	r2, r7, #12
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f01b f90a 	bl	801ddd2 <strcat>
  HAL_UART_Transmit(&huart2, (uint8_t *) soc, sizeof(soc), HAL_MAX_DELAY);
 8002bbe:	f107 0114 	add.w	r1, r7, #20
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc6:	2215      	movs	r2, #21
 8002bc8:	4806      	ldr	r0, [pc, #24]	; (8002be4 <main+0x114>)
 8002bca:	f00b fd87 	bl	800e6dc <HAL_UART_Transmit>

  /* Start scheduler */
  osKernelStart();
 8002bce:	f013 fc99 	bl	8016504 <osKernelStart>
  
  while(1);  
 8002bd2:	e7fe      	b.n	8002bd2 <main+0x102>
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	0801d235 	.word	0x0801d235
 8002bdc:	0801d225 	.word	0x0801d225
 8002be0:	080216d8 	.word	0x080216d8
 8002be4:	20016358 	.word	0x20016358
 8002be8:	20000720 	.word	0x20000720
 8002bec:	2000071c 	.word	0x2000071c
 8002bf0:	080216e4 	.word	0x080216e4

08002bf4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <MX_SDMMC1_SD_Init+0x3c>)
 8002bfa:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <MX_SDMMC1_SD_Init+0x40>)
 8002bfc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <MX_SDMMC1_SD_Init+0x3c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <MX_SDMMC1_SD_Init+0x3c>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <MX_SDMMC1_SD_Init+0x3c>)
 8002c0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c10:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <MX_SDMMC1_SD_Init+0x3c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <MX_SDMMC1_SD_Init+0x3c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <MX_SDMMC1_SD_Init+0x3c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20015fc0 	.word	0x20015fc0
 8002c34:	50062400 	.word	0x50062400

08002c38 <MX_USART2_Init>:


//UART2 INIT
void MX_USART2_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8002c3c:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c3e:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <MX_USART2_Init+0x98>)
 8002c40:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c48:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4a:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002c56:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c5e:	220c      	movs	r2, #12
 8002c60:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c68:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c82:	4812      	ldr	r0, [pc, #72]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c84:	f00b fcda 	bl	800e63c <HAL_UART_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_USART2_Init+0x5a>
	{
		Error_Handler();
 8002c8e:	f000 fbcf 	bl	8003430 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c92:	2100      	movs	r1, #0
 8002c94:	480d      	ldr	r0, [pc, #52]	; (8002ccc <MX_USART2_Init+0x94>)
 8002c96:	f00d f918 	bl	800feca <HAL_UARTEx_SetTxFifoThreshold>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_USART2_Init+0x6c>
	{
		Error_Handler();
 8002ca0:	f000 fbc6 	bl	8003430 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4809      	ldr	r0, [pc, #36]	; (8002ccc <MX_USART2_Init+0x94>)
 8002ca8:	f00d f94d 	bl	800ff46 <HAL_UARTEx_SetRxFifoThreshold>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_USART2_Init+0x7e>
	{
		Error_Handler();
 8002cb2:	f000 fbbd 	bl	8003430 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002cb6:	4805      	ldr	r0, [pc, #20]	; (8002ccc <MX_USART2_Init+0x94>)
 8002cb8:	f00d f8ce 	bl	800fe58 <HAL_UARTEx_DisableFifoMode>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_USART2_Init+0x8e>
	{
		Error_Handler();
 8002cc2:	f000 fbb5 	bl	8003430 <Error_Handler>
	}

}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20016358 	.word	0x20016358
 8002cd0:	40004400 	.word	0x40004400

08002cd4 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
 // UNUSED(huart);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 030c 	add.w	r3, r7, #12
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_UART_MspInit+0x58>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <HAL_UART_MspInit+0x58>)
 8002cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_UART_MspInit+0x58>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART_CR2_RXINV|USART2_RTS_Pin|USART2_TX_Pin;
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <HAL_UART_MspInit+0x5c>)
 8002d06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d14:	2307      	movs	r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d18:	f107 030c 	add.w	r3, r7, #12
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4805      	ldr	r0, [pc, #20]	; (8002d34 <HAL_UART_MspInit+0x60>)
 8002d20:	f005 fa82 	bl	8008228 <HAL_GPIO_Init>
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	00010030 	.word	0x00010030
 8002d34:	48000c00 	.word	0x48000c00

08002d38 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0be      	sub	sp, #248	; 0xf8
 8002d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d3e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d42:	2244      	movs	r2, #68	; 0x44
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f01a faa4 	bl	801d294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	229c      	movs	r2, #156	; 0x9c
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f01a fa96 	bl	801d294 <memset>
  
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f007 f84d 	bl	8009e08 <HAL_PWREx_ControlVoltageScaling>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8002d74:	f000 fb5c 	bl	8003430 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  HAL_PWR_EnableBkUpAccess();
 8002d78:	f006 ffa6 	bl	8009cc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <SystemClock_Config+0x134>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	4a3a      	ldr	r2, [pc, #232]	; (8002e6c <SystemClock_Config+0x134>)
 8002d84:	f023 0318 	bic.w	r3, r3, #24
 8002d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;	//Changed
 8002d8c:	2325      	movs	r3, #37	; 0x25
 8002d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;					//Changed
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002da6:	2302      	movs	r3, #2
 8002da8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dac:	2303      	movs	r3, #3
 8002dae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002db2:	2302      	movs	r3, #2
 8002db4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002db8:	2314      	movs	r3, #20
 8002dba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;				//Changed
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dd0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f007 f915 	bl	800a004 <HAL_RCC_OscConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002de0:	f000 fb26 	bl	8003430 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002de4:	230f      	movs	r3, #15
 8002de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dea:	2303      	movs	r3, #3
 8002dec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e06:	2105      	movs	r1, #5
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f007 fd21 	bl	800a850 <HAL_RCC_ClockConfig>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002e14:	f000 fb0c 	bl	8003430 <Error_Handler>
#if 0
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
    |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
      |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_DFSDM1AUDIO;
#else
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <SystemClock_Config+0x138>)
 8002e1a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
#endif

  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002e1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e24:	2300      	movs	r3, #0
 8002e26:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
#endif

  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8002e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

#if 1
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002e36:	2303      	movs	r3, #3
 8002e38:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8002e3e:	2360      	movs	r3, #96	; 0x60
 8002e40:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8002e42:	2319      	movs	r3, #25
 8002e44:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8002e46:	2304      	movs	r3, #4
 8002e48:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <SystemClock_Config+0x13c>)
 8002e50:	623b      	str	r3, [r7, #32]
#endif

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	4618      	mov	r0, r3
 8002e56:	f007 ffa9 	bl	800adac <HAL_RCCEx_PeriphCLKConfig>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8002e60:	f000 fae6 	bl	8003430 <Error_Handler>
  }  
}
 8002e64:	bf00      	nop
 8002e66:	37f8      	adds	r7, #248	; 0xf8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	000a4002 	.word	0x000a4002
 8002e74:	01010000 	.word	0x01010000

08002e78 <BattChrg_Init>:


void BattChrg_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  BSP_BC_Init();
 8002e7c:	f002 fc88 	bl	8005790 <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 8002e80:	f002 fcca 	bl	8005818 <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);  
 8002e84:	200a      	movs	r0, #10
 8002e86:	f002 fc8b 	bl	80057a0 <BSP_BC_CmdSend>
  
  HAL_EXTI_GetHandle(&BC_exti, EXTI_LINE_10);  
 8002e8a:	4908      	ldr	r1, [pc, #32]	; (8002eac <BattChrg_Init+0x34>)
 8002e8c:	4808      	ldr	r0, [pc, #32]	; (8002eb0 <BattChrg_Init+0x38>)
 8002e8e:	f005 f987 	bl	80081a0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&BC_exti,  HAL_EXTI_COMMON_CB_ID, BC_Int_Callback);
 8002e92:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <BattChrg_Init+0x3c>)
 8002e94:	2100      	movs	r1, #0
 8002e96:	4806      	ldr	r0, [pc, #24]	; (8002eb0 <BattChrg_Init+0x38>)
 8002e98:	f005 f968 	bl	800816c <HAL_EXTI_RegisterCallback>
  
  t_stwin = HAL_GetTick(); 
 8002e9c:	f003 f9c2 	bl	8006224 <HAL_GetTick>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <BattChrg_Init+0x40>)
 8002ea4:	6013      	str	r3, [r2, #0]
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	1600000a 	.word	0x1600000a
 8002eb0:	20016318 	.word	0x20016318
 8002eb4:	08002ebd 	.word	0x08002ebd
 8002eb8:	20000718 	.word	0x20000718

08002ebc <BC_Int_Callback>:
* @brief  Battery Charger Interrupt callback
* @param  None
* @retval None
*/
void BC_Int_Callback(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  if(HAL_GetTick() - t_stwin > 4000)
 8002ec0:	f003 f9b0 	bl	8006224 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <BC_Int_Callback+0x20>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002ed0:	d902      	bls.n	8002ed8 <BC_Int_Callback+0x1c>
  {
    BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8002ed2:	2017      	movs	r0, #23
 8002ed4:	f002 fc64 	bl	80057a0 <BSP_BC_CmdSend>
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000718 	.word	0x20000718

08002ee0 <PVD_Config>:
* @brief  Configures the PVD resources.
* @param  None
* @retval None
*/
void PVD_Config(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD;
  
  /*##-1- Enable Power Clock #################################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <PVD_Config+0x50>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <PVD_Config+0x50>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <PVD_Config+0x50>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
  
  /*##-2- Configure the NVIC for PVD #########################################*/
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	2001      	movs	r0, #1
 8002f04:	f004 fed9 	bl	8007cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f004 fef2 	bl	8007cf2 <HAL_NVIC_EnableIRQ>
  
  /* Configure the PVD Level to 6 and generate an interrupt on falling
  edge(PVD detection level set to 2.9V, refer to the electrical characteristics
  of you device datasheet for more details) */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002f0e:	230c      	movs	r3, #12
 8002f10:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8002f12:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002f16:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002f18:	f107 0308 	add.w	r3, r7, #8
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f006 fee3 	bl	8009ce8 <HAL_PWR_ConfigPVD>
  
  /* Enable the PVD Output */
  HAL_PWR_EnablePVD();
 8002f22:	f006 ff41 	bl	8009da8 <HAL_PWR_EnablePVD>
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000

08002f34 <vApplicationIdleHook>:


void vApplicationIdleHook( void )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	//Starts measurement manually


#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT) 
	//If SD_Logging enabled start measurement
  if(SD_Logging_Enabled)
 8002f38:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <vApplicationIdleHook+0x100>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <vApplicationIdleHook+0x10>
  {
    SDM_AutosaveFile();
 8002f40:	f001 fad6 	bl	80044f0 <SDM_AutosaveFile>
  }
#endif
  
  if (!SD_Logging_Active)
 8002f44:	4b3c      	ldr	r3, [pc, #240]	; (8003038 <vApplicationIdleHook+0x104>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d171      	bne.n	8003030 <vApplicationIdleHook+0xfc>
  {
    if(com_status == HS_DATALOG_USB_STARTED)
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	; (800303c <vApplicationIdleHook+0x108>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d121      	bne.n	8002f9a <vApplicationIdleHook+0x66>
    {
        if(!(HAL_GetTick()%100)) 
 8002f56:	f003 f965 	bl	8006224 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b38      	ldr	r3, [pc, #224]	; (8003040 <vApplicationIdleHook+0x10c>)
 8002f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2164      	movs	r1, #100	; 0x64
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d103      	bne.n	8002f78 <vApplicationIdleHook+0x44>
        {
          BSP_LED_On(LED_ORANGE);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f002 fbd9 	bl	8005728 <BSP_LED_On>
 8002f76:	e059      	b.n	800302c <vApplicationIdleHook+0xf8>
        }
        else 
        {
          if(!(HAL_GetTick()%50)) 
 8002f78:	f003 f954 	bl	8006224 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <vApplicationIdleHook+0x10c>)
 8002f80:	fba3 1302 	umull	r1, r3, r3, r2
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	2132      	movs	r1, #50	; 0x32
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d14c      	bne.n	800302c <vApplicationIdleHook+0xf8>
          {
            BSP_LED_Off(LED_ORANGE);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f002 fbe2 	bl	800575c <BSP_LED_Off>
 8002f98:	e048      	b.n	800302c <vApplicationIdleHook+0xf8>
          }
        }        
    }
    else
    {
      if (!BSP_SD_IsDetected())
 8002f9a:	f002 fffb 	bl	8005f94 <BSP_SD_IsDetected>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d121      	bne.n	8002fe8 <vApplicationIdleHook+0xb4>
      {
        if(!(HAL_GetTick()%200)) 
 8002fa4:	f003 f93e 	bl	8006224 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <vApplicationIdleHook+0x10c>)
 8002fac:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	21c8      	movs	r1, #200	; 0xc8
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <vApplicationIdleHook+0x92>
        {
          BSP_LED_On(LED_ORANGE);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f002 fbb2 	bl	8005728 <BSP_LED_On>
 8002fc4:	e032      	b.n	800302c <vApplicationIdleHook+0xf8>
        }
        else 
        {
          if(!(HAL_GetTick()%100)) 
 8002fc6:	f003 f92d 	bl	8006224 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <vApplicationIdleHook+0x10c>)
 8002fce:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2164      	movs	r1, #100	; 0x64
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d125      	bne.n	800302c <vApplicationIdleHook+0xf8>
          {
            BSP_LED_Off(LED_ORANGE);
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f002 fbbb 	bl	800575c <BSP_LED_Off>
 8002fe6:	e021      	b.n	800302c <vApplicationIdleHook+0xf8>
          }
        }    
      }
      else
      {
        if(!(HAL_GetTick()%1000)) 
 8002fe8:	f003 f91c 	bl	8006224 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <vApplicationIdleHook+0x110>)
 8002ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <vApplicationIdleHook+0xd8>
        {
          BSP_LED_On(LED_ORANGE);
 8003004:	2001      	movs	r0, #1
 8003006:	f002 fb8f 	bl	8005728 <BSP_LED_On>
 800300a:	e00f      	b.n	800302c <vApplicationIdleHook+0xf8>
        }
        else 
        {
          if(!(HAL_GetTick()%50)) 
 800300c:	f003 f90a 	bl	8006224 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <vApplicationIdleHook+0x10c>)
 8003014:	fba3 1302 	umull	r1, r3, r3, r2
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	2132      	movs	r1, #50	; 0x32
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <vApplicationIdleHook+0xf8>
          {
            BSP_LED_Off(LED_ORANGE);
 8003026:	2001      	movs	r0, #1
 8003028:	f002 fb98 	bl	800575c <BSP_LED_Off>
        }
      }
    }
    //Start Measurement manually
    //Show reset
    SDM_StartMeasurements();
 800302c:	f001 fa00 	bl	8004430 <SDM_StartMeasurements>
  }
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000768 	.word	0x20000768
 8003038:	20000754 	.word	0x20000754
 800303c:	200002d4 	.word	0x200002d4
 8003040:	51eb851f 	.word	0x51eb851f
 8003044:	10624dd3 	.word	0x10624dd3

08003048 <SENSOR_Generic_Data_Ready>:
* @param  size: input data buffer size [bytes]
* @param  timeStamp: timestamp of the latest sample in the input buffer
* @retval 
*/
void SENSOR_Generic_Data_Ready(uint16_t sId, uint8_t *buf, uint16_t size, double timeStamp)
{ 
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	ed87 0b00 	vstr	d0, [r7]
 8003056:	81fb      	strh	r3, [r7, #14]
 8003058:	4613      	mov	r3, r2
 800305a:	81bb      	strh	r3, [r7, #12]
  COM_SensorStatus_t * tempStatus = COM_GetSensorStatus(sId);    
 800305c:	89fb      	ldrh	r3, [r7, #14]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe fdcd 	bl	8001c00 <COM_GetSensorStatus>
 8003066:	6238      	str	r0, [r7, #32]
  COM_SensorDescriptor_t * tempDescriptor = COM_GetSensorDescriptor(sId); 
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fdb3 	bl	8001bd8 <COM_GetSensorDescriptor>
 8003072:	61f8      	str	r0, [r7, #28]
  COM_SubSensorDescriptor_t *tempSubSensorDescriptor; 
  uint16_t toSend = 0, nBytesPerSample = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003078:	2300      	movs	r3, #0
 800307a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  
  if (sensor_first_dataReady[sId]) // Discard first set of sensor data
 800307c:	89fb      	ldrh	r3, [r7, #14]
 800307e:	4a89      	ldr	r2, [pc, #548]	; (80032a4 <SENSOR_Generic_Data_Ready+0x25c>)
 8003080:	5cd3      	ldrb	r3, [r2, r3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d020      	beq.n	80030c8 <SENSOR_Generic_Data_Ready+0x80>
  {
    sensor_first_dataReady[sId] = 0;    
 8003086:	89fb      	ldrh	r3, [r7, #14]
 8003088:	4a86      	ldr	r2, [pc, #536]	; (80032a4 <SENSOR_Generic_Data_Ready+0x25c>)
 800308a:	2100      	movs	r1, #0
 800308c:	54d1      	strb	r1, [r2, r3]
    sensor_n_samples_acc[sId] = 0.0f;    
 800308e:	89fb      	ldrh	r3, [r7, #14]
 8003090:	4a85      	ldr	r2, [pc, #532]	; (80032a8 <SENSOR_Generic_Data_Ready+0x260>)
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
    tempStatus->initialOffset = (float)timeStamp;
 800309c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030a0:	f7fd fdca 	bl	8000c38 <__aeabi_d2f>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	609a      	str	r2, [r3, #8]
    old_time_stamp[sId] = timeStamp;
 80030aa:	89fb      	ldrh	r3, [r7, #14]
 80030ac:	4a7f      	ldr	r2, [pc, #508]	; (80032ac <SENSOR_Generic_Data_Ready+0x264>)
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	18d1      	adds	r1, r2, r3
 80030b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030b6:	e9c1 2300 	strd	r2, r3, [r1]
    sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;
 80030ba:	89fb      	ldrh	r3, [r7, #14]
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	8991      	ldrh	r1, [r2, #12]
 80030c0:	4a7b      	ldr	r2, [pc, #492]	; (80032b0 <SENSOR_Generic_Data_Ready+0x268>)
 80030c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
      }      
    }    
  }    
}
 80030c6:	e16c      	b.n	80033a2 <SENSOR_Generic_Data_Ready+0x35a>
    if(tempDescriptor->dataType == DATA_TYPE_FLOAT || tempDescriptor->dataType == DATA_TYPE_INT32 || tempDescriptor->dataType == DATA_TYPE_UINT32) 
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	7c5b      	ldrb	r3, [r3, #17]
 80030cc:	2b06      	cmp	r3, #6
 80030ce:	d007      	beq.n	80030e0 <SENSOR_Generic_Data_Ready+0x98>
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	7c5b      	ldrb	r3, [r3, #17]
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d003      	beq.n	80030e0 <SENSOR_Generic_Data_Ready+0x98>
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	7c5b      	ldrb	r3, [r3, #17]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d102      	bne.n	80030e6 <SENSOR_Generic_Data_Ready+0x9e>
      nBytesPerSample = 4;
 80030e0:	2304      	movs	r3, #4
 80030e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80030e4:	e014      	b.n	8003110 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT16 || tempDescriptor->dataType == DATA_TYPE_INT16) 
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	7c5b      	ldrb	r3, [r3, #17]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d003      	beq.n	80030f6 <SENSOR_Generic_Data_Ready+0xae>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	7c5b      	ldrb	r3, [r3, #17]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d102      	bne.n	80030fc <SENSOR_Generic_Data_Ready+0xb4>
      nBytesPerSample = 2;
 80030f6:	2302      	movs	r3, #2
 80030f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80030fa:	e009      	b.n	8003110 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT8 || tempDescriptor->dataType == DATA_TYPE_INT8) 
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	7c5b      	ldrb	r3, [r3, #17]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <SENSOR_Generic_Data_Ready+0xc4>
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	7c5b      	ldrb	r3, [r3, #17]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <SENSOR_Generic_Data_Ready+0xc8>
      nBytesPerSample = 1;
 800310c:	2301      	movs	r3, #1
 800310e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint8_t totalDataPerSample = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
 800311a:	e01d      	b.n	8003158 <SENSOR_Generic_Data_Ready+0x110>
      if (tempStatus->subSensorStatus[i].isActive)
 800311c:	6a39      	ldr	r1, [r7, #32]
 800311e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	3324      	adds	r3, #36	; 0x24
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00f      	beq.n	8003152 <SENSOR_Generic_Data_Ready+0x10a>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 8003132:	89fb      	ldrh	r3, [r7, #14]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fd75 	bl	8001c2c <COM_GetSubSensorDescriptor>
 8003142:	61b8      	str	r0, [r7, #24]
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	789a      	ldrb	r2, [r3, #2]
 8003148:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800314c:	4413      	add	r3, r2
 800314e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	3301      	adds	r3, #1
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800315e:	461a      	mov	r2, r3
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	4293      	cmp	r3, r2
 8003164:	dbda      	blt.n	800311c <SENSOR_Generic_Data_Ready+0xd4>
    nBytesPerSample *= totalDataPerSample;
 8003166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800316a:	b29b      	uxth	r3, r3
 800316c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800316e:	fb12 f303 	smulbb	r3, r2, r3
 8003172:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sensor_n_samples_acc[sId] = (float)(size / nBytesPerSample);
 8003174:	89ba      	ldrh	r2, [r7, #12]
 8003176:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	b29b      	uxth	r3, r3
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	89fb      	ldrh	r3, [r7, #14]
 8003184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003188:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <SENSOR_Generic_Data_Ready+0x260>)
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	edc3 7a00 	vstr	s15, [r3]
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	4a44      	ldr	r2, [pc, #272]	; (80032a8 <SENSOR_Generic_Data_Ready+0x260>)
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd f9fb 	bl	8000598 <__aeabi_f2d>
 80031a2:	4604      	mov	r4, r0
 80031a4:	460d      	mov	r5, r1
 80031a6:	89fb      	ldrh	r3, [r7, #14]
 80031a8:	4a40      	ldr	r2, [pc, #256]	; (80032ac <SENSOR_Generic_Data_Ready+0x264>)
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031b6:	f7fd f88f 	bl	80002d8 <__aeabi_dsub>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4620      	mov	r0, r4
 80031c0:	4629      	mov	r1, r5
 80031c2:	f7fd fb6b 	bl	800089c <__aeabi_ddiv>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	f7fd fd33 	bl	8000c38 <__aeabi_d2f>
 80031d2:	4602      	mov	r2, r0
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	605a      	str	r2, [r3, #4]
    old_time_stamp[sId] = timeStamp;
 80031d8:	89fb      	ldrh	r3, [r7, #14]
 80031da:	4a34      	ldr	r2, [pc, #208]	; (80032ac <SENSOR_Generic_Data_Ready+0x264>)
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	18d1      	adds	r1, r2, r3
 80031e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031e4:	e9c1 2300 	strd	r2, r3, [r1]
    toSend = size/nBytesPerSample;
 80031e8:	89ba      	ldrh	r2, [r7, #12]
 80031ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(toSend > 0)
 80031f2:	e0d2      	b.n	800339a <SENSOR_Generic_Data_Ready+0x352>
      if(toSend < sensor_n_samples_to_timestamp[sId] || sensor_n_samples_to_timestamp[sId] == 0)
 80031f4:	89fb      	ldrh	r3, [r7, #14]
 80031f6:	4a2e      	ldr	r2, [pc, #184]	; (80032b0 <SENSOR_Generic_Data_Ready+0x268>)
 80031f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80031fe:	429a      	cmp	r2, r3
 8003200:	d305      	bcc.n	800320e <SENSOR_Generic_Data_Ready+0x1c6>
 8003202:	89fb      	ldrh	r3, [r7, #14]
 8003204:	4a2a      	ldr	r2, [pc, #168]	; (80032b0 <SENSOR_Generic_Data_Ready+0x268>)
 8003206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d135      	bne.n	800327a <SENSOR_Generic_Data_Ready+0x232>
        if(com_status == HS_DATALOG_SD_STARTED)
 800320e:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <SENSOR_Generic_Data_Ready+0x26c>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d10b      	bne.n	8003230 <SENSOR_Generic_Data_Ready+0x1e8>
          SDM_Fill_Buffer(sId , (uint8_t *)buf, toSend * nBytesPerSample);
 8003218:	89fb      	ldrh	r3, [r7, #14]
 800321a:	b2d8      	uxtb	r0, r3
 800321c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800321e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003220:	fb12 f303 	smulbb	r3, r2, r3
 8003224:	b29b      	uxth	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	f000 ff47 	bl	80040bc <SDM_Fill_Buffer>
 800322e:	e010      	b.n	8003252 <SENSOR_Generic_Data_Ready+0x20a>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8003230:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <SENSOR_Generic_Data_Ready+0x26c>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10b      	bne.n	8003252 <SENSOR_Generic_Data_Ready+0x20a>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber  , (uint8_t *)buf, toSend * nBytesPerSample);
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003240:	b2d9      	uxtb	r1, r3
 8003242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003244:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	481a      	ldr	r0, [pc, #104]	; (80032b8 <SENSOR_Generic_Data_Ready+0x270>)
 800324e:	f00e fbb9 	bl	80119c4 <USBD_WCID_STREAMING_FillTxDataBuffer>
        if(sensor_n_samples_to_timestamp[sId] != 0)
 8003252:	89fb      	ldrh	r3, [r7, #14]
 8003254:	4a16      	ldr	r2, [pc, #88]	; (80032b0 <SENSOR_Generic_Data_Ready+0x268>)
 8003256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <SENSOR_Generic_Data_Ready+0x22c>
          sensor_n_samples_to_timestamp[sId] -= toSend;
 800325e:	89fb      	ldrh	r3, [r7, #14]
 8003260:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <SENSOR_Generic_Data_Ready+0x268>)
 8003262:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003266:	89fb      	ldrh	r3, [r7, #14]
 8003268:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800326a:	1a8a      	subs	r2, r1, r2
 800326c:	b291      	uxth	r1, r2
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <SENSOR_Generic_Data_Ready+0x268>)
 8003270:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        toSend = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003278:	e08f      	b.n	800339a <SENSOR_Generic_Data_Ready+0x352>
        if(com_status == HS_DATALOG_SD_STARTED)
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <SENSOR_Generic_Data_Ready+0x26c>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d11b      	bne.n	80032bc <SENSOR_Generic_Data_Ready+0x274>
          SDM_Fill_Buffer(sId, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	b2d8      	uxtb	r0, r3
 8003288:	89fb      	ldrh	r3, [r7, #14]
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <SENSOR_Generic_Data_Ready+0x268>)
 800328c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003290:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003292:	fb12 f303 	smulbb	r3, r2, r3
 8003296:	b29b      	uxth	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	f000 ff0e 	bl	80040bc <SDM_Fill_Buffer>
 80032a0:	e021      	b.n	80032e6 <SENSOR_Generic_Data_Ready+0x29e>
 80032a2:	bf00      	nop
 80032a4:	20000028 	.word	0x20000028
 80032a8:	20000678 	.word	0x20000678
 80032ac:	200006a8 	.word	0x200006a8
 80032b0:	20000700 	.word	0x20000700
 80032b4:	200002d4 	.word	0x200002d4
 80032b8:	20016050 	.word	0x20016050
        else if (com_status == HS_DATALOG_USB_STARTED )
 80032bc:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <SENSOR_Generic_Data_Ready+0x364>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10f      	bne.n	80032e6 <SENSOR_Generic_Data_Ready+0x29e>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80032cc:	b2d9      	uxtb	r1, r3
 80032ce:	89fb      	ldrh	r3, [r7, #14]
 80032d0:	4a37      	ldr	r2, [pc, #220]	; (80033b0 <SENSOR_Generic_Data_Ready+0x368>)
 80032d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d6:	461a      	mov	r2, r3
 80032d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032da:	fb03 f302 	mul.w	r3, r3, r2
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	4834      	ldr	r0, [pc, #208]	; (80033b4 <SENSOR_Generic_Data_Ready+0x36c>)
 80032e2:	f00e fb6f 	bl	80119c4 <USBD_WCID_STREAMING_FillTxDataBuffer>
        buf+=sensor_n_samples_to_timestamp[sId] * nBytesPerSample;
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	4a31      	ldr	r2, [pc, #196]	; (80033b0 <SENSOR_Generic_Data_Ready+0x368>)
 80032ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ee:	461a      	mov	r2, r3
 80032f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032f2:	fb03 f302 	mul.w	r3, r3, r2
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4413      	add	r3, r2
 80032fc:	60bb      	str	r3, [r7, #8]
        toSend -= sensor_n_samples_to_timestamp[sId];
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	4a2b      	ldr	r2, [pc, #172]	; (80033b0 <SENSOR_Generic_Data_Ready+0x368>)
 8003302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003306:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f941 	bl	8000598 <__aeabi_f2d>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	f04f 0000 	mov.w	r0, #0
 800331e:	4926      	ldr	r1, [pc, #152]	; (80033b8 <SENSOR_Generic_Data_Ready+0x370>)
 8003320:	f7fd fabc 	bl	800089c <__aeabi_ddiv>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4614      	mov	r4, r2
 800332a:	461d      	mov	r5, r3
 800332c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f920 	bl	8000574 <__aeabi_i2d>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4620      	mov	r0, r4
 800333a:	4629      	mov	r1, r5
 800333c:	f7fd f984 	bl	8000648 <__aeabi_dmul>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003348:	f7fc ffc6 	bl	80002d8 <__aeabi_dsub>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if(com_status == HS_DATALOG_SD_STARTED)
 8003354:	4b15      	ldr	r3, [pc, #84]	; (80033ac <SENSOR_Generic_Data_Ready+0x364>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d108      	bne.n	8003370 <SENSOR_Generic_Data_Ready+0x328>
          SDM_Fill_Buffer(sId, (uint8_t *)&newTS, 8);
 800335e:	89fb      	ldrh	r3, [r7, #14]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f107 0110 	add.w	r1, r7, #16
 8003366:	2208      	movs	r2, #8
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fea7 	bl	80040bc <SDM_Fill_Buffer>
 800336e:	e00e      	b.n	800338e <SENSOR_Generic_Data_Ready+0x346>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <SENSOR_Generic_Data_Ready+0x364>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d109      	bne.n	800338e <SENSOR_Generic_Data_Ready+0x346>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)&newTS, 8);
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003380:	b2d9      	uxtb	r1, r3
 8003382:	f107 0210 	add.w	r2, r7, #16
 8003386:	2308      	movs	r3, #8
 8003388:	480a      	ldr	r0, [pc, #40]	; (80033b4 <SENSOR_Generic_Data_Ready+0x36c>)
 800338a:	f00e fb1b 	bl	80119c4 <USBD_WCID_STREAMING_FillTxDataBuffer>
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
 800338e:	89fb      	ldrh	r3, [r7, #14]
 8003390:	6a3a      	ldr	r2, [r7, #32]
 8003392:	8991      	ldrh	r1, [r2, #12]
 8003394:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <SENSOR_Generic_Data_Ready+0x368>)
 8003396:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    while(toSend > 0)
 800339a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800339c:	2b00      	cmp	r3, #0
 800339e:	f47f af29 	bne.w	80031f4 <SENSOR_Generic_Data_Ready+0x1ac>
}
 80033a2:	bf00      	nop
 80033a4:	3730      	adds	r7, #48	; 0x30
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bdb0      	pop	{r4, r5, r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200002d4 	.word	0x200002d4
 80033b0:	20000700 	.word	0x20000700
 80033b4:	20016050 	.word	0x20016050
 80033b8:	3ff00000 	.word	0x3ff00000

080033bc <IIS3DWB_Data_Ready>:


/*  ---------- Sensors data ready functions ----------- */
void IIS3DWB_Data_Ready(uint8_t * buf, uint16_t size, double timeStamp)
{  
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	460b      	mov	r3, r1
 80033c6:	ed87 0b00 	vstr	d0, [r7]
 80033ca:	817b      	strh	r3, [r7, #10]
  SENSOR_Generic_Data_Ready(iis3dwb_com_id, buf, size, timeStamp);
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <IIS3DWB_Data_Ready+0x2c>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	897a      	ldrh	r2, [r7, #10]
 80033d4:	ed97 0b00 	vldr	d0, [r7]
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fe34 	bl	8003048 <SENSOR_Generic_Data_Ready>
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20016040 	.word	0x20016040

080033ec <Peripheral_MSP_Init_All>:
}



void Peripheral_MSP_Init_All(void)
{  
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  HTS221_Peripheral_Init();
  IMP34DT05_Peripheral_Init();
  MP23ABS1_Peripheral_Init();
  ISM330DHCX_Peripheral_Init();
#endif
  IIS3DWB_Peripheral_Init();
 80033f0:	f7ff f864 	bl	80024bc <IIS3DWB_Peripheral_Init>
#if 0
  IIS2DH_Peripheral_Init();
#endif
}
 80033f4:	bf00      	nop
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <Peripheral_OS_Init_All>:


void Peripheral_OS_Init_All(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  HTS221_OS_Init();
  IMP34DT05_OS_Init();
  MP23ABS1_OS_Init();
  ISM330DHCX_OS_Init();
#endif
  IIS3DWB_OS_Init();
 80033fc:	f7ff f8ea 	bl	80025d4 <IIS3DWB_OS_Init>
#if 0
  IIS2DH_OS_Init();
#endif
}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d002      	beq.n	800341a <HAL_GPIO_EXTI_Callback+0x16>
 8003414:	2b20      	cmp	r3, #32
 8003416:	d004      	beq.n	8003422 <HAL_GPIO_EXTI_Callback+0x1e>
		  userButtonCallback(GPIO_Pin);
	  case  IIS3DWB_INT1_Pin:
		  UpdateTimerValue();

	  default:
		break;
 8003418:	e005      	b.n	8003426 <HAL_GPIO_EXTI_Callback+0x22>
		  userButtonCallback(GPIO_Pin);
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fff8 	bl	8004412 <userButtonCallback>
		  UpdateTimerValue();
 8003422:	f7ff faa9 	bl	8002978 <UpdateTimerValue>
		break;
 8003426:	bf00      	nop
  }
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  while(1);
 8003434:	e7fe      	b.n	8003434 <Error_Handler+0x4>
	...

08003438 <MP23ABS1_Set_State>:
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}

void MP23ABS1_Set_State(SM_Sensor_State_t newState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  MP23ABS1_Sensor_State = newState;
 8003442:	4a04      	ldr	r2, [pc, #16]	; (8003454 <MP23ABS1_Set_State+0x1c>)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	7013      	strb	r3, [r2, #0]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	20000033 	.word	0x20000033

08003458 <MP23ABS1_Start>:
  MP23ABS1_Init_Param.FS[0] = newFS1;
  MP23ABS1_Init_Param.FS[0] = newFS2;
}

void MP23ABS1_Start(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_INITIALIZING);
 800345c:	2003      	movs	r0, #3
 800345e:	f7ff ffeb 	bl	8003438 <MP23ABS1_Set_State>
  osThreadResume(MP23ABS1_Thread_Id);
 8003462:	4b03      	ldr	r3, [pc, #12]	; (8003470 <MP23ABS1_Start+0x18>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f013 fb00 	bl	8016a6c <osThreadResume>
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20016400 	.word	0x20016400

08003474 <MP23ABS1_Stop>:

void MP23ABS1_Stop(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003478:	2001      	movs	r0, #1
 800347a:	f7ff ffdd 	bl	8003438 <MP23ABS1_Set_State>
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <SD_CheckStatus+0x38>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003494:	f002 fe28 	bl	80060e8 <BSP_SD_GetCardState>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <SD_CheckStatus+0x38>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <SD_CheckStatus+0x38>)
 80034ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80034ae:	4b03      	ldr	r3, [pc, #12]	; (80034bc <SD_CheckStatus+0x38>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000034 	.word	0x20000034

080034c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <SD_initialize+0x38>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80034d0:	f002 fd08 	bl	8005ee4 <BSP_SD_Init>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ffd1 	bl	8003484 <SD_CheckStatus>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <SD_initialize+0x38>)
 80034e8:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80034ea:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <SD_initialize+0x38>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000034 	.word	0x20000034

080034fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ffbb 	bl	8003484 <SD_CheckStatus>
 800350e:	4603      	mov	r3, r0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
  ReadStatus = 0;
 800352c:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <SD_read+0x94>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	68b8      	ldr	r0, [r7, #8]
 8003538:	f002 fd46 	bl	8005fc8 <BSP_SD_ReadBlocks_DMA>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d12f      	bne.n	80035a2 <SD_read+0x8a>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 8003542:	f002 fe6f 	bl	8006224 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8003548:	bf00      	nop
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <SD_read+0x94>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <SD_read+0x4c>
 8003552:	f002 fe67 	bl	8006224 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f247 522f 	movw	r2, #29999	; 0x752f
 8003560:	4293      	cmp	r3, r2
 8003562:	d9f2      	bls.n	800354a <SD_read+0x32>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <SD_read+0x94>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <SD_read+0x5a>
    {
      res = RES_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	75fb      	strb	r3, [r7, #23]
 8003570:	e017      	b.n	80035a2 <SD_read+0x8a>
    }
    else
    {
      ReadStatus = 0;
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <SD_read+0x94>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 8003578:	f002 fe54 	bl	8006224 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800357e:	e007      	b.n	8003590 <SD_read+0x78>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8003580:	f002 fdb2 	bl	80060e8 <BSP_SD_GetCardState>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <SD_read+0x78>
        {
          res = RES_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
           break;
 800358e:	e008      	b.n	80035a2 <SD_read+0x8a>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8003590:	f002 fe48 	bl	8006224 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f247 522f 	movw	r2, #29999	; 0x752f
 800359e:	4293      	cmp	r3, r2
 80035a0:	d9ee      	bls.n	8003580 <SD_read+0x68>
        }
      }
    }
  }

  return res;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000728 	.word	0x20000728

080035b0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4603      	mov	r3, r0
 80035be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	75fb      	strb	r3, [r7, #23]
  WriteStatus = 0;
 80035c4:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <SD_write+0x88>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	68b8      	ldr	r0, [r7, #8]
 80035d0:	f002 fd14 	bl	8005ffc <BSP_SD_WriteBlocks_DMA>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d128      	bne.n	800362c <SD_write+0x7c>
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */
//    BSP_DBG_On(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
    timeout = HAL_GetTick();
 80035da:	f002 fe23 	bl	8006224 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]
    osSemaphoreWait(sdioSem_id, SD_TIMEOUT);
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <SD_write+0x8c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f247 5130 	movw	r1, #30000	; 0x7530
 80035e8:	4618      	mov	r0, r3
 80035ea:	f012 ffdd 	bl	80165a8 <osSemaphoreWait>
//    {
//    }
//    BSP_DBG_Off(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <SD_write+0x88>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <SD_write+0x4c>
    {
      res = RES_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
 80035fa:	e017      	b.n	800362c <SD_write+0x7c>
    }
    else
    {
      WriteStatus = 0;
 80035fc:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <SD_write+0x88>)
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 8003602:	f002 fe0f 	bl	8006224 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8003608:	e007      	b.n	800361a <SD_write+0x6a>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800360a:	f002 fd6d 	bl	80060e8 <BSP_SD_GetCardState>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <SD_write+0x6a>
        {
          res = RES_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	75fb      	strb	r3, [r7, #23]
          break;
 8003618:	e008      	b.n	800362c <SD_write+0x7c>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800361a:	f002 fe03 	bl	8006224 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f247 522f 	movw	r2, #29999	; 0x752f
 8003628:	4293      	cmp	r3, r2
 800362a:	d9ee      	bls.n	800360a <SD_write+0x5a>
        }
      }
    }
  }

  return res;
 800362c:	7dfb      	ldrb	r3, [r7, #23]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000724 	.word	0x20000724
 800363c:	20018704 	.word	0x20018704

08003640 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08c      	sub	sp, #48	; 0x30
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	603a      	str	r2, [r7, #0]
 800364a:	71fb      	strb	r3, [r7, #7]
 800364c:	460b      	mov	r3, r1
 800364e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003656:	4b25      	ldr	r3, [pc, #148]	; (80036ec <SD_ioctl+0xac>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <SD_ioctl+0x28>
 8003664:	2303      	movs	r3, #3
 8003666:	e03c      	b.n	80036e2 <SD_ioctl+0xa2>

  switch (cmd)
 8003668:	79bb      	ldrb	r3, [r7, #6]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d834      	bhi.n	80036d8 <SD_ioctl+0x98>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <SD_ioctl+0x34>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	08003685 	.word	0x08003685
 8003678:	0800368d 	.word	0x0800368d
 800367c:	080036a5 	.word	0x080036a5
 8003680:	080036bf 	.word	0x080036bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800368a:	e028      	b.n	80036de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800368c:	f107 0308 	add.w	r3, r7, #8
 8003690:	4618      	mov	r0, r3
 8003692:	f002 fd39 	bl	8006108 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80036a2:	e01c      	b.n	80036de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80036a4:	f107 0308 	add.w	r3, r7, #8
 80036a8:	4618      	mov	r0, r3
 80036aa:	f002 fd2d 	bl	8006108 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80036bc:	e00f      	b.n	80036de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	4618      	mov	r0, r3
 80036c4:	f002 fd20 	bl	8006108 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	0a5a      	lsrs	r2, r3, #9
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80036d6:	e002      	b.n	80036de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80036d8:	2304      	movs	r3, #4
 80036da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80036de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3730      	adds	r7, #48	; 0x30
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000034 	.word	0x20000034

080036f0 <BSP_SD_WriteCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  WriteStatus = 1;
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <BSP_SD_WriteCpltCallback+0x18>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
  osSemaphoreRelease(sdioSem_id);
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <BSP_SD_WriteCpltCallback+0x1c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f012 ffa0 	bl	8016644 <osSemaphoreRelease>
}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000724 	.word	0x20000724
 800370c:	20018704 	.word	0x20018704

08003710 <BSP_SD_ReadCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <BSP_SD_ReadCpltCallback+0x14>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	20000728 	.word	0x20000728

08003728 <Enable_Sensors>:
uint32_t SD_Logging_Enabled = 0;
#endif

/*----------------------------------------------------------------------------*/
void Enable_Sensors(void)
{  
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Comment or uncomment each of the following lines
  * to chose which sensor you want to log.         */
  
  Activate_Sensor(iis3dwb_com_id);
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <Enable_Sensors+0x14>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f805 	bl	8003740 <Activate_Sensor>
  Activate_Sensor(mp23abs1_com_id);
  Activate_Sensor(ism330dhcx_com_id);
  Activate_Sensor(lps22hh_com_id);
  Activate_Sensor(stts751_com_id);
#endif
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20016040 	.word	0x20016040

08003740 <Activate_Sensor>:


void Activate_Sensor(uint32_t id)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fa57 	bl	8001c00 <COM_GetSensorStatus>
 8003752:	60f8      	str	r0, [r7, #12]
  sensor_status->isActive = 1;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	739a      	strb	r2, [r3, #14]
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <SDM_Thread>:



/*----------------------------------------------------------------------------*/
static void SDM_Thread(void const *argument)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b09a      	sub	sp, #104	; 0x68
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  (void)argument;
  osEvent evt;
  DIR dir;
  static FILINFO fno;
  int isJSON = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	667b      	str	r3, [r7, #100]	; 0x64
  
  if (BSP_SD_IsDetected())
 8003770:	f002 fc10 	bl	8005f94 <BSP_SD_IsDetected>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d063      	beq.n	8003842 <SDM_Thread+0xde>
  {        
    if (init_SD_peripheral != 1)
 800377a:	4b91      	ldr	r3, [pc, #580]	; (80039c0 <SDM_Thread+0x25c>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d004      	beq.n	800378c <SDM_Thread+0x28>
    {
      SDM_SD_Init();
 8003782:	f000 f9f9 	bl	8003b78 <SDM_SD_Init>
      init_SD_peripheral = 1;
 8003786:	4b8e      	ldr	r3, [pc, #568]	; (80039c0 <SDM_Thread+0x25c>)
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
    }
    
    /* Check if a custom configuration JSON is available in the root folder of the SD Card*/   
    (void)f_opendir(&dir, "/"); /* Open the root directory */
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	498c      	ldr	r1, [pc, #560]	; (80039c4 <SDM_Thread+0x260>)
 8003792:	4618      	mov	r0, r3
 8003794:	f012 fb00 	bl	8015d98 <f_opendir>
    
    for (;;) 
    {
      (void)f_readdir(&dir, &fno); /* Read files in root folder */
 8003798:	f107 030c 	add.w	r3, r7, #12
 800379c:	498a      	ldr	r1, [pc, #552]	; (80039c8 <SDM_Thread+0x264>)
 800379e:	4618      	mov	r0, r3
 80037a0:	f012 fb93 	bl	8015eca <f_readdir>
      if (fno.fname[0] == 0) break;
 80037a4:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <SDM_Thread+0x264>)
 80037a6:	7d9b      	ldrb	r3, [r3, #22]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d034      	beq.n	8003816 <SDM_Thread+0xb2>
      if (fno.fattrib & AM_ARC) /* It is a file. */
 80037ac:	4b86      	ldr	r3, [pc, #536]	; (80039c8 <SDM_Thread+0x264>)
 80037ae:	7a1b      	ldrb	r3, [r3, #8]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <SDM_Thread+0x34>
      {
        isJSON = strcmp(".json",fno.fname);
 80037b8:	4984      	ldr	r1, [pc, #528]	; (80039cc <SDM_Thread+0x268>)
 80037ba:	4885      	ldr	r0, [pc, #532]	; (80039d0 <SDM_Thread+0x26c>)
 80037bc:	f7fc fd20 	bl	8000200 <strcmp>
 80037c0:	6678      	str	r0, [r7, #100]	; 0x64
        if (isJSON)
 80037c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d028      	beq.n	800381a <SDM_Thread+0xb6>
        {
          if(f_open(&FileConfigJSON, fno.fname, FA_OPEN_EXISTING | FA_READ) == FR_OK)
 80037c8:	2201      	movs	r2, #1
 80037ca:	4980      	ldr	r1, [pc, #512]	; (80039cc <SDM_Thread+0x268>)
 80037cc:	4881      	ldr	r0, [pc, #516]	; (80039d4 <SDM_Thread+0x270>)
 80037ce:	f011 fdc9 	bl	8015364 <f_open>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d120      	bne.n	800381a <SDM_Thread+0xb6>
          {  
            char* config_JSON_string = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	663b      	str	r3, [r7, #96]	; 0x60
            int sizeFile;
            uint32_t br;  
            sizeFile = f_size(&FileConfigJSON)+1;
 80037dc:	4b7d      	ldr	r3, [pc, #500]	; (80039d4 <SDM_Thread+0x270>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	3301      	adds	r3, #1
 80037e2:	65fb      	str	r3, [r7, #92]	; 0x5c
            config_JSON_string = HSD_malloc(sizeFile);
 80037e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e6:	4618      	mov	r0, r3
 80037e8:	f019 fd1c 	bl	801d224 <malloc>
 80037ec:	4603      	mov	r3, r0
 80037ee:	663b      	str	r3, [r7, #96]	; 0x60
            f_read (&FileConfigJSON, config_JSON_string, sizeFile, &br);
 80037f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80037f8:	4876      	ldr	r0, [pc, #472]	; (80039d4 <SDM_Thread+0x270>)
 80037fa:	f011 ff71 	bl	80156e0 <f_read>
            SDM_ReadJSON(config_JSON_string);
 80037fe:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003800:	f000 fdba 	bl	8004378 <SDM_ReadJSON>
            HSD_JSON_free(config_JSON_string);
 8003804:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003806:	f7fd fc2d 	bl	8001064 <HSD_JSON_free>
            config_JSON_string = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	663b      	str	r3, [r7, #96]	; 0x60
            f_close(&FileConfigJSON);
 800380e:	4871      	ldr	r0, [pc, #452]	; (80039d4 <SDM_Thread+0x270>)
 8003810:	f012 fa98 	bl	8015d44 <f_close>
          }
        }
        break; 
 8003814:	e001      	b.n	800381a <SDM_Thread+0xb6>
      if (fno.fname[0] == 0) break;
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <SDM_Thread+0xb8>
        break; 
 800381a:	bf00      	nop
      }
    }
    f_closedir(&dir);
 800381c:	f107 030c 	add.w	r3, r7, #12
 8003820:	4618      	mov	r0, r3
 8003822:	f012 fb2c 	bl	8015e7e <f_closedir>
    
    if (isJSON == 0)
 8003826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <SDM_Thread+0xcc>
    {
      Enable_Sensors();    
 800382c:	f7ff ff7c 	bl	8003728 <Enable_Sensors>
    }
    
    if (init_SD_peripheral != 0)
 8003830:	4b63      	ldr	r3, [pc, #396]	; (80039c0 <SDM_Thread+0x25c>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <SDM_Thread+0xde>
    {
      SDM_SD_DeInit();
 8003838:	f000 f9c6 	bl	8003bc8 <SDM_SD_DeInit>
      init_SD_peripheral = 0;
 800383c:	4b60      	ldr	r3, [pc, #384]	; (80039c0 <SDM_Thread+0x25c>)
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
    }   
  }
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SDM_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SDM_DEBUG_PIN );
 8003842:	2102      	movs	r1, #2
 8003844:	2000      	movs	r0, #0
 8003846:	f014 fd95 	bl	8018374 <vTaskSetApplicationTaskTag>
#endif
  for (;;)
  {
    BSP_LED_Off(LED1); 
 800384a:	2000      	movs	r0, #0
 800384c:	f001 ff86 	bl	800575c <BSP_LED_Off>
    
    /* If the battery is too low close the file and turn off the system */
    if(BatteryLow == 1)
 8003850:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <SDM_Thread+0x274>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d117      	bne.n	800388a <SDM_Thread+0x126>
    {
#ifdef LOG_ERROR
      batt_error();
#endif      
      SM_TIM_Stop();
 800385a:	f001 f9e3 	bl	8004c24 <SM_TIM_Stop>
      if(SDM_CloseFiles() == 0)
 800385e:	f000 fb07 	bl	8003e70 <SDM_CloseFiles>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <SDM_Thread+0x10a>
      {
        SD_Logging_Active = 0;
 8003868:	4b5c      	ldr	r3, [pc, #368]	; (80039dc <SDM_Thread+0x278>)
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
      }
      SDM_Memory_Deinit();
 800386e:	f000 f909 	bl	8003a84 <SDM_Memory_Deinit>
      
      if (init_SD_peripheral != 0)
 8003872:	4b53      	ldr	r3, [pc, #332]	; (80039c0 <SDM_Thread+0x25c>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <SDM_Thread+0x120>
      {
        SDM_SD_DeInit();
 800387a:	f000 f9a5 	bl	8003bc8 <SDM_SD_DeInit>
        init_SD_peripheral = 0;
 800387e:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <SDM_Thread+0x25c>)
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
      }
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8003884:	2017      	movs	r0, #23
 8003886:	f001 ff8b 	bl	80057a0 <BSP_BC_CmdSend>
    }      
    
    evt = osMessageGet(sdThreadQueue_id, osWaitForever);  // wait for message      
 800388a:	4b55      	ldr	r3, [pc, #340]	; (80039e0 <SDM_Thread+0x27c>)
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003892:	f04f 32ff 	mov.w	r2, #4294967295
 8003896:	4618      	mov	r0, r3
 8003898:	f013 f85c 	bl	8016954 <osMessageGet>
    
    if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 800389c:	4b51      	ldr	r3, [pc, #324]	; (80039e4 <SDM_Thread+0x280>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <SDM_Thread+0x14c>
 80038a6:	4b4f      	ldr	r3, [pc, #316]	; (80039e4 <SDM_Thread+0x280>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d1cc      	bne.n	800384a <SDM_Thread+0xe6>
    {      
      BSP_LED_On(LED1);
 80038b0:	2000      	movs	r0, #0
 80038b2:	f001 ff39 	bl	8005728 <BSP_LED_On>
      
      if (evt.status == osEventMessage)
 80038b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d1c6      	bne.n	800384a <SDM_Thread+0xe6>
      {
        if(evt.value.v == SDM_START_STOP)
 80038bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038be:	f248 0201 	movw	r2, #32769	; 0x8001
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d14b      	bne.n	800395e <SDM_Thread+0x1fa>
        {
          if(SD_Logging_Active == 0)
 80038c6:	4b45      	ldr	r3, [pc, #276]	; (80039dc <SDM_Thread+0x278>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d12a      	bne.n	8003924 <SDM_Thread+0x1c0>
          {
            com_status = HS_DATALOG_SD_STARTED;            
 80038ce:	4b45      	ldr	r3, [pc, #276]	; (80039e4 <SDM_Thread+0x280>)
 80038d0:	2202      	movs	r2, #2
 80038d2:	701a      	strb	r2, [r3, #0]
            SM_TIM_Start();
 80038d4:	f001 f99c 	bl	8004c10 <SM_TIM_Start>
            if (BSP_SD_IsDetected())
 80038d8:	f002 fb5c 	bl	8005f94 <BSP_SD_IsDetected>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01c      	beq.n	800391c <SDM_Thread+0x1b8>
            {              
              if (init_SD_peripheral != 1)
 80038e2:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <SDM_Thread+0x25c>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d004      	beq.n	80038f4 <SDM_Thread+0x190>
              {
                SDM_SD_Init();
 80038ea:	f000 f945 	bl	8003b78 <SDM_SD_Init>
                init_SD_peripheral = 1;
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <SDM_Thread+0x25c>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
              }
              SD_present = 1;
 80038f4:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <SDM_Thread+0x284>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
              if(SDM_InitFiles() == 0)
 80038fa:	f000 fa41 	bl	8003d80 <SDM_InitFiles>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <SDM_Thread+0x1ac>
              {
                SD_Logging_Active = 1;
 8003904:	4b35      	ldr	r3, [pc, #212]	; (80039dc <SDM_Thread+0x278>)
 8003906:	2201      	movs	r2, #1
 8003908:	701a      	strb	r2, [r3, #0]
                BSP_LED_Off(LED_ORANGE);
 800390a:	2001      	movs	r0, #1
 800390c:	f001 ff26 	bl	800575c <BSP_LED_Off>
              }
              testTime = HAL_GetTick();
 8003910:	f002 fc88 	bl	8006224 <HAL_GetTick>
 8003914:	4603      	mov	r3, r0
 8003916:	4a35      	ldr	r2, [pc, #212]	; (80039ec <SDM_Thread+0x288>)
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e796      	b.n	800384a <SDM_Thread+0xe6>
            }
            else
            {
              SD_present = 0;
 800391c:	4b32      	ldr	r3, [pc, #200]	; (80039e8 <SDM_Thread+0x284>)
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e792      	b.n	800384a <SDM_Thread+0xe6>
            }
          }
          else if (SD_Logging_Active == 1)
 8003924:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <SDM_Thread+0x278>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d18e      	bne.n	800384a <SDM_Thread+0xe6>
          {      
            SM_TIM_Stop();
 800392c:	f001 f97a 	bl	8004c24 <SM_TIM_Stop>
            
            if(SDM_CloseFiles() == 0)
 8003930:	f000 fa9e 	bl	8003e70 <SDM_CloseFiles>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <SDM_Thread+0x1dc>
            {
              SD_Logging_Active = 0;
 800393a:	4b28      	ldr	r3, [pc, #160]	; (80039dc <SDM_Thread+0x278>)
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
            }
            SDM_Memory_Deinit();
 8003940:	f000 f8a0 	bl	8003a84 <SDM_Memory_Deinit>
            
            if (init_SD_peripheral != 0)
 8003944:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <SDM_Thread+0x25c>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d004      	beq.n	8003956 <SDM_Thread+0x1f2>
            {
              SDM_SD_DeInit();
 800394c:	f000 f93c 	bl	8003bc8 <SDM_SD_DeInit>
              init_SD_peripheral = 0;
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <SDM_Thread+0x25c>)
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
            }
            com_status = HS_DATALOG_IDLE;
 8003956:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <SDM_Thread+0x280>)
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e775      	b.n	800384a <SDM_Thread+0xe6>
          }
        }
        else
        {
          if(evt.value.v & SDM_DATA_READY_MASK)
 800395e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003964:	2b00      	cmp	r3, #0
 8003966:	f43f af70 	beq.w	800384a <SDM_Thread+0xe6>
          {
            COM_SensorStatus_t * sensor_status; 
            uint32_t buf_size;
            uint8_t sensor_id = (uint8_t)(evt.value.v & SDM_SENSOR_ID_MASK);
 800396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            {
              oldTime[sensor_id] = HAL_GetTick();
            }
#endif          
            
            sensor_status = COM_GetSensorStatus(sensor_id);
 8003970:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe f943 	bl	8001c00 <COM_GetSensorStatus>
 800397a:	6578      	str	r0, [r7, #84]	; 0x54
            buf_size = sensor_status->sdWriteBufferSize;
 800397c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	653b      	str	r3, [r7, #80]	; 0x50
            
            if(evt.value.v & SDM_DATA_FIRST_HALF_MASK) // Data available on first half of the circular buffer
 8003982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00b      	beq.n	80039a4 <SDM_Thread+0x240>
            {
              SDM_WriteBuffer(sensor_id, SD_WriteBuffer[sensor_id], buf_size);
 800398c:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 8003990:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003994:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <SDM_Thread+0x28c>)
 8003996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800399c:	4619      	mov	r1, r3
 800399e:	f000 fb0d 	bl	8003fbc <SDM_WriteBuffer>
 80039a2:	e752      	b.n	800384a <SDM_Thread+0xe6>
            }
            else // Data available on second half of the circular buffer
            {
              SDM_WriteBuffer(sensor_id, (uint8_t *)(SD_WriteBuffer[sensor_id]+buf_size), buf_size);
 80039a4:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 80039a8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80039ac:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <SDM_Thread+0x28c>)
 80039ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b4:	4413      	add	r3, r2
 80039b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039b8:	4619      	mov	r1, r3
 80039ba:	f000 faff 	bl	8003fbc <SDM_WriteBuffer>
    BSP_LED_Off(LED1); 
 80039be:	e744      	b.n	800384a <SDM_Thread+0xe6>
 80039c0:	20000756 	.word	0x20000756
 80039c4:	08021710 	.word	0x08021710
 80039c8:	2000076c 	.word	0x2000076c
 80039cc:	20000782 	.word	0x20000782
 80039d0:	08021714 	.word	0x08021714
 80039d4:	20018480 	.word	0x20018480
 80039d8:	20000760 	.word	0x20000760
 80039dc:	20000754 	.word	0x20000754
 80039e0:	20018478 	.word	0x20018478
 80039e4:	200002d4 	.word	0x200002d4
 80039e8:	20000755 	.word	0x20000755
 80039ec:	2000075c 	.word	0x2000075c
 80039f0:	200186dc 	.word	0x200186dc

080039f4 <HAL_PWR_PVDCallback>:
* @brief  PWR PVD interrupt callback
* @param  None 
* @retval None
*/
void HAL_PWR_PVDCallback(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  BatteryLow = 1;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_PWR_PVDCallback+0x14>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	701a      	strb	r2, [r3, #0]
}
 80039fe:	bf00      	nop
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	20000760 	.word	0x20000760

08003a0c <SDM_Memory_Init>:
*         the SD_WriteBuffer associated to each active sensor.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 8003a12:	f7fe f8c3 	bl	8001b9c <COM_GetDeviceDescriptor>
 8003a16:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e026      	b.n	8003a6c <SDM_Memory_Init+0x60>
  {
    sensor_status = COM_GetSensorStatus(i);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe f8ec 	bl	8001c00 <COM_GetSensorStatus>
 8003a28:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7b9b      	ldrb	r3, [r3, #14]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d014      	beq.n	8003a5c <SDM_Memory_Init+0x50>
    {
      SD_WriteBuffer[i] = HSD_malloc(sensor_status->sdWriteBufferSize*2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f019 fbf3 	bl	801d224 <malloc>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4619      	mov	r1, r3
 8003a42:	4a0f      	ldr	r2, [pc, #60]	; (8003a80 <SDM_Memory_Init+0x74>)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      if(!SD_WriteBuffer[i])
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <SDM_Memory_Init+0x74>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <SDM_Memory_Init+0x5a>
      {
        _Error_Handler();
 8003a56:	f000 fd9d 	bl	8004594 <_Error_Handler>
 8003a5a:	e004      	b.n	8003a66 <SDM_Memory_Init+0x5a>
      }
    }
    else
    {
      SD_WriteBuffer[i] = 0;
 8003a5c:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <SDM_Memory_Init+0x74>)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2100      	movs	r1, #0
 8003a62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d3d3      	bcc.n	8003a1e <SDM_Memory_Init+0x12>
    }
  }
  return 1;
 8003a76:	2301      	movs	r3, #1
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	200186dc 	.word	0x200186dc

08003a84 <SDM_Memory_Deinit>:
* @brief  SD Card Manager memory De-initialization.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Deinit(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 8003a8a:	f7fe f887 	bl	8001b9c <COM_GetDeviceDescriptor>
 8003a8e:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e01e      	b.n	8003ad4 <SDM_Memory_Deinit+0x50>
  {
    sensor_status = COM_GetSensorStatus(i);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe f8b0 	bl	8001c00 <COM_GetSensorStatus>
 8003aa0:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive && SD_WriteBuffer[i]!=0)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7b9b      	ldrb	r3, [r3, #14]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d011      	beq.n	8003ace <SDM_Memory_Deinit+0x4a>
 8003aaa:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <SDM_Memory_Deinit+0x64>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <SDM_Memory_Deinit+0x4a>
    {
      HSD_free(SD_WriteBuffer[i]);
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <SDM_Memory_Deinit+0x64>)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f019 fbb8 	bl	801d234 <free>
      SD_WriteBuffer[i] = NULL;
 8003ac4:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <SDM_Memory_Deinit+0x64>)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d3db      	bcc.n	8003a96 <SDM_Memory_Deinit+0x12>
    }
  }
  return 1;
 8003ade:	2301      	movs	r3, #1
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200186dc 	.word	0x200186dc

08003aec <SDM_Peripheral_Init>:


void SDM_Peripheral_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  BSP_SD_Detect_Init();   
 8003af0:	f002 fa2a 	bl	8005f48 <BSP_SD_Detect_Init>
}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <SDM_OS_Init>:
* @brief  Initialize SD Card Manager thread and queue
* @param  None
* @retval None
*/
void SDM_OS_Init(void)
{
 8003af8:	b5b0      	push	{r4, r5, r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
  sdioSem_id = osSemaphoreCreate(osSemaphore(sdioSem), 1);
 8003afe:	2101      	movs	r1, #1
 8003b00:	4816      	ldr	r0, [pc, #88]	; (8003b5c <SDM_OS_Init+0x64>)
 8003b02:	f012 fd2d 	bl	8016560 <osSemaphoreCreate>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <SDM_OS_Init+0x68>)
 8003b0a:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(sdioSem_id, osWaitForever);
 8003b0c:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <SDM_OS_Init+0x68>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f04f 31ff 	mov.w	r1, #4294967295
 8003b14:	4618      	mov	r0, r3
 8003b16:	f012 fd47 	bl	80165a8 <osSemaphoreWait>
  
  sdThreadQueue_id = osMessageCreate(osMessageQ(sdThreadQueue), NULL);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4811      	ldr	r0, [pc, #68]	; (8003b64 <SDM_OS_Init+0x6c>)
 8003b1e:	f012 fec7 	bl	80168b0 <osMessageCreate>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <SDM_OS_Init+0x70>)
 8003b26:	6013      	str	r3, [r2, #0]
  
  vQueueAddToRegistry( sdThreadQueue_id, "sdThreadQueue_id" );
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <SDM_OS_Init+0x70>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	490f      	ldr	r1, [pc, #60]	; (8003b6c <SDM_OS_Init+0x74>)
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f013 ff24 	bl	801797c <vQueueAddToRegistry>
  
  /* Thread definition: read data */
  osThreadDef(SDM_On_Off_Thread, SDM_Thread, SD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE*4);
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <SDM_OS_Init+0x78>)
 8003b36:	1d3c      	adds	r4, r7, #4
 8003b38:	461d      	mov	r5, r3
 8003b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b3e:	682b      	ldr	r3, [r5, #0]
 8003b40:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  SDM_Thread_Id = osThreadCreate(osThread(SDM_On_Off_Thread), NULL);
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f012 fce3 	bl	8016512 <osThreadCreate>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <SDM_OS_Init+0x7c>)
 8003b50:	6013      	str	r3, [r2, #0]
}
 8003b52:	bf00      	nop
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	08021a2c 	.word	0x08021a2c
 8003b60:	20018704 	.word	0x20018704
 8003b64:	08021a30 	.word	0x08021a30
 8003b68:	20018478 	.word	0x20018478
 8003b6c:	0802174c 	.word	0x0802174c
 8003b70:	08021760 	.word	0x08021760
 8003b74:	200186d8 	.word	0x200186d8

08003b78 <SDM_SD_Init>:
* @brief  Initialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8003b7c:	490f      	ldr	r1, [pc, #60]	; (8003bbc <SDM_SD_Init+0x44>)
 8003b7e:	4810      	ldr	r0, [pc, #64]	; (8003bc0 <SDM_SD_Init+0x48>)
 8003b80:	f012 fb7a 	bl	8016278 <FATFS_LinkDriver>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d115      	bne.n	8003bb6 <SDM_SD_Init+0x3e>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	490b      	ldr	r1, [pc, #44]	; (8003bbc <SDM_SD_Init+0x44>)
 8003b8e:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <SDM_SD_Init+0x4c>)
 8003b90:	f011 fba2 	bl	80152d8 <f_mount>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00d      	beq.n	8003bb6 <SDM_SD_Init+0x3e>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f001 fdc4 	bl	8005728 <BSP_LED_On>
        HAL_Delay(500);
 8003ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ba4:	f002 fb4a 	bl	800623c <HAL_Delay>
        BSP_LED_Off(LED1);
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f001 fdd7 	bl	800575c <BSP_LED_Off>
        HAL_Delay(100);
 8003bae:	2064      	movs	r0, #100	; 0x64
 8003bb0:	f002 fb44 	bl	800623c <HAL_Delay>
        BSP_LED_On(LED1);
 8003bb4:	e7f1      	b.n	8003b9a <SDM_SD_Init+0x22>
      }
    }
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	2001847c 	.word	0x2001847c
 8003bc0:	08021a18 	.word	0x08021a18
 8003bc4:	20016804 	.word	0x20016804

08003bc8 <SDM_SD_DeInit>:
* @brief  Deinitialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_DeInit(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  if(FATFS_UnLinkDriver(SDPath) == 0)
 8003bcc:	480e      	ldr	r0, [pc, #56]	; (8003c08 <SDM_SD_DeInit+0x40>)
 8003bce:	f012 fb9b 	bl	8016308 <FATFS_UnLinkDriver>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d115      	bne.n	8003c04 <SDM_SD_DeInit+0x3c>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(NULL, (TCHAR const*)SDPath, 0) != FR_OK)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	490b      	ldr	r1, [pc, #44]	; (8003c08 <SDM_SD_DeInit+0x40>)
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f011 fb7b 	bl	80152d8 <f_mount>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00d      	beq.n	8003c04 <SDM_SD_DeInit+0x3c>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 8003be8:	2000      	movs	r0, #0
 8003bea:	f001 fd9d 	bl	8005728 <BSP_LED_On>
        HAL_Delay(500);
 8003bee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bf2:	f002 fb23 	bl	800623c <HAL_Delay>
        BSP_LED_Off(LED1);
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f001 fdb0 	bl	800575c <BSP_LED_Off>
        HAL_Delay(100);
 8003bfc:	2064      	movs	r0, #100	; 0x64
 8003bfe:	f002 fb1d 	bl	800623c <HAL_Delay>
        BSP_LED_On(LED1);
 8003c02:	e7f1      	b.n	8003be8 <SDM_SD_DeInit+0x20>
      }
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	2001847c 	.word	0x2001847c

08003c0c <SDM_OpenFile>:
  return 0; // OK
}


uint8_t SDM_OpenFile(uint32_t id, const char *sensorName)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b090      	sub	sp, #64	; 0x40
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  char file_name[50];
  
  sprintf(file_name, "%s%s", sensorName, ".dat");
 8003c16:	f107 000c 	add.w	r0, r7, #12
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <SDM_OpenFile+0x48>)
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	490e      	ldr	r1, [pc, #56]	; (8003c58 <SDM_OpenFile+0x4c>)
 8003c20:	f01a f874 	bl	801dd0c <siprintf>
  
  if(f_open(&FileHandler[id], (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	4a0b      	ldr	r2, [pc, #44]	; (8003c5c <SDM_OpenFile+0x50>)
 8003c30:	4413      	add	r3, r2
 8003c32:	f107 010c 	add.w	r1, r7, #12
 8003c36:	220a      	movs	r2, #10
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f011 fb93 	bl	8015364 <f_open>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <SDM_OpenFile+0x3c>
  {
    return 1;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <SDM_OpenFile+0x3e>
  }
  
  return 0; // OK
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3740      	adds	r7, #64	; 0x40
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	080217a8 	.word	0x080217a8
 8003c58:	080217b0 	.word	0x080217b0
 8003c5c:	20016e98 	.word	0x20016e98

08003c60 <SDM_CloseFile>:


uint8_t SDM_CloseFile(uint32_t id)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  return f_close(&FileHandler[id]);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <SDM_CloseFile+0x28>)
 8003c74:	4413      	add	r3, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f012 f864 	bl	8015d44 <f_close>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20016e98 	.word	0x20016e98

08003c8c <SDM_GetLastDirNumber>:
* @brief  Scan SD Card file system to find the latest directory number that includes to the LOG_DIR_PREFIX
* @param  None
* @retval 
*/
uint32_t SDM_GetLastDirNumber(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b0da      	sub	sp, #360	; 0x168
 8003c90:	af00      	add	r7, sp, #0
  FRESULT fr;     /* Return value */
  DIR dj;         /* Directory search object */
  FILINFO fno;    /* File information */
  int dir_n = 0, tmp;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 8003c98:	1d3a      	adds	r2, r7, #4
 8003c9a:	4937      	ldr	r1, [pc, #220]	; (8003d78 <SDM_GetLastDirNumber+0xec>)
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	c903      	ldmia	r1, {r0, r1}
 8003ca0:	6018      	str	r0, [r3, #0]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	8019      	strh	r1, [r3, #0]
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	0c09      	lsrs	r1, r1, #16
 8003caa:	7019      	strb	r1, [r3, #0]
 8003cac:	2300      	movs	r3, #0
 8003cae:	71d3      	strb	r3, [r2, #7]
  
  dir_name[sizeof(LOG_DIR_PREFIX)-1] = '*';  /* wildcard */
 8003cb0:	1d3b      	adds	r3, r7, #4
 8003cb2:	222a      	movs	r2, #42	; 0x2a
 8003cb4:	719a      	strb	r2, [r3, #6]
  dir_name[sizeof(LOG_DIR_PREFIX)] = 0;
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	2200      	movs	r2, #0
 8003cba:	71da      	strb	r2, [r3, #7]
  
  fr = f_findfirst(&dj, &fno, "", dir_name);  /* Start to search for matching directories */
 8003cbc:	1d3b      	adds	r3, r7, #4
 8003cbe:	f107 010c 	add.w	r1, r7, #12
 8003cc2:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8003cc6:	4a2d      	ldr	r2, [pc, #180]	; (8003d7c <SDM_GetLastDirNumber+0xf0>)
 8003cc8:	f012 f964 	bl	8015f94 <f_findfirst>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  if(fno.fname[0])
 8003cd2:	f107 030c 	add.w	r3, r7, #12
 8003cd6:	7d9b      	ldrb	r3, [r3, #22]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d038      	beq.n	8003d4e <SDM_GetLastDirNumber+0xc2>
  {
    tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	331d      	adds	r3, #29
 8003ce2:	220a      	movs	r2, #10
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f01a ff6c 	bl	801ebc4 <strtol>
 8003cec:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    if(dir_n<tmp)
 8003cf0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003cf4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	da28      	bge.n	8003d4e <SDM_GetLastDirNumber+0xc2>
    {
      dir_n = tmp;
 8003cfc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003d00:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    }
  }
  
  /* Repeat while an item is found */
  while (fr == FR_OK && fno.fname[0])
 8003d04:	e023      	b.n	8003d4e <SDM_GetLastDirNumber+0xc2>
  {
    fr = f_findnext(&dj, &fno);   /* Search for next item */
 8003d06:	f107 020c 	add.w	r2, r7, #12
 8003d0a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f012 f917 	bl	8015f44 <f_findnext>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    if(fno.fname[0])
 8003d1c:	f107 030c 	add.w	r3, r7, #12
 8003d20:	7d9b      	ldrb	r3, [r3, #22]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d013      	beq.n	8003d4e <SDM_GetLastDirNumber+0xc2>
    {
      tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	331d      	adds	r3, #29
 8003d2c:	220a      	movs	r2, #10
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f01a ff47 	bl	801ebc4 <strtol>
 8003d36:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
      if(tmp > dir_n)
 8003d3a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003d3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003d42:	429a      	cmp	r2, r3
 8003d44:	dd03      	ble.n	8003d4e <SDM_GetLastDirNumber+0xc2>
      {
        dir_n = tmp;
 8003d46:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003d4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  while (fr == FR_OK && fno.fname[0])
 8003d4e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <SDM_GetLastDirNumber+0xd4>
 8003d56:	f107 030c 	add.w	r3, r7, #12
 8003d5a:	7d9b      	ldrb	r3, [r3, #22]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1d2      	bne.n	8003d06 <SDM_GetLastDirNumber+0x7a>
      }
    }
  }
  
  f_closedir(&dj);
 8003d60:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003d64:	4618      	mov	r0, r3
 8003d66:	f012 f88a 	bl	8015e7e <f_closedir>
  return (uint32_t)dir_n;
 8003d6a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	080217bc 	.word	0x080217bc
 8003d7c:	080217b8 	.word	0x080217b8

08003d80 <SDM_InitFiles>:
* @brief  Open one file for each sensor to store raw data and a JSON file with the device configuration
* @param  None
* @retval None
*/
uint8_t SDM_InitFiles(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b096      	sub	sp, #88	; 0x58
 8003d84:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  COM_SensorDescriptor_t * sensor_descriptor; 
  
  uint32_t i = 0, dir_n = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	657b      	str	r3, [r7, #84]	; 0x54
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	653b      	str	r3, [r7, #80]	; 0x50
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  
  device_descriptor = COM_GetDeviceDescriptor();  
 8003d8e:	f7fd ff05 	bl	8001b9c <COM_GetDeviceDescriptor>
 8003d92:	64f8      	str	r0, [r7, #76]	; 0x4c
  dir_n = SDM_GetLastDirNumber();
 8003d94:	f7ff ff7a 	bl	8003c8c <SDM_GetLastDirNumber>
 8003d98:	6538      	str	r0, [r7, #80]	; 0x50
  dir_n++;
 8003d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	653b      	str	r3, [r7, #80]	; 0x50
  
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8003da0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da6:	4a2f      	ldr	r2, [pc, #188]	; (8003e64 <SDM_InitFiles+0xe4>)
 8003da8:	492f      	ldr	r1, [pc, #188]	; (8003e68 <SDM_InitFiles+0xe8>)
 8003daa:	f019 ffaf 	bl	801dd0c <siprintf>
  
  FRESULT test = f_mkdir(dir_name);
 8003dae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003db2:	4618      	mov	r0, r3
 8003db4:	f012 f90c 	bl	8015fd0 <f_mkdir>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  if(test != FR_OK)
 8003dbe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <SDM_InitFiles+0x4a>
  {
    return 1;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e047      	b.n	8003e5a <SDM_InitFiles+0xda>
  {
    return 1;    
  }
#endif
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	657b      	str	r3, [r7, #84]	; 0x54
 8003dce:	e024      	b.n	8003e1a <SDM_InitFiles+0x9a>
  {
    sensor_status = COM_GetSensorStatus(i);
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fd ff13 	bl	8001c00 <COM_GetSensorStatus>
 8003dda:	6478      	str	r0, [r7, #68]	; 0x44
    
    if(sensor_status->isActive)
 8003ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dde:	7b9b      	ldrb	r3, [r3, #14]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d017      	beq.n	8003e14 <SDM_InitFiles+0x94>
    {
      sensor_descriptor = COM_GetSensorDescriptor(i);
 8003de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd fef5 	bl	8001bd8 <COM_GetSensorDescriptor>
 8003dee:	6438      	str	r0, [r7, #64]	; 0x40
      sprintf(file_name, "%s/%s", dir_name, sensor_descriptor->name);
 8003df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df2:	3301      	adds	r3, #1
 8003df4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003df8:	4638      	mov	r0, r7
 8003dfa:	491c      	ldr	r1, [pc, #112]	; (8003e6c <SDM_InitFiles+0xec>)
 8003dfc:	f019 ff86 	bl	801dd0c <siprintf>
      
      if(SDM_OpenFile(i, file_name)!=0)
 8003e00:	463b      	mov	r3, r7
 8003e02:	4619      	mov	r1, r3
 8003e04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003e06:	f7ff ff01 	bl	8003c0c <SDM_OpenFile>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <SDM_InitFiles+0x94>
      {
        return 1;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e022      	b.n	8003e5a <SDM_InitFiles+0xda>
  for(i=0;i<device_descriptor->nSensor;i++)
 8003e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e16:	3301      	adds	r3, #1
 8003e18:	657b      	str	r3, [r7, #84]	; 0x54
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3d5      	bcc.n	8003dd0 <SDM_InitFiles+0x50>
      }
    }
  }
  
  SDM_Memory_Init();
 8003e24:	f7ff fdf2 	bl	8003a0c <SDM_Memory_Init>
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e2c:	e00f      	b.n	8003e4e <SDM_InitFiles+0xce>
  {
    sensor_status = COM_GetSensorStatus(i);
 8003e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd fee4 	bl	8001c00 <COM_GetSensorStatus>
 8003e38:	6478      	str	r0, [r7, #68]	; 0x44
    
    if(sensor_status->isActive)
 8003e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3c:	7b9b      	ldrb	r3, [r3, #14]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <SDM_InitFiles+0xc8>
    {
      SDM_StartSensorThread(i);
 8003e42:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003e44:	f000 f9b4 	bl	80041b0 <SDM_StartSensorThread>
  for(i=0;i<device_descriptor->nSensor;i++)
 8003e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3ea      	bcc.n	8003e2e <SDM_InitFiles+0xae>
    }
  }  
  
  return 0;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3758      	adds	r7, #88	; 0x58
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	080217c4 	.word	0x080217c4
 8003e68:	080217cc 	.word	0x080217cc
 8003e6c:	080217d4 	.word	0x080217d4

08003e70 <SDM_CloseFiles>:

uint8_t SDM_CloseFiles(void)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b097      	sub	sp, #92	; 0x5c
 8003e74:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t id = 0, dir_n = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	657b      	str	r3, [r7, #84]	; 0x54
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	653b      	str	r3, [r7, #80]	; 0x50
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  char* JSON_string = NULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	607b      	str	r3, [r7, #4]
  
  device_descriptor = COM_GetDeviceDescriptor();
 8003e82:	f7fd fe8b 	bl	8001b9c <COM_GetDeviceDescriptor>
 8003e86:	64f8      	str	r0, [r7, #76]	; 0x4c
  
  /* Put all the sensors in "SUSPENDED" mode */
  for(id=0;id<device_descriptor->nSensor;id++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e8c:	e00f      	b.n	8003eae <SDM_CloseFiles+0x3e>
  {
    sensor_status = COM_GetSensorStatus(id);
 8003e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fd feb4 	bl	8001c00 <COM_GetSensorStatus>
 8003e98:	64b8      	str	r0, [r7, #72]	; 0x48
    
    if(sensor_status->isActive)
 8003e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9c:	7b9b      	ldrb	r3, [r3, #14]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <SDM_CloseFiles+0x38>
    {
      SDM_StopSensorThread(id);
 8003ea2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003ea4:	f000 f9f6 	bl	8004294 <SDM_StopSensorThread>
  for(id=0;id<device_descriptor->nSensor;id++)
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eaa:	3301      	adds	r3, #1
 8003eac:	657b      	str	r3, [r7, #84]	; 0x54
 8003eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d3ea      	bcc.n	8003e8e <SDM_CloseFiles+0x1e>
    }
  }
  
  /* Flush remaining data and close the files  */
  for(id=0;id<device_descriptor->nSensor;id++)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	657b      	str	r3, [r7, #84]	; 0x54
 8003ebc:	e017      	b.n	8003eee <SDM_CloseFiles+0x7e>
  {
    sensor_status = COM_GetSensorStatus(id);
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd fe9c 	bl	8001c00 <COM_GetSensorStatus>
 8003ec8:	64b8      	str	r0, [r7, #72]	; 0x48
    
    if(sensor_status->isActive)
 8003eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ecc:	7b9b      	ldrb	r3, [r3, #14]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <SDM_CloseFiles+0x78>
    {
      SDM_Flush_Buffer(id);
 8003ed2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003ed4:	f000 f892 	bl	8003ffc <SDM_Flush_Buffer>
      if(SDM_CloseFile(id)!=0)
 8003ed8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003eda:	f7ff fec1 	bl	8003c60 <SDM_CloseFile>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <SDM_CloseFiles+0x78>
      {
        return 1;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e042      	b.n	8003f6e <SDM_CloseFiles+0xfe>
  for(id=0;id<device_descriptor->nSensor;id++)
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eea:	3301      	adds	r3, #1
 8003eec:	657b      	str	r3, [r7, #84]	; 0x54
 8003eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d3e2      	bcc.n	8003ebe <SDM_CloseFiles+0x4e>
  {
    return 1;
  }  
#endif
  
  dir_n = SDM_GetLastDirNumber();
 8003ef8:	f7ff fec8 	bl	8003c8c <SDM_GetLastDirNumber>
 8003efc:	6538      	str	r0, [r7, #80]	; 0x50
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8003efe:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f04:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <SDM_CloseFiles+0x108>)
 8003f06:	491d      	ldr	r1, [pc, #116]	; (8003f7c <SDM_CloseFiles+0x10c>)
 8003f08:	f019 ff00 	bl	801dd0c <siprintf>
  sprintf(file_name, "%s/DeviceConfig.json", dir_name);
 8003f0c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003f10:	f107 0308 	add.w	r3, r7, #8
 8003f14:	491a      	ldr	r1, [pc, #104]	; (8003f80 <SDM_CloseFiles+0x110>)
 8003f16:	4618      	mov	r0, r3
 8003f18:	f019 fef8 	bl	801dd0c <siprintf>
  
  if(f_open(&FileConfigHandler, (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8003f1c:	f107 0308 	add.w	r3, r7, #8
 8003f20:	220a      	movs	r2, #10
 8003f22:	4619      	mov	r1, r3
 8003f24:	4817      	ldr	r0, [pc, #92]	; (8003f84 <SDM_CloseFiles+0x114>)
 8003f26:	f011 fa1d 	bl	8015364 <f_open>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <SDM_CloseFiles+0xc4>
  {
    return 1;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e01c      	b.n	8003f6e <SDM_CloseFiles+0xfe>
  }
  
  (void)SDM_CreateJSON(&JSON_string);
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fa58 	bl	80043ec <SDM_CreateJSON>
  SDM_WriteConfigBuffer((uint8_t*)JSON_string, strlen(JSON_string));  
 8003f3c:	687c      	ldr	r4, [r7, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fc f967 	bl	8000214 <strlen>
 8003f46:	4603      	mov	r3, r0
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f000 f81c 	bl	8003f88 <SDM_WriteConfigBuffer>
  
  if (f_close(&FileConfigHandler)!= FR_OK)
 8003f50:	480c      	ldr	r0, [pc, #48]	; (8003f84 <SDM_CloseFiles+0x114>)
 8003f52:	f011 fef7 	bl	8015d44 <f_close>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <SDM_CloseFiles+0xf0>
  {
    return 1;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e006      	b.n	8003f6e <SDM_CloseFiles+0xfe>
  }
  
  HSD_JSON_free(JSON_string);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fd f87e 	bl	8001064 <HSD_JSON_free>
  JSON_string = NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	607b      	str	r3, [r7, #4]
  
  return 0;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	375c      	adds	r7, #92	; 0x5c
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	080217c4 	.word	0x080217c4
 8003f7c:	080217cc 	.word	0x080217cc
 8003f80:	080217dc 	.word	0x080217dc
 8003f84:	20016c68 	.word	0x20016c68

08003f88 <SDM_WriteConfigBuffer>:


uint8_t SDM_WriteConfigBuffer(uint8_t *buffer, uint32_t size)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t byteswritten;
  FRESULT returnWrite;
  
  returnWrite = f_write(&FileConfigHandler, buffer, size, (void *)&byteswritten);
 8003f92:	f107 0308 	add.w	r3, r7, #8
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4807      	ldr	r0, [pc, #28]	; (8003fb8 <SDM_WriteConfigBuffer+0x30>)
 8003f9c:	f011 fcdf 	bl	801595e <f_write>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
  if(returnWrite != FR_OK)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <SDM_WriteConfigBuffer+0x26>
  {
    return 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <SDM_WriteConfigBuffer+0x28>
  }  
  return 1;
 8003fae:	2301      	movs	r3, #1
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20016c68 	.word	0x20016c68

08003fbc <SDM_WriteBuffer>:


uint8_t SDM_WriteBuffer(uint32_t id, uint8_t *buffer, uint32_t size)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  uint32_t byteswritten;
  
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	4a09      	ldr	r2, [pc, #36]	; (8003ff8 <SDM_WriteBuffer+0x3c>)
 8003fd4:	1898      	adds	r0, r3, r2
 8003fd6:	f107 0314 	add.w	r3, r7, #20
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	f011 fcbe 	bl	801595e <f_write>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <SDM_WriteBuffer+0x30>
  {
    return 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <SDM_WriteBuffer+0x32>
  }  
  return 1;
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20016e98 	.word	0x20016e98

08003ffc <SDM_Flush_Buffer>:

/* Write remaining data to file */
uint8_t SDM_Flush_Buffer(uint32_t id)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint8_t ret = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	75fb      	strb	r3, [r7, #23]
  uint32_t buf_size;
  COM_SensorStatus_t * sensor_status;   
  
  sensor_status = COM_GetSensorStatus(id);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd fdf7 	bl	8001c00 <COM_GetSensorStatus>
 8004012:	6138      	str	r0, [r7, #16]
  buf_size = sensor_status->sdWriteBufferSize;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	60fb      	str	r3, [r7, #12]
  
  if(SD_WriteBufferIdx[id]>0 && SD_WriteBufferIdx[id]<(buf_size-1))
 800401a:	4a26      	ldr	r2, [pc, #152]	; (80040b4 <SDM_Flush_Buffer+0xb8>)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d017      	beq.n	8004056 <SDM_Flush_Buffer+0x5a>
 8004026:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <SDM_Flush_Buffer+0xb8>)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3b01      	subs	r3, #1
 8004032:	429a      	cmp	r2, r3
 8004034:	d20f      	bcs.n	8004056 <SDM_Flush_Buffer+0x5a>
  {
    /* flush from the beginning */
    ret = SDM_WriteBuffer(id, SD_WriteBuffer[id], SD_WriteBufferIdx[id]+1);
 8004036:	4a20      	ldr	r2, [pc, #128]	; (80040b8 <SDM_Flush_Buffer+0xbc>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800403e:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <SDM_Flush_Buffer+0xb8>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004046:	3301      	adds	r3, #1
 8004048:	461a      	mov	r2, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff ffb6 	bl	8003fbc <SDM_WriteBuffer>
 8004050:	4603      	mov	r3, r0
 8004052:	75fb      	strb	r3, [r7, #23]
 8004054:	e023      	b.n	800409e <SDM_Flush_Buffer+0xa2>
  }
  else if (SD_WriteBufferIdx[id]>(buf_size-1) && SD_WriteBufferIdx[id]<(buf_size*2-1))
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <SDM_Flush_Buffer+0xb8>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b01      	subs	r3, #1
 8004062:	429a      	cmp	r2, r3
 8004064:	d91b      	bls.n	800409e <SDM_Flush_Buffer+0xa2>
 8004066:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <SDM_Flush_Buffer+0xb8>)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	3b01      	subs	r3, #1
 8004074:	429a      	cmp	r2, r3
 8004076:	d212      	bcs.n	800409e <SDM_Flush_Buffer+0xa2>
  {
    /* flush from half buffer */
    ret =  SDM_WriteBuffer(id, (uint8_t *)(SD_WriteBuffer[id]+buf_size), SD_WriteBufferIdx[id]+1-buf_size);
 8004078:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <SDM_Flush_Buffer+0xbc>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	18d1      	adds	r1, r2, r3
 8004084:	4a0b      	ldr	r2, [pc, #44]	; (80040b4 <SDM_Flush_Buffer+0xb8>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	3301      	adds	r3, #1
 8004092:	461a      	mov	r2, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ff91 	bl	8003fbc <SDM_WriteBuffer>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]
  }
  
  SD_WriteBufferIdx[id] = 0;
 800409e:	4a05      	ldr	r2, [pc, #20]	; (80040b4 <SDM_Flush_Buffer+0xb8>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2100      	movs	r1, #0
 80040a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  return ret;
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000072c 	.word	0x2000072c
 80040b8:	200186dc 	.word	0x200186dc

080040bc <SDM_Fill_Buffer>:

/* Fill SD buffer with new data */
uint8_t SDM_Fill_Buffer(uint8_t id, uint8_t *src, uint16_t srcSize)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	6039      	str	r1, [r7, #0]
 80040c6:	71fb      	strb	r3, [r7, #7]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80bb      	strh	r3, [r7, #4]
  uint8_t *dst;
  uint32_t dstP, srcP=0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
  COM_SensorStatus_t * sensor_status; 
  uint32_t dstSize, sdBufSize;
  
  
  sensor_status = COM_GetSensorStatus(id);
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fd fd94 	bl	8001c00 <COM_GetSensorStatus>
 80040d8:	6178      	str	r0, [r7, #20]
  dst = SD_WriteBuffer[id];
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	4a31      	ldr	r2, [pc, #196]	; (80041a4 <SDM_Fill_Buffer+0xe8>)
 80040de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e2:	613b      	str	r3, [r7, #16]
  dstP = SD_WriteBufferIdx[id];
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	4a30      	ldr	r2, [pc, #192]	; (80041a8 <SDM_Fill_Buffer+0xec>)
 80040e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ec:	61fb      	str	r3, [r7, #28]
  sdBufSize = sensor_status->sdWriteBufferSize;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	60fb      	str	r3, [r7, #12]
  dstSize = sdBufSize*2;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	60bb      	str	r3, [r7, #8]
  
  /* byte per byte copy */
  while(srcP < srcSize)
 80040fa:	e013      	b.n	8004124 <SDM_Fill_Buffer+0x68>
  {
    dst[dstP] = src[srcP];
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	441a      	add	r2, r3
 8004102:	6939      	ldr	r1, [r7, #16]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	440b      	add	r3, r1
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	701a      	strb	r2, [r3, #0]
    dstP++;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3301      	adds	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
    srcP++;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	3301      	adds	r3, #1
 8004116:	61bb      	str	r3, [r7, #24]
    if(dstP>=dstSize)
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	429a      	cmp	r2, r3
 800411e:	d301      	bcc.n	8004124 <SDM_Fill_Buffer+0x68>
    {
      dstP=0;
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
  while(srcP < srcSize)
 8004124:	88bb      	ldrh	r3, [r7, #4]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	429a      	cmp	r2, r3
 800412a:	d3e7      	bcc.n	80040fc <SDM_Fill_Buffer+0x40>
    }
  }
  
  if(SD_WriteBufferIdx[id]<(dstSize/2) && dstP>=(dstSize/2)) // first half full
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <SDM_Fill_Buffer+0xec>)
 8004130:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	429a      	cmp	r2, r3
 800413a:	d213      	bcs.n	8004164 <SDM_Fill_Buffer+0xa8>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	429a      	cmp	r2, r3
 8004144:	d30e      	bcc.n	8004164 <SDM_Fill_Buffer+0xa8>
  {           
    // unlock write task
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8004146:	4b19      	ldr	r3, [pc, #100]	; (80041ac <SDM_Fill_Buffer+0xf0>)
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8004150:	2200      	movs	r2, #0
 8004152:	4619      	mov	r1, r3
 8004154:	f012 fbbe 	bl	80168d4 <osMessagePut>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d017      	beq.n	800418e <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 800415e:	f000 fa19 	bl	8004594 <_Error_Handler>
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8004162:	e014      	b.n	800418e <SDM_Fill_Buffer+0xd2>
    }
    
    // check for buffer consistency
  }
  else if(dstP<SD_WriteBufferIdx[id])  // second half full
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <SDM_Fill_Buffer+0xec>)
 8004168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	429a      	cmp	r2, r3
 8004170:	d20d      	bcs.n	800418e <SDM_Fill_Buffer+0xd2>
  {
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_SECOND_HALF_MASK, 0) != osOK)
 8004172:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <SDM_Fill_Buffer+0xf0>)
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800417c:	2200      	movs	r2, #0
 800417e:	4619      	mov	r1, r3
 8004180:	f012 fba8 	bl	80168d4 <osMessagePut>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 800418a:	f000 fa03 	bl	8004594 <_Error_Handler>
    }
  }
  SD_WriteBufferIdx[id] = dstP;
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	4905      	ldr	r1, [pc, #20]	; (80041a8 <SDM_Fill_Buffer+0xec>)
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  return 0;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	200186dc 	.word	0x200186dc
 80041a8:	2000072c 	.word	0x2000072c
 80041ac:	20018478 	.word	0x20018478

080041b0 <SDM_StartSensorThread>:
* @brief  Start sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StartSensorThread(uint32_t id)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 80041b8:	4b2c      	ldr	r3, [pc, #176]	; (800426c <SDM_StartSensorThread+0xbc>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d102      	bne.n	80041ca <SDM_StartSensorThread+0x1a>
  {
    IIS3DWB_Start();
 80041c4:	f7fe fbfc 	bl	80029c0 <IIS3DWB_Start>
 80041c8:	e046      	b.n	8004258 <SDM_StartSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 80041ca:	4b29      	ldr	r3, [pc, #164]	; (8004270 <SDM_StartSensorThread+0xc0>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d102      	bne.n	80041dc <SDM_StartSensorThread+0x2c>
  {
    HTS221_Start();
 80041d6:	f7fe f90f 	bl	80023f8 <HTS221_Start>
 80041da:	e03d      	b.n	8004258 <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <SDM_StartSensorThread+0xc4>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d102      	bne.n	80041ee <SDM_StartSensorThread+0x3e>
  {
    IIS2DH_Start();
 80041e8:	f7fe f92c 	bl	8002444 <IIS2DH_Start>
 80041ec:	e034      	b.n	8004258 <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <SDM_StartSensorThread+0xc8>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d102      	bne.n	8004200 <SDM_StartSensorThread+0x50>
  {
    IIS2MDC_Start();
 80041fa:	f7fe f949 	bl	8002490 <IIS2MDC_Start>
 80041fe:	e02b      	b.n	8004258 <SDM_StartSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <SDM_StartSensorThread+0xcc>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4293      	cmp	r3, r2
 800420a:	d102      	bne.n	8004212 <SDM_StartSensorThread+0x62>
  {
    IMP34DT05_Start();
 800420c:	f7fe fbfe 	bl	8002a0c <IMP34DT05_Start>
 8004210:	e022      	b.n	8004258 <SDM_StartSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 8004212:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <SDM_StartSensorThread+0xd0>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4293      	cmp	r3, r2
 800421c:	d102      	bne.n	8004224 <SDM_StartSensorThread+0x74>
  {
    MP23ABS1_Start();
 800421e:	f7ff f91b 	bl	8003458 <MP23ABS1_Start>
 8004222:	e019      	b.n	8004258 <SDM_StartSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 8004224:	4b17      	ldr	r3, [pc, #92]	; (8004284 <SDM_StartSensorThread+0xd4>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4293      	cmp	r3, r2
 800422e:	d102      	bne.n	8004236 <SDM_StartSensorThread+0x86>
  {
    ISM330DHCX_Start();
 8004230:	f7fe fc12 	bl	8002a58 <ISM330DHCX_Start>
 8004234:	e010      	b.n	8004258 <SDM_StartSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <SDM_StartSensorThread+0xd8>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4293      	cmp	r3, r2
 8004240:	d102      	bne.n	8004248 <SDM_StartSensorThread+0x98>
  {
    LPS22HH_Start();
 8004242:	f7fe fc2f 	bl	8002aa4 <LPS22HH_Start>
 8004246:	e007      	b.n	8004258 <SDM_StartSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <SDM_StartSensorThread+0xdc>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <SDM_StartSensorThread+0xa8>
  {
    STTS751_Start();
 8004254:	f000 fd86 	bl	8004d64 <STTS751_Start>
  }
  sensor_first_dataReady[id] = 1;
 8004258:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <SDM_StartSensorThread+0xe0>)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
  
  return 0;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20016040 	.word	0x20016040
 8004270:	20016354 	.word	0x20016354
 8004274:	200163f0 	.word	0x200163f0
 8004278:	20016315 	.word	0x20016315
 800427c:	200163e8 	.word	0x200163e8
 8004280:	20016314 	.word	0x20016314
 8004284:	20016355 	.word	0x20016355
 8004288:	200163f9 	.word	0x200163f9
 800428c:	200163f8 	.word	0x200163f8
 8004290:	20000028 	.word	0x20000028

08004294 <SDM_StopSensorThread>:
* @brief  Stop sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StopSensorThread(uint32_t id)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 800429c:	4b2c      	ldr	r3, [pc, #176]	; (8004350 <SDM_StopSensorThread+0xbc>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d102      	bne.n	80042ae <SDM_StopSensorThread+0x1a>
  {
    IIS3DWB_Stop();
 80042a8:	f7fe fb98 	bl	80029dc <IIS3DWB_Stop>
 80042ac:	e046      	b.n	800433c <SDM_StopSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 80042ae:	4b29      	ldr	r3, [pc, #164]	; (8004354 <SDM_StopSensorThread+0xc0>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d102      	bne.n	80042c0 <SDM_StopSensorThread+0x2c>
  {
    HTS221_Stop();
 80042ba:	f7fe f8ab 	bl	8002414 <HTS221_Stop>
 80042be:	e03d      	b.n	800433c <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 80042c0:	4b25      	ldr	r3, [pc, #148]	; (8004358 <SDM_StopSensorThread+0xc4>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d102      	bne.n	80042d2 <SDM_StopSensorThread+0x3e>
  {
    IIS2DH_Stop();
 80042cc:	f7fe f8c8 	bl	8002460 <IIS2DH_Stop>
 80042d0:	e034      	b.n	800433c <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 80042d2:	4b22      	ldr	r3, [pc, #136]	; (800435c <SDM_StopSensorThread+0xc8>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4293      	cmp	r3, r2
 80042dc:	d102      	bne.n	80042e4 <SDM_StopSensorThread+0x50>
  {
    IIS2MDC_Stop();
 80042de:	f7fe f8e5 	bl	80024ac <IIS2MDC_Stop>
 80042e2:	e02b      	b.n	800433c <SDM_StopSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 80042e4:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <SDM_StopSensorThread+0xcc>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d102      	bne.n	80042f6 <SDM_StopSensorThread+0x62>
  {
    IMP34DT05_Stop();
 80042f0:	f7fe fb9a 	bl	8002a28 <IMP34DT05_Stop>
 80042f4:	e022      	b.n	800433c <SDM_StopSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 80042f6:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <SDM_StopSensorThread+0xd0>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4293      	cmp	r3, r2
 8004300:	d102      	bne.n	8004308 <SDM_StopSensorThread+0x74>
  {
    MP23ABS1_Stop();
 8004302:	f7ff f8b7 	bl	8003474 <MP23ABS1_Stop>
 8004306:	e019      	b.n	800433c <SDM_StopSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 8004308:	4b17      	ldr	r3, [pc, #92]	; (8004368 <SDM_StopSensorThread+0xd4>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4293      	cmp	r3, r2
 8004312:	d102      	bne.n	800431a <SDM_StopSensorThread+0x86>
  {
    ISM330DHCX_Stop();
 8004314:	f7fe fbae 	bl	8002a74 <ISM330DHCX_Stop>
 8004318:	e010      	b.n	800433c <SDM_StopSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <SDM_StopSensorThread+0xd8>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4293      	cmp	r3, r2
 8004324:	d102      	bne.n	800432c <SDM_StopSensorThread+0x98>
  {
    LPS22HH_Stop();
 8004326:	f7fe fbcb 	bl	8002ac0 <LPS22HH_Stop>
 800432a:	e007      	b.n	800433c <SDM_StopSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 800432c:	4b10      	ldr	r3, [pc, #64]	; (8004370 <SDM_StopSensorThread+0xdc>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4293      	cmp	r3, r2
 8004336:	d101      	bne.n	800433c <SDM_StopSensorThread+0xa8>
  {
    STTS751_Stop();
 8004338:	f000 fd22 	bl	8004d80 <STTS751_Stop>
  }
  sensor_first_dataReady[id] = 0;
 800433c:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <SDM_StopSensorThread+0xe0>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
  return 0;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20016040 	.word	0x20016040
 8004354:	20016354 	.word	0x20016354
 8004358:	200163f0 	.word	0x200163f0
 800435c:	20016315 	.word	0x20016315
 8004360:	200163e8 	.word	0x200163e8
 8004364:	20016314 	.word	0x20016314
 8004368:	20016355 	.word	0x20016355
 800436c:	200163f9 	.word	0x200163f9
 8004370:	200163f8 	.word	0x200163f8
 8004374:	20000028 	.word	0x20000028

08004378 <SDM_ReadJSON>:



uint32_t SDM_ReadJSON(char *serialized_string)
{  
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  static COM_Device_t JSON_device; 
  COM_Device_t *local_device; 
  uint8_t ii;
  uint32_t size;
  
  local_device = COM_GetDevice();  
 8004380:	f7fd fc02 	bl	8001b88 <COM_GetDevice>
 8004384:	6138      	str	r0, [r7, #16]
  size = sizeof(COM_Device_t);
 8004386:	2354      	movs	r3, #84	; 0x54
 8004388:	60fb      	str	r3, [r7, #12]
  
  memcpy(&JSON_device, local_device, size);       
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6939      	ldr	r1, [r7, #16]
 800438e:	4816      	ldr	r0, [pc, #88]	; (80043e8 <SDM_ReadJSON+0x70>)
 8004390:	f018 ff58 	bl	801d244 <memcpy>
  HSD_JSON_parse_Device(serialized_string, &JSON_device);      
 8004394:	4914      	ldr	r1, [pc, #80]	; (80043e8 <SDM_ReadJSON+0x70>)
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fc fe86 	bl	80010a8 <HSD_JSON_parse_Device>
  
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 800439c:	2300      	movs	r3, #0
 800439e:	75fb      	strb	r3, [r7, #23]
 80043a0:	e016      	b.n	80043d0 <SDM_ReadJSON+0x58>
  {
    update_sensorStatus(&local_device->sensors[ii]->sensorStatus, &JSON_device.sensors[ii]->sensorStatus, ii);
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	330a      	adds	r3, #10
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <SDM_ReadJSON+0x70>)
 80043b6:	330a      	adds	r3, #10
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80043c2:	7dfa      	ldrb	r2, [r7, #23]
 80043c4:	4619      	mov	r1, r3
 80043c6:	f7fd fdf3 	bl	8001fb0 <update_sensorStatus>
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	3301      	adds	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
 80043d0:	7dfa      	ldrb	r2, [r7, #23]
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <SDM_ReadJSON+0x70>)
 80043d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d3e3      	bcc.n	80043a2 <SDM_ReadJSON+0x2a>
  }
  
  update_sensors_config();  
 80043da:	f7fd fef7 	bl	80021cc <update_sensors_config>
  
  return 0;  
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000884 	.word	0x20000884

080043ec <SDM_CreateJSON>:

uint32_t SDM_CreateJSON(char **serialized_string)
{  
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  COM_Device_t *device; 
  uint32_t size;
  
  device = COM_GetDevice();  
 80043f4:	f7fd fbc8 	bl	8001b88 <COM_GetDevice>
 80043f8:	60f8      	str	r0, [r7, #12]
  size = HSD_JSON_serialize_Device(device, serialized_string, PRETTY_JSON);
 80043fa:	2201      	movs	r2, #1
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7fc fe40 	bl	8001084 <HSD_JSON_serialize_Device>
 8004404:	4603      	mov	r3, r0
 8004406:	60bb      	str	r3, [r7, #8]
  
  return size;
 8004408:	68bb      	ldr	r3, [r7, #8]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <userButtonCallback>:



void userButtonCallback(uint16_t GPIO_Pin)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	4603      	mov	r3, r0
 800441a:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <userButtonCallback+0x14>
  {
  case USER_BUTTON_PIN:
	  SDM_StartMeasurements();
 8004422:	f000 f805 	bl	8004430 <SDM_StartMeasurements>
  default:
    break;
 8004426:	bf00      	nop
  }
}
 8004428:	bf00      	nop
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <SDM_StartMeasurements>:

void SDM_StartMeasurements(void)
{
 8004430:	b5b0      	push	{r4, r5, r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
    if( HAL_GetTick() - t_start > 1000 )
 8004436:	f001 fef5 	bl	8006224 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <SDM_StartMeasurements+0xa4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004446:	d940      	bls.n	80044ca <SDM_StartMeasurements+0x9a>
    {
      if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 8004448:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <SDM_StartMeasurements+0xa8>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <SDM_StartMeasurements+0x2c>
 8004452:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <SDM_StartMeasurements+0xa8>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d136      	bne.n	80044ca <SDM_StartMeasurements+0x9a>
      {
    	 char startMeasurements [] = {"StartMeasurements!!!"};
 800445c:	4b1f      	ldr	r3, [pc, #124]	; (80044dc <SDM_StartMeasurements+0xac>)
 800445e:	463c      	mov	r4, r7
 8004460:	461d      	mov	r5, r3
 8004462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004466:	e895 0003 	ldmia.w	r5, {r0, r1}
 800446a:	6020      	str	r0, [r4, #0]
 800446c:	3404      	adds	r4, #4
 800446e:	7021      	strb	r1, [r4, #0]
    	 HAL_UART_Transmit(&huart2, (uint8_t *) startMeasurements, sizeof(startMeasurements), HAL_MAX_DELAY);
 8004470:	4639      	mov	r1, r7
 8004472:	f04f 33ff 	mov.w	r3, #4294967295
 8004476:	2215      	movs	r2, #21
 8004478:	4819      	ldr	r0, [pc, #100]	; (80044e0 <SDM_StartMeasurements+0xb0>)
 800447a:	f00a f92f 	bl	800e6dc <HAL_UART_Transmit>

        // Cannot wait since we are in an ISR
        if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <SDM_StartMeasurements+0xb4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2200      	movs	r2, #0
 8004484:	f248 0101 	movw	r1, #32769	; 0x8001
 8004488:	4618      	mov	r0, r3
 800448a:	f012 fa23 	bl	80168d4 <osMessagePut>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <SDM_StartMeasurements+0x68>
        {
          _Error_Handler();
 8004494:	f000 f87e 	bl	8004594 <_Error_Handler>
        }

        t_start = HAL_GetTick();
 8004498:	f001 fec4 	bl	8006224 <HAL_GetTick>
 800449c:	4603      	mov	r3, r0
 800449e:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <SDM_StartMeasurements+0xa4>)
 80044a0:	6013      	str	r3, [r2, #0]

#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
        t_start = SD_Logging_Time_Start = HAL_GetTick();
 80044a2:	f001 febf 	bl	8006224 <HAL_GetTick>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4a0f      	ldr	r2, [pc, #60]	; (80044e8 <SDM_StartMeasurements+0xb8>)
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <SDM_StartMeasurements+0xb8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <SDM_StartMeasurements+0xa4>)
 80044b2:	6013      	str	r3, [r2, #0]

        if (SD_Logging_Enabled == 1)
 80044b4:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <SDM_StartMeasurements+0xbc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d103      	bne.n	80044c4 <SDM_StartMeasurements+0x94>
          SD_Logging_Enabled = 0;
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <SDM_StartMeasurements+0xbc>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
          SD_Logging_Enabled = 1;
#endif
      }
    }

}
 80044c2:	e002      	b.n	80044ca <SDM_StartMeasurements+0x9a>
          SD_Logging_Enabled = 1;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <SDM_StartMeasurements+0xbc>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
}
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bdb0      	pop	{r4, r5, r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000758 	.word	0x20000758
 80044d8:	200002d4 	.word	0x200002d4
 80044dc:	080217f4 	.word	0x080217f4
 80044e0:	20016358 	.word	0x20016358
 80044e4:	20018478 	.word	0x20018478
 80044e8:	20000764 	.word	0x20000764
 80044ec:	20000768 	.word	0x20000768

080044f0 <SDM_AutosaveFile>:

#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
void SDM_AutosaveFile(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  if (SD_Logging_Active)
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <SDM_AutosaveFile+0x94>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d020      	beq.n	800453e <SDM_AutosaveFile+0x4e>
  {
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_ACTIVE*1000 )
 80044fc:	f001 fe92 	bl	8006224 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	4b21      	ldr	r3, [pc, #132]	; (8004588 <SDM_AutosaveFile+0x98>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f64e 2260 	movw	r2, #60000	; 0xea60
 800450c:	4293      	cmp	r3, r2
 800450e:	d936      	bls.n	800457e <SDM_AutosaveFile+0x8e>
    {
      // Cannot wait since we are in an ISR
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8004510:	4b1e      	ldr	r3, [pc, #120]	; (800458c <SDM_AutosaveFile+0x9c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2200      	movs	r2, #0
 8004516:	f248 0101 	movw	r1, #32769	; 0x8001
 800451a:	4618      	mov	r0, r3
 800451c:	f012 f9da 	bl	80168d4 <osMessagePut>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <SDM_AutosaveFile+0x3a>
      {
        _Error_Handler();
 8004526:	f000 f835 	bl	8004594 <_Error_Handler>
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 800452a:	f001 fe7b 	bl	8006224 <HAL_GetTick>
 800452e:	4603      	mov	r3, r0
 8004530:	4a15      	ldr	r2, [pc, #84]	; (8004588 <SDM_AutosaveFile+0x98>)
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b14      	ldr	r3, [pc, #80]	; (8004588 <SDM_AutosaveFile+0x98>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <SDM_AutosaveFile+0xa0>)
 800453a:	6013      	str	r3, [r2, #0]
        _Error_Handler();
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
    }
  }
}
 800453c:	e01f      	b.n	800457e <SDM_AutosaveFile+0x8e>
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_IDLE*1000 )
 800453e:	f001 fe71 	bl	8006224 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <SDM_AutosaveFile+0x98>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f242 7210 	movw	r2, #10000	; 0x2710
 800454e:	4293      	cmp	r3, r2
 8004550:	d915      	bls.n	800457e <SDM_AutosaveFile+0x8e>
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8004552:	4b0e      	ldr	r3, [pc, #56]	; (800458c <SDM_AutosaveFile+0x9c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	f248 0101 	movw	r1, #32769	; 0x8001
 800455c:	4618      	mov	r0, r3
 800455e:	f012 f9b9 	bl	80168d4 <osMessagePut>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <SDM_AutosaveFile+0x7c>
        _Error_Handler();
 8004568:	f000 f814 	bl	8004594 <_Error_Handler>
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 800456c:	f001 fe5a 	bl	8006224 <HAL_GetTick>
 8004570:	4603      	mov	r3, r0
 8004572:	4a05      	ldr	r2, [pc, #20]	; (8004588 <SDM_AutosaveFile+0x98>)
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <SDM_AutosaveFile+0x98>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a05      	ldr	r2, [pc, #20]	; (8004590 <SDM_AutosaveFile+0xa0>)
 800457c:	6013      	str	r3, [r2, #0]
}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20000754 	.word	0x20000754
 8004588:	20000764 	.word	0x20000764
 800458c:	20018478 	.word	0x20018478
 8004590:	20000758 	.word	0x20000758

08004594 <_Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  while (1)
 8004598:	e7fe      	b.n	8004598 <_Error_Handler+0x4>
	...

0800459c <SM_SPI_Init>:
* @param None
* @retval None
* @note callbacks to the MSP
*/
static void SM_SPI_Init(void)
{  
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* SPI3 parameter configuration*/
  hsm_spi.Instance = SM_SPI_x;
 80045a0:	4b20      	ldr	r3, [pc, #128]	; (8004624 <SM_SPI_Init+0x88>)
 80045a2:	4a21      	ldr	r2, [pc, #132]	; (8004628 <SM_SPI_Init+0x8c>)
 80045a4:	601a      	str	r2, [r3, #0]
  hsm_spi.Init.Mode = SPI_MODE_MASTER;
 80045a6:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <SM_SPI_Init+0x88>)
 80045a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045ac:	605a      	str	r2, [r3, #4]
  hsm_spi.Init.Direction = SPI_DIRECTION_2LINES;
 80045ae:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <SM_SPI_Init+0x88>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	609a      	str	r2, [r3, #8]
  hsm_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <SM_SPI_Init+0x88>)
 80045b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045ba:	60da      	str	r2, [r3, #12]
  hsm_spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <SM_SPI_Init+0x88>)
 80045be:	2202      	movs	r2, #2
 80045c0:	611a      	str	r2, [r3, #16]
  hsm_spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 80045c2:	4b18      	ldr	r3, [pc, #96]	; (8004624 <SM_SPI_Init+0x88>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	615a      	str	r2, [r3, #20]
  hsm_spi.Init.NSS = SPI_NSS_SOFT;
 80045c8:	4b16      	ldr	r3, [pc, #88]	; (8004624 <SM_SPI_Init+0x88>)
 80045ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ce:	619a      	str	r2, [r3, #24]
//  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /*SPI running @ 10 MHz */ /*stwin*/
  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /*SPI running @ 10 MHz */ /*stwin*/
 80045d0:	4b14      	ldr	r3, [pc, #80]	; (8004624 <SM_SPI_Init+0x88>)
 80045d2:	2210      	movs	r2, #16
 80045d4:	61da      	str	r2, [r3, #28]
  hsm_spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045d6:	4b13      	ldr	r3, [pc, #76]	; (8004624 <SM_SPI_Init+0x88>)
 80045d8:	2200      	movs	r2, #0
 80045da:	621a      	str	r2, [r3, #32]
  hsm_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <SM_SPI_Init+0x88>)
 80045de:	2200      	movs	r2, #0
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsm_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <SM_SPI_Init+0x88>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
  hsm_spi.Init.CRCPolynomial = 7;
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <SM_SPI_Init+0x88>)
 80045ea:	2207      	movs	r2, #7
 80045ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hsm_spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80045ee:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <SM_SPI_Init+0x88>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsm_spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <SM_SPI_Init+0x88>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Register MSP Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_MSPINIT_CB_ID, SM_SPI_MspInit);
 80045fa:	4a0c      	ldr	r2, [pc, #48]	; (800462c <SM_SPI_Init+0x90>)
 80045fc:	2108      	movs	r1, #8
 80045fe:	4809      	ldr	r0, [pc, #36]	; (8004624 <SM_SPI_Init+0x88>)
 8004600:	f008 fe94 	bl	800d32c <HAL_SPI_RegisterCallback>
  
  if (HAL_SPI_Init(&hsm_spi) != HAL_OK)
 8004604:	4807      	ldr	r0, [pc, #28]	; (8004624 <SM_SPI_Init+0x88>)
 8004606:	f008 fdc7 	bl	800d198 <HAL_SPI_Init>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <SM_SPI_Init+0x78>
  {
    SM_Error_Handler();
 8004610:	f000 f810 	bl	8004634 <SM_Error_Handler>
  }
  
  /* Register SPI DMA complete Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_TX_RX_COMPLETE_CB_ID, SM_SPI_TxRxCpltCallback);
 8004614:	4a06      	ldr	r2, [pc, #24]	; (8004630 <SM_SPI_Init+0x94>)
 8004616:	2102      	movs	r1, #2
 8004618:	4802      	ldr	r0, [pc, #8]	; (8004624 <SM_SPI_Init+0x88>)
 800461a:	f008 fe87 	bl	800d32c <HAL_SPI_RegisterCallback>
}
 800461e:	bf00      	nop
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20018818 	.word	0x20018818
 8004628:	40003800 	.word	0x40003800
 800462c:	0800492d 	.word	0x0800492d
 8004630:	08004895 	.word	0x08004895

08004634 <SM_Error_Handler>:

void SM_Error_Handler( void )
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  while (1)
 8004638:	e7fe      	b.n	8004638 <SM_Error_Handler+0x4>
	...

0800463c <SM_OS_Init>:
*        read requests and a semaphore used to wait for DMA transfer complete
* @param None
* @retval None
*/
void SM_OS_Init(void)
{
 800463c:	b5b0      	push	{r4, r5, r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
  /* Bus read semaphores */
  spiThreadSem_id = osSemaphoreCreate(osSemaphore(spiThreadSem), 1);
 8004642:	2101      	movs	r1, #1
 8004644:	4819      	ldr	r0, [pc, #100]	; (80046ac <SM_OS_Init+0x70>)
 8004646:	f011 ff8b 	bl	8016560 <osSemaphoreCreate>
 800464a:	4603      	mov	r3, r0
 800464c:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <SM_OS_Init+0x74>)
 800464e:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(spiThreadSem_id,osWaitForever);
 8004650:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <SM_OS_Init+0x74>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f04f 31ff 	mov.w	r1, #4294967295
 8004658:	4618      	mov	r0, r3
 800465a:	f011 ffa5 	bl	80165a8 <osSemaphoreWait>
#if 0
  i2cThreadSem_id = osSemaphoreCreate(osSemaphore(i2cThreadSem), 1);
  osSemaphoreWait(i2cThreadSem_id,osWaitForever);    
#endif
  /* Bus read functions memory pools */  
  spiPool_id = osPoolCreate(osPool(spiPool));
 800465e:	4815      	ldr	r0, [pc, #84]	; (80046b4 <SM_OS_Init+0x78>)
 8004660:	f012 f826 	bl	80166b0 <osPoolCreate>
 8004664:	4603      	mov	r3, r0
 8004666:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <SM_OS_Init+0x7c>)
 8004668:	6013      	str	r3, [r2, #0]
#if 0
  i2cPool_id = osPoolCreate(osPool(i2cPool));    
#endif
  /* Bus read queues */
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 800466a:	2100      	movs	r1, #0
 800466c:	4813      	ldr	r0, [pc, #76]	; (80046bc <SM_OS_Init+0x80>)
 800466e:	f012 f91f 	bl	80168b0 <osMessageCreate>
 8004672:	4603      	mov	r3, r0
 8004674:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <SM_OS_Init+0x84>)
 8004676:	6013      	str	r3, [r2, #0]
#if 0
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
#endif
  vQueueAddToRegistry( spiReqQueue_id, "spiReqQueue_id" );
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <SM_OS_Init+0x84>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4911      	ldr	r1, [pc, #68]	; (80046c4 <SM_OS_Init+0x88>)
 800467e:	4618      	mov	r0, r3
 8004680:	f013 f97c 	bl	801797c <vQueueAddToRegistry>
  
  /* SPI read Thread*/
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <SM_OS_Init+0x8c>)
 8004686:	1d3c      	adds	r4, r7, #4
 8004688:	461d      	mov	r5, r3
 800468a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800468c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800468e:	682b      	ldr	r3, [r5, #0]
 8004690:	6023      	str	r3, [r4, #0]
#if 0
  /* I2C read Thread*/
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
#endif
  /* Start SPI read Thread */
  spiThreadId = osThreadCreate(osThread(SPI_THREAD), NULL);
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	2100      	movs	r1, #0
 8004696:	4618      	mov	r0, r3
 8004698:	f011 ff3b 	bl	8016512 <osThreadCreate>
 800469c:	4603      	mov	r3, r0
 800469e:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <SM_OS_Init+0x90>)
 80046a0:	6013      	str	r3, [r2, #0]
#if 0
  /* Start I2C read Thread */
  i2cThreadId = osThreadCreate(osThread(I2C_THREAD), NULL);
#endif
}
 80046a2:	bf00      	nop
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bdb0      	pop	{r4, r5, r7, pc}
 80046aa:	bf00      	nop
 80046ac:	08021a38 	.word	0x08021a38
 80046b0:	20018714 	.word	0x20018714
 80046b4:	08021a44 	.word	0x08021a44
 80046b8:	2001870c 	.word	0x2001870c
 80046bc:	08021a3c 	.word	0x08021a3c
 80046c0:	20018708 	.word	0x20018708
 80046c4:	08021818 	.word	0x08021818
 80046c8:	08021828 	.word	0x08021828
 80046cc:	20018710 	.word	0x20018710

080046d0 <SM_SPI_Read_Os>:
* @note when the function is used and linked to the sensor context, all the calls made by the PID driver will result in a
*       call to this function. If this is the case, be sure to make all the calls to the PID driver functions from a freeRTOS thread
* @retval None
*/
int32_t SM_SPI_Read_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	461a      	mov	r2, r3
 80046dc:	460b      	mov	r3, r1
 80046de:	72fb      	strb	r3, [r7, #11]
 80046e0:	4613      	mov	r3, r2
 80046e2:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 80046e4:	2300      	movs	r3, #0
 80046e6:	75fb      	strb	r3, [r7, #23]
  SM_Message_t * msg;
  
  msg = osPoolAlloc(spiPool_id);
 80046e8:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <SM_SPI_Read_Os+0x84>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f012 f83c 	bl	801676a <osPoolAlloc>
 80046f2:	6138      	str	r0, [r7, #16]
  
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b33      	cmp	r3, #51	; 0x33
 80046fa:	d104      	bne.n	8004706 <SM_SPI_Read_Os+0x36>
 80046fc:	893b      	ldrh	r3, [r7, #8]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d901      	bls.n	8004706 <SM_SPI_Read_Os+0x36>
  {
    autoInc = 0x40;
 8004702:	2340      	movs	r3, #64	; 0x40
 8004704:	75fb      	strb	r3, [r7, #23]
  }
  
  msg->sensorHandler = handle;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg | 0x80 | autoInc;
 800470c:	7afa      	ldrb	r2, [r7, #11]
 800470e:	7dfb      	ldrb	r3, [r7, #23]
 8004710:	4313      	orrs	r3, r2
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004718:	b2da      	uxtb	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	893a      	ldrh	r2, [r7, #8]
 8004722:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <SM_SPI_Read_Os+0x88>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6939      	ldr	r1, [r7, #16]
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	4618      	mov	r0, r3
 8004736:	f012 f8cd 	bl	80168d4 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f04f 31ff 	mov.w	r1, #4294967295
 8004744:	4618      	mov	r0, r3
 8004746:	f011 ff2f 	bl	80165a8 <osSemaphoreWait>
  
  return 0;  
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	2001870c 	.word	0x2001870c
 8004758:	20018708 	.word	0x20018708

0800475c <SM_SPI_Write_Os>:

int32_t SM_SPI_Write_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	461a      	mov	r2, r3
 8004768:	460b      	mov	r3, r1
 800476a:	72fb      	strb	r3, [r7, #11]
 800476c:	4613      	mov	r3, r2
 800476e:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 8004770:	2300      	movs	r3, #0
 8004772:	75fb      	strb	r3, [r7, #23]

  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b33      	cmp	r3, #51	; 0x33
 800477a:	d104      	bne.n	8004786 <SM_SPI_Write_Os+0x2a>
 800477c:	893b      	ldrh	r3, [r7, #8]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d901      	bls.n	8004786 <SM_SPI_Write_Os+0x2a>
  {
    autoInc = 0x40;
 8004782:	2340      	movs	r3, #64	; 0x40
 8004784:	75fb      	strb	r3, [r7, #23]
  }
  
  SM_Message_t * msg;  
  msg = osPoolAlloc(spiPool_id);
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <SM_SPI_Write_Os+0x80>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f011 ffed 	bl	801676a <osPoolAlloc>
 8004790:	6138      	str	r0, [r7, #16]
  msg->sensorHandler = handle;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg|autoInc ;
 8004798:	7afa      	ldrb	r2, [r7, #11]
 800479a:	7dfb      	ldrb	r3, [r7, #23]
 800479c:	4313      	orrs	r3, r2
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	893a      	ldrh	r2, [r7, #8]
 80047a8:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <SM_SPI_Write_Os+0x84>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6939      	ldr	r1, [r7, #16]
 80047b6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ba:	4618      	mov	r0, r3
 80047bc:	f012 f88a 	bl	80168d4 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f04f 31ff 	mov.w	r1, #4294967295
 80047ca:	4618      	mov	r0, r3
 80047cc:	f011 feec 	bl	80165a8 <osSemaphoreWait>
  
  return 0;  
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	2001870c 	.word	0x2001870c
 80047e0:	20018708 	.word	0x20018708

080047e4 <spi_Thread>:
*         the thread which made the request at the end of the read.
* @param  argument not used
* @retval None
*/
static void spi_Thread(void const *argument)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  (void)argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SM_SPI_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_SPI_DEBUG_PIN );
 80047ec:	210a      	movs	r1, #10
 80047ee:	2000      	movs	r0, #0
 80047f0:	f013 fdc0 	bl	8018374 <vTaskSetApplicationTaskTag>
#endif

  osEvent evt;
  for (;;)
  {    
    evt = osMessageGet(spiReqQueue_id, osWaitForever); 
 80047f4:	4b23      	ldr	r3, [pc, #140]	; (8004884 <spi_Thread+0xa0>)
 80047f6:	6819      	ldr	r1, [r3, #0]
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	4618      	mov	r0, r3
 8004802:	f012 f8a7 	bl	8016954 <osMessageGet>

    SM_Message_t * msg = evt.value.p;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_RESET);
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6858      	ldr	r0, [r3, #4]
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	891b      	ldrh	r3, [r3, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	4619      	mov	r1, r3
 800481a:	f003 feaf 	bl	800857c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hsm_spi, &msg->regAddr, 1, 1000);
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f103 010c 	add.w	r1, r3, #12
 8004824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004828:	2201      	movs	r2, #1
 800482a:	4817      	ldr	r0, [pc, #92]	; (8004888 <spi_Thread+0xa4>)
 800482c:	f008 fe24 	bl	800d478 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive_DMA(&hsm_spi, msg->dataPtr, msg->dataPtr, msg->readSize);
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	6899      	ldr	r1, [r3, #8]
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	89db      	ldrh	r3, [r3, #14]
 800483c:	4812      	ldr	r0, [pc, #72]	; (8004888 <spi_Thread+0xa4>)
 800483e:	f008 ff81 	bl	800d744 <HAL_SPI_TransmitReceive_DMA>
    
    osSemaphoreWait(spiThreadSem_id, osWaitForever);
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <spi_Thread+0xa8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f04f 31ff 	mov.w	r1, #4294967295
 800484a:	4618      	mov	r0, r3
 800484c:	f011 feac 	bl	80165a8 <osSemaphoreWait>
    
    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_SET); 
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6858      	ldr	r0, [r3, #4]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	891b      	ldrh	r3, [r3, #8]
 800485c:	2201      	movs	r2, #1
 800485e:	4619      	mov	r1, r3
 8004860:	f003 fe8c 	bl	800857c <HAL_GPIO_WritePin>

    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	61bb      	str	r3, [r7, #24]
    osPoolFree(spiPool_id, msg);
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <spi_Thread+0xac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69f9      	ldr	r1, [r7, #28]
 8004872:	4618      	mov	r0, r3
 8004874:	f011 ffdb 	bl	801682e <osPoolFree>
    osSemaphoreRelease(*sem);
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f011 fee1 	bl	8016644 <osSemaphoreRelease>
  {    
 8004882:	e7b7      	b.n	80047f4 <spi_Thread+0x10>
 8004884:	20018708 	.word	0x20018708
 8004888:	20018818 	.word	0x20018818
 800488c:	20018714 	.word	0x20018714
 8004890:	2001870c 	.word	0x2001870c

08004894 <SM_SPI_TxRxCpltCallback>:
  }
}

static void SM_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(spiThreadSem_id);    
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <SM_SPI_TxRxCpltCallback+0x1c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f011 fecf 	bl	8016644 <osSemaphoreRelease>
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20018714 	.word	0x20018714

080048b4 <SM_Peripheral_Init>:
{
  errors++;
}

void SM_Peripheral_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  SM_DMA_Init();
 80048b8:	f000 f806 	bl	80048c8 <SM_DMA_Init>
//  SM_I2C_Init();
  SM_SPI_Init();
 80048bc:	f7ff fe6e 	bl	800459c <SM_SPI_Init>
  SM_TIM_Init();
 80048c0:	f000 f976 	bl	8004bb0 <SM_TIM_Init>
}
 80048c4:	bf00      	nop
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <SM_DMA_Init>:

/** 
* Enable DMA controller clock
*/
static void SM_DMA_Init(void) 
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80048ce:	4b16      	ldr	r3, [pc, #88]	; (8004928 <SM_DMA_Init+0x60>)
 80048d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d2:	4a15      	ldr	r2, [pc, #84]	; (8004928 <SM_DMA_Init+0x60>)
 80048d4:	f043 0304 	orr.w	r3, r3, #4
 80048d8:	6493      	str	r3, [r2, #72]	; 0x48
 80048da:	4b13      	ldr	r3, [pc, #76]	; (8004928 <SM_DMA_Init+0x60>)
 80048dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
  SM_SPIx_DMA_CLK_ENABLE();
 80048e6:	4b10      	ldr	r3, [pc, #64]	; (8004928 <SM_DMA_Init+0x60>)
 80048e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ea:	4a0f      	ldr	r2, [pc, #60]	; (8004928 <SM_DMA_Init+0x60>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6493      	str	r3, [r2, #72]	; 0x48
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <SM_DMA_Init+0x60>)
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_I2C_RX_DMA_IRQn, 3, 0);
  HAL_NVIC_EnableIRQ(SM_I2C_RX_DMA_IRQn);
#endif
  /* SM_SPI_RX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_RX_DMA_IRQn, 3, 0);
 80048fe:	2200      	movs	r2, #0
 8004900:	2103      	movs	r1, #3
 8004902:	200b      	movs	r0, #11
 8004904:	f003 f9d9 	bl	8007cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_RX_DMA_IRQn);
 8004908:	200b      	movs	r0, #11
 800490a:	f003 f9f2 	bl	8007cf2 <HAL_NVIC_EnableIRQ>
  
  /* SM_SPI_TX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_TX_DMA_IRQn, 3, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	2103      	movs	r1, #3
 8004912:	200c      	movs	r0, #12
 8004914:	f003 f9d1 	bl	8007cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_TX_DMA_IRQn);
 8004918:	200c      	movs	r0, #12
 800491a:	f003 f9ea 	bl	8007cf2 <HAL_NVIC_EnableIRQ>
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000

0800492c <SM_SPI_MspInit>:

static void SM_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08e      	sub	sp, #56	; 0x38
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	611a      	str	r2, [r3, #16]
  
//  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);

  SM_SPI_CLK_PIN_CLK_ENABLE(); 
 8004944:	4b8f      	ldr	r3, [pc, #572]	; (8004b84 <SM_SPI_MspInit+0x258>)
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	4a8e      	ldr	r2, [pc, #568]	; (8004b84 <SM_SPI_MspInit+0x258>)
 800494a:	f043 0308 	orr.w	r3, r3, #8
 800494e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004950:	4b8c      	ldr	r3, [pc, #560]	; (8004b84 <SM_SPI_MspInit+0x258>)
 8004952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	623b      	str	r3, [r7, #32]
 800495a:	6a3b      	ldr	r3, [r7, #32]
  SM_SPI_MISO_PIN_CLK_ENABLE(); 
 800495c:	4b89      	ldr	r3, [pc, #548]	; (8004b84 <SM_SPI_MspInit+0x258>)
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	4a88      	ldr	r2, [pc, #544]	; (8004b84 <SM_SPI_MspInit+0x258>)
 8004962:	f043 0308 	orr.w	r3, r3, #8
 8004966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004968:	4b86      	ldr	r3, [pc, #536]	; (8004b84 <SM_SPI_MspInit+0x258>)
 800496a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	61fb      	str	r3, [r7, #28]
 8004972:	69fb      	ldr	r3, [r7, #28]
  SM_SPI_MOSI_PIN_CLK_ENABLE(); 
 8004974:	4b83      	ldr	r3, [pc, #524]	; (8004b84 <SM_SPI_MspInit+0x258>)
 8004976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004978:	4a82      	ldr	r2, [pc, #520]	; (8004b84 <SM_SPI_MspInit+0x258>)
 800497a:	f043 0304 	orr.w	r3, r3, #4
 800497e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004980:	4b80      	ldr	r3, [pc, #512]	; (8004b84 <SM_SPI_MspInit+0x258>)
 8004982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();		//SPI2_CS
 800498c:	4b7d      	ldr	r3, [pc, #500]	; (8004b84 <SM_SPI_MspInit+0x258>)
 800498e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004990:	4a7c      	ldr	r2, [pc, #496]	; (8004b84 <SM_SPI_MspInit+0x258>)
 8004992:	f043 0302 	orr.w	r3, r3, #2
 8004996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004998:	4b7a      	ldr	r3, [pc, #488]	; (8004b84 <SM_SPI_MspInit+0x258>)
 800499a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();		//SEL_3_4
 80049a4:	4b77      	ldr	r3, [pc, #476]	; (8004b84 <SM_SPI_MspInit+0x258>)
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	4a76      	ldr	r2, [pc, #472]	; (8004b84 <SM_SPI_MspInit+0x258>)
 80049aa:	f043 0320 	orr.w	r3, r3, #32
 80049ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049b0:	4b74      	ldr	r3, [pc, #464]	; (8004b84 <SM_SPI_MspInit+0x258>)
 80049b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();		//SEL_1_2
 80049bc:	4b71      	ldr	r3, [pc, #452]	; (8004b84 <SM_SPI_MspInit+0x258>)
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	4a70      	ldr	r2, [pc, #448]	; (8004b84 <SM_SPI_MspInit+0x258>)
 80049c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049c8:	4b6e      	ldr	r3, [pc, #440]	; (8004b84 <SM_SPI_MspInit+0x258>)
 80049ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 80049d4:	2201      	movs	r2, #1
 80049d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049da:	486b      	ldr	r0, [pc, #428]	; (8004b88 <SM_SPI_MspInit+0x25c>)
 80049dc:	f003 fdce 	bl	800857c <HAL_GPIO_WritePin>

  //Configure GPIO pin Output Level of 1_2_SEL and 3_4_SEL
  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
 80049e0:	2200      	movs	r2, #0
 80049e2:	2101      	movs	r1, #1
 80049e4:	4869      	ldr	r0, [pc, #420]	; (8004b8c <SM_SPI_MspInit+0x260>)
 80049e6:	f003 fdc9 	bl	800857c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);
 80049ea:	2201      	movs	r2, #1
 80049ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049f0:	4867      	ldr	r0, [pc, #412]	; (8004b90 <SM_SPI_MspInit+0x264>)
 80049f2:	f003 fdc3 	bl	800857c <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f6:	2302      	movs	r3, #2
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049fe:	2303      	movs	r3, #3
 8004a00:	633b      	str	r3, [r7, #48]	; 0x30
  
  GPIO_InitStruct.Alternate = SM_SPI_CLK_AF;
 8004a02:	2305      	movs	r3, #5
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 8004a06:	2302      	movs	r3, #2
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_SPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4860      	ldr	r0, [pc, #384]	; (8004b94 <SM_SPI_MspInit+0x268>)
 8004a12:	f003 fc09 	bl	8008228 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MISO_AF;
 8004a16:	2305      	movs	r3, #5
 8004a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pin = SM_SPI_MISO_PIN;
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a22:	4619      	mov	r1, r3
 8004a24:	485b      	ldr	r0, [pc, #364]	; (8004b94 <SM_SPI_MspInit+0x268>)
 8004a26:	f003 fbff 	bl	8008228 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MOSI_AF;
 8004a2a:	2305      	movs	r3, #5
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pin = SM_SPI_MOSI_PIN;
 8004a2e:	2308      	movs	r3, #8
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a36:	4619      	mov	r1, r3
 8004a38:	4857      	ldr	r0, [pc, #348]	; (8004b98 <SM_SPI_MspInit+0x26c>)
 8004a3a:	f003 fbf5 	bl	8008228 <HAL_GPIO_Init>
  
  //Add changed---
  /*Configure GPIO pin : IIS3DWB_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 8004a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a44:	2301      	movs	r3, #1
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8004a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a54:	4619      	mov	r1, r3
 8004a56:	484c      	ldr	r0, [pc, #304]	; (8004b88 <SM_SPI_MspInit+0x25c>)
 8004a58:	f003 fbe6 	bl	8008228 <HAL_GPIO_Init>

  /*Configure GPIO pins : STTS751_INT_Pin IIS3DWB_INT1_Pin */
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a60:	4b4e      	ldr	r3, [pc, #312]	; (8004b9c <SM_SPI_MspInit+0x270>)
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IIS3DWB_INT1_GPIO_Port, &GPIO_InitStruct);
 8004a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	484a      	ldr	r0, [pc, #296]	; (8004b98 <SM_SPI_MspInit+0x26c>)
 8004a70:	f003 fbda 	bl	8008228 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_2_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_1_2_SEL_Pin;
 8004a74:	2301      	movs	r3, #1
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a80:	2300      	movs	r3, #0
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IIS3DWB_1_2_SEL_GPIO_Port, &GPIO_InitStruct);
 8004a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4840      	ldr	r0, [pc, #256]	; (8004b8c <SM_SPI_MspInit+0x260>)
 8004a8c:	f003 fbcc 	bl	8008228 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_3_4_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_3_4_SEL_Pin;
 8004a90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a96:	2301      	movs	r3, #1
 8004a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IIS3DWB_3_4_SEL_GPIO_Port, &GPIO_InitStruct);
 8004aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4839      	ldr	r0, [pc, #228]	; (8004b90 <SM_SPI_MspInit+0x264>)
 8004aaa:	f003 fbbd 	bl	8008228 <HAL_GPIO_Init>
  //---

  SM_SPIx_CLK_ENABLE();
 8004aae:	4b35      	ldr	r3, [pc, #212]	; (8004b84 <SM_SPI_MspInit+0x258>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab2:	4a34      	ldr	r2, [pc, #208]	; (8004b84 <SM_SPI_MspInit+0x258>)
 8004ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8004aba:	4b32      	ldr	r3, [pc, #200]	; (8004b84 <SM_SPI_MspInit+0x258>)
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac2:	60bb      	str	r3, [r7, #8]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
    
  /* SPI DMA Init */
  /* SPI_RX Init */
  hdma_sm_spi_rx.Instance = SM_SPI_RX_DMA_CHANNEL;
 8004ac6:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004ac8:	4a36      	ldr	r2, [pc, #216]	; (8004ba4 <SM_SPI_MspInit+0x278>)
 8004aca:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_rx.Init.Request = SM_SPI_RX_DMA_REQUEST;
 8004acc:	4b34      	ldr	r3, [pc, #208]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004ace:	220c      	movs	r2, #12
 8004ad0:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ad2:	4b33      	ldr	r3, [pc, #204]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ad8:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ade:	4b30      	ldr	r3, [pc, #192]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004ae0:	2280      	movs	r2, #128	; 0x80
 8004ae2:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ae4:	4b2e      	ldr	r3, [pc, #184]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004aea:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_rx.Init.Mode = DMA_NORMAL;
 8004af0:	4b2b      	ldr	r3, [pc, #172]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004af6:	4b2a      	ldr	r3, [pc, #168]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_rx) != HAL_OK)
 8004afc:	4828      	ldr	r0, [pc, #160]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004afe:	f003 f913 	bl	8007d28 <HAL_DMA_Init>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <SM_SPI_MspInit+0x1e0>
  {
    SM_Error_Handler();
 8004b08:	f7ff fd94 	bl	8004634 <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmarx,hdma_sm_spi_rx);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a24      	ldr	r2, [pc, #144]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004b10:	659a      	str	r2, [r3, #88]	; 0x58
 8004b12:	4a23      	ldr	r2, [pc, #140]	; (8004ba0 <SM_SPI_MspInit+0x274>)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6293      	str	r3, [r2, #40]	; 0x28
  
  /* SPI_TX Init */
  hdma_sm_spi_tx.Instance = SM_SPI_TX_DMA_CHANNEL;
 8004b18:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b1a:	4a24      	ldr	r2, [pc, #144]	; (8004bac <SM_SPI_MspInit+0x280>)
 8004b1c:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_tx.Init.Request = SM_SPI_TX_DMA_REQUEST;
 8004b1e:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b20:	220d      	movs	r2, #13
 8004b22:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b24:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b26:	2210      	movs	r2, #16
 8004b28:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b2a:	4b1f      	ldr	r3, [pc, #124]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b36:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_tx.Init.Mode = DMA_NORMAL;
 8004b42:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_tx) != HAL_OK)
 8004b4e:	4816      	ldr	r0, [pc, #88]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b50:	f003 f8ea 	bl	8007d28 <HAL_DMA_Init>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <SM_SPI_MspInit+0x232>
  {
    SM_Error_Handler();
 8004b5a:	f7ff fd6b 	bl	8004634 <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmatx,hdma_sm_spi_tx);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b62:	655a      	str	r2, [r3, #84]	; 0x54
 8004b64:	4a10      	ldr	r2, [pc, #64]	; (8004ba8 <SM_SPI_MspInit+0x27c>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6293      	str	r3, [r2, #40]	; 0x28

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2105      	movs	r1, #5
 8004b6e:	2017      	movs	r0, #23
 8004b70:	f003 f8a3 	bl	8007cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b74:	2017      	movs	r0, #23
 8004b76:	f003 f8bc 	bl	8007cf2 <HAL_NVIC_EnableIRQ>
}
 8004b7a:	bf00      	nop
 8004b7c:	3738      	adds	r7, #56	; 0x38
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
 8004b88:	48000400 	.word	0x48000400
 8004b8c:	48001800 	.word	0x48001800
 8004b90:	48001400 	.word	0x48001400
 8004b94:	48000c00 	.word	0x48000c00
 8004b98:	48000800 	.word	0x48000800
 8004b9c:	10110000 	.word	0x10110000
 8004ba0:	20018718 	.word	0x20018718
 8004ba4:	40020008 	.word	0x40020008
 8004ba8:	2001898c 	.word	0x2001898c
 8004bac:	4002001c 	.word	0x4002001c

08004bb0 <SM_TIM_Init>:
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 4, 0);
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);  
}

void SM_TIM_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
  SM_TIMx_CLK_ENABLE();
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <SM_TIM_Init+0x54>)
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <SM_TIM_Init+0x54>)
 8004bbc:	f043 0308 	orr.w	r3, r3, #8
 8004bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc2:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <SM_TIM_Init+0x54>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
  /* Set TIMx instance */
  hsm_tim.Instance = SM_TIMx;
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <SM_TIM_Init+0x58>)
 8004bd0:	4a0e      	ldr	r2, [pc, #56]	; (8004c0c <SM_TIM_Init+0x5c>)
 8004bd2:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = (SystemCoreClock/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  hsm_tim.Init.Period            = 0xFFFFFFFF;
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <SM_TIM_Init+0x58>)
 8004bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bda:	60da      	str	r2, [r3, #12]
  hsm_tim.Init.Prescaler         = 0;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <SM_TIM_Init+0x58>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	605a      	str	r2, [r3, #4]
  hsm_tim.Init.ClockDivision     = 0;
 8004be2:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <SM_TIM_Init+0x58>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	611a      	str	r2, [r3, #16]
  hsm_tim.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <SM_TIM_Init+0x58>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	609a      	str	r2, [r3, #8]
  hsm_tim.Init.RepetitionCounter = 0;
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <SM_TIM_Init+0x58>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&hsm_tim) != HAL_OK)
 8004bf4:	4804      	ldr	r0, [pc, #16]	; (8004c08 <SM_TIM_Init+0x58>)
 8004bf6:	f009 f9c3 	bl	800df80 <HAL_TIM_Base_Init>
  {
    /* Initialization Error */
//    Error_Handler();
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000
 8004c08:	200187d8 	.word	0x200187d8
 8004c0c:	40000c00 	.word	0x40000c00

08004c10 <SM_TIM_Start>:

void SM_TIM_Start(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Start(&hsm_tim) != HAL_OK)
 8004c14:	4802      	ldr	r0, [pc, #8]	; (8004c20 <SM_TIM_Start+0x10>)
 8004c16:	f009 f9e9 	bl	800dfec <HAL_TIM_Base_Start>
  {
    /* Starting Error */
//    Error_Handler();
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200187d8 	.word	0x200187d8

08004c24 <SM_TIM_Stop>:

void SM_TIM_Stop(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Stop(&hsm_tim) != HAL_OK)
 8004c28:	4804      	ldr	r0, [pc, #16]	; (8004c3c <SM_TIM_Stop+0x18>)
 8004c2a:	f009 fa09 	bl	800e040 <HAL_TIM_Base_Stop>
  {
    /* Starting Error */
//    Error_Handler();
  }
  hsm_tim.Instance->CNT = 0;
 8004c2e:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <SM_TIM_Stop+0x18>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	200187d8 	.word	0x200187d8

08004c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c52:	e7fe      	b.n	8004c52 <HardFault_Handler+0x4>

08004c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c58:	e7fe      	b.n	8004c58 <MemManage_Handler+0x4>

08004c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c5e:	e7fe      	b.n	8004c5e <BusFault_Handler+0x4>

08004c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c64:	e7fe      	b.n	8004c64 <UsageFault_Handler+0x4>

08004c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0

}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
 HAL_IncTick();
 8004c78:	f001 fac2 	bl	8006200 <HAL_IncTick>
 osSystickHandler();
 8004c7c:	f011 fede 	bl	8016a3c <osSystickHandler>
}
 8004c80:	bf00      	nop
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <PVD_PVM_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/
void PVD_PVM_IRQHandler(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  HAL_PWREx_PVD_PVM_IRQHandler();
 8004c88:	f005 f962 	bl	8009f50 <HAL_PWREx_PVD_PVM_IRQHandler>
}
 8004c8c:	bf00      	nop
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line[0] interrupts.
  */
void EXTI0_IRQHandler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8004c94:	2001      	movs	r0, #1
 8004c96:	f003 fca3 	bl	80085e0 <HAL_GPIO_EXTI_IRQHandler>
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
   HAL_EXTI_IRQHandler(&hts221_exti);  
 8004ca4:	4806      	ldr	r0, [pc, #24]	; (8004cc0 <EXTI9_5_IRQHandler+0x20>)
 8004ca6:	f003 fa8f 	bl	80081c8 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&ism330dhcx_exti);  
 8004caa:	4806      	ldr	r0, [pc, #24]	; (8004cc4 <EXTI9_5_IRQHandler+0x24>)
 8004cac:	f003 fa8c 	bl	80081c8 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&iis2mdc_exti);
 8004cb0:	4805      	ldr	r0, [pc, #20]	; (8004cc8 <EXTI9_5_IRQHandler+0x28>)
 8004cb2:	f003 fa89 	bl	80081c8 <HAL_EXTI_IRQHandler>
   HAL_GPIO_EXTI_IRQHandler(IIS3DWB_INT1_Pin);
 8004cb6:	2020      	movs	r0, #32
 8004cb8:	f003 fc92 	bl	80085e0 <HAL_GPIO_EXTI_IRQHandler>
}
 8004cbc:	bf00      	nop
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	2000fe90 	.word	0x2000fe90
 8004cc4:	20015e78 	.word	0x20015e78
 8004cc8:	2000fef8 	.word	0x2000fef8

08004ccc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hsm_i2c);
 8004cd0:	4802      	ldr	r0, [pc, #8]	; (8004cdc <I2C2_EV_IRQHandler+0x10>)
 8004cd2:	f003 fc9d 	bl	8008610 <HAL_I2C_EV_IRQHandler>
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	200188a8 	.word	0x200188a8

08004ce0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hsm_i2c);
 8004ce4:	4802      	ldr	r0, [pc, #8]	; (8004cf0 <I2C2_ER_IRQHandler+0x10>)
 8004ce6:	f003 fcad 	bl	8008644 <HAL_I2C_ER_IRQHandler>
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200188a8 	.word	0x200188a8

08004cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
//  HAL_EXTI_IRQHandler(&iis3dwb_exti);
  HAL_EXTI_IRQHandler(&BC_exti);
 8004cf8:	4802      	ldr	r0, [pc, #8]	; (8004d04 <EXTI15_10_IRQHandler+0x10>)
 8004cfa:	f003 fa65 	bl	80081c8 <HAL_EXTI_IRQHandler>
}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20016318 	.word	0x20016318

08004d08 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI2_IRQHandler(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&iis2dh_exti);
 8004d0c:	4802      	ldr	r0, [pc, #8]	; (8004d18 <EXTI2_IRQHandler+0x10>)
 8004d0e:	f003 fa5b 	bl	80081c8 <HAL_EXTI_IRQHandler>
}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	2000fed4 	.word	0x2000fed4

08004d1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004d20:	4802      	ldr	r0, [pc, #8]	; (8004d2c <OTG_FS_IRQHandler+0x10>)
 8004d22:	f004 f956 	bl	8008fd2 <HAL_PCD_IRQHandler>
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20018a14 	.word	0x20018a14

08004d30 <SDMMC1_IRQHandler>:

void SDMMC1_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd1);
 8004d34:	4802      	ldr	r0, [pc, #8]	; (8004d40 <SDMMC1_IRQHandler+0x10>)
 8004d36:	f007 f817 	bl	800bd68 <HAL_SD_IRQHandler>
}
 8004d3a:	bf00      	nop
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20015fc0 	.word	0x20015fc0

08004d44 <STTS751_Set_State>:
    }      
  }
}

void STTS751_Set_State(SM_Sensor_State_t newState)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
  STTS751_Sensor_State = newState;
 8004d4e:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <STTS751_Set_State+0x1c>)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	7013      	strb	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	20000035 	.word	0x20000035

08004d64 <STTS751_Start>:
  STTS751_Init_Param.FS[0] = newFS1;
  STTS751_Init_Param.FS[0] = newFS2;
}

void STTS751_Start(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8004d68:	2003      	movs	r0, #3
 8004d6a:	f7ff ffeb 	bl	8004d44 <STTS751_Set_State>
  osThreadResume(STTS751_Thread_Id);
 8004d6e:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <STTS751_Start+0x18>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f011 fe7a 	bl	8016a6c <osThreadResume>
}
 8004d78:	bf00      	nop
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20018a10 	.word	0x20018a10

08004d80 <STTS751_Stop>:

void STTS751_Stop(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8004d84:	2001      	movs	r0, #1
 8004d86:	f7ff ffdd 	bl	8004d44 <STTS751_Set_State>
}
 8004d8a:	bf00      	nop
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <SystemInit>:
#define VECTOR_TABLE 0x08000000
#endif


void SystemInit(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d94:	4b17      	ldr	r3, [pc, #92]	; (8004df4 <SystemInit+0x64>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	4a16      	ldr	r2, [pc, #88]	; (8004df4 <SystemInit+0x64>)
 8004d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004da4:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <SystemInit+0x68>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a13      	ldr	r2, [pc, #76]	; (8004df8 <SystemInit+0x68>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004db0:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <SystemInit+0x68>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8004db6:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <SystemInit+0x68>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <SystemInit+0x68>)
 8004dbc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004dc0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004dc4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <SystemInit+0x68>)
 8004dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dcc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <SystemInit+0x68>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <SystemInit+0x68>)
 8004dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <SystemInit+0x68>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004de0:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <SystemInit+0x64>)
 8004de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004de6:	609a      	str	r2, [r3, #8]
#endif
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	e000ed00 	.word	0xe000ed00
 8004df8:	40021000 	.word	0x40021000

08004dfc <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f00c fec3 	bl	8011b9e <USBD_LL_SetupStage>
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f00c fef5 	bl	8011c38 <USBD_LL_DataOutStage>
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	3348      	adds	r3, #72	; 0x48
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	f00c ff4c 	bl	8011d1a <USBD_LL_DataInStage>
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f00d f85f 	bl	8011f5c <USBD_LL_SOF>
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f00c ffd5 	bl	8011e64 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f00d f80f 	bl	8011ee6 <USBD_LL_SetSpeed>
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f00d f811 	bl	8011f06 <USBD_LL_Suspend>
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004efa:	4618      	mov	r0, r3
 8004efc:	f00d f818 	bl	8011f30 <USBD_LL_Resume>
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004f1a:	78fa      	ldrb	r2, [r7, #3]
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f00d f843 	bl	8011faa <USBD_LL_IsoOUTIncomplete>
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f00d f824 	bl	8011f90 <USBD_LL_IsoINIncomplete>
}
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f00d f830 	bl	8011fc4 <USBD_LL_DevConnected>
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f00d f82d 	bl	8011fda <USBD_LL_DevDisconnected>
}
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	4608      	mov	r0, r1
 8004f92:	4611      	mov	r1, r2
 8004f94:	461a      	mov	r2, r3
 8004f96:	4603      	mov	r3, r0
 8004f98:	70fb      	strb	r3, [r7, #3]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	70bb      	strb	r3, [r7, #2]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004fa8:	78bb      	ldrb	r3, [r7, #2]
 8004faa:	883a      	ldrh	r2, [r7, #0]
 8004fac:	78f9      	ldrb	r1, [r7, #3]
 8004fae:	f004 fbd9 	bl	8009764 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fce:	78fa      	ldrb	r2, [r7, #3]
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f004 fca9 	bl	800992a <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f004 fcf8 	bl	80099ee <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800501a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800501c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005020:	2b00      	cmp	r3, #0
 8005022:	da0b      	bge.n	800503c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800502a:	68f9      	ldr	r1, [r7, #12]
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	333e      	adds	r3, #62	; 0x3e
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	e00b      	b.n	8005054 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005042:	68f9      	ldr	r1, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005052:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	4611      	mov	r1, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f004 fb4f 	bl	800971a <HAL_PCD_SetAddress>
  return USBD_OK; 
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	461a      	mov	r2, r3
 8005092:	460b      	mov	r3, r1
 8005094:	72fb      	strb	r3, [r7, #11]
 8005096:	4613      	mov	r3, r2
 8005098:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80050a0:	893b      	ldrh	r3, [r7, #8]
 80050a2:	7af9      	ldrb	r1, [r7, #11]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	f004 fc03 	bl	80098b0 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	607a      	str	r2, [r7, #4]
 80050be:	461a      	mov	r2, r3
 80050c0:	460b      	mov	r3, r1
 80050c2:	72fb      	strb	r3, [r7, #11]
 80050c4:	4613      	mov	r3, r2
 80050c6:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80050ce:	893b      	ldrh	r3, [r7, #8]
 80050d0:	7af9      	ldrb	r1, [r7, #11]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	f004 fbae 	bl	8009834 <HAL_PCD_EP_Receive>
  return USBD_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 80050e2:	b590      	push	{r4, r7, lr}
 80050e4:	b087      	sub	sp, #28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	461a      	mov	r2, r3
 80050ee:	460b      	mov	r3, r1
 80050f0:	72fb      	strb	r3, [r7, #11]
 80050f2:	4613      	mov	r3, r2
 80050f4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685c      	ldr	r4, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6898      	ldr	r0, [r3, #8]
 80050fe:	893b      	ldrh	r3, [r7, #8]
 8005100:	7af9      	ldrb	r1, [r7, #11]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	47a0      	blx	r4
 8005106:	6178      	str	r0, [r7, #20]
  return ret;
 8005108:	697b      	ldr	r3, [r7, #20]
}
 800510a:	4618      	mov	r0, r3
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	bd90      	pop	{r4, r7, pc}

08005112 <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 8005112:	b590      	push	{r4, r7, lr}
 8005114:	b087      	sub	sp, #28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	461a      	mov	r2, r3
 800511e:	460b      	mov	r3, r1
 8005120:	72fb      	strb	r3, [r7, #11]
 8005122:	4613      	mov	r3, r2
 8005124:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681c      	ldr	r4, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6898      	ldr	r0, [r3, #8]
 800512e:	893b      	ldrh	r3, [r7, #8]
 8005130:	7af9      	ldrb	r1, [r7, #11]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	47a0      	blx	r4
 8005136:	6178      	str	r0, [r7, #20]
  return ret;
 8005138:	697b      	ldr	r3, [r7, #20]
}
 800513a:	4618      	mov	r0, r3
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}

08005142 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800514e:	f107 0208 	add.w	r2, r7, #8
 8005152:	2301      	movs	r3, #1
 8005154:	2110      	movs	r1, #16
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff ffc3 	bl	80050e2 <iis3dwb_read_reg>
 800515c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10f      	bne.n	8005184 <iis3dwb_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	b2da      	uxtb	r2, r3
 800516c:	7a3b      	ldrb	r3, [r7, #8]
 800516e:	f362 0383 	bfi	r3, r2, #2, #2
 8005172:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8005174:	f107 0208 	add.w	r2, r7, #8
 8005178:	2301      	movs	r3, #1
 800517a:	2110      	movs	r1, #16
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff ffc8 	bl	8005112 <iis3dwb_write_reg>
 8005182:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8005184:	68fb      	ldr	r3, [r7, #12]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 800519a:	f107 0208 	add.w	r2, r7, #8
 800519e:	2301      	movs	r3, #1
 80051a0:	210b      	movs	r1, #11
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff ff9d 	bl	80050e2 <iis3dwb_read_reg>
 80051a8:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10f      	bne.n	80051d0 <iis3dwb_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	7a3b      	ldrb	r3, [r7, #8]
 80051ba:	f362 13c7 	bfi	r3, r2, #7, #1
 80051be:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 80051c0:	f107 0208 	add.w	r2, r7, #8
 80051c4:	2301      	movs	r3, #1
 80051c6:	210b      	movs	r1, #11
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff ffa2 	bl	8005112 <iis3dwb_write_reg>
 80051ce:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
 80051d0:	68fb      	ldr	r3, [r7, #12]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 80051e4:	2301      	movs	r3, #1
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	210f      	movs	r1, #15
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff ff79 	bl	80050e2 <iis3dwb_read_reg>
 80051f0:	60f8      	str	r0, [r7, #12]
  return ret;
 80051f2:	68fb      	ldr	r3, [r7, #12]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005208:	f107 0208 	add.w	r2, r7, #8
 800520c:	2301      	movs	r3, #1
 800520e:	2112      	movs	r1, #18
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff ff66 	bl	80050e2 <iis3dwb_read_reg>
 8005216:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10f      	bne.n	800523e <iis3dwb_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	b2da      	uxtb	r2, r3
 8005226:	7a3b      	ldrb	r3, [r7, #8]
 8005228:	f362 0300 	bfi	r3, r2, #0, #1
 800522c:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800522e:	f107 0208 	add.w	r2, r7, #8
 8005232:	2301      	movs	r3, #1
 8005234:	2112      	movs	r1, #18
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ff6b 	bl	8005112 <iis3dwb_write_reg>
 800523c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800523e:	68fb      	ldr	r3, [r7, #12]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005254:	f107 0210 	add.w	r2, r7, #16
 8005258:	2301      	movs	r3, #1
 800525a:	2110      	movs	r1, #16
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff40 	bl	80050e2 <iis3dwb_read_reg>
 8005262:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d111      	bne.n	800528e <iis3dwb_xl_hp_path_on_out_set+0x46>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	09db      	lsrs	r3, r3, #7
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	b2da      	uxtb	r2, r3
 8005276:	7c3b      	ldrb	r3, [r7, #16]
 8005278:	f362 0341 	bfi	r3, r2, #1, #1
 800527c:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800527e:	f107 0210 	add.w	r2, r7, #16
 8005282:	2301      	movs	r3, #1
 8005284:	2110      	movs	r1, #16
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff ff43 	bl	8005112 <iis3dwb_write_reg>
 800528c:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d107      	bne.n	80052a4 <iis3dwb_xl_hp_path_on_out_set+0x5c>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8005294:	f107 020c 	add.w	r2, r7, #12
 8005298:	2301      	movs	r3, #1
 800529a:	2117      	movs	r1, #23
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ff20 	bl	80050e2 <iis3dwb_read_reg>
 80052a2:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d121      	bne.n	80052ee <iis3dwb_xl_hp_path_on_out_set+0xa6>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	7b3b      	ldrb	r3, [r7, #12]
 80052b6:	f362 0382 	bfi	r3, r2, #2, #1
 80052ba:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	7b3b      	ldrb	r3, [r7, #12]
 80052c8:	f362 1304 	bfi	r3, r2, #4, #1
 80052cc:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	7b3b      	ldrb	r3, [r7, #12]
 80052d8:	f362 1347 	bfi	r3, r2, #5, #3
 80052dc:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 80052de:	f107 020c 	add.w	r2, r7, #12
 80052e2:	2301      	movs	r3, #1
 80052e4:	2117      	movs	r1, #23
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff ff13 	bl	8005112 <iis3dwb_write_reg>
 80052ec:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80052ee:	697b      	ldr	r3, [r7, #20]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8005304:	f107 0208 	add.w	r2, r7, #8
 8005308:	2301      	movs	r3, #1
 800530a:	2113      	movs	r1, #19
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fee8 	bl	80050e2 <iis3dwb_read_reg>
 8005312:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10f      	bne.n	800533a <iis3dwb_i2c_interface_set+0x42>
    ctrl4_c.i2c_disable= (uint8_t)val;
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	b2da      	uxtb	r2, r3
 8005322:	7a3b      	ldrb	r3, [r7, #8]
 8005324:	f362 0382 	bfi	r3, r2, #2, #1
 8005328:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800532a:	f107 0208 	add.w	r2, r7, #8
 800532e:	2301      	movs	r3, #1
 8005330:	2113      	movs	r1, #19
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff feed 	bl	8005112 <iis3dwb_write_reg>
 8005338:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800533a:	68fb      	ldr	r3, [r7, #12]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
 800534e:	683a      	ldr	r2, [r7, #0]
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
 8005350:	2301      	movs	r3, #1
 8005352:	210d      	movs	r1, #13
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fedc 	bl	8005112 <iis3dwb_write_reg>
 800535a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d107      	bne.n	8005372 <iis3dwb_pin_int1_route_set+0x2e>
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	1c5a      	adds	r2, r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
 8005366:	2301      	movs	r3, #1
 8005368:	215e      	movs	r1, #94	; 0x5e
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff fed1 	bl	8005112 <iis3dwb_write_reg>
 8005370:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005372:	68fb      	ldr	r3, [r7, #12]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8005388:	f107 020c 	add.w	r2, r7, #12
 800538c:	2301      	movs	r3, #1
 800538e:	2108      	movs	r1, #8
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fea6 	bl	80050e2 <iis3dwb_read_reg>
 8005396:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <iis3dwb_fifo_watermark_set+0x38>
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 800539e:	887b      	ldrh	r3, [r7, #2]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 80053a4:	f107 0210 	add.w	r2, r7, #16
 80053a8:	2301      	movs	r3, #1
 80053aa:	2107      	movs	r1, #7
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff feb0 	bl	8005112 <iis3dwb_write_reg>
 80053b2:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d111      	bne.n	80053de <iis3dwb_fifo_watermark_set+0x62>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 80053ba:	887b      	ldrh	r3, [r7, #2]
 80053bc:	0a1b      	lsrs	r3, r3, #8
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	7b3b      	ldrb	r3, [r7, #12]
 80053c8:	f362 0300 	bfi	r3, r2, #0, #1
 80053cc:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 80053ce:	f107 020c 	add.w	r2, r7, #12
 80053d2:	2301      	movs	r3, #1
 80053d4:	2108      	movs	r1, #8
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fe9b 	bl	8005112 <iis3dwb_write_reg>
 80053dc:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
 80053de:	697b      	ldr	r3, [r7, #20]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 80053f4:	f107 0208 	add.w	r2, r7, #8
 80053f8:	2301      	movs	r3, #1
 80053fa:	2109      	movs	r1, #9
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff fe70 	bl	80050e2 <iis3dwb_read_reg>
 8005402:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10f      	bne.n	800542a <iis3dwb_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	b2da      	uxtb	r2, r3
 8005412:	7a3b      	ldrb	r3, [r7, #8]
 8005414:	f362 0303 	bfi	r3, r2, #0, #4
 8005418:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 800541a:	f107 0208 	add.w	r2, r7, #8
 800541e:	2301      	movs	r3, #1
 8005420:	2109      	movs	r1, #9
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fe75 	bl	8005112 <iis3dwb_write_reg>
 8005428:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 800542a:	68fb      	ldr	r3, [r7, #12]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8005440:	f107 0208 	add.w	r2, r7, #8
 8005444:	2301      	movs	r3, #1
 8005446:	210a      	movs	r1, #10
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff fe4a 	bl	80050e2 <iis3dwb_read_reg>
 800544e:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10f      	bne.n	8005476 <iis3dwb_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	b2da      	uxtb	r2, r3
 800545e:	7a3b      	ldrb	r3, [r7, #8]
 8005460:	f362 0302 	bfi	r3, r2, #0, #3
 8005464:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8005466:	f107 0208 	add.w	r2, r7, #8
 800546a:	2301      	movs	r3, #1
 800546c:	210a      	movs	r1, #10
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fe4f 	bl	8005112 <iis3dwb_write_reg>
 8005474:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	71fb      	strb	r3, [r7, #7]
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <BSP_ADC1_Initialization+0xd0>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d152      	bne.n	8005538 <BSP_ADC1_Initialization+0xb8>
   
    /**Common config */
    ADC1_Handle.Instance = ADC1;
 8005492:	4b30      	ldr	r3, [pc, #192]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 8005494:	4a30      	ldr	r2, [pc, #192]	; (8005558 <BSP_ADC1_Initialization+0xd8>)
 8005496:	601a      	str	r2, [r3, #0]
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005498:	4b2e      	ldr	r3, [pc, #184]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 800549e:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	609a      	str	r2, [r3, #8]
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80054a4:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	60da      	str	r2, [r3, #12]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 80054aa:	4b2a      	ldr	r3, [pc, #168]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	611a      	str	r2, [r3, #16]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054b2:	2204      	movs	r2, #4
 80054b4:	615a      	str	r2, [r3, #20]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 80054b6:	4b27      	ldr	r3, [pc, #156]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	761a      	strb	r2, [r3, #24]
    ADC1_Handle.Init.ContinuousConvMode = ENABLE;
 80054bc:	4b25      	ldr	r3, [pc, #148]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054be:	2201      	movs	r2, #1
 80054c0:	765a      	strb	r2, [r3, #25]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 80054c2:	4b24      	ldr	r3, [pc, #144]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	61da      	str	r2, [r3, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 80054c8:	4b22      	ldr	r3, [pc, #136]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	625a      	str	r2, [r3, #36]	; 0x24
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 80054ce:	4b21      	ldr	r3, [pc, #132]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2020 	strb.w	r2, [r3, #32]
    ADC1_Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80054d6:	4b1f      	ldr	r3, [pc, #124]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054d8:	2200      	movs	r2, #0
 80054da:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80054dc:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054de:	2200      	movs	r2, #0
 80054e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 80054e2:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80054ea:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Oversampling enabled */
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 80054f2:	4b18      	ldr	r3, [pc, #96]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    
    ADC1_Handle.Init.Oversampling.RightBitShift         = ADC_RIGHTBITSHIFT_NONE;         /* Right shift of the oversampled summation */
 80054fa:	4b16      	ldr	r3, [pc, #88]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 8005500:	4b14      	ldr	r3, [pc, #80]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 8005502:	2200      	movs	r2, #0
 8005504:	645a      	str	r2, [r3, #68]	; 0x44
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 8005506:	4b13      	ldr	r3, [pc, #76]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 8005508:	2201      	movs	r2, #1
 800550a:	649a      	str	r2, [r3, #72]	; 0x48
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 800550e:	2204      	movs	r2, #4
 8005510:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8005512:	4810      	ldr	r0, [pc, #64]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 8005514:	f000 ffc6 	bl	80064a4 <HAL_ADC_Init>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <BSP_ADC1_Initialization+0xa4>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800551e:	f06f 0303 	mvn.w	r3, #3
 8005522:	e011      	b.n	8005548 <BSP_ADC1_Initialization+0xc8>
    }

    /* ### Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 8005524:	217f      	movs	r1, #127	; 0x7f
 8005526:	480b      	ldr	r0, [pc, #44]	; (8005554 <BSP_ADC1_Initialization+0xd4>)
 8005528:	f001 fcf0 	bl	8006f0c <HAL_ADCEx_Calibration_Start>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <BSP_ADC1_Initialization+0xb8>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8005532:	f06f 0303 	mvn.w	r3, #3
 8005536:	e007      	b.n	8005548 <BSP_ADC1_Initialization+0xc8>
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <BSP_ADC1_Initialization+0xd0>)
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	4313      	orrs	r3, r2
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4b03      	ldr	r3, [pc, #12]	; (8005550 <BSP_ADC1_Initialization+0xd0>)
 8005544:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	200008d8 	.word	0x200008d8
 8005554:	20018e1c 	.word	0x20018e1c
 8005558:	50040000 	.word	0x50040000

0800555c <HAL_ADC_MspInit>:
* @brief  Initialize the ADC MSP.
* @param  hDfsdmFilter ADC handle
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8005564:	4b0d      	ldr	r3, [pc, #52]	; (800559c <HAL_ADC_MspInit+0x40>)
 8005566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005568:	4a0c      	ldr	r2, [pc, #48]	; (800559c <HAL_ADC_MspInit+0x40>)
 800556a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800556e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_ADC_MspInit+0x40>)
 8005572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 800557c:	4b07      	ldr	r3, [pc, #28]	; (800559c <HAL_ADC_MspInit+0x40>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005582:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005586:	4a05      	ldr	r2, [pc, #20]	; (800559c <HAL_ADC_MspInit+0x40>)
 8005588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800558c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40021000 	.word	0x40021000

080055a0 <BSP_PB_PWR_Init>:
* @brief  Initialize the Power button PWR.
* @param  None
* @retval None
*/
void BSP_PB_PWR_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 80055a6:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <BSP_PB_PWR_Init+0x54>)
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <BSP_PB_PWR_Init+0x54>)
 80055ac:	f043 0308 	orr.w	r3, r3, #8
 80055b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <BSP_PB_PWR_Init+0x54>)
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
  
  /* Configure Button pin as input with External interrupt */
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 80055be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80055c4:	2302      	movs	r3, #2
 80055c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80055c8:	2302      	movs	r3, #2
 80055ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <BSP_PB_PWR_Init+0x58>)
 80055ce:	60bb      	str	r3, [r7, #8]
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	4809      	ldr	r0, [pc, #36]	; (80055fc <BSP_PB_PWR_Init+0x5c>)
 80055d6:	f002 fe27 	bl	8008228 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 80055da:	2200      	movs	r2, #0
 80055dc:	210f      	movs	r1, #15
 80055de:	2028      	movs	r0, #40	; 0x28
 80055e0:	f002 fb6b 	bl	8007cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 80055e4:	2028      	movs	r0, #40	; 0x28
 80055e6:	f002 fb84 	bl	8007cf2 <HAL_NVIC_EnableIRQ>
  
}
 80055ea:	bf00      	nop
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000
 80055f8:	10110000 	.word	0x10110000
 80055fc:	48000c00 	.word	0x48000c00

08005600 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	460a      	mov	r2, r1
 800560a:	71fb      	strb	r3, [r7, #7]
 800560c:	4613      	mov	r3, r2
 800560e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005610:	4b21      	ldr	r3, [pc, #132]	; (8005698 <BSP_PB_Init+0x98>)
 8005612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005614:	4a20      	ldr	r2, [pc, #128]	; (8005698 <BSP_PB_Init+0x98>)
 8005616:	f043 0310 	orr.w	r3, r3, #16
 800561a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800561c:	4b1e      	ldr	r3, [pc, #120]	; (8005698 <BSP_PB_Init+0x98>)
 800561e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005628:	79bb      	ldrb	r3, [r7, #6]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d112      	bne.n	8005654 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800562e:	2301      	movs	r3, #1
 8005630:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005636:	2302      	movs	r3, #2
 8005638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800563a:	2302      	movs	r3, #2
 800563c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	4a16      	ldr	r2, [pc, #88]	; (800569c <BSP_PB_Init+0x9c>)
 8005642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005646:	f107 020c 	add.w	r2, r7, #12
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f002 fdeb 	bl	8008228 <HAL_GPIO_Init>
 8005652:	e01b      	b.n	800568c <BSP_PB_Init+0x8c>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005654:	2301      	movs	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800565c:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <BSP_PB_Init+0xa0>)
 800565e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	4a0e      	ldr	r2, [pc, #56]	; (800569c <BSP_PB_Init+0x9c>)
 8005664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005668:	f107 020c 	add.w	r2, r7, #12
 800566c:	4611      	mov	r1, r2
 800566e:	4618      	mov	r0, r3
 8005670:	f002 fdda 	bl	8008228 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005674:	2306      	movs	r3, #6
 8005676:	b25b      	sxtb	r3, r3
 8005678:	2200      	movs	r2, #0
 800567a:	210f      	movs	r1, #15
 800567c:	4618      	mov	r0, r3
 800567e:	f002 fb1c 	bl	8007cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005682:	2306      	movs	r3, #6
 8005684:	b25b      	sxtb	r3, r3
 8005686:	4618      	mov	r0, r3
 8005688:	f002 fb33 	bl	8007cf2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;  
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000
 800569c:	2000003c 	.word	0x2000003c
 80056a0:	10210000 	.word	0x10210000

080056a4 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	; 0x28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10c      	bne.n	80056ce <BSP_LED_Init+0x2a>
 80056b4:	4b19      	ldr	r3, [pc, #100]	; (800571c <BSP_LED_Init+0x78>)
 80056b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b8:	4a18      	ldr	r2, [pc, #96]	; (800571c <BSP_LED_Init+0x78>)
 80056ba:	f043 0310 	orr.w	r3, r3, #16
 80056be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056c0:	4b16      	ldr	r3, [pc, #88]	; (800571c <BSP_LED_Init+0x78>)
 80056c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	e00b      	b.n	80056e6 <BSP_LED_Init+0x42>
 80056ce:	4b13      	ldr	r3, [pc, #76]	; (800571c <BSP_LED_Init+0x78>)
 80056d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d2:	4a12      	ldr	r2, [pc, #72]	; (800571c <BSP_LED_Init+0x78>)
 80056d4:	f043 0308 	orr.w	r3, r3, #8
 80056d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <BSP_LED_Init+0x78>)
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	4a0d      	ldr	r2, [pc, #52]	; (8005720 <BSP_LED_Init+0x7c>)
 80056ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056f0:	2301      	movs	r3, #1
 80056f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80056f8:	2302      	movs	r3, #2
 80056fa:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	4a09      	ldr	r2, [pc, #36]	; (8005724 <BSP_LED_Init+0x80>)
 8005700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005704:	f107 0214 	add.w	r2, r7, #20
 8005708:	4611      	mov	r1, r2
 800570a:	4618      	mov	r0, r3
 800570c:	f002 fd8c 	bl	8008228 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3728      	adds	r7, #40	; 0x28
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40021000 	.word	0x40021000
 8005720:	08021a98 	.word	0x08021a98
 8005724:	20000040 	.word	0x20000040

08005728 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	4a07      	ldr	r2, [pc, #28]	; (8005754 <BSP_LED_On+0x2c>)
 8005736:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	4a06      	ldr	r2, [pc, #24]	; (8005758 <BSP_LED_On+0x30>)
 800573e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005742:	2201      	movs	r2, #1
 8005744:	4619      	mov	r1, r3
 8005746:	f002 ff19 	bl	800857c <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000040 	.word	0x20000040
 8005758:	08021a98 	.word	0x08021a98

0800575c <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	4a07      	ldr	r2, [pc, #28]	; (8005788 <BSP_LED_Off+0x2c>)
 800576a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	4a06      	ldr	r2, [pc, #24]	; (800578c <BSP_LED_Off+0x30>)
 8005772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005776:	2200      	movs	r2, #0
 8005778:	4619      	mov	r1, r3
 800577a:	f002 feff 	bl	800857c <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000040 	.word	0x20000040
 800578c:	08021a98 	.word	0x08021a98

08005790 <BSP_BC_Init>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BSP_BC_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  BC_InitCommon();
 8005794:	f000 f908 	bl	80059a8 <BC_InitCommon>
  /* Init the related GPIOs */
  BC_IO_Init();
 8005798:	f000 f90c 	bl	80059b4 <BC_IO_Init>
}
 800579c:	bf00      	nop
 800579e:	bd80      	pop	{r7, pc}

080057a0 <BSP_BC_CmdSend>:
  * @param stbc02_SwCmd The command to be sent
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tk = STBC02_GetTick();
 80057aa:	f000 fd3b 	bl	8006224 <HAL_GetTick>
 80057ae:	60f8      	str	r0, [r7, #12]
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 80057b0:	4a0f      	ldr	r2, [pc, #60]	; (80057f0 <BSP_BC_CmdSend+0x50>)
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	7013      	strb	r3, [r2, #0]
  stbc02_SwState = start;
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <BSP_BC_CmdSend+0x54>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 80057bc:	480e      	ldr	r0, [pc, #56]	; (80057f8 <BSP_BC_CmdSend+0x58>)
 80057be:	f008 fc6b 	bl	800e098 <HAL_TIM_Base_Start_IT>
    
  while(stbc02_SwState != idle)
 80057c2:	e008      	b.n	80057d6 <BSP_BC_CmdSend+0x36>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 80057c4:	f000 fd2e 	bl	8006224 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b0a      	cmp	r3, #10
 80057d0:	d901      	bls.n	80057d6 <BSP_BC_CmdSend+0x36>
    {
      return 1;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e007      	b.n	80057e6 <BSP_BC_CmdSend+0x46>
  while(stbc02_SwState != idle)
 80057d6:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <BSP_BC_CmdSend+0x54>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f2      	bne.n	80057c4 <BSP_BC_CmdSend+0x24>
    }
  }
    /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 80057de:	4806      	ldr	r0, [pc, #24]	; (80057f8 <BSP_BC_CmdSend+0x58>)
 80057e0:	f008 fc84 	bl	800e0ec <HAL_TIM_Base_Stop_IT>
  
  return 0;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200008e0 	.word	0x200008e0
 80057f4:	200008e1 	.word	0x200008e1
 80057f8:	20018eb0 	.word	0x20018eb0

080057fc <BSP_BC_ChgPinHasToggled>:
  * @brief Call the function for measuring the toggling frequency of the charging pin of the STBC02
  * @note Must be called when the charging pin of the STBC02 has toggled
  * @retval None
  */
void BSP_BC_ChgPinHasToggled(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  BC_ChgPinFreqGet();
 8005800:	f000 f9c6 	bl	8005b90 <BC_ChgPinFreqGet>
  stbc02_ChgPinToggledTime = STBC02_GetTick();
 8005804:	f000 fd0e 	bl	8006224 <HAL_GetTick>
 8005808:	4603      	mov	r3, r0
 800580a:	4a02      	ldr	r2, [pc, #8]	; (8005814 <BSP_BC_ChgPinHasToggled+0x18>)
 800580c:	6013      	str	r3, [r2, #0]
}
 800580e:	bf00      	nop
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	200008e4 	.word	0x200008e4

08005818 <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
   /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 800581c:	2002      	movs	r0, #2
 800581e:	f7ff fe2f 	bl	8005480 <BSP_ADC1_Initialization>
  /* Configure the Injection Channel for Voltage ADC convertion */
  (void)Channel_ADC1_Init();
 8005822:	f000 faab 	bl	8005d7c <Channel_ADC1_Init>
  return 0;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	bd80      	pop	{r7, pc}

0800582c <BSP_BC_GetVoltage>:
* @param  mV pointer to destination variable
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_GetVoltage(uint32_t *mV)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t Voltage;
  
  if (HAL_ADCEx_InjectedStart(&ADC1_Handle) != HAL_OK)
 8005834:	4820      	ldr	r0, [pc, #128]	; (80058b8 <BSP_BC_GetVoltage+0x8c>)
 8005836:	f001 fbc9 	bl	8006fcc <HAL_ADCEx_InjectedStart>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <BSP_BC_GetVoltage+0x1a>
  {
    /* Start Conversation Error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8005840:	f06f 0304 	mvn.w	r3, #4
 8005844:	e034      	b.n	80058b0 <BSP_BC_GetVoltage+0x84>
  }
  
  if (HAL_ADCEx_InjectedPollForConversion(&ADC1_Handle, 10) != HAL_OK)
 8005846:	210a      	movs	r1, #10
 8005848:	481b      	ldr	r0, [pc, #108]	; (80058b8 <BSP_BC_GetVoltage+0x8c>)
 800584a:	f001 fc31 	bl	80070b0 <HAL_ADCEx_InjectedPollForConversion>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <BSP_BC_GetVoltage+0x2e>
  {
    /* End Of Conversion flag not set on time */
    return BSP_ERROR_CLOCK_FAILURE;
 8005854:	f06f 0308 	mvn.w	r3, #8
 8005858:	e02a      	b.n	80058b0 <BSP_BC_GetVoltage+0x84>
  }
  
  /* Check if the continuous conversion of regular channel is finished */
  if ((HAL_ADC_GetState(&ADC1_Handle) & HAL_ADC_STATE_INJ_EOC) == HAL_ADC_STATE_INJ_EOC)
 800585a:	4817      	ldr	r0, [pc, #92]	; (80058b8 <BSP_BC_GetVoltage+0x8c>)
 800585c:	f001 f866 	bl	800692c <HAL_ADC_GetState>
 8005860:	4603      	mov	r3, r0
 8005862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586a:	d106      	bne.n	800587a <BSP_BC_GetVoltage+0x4e>
  {
    /*##-5- Get the converted value of regular channel  ########################*/
    uhADCxConvertedValue = HAL_ADCEx_InjectedGetValue(&ADC1_Handle,ADC_INJECTED_RANK_1);
 800586c:	2108      	movs	r1, #8
 800586e:	4812      	ldr	r0, [pc, #72]	; (80058b8 <BSP_BC_GetVoltage+0x8c>)
 8005870:	f001 fcac 	bl	80071cc <HAL_ADCEx_InjectedGetValue>
 8005874:	4603      	mov	r3, r0
 8005876:	4a11      	ldr	r2, [pc, #68]	; (80058bc <BSP_BC_GetVoltage+0x90>)
 8005878:	6013      	str	r3, [r2, #0]
  }
  
  Voltage = (2700U * (uint32_t)uhADCxConvertedValue) / (4095U);  // [0-2.7V]
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <BSP_BC_GetVoltage+0x90>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f640 228c 	movw	r2, #2700	; 0xa8c
 8005882:	fb02 f203 	mul.w	r2, r2, r3
 8005886:	4b0e      	ldr	r3, [pc, #56]	; (80058c0 <BSP_BC_GetVoltage+0x94>)
 8005888:	fba3 1302 	umull	r1, r3, r3, r2
 800588c:	1ad2      	subs	r2, r2, r3
 800588e:	0852      	lsrs	r2, r2, #1
 8005890:	4413      	add	r3, r2
 8005892:	0adb      	lsrs	r3, r3, #11
 8005894:	60fb      	str	r3, [r7, #12]
  Voltage = ((56U+100U)*Voltage)/100U;   // [0-4.2V]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	229c      	movs	r2, #156	; 0x9c
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <BSP_BC_GetVoltage+0x98>)
 80058a0:	fba2 2303 	umull	r2, r3, r2, r3
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	60fb      	str	r3, [r7, #12]
  
  *mV= Voltage;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	601a      	str	r2, [r3, #0]
  return BSP_ERROR_NONE;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20018e1c 	.word	0x20018e1c
 80058bc:	200008dc 	.word	0x200008dc
 80058c0:	00100101 	.word	0x00100101
 80058c4:	51eb851f 	.word	0x51eb851f

080058c8 <BSP_BC_GetVoltageAndLevel>:
* @param  uint32_t *Volt battery Voltage Value
* @param  uint32_t *BatteryLevel Battery % Level
* @retval BSP status
*/
int32_t BSP_BC_GetVoltageAndLevel(uint32_t *mV, uint32_t *BatteryLevel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t Voltage = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60bb      	str	r3, [r7, #8]
  static int32_t VoltageWindowInit=0;
  static uint32_t WindowVoltage[WINDOW_VOLTAGE_DIM];
  static int32_t WindowPostion =0;
  
  (void)BSP_BC_GetVoltage(&Voltage);
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff ffa6 	bl	800582c <BSP_BC_GetVoltage>
  
  /* We Filter the Voltage for understanding the Battery % Level */
  
  /* Insert the new Value */
  WindowVoltage[WindowPostion]= Voltage;
 80058e0:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <BSP_BC_GetVoltageAndLevel+0xd0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	492d      	ldr	r1, [pc, #180]	; (800599c <BSP_BC_GetVoltageAndLevel+0xd4>)
 80058e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  WindowPostion++;  
 80058ec:	4b2a      	ldr	r3, [pc, #168]	; (8005998 <BSP_BC_GetVoltageAndLevel+0xd0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	4a29      	ldr	r2, [pc, #164]	; (8005998 <BSP_BC_GetVoltageAndLevel+0xd0>)
 80058f4:	6013      	str	r3, [r2, #0]
  
  /* Control if we have reached the end */    
  if(WindowPostion==WINDOW_VOLTAGE_DIM)
 80058f6:	4b28      	ldr	r3, [pc, #160]	; (8005998 <BSP_BC_GetVoltageAndLevel+0xd0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b10      	cmp	r3, #16
 80058fc:	d109      	bne.n	8005912 <BSP_BC_GetVoltageAndLevel+0x4a>
  {
    if(VoltageWindowInit==0)
 80058fe:	4b28      	ldr	r3, [pc, #160]	; (80059a0 <BSP_BC_GetVoltageAndLevel+0xd8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <BSP_BC_GetVoltageAndLevel+0x44>
    {
      VoltageWindowInit =1;
 8005906:	4b26      	ldr	r3, [pc, #152]	; (80059a0 <BSP_BC_GetVoltageAndLevel+0xd8>)
 8005908:	2201      	movs	r2, #1
 800590a:	601a      	str	r2, [r3, #0]
    }
    WindowPostion     =0;
 800590c:	4b22      	ldr	r3, [pc, #136]	; (8005998 <BSP_BC_GetVoltageAndLevel+0xd0>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
  }
  
  /* Make the mean of latest voltage values */
  if(VoltageWindowInit == 1)
 8005912:	4b23      	ldr	r3, [pc, #140]	; (80059a0 <BSP_BC_GetVoltageAndLevel+0xd8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d114      	bne.n	8005944 <BSP_BC_GetVoltageAndLevel+0x7c>
  {    
    int32_t Counter;   
    Voltage =0;
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	e009      	b.n	8005938 <BSP_BC_GetVoltageAndLevel+0x70>
    {
      Voltage+=WindowVoltage[Counter];
 8005924:	4a1d      	ldr	r2, [pc, #116]	; (800599c <BSP_BC_GetVoltageAndLevel+0xd4>)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4413      	add	r3, r2
 8005930:	60bb      	str	r3, [r7, #8]
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b0f      	cmp	r3, #15
 800593c:	ddf2      	ble.n	8005924 <BSP_BC_GetVoltageAndLevel+0x5c>
    }
    Voltage>>=4;    
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	60bb      	str	r3, [r7, #8]
  }
  
  /* Limits check */
  if(Voltage > (uint32_t)MAX_VOLTAGE) 
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f241 0281 	movw	r2, #4225	; 0x1081
 800594a:	4293      	cmp	r3, r2
 800594c:	d902      	bls.n	8005954 <BSP_BC_GetVoltageAndLevel+0x8c>
  {
    Voltage= MAX_VOLTAGE;
 800594e:	f241 0381 	movw	r3, #4225	; 0x1081
 8005952:	60bb      	str	r3, [r7, #8]
  }   
  if(Voltage < (uint32_t)MIN_VOLTAGE) 
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f640 42b1 	movw	r2, #3249	; 0xcb1
 800595a:	4293      	cmp	r3, r2
 800595c:	d802      	bhi.n	8005964 <BSP_BC_GetVoltageAndLevel+0x9c>
  {
    Voltage= MIN_VOLTAGE;
 800595e:	f640 43b2 	movw	r3, #3250	; 0xcb2
 8005962:	60bb      	str	r3, [r7, #8]
  }
  
  *BatteryLevel= (((Voltage - (uint32_t)MIN_VOLTAGE) * 100U)/(uint32_t)(MAX_VOLTAGE - MIN_VOLTAGE));
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2264      	movs	r2, #100	; 0x64
 8005968:	fb02 f303 	mul.w	r3, r2, r3
 800596c:	f5a3 239e 	sub.w	r3, r3, #323584	; 0x4f000
 8005970:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8005974:	4a0b      	ldr	r2, [pc, #44]	; (80059a4 <BSP_BC_GetVoltageAndLevel+0xdc>)
 8005976:	fba2 1203 	umull	r1, r2, r2, r3
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	4413      	add	r3, r2
 8005980:	0a5a      	lsrs	r2, r3, #9
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	601a      	str	r2, [r3, #0]
  *mV = Voltage;
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	601a      	str	r2, [r3, #0]
  
  return BSP_ERROR_NONE;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	2000093c 	.word	0x2000093c
 800599c:	20000940 	.word	0x20000940
 80059a0:	20000980 	.word	0x20000980
 80059a4:	0cdd9aa7 	.word	0x0cdd9aa7

080059a8 <BC_InitCommon>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BC_InitCommon(void)
{  
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* Init the time base */
  BC_TIMx_Init();
 80059ac:	f000 f938 	bl	8005c20 <BC_TIMx_Init>
}
 80059b0:	bf00      	nop
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <BC_IO_Init>:
/**
  * @brief  Initializes the GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_Init(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  BC_IO_SW_SEL_Init();
 80059b8:	f000 f802 	bl	80059c0 <BC_IO_SW_SEL_Init>
}
 80059bc:	bf00      	nop
 80059be:	bd80      	pop	{r7, pc}

080059c0 <BC_IO_SW_SEL_Init>:
/**
  * @brief  Initializes the SW_SEL GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_SW_SEL_Init(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 80059c6:	4b11      	ldr	r3, [pc, #68]	; (8005a0c <BC_IO_SW_SEL_Init+0x4c>)
 80059c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ca:	4a10      	ldr	r2, [pc, #64]	; (8005a0c <BC_IO_SW_SEL_Init+0x4c>)
 80059cc:	f043 0320 	orr.w	r3, r3, #32
 80059d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059d2:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <BC_IO_SW_SEL_Init+0x4c>)
 80059d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 80059de:	2340      	movs	r3, #64	; 0x40
 80059e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059e2:	2301      	movs	r3, #1
 80059e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059ea:	2302      	movs	r3, #2
 80059ec:	613b      	str	r3, [r7, #16]

  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 80059ee:	2200      	movs	r2, #0
 80059f0:	2140      	movs	r1, #64	; 0x40
 80059f2:	4807      	ldr	r0, [pc, #28]	; (8005a10 <BC_IO_SW_SEL_Init+0x50>)
 80059f4:	f002 fdc2 	bl	800857c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 80059f8:	1d3b      	adds	r3, r7, #4
 80059fa:	4619      	mov	r1, r3
 80059fc:	4804      	ldr	r0, [pc, #16]	; (8005a10 <BC_IO_SW_SEL_Init+0x50>)
 80059fe:	f002 fc13 	bl	8008228 <HAL_GPIO_Init>
}
 8005a02:	bf00      	nop
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	48001400 	.word	0x48001400

08005a14 <BC_CmdMng>:
  * @brief Single wire command manager for the STBC02
  * @note This function have to be called every 5 us
  * @retval None
  */
void BC_CmdMng(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  static uint16_t TIMx_Pulse = 0;                           //! Actual timer pulse number
  static uint16_t TIMx_PulseTCS = 0;                        //! Timer pulse number to change state
  static stbc02_SwState_TypeDef stbc02_sw_state_prv = idle; //! Previous state
  static uint8_t CmdPulse = 0;                              //! Cmd pulse number

  TIMx_Pulse++;
 8005a18:	4b56      	ldr	r3, [pc, #344]	; (8005b74 <BC_CmdMng+0x160>)
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	4b54      	ldr	r3, [pc, #336]	; (8005b74 <BC_CmdMng+0x160>)
 8005a22:	801a      	strh	r2, [r3, #0]
  switch (stbc02_SwState)
 8005a24:	4b54      	ldr	r3, [pc, #336]	; (8005b78 <BC_CmdMng+0x164>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b06      	cmp	r3, #6
 8005a2a:	f200 809e 	bhi.w	8005b6a <BC_CmdMng+0x156>
 8005a2e:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <BC_CmdMng+0x20>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005b6b 	.word	0x08005b6b
 8005a38:	08005a51 	.word	0x08005a51
 8005a3c:	08005a75 	.word	0x08005a75
 8005a40:	08005a99 	.word	0x08005a99
 8005a44:	08005abd 	.word	0x08005abd
 8005a48:	08005ae1 	.word	0x08005ae1
 8005a4c:	08005b05 	.word	0x08005b05
  {
  case idle:
    break;
  case start:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005a50:	2140      	movs	r1, #64	; 0x40
 8005a52:	484a      	ldr	r0, [pc, #296]	; (8005b7c <BC_CmdMng+0x168>)
 8005a54:	f002 fdaa 	bl	80085ac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005a58:	4b46      	ldr	r3, [pc, #280]	; (8005b74 <BC_CmdMng+0x160>)
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	3346      	adds	r3, #70	; 0x46
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	4b47      	ldr	r3, [pc, #284]	; (8005b80 <BC_CmdMng+0x16c>)
 8005a62:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005a64:	4b44      	ldr	r3, [pc, #272]	; (8005b78 <BC_CmdMng+0x164>)
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	4b46      	ldr	r3, [pc, #280]	; (8005b84 <BC_CmdMng+0x170>)
 8005a6a:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005a6c:	4b42      	ldr	r3, [pc, #264]	; (8005b78 <BC_CmdMng+0x164>)
 8005a6e:	2206      	movs	r2, #6
 8005a70:	701a      	strb	r2, [r3, #0]
    break;
 8005a72:	e07d      	b.n	8005b70 <BC_CmdMng+0x15c>
  case pulse_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005a74:	2140      	movs	r1, #64	; 0x40
 8005a76:	4841      	ldr	r0, [pc, #260]	; (8005b7c <BC_CmdMng+0x168>)
 8005a78:	f002 fd98 	bl	80085ac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005a7c:	4b3d      	ldr	r3, [pc, #244]	; (8005b74 <BC_CmdMng+0x160>)
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	3314      	adds	r3, #20
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	4b3e      	ldr	r3, [pc, #248]	; (8005b80 <BC_CmdMng+0x16c>)
 8005a86:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005a88:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <BC_CmdMng+0x164>)
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	4b3d      	ldr	r3, [pc, #244]	; (8005b84 <BC_CmdMng+0x170>)
 8005a8e:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005a90:	4b39      	ldr	r3, [pc, #228]	; (8005b78 <BC_CmdMng+0x164>)
 8005a92:	2206      	movs	r2, #6
 8005a94:	701a      	strb	r2, [r3, #0]
    break;
 8005a96:	e06b      	b.n	8005b70 <BC_CmdMng+0x15c>
  case pulse_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005a98:	2140      	movs	r1, #64	; 0x40
 8005a9a:	4838      	ldr	r0, [pc, #224]	; (8005b7c <BC_CmdMng+0x168>)
 8005a9c:	f002 fd86 	bl	80085ac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005aa0:	4b34      	ldr	r3, [pc, #208]	; (8005b74 <BC_CmdMng+0x160>)
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	4b35      	ldr	r3, [pc, #212]	; (8005b80 <BC_CmdMng+0x16c>)
 8005aaa:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005aac:	4b32      	ldr	r3, [pc, #200]	; (8005b78 <BC_CmdMng+0x164>)
 8005aae:	781a      	ldrb	r2, [r3, #0]
 8005ab0:	4b34      	ldr	r3, [pc, #208]	; (8005b84 <BC_CmdMng+0x170>)
 8005ab2:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005ab4:	4b30      	ldr	r3, [pc, #192]	; (8005b78 <BC_CmdMng+0x164>)
 8005ab6:	2206      	movs	r2, #6
 8005ab8:	701a      	strb	r2, [r3, #0]
    break;
 8005aba:	e059      	b.n	8005b70 <BC_CmdMng+0x15c>
  case stop_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005abc:	2140      	movs	r1, #64	; 0x40
 8005abe:	482f      	ldr	r0, [pc, #188]	; (8005b7c <BC_CmdMng+0x168>)
 8005ac0:	f002 fd74 	bl	80085ac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005ac4:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <BC_CmdMng+0x160>)
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	3314      	adds	r3, #20
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	4b2c      	ldr	r3, [pc, #176]	; (8005b80 <BC_CmdMng+0x16c>)
 8005ace:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005ad0:	4b29      	ldr	r3, [pc, #164]	; (8005b78 <BC_CmdMng+0x164>)
 8005ad2:	781a      	ldrb	r2, [r3, #0]
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	; (8005b84 <BC_CmdMng+0x170>)
 8005ad6:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005ad8:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <BC_CmdMng+0x164>)
 8005ada:	2206      	movs	r2, #6
 8005adc:	701a      	strb	r2, [r3, #0]
    break;
 8005ade:	e047      	b.n	8005b70 <BC_CmdMng+0x15c>
  case stop_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005ae0:	2140      	movs	r1, #64	; 0x40
 8005ae2:	4826      	ldr	r0, [pc, #152]	; (8005b7c <BC_CmdMng+0x168>)
 8005ae4:	f002 fd62 	bl	80085ac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005ae8:	4b22      	ldr	r3, [pc, #136]	; (8005b74 <BC_CmdMng+0x160>)
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	3364      	adds	r3, #100	; 0x64
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	4b23      	ldr	r3, [pc, #140]	; (8005b80 <BC_CmdMng+0x16c>)
 8005af2:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005af4:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <BC_CmdMng+0x164>)
 8005af6:	781a      	ldrb	r2, [r3, #0]
 8005af8:	4b22      	ldr	r3, [pc, #136]	; (8005b84 <BC_CmdMng+0x170>)
 8005afa:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005afc:	4b1e      	ldr	r3, [pc, #120]	; (8005b78 <BC_CmdMng+0x164>)
 8005afe:	2206      	movs	r2, #6
 8005b00:	701a      	strb	r2, [r3, #0]
    break;
 8005b02:	e035      	b.n	8005b70 <BC_CmdMng+0x15c>
  case wait:
    if ( TIMx_Pulse > TIMx_PulseTCS )
 8005b04:	4b1b      	ldr	r3, [pc, #108]	; (8005b74 <BC_CmdMng+0x160>)
 8005b06:	881a      	ldrh	r2, [r3, #0]
 8005b08:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <BC_CmdMng+0x16c>)
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d92e      	bls.n	8005b6e <BC_CmdMng+0x15a>
    {
      if ( stbc02_sw_state_prv == stop_h )
 8005b10:	4b1c      	ldr	r3, [pc, #112]	; (8005b84 <BC_CmdMng+0x170>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b05      	cmp	r3, #5
 8005b16:	d10b      	bne.n	8005b30 <BC_CmdMng+0x11c>
      {
        CmdPulse = 0;
 8005b18:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <BC_CmdMng+0x174>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	701a      	strb	r2, [r3, #0]
        stbc02_SwState = idle;
 8005b1e:	4b16      	ldr	r3, [pc, #88]	; (8005b78 <BC_CmdMng+0x164>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005b24:	2200      	movs	r2, #0
 8005b26:	2140      	movs	r1, #64	; 0x40
 8005b28:	4814      	ldr	r0, [pc, #80]	; (8005b7c <BC_CmdMng+0x168>)
 8005b2a:	f002 fd27 	bl	800857c <HAL_GPIO_WritePin>
        }
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
        __NOP();
      }
    }
    break;
 8005b2e:	e01e      	b.n	8005b6e <BC_CmdMng+0x15a>
        if ( stbc02_sw_state_prv == pulse_h )
 8005b30:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <BC_CmdMng+0x170>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d110      	bne.n	8005b5a <BC_CmdMng+0x146>
          CmdPulse++;
 8005b38:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <BC_CmdMng+0x174>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <BC_CmdMng+0x174>)
 8005b42:	701a      	strb	r2, [r3, #0]
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005b44:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <BC_CmdMng+0x174>)
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <BC_CmdMng+0x178>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d203      	bcs.n	8005b58 <BC_CmdMng+0x144>
            stbc02_sw_state_prv = start;
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <BC_CmdMng+0x170>)
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	e000      	b.n	8005b5a <BC_CmdMng+0x146>
            __NOP();
 8005b58:	bf00      	nop
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <BC_CmdMng+0x170>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <BC_CmdMng+0x164>)
 8005b64:	701a      	strb	r2, [r3, #0]
        __NOP();
 8005b66:	bf00      	nop
    break;
 8005b68:	e001      	b.n	8005b6e <BC_CmdMng+0x15a>
  default:
    break;
 8005b6a:	bf00      	nop
 8005b6c:	e000      	b.n	8005b70 <BC_CmdMng+0x15c>
    break;
 8005b6e:	bf00      	nop
  }
}
 8005b70:	bf00      	nop
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000984 	.word	0x20000984
 8005b78:	200008e1 	.word	0x200008e1
 8005b7c:	48001400 	.word	0x48001400
 8005b80:	20000986 	.word	0x20000986
 8005b84:	20000988 	.word	0x20000988
 8005b88:	20000989 	.word	0x20000989
 8005b8c:	200008e0 	.word	0x200008e0

08005b90 <BC_ChgPinFreqGet>:
* @brief Measure the toggling frequency of the charging pin of the STBC02
* @note This function works with 1 ms as time base
* @retval None
*/
void BC_ChgPinFreqGet(void)
{  
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  if(uhCaptureIndex == 0U)
 8005b94:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <BC_ChgPinFreqGet+0x7c>)
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d107      	bne.n	8005bac <BC_ChgPinFreqGet+0x1c>
  {
    /* Get the 1st Input Capture value */
    uwIC2Value1 = HAL_GetTick();
 8005b9c:	f000 fb42 	bl	8006224 <HAL_GetTick>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	4a1b      	ldr	r2, [pc, #108]	; (8005c10 <BC_ChgPinFreqGet+0x80>)
 8005ba4:	6013      	str	r3, [r2, #0]
    uhCaptureIndex = 1;
 8005ba6:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <BC_ChgPinFreqGet+0x7c>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	801a      	strh	r2, [r3, #0]
  }
   if(uhCaptureIndex == 1U)
 8005bac:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <BC_ChgPinFreqGet+0x7c>)
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d128      	bne.n	8005c06 <BC_ChgPinFreqGet+0x76>
  {
    /* Get the 2nd Input Capture value */
    uwIC2Value2 = HAL_GetTick();
 8005bb4:	f000 fb36 	bl	8006224 <HAL_GetTick>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <BC_ChgPinFreqGet+0x84>)
 8005bbc:	6013      	str	r3, [r2, #0]
    
    /* Capture computation */
    if (uwIC2Value2 > uwIC2Value1)
 8005bbe:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <BC_ChgPinFreqGet+0x84>)
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <BC_ChgPinFreqGet+0x80>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d907      	bls.n	8005bda <BC_ChgPinFreqGet+0x4a>
    {
      uwDiffCapture = (uwIC2Value2 - uwIC2Value1); 
 8005bca:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <BC_ChgPinFreqGet+0x84>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <BC_ChgPinFreqGet+0x80>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	4a10      	ldr	r2, [pc, #64]	; (8005c18 <BC_ChgPinFreqGet+0x88>)
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e006      	b.n	8005be8 <BC_ChgPinFreqGet+0x58>
    }
    else
    {
      uwDiffCapture = ((0xFFFFFFFF - uwIC2Value1) + uwIC2Value2) + 1U;
 8005bda:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <BC_ChgPinFreqGet+0x84>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <BC_ChgPinFreqGet+0x80>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	4a0c      	ldr	r2, [pc, #48]	; (8005c18 <BC_ChgPinFreqGet+0x88>)
 8005be6:	6013      	str	r3, [r2, #0]
    }
    
    if (uwDiffCapture != 0U)
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <BC_ChgPinFreqGet+0x88>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00a      	beq.n	8005c06 <BC_ChgPinFreqGet+0x76>
    {
      /* Frequency computation */      
      uwFrequency = 10000U / uwDiffCapture;
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <BC_ChgPinFreqGet+0x88>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfc:	4a07      	ldr	r2, [pc, #28]	; (8005c1c <BC_ChgPinFreqGet+0x8c>)
 8005bfe:	6013      	str	r3, [r2, #0]
      uhCaptureIndex = 0U;
 8005c00:	4b02      	ldr	r3, [pc, #8]	; (8005c0c <BC_ChgPinFreqGet+0x7c>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000934 	.word	0x20000934
 8005c10:	20000928 	.word	0x20000928
 8005c14:	2000092c 	.word	0x2000092c
 8005c18:	20000930 	.word	0x20000930
 8005c1c:	20000938 	.word	0x20000938

08005c20 <BC_TIMx_Init>:
/**
  * @brief  Initializes the used timer
  * @retval None
  */
void BC_TIMx_Init(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c26:	463b      	mov	r3, r7
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	609a      	str	r2, [r3, #8]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005c30:	f004 ffd0 	bl	800abd4 <HAL_RCC_GetPCLK1Freq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <BC_TIMx_Init+0xb0>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <BC_TIMx_Init+0x26>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <BC_TIMx_Init+0x28>
 8005c46:	2302      	movs	r3, #2
 8005c48:	fb02 f303 	mul.w	r3, r2, r3
 8005c4c:	613b      	str	r3, [r7, #16]
  uint32_t prescaler = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]
  uint32_t period;
  
  do
  {
    prescaler++;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	3301      	adds	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fa fc77 	bl	8000554 <__aeabi_ui2d>
 8005c66:	a318      	add	r3, pc, #96	; (adr r3, 8005cc8 <BC_TIMx_Init+0xa8>)
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fcec 	bl	8000648 <__aeabi_dmul>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4610      	mov	r0, r2
 8005c76:	4619      	mov	r1, r3
 8005c78:	f7fa ffbe 	bl	8000bf8 <__aeabi_d2uiz>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	60fb      	str	r3, [r7, #12]
  } while (period > 65535U);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c86:	d2e4      	bcs.n	8005c52 <BC_TIMx_Init+0x32>

  hstbc02_UsedTim.Instance = STBC02_USED_TIM;
 8005c88:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <BC_TIMx_Init+0xb4>)
 8005c8a:	4a13      	ldr	r2, [pc, #76]	; (8005cd8 <BC_TIMx_Init+0xb8>)
 8005c8c:	601a      	str	r2, [r3, #0]
  hstbc02_UsedTim.Init.Prescaler = (prescaler-1U);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	4a10      	ldr	r2, [pc, #64]	; (8005cd4 <BC_TIMx_Init+0xb4>)
 8005c94:	6053      	str	r3, [r2, #4]
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c96:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <BC_TIMx_Init+0xb4>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	609a      	str	r2, [r3, #8]
  hstbc02_UsedTim.Init.Period = period;
 8005c9c:	4a0d      	ldr	r2, [pc, #52]	; (8005cd4 <BC_TIMx_Init+0xb4>)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	60d3      	str	r3, [r2, #12]
#if USE_TIM_AUTORELOAD_PRELOAD
  hstbc02_UsedTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
#endif //USE_TIM_AUTORELOAD_PRELOAD
  
  HAL_TIM_BC_MspInit(&hstbc02_UsedTim);    
 8005ca2:	480c      	ldr	r0, [pc, #48]	; (8005cd4 <BC_TIMx_Init+0xb4>)
 8005ca4:	f000 f81a 	bl	8005cdc <HAL_TIM_BC_MspInit>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 8005ca8:	480a      	ldr	r0, [pc, #40]	; (8005cd4 <BC_TIMx_Init+0xb4>)
 8005caa:	f008 f969 	bl	800df80 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4806      	ldr	r0, [pc, #24]	; (8005cd4 <BC_TIMx_Init+0xb4>)
 8005cbc:	f008 fc18 	bl	800e4f0 <HAL_TIMEx_MasterConfigSynchronization>
}
 8005cc0:	bf00      	nop
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	88e368f1 	.word	0x88e368f1
 8005ccc:	3ed4f8b5 	.word	0x3ed4f8b5
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	20018eb0 	.word	0x20018eb0
 8005cd8:	40001400 	.word	0x40001400

08005cdc <HAL_TIM_BC_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_BC_MspInit(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

  if(htim->Instance==STBC02_USED_TIM)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a0d      	ldr	r2, [pc, #52]	; (8005d20 <HAL_TIM_BC_MspInit+0x44>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d113      	bne.n	8005d16 <HAL_TIM_BC_MspInit+0x3a>
  {
    /* STBC02_USED_TIM clock enable */
    STBC02_USED_TIM_CLK_ENABLE();
 8005cee:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <HAL_TIM_BC_MspInit+0x48>)
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf2:	4a0c      	ldr	r2, [pc, #48]	; (8005d24 <HAL_TIM_BC_MspInit+0x48>)
 8005cf4:	f043 0320 	orr.w	r3, r3, #32
 8005cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8005cfa:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <HAL_TIM_BC_MspInit+0x48>)
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]

    /* STBC02_USED_TIM interrupt Init */
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005d06:	2200      	movs	r2, #0
 8005d08:	2103      	movs	r1, #3
 8005d0a:	2037      	movs	r0, #55	; 0x37
 8005d0c:	f001 ffd5 	bl	8007cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 8005d10:	2037      	movs	r0, #55	; 0x37
 8005d12:	f001 ffee 	bl	8007cf2 <HAL_NVIC_EnableIRQ>
  }
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40001400 	.word	0x40001400
 8005d24:	40021000 	.word	0x40021000

08005d28 <HAL_ADC_BC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param BC_AdcHandle ADC handle
  * @retval None
  */
void HAL_ADC_BC_MspInit()
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d2e:	1d3b      	adds	r3, r7, #4
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	605a      	str	r2, [r3, #4]
 8005d36:	609a      	str	r2, [r3, #8]
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	611a      	str	r2, [r3, #16]
  
  /* STBC02_USED_ADC GPIO Configuration */
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <HAL_ADC_BC_MspInit+0x4c>)
 8005d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d40:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <HAL_ADC_BC_MspInit+0x4c>)
 8005d42:	f043 0304 	orr.w	r3, r3, #4
 8005d46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d48:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <HAL_ADC_BC_MspInit+0x4c>)
 8005d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 8005d54:	2310      	movs	r3, #16
 8005d56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8005d58:	230b      	movs	r3, #11
 8005d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8005d60:	1d3b      	adds	r3, r7, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	4804      	ldr	r0, [pc, #16]	; (8005d78 <HAL_ADC_BC_MspInit+0x50>)
 8005d66:	f002 fa5f 	bl	8008228 <HAL_GPIO_Init>
  
}
 8005d6a:	bf00      	nop
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40021000 	.word	0x40021000
 8005d78:	48000800 	.word	0x48000800

08005d7c <Channel_ADC1_Init>:
  * @brief  Initializes the used ADC
  * @retval 0 in case of success
  * @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08e      	sub	sp, #56	; 0x38
 8005d80:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005d82:	463b      	mov	r3, r7
 8005d84:	2234      	movs	r2, #52	; 0x34
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f017 fa83 	bl	801d294 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 8005d8e:	481e      	ldr	r0, [pc, #120]	; (8005e08 <Channel_ADC1_Init+0x8c>)
 8005d90:	f000 fdcc 	bl	800692c <HAL_ADC_GetState>
 8005d94:	6378      	str	r0, [r7, #52]	; 0x34
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 8005d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <Channel_ADC1_Init+0x30>
  {
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8005da0:	4819      	ldr	r0, [pc, #100]	; (8005e08 <Channel_ADC1_Init+0x8c>)
 8005da2:	f000 fd68 	bl	8006876 <HAL_ADC_Stop>
    ADC_stopped=1;
 8005da6:	4b19      	ldr	r3, [pc, #100]	; (8005e0c <Channel_ADC1_Init+0x90>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
  }

    
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 8005dac:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <Channel_ADC1_Init+0x94>)
 8005dae:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8005db0:	2308      	movs	r3, #8
 8005db2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8005db4:	2307      	movs	r3, #7
 8005db6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8005db8:	237f      	movs	r3, #127	; 0x7f
 8005dba:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	773b      	strb	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	777b      	strb	r3, [r7, #29]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  
  HAL_ADC_BC_MspInit();
 8005de2:	f7ff ffa1 	bl	8005d28 <HAL_ADC_BC_MspInit>
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 8005de6:	463b      	mov	r3, r7
 8005de8:	4619      	mov	r1, r3
 8005dea:	4807      	ldr	r0, [pc, #28]	; (8005e08 <Channel_ADC1_Init+0x8c>)
 8005dec:	f001 fa58 	bl	80072a0 <HAL_ADCEx_InjectedConfigChannel>
    
  if (ADC_stopped == 1U)
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <Channel_ADC1_Init+0x90>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d102      	bne.n	8005dfe <Channel_ADC1_Init+0x82>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 8005df8:	4803      	ldr	r0, [pc, #12]	; (8005e08 <Channel_ADC1_Init+0x8c>)
 8005dfa:	f000 fcd9 	bl	80067b0 <HAL_ADC_Start>
  }
  
  return 0;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3738      	adds	r7, #56	; 0x38
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20018e1c 	.word	0x20018e1c
 8005e0c:	2000098a 	.word	0x2000098a
 8005e10:	36902000 	.word	0x36902000

08005e14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == STBC02_USED_TIM)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a04      	ldr	r2, [pc, #16]	; (8005e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d101      	bne.n	8005e2a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    BC_CmdMng();
 8005e26:	f7ff fdf5 	bl	8005a14 <BC_CmdMng>
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40001400 	.word	0x40001400

08005e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  htim : hadc handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	7f1b      	ldrb	r3, [r3, #28]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d101      	bne.n	8005e4c <HAL_TIM_IC_CaptureCallback+0x14>
  {
    BSP_BC_ChgPinHasToggled();
 8005e48:	f7ff fcd8 	bl	80057fc <BSP_BC_ChgPinHasToggled>
  }
}
 8005e4c:	bf00      	nop
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <TIM7_IRQHandler>:
 */
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 8005e58:	4802      	ldr	r0, [pc, #8]	; (8005e64 <TIM7_IRQHandler+0x10>)
 8005e5a:	f008 f972 	bl	800e142 <HAL_TIM_IRQHandler>
}
 8005e5e:	bf00      	nop
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20018eb0 	.word	0x20018eb0

08005e68 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimBCHandle);
 8005e6c:	4802      	ldr	r0, [pc, #8]	; (8005e78 <TIM3_IRQHandler+0x10>)
 8005e6e:	f008 f968 	bl	800e142 <HAL_TIM_IRQHandler>
}
 8005e72:	bf00      	nop
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	200008e8 	.word	0x200008e8

08005e7c <BSP_DEBUG_PIN_On>:
  HAL_GPIO_DeInit(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin]);
  DEBUG_PINx_GPIO_CLK_DISABLE(Pin);
}

void BSP_DEBUG_PIN_On(Debug_Pin_TypeDef Pin)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_SET);
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	4a07      	ldr	r2, [pc, #28]	; (8005ea8 <BSP_DEBUG_PIN_On+0x2c>)
 8005e8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	4a06      	ldr	r2, [pc, #24]	; (8005eac <BSP_DEBUG_PIN_On+0x30>)
 8005e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e96:	2201      	movs	r2, #1
 8005e98:	4619      	mov	r1, r3
 8005e9a:	f002 fb6f 	bl	800857c <HAL_GPIO_WritePin>
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000048 	.word	0x20000048
 8005eac:	08021a9c 	.word	0x08021a9c

08005eb0 <BSP_DEBUG_PIN_Off>:

void BSP_DEBUG_PIN_Off(Debug_Pin_TypeDef Pin)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	4a07      	ldr	r2, [pc, #28]	; (8005edc <BSP_DEBUG_PIN_Off+0x2c>)
 8005ebe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005ec2:	79fb      	ldrb	r3, [r7, #7]
 8005ec4:	4a06      	ldr	r2, [pc, #24]	; (8005ee0 <BSP_DEBUG_PIN_Off+0x30>)
 8005ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f002 fb55 	bl	800857c <HAL_GPIO_WritePin>
}
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000048 	.word	0x20000048
 8005ee0:	08021a9c 	.word	0x08021a9c

08005ee4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
  uint8_t sd_state;
  /* Check if the SD card is plugged in the slot */
  
  /* Initialize all configured peripherals */

  hsd1.Instance = SDMMC1;
 8005eea:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <BSP_SD_Init+0x5c>)
 8005eec:	4a15      	ldr	r2, [pc, #84]	; (8005f44 <BSP_SD_Init+0x60>)
 8005eee:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8005ef0:	4b13      	ldr	r3, [pc, #76]	; (8005f40 <BSP_SD_Init+0x5c>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005ef6:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <BSP_SD_Init+0x5c>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8005efc:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <BSP_SD_Init+0x5c>)
 8005efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f02:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <BSP_SD_Init+0x5c>)
 8005f06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f0a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <BSP_SD_Init+0x5c>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <BSP_SD_Init+0x5c>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	619a      	str	r2, [r3, #24]
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&hsd1);
 8005f18:	4809      	ldr	r0, [pc, #36]	; (8005f40 <BSP_SD_Init+0x5c>)
 8005f1a:	f000 f889 	bl	8006030 <BSP_SD_MspInit>
  
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005f1e:	f000 f839 	bl	8005f94 <BSP_SD_IsDetected>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d001      	beq.n	8005f2c <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e005      	b.n	8005f38 <BSP_SD_Init+0x54>
  }
  /* HAL SD initialization */
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 8005f2c:	4804      	ldr	r0, [pc, #16]	; (8005f40 <BSP_SD_Init+0x5c>)
 8005f2e:	f005 fcb5 	bl	800b89c <HAL_SD_Init>
 8005f32:	4603      	mov	r3, r0
 8005f34:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005f36:	79fb      	ldrb	r3, [r7, #7]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20015fc0 	.word	0x20015fc0
 8005f44:	50062400 	.word	0x50062400

08005f48 <BSP_SD_Detect_Init>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
void BSP_SD_Detect_Init(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 8005f4e:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <BSP_SD_Detect_Init+0x44>)
 8005f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f52:	4a0e      	ldr	r2, [pc, #56]	; (8005f8c <BSP_SD_Detect_Init+0x44>)
 8005f54:	f043 0302 	orr.w	r3, r3, #2
 8005f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <BSP_SD_Detect_Init+0x44>)
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	683b      	ldr	r3, [r7, #0]

  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8005f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f6a:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8005f78:	1d3b      	adds	r3, r7, #4
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4804      	ldr	r0, [pc, #16]	; (8005f90 <BSP_SD_Detect_Init+0x48>)
 8005f7e:	f002 f953 	bl	8008228 <HAL_GPIO_Init>
}
 8005f82:	bf00      	nop
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	48000400 	.word	0x48000400

08005f94 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 8005f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f9c:	4808      	ldr	r0, [pc, #32]	; (8005fc0 <BSP_SD_IsDetected+0x2c>)
 8005f9e:	f002 fad5 	bl	800854c <HAL_GPIO_ReadPin>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d103      	bne.n	8005fb0 <BSP_SD_IsDetected+0x1c>
  {
    SD_Status = SD_NOT_PRESENT;
 8005fa8:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <BSP_SD_IsDetected+0x30>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	e002      	b.n	8005fb6 <BSP_SD_IsDetected+0x22>
  }
  else
  {
    SD_Status = SD_PRESENT;
 8005fb0:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <BSP_SD_IsDetected+0x30>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	701a      	strb	r2, [r3, #0]
  }
  
  return SD_Status;
 8005fb6:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <BSP_SD_IsDetected+0x30>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	b2db      	uxtb	r3, r3
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	48000400 	.word	0x48000400
 8005fc4:	2000098b 	.word	0x2000098b

08005fc8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	68f9      	ldr	r1, [r7, #12]
 8005fde:	4806      	ldr	r0, [pc, #24]	; (8005ff8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005fe0:	f005 fd72 	bl	800bac8 <HAL_SD_ReadBlocks_DMA>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20015fc0 	.word	0x20015fc0

08005ffc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	68f9      	ldr	r1, [r7, #12]
 8006012:	4806      	ldr	r0, [pc, #24]	; (800602c <BSP_SD_WriteBlocks_DMA+0x30>)
 8006014:	f005 fe00 	bl	800bc18 <HAL_SD_WriteBlocks_DMA>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006022:	7dfb      	ldrb	r3, [r7, #23]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20015fc0 	.word	0x20015fc0

08006030 <BSP_SD_MspInit>:

  return sd_state; 
}

void BSP_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08a      	sub	sp, #40	; 0x28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	609a      	str	r2, [r3, #8]
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	611a      	str	r2, [r3, #16]
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006048:	4b24      	ldr	r3, [pc, #144]	; (80060dc <BSP_SD_MspInit+0xac>)
 800604a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <BSP_SD_MspInit+0xac>)
 800604e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006052:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006054:	4b21      	ldr	r3, [pc, #132]	; (80060dc <BSP_SD_MspInit+0xac>)
 8006056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006060:	4b1e      	ldr	r3, [pc, #120]	; (80060dc <BSP_SD_MspInit+0xac>)
 8006062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006064:	4a1d      	ldr	r2, [pc, #116]	; (80060dc <BSP_SD_MspInit+0xac>)
 8006066:	f043 0304 	orr.w	r3, r3, #4
 800606a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <BSP_SD_MspInit+0xac>)
 800606e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006078:	4b18      	ldr	r3, [pc, #96]	; (80060dc <BSP_SD_MspInit+0xac>)
 800607a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607c:	4a17      	ldr	r2, [pc, #92]	; (80060dc <BSP_SD_MspInit+0xac>)
 800607e:	f043 0308 	orr.w	r3, r3, #8
 8006082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006084:	4b15      	ldr	r3, [pc, #84]	; (80060dc <BSP_SD_MspInit+0xac>)
 8006086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	60bb      	str	r3, [r7, #8]
 800608e:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 8006090:	2302      	movs	r3, #2
 8006092:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull      = GPIO_PULLUP;
 8006094:	2301      	movs	r3, #1
 8006096:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006098:	2303      	movs	r3, #3
 800609a:	623b      	str	r3, [r7, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 800609c:	230c      	movs	r3, #12
 800609e:	627b      	str	r3, [r7, #36]	; 0x24

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80060a0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80060a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80060a6:	f107 0314 	add.w	r3, r7, #20
 80060aa:	4619      	mov	r1, r3
 80060ac:	480c      	ldr	r0, [pc, #48]	; (80060e0 <BSP_SD_MspInit+0xb0>)
 80060ae:	f002 f8bb 	bl	8008228 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 80060b2:	2304      	movs	r3, #4
 80060b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80060b6:	f107 0314 	add.w	r3, r7, #20
 80060ba:	4619      	mov	r1, r3
 80060bc:	4809      	ldr	r0, [pc, #36]	; (80060e4 <BSP_SD_MspInit+0xb4>)
 80060be:	f002 f8b3 	bl	8008228 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 80060c2:	2200      	movs	r2, #0
 80060c4:	2105      	movs	r1, #5
 80060c6:	2031      	movs	r0, #49	; 0x31
 80060c8:	f001 fdf7 	bl	8007cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 80060cc:	2031      	movs	r0, #49	; 0x31
 80060ce:	f001 fe10 	bl	8007cf2 <HAL_NVIC_EnableIRQ>


}
 80060d2:	bf00      	nop
 80060d4:	3728      	adds	r7, #40	; 0x28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40021000 	.word	0x40021000
 80060e0:	48000800 	.word	0x48000800
 80060e4:	48000c00 	.word	0x48000c00

080060e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80060ec:	4805      	ldr	r0, [pc, #20]	; (8006104 <BSP_SD_GetCardState+0x1c>)
 80060ee:	f006 fb2b 	bl	800c748 <HAL_SD_GetCardState>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
}
 80060fe:	4618      	mov	r0, r3
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20015fc0 	.word	0x20015fc0

08006108 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4803      	ldr	r0, [pc, #12]	; (8006120 <BSP_SD_GetCardInfo+0x18>)
 8006114:	f006 fa42 	bl	800c59c <HAL_SD_GetCardInfo>
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20015fc0 	.word	0x20015fc0

08006124 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 800612c:	f7fd fae0 	bl	80036f0 <BSP_SD_WriteCpltCallback>
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8006140:	f7fd fae6 	bl	8003710 <BSP_SD_ReadCpltCallback>
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006156:	2003      	movs	r0, #3
 8006158:	f001 fda4 	bl	8007ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800615c:	2000      	movs	r0, #0
 800615e:	f000 f815 	bl	800618c <HAL_InitTick>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	71fb      	strb	r3, [r7, #7]
 800616c:	e001      	b.n	8006172 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800616e:	f000 f805 	bl	800617c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006172:	79fb      	ldrb	r3, [r7, #7]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006198:	4b16      	ldr	r3, [pc, #88]	; (80061f4 <HAL_InitTick+0x68>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d022      	beq.n	80061e6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80061a0:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <HAL_InitTick+0x6c>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <HAL_InitTick+0x68>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80061b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 fdaa 	bl	8007d0e <HAL_SYSTICK_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b0f      	cmp	r3, #15
 80061c4:	d809      	bhi.n	80061da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061c6:	2200      	movs	r2, #0
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	f04f 30ff 	mov.w	r0, #4294967295
 80061ce:	f001 fd74 	bl	8007cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80061d2:	4a0a      	ldr	r2, [pc, #40]	; (80061fc <HAL_InitTick+0x70>)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	e007      	b.n	80061ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
 80061de:	e004      	b.n	80061ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	73fb      	strb	r3, [r7, #15]
 80061e4:	e001      	b.n	80061ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	2000007c 	.word	0x2000007c
 80061f8:	20000038 	.word	0x20000038
 80061fc:	20000078 	.word	0x20000078

08006200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <HAL_IncTick+0x1c>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <HAL_IncTick+0x20>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4413      	add	r3, r2
 800620e:	4a03      	ldr	r2, [pc, #12]	; (800621c <HAL_IncTick+0x1c>)
 8006210:	6013      	str	r3, [r2, #0]
}
 8006212:	bf00      	nop
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	20018ef0 	.word	0x20018ef0
 8006220:	2000007c 	.word	0x2000007c

08006224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  return uwTick;
 8006228:	4b03      	ldr	r3, [pc, #12]	; (8006238 <HAL_GetTick+0x14>)
 800622a:	681b      	ldr	r3, [r3, #0]
}
 800622c:	4618      	mov	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20018ef0 	.word	0x20018ef0

0800623c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006244:	f7ff ffee 	bl	8006224 <HAL_GetTick>
 8006248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d004      	beq.n	8006260 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <HAL_Delay+0x40>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006260:	bf00      	nop
 8006262:	f7ff ffdf 	bl	8006224 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	429a      	cmp	r2, r3
 8006270:	d8f7      	bhi.n	8006262 <HAL_Delay+0x26>
  {
  }
}
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	2000007c 	.word	0x2000007c

08006280 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	609a      	str	r2, [r3, #8]
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80062b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6093      	str	r3, [r2, #8]
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062de:	d101      	bne.n	80062e4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006302:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006306:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800632e:	d101      	bne.n	8006334 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006352:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006356:	f043 0201 	orr.w	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800637a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800637e:	f043 0202 	orr.w	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <LL_ADC_IsEnabled+0x18>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <LL_ADC_IsEnabled+0x1a>
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d101      	bne.n	80063d0 <LL_ADC_IsDisableOngoing+0x18>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <LL_ADC_IsDisableOngoing+0x1a>
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063f2:	f043 0204 	orr.w	r2, r3, #4
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006416:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800641a:	f043 0210 	orr.w	r2, r3, #16
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b04      	cmp	r3, #4
 8006440:	d101      	bne.n	8006446 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006464:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006468:	f043 0220 	orr.w	r2, r3, #32
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b08      	cmp	r3, #8
 800648e:	d101      	bne.n	8006494 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e174      	b.n	80067a8 <HAL_ADC_Init+0x304>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d132      	bne.n	8006532 <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a9a      	ldr	r2, [pc, #616]	; (8006738 <HAL_ADC_Init+0x294>)
 80064d0:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a99      	ldr	r2, [pc, #612]	; (800673c <HAL_ADC_Init+0x298>)
 80064d6:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a99      	ldr	r2, [pc, #612]	; (8006740 <HAL_ADC_Init+0x29c>)
 80064dc:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a98      	ldr	r2, [pc, #608]	; (8006744 <HAL_ADC_Init+0x2a0>)
 80064e2:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a98      	ldr	r2, [pc, #608]	; (8006748 <HAL_ADC_Init+0x2a4>)
 80064e8:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a97      	ldr	r2, [pc, #604]	; (800674c <HAL_ADC_Init+0x2a8>)
 80064ee:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a97      	ldr	r2, [pc, #604]	; (8006750 <HAL_ADC_Init+0x2ac>)
 80064f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a96      	ldr	r2, [pc, #600]	; (8006754 <HAL_ADC_Init+0x2b0>)
 80064fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a95      	ldr	r2, [pc, #596]	; (8006758 <HAL_ADC_Init+0x2b4>)
 8006504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a91      	ldr	r2, [pc, #580]	; (800675c <HAL_ADC_Init+0x2b8>)
 8006516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fec7 	bl	80062ca <LL_ADC_IsDeepPowerDownEnabled>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d004      	beq.n	800654c <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff fead 	bl	80062a6 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fee2 	bl	800631a <LL_ADC_IsInternalRegulatorEnabled>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d113      	bne.n	8006584 <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff fec6 	bl	80062f2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006566:	4b7e      	ldr	r3, [pc, #504]	; (8006760 <HAL_ADC_Init+0x2bc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	099b      	lsrs	r3, r3, #6
 800656c:	4a7d      	ldr	r2, [pc, #500]	; (8006764 <HAL_ADC_Init+0x2c0>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	099b      	lsrs	r3, r3, #6
 8006574:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006576:	e002      	b.n	800657e <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	3b01      	subs	r3, #1
 800657c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1f9      	bne.n	8006578 <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff fec6 	bl	800631a <LL_ADC_IsInternalRegulatorEnabled>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10d      	bne.n	80065b0 <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006598:	f043 0210 	orr.w	r2, r3, #16
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a4:	f043 0201 	orr.w	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff ff3a 	bl	800642e <LL_ADC_REG_IsConversionOngoing>
 80065ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 80e6 	bne.w	8006796 <HAL_ADC_Init+0x2f2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f040 80e2 	bne.w	8006796 <HAL_ADC_Init+0x2f2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80065da:	f043 0202 	orr.w	r2, r3, #2
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fed3 	bl	8006392 <LL_ADC_IsEnabled>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10b      	bne.n	800660a <HAL_ADC_Init+0x166>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065f2:	485d      	ldr	r0, [pc, #372]	; (8006768 <HAL_ADC_Init+0x2c4>)
 80065f4:	f7ff fecd 	bl	8006392 <LL_ADC_IsEnabled>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d105      	bne.n	800660a <HAL_ADC_Init+0x166>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	4619      	mov	r1, r3
 8006604:	4859      	ldr	r0, [pc, #356]	; (800676c <HAL_ADC_Init+0x2c8>)
 8006606:	f7ff fe3b 	bl	8006280 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7e5b      	ldrb	r3, [r3, #25]
 800660e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006614:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800661a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006620:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006628:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800662a:	4313      	orrs	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d106      	bne.n	8006646 <HAL_ADC_Init+0x1a2>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	3b01      	subs	r3, #1
 800663e:	045b      	lsls	r3, r3, #17
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	4313      	orrs	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <HAL_ADC_Init+0x1be>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	4313      	orrs	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	4b41      	ldr	r3, [pc, #260]	; (8006770 <HAL_ADC_Init+0x2cc>)
 800666a:	4013      	ands	r3, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	69b9      	ldr	r1, [r7, #24]
 8006672:	430b      	orrs	r3, r1
 8006674:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fed7 	bl	800642e <LL_ADC_REG_IsConversionOngoing>
 8006680:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fef8 	bl	800647c <LL_ADC_INJ_IsConversionOngoing>
 800668c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d140      	bne.n	8006716 <HAL_ADC_Init+0x272>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d13d      	bne.n	8006716 <HAL_ADC_Init+0x272>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7e1b      	ldrb	r3, [r3, #24]
 80066a2:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80066a4:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80066ae:	4313      	orrs	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066bc:	f023 0306 	bic.w	r3, r3, #6
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	69b9      	ldr	r1, [r7, #24]
 80066c6:	430b      	orrs	r3, r1
 80066c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d118      	bne.n	8006706 <HAL_ADC_Init+0x262>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066de:	f023 0304 	bic.w	r3, r3, #4
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80066ea:	4311      	orrs	r1, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80066f0:	4311      	orrs	r1, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066f6:	430a      	orrs	r2, r1
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	611a      	str	r2, [r3, #16]
 8006704:	e007      	b.n	8006716 <HAL_ADC_Init+0x272>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0201 	bic.w	r2, r2, #1
 8006714:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d12a      	bne.n	8006774 <HAL_ADC_Init+0x2d0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006724:	f023 010f 	bic.w	r1, r3, #15
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	1e5a      	subs	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
 8006736:	e025      	b.n	8006784 <HAL_ADC_Init+0x2e0>
 8006738:	080068dd 	.word	0x080068dd
 800673c:	080068f1 	.word	0x080068f1
 8006740:	08006905 	.word	0x08006905
 8006744:	08006919 	.word	0x08006919
 8006748:	0800723b 	.word	0x0800723b
 800674c:	0800724f 	.word	0x0800724f
 8006750:	08007263 	.word	0x08007263
 8006754:	08007277 	.word	0x08007277
 8006758:	0800728b 	.word	0x0800728b
 800675c:	0800555d 	.word	0x0800555d
 8006760:	20000038 	.word	0x20000038
 8006764:	053e2d63 	.word	0x053e2d63
 8006768:	50040000 	.word	0x50040000
 800676c:	50040300 	.word	0x50040300
 8006770:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 020f 	bic.w	r2, r2, #15
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006788:	f023 0303 	bic.w	r3, r3, #3
 800678c:	f043 0201 	orr.w	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	659a      	str	r2, [r3, #88]	; 0x58
 8006794:	e007      	b.n	80067a6 <HAL_ADC_Init+0x302>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679a:	f043 0210 	orr.w	r2, r3, #16
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80067a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff fe36 	bl	800642e <LL_ADC_REG_IsConversionOngoing>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d14f      	bne.n	8006868 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_ADC_Start+0x26>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e04b      	b.n	800686e <HAL_ADC_Start+0xbe>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f964 	bl	8006aac <ADC_Enable>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d137      	bne.n	800685e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067f6:	f023 0301 	bic.w	r3, r3, #1
 80067fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680e:	d106      	bne.n	800681e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006814:	f023 0206 	bic.w	r2, r3, #6
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	65da      	str	r2, [r3, #92]	; 0x5c
 800681c:	e002      	b.n	8006824 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	221c      	movs	r2, #28
 800682a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d007      	beq.n	8006852 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800684a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fdc1 	bl	80063de <LL_ADC_REG_StartConversion>
 800685c:	e006      	b.n	800686c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006866:	e001      	b.n	800686c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006868:	2302      	movs	r3, #2
 800686a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_ADC_Stop+0x16>
 8006888:	2302      	movs	r3, #2
 800688a:	e023      	b.n	80068d4 <HAL_ADC_Stop+0x5e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006894:	2103      	movs	r1, #3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f854 	bl	8006944 <ADC_ConversionStop>
 800689c:	4603      	mov	r3, r0
 800689e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d111      	bne.n	80068ca <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f95a 	bl	8006b60 <ADC_Disable>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068be:	f023 0301 	bic.w	r3, r3, #1
 80068c2:	f043 0201 	orr.w	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff fd67 	bl	800642e <LL_ADC_REG_IsConversionOngoing>
 8006960:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fd88 	bl	800647c <LL_ADC_INJ_IsConversionOngoing>
 800696c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d103      	bne.n	800697c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8091 	beq.w	8006a9e <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d02a      	beq.n	80069e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	7e5b      	ldrb	r3, [r3, #25]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d126      	bne.n	80069e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	7e1b      	ldrb	r3, [r3, #24]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d122      	bne.n	80069e0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800699a:	2301      	movs	r3, #1
 800699c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800699e:	e014      	b.n	80069ca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	4a41      	ldr	r2, [pc, #260]	; (8006aa8 <ADC_ConversionStop+0x164>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d90d      	bls.n	80069c4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ac:	f043 0210 	orr.w	r2, r3, #16
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b8:	f043 0201 	orr.w	r2, r3, #1
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e06d      	b.n	8006aa0 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3301      	adds	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d1e3      	bne.n	80069a0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2240      	movs	r2, #64	; 0x40
 80069de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d014      	beq.n	8006a10 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff fd1f 	bl	800642e <LL_ADC_REG_IsConversionOngoing>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00c      	beq.n	8006a10 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fcdc 	bl	80063b8 <LL_ADC_IsDisableOngoing>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fcfb 	bl	8006406 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d014      	beq.n	8006a40 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff fd2e 	bl	800647c <LL_ADC_INJ_IsConversionOngoing>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00c      	beq.n	8006a40 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fcc4 	bl	80063b8 <LL_ADC_IsDisableOngoing>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fd0a 	bl	8006454 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d005      	beq.n	8006a52 <ADC_ConversionStop+0x10e>
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d105      	bne.n	8006a58 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	617b      	str	r3, [r7, #20]
        break;
 8006a50:	e005      	b.n	8006a5e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006a52:	2308      	movs	r3, #8
 8006a54:	617b      	str	r3, [r7, #20]
        break;
 8006a56:	e002      	b.n	8006a5e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006a58:	2304      	movs	r3, #4
 8006a5a:	617b      	str	r3, [r7, #20]
        break;
 8006a5c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006a5e:	f7ff fbe1 	bl	8006224 <HAL_GetTick>
 8006a62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006a64:	e014      	b.n	8006a90 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006a66:	f7ff fbdd 	bl	8006224 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b05      	cmp	r3, #5
 8006a72:	d90d      	bls.n	8006a90 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a78:	f043 0210 	orr.w	r2, r3, #16
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a84:	f043 0201 	orr.w	r2, r3, #1
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e007      	b.n	8006aa0 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e3      	bne.n	8006a66 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	a33fffff 	.word	0xa33fffff

08006aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fc6a 	bl	8006392 <LL_ADC_IsEnabled>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d146      	bne.n	8006b52 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <ADC_Enable+0xb0>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00d      	beq.n	8006aee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad6:	f043 0210 	orr.w	r2, r3, #16
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae2:	f043 0201 	orr.w	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e032      	b.n	8006b54 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fc25 	bl	8006342 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006af8:	f7ff fb94 	bl	8006224 <HAL_GetTick>
 8006afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006afe:	e021      	b.n	8006b44 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fc44 	bl	8006392 <LL_ADC_IsEnabled>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff fc14 	bl	8006342 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b1a:	f7ff fb83 	bl	8006224 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d90d      	bls.n	8006b44 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2c:	f043 0210 	orr.w	r2, r3, #16
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b38:	f043 0201 	orr.w	r2, r3, #1
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e007      	b.n	8006b54 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d1d6      	bne.n	8006b00 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	8000003f 	.word	0x8000003f

08006b60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff fc23 	bl	80063b8 <LL_ADC_IsDisableOngoing>
 8006b72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff fc0a 	bl	8006392 <LL_ADC_IsEnabled>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d040      	beq.n	8006c06 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d13d      	bne.n	8006c06 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 030d 	and.w	r3, r3, #13
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d10c      	bne.n	8006bb2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff fbe4 	bl	800636a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2203      	movs	r2, #3
 8006ba8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006baa:	f7ff fb3b 	bl	8006224 <HAL_GetTick>
 8006bae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006bb0:	e022      	b.n	8006bf8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb6:	f043 0210 	orr.w	r2, r3, #16
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc2:	f043 0201 	orr.w	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e01c      	b.n	8006c08 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006bce:	f7ff fb29 	bl	8006224 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d90d      	bls.n	8006bf8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be0:	f043 0210 	orr.w	r2, r3, #16
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bec:	f043 0201 	orr.w	r2, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e007      	b.n	8006c08 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e3      	bne.n	8006bce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <LL_ADC_SetCommonPathInternalCh>:
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	609a      	str	r2, [r3, #8]
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <LL_ADC_GetCommonPathInternalCh>:
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
	...

08006c54 <LL_ADC_SetOffset>:
{
 8006c54:	b490      	push	{r4, r7}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3360      	adds	r3, #96	; 0x60
 8006c66:	461a      	mov	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8006c70:	6822      	ldr	r2, [r4, #0]
 8006c72:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <LL_ADC_SetOffset+0x40>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c86:	6023      	str	r3, [r4, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc90      	pop	{r4, r7}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	03fff000 	.word	0x03fff000

08006c98 <LL_ADC_GetOffsetChannel>:
{
 8006c98:	b490      	push	{r4, r7}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3360      	adds	r3, #96	; 0x60
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc90      	pop	{r4, r7}
 8006cbe:	4770      	bx	lr

08006cc0 <LL_ADC_SetOffsetState>:
{
 8006cc0:	b490      	push	{r4, r7}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3360      	adds	r3, #96	; 0x60
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	6023      	str	r3, [r4, #0]
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc90      	pop	{r4, r7}
 8006cee:	4770      	bx	lr

08006cf0 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	615a      	str	r2, [r3, #20]
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e000      	b.n	8006d56 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <LL_ADC_INJ_GetTrigAuto>:
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <LL_ADC_SetChannelSamplingTime>:
{
 8006d7e:	b490      	push	{r4, r7}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3314      	adds	r3, #20
 8006d8e:	461a      	mov	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	0e5b      	lsrs	r3, r3, #25
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	4413      	add	r3, r2
 8006d9c:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8006d9e:	6822      	ldr	r2, [r4, #0]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	0d1b      	lsrs	r3, r3, #20
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	2107      	movs	r1, #7
 8006daa:	fa01 f303 	lsl.w	r3, r1, r3
 8006dae:	43db      	mvns	r3, r3
 8006db0:	401a      	ands	r2, r3
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	0d1b      	lsrs	r3, r3, #20
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	6023      	str	r3, [r4, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc90      	pop	{r4, r7}
 8006dcc:	4770      	bx	lr
	...

08006dd0 <LL_ADC_SetChannelSingleDiff>:
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006de8:	43db      	mvns	r3, r3
 8006dea:	401a      	ands	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f003 0318 	and.w	r3, r3, #24
 8006df2:	4908      	ldr	r1, [pc, #32]	; (8006e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006df4:	40d9      	lsrs	r1, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	400b      	ands	r3, r1
 8006dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006e06:	bf00      	nop
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	0007ffff 	.word	0x0007ffff

08006e18 <LL_ADC_IsEnabled>:
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <LL_ADC_IsEnabled+0x18>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <LL_ADC_IsEnabled+0x1a>
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <LL_ADC_StartCalibration>:
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006e50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	609a      	str	r2, [r3, #8]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <LL_ADC_IsCalibrationOnGoing>:
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e84:	d101      	bne.n	8006e8a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <LL_ADC_REG_IsConversionOngoing>:
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d101      	bne.n	8006eb0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006eac:	2301      	movs	r3, #1
 8006eae:	e000      	b.n	8006eb2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <LL_ADC_INJ_StartConversion>:
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ece:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ed2:	f043 0208 	orr.w	r2, r3, #8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	609a      	str	r2, [r3, #8]
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <LL_ADC_INJ_IsConversionOngoing>:
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 0308 	and.w	r3, r3, #8
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d101      	bne.n	8006efe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_ADCEx_Calibration_Start+0x1c>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e04d      	b.n	8006fc4 <HAL_ADCEx_Calibration_Start+0xb8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fe15 	bl	8006b60 <ADC_Disable>
 8006f36:	4603      	mov	r3, r0
 8006f38:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d136      	bne.n	8006fae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f48:	f023 0302 	bic.w	r3, r3, #2
 8006f4c:	f043 0202 	orr.w	r2, r3, #2
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff ff6f 	bl	8006e3e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006f60:	e014      	b.n	8006f8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	3301      	adds	r3, #1
 8006f66:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006f6e:	d30d      	bcc.n	8006f8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f74:	f023 0312 	bic.w	r3, r3, #18
 8006f78:	f043 0210 	orr.w	r2, r3, #16
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e01b      	b.n	8006fc4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ff6d 	bl	8006e70 <LL_ADC_IsCalibrationOnGoing>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e2      	bne.n	8006f62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa0:	f023 0303 	bic.w	r3, r3, #3
 8006fa4:	f043 0201 	orr.w	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	659a      	str	r2, [r3, #88]	; 0x58
 8006fac:	e005      	b.n	8006fba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb2:	f043 0210 	orr.w	r2, r3, #16
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ff84 	bl	8006ee6 <LL_ADC_INJ_IsConversionOngoing>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <HAL_ADCEx_InjectedStart+0x1c>
  {
    return HAL_BUSY;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e05f      	b.n	80070a8 <HAL_ADCEx_InjectedStart+0xdc>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff2:	60fb      	str	r3, [r7, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10a      	bne.n	8007018 <HAL_ADCEx_InjectedStart+0x4c>
        && (tmp_config_injected_queue == 0UL)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d107      	bne.n	8007018 <HAL_ADCEx_InjectedStart+0x4c>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	f043 0220 	orr.w	r2, r3, #32
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e047      	b.n	80070a8 <HAL_ADCEx_InjectedStart+0xdc>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <HAL_ADCEx_InjectedStart+0x5a>
 8007022:	2302      	movs	r3, #2
 8007024:	e040      	b.n	80070a8 <HAL_ADCEx_InjectedStart+0xdc>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fd3c 	bl	8006aac <ADC_Enable>
 8007034:	4603      	mov	r3, r0
 8007036:	72fb      	strb	r3, [r7, #11]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007038:	7afb      	ldrb	r3, [r7, #11]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d12f      	bne.n	800709e <HAL_ADCEx_InjectedStart+0xd2>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d006      	beq.n	8007058 <HAL_ADCEx_InjectedStart+0x8c>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704e:	f023 0208 	bic.w	r2, r3, #8
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	65da      	str	r2, [r3, #92]	; 0x5c
 8007056:	e002      	b.n	800705e <HAL_ADCEx_InjectedStart+0x92>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007062:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2260      	movs	r2, #96	; 0x60
 8007078:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      }
#else
      if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fe6b 	bl	8006d62 <LL_ADC_INJ_GetTrigAuto>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <HAL_ADCEx_InjectedStart+0xda>
      {
        /* Start ADC group injected conversion */
        LL_ADC_INJ_StartConversion(hadc->Instance);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff ff11 	bl	8006ebe <LL_ADC_INJ_StartConversion>
 800709c:	e003      	b.n	80070a6 <HAL_ADCEx_InjectedStart+0xda>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
 80070a6:	7afb      	ldrb	r3, [r7, #11]
  }
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_ADCEx_InjectedPollForConversion>:
  * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
  *         checked and cleared depending on AUTDLY bit status.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of sequence selected */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d102      	bne.n	80070c8 <HAL_ADCEx_InjectedPollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_JEOS;
 80070c2:	2340      	movs	r3, #64	; 0x40
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	e001      	b.n	80070cc <HAL_ADCEx_InjectedPollForConversion+0x1c>
  }
  else /* end of conversion selected */
  {
    tmp_Flag_End = ADC_FLAG_JEOC;
 80070c8:	2320      	movs	r3, #32
 80070ca:	61fb      	str	r3, [r7, #28]
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80070cc:	f7ff f8aa 	bl	8006224 <HAL_GetTick>
 80070d0:	61b8      	str	r0, [r7, #24]

  /* Wait until End of Conversion or Sequence flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80070d2:	e01a      	b.n	800710a <HAL_ADCEx_InjectedPollForConversion+0x5a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070da:	d016      	beq.n	800710a <HAL_ADCEx_InjectedPollForConversion+0x5a>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80070dc:	f7ff f8a2 	bl	8006224 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d302      	bcc.n	80070f2 <HAL_ADCEx_InjectedPollForConversion+0x42>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10b      	bne.n	800710a <HAL_ADCEx_InjectedPollForConversion+0x5a>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f6:	f043 0204 	orr.w	r2, r3, #4
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e05c      	b.n	80071c4 <HAL_ADCEx_InjectedPollForConversion+0x114>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	4013      	ands	r3, r2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0dd      	beq.n	80070d4 <HAL_ADCEx_InjectedPollForConversion+0x24>
      }
    }
  }

  /* Retrieve ADC configuration */
  tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff fe0d 	bl	8006d3c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007122:	6178      	str	r0, [r7, #20]
  tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff fdf4 	bl	8006d16 <LL_ADC_REG_IsTriggerSourceSWStart>
 800712e:	6138      	str	r0, [r7, #16]
  {
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	60fb      	str	r3, [r7, #12]
#endif

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10c      	bne.n	8007164 <HAL_ADCEx_InjectedPollForConversion+0xb4>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8007150:	2b00      	cmp	r3, #0
 8007152:	d125      	bne.n	80071a0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d022      	beq.n	80071a0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
        (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8007160:	2b00      	cmp	r3, #0
 8007162:	d11d      	bne.n	80071a0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716e:	2b40      	cmp	r3, #64	; 0x40
 8007170:	d116      	bne.n	80071a0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      /* when the last context has been fully processed, JSQR is reset      */
      /* by the hardware. Even if no injected conversion is planned to come */
      /* (queue empty, triggers are ignored), it can start again            */
      /* immediately after setting a new context (JADSTART is still set).   */
      /* Therefore, state of HAL ADC injected group is kept to busy.        */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d111      	bne.n	80071a0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007180:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	659a      	str	r2, [r3, #88]	; 0x58

        if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007190:	2b00      	cmp	r3, #0
 8007192:	d105      	bne.n	80071a0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007198:	f043 0201 	orr.w	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_JEOS)
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d109      	bne.n	80071ba <HAL_ADCEx_InjectedPollForConversion+0x10a>
  {
    /* Clear end of sequence JEOS flag of injected group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature.   */
    /* For injected groups, no new conversion will start before JEOS is       */
    /* cleared.                                                               */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d108      	bne.n	80071c2 <HAL_ADCEx_InjectedPollForConversion+0x112>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2260      	movs	r2, #96	; 0x60
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e003      	b.n	80071c2 <HAL_ADCEx_InjectedPollForConversion+0x112>
    }
  }
  else
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2220      	movs	r2, #32
 80071c0:	601a      	str	r2, [r3, #0]
  }

  /* Return API HAL status */
  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f240 321a 	movw	r2, #794	; 0x31a
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00d      	beq.n	80071fc <HAL_ADCEx_InjectedGetValue+0x30>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	f240 321a 	movw	r2, #794	; 0x31a
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d81a      	bhi.n	8007220 <HAL_ADCEx_InjectedGetValue+0x54>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80071f0:	d010      	beq.n	8007214 <HAL_ADCEx_InjectedGetValue+0x48>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	f5b3 7f05 	cmp.w	r3, #532	; 0x214
 80071f8:	d006      	beq.n	8007208 <HAL_ADCEx_InjectedGetValue+0x3c>
 80071fa:	e011      	b.n	8007220 <HAL_ADCEx_InjectedGetValue+0x54>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007204:	60fb      	str	r3, [r7, #12]
      break;
 8007206:	e011      	b.n	800722c <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007210:	60fb      	str	r3, [r7, #12]
      break;
 8007212:	e00b      	b.n	800722c <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721c:	60fb      	str	r3, [r7, #12]
      break;
 800721e:	e005      	b.n	800722c <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007228:	60fb      	str	r3, [r7, #12]
      break;
 800722a:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 800722c:	68fb      	ldr	r3, [r7, #12]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b0a8      	sub	sp, #160	; 0xa0
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d102      	bne.n	80072ca <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80072c4:	2302      	movs	r3, #2
 80072c6:	f000 bc13 	b.w	8007af0 <HAL_ADCEx_InjectedConfigChannel+0x850>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d130      	bne.n	8007344 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d179      	bne.n	80073de <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d010      	beq.n	8007314 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	0e9b      	lsrs	r3, r3, #26
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007306:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007312:	e007      	b.n	8007324 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	0e9b      	lsrs	r3, r3, #26
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8007320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800732a:	4ba1      	ldr	r3, [pc, #644]	; (80075b0 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 800732c:	4013      	ands	r3, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6812      	ldr	r2, [r2, #0]
 8007332:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007336:	430b      	orrs	r3, r1
 8007338:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007340:	661a      	str	r2, [r3, #96]	; 0x60
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007342:	e04c      	b.n	80073de <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007348:	2b00      	cmp	r3, #0
 800734a:	d11d      	bne.n	8007388 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699a      	ldr	r2, [r3, #24]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	665a      	str	r2, [r3, #100]	; 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	661a      	str	r2, [r3, #96]	; 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00d      	beq.n	800737e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007370:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800737c:	e004      	b.n	8007388 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	3b01      	subs	r3, #1
 8007384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	0e9b      	lsrs	r3, r3, #26
 800738e:	f003 021f 	and.w	r2, r3, #31
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ac:	1e5a      	subs	r2, r3, #1
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	665a      	str	r2, [r3, #100]	; 0x64

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80073b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	661a      	str	r2, [r3, #96]	; 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073ce:	4b78      	ldr	r3, [pc, #480]	; (80075b0 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 80073d0:	4013      	ands	r3, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	430b      	orrs	r3, r1
 80073dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff fd7f 	bl	8006ee6 <LL_ADC_INJ_IsConversionOngoing>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d120      	bne.n	8007430 <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	7f5b      	ldrb	r3, [r3, #29]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d110      	bne.n	8007418 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	7f9b      	ldrb	r3, [r3, #30]
 8007404:	055a      	lsls	r2, r3, #21
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	7f1b      	ldrb	r3, [r3, #28]
 800740a:	051b      	lsls	r3, r3, #20
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	60da      	str	r2, [r3, #12]
 8007416:	e00b      	b.n	8007430 <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	7f9b      	ldrb	r3, [r3, #30]
 8007426:	055a      	lsls	r2, r3, #21
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f7ff fd2f 	bl	8006e98 <LL_ADC_REG_IsConversionOngoing>
 800743a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff fd4f 	bl	8006ee6 <LL_ADC_INJ_IsConversionOngoing>
 8007448:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800744c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007450:	2b00      	cmp	r3, #0
 8007452:	f040 81b9 	bne.w	80077c8 <HAL_ADCEx_InjectedConfigChannel+0x528>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007456:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800745a:	2b00      	cmp	r3, #0
 800745c:	f040 81b4 	bne.w	80077c8 <HAL_ADCEx_InjectedConfigChannel+0x528>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	2b00      	cmp	r3, #0
 800746e:	d115      	bne.n	800749c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	7f5b      	ldrb	r3, [r3, #29]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d108      	bne.n	800748a <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8007486:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8007488:	e01e      	b.n	80074c8 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007498:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800749a:	e015      	b.n	80074c8 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	7f5b      	ldrb	r3, [r3, #29]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d109      	bne.n	80074b8 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a8:	f043 0220 	orr.w	r2, r3, #32
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	659a      	str	r2, [r3, #88]	; 0x58

        tmp_hal_status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80074b6:	e007      	b.n	80074c8 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80074c6:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d110      	bne.n	80074f4 <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	430b      	orrs	r3, r1
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0202 	orr.w	r2, r2, #2
 80074f0:	611a      	str	r2, [r3, #16]
 80074f2:	e007      	b.n	8007504 <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0202 	bic.w	r2, r2, #2
 8007502:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800750c:	d10f      	bne.n	800752e <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2200      	movs	r2, #0
 8007518:	4619      	mov	r1, r3
 800751a:	f7ff fc30 	bl	8006d7e <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fbe2 	bl	8006cf0 <LL_ADC_SetSamplingTimeCommonConfig>
 800752c:	e00e      	b.n	800754c <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	6819      	ldr	r1, [r3, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	461a      	mov	r2, r3
 800753c:	f7ff fc1f 	bl	8006d7e <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2100      	movs	r1, #0
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff fbd2 	bl	8006cf0 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	695a      	ldr	r2, [r3, #20]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	08db      	lsrs	r3, r3, #3
 8007558:	f003 0303 	and.w	r3, r3, #3
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b04      	cmp	r3, #4
 800756c:	d00a      	beq.n	8007584 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6919      	ldr	r1, [r3, #16]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800757e:	f7ff fb69 	bl	8006c54 <LL_ADC_SetOffset>
 8007582:	e121      	b.n	80077c8 <HAL_ADCEx_InjectedConfigChannel+0x528>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2100      	movs	r1, #0
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fb84 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 8007590:	4603      	mov	r3, r0
 8007592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10c      	bne.n	80075b4 <HAL_ADCEx_InjectedConfigChannel+0x314>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2100      	movs	r1, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff fb79 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 80075a6:	4603      	mov	r3, r0
 80075a8:	0e9b      	lsrs	r3, r3, #26
 80075aa:	f003 021f 	and.w	r2, r3, #31
 80075ae:	e016      	b.n	80075de <HAL_ADCEx_InjectedConfigChannel+0x33e>
 80075b0:	82082000 	.word	0x82082000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fb6c 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 80075c0:	4603      	mov	r3, r0
 80075c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075ca:	fa93 f3a3 	rbit	r3, r3
 80075ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80075d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075d6:	fab3 f383 	clz	r3, r3
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d105      	bne.n	80075f6 <HAL_ADCEx_InjectedConfigChannel+0x356>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	0e9b      	lsrs	r3, r3, #26
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	e00a      	b.n	800760c <HAL_ADCEx_InjectedConfigChannel+0x36c>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075fe:	fa93 f3a3 	rbit	r3, r3
 8007602:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8007604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007606:	fab3 f383 	clz	r3, r3
 800760a:	b2db      	uxtb	r3, r3
 800760c:	429a      	cmp	r2, r3
 800760e:	d106      	bne.n	800761e <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2200      	movs	r2, #0
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fb51 	bl	8006cc0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2101      	movs	r1, #1
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fb37 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 800762a:	4603      	mov	r3, r0
 800762c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2101      	movs	r1, #1
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fb2c 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 8007640:	4603      	mov	r3, r0
 8007642:	0e9b      	lsrs	r3, r3, #26
 8007644:	f003 021f 	and.w	r2, r3, #31
 8007648:	e010      	b.n	800766c <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2101      	movs	r1, #1
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fb21 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 8007656:	4603      	mov	r3, r0
 8007658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800765a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800765c:	fa93 f3a3 	rbit	r3, r3
 8007660:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007664:	fab3 f383 	clz	r3, r3
 8007668:	b2db      	uxtb	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007674:	2b00      	cmp	r3, #0
 8007676:	d105      	bne.n	8007684 <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	0e9b      	lsrs	r3, r3, #26
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	e00a      	b.n	800769a <HAL_ADCEx_InjectedConfigChannel+0x3fa>
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800768a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768c:	fa93 f3a3 	rbit	r3, r3
 8007690:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8007692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007694:	fab3 f383 	clz	r3, r3
 8007698:	b2db      	uxtb	r3, r3
 800769a:	429a      	cmp	r2, r3
 800769c:	d106      	bne.n	80076ac <HAL_ADCEx_InjectedConfigChannel+0x40c>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2200      	movs	r2, #0
 80076a4:	2101      	movs	r1, #1
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fb0a 	bl	8006cc0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2102      	movs	r1, #2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff faf0 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10a      	bne.n	80076d8 <HAL_ADCEx_InjectedConfigChannel+0x438>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2102      	movs	r1, #2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff fae5 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 80076ce:	4603      	mov	r3, r0
 80076d0:	0e9b      	lsrs	r3, r3, #26
 80076d2:	f003 021f 	and.w	r2, r3, #31
 80076d6:	e010      	b.n	80076fa <HAL_ADCEx_InjectedConfigChannel+0x45a>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2102      	movs	r1, #2
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff fada 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 80076e4:	4603      	mov	r3, r0
 80076e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ea:	fa93 f3a3 	rbit	r3, r3
 80076ee:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80076f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076f2:	fab3 f383 	clz	r3, r3
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007702:	2b00      	cmp	r3, #0
 8007704:	d105      	bne.n	8007712 <HAL_ADCEx_InjectedConfigChannel+0x472>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	0e9b      	lsrs	r3, r3, #26
 800770c:	f003 031f 	and.w	r3, r3, #31
 8007710:	e00a      	b.n	8007728 <HAL_ADCEx_InjectedConfigChannel+0x488>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800771a:	fa93 f3a3 	rbit	r3, r3
 800771e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007722:	fab3 f383 	clz	r3, r3
 8007726:	b2db      	uxtb	r3, r3
 8007728:	429a      	cmp	r2, r3
 800772a:	d106      	bne.n	800773a <HAL_ADCEx_InjectedConfigChannel+0x49a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2200      	movs	r2, #0
 8007732:	2102      	movs	r1, #2
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff fac3 	bl	8006cc0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2103      	movs	r1, #3
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff faa9 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 8007746:	4603      	mov	r3, r0
 8007748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2103      	movs	r1, #3
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fa9e 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 800775c:	4603      	mov	r3, r0
 800775e:	0e9b      	lsrs	r3, r3, #26
 8007760:	f003 021f 	and.w	r2, r3, #31
 8007764:	e010      	b.n	8007788 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2103      	movs	r1, #3
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff fa93 	bl	8006c98 <LL_ADC_GetOffsetChannel>
 8007772:	4603      	mov	r3, r0
 8007774:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007778:	fa93 f3a3 	rbit	r3, r3
 800777c:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 800777e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007780:	fab3 f383 	clz	r3, r3
 8007784:	b2db      	uxtb	r3, r3
 8007786:	461a      	mov	r2, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <HAL_ADCEx_InjectedConfigChannel+0x500>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	0e9b      	lsrs	r3, r3, #26
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	e00a      	b.n	80077b6 <HAL_ADCEx_InjectedConfigChannel+0x516>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a8:	fa93 f3a3 	rbit	r3, r3
 80077ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80077ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077b0:	fab3 f383 	clz	r3, r3
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d106      	bne.n	80077c8 <HAL_ADCEx_InjectedConfigChannel+0x528>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2200      	movs	r2, #0
 80077c0:	2103      	movs	r1, #3
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff fa7c 	bl	8006cc0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff fb23 	bl	8006e18 <LL_ADC_IsEnabled>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 810c 	bne.w	80079f2 <HAL_ADCEx_InjectedConfigChannel+0x752>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	6819      	ldr	r1, [r3, #0]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f7ff faf2 	bl	8006dd0 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4aa8      	ldr	r2, [pc, #672]	; (8007a94 <HAL_ADCEx_InjectedConfigChannel+0x7f4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	f040 80fd 	bne.w	80079f2 <HAL_ADCEx_InjectedConfigChannel+0x752>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10b      	bne.n	8007820 <HAL_ADCEx_InjectedConfigChannel+0x580>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	0e9b      	lsrs	r3, r3, #26
 800780e:	3301      	adds	r3, #1
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2b09      	cmp	r3, #9
 8007816:	bf94      	ite	ls
 8007818:	2301      	movls	r3, #1
 800781a:	2300      	movhi	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	e012      	b.n	8007846 <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007828:	fa93 f3a3 	rbit	r3, r3
 800782c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800782e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007830:	fab3 f383 	clz	r3, r3
 8007834:	b2db      	uxtb	r3, r3
 8007836:	3301      	adds	r3, #1
 8007838:	f003 031f 	and.w	r3, r3, #31
 800783c:	2b09      	cmp	r3, #9
 800783e:	bf94      	ite	ls
 8007840:	2301      	movls	r3, #1
 8007842:	2300      	movhi	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d064      	beq.n	8007914 <HAL_ADCEx_InjectedConfigChannel+0x674>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007852:	2b00      	cmp	r3, #0
 8007854:	d107      	bne.n	8007866 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	0e9b      	lsrs	r3, r3, #26
 800785c:	3301      	adds	r3, #1
 800785e:	069b      	lsls	r3, r3, #26
 8007860:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007864:	e00e      	b.n	8007884 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800786e:	fa93 f3a3 	rbit	r3, r3
 8007872:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	fab3 f383 	clz	r3, r3
 800787a:	b2db      	uxtb	r3, r3
 800787c:	3301      	adds	r3, #1
 800787e:	069b      	lsls	r3, r3, #26
 8007880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	0e9b      	lsrs	r3, r3, #26
 8007896:	3301      	adds	r3, #1
 8007898:	f003 031f 	and.w	r3, r3, #31
 800789c:	2101      	movs	r1, #1
 800789e:	fa01 f303 	lsl.w	r3, r1, r3
 80078a2:	e010      	b.n	80078c6 <HAL_ADCEx_InjectedConfigChannel+0x626>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	fa93 f3a3 	rbit	r3, r3
 80078b0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	fab3 f383 	clz	r3, r3
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	3301      	adds	r3, #1
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2101      	movs	r1, #1
 80078c2:	fa01 f303 	lsl.w	r3, r1, r3
 80078c6:	ea42 0103 	orr.w	r1, r2, r3
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <HAL_ADCEx_InjectedConfigChannel+0x64c>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	0e9b      	lsrs	r3, r3, #26
 80078dc:	3301      	adds	r3, #1
 80078de:	f003 021f 	and.w	r2, r3, #31
 80078e2:	4613      	mov	r3, r2
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	4413      	add	r3, r2
 80078e8:	051b      	lsls	r3, r3, #20
 80078ea:	e011      	b.n	8007910 <HAL_ADCEx_InjectedConfigChannel+0x670>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	fa93 f3a3 	rbit	r3, r3
 80078f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	fab3 f383 	clz	r3, r3
 8007900:	b2db      	uxtb	r3, r3
 8007902:	3301      	adds	r3, #1
 8007904:	f003 021f 	and.w	r2, r3, #31
 8007908:	4613      	mov	r3, r2
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	4413      	add	r3, r2
 800790e:	051b      	lsls	r3, r3, #20
 8007910:	430b      	orrs	r3, r1
 8007912:	e069      	b.n	80079e8 <HAL_ADCEx_InjectedConfigChannel+0x748>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800791c:	2b00      	cmp	r3, #0
 800791e:	d107      	bne.n	8007930 <HAL_ADCEx_InjectedConfigChannel+0x690>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	0e9b      	lsrs	r3, r3, #26
 8007926:	3301      	adds	r3, #1
 8007928:	069b      	lsls	r3, r3, #26
 800792a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800792e:	e00e      	b.n	800794e <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	fa93 f3a3 	rbit	r3, r3
 800793c:	623b      	str	r3, [r7, #32]
  return result;
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	fab3 f383 	clz	r3, r3
 8007944:	b2db      	uxtb	r3, r3
 8007946:	3301      	adds	r3, #1
 8007948:	069b      	lsls	r3, r3, #26
 800794a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	0e9b      	lsrs	r3, r3, #26
 8007960:	3301      	adds	r3, #1
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2101      	movs	r1, #1
 8007968:	fa01 f303 	lsl.w	r3, r1, r3
 800796c:	e010      	b.n	8007990 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	fa93 f3a3 	rbit	r3, r3
 800797a:	61bb      	str	r3, [r7, #24]
  return result;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	fab3 f383 	clz	r3, r3
 8007982:	b2db      	uxtb	r3, r3
 8007984:	3301      	adds	r3, #1
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	2101      	movs	r1, #1
 800798c:	fa01 f303 	lsl.w	r3, r1, r3
 8007990:	ea42 0103 	orr.w	r1, r2, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10d      	bne.n	80079bc <HAL_ADCEx_InjectedConfigChannel+0x71c>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	0e9b      	lsrs	r3, r3, #26
 80079a6:	3301      	adds	r3, #1
 80079a8:	f003 021f 	and.w	r2, r3, #31
 80079ac:	4613      	mov	r3, r2
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	4413      	add	r3, r2
 80079b2:	3b1e      	subs	r3, #30
 80079b4:	051b      	lsls	r3, r3, #20
 80079b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079ba:	e014      	b.n	80079e6 <HAL_ADCEx_InjectedConfigChannel+0x746>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	fa93 f3a3 	rbit	r3, r3
 80079c8:	613b      	str	r3, [r7, #16]
  return result;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	fab3 f383 	clz	r3, r3
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	3301      	adds	r3, #1
 80079d4:	f003 021f 	and.w	r2, r3, #31
 80079d8:	4613      	mov	r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	3b1e      	subs	r3, #30
 80079e0:	051b      	lsls	r3, r3, #20
 80079e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079e6:	430b      	orrs	r3, r1
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	6892      	ldr	r2, [r2, #8]
 80079ec:	4619      	mov	r1, r3
 80079ee:	f7ff f9c6 	bl	8006d7e <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4b28      	ldr	r3, [pc, #160]	; (8007a98 <HAL_ADCEx_InjectedConfigChannel+0x7f8>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d072      	beq.n	8007ae4 <HAL_ADCEx_InjectedConfigChannel+0x844>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80079fe:	4827      	ldr	r0, [pc, #156]	; (8007a9c <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8007a00:	f7ff f919 	bl	8006c36 <LL_ADC_GetCommonPathInternalCh>
 8007a04:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a24      	ldr	r2, [pc, #144]	; (8007aa0 <HAL_ADCEx_InjectedConfigChannel+0x800>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d126      	bne.n	8007a60 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007a12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d120      	bne.n	8007a60 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a20      	ldr	r2, [pc, #128]	; (8007aa4 <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d15d      	bne.n	8007ae4 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a30:	4619      	mov	r1, r3
 8007a32:	481a      	ldr	r0, [pc, #104]	; (8007a9c <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8007a34:	f7ff f8ec 	bl	8006c10 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007a38:	4b1b      	ldr	r3, [pc, #108]	; (8007aa8 <HAL_ADCEx_InjectedConfigChannel+0x808>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	099b      	lsrs	r3, r3, #6
 8007a3e:	4a1b      	ldr	r2, [pc, #108]	; (8007aac <HAL_ADCEx_InjectedConfigChannel+0x80c>)
 8007a40:	fba2 2303 	umull	r2, r3, r2, r3
 8007a44:	099a      	lsrs	r2, r3, #6
 8007a46:	4613      	mov	r3, r2
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8007a50:	e002      	b.n	8007a58 <HAL_ADCEx_InjectedConfigChannel+0x7b8>
        {
          wait_loop_index--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1f9      	bne.n	8007a52 <HAL_ADCEx_InjectedConfigChannel+0x7b2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a5e:	e041      	b.n	8007ae4 <HAL_ADCEx_InjectedConfigChannel+0x844>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <HAL_ADCEx_InjectedConfigChannel+0x810>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d124      	bne.n	8007ab4 <HAL_ADCEx_InjectedConfigChannel+0x814>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d11e      	bne.n	8007ab4 <HAL_ADCEx_InjectedConfigChannel+0x814>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a0a      	ldr	r2, [pc, #40]	; (8007aa4 <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d131      	bne.n	8007ae4 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4804      	ldr	r0, [pc, #16]	; (8007a9c <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8007a8c:	f7ff f8c0 	bl	8006c10 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a90:	e028      	b.n	8007ae4 <HAL_ADCEx_InjectedConfigChannel+0x844>
 8007a92:	bf00      	nop
 8007a94:	407f0000 	.word	0x407f0000
 8007a98:	80080000 	.word	0x80080000
 8007a9c:	50040300 	.word	0x50040300
 8007aa0:	c7520000 	.word	0xc7520000
 8007aa4:	50040000 	.word	0x50040000
 8007aa8:	20000038 	.word	0x20000038
 8007aac:	053e2d63 	.word	0x053e2d63
 8007ab0:	cb840000 	.word	0xcb840000
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a0f      	ldr	r2, [pc, #60]	; (8007af8 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d112      	bne.n	8007ae4 <HAL_ADCEx_InjectedConfigChannel+0x844>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10c      	bne.n	8007ae4 <HAL_ADCEx_InjectedConfigChannel+0x844>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a0b      	ldr	r2, [pc, #44]	; (8007afc <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d107      	bne.n	8007ae4 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007adc:	4619      	mov	r1, r3
 8007ade:	4808      	ldr	r0, [pc, #32]	; (8007b00 <HAL_ADCEx_InjectedConfigChannel+0x860>)
 8007ae0:	f7ff f896 	bl	8006c10 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007aec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	37a0      	adds	r7, #160	; 0xa0
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	80000001 	.word	0x80000001
 8007afc:	50040000 	.word	0x50040000
 8007b00:	50040300 	.word	0x50040300

08007b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b14:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <__NVIC_SetPriorityGrouping+0x44>)
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b20:	4013      	ands	r3, r2
 8007b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b36:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <__NVIC_SetPriorityGrouping+0x44>)
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	60d3      	str	r3, [r2, #12]
}
 8007b3c:	bf00      	nop
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	e000ed00 	.word	0xe000ed00

08007b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <__NVIC_GetPriorityGrouping+0x18>)
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	0a1b      	lsrs	r3, r3, #8
 8007b56:	f003 0307 	and.w	r3, r3, #7
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	e000ed00 	.word	0xe000ed00

08007b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	db0b      	blt.n	8007b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	f003 021f 	and.w	r2, r3, #31
 8007b80:	4907      	ldr	r1, [pc, #28]	; (8007ba0 <__NVIC_EnableIRQ+0x38>)
 8007b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b86:	095b      	lsrs	r3, r3, #5
 8007b88:	2001      	movs	r0, #1
 8007b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b92:	bf00      	nop
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	e000e100 	.word	0xe000e100

08007ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	6039      	str	r1, [r7, #0]
 8007bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	db0a      	blt.n	8007bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	490c      	ldr	r1, [pc, #48]	; (8007bf0 <__NVIC_SetPriority+0x4c>)
 8007bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bc2:	0112      	lsls	r2, r2, #4
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bcc:	e00a      	b.n	8007be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	4908      	ldr	r1, [pc, #32]	; (8007bf4 <__NVIC_SetPriority+0x50>)
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	3b04      	subs	r3, #4
 8007bdc:	0112      	lsls	r2, r2, #4
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	440b      	add	r3, r1
 8007be2:	761a      	strb	r2, [r3, #24]
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	e000e100 	.word	0xe000e100
 8007bf4:	e000ed00 	.word	0xe000ed00

08007bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b089      	sub	sp, #36	; 0x24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f1c3 0307 	rsb	r3, r3, #7
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	bf28      	it	cs
 8007c16:	2304      	movcs	r3, #4
 8007c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	2b06      	cmp	r3, #6
 8007c20:	d902      	bls.n	8007c28 <NVIC_EncodePriority+0x30>
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	3b03      	subs	r3, #3
 8007c26:	e000      	b.n	8007c2a <NVIC_EncodePriority+0x32>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	fa02 f303 	lsl.w	r3, r2, r3
 8007c36:	43da      	mvns	r2, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	401a      	ands	r2, r3
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c40:	f04f 31ff 	mov.w	r1, #4294967295
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4a:	43d9      	mvns	r1, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c50:	4313      	orrs	r3, r2
         );
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3724      	adds	r7, #36	; 0x24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c70:	d301      	bcc.n	8007c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c72:	2301      	movs	r3, #1
 8007c74:	e00f      	b.n	8007c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c76:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <SysTick_Config+0x40>)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c7e:	210f      	movs	r1, #15
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	f7ff ff8e 	bl	8007ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c88:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <SysTick_Config+0x40>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c8e:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <SysTick_Config+0x40>)
 8007c90:	2207      	movs	r2, #7
 8007c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	e000e010 	.word	0xe000e010

08007ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff ff29 	bl	8007b04 <__NVIC_SetPriorityGrouping>
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b086      	sub	sp, #24
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	607a      	str	r2, [r7, #4]
 8007cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ccc:	f7ff ff3e 	bl	8007b4c <__NVIC_GetPriorityGrouping>
 8007cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	6978      	ldr	r0, [r7, #20]
 8007cd8:	f7ff ff8e 	bl	8007bf8 <NVIC_EncodePriority>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff ff5d 	bl	8007ba4 <__NVIC_SetPriority>
}
 8007cea:	bf00      	nop
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7ff ff31 	bl	8007b68 <__NVIC_EnableIRQ>
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff ffa2 	bl	8007c60 <SysTick_Config>
 8007d1c:	4603      	mov	r3, r0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e08d      	b.n	8007e56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4b47      	ldr	r3, [pc, #284]	; (8007e60 <HAL_DMA_Init+0x138>)
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d80f      	bhi.n	8007d66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	4b45      	ldr	r3, [pc, #276]	; (8007e64 <HAL_DMA_Init+0x13c>)
 8007d4e:	4413      	add	r3, r2
 8007d50:	4a45      	ldr	r2, [pc, #276]	; (8007e68 <HAL_DMA_Init+0x140>)
 8007d52:	fba2 2303 	umull	r2, r3, r2, r3
 8007d56:	091b      	lsrs	r3, r3, #4
 8007d58:	009a      	lsls	r2, r3, #2
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a42      	ldr	r2, [pc, #264]	; (8007e6c <HAL_DMA_Init+0x144>)
 8007d62:	641a      	str	r2, [r3, #64]	; 0x40
 8007d64:	e00e      	b.n	8007d84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4b40      	ldr	r3, [pc, #256]	; (8007e70 <HAL_DMA_Init+0x148>)
 8007d6e:	4413      	add	r3, r2
 8007d70:	4a3d      	ldr	r2, [pc, #244]	; (8007e68 <HAL_DMA_Init+0x140>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	091b      	lsrs	r3, r3, #4
 8007d78:	009a      	lsls	r2, r3, #2
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a3c      	ldr	r2, [pc, #240]	; (8007e74 <HAL_DMA_Init+0x14c>)
 8007d82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f966 	bl	80080a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007de4:	d102      	bne.n	8007dec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007df4:	b2d2      	uxtb	r2, r2
 8007df6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e00:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d010      	beq.n	8007e2c <HAL_DMA_Init+0x104>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	d80c      	bhi.n	8007e2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f986 	bl	8008124 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007e28:	605a      	str	r2, [r3, #4]
 8007e2a:	e008      	b.n	8007e3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	40020407 	.word	0x40020407
 8007e64:	bffdfff8 	.word	0xbffdfff8
 8007e68:	cccccccd 	.word	0xcccccccd
 8007e6c:	40020000 	.word	0x40020000
 8007e70:	bffdfbf8 	.word	0xbffdfbf8
 8007e74:	40020400 	.word	0x40020400

08007e78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_DMA_Start_IT+0x20>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e066      	b.n	8007f66 <HAL_DMA_Start_IT+0xee>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d155      	bne.n	8007f58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0201 	bic.w	r2, r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	68b9      	ldr	r1, [r7, #8]
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 f8ab 	bl	800802c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d008      	beq.n	8007ef0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f042 020e 	orr.w	r2, r2, #14
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e00f      	b.n	8007f10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0204 	bic.w	r2, r2, #4
 8007efe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 020a 	orr.w	r2, r2, #10
 8007f0e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f2c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d007      	beq.n	8007f46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f44:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0201 	orr.w	r2, r2, #1
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	e005      	b.n	8007f64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f60:	2302      	movs	r3, #2
 8007f62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d005      	beq.n	8007f92 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2204      	movs	r2, #4
 8007f8a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	73fb      	strb	r3, [r7, #15]
 8007f90:	e047      	b.n	8008022 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 020e 	bic.w	r2, r2, #14
 8007fa0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0201 	bic.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	f003 021c 	and.w	r2, r3, #28
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	2101      	movs	r1, #1
 8007fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8007fd4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007fde:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00c      	beq.n	8008002 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ff6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008000:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
    }
  }
  return status;
 8008022:	7bfb      	ldrb	r3, [r7, #15]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008042:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008054:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805a:	f003 021c 	and.w	r2, r3, #28
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	2101      	movs	r1, #1
 8008064:	fa01 f202 	lsl.w	r2, r1, r2
 8008068:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b10      	cmp	r3, #16
 8008078:	d108      	bne.n	800808c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800808a:	e007      	b.n	800809c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	60da      	str	r2, [r3, #12]
}
 800809c:	bf00      	nop
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	4b17      	ldr	r3, [pc, #92]	; (8008114 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d80a      	bhi.n	80080d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c0:	089b      	lsrs	r3, r3, #2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080c8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6493      	str	r3, [r2, #72]	; 0x48
 80080d0:	e007      	b.n	80080e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d6:	089b      	lsrs	r3, r3, #2
 80080d8:	009a      	lsls	r2, r3, #2
 80080da:	4b0f      	ldr	r3, [pc, #60]	; (8008118 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80080dc:	4413      	add	r3, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	3b08      	subs	r3, #8
 80080ea:	4a0c      	ldr	r2, [pc, #48]	; (800811c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80080ec:	fba2 2303 	umull	r2, r3, r2, r3
 80080f0:	091b      	lsrs	r3, r3, #4
 80080f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80080f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f003 031f 	and.w	r3, r3, #31
 8008100:	2201      	movs	r2, #1
 8008102:	409a      	lsls	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008108:	bf00      	nop
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	40020407 	.word	0x40020407
 8008118:	4002081c 	.word	0x4002081c
 800811c:	cccccccd 	.word	0xcccccccd
 8008120:	40020880 	.word	0x40020880

08008124 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a08      	ldr	r2, [pc, #32]	; (8008168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008146:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3b01      	subs	r3, #1
 800814c:	f003 0303 	and.w	r3, r3, #3
 8008150:	2201      	movs	r2, #1
 8008152:	409a      	lsls	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008158:	bf00      	nop
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	1000823f 	.word	0x1000823f
 8008168:	40020940 	.word	0x40020940

0800816c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	460b      	mov	r3, r1
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d103      	bne.n	800818c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]
      break;
 800818a:	e002      	b.n	8008192 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	75fb      	strb	r3, [r7, #23]
      break;
 8008190:	bf00      	nop
  }

  return status;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
}
 8008194:	4618      	mov	r0, r3
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e003      	b.n	80081bc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80081ba:	2300      	movs	r3, #0
  }
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	0c1b      	lsrs	r3, r3, #16
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 031f 	and.w	r3, r3, #31
 80081e4:	2201      	movs	r2, #1
 80081e6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ea:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <HAL_EXTI_IRQHandler+0x5c>)
 80081f2:	4413      	add	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4013      	ands	r3, r2
 80081fe:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d009      	beq.n	800821a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	4798      	blx	r3
    }
  }
}
 800821a:	bf00      	nop
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	40010414 	.word	0x40010414

08008228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008232:	2300      	movs	r3, #0
 8008234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008236:	e166      	b.n	8008506 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	2101      	movs	r1, #1
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	fa01 f303 	lsl.w	r3, r1, r3
 8008244:	4013      	ands	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 8158 	beq.w	8008500 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d003      	beq.n	8008260 <HAL_GPIO_Init+0x38>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2b12      	cmp	r3, #18
 800825e:	d123      	bne.n	80082a8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	08da      	lsrs	r2, r3, #3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3208      	adds	r2, #8
 8008268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	220f      	movs	r2, #15
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	43db      	mvns	r3, r3
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4013      	ands	r3, r2
 8008282:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	08da      	lsrs	r2, r3, #3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3208      	adds	r2, #8
 80082a2:	6939      	ldr	r1, [r7, #16]
 80082a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	2203      	movs	r2, #3
 80082b4:	fa02 f303 	lsl.w	r3, r2, r3
 80082b8:	43db      	mvns	r3, r3
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4013      	ands	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f003 0203 	and.w	r2, r3, #3
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	fa02 f303 	lsl.w	r3, r2, r3
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d00b      	beq.n	80082fc <HAL_GPIO_Init+0xd4>
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d007      	beq.n	80082fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80082f0:	2b11      	cmp	r3, #17
 80082f2:	d003      	beq.n	80082fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b12      	cmp	r3, #18
 80082fa:	d130      	bne.n	800835e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	2203      	movs	r2, #3
 8008308:	fa02 f303 	lsl.w	r3, r2, r3
 800830c:	43db      	mvns	r3, r3
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	4013      	ands	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	fa02 f303 	lsl.w	r3, r2, r3
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008332:	2201      	movs	r2, #1
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	43db      	mvns	r3, r3
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4013      	ands	r3, r2
 8008340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	091b      	lsrs	r3, r3, #4
 8008348:	f003 0201 	and.w	r2, r3, #1
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	fa02 f303 	lsl.w	r3, r2, r3
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	4313      	orrs	r3, r2
 8008356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	2203      	movs	r2, #3
 800836a:	fa02 f303 	lsl.w	r3, r2, r3
 800836e:	43db      	mvns	r3, r3
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4013      	ands	r3, r2
 8008374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4313      	orrs	r3, r2
 8008386:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 80b2 	beq.w	8008500 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800839c:	4b61      	ldr	r3, [pc, #388]	; (8008524 <HAL_GPIO_Init+0x2fc>)
 800839e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a0:	4a60      	ldr	r2, [pc, #384]	; (8008524 <HAL_GPIO_Init+0x2fc>)
 80083a2:	f043 0301 	orr.w	r3, r3, #1
 80083a6:	6613      	str	r3, [r2, #96]	; 0x60
 80083a8:	4b5e      	ldr	r3, [pc, #376]	; (8008524 <HAL_GPIO_Init+0x2fc>)
 80083aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80083b4:	4a5c      	ldr	r2, [pc, #368]	; (8008528 <HAL_GPIO_Init+0x300>)
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	089b      	lsrs	r3, r3, #2
 80083ba:	3302      	adds	r3, #2
 80083bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	220f      	movs	r2, #15
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	43db      	mvns	r3, r3
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4013      	ands	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80083de:	d02b      	beq.n	8008438 <HAL_GPIO_Init+0x210>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a52      	ldr	r2, [pc, #328]	; (800852c <HAL_GPIO_Init+0x304>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d025      	beq.n	8008434 <HAL_GPIO_Init+0x20c>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a51      	ldr	r2, [pc, #324]	; (8008530 <HAL_GPIO_Init+0x308>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d01f      	beq.n	8008430 <HAL_GPIO_Init+0x208>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a50      	ldr	r2, [pc, #320]	; (8008534 <HAL_GPIO_Init+0x30c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d019      	beq.n	800842c <HAL_GPIO_Init+0x204>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a4f      	ldr	r2, [pc, #316]	; (8008538 <HAL_GPIO_Init+0x310>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <HAL_GPIO_Init+0x200>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a4e      	ldr	r2, [pc, #312]	; (800853c <HAL_GPIO_Init+0x314>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00d      	beq.n	8008424 <HAL_GPIO_Init+0x1fc>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a4d      	ldr	r2, [pc, #308]	; (8008540 <HAL_GPIO_Init+0x318>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d007      	beq.n	8008420 <HAL_GPIO_Init+0x1f8>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a4c      	ldr	r2, [pc, #304]	; (8008544 <HAL_GPIO_Init+0x31c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d101      	bne.n	800841c <HAL_GPIO_Init+0x1f4>
 8008418:	2307      	movs	r3, #7
 800841a:	e00e      	b.n	800843a <HAL_GPIO_Init+0x212>
 800841c:	2308      	movs	r3, #8
 800841e:	e00c      	b.n	800843a <HAL_GPIO_Init+0x212>
 8008420:	2306      	movs	r3, #6
 8008422:	e00a      	b.n	800843a <HAL_GPIO_Init+0x212>
 8008424:	2305      	movs	r3, #5
 8008426:	e008      	b.n	800843a <HAL_GPIO_Init+0x212>
 8008428:	2304      	movs	r3, #4
 800842a:	e006      	b.n	800843a <HAL_GPIO_Init+0x212>
 800842c:	2303      	movs	r3, #3
 800842e:	e004      	b.n	800843a <HAL_GPIO_Init+0x212>
 8008430:	2302      	movs	r3, #2
 8008432:	e002      	b.n	800843a <HAL_GPIO_Init+0x212>
 8008434:	2301      	movs	r3, #1
 8008436:	e000      	b.n	800843a <HAL_GPIO_Init+0x212>
 8008438:	2300      	movs	r3, #0
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	f002 0203 	and.w	r2, r2, #3
 8008440:	0092      	lsls	r2, r2, #2
 8008442:	4093      	lsls	r3, r2
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	4313      	orrs	r3, r2
 8008448:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800844a:	4937      	ldr	r1, [pc, #220]	; (8008528 <HAL_GPIO_Init+0x300>)
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	089b      	lsrs	r3, r3, #2
 8008450:	3302      	adds	r3, #2
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008458:	4b3b      	ldr	r3, [pc, #236]	; (8008548 <HAL_GPIO_Init+0x320>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	43db      	mvns	r3, r3
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4013      	ands	r3, r2
 8008466:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4313      	orrs	r3, r2
 800847a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800847c:	4a32      	ldr	r2, [pc, #200]	; (8008548 <HAL_GPIO_Init+0x320>)
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008482:	4b31      	ldr	r3, [pc, #196]	; (8008548 <HAL_GPIO_Init+0x320>)
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	43db      	mvns	r3, r3
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	4013      	ands	r3, r2
 8008490:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80084a6:	4a28      	ldr	r2, [pc, #160]	; (8008548 <HAL_GPIO_Init+0x320>)
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80084ac:	4b26      	ldr	r3, [pc, #152]	; (8008548 <HAL_GPIO_Init+0x320>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	43db      	mvns	r3, r3
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	4013      	ands	r3, r2
 80084ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80084d0:	4a1d      	ldr	r2, [pc, #116]	; (8008548 <HAL_GPIO_Init+0x320>)
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80084d6:	4b1c      	ldr	r3, [pc, #112]	; (8008548 <HAL_GPIO_Init+0x320>)
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	43db      	mvns	r3, r3
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	4013      	ands	r3, r2
 80084e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80084fa:	4a13      	ldr	r2, [pc, #76]	; (8008548 <HAL_GPIO_Init+0x320>)
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	3301      	adds	r3, #1
 8008504:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	fa22 f303 	lsr.w	r3, r2, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	f47f ae91 	bne.w	8008238 <HAL_GPIO_Init+0x10>
  }
}
 8008516:	bf00      	nop
 8008518:	bf00      	nop
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	40021000 	.word	0x40021000
 8008528:	40010000 	.word	0x40010000
 800852c:	48000400 	.word	0x48000400
 8008530:	48000800 	.word	0x48000800
 8008534:	48000c00 	.word	0x48000c00
 8008538:	48001000 	.word	0x48001000
 800853c:	48001400 	.word	0x48001400
 8008540:	48001800 	.word	0x48001800
 8008544:	48001c00 	.word	0x48001c00
 8008548:	40010400 	.word	0x40010400

0800854c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	887b      	ldrh	r3, [r7, #2]
 800855e:	4013      	ands	r3, r2
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008564:	2301      	movs	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]
 8008568:	e001      	b.n	800856e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800856a:	2300      	movs	r3, #0
 800856c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	807b      	strh	r3, [r7, #2]
 8008588:	4613      	mov	r3, r2
 800858a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800858c:	787b      	ldrb	r3, [r7, #1]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008592:	887a      	ldrh	r2, [r7, #2]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008598:	e002      	b.n	80085a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800859a:	887a      	ldrh	r2, [r7, #2]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	695a      	ldr	r2, [r3, #20]
 80085bc:	887b      	ldrh	r3, [r7, #2]
 80085be:	4013      	ands	r3, r2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80085c4:	887a      	ldrh	r2, [r7, #2]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80085ca:	e002      	b.n	80085d2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80085cc:	887a      	ldrh	r2, [r7, #2]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	619a      	str	r2, [r3, #24]
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
	...

080085e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80085ea:	4b08      	ldr	r3, [pc, #32]	; (800860c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80085ec:	695a      	ldr	r2, [r3, #20]
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	4013      	ands	r3, r2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d006      	beq.n	8008604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80085f6:	4a05      	ldr	r2, [pc, #20]	; (800860c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80085f8:	88fb      	ldrh	r3, [r7, #6]
 80085fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80085fc:	88fb      	ldrh	r3, [r7, #6]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fa ff00 	bl	8003404 <HAL_GPIO_EXTI_Callback>
  }
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	40010400 	.word	0x40010400

08008610 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862c:	2b00      	cmp	r3, #0
 800862e:	d005      	beq.n	800863c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	68f9      	ldr	r1, [r7, #12]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	4798      	blx	r3
  }
}
 800863c:	bf00      	nop
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	d010      	beq.n	800868a <HAL_I2C_ER_IRQHandler+0x46>
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	09db      	lsrs	r3, r3, #7
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00a      	beq.n	800868a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008678:	f043 0201 	orr.w	r2, r3, #1
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008688:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	0a9b      	lsrs	r3, r3, #10
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d010      	beq.n	80086b8 <HAL_I2C_ER_IRQHandler+0x74>
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	09db      	lsrs	r3, r3, #7
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00a      	beq.n	80086b8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a6:	f043 0208 	orr.w	r2, r3, #8
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	0a5b      	lsrs	r3, r3, #9
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d010      	beq.n	80086e6 <HAL_I2C_ER_IRQHandler+0xa2>
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	09db      	lsrs	r3, r3, #7
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d4:	f043 0202 	orr.w	r2, r3, #2
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f003 030b 	and.w	r3, r3, #11
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 faf9 	bl	8008cf0 <I2C_ITError>
  }
}
 80086fe:	bf00      	nop
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b086      	sub	sp, #24
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008722:	2b01      	cmp	r3, #1
 8008724:	d101      	bne.n	800872a <I2C_Slave_ISR_IT+0x24>
 8008726:	2302      	movs	r3, #2
 8008728:	e0ec      	b.n	8008904 <I2C_Slave_ISR_IT+0x1fe>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	095b      	lsrs	r3, r3, #5
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d009      	beq.n	8008752 <I2C_Slave_ISR_IT+0x4c>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	095b      	lsrs	r3, r3, #5
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800874a:	6939      	ldr	r1, [r7, #16]
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f99f 	bl	8008a90 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	091b      	lsrs	r3, r3, #4
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d04d      	beq.n	80087fa <I2C_Slave_ISR_IT+0xf4>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	091b      	lsrs	r3, r3, #4
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d047      	beq.n	80087fa <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d128      	bne.n	80087c6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b28      	cmp	r3, #40	; 0x28
 800877e:	d108      	bne.n	8008792 <I2C_Slave_ISR_IT+0x8c>
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008786:	d104      	bne.n	8008792 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008788:	6939      	ldr	r1, [r7, #16]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 fa5a 	bl	8008c44 <I2C_ITListenCplt>
 8008790:	e032      	b.n	80087f8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b29      	cmp	r3, #41	; 0x29
 800879c:	d10e      	bne.n	80087bc <I2C_Slave_ISR_IT+0xb6>
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80087a4:	d00a      	beq.n	80087bc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2210      	movs	r2, #16
 80087ac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 fb60 	bl	8008e74 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 f92b 	bl	8008a10 <I2C_ITSlaveSeqCplt>
 80087ba:	e01d      	b.n	80087f8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2210      	movs	r2, #16
 80087c2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80087c4:	e096      	b.n	80088f4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2210      	movs	r2, #16
 80087cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d2:	f043 0204 	orr.w	r2, r3, #4
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d004      	beq.n	80087ea <I2C_Slave_ISR_IT+0xe4>
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087e6:	f040 8085 	bne.w	80088f4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ee:	4619      	mov	r1, r3
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 fa7d 	bl	8008cf0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80087f6:	e07d      	b.n	80088f4 <I2C_Slave_ISR_IT+0x1ee>
 80087f8:	e07c      	b.n	80088f4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	089b      	lsrs	r3, r3, #2
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d030      	beq.n	8008868 <I2C_Slave_ISR_IT+0x162>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	089b      	lsrs	r3, r3, #2
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d02a      	beq.n	8008868 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008816:	b29b      	uxth	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d018      	beq.n	800884e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008838:	3b01      	subs	r3, #1
 800883a:	b29a      	uxth	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008844:	b29b      	uxth	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	b29a      	uxth	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008852:	b29b      	uxth	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d14f      	bne.n	80088f8 <I2C_Slave_ISR_IT+0x1f2>
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800885e:	d04b      	beq.n	80088f8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 f8d5 	bl	8008a10 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008866:	e047      	b.n	80088f8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	08db      	lsrs	r3, r3, #3
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <I2C_Slave_ISR_IT+0x184>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	08db      	lsrs	r3, r3, #3
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008880:	6939      	ldr	r1, [r7, #16]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 f842 	bl	800890c <I2C_ITAddrCplt>
 8008888:	e037      	b.n	80088fa <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	085b      	lsrs	r3, r3, #1
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d031      	beq.n	80088fa <I2C_Slave_ISR_IT+0x1f4>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d02b      	beq.n	80088fa <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d018      	beq.n	80088de <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	781a      	ldrb	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	851a      	strh	r2, [r3, #40]	; 0x28
 80088dc:	e00d      	b.n	80088fa <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088e4:	d002      	beq.n	80088ec <I2C_Slave_ISR_IT+0x1e6>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d106      	bne.n	80088fa <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 f88f 	bl	8008a10 <I2C_ITSlaveSeqCplt>
 80088f2:	e002      	b.n	80088fa <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80088f4:	bf00      	nop
 80088f6:	e000      	b.n	80088fa <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80088f8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008922:	2b28      	cmp	r3, #40	; 0x28
 8008924:	d168      	bne.n	80089f8 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	0c1b      	lsrs	r3, r3, #16
 800892e:	b2db      	uxtb	r3, r3
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	0c1b      	lsrs	r3, r3, #16
 800893e:	b29b      	uxth	r3, r3
 8008940:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008944:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	b29b      	uxth	r3, r3
 800894e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008952:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008960:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d137      	bne.n	80089da <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800896a:	897b      	ldrh	r3, [r7, #10]
 800896c:	09db      	lsrs	r3, r3, #7
 800896e:	b29a      	uxth	r2, r3
 8008970:	89bb      	ldrh	r3, [r7, #12]
 8008972:	4053      	eors	r3, r2
 8008974:	b29b      	uxth	r3, r3
 8008976:	f003 0306 	and.w	r3, r3, #6
 800897a:	2b00      	cmp	r3, #0
 800897c:	d11c      	bne.n	80089b8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800897e:	897b      	ldrh	r3, [r7, #10]
 8008980:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008990:	2b02      	cmp	r3, #2
 8008992:	d139      	bne.n	8008a08 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2208      	movs	r2, #8
 80089a0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	89ba      	ldrh	r2, [r7, #12]
 80089b0:	7bf9      	ldrb	r1, [r7, #15]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80089b6:	e027      	b.n	8008a08 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80089b8:	893b      	ldrh	r3, [r7, #8]
 80089ba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80089bc:	2104      	movs	r1, #4
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 faa2 	bl	8008f08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d0:	89ba      	ldrh	r2, [r7, #12]
 80089d2:	7bf9      	ldrb	r1, [r7, #15]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
}
 80089d8:	e016      	b.n	8008a08 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80089da:	2104      	movs	r1, #4
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fa93 	bl	8008f08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ee:	89ba      	ldrh	r2, [r7, #12]
 80089f0:	7bf9      	ldrb	r1, [r7, #15]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	4798      	blx	r3
}
 80089f6:	e007      	b.n	8008a08 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2208      	movs	r2, #8
 80089fe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008a08:	bf00      	nop
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b29      	cmp	r3, #41	; 0x29
 8008a2a:	d113      	bne.n	8008a54 <I2C_ITSlaveSeqCplt+0x44>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2228      	movs	r2, #40	; 0x28
 8008a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2221      	movs	r2, #33	; 0x21
 8008a38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fa63 	bl	8008f08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a52:	e018      	b.n	8008a86 <I2C_ITSlaveSeqCplt+0x76>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a5e:	d112      	bne.n	8008a86 <I2C_ITSlaveSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2228      	movs	r2, #40	; 0x28
 8008a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2222      	movs	r2, #34	; 0x22
 8008a6c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008a6e:	2102      	movs	r1, #2
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fa49 	bl	8008f08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008aae:	2107      	movs	r1, #7
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fa29 	bl	8008f08 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ac4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6859      	ldr	r1, [r3, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	4b5a      	ldr	r3, [pc, #360]	; (8008c3c <I2C_ITSlaveCplt+0x1ac>)
 8008ad2:	400b      	ands	r3, r1
 8008ad4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f9cc 	bl	8008e74 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	0b9b      	lsrs	r3, r3, #14
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00b      	beq.n	8008b00 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d018      	beq.n	8008b22 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008afe:	e010      	b.n	8008b22 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	0bdb      	lsrs	r3, r3, #15
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00a      	beq.n	8008b22 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d006      	beq.n	8008b22 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	089b      	lsrs	r3, r3, #2
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d020      	beq.n	8008b70 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f023 0304 	bic.w	r3, r3, #4
 8008b34:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	b2d2      	uxtb	r2, r2
 8008b42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00c      	beq.n	8008b70 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	f043 0204 	orr.w	r2, r3, #4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d010      	beq.n	8008bc4 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f8a1 	bl	8008cf0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b28      	cmp	r3, #40	; 0x28
 8008bb8:	d13b      	bne.n	8008c32 <I2C_ITSlaveCplt+0x1a2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008bba:	68f9      	ldr	r1, [r7, #12]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f841 	bl	8008c44 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008bc2:	e036      	b.n	8008c32 <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008bcc:	d012      	beq.n	8008bf4 <I2C_ITSlaveCplt+0x164>
    I2C_ITSlaveSeqCplt(hi2c);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7ff ff1e 	bl	8008a10 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a1a      	ldr	r2, [pc, #104]	; (8008c40 <I2C_ITSlaveCplt+0x1b0>)
 8008bd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	4798      	blx	r3
}
 8008bf2:	e01e      	b.n	8008c32 <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b22      	cmp	r3, #34	; 0x22
 8008bfe:	d10c      	bne.n	8008c1a <I2C_ITSlaveCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	4798      	blx	r3
}
 8008c18:	e00b      	b.n	8008c32 <I2C_ITSlaveCplt+0x1a2>
    hi2c->State = HAL_I2C_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	4798      	blx	r3
}
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	fe00e800 	.word	0xfe00e800
 8008c40:	ffff0000 	.word	0xffff0000

08008c44 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a26      	ldr	r2, [pc, #152]	; (8008cec <I2C_ITListenCplt+0xa8>)
 8008c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	089b      	lsrs	r3, r3, #2
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d022      	beq.n	8008cc2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d012      	beq.n	8008cc2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cba:	f043 0204 	orr.w	r2, r3, #4
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008cc2:	2107      	movs	r1, #7
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f91f 	bl	8008f08 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2210      	movs	r2, #16
 8008cd0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	ffff0000 	.word	0xffff0000

08008cf0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d00:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a56      	ldr	r2, [pc, #344]	; (8008e68 <I2C_ITError+0x178>)
 8008d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	2b28      	cmp	r3, #40	; 0x28
 8008d26:	d005      	beq.n	8008d34 <I2C_ITError+0x44>
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	2b29      	cmp	r3, #41	; 0x29
 8008d2c:	d002      	beq.n	8008d34 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	2b2a      	cmp	r3, #42	; 0x2a
 8008d32:	d10e      	bne.n	8008d52 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008d34:	2103      	movs	r1, #3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f8e6 	bl	8008f08 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2228      	movs	r2, #40	; 0x28
 8008d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a47      	ldr	r2, [pc, #284]	; (8008e6c <I2C_ITError+0x17c>)
 8008d4e:	635a      	str	r2, [r3, #52]	; 0x34
 8008d50:	e013      	b.n	8008d7a <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008d52:	2107      	movs	r1, #7
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f8d7 	bl	8008f08 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b60      	cmp	r3, #96	; 0x60
 8008d64:	d003      	beq.n	8008d6e <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d88:	d123      	bne.n	8008dd2 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d98:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d05e      	beq.n	8008e60 <I2C_ITError+0x170>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da6:	4a32      	ldr	r2, [pc, #200]	; (8008e70 <I2C_ITError+0x180>)
 8008da8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff f8d9 	bl	8007f6e <HAL_DMA_Abort_IT>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d04e      	beq.n	8008e60 <I2C_ITError+0x170>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008dd0:	e046      	b.n	8008e60 <I2C_ITError+0x170>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008de0:	d123      	bne.n	8008e2a <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008df0:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d032      	beq.n	8008e60 <I2C_ITError+0x170>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfe:	4a1c      	ldr	r2, [pc, #112]	; (8008e70 <I2C_ITError+0x180>)
 8008e00:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7ff f8ad 	bl	8007f6e <HAL_DMA_Abort_IT>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d022      	beq.n	8008e60 <I2C_ITError+0x170>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008e24:	4610      	mov	r0, r2
 8008e26:	4798      	blx	r3
}
 8008e28:	e01a      	b.n	8008e60 <I2C_ITError+0x170>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b60      	cmp	r3, #96	; 0x60
 8008e34:	d10c      	bne.n	8008e50 <I2C_ITError+0x160>
    hi2c->State = HAL_I2C_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->AbortCpltCallback(hi2c);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	4798      	blx	r3
}
 8008e4e:	e007      	b.n	8008e60 <I2C_ITError+0x170>
    __HAL_UNLOCK(hi2c);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	4798      	blx	r3
}
 8008e60:	bf00      	nop
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	ffff0000 	.word	0xffff0000
 8008e6c:	08008707 	.word	0x08008707
 8008e70:	08008ebd 	.word	0x08008ebd

08008e74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d103      	bne.n	8008e92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d007      	beq.n	8008eb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699a      	ldr	r2, [r3, #24]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0201 	orr.w	r2, r2, #1
 8008eae:	619a      	str	r2, [r3, #24]
  }
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ece:	2200      	movs	r2, #0
 8008ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b60      	cmp	r3, #96	; 0x60
 8008ee4:	d108      	bne.n	8008ef8 <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ef6:	e003      	b.n	8008f00 <I2C_DMAAbort+0x44>
    hi2c->ErrorCallback(hi2c);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	4798      	blx	r3
}
 8008f00:	bf00      	nop
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f18:	887b      	ldrh	r3, [r7, #2]
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00f      	beq.n	8008f42 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008f28:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f36:	2b28      	cmp	r3, #40	; 0x28
 8008f38:	d003      	beq.n	8008f42 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008f40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008f42:	887b      	ldrh	r3, [r7, #2]
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00f      	beq.n	8008f6c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008f52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f60:	2b28      	cmp	r3, #40	; 0x28
 8008f62:	d003      	beq.n	8008f6c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008f6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f6c:	887b      	ldrh	r3, [r7, #2]
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008f7c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8008f7e:	887b      	ldrh	r3, [r7, #2]
 8008f80:	f003 0311 	and.w	r3, r3, #17
 8008f84:	2b11      	cmp	r3, #17
 8008f86:	d103      	bne.n	8008f90 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008f8e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8008f90:	887b      	ldrh	r3, [r7, #2]
 8008f92:	f003 0312 	and.w	r3, r3, #18
 8008f96:	2b12      	cmp	r3, #18
 8008f98:	d103      	bne.n	8008fa2 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f043 0320 	orr.w	r3, r3, #32
 8008fa0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8008fa2:	887b      	ldrh	r3, [r7, #2]
 8008fa4:	f003 0312 	and.w	r3, r3, #18
 8008fa8:	2b12      	cmp	r3, #18
 8008faa:	d103      	bne.n	8008fb4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6819      	ldr	r1, [r3, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	43da      	mvns	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	400a      	ands	r2, r1
 8008fc4:	601a      	str	r2, [r3, #0]
}
 8008fc6:	bf00      	nop
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008fd2:	b590      	push	{r4, r7, lr}
 8008fd4:	b08d      	sub	sp, #52	; 0x34
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f008 fc72 	bl	80118d2 <USB_GetMode>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f040 838f 	bne.w	8009714 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f008 fbd6 	bl	80117ac <USB_ReadInterrupts>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 8385 	beq.w	8009712 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f008 fbcd 	bl	80117ac <USB_ReadInterrupts>
 8009012:	4603      	mov	r3, r0
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b02      	cmp	r3, #2
 800901a:	d107      	bne.n	800902c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695a      	ldr	r2, [r3, #20]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f002 0202 	and.w	r2, r2, #2
 800902a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4618      	mov	r0, r3
 8009032:	f008 fbbb 	bl	80117ac <USB_ReadInterrupts>
 8009036:	4603      	mov	r3, r0
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	2b10      	cmp	r3, #16
 800903e:	d161      	bne.n	8009104 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	699a      	ldr	r2, [r3, #24]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0210 	bic.w	r2, r2, #16
 800904e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	f003 020f 	and.w	r2, r3, #15
 800905c:	4613      	mov	r3, r2
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	1a9b      	subs	r3, r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	4413      	add	r3, r2
 800906c:	3304      	adds	r3, #4
 800906e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	0c5b      	lsrs	r3, r3, #17
 8009074:	f003 030f 	and.w	r3, r3, #15
 8009078:	2b02      	cmp	r3, #2
 800907a:	d124      	bne.n	80090c6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009082:	4013      	ands	r3, r2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d035      	beq.n	80090f4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	091b      	lsrs	r3, r3, #4
 8009090:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009096:	b29b      	uxth	r3, r3
 8009098:	461a      	mov	r2, r3
 800909a:	6a38      	ldr	r0, [r7, #32]
 800909c:	f008 fa63 	bl	8011566 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	68da      	ldr	r2, [r3, #12]
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	091b      	lsrs	r3, r3, #4
 80090a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090ac:	441a      	add	r2, r3
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	699a      	ldr	r2, [r3, #24]
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	091b      	lsrs	r3, r3, #4
 80090ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090be:	441a      	add	r2, r3
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	619a      	str	r2, [r3, #24]
 80090c4:	e016      	b.n	80090f4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	0c5b      	lsrs	r3, r3, #17
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	2b06      	cmp	r3, #6
 80090d0:	d110      	bne.n	80090f4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090d8:	2208      	movs	r2, #8
 80090da:	4619      	mov	r1, r3
 80090dc:	6a38      	ldr	r0, [r7, #32]
 80090de:	f008 fa42 	bl	8011566 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	699a      	ldr	r2, [r3, #24]
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	091b      	lsrs	r3, r3, #4
 80090ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090ee:	441a      	add	r2, r3
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0210 	orr.w	r2, r2, #16
 8009102:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f008 fb4f 	bl	80117ac <USB_ReadInterrupts>
 800910e:	4603      	mov	r3, r0
 8009110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009114:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009118:	d16e      	bne.n	80091f8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4618      	mov	r0, r3
 8009124:	f008 fb55 	bl	80117d2 <USB_ReadDevAllOutEpInterrupt>
 8009128:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800912a:	e062      	b.n	80091f2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	d057      	beq.n	80091e6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913c:	b2d2      	uxtb	r2, r2
 800913e:	4611      	mov	r1, r2
 8009140:	4618      	mov	r0, r3
 8009142:	f008 fb7a 	bl	801183a <USB_ReadDevOutEPInterrupt>
 8009146:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00c      	beq.n	800916c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915e:	461a      	mov	r2, r3
 8009160:	2301      	movs	r3, #1
 8009162:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fd20 	bl	8009bac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00c      	beq.n	8009190 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009182:	461a      	mov	r2, r3
 8009184:	2308      	movs	r3, #8
 8009186:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fd5c 	bl	8009c48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f003 0310 	and.w	r3, r3, #16
 8009196:	2b00      	cmp	r3, #0
 8009198:	d008      	beq.n	80091ac <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a6:	461a      	mov	r2, r3
 80091a8:	2310      	movs	r3, #16
 80091aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d008      	beq.n	80091c8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c2:	461a      	mov	r2, r3
 80091c4:	2320      	movs	r3, #32
 80091c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d009      	beq.n	80091e6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091de:	461a      	mov	r2, r3
 80091e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	3301      	adds	r3, #1
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	085b      	lsrs	r3, r3, #1
 80091f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d199      	bne.n	800912c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f008 fad5 	bl	80117ac <USB_ReadInterrupts>
 8009202:	4603      	mov	r3, r0
 8009204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009208:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800920c:	f040 8087 	bne.w	800931e <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4618      	mov	r0, r3
 8009216:	f008 faf6 	bl	8011806 <USB_ReadDevAllInEpInterrupt>
 800921a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009220:	e07a      	b.n	8009318 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d06f      	beq.n	800930c <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	4611      	mov	r1, r2
 8009236:	4618      	mov	r0, r3
 8009238:	f008 fb1d 	bl	8011876 <USB_ReadDevInEPInterrupt>
 800923c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d020      	beq.n	800928a <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	2201      	movs	r2, #1
 8009250:	fa02 f303 	lsl.w	r3, r2, r3
 8009254:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	43db      	mvns	r3, r3
 8009262:	69f9      	ldr	r1, [r7, #28]
 8009264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009268:	4013      	ands	r3, r2
 800926a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	461a      	mov	r2, r3
 800927a:	2301      	movs	r3, #1
 800927c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	b2db      	uxtb	r3, r3
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7fb fde6 	bl	8004e56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f003 0308 	and.w	r3, r3, #8
 8009290:	2b00      	cmp	r3, #0
 8009292:	d008      	beq.n	80092a6 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a0:	461a      	mov	r2, r3
 80092a2:	2308      	movs	r3, #8
 80092a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f003 0310 	and.w	r3, r3, #16
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d008      	beq.n	80092c2 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092bc:	461a      	mov	r2, r3
 80092be:	2310      	movs	r3, #16
 80092c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d008      	beq.n	80092de <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d8:	461a      	mov	r2, r3
 80092da:	2340      	movs	r3, #64	; 0x40
 80092dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d008      	beq.n	80092fa <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f4:	461a      	mov	r2, r3
 80092f6:	2302      	movs	r3, #2
 80092f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fbc7 	bl	8009a9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	3301      	adds	r3, #1
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	085b      	lsrs	r3, r3, #1
 8009316:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	2b00      	cmp	r3, #0
 800931c:	d181      	bne.n	8009222 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f008 fa42 	bl	80117ac <USB_ReadInterrupts>
 8009328:	4603      	mov	r3, r0
 800932a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800932e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009332:	d122      	bne.n	800937a <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	69fa      	ldr	r2, [r7, #28]
 800933e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009342:	f023 0301 	bic.w	r3, r3, #1
 8009346:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800934e:	2b01      	cmp	r3, #1
 8009350:	d108      	bne.n	8009364 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800935a:	2100      	movs	r1, #0
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fca7 	bl	8009cb0 <HAL_PCDEx_LPM_Callback>
 8009362:	e002      	b.n	800936a <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7fb fdc1 	bl	8004eec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	695a      	ldr	r2, [r3, #20]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4618      	mov	r0, r3
 8009380:	f008 fa14 	bl	80117ac <USB_ReadInterrupts>
 8009384:	4603      	mov	r3, r0
 8009386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800938a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800938e:	d112      	bne.n	80093b6 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b01      	cmp	r3, #1
 800939e:	d102      	bne.n	80093a6 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7fb fd95 	bl	8004ed0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695a      	ldr	r2, [r3, #20]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80093b4:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f008 f9f6 	bl	80117ac <USB_ReadInterrupts>
 80093c0:	4603      	mov	r3, r0
 80093c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093ca:	d121      	bne.n	8009410 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695a      	ldr	r2, [r3, #20]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80093da:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d111      	bne.n	800940a <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f4:	089b      	lsrs	r3, r3, #2
 80093f6:	f003 020f 	and.w	r2, r3, #15
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009400:	2101      	movs	r1, #1
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fc54 	bl	8009cb0 <HAL_PCDEx_LPM_Callback>
 8009408:	e002      	b.n	8009410 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fb fd60 	bl	8004ed0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4618      	mov	r0, r3
 8009416:	f008 f9c9 	bl	80117ac <USB_ReadInterrupts>
 800941a:	4603      	mov	r3, r0
 800941c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009424:	f040 80c5 	bne.w	80095b2 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	69fa      	ldr	r2, [r7, #28]
 8009432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009436:	f023 0301 	bic.w	r3, r3, #1
 800943a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2110      	movs	r1, #16
 8009442:	4618      	mov	r0, r3
 8009444:	f007 fc98 	bl	8010d78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009448:	2300      	movs	r3, #0
 800944a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800944c:	e056      	b.n	80094fc <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800944e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945a:	461a      	mov	r2, r3
 800945c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009460:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	4413      	add	r3, r2
 800946a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009472:	0151      	lsls	r1, r2, #5
 8009474:	69fa      	ldr	r2, [r7, #28]
 8009476:	440a      	add	r2, r1
 8009478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800947c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009480:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009492:	0151      	lsls	r1, r2, #5
 8009494:	69fa      	ldr	r2, [r7, #28]
 8009496:	440a      	add	r2, r1
 8009498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800949c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80094a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ae:	461a      	mov	r2, r3
 80094b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80094b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094c6:	0151      	lsls	r1, r2, #5
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	440a      	add	r2, r1
 80094cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80094d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	3301      	adds	r3, #1
 80094fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009502:	429a      	cmp	r2, r3
 8009504:	d3a3      	bcc.n	800944e <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	69fa      	ldr	r2, [r7, #28]
 8009510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009514:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009518:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951e:	2b00      	cmp	r3, #0
 8009520:	d016      	beq.n	8009550 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800952c:	69fa      	ldr	r2, [r7, #28]
 800952e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009532:	f043 030b 	orr.w	r3, r3, #11
 8009536:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009548:	f043 030b 	orr.w	r3, r3, #11
 800954c:	6453      	str	r3, [r2, #68]	; 0x44
 800954e:	e015      	b.n	800957c <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	69fa      	ldr	r2, [r7, #28]
 800955a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800955e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009562:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009566:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	69fa      	ldr	r2, [r7, #28]
 8009572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009576:	f043 030b 	orr.w	r3, r3, #11
 800957a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800958a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800958e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800959a:	4619      	mov	r1, r3
 800959c:	4610      	mov	r0, r2
 800959e:	f008 f9c9 	bl	8011934 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	695a      	ldr	r2, [r3, #20]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80095b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f008 f8f8 	bl	80117ac <USB_ReadInterrupts>
 80095bc:	4603      	mov	r3, r0
 80095be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095c6:	d124      	bne.n	8009612 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f008 f98e 	bl	80118ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f007 fbf4 	bl	8010dc4 <USB_GetDevSpeed>
 80095dc:	4603      	mov	r3, r0
 80095de:	461a      	mov	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681c      	ldr	r4, [r3, #0]
 80095e8:	f001 fae8 	bl	800abbc <HAL_RCC_GetHCLKFreq>
 80095ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	4620      	mov	r0, r4
 80095f8:	f007 fb22 	bl	8010c40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fb fc52 	bl	8004ea6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	695a      	ldr	r2, [r3, #20]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009610:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4618      	mov	r0, r3
 8009618:	f008 f8c8 	bl	80117ac <USB_ReadInterrupts>
 800961c:	4603      	mov	r3, r0
 800961e:	f003 0308 	and.w	r3, r3, #8
 8009622:	2b08      	cmp	r3, #8
 8009624:	d10a      	bne.n	800963c <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fb fc2f 	bl	8004e8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	695a      	ldr	r2, [r3, #20]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f002 0208 	and.w	r2, r2, #8
 800963a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4618      	mov	r0, r3
 8009642:	f008 f8b3 	bl	80117ac <USB_ReadInterrupts>
 8009646:	4603      	mov	r3, r0
 8009648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800964c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009650:	d10f      	bne.n	8009672 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	b2db      	uxtb	r3, r3
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7fb fc65 	bl	8004f2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	695a      	ldr	r2, [r3, #20]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4618      	mov	r0, r3
 8009678:	f008 f898 	bl	80117ac <USB_ReadInterrupts>
 800967c:	4603      	mov	r3, r0
 800967e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009686:	d10f      	bne.n	80096a8 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009688:	2300      	movs	r3, #0
 800968a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	b2db      	uxtb	r3, r3
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7fb fc38 	bl	8004f08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	695a      	ldr	r2, [r3, #20]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80096a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f008 f87d 	bl	80117ac <USB_ReadInterrupts>
 80096b2:	4603      	mov	r3, r0
 80096b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80096b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096bc:	d10a      	bne.n	80096d4 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7fb fc46 	bl	8004f50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	695a      	ldr	r2, [r3, #20]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80096d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4618      	mov	r0, r3
 80096da:	f008 f867 	bl	80117ac <USB_ReadInterrupts>
 80096de:	4603      	mov	r3, r0
 80096e0:	f003 0304 	and.w	r3, r3, #4
 80096e4:	2b04      	cmp	r3, #4
 80096e6:	d115      	bne.n	8009714 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	f003 0304 	and.w	r3, r3, #4
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7fb fc36 	bl	8004f6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6859      	ldr	r1, [r3, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	430a      	orrs	r2, r1
 800970e:	605a      	str	r2, [r3, #4]
 8009710:	e000      	b.n	8009714 <HAL_PCD_IRQHandler+0x742>
      return;
 8009712:	bf00      	nop
    }
  }
}
 8009714:	3734      	adds	r7, #52	; 0x34
 8009716:	46bd      	mov	sp, r7
 8009718:	bd90      	pop	{r4, r7, pc}

0800971a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800972c:	2b01      	cmp	r3, #1
 800972e:	d101      	bne.n	8009734 <HAL_PCD_SetAddress+0x1a>
 8009730:	2302      	movs	r3, #2
 8009732:	e013      	b.n	800975c <HAL_PCD_SetAddress+0x42>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	78fa      	ldrb	r2, [r7, #3]
 8009740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f008 f807 	bl	8011760 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	4608      	mov	r0, r1
 800976e:	4611      	mov	r1, r2
 8009770:	461a      	mov	r2, r3
 8009772:	4603      	mov	r3, r0
 8009774:	70fb      	strb	r3, [r7, #3]
 8009776:	460b      	mov	r3, r1
 8009778:	803b      	strh	r3, [r7, #0]
 800977a:	4613      	mov	r3, r2
 800977c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009786:	2b00      	cmp	r3, #0
 8009788:	da0f      	bge.n	80097aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	f003 020f 	and.w	r2, r3, #15
 8009790:	4613      	mov	r3, r2
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	3338      	adds	r3, #56	; 0x38
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	4413      	add	r3, r2
 800979e:	3304      	adds	r3, #4
 80097a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2201      	movs	r2, #1
 80097a6:	705a      	strb	r2, [r3, #1]
 80097a8:	e00f      	b.n	80097ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	f003 020f 	and.w	r2, r3, #15
 80097b0:	4613      	mov	r3, r2
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	4413      	add	r3, r2
 80097c0:	3304      	adds	r3, #4
 80097c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80097ca:	78fb      	ldrb	r3, [r7, #3]
 80097cc:	f003 030f 	and.w	r3, r3, #15
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80097d6:	883a      	ldrh	r2, [r7, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	78ba      	ldrb	r2, [r7, #2]
 80097e0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80097f4:	78bb      	ldrb	r3, [r7, #2]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d102      	bne.n	8009800 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009806:	2b01      	cmp	r3, #1
 8009808:	d101      	bne.n	800980e <HAL_PCD_EP_Open+0xaa>
 800980a:	2302      	movs	r3, #2
 800980c:	e00e      	b.n	800982c <HAL_PCD_EP_Open+0xc8>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68f9      	ldr	r1, [r7, #12]
 800981c:	4618      	mov	r0, r3
 800981e:	f007 faf0 	bl	8010e02 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800982a:	7afb      	ldrb	r3, [r7, #11]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	607a      	str	r2, [r7, #4]
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	460b      	mov	r3, r1
 8009842:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	f003 020f 	and.w	r2, r3, #15
 800984a:	4613      	mov	r3, r2
 800984c:	00db      	lsls	r3, r3, #3
 800984e:	1a9b      	subs	r3, r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4413      	add	r3, r2
 800985a:	3304      	adds	r3, #4
 800985c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2200      	movs	r2, #0
 800986e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	2200      	movs	r2, #0
 8009874:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009876:	7afb      	ldrb	r3, [r7, #11]
 8009878:	f003 030f 	and.w	r3, r3, #15
 800987c:	b2da      	uxtb	r2, r3
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009882:	7afb      	ldrb	r3, [r7, #11]
 8009884:	f003 030f 	and.w	r3, r3, #15
 8009888:	2b00      	cmp	r3, #0
 800988a:	d106      	bne.n	800989a <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6979      	ldr	r1, [r7, #20]
 8009892:	4618      	mov	r0, r3
 8009894:	f007 fd18 	bl	80112c8 <USB_EP0StartXfer>
 8009898:	e005      	b.n	80098a6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6979      	ldr	r1, [r7, #20]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f007 fb35 	bl	8010f10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	607a      	str	r2, [r7, #4]
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	460b      	mov	r3, r1
 80098be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098c0:	7afb      	ldrb	r3, [r7, #11]
 80098c2:	f003 020f 	and.w	r2, r3, #15
 80098c6:	4613      	mov	r3, r2
 80098c8:	00db      	lsls	r3, r3, #3
 80098ca:	1a9b      	subs	r3, r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	3338      	adds	r3, #56	; 0x38
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	3304      	adds	r3, #4
 80098d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	2200      	movs	r2, #0
 80098e8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2201      	movs	r2, #1
 80098ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80098f0:	7afb      	ldrb	r3, [r7, #11]
 80098f2:	f003 030f 	and.w	r3, r3, #15
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80098fc:	7afb      	ldrb	r3, [r7, #11]
 80098fe:	f003 030f 	and.w	r3, r3, #15
 8009902:	2b00      	cmp	r3, #0
 8009904:	d106      	bne.n	8009914 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6979      	ldr	r1, [r7, #20]
 800990c:	4618      	mov	r0, r3
 800990e:	f007 fcdb 	bl	80112c8 <USB_EP0StartXfer>
 8009912:	e005      	b.n	8009920 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6979      	ldr	r1, [r7, #20]
 800991a:	4618      	mov	r0, r3
 800991c:	f007 faf8 	bl	8010f10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3718      	adds	r7, #24
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	460b      	mov	r3, r1
 8009934:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009936:	78fb      	ldrb	r3, [r7, #3]
 8009938:	f003 020f 	and.w	r2, r3, #15
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	429a      	cmp	r2, r3
 8009942:	d901      	bls.n	8009948 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e04e      	b.n	80099e6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800994c:	2b00      	cmp	r3, #0
 800994e:	da0f      	bge.n	8009970 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	f003 020f 	and.w	r2, r3, #15
 8009956:	4613      	mov	r3, r2
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	3338      	adds	r3, #56	; 0x38
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	4413      	add	r3, r2
 8009964:	3304      	adds	r3, #4
 8009966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	705a      	strb	r2, [r3, #1]
 800996e:	e00d      	b.n	800998c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009970:	78fa      	ldrb	r2, [r7, #3]
 8009972:	4613      	mov	r3, r2
 8009974:	00db      	lsls	r3, r3, #3
 8009976:	1a9b      	subs	r3, r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	4413      	add	r3, r2
 8009982:	3304      	adds	r3, #4
 8009984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2201      	movs	r2, #1
 8009990:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009992:	78fb      	ldrb	r3, [r7, #3]
 8009994:	f003 030f 	and.w	r3, r3, #15
 8009998:	b2da      	uxtb	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d101      	bne.n	80099ac <HAL_PCD_EP_SetStall+0x82>
 80099a8:	2302      	movs	r3, #2
 80099aa:	e01c      	b.n	80099e6 <HAL_PCD_EP_SetStall+0xbc>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68f9      	ldr	r1, [r7, #12]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f007 fdfc 	bl	80115b8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	f003 030f 	and.w	r3, r3, #15
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d108      	bne.n	80099dc <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80099d4:	4619      	mov	r1, r3
 80099d6:	4610      	mov	r0, r2
 80099d8:	f007 ffac 	bl	8011934 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	f003 020f 	and.w	r2, r3, #15
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d901      	bls.n	8009a0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e042      	b.n	8009a92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	da0f      	bge.n	8009a34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	f003 020f 	and.w	r2, r3, #15
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	1a9b      	subs	r3, r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	3338      	adds	r3, #56	; 0x38
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4413      	add	r3, r2
 8009a28:	3304      	adds	r3, #4
 8009a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	705a      	strb	r2, [r3, #1]
 8009a32:	e00f      	b.n	8009a54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	f003 020f 	and.w	r2, r3, #15
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	1a9b      	subs	r3, r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	4413      	add	r3, r2
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	f003 030f 	and.w	r3, r3, #15
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d101      	bne.n	8009a74 <HAL_PCD_EP_ClrStall+0x86>
 8009a70:	2302      	movs	r3, #2
 8009a72:	e00e      	b.n	8009a92 <HAL_PCD_EP_ClrStall+0xa4>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68f9      	ldr	r1, [r7, #12]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f007 fe06 	bl	8011694 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b088      	sub	sp, #32
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	1a9b      	subs	r3, r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	3338      	adds	r3, #56	; 0x38
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	4413      	add	r3, r2
 8009abe:	3304      	adds	r3, #4
 8009ac0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	699a      	ldr	r2, [r3, #24]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d901      	bls.n	8009ad2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e067      	b.n	8009ba2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	695a      	ldr	r2, [r3, #20]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	69fa      	ldr	r2, [r7, #28]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d902      	bls.n	8009aee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	3303      	adds	r3, #3
 8009af2:	089b      	lsrs	r3, r3, #2
 8009af4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009af6:	e026      	b.n	8009b46 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	695a      	ldr	r2, [r3, #20]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	69fa      	ldr	r2, [r7, #28]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d902      	bls.n	8009b14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	3303      	adds	r3, #3
 8009b18:	089b      	lsrs	r3, r3, #2
 8009b1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	68d9      	ldr	r1, [r3, #12]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	6978      	ldr	r0, [r7, #20]
 8009b2a:	f007 fceb 	bl	8011504 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	441a      	add	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	699a      	ldr	r2, [r3, #24]
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	441a      	add	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	69ba      	ldr	r2, [r7, #24]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d809      	bhi.n	8009b70 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	699a      	ldr	r2, [r3, #24]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d203      	bcs.n	8009b70 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1c3      	bne.n	8009af8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	695a      	ldr	r2, [r3, #20]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d811      	bhi.n	8009ba0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f003 030f 	and.w	r3, r3, #15
 8009b82:	2201      	movs	r2, #1
 8009b84:	fa02 f303 	lsl.w	r3, r2, r3
 8009b88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	43db      	mvns	r3, r3
 8009b96:	6939      	ldr	r1, [r7, #16]
 8009b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3720      	adds	r7, #32
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
	...

08009bac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	333c      	adds	r3, #60	; 0x3c
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4a19      	ldr	r2, [pc, #100]	; (8009c44 <PCD_EP_OutXfrComplete_int+0x98>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d124      	bne.n	8009c2c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00a      	beq.n	8009c02 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bfe:	6093      	str	r3, [r2, #8]
 8009c00:	e01a      	b.n	8009c38 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f003 0320 	and.w	r3, r3, #32
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d008      	beq.n	8009c1e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c18:	461a      	mov	r2, r3
 8009c1a:	2320      	movs	r3, #32
 8009c1c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7fb f8fb 	bl	8004e20 <HAL_PCD_DataOutStageCallback>
 8009c2a:	e005      	b.n	8009c38 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7fb f8f4 	bl	8004e20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	4f54310a 	.word	0x4f54310a

08009c48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	333c      	adds	r3, #60	; 0x3c
 8009c60:	3304      	adds	r3, #4
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4a0c      	ldr	r2, [pc, #48]	; (8009cac <PCD_EP_OutSetupPacket_int+0x64>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d90e      	bls.n	8009c9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d009      	beq.n	8009c9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c94:	461a      	mov	r2, r3
 8009c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7fb f8ad 	bl	8004dfc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	4f54300a 	.word	0x4f54300a

08009cb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a04      	ldr	r2, [pc, #16]	; (8009ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cd6:	6013      	str	r3, [r2, #0]
}
 8009cd8:	bf00      	nop
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	40007000 	.word	0x40007000

08009ce8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8009cf0:	4b2b      	ldr	r3, [pc, #172]	; (8009da0 <HAL_PWR_ConfigPVD+0xb8>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f023 020e 	bic.w	r2, r3, #14
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4928      	ldr	r1, [pc, #160]	; (8009da0 <HAL_PWR_ConfigPVD+0xb8>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8009d02:	4b28      	ldr	r3, [pc, #160]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	4a27      	ldr	r2, [pc, #156]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d0c:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8009d0e:	4b25      	ldr	r3, [pc, #148]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a24      	ldr	r2, [pc, #144]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d18:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8009d1a:	4b22      	ldr	r3, [pc, #136]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	4a21      	ldr	r2, [pc, #132]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d24:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8009d26:	4b1f      	ldr	r3, [pc, #124]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	4a1e      	ldr	r2, [pc, #120]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d30:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d005      	beq.n	8009d4a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8009d3e:	4b19      	ldr	r3, [pc, #100]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a18      	ldr	r2, [pc, #96]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d48:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d005      	beq.n	8009d62 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8009d56:	4b13      	ldr	r3, [pc, #76]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	4a12      	ldr	r2, [pc, #72]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d60:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d005      	beq.n	8009d7a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8009d6e:	4b0d      	ldr	r3, [pc, #52]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	4a0c      	ldr	r2, [pc, #48]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d78:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d005      	beq.n	8009d92 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8009d86:	4b07      	ldr	r3, [pc, #28]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	4a06      	ldr	r2, [pc, #24]	; (8009da4 <HAL_PWR_ConfigPVD+0xbc>)
 8009d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d90:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	40007000 	.word	0x40007000
 8009da4:	40010400 	.word	0x40010400

08009da8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8009da8:	b480      	push	{r7}
 8009daa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8009dac:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <HAL_PWR_EnablePVD+0x1c>)
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	4a04      	ldr	r2, [pc, #16]	; (8009dc4 <HAL_PWR_EnablePVD+0x1c>)
 8009db2:	f043 0301 	orr.w	r3, r3, #1
 8009db6:	6053      	str	r3, [r2, #4]
}
 8009db8:	bf00      	nop
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	40007000 	.word	0x40007000

08009dc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009dcc:	4b0d      	ldr	r3, [pc, #52]	; (8009e04 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dd8:	d102      	bne.n	8009de0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8009dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dde:	e00b      	b.n	8009df8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8009de0:	4b08      	ldr	r3, [pc, #32]	; (8009e04 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dee:	d102      	bne.n	8009df6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8009df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009df4:	e000      	b.n	8009df8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8009df6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	40007000 	.word	0x40007000

08009e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d141      	bne.n	8009e9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009e16:	4b4b      	ldr	r3, [pc, #300]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e22:	d131      	bne.n	8009e88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e24:	4b47      	ldr	r3, [pc, #284]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e2a:	4a46      	ldr	r2, [pc, #280]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e34:	4b43      	ldr	r3, [pc, #268]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009e3c:	4a41      	ldr	r2, [pc, #260]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009e44:	4b40      	ldr	r3, [pc, #256]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2232      	movs	r2, #50	; 0x32
 8009e4a:	fb02 f303 	mul.w	r3, r2, r3
 8009e4e:	4a3f      	ldr	r2, [pc, #252]	; (8009f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009e50:	fba2 2303 	umull	r2, r3, r2, r3
 8009e54:	0c9b      	lsrs	r3, r3, #18
 8009e56:	3301      	adds	r3, #1
 8009e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e5a:	e002      	b.n	8009e62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e62:	4b38      	ldr	r3, [pc, #224]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e6e:	d102      	bne.n	8009e76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1f2      	bne.n	8009e5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e76:	4b33      	ldr	r3, [pc, #204]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e82:	d158      	bne.n	8009f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e057      	b.n	8009f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e88:	4b2e      	ldr	r3, [pc, #184]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e8e:	4a2d      	ldr	r2, [pc, #180]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009e98:	e04d      	b.n	8009f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea0:	d141      	bne.n	8009f26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009ea2:	4b28      	ldr	r3, [pc, #160]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eae:	d131      	bne.n	8009f14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009eb0:	4b24      	ldr	r3, [pc, #144]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eb6:	4a23      	ldr	r2, [pc, #140]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ebc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009ec0:	4b20      	ldr	r3, [pc, #128]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ec8:	4a1e      	ldr	r2, [pc, #120]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ece:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009ed0:	4b1d      	ldr	r3, [pc, #116]	; (8009f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2232      	movs	r2, #50	; 0x32
 8009ed6:	fb02 f303 	mul.w	r3, r2, r3
 8009eda:	4a1c      	ldr	r2, [pc, #112]	; (8009f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009edc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee0:	0c9b      	lsrs	r3, r3, #18
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009ee6:	e002      	b.n	8009eee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009eee:	4b15      	ldr	r3, [pc, #84]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009efa:	d102      	bne.n	8009f02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1f2      	bne.n	8009ee8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009f02:	4b10      	ldr	r3, [pc, #64]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f04:	695b      	ldr	r3, [r3, #20]
 8009f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f0e:	d112      	bne.n	8009f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e011      	b.n	8009f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009f14:	4b0b      	ldr	r3, [pc, #44]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f1a:	4a0a      	ldr	r2, [pc, #40]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009f24:	e007      	b.n	8009f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009f26:	4b07      	ldr	r3, [pc, #28]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009f2e:	4a05      	ldr	r2, [pc, #20]	; (8009f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f34:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	40007000 	.word	0x40007000
 8009f48:	20000038 	.word	0x20000038
 8009f4c:	431bde83 	.word	0x431bde83

08009f50 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8009f54:	4b1c      	ldr	r3, [pc, #112]	; (8009fc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d005      	beq.n	8009f6c <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8009f60:	f7f9 fd48 	bl	80039f4 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8009f64:	4b18      	ldr	r3, [pc, #96]	; (8009fc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8009f66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009f6a:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8009f6c:	4b16      	ldr	r3, [pc, #88]	; (8009fc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8009f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f70:	f003 0308 	and.w	r3, r3, #8
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d004      	beq.n	8009f82 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8009f78:	f000 f828 	bl	8009fcc <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8009f7c:	4b12      	ldr	r3, [pc, #72]	; (8009fc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8009f7e:	2208      	movs	r2, #8
 8009f80:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8009f82:	4b11      	ldr	r3, [pc, #68]	; (8009fc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8009f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f86:	f003 0310 	and.w	r3, r3, #16
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d004      	beq.n	8009f98 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8009f8e:	f000 f824 	bl	8009fda <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8009f92:	4b0d      	ldr	r3, [pc, #52]	; (8009fc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8009f94:	2210      	movs	r2, #16
 8009f96:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8009f98:	4b0b      	ldr	r3, [pc, #44]	; (8009fc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8009f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9c:	f003 0320 	and.w	r3, r3, #32
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d004      	beq.n	8009fae <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8009fa4:	f000 f820 	bl	8009fe8 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8009fa8:	4b07      	ldr	r3, [pc, #28]	; (8009fc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8009faa:	2220      	movs	r2, #32
 8009fac:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8009fae:	4b06      	ldr	r3, [pc, #24]	; (8009fc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8009fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d004      	beq.n	8009fc4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8009fba:	f000 f81c 	bl	8009ff6 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8009fbe:	4b02      	ldr	r3, [pc, #8]	; (8009fc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8009fc0:	2240      	movs	r2, #64	; 0x40
 8009fc2:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8009fc4:	bf00      	nop
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	40010400 	.word	0x40010400

08009fcc <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8009fde:	bf00      	nop
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8009fec:	bf00      	nop
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8009ffa:	bf00      	nop
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d102      	bne.n	800a018 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	f000 bc16 	b.w	800a844 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a018:	4ba0      	ldr	r3, [pc, #640]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f003 030c 	and.w	r3, r3, #12
 800a020:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a022:	4b9e      	ldr	r3, [pc, #632]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f003 0303 	and.w	r3, r3, #3
 800a02a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0310 	and.w	r3, r3, #16
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 80e4 	beq.w	800a202 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d007      	beq.n	800a050 <HAL_RCC_OscConfig+0x4c>
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b0c      	cmp	r3, #12
 800a044:	f040 808b 	bne.w	800a15e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	f040 8087 	bne.w	800a15e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a050:	4b92      	ldr	r3, [pc, #584]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0302 	and.w	r3, r3, #2
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d005      	beq.n	800a068 <HAL_RCC_OscConfig+0x64>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d101      	bne.n	800a068 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e3ed      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a1a      	ldr	r2, [r3, #32]
 800a06c:	4b8b      	ldr	r3, [pc, #556]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0308 	and.w	r3, r3, #8
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <HAL_RCC_OscConfig+0x7e>
 800a078:	4b88      	ldr	r3, [pc, #544]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a080:	e005      	b.n	800a08e <HAL_RCC_OscConfig+0x8a>
 800a082:	4b86      	ldr	r3, [pc, #536]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a088:	091b      	lsrs	r3, r3, #4
 800a08a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a08e:	4293      	cmp	r3, r2
 800a090:	d223      	bcs.n	800a0da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	4618      	mov	r0, r3
 800a098:	f000 fdc8 	bl	800ac2c <RCC_SetFlashLatencyFromMSIRange>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e3ce      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a0a6:	4b7d      	ldr	r3, [pc, #500]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a7c      	ldr	r2, [pc, #496]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0ac:	f043 0308 	orr.w	r3, r3, #8
 800a0b0:	6013      	str	r3, [r2, #0]
 800a0b2:	4b7a      	ldr	r3, [pc, #488]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	4977      	ldr	r1, [pc, #476]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a0c4:	4b75      	ldr	r3, [pc, #468]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	021b      	lsls	r3, r3, #8
 800a0d2:	4972      	ldr	r1, [pc, #456]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	604b      	str	r3, [r1, #4]
 800a0d8:	e025      	b.n	800a126 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a0da:	4b70      	ldr	r3, [pc, #448]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a6f      	ldr	r2, [pc, #444]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0e0:	f043 0308 	orr.w	r3, r3, #8
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	4b6d      	ldr	r3, [pc, #436]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	496a      	ldr	r1, [pc, #424]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a0f8:	4b68      	ldr	r3, [pc, #416]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	021b      	lsls	r3, r3, #8
 800a106:	4965      	ldr	r1, [pc, #404]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d109      	bne.n	800a126 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	4618      	mov	r0, r3
 800a118:	f000 fd88 	bl	800ac2c <RCC_SetFlashLatencyFromMSIRange>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e38e      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a126:	f000 fcbf 	bl	800aaa8 <HAL_RCC_GetSysClockFreq>
 800a12a:	4602      	mov	r2, r0
 800a12c:	4b5b      	ldr	r3, [pc, #364]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	091b      	lsrs	r3, r3, #4
 800a132:	f003 030f 	and.w	r3, r3, #15
 800a136:	495a      	ldr	r1, [pc, #360]	; (800a2a0 <HAL_RCC_OscConfig+0x29c>)
 800a138:	5ccb      	ldrb	r3, [r1, r3]
 800a13a:	f003 031f 	and.w	r3, r3, #31
 800a13e:	fa22 f303 	lsr.w	r3, r2, r3
 800a142:	4a58      	ldr	r2, [pc, #352]	; (800a2a4 <HAL_RCC_OscConfig+0x2a0>)
 800a144:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a146:	4b58      	ldr	r3, [pc, #352]	; (800a2a8 <HAL_RCC_OscConfig+0x2a4>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fc f81e 	bl	800618c <HAL_InitTick>
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d052      	beq.n	800a200 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	e372      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d032      	beq.n	800a1cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a166:	4b4d      	ldr	r3, [pc, #308]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a4c      	ldr	r2, [pc, #304]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a16c:	f043 0301 	orr.w	r3, r3, #1
 800a170:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a172:	f7fc f857 	bl	8006224 <HAL_GetTick>
 800a176:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a178:	e008      	b.n	800a18c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a17a:	f7fc f853 	bl	8006224 <HAL_GetTick>
 800a17e:	4602      	mov	r2, r0
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	2b02      	cmp	r3, #2
 800a186:	d901      	bls.n	800a18c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e35b      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a18c:	4b43      	ldr	r3, [pc, #268]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d0f0      	beq.n	800a17a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a198:	4b40      	ldr	r3, [pc, #256]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a3f      	ldr	r2, [pc, #252]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a19e:	f043 0308 	orr.w	r3, r3, #8
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	4b3d      	ldr	r3, [pc, #244]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	493a      	ldr	r1, [pc, #232]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a1b6:	4b39      	ldr	r3, [pc, #228]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	4935      	ldr	r1, [pc, #212]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	604b      	str	r3, [r1, #4]
 800a1ca:	e01a      	b.n	800a202 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a1cc:	4b33      	ldr	r3, [pc, #204]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a32      	ldr	r2, [pc, #200]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a1d2:	f023 0301 	bic.w	r3, r3, #1
 800a1d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a1d8:	f7fc f824 	bl	8006224 <HAL_GetTick>
 800a1dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a1de:	e008      	b.n	800a1f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a1e0:	f7fc f820 	bl	8006224 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d901      	bls.n	800a1f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e328      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a1f2:	4b2a      	ldr	r3, [pc, #168]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1f0      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x1dc>
 800a1fe:	e000      	b.n	800a202 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a200:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d073      	beq.n	800a2f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	2b08      	cmp	r3, #8
 800a212:	d005      	beq.n	800a220 <HAL_RCC_OscConfig+0x21c>
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	2b0c      	cmp	r3, #12
 800a218:	d10e      	bne.n	800a238 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	d10b      	bne.n	800a238 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a220:	4b1e      	ldr	r3, [pc, #120]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d063      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x2f0>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d15f      	bne.n	800a2f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e305      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a240:	d106      	bne.n	800a250 <HAL_RCC_OscConfig+0x24c>
 800a242:	4b16      	ldr	r3, [pc, #88]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a15      	ldr	r2, [pc, #84]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	e01d      	b.n	800a28c <HAL_RCC_OscConfig+0x288>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a258:	d10c      	bne.n	800a274 <HAL_RCC_OscConfig+0x270>
 800a25a:	4b10      	ldr	r3, [pc, #64]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a0f      	ldr	r2, [pc, #60]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a0c      	ldr	r2, [pc, #48]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a26c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	e00b      	b.n	800a28c <HAL_RCC_OscConfig+0x288>
 800a274:	4b09      	ldr	r3, [pc, #36]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a08      	ldr	r2, [pc, #32]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a27a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	4b06      	ldr	r3, [pc, #24]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a05      	ldr	r2, [pc, #20]	; (800a29c <HAL_RCC_OscConfig+0x298>)
 800a286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a28a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d01b      	beq.n	800a2cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a294:	f7fb ffc6 	bl	8006224 <HAL_GetTick>
 800a298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a29a:	e010      	b.n	800a2be <HAL_RCC_OscConfig+0x2ba>
 800a29c:	40021000 	.word	0x40021000
 800a2a0:	08021a50 	.word	0x08021a50
 800a2a4:	20000038 	.word	0x20000038
 800a2a8:	20000078 	.word	0x20000078
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2ac:	f7fb ffba 	bl	8006224 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b64      	cmp	r3, #100	; 0x64
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e2c2      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a2be:	4baf      	ldr	r3, [pc, #700]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0f0      	beq.n	800a2ac <HAL_RCC_OscConfig+0x2a8>
 800a2ca:	e014      	b.n	800a2f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2cc:	f7fb ffaa 	bl	8006224 <HAL_GetTick>
 800a2d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a2d2:	e008      	b.n	800a2e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2d4:	f7fb ffa6 	bl	8006224 <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	2b64      	cmp	r3, #100	; 0x64
 800a2e0:	d901      	bls.n	800a2e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e2ae      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a2e6:	4ba5      	ldr	r3, [pc, #660]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1f0      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x2d0>
 800a2f2:	e000      	b.n	800a2f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0302 	and.w	r3, r3, #2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d060      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	2b04      	cmp	r3, #4
 800a306:	d005      	beq.n	800a314 <HAL_RCC_OscConfig+0x310>
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	2b0c      	cmp	r3, #12
 800a30c:	d119      	bne.n	800a342 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d116      	bne.n	800a342 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a314:	4b99      	ldr	r3, [pc, #612]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d005      	beq.n	800a32c <HAL_RCC_OscConfig+0x328>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e28b      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a32c:	4b93      	ldr	r3, [pc, #588]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	061b      	lsls	r3, r3, #24
 800a33a:	4990      	ldr	r1, [pc, #576]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a340:	e040      	b.n	800a3c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d023      	beq.n	800a392 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a34a:	4b8c      	ldr	r3, [pc, #560]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a8b      	ldr	r2, [pc, #556]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a356:	f7fb ff65 	bl	8006224 <HAL_GetTick>
 800a35a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a35c:	e008      	b.n	800a370 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a35e:	f7fb ff61 	bl	8006224 <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d901      	bls.n	800a370 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e269      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a370:	4b82      	ldr	r3, [pc, #520]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0f0      	beq.n	800a35e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a37c:	4b7f      	ldr	r3, [pc, #508]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	061b      	lsls	r3, r3, #24
 800a38a:	497c      	ldr	r1, [pc, #496]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	604b      	str	r3, [r1, #4]
 800a390:	e018      	b.n	800a3c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a392:	4b7a      	ldr	r3, [pc, #488]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a79      	ldr	r2, [pc, #484]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a39c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39e:	f7fb ff41 	bl	8006224 <HAL_GetTick>
 800a3a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a3a4:	e008      	b.n	800a3b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3a6:	f7fb ff3d 	bl	8006224 <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d901      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e245      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a3b8:	4b70      	ldr	r3, [pc, #448]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1f0      	bne.n	800a3a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0308 	and.w	r3, r3, #8
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d03c      	beq.n	800a44a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01c      	beq.n	800a412 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3d8:	4b68      	ldr	r3, [pc, #416]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a3da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3de:	4a67      	ldr	r2, [pc, #412]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a3e0:	f043 0301 	orr.w	r3, r3, #1
 800a3e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e8:	f7fb ff1c 	bl	8006224 <HAL_GetTick>
 800a3ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a3ee:	e008      	b.n	800a402 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3f0:	f7fb ff18 	bl	8006224 <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e220      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a402:	4b5e      	ldr	r3, [pc, #376]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d0ef      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x3ec>
 800a410:	e01b      	b.n	800a44a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a412:	4b5a      	ldr	r3, [pc, #360]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a418:	4a58      	ldr	r2, [pc, #352]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a41a:	f023 0301 	bic.w	r3, r3, #1
 800a41e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a422:	f7fb feff 	bl	8006224 <HAL_GetTick>
 800a426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a428:	e008      	b.n	800a43c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a42a:	f7fb fefb 	bl	8006224 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b02      	cmp	r3, #2
 800a436:	d901      	bls.n	800a43c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e203      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a43c:	4b4f      	ldr	r3, [pc, #316]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a43e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a442:	f003 0302 	and.w	r3, r3, #2
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1ef      	bne.n	800a42a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 80a6 	beq.w	800a5a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a458:	2300      	movs	r3, #0
 800a45a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a45c:	4b47      	ldr	r3, [pc, #284]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a45e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10d      	bne.n	800a484 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a468:	4b44      	ldr	r3, [pc, #272]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a46a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a46c:	4a43      	ldr	r2, [pc, #268]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a46e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a472:	6593      	str	r3, [r2, #88]	; 0x58
 800a474:	4b41      	ldr	r3, [pc, #260]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a47c:	60bb      	str	r3, [r7, #8]
 800a47e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a480:	2301      	movs	r3, #1
 800a482:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a484:	4b3e      	ldr	r3, [pc, #248]	; (800a580 <HAL_RCC_OscConfig+0x57c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d118      	bne.n	800a4c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a490:	4b3b      	ldr	r3, [pc, #236]	; (800a580 <HAL_RCC_OscConfig+0x57c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a3a      	ldr	r2, [pc, #232]	; (800a580 <HAL_RCC_OscConfig+0x57c>)
 800a496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a49a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a49c:	f7fb fec2 	bl	8006224 <HAL_GetTick>
 800a4a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4a2:	e008      	b.n	800a4b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4a4:	f7fb febe 	bl	8006224 <HAL_GetTick>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d901      	bls.n	800a4b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e1c6      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4b6:	4b32      	ldr	r3, [pc, #200]	; (800a580 <HAL_RCC_OscConfig+0x57c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d0f0      	beq.n	800a4a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d108      	bne.n	800a4dc <HAL_RCC_OscConfig+0x4d8>
 800a4ca:	4b2c      	ldr	r3, [pc, #176]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d0:	4a2a      	ldr	r2, [pc, #168]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a4d2:	f043 0301 	orr.w	r3, r3, #1
 800a4d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a4da:	e024      	b.n	800a526 <HAL_RCC_OscConfig+0x522>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	2b05      	cmp	r3, #5
 800a4e2:	d110      	bne.n	800a506 <HAL_RCC_OscConfig+0x502>
 800a4e4:	4b25      	ldr	r3, [pc, #148]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ea:	4a24      	ldr	r2, [pc, #144]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a4ec:	f043 0304 	orr.w	r3, r3, #4
 800a4f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a4f4:	4b21      	ldr	r3, [pc, #132]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4fa:	4a20      	ldr	r2, [pc, #128]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a4fc:	f043 0301 	orr.w	r3, r3, #1
 800a500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a504:	e00f      	b.n	800a526 <HAL_RCC_OscConfig+0x522>
 800a506:	4b1d      	ldr	r3, [pc, #116]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a50c:	4a1b      	ldr	r2, [pc, #108]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a50e:	f023 0301 	bic.w	r3, r3, #1
 800a512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a516:	4b19      	ldr	r3, [pc, #100]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a51c:	4a17      	ldr	r2, [pc, #92]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a51e:	f023 0304 	bic.w	r3, r3, #4
 800a522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d016      	beq.n	800a55c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a52e:	f7fb fe79 	bl	8006224 <HAL_GetTick>
 800a532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a534:	e00a      	b.n	800a54c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a536:	f7fb fe75 	bl	8006224 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	f241 3288 	movw	r2, #5000	; 0x1388
 800a544:	4293      	cmp	r3, r2
 800a546:	d901      	bls.n	800a54c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e17b      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a54c:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <HAL_RCC_OscConfig+0x578>)
 800a54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0ed      	beq.n	800a536 <HAL_RCC_OscConfig+0x532>
 800a55a:	e01a      	b.n	800a592 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a55c:	f7fb fe62 	bl	8006224 <HAL_GetTick>
 800a560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a562:	e00f      	b.n	800a584 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a564:	f7fb fe5e 	bl	8006224 <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a572:	4293      	cmp	r3, r2
 800a574:	d906      	bls.n	800a584 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e164      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
 800a57a:	bf00      	nop
 800a57c:	40021000 	.word	0x40021000
 800a580:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a584:	4ba8      	ldr	r3, [pc, #672]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a58a:	f003 0302 	and.w	r3, r3, #2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1e8      	bne.n	800a564 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a592:	7ffb      	ldrb	r3, [r7, #31]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d105      	bne.n	800a5a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a598:	4ba3      	ldr	r3, [pc, #652]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a59a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a59c:	4aa2      	ldr	r2, [pc, #648]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a59e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0320 	and.w	r3, r3, #32
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d03c      	beq.n	800a62a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d01c      	beq.n	800a5f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a5b8:	4b9b      	ldr	r3, [pc, #620]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a5ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5be:	4a9a      	ldr	r2, [pc, #616]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a5c0:	f043 0301 	orr.w	r3, r3, #1
 800a5c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5c8:	f7fb fe2c 	bl	8006224 <HAL_GetTick>
 800a5cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a5ce:	e008      	b.n	800a5e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a5d0:	f7fb fe28 	bl	8006224 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e130      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a5e2:	4b91      	ldr	r3, [pc, #580]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a5e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5e8:	f003 0302 	and.w	r3, r3, #2
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0ef      	beq.n	800a5d0 <HAL_RCC_OscConfig+0x5cc>
 800a5f0:	e01b      	b.n	800a62a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a5f2:	4b8d      	ldr	r3, [pc, #564]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a5f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5f8:	4a8b      	ldr	r2, [pc, #556]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a5fa:	f023 0301 	bic.w	r3, r3, #1
 800a5fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a602:	f7fb fe0f 	bl	8006224 <HAL_GetTick>
 800a606:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a608:	e008      	b.n	800a61c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a60a:	f7fb fe0b 	bl	8006224 <HAL_GetTick>
 800a60e:	4602      	mov	r2, r0
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	2b02      	cmp	r3, #2
 800a616:	d901      	bls.n	800a61c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a618:	2303      	movs	r3, #3
 800a61a:	e113      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a61c:	4b82      	ldr	r3, [pc, #520]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a61e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1ef      	bne.n	800a60a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f000 8107 	beq.w	800a842 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a638:	2b02      	cmp	r3, #2
 800a63a:	f040 80cb 	bne.w	800a7d4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a63e:	4b7a      	ldr	r3, [pc, #488]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f003 0203 	and.w	r2, r3, #3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64e:	429a      	cmp	r2, r3
 800a650:	d12c      	bne.n	800a6ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65c:	3b01      	subs	r3, #1
 800a65e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a660:	429a      	cmp	r2, r3
 800a662:	d123      	bne.n	800a6ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a670:	429a      	cmp	r2, r3
 800a672:	d11b      	bne.n	800a6ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a680:	429a      	cmp	r2, r3
 800a682:	d113      	bne.n	800a6ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	3b01      	subs	r3, #1
 800a692:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a694:	429a      	cmp	r2, r3
 800a696:	d109      	bne.n	800a6ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	085b      	lsrs	r3, r3, #1
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d06d      	beq.n	800a788 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	2b0c      	cmp	r3, #12
 800a6b0:	d068      	beq.n	800a784 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a6b2:	4b5d      	ldr	r3, [pc, #372]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d105      	bne.n	800a6ca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a6be:	4b5a      	ldr	r3, [pc, #360]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e0ba      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a6ce:	4b56      	ldr	r3, [pc, #344]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a55      	ldr	r2, [pc, #340]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a6d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a6da:	f7fb fda3 	bl	8006224 <HAL_GetTick>
 800a6de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6e0:	e008      	b.n	800a6f4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6e2:	f7fb fd9f 	bl	8006224 <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d901      	bls.n	800a6f4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e0a7      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6f4:	4b4c      	ldr	r3, [pc, #304]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1f0      	bne.n	800a6e2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a700:	4b49      	ldr	r3, [pc, #292]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a702:	68da      	ldr	r2, [r3, #12]
 800a704:	4b49      	ldr	r3, [pc, #292]	; (800a82c <HAL_RCC_OscConfig+0x828>)
 800a706:	4013      	ands	r3, r2
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a710:	3a01      	subs	r2, #1
 800a712:	0112      	lsls	r2, r2, #4
 800a714:	4311      	orrs	r1, r2
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a71a:	0212      	lsls	r2, r2, #8
 800a71c:	4311      	orrs	r1, r2
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a722:	0852      	lsrs	r2, r2, #1
 800a724:	3a01      	subs	r2, #1
 800a726:	0552      	lsls	r2, r2, #21
 800a728:	4311      	orrs	r1, r2
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a72e:	0852      	lsrs	r2, r2, #1
 800a730:	3a01      	subs	r2, #1
 800a732:	0652      	lsls	r2, r2, #25
 800a734:	4311      	orrs	r1, r2
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a73a:	06d2      	lsls	r2, r2, #27
 800a73c:	430a      	orrs	r2, r1
 800a73e:	493a      	ldr	r1, [pc, #232]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a740:	4313      	orrs	r3, r2
 800a742:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a744:	4b38      	ldr	r3, [pc, #224]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a37      	ldr	r2, [pc, #220]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a74a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a74e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a750:	4b35      	ldr	r3, [pc, #212]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	4a34      	ldr	r2, [pc, #208]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a75a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a75c:	f7fb fd62 	bl	8006224 <HAL_GetTick>
 800a760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a762:	e008      	b.n	800a776 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a764:	f7fb fd5e 	bl	8006224 <HAL_GetTick>
 800a768:	4602      	mov	r2, r0
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d901      	bls.n	800a776 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	e066      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a776:	4b2c      	ldr	r3, [pc, #176]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0f0      	beq.n	800a764 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a782:	e05e      	b.n	800a842 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e05d      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a788:	4b27      	ldr	r3, [pc, #156]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d156      	bne.n	800a842 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a794:	4b24      	ldr	r3, [pc, #144]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a23      	ldr	r2, [pc, #140]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a79a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a79e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a7a0:	4b21      	ldr	r3, [pc, #132]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	4a20      	ldr	r2, [pc, #128]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a7a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a7ac:	f7fb fd3a 	bl	8006224 <HAL_GetTick>
 800a7b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7b4:	f7fb fd36 	bl	8006224 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e03e      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7c6:	4b18      	ldr	r3, [pc, #96]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0f0      	beq.n	800a7b4 <HAL_RCC_OscConfig+0x7b0>
 800a7d2:	e036      	b.n	800a842 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	2b0c      	cmp	r3, #12
 800a7d8:	d031      	beq.n	800a83e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7da:	4b13      	ldr	r3, [pc, #76]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a12      	ldr	r2, [pc, #72]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a7e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800a7e6:	4b10      	ldr	r3, [pc, #64]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d105      	bne.n	800a7fe <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a7f2:	4b0d      	ldr	r3, [pc, #52]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	4a0c      	ldr	r2, [pc, #48]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a7f8:	f023 0303 	bic.w	r3, r3, #3
 800a7fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a7fe:	4b0a      	ldr	r3, [pc, #40]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	4a09      	ldr	r2, [pc, #36]	; (800a828 <HAL_RCC_OscConfig+0x824>)
 800a804:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a80c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80e:	f7fb fd09 	bl	8006224 <HAL_GetTick>
 800a812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a814:	e00c      	b.n	800a830 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a816:	f7fb fd05 	bl	8006224 <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b02      	cmp	r3, #2
 800a822:	d905      	bls.n	800a830 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e00d      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
 800a828:	40021000 	.word	0x40021000
 800a82c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a830:	4b06      	ldr	r3, [pc, #24]	; (800a84c <HAL_RCC_OscConfig+0x848>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1ec      	bne.n	800a816 <HAL_RCC_OscConfig+0x812>
 800a83c:	e001      	b.n	800a842 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e000      	b.n	800a844 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	40021000 	.word	0x40021000

0800a850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a85a:	2300      	movs	r3, #0
 800a85c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e10f      	b.n	800aa88 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a868:	4b89      	ldr	r3, [pc, #548]	; (800aa90 <HAL_RCC_ClockConfig+0x240>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 030f 	and.w	r3, r3, #15
 800a870:	683a      	ldr	r2, [r7, #0]
 800a872:	429a      	cmp	r2, r3
 800a874:	d910      	bls.n	800a898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a876:	4b86      	ldr	r3, [pc, #536]	; (800aa90 <HAL_RCC_ClockConfig+0x240>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f023 020f 	bic.w	r2, r3, #15
 800a87e:	4984      	ldr	r1, [pc, #528]	; (800aa90 <HAL_RCC_ClockConfig+0x240>)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	4313      	orrs	r3, r2
 800a884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a886:	4b82      	ldr	r3, [pc, #520]	; (800aa90 <HAL_RCC_ClockConfig+0x240>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 030f 	and.w	r3, r3, #15
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	429a      	cmp	r2, r3
 800a892:	d001      	beq.n	800a898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e0f7      	b.n	800aa88 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 8089 	beq.w	800a9b8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d133      	bne.n	800a916 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8ae:	4b79      	ldr	r3, [pc, #484]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e0e4      	b.n	800aa88 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a8be:	f000 fa0f 	bl	800ace0 <RCC_GetSysClockFreqFromPLLSource>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	4a74      	ldr	r2, [pc, #464]	; (800aa98 <HAL_RCC_ClockConfig+0x248>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d955      	bls.n	800a976 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a8ca:	4b72      	ldr	r3, [pc, #456]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d10a      	bne.n	800a8ec <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a8d6:	4b6f      	ldr	r3, [pc, #444]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8de:	4a6d      	ldr	r2, [pc, #436]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a8e6:	2380      	movs	r3, #128	; 0x80
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	e044      	b.n	800a976 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d03e      	beq.n	800a976 <HAL_RCC_ClockConfig+0x126>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d13a      	bne.n	800a976 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a900:	4b64      	ldr	r3, [pc, #400]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a908:	4a62      	ldr	r2, [pc, #392]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a90a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a90e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a910:	2380      	movs	r3, #128	; 0x80
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	e02f      	b.n	800a976 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d107      	bne.n	800a92e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a91e:	4b5d      	ldr	r3, [pc, #372]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d115      	bne.n	800a956 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e0ac      	b.n	800aa88 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d107      	bne.n	800a946 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a936:	4b57      	ldr	r3, [pc, #348]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0302 	and.w	r3, r3, #2
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d109      	bne.n	800a956 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e0a0      	b.n	800aa88 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a946:	4b53      	ldr	r3, [pc, #332]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e098      	b.n	800aa88 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a956:	f000 f8a7 	bl	800aaa8 <HAL_RCC_GetSysClockFreq>
 800a95a:	4603      	mov	r3, r0
 800a95c:	4a4e      	ldr	r2, [pc, #312]	; (800aa98 <HAL_RCC_ClockConfig+0x248>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d909      	bls.n	800a976 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a962:	4b4c      	ldr	r3, [pc, #304]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a96a:	4a4a      	ldr	r2, [pc, #296]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a96c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a970:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a972:	2380      	movs	r3, #128	; 0x80
 800a974:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a976:	4b47      	ldr	r3, [pc, #284]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	f023 0203 	bic.w	r2, r3, #3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	4944      	ldr	r1, [pc, #272]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a984:	4313      	orrs	r3, r2
 800a986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a988:	f7fb fc4c 	bl	8006224 <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a98e:	e00a      	b.n	800a9a6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a990:	f7fb fc48 	bl	8006224 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d901      	bls.n	800a9a6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e070      	b.n	800aa88 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9a6:	4b3b      	ldr	r3, [pc, #236]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	f003 020c 	and.w	r2, r3, #12
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d1eb      	bne.n	800a990 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0302 	and.w	r3, r3, #2
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d009      	beq.n	800a9d8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9c4:	4b33      	ldr	r3, [pc, #204]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	4930      	ldr	r1, [pc, #192]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	608b      	str	r3, [r1, #8]
 800a9d6:	e008      	b.n	800a9ea <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b80      	cmp	r3, #128	; 0x80
 800a9dc:	d105      	bne.n	800a9ea <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a9de:	4b2d      	ldr	r3, [pc, #180]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	4a2c      	ldr	r2, [pc, #176]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800a9e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9e8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a9ea:	4b29      	ldr	r3, [pc, #164]	; (800aa90 <HAL_RCC_ClockConfig+0x240>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 030f 	and.w	r3, r3, #15
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d210      	bcs.n	800aa1a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9f8:	4b25      	ldr	r3, [pc, #148]	; (800aa90 <HAL_RCC_ClockConfig+0x240>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f023 020f 	bic.w	r2, r3, #15
 800aa00:	4923      	ldr	r1, [pc, #140]	; (800aa90 <HAL_RCC_ClockConfig+0x240>)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa08:	4b21      	ldr	r3, [pc, #132]	; (800aa90 <HAL_RCC_ClockConfig+0x240>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 030f 	and.w	r3, r3, #15
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d001      	beq.n	800aa1a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e036      	b.n	800aa88 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0304 	and.w	r3, r3, #4
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d008      	beq.n	800aa38 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa26:	4b1b      	ldr	r3, [pc, #108]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	4918      	ldr	r1, [pc, #96]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0308 	and.w	r3, r3, #8
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d009      	beq.n	800aa58 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa44:	4b13      	ldr	r3, [pc, #76]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	4910      	ldr	r1, [pc, #64]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800aa54:	4313      	orrs	r3, r2
 800aa56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aa58:	f000 f826 	bl	800aaa8 <HAL_RCC_GetSysClockFreq>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <HAL_RCC_ClockConfig+0x244>)
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	091b      	lsrs	r3, r3, #4
 800aa64:	f003 030f 	and.w	r3, r3, #15
 800aa68:	490c      	ldr	r1, [pc, #48]	; (800aa9c <HAL_RCC_ClockConfig+0x24c>)
 800aa6a:	5ccb      	ldrb	r3, [r1, r3]
 800aa6c:	f003 031f 	and.w	r3, r3, #31
 800aa70:	fa22 f303 	lsr.w	r3, r2, r3
 800aa74:	4a0a      	ldr	r2, [pc, #40]	; (800aaa0 <HAL_RCC_ClockConfig+0x250>)
 800aa76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <HAL_RCC_ClockConfig+0x254>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fb fb85 	bl	800618c <HAL_InitTick>
 800aa82:	4603      	mov	r3, r0
 800aa84:	73fb      	strb	r3, [r7, #15]

  return status;
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	40022000 	.word	0x40022000
 800aa94:	40021000 	.word	0x40021000
 800aa98:	04c4b400 	.word	0x04c4b400
 800aa9c:	08021a50 	.word	0x08021a50
 800aaa0:	20000038 	.word	0x20000038
 800aaa4:	20000078 	.word	0x20000078

0800aaa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b089      	sub	sp, #36	; 0x24
 800aaac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	61fb      	str	r3, [r7, #28]
 800aab2:	2300      	movs	r3, #0
 800aab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aab6:	4b3e      	ldr	r3, [pc, #248]	; (800abb0 <HAL_RCC_GetSysClockFreq+0x108>)
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	f003 030c 	and.w	r3, r3, #12
 800aabe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aac0:	4b3b      	ldr	r3, [pc, #236]	; (800abb0 <HAL_RCC_GetSysClockFreq+0x108>)
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	f003 0303 	and.w	r3, r3, #3
 800aac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d005      	beq.n	800aadc <HAL_RCC_GetSysClockFreq+0x34>
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	2b0c      	cmp	r3, #12
 800aad4:	d121      	bne.n	800ab1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d11e      	bne.n	800ab1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800aadc:	4b34      	ldr	r3, [pc, #208]	; (800abb0 <HAL_RCC_GetSysClockFreq+0x108>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0308 	and.w	r3, r3, #8
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d107      	bne.n	800aaf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aae8:	4b31      	ldr	r3, [pc, #196]	; (800abb0 <HAL_RCC_GetSysClockFreq+0x108>)
 800aaea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaee:	0a1b      	lsrs	r3, r3, #8
 800aaf0:	f003 030f 	and.w	r3, r3, #15
 800aaf4:	61fb      	str	r3, [r7, #28]
 800aaf6:	e005      	b.n	800ab04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aaf8:	4b2d      	ldr	r3, [pc, #180]	; (800abb0 <HAL_RCC_GetSysClockFreq+0x108>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	091b      	lsrs	r3, r3, #4
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ab04:	4a2b      	ldr	r2, [pc, #172]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10d      	bne.n	800ab30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ab18:	e00a      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b04      	cmp	r3, #4
 800ab1e:	d102      	bne.n	800ab26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ab20:	4b25      	ldr	r3, [pc, #148]	; (800abb8 <HAL_RCC_GetSysClockFreq+0x110>)
 800ab22:	61bb      	str	r3, [r7, #24]
 800ab24:	e004      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	2b08      	cmp	r3, #8
 800ab2a:	d101      	bne.n	800ab30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab2c:	4b22      	ldr	r3, [pc, #136]	; (800abb8 <HAL_RCC_GetSysClockFreq+0x110>)
 800ab2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	2b0c      	cmp	r3, #12
 800ab34:	d134      	bne.n	800aba0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ab36:	4b1e      	ldr	r3, [pc, #120]	; (800abb0 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	f003 0303 	and.w	r3, r3, #3
 800ab3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d003      	beq.n	800ab4e <HAL_RCC_GetSysClockFreq+0xa6>
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b03      	cmp	r3, #3
 800ab4a:	d003      	beq.n	800ab54 <HAL_RCC_GetSysClockFreq+0xac>
 800ab4c:	e005      	b.n	800ab5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ab4e:	4b1a      	ldr	r3, [pc, #104]	; (800abb8 <HAL_RCC_GetSysClockFreq+0x110>)
 800ab50:	617b      	str	r3, [r7, #20]
      break;
 800ab52:	e005      	b.n	800ab60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ab54:	4b18      	ldr	r3, [pc, #96]	; (800abb8 <HAL_RCC_GetSysClockFreq+0x110>)
 800ab56:	617b      	str	r3, [r7, #20]
      break;
 800ab58:	e002      	b.n	800ab60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	617b      	str	r3, [r7, #20]
      break;
 800ab5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ab60:	4b13      	ldr	r3, [pc, #76]	; (800abb0 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	091b      	lsrs	r3, r3, #4
 800ab66:	f003 030f 	and.w	r3, r3, #15
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ab6e:	4b10      	ldr	r3, [pc, #64]	; (800abb0 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	0a1b      	lsrs	r3, r3, #8
 800ab74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	fb02 f203 	mul.w	r2, r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ab86:	4b0a      	ldr	r3, [pc, #40]	; (800abb0 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	0e5b      	lsrs	r3, r3, #25
 800ab8c:	f003 0303 	and.w	r3, r3, #3
 800ab90:	3301      	adds	r3, #1
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800aba0:	69bb      	ldr	r3, [r7, #24]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3724      	adds	r7, #36	; 0x24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	40021000 	.word	0x40021000
 800abb4:	08021a68 	.word	0x08021a68
 800abb8:	00f42400 	.word	0x00f42400

0800abbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abbc:	b480      	push	{r7}
 800abbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800abc0:	4b03      	ldr	r3, [pc, #12]	; (800abd0 <HAL_RCC_GetHCLKFreq+0x14>)
 800abc2:	681b      	ldr	r3, [r3, #0]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	20000038 	.word	0x20000038

0800abd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800abd8:	f7ff fff0 	bl	800abbc <HAL_RCC_GetHCLKFreq>
 800abdc:	4602      	mov	r2, r0
 800abde:	4b06      	ldr	r3, [pc, #24]	; (800abf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	0a1b      	lsrs	r3, r3, #8
 800abe4:	f003 0307 	and.w	r3, r3, #7
 800abe8:	4904      	ldr	r1, [pc, #16]	; (800abfc <HAL_RCC_GetPCLK1Freq+0x28>)
 800abea:	5ccb      	ldrb	r3, [r1, r3]
 800abec:	f003 031f 	and.w	r3, r3, #31
 800abf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	40021000 	.word	0x40021000
 800abfc:	08021a60 	.word	0x08021a60

0800ac00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ac04:	f7ff ffda 	bl	800abbc <HAL_RCC_GetHCLKFreq>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	0adb      	lsrs	r3, r3, #11
 800ac10:	f003 0307 	and.w	r3, r3, #7
 800ac14:	4904      	ldr	r1, [pc, #16]	; (800ac28 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac16:	5ccb      	ldrb	r3, [r1, r3]
 800ac18:	f003 031f 	and.w	r3, r3, #31
 800ac1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	40021000 	.word	0x40021000
 800ac28:	08021a60 	.word	0x08021a60

0800ac2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ac34:	2300      	movs	r3, #0
 800ac36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ac38:	4b27      	ldr	r3, [pc, #156]	; (800acd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d003      	beq.n	800ac4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ac44:	f7ff f8c0 	bl	8009dc8 <HAL_PWREx_GetVoltageRange>
 800ac48:	6178      	str	r0, [r7, #20]
 800ac4a:	e014      	b.n	800ac76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ac4c:	4b22      	ldr	r3, [pc, #136]	; (800acd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac50:	4a21      	ldr	r2, [pc, #132]	; (800acd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac56:	6593      	str	r3, [r2, #88]	; 0x58
 800ac58:	4b1f      	ldr	r3, [pc, #124]	; (800acd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac60:	60fb      	str	r3, [r7, #12]
 800ac62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ac64:	f7ff f8b0 	bl	8009dc8 <HAL_PWREx_GetVoltageRange>
 800ac68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ac6a:	4b1b      	ldr	r3, [pc, #108]	; (800acd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6e:	4a1a      	ldr	r2, [pc, #104]	; (800acd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac7c:	d10b      	bne.n	800ac96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b80      	cmp	r3, #128	; 0x80
 800ac82:	d913      	bls.n	800acac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2ba0      	cmp	r3, #160	; 0xa0
 800ac88:	d902      	bls.n	800ac90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	613b      	str	r3, [r7, #16]
 800ac8e:	e00d      	b.n	800acac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ac90:	2301      	movs	r3, #1
 800ac92:	613b      	str	r3, [r7, #16]
 800ac94:	e00a      	b.n	800acac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2b7f      	cmp	r3, #127	; 0x7f
 800ac9a:	d902      	bls.n	800aca2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	613b      	str	r3, [r7, #16]
 800aca0:	e004      	b.n	800acac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b70      	cmp	r3, #112	; 0x70
 800aca6:	d101      	bne.n	800acac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800aca8:	2301      	movs	r3, #1
 800acaa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800acac:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f023 020f 	bic.w	r2, r3, #15
 800acb4:	4909      	ldr	r1, [pc, #36]	; (800acdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	4313      	orrs	r3, r2
 800acba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800acbc:	4b07      	ldr	r3, [pc, #28]	; (800acdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 030f 	and.w	r3, r3, #15
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d001      	beq.n	800acce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e000      	b.n	800acd0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3718      	adds	r7, #24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	40021000 	.word	0x40021000
 800acdc:	40022000 	.word	0x40022000

0800ace0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800ace6:	2300      	movs	r3, #0
 800ace8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800acea:	4b2d      	ldr	r3, [pc, #180]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f003 0303 	and.w	r3, r3, #3
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d118      	bne.n	800ad28 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800acf6:	4b2a      	ldr	r3, [pc, #168]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0308 	and.w	r3, r3, #8
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d107      	bne.n	800ad12 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ad02:	4b27      	ldr	r3, [pc, #156]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ad04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad08:	0a1b      	lsrs	r3, r3, #8
 800ad0a:	f003 030f 	and.w	r3, r3, #15
 800ad0e:	617b      	str	r3, [r7, #20]
 800ad10:	e005      	b.n	800ad1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ad12:	4b23      	ldr	r3, [pc, #140]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	091b      	lsrs	r3, r3, #4
 800ad18:	f003 030f 	and.w	r3, r3, #15
 800ad1c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ad1e:	4a21      	ldr	r2, [pc, #132]	; (800ada4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad26:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ad28:	4b1d      	ldr	r3, [pc, #116]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	f003 0303 	and.w	r3, r3, #3
 800ad30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d003      	beq.n	800ad40 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d003      	beq.n	800ad46 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800ad3e:	e005      	b.n	800ad4c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800ad40:	4b19      	ldr	r3, [pc, #100]	; (800ada8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800ad42:	613b      	str	r3, [r7, #16]
    break;
 800ad44:	e005      	b.n	800ad52 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800ad46:	4b18      	ldr	r3, [pc, #96]	; (800ada8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800ad48:	613b      	str	r3, [r7, #16]
    break;
 800ad4a:	e002      	b.n	800ad52 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	613b      	str	r3, [r7, #16]
    break;
 800ad50:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ad52:	4b13      	ldr	r3, [pc, #76]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	091b      	lsrs	r3, r3, #4
 800ad58:	f003 030f 	and.w	r3, r3, #15
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ad60:	4b0f      	ldr	r3, [pc, #60]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	0a1b      	lsrs	r3, r3, #8
 800ad66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	fb02 f203 	mul.w	r2, r2, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad76:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ad78:	4b09      	ldr	r3, [pc, #36]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	0e5b      	lsrs	r3, r3, #25
 800ad7e:	f003 0303 	and.w	r3, r3, #3
 800ad82:	3301      	adds	r3, #1
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad90:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800ad92:	683b      	ldr	r3, [r7, #0]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	371c      	adds	r7, #28
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr
 800ada0:	40021000 	.word	0x40021000
 800ada4:	08021a68 	.word	0x08021a68
 800ada8:	00f42400 	.word	0x00f42400

0800adac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800adb4:	2300      	movs	r3, #0
 800adb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800adb8:	2300      	movs	r3, #0
 800adba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d040      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adcc:	2b80      	cmp	r3, #128	; 0x80
 800adce:	d02a      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800add0:	2b80      	cmp	r3, #128	; 0x80
 800add2:	d825      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800add4:	2b60      	cmp	r3, #96	; 0x60
 800add6:	d026      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800add8:	2b60      	cmp	r3, #96	; 0x60
 800adda:	d821      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800addc:	2b40      	cmp	r3, #64	; 0x40
 800adde:	d006      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x42>
 800ade0:	2b40      	cmp	r3, #64	; 0x40
 800ade2:	d81d      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d009      	beq.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x50>
 800ade8:	2b20      	cmp	r3, #32
 800adea:	d010      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800adec:	e018      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800adee:	4b89      	ldr	r3, [pc, #548]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	4a88      	ldr	r2, [pc, #544]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800adf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adf8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800adfa:	e015      	b.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3304      	adds	r3, #4
 800ae00:	2100      	movs	r1, #0
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 fb62 	bl	800b4cc <RCCEx_PLLSAI1_Config>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ae0c:	e00c      	b.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	3320      	adds	r3, #32
 800ae12:	2100      	movs	r1, #0
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fc4d 	bl	800b6b4 <RCCEx_PLLSAI2_Config>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ae1e:	e003      	b.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	74fb      	strb	r3, [r7, #19]
      break;
 800ae24:	e000      	b.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800ae26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae28:	7cfb      	ldrb	r3, [r7, #19]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10b      	bne.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae2e:	4b79      	ldr	r3, [pc, #484]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae34:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae3c:	4975      	ldr	r1, [pc, #468]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800ae44:	e001      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae46:	7cfb      	ldrb	r3, [r7, #19]
 800ae48:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d047      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae5e:	d030      	beq.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800ae60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae64:	d82a      	bhi.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ae66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae6a:	d02a      	beq.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800ae6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae70:	d824      	bhi.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ae72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae76:	d008      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800ae78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae7c:	d81e      	bhi.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00a      	beq.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800ae82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae86:	d010      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ae88:	e018      	b.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ae8a:	4b62      	ldr	r3, [pc, #392]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	4a61      	ldr	r2, [pc, #388]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae94:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ae96:	e015      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 fb14 	bl	800b4cc <RCCEx_PLLSAI1_Config>
 800aea4:	4603      	mov	r3, r0
 800aea6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aea8:	e00c      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	3320      	adds	r3, #32
 800aeae:	2100      	movs	r1, #0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 fbff 	bl	800b6b4 <RCCEx_PLLSAI2_Config>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aeba:	e003      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	74fb      	strb	r3, [r7, #19]
      break;
 800aec0:	e000      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800aec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aec4:	7cfb      	ldrb	r3, [r7, #19]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10b      	bne.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aeca:	4b52      	ldr	r3, [pc, #328]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed8:	494e      	ldr	r1, [pc, #312]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800aee0:	e001      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee2:	7cfb      	ldrb	r3, [r7, #19]
 800aee4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f000 809f 	beq.w	800b032 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aef4:	2300      	movs	r3, #0
 800aef6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aef8:	4b46      	ldr	r3, [pc, #280]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aefa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aefc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800af04:	2301      	movs	r3, #1
 800af06:	e000      	b.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800af08:	2300      	movs	r3, #0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00d      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af0e:	4b41      	ldr	r3, [pc, #260]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af12:	4a40      	ldr	r2, [pc, #256]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af18:	6593      	str	r3, [r2, #88]	; 0x58
 800af1a:	4b3e      	ldr	r3, [pc, #248]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af22:	60bb      	str	r3, [r7, #8]
 800af24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af26:	2301      	movs	r3, #1
 800af28:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af2a:	4b3b      	ldr	r3, [pc, #236]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a3a      	ldr	r2, [pc, #232]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800af30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af36:	f7fb f975 	bl	8006224 <HAL_GetTick>
 800af3a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800af3c:	e009      	b.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af3e:	f7fb f971 	bl	8006224 <HAL_GetTick>
 800af42:	4602      	mov	r2, r0
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d902      	bls.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	74fb      	strb	r3, [r7, #19]
        break;
 800af50:	e005      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800af52:	4b31      	ldr	r3, [pc, #196]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0ef      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800af5e:	7cfb      	ldrb	r3, [r7, #19]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d15b      	bne.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800af64:	4b2b      	ldr	r3, [pc, #172]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af6e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d01f      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d019      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800af82:	4b24      	ldr	r3, [pc, #144]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af8e:	4b21      	ldr	r3, [pc, #132]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af94:	4a1f      	ldr	r2, [pc, #124]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af9e:	4b1d      	ldr	r3, [pc, #116]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afa4:	4a1b      	ldr	r2, [pc, #108]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800afae:	4a19      	ldr	r2, [pc, #100]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d016      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afc0:	f7fb f930 	bl	8006224 <HAL_GetTick>
 800afc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afc6:	e00b      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afc8:	f7fb f92c 	bl	8006224 <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d902      	bls.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800afda:	2303      	movs	r3, #3
 800afdc:	74fb      	strb	r3, [r7, #19]
            break;
 800afde:	e006      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afe0:	4b0c      	ldr	r3, [pc, #48]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afe6:	f003 0302 	and.w	r3, r3, #2
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0ec      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800afee:	7cfb      	ldrb	r3, [r7, #19]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10c      	bne.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aff4:	4b07      	ldr	r3, [pc, #28]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b004:	4903      	ldr	r1, [pc, #12]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b006:	4313      	orrs	r3, r2
 800b008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b00c:	e008      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b00e:	7cfb      	ldrb	r3, [r7, #19]
 800b010:	74bb      	strb	r3, [r7, #18]
 800b012:	e005      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800b014:	40021000 	.word	0x40021000
 800b018:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b01c:	7cfb      	ldrb	r3, [r7, #19]
 800b01e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b020:	7c7b      	ldrb	r3, [r7, #17]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d105      	bne.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b026:	4ba0      	ldr	r3, [pc, #640]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b02a:	4a9f      	ldr	r2, [pc, #636]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b02c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b030:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b03e:	4b9a      	ldr	r3, [pc, #616]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b044:	f023 0203 	bic.w	r2, r3, #3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b04c:	4996      	ldr	r1, [pc, #600]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b04e:	4313      	orrs	r3, r2
 800b050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00a      	beq.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b060:	4b91      	ldr	r3, [pc, #580]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b066:	f023 020c 	bic.w	r2, r3, #12
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	498e      	ldr	r1, [pc, #568]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b070:	4313      	orrs	r3, r2
 800b072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0304 	and.w	r3, r3, #4
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b082:	4b89      	ldr	r3, [pc, #548]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b088:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b090:	4985      	ldr	r1, [pc, #532]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b092:	4313      	orrs	r3, r2
 800b094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0308 	and.w	r3, r3, #8
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00a      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b0a4:	4b80      	ldr	r3, [pc, #512]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0b2:	497d      	ldr	r1, [pc, #500]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 0310 	and.w	r3, r3, #16
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b0c6:	4b78      	ldr	r3, [pc, #480]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0d4:	4974      	ldr	r1, [pc, #464]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 0320 	and.w	r3, r3, #32
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00a      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b0e8:	4b6f      	ldr	r3, [pc, #444]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f6:	496c      	ldr	r1, [pc, #432]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00a      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b10a:	4b67      	ldr	r3, [pc, #412]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b110:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b118:	4963      	ldr	r1, [pc, #396]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00a      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b12c:	4b5e      	ldr	r3, [pc, #376]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b132:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b13a:	495b      	ldr	r1, [pc, #364]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b14e:	4b56      	ldr	r3, [pc, #344]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b154:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15c:	4952      	ldr	r1, [pc, #328]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00a      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b170:	4b4d      	ldr	r3, [pc, #308]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b176:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b17e:	494a      	ldr	r1, [pc, #296]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b180:	4313      	orrs	r3, r2
 800b182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b192:	4b45      	ldr	r3, [pc, #276]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b198:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1a0:	4941      	ldr	r1, [pc, #260]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00a      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b1b4:	4b3c      	ldr	r3, [pc, #240]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1ba:	f023 0203 	bic.w	r2, r3, #3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1c2:	4939      	ldr	r1, [pc, #228]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d028      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1d6:	4b34      	ldr	r3, [pc, #208]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1e4:	4930      	ldr	r1, [pc, #192]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1f4:	d106      	bne.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b1f6:	4b2c      	ldr	r3, [pc, #176]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	4a2b      	ldr	r2, [pc, #172]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b200:	60d3      	str	r3, [r2, #12]
 800b202:	e011      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b20c:	d10c      	bne.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	3304      	adds	r3, #4
 800b212:	2101      	movs	r1, #1
 800b214:	4618      	mov	r0, r3
 800b216:	f000 f959 	bl	800b4cc <RCCEx_PLLSAI1_Config>
 800b21a:	4603      	mov	r3, r0
 800b21c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b21e:	7cfb      	ldrb	r3, [r7, #19]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800b224:	7cfb      	ldrb	r3, [r7, #19]
 800b226:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d04d      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b23c:	d108      	bne.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800b23e:	4b1a      	ldr	r3, [pc, #104]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b240:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b244:	4a18      	ldr	r2, [pc, #96]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b24a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b24e:	e012      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800b250:	4b15      	ldr	r3, [pc, #84]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b252:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b256:	4a14      	ldr	r2, [pc, #80]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b25c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b260:	4b11      	ldr	r3, [pc, #68]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b26e:	490e      	ldr	r1, [pc, #56]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b270:	4313      	orrs	r3, r2
 800b272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b27a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b27e:	d106      	bne.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b280:	4b09      	ldr	r3, [pc, #36]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	4a08      	ldr	r2, [pc, #32]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b28a:	60d3      	str	r3, [r2, #12]
 800b28c:	e020      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b292:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b296:	d109      	bne.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b298:	4b03      	ldr	r3, [pc, #12]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	4a02      	ldr	r2, [pc, #8]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b29e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2a2:	60d3      	str	r3, [r2, #12]
 800b2a4:	e014      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b2a6:	bf00      	nop
 800b2a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2b4:	d10c      	bne.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 f905 	bl	800b4cc <RCCEx_PLLSAI1_Config>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b2c6:	7cfb      	ldrb	r3, [r7, #19]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800b2cc:	7cfb      	ldrb	r3, [r7, #19]
 800b2ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d028      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b2dc:	4b7a      	ldr	r3, [pc, #488]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2ea:	4977      	ldr	r1, [pc, #476]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2fa:	d106      	bne.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b2fc:	4b72      	ldr	r3, [pc, #456]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	4a71      	ldr	r2, [pc, #452]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b306:	60d3      	str	r3, [r2, #12]
 800b308:	e011      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b30e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b312:	d10c      	bne.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3304      	adds	r3, #4
 800b318:	2101      	movs	r1, #1
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 f8d6 	bl	800b4cc <RCCEx_PLLSAI1_Config>
 800b320:	4603      	mov	r3, r0
 800b322:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b324:	7cfb      	ldrb	r3, [r7, #19]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800b32a:	7cfb      	ldrb	r3, [r7, #19]
 800b32c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d01e      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b33a:	4b63      	ldr	r3, [pc, #396]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b340:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b34a:	495f      	ldr	r1, [pc, #380]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b34c:	4313      	orrs	r3, r2
 800b34e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b358:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b35c:	d10c      	bne.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3304      	adds	r3, #4
 800b362:	2102      	movs	r1, #2
 800b364:	4618      	mov	r0, r3
 800b366:	f000 f8b1 	bl	800b4cc <RCCEx_PLLSAI1_Config>
 800b36a:	4603      	mov	r3, r0
 800b36c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b36e:	7cfb      	ldrb	r3, [r7, #19]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800b374:	7cfb      	ldrb	r3, [r7, #19]
 800b376:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00b      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b384:	4b50      	ldr	r3, [pc, #320]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b386:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b38a:	f023 0204 	bic.w	r2, r3, #4
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b394:	494c      	ldr	r1, [pc, #304]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b396:	4313      	orrs	r3, r2
 800b398:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00b      	beq.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b3a8:	4b47      	ldr	r3, [pc, #284]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b3aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3ae:	f023 0218 	bic.w	r2, r3, #24
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3b8:	4943      	ldr	r1, [pc, #268]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d035      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b3cc:	4b3e      	ldr	r3, [pc, #248]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a3d      	ldr	r2, [pc, #244]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b3d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3d8:	f7fa ff24 	bl	8006224 <HAL_GetTick>
 800b3dc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b3de:	e009      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b3e0:	f7fa ff20 	bl	8006224 <HAL_GetTick>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d902      	bls.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	74fb      	strb	r3, [r7, #19]
        break;
 800b3f2:	e005      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b3f4:	4b34      	ldr	r3, [pc, #208]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1ef      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800b400:	7cfb      	ldrb	r3, [r7, #19]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d113      	bne.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800b406:	4b30      	ldr	r3, [pc, #192]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b408:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b40c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b416:	492c      	ldr	r1, [pc, #176]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3320      	adds	r3, #32
 800b422:	2102      	movs	r1, #2
 800b424:	4618      	mov	r0, r3
 800b426:	f000 f945 	bl	800b6b4 <RCCEx_PLLSAI2_Config>
 800b42a:	4603      	mov	r3, r0
 800b42c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800b42e:	7cfb      	ldrb	r3, [r7, #19]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800b434:	7cfb      	ldrb	r3, [r7, #19]
 800b436:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01e      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800b444:	4b20      	ldr	r3, [pc, #128]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b44a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b454:	491c      	ldr	r1, [pc, #112]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b456:	4313      	orrs	r3, r2
 800b458:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b466:	d10c      	bne.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3320      	adds	r3, #32
 800b46c:	2101      	movs	r1, #1
 800b46e:	4618      	mov	r0, r3
 800b470:	f000 f920 	bl	800b6b4 <RCCEx_PLLSAI2_Config>
 800b474:	4603      	mov	r3, r0
 800b476:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b478:	7cfb      	ldrb	r3, [r7, #19]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800b47e:	7cfb      	ldrb	r3, [r7, #19]
 800b480:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d017      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b48e:	4b0e      	ldr	r3, [pc, #56]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b490:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b49e:	490a      	ldr	r1, [pc, #40]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4b0:	d105      	bne.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4b2:	4b05      	ldr	r3, [pc, #20]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	4a04      	ldr	r2, [pc, #16]	; (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b4b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4bc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b4be:	7cbb      	ldrb	r3, [r7, #18]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	40021000 	.word	0x40021000

0800b4cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b4da:	4b72      	ldr	r3, [pc, #456]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	f003 0303 	and.w	r3, r3, #3
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00e      	beq.n	800b504 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b4e6:	4b6f      	ldr	r3, [pc, #444]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	f003 0203 	and.w	r2, r3, #3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d103      	bne.n	800b4fe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
       ||
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d142      	bne.n	800b584 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	73fb      	strb	r3, [r7, #15]
 800b502:	e03f      	b.n	800b584 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d018      	beq.n	800b53e <RCCEx_PLLSAI1_Config+0x72>
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	d825      	bhi.n	800b55c <RCCEx_PLLSAI1_Config+0x90>
 800b510:	2b01      	cmp	r3, #1
 800b512:	d002      	beq.n	800b51a <RCCEx_PLLSAI1_Config+0x4e>
 800b514:	2b02      	cmp	r3, #2
 800b516:	d009      	beq.n	800b52c <RCCEx_PLLSAI1_Config+0x60>
 800b518:	e020      	b.n	800b55c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b51a:	4b62      	ldr	r3, [pc, #392]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0302 	and.w	r3, r3, #2
 800b522:	2b00      	cmp	r3, #0
 800b524:	d11d      	bne.n	800b562 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b52a:	e01a      	b.n	800b562 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b52c:	4b5d      	ldr	r3, [pc, #372]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b534:	2b00      	cmp	r3, #0
 800b536:	d116      	bne.n	800b566 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b53c:	e013      	b.n	800b566 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b53e:	4b59      	ldr	r3, [pc, #356]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10f      	bne.n	800b56a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b54a:	4b56      	ldr	r3, [pc, #344]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d109      	bne.n	800b56a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b55a:	e006      	b.n	800b56a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	73fb      	strb	r3, [r7, #15]
      break;
 800b560:	e004      	b.n	800b56c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b562:	bf00      	nop
 800b564:	e002      	b.n	800b56c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b566:	bf00      	nop
 800b568:	e000      	b.n	800b56c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b56a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d108      	bne.n	800b584 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b572:	4b4c      	ldr	r3, [pc, #304]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f023 0203 	bic.w	r2, r3, #3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4949      	ldr	r1, [pc, #292]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b580:	4313      	orrs	r3, r2
 800b582:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	2b00      	cmp	r3, #0
 800b588:	f040 8086 	bne.w	800b698 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b58c:	4b45      	ldr	r3, [pc, #276]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a44      	ldr	r2, [pc, #272]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b598:	f7fa fe44 	bl	8006224 <HAL_GetTick>
 800b59c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b59e:	e009      	b.n	800b5b4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b5a0:	f7fa fe40 	bl	8006224 <HAL_GetTick>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d902      	bls.n	800b5b4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	73fb      	strb	r3, [r7, #15]
        break;
 800b5b2:	e005      	b.n	800b5c0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b5b4:	4b3b      	ldr	r3, [pc, #236]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1ef      	bne.n	800b5a0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d168      	bne.n	800b698 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d113      	bne.n	800b5f4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5cc:	4b35      	ldr	r3, [pc, #212]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5ce:	691a      	ldr	r2, [r3, #16]
 800b5d0:	4b35      	ldr	r3, [pc, #212]	; (800b6a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	6892      	ldr	r2, [r2, #8]
 800b5d8:	0211      	lsls	r1, r2, #8
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	68d2      	ldr	r2, [r2, #12]
 800b5de:	06d2      	lsls	r2, r2, #27
 800b5e0:	4311      	orrs	r1, r2
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	6852      	ldr	r2, [r2, #4]
 800b5e6:	3a01      	subs	r2, #1
 800b5e8:	0112      	lsls	r2, r2, #4
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	492d      	ldr	r1, [pc, #180]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	610b      	str	r3, [r1, #16]
 800b5f2:	e02d      	b.n	800b650 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d115      	bne.n	800b626 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5fa:	4b2a      	ldr	r3, [pc, #168]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5fc:	691a      	ldr	r2, [r3, #16]
 800b5fe:	4b2b      	ldr	r3, [pc, #172]	; (800b6ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800b600:	4013      	ands	r3, r2
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	6892      	ldr	r2, [r2, #8]
 800b606:	0211      	lsls	r1, r2, #8
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	6912      	ldr	r2, [r2, #16]
 800b60c:	0852      	lsrs	r2, r2, #1
 800b60e:	3a01      	subs	r2, #1
 800b610:	0552      	lsls	r2, r2, #21
 800b612:	4311      	orrs	r1, r2
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	6852      	ldr	r2, [r2, #4]
 800b618:	3a01      	subs	r2, #1
 800b61a:	0112      	lsls	r2, r2, #4
 800b61c:	430a      	orrs	r2, r1
 800b61e:	4921      	ldr	r1, [pc, #132]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b620:	4313      	orrs	r3, r2
 800b622:	610b      	str	r3, [r1, #16]
 800b624:	e014      	b.n	800b650 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b626:	4b1f      	ldr	r3, [pc, #124]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b628:	691a      	ldr	r2, [r3, #16]
 800b62a:	4b21      	ldr	r3, [pc, #132]	; (800b6b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b62c:	4013      	ands	r3, r2
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	6892      	ldr	r2, [r2, #8]
 800b632:	0211      	lsls	r1, r2, #8
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	6952      	ldr	r2, [r2, #20]
 800b638:	0852      	lsrs	r2, r2, #1
 800b63a:	3a01      	subs	r2, #1
 800b63c:	0652      	lsls	r2, r2, #25
 800b63e:	4311      	orrs	r1, r2
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	6852      	ldr	r2, [r2, #4]
 800b644:	3a01      	subs	r2, #1
 800b646:	0112      	lsls	r2, r2, #4
 800b648:	430a      	orrs	r2, r1
 800b64a:	4916      	ldr	r1, [pc, #88]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b64c:	4313      	orrs	r3, r2
 800b64e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b650:	4b14      	ldr	r3, [pc, #80]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a13      	ldr	r2, [pc, #76]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b656:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b65a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b65c:	f7fa fde2 	bl	8006224 <HAL_GetTick>
 800b660:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b662:	e009      	b.n	800b678 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b664:	f7fa fdde 	bl	8006224 <HAL_GetTick>
 800b668:	4602      	mov	r2, r0
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d902      	bls.n	800b678 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b672:	2303      	movs	r3, #3
 800b674:	73fb      	strb	r3, [r7, #15]
          break;
 800b676:	e005      	b.n	800b684 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b678:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b680:	2b00      	cmp	r3, #0
 800b682:	d0ef      	beq.n	800b664 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d106      	bne.n	800b698 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b68a:	4b06      	ldr	r3, [pc, #24]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b68c:	691a      	ldr	r2, [r3, #16]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	4904      	ldr	r1, [pc, #16]	; (800b6a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b694:	4313      	orrs	r3, r2
 800b696:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b698:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	40021000 	.word	0x40021000
 800b6a8:	07ff800f 	.word	0x07ff800f
 800b6ac:	ff9f800f 	.word	0xff9f800f
 800b6b0:	f9ff800f 	.word	0xf9ff800f

0800b6b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b6c2:	4b72      	ldr	r3, [pc, #456]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	f003 0303 	and.w	r3, r3, #3
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00e      	beq.n	800b6ec <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b6ce:	4b6f      	ldr	r3, [pc, #444]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f003 0203 	and.w	r2, r3, #3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d103      	bne.n	800b6e6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
       ||
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d142      	bne.n	800b76c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	73fb      	strb	r3, [r7, #15]
 800b6ea:	e03f      	b.n	800b76c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b03      	cmp	r3, #3
 800b6f2:	d018      	beq.n	800b726 <RCCEx_PLLSAI2_Config+0x72>
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d825      	bhi.n	800b744 <RCCEx_PLLSAI2_Config+0x90>
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d002      	beq.n	800b702 <RCCEx_PLLSAI2_Config+0x4e>
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d009      	beq.n	800b714 <RCCEx_PLLSAI2_Config+0x60>
 800b700:	e020      	b.n	800b744 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b702:	4b62      	ldr	r3, [pc, #392]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f003 0302 	and.w	r3, r3, #2
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d11d      	bne.n	800b74a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b712:	e01a      	b.n	800b74a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b714:	4b5d      	ldr	r3, [pc, #372]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d116      	bne.n	800b74e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b724:	e013      	b.n	800b74e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b726:	4b59      	ldr	r3, [pc, #356]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10f      	bne.n	800b752 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b732:	4b56      	ldr	r3, [pc, #344]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d109      	bne.n	800b752 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b742:	e006      	b.n	800b752 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	73fb      	strb	r3, [r7, #15]
      break;
 800b748:	e004      	b.n	800b754 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b74a:	bf00      	nop
 800b74c:	e002      	b.n	800b754 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b74e:	bf00      	nop
 800b750:	e000      	b.n	800b754 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b752:	bf00      	nop
    }

    if(status == HAL_OK)
 800b754:	7bfb      	ldrb	r3, [r7, #15]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d108      	bne.n	800b76c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b75a:	4b4c      	ldr	r3, [pc, #304]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	f023 0203 	bic.w	r2, r3, #3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4949      	ldr	r1, [pc, #292]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b768:	4313      	orrs	r3, r2
 800b76a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f040 8086 	bne.w	800b880 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b774:	4b45      	ldr	r3, [pc, #276]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a44      	ldr	r2, [pc, #272]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b77a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b77e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b780:	f7fa fd50 	bl	8006224 <HAL_GetTick>
 800b784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b786:	e009      	b.n	800b79c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b788:	f7fa fd4c 	bl	8006224 <HAL_GetTick>
 800b78c:	4602      	mov	r2, r0
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	2b02      	cmp	r3, #2
 800b794:	d902      	bls.n	800b79c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b796:	2303      	movs	r3, #3
 800b798:	73fb      	strb	r3, [r7, #15]
        break;
 800b79a:	e005      	b.n	800b7a8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b79c:	4b3b      	ldr	r3, [pc, #236]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1ef      	bne.n	800b788 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d168      	bne.n	800b880 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d113      	bne.n	800b7dc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b7b4:	4b35      	ldr	r3, [pc, #212]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7b6:	695a      	ldr	r2, [r3, #20]
 800b7b8:	4b35      	ldr	r3, [pc, #212]	; (800b890 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	6892      	ldr	r2, [r2, #8]
 800b7c0:	0211      	lsls	r1, r2, #8
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	68d2      	ldr	r2, [r2, #12]
 800b7c6:	06d2      	lsls	r2, r2, #27
 800b7c8:	4311      	orrs	r1, r2
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	6852      	ldr	r2, [r2, #4]
 800b7ce:	3a01      	subs	r2, #1
 800b7d0:	0112      	lsls	r2, r2, #4
 800b7d2:	430a      	orrs	r2, r1
 800b7d4:	492d      	ldr	r1, [pc, #180]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	614b      	str	r3, [r1, #20]
 800b7da:	e02d      	b.n	800b838 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d115      	bne.n	800b80e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b7e2:	4b2a      	ldr	r3, [pc, #168]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7e4:	695a      	ldr	r2, [r3, #20]
 800b7e6:	4b2b      	ldr	r3, [pc, #172]	; (800b894 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	6892      	ldr	r2, [r2, #8]
 800b7ee:	0211      	lsls	r1, r2, #8
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	6912      	ldr	r2, [r2, #16]
 800b7f4:	0852      	lsrs	r2, r2, #1
 800b7f6:	3a01      	subs	r2, #1
 800b7f8:	0552      	lsls	r2, r2, #21
 800b7fa:	4311      	orrs	r1, r2
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	6852      	ldr	r2, [r2, #4]
 800b800:	3a01      	subs	r2, #1
 800b802:	0112      	lsls	r2, r2, #4
 800b804:	430a      	orrs	r2, r1
 800b806:	4921      	ldr	r1, [pc, #132]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b808:	4313      	orrs	r3, r2
 800b80a:	614b      	str	r3, [r1, #20]
 800b80c:	e014      	b.n	800b838 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b80e:	4b1f      	ldr	r3, [pc, #124]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b810:	695a      	ldr	r2, [r3, #20]
 800b812:	4b21      	ldr	r3, [pc, #132]	; (800b898 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b814:	4013      	ands	r3, r2
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	6892      	ldr	r2, [r2, #8]
 800b81a:	0211      	lsls	r1, r2, #8
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	6952      	ldr	r2, [r2, #20]
 800b820:	0852      	lsrs	r2, r2, #1
 800b822:	3a01      	subs	r2, #1
 800b824:	0652      	lsls	r2, r2, #25
 800b826:	4311      	orrs	r1, r2
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	6852      	ldr	r2, [r2, #4]
 800b82c:	3a01      	subs	r2, #1
 800b82e:	0112      	lsls	r2, r2, #4
 800b830:	430a      	orrs	r2, r1
 800b832:	4916      	ldr	r1, [pc, #88]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b834:	4313      	orrs	r3, r2
 800b836:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b838:	4b14      	ldr	r3, [pc, #80]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a13      	ldr	r2, [pc, #76]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b83e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b842:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b844:	f7fa fcee 	bl	8006224 <HAL_GetTick>
 800b848:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b84a:	e009      	b.n	800b860 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b84c:	f7fa fcea 	bl	8006224 <HAL_GetTick>
 800b850:	4602      	mov	r2, r0
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	2b02      	cmp	r3, #2
 800b858:	d902      	bls.n	800b860 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	73fb      	strb	r3, [r7, #15]
          break;
 800b85e:	e005      	b.n	800b86c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b860:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d0ef      	beq.n	800b84c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d106      	bne.n	800b880 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b872:	4b06      	ldr	r3, [pc, #24]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b874:	695a      	ldr	r2, [r3, #20]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	699b      	ldr	r3, [r3, #24]
 800b87a:	4904      	ldr	r1, [pc, #16]	; (800b88c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b87c:	4313      	orrs	r3, r2
 800b87e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b880:	7bfb      	ldrb	r3, [r7, #15]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	40021000 	.word	0x40021000
 800b890:	07ff800f 	.word	0x07ff800f
 800b894:	ff9f800f 	.word	0xff9f800f
 800b898:	f9ff800f 	.word	0xf9ff800f

0800b89c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b08a      	sub	sp, #40	; 0x28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e075      	b.n	800b99a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d105      	bne.n	800b8c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f8f7 	bl	800bab4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2203      	movs	r2, #3
 800b8ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f868 	bl	800b9a4 <HAL_SD_InitCard>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e05d      	b.n	800b99a <HAL_SD_Init+0xfe>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b8de:	f107 0308 	add.w	r3, r7, #8
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fda3 	bl	800c430 <HAL_SD_GetCardStatus>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e052      	b.n	800b99a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b8f4:	7e3b      	ldrb	r3, [r7, #24]
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b8fa:	7e7b      	ldrb	r3, [r7, #25]
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b904:	2b01      	cmp	r3, #1
 800b906:	d10a      	bne.n	800b91e <HAL_SD_Init+0x82>
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d102      	bne.n	800b914 <HAL_SD_Init+0x78>
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d004      	beq.n	800b91e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b91a:	65da      	str	r2, [r3, #92]	; 0x5c
 800b91c:	e00b      	b.n	800b936 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b922:	2b01      	cmp	r3, #1
 800b924:	d104      	bne.n	800b930 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b92c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b92e:	e002      	b.n	800b936 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fe59 	bl	800c5f4 <HAL_SD_ConfigWideBusOperation>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	e026      	b.n	800b99a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b94c:	f7fa fc6a 	bl	8006224 <HAL_GetTick>
 800b950:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b952:	e011      	b.n	800b978 <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800b954:	f7fa fc66 	bl	8006224 <HAL_GetTick>
 800b958:	4602      	mov	r2, r0
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b962:	d109      	bne.n	800b978 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b96a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800b974:	2303      	movs	r3, #3
 800b976:	e010      	b.n	800b99a <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 fee5 	bl	800c748 <HAL_SD_GetCardState>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b04      	cmp	r3, #4
 800b982:	d1e7      	bne.n	800b954 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3728      	adds	r7, #40	; 0x28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b9a4:	b5b0      	push	{r4, r5, r7, lr}
 800b9a6:	b08e      	sub	sp, #56	; 0x38
 800b9a8:	af04      	add	r7, sp, #16
 800b9aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b9bc:	238a      	movs	r3, #138	; 0x8a
 800b9be:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d107      	bne.n	800b9d8 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f042 0210 	orr.w	r2, r2, #16
 800b9d6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681d      	ldr	r5, [r3, #0]
 800b9dc:	466c      	mov	r4, sp
 800b9de:	f107 0314 	add.w	r3, r7, #20
 800b9e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b9e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b9ea:	f107 0308 	add.w	r3, r7, #8
 800b9ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f004 fb4f 	bl	8010094 <SDMMC_Init>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e04f      	b.n	800baa8 <HAL_SD_InitCard+0x104>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f004 fb89 	bl	8010124 <SDMMC_PowerState_ON>
 800ba12:	4603      	mov	r3, r0
 800ba14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ba18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	e041      	b.n	800baa8 <HAL_SD_InitCard+0x104>
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 ff6d 	bl	800c904 <SD_PowerON>
 800ba2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00b      	beq.n	800ba4a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba3e:	6a3b      	ldr	r3, [r7, #32]
 800ba40:	431a      	orrs	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e02e      	b.n	800baa8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fe9c 	bl	800c788 <SD_InitCard>
 800ba50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00b      	beq.n	800ba70 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	431a      	orrs	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e01b      	b.n	800baa8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f004 fbe9 	bl	8010250 <SDMMC_CmdBlockLength>
 800ba7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00f      	beq.n	800baa6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <HAL_SD_InitCard+0x10c>)
 800ba8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	431a      	orrs	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e000      	b.n	800baa8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3728      	adds	r7, #40	; 0x28
 800baac:	46bd      	mov	sp, r7
 800baae:	bdb0      	pop	{r4, r5, r7, pc}
 800bab0:	1fe00fff 	.word	0x1fe00fff

0800bab4 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08c      	sub	sp, #48	; 0x30
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d107      	bne.n	800baf0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e08d      	b.n	800bc0c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	f040 8086 	bne.w	800bc0a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bb04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	441a      	add	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d907      	bls.n	800bb22 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e074      	b.n	800bc0c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2203      	movs	r2, #3
 800bb26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	025a      	lsls	r2, r3, #9
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d002      	beq.n	800bb4e <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	025b      	lsls	r3, r3, #9
 800bb4c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bb4e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb52:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	025b      	lsls	r3, r3, #9
 800bb58:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bb5a:	2390      	movs	r3, #144	; 0x90
 800bb5c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bb5e:	2302      	movs	r3, #2
 800bb60:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f107 0210 	add.w	r2, r7, #16
 800bb72:	4611      	mov	r1, r2
 800bb74:	4618      	mov	r0, r3
 800bb76:	f004 fb3f 	bl	80101f8 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68da      	ldr	r2, [r3, #12]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb88:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2201      	movs	r2, #1
 800bb98:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d90a      	bls.n	800bbb6 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2282      	movs	r2, #130	; 0x82
 800bba4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbac:	4618      	mov	r0, r3
 800bbae:	f004 fb95 	bl	80102dc <SDMMC_CmdReadMultiBlock>
 800bbb2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bbb4:	e009      	b.n	800bbca <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2281      	movs	r2, #129	; 0x81
 800bbba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f004 fb67 	bl	8010296 <SDMMC_CmdReadSingleBlock>
 800bbc8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800bbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d012      	beq.n	800bbf6 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a0f      	ldr	r2, [pc, #60]	; (800bc14 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800bbd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbde:	431a      	orrs	r2, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e00a      	b.n	800bc0c <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800bc04:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	e000      	b.n	800bc0c <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800bc0a:	2302      	movs	r3, #2
  }
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3730      	adds	r7, #48	; 0x30
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	1fe00fff 	.word	0x1fe00fff

0800bc18 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08c      	sub	sp, #48	; 0x30
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d107      	bne.n	800bc40 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e08d      	b.n	800bd5c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	f040 8086 	bne.w	800bd5a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bc54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	441a      	add	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d907      	bls.n	800bc72 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e074      	b.n	800bd5c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2203      	movs	r2, #3
 800bc76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	025a      	lsls	r2, r3, #9
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d002      	beq.n	800bc9e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	025b      	lsls	r3, r3, #9
 800bc9c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bc9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bca2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	025b      	lsls	r3, r3, #9
 800bca8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bcaa:	2390      	movs	r3, #144	; 0x90
 800bcac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f107 0210 	add.w	r2, r7, #16
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f004 fa97 	bl	80101f8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68da      	ldr	r2, [r3, #12]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcd8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2201      	movs	r2, #1
 800bce8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d90a      	bls.n	800bd06 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	22a0      	movs	r2, #160	; 0xa0
 800bcf4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f004 fb33 	bl	8010368 <SDMMC_CmdWriteMultiBlock>
 800bd02:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bd04:	e009      	b.n	800bd1a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2290      	movs	r2, #144	; 0x90
 800bd0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd12:	4618      	mov	r0, r3
 800bd14:	f004 fb05 	bl	8010322 <SDMMC_CmdWriteSingleBlock>
 800bd18:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d012      	beq.n	800bd46 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a0f      	ldr	r2, [pc, #60]	; (800bd64 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800bd26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2e:	431a      	orrs	r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e00a      	b.n	800bd5c <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800bd54:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	e000      	b.n	800bd5c <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800bd5a:	2302      	movs	r3, #2
  }
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3730      	adds	r7, #48	; 0x30
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	1fe00fff 	.word	0x1fe00fff

0800bd68 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd74:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d008      	beq.n	800bd96 <HAL_SD_IRQHandler+0x2e>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f003 0308 	and.w	r3, r3, #8
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f001 f928 	bl	800cfe4 <SD_Read_IT>
 800bd94:	e199      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 80ae 	beq.w	800bf02 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	6812      	ldr	r2, [r2, #0]
 800bdba:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800bdbe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800bdc2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bdd2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68da      	ldr	r2, [r3, #12]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bde2:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f003 0308 	and.w	r3, r3, #8
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d038      	beq.n	800be60 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f003 0302 	and.w	r3, r3, #2
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d104      	bne.n	800be02 <HAL_SD_IRQHandler+0x9a>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f003 0320 	and.w	r3, r3, #32
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d011      	beq.n	800be26 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4618      	mov	r0, r3
 800be08:	f004 fad2 	bl	80103b0 <SDMMC_CmdStopTransfer>
 800be0c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d008      	beq.n	800be26 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	431a      	orrs	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f957 	bl	800c0d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4aa0      	ldr	r2, [pc, #640]	; (800c0ac <HAL_SD_IRQHandler+0x344>)
 800be2c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f003 0301 	and.w	r3, r3, #1
 800be42:	2b00      	cmp	r3, #0
 800be44:	d104      	bne.n	800be50 <HAL_SD_IRQHandler+0xe8>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f003 0302 	and.w	r3, r3, #2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7fa f971 	bl	8006138 <HAL_SD_RxCpltCallback>
 800be56:	e138      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7fa f963 	bl	8006124 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800be5e:	e134      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 812f 	beq.w	800c0ca <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2200      	movs	r2, #0
 800be72:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2200      	movs	r2, #0
 800be7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2200      	movs	r2, #0
 800be82:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f003 0302 	and.w	r3, r3, #2
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d104      	bne.n	800be98 <HAL_SD_IRQHandler+0x130>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f003 0320 	and.w	r3, r3, #32
 800be94:	2b00      	cmp	r3, #0
 800be96:	d011      	beq.n	800bebc <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f004 fa87 	bl	80103b0 <SDMMC_CmdStopTransfer>
 800bea2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d008      	beq.n	800bebc <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	431a      	orrs	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f90c 	bl	800c0d4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f003 0310 	and.w	r3, r3, #16
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d104      	bne.n	800bede <HAL_SD_IRQHandler+0x176>
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f003 0320 	and.w	r3, r3, #32
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d002      	beq.n	800bee4 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7fa f920 	bl	8006124 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d105      	bne.n	800befa <HAL_SD_IRQHandler+0x192>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f003 0302 	and.w	r3, r3, #2
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f000 80e8 	beq.w	800c0ca <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7fa f91c 	bl	8006138 <HAL_SD_RxCpltCallback>
}
 800bf00:	e0e3      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d008      	beq.n	800bf22 <HAL_SD_IRQHandler+0x1ba>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f003 0308 	and.w	r3, r3, #8
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f001 f8b3 	bl	800d086 <SD_Write_IT>
 800bf20:	e0d3      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf28:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 809d 	beq.w	800c06c <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf38:	f003 0302 	and.w	r3, r3, #2
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d005      	beq.n	800bf4c <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf44:	f043 0202 	orr.w	r2, r3, #2
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf52:	f003 0308 	and.w	r3, r3, #8
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d005      	beq.n	800bf66 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5e:	f043 0208 	orr.w	r2, r3, #8
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf6c:	f003 0320 	and.w	r3, r3, #32
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d005      	beq.n	800bf80 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf78:	f043 0220 	orr.w	r2, r3, #32
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf86:	f003 0310 	and.w	r3, r3, #16
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d005      	beq.n	800bf9a <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf92:	f043 0210 	orr.w	r2, r3, #16
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a43      	ldr	r2, [pc, #268]	; (800c0ac <HAL_SD_IRQHandler+0x344>)
 800bfa0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bfb0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68da      	ldr	r2, [r3, #12]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfc0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68da      	ldr	r2, [r3, #12]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bfe0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f004 f9e2 	bl	80103b0 <SDMMC_CmdStopTransfer>
 800bfec:	4602      	mov	r2, r0
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff2:	431a      	orrs	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c006:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c010:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f003 0308 	and.w	r3, r3, #8
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00a      	beq.n	800c032 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 f852 	bl	800c0d4 <HAL_SD_ErrorCallback>
}
 800c030:	e04b      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d046      	beq.n	800c0ca <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c040:	2b00      	cmp	r3, #0
 800c042:	d042      	beq.n	800c0ca <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c052:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2200      	movs	r2, #0
 800c05a:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 f835 	bl	800c0d4 <HAL_SD_ErrorCallback>
}
 800c06a:	e02e      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c076:	2b00      	cmp	r3, #0
 800c078:	d027      	beq.n	800c0ca <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c082:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c08a:	f003 0304 	and.w	r3, r3, #4
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10e      	bne.n	800c0b0 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f003 0320 	and.w	r3, r3, #32
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d003      	beq.n	800c0a4 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f001 f870 	bl	800d182 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800c0a2:	e012      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 f858 	bl	800d15a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800c0aa:	e00e      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
 800c0ac:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f001 f857 	bl	800d16e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800c0c0:	e003      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f001 f83f 	bl	800d146 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800c0c8:	e7ff      	b.n	800c0ca <HAL_SD_IRQHandler+0x362>
 800c0ca:	bf00      	nop
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop

0800c0d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0f6:	0f9b      	lsrs	r3, r3, #30
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c102:	0e9b      	lsrs	r3, r3, #26
 800c104:	b2db      	uxtb	r3, r3
 800c106:	f003 030f 	and.w	r3, r3, #15
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c114:	0e1b      	lsrs	r3, r3, #24
 800c116:	b2db      	uxtb	r3, r3
 800c118:	f003 0303 	and.w	r3, r3, #3
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c126:	0c1b      	lsrs	r3, r3, #16
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c132:	0a1b      	lsrs	r3, r3, #8
 800c134:	b2da      	uxtb	r2, r3
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c148:	0d1b      	lsrs	r3, r3, #20
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c154:	0c1b      	lsrs	r3, r3, #16
 800c156:	b2db      	uxtb	r3, r3
 800c158:	f003 030f 	and.w	r3, r3, #15
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c166:	0bdb      	lsrs	r3, r3, #15
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c178:	0b9b      	lsrs	r3, r3, #14
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	b2da      	uxtb	r2, r3
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c18a:	0b5b      	lsrs	r3, r3, #13
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	f003 0301 	and.w	r3, r3, #1
 800c192:	b2da      	uxtb	r2, r3
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c19c:	0b1b      	lsrs	r3, r3, #12
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	f003 0301 	and.w	r3, r3, #1
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d163      	bne.n	800c280 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1bc:	009a      	lsls	r2, r3, #2
 800c1be:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c1c8:	0f92      	lsrs	r2, r2, #30
 800c1ca:	431a      	orrs	r2, r3
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1d4:	0edb      	lsrs	r3, r3, #27
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	f003 0307 	and.w	r3, r3, #7
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1e6:	0e1b      	lsrs	r3, r3, #24
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	f003 0307 	and.w	r3, r3, #7
 800c1ee:	b2da      	uxtb	r2, r3
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1f8:	0d5b      	lsrs	r3, r3, #21
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	f003 0307 	and.w	r3, r3, #7
 800c200:	b2da      	uxtb	r2, r3
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c20a:	0c9b      	lsrs	r3, r3, #18
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	f003 0307 	and.w	r3, r3, #7
 800c212:	b2da      	uxtb	r2, r3
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c21c:	0bdb      	lsrs	r3, r3, #15
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	f003 0307 	and.w	r3, r3, #7
 800c224:	b2da      	uxtb	r2, r3
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	7e1b      	ldrb	r3, [r3, #24]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	f003 0307 	and.w	r3, r3, #7
 800c23e:	3302      	adds	r3, #2
 800c240:	2201      	movs	r2, #1
 800c242:	fa02 f303 	lsl.w	r3, r2, r3
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c24a:	fb02 f203 	mul.w	r2, r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	7a1b      	ldrb	r3, [r3, #8]
 800c256:	b2db      	uxtb	r3, r3
 800c258:	f003 030f 	and.w	r3, r3, #15
 800c25c:	2201      	movs	r2, #1
 800c25e:	409a      	lsls	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c26c:	0a52      	lsrs	r2, r2, #9
 800c26e:	fb02 f203 	mul.w	r2, r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c27c:	659a      	str	r2, [r3, #88]	; 0x58
 800c27e:	e031      	b.n	800c2e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c284:	2b01      	cmp	r3, #1
 800c286:	d11d      	bne.n	800c2c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c28c:	041b      	lsls	r3, r3, #16
 800c28e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c296:	0c1b      	lsrs	r3, r3, #16
 800c298:	431a      	orrs	r2, r3
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	029a      	lsls	r2, r3, #10
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2b8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	659a      	str	r2, [r3, #88]	; 0x58
 800c2c2:	e00f      	b.n	800c2e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a58      	ldr	r2, [pc, #352]	; (800c42c <HAL_SD_GetCardCSD+0x344>)
 800c2ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e09d      	b.n	800c420 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2e8:	0b9b      	lsrs	r3, r3, #14
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	f003 0301 	and.w	r3, r3, #1
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2fa:	09db      	lsrs	r3, r3, #7
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c302:	b2da      	uxtb	r2, r3
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c312:	b2da      	uxtb	r2, r3
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c31c:	0fdb      	lsrs	r3, r3, #31
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c328:	0f5b      	lsrs	r3, r3, #29
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	f003 0303 	and.w	r3, r3, #3
 800c330:	b2da      	uxtb	r2, r3
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c33a:	0e9b      	lsrs	r3, r3, #26
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	f003 0307 	and.w	r3, r3, #7
 800c342:	b2da      	uxtb	r2, r3
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c34c:	0d9b      	lsrs	r3, r3, #22
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	f003 030f 	and.w	r3, r3, #15
 800c354:	b2da      	uxtb	r2, r3
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c35e:	0d5b      	lsrs	r3, r3, #21
 800c360:	b2db      	uxtb	r3, r3
 800c362:	f003 0301 	and.w	r3, r3, #1
 800c366:	b2da      	uxtb	r2, r3
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37a:	0c1b      	lsrs	r3, r3, #16
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	b2da      	uxtb	r2, r3
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c38e:	0bdb      	lsrs	r3, r3, #15
 800c390:	b2db      	uxtb	r3, r3
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	b2da      	uxtb	r2, r3
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3a2:	0b9b      	lsrs	r3, r3, #14
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b6:	0b5b      	lsrs	r3, r3, #13
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ca:	0b1b      	lsrs	r3, r3, #12
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	f003 0301 	and.w	r3, r3, #1
 800c3d2:	b2da      	uxtb	r2, r3
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3de:	0a9b      	lsrs	r3, r3, #10
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	f003 0303 	and.w	r3, r3, #3
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f2:	0a1b      	lsrs	r3, r3, #8
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	f003 0303 	and.w	r3, r3, #3
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c406:	085b      	lsrs	r3, r3, #1
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	1fe00fff 	.word	0x1fe00fff

0800c430 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b094      	sub	sp, #80	; 0x50
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c440:	f107 0308 	add.w	r3, r7, #8
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fb6e 	bl	800cb28 <SD_SendSDStatus>
 800c44c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c44e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c450:	2b00      	cmp	r3, #0
 800c452:	d011      	beq.n	800c478 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a4f      	ldr	r2, [pc, #316]	; (800c598 <HAL_SD_GetCardStatus+0x168>)
 800c45a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c462:	431a      	orrs	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c476:	e070      	b.n	800c55a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	099b      	lsrs	r3, r3, #6
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	f003 0303 	and.w	r3, r3, #3
 800c482:	b2da      	uxtb	r2, r3
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	095b      	lsrs	r3, r3, #5
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	f003 0301 	and.w	r3, r3, #1
 800c492:	b2da      	uxtb	r2, r3
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	0a1b      	lsrs	r3, r3, #8
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	0e1b      	lsrs	r3, r3, #24
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	b29a      	uxth	r2, r3
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	061a      	lsls	r2, r3, #24
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	021b      	lsls	r3, r3, #8
 800c4ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4be:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	0a1b      	lsrs	r3, r3, #8
 800c4c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4c8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	0e1b      	lsrs	r3, r3, #24
 800c4ce:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	0a1b      	lsrs	r3, r3, #8
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	0d1b      	lsrs	r3, r3, #20
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	f003 030f 	and.w	r3, r3, #15
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	0c1b      	lsrs	r3, r3, #16
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c500:	b29a      	uxth	r2, r3
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	b29b      	uxth	r3, r3
 800c506:	b2db      	uxtb	r3, r3
 800c508:	b29b      	uxth	r3, r3
 800c50a:	4313      	orrs	r3, r2
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	0a9b      	lsrs	r3, r3, #10
 800c516:	b2db      	uxtb	r3, r3
 800c518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c51c:	b2da      	uxtb	r2, r3
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	0a1b      	lsrs	r3, r3, #8
 800c526:	b2db      	uxtb	r3, r3
 800c528:	f003 0303 	and.w	r3, r3, #3
 800c52c:	b2da      	uxtb	r2, r3
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	091b      	lsrs	r3, r3, #4
 800c536:	b2db      	uxtb	r3, r3
 800c538:	f003 030f 	and.w	r3, r3, #15
 800c53c:	b2da      	uxtb	r2, r3
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	b2db      	uxtb	r3, r3
 800c546:	f003 030f 	and.w	r3, r3, #15
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	0e1b      	lsrs	r3, r3, #24
 800c554:	b2da      	uxtb	r2, r3
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c562:	4618      	mov	r0, r3
 800c564:	f003 fe74 	bl	8010250 <SDMMC_CmdBlockLength>
 800c568:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c56a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00d      	beq.n	800c58c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a08      	ldr	r2, [pc, #32]	; (800c598 <HAL_SD_GetCardStatus+0x168>)
 800c576:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c57c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800c58c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c590:	4618      	mov	r0, r3
 800c592:	3750      	adds	r7, #80	; 0x50
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	1fe00fff 	.word	0x1fe00fff

0800c59c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c5f4:	b5b0      	push	{r4, r5, r7, lr}
 800c5f6:	b08e      	sub	sp, #56	; 0x38
 800c5f8:	af04      	add	r7, sp, #16
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c5fe:	2300      	movs	r3, #0
 800c600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2203      	movs	r2, #3
 800c608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c610:	2b03      	cmp	r3, #3
 800c612:	d02e      	beq.n	800c672 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c61a:	d106      	bne.n	800c62a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c620:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	639a      	str	r2, [r3, #56]	; 0x38
 800c628:	e029      	b.n	800c67e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c630:	d10a      	bne.n	800c648 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fb70 	bl	800cd18 <SD_WideBus_Enable>
 800c638:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	431a      	orrs	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	639a      	str	r2, [r3, #56]	; 0x38
 800c646:	e01a      	b.n	800c67e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10a      	bne.n	800c664 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fbad 	bl	800cdae <SD_WideBus_Disable>
 800c654:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c65a:	6a3b      	ldr	r3, [r7, #32]
 800c65c:	431a      	orrs	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	639a      	str	r2, [r3, #56]	; 0x38
 800c662:	e00c      	b.n	800c67e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c668:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	639a      	str	r2, [r3, #56]	; 0x38
 800c670:	e005      	b.n	800c67e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c676:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c682:	2b00      	cmp	r3, #0
 800c684:	d007      	beq.n	800c696 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a2e      	ldr	r2, [pc, #184]	; (800c744 <HAL_SD_ConfigWideBusOperation+0x150>)
 800c68c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c694:	e034      	b.n	800c700 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	617b      	str	r3, [r7, #20]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	695b      	ldr	r3, [r3, #20]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d903      	bls.n	800c6bc <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	61bb      	str	r3, [r7, #24]
 800c6ba:	e012      	b.n	800c6e2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6c4:	d103      	bne.n	800c6ce <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	61bb      	str	r3, [r7, #24]
 800c6cc:	e009      	b.n	800c6e2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6d6:	d102      	bne.n	800c6de <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800c6d8:	2302      	movs	r3, #2
 800c6da:	61bb      	str	r3, [r7, #24]
 800c6dc:	e001      	b.n	800c6e2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800c6de:	2303      	movs	r3, #3
 800c6e0:	61bb      	str	r3, [r7, #24]
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681d      	ldr	r5, [r3, #0]
 800c6e6:	466c      	mov	r4, sp
 800c6e8:	f107 0314 	add.w	r3, r7, #20
 800c6ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c6f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c6f4:	f107 0308 	add.w	r3, r7, #8
 800c6f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	f003 fcca 	bl	8010094 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c708:	4618      	mov	r0, r3
 800c70a:	f003 fda1 	bl	8010250 <SDMMC_CmdBlockLength>
 800c70e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00c      	beq.n	800c730 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a0a      	ldr	r2, [pc, #40]	; (800c744 <HAL_SD_ConfigWideBusOperation+0x150>)
 800c71c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	431a      	orrs	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3728      	adds	r7, #40	; 0x28
 800c740:	46bd      	mov	sp, r7
 800c742:	bdb0      	pop	{r4, r5, r7, pc}
 800c744:	1fe00fff 	.word	0x1fe00fff

0800c748 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b086      	sub	sp, #24
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c754:	f107 030c 	add.w	r3, r7, #12
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fab4 	bl	800ccc8 <SD_SendStatus>
 800c760:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d005      	beq.n	800c774 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	0a5b      	lsrs	r3, r3, #9
 800c778:	f003 030f 	and.w	r3, r3, #15
 800c77c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c77e:	693b      	ldr	r3, [r7, #16]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3718      	adds	r7, #24
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b090      	sub	sp, #64	; 0x40
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c790:	2301      	movs	r3, #1
 800c792:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4618      	mov	r0, r3
 800c79a:	f003 fcd5 	bl	8010148 <SDMMC_GetPowerState>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d102      	bne.n	800c7aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c7a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c7a8:	e0a7      	b.n	800c8fa <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d02e      	beq.n	800c810 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f003 ff1a 	bl	80105f0 <SDMMC_CmdSendCID>
 800c7bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <SD_InitCard+0x40>
    {
      return errorstate;
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	e098      	b.n	800c8fa <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f003 fcff 	bl	80101d2 <SDMMC_GetResponse>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2104      	movs	r1, #4
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f003 fcf6 	bl	80101d2 <SDMMC_GetResponse>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2108      	movs	r1, #8
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f003 fced 	bl	80101d2 <SDMMC_GetResponse>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	210c      	movs	r1, #12
 800c804:	4618      	mov	r0, r3
 800c806:	f003 fce4 	bl	80101d2 <SDMMC_GetResponse>
 800c80a:	4602      	mov	r2, r0
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c814:	2b03      	cmp	r3, #3
 800c816:	d00d      	beq.n	800c834 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f107 020e 	add.w	r2, r7, #14
 800c820:	4611      	mov	r1, r2
 800c822:	4618      	mov	r0, r3
 800c824:	f003 ff23 	bl	801066e <SDMMC_CmdSetRelAdd>
 800c828:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d001      	beq.n	800c834 <SD_InitCard+0xac>
    {
      return errorstate;
 800c830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c832:	e062      	b.n	800c8fa <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c838:	2b03      	cmp	r3, #3
 800c83a:	d036      	beq.n	800c8aa <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c83c:	89fb      	ldrh	r3, [r7, #14]
 800c83e:	461a      	mov	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c84c:	041b      	lsls	r3, r3, #16
 800c84e:	4619      	mov	r1, r3
 800c850:	4610      	mov	r0, r2
 800c852:	f003 feec 	bl	801062e <SDMMC_CmdSendCSD>
 800c856:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <SD_InitCard+0xda>
    {
      return errorstate;
 800c85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c860:	e04b      	b.n	800c8fa <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2100      	movs	r1, #0
 800c868:	4618      	mov	r0, r3
 800c86a:	f003 fcb2 	bl	80101d2 <SDMMC_GetResponse>
 800c86e:	4602      	mov	r2, r0
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2104      	movs	r1, #4
 800c87a:	4618      	mov	r0, r3
 800c87c:	f003 fca9 	bl	80101d2 <SDMMC_GetResponse>
 800c880:	4602      	mov	r2, r0
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2108      	movs	r1, #8
 800c88c:	4618      	mov	r0, r3
 800c88e:	f003 fca0 	bl	80101d2 <SDMMC_GetResponse>
 800c892:	4602      	mov	r2, r0
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	210c      	movs	r1, #12
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f003 fc97 	bl	80101d2 <SDMMC_GetResponse>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2104      	movs	r1, #4
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f003 fc8e 	bl	80101d2 <SDMMC_GetResponse>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	0d1a      	lsrs	r2, r3, #20
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c8be:	f107 0310 	add.w	r3, r7, #16
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7ff fc0f 	bl	800c0e8 <HAL_SD_GetCardCSD>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c8d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c8d4:	e011      	b.n	800c8fa <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6819      	ldr	r1, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8de:	041b      	lsls	r3, r3, #16
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	f04f 0300 	mov.w	r3, #0
 800c8e6:	4608      	mov	r0, r1
 800c8e8:	f003 fd98 	bl	801041c <SDMMC_CmdSelDesel>
 800c8ec:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d001      	beq.n	800c8f8 <SD_InitCard+0x170>
  {
    return errorstate;
 800c8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f6:	e000      	b.n	800c8fa <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3740      	adds	r7, #64	; 0x40
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
	...

0800c904 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b088      	sub	sp, #32
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c90c:	2300      	movs	r3, #0
 800c90e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800c910:	2300      	movs	r3, #0
 800c912:	61fb      	str	r3, [r7, #28]
 800c914:	2300      	movs	r3, #0
 800c916:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800c918:	f7f9 fc84 	bl	8006224 <HAL_GetTick>
 800c91c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4618      	mov	r0, r3
 800c924:	f003 fd9e 	bl	8010464 <SDMMC_CmdGoIdleState>
 800c928:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <SD_PowerON+0x30>
  {
    return errorstate;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	e0f2      	b.n	800cb1a <SD_PowerON+0x216>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4618      	mov	r0, r3
 800c93a:	f003 fdb1 	bl	80104a0 <SDMMC_CmdOperCond>
 800c93e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00d      	beq.n	800c962 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4618      	mov	r0, r3
 800c952:	f003 fd87 	bl	8010464 <SDMMC_CmdGoIdleState>
 800c956:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d004      	beq.n	800c968 <SD_PowerON+0x64>
    {
      return errorstate;
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	e0db      	b.n	800cb1a <SD_PowerON+0x216>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2201      	movs	r2, #1
 800c966:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d137      	bne.n	800c9e0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2100      	movs	r1, #0
 800c976:	4618      	mov	r0, r3
 800c978:	f003 fdb2 	bl	80104e0 <SDMMC_CmdAppCommand>
 800c97c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d02d      	beq.n	800c9e0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c988:	e0c7      	b.n	800cb1a <SD_PowerON+0x216>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2100      	movs	r1, #0
 800c990:	4618      	mov	r0, r3
 800c992:	f003 fda5 	bl	80104e0 <SDMMC_CmdAppCommand>
 800c996:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <SD_PowerON+0x9e>
    {
      return errorstate;
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	e0bb      	b.n	800cb1a <SD_PowerON+0x216>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	495f      	ldr	r1, [pc, #380]	; (800cb24 <SD_PowerON+0x220>)
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f003 fdbc 	bl	8010526 <SDMMC_CmdAppOperCommand>
 800c9ae:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d002      	beq.n	800c9bc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c9ba:	e0ae      	b.n	800cb1a <SD_PowerON+0x216>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f003 fc05 	bl	80101d2 <SDMMC_GetResponse>
 800c9c8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	0fdb      	lsrs	r3, r3, #31
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d101      	bne.n	800c9d6 <SD_PowerON+0xd2>
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e000      	b.n	800c9d8 <SD_PowerON+0xd4>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	61bb      	str	r3, [r7, #24]

    count++;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d802      	bhi.n	800c9f0 <SD_PowerON+0xec>
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d0cc      	beq.n	800c98a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d902      	bls.n	800ca00 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c9fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c9fe:	e08c      	b.n	800cb1a <SD_PowerON+0x216>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 8083 	beq.w	800cb12 <SD_PowerON+0x20e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	699b      	ldr	r3, [r3, #24]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d17e      	bne.n	800cb18 <SD_PowerON+0x214>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d079      	beq.n	800cb18 <SD_PowerON+0x214>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca2a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f042 0208 	orr.w	r2, r2, #8
 800ca3a:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f003 fe7b 	bl	801073c <SDMMC_CmdVoltageSwitch>
 800ca46:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00c      	beq.n	800ca68 <SD_PowerON+0x164>
        {
          return errorstate;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	e063      	b.n	800cb1a <SD_PowerON+0x216>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ca52:	f7f9 fbe7 	bl	8006224 <HAL_GetTick>
 800ca56:	4602      	mov	r2, r0
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca60:	d102      	bne.n	800ca68 <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800ca62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca66:	e058      	b.n	800cb1a <SD_PowerON+0x216>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca76:	d1ec      	bne.n	800ca52 <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ca80:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca90:	d002      	beq.n	800ca98 <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800ca92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca96:	e040      	b.n	800cb1a <SD_PowerON+0x216>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800ca98:	2001      	movs	r0, #1
 800ca9a:	f000 fb49 	bl	800d130 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f042 0204 	orr.w	r2, r2, #4
 800caac:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800caae:	e00a      	b.n	800cac6 <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cab0:	f7f9 fbb8 	bl	8006224 <HAL_GetTick>
 800cab4:	4602      	mov	r2, r0
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cabe:	d102      	bne.n	800cac6 <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800cac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cac4:	e029      	b.n	800cb1a <SD_PowerON+0x216>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cacc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cad4:	d1ec      	bne.n	800cab0 <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cade:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800caea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caee:	d102      	bne.n	800caf6 <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800caf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800caf4:	e011      	b.n	800cb1a <SD_PowerON+0x216>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2213      	movs	r2, #19
 800cafc:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f04f 32ff 	mov.w	r2, #4294967295
 800cb06:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb0e:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb10:	e002      	b.n	800cb18 <SD_PowerON+0x214>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3720      	adds	r7, #32
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	c1100000 	.word	0xc1100000

0800cb28 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08c      	sub	sp, #48	; 0x30
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cb32:	f7f9 fb77 	bl	8006224 <HAL_GetTick>
 800cb36:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2100      	movs	r1, #0
 800cb42:	4618      	mov	r0, r3
 800cb44:	f003 fb45 	bl	80101d2 <SDMMC_GetResponse>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb52:	d102      	bne.n	800cb5a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cb54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb58:	e0b0      	b.n	800ccbc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2140      	movs	r1, #64	; 0x40
 800cb60:	4618      	mov	r0, r3
 800cb62:	f003 fb75 	bl	8010250 <SDMMC_CmdBlockLength>
 800cb66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb68:	6a3b      	ldr	r3, [r7, #32]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d005      	beq.n	800cb7a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cb76:	6a3b      	ldr	r3, [r7, #32]
 800cb78:	e0a0      	b.n	800ccbc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb82:	041b      	lsls	r3, r3, #16
 800cb84:	4619      	mov	r1, r3
 800cb86:	4610      	mov	r0, r2
 800cb88:	f003 fcaa 	bl	80104e0 <SDMMC_CmdAppCommand>
 800cb8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb8e:	6a3b      	ldr	r3, [r7, #32]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d005      	beq.n	800cba0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	e08d      	b.n	800ccbc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cba0:	f04f 33ff 	mov.w	r3, #4294967295
 800cba4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800cba6:	2340      	movs	r3, #64	; 0x40
 800cba8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800cbaa:	2360      	movs	r3, #96	; 0x60
 800cbac:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cbae:	2302      	movs	r3, #2
 800cbb0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f107 0208 	add.w	r2, r7, #8
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f003 fb17 	bl	80101f8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f003 fd92 	bl	80106f8 <SDMMC_CmdStatusRegister>
 800cbd4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d02b      	beq.n	800cc34 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cbe4:	6a3b      	ldr	r3, [r7, #32]
 800cbe6:	e069      	b.n	800ccbc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d013      	beq.n	800cc1e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbfa:	e00d      	b.n	800cc18 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f003 fa71 	bl	80100e8 <SDMMC_ReadFIFO>
 800cc06:	4602      	mov	r2, r0
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	601a      	str	r2, [r3, #0]
        pData++;
 800cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0e:	3304      	adds	r3, #4
 800cc10:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800cc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc14:	3301      	adds	r3, #1
 800cc16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	2b07      	cmp	r3, #7
 800cc1c:	d9ee      	bls.n	800cbfc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cc1e:	f7f9 fb01 	bl	8006224 <HAL_GetTick>
 800cc22:	4602      	mov	r2, r0
 800cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2c:	d102      	bne.n	800cc34 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cc2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc32:	e043      	b.n	800ccbc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0d2      	beq.n	800cbe8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc48:	f003 0308 	and.w	r3, r3, #8
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d001      	beq.n	800cc54 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cc50:	2308      	movs	r3, #8
 800cc52:	e033      	b.n	800ccbc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc5a:	f003 0302 	and.w	r3, r3, #2
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d001      	beq.n	800cc66 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc62:	2302      	movs	r3, #2
 800cc64:	e02a      	b.n	800ccbc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6c:	f003 0320 	and.w	r3, r3, #32
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d017      	beq.n	800cca4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800cc74:	2320      	movs	r3, #32
 800cc76:	e021      	b.n	800ccbc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f003 fa33 	bl	80100e8 <SDMMC_ReadFIFO>
 800cc82:	4602      	mov	r2, r0
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	601a      	str	r2, [r3, #0]
    pData++;
 800cc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cc8e:	f7f9 fac9 	bl	8006224 <HAL_GetTick>
 800cc92:	4602      	mov	r2, r0
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9c:	d102      	bne.n	800cca4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cc9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cca2:	e00b      	b.n	800ccbc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1e2      	bne.n	800cc78 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a03      	ldr	r2, [pc, #12]	; (800ccc4 <SD_SendSDStatus+0x19c>)
 800ccb8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3730      	adds	r7, #48	; 0x30
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	18000f3a 	.word	0x18000f3a

0800ccc8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d102      	bne.n	800ccde <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ccd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ccdc:	e018      	b.n	800cd10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cce6:	041b      	lsls	r3, r3, #16
 800cce8:	4619      	mov	r1, r3
 800ccea:	4610      	mov	r0, r2
 800ccec:	f003 fce1 	bl	80106b2 <SDMMC_CmdSendStatus>
 800ccf0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <SD_SendStatus+0x34>
  {
    return errorstate;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	e009      	b.n	800cd10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2100      	movs	r1, #0
 800cd02:	4618      	mov	r0, r3
 800cd04:	f003 fa65 	bl	80101d2 <SDMMC_GetResponse>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800cd20:	2300      	movs	r3, #0
 800cd22:	60fb      	str	r3, [r7, #12]
 800cd24:	2300      	movs	r3, #0
 800cd26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f003 fa4f 	bl	80101d2 <SDMMC_GetResponse>
 800cd34:	4603      	mov	r3, r0
 800cd36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd3e:	d102      	bne.n	800cd46 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cd40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd44:	e02f      	b.n	800cda6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cd46:	f107 030c 	add.w	r3, r7, #12
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f879 	bl	800ce44 <SD_FindSCR>
 800cd52:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d001      	beq.n	800cd5e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	e023      	b.n	800cda6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d01c      	beq.n	800cda2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd70:	041b      	lsls	r3, r3, #16
 800cd72:	4619      	mov	r1, r3
 800cd74:	4610      	mov	r0, r2
 800cd76:	f003 fbb3 	bl	80104e0 <SDMMC_CmdAppCommand>
 800cd7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	e00f      	b.n	800cda6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2102      	movs	r1, #2
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f003 fbea 	bl	8010566 <SDMMC_CmdBusWidth>
 800cd92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	e003      	b.n	800cda6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	e001      	b.n	800cda6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cda2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b086      	sub	sp, #24
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	60fb      	str	r3, [r7, #12]
 800cdba:	2300      	movs	r3, #0
 800cdbc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f003 fa04 	bl	80101d2 <SDMMC_GetResponse>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdd4:	d102      	bne.n	800cddc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cdd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdda:	e02f      	b.n	800ce3c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cddc:	f107 030c 	add.w	r3, r7, #12
 800cde0:	4619      	mov	r1, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 f82e 	bl	800ce44 <SD_FindSCR>
 800cde8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	e023      	b.n	800ce3c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d01c      	beq.n	800ce38 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce06:	041b      	lsls	r3, r3, #16
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4610      	mov	r0, r2
 800ce0c:	f003 fb68 	bl	80104e0 <SDMMC_CmdAppCommand>
 800ce10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	e00f      	b.n	800ce3c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2100      	movs	r1, #0
 800ce22:	4618      	mov	r0, r3
 800ce24:	f003 fb9f 	bl	8010566 <SDMMC_CmdBusWidth>
 800ce28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d001      	beq.n	800ce34 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	e003      	b.n	800ce3c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ce34:	2300      	movs	r3, #0
 800ce36:	e001      	b.n	800ce3c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ce38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3718      	adds	r7, #24
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b08e      	sub	sp, #56	; 0x38
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ce4e:	f7f9 f9e9 	bl	8006224 <HAL_GetTick>
 800ce52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ce54:	2300      	movs	r3, #0
 800ce56:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ce58:	2300      	movs	r3, #0
 800ce5a:	60bb      	str	r3, [r7, #8]
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2108      	movs	r1, #8
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f003 f9f0 	bl	8010250 <SDMMC_CmdBlockLength>
 800ce70:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <SD_FindSCR+0x38>
  {
    return errorstate;
 800ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7a:	e0ad      	b.n	800cfd8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce84:	041b      	lsls	r3, r3, #16
 800ce86:	4619      	mov	r1, r3
 800ce88:	4610      	mov	r0, r2
 800ce8a:	f003 fb29 	bl	80104e0 <SDMMC_CmdAppCommand>
 800ce8e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d001      	beq.n	800ce9a <SD_FindSCR+0x56>
  {
    return errorstate;
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	e09e      	b.n	800cfd8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce9e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cea0:	2308      	movs	r3, #8
 800cea2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cea4:	2330      	movs	r3, #48	; 0x30
 800cea6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cea8:	2302      	movs	r3, #2
 800ceaa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f107 0210 	add.w	r2, r7, #16
 800cebc:	4611      	mov	r1, r2
 800cebe:	4618      	mov	r0, r3
 800cec0:	f003 f99a 	bl	80101f8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f003 fb6f 	bl	80105ac <SDMMC_CmdSendSCR>
 800cece:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ced0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d027      	beq.n	800cf26 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ced6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced8:	e07e      	b.n	800cfd8 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d113      	bne.n	800cf10 <SD_FindSCR+0xcc>
 800cee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d110      	bne.n	800cf10 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f003 f8f8 	bl	80100e8 <SDMMC_ReadFIFO>
 800cef8:	4603      	mov	r3, r0
 800cefa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f003 f8f1 	bl	80100e8 <SDMMC_ReadFIFO>
 800cf06:	4603      	mov	r3, r0
 800cf08:	60fb      	str	r3, [r7, #12]
      index++;
 800cf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cf10:	f7f9 f988 	bl	8006224 <HAL_GetTick>
 800cf14:	4602      	mov	r2, r0
 800cf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf18:	1ad3      	subs	r3, r2, r3
 800cf1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf1e:	d102      	bne.n	800cf26 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cf20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf24:	e058      	b.n	800cfd8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf2c:	f240 532a 	movw	r3, #1322	; 0x52a
 800cf30:	4013      	ands	r3, r2
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d0d1      	beq.n	800ceda <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3c:	f003 0308 	and.w	r3, r3, #8
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d005      	beq.n	800cf50 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2208      	movs	r2, #8
 800cf4a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cf4c:	2308      	movs	r3, #8
 800cf4e:	e043      	b.n	800cfd8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf56:	f003 0302 	and.w	r3, r3, #2
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d005      	beq.n	800cf6a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2202      	movs	r2, #2
 800cf64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf66:	2302      	movs	r3, #2
 800cf68:	e036      	b.n	800cfd8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf70:	f003 0320 	and.w	r3, r3, #32
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d005      	beq.n	800cf84 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2220      	movs	r2, #32
 800cf7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800cf80:	2320      	movs	r3, #32
 800cf82:	e029      	b.n	800cfd8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a15      	ldr	r2, [pc, #84]	; (800cfe0 <SD_FindSCR+0x19c>)
 800cf8a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	061a      	lsls	r2, r3, #24
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	021b      	lsls	r3, r3, #8
 800cf94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cf98:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	0a1b      	lsrs	r3, r3, #8
 800cf9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cfa2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	0e1b      	lsrs	r3, r3, #24
 800cfa8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfac:	601a      	str	r2, [r3, #0]
    scr++;
 800cfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	061a      	lsls	r2, r3, #24
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	021b      	lsls	r3, r3, #8
 800cfbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cfc0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	0a1b      	lsrs	r3, r3, #8
 800cfc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cfca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	0e1b      	lsrs	r3, r3, #24
 800cfd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cfd6:	2300      	movs	r3, #0
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3738      	adds	r7, #56	; 0x38
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	18000f3a 	.word	0x18000f3a

0800cfe4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d03f      	beq.n	800d07e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800cffe:	2300      	movs	r3, #0
 800d000:	617b      	str	r3, [r7, #20]
 800d002:	e033      	b.n	800d06c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4618      	mov	r0, r3
 800d00a:	f003 f86d 	bl	80100e8 <SDMMC_ReadFIFO>
 800d00e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	b2da      	uxtb	r2, r3
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	3301      	adds	r3, #1
 800d01c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	3b01      	subs	r3, #1
 800d022:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	0a1b      	lsrs	r3, r3, #8
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	3301      	adds	r3, #1
 800d032:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	3b01      	subs	r3, #1
 800d038:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	0c1b      	lsrs	r3, r3, #16
 800d03e:	b2da      	uxtb	r2, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3301      	adds	r3, #1
 800d048:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	0e1b      	lsrs	r3, r3, #24
 800d054:	b2da      	uxtb	r2, r3
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	3301      	adds	r3, #1
 800d05e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	3b01      	subs	r3, #1
 800d064:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	3301      	adds	r3, #1
 800d06a:	617b      	str	r3, [r7, #20]
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	2b07      	cmp	r3, #7
 800d070:	d9c8      	bls.n	800d004 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	693a      	ldr	r2, [r7, #16]
 800d07c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d07e:	bf00      	nop
 800d080:	3718      	adds	r7, #24
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b086      	sub	sp, #24
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d098:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d043      	beq.n	800d128 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	e037      	b.n	800d116 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	021a      	lsls	r2, r3, #8
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	041a      	lsls	r2, r3, #16
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	061a      	lsls	r2, r3, #24
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f107 0208 	add.w	r2, r7, #8
 800d108:	4611      	mov	r1, r2
 800d10a:	4618      	mov	r0, r3
 800d10c:	f002 fff9 	bl	8010102 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	3301      	adds	r3, #1
 800d114:	617b      	str	r3, [r7, #20]
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	2b07      	cmp	r3, #7
 800d11a:	d9c4      	bls.n	800d0a6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	693a      	ldr	r2, [r7, #16]
 800d126:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d128:	bf00      	nop
 800d12a:	3718      	adds	r7, #24
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	4603      	mov	r3, r0
 800d138:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800d13a:	bf00      	nop
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr

0800d146 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d146:	b480      	push	{r7}
 800d148:	b083      	sub	sp, #12
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800d14e:	bf00      	nop
 800d150:	370c      	adds	r7, #12
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d15a:	b480      	push	{r7}
 800d15c:	b083      	sub	sp, #12
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800d162:	bf00      	nop
 800d164:	370c      	adds	r7, #12
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr

0800d16e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d16e:	b480      	push	{r7}
 800d170:	b083      	sub	sp, #12
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800d176:	bf00      	nop
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr

0800d182 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d182:	b480      	push	{r7}
 800d184:	b083      	sub	sp, #12
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800d18a:	bf00      	nop
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
	...

0800d198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e0a0      	b.n	800d2ec <HAL_SPI_Init+0x154>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d12a      	bne.n	800d212 <HAL_SPI_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a4b      	ldr	r2, [pc, #300]	; (800d2f4 <HAL_SPI_Init+0x15c>)
 800d1c8:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	4a4a      	ldr	r2, [pc, #296]	; (800d2f8 <HAL_SPI_Init+0x160>)
 800d1ce:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4a4a      	ldr	r2, [pc, #296]	; (800d2fc <HAL_SPI_Init+0x164>)
 800d1d4:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a49      	ldr	r2, [pc, #292]	; (800d300 <HAL_SPI_Init+0x168>)
 800d1da:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	4a49      	ldr	r2, [pc, #292]	; (800d304 <HAL_SPI_Init+0x16c>)
 800d1e0:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4a48      	ldr	r2, [pc, #288]	; (800d308 <HAL_SPI_Init+0x170>)
 800d1e6:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a48      	ldr	r2, [pc, #288]	; (800d30c <HAL_SPI_Init+0x174>)
 800d1ec:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4a47      	ldr	r2, [pc, #284]	; (800d310 <HAL_SPI_Init+0x178>)
 800d1f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d103      	bne.n	800d208 <HAL_SPI_Init+0x70>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a44      	ldr	r2, [pc, #272]	; (800d314 <HAL_SPI_Init+0x17c>)
 800d204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2202      	movs	r2, #2
 800d216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d228:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d232:	d902      	bls.n	800d23a <HAL_SPI_Init+0xa2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d234:	2300      	movs	r3, #0
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	e002      	b.n	800d240 <HAL_SPI_Init+0xa8>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d23a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d23e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d248:	d007      	beq.n	800d25a <HAL_SPI_Init+0xc2>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d252:	d002      	beq.n	800d25a <HAL_SPI_Init+0xc2>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10b      	bne.n	800d27a <HAL_SPI_Init+0xe2>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d26a:	d903      	bls.n	800d274 <HAL_SPI_Init+0xdc>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2202      	movs	r2, #2
 800d270:	631a      	str	r2, [r3, #48]	; 0x30
 800d272:	e002      	b.n	800d27a <HAL_SPI_Init+0xe2>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2201      	movs	r2, #1
 800d278:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685a      	ldr	r2, [r3, #4]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	431a      	orrs	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	431a      	orrs	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	695b      	ldr	r3, [r3, #20]
 800d28e:	431a      	orrs	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d298:	431a      	orrs	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	431a      	orrs	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a1b      	ldr	r3, [r3, #32]
 800d2a4:	ea42 0103 	orr.w	r1, r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	430a      	orrs	r2, r1
 800d2b2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	0c1b      	lsrs	r3, r3, #16
 800d2ba:	f003 0204 	and.w	r2, r3, #4
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c2:	431a      	orrs	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c8:	431a      	orrs	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	68db      	ldr	r3, [r3, #12]
 800d2ce:	ea42 0103 	orr.w	r1, r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	0800da5d 	.word	0x0800da5d
 800d2f8:	0800da71 	.word	0x0800da71
 800d2fc:	0800da85 	.word	0x0800da85
 800d300:	0800da99 	.word	0x0800da99
 800d304:	0800daad 	.word	0x0800daad
 800d308:	0800dac1 	.word	0x0800dac1
 800d30c:	0800dad5 	.word	0x0800dad5
 800d310:	0800dae9 	.word	0x0800dae9
 800d314:	0800d319 	.word	0x0800d319

0800d318 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800d320:	bf00      	nop
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <HAL_SPI_RegisterCallback>:
  * @param  CallbackID ID of the callback to be registered
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID, pSPI_CallbackTypeDef pCallback)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b087      	sub	sp, #28
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	460b      	mov	r3, r1
 800d336:	607a      	str	r2, [r7, #4]
 800d338:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d107      	bne.n	800d354 <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d348:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e08b      	b.n	800d46c <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d101      	bne.n	800d362 <HAL_SPI_RegisterCallback+0x36>
 800d35e:	2302      	movs	r3, #2
 800d360:	e084      	b.n	800d46c <HAL_SPI_RegisterCallback+0x140>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2201      	movs	r2, #1
 800d366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d370:	b2db      	uxtb	r3, r3
 800d372:	2b01      	cmp	r3, #1
 800d374:	d14e      	bne.n	800d414 <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 800d376:	7afb      	ldrb	r3, [r7, #11]
 800d378:	2b09      	cmp	r3, #9
 800d37a:	d842      	bhi.n	800d402 <HAL_SPI_RegisterCallback+0xd6>
 800d37c:	a201      	add	r2, pc, #4	; (adr r2, 800d384 <HAL_SPI_RegisterCallback+0x58>)
 800d37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d382:	bf00      	nop
 800d384:	0800d3ad 	.word	0x0800d3ad
 800d388:	0800d3b5 	.word	0x0800d3b5
 800d38c:	0800d3bd 	.word	0x0800d3bd
 800d390:	0800d3c5 	.word	0x0800d3c5
 800d394:	0800d3cd 	.word	0x0800d3cd
 800d398:	0800d3d5 	.word	0x0800d3d5
 800d39c:	0800d3dd 	.word	0x0800d3dd
 800d3a0:	0800d3e5 	.word	0x0800d3e5
 800d3a4:	0800d3ef 	.word	0x0800d3ef
 800d3a8:	0800d3f9 	.word	0x0800d3f9
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800d3b2:	e056      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800d3ba:	e052      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800d3c2:	e04e      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800d3ca:	e04a      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800d3d2:	e046      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800d3da:	e042      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800d3e2:	e03e      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800d3ec:	e039      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800d3f6:	e034      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800d400:	e02f      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d406:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	75fb      	strb	r3, [r7, #23]
        break;
 800d412:	e026      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d118      	bne.n	800d452 <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 800d420:	7afb      	ldrb	r3, [r7, #11]
 800d422:	2b08      	cmp	r3, #8
 800d424:	d002      	beq.n	800d42c <HAL_SPI_RegisterCallback+0x100>
 800d426:	2b09      	cmp	r3, #9
 800d428:	d005      	beq.n	800d436 <HAL_SPI_RegisterCallback+0x10a>
 800d42a:	e009      	b.n	800d440 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800d434:	e015      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800d43e:	e010      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d444:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800d44c:	2301      	movs	r3, #1
 800d44e:	75fb      	strb	r3, [r7, #23]
        break;
 800d450:	e007      	b.n	800d462 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d456:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 800d45e:	2301      	movs	r3, #1
 800d460:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	371c      	adds	r7, #28
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	603b      	str	r3, [r7, #0]
 800d484:	4613      	mov	r3, r2
 800d486:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d492:	2b01      	cmp	r3, #1
 800d494:	d101      	bne.n	800d49a <HAL_SPI_Transmit+0x22>
 800d496:	2302      	movs	r3, #2
 800d498:	e150      	b.n	800d73c <HAL_SPI_Transmit+0x2c4>
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d4a2:	f7f8 febf 	bl	8006224 <HAL_GetTick>
 800d4a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d4a8:	88fb      	ldrh	r3, [r7, #6]
 800d4aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d002      	beq.n	800d4be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d4b8:	2302      	movs	r3, #2
 800d4ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d4bc:	e135      	b.n	800d72a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d002      	beq.n	800d4ca <HAL_SPI_Transmit+0x52>
 800d4c4:	88fb      	ldrh	r3, [r7, #6]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d102      	bne.n	800d4d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d4ce:	e12c      	b.n	800d72a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2203      	movs	r2, #3
 800d4d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	68ba      	ldr	r2, [r7, #8]
 800d4e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	88fa      	ldrh	r2, [r7, #6]
 800d4e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	88fa      	ldrh	r2, [r7, #6]
 800d4ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2200      	movs	r2, #0
 800d502:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2200      	movs	r2, #0
 800d50a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d51a:	d107      	bne.n	800d52c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d52a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d536:	2b40      	cmp	r3, #64	; 0x40
 800d538:	d007      	beq.n	800d54a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d548:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d552:	d94b      	bls.n	800d5ec <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d002      	beq.n	800d562 <HAL_SPI_Transmit+0xea>
 800d55c:	8afb      	ldrh	r3, [r7, #22]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d13e      	bne.n	800d5e0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d566:	881a      	ldrh	r2, [r3, #0]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d572:	1c9a      	adds	r2, r3, #2
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	3b01      	subs	r3, #1
 800d580:	b29a      	uxth	r2, r3
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d586:	e02b      	b.n	800d5e0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	f003 0302 	and.w	r3, r3, #2
 800d592:	2b02      	cmp	r3, #2
 800d594:	d112      	bne.n	800d5bc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59a:	881a      	ldrh	r2, [r3, #0]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a6:	1c9a      	adds	r2, r3, #2
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d5ba:	e011      	b.n	800d5e0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5bc:	f7f8 fe32 	bl	8006224 <HAL_GetTick>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	1ad3      	subs	r3, r2, r3
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d803      	bhi.n	800d5d4 <HAL_SPI_Transmit+0x15c>
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d2:	d102      	bne.n	800d5da <HAL_SPI_Transmit+0x162>
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d102      	bne.n	800d5e0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800d5da:	2303      	movs	r3, #3
 800d5dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d5de:	e0a4      	b.n	800d72a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1ce      	bne.n	800d588 <HAL_SPI_Transmit+0x110>
 800d5ea:	e07c      	b.n	800d6e6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <HAL_SPI_Transmit+0x182>
 800d5f4:	8afb      	ldrh	r3, [r7, #22]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d170      	bne.n	800d6dc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	2b01      	cmp	r3, #1
 800d602:	d912      	bls.n	800d62a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d608:	881a      	ldrh	r2, [r3, #0]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d614:	1c9a      	adds	r2, r3, #2
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d61e:	b29b      	uxth	r3, r3
 800d620:	3b02      	subs	r3, #2
 800d622:	b29a      	uxth	r2, r3
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d628:	e058      	b.n	800d6dc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	330c      	adds	r3, #12
 800d634:	7812      	ldrb	r2, [r2, #0]
 800d636:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d63c:	1c5a      	adds	r2, r3, #1
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d646:	b29b      	uxth	r3, r3
 800d648:	3b01      	subs	r3, #1
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d650:	e044      	b.n	800d6dc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	f003 0302 	and.w	r3, r3, #2
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	d12b      	bne.n	800d6b8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d664:	b29b      	uxth	r3, r3
 800d666:	2b01      	cmp	r3, #1
 800d668:	d912      	bls.n	800d690 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66e:	881a      	ldrh	r2, [r3, #0]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67a:	1c9a      	adds	r2, r3, #2
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d684:	b29b      	uxth	r3, r3
 800d686:	3b02      	subs	r3, #2
 800d688:	b29a      	uxth	r2, r3
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d68e:	e025      	b.n	800d6dc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	330c      	adds	r3, #12
 800d69a:	7812      	ldrb	r2, [r2, #0]
 800d69c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a2:	1c5a      	adds	r2, r3, #1
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d6b6:	e011      	b.n	800d6dc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6b8:	f7f8 fdb4 	bl	8006224 <HAL_GetTick>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	1ad3      	subs	r3, r2, r3
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d803      	bhi.n	800d6d0 <HAL_SPI_Transmit+0x258>
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ce:	d102      	bne.n	800d6d6 <HAL_SPI_Transmit+0x25e>
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d102      	bne.n	800d6dc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d6da:	e026      	b.n	800d72a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d1b5      	bne.n	800d652 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d6e6:	69ba      	ldr	r2, [r7, #24]
 800d6e8:	6839      	ldr	r1, [r7, #0]
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f000 fc02 	bl	800def4 <SPI_EndRxTxTransaction>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d002      	beq.n	800d6fc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2220      	movs	r2, #32
 800d6fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10a      	bne.n	800d71a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d704:	2300      	movs	r3, #0
 800d706:	613b      	str	r3, [r7, #16]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	613b      	str	r3, [r7, #16]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	613b      	str	r3, [r7, #16]
 800d718:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d002      	beq.n	800d728 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800d722:	2301      	movs	r3, #1
 800d724:	77fb      	strb	r3, [r7, #31]
 800d726:	e000      	b.n	800d72a <HAL_SPI_Transmit+0x2b2>
  }

error:
 800d728:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d73a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3720      	adds	r7, #32
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
 800d750:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d752:	2300      	movs	r3, #0
 800d754:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d101      	bne.n	800d764 <HAL_SPI_TransmitReceive_DMA+0x20>
 800d760:	2302      	movs	r3, #2
 800d762:	e16c      	b.n	800da3e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2201      	movs	r2, #1
 800d768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d772:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800d77a:	7dbb      	ldrb	r3, [r7, #22]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d00d      	beq.n	800d79c <HAL_SPI_TransmitReceive_DMA+0x58>
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d786:	d106      	bne.n	800d796 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d102      	bne.n	800d796 <HAL_SPI_TransmitReceive_DMA+0x52>
 800d790:	7dbb      	ldrb	r3, [r7, #22]
 800d792:	2b04      	cmp	r3, #4
 800d794:	d002      	beq.n	800d79c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800d796:	2302      	movs	r3, #2
 800d798:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d79a:	e14b      	b.n	800da34 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d005      	beq.n	800d7ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d7a8:	887b      	ldrh	r3, [r7, #2]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d102      	bne.n	800d7b4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d7b2:	e13f      	b.n	800da34 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	2b04      	cmp	r3, #4
 800d7be:	d003      	beq.n	800d7c8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2205      	movs	r2, #5
 800d7c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	887a      	ldrh	r2, [r7, #2]
 800d7d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	887a      	ldrh	r2, [r7, #2]
 800d7de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	887a      	ldrh	r2, [r7, #2]
 800d7ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	887a      	ldrh	r2, [r7, #2]
 800d7f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2200      	movs	r2, #0
 800d800:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	685a      	ldr	r2, [r3, #4]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800d810:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d81a:	d908      	bls.n	800d82e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	685a      	ldr	r2, [r3, #4]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d82a:	605a      	str	r2, [r3, #4]
 800d82c:	e06f      	b.n	800d90e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	685a      	ldr	r2, [r3, #4]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d83c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d842:	699b      	ldr	r3, [r3, #24]
 800d844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d848:	d126      	bne.n	800d898 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d84e:	f003 0301 	and.w	r3, r3, #1
 800d852:	2b00      	cmp	r3, #0
 800d854:	d10f      	bne.n	800d876 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	685a      	ldr	r2, [r3, #4]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d864:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	085b      	lsrs	r3, r3, #1
 800d86e:	b29a      	uxth	r2, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d874:	e010      	b.n	800d898 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	685a      	ldr	r2, [r3, #4]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d884:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	085b      	lsrs	r3, r3, #1
 800d88e:	b29b      	uxth	r3, r3
 800d890:	3301      	adds	r3, #1
 800d892:	b29a      	uxth	r2, r3
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8a2:	d134      	bne.n	800d90e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	685a      	ldr	r2, [r3, #4]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d8b2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d111      	bne.n	800d8e8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	685a      	ldr	r2, [r3, #4]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d8d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	085b      	lsrs	r3, r3, #1
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d8e6:	e012      	b.n	800d90e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	685a      	ldr	r2, [r3, #4]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d8f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	085b      	lsrs	r3, r3, #1
 800d902:	b29b      	uxth	r3, r3
 800d904:	3301      	adds	r3, #1
 800d906:	b29a      	uxth	r2, r3
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d914:	b2db      	uxtb	r3, r3
 800d916:	2b04      	cmp	r3, #4
 800d918:	d108      	bne.n	800d92c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d91e:	4a4a      	ldr	r2, [pc, #296]	; (800da48 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800d920:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d926:	4a49      	ldr	r2, [pc, #292]	; (800da4c <HAL_SPI_TransmitReceive_DMA+0x308>)
 800d928:	62da      	str	r2, [r3, #44]	; 0x2c
 800d92a:	e007      	b.n	800d93c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d930:	4a47      	ldr	r2, [pc, #284]	; (800da50 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800d932:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d938:	4a46      	ldr	r2, [pc, #280]	; (800da54 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800d93a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d940:	4a45      	ldr	r2, [pc, #276]	; (800da58 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800d942:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d948:	2200      	movs	r2, #0
 800d94a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	330c      	adds	r3, #12
 800d956:	4619      	mov	r1, r3
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95c:	461a      	mov	r2, r3
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d964:	b29b      	uxth	r3, r3
 800d966:	f7fa fa87 	bl	8007e78 <HAL_DMA_Start_IT>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00c      	beq.n	800d98a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d974:	f043 0210 	orr.w	r2, r3, #16
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d97c:	2301      	movs	r3, #1
 800d97e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800d988:	e054      	b.n	800da34 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f042 0201 	orr.w	r2, r2, #1
 800d998:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d99e:	2200      	movs	r2, #0
 800d9a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	330c      	adds	r3, #12
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	f7fa fa51 	bl	8007e78 <HAL_DMA_Start_IT>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00c      	beq.n	800d9f6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9e0:	f043 0210 	orr.w	r2, r3, #16
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800d9f4:	e01e      	b.n	800da34 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da00:	2b40      	cmp	r3, #64	; 0x40
 800da02:	d007      	beq.n	800da14 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da12:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	685a      	ldr	r2, [r3, #4]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f042 0220 	orr.w	r2, r2, #32
 800da22:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	685a      	ldr	r2, [r3, #4]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f042 0202 	orr.w	r2, r2, #2
 800da32:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2200      	movs	r2, #0
 800da38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800da3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3718      	adds	r7, #24
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	0800dc19 	.word	0x0800dc19
 800da4c:	0800dafd 	.word	0x0800dafd
 800da50:	0800dc37 	.word	0x0800dc37
 800da54:	0800db85 	.word	0x0800db85
 800da58:	0800dc55 	.word	0x0800dc55

0800da5c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800da8c:	bf00      	nop
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800daa0:	bf00      	nop
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800dab4:	bf00      	nop
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800dac8:	bf00      	nop
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dadc:	bf00      	nop
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db08:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db0a:	f7f8 fb8b 	bl	8006224 <HAL_GetTick>
 800db0e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f003 0320 	and.w	r3, r3, #32
 800db1a:	2b20      	cmp	r3, #32
 800db1c:	d02b      	beq.n	800db76 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	685a      	ldr	r2, [r3, #4]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f022 0220 	bic.w	r2, r2, #32
 800db2c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f022 0203 	bic.w	r2, r2, #3
 800db3c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800db3e:	68ba      	ldr	r2, [r7, #8]
 800db40:	2164      	movs	r1, #100	; 0x64
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f000 f97e 	bl	800de44 <SPI_EndRxTransaction>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d002      	beq.n	800db54 <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2220      	movs	r2, #32
 800db52:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2200      	movs	r2, #0
 800db58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d004      	beq.n	800db76 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800db74:	e003      	b.n	800db7e <SPI_DMAReceiveCplt+0x82>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db90:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db92:	f7f8 fb47 	bl	8006224 <HAL_GetTick>
 800db96:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f003 0320 	and.w	r3, r3, #32
 800dba2:	2b20      	cmp	r3, #32
 800dba4:	d031      	beq.n	800dc0a <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f022 0220 	bic.w	r2, r2, #32
 800dbb4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	2164      	movs	r1, #100	; 0x64
 800dbba:	68f8      	ldr	r0, [r7, #12]
 800dbbc:	f000 f99a 	bl	800def4 <SPI_EndRxTxTransaction>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d005      	beq.n	800dbd2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbca:	f043 0220 	orr.w	r2, r3, #32
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	685a      	ldr	r2, [r3, #4]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f022 0203 	bic.w	r2, r2, #3
 800dbe0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d004      	beq.n	800dc0a <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800dc08:	e003      	b.n	800dc12 <SPI_DMATransmitReceiveCplt+0x8e>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc24:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dc2e:	bf00      	nop
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b084      	sub	sp, #16
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc42:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dc4c:	bf00      	nop
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	685a      	ldr	r2, [r3, #4]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f022 0203 	bic.w	r2, r2, #3
 800dc70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc76:	f043 0210 	orr.w	r2, r3, #16
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2201      	movs	r2, #1
 800dc82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dc8e:	bf00      	nop
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b084      	sub	sp, #16
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	60f8      	str	r0, [r7, #12]
 800dc9e:	60b9      	str	r1, [r7, #8]
 800dca0:	603b      	str	r3, [r7, #0]
 800dca2:	4613      	mov	r3, r2
 800dca4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dca6:	e04c      	b.n	800dd42 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcae:	d048      	beq.n	800dd42 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800dcb0:	f7f8 fab8 	bl	8006224 <HAL_GetTick>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d902      	bls.n	800dcc6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d13d      	bne.n	800dd42 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	685a      	ldr	r2, [r3, #4]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dcd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcde:	d111      	bne.n	800dd04 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dce8:	d004      	beq.n	800dcf4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dcf2:	d107      	bne.n	800dd04 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd0c:	d10f      	bne.n	800dd2e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	681a      	ldr	r2, [r3, #0]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dd1c:	601a      	str	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dd2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2201      	movs	r2, #1
 800dd32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	e00f      	b.n	800dd62 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	689a      	ldr	r2, [r3, #8]
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	4013      	ands	r3, r2
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	bf0c      	ite	eq
 800dd52:	2301      	moveq	r3, #1
 800dd54:	2300      	movne	r3, #0
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	461a      	mov	r2, r3
 800dd5a:	79fb      	ldrb	r3, [r7, #7]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d1a3      	bne.n	800dca8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b084      	sub	sp, #16
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	60f8      	str	r0, [r7, #12]
 800dd72:	60b9      	str	r1, [r7, #8]
 800dd74:	607a      	str	r2, [r7, #4]
 800dd76:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800dd78:	e057      	b.n	800de2a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800dd80:	d106      	bne.n	800dd90 <SPI_WaitFifoStateUntilTimeout+0x26>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d103      	bne.n	800dd90 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	330c      	adds	r3, #12
 800dd8e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd96:	d048      	beq.n	800de2a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800dd98:	f7f8 fa44 	bl	8006224 <HAL_GetTick>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	683a      	ldr	r2, [r7, #0]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d902      	bls.n	800ddae <SPI_WaitFifoStateUntilTimeout+0x44>
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d13d      	bne.n	800de2a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	685a      	ldr	r2, [r3, #4]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ddbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ddc6:	d111      	bne.n	800ddec <SPI_WaitFifoStateUntilTimeout+0x82>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	689b      	ldr	r3, [r3, #8]
 800ddcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddd0:	d004      	beq.n	800dddc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddda:	d107      	bne.n	800ddec <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddf4:	d10f      	bne.n	800de16 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800de04:	601a      	str	r2, [r3, #0]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2201      	movs	r2, #1
 800de1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2200      	movs	r2, #0
 800de22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800de26:	2303      	movs	r3, #3
 800de28:	e008      	b.n	800de3c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	689a      	ldr	r2, [r3, #8]
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	4013      	ands	r3, r2
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	429a      	cmp	r2, r3
 800de38:	d19f      	bne.n	800dd7a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b086      	sub	sp, #24
 800de48:	af02      	add	r7, sp, #8
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de58:	d111      	bne.n	800de7e <SPI_EndRxTransaction+0x3a>
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	689b      	ldr	r3, [r3, #8]
 800de5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de62:	d004      	beq.n	800de6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de6c:	d107      	bne.n	800de7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de7c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	9300      	str	r3, [sp, #0]
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	2200      	movs	r2, #0
 800de86:	2180      	movs	r1, #128	; 0x80
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f7ff ff04 	bl	800dc96 <SPI_WaitFlagStateUntilTimeout>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d007      	beq.n	800dea4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de98:	f043 0220 	orr.w	r2, r3, #32
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800dea0:	2303      	movs	r3, #3
 800dea2:	e023      	b.n	800deec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800deac:	d11d      	bne.n	800deea <SPI_EndRxTransaction+0xa6>
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deb6:	d004      	beq.n	800dec2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dec0:	d113      	bne.n	800deea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	2200      	movs	r2, #0
 800deca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f7ff ff4b 	bl	800dd6a <SPI_WaitFifoStateUntilTimeout>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d007      	beq.n	800deea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dede:	f043 0220 	orr.w	r2, r3, #32
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800dee6:	2303      	movs	r3, #3
 800dee8:	e000      	b.n	800deec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800deea:	2300      	movs	r3, #0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af02      	add	r7, sp, #8
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	9300      	str	r3, [sp, #0]
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	2200      	movs	r2, #0
 800df08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f7ff ff2c 	bl	800dd6a <SPI_WaitFifoStateUntilTimeout>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d007      	beq.n	800df28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df1c:	f043 0220 	orr.w	r2, r3, #32
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800df24:	2303      	movs	r3, #3
 800df26:	e027      	b.n	800df78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2200      	movs	r2, #0
 800df30:	2180      	movs	r1, #128	; 0x80
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f7ff feaf 	bl	800dc96 <SPI_WaitFlagStateUntilTimeout>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d007      	beq.n	800df4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df42:	f043 0220 	orr.w	r2, r3, #32
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800df4a:	2303      	movs	r3, #3
 800df4c:	e014      	b.n	800df78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2200      	movs	r2, #0
 800df56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f7ff ff05 	bl	800dd6a <SPI_WaitFifoStateUntilTimeout>
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d007      	beq.n	800df76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df6a:	f043 0220 	orr.w	r2, r3, #32
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800df72:	2303      	movs	r3, #3
 800df74:	e000      	b.n	800df78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d101      	bne.n	800df92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df8e:	2301      	movs	r3, #1
 800df90:	e01d      	b.n	800dfce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 f815 	bl	800dfd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2202      	movs	r2, #2
 800dfb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	4610      	mov	r0, r2
 800dfc0:	f000 f9fc 	bl	800e3bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800dfd6:	b480      	push	{r7}
 800dfd8:	b083      	sub	sp, #12
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800dfde:	bf00      	nop
 800dfe0:	370c      	adds	r7, #12
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr
	...

0800dfec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2202      	movs	r2, #2
 800dff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	689a      	ldr	r2, [r3, #8]
 800e002:	4b0e      	ldr	r3, [pc, #56]	; (800e03c <HAL_TIM_Base_Start+0x50>)
 800e004:	4013      	ands	r3, r2
 800e006:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b06      	cmp	r3, #6
 800e00c:	d00b      	beq.n	800e026 <HAL_TIM_Base_Start+0x3a>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e014:	d007      	beq.n	800e026 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f042 0201 	orr.w	r2, r2, #1
 800e024:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2201      	movs	r2, #1
 800e02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e02e:	2300      	movs	r3, #0
}
 800e030:	4618      	mov	r0, r3
 800e032:	3714      	adds	r7, #20
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr
 800e03c:	00010007 	.word	0x00010007

0800e040 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2202      	movs	r2, #2
 800e04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	6a1a      	ldr	r2, [r3, #32]
 800e056:	f241 1311 	movw	r3, #4369	; 0x1111
 800e05a:	4013      	ands	r3, r2
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10f      	bne.n	800e080 <HAL_TIM_Base_Stop+0x40>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6a1a      	ldr	r2, [r3, #32]
 800e066:	f240 4344 	movw	r3, #1092	; 0x444
 800e06a:	4013      	ands	r3, r2
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d107      	bne.n	800e080 <HAL_TIM_Base_Stop+0x40>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f022 0201 	bic.w	r2, r2, #1
 800e07e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	370c      	adds	r7, #12
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr
	...

0800e098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	68da      	ldr	r2, [r3, #12]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f042 0201 	orr.w	r2, r2, #1
 800e0ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	689a      	ldr	r2, [r3, #8]
 800e0b6:	4b0c      	ldr	r3, [pc, #48]	; (800e0e8 <HAL_TIM_Base_Start_IT+0x50>)
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2b06      	cmp	r3, #6
 800e0c0:	d00b      	beq.n	800e0da <HAL_TIM_Base_Start_IT+0x42>
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0c8:	d007      	beq.n	800e0da <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f042 0201 	orr.w	r2, r2, #1
 800e0d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3714      	adds	r7, #20
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	00010007 	.word	0x00010007

0800e0ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	68da      	ldr	r2, [r3, #12]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f022 0201 	bic.w	r2, r2, #1
 800e102:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	6a1a      	ldr	r2, [r3, #32]
 800e10a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e10e:	4013      	ands	r3, r2
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10f      	bne.n	800e134 <HAL_TIM_Base_Stop_IT+0x48>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6a1a      	ldr	r2, [r3, #32]
 800e11a:	f240 4344 	movw	r3, #1092	; 0x444
 800e11e:	4013      	ands	r3, r2
 800e120:	2b00      	cmp	r3, #0
 800e122:	d107      	bne.n	800e134 <HAL_TIM_Base_Stop_IT+0x48>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f022 0201 	bic.w	r2, r2, #1
 800e132:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	370c      	adds	r7, #12
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b082      	sub	sp, #8
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	f003 0302 	and.w	r3, r3, #2
 800e154:	2b02      	cmp	r3, #2
 800e156:	d122      	bne.n	800e19e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	f003 0302 	and.w	r3, r3, #2
 800e162:	2b02      	cmp	r3, #2
 800e164:	d11b      	bne.n	800e19e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f06f 0202 	mvn.w	r2, #2
 800e16e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	699b      	ldr	r3, [r3, #24]
 800e17c:	f003 0303 	and.w	r3, r3, #3
 800e180:	2b00      	cmp	r3, #0
 800e182:	d003      	beq.n	800e18c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7f7 fe57 	bl	8005e38 <HAL_TIM_IC_CaptureCallback>
 800e18a:	e005      	b.n	800e198 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 f8f7 	bl	800e380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f8fe 	bl	800e394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	691b      	ldr	r3, [r3, #16]
 800e1a4:	f003 0304 	and.w	r3, r3, #4
 800e1a8:	2b04      	cmp	r3, #4
 800e1aa:	d122      	bne.n	800e1f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	f003 0304 	and.w	r3, r3, #4
 800e1b6:	2b04      	cmp	r3, #4
 800e1b8:	d11b      	bne.n	800e1f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f06f 0204 	mvn.w	r2, #4
 800e1c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2202      	movs	r2, #2
 800e1c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	699b      	ldr	r3, [r3, #24]
 800e1d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d003      	beq.n	800e1e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7f7 fe2d 	bl	8005e38 <HAL_TIM_IC_CaptureCallback>
 800e1de:	e005      	b.n	800e1ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 f8cd 	bl	800e380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f8d4 	bl	800e394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	f003 0308 	and.w	r3, r3, #8
 800e1fc:	2b08      	cmp	r3, #8
 800e1fe:	d122      	bne.n	800e246 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	f003 0308 	and.w	r3, r3, #8
 800e20a:	2b08      	cmp	r3, #8
 800e20c:	d11b      	bne.n	800e246 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f06f 0208 	mvn.w	r2, #8
 800e216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2204      	movs	r2, #4
 800e21c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	69db      	ldr	r3, [r3, #28]
 800e224:	f003 0303 	and.w	r3, r3, #3
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d003      	beq.n	800e234 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f7f7 fe03 	bl	8005e38 <HAL_TIM_IC_CaptureCallback>
 800e232:	e005      	b.n	800e240 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 f8a3 	bl	800e380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 f8aa 	bl	800e394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	f003 0310 	and.w	r3, r3, #16
 800e250:	2b10      	cmp	r3, #16
 800e252:	d122      	bne.n	800e29a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	f003 0310 	and.w	r3, r3, #16
 800e25e:	2b10      	cmp	r3, #16
 800e260:	d11b      	bne.n	800e29a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f06f 0210 	mvn.w	r2, #16
 800e26a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2208      	movs	r2, #8
 800e270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	69db      	ldr	r3, [r3, #28]
 800e278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d003      	beq.n	800e288 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7f7 fdd9 	bl	8005e38 <HAL_TIM_IC_CaptureCallback>
 800e286:	e005      	b.n	800e294 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 f879 	bl	800e380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f880 	bl	800e394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	691b      	ldr	r3, [r3, #16]
 800e2a0:	f003 0301 	and.w	r3, r3, #1
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d10e      	bne.n	800e2c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d107      	bne.n	800e2c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f06f 0201 	mvn.w	r2, #1
 800e2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7f7 fda7 	bl	8005e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2d0:	2b80      	cmp	r3, #128	; 0x80
 800e2d2:	d10e      	bne.n	800e2f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2de:	2b80      	cmp	r3, #128	; 0x80
 800e2e0:	d107      	bne.n	800e2f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 f991 	bl	800e614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e300:	d10e      	bne.n	800e320 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e30c:	2b80      	cmp	r3, #128	; 0x80
 800e30e:	d107      	bne.n	800e320 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f984 	bl	800e628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e32a:	2b40      	cmp	r3, #64	; 0x40
 800e32c:	d10e      	bne.n	800e34c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e338:	2b40      	cmp	r3, #64	; 0x40
 800e33a:	d107      	bne.n	800e34c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 f82e 	bl	800e3a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	691b      	ldr	r3, [r3, #16]
 800e352:	f003 0320 	and.w	r3, r3, #32
 800e356:	2b20      	cmp	r3, #32
 800e358:	d10e      	bne.n	800e378 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	f003 0320 	and.w	r3, r3, #32
 800e364:	2b20      	cmp	r3, #32
 800e366:	d107      	bne.n	800e378 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f06f 0220 	mvn.w	r2, #32
 800e370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 f944 	bl	800e600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e378:	bf00      	nop
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e3b0:	bf00      	nop
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4a40      	ldr	r2, [pc, #256]	; (800e4d0 <TIM_Base_SetConfig+0x114>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d013      	beq.n	800e3fc <TIM_Base_SetConfig+0x40>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3da:	d00f      	beq.n	800e3fc <TIM_Base_SetConfig+0x40>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4a3d      	ldr	r2, [pc, #244]	; (800e4d4 <TIM_Base_SetConfig+0x118>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d00b      	beq.n	800e3fc <TIM_Base_SetConfig+0x40>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4a3c      	ldr	r2, [pc, #240]	; (800e4d8 <TIM_Base_SetConfig+0x11c>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d007      	beq.n	800e3fc <TIM_Base_SetConfig+0x40>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	4a3b      	ldr	r2, [pc, #236]	; (800e4dc <TIM_Base_SetConfig+0x120>)
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d003      	beq.n	800e3fc <TIM_Base_SetConfig+0x40>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	4a3a      	ldr	r2, [pc, #232]	; (800e4e0 <TIM_Base_SetConfig+0x124>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d108      	bne.n	800e40e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	68fa      	ldr	r2, [r7, #12]
 800e40a:	4313      	orrs	r3, r2
 800e40c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	4a2f      	ldr	r2, [pc, #188]	; (800e4d0 <TIM_Base_SetConfig+0x114>)
 800e412:	4293      	cmp	r3, r2
 800e414:	d01f      	beq.n	800e456 <TIM_Base_SetConfig+0x9a>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e41c:	d01b      	beq.n	800e456 <TIM_Base_SetConfig+0x9a>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	4a2c      	ldr	r2, [pc, #176]	; (800e4d4 <TIM_Base_SetConfig+0x118>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d017      	beq.n	800e456 <TIM_Base_SetConfig+0x9a>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4a2b      	ldr	r2, [pc, #172]	; (800e4d8 <TIM_Base_SetConfig+0x11c>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d013      	beq.n	800e456 <TIM_Base_SetConfig+0x9a>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	4a2a      	ldr	r2, [pc, #168]	; (800e4dc <TIM_Base_SetConfig+0x120>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d00f      	beq.n	800e456 <TIM_Base_SetConfig+0x9a>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4a29      	ldr	r2, [pc, #164]	; (800e4e0 <TIM_Base_SetConfig+0x124>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d00b      	beq.n	800e456 <TIM_Base_SetConfig+0x9a>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4a28      	ldr	r2, [pc, #160]	; (800e4e4 <TIM_Base_SetConfig+0x128>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d007      	beq.n	800e456 <TIM_Base_SetConfig+0x9a>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4a27      	ldr	r2, [pc, #156]	; (800e4e8 <TIM_Base_SetConfig+0x12c>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d003      	beq.n	800e456 <TIM_Base_SetConfig+0x9a>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4a26      	ldr	r2, [pc, #152]	; (800e4ec <TIM_Base_SetConfig+0x130>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d108      	bne.n	800e468 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e45c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	4313      	orrs	r3, r2
 800e466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	695b      	ldr	r3, [r3, #20]
 800e472:	4313      	orrs	r3, r2
 800e474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	68fa      	ldr	r2, [r7, #12]
 800e47a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	689a      	ldr	r2, [r3, #8]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	4a10      	ldr	r2, [pc, #64]	; (800e4d0 <TIM_Base_SetConfig+0x114>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d00f      	beq.n	800e4b4 <TIM_Base_SetConfig+0xf8>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	4a12      	ldr	r2, [pc, #72]	; (800e4e0 <TIM_Base_SetConfig+0x124>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d00b      	beq.n	800e4b4 <TIM_Base_SetConfig+0xf8>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	4a11      	ldr	r2, [pc, #68]	; (800e4e4 <TIM_Base_SetConfig+0x128>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d007      	beq.n	800e4b4 <TIM_Base_SetConfig+0xf8>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4a10      	ldr	r2, [pc, #64]	; (800e4e8 <TIM_Base_SetConfig+0x12c>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d003      	beq.n	800e4b4 <TIM_Base_SetConfig+0xf8>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4a0f      	ldr	r2, [pc, #60]	; (800e4ec <TIM_Base_SetConfig+0x130>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d103      	bne.n	800e4bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	691a      	ldr	r2, [r3, #16]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	615a      	str	r2, [r3, #20]
}
 800e4c2:	bf00      	nop
 800e4c4:	3714      	adds	r7, #20
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	40012c00 	.word	0x40012c00
 800e4d4:	40000400 	.word	0x40000400
 800e4d8:	40000800 	.word	0x40000800
 800e4dc:	40000c00 	.word	0x40000c00
 800e4e0:	40013400 	.word	0x40013400
 800e4e4:	40014000 	.word	0x40014000
 800e4e8:	40014400 	.word	0x40014400
 800e4ec:	40014800 	.word	0x40014800

0800e4f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e500:	2b01      	cmp	r3, #1
 800e502:	d101      	bne.n	800e508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e504:	2302      	movs	r3, #2
 800e506:	e068      	b.n	800e5da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2201      	movs	r2, #1
 800e50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2202      	movs	r2, #2
 800e514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a2e      	ldr	r2, [pc, #184]	; (800e5e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d004      	beq.n	800e53c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4a2d      	ldr	r2, [pc, #180]	; (800e5ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d108      	bne.n	800e54e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e542:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	4313      	orrs	r3, r2
 800e54c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e554:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	68fa      	ldr	r2, [r7, #12]
 800e55c:	4313      	orrs	r3, r2
 800e55e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68fa      	ldr	r2, [r7, #12]
 800e566:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4a1e      	ldr	r2, [pc, #120]	; (800e5e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d01d      	beq.n	800e5ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e57a:	d018      	beq.n	800e5ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a1b      	ldr	r2, [pc, #108]	; (800e5f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d013      	beq.n	800e5ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a1a      	ldr	r2, [pc, #104]	; (800e5f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d00e      	beq.n	800e5ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a18      	ldr	r2, [pc, #96]	; (800e5f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d009      	beq.n	800e5ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a13      	ldr	r2, [pc, #76]	; (800e5ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d004      	beq.n	800e5ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a14      	ldr	r2, [pc, #80]	; (800e5fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d10c      	bne.n	800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68ba      	ldr	r2, [r7, #8]
 800e5c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3714      	adds	r7, #20
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	40012c00 	.word	0x40012c00
 800e5ec:	40013400 	.word	0x40013400
 800e5f0:	40000400 	.word	0x40000400
 800e5f4:	40000800 	.word	0x40000800
 800e5f8:	40000c00 	.word	0x40000c00
 800e5fc:	40014000 	.word	0x40014000

0800e600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e608:	bf00      	nop
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e61c:	bf00      	nop
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e630:	bf00      	nop
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d101      	bne.n	800e64e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e64a:	2301      	movs	r3, #1
 800e64c:	e042      	b.n	800e6d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e654:	2b00      	cmp	r3, #0
 800e656:	d106      	bne.n	800e666 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f7f4 fb37 	bl	8002cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2224      	movs	r2, #36	; 0x24
 800e66a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f022 0201 	bic.w	r2, r2, #1
 800e67c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f8c4 	bl	800e80c <UART_SetConfig>
 800e684:	4603      	mov	r3, r0
 800e686:	2b01      	cmp	r3, #1
 800e688:	d101      	bne.n	800e68e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	e022      	b.n	800e6d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f001 fa74 	bl	800fb84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	685a      	ldr	r2, [r3, #4]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e6aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	689a      	ldr	r2, [r3, #8]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e6ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f042 0201 	orr.w	r2, r2, #1
 800e6ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f001 fafb 	bl	800fcc8 <UART_CheckIdleState>
 800e6d2:	4603      	mov	r3, r0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b08a      	sub	sp, #40	; 0x28
 800e6e0:	af02      	add	r7, sp, #8
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	603b      	str	r3, [r7, #0]
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6f2:	2b20      	cmp	r3, #32
 800e6f4:	f040 8084 	bne.w	800e800 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d002      	beq.n	800e704 <HAL_UART_Transmit+0x28>
 800e6fe:	88fb      	ldrh	r3, [r7, #6]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d101      	bne.n	800e708 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e704:	2301      	movs	r3, #1
 800e706:	e07c      	b.n	800e802 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d101      	bne.n	800e716 <HAL_UART_Transmit+0x3a>
 800e712:	2302      	movs	r3, #2
 800e714:	e075      	b.n	800e802 <HAL_UART_Transmit+0x126>
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2201      	movs	r2, #1
 800e71a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2200      	movs	r2, #0
 800e722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2221      	movs	r2, #33	; 0x21
 800e72a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800e72e:	f7f7 fd79 	bl	8006224 <HAL_GetTick>
 800e732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	88fa      	ldrh	r2, [r7, #6]
 800e738:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	88fa      	ldrh	r2, [r7, #6]
 800e740:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e74c:	d108      	bne.n	800e760 <HAL_UART_Transmit+0x84>
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d104      	bne.n	800e760 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e756:	2300      	movs	r3, #0
 800e758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	61bb      	str	r3, [r7, #24]
 800e75e:	e003      	b.n	800e768 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e764:	2300      	movs	r3, #0
 800e766:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800e770:	e02d      	b.n	800e7ce <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2200      	movs	r2, #0
 800e77a:	2180      	movs	r1, #128	; 0x80
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f001 faeb 	bl	800fd58 <UART_WaitOnFlagUntilTimeout>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d001      	beq.n	800e78c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e788:	2303      	movs	r3, #3
 800e78a:	e03a      	b.n	800e802 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d10b      	bne.n	800e7aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	881a      	ldrh	r2, [r3, #0]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e79e:	b292      	uxth	r2, r2
 800e7a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	3302      	adds	r3, #2
 800e7a6:	61bb      	str	r3, [r7, #24]
 800e7a8:	e008      	b.n	800e7bc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	781a      	ldrb	r2, [r3, #0]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	b292      	uxth	r2, r2
 800e7b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1cb      	bne.n	800e772 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	2140      	movs	r1, #64	; 0x40
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f001 fab7 	bl	800fd58 <UART_WaitOnFlagUntilTimeout>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d001      	beq.n	800e7f4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800e7f0:	2303      	movs	r3, #3
 800e7f2:	e006      	b.n	800e802 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2220      	movs	r2, #32
 800e7f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	e000      	b.n	800e802 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800e800:	2302      	movs	r3, #2
  }
}
 800e802:	4618      	mov	r0, r3
 800e804:	3720      	adds	r7, #32
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
	...

0800e80c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e80c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e810:	b08c      	sub	sp, #48	; 0x30
 800e812:	af00      	add	r7, sp, #0
 800e814:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800e816:	2300      	movs	r3, #0
 800e818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 800e81a:	2300      	movs	r3, #0
 800e81c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800e820:	2300      	movs	r3, #0
 800e822:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	689a      	ldr	r2, [r3, #8]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	431a      	orrs	r2, r3
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	695b      	ldr	r3, [r3, #20]
 800e832:	431a      	orrs	r2, r3
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	69db      	ldr	r3, [r3, #28]
 800e838:	4313      	orrs	r3, r2
 800e83a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e842:	4313      	orrs	r3, r2
 800e844:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	4baa      	ldr	r3, [pc, #680]	; (800eaf8 <UART_SetConfig+0x2ec>)
 800e84e:	4013      	ands	r3, r2
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	6812      	ldr	r2, [r2, #0]
 800e854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e856:	430b      	orrs	r3, r1
 800e858:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	68da      	ldr	r2, [r3, #12]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	430a      	orrs	r2, r1
 800e86e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	699b      	ldr	r3, [r3, #24]
 800e874:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4aa0      	ldr	r2, [pc, #640]	; (800eafc <UART_SetConfig+0x2f0>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d004      	beq.n	800e88a <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6a1b      	ldr	r3, [r3, #32]
 800e884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e886:	4313      	orrs	r3, r2
 800e888:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e894:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	6812      	ldr	r2, [r2, #0]
 800e89c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e89e:	430b      	orrs	r3, r1
 800e8a0:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a8:	f023 010f 	bic.w	r1, r3, #15
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	430a      	orrs	r2, r1
 800e8b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a90      	ldr	r2, [pc, #576]	; (800eb00 <UART_SetConfig+0x2f4>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d126      	bne.n	800e910 <UART_SetConfig+0x104>
 800e8c2:	4b90      	ldr	r3, [pc, #576]	; (800eb04 <UART_SetConfig+0x2f8>)
 800e8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8c8:	f003 0303 	and.w	r3, r3, #3
 800e8cc:	2b03      	cmp	r3, #3
 800e8ce:	d81b      	bhi.n	800e908 <UART_SetConfig+0xfc>
 800e8d0:	a201      	add	r2, pc, #4	; (adr r2, 800e8d8 <UART_SetConfig+0xcc>)
 800e8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d6:	bf00      	nop
 800e8d8:	0800e8e9 	.word	0x0800e8e9
 800e8dc:	0800e8f9 	.word	0x0800e8f9
 800e8e0:	0800e8f1 	.word	0x0800e8f1
 800e8e4:	0800e901 	.word	0x0800e901
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8ee:	e116      	b.n	800eb1e <UART_SetConfig+0x312>
 800e8f0:	2302      	movs	r3, #2
 800e8f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8f6:	e112      	b.n	800eb1e <UART_SetConfig+0x312>
 800e8f8:	2304      	movs	r3, #4
 800e8fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8fe:	e10e      	b.n	800eb1e <UART_SetConfig+0x312>
 800e900:	2308      	movs	r3, #8
 800e902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e906:	e10a      	b.n	800eb1e <UART_SetConfig+0x312>
 800e908:	2310      	movs	r3, #16
 800e90a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e90e:	e106      	b.n	800eb1e <UART_SetConfig+0x312>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a7c      	ldr	r2, [pc, #496]	; (800eb08 <UART_SetConfig+0x2fc>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d138      	bne.n	800e98c <UART_SetConfig+0x180>
 800e91a:	4b7a      	ldr	r3, [pc, #488]	; (800eb04 <UART_SetConfig+0x2f8>)
 800e91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e920:	f003 030c 	and.w	r3, r3, #12
 800e924:	2b0c      	cmp	r3, #12
 800e926:	d82d      	bhi.n	800e984 <UART_SetConfig+0x178>
 800e928:	a201      	add	r2, pc, #4	; (adr r2, 800e930 <UART_SetConfig+0x124>)
 800e92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e92e:	bf00      	nop
 800e930:	0800e965 	.word	0x0800e965
 800e934:	0800e985 	.word	0x0800e985
 800e938:	0800e985 	.word	0x0800e985
 800e93c:	0800e985 	.word	0x0800e985
 800e940:	0800e975 	.word	0x0800e975
 800e944:	0800e985 	.word	0x0800e985
 800e948:	0800e985 	.word	0x0800e985
 800e94c:	0800e985 	.word	0x0800e985
 800e950:	0800e96d 	.word	0x0800e96d
 800e954:	0800e985 	.word	0x0800e985
 800e958:	0800e985 	.word	0x0800e985
 800e95c:	0800e985 	.word	0x0800e985
 800e960:	0800e97d 	.word	0x0800e97d
 800e964:	2300      	movs	r3, #0
 800e966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e96a:	e0d8      	b.n	800eb1e <UART_SetConfig+0x312>
 800e96c:	2302      	movs	r3, #2
 800e96e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e972:	e0d4      	b.n	800eb1e <UART_SetConfig+0x312>
 800e974:	2304      	movs	r3, #4
 800e976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e97a:	e0d0      	b.n	800eb1e <UART_SetConfig+0x312>
 800e97c:	2308      	movs	r3, #8
 800e97e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e982:	e0cc      	b.n	800eb1e <UART_SetConfig+0x312>
 800e984:	2310      	movs	r3, #16
 800e986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e98a:	e0c8      	b.n	800eb1e <UART_SetConfig+0x312>
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a5e      	ldr	r2, [pc, #376]	; (800eb0c <UART_SetConfig+0x300>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d125      	bne.n	800e9e2 <UART_SetConfig+0x1d6>
 800e996:	4b5b      	ldr	r3, [pc, #364]	; (800eb04 <UART_SetConfig+0x2f8>)
 800e998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e99c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e9a0:	2b30      	cmp	r3, #48	; 0x30
 800e9a2:	d016      	beq.n	800e9d2 <UART_SetConfig+0x1c6>
 800e9a4:	2b30      	cmp	r3, #48	; 0x30
 800e9a6:	d818      	bhi.n	800e9da <UART_SetConfig+0x1ce>
 800e9a8:	2b20      	cmp	r3, #32
 800e9aa:	d00a      	beq.n	800e9c2 <UART_SetConfig+0x1b6>
 800e9ac:	2b20      	cmp	r3, #32
 800e9ae:	d814      	bhi.n	800e9da <UART_SetConfig+0x1ce>
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <UART_SetConfig+0x1ae>
 800e9b4:	2b10      	cmp	r3, #16
 800e9b6:	d008      	beq.n	800e9ca <UART_SetConfig+0x1be>
 800e9b8:	e00f      	b.n	800e9da <UART_SetConfig+0x1ce>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9c0:	e0ad      	b.n	800eb1e <UART_SetConfig+0x312>
 800e9c2:	2302      	movs	r3, #2
 800e9c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9c8:	e0a9      	b.n	800eb1e <UART_SetConfig+0x312>
 800e9ca:	2304      	movs	r3, #4
 800e9cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9d0:	e0a5      	b.n	800eb1e <UART_SetConfig+0x312>
 800e9d2:	2308      	movs	r3, #8
 800e9d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9d8:	e0a1      	b.n	800eb1e <UART_SetConfig+0x312>
 800e9da:	2310      	movs	r3, #16
 800e9dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9e0:	e09d      	b.n	800eb1e <UART_SetConfig+0x312>
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4a4a      	ldr	r2, [pc, #296]	; (800eb10 <UART_SetConfig+0x304>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d125      	bne.n	800ea38 <UART_SetConfig+0x22c>
 800e9ec:	4b45      	ldr	r3, [pc, #276]	; (800eb04 <UART_SetConfig+0x2f8>)
 800e9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e9f6:	2bc0      	cmp	r3, #192	; 0xc0
 800e9f8:	d016      	beq.n	800ea28 <UART_SetConfig+0x21c>
 800e9fa:	2bc0      	cmp	r3, #192	; 0xc0
 800e9fc:	d818      	bhi.n	800ea30 <UART_SetConfig+0x224>
 800e9fe:	2b80      	cmp	r3, #128	; 0x80
 800ea00:	d00a      	beq.n	800ea18 <UART_SetConfig+0x20c>
 800ea02:	2b80      	cmp	r3, #128	; 0x80
 800ea04:	d814      	bhi.n	800ea30 <UART_SetConfig+0x224>
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d002      	beq.n	800ea10 <UART_SetConfig+0x204>
 800ea0a:	2b40      	cmp	r3, #64	; 0x40
 800ea0c:	d008      	beq.n	800ea20 <UART_SetConfig+0x214>
 800ea0e:	e00f      	b.n	800ea30 <UART_SetConfig+0x224>
 800ea10:	2300      	movs	r3, #0
 800ea12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea16:	e082      	b.n	800eb1e <UART_SetConfig+0x312>
 800ea18:	2302      	movs	r3, #2
 800ea1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea1e:	e07e      	b.n	800eb1e <UART_SetConfig+0x312>
 800ea20:	2304      	movs	r3, #4
 800ea22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea26:	e07a      	b.n	800eb1e <UART_SetConfig+0x312>
 800ea28:	2308      	movs	r3, #8
 800ea2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea2e:	e076      	b.n	800eb1e <UART_SetConfig+0x312>
 800ea30:	2310      	movs	r3, #16
 800ea32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea36:	e072      	b.n	800eb1e <UART_SetConfig+0x312>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a35      	ldr	r2, [pc, #212]	; (800eb14 <UART_SetConfig+0x308>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d12a      	bne.n	800ea98 <UART_SetConfig+0x28c>
 800ea42:	4b30      	ldr	r3, [pc, #192]	; (800eb04 <UART_SetConfig+0x2f8>)
 800ea44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea50:	d01a      	beq.n	800ea88 <UART_SetConfig+0x27c>
 800ea52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea56:	d81b      	bhi.n	800ea90 <UART_SetConfig+0x284>
 800ea58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea5c:	d00c      	beq.n	800ea78 <UART_SetConfig+0x26c>
 800ea5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea62:	d815      	bhi.n	800ea90 <UART_SetConfig+0x284>
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d003      	beq.n	800ea70 <UART_SetConfig+0x264>
 800ea68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea6c:	d008      	beq.n	800ea80 <UART_SetConfig+0x274>
 800ea6e:	e00f      	b.n	800ea90 <UART_SetConfig+0x284>
 800ea70:	2300      	movs	r3, #0
 800ea72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea76:	e052      	b.n	800eb1e <UART_SetConfig+0x312>
 800ea78:	2302      	movs	r3, #2
 800ea7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea7e:	e04e      	b.n	800eb1e <UART_SetConfig+0x312>
 800ea80:	2304      	movs	r3, #4
 800ea82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea86:	e04a      	b.n	800eb1e <UART_SetConfig+0x312>
 800ea88:	2308      	movs	r3, #8
 800ea8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea8e:	e046      	b.n	800eb1e <UART_SetConfig+0x312>
 800ea90:	2310      	movs	r3, #16
 800ea92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea96:	e042      	b.n	800eb1e <UART_SetConfig+0x312>
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a17      	ldr	r2, [pc, #92]	; (800eafc <UART_SetConfig+0x2f0>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d13a      	bne.n	800eb18 <UART_SetConfig+0x30c>
 800eaa2:	4b18      	ldr	r3, [pc, #96]	; (800eb04 <UART_SetConfig+0x2f8>)
 800eaa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800eaac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eab0:	d01a      	beq.n	800eae8 <UART_SetConfig+0x2dc>
 800eab2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eab6:	d81b      	bhi.n	800eaf0 <UART_SetConfig+0x2e4>
 800eab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eabc:	d00c      	beq.n	800ead8 <UART_SetConfig+0x2cc>
 800eabe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eac2:	d815      	bhi.n	800eaf0 <UART_SetConfig+0x2e4>
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d003      	beq.n	800ead0 <UART_SetConfig+0x2c4>
 800eac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eacc:	d008      	beq.n	800eae0 <UART_SetConfig+0x2d4>
 800eace:	e00f      	b.n	800eaf0 <UART_SetConfig+0x2e4>
 800ead0:	2300      	movs	r3, #0
 800ead2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ead6:	e022      	b.n	800eb1e <UART_SetConfig+0x312>
 800ead8:	2302      	movs	r3, #2
 800eada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eade:	e01e      	b.n	800eb1e <UART_SetConfig+0x312>
 800eae0:	2304      	movs	r3, #4
 800eae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eae6:	e01a      	b.n	800eb1e <UART_SetConfig+0x312>
 800eae8:	2308      	movs	r3, #8
 800eaea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eaee:	e016      	b.n	800eb1e <UART_SetConfig+0x312>
 800eaf0:	2310      	movs	r3, #16
 800eaf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eaf6:	e012      	b.n	800eb1e <UART_SetConfig+0x312>
 800eaf8:	cfff69f3 	.word	0xcfff69f3
 800eafc:	40008000 	.word	0x40008000
 800eb00:	40013800 	.word	0x40013800
 800eb04:	40021000 	.word	0x40021000
 800eb08:	40004400 	.word	0x40004400
 800eb0c:	40004800 	.word	0x40004800
 800eb10:	40004c00 	.word	0x40004c00
 800eb14:	40005000 	.word	0x40005000
 800eb18:	2310      	movs	r3, #16
 800eb1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4a88      	ldr	r2, [pc, #544]	; (800ed44 <UART_SetConfig+0x538>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	f040 841b 	bne.w	800f360 <UART_SetConfig+0xb54>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eb2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb2e:	2b08      	cmp	r3, #8
 800eb30:	f200 815c 	bhi.w	800edec <UART_SetConfig+0x5e0>
 800eb34:	a201      	add	r2, pc, #4	; (adr r2, 800eb3c <UART_SetConfig+0x330>)
 800eb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb3a:	bf00      	nop
 800eb3c:	0800eb61 	.word	0x0800eb61
 800eb40:	0800eded 	.word	0x0800eded
 800eb44:	0800ec03 	.word	0x0800ec03
 800eb48:	0800eded 	.word	0x0800eded
 800eb4c:	0800eca1 	.word	0x0800eca1
 800eb50:	0800eded 	.word	0x0800eded
 800eb54:	0800eded 	.word	0x0800eded
 800eb58:	0800eded 	.word	0x0800eded
 800eb5c:	0800ed4d 	.word	0x0800ed4d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800eb60:	f7fc f838 	bl	800abd4 <HAL_RCC_GetPCLK1Freq>
 800eb64:	4602      	mov	r2, r0
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d044      	beq.n	800ebf8 <UART_SetConfig+0x3ec>
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d03e      	beq.n	800ebf4 <UART_SetConfig+0x3e8>
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7a:	2b02      	cmp	r3, #2
 800eb7c:	d038      	beq.n	800ebf0 <UART_SetConfig+0x3e4>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb82:	2b03      	cmp	r3, #3
 800eb84:	d032      	beq.n	800ebec <UART_SetConfig+0x3e0>
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb8a:	2b04      	cmp	r3, #4
 800eb8c:	d02c      	beq.n	800ebe8 <UART_SetConfig+0x3dc>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb92:	2b05      	cmp	r3, #5
 800eb94:	d026      	beq.n	800ebe4 <UART_SetConfig+0x3d8>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9a:	2b06      	cmp	r3, #6
 800eb9c:	d020      	beq.n	800ebe0 <UART_SetConfig+0x3d4>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba2:	2b07      	cmp	r3, #7
 800eba4:	d01a      	beq.n	800ebdc <UART_SetConfig+0x3d0>
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebaa:	2b08      	cmp	r3, #8
 800ebac:	d014      	beq.n	800ebd8 <UART_SetConfig+0x3cc>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb2:	2b09      	cmp	r3, #9
 800ebb4:	d00e      	beq.n	800ebd4 <UART_SetConfig+0x3c8>
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebba:	2b0a      	cmp	r3, #10
 800ebbc:	d008      	beq.n	800ebd0 <UART_SetConfig+0x3c4>
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc2:	2b0b      	cmp	r3, #11
 800ebc4:	d102      	bne.n	800ebcc <UART_SetConfig+0x3c0>
 800ebc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebca:	e016      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebcc:	2301      	movs	r3, #1
 800ebce:	e014      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebd0:	2380      	movs	r3, #128	; 0x80
 800ebd2:	e012      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebd4:	2340      	movs	r3, #64	; 0x40
 800ebd6:	e010      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebd8:	2320      	movs	r3, #32
 800ebda:	e00e      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebdc:	2310      	movs	r3, #16
 800ebde:	e00c      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebe0:	230c      	movs	r3, #12
 800ebe2:	e00a      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebe4:	230a      	movs	r3, #10
 800ebe6:	e008      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebe8:	2308      	movs	r3, #8
 800ebea:	e006      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebec:	2306      	movs	r3, #6
 800ebee:	e004      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebf0:	2304      	movs	r3, #4
 800ebf2:	e002      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebf4:	2302      	movs	r3, #2
 800ebf6:	e000      	b.n	800ebfa <UART_SetConfig+0x3ee>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebfe:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800ec00:	e0f8      	b.n	800edf4 <UART_SetConfig+0x5e8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d044      	beq.n	800ec94 <UART_SetConfig+0x488>
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d03e      	beq.n	800ec90 <UART_SetConfig+0x484>
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec16:	2b02      	cmp	r3, #2
 800ec18:	d038      	beq.n	800ec8c <UART_SetConfig+0x480>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec1e:	2b03      	cmp	r3, #3
 800ec20:	d032      	beq.n	800ec88 <UART_SetConfig+0x47c>
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec26:	2b04      	cmp	r3, #4
 800ec28:	d02c      	beq.n	800ec84 <UART_SetConfig+0x478>
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec2e:	2b05      	cmp	r3, #5
 800ec30:	d026      	beq.n	800ec80 <UART_SetConfig+0x474>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec36:	2b06      	cmp	r3, #6
 800ec38:	d020      	beq.n	800ec7c <UART_SetConfig+0x470>
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3e:	2b07      	cmp	r3, #7
 800ec40:	d01a      	beq.n	800ec78 <UART_SetConfig+0x46c>
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec46:	2b08      	cmp	r3, #8
 800ec48:	d014      	beq.n	800ec74 <UART_SetConfig+0x468>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec4e:	2b09      	cmp	r3, #9
 800ec50:	d00e      	beq.n	800ec70 <UART_SetConfig+0x464>
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec56:	2b0a      	cmp	r3, #10
 800ec58:	d008      	beq.n	800ec6c <UART_SetConfig+0x460>
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5e:	2b0b      	cmp	r3, #11
 800ec60:	d102      	bne.n	800ec68 <UART_SetConfig+0x45c>
 800ec62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec66:	e016      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e014      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec6c:	2380      	movs	r3, #128	; 0x80
 800ec6e:	e012      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec70:	2340      	movs	r3, #64	; 0x40
 800ec72:	e010      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec74:	2320      	movs	r3, #32
 800ec76:	e00e      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec78:	2310      	movs	r3, #16
 800ec7a:	e00c      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec7c:	230c      	movs	r3, #12
 800ec7e:	e00a      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec80:	230a      	movs	r3, #10
 800ec82:	e008      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec84:	2308      	movs	r3, #8
 800ec86:	e006      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec88:	2306      	movs	r3, #6
 800ec8a:	e004      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec8c:	2304      	movs	r3, #4
 800ec8e:	e002      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec90:	2302      	movs	r3, #2
 800ec92:	e000      	b.n	800ec96 <UART_SetConfig+0x48a>
 800ec94:	2301      	movs	r3, #1
 800ec96:	4a2c      	ldr	r2, [pc, #176]	; (800ed48 <UART_SetConfig+0x53c>)
 800ec98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec9c:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 800ec9e:	e0a9      	b.n	800edf4 <UART_SetConfig+0x5e8>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800eca0:	f7fb ff02 	bl	800aaa8 <HAL_RCC_GetSysClockFreq>
 800eca4:	4602      	mov	r2, r0
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d044      	beq.n	800ed38 <UART_SetConfig+0x52c>
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d03e      	beq.n	800ed34 <UART_SetConfig+0x528>
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecba:	2b02      	cmp	r3, #2
 800ecbc:	d038      	beq.n	800ed30 <UART_SetConfig+0x524>
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc2:	2b03      	cmp	r3, #3
 800ecc4:	d032      	beq.n	800ed2c <UART_SetConfig+0x520>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecca:	2b04      	cmp	r3, #4
 800eccc:	d02c      	beq.n	800ed28 <UART_SetConfig+0x51c>
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd2:	2b05      	cmp	r3, #5
 800ecd4:	d026      	beq.n	800ed24 <UART_SetConfig+0x518>
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecda:	2b06      	cmp	r3, #6
 800ecdc:	d020      	beq.n	800ed20 <UART_SetConfig+0x514>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece2:	2b07      	cmp	r3, #7
 800ece4:	d01a      	beq.n	800ed1c <UART_SetConfig+0x510>
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecea:	2b08      	cmp	r3, #8
 800ecec:	d014      	beq.n	800ed18 <UART_SetConfig+0x50c>
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf2:	2b09      	cmp	r3, #9
 800ecf4:	d00e      	beq.n	800ed14 <UART_SetConfig+0x508>
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfa:	2b0a      	cmp	r3, #10
 800ecfc:	d008      	beq.n	800ed10 <UART_SetConfig+0x504>
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed02:	2b0b      	cmp	r3, #11
 800ed04:	d102      	bne.n	800ed0c <UART_SetConfig+0x500>
 800ed06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed0a:	e016      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	e014      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed10:	2380      	movs	r3, #128	; 0x80
 800ed12:	e012      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed14:	2340      	movs	r3, #64	; 0x40
 800ed16:	e010      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed18:	2320      	movs	r3, #32
 800ed1a:	e00e      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed1c:	2310      	movs	r3, #16
 800ed1e:	e00c      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed20:	230c      	movs	r3, #12
 800ed22:	e00a      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed24:	230a      	movs	r3, #10
 800ed26:	e008      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed28:	2308      	movs	r3, #8
 800ed2a:	e006      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed2c:	2306      	movs	r3, #6
 800ed2e:	e004      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed30:	2304      	movs	r3, #4
 800ed32:	e002      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed34:	2302      	movs	r3, #2
 800ed36:	e000      	b.n	800ed3a <UART_SetConfig+0x52e>
 800ed38:	2301      	movs	r3, #1
 800ed3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed3e:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800ed40:	e058      	b.n	800edf4 <UART_SetConfig+0x5e8>
 800ed42:	bf00      	nop
 800ed44:	40008000 	.word	0x40008000
 800ed48:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d044      	beq.n	800edde <UART_SetConfig+0x5d2>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d03e      	beq.n	800edda <UART_SetConfig+0x5ce>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d038      	beq.n	800edd6 <UART_SetConfig+0x5ca>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed68:	2b03      	cmp	r3, #3
 800ed6a:	d032      	beq.n	800edd2 <UART_SetConfig+0x5c6>
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed70:	2b04      	cmp	r3, #4
 800ed72:	d02c      	beq.n	800edce <UART_SetConfig+0x5c2>
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed78:	2b05      	cmp	r3, #5
 800ed7a:	d026      	beq.n	800edca <UART_SetConfig+0x5be>
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed80:	2b06      	cmp	r3, #6
 800ed82:	d020      	beq.n	800edc6 <UART_SetConfig+0x5ba>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	2b07      	cmp	r3, #7
 800ed8a:	d01a      	beq.n	800edc2 <UART_SetConfig+0x5b6>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed90:	2b08      	cmp	r3, #8
 800ed92:	d014      	beq.n	800edbe <UART_SetConfig+0x5b2>
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed98:	2b09      	cmp	r3, #9
 800ed9a:	d00e      	beq.n	800edba <UART_SetConfig+0x5ae>
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda0:	2b0a      	cmp	r3, #10
 800eda2:	d008      	beq.n	800edb6 <UART_SetConfig+0x5aa>
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda8:	2b0b      	cmp	r3, #11
 800edaa:	d102      	bne.n	800edb2 <UART_SetConfig+0x5a6>
 800edac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edb0:	e016      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edb2:	2301      	movs	r3, #1
 800edb4:	e014      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edb6:	2380      	movs	r3, #128	; 0x80
 800edb8:	e012      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edba:	2340      	movs	r3, #64	; 0x40
 800edbc:	e010      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edbe:	2320      	movs	r3, #32
 800edc0:	e00e      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edc2:	2310      	movs	r3, #16
 800edc4:	e00c      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edc6:	230c      	movs	r3, #12
 800edc8:	e00a      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edca:	230a      	movs	r3, #10
 800edcc:	e008      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edce:	2308      	movs	r3, #8
 800edd0:	e006      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edd2:	2306      	movs	r3, #6
 800edd4:	e004      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edd6:	2304      	movs	r3, #4
 800edd8:	e002      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edda:	2302      	movs	r3, #2
 800eddc:	e000      	b.n	800ede0 <UART_SetConfig+0x5d4>
 800edde:	2301      	movs	r3, #1
 800ede0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ede4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ede8:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 800edea:	e003      	b.n	800edf4 <UART_SetConfig+0x5e8>
      default:
        ret = HAL_ERROR;
 800edec:	2301      	movs	r3, #1
 800edee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800edf2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f000 86ad 	beq.w	800fb56 <UART_SetConfig+0x134a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	4613      	mov	r3, r2
 800ee02:	005b      	lsls	r3, r3, #1
 800ee04:	4413      	add	r3, r2
 800ee06:	69fa      	ldr	r2, [r7, #28]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d305      	bcc.n	800ee18 <UART_SetConfig+0x60c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee12:	69fa      	ldr	r2, [r7, #28]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d904      	bls.n	800ee22 <UART_SetConfig+0x616>
      {
        ret = HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ee1e:	f000 be9a 	b.w	800fb56 <UART_SetConfig+0x134a>
      }
      else
      {
        switch (clocksource)
 800ee22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee26:	2b08      	cmp	r3, #8
 800ee28:	f200 8282 	bhi.w	800f330 <UART_SetConfig+0xb24>
 800ee2c:	a201      	add	r2, pc, #4	; (adr r2, 800ee34 <UART_SetConfig+0x628>)
 800ee2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee32:	bf00      	nop
 800ee34:	0800ee59 	.word	0x0800ee59
 800ee38:	0800f331 	.word	0x0800f331
 800ee3c:	0800ef93 	.word	0x0800ef93
 800ee40:	0800f331 	.word	0x0800f331
 800ee44:	0800f0c5 	.word	0x0800f0c5
 800ee48:	0800f331 	.word	0x0800f331
 800ee4c:	0800f331 	.word	0x0800f331
 800ee50:	0800f331 	.word	0x0800f331
 800ee54:	0800f1ff 	.word	0x0800f1ff
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800ee58:	f7fb febc 	bl	800abd4 <HAL_RCC_GetPCLK1Freq>
 800ee5c:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	4618      	mov	r0, r3
 800ee62:	f04f 0100 	mov.w	r1, #0
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d067      	beq.n	800ef3e <UART_SetConfig+0x732>
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d05e      	beq.n	800ef34 <UART_SetConfig+0x728>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d055      	beq.n	800ef2a <UART_SetConfig+0x71e>
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee82:	2b03      	cmp	r3, #3
 800ee84:	d04c      	beq.n	800ef20 <UART_SetConfig+0x714>
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8a:	2b04      	cmp	r3, #4
 800ee8c:	d043      	beq.n	800ef16 <UART_SetConfig+0x70a>
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee92:	2b05      	cmp	r3, #5
 800ee94:	d03a      	beq.n	800ef0c <UART_SetConfig+0x700>
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee9a:	2b06      	cmp	r3, #6
 800ee9c:	d031      	beq.n	800ef02 <UART_SetConfig+0x6f6>
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea2:	2b07      	cmp	r3, #7
 800eea4:	d028      	beq.n	800eef8 <UART_SetConfig+0x6ec>
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeaa:	2b08      	cmp	r3, #8
 800eeac:	d01f      	beq.n	800eeee <UART_SetConfig+0x6e2>
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb2:	2b09      	cmp	r3, #9
 800eeb4:	d016      	beq.n	800eee4 <UART_SetConfig+0x6d8>
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeba:	2b0a      	cmp	r3, #10
 800eebc:	d00d      	beq.n	800eeda <UART_SetConfig+0x6ce>
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec2:	2b0b      	cmp	r3, #11
 800eec4:	d104      	bne.n	800eed0 <UART_SetConfig+0x6c4>
 800eec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eeca:	f04f 0300 	mov.w	r3, #0
 800eece:	e03a      	b.n	800ef46 <UART_SetConfig+0x73a>
 800eed0:	f04f 0201 	mov.w	r2, #1
 800eed4:	f04f 0300 	mov.w	r3, #0
 800eed8:	e035      	b.n	800ef46 <UART_SetConfig+0x73a>
 800eeda:	f04f 0280 	mov.w	r2, #128	; 0x80
 800eede:	f04f 0300 	mov.w	r3, #0
 800eee2:	e030      	b.n	800ef46 <UART_SetConfig+0x73a>
 800eee4:	f04f 0240 	mov.w	r2, #64	; 0x40
 800eee8:	f04f 0300 	mov.w	r3, #0
 800eeec:	e02b      	b.n	800ef46 <UART_SetConfig+0x73a>
 800eeee:	f04f 0220 	mov.w	r2, #32
 800eef2:	f04f 0300 	mov.w	r3, #0
 800eef6:	e026      	b.n	800ef46 <UART_SetConfig+0x73a>
 800eef8:	f04f 0210 	mov.w	r2, #16
 800eefc:	f04f 0300 	mov.w	r3, #0
 800ef00:	e021      	b.n	800ef46 <UART_SetConfig+0x73a>
 800ef02:	f04f 020c 	mov.w	r2, #12
 800ef06:	f04f 0300 	mov.w	r3, #0
 800ef0a:	e01c      	b.n	800ef46 <UART_SetConfig+0x73a>
 800ef0c:	f04f 020a 	mov.w	r2, #10
 800ef10:	f04f 0300 	mov.w	r3, #0
 800ef14:	e017      	b.n	800ef46 <UART_SetConfig+0x73a>
 800ef16:	f04f 0208 	mov.w	r2, #8
 800ef1a:	f04f 0300 	mov.w	r3, #0
 800ef1e:	e012      	b.n	800ef46 <UART_SetConfig+0x73a>
 800ef20:	f04f 0206 	mov.w	r2, #6
 800ef24:	f04f 0300 	mov.w	r3, #0
 800ef28:	e00d      	b.n	800ef46 <UART_SetConfig+0x73a>
 800ef2a:	f04f 0204 	mov.w	r2, #4
 800ef2e:	f04f 0300 	mov.w	r3, #0
 800ef32:	e008      	b.n	800ef46 <UART_SetConfig+0x73a>
 800ef34:	f04f 0202 	mov.w	r2, #2
 800ef38:	f04f 0300 	mov.w	r3, #0
 800ef3c:	e003      	b.n	800ef46 <UART_SetConfig+0x73a>
 800ef3e:	f04f 0201 	mov.w	r2, #1
 800ef42:	f04f 0300 	mov.w	r3, #0
 800ef46:	f7f1 fec7 	bl	8000cd8 <__aeabi_uldivmod>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	4610      	mov	r0, r2
 800ef50:	4619      	mov	r1, r3
 800ef52:	f04f 0200 	mov.w	r2, #0
 800ef56:	f04f 0300 	mov.w	r3, #0
 800ef5a:	020b      	lsls	r3, r1, #8
 800ef5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef60:	0202      	lsls	r2, r0, #8
 800ef62:	68f9      	ldr	r1, [r7, #12]
 800ef64:	6849      	ldr	r1, [r1, #4]
 800ef66:	0849      	lsrs	r1, r1, #1
 800ef68:	4608      	mov	r0, r1
 800ef6a:	f04f 0100 	mov.w	r1, #0
 800ef6e:	1814      	adds	r4, r2, r0
 800ef70:	603c      	str	r4, [r7, #0]
 800ef72:	414b      	adcs	r3, r1
 800ef74:	607b      	str	r3, [r7, #4]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	f04f 0300 	mov.w	r3, #0
 800ef80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef84:	f7f1 fea8 	bl	8000cd8 <__aeabi_uldivmod>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	4613      	mov	r3, r2
 800ef8e:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800ef90:	e1d2      	b.n	800f338 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d067      	beq.n	800f06a <UART_SetConfig+0x85e>
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d05e      	beq.n	800f060 <UART_SetConfig+0x854>
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa6:	2b02      	cmp	r3, #2
 800efa8:	d055      	beq.n	800f056 <UART_SetConfig+0x84a>
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efae:	2b03      	cmp	r3, #3
 800efb0:	d04c      	beq.n	800f04c <UART_SetConfig+0x840>
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb6:	2b04      	cmp	r3, #4
 800efb8:	d043      	beq.n	800f042 <UART_SetConfig+0x836>
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efbe:	2b05      	cmp	r3, #5
 800efc0:	d03a      	beq.n	800f038 <UART_SetConfig+0x82c>
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc6:	2b06      	cmp	r3, #6
 800efc8:	d031      	beq.n	800f02e <UART_SetConfig+0x822>
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efce:	2b07      	cmp	r3, #7
 800efd0:	d028      	beq.n	800f024 <UART_SetConfig+0x818>
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd6:	2b08      	cmp	r3, #8
 800efd8:	d01f      	beq.n	800f01a <UART_SetConfig+0x80e>
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efde:	2b09      	cmp	r3, #9
 800efe0:	d016      	beq.n	800f010 <UART_SetConfig+0x804>
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe6:	2b0a      	cmp	r3, #10
 800efe8:	d00d      	beq.n	800f006 <UART_SetConfig+0x7fa>
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efee:	2b0b      	cmp	r3, #11
 800eff0:	d104      	bne.n	800effc <UART_SetConfig+0x7f0>
 800eff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eff6:	f04f 0300 	mov.w	r3, #0
 800effa:	e03a      	b.n	800f072 <UART_SetConfig+0x866>
 800effc:	f04f 0201 	mov.w	r2, #1
 800f000:	f04f 0300 	mov.w	r3, #0
 800f004:	e035      	b.n	800f072 <UART_SetConfig+0x866>
 800f006:	f04f 0280 	mov.w	r2, #128	; 0x80
 800f00a:	f04f 0300 	mov.w	r3, #0
 800f00e:	e030      	b.n	800f072 <UART_SetConfig+0x866>
 800f010:	f04f 0240 	mov.w	r2, #64	; 0x40
 800f014:	f04f 0300 	mov.w	r3, #0
 800f018:	e02b      	b.n	800f072 <UART_SetConfig+0x866>
 800f01a:	f04f 0220 	mov.w	r2, #32
 800f01e:	f04f 0300 	mov.w	r3, #0
 800f022:	e026      	b.n	800f072 <UART_SetConfig+0x866>
 800f024:	f04f 0210 	mov.w	r2, #16
 800f028:	f04f 0300 	mov.w	r3, #0
 800f02c:	e021      	b.n	800f072 <UART_SetConfig+0x866>
 800f02e:	f04f 020c 	mov.w	r2, #12
 800f032:	f04f 0300 	mov.w	r3, #0
 800f036:	e01c      	b.n	800f072 <UART_SetConfig+0x866>
 800f038:	f04f 020a 	mov.w	r2, #10
 800f03c:	f04f 0300 	mov.w	r3, #0
 800f040:	e017      	b.n	800f072 <UART_SetConfig+0x866>
 800f042:	f04f 0208 	mov.w	r2, #8
 800f046:	f04f 0300 	mov.w	r3, #0
 800f04a:	e012      	b.n	800f072 <UART_SetConfig+0x866>
 800f04c:	f04f 0206 	mov.w	r2, #6
 800f050:	f04f 0300 	mov.w	r3, #0
 800f054:	e00d      	b.n	800f072 <UART_SetConfig+0x866>
 800f056:	f04f 0204 	mov.w	r2, #4
 800f05a:	f04f 0300 	mov.w	r3, #0
 800f05e:	e008      	b.n	800f072 <UART_SetConfig+0x866>
 800f060:	f04f 0202 	mov.w	r2, #2
 800f064:	f04f 0300 	mov.w	r3, #0
 800f068:	e003      	b.n	800f072 <UART_SetConfig+0x866>
 800f06a:	f04f 0201 	mov.w	r2, #1
 800f06e:	f04f 0300 	mov.w	r3, #0
 800f072:	48ba      	ldr	r0, [pc, #744]	; (800f35c <UART_SetConfig+0xb50>)
 800f074:	f04f 0100 	mov.w	r1, #0
 800f078:	f7f1 fe2e 	bl	8000cd8 <__aeabi_uldivmod>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	4610      	mov	r0, r2
 800f082:	4619      	mov	r1, r3
 800f084:	f04f 0200 	mov.w	r2, #0
 800f088:	f04f 0300 	mov.w	r3, #0
 800f08c:	020b      	lsls	r3, r1, #8
 800f08e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f092:	0202      	lsls	r2, r0, #8
 800f094:	68f9      	ldr	r1, [r7, #12]
 800f096:	6849      	ldr	r1, [r1, #4]
 800f098:	0849      	lsrs	r1, r1, #1
 800f09a:	4608      	mov	r0, r1
 800f09c:	f04f 0100 	mov.w	r1, #0
 800f0a0:	eb12 0a00 	adds.w	sl, r2, r0
 800f0a4:	eb43 0b01 	adc.w	fp, r3, r1
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	f04f 0300 	mov.w	r3, #0
 800f0b2:	4650      	mov	r0, sl
 800f0b4:	4659      	mov	r1, fp
 800f0b6:	f7f1 fe0f 	bl	8000cd8 <__aeabi_uldivmod>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	460b      	mov	r3, r1
 800f0be:	4613      	mov	r3, r2
 800f0c0:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800f0c2:	e139      	b.n	800f338 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800f0c4:	f7fb fcf0 	bl	800aaa8 <HAL_RCC_GetSysClockFreq>
 800f0c8:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0ca:	69bb      	ldr	r3, [r7, #24]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f04f 0100 	mov.w	r1, #0
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d067      	beq.n	800f1aa <UART_SetConfig+0x99e>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d05e      	beq.n	800f1a0 <UART_SetConfig+0x994>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e6:	2b02      	cmp	r3, #2
 800f0e8:	d055      	beq.n	800f196 <UART_SetConfig+0x98a>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	d04c      	beq.n	800f18c <UART_SetConfig+0x980>
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f6:	2b04      	cmp	r3, #4
 800f0f8:	d043      	beq.n	800f182 <UART_SetConfig+0x976>
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0fe:	2b05      	cmp	r3, #5
 800f100:	d03a      	beq.n	800f178 <UART_SetConfig+0x96c>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f106:	2b06      	cmp	r3, #6
 800f108:	d031      	beq.n	800f16e <UART_SetConfig+0x962>
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10e:	2b07      	cmp	r3, #7
 800f110:	d028      	beq.n	800f164 <UART_SetConfig+0x958>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f116:	2b08      	cmp	r3, #8
 800f118:	d01f      	beq.n	800f15a <UART_SetConfig+0x94e>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11e:	2b09      	cmp	r3, #9
 800f120:	d016      	beq.n	800f150 <UART_SetConfig+0x944>
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f126:	2b0a      	cmp	r3, #10
 800f128:	d00d      	beq.n	800f146 <UART_SetConfig+0x93a>
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f12e:	2b0b      	cmp	r3, #11
 800f130:	d104      	bne.n	800f13c <UART_SetConfig+0x930>
 800f132:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f136:	f04f 0300 	mov.w	r3, #0
 800f13a:	e03a      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f13c:	f04f 0201 	mov.w	r2, #1
 800f140:	f04f 0300 	mov.w	r3, #0
 800f144:	e035      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f146:	f04f 0280 	mov.w	r2, #128	; 0x80
 800f14a:	f04f 0300 	mov.w	r3, #0
 800f14e:	e030      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f150:	f04f 0240 	mov.w	r2, #64	; 0x40
 800f154:	f04f 0300 	mov.w	r3, #0
 800f158:	e02b      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f15a:	f04f 0220 	mov.w	r2, #32
 800f15e:	f04f 0300 	mov.w	r3, #0
 800f162:	e026      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f164:	f04f 0210 	mov.w	r2, #16
 800f168:	f04f 0300 	mov.w	r3, #0
 800f16c:	e021      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f16e:	f04f 020c 	mov.w	r2, #12
 800f172:	f04f 0300 	mov.w	r3, #0
 800f176:	e01c      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f178:	f04f 020a 	mov.w	r2, #10
 800f17c:	f04f 0300 	mov.w	r3, #0
 800f180:	e017      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f182:	f04f 0208 	mov.w	r2, #8
 800f186:	f04f 0300 	mov.w	r3, #0
 800f18a:	e012      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f18c:	f04f 0206 	mov.w	r2, #6
 800f190:	f04f 0300 	mov.w	r3, #0
 800f194:	e00d      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f196:	f04f 0204 	mov.w	r2, #4
 800f19a:	f04f 0300 	mov.w	r3, #0
 800f19e:	e008      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f1a0:	f04f 0202 	mov.w	r2, #2
 800f1a4:	f04f 0300 	mov.w	r3, #0
 800f1a8:	e003      	b.n	800f1b2 <UART_SetConfig+0x9a6>
 800f1aa:	f04f 0201 	mov.w	r2, #1
 800f1ae:	f04f 0300 	mov.w	r3, #0
 800f1b2:	f7f1 fd91 	bl	8000cd8 <__aeabi_uldivmod>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	4610      	mov	r0, r2
 800f1bc:	4619      	mov	r1, r3
 800f1be:	f04f 0200 	mov.w	r2, #0
 800f1c2:	f04f 0300 	mov.w	r3, #0
 800f1c6:	020b      	lsls	r3, r1, #8
 800f1c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f1cc:	0202      	lsls	r2, r0, #8
 800f1ce:	68f9      	ldr	r1, [r7, #12]
 800f1d0:	6849      	ldr	r1, [r1, #4]
 800f1d2:	0849      	lsrs	r1, r1, #1
 800f1d4:	4608      	mov	r0, r1
 800f1d6:	f04f 0100 	mov.w	r1, #0
 800f1da:	eb12 0800 	adds.w	r8, r2, r0
 800f1de:	eb43 0901 	adc.w	r9, r3, r1
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	f04f 0300 	mov.w	r3, #0
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	4649      	mov	r1, r9
 800f1f0:	f7f1 fd72 	bl	8000cd8 <__aeabi_uldivmod>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	4613      	mov	r3, r2
 800f1fa:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800f1fc:	e09c      	b.n	800f338 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f202:	2b00      	cmp	r3, #0
 800f204:	d067      	beq.n	800f2d6 <UART_SetConfig+0xaca>
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d05e      	beq.n	800f2cc <UART_SetConfig+0xac0>
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f212:	2b02      	cmp	r3, #2
 800f214:	d055      	beq.n	800f2c2 <UART_SetConfig+0xab6>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f21a:	2b03      	cmp	r3, #3
 800f21c:	d04c      	beq.n	800f2b8 <UART_SetConfig+0xaac>
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f222:	2b04      	cmp	r3, #4
 800f224:	d043      	beq.n	800f2ae <UART_SetConfig+0xaa2>
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22a:	2b05      	cmp	r3, #5
 800f22c:	d03a      	beq.n	800f2a4 <UART_SetConfig+0xa98>
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f232:	2b06      	cmp	r3, #6
 800f234:	d031      	beq.n	800f29a <UART_SetConfig+0xa8e>
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f23a:	2b07      	cmp	r3, #7
 800f23c:	d028      	beq.n	800f290 <UART_SetConfig+0xa84>
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f242:	2b08      	cmp	r3, #8
 800f244:	d01f      	beq.n	800f286 <UART_SetConfig+0xa7a>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24a:	2b09      	cmp	r3, #9
 800f24c:	d016      	beq.n	800f27c <UART_SetConfig+0xa70>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f252:	2b0a      	cmp	r3, #10
 800f254:	d00d      	beq.n	800f272 <UART_SetConfig+0xa66>
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25a:	2b0b      	cmp	r3, #11
 800f25c:	d104      	bne.n	800f268 <UART_SetConfig+0xa5c>
 800f25e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f262:	f04f 0300 	mov.w	r3, #0
 800f266:	e03a      	b.n	800f2de <UART_SetConfig+0xad2>
 800f268:	f04f 0201 	mov.w	r2, #1
 800f26c:	f04f 0300 	mov.w	r3, #0
 800f270:	e035      	b.n	800f2de <UART_SetConfig+0xad2>
 800f272:	f04f 0280 	mov.w	r2, #128	; 0x80
 800f276:	f04f 0300 	mov.w	r3, #0
 800f27a:	e030      	b.n	800f2de <UART_SetConfig+0xad2>
 800f27c:	f04f 0240 	mov.w	r2, #64	; 0x40
 800f280:	f04f 0300 	mov.w	r3, #0
 800f284:	e02b      	b.n	800f2de <UART_SetConfig+0xad2>
 800f286:	f04f 0220 	mov.w	r2, #32
 800f28a:	f04f 0300 	mov.w	r3, #0
 800f28e:	e026      	b.n	800f2de <UART_SetConfig+0xad2>
 800f290:	f04f 0210 	mov.w	r2, #16
 800f294:	f04f 0300 	mov.w	r3, #0
 800f298:	e021      	b.n	800f2de <UART_SetConfig+0xad2>
 800f29a:	f04f 020c 	mov.w	r2, #12
 800f29e:	f04f 0300 	mov.w	r3, #0
 800f2a2:	e01c      	b.n	800f2de <UART_SetConfig+0xad2>
 800f2a4:	f04f 020a 	mov.w	r2, #10
 800f2a8:	f04f 0300 	mov.w	r3, #0
 800f2ac:	e017      	b.n	800f2de <UART_SetConfig+0xad2>
 800f2ae:	f04f 0208 	mov.w	r2, #8
 800f2b2:	f04f 0300 	mov.w	r3, #0
 800f2b6:	e012      	b.n	800f2de <UART_SetConfig+0xad2>
 800f2b8:	f04f 0206 	mov.w	r2, #6
 800f2bc:	f04f 0300 	mov.w	r3, #0
 800f2c0:	e00d      	b.n	800f2de <UART_SetConfig+0xad2>
 800f2c2:	f04f 0204 	mov.w	r2, #4
 800f2c6:	f04f 0300 	mov.w	r3, #0
 800f2ca:	e008      	b.n	800f2de <UART_SetConfig+0xad2>
 800f2cc:	f04f 0202 	mov.w	r2, #2
 800f2d0:	f04f 0300 	mov.w	r3, #0
 800f2d4:	e003      	b.n	800f2de <UART_SetConfig+0xad2>
 800f2d6:	f04f 0201 	mov.w	r2, #1
 800f2da:	f04f 0300 	mov.w	r3, #0
 800f2de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f2e2:	f04f 0100 	mov.w	r1, #0
 800f2e6:	f7f1 fcf7 	bl	8000cd8 <__aeabi_uldivmod>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	4610      	mov	r0, r2
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	f04f 0200 	mov.w	r2, #0
 800f2f6:	f04f 0300 	mov.w	r3, #0
 800f2fa:	020b      	lsls	r3, r1, #8
 800f2fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f300:	0202      	lsls	r2, r0, #8
 800f302:	68f9      	ldr	r1, [r7, #12]
 800f304:	6849      	ldr	r1, [r1, #4]
 800f306:	0849      	lsrs	r1, r1, #1
 800f308:	4608      	mov	r0, r1
 800f30a:	f04f 0100 	mov.w	r1, #0
 800f30e:	1814      	adds	r4, r2, r0
 800f310:	eb43 0501 	adc.w	r5, r3, r1
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	461a      	mov	r2, r3
 800f31a:	f04f 0300 	mov.w	r3, #0
 800f31e:	4620      	mov	r0, r4
 800f320:	4629      	mov	r1, r5
 800f322:	f7f1 fcd9 	bl	8000cd8 <__aeabi_uldivmod>
 800f326:	4602      	mov	r2, r0
 800f328:	460b      	mov	r3, r1
 800f32a:	4613      	mov	r3, r2
 800f32c:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800f32e:	e003      	b.n	800f338 <UART_SetConfig+0xb2c>
          default:
            ret = HAL_ERROR;
 800f330:	2301      	movs	r3, #1
 800f332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 800f336:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f33e:	d309      	bcc.n	800f354 <UART_SetConfig+0xb48>
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f346:	d205      	bcs.n	800f354 <UART_SetConfig+0xb48>
        {
          huart->Instance->BRR = usartdiv;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f34e:	60da      	str	r2, [r3, #12]
 800f350:	f000 bc01 	b.w	800fb56 <UART_SetConfig+0x134a>
        }
        else
        {
          ret = HAL_ERROR;
 800f354:	2301      	movs	r3, #1
 800f356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f35a:	e3fc      	b.n	800fb56 <UART_SetConfig+0x134a>
 800f35c:	00f42400 	.word	0x00f42400
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	69db      	ldr	r3, [r3, #28]
 800f364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f368:	f040 8203 	bne.w	800f772 <UART_SetConfig+0xf66>
  {
    switch (clocksource)
 800f36c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f370:	2b08      	cmp	r3, #8
 800f372:	f200 81dc 	bhi.w	800f72e <UART_SetConfig+0xf22>
 800f376:	a201      	add	r2, pc, #4	; (adr r2, 800f37c <UART_SetConfig+0xb70>)
 800f378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f37c:	0800f3a1 	.word	0x0800f3a1
 800f380:	0800f459 	.word	0x0800f459
 800f384:	0800f511 	.word	0x0800f511
 800f388:	0800f72f 	.word	0x0800f72f
 800f38c:	0800f5c3 	.word	0x0800f5c3
 800f390:	0800f72f 	.word	0x0800f72f
 800f394:	0800f72f 	.word	0x0800f72f
 800f398:	0800f72f 	.word	0x0800f72f
 800f39c:	0800f67b 	.word	0x0800f67b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3a0:	f7fb fc18 	bl	800abd4 <HAL_RCC_GetPCLK1Freq>
 800f3a4:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d044      	beq.n	800f438 <UART_SetConfig+0xc2c>
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d03e      	beq.n	800f434 <UART_SetConfig+0xc28>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ba:	2b02      	cmp	r3, #2
 800f3bc:	d038      	beq.n	800f430 <UART_SetConfig+0xc24>
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c2:	2b03      	cmp	r3, #3
 800f3c4:	d032      	beq.n	800f42c <UART_SetConfig+0xc20>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ca:	2b04      	cmp	r3, #4
 800f3cc:	d02c      	beq.n	800f428 <UART_SetConfig+0xc1c>
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d2:	2b05      	cmp	r3, #5
 800f3d4:	d026      	beq.n	800f424 <UART_SetConfig+0xc18>
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3da:	2b06      	cmp	r3, #6
 800f3dc:	d020      	beq.n	800f420 <UART_SetConfig+0xc14>
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e2:	2b07      	cmp	r3, #7
 800f3e4:	d01a      	beq.n	800f41c <UART_SetConfig+0xc10>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ea:	2b08      	cmp	r3, #8
 800f3ec:	d014      	beq.n	800f418 <UART_SetConfig+0xc0c>
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f2:	2b09      	cmp	r3, #9
 800f3f4:	d00e      	beq.n	800f414 <UART_SetConfig+0xc08>
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3fa:	2b0a      	cmp	r3, #10
 800f3fc:	d008      	beq.n	800f410 <UART_SetConfig+0xc04>
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f402:	2b0b      	cmp	r3, #11
 800f404:	d102      	bne.n	800f40c <UART_SetConfig+0xc00>
 800f406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f40a:	e016      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f40c:	2301      	movs	r3, #1
 800f40e:	e014      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f410:	2380      	movs	r3, #128	; 0x80
 800f412:	e012      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f414:	2340      	movs	r3, #64	; 0x40
 800f416:	e010      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f418:	2320      	movs	r3, #32
 800f41a:	e00e      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f41c:	2310      	movs	r3, #16
 800f41e:	e00c      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f420:	230c      	movs	r3, #12
 800f422:	e00a      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f424:	230a      	movs	r3, #10
 800f426:	e008      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f428:	2308      	movs	r3, #8
 800f42a:	e006      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f42c:	2306      	movs	r3, #6
 800f42e:	e004      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f430:	2304      	movs	r3, #4
 800f432:	e002      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f434:	2302      	movs	r3, #2
 800f436:	e000      	b.n	800f43a <UART_SetConfig+0xc2e>
 800f438:	2301      	movs	r3, #1
 800f43a:	69ba      	ldr	r2, [r7, #24]
 800f43c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f440:	005a      	lsls	r2, r3, #1
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	085b      	lsrs	r3, r3, #1
 800f448:	441a      	add	r2, r3
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f452:	b29b      	uxth	r3, r3
 800f454:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800f456:	e16e      	b.n	800f736 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f458:	f7fb fbd2 	bl	800ac00 <HAL_RCC_GetPCLK2Freq>
 800f45c:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f462:	2b00      	cmp	r3, #0
 800f464:	d044      	beq.n	800f4f0 <UART_SetConfig+0xce4>
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d03e      	beq.n	800f4ec <UART_SetConfig+0xce0>
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f472:	2b02      	cmp	r3, #2
 800f474:	d038      	beq.n	800f4e8 <UART_SetConfig+0xcdc>
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f47a:	2b03      	cmp	r3, #3
 800f47c:	d032      	beq.n	800f4e4 <UART_SetConfig+0xcd8>
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f482:	2b04      	cmp	r3, #4
 800f484:	d02c      	beq.n	800f4e0 <UART_SetConfig+0xcd4>
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f48a:	2b05      	cmp	r3, #5
 800f48c:	d026      	beq.n	800f4dc <UART_SetConfig+0xcd0>
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f492:	2b06      	cmp	r3, #6
 800f494:	d020      	beq.n	800f4d8 <UART_SetConfig+0xccc>
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f49a:	2b07      	cmp	r3, #7
 800f49c:	d01a      	beq.n	800f4d4 <UART_SetConfig+0xcc8>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a2:	2b08      	cmp	r3, #8
 800f4a4:	d014      	beq.n	800f4d0 <UART_SetConfig+0xcc4>
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4aa:	2b09      	cmp	r3, #9
 800f4ac:	d00e      	beq.n	800f4cc <UART_SetConfig+0xcc0>
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b2:	2b0a      	cmp	r3, #10
 800f4b4:	d008      	beq.n	800f4c8 <UART_SetConfig+0xcbc>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ba:	2b0b      	cmp	r3, #11
 800f4bc:	d102      	bne.n	800f4c4 <UART_SetConfig+0xcb8>
 800f4be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4c2:	e016      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	e014      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4c8:	2380      	movs	r3, #128	; 0x80
 800f4ca:	e012      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4cc:	2340      	movs	r3, #64	; 0x40
 800f4ce:	e010      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4d0:	2320      	movs	r3, #32
 800f4d2:	e00e      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4d4:	2310      	movs	r3, #16
 800f4d6:	e00c      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4d8:	230c      	movs	r3, #12
 800f4da:	e00a      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4dc:	230a      	movs	r3, #10
 800f4de:	e008      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4e0:	2308      	movs	r3, #8
 800f4e2:	e006      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4e4:	2306      	movs	r3, #6
 800f4e6:	e004      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4e8:	2304      	movs	r3, #4
 800f4ea:	e002      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4ec:	2302      	movs	r3, #2
 800f4ee:	e000      	b.n	800f4f2 <UART_SetConfig+0xce6>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	69ba      	ldr	r2, [r7, #24]
 800f4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4f8:	005a      	lsls	r2, r3, #1
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	085b      	lsrs	r3, r3, #1
 800f500:	441a      	add	r2, r3
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	fbb2 f3f3 	udiv	r3, r2, r3
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800f50e:	e112      	b.n	800f736 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f514:	2b00      	cmp	r3, #0
 800f516:	d044      	beq.n	800f5a2 <UART_SetConfig+0xd96>
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d03e      	beq.n	800f59e <UART_SetConfig+0xd92>
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f524:	2b02      	cmp	r3, #2
 800f526:	d038      	beq.n	800f59a <UART_SetConfig+0xd8e>
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f52c:	2b03      	cmp	r3, #3
 800f52e:	d032      	beq.n	800f596 <UART_SetConfig+0xd8a>
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f534:	2b04      	cmp	r3, #4
 800f536:	d02c      	beq.n	800f592 <UART_SetConfig+0xd86>
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f53c:	2b05      	cmp	r3, #5
 800f53e:	d026      	beq.n	800f58e <UART_SetConfig+0xd82>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f544:	2b06      	cmp	r3, #6
 800f546:	d020      	beq.n	800f58a <UART_SetConfig+0xd7e>
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54c:	2b07      	cmp	r3, #7
 800f54e:	d01a      	beq.n	800f586 <UART_SetConfig+0xd7a>
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f554:	2b08      	cmp	r3, #8
 800f556:	d014      	beq.n	800f582 <UART_SetConfig+0xd76>
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f55c:	2b09      	cmp	r3, #9
 800f55e:	d00e      	beq.n	800f57e <UART_SetConfig+0xd72>
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f564:	2b0a      	cmp	r3, #10
 800f566:	d008      	beq.n	800f57a <UART_SetConfig+0xd6e>
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f56c:	2b0b      	cmp	r3, #11
 800f56e:	d102      	bne.n	800f576 <UART_SetConfig+0xd6a>
 800f570:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f574:	e016      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f576:	2301      	movs	r3, #1
 800f578:	e014      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f57a:	2380      	movs	r3, #128	; 0x80
 800f57c:	e012      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f57e:	2340      	movs	r3, #64	; 0x40
 800f580:	e010      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f582:	2320      	movs	r3, #32
 800f584:	e00e      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f586:	2310      	movs	r3, #16
 800f588:	e00c      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f58a:	230c      	movs	r3, #12
 800f58c:	e00a      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f58e:	230a      	movs	r3, #10
 800f590:	e008      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f592:	2308      	movs	r3, #8
 800f594:	e006      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f596:	2306      	movs	r3, #6
 800f598:	e004      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f59a:	2304      	movs	r3, #4
 800f59c:	e002      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f59e:	2302      	movs	r3, #2
 800f5a0:	e000      	b.n	800f5a4 <UART_SetConfig+0xd98>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	4aa1      	ldr	r2, [pc, #644]	; (800f82c <UART_SetConfig+0x1020>)
 800f5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5aa:	005a      	lsls	r2, r3, #1
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	085b      	lsrs	r3, r3, #1
 800f5b2:	441a      	add	r2, r3
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800f5c0:	e0b9      	b.n	800f736 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f5c2:	f7fb fa71 	bl	800aaa8 <HAL_RCC_GetSysClockFreq>
 800f5c6:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d044      	beq.n	800f65a <UART_SetConfig+0xe4e>
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d03e      	beq.n	800f656 <UART_SetConfig+0xe4a>
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5dc:	2b02      	cmp	r3, #2
 800f5de:	d038      	beq.n	800f652 <UART_SetConfig+0xe46>
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e4:	2b03      	cmp	r3, #3
 800f5e6:	d032      	beq.n	800f64e <UART_SetConfig+0xe42>
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ec:	2b04      	cmp	r3, #4
 800f5ee:	d02c      	beq.n	800f64a <UART_SetConfig+0xe3e>
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f4:	2b05      	cmp	r3, #5
 800f5f6:	d026      	beq.n	800f646 <UART_SetConfig+0xe3a>
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fc:	2b06      	cmp	r3, #6
 800f5fe:	d020      	beq.n	800f642 <UART_SetConfig+0xe36>
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f604:	2b07      	cmp	r3, #7
 800f606:	d01a      	beq.n	800f63e <UART_SetConfig+0xe32>
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60c:	2b08      	cmp	r3, #8
 800f60e:	d014      	beq.n	800f63a <UART_SetConfig+0xe2e>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f614:	2b09      	cmp	r3, #9
 800f616:	d00e      	beq.n	800f636 <UART_SetConfig+0xe2a>
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f61c:	2b0a      	cmp	r3, #10
 800f61e:	d008      	beq.n	800f632 <UART_SetConfig+0xe26>
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f624:	2b0b      	cmp	r3, #11
 800f626:	d102      	bne.n	800f62e <UART_SetConfig+0xe22>
 800f628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f62c:	e016      	b.n	800f65c <UART_SetConfig+0xe50>
 800f62e:	2301      	movs	r3, #1
 800f630:	e014      	b.n	800f65c <UART_SetConfig+0xe50>
 800f632:	2380      	movs	r3, #128	; 0x80
 800f634:	e012      	b.n	800f65c <UART_SetConfig+0xe50>
 800f636:	2340      	movs	r3, #64	; 0x40
 800f638:	e010      	b.n	800f65c <UART_SetConfig+0xe50>
 800f63a:	2320      	movs	r3, #32
 800f63c:	e00e      	b.n	800f65c <UART_SetConfig+0xe50>
 800f63e:	2310      	movs	r3, #16
 800f640:	e00c      	b.n	800f65c <UART_SetConfig+0xe50>
 800f642:	230c      	movs	r3, #12
 800f644:	e00a      	b.n	800f65c <UART_SetConfig+0xe50>
 800f646:	230a      	movs	r3, #10
 800f648:	e008      	b.n	800f65c <UART_SetConfig+0xe50>
 800f64a:	2308      	movs	r3, #8
 800f64c:	e006      	b.n	800f65c <UART_SetConfig+0xe50>
 800f64e:	2306      	movs	r3, #6
 800f650:	e004      	b.n	800f65c <UART_SetConfig+0xe50>
 800f652:	2304      	movs	r3, #4
 800f654:	e002      	b.n	800f65c <UART_SetConfig+0xe50>
 800f656:	2302      	movs	r3, #2
 800f658:	e000      	b.n	800f65c <UART_SetConfig+0xe50>
 800f65a:	2301      	movs	r3, #1
 800f65c:	69ba      	ldr	r2, [r7, #24]
 800f65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f662:	005a      	lsls	r2, r3, #1
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	085b      	lsrs	r3, r3, #1
 800f66a:	441a      	add	r2, r3
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	fbb2 f3f3 	udiv	r3, r2, r3
 800f674:	b29b      	uxth	r3, r3
 800f676:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800f678:	e05d      	b.n	800f736 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d044      	beq.n	800f70c <UART_SetConfig+0xf00>
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f686:	2b01      	cmp	r3, #1
 800f688:	d03e      	beq.n	800f708 <UART_SetConfig+0xefc>
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f68e:	2b02      	cmp	r3, #2
 800f690:	d038      	beq.n	800f704 <UART_SetConfig+0xef8>
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f696:	2b03      	cmp	r3, #3
 800f698:	d032      	beq.n	800f700 <UART_SetConfig+0xef4>
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f69e:	2b04      	cmp	r3, #4
 800f6a0:	d02c      	beq.n	800f6fc <UART_SetConfig+0xef0>
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a6:	2b05      	cmp	r3, #5
 800f6a8:	d026      	beq.n	800f6f8 <UART_SetConfig+0xeec>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ae:	2b06      	cmp	r3, #6
 800f6b0:	d020      	beq.n	800f6f4 <UART_SetConfig+0xee8>
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b6:	2b07      	cmp	r3, #7
 800f6b8:	d01a      	beq.n	800f6f0 <UART_SetConfig+0xee4>
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6be:	2b08      	cmp	r3, #8
 800f6c0:	d014      	beq.n	800f6ec <UART_SetConfig+0xee0>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c6:	2b09      	cmp	r3, #9
 800f6c8:	d00e      	beq.n	800f6e8 <UART_SetConfig+0xedc>
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ce:	2b0a      	cmp	r3, #10
 800f6d0:	d008      	beq.n	800f6e4 <UART_SetConfig+0xed8>
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d6:	2b0b      	cmp	r3, #11
 800f6d8:	d102      	bne.n	800f6e0 <UART_SetConfig+0xed4>
 800f6da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6de:	e016      	b.n	800f70e <UART_SetConfig+0xf02>
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	e014      	b.n	800f70e <UART_SetConfig+0xf02>
 800f6e4:	2380      	movs	r3, #128	; 0x80
 800f6e6:	e012      	b.n	800f70e <UART_SetConfig+0xf02>
 800f6e8:	2340      	movs	r3, #64	; 0x40
 800f6ea:	e010      	b.n	800f70e <UART_SetConfig+0xf02>
 800f6ec:	2320      	movs	r3, #32
 800f6ee:	e00e      	b.n	800f70e <UART_SetConfig+0xf02>
 800f6f0:	2310      	movs	r3, #16
 800f6f2:	e00c      	b.n	800f70e <UART_SetConfig+0xf02>
 800f6f4:	230c      	movs	r3, #12
 800f6f6:	e00a      	b.n	800f70e <UART_SetConfig+0xf02>
 800f6f8:	230a      	movs	r3, #10
 800f6fa:	e008      	b.n	800f70e <UART_SetConfig+0xf02>
 800f6fc:	2308      	movs	r3, #8
 800f6fe:	e006      	b.n	800f70e <UART_SetConfig+0xf02>
 800f700:	2306      	movs	r3, #6
 800f702:	e004      	b.n	800f70e <UART_SetConfig+0xf02>
 800f704:	2304      	movs	r3, #4
 800f706:	e002      	b.n	800f70e <UART_SetConfig+0xf02>
 800f708:	2302      	movs	r3, #2
 800f70a:	e000      	b.n	800f70e <UART_SetConfig+0xf02>
 800f70c:	2301      	movs	r3, #1
 800f70e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f712:	fbb2 f3f3 	udiv	r3, r2, r3
 800f716:	005a      	lsls	r2, r3, #1
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	085b      	lsrs	r3, r3, #1
 800f71e:	441a      	add	r2, r3
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	fbb2 f3f3 	udiv	r3, r2, r3
 800f728:	b29b      	uxth	r3, r3
 800f72a:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800f72c:	e003      	b.n	800f736 <UART_SetConfig+0xf2a>
      default:
        ret = HAL_ERROR;
 800f72e:	2301      	movs	r3, #1
 800f730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800f734:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f738:	2b0f      	cmp	r3, #15
 800f73a:	d916      	bls.n	800f76a <UART_SetConfig+0xf5e>
 800f73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f742:	d212      	bcs.n	800f76a <UART_SetConfig+0xf5e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	b29b      	uxth	r3, r3
 800f748:	f023 030f 	bic.w	r3, r3, #15
 800f74c:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f750:	085b      	lsrs	r3, r3, #1
 800f752:	b29b      	uxth	r3, r3
 800f754:	f003 0307 	and.w	r3, r3, #7
 800f758:	b29a      	uxth	r2, r3
 800f75a:	8afb      	ldrh	r3, [r7, #22]
 800f75c:	4313      	orrs	r3, r2
 800f75e:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	8afa      	ldrh	r2, [r7, #22]
 800f766:	60da      	str	r2, [r3, #12]
 800f768:	e1f5      	b.n	800fb56 <UART_SetConfig+0x134a>
    }
    else
    {
      ret = HAL_ERROR;
 800f76a:	2301      	movs	r3, #1
 800f76c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f770:	e1f1      	b.n	800fb56 <UART_SetConfig+0x134a>
    }
  }
  else
  {
    switch (clocksource)
 800f772:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f776:	2b08      	cmp	r3, #8
 800f778:	f200 81da 	bhi.w	800fb30 <UART_SetConfig+0x1324>
 800f77c:	a201      	add	r2, pc, #4	; (adr r2, 800f784 <UART_SetConfig+0xf78>)
 800f77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f782:	bf00      	nop
 800f784:	0800f7a9 	.word	0x0800f7a9
 800f788:	0800f863 	.word	0x0800f863
 800f78c:	0800f919 	.word	0x0800f919
 800f790:	0800fb31 	.word	0x0800fb31
 800f794:	0800f9c9 	.word	0x0800f9c9
 800f798:	0800fb31 	.word	0x0800fb31
 800f79c:	0800fb31 	.word	0x0800fb31
 800f7a0:	0800fb31 	.word	0x0800fb31
 800f7a4:	0800fa7f 	.word	0x0800fa7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7a8:	f7fb fa14 	bl	800abd4 <HAL_RCC_GetPCLK1Freq>
 800f7ac:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d046      	beq.n	800f844 <UART_SetConfig+0x1038>
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ba:	2b01      	cmp	r3, #1
 800f7bc:	d040      	beq.n	800f840 <UART_SetConfig+0x1034>
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c2:	2b02      	cmp	r3, #2
 800f7c4:	d03a      	beq.n	800f83c <UART_SetConfig+0x1030>
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ca:	2b03      	cmp	r3, #3
 800f7cc:	d034      	beq.n	800f838 <UART_SetConfig+0x102c>
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d2:	2b04      	cmp	r3, #4
 800f7d4:	d02e      	beq.n	800f834 <UART_SetConfig+0x1028>
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7da:	2b05      	cmp	r3, #5
 800f7dc:	d028      	beq.n	800f830 <UART_SetConfig+0x1024>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e2:	2b06      	cmp	r3, #6
 800f7e4:	d020      	beq.n	800f828 <UART_SetConfig+0x101c>
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ea:	2b07      	cmp	r3, #7
 800f7ec:	d01a      	beq.n	800f824 <UART_SetConfig+0x1018>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f2:	2b08      	cmp	r3, #8
 800f7f4:	d014      	beq.n	800f820 <UART_SetConfig+0x1014>
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7fa:	2b09      	cmp	r3, #9
 800f7fc:	d00e      	beq.n	800f81c <UART_SetConfig+0x1010>
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f802:	2b0a      	cmp	r3, #10
 800f804:	d008      	beq.n	800f818 <UART_SetConfig+0x100c>
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f80a:	2b0b      	cmp	r3, #11
 800f80c:	d102      	bne.n	800f814 <UART_SetConfig+0x1008>
 800f80e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f812:	e018      	b.n	800f846 <UART_SetConfig+0x103a>
 800f814:	2301      	movs	r3, #1
 800f816:	e016      	b.n	800f846 <UART_SetConfig+0x103a>
 800f818:	2380      	movs	r3, #128	; 0x80
 800f81a:	e014      	b.n	800f846 <UART_SetConfig+0x103a>
 800f81c:	2340      	movs	r3, #64	; 0x40
 800f81e:	e012      	b.n	800f846 <UART_SetConfig+0x103a>
 800f820:	2320      	movs	r3, #32
 800f822:	e010      	b.n	800f846 <UART_SetConfig+0x103a>
 800f824:	2310      	movs	r3, #16
 800f826:	e00e      	b.n	800f846 <UART_SetConfig+0x103a>
 800f828:	230c      	movs	r3, #12
 800f82a:	e00c      	b.n	800f846 <UART_SetConfig+0x103a>
 800f82c:	00f42400 	.word	0x00f42400
 800f830:	230a      	movs	r3, #10
 800f832:	e008      	b.n	800f846 <UART_SetConfig+0x103a>
 800f834:	2308      	movs	r3, #8
 800f836:	e006      	b.n	800f846 <UART_SetConfig+0x103a>
 800f838:	2306      	movs	r3, #6
 800f83a:	e004      	b.n	800f846 <UART_SetConfig+0x103a>
 800f83c:	2304      	movs	r3, #4
 800f83e:	e002      	b.n	800f846 <UART_SetConfig+0x103a>
 800f840:	2302      	movs	r3, #2
 800f842:	e000      	b.n	800f846 <UART_SetConfig+0x103a>
 800f844:	2301      	movs	r3, #1
 800f846:	69ba      	ldr	r2, [r7, #24]
 800f848:	fbb2 f2f3 	udiv	r2, r2, r3
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	085b      	lsrs	r3, r3, #1
 800f852:	441a      	add	r2, r3
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	fbb2 f3f3 	udiv	r3, r2, r3
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800f860:	e16a      	b.n	800fb38 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f862:	f7fb f9cd 	bl	800ac00 <HAL_RCC_GetPCLK2Freq>
 800f866:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d044      	beq.n	800f8fa <UART_SetConfig+0x10ee>
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f874:	2b01      	cmp	r3, #1
 800f876:	d03e      	beq.n	800f8f6 <UART_SetConfig+0x10ea>
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f87c:	2b02      	cmp	r3, #2
 800f87e:	d038      	beq.n	800f8f2 <UART_SetConfig+0x10e6>
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f884:	2b03      	cmp	r3, #3
 800f886:	d032      	beq.n	800f8ee <UART_SetConfig+0x10e2>
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88c:	2b04      	cmp	r3, #4
 800f88e:	d02c      	beq.n	800f8ea <UART_SetConfig+0x10de>
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f894:	2b05      	cmp	r3, #5
 800f896:	d026      	beq.n	800f8e6 <UART_SetConfig+0x10da>
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89c:	2b06      	cmp	r3, #6
 800f89e:	d020      	beq.n	800f8e2 <UART_SetConfig+0x10d6>
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a4:	2b07      	cmp	r3, #7
 800f8a6:	d01a      	beq.n	800f8de <UART_SetConfig+0x10d2>
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ac:	2b08      	cmp	r3, #8
 800f8ae:	d014      	beq.n	800f8da <UART_SetConfig+0x10ce>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b4:	2b09      	cmp	r3, #9
 800f8b6:	d00e      	beq.n	800f8d6 <UART_SetConfig+0x10ca>
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8bc:	2b0a      	cmp	r3, #10
 800f8be:	d008      	beq.n	800f8d2 <UART_SetConfig+0x10c6>
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c4:	2b0b      	cmp	r3, #11
 800f8c6:	d102      	bne.n	800f8ce <UART_SetConfig+0x10c2>
 800f8c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f8cc:	e016      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e014      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8d2:	2380      	movs	r3, #128	; 0x80
 800f8d4:	e012      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8d6:	2340      	movs	r3, #64	; 0x40
 800f8d8:	e010      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8da:	2320      	movs	r3, #32
 800f8dc:	e00e      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8de:	2310      	movs	r3, #16
 800f8e0:	e00c      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8e2:	230c      	movs	r3, #12
 800f8e4:	e00a      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8e6:	230a      	movs	r3, #10
 800f8e8:	e008      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8ea:	2308      	movs	r3, #8
 800f8ec:	e006      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8ee:	2306      	movs	r3, #6
 800f8f0:	e004      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8f2:	2304      	movs	r3, #4
 800f8f4:	e002      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8f6:	2302      	movs	r3, #2
 800f8f8:	e000      	b.n	800f8fc <UART_SetConfig+0x10f0>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	69ba      	ldr	r2, [r7, #24]
 800f8fe:	fbb2 f2f3 	udiv	r2, r2, r3
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	085b      	lsrs	r3, r3, #1
 800f908:	441a      	add	r2, r3
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f912:	b29b      	uxth	r3, r3
 800f914:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800f916:	e10f      	b.n	800fb38 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d044      	beq.n	800f9aa <UART_SetConfig+0x119e>
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f924:	2b01      	cmp	r3, #1
 800f926:	d03e      	beq.n	800f9a6 <UART_SetConfig+0x119a>
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92c:	2b02      	cmp	r3, #2
 800f92e:	d038      	beq.n	800f9a2 <UART_SetConfig+0x1196>
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f934:	2b03      	cmp	r3, #3
 800f936:	d032      	beq.n	800f99e <UART_SetConfig+0x1192>
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93c:	2b04      	cmp	r3, #4
 800f93e:	d02c      	beq.n	800f99a <UART_SetConfig+0x118e>
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f944:	2b05      	cmp	r3, #5
 800f946:	d026      	beq.n	800f996 <UART_SetConfig+0x118a>
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94c:	2b06      	cmp	r3, #6
 800f94e:	d020      	beq.n	800f992 <UART_SetConfig+0x1186>
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f954:	2b07      	cmp	r3, #7
 800f956:	d01a      	beq.n	800f98e <UART_SetConfig+0x1182>
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95c:	2b08      	cmp	r3, #8
 800f95e:	d014      	beq.n	800f98a <UART_SetConfig+0x117e>
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f964:	2b09      	cmp	r3, #9
 800f966:	d00e      	beq.n	800f986 <UART_SetConfig+0x117a>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96c:	2b0a      	cmp	r3, #10
 800f96e:	d008      	beq.n	800f982 <UART_SetConfig+0x1176>
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f974:	2b0b      	cmp	r3, #11
 800f976:	d102      	bne.n	800f97e <UART_SetConfig+0x1172>
 800f978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f97c:	e016      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f97e:	2301      	movs	r3, #1
 800f980:	e014      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f982:	2380      	movs	r3, #128	; 0x80
 800f984:	e012      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f986:	2340      	movs	r3, #64	; 0x40
 800f988:	e010      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f98a:	2320      	movs	r3, #32
 800f98c:	e00e      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f98e:	2310      	movs	r3, #16
 800f990:	e00c      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f992:	230c      	movs	r3, #12
 800f994:	e00a      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f996:	230a      	movs	r3, #10
 800f998:	e008      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f99a:	2308      	movs	r3, #8
 800f99c:	e006      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f99e:	2306      	movs	r3, #6
 800f9a0:	e004      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f9a2:	2304      	movs	r3, #4
 800f9a4:	e002      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f9a6:	2302      	movs	r3, #2
 800f9a8:	e000      	b.n	800f9ac <UART_SetConfig+0x11a0>
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	4a74      	ldr	r2, [pc, #464]	; (800fb80 <UART_SetConfig+0x1374>)
 800f9ae:	fbb2 f2f3 	udiv	r2, r2, r3
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	085b      	lsrs	r3, r3, #1
 800f9b8:	441a      	add	r2, r3
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800f9c6:	e0b7      	b.n	800fb38 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f9c8:	f7fb f86e 	bl	800aaa8 <HAL_RCC_GetSysClockFreq>
 800f9cc:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d044      	beq.n	800fa60 <UART_SetConfig+0x1254>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d03e      	beq.n	800fa5c <UART_SetConfig+0x1250>
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e2:	2b02      	cmp	r3, #2
 800f9e4:	d038      	beq.n	800fa58 <UART_SetConfig+0x124c>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ea:	2b03      	cmp	r3, #3
 800f9ec:	d032      	beq.n	800fa54 <UART_SetConfig+0x1248>
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f2:	2b04      	cmp	r3, #4
 800f9f4:	d02c      	beq.n	800fa50 <UART_SetConfig+0x1244>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fa:	2b05      	cmp	r3, #5
 800f9fc:	d026      	beq.n	800fa4c <UART_SetConfig+0x1240>
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa02:	2b06      	cmp	r3, #6
 800fa04:	d020      	beq.n	800fa48 <UART_SetConfig+0x123c>
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa0a:	2b07      	cmp	r3, #7
 800fa0c:	d01a      	beq.n	800fa44 <UART_SetConfig+0x1238>
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa12:	2b08      	cmp	r3, #8
 800fa14:	d014      	beq.n	800fa40 <UART_SetConfig+0x1234>
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa1a:	2b09      	cmp	r3, #9
 800fa1c:	d00e      	beq.n	800fa3c <UART_SetConfig+0x1230>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa22:	2b0a      	cmp	r3, #10
 800fa24:	d008      	beq.n	800fa38 <UART_SetConfig+0x122c>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2a:	2b0b      	cmp	r3, #11
 800fa2c:	d102      	bne.n	800fa34 <UART_SetConfig+0x1228>
 800fa2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa32:	e016      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa34:	2301      	movs	r3, #1
 800fa36:	e014      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa38:	2380      	movs	r3, #128	; 0x80
 800fa3a:	e012      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa3c:	2340      	movs	r3, #64	; 0x40
 800fa3e:	e010      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa40:	2320      	movs	r3, #32
 800fa42:	e00e      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa44:	2310      	movs	r3, #16
 800fa46:	e00c      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa48:	230c      	movs	r3, #12
 800fa4a:	e00a      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa4c:	230a      	movs	r3, #10
 800fa4e:	e008      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa50:	2308      	movs	r3, #8
 800fa52:	e006      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa54:	2306      	movs	r3, #6
 800fa56:	e004      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa58:	2304      	movs	r3, #4
 800fa5a:	e002      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa5c:	2302      	movs	r3, #2
 800fa5e:	e000      	b.n	800fa62 <UART_SetConfig+0x1256>
 800fa60:	2301      	movs	r3, #1
 800fa62:	69ba      	ldr	r2, [r7, #24]
 800fa64:	fbb2 f2f3 	udiv	r2, r2, r3
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	085b      	lsrs	r3, r3, #1
 800fa6e:	441a      	add	r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa78:	b29b      	uxth	r3, r3
 800fa7a:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800fa7c:	e05c      	b.n	800fb38 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d044      	beq.n	800fb10 <UART_SetConfig+0x1304>
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d03e      	beq.n	800fb0c <UART_SetConfig+0x1300>
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa92:	2b02      	cmp	r3, #2
 800fa94:	d038      	beq.n	800fb08 <UART_SetConfig+0x12fc>
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa9a:	2b03      	cmp	r3, #3
 800fa9c:	d032      	beq.n	800fb04 <UART_SetConfig+0x12f8>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa2:	2b04      	cmp	r3, #4
 800faa4:	d02c      	beq.n	800fb00 <UART_SetConfig+0x12f4>
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faaa:	2b05      	cmp	r3, #5
 800faac:	d026      	beq.n	800fafc <UART_SetConfig+0x12f0>
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab2:	2b06      	cmp	r3, #6
 800fab4:	d020      	beq.n	800faf8 <UART_SetConfig+0x12ec>
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faba:	2b07      	cmp	r3, #7
 800fabc:	d01a      	beq.n	800faf4 <UART_SetConfig+0x12e8>
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac2:	2b08      	cmp	r3, #8
 800fac4:	d014      	beq.n	800faf0 <UART_SetConfig+0x12e4>
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faca:	2b09      	cmp	r3, #9
 800facc:	d00e      	beq.n	800faec <UART_SetConfig+0x12e0>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad2:	2b0a      	cmp	r3, #10
 800fad4:	d008      	beq.n	800fae8 <UART_SetConfig+0x12dc>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fada:	2b0b      	cmp	r3, #11
 800fadc:	d102      	bne.n	800fae4 <UART_SetConfig+0x12d8>
 800fade:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fae2:	e016      	b.n	800fb12 <UART_SetConfig+0x1306>
 800fae4:	2301      	movs	r3, #1
 800fae6:	e014      	b.n	800fb12 <UART_SetConfig+0x1306>
 800fae8:	2380      	movs	r3, #128	; 0x80
 800faea:	e012      	b.n	800fb12 <UART_SetConfig+0x1306>
 800faec:	2340      	movs	r3, #64	; 0x40
 800faee:	e010      	b.n	800fb12 <UART_SetConfig+0x1306>
 800faf0:	2320      	movs	r3, #32
 800faf2:	e00e      	b.n	800fb12 <UART_SetConfig+0x1306>
 800faf4:	2310      	movs	r3, #16
 800faf6:	e00c      	b.n	800fb12 <UART_SetConfig+0x1306>
 800faf8:	230c      	movs	r3, #12
 800fafa:	e00a      	b.n	800fb12 <UART_SetConfig+0x1306>
 800fafc:	230a      	movs	r3, #10
 800fafe:	e008      	b.n	800fb12 <UART_SetConfig+0x1306>
 800fb00:	2308      	movs	r3, #8
 800fb02:	e006      	b.n	800fb12 <UART_SetConfig+0x1306>
 800fb04:	2306      	movs	r3, #6
 800fb06:	e004      	b.n	800fb12 <UART_SetConfig+0x1306>
 800fb08:	2304      	movs	r3, #4
 800fb0a:	e002      	b.n	800fb12 <UART_SetConfig+0x1306>
 800fb0c:	2302      	movs	r3, #2
 800fb0e:	e000      	b.n	800fb12 <UART_SetConfig+0x1306>
 800fb10:	2301      	movs	r3, #1
 800fb12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800fb16:	fbb2 f2f3 	udiv	r2, r2, r3
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	085b      	lsrs	r3, r3, #1
 800fb20:	441a      	add	r2, r3
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800fb2e:	e003      	b.n	800fb38 <UART_SetConfig+0x132c>
      default:
        ret = HAL_ERROR;
 800fb30:	2301      	movs	r3, #1
 800fb32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800fb36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	2b0f      	cmp	r3, #15
 800fb3c:	d908      	bls.n	800fb50 <UART_SetConfig+0x1344>
 800fb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb44:	d204      	bcs.n	800fb50 <UART_SetConfig+0x1344>
    {
      huart->Instance->BRR = usartdiv;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb4c:	60da      	str	r2, [r3, #12]
 800fb4e:	e002      	b.n	800fb56 <UART_SetConfig+0x134a>
    }
    else
    {
      ret = HAL_ERROR;
 800fb50:	2301      	movs	r3, #1
 800fb52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2201      	movs	r2, #1
 800fb5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2201      	movs	r2, #1
 800fb62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800fb72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3730      	adds	r7, #48	; 0x30
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fb80:	00f42400 	.word	0x00f42400

0800fb84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb90:	f003 0301 	and.w	r3, r3, #1
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d00a      	beq.n	800fbae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	430a      	orrs	r2, r1
 800fbac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbb2:	f003 0302 	and.w	r3, r3, #2
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00a      	beq.n	800fbd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	430a      	orrs	r2, r1
 800fbce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbd4:	f003 0304 	and.w	r3, r3, #4
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00a      	beq.n	800fbf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	430a      	orrs	r2, r1
 800fbf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbf6:	f003 0308 	and.w	r3, r3, #8
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d00a      	beq.n	800fc14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	430a      	orrs	r2, r1
 800fc12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc18:	f003 0310 	and.w	r3, r3, #16
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00a      	beq.n	800fc36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	430a      	orrs	r2, r1
 800fc34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc3a:	f003 0320 	and.w	r3, r3, #32
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d00a      	beq.n	800fc58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	430a      	orrs	r2, r1
 800fc56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d01a      	beq.n	800fc9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	430a      	orrs	r2, r1
 800fc78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc82:	d10a      	bne.n	800fc9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	430a      	orrs	r2, r1
 800fc98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00a      	beq.n	800fcbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	430a      	orrs	r2, r1
 800fcba:	605a      	str	r2, [r3, #4]
  }
}
 800fcbc:	bf00      	nop
 800fcbe:	370c      	adds	r7, #12
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b086      	sub	sp, #24
 800fccc:	af02      	add	r7, sp, #8
 800fcce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fcd8:	f7f6 faa4 	bl	8006224 <HAL_GetTick>
 800fcdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f003 0308 	and.w	r3, r3, #8
 800fce8:	2b08      	cmp	r3, #8
 800fcea:	d10e      	bne.n	800fd0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fcec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fcf0:	9300      	str	r3, [sp, #0]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 f82c 	bl	800fd58 <UART_WaitOnFlagUntilTimeout>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d001      	beq.n	800fd0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd06:	2303      	movs	r3, #3
 800fd08:	e022      	b.n	800fd50 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f003 0304 	and.w	r3, r3, #4
 800fd14:	2b04      	cmp	r3, #4
 800fd16:	d10e      	bne.n	800fd36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd1c:	9300      	str	r3, [sp, #0]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2200      	movs	r2, #0
 800fd22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 f816 	bl	800fd58 <UART_WaitOnFlagUntilTimeout>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d001      	beq.n	800fd36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd32:	2303      	movs	r3, #3
 800fd34:	e00c      	b.n	800fd50 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2220      	movs	r2, #32
 800fd3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2220      	movs	r2, #32
 800fd42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fd4e:	2300      	movs	r3, #0
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	3710      	adds	r7, #16
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	603b      	str	r3, [r7, #0]
 800fd64:	4613      	mov	r3, r2
 800fd66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd68:	e062      	b.n	800fe30 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd70:	d05e      	beq.n	800fe30 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd72:	f7f6 fa57 	bl	8006224 <HAL_GetTick>
 800fd76:	4602      	mov	r2, r0
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	1ad3      	subs	r3, r2, r3
 800fd7c:	69ba      	ldr	r2, [r7, #24]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d302      	bcc.n	800fd88 <UART_WaitOnFlagUntilTimeout+0x30>
 800fd82:	69bb      	ldr	r3, [r7, #24]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d11d      	bne.n	800fdc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fd96:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	689a      	ldr	r2, [r3, #8]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f022 0201 	bic.w	r2, r2, #1
 800fda6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2220      	movs	r2, #32
 800fdac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2220      	movs	r2, #32
 800fdb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800fdc0:	2303      	movs	r3, #3
 800fdc2:	e045      	b.n	800fe50 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f003 0304 	and.w	r3, r3, #4
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d02e      	beq.n	800fe30 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	69db      	ldr	r3, [r3, #28]
 800fdd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fde0:	d126      	bne.n	800fe30 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fdea:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fdfa:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	689a      	ldr	r2, [r3, #8]
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f022 0201 	bic.w	r2, r2, #1
 800fe0a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2220      	movs	r2, #32
 800fe10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2220      	movs	r2, #32
 800fe18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2220      	movs	r2, #32
 800fe20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2200      	movs	r2, #0
 800fe28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800fe2c:	2303      	movs	r3, #3
 800fe2e:	e00f      	b.n	800fe50 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	69da      	ldr	r2, [r3, #28]
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	4013      	ands	r3, r2
 800fe3a:	68ba      	ldr	r2, [r7, #8]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	bf0c      	ite	eq
 800fe40:	2301      	moveq	r3, #1
 800fe42:	2300      	movne	r3, #0
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	461a      	mov	r2, r3
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d08d      	beq.n	800fd6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe4e:	2300      	movs	r3, #0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b085      	sub	sp, #20
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d101      	bne.n	800fe6e <HAL_UARTEx_DisableFifoMode+0x16>
 800fe6a:	2302      	movs	r3, #2
 800fe6c:	e027      	b.n	800febe <HAL_UARTEx_DisableFifoMode+0x66>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2201      	movs	r2, #1
 800fe72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2224      	movs	r2, #36	; 0x24
 800fe7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f022 0201 	bic.w	r2, r2, #1
 800fe94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fe9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2220      	movs	r2, #32
 800feb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800febc:	2300      	movs	r3, #0
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3714      	adds	r7, #20
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr

0800feca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800feca:	b580      	push	{r7, lr}
 800fecc:	b084      	sub	sp, #16
 800fece:	af00      	add	r7, sp, #0
 800fed0:	6078      	str	r0, [r7, #4]
 800fed2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d101      	bne.n	800fee2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fede:	2302      	movs	r3, #2
 800fee0:	e02d      	b.n	800ff3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2201      	movs	r2, #1
 800fee6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2224      	movs	r2, #36	; 0x24
 800feee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	f022 0201 	bic.w	r2, r2, #1
 800ff08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	683a      	ldr	r2, [r7, #0]
 800ff1a:	430a      	orrs	r2, r1
 800ff1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 f850 	bl	800ffc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2220      	movs	r2, #32
 800ff30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ff3c:	2300      	movs	r3, #0
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3710      	adds	r7, #16
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}

0800ff46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff46:	b580      	push	{r7, lr}
 800ff48:	b084      	sub	sp, #16
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
 800ff4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d101      	bne.n	800ff5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ff5a:	2302      	movs	r3, #2
 800ff5c:	e02d      	b.n	800ffba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2201      	movs	r2, #1
 800ff62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2224      	movs	r2, #36	; 0x24
 800ff6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f022 0201 	bic.w	r2, r2, #1
 800ff84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	683a      	ldr	r2, [r7, #0]
 800ff96:	430a      	orrs	r2, r1
 800ff98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f000 f812 	bl	800ffc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2220      	movs	r2, #32
 800ffac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ffb8:	2300      	movs	r3, #0
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
	...

0800ffc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b089      	sub	sp, #36	; 0x24
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ffcc:	4a2f      	ldr	r2, [pc, #188]	; (801008c <UARTEx_SetNbDataToProcess+0xc8>)
 800ffce:	f107 0314 	add.w	r3, r7, #20
 800ffd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffd6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ffda:	4a2d      	ldr	r2, [pc, #180]	; (8010090 <UARTEx_SetNbDataToProcess+0xcc>)
 800ffdc:	f107 030c 	add.w	r3, r7, #12
 800ffe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffe4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d108      	bne.n	8010002 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2201      	movs	r2, #1
 800fff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2201      	movs	r2, #1
 800fffc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010000:	e03d      	b.n	801007e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010002:	2308      	movs	r3, #8
 8010004:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010006:	2308      	movs	r3, #8
 8010008:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	689b      	ldr	r3, [r3, #8]
 8010010:	0e5b      	lsrs	r3, r3, #25
 8010012:	b2db      	uxtb	r3, r3
 8010014:	f003 0307 	and.w	r3, r3, #7
 8010018:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	689b      	ldr	r3, [r3, #8]
 8010020:	0f5b      	lsrs	r3, r3, #29
 8010022:	b2db      	uxtb	r3, r3
 8010024:	f003 0307 	and.w	r3, r3, #7
 8010028:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801002a:	7fbb      	ldrb	r3, [r7, #30]
 801002c:	7f3a      	ldrb	r2, [r7, #28]
 801002e:	f107 0120 	add.w	r1, r7, #32
 8010032:	440a      	add	r2, r1
 8010034:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010038:	fb02 f303 	mul.w	r3, r2, r3
 801003c:	7f3a      	ldrb	r2, [r7, #28]
 801003e:	f107 0120 	add.w	r1, r7, #32
 8010042:	440a      	add	r2, r1
 8010044:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010048:	fb93 f3f2 	sdiv	r3, r3, r2
 801004c:	b29a      	uxth	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010054:	7ffb      	ldrb	r3, [r7, #31]
 8010056:	7f7a      	ldrb	r2, [r7, #29]
 8010058:	f107 0120 	add.w	r1, r7, #32
 801005c:	440a      	add	r2, r1
 801005e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010062:	fb02 f303 	mul.w	r3, r2, r3
 8010066:	7f7a      	ldrb	r2, [r7, #29]
 8010068:	f107 0120 	add.w	r1, r7, #32
 801006c:	440a      	add	r2, r1
 801006e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010072:	fb93 f3f2 	sdiv	r3, r3, r2
 8010076:	b29a      	uxth	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801007e:	bf00      	nop
 8010080:	3724      	adds	r7, #36	; 0x24
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr
 801008a:	bf00      	nop
 801008c:	0802183c 	.word	0x0802183c
 8010090:	08021844 	.word	0x08021844

08010094 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010094:	b084      	sub	sp, #16
 8010096:	b480      	push	{r7}
 8010098:	b085      	sub	sp, #20
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
 801009e:	f107 001c 	add.w	r0, r7, #28
 80100a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80100aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80100ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80100ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80100b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80100b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80100b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80100b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80100b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80100ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	4313      	orrs	r3, r2
 80100c0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	685a      	ldr	r2, [r3, #4]
 80100c6:	4b07      	ldr	r3, [pc, #28]	; (80100e4 <SDMMC_Init+0x50>)
 80100c8:	4013      	ands	r3, r2
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	431a      	orrs	r2, r3
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80100d2:	2300      	movs	r3, #0
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3714      	adds	r7, #20
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	b004      	add	sp, #16
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	ffc02c00 	.word	0xffc02c00

080100e8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	370c      	adds	r7, #12
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr

08010102 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010102:	b480      	push	{r7}
 8010104:	b083      	sub	sp, #12
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
 801010a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010116:	2300      	movs	r3, #0
}
 8010118:	4618      	mov	r0, r3
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f043 0203 	orr.w	r2, r3, #3
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010138:	2002      	movs	r0, #2
 801013a:	f7f6 f87f 	bl	800623c <HAL_Delay>

  return HAL_OK;
 801013e:	2300      	movs	r3, #0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f003 0303 	and.w	r3, r3, #3
}
 8010158:	4618      	mov	r0, r3
 801015a:	370c      	adds	r7, #12
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	4770      	bx	lr

08010164 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010164:	b480      	push	{r7}
 8010166:	b085      	sub	sp, #20
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801016e:	2300      	movs	r3, #0
 8010170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010182:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010188:	431a      	orrs	r2, r3
                       Command->CPSM);
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801018e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010190:	68fa      	ldr	r2, [r7, #12]
 8010192:	4313      	orrs	r3, r2
 8010194:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	68da      	ldr	r2, [r3, #12]
 801019a:	4b06      	ldr	r3, [pc, #24]	; (80101b4 <SDMMC_SendCommand+0x50>)
 801019c:	4013      	ands	r3, r2
 801019e:	68fa      	ldr	r2, [r7, #12]
 80101a0:	431a      	orrs	r2, r3
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80101a6:	2300      	movs	r3, #0
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3714      	adds	r7, #20
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr
 80101b4:	fffee0c0 	.word	0xfffee0c0

080101b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	b2db      	uxtb	r3, r3
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	370c      	adds	r7, #12
 80101ca:	46bd      	mov	sp, r7
 80101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d0:	4770      	bx	lr

080101d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80101d2:	b480      	push	{r7}
 80101d4:	b085      	sub	sp, #20
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
 80101da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	3314      	adds	r3, #20
 80101e0:	461a      	mov	r2, r3
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	4413      	add	r3, r2
 80101e6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3714      	adds	r7, #20
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010202:	2300      	movs	r3, #0
 8010204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	685a      	ldr	r2, [r3, #4]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801021e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010224:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801022a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	4313      	orrs	r3, r2
 8010230:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010236:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	431a      	orrs	r2, r3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010242:	2300      	movs	r3, #0

}
 8010244:	4618      	mov	r0, r3
 8010246:	3714      	adds	r7, #20
 8010248:	46bd      	mov	sp, r7
 801024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024e:	4770      	bx	lr

08010250 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b088      	sub	sp, #32
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801025e:	2310      	movs	r3, #16
 8010260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010268:	2300      	movs	r3, #0
 801026a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801026c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010270:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010272:	f107 0308 	add.w	r3, r7, #8
 8010276:	4619      	mov	r1, r3
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f7ff ff73 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801027e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010282:	2110      	movs	r1, #16
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 faa5 	bl	80107d4 <SDMMC_GetCmdResp1>
 801028a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801028c:	69fb      	ldr	r3, [r7, #28]
}
 801028e:	4618      	mov	r0, r3
 8010290:	3720      	adds	r7, #32
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}

08010296 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b088      	sub	sp, #32
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
 801029e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80102a4:	2311      	movs	r3, #17
 80102a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102ae:	2300      	movs	r3, #0
 80102b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102b8:	f107 0308 	add.w	r3, r7, #8
 80102bc:	4619      	mov	r1, r3
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f7ff ff50 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80102c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80102c8:	2111      	movs	r1, #17
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 fa82 	bl	80107d4 <SDMMC_GetCmdResp1>
 80102d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102d2:	69fb      	ldr	r3, [r7, #28]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3720      	adds	r7, #32
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b088      	sub	sp, #32
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80102ea:	2312      	movs	r3, #18
 80102ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102f4:	2300      	movs	r3, #0
 80102f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102fe:	f107 0308 	add.w	r3, r7, #8
 8010302:	4619      	mov	r1, r3
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7ff ff2d 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801030a:	f241 3288 	movw	r2, #5000	; 0x1388
 801030e:	2112      	movs	r1, #18
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 fa5f 	bl	80107d4 <SDMMC_GetCmdResp1>
 8010316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010318:	69fb      	ldr	r3, [r7, #28]
}
 801031a:	4618      	mov	r0, r3
 801031c:	3720      	adds	r7, #32
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}

08010322 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010322:	b580      	push	{r7, lr}
 8010324:	b088      	sub	sp, #32
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
 801032a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010330:	2318      	movs	r3, #24
 8010332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801033a:	2300      	movs	r3, #0
 801033c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801033e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010344:	f107 0308 	add.w	r3, r7, #8
 8010348:	4619      	mov	r1, r3
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f7ff ff0a 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010350:	f241 3288 	movw	r2, #5000	; 0x1388
 8010354:	2118      	movs	r1, #24
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 fa3c 	bl	80107d4 <SDMMC_GetCmdResp1>
 801035c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801035e:	69fb      	ldr	r3, [r7, #28]
}
 8010360:	4618      	mov	r0, r3
 8010362:	3720      	adds	r7, #32
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010376:	2319      	movs	r3, #25
 8010378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801037a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801037e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010380:	2300      	movs	r3, #0
 8010382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010388:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801038a:	f107 0308 	add.w	r3, r7, #8
 801038e:	4619      	mov	r1, r3
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f7ff fee7 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010396:	f241 3288 	movw	r2, #5000	; 0x1388
 801039a:	2119      	movs	r1, #25
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 fa19 	bl	80107d4 <SDMMC_GetCmdResp1>
 80103a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103a4:	69fb      	ldr	r3, [r7, #28]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3720      	adds	r7, #32
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
	...

080103b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b088      	sub	sp, #32
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80103b8:	2300      	movs	r3, #0
 80103ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80103bc:	230c      	movs	r3, #12
 80103be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103c6:	2300      	movs	r3, #0
 80103c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103ce:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103e8:	f107 0308 	add.w	r3, r7, #8
 80103ec:	4619      	mov	r1, r3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f7ff feb8 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80103f4:	4a08      	ldr	r2, [pc, #32]	; (8010418 <SDMMC_CmdStopTransfer+0x68>)
 80103f6:	210c      	movs	r1, #12
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 f9eb 	bl	80107d4 <SDMMC_GetCmdResp1>
 80103fe:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 801040c:	69fb      	ldr	r3, [r7, #28]
}
 801040e:	4618      	mov	r0, r3
 8010410:	3720      	adds	r7, #32
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	05f5e100 	.word	0x05f5e100

0801041c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b08a      	sub	sp, #40	; 0x28
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801042c:	2307      	movs	r3, #7
 801042e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010434:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010436:	2300      	movs	r3, #0
 8010438:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801043a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801043e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010440:	f107 0310 	add.w	r3, r7, #16
 8010444:	4619      	mov	r1, r3
 8010446:	68f8      	ldr	r0, [r7, #12]
 8010448:	f7ff fe8c 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801044c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010450:	2107      	movs	r1, #7
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f000 f9be 	bl	80107d4 <SDMMC_GetCmdResp1>
 8010458:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801045c:	4618      	mov	r0, r3
 801045e:	3728      	adds	r7, #40	; 0x28
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b088      	sub	sp, #32
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801046c:	2300      	movs	r3, #0
 801046e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010470:	2300      	movs	r3, #0
 8010472:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010474:	2300      	movs	r3, #0
 8010476:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010478:	2300      	movs	r3, #0
 801047a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801047c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010480:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010482:	f107 0308 	add.w	r3, r7, #8
 8010486:	4619      	mov	r1, r3
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7ff fe6b 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f000 f976 	bl	8010780 <SDMMC_GetCmdError>
 8010494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010496:	69fb      	ldr	r3, [r7, #28]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3720      	adds	r7, #32
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b088      	sub	sp, #32
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80104a8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80104ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80104ae:	2308      	movs	r3, #8
 80104b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104b8:	2300      	movs	r3, #0
 80104ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104c2:	f107 0308 	add.w	r3, r7, #8
 80104c6:	4619      	mov	r1, r3
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7ff fe4b 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 fb6a 	bl	8010ba8 <SDMMC_GetCmdResp7>
 80104d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104d6:	69fb      	ldr	r3, [r7, #28]
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3720      	adds	r7, #32
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b088      	sub	sp, #32
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80104ee:	2337      	movs	r3, #55	; 0x37
 80104f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104f8:	2300      	movs	r3, #0
 80104fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010500:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010502:	f107 0308 	add.w	r3, r7, #8
 8010506:	4619      	mov	r1, r3
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f7ff fe2b 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801050e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010512:	2137      	movs	r1, #55	; 0x37
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f000 f95d 	bl	80107d4 <SDMMC_GetCmdResp1>
 801051a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801051c:	69fb      	ldr	r3, [r7, #28]
}
 801051e:	4618      	mov	r0, r3
 8010520:	3720      	adds	r7, #32
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b088      	sub	sp, #32
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
 801052e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010534:	2329      	movs	r3, #41	; 0x29
 8010536:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010538:	f44f 7380 	mov.w	r3, #256	; 0x100
 801053c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801053e:	2300      	movs	r3, #0
 8010540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010546:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010548:	f107 0308 	add.w	r3, r7, #8
 801054c:	4619      	mov	r1, r3
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f7ff fe08 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 fa75 	bl	8010a44 <SDMMC_GetCmdResp3>
 801055a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801055c:	69fb      	ldr	r3, [r7, #28]
}
 801055e:	4618      	mov	r0, r3
 8010560:	3720      	adds	r7, #32
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010566:	b580      	push	{r7, lr}
 8010568:	b088      	sub	sp, #32
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
 801056e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010574:	2306      	movs	r3, #6
 8010576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010578:	f44f 7380 	mov.w	r3, #256	; 0x100
 801057c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801057e:	2300      	movs	r3, #0
 8010580:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010586:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010588:	f107 0308 	add.w	r3, r7, #8
 801058c:	4619      	mov	r1, r3
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f7ff fde8 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010594:	f241 3288 	movw	r2, #5000	; 0x1388
 8010598:	2106      	movs	r1, #6
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 f91a 	bl	80107d4 <SDMMC_GetCmdResp1>
 80105a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105a2:	69fb      	ldr	r3, [r7, #28]
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3720      	adds	r7, #32
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b088      	sub	sp, #32
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80105b4:	2300      	movs	r3, #0
 80105b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80105b8:	2333      	movs	r3, #51	; 0x33
 80105ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105c2:	2300      	movs	r3, #0
 80105c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105cc:	f107 0308 	add.w	r3, r7, #8
 80105d0:	4619      	mov	r1, r3
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f7ff fdc6 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80105d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80105dc:	2133      	movs	r1, #51	; 0x33
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f000 f8f8 	bl	80107d4 <SDMMC_GetCmdResp1>
 80105e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105e6:	69fb      	ldr	r3, [r7, #28]
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3720      	adds	r7, #32
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b088      	sub	sp, #32
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80105f8:	2300      	movs	r3, #0
 80105fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80105fc:	2302      	movs	r3, #2
 80105fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010600:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010606:	2300      	movs	r3, #0
 8010608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801060e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010610:	f107 0308 	add.w	r3, r7, #8
 8010614:	4619      	mov	r1, r3
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7ff fda4 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f000 f9c9 	bl	80109b4 <SDMMC_GetCmdResp2>
 8010622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010624:	69fb      	ldr	r3, [r7, #28]
}
 8010626:	4618      	mov	r0, r3
 8010628:	3720      	adds	r7, #32
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}

0801062e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801062e:	b580      	push	{r7, lr}
 8010630:	b088      	sub	sp, #32
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801063c:	2309      	movs	r3, #9
 801063e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010640:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010646:	2300      	movs	r3, #0
 8010648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801064e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010650:	f107 0308 	add.w	r3, r7, #8
 8010654:	4619      	mov	r1, r3
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f7ff fd84 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 f9a9 	bl	80109b4 <SDMMC_GetCmdResp2>
 8010662:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010664:	69fb      	ldr	r3, [r7, #28]
}
 8010666:	4618      	mov	r0, r3
 8010668:	3720      	adds	r7, #32
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b088      	sub	sp, #32
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010678:	2300      	movs	r3, #0
 801067a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801067c:	2303      	movs	r3, #3
 801067e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010686:	2300      	movs	r3, #0
 8010688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801068e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010690:	f107 0308 	add.w	r3, r7, #8
 8010694:	4619      	mov	r1, r3
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f7ff fd64 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801069c:	683a      	ldr	r2, [r7, #0]
 801069e:	2103      	movs	r1, #3
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f000 fa0b 	bl	8010abc <SDMMC_GetCmdResp6>
 80106a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106a8:	69fb      	ldr	r3, [r7, #28]
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3720      	adds	r7, #32
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b088      	sub	sp, #32
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
 80106ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80106c0:	230d      	movs	r3, #13
 80106c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80106c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106ca:	2300      	movs	r3, #0
 80106cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106d4:	f107 0308 	add.w	r3, r7, #8
 80106d8:	4619      	mov	r1, r3
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7ff fd42 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80106e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80106e4:	210d      	movs	r1, #13
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f000 f874 	bl	80107d4 <SDMMC_GetCmdResp1>
 80106ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106ee:	69fb      	ldr	r3, [r7, #28]
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3720      	adds	r7, #32
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b088      	sub	sp, #32
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010700:	2300      	movs	r3, #0
 8010702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010704:	230d      	movs	r3, #13
 8010706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010708:	f44f 7380 	mov.w	r3, #256	; 0x100
 801070c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801070e:	2300      	movs	r3, #0
 8010710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010716:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010718:	f107 0308 	add.w	r3, r7, #8
 801071c:	4619      	mov	r1, r3
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f7ff fd20 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010724:	f241 3288 	movw	r2, #5000	; 0x1388
 8010728:	210d      	movs	r1, #13
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 f852 	bl	80107d4 <SDMMC_GetCmdResp1>
 8010730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010732:	69fb      	ldr	r3, [r7, #28]
}
 8010734:	4618      	mov	r0, r3
 8010736:	3720      	adds	r7, #32
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}

0801073c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b088      	sub	sp, #32
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8010744:	2300      	movs	r3, #0
 8010746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8010748:	230b      	movs	r3, #11
 801074a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801074c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010752:	2300      	movs	r3, #0
 8010754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801075a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801075c:	f107 0308 	add.w	r3, r7, #8
 8010760:	4619      	mov	r1, r3
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f7ff fcfe 	bl	8010164 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8010768:	f241 3288 	movw	r2, #5000	; 0x1388
 801076c:	210b      	movs	r1, #11
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 f830 	bl	80107d4 <SDMMC_GetCmdResp1>
 8010774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010776:	69fb      	ldr	r3, [r7, #28]
}
 8010778:	4618      	mov	r0, r3
 801077a:	3720      	adds	r7, #32
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010780:	b490      	push	{r4, r7}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010788:	4b0f      	ldr	r3, [pc, #60]	; (80107c8 <SDMMC_GetCmdError+0x48>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4a0f      	ldr	r2, [pc, #60]	; (80107cc <SDMMC_GetCmdError+0x4c>)
 801078e:	fba2 2303 	umull	r2, r3, r2, r3
 8010792:	0a5b      	lsrs	r3, r3, #9
 8010794:	f241 3288 	movw	r2, #5000	; 0x1388
 8010798:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 801079c:	4623      	mov	r3, r4
 801079e:	1e5c      	subs	r4, r3, #1
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d102      	bne.n	80107aa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107a8:	e009      	b.n	80107be <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d0f2      	beq.n	801079c <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4a05      	ldr	r2, [pc, #20]	; (80107d0 <SDMMC_GetCmdError+0x50>)
 80107ba:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80107bc:	2300      	movs	r3, #0
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bc90      	pop	{r4, r7}
 80107c6:	4770      	bx	lr
 80107c8:	20000038 	.word	0x20000038
 80107cc:	10624dd3 	.word	0x10624dd3
 80107d0:	002000c5 	.word	0x002000c5

080107d4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107d4:	b590      	push	{r4, r7, lr}
 80107d6:	b087      	sub	sp, #28
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	460b      	mov	r3, r1
 80107de:	607a      	str	r2, [r7, #4]
 80107e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80107e2:	4b6f      	ldr	r3, [pc, #444]	; (80109a0 <SDMMC_GetCmdResp1+0x1cc>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	4a6f      	ldr	r2, [pc, #444]	; (80109a4 <SDMMC_GetCmdResp1+0x1d0>)
 80107e8:	fba2 2303 	umull	r2, r3, r2, r3
 80107ec:	0a5b      	lsrs	r3, r3, #9
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80107f4:	4623      	mov	r3, r4
 80107f6:	1e5c      	subs	r4, r3, #1
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d102      	bne.n	8010802 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010800:	e0c9      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010806:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010808:	697a      	ldr	r2, [r7, #20]
 801080a:	4b67      	ldr	r3, [pc, #412]	; (80109a8 <SDMMC_GetCmdResp1+0x1d4>)
 801080c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801080e:	2b00      	cmp	r3, #0
 8010810:	d0f0      	beq.n	80107f4 <SDMMC_GetCmdResp1+0x20>
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010818:	2b00      	cmp	r3, #0
 801081a:	d1eb      	bne.n	80107f4 <SDMMC_GetCmdResp1+0x20>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010820:	f003 0304 	and.w	r3, r3, #4
 8010824:	2b00      	cmp	r3, #0
 8010826:	d004      	beq.n	8010832 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2204      	movs	r2, #4
 801082c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801082e:	2304      	movs	r3, #4
 8010830:	e0b1      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010836:	f003 0301 	and.w	r3, r3, #1
 801083a:	2b00      	cmp	r3, #0
 801083c:	d004      	beq.n	8010848 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2201      	movs	r2, #1
 8010842:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010844:	2301      	movs	r3, #1
 8010846:	e0a6      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	4a58      	ldr	r2, [pc, #352]	; (80109ac <SDMMC_GetCmdResp1+0x1d8>)
 801084c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	f7ff fcb2 	bl	80101b8 <SDMMC_GetCommandResponse>
 8010854:	4603      	mov	r3, r0
 8010856:	461a      	mov	r2, r3
 8010858:	7afb      	ldrb	r3, [r7, #11]
 801085a:	4293      	cmp	r3, r2
 801085c:	d001      	beq.n	8010862 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801085e:	2301      	movs	r3, #1
 8010860:	e099      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010862:	2100      	movs	r1, #0
 8010864:	68f8      	ldr	r0, [r7, #12]
 8010866:	f7ff fcb4 	bl	80101d2 <SDMMC_GetResponse>
 801086a:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801086c:	693a      	ldr	r2, [r7, #16]
 801086e:	4b50      	ldr	r3, [pc, #320]	; (80109b0 <SDMMC_GetCmdResp1+0x1dc>)
 8010870:	4013      	ands	r3, r2
 8010872:	2b00      	cmp	r3, #0
 8010874:	d101      	bne.n	801087a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010876:	2300      	movs	r3, #0
 8010878:	e08d      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	2b00      	cmp	r3, #0
 801087e:	da02      	bge.n	8010886 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010884:	e087      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801088c:	2b00      	cmp	r3, #0
 801088e:	d001      	beq.n	8010894 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010890:	2340      	movs	r3, #64	; 0x40
 8010892:	e080      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801089a:	2b00      	cmp	r3, #0
 801089c:	d001      	beq.n	80108a2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801089e:	2380      	movs	r3, #128	; 0x80
 80108a0:	e079      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d002      	beq.n	80108b2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80108ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108b0:	e071      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d002      	beq.n	80108c2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80108bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108c0:	e069      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d002      	beq.n	80108d2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80108cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108d0:	e061      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80108dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108e0:	e059      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d002      	beq.n	80108f2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108f0:	e051      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d002      	beq.n	8010902 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80108fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010900:	e049      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801090c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010910:	e041      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 801091c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010920:	e039      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801092c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010930:	e031      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010938:	2b00      	cmp	r3, #0
 801093a:	d002      	beq.n	8010942 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801093c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010940:	e029      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801094c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010950:	e021      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801095c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010960:	e019      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010968:	2b00      	cmp	r3, #0
 801096a:	d002      	beq.n	8010972 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801096c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010970:	e011      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010978:	2b00      	cmp	r3, #0
 801097a:	d002      	beq.n	8010982 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801097c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010980:	e009      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	f003 0308 	and.w	r3, r3, #8
 8010988:	2b00      	cmp	r3, #0
 801098a:	d002      	beq.n	8010992 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801098c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010990:	e001      	b.n	8010996 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010996:	4618      	mov	r0, r3
 8010998:	371c      	adds	r7, #28
 801099a:	46bd      	mov	sp, r7
 801099c:	bd90      	pop	{r4, r7, pc}
 801099e:	bf00      	nop
 80109a0:	20000038 	.word	0x20000038
 80109a4:	10624dd3 	.word	0x10624dd3
 80109a8:	00200045 	.word	0x00200045
 80109ac:	002000c5 	.word	0x002000c5
 80109b0:	fdffe008 	.word	0xfdffe008

080109b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80109b4:	b490      	push	{r4, r7}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80109bc:	4b1e      	ldr	r3, [pc, #120]	; (8010a38 <SDMMC_GetCmdResp2+0x84>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4a1e      	ldr	r2, [pc, #120]	; (8010a3c <SDMMC_GetCmdResp2+0x88>)
 80109c2:	fba2 2303 	umull	r2, r3, r2, r3
 80109c6:	0a5b      	lsrs	r3, r3, #9
 80109c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80109cc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80109d0:	4623      	mov	r3, r4
 80109d2:	1e5c      	subs	r4, r3, #1
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d102      	bne.n	80109de <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109dc:	e026      	b.n	8010a2c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109e2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d0f0      	beq.n	80109d0 <SDMMC_GetCmdResp2+0x1c>
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1eb      	bne.n	80109d0 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109fc:	f003 0304 	and.w	r3, r3, #4
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d004      	beq.n	8010a0e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2204      	movs	r2, #4
 8010a08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a0a:	2304      	movs	r3, #4
 8010a0c:	e00e      	b.n	8010a2c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a12:	f003 0301 	and.w	r3, r3, #1
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d004      	beq.n	8010a24 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a20:	2301      	movs	r3, #1
 8010a22:	e003      	b.n	8010a2c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4a06      	ldr	r2, [pc, #24]	; (8010a40 <SDMMC_GetCmdResp2+0x8c>)
 8010a28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3710      	adds	r7, #16
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bc90      	pop	{r4, r7}
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop
 8010a38:	20000038 	.word	0x20000038
 8010a3c:	10624dd3 	.word	0x10624dd3
 8010a40:	002000c5 	.word	0x002000c5

08010a44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010a44:	b490      	push	{r4, r7}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a4c:	4b18      	ldr	r3, [pc, #96]	; (8010ab0 <SDMMC_GetCmdResp3+0x6c>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a18      	ldr	r2, [pc, #96]	; (8010ab4 <SDMMC_GetCmdResp3+0x70>)
 8010a52:	fba2 2303 	umull	r2, r3, r2, r3
 8010a56:	0a5b      	lsrs	r3, r3, #9
 8010a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a5c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010a60:	4623      	mov	r3, r4
 8010a62:	1e5c      	subs	r4, r3, #1
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d102      	bne.n	8010a6e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a6c:	e01b      	b.n	8010aa6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a72:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d0f0      	beq.n	8010a60 <SDMMC_GetCmdResp3+0x1c>
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1eb      	bne.n	8010a60 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a8c:	f003 0304 	and.w	r3, r3, #4
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d004      	beq.n	8010a9e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2204      	movs	r2, #4
 8010a98:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a9a:	2304      	movs	r3, #4
 8010a9c:	e003      	b.n	8010aa6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4a05      	ldr	r2, [pc, #20]	; (8010ab8 <SDMMC_GetCmdResp3+0x74>)
 8010aa2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010aa4:	2300      	movs	r3, #0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bc90      	pop	{r4, r7}
 8010aae:	4770      	bx	lr
 8010ab0:	20000038 	.word	0x20000038
 8010ab4:	10624dd3 	.word	0x10624dd3
 8010ab8:	002000c5 	.word	0x002000c5

08010abc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010abc:	b590      	push	{r4, r7, lr}
 8010abe:	b087      	sub	sp, #28
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	60f8      	str	r0, [r7, #12]
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	607a      	str	r2, [r7, #4]
 8010ac8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010aca:	4b34      	ldr	r3, [pc, #208]	; (8010b9c <SDMMC_GetCmdResp6+0xe0>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	4a34      	ldr	r2, [pc, #208]	; (8010ba0 <SDMMC_GetCmdResp6+0xe4>)
 8010ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8010ad4:	0a5b      	lsrs	r3, r3, #9
 8010ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ada:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010ade:	4623      	mov	r3, r4
 8010ae0:	1e5c      	subs	r4, r3, #1
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d102      	bne.n	8010aec <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ae6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010aea:	e052      	b.n	8010b92 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010af0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d0f0      	beq.n	8010ade <SDMMC_GetCmdResp6+0x22>
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d1eb      	bne.n	8010ade <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b0a:	f003 0304 	and.w	r3, r3, #4
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d004      	beq.n	8010b1c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	2204      	movs	r2, #4
 8010b16:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b18:	2304      	movs	r3, #4
 8010b1a:	e03a      	b.n	8010b92 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b20:	f003 0301 	and.w	r3, r3, #1
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d004      	beq.n	8010b32 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e02f      	b.n	8010b92 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f7ff fb40 	bl	80101b8 <SDMMC_GetCommandResponse>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	7afb      	ldrb	r3, [r7, #11]
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d001      	beq.n	8010b46 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b42:	2301      	movs	r3, #1
 8010b44:	e025      	b.n	8010b92 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	4a16      	ldr	r2, [pc, #88]	; (8010ba4 <SDMMC_GetCmdResp6+0xe8>)
 8010b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010b4c:	2100      	movs	r1, #0
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f7ff fb3f 	bl	80101d2 <SDMMC_GetResponse>
 8010b54:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d106      	bne.n	8010b6e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	0c1b      	lsrs	r3, r3, #16
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	e011      	b.n	8010b92 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d002      	beq.n	8010b7e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b7c:	e009      	b.n	8010b92 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d002      	beq.n	8010b8e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b8c:	e001      	b.n	8010b92 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	371c      	adds	r7, #28
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd90      	pop	{r4, r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	20000038 	.word	0x20000038
 8010ba0:	10624dd3 	.word	0x10624dd3
 8010ba4:	002000c5 	.word	0x002000c5

08010ba8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010ba8:	b490      	push	{r4, r7}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010bb0:	4b21      	ldr	r3, [pc, #132]	; (8010c38 <SDMMC_GetCmdResp7+0x90>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4a21      	ldr	r2, [pc, #132]	; (8010c3c <SDMMC_GetCmdResp7+0x94>)
 8010bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8010bba:	0a5b      	lsrs	r3, r3, #9
 8010bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bc0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010bc4:	4623      	mov	r3, r4
 8010bc6:	1e5c      	subs	r4, r3, #1
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d102      	bne.n	8010bd2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bd0:	e02c      	b.n	8010c2c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bd6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d0f0      	beq.n	8010bc4 <SDMMC_GetCmdResp7+0x1c>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d1eb      	bne.n	8010bc4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bf0:	f003 0304 	and.w	r3, r3, #4
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d004      	beq.n	8010c02 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2204      	movs	r2, #4
 8010bfc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bfe:	2304      	movs	r3, #4
 8010c00:	e014      	b.n	8010c2c <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c06:	f003 0301 	and.w	r3, r3, #1
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d004      	beq.n	8010c18 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2201      	movs	r2, #1
 8010c12:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c14:	2301      	movs	r3, #1
 8010c16:	e009      	b.n	8010c2c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d002      	beq.n	8010c2a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2240      	movs	r2, #64	; 0x40
 8010c28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c2a:	2300      	movs	r3, #0

}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3710      	adds	r7, #16
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bc90      	pop	{r4, r7}
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop
 8010c38:	20000038 	.word	0x20000038
 8010c3c:	10624dd3 	.word	0x10624dd3

08010c40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b087      	sub	sp, #28
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	4613      	mov	r3, r2
 8010c4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c4e:	79fb      	ldrb	r3, [r7, #7]
 8010c50:	2b02      	cmp	r3, #2
 8010c52:	d165      	bne.n	8010d20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	4a3e      	ldr	r2, [pc, #248]	; (8010d50 <USB_SetTurnaroundTime+0x110>)
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d906      	bls.n	8010c6a <USB_SetTurnaroundTime+0x2a>
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	4a3d      	ldr	r2, [pc, #244]	; (8010d54 <USB_SetTurnaroundTime+0x114>)
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d202      	bcs.n	8010c6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c64:	230f      	movs	r3, #15
 8010c66:	617b      	str	r3, [r7, #20]
 8010c68:	e05c      	b.n	8010d24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	4a39      	ldr	r2, [pc, #228]	; (8010d54 <USB_SetTurnaroundTime+0x114>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d306      	bcc.n	8010c80 <USB_SetTurnaroundTime+0x40>
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	4a38      	ldr	r2, [pc, #224]	; (8010d58 <USB_SetTurnaroundTime+0x118>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	d202      	bcs.n	8010c80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010c7a:	230e      	movs	r3, #14
 8010c7c:	617b      	str	r3, [r7, #20]
 8010c7e:	e051      	b.n	8010d24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	4a35      	ldr	r2, [pc, #212]	; (8010d58 <USB_SetTurnaroundTime+0x118>)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d306      	bcc.n	8010c96 <USB_SetTurnaroundTime+0x56>
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	4a34      	ldr	r2, [pc, #208]	; (8010d5c <USB_SetTurnaroundTime+0x11c>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d202      	bcs.n	8010c96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010c90:	230d      	movs	r3, #13
 8010c92:	617b      	str	r3, [r7, #20]
 8010c94:	e046      	b.n	8010d24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	4a30      	ldr	r2, [pc, #192]	; (8010d5c <USB_SetTurnaroundTime+0x11c>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	d306      	bcc.n	8010cac <USB_SetTurnaroundTime+0x6c>
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	4a2f      	ldr	r2, [pc, #188]	; (8010d60 <USB_SetTurnaroundTime+0x120>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d802      	bhi.n	8010cac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010ca6:	230c      	movs	r3, #12
 8010ca8:	617b      	str	r3, [r7, #20]
 8010caa:	e03b      	b.n	8010d24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	4a2c      	ldr	r2, [pc, #176]	; (8010d60 <USB_SetTurnaroundTime+0x120>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d906      	bls.n	8010cc2 <USB_SetTurnaroundTime+0x82>
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	4a2b      	ldr	r2, [pc, #172]	; (8010d64 <USB_SetTurnaroundTime+0x124>)
 8010cb8:	4293      	cmp	r3, r2
 8010cba:	d802      	bhi.n	8010cc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010cbc:	230b      	movs	r3, #11
 8010cbe:	617b      	str	r3, [r7, #20]
 8010cc0:	e030      	b.n	8010d24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	4a27      	ldr	r2, [pc, #156]	; (8010d64 <USB_SetTurnaroundTime+0x124>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d906      	bls.n	8010cd8 <USB_SetTurnaroundTime+0x98>
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	4a26      	ldr	r2, [pc, #152]	; (8010d68 <USB_SetTurnaroundTime+0x128>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d802      	bhi.n	8010cd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010cd2:	230a      	movs	r3, #10
 8010cd4:	617b      	str	r3, [r7, #20]
 8010cd6:	e025      	b.n	8010d24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	4a23      	ldr	r2, [pc, #140]	; (8010d68 <USB_SetTurnaroundTime+0x128>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d906      	bls.n	8010cee <USB_SetTurnaroundTime+0xae>
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	4a22      	ldr	r2, [pc, #136]	; (8010d6c <USB_SetTurnaroundTime+0x12c>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d202      	bcs.n	8010cee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010ce8:	2309      	movs	r3, #9
 8010cea:	617b      	str	r3, [r7, #20]
 8010cec:	e01a      	b.n	8010d24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	4a1e      	ldr	r2, [pc, #120]	; (8010d6c <USB_SetTurnaroundTime+0x12c>)
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d306      	bcc.n	8010d04 <USB_SetTurnaroundTime+0xc4>
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	4a1d      	ldr	r2, [pc, #116]	; (8010d70 <USB_SetTurnaroundTime+0x130>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d802      	bhi.n	8010d04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010cfe:	2308      	movs	r3, #8
 8010d00:	617b      	str	r3, [r7, #20]
 8010d02:	e00f      	b.n	8010d24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	4a1a      	ldr	r2, [pc, #104]	; (8010d70 <USB_SetTurnaroundTime+0x130>)
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	d906      	bls.n	8010d1a <USB_SetTurnaroundTime+0xda>
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	4a19      	ldr	r2, [pc, #100]	; (8010d74 <USB_SetTurnaroundTime+0x134>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d202      	bcs.n	8010d1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d14:	2307      	movs	r3, #7
 8010d16:	617b      	str	r3, [r7, #20]
 8010d18:	e004      	b.n	8010d24 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d1a:	2306      	movs	r3, #6
 8010d1c:	617b      	str	r3, [r7, #20]
 8010d1e:	e001      	b.n	8010d24 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d20:	2309      	movs	r3, #9
 8010d22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	68db      	ldr	r3, [r3, #12]
 8010d28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	68da      	ldr	r2, [r3, #12]
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	029b      	lsls	r3, r3, #10
 8010d38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010d3c:	431a      	orrs	r2, r3
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d42:	2300      	movs	r3, #0
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	371c      	adds	r7, #28
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr
 8010d50:	00d8acbf 	.word	0x00d8acbf
 8010d54:	00e4e1c0 	.word	0x00e4e1c0
 8010d58:	00f42400 	.word	0x00f42400
 8010d5c:	01067380 	.word	0x01067380
 8010d60:	011a499f 	.word	0x011a499f
 8010d64:	01312cff 	.word	0x01312cff
 8010d68:	014ca43f 	.word	0x014ca43f
 8010d6c:	016e3600 	.word	0x016e3600
 8010d70:	01a6ab1f 	.word	0x01a6ab1f
 8010d74:	01e84800 	.word	0x01e84800

08010d78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b085      	sub	sp, #20
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010d82:	2300      	movs	r3, #0
 8010d84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	019b      	lsls	r3, r3, #6
 8010d8a:	f043 0220 	orr.w	r2, r3, #32
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	3301      	adds	r3, #1
 8010d96:	60fb      	str	r3, [r7, #12]
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	4a09      	ldr	r2, [pc, #36]	; (8010dc0 <USB_FlushTxFifo+0x48>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d901      	bls.n	8010da4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010da0:	2303      	movs	r3, #3
 8010da2:	e006      	b.n	8010db2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	691b      	ldr	r3, [r3, #16]
 8010da8:	f003 0320 	and.w	r3, r3, #32
 8010dac:	2b20      	cmp	r3, #32
 8010dae:	d0f0      	beq.n	8010d92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010db0:	2300      	movs	r3, #0
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3714      	adds	r7, #20
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop
 8010dc0:	00030d40 	.word	0x00030d40

08010dc4 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b087      	sub	sp, #28
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dd6:	689b      	ldr	r3, [r3, #8]
 8010dd8:	f003 0306 	and.w	r3, r3, #6
 8010ddc:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2b02      	cmp	r3, #2
 8010de2:	d002      	beq.n	8010dea <USB_GetDevSpeed+0x26>
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2b06      	cmp	r3, #6
 8010de8:	d102      	bne.n	8010df0 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010dea:	2302      	movs	r3, #2
 8010dec:	75fb      	strb	r3, [r7, #23]
 8010dee:	e001      	b.n	8010df4 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8010df0:	230f      	movs	r3, #15
 8010df2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	371c      	adds	r7, #28
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr

08010e02 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010e02:	b480      	push	{r7}
 8010e04:	b085      	sub	sp, #20
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	6078      	str	r0, [r7, #4]
 8010e0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	785b      	ldrb	r3, [r3, #1]
 8010e1a:	2b01      	cmp	r3, #1
 8010e1c:	d13a      	bne.n	8010e94 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e24:	69da      	ldr	r2, [r3, #28]
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	f003 030f 	and.w	r3, r3, #15
 8010e2e:	2101      	movs	r1, #1
 8010e30:	fa01 f303 	lsl.w	r3, r1, r3
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	68f9      	ldr	r1, [r7, #12]
 8010e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010e3c:	4313      	orrs	r3, r2
 8010e3e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	015a      	lsls	r2, r3, #5
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	4413      	add	r3, r2
 8010e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d155      	bne.n	8010f02 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	015a      	lsls	r2, r3, #5
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	689b      	ldr	r3, [r3, #8]
 8010e68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	78db      	ldrb	r3, [r3, #3]
 8010e70:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010e72:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	059b      	lsls	r3, r3, #22
 8010e78:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	68ba      	ldr	r2, [r7, #8]
 8010e7e:	0151      	lsls	r1, r2, #5
 8010e80:	68fa      	ldr	r2, [r7, #12]
 8010e82:	440a      	add	r2, r1
 8010e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e90:	6013      	str	r3, [r2, #0]
 8010e92:	e036      	b.n	8010f02 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e9a:	69da      	ldr	r2, [r3, #28]
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	f003 030f 	and.w	r3, r3, #15
 8010ea4:	2101      	movs	r1, #1
 8010ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8010eaa:	041b      	lsls	r3, r3, #16
 8010eac:	68f9      	ldr	r1, [r7, #12]
 8010eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010eb2:	4313      	orrs	r3, r2
 8010eb4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	015a      	lsls	r2, r3, #5
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	4413      	add	r3, r2
 8010ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d11a      	bne.n	8010f02 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	015a      	lsls	r2, r3, #5
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	689b      	ldr	r3, [r3, #8]
 8010ede:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	78db      	ldrb	r3, [r3, #3]
 8010ee6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010ee8:	430b      	orrs	r3, r1
 8010eea:	4313      	orrs	r3, r2
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	0151      	lsls	r1, r2, #5
 8010ef0:	68fa      	ldr	r2, [r7, #12]
 8010ef2:	440a      	add	r2, r1
 8010ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f00:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010f02:	2300      	movs	r3, #0
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3714      	adds	r7, #20
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr

08010f10 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b086      	sub	sp, #24
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	785b      	ldrb	r3, [r3, #1]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	f040 810a 	bne.w	8011142 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	695b      	ldr	r3, [r3, #20]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d132      	bne.n	8010f9c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	015a      	lsls	r2, r3, #5
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f42:	691b      	ldr	r3, [r3, #16]
 8010f44:	693a      	ldr	r2, [r7, #16]
 8010f46:	0151      	lsls	r1, r2, #5
 8010f48:	697a      	ldr	r2, [r7, #20]
 8010f4a:	440a      	add	r2, r1
 8010f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010f54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010f58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	015a      	lsls	r2, r3, #5
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	4413      	add	r3, r2
 8010f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f66:	691b      	ldr	r3, [r3, #16]
 8010f68:	693a      	ldr	r2, [r7, #16]
 8010f6a:	0151      	lsls	r1, r2, #5
 8010f6c:	697a      	ldr	r2, [r7, #20]
 8010f6e:	440a      	add	r2, r1
 8010f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010f78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	015a      	lsls	r2, r3, #5
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	4413      	add	r3, r2
 8010f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f86:	691b      	ldr	r3, [r3, #16]
 8010f88:	693a      	ldr	r2, [r7, #16]
 8010f8a:	0151      	lsls	r1, r2, #5
 8010f8c:	697a      	ldr	r2, [r7, #20]
 8010f8e:	440a      	add	r2, r1
 8010f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f94:	0cdb      	lsrs	r3, r3, #19
 8010f96:	04db      	lsls	r3, r3, #19
 8010f98:	6113      	str	r3, [r2, #16]
 8010f9a:	e074      	b.n	8011086 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	015a      	lsls	r2, r3, #5
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	4413      	add	r3, r2
 8010fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fa8:	691b      	ldr	r3, [r3, #16]
 8010faa:	693a      	ldr	r2, [r7, #16]
 8010fac:	0151      	lsls	r1, r2, #5
 8010fae:	697a      	ldr	r2, [r7, #20]
 8010fb0:	440a      	add	r2, r1
 8010fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fb6:	0cdb      	lsrs	r3, r3, #19
 8010fb8:	04db      	lsls	r3, r3, #19
 8010fba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010fbc:	693b      	ldr	r3, [r7, #16]
 8010fbe:	015a      	lsls	r2, r3, #5
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	4413      	add	r3, r2
 8010fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	693a      	ldr	r2, [r7, #16]
 8010fcc:	0151      	lsls	r1, r2, #5
 8010fce:	697a      	ldr	r2, [r7, #20]
 8010fd0:	440a      	add	r2, r1
 8010fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010fda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	015a      	lsls	r2, r3, #5
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fec:	691a      	ldr	r2, [r3, #16]
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	6959      	ldr	r1, [r3, #20]
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	440b      	add	r3, r1
 8010ff8:	1e59      	subs	r1, r3, #1
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	689b      	ldr	r3, [r3, #8]
 8010ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8011002:	04d9      	lsls	r1, r3, #19
 8011004:	4baf      	ldr	r3, [pc, #700]	; (80112c4 <USB_EPStartXfer+0x3b4>)
 8011006:	400b      	ands	r3, r1
 8011008:	6939      	ldr	r1, [r7, #16]
 801100a:	0148      	lsls	r0, r1, #5
 801100c:	6979      	ldr	r1, [r7, #20]
 801100e:	4401      	add	r1, r0
 8011010:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011014:	4313      	orrs	r3, r2
 8011016:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	015a      	lsls	r2, r3, #5
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	4413      	add	r3, r2
 8011020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011024:	691a      	ldr	r2, [r3, #16]
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	695b      	ldr	r3, [r3, #20]
 801102a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801102e:	6939      	ldr	r1, [r7, #16]
 8011030:	0148      	lsls	r0, r1, #5
 8011032:	6979      	ldr	r1, [r7, #20]
 8011034:	4401      	add	r1, r0
 8011036:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801103a:	4313      	orrs	r3, r2
 801103c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	78db      	ldrb	r3, [r3, #3]
 8011042:	2b01      	cmp	r3, #1
 8011044:	d11f      	bne.n	8011086 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	015a      	lsls	r2, r3, #5
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	4413      	add	r3, r2
 801104e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011052:	691b      	ldr	r3, [r3, #16]
 8011054:	693a      	ldr	r2, [r7, #16]
 8011056:	0151      	lsls	r1, r2, #5
 8011058:	697a      	ldr	r2, [r7, #20]
 801105a:	440a      	add	r2, r1
 801105c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011060:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011064:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	015a      	lsls	r2, r3, #5
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	4413      	add	r3, r2
 801106e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011072:	691b      	ldr	r3, [r3, #16]
 8011074:	693a      	ldr	r2, [r7, #16]
 8011076:	0151      	lsls	r1, r2, #5
 8011078:	697a      	ldr	r2, [r7, #20]
 801107a:	440a      	add	r2, r1
 801107c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011080:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011084:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	015a      	lsls	r2, r3, #5
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	4413      	add	r3, r2
 801108e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	693a      	ldr	r2, [r7, #16]
 8011096:	0151      	lsls	r1, r2, #5
 8011098:	697a      	ldr	r2, [r7, #20]
 801109a:	440a      	add	r2, r1
 801109c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80110a4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	78db      	ldrb	r3, [r3, #3]
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d015      	beq.n	80110da <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	695b      	ldr	r3, [r3, #20]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	f000 8100 	beq.w	80112b8 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	f003 030f 	and.w	r3, r3, #15
 80110c8:	2101      	movs	r1, #1
 80110ca:	fa01 f303 	lsl.w	r3, r1, r3
 80110ce:	6979      	ldr	r1, [r7, #20]
 80110d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80110d4:	4313      	orrs	r3, r2
 80110d6:	634b      	str	r3, [r1, #52]	; 0x34
 80110d8:	e0ee      	b.n	80112b8 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110e0:	689b      	ldr	r3, [r3, #8]
 80110e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d110      	bne.n	801110c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	015a      	lsls	r2, r3, #5
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	4413      	add	r3, r2
 80110f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	693a      	ldr	r2, [r7, #16]
 80110fa:	0151      	lsls	r1, r2, #5
 80110fc:	697a      	ldr	r2, [r7, #20]
 80110fe:	440a      	add	r2, r1
 8011100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011108:	6013      	str	r3, [r2, #0]
 801110a:	e00f      	b.n	801112c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	015a      	lsls	r2, r3, #5
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	4413      	add	r3, r2
 8011114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	693a      	ldr	r2, [r7, #16]
 801111c:	0151      	lsls	r1, r2, #5
 801111e:	697a      	ldr	r2, [r7, #20]
 8011120:	440a      	add	r2, r1
 8011122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801112a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	68d9      	ldr	r1, [r3, #12]
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	781a      	ldrb	r2, [r3, #0]
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	695b      	ldr	r3, [r3, #20]
 8011138:	b29b      	uxth	r3, r3
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 f9e2 	bl	8011504 <USB_WritePacket>
 8011140:	e0ba      	b.n	80112b8 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	015a      	lsls	r2, r3, #5
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	4413      	add	r3, r2
 801114a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801114e:	691b      	ldr	r3, [r3, #16]
 8011150:	693a      	ldr	r2, [r7, #16]
 8011152:	0151      	lsls	r1, r2, #5
 8011154:	697a      	ldr	r2, [r7, #20]
 8011156:	440a      	add	r2, r1
 8011158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801115c:	0cdb      	lsrs	r3, r3, #19
 801115e:	04db      	lsls	r3, r3, #19
 8011160:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	015a      	lsls	r2, r3, #5
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	4413      	add	r3, r2
 801116a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801116e:	691b      	ldr	r3, [r3, #16]
 8011170:	693a      	ldr	r2, [r7, #16]
 8011172:	0151      	lsls	r1, r2, #5
 8011174:	697a      	ldr	r2, [r7, #20]
 8011176:	440a      	add	r2, r1
 8011178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801117c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011180:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011184:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	695b      	ldr	r3, [r3, #20]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d123      	bne.n	80111d6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	015a      	lsls	r2, r3, #5
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	4413      	add	r3, r2
 8011196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801119a:	691a      	ldr	r2, [r3, #16]
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	689b      	ldr	r3, [r3, #8]
 80111a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80111a4:	6939      	ldr	r1, [r7, #16]
 80111a6:	0148      	lsls	r0, r1, #5
 80111a8:	6979      	ldr	r1, [r7, #20]
 80111aa:	4401      	add	r1, r0
 80111ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80111b0:	4313      	orrs	r3, r2
 80111b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	015a      	lsls	r2, r3, #5
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	4413      	add	r3, r2
 80111bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111c0:	691b      	ldr	r3, [r3, #16]
 80111c2:	693a      	ldr	r2, [r7, #16]
 80111c4:	0151      	lsls	r1, r2, #5
 80111c6:	697a      	ldr	r2, [r7, #20]
 80111c8:	440a      	add	r2, r1
 80111ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80111ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80111d2:	6113      	str	r3, [r2, #16]
 80111d4:	e033      	b.n	801123e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	695a      	ldr	r2, [r3, #20]
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	689b      	ldr	r3, [r3, #8]
 80111de:	4413      	add	r3, r2
 80111e0:	1e5a      	subs	r2, r3, #1
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	689b      	ldr	r3, [r3, #8]
 80111e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80111ea:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	015a      	lsls	r2, r3, #5
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	4413      	add	r3, r2
 80111f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111f8:	691a      	ldr	r2, [r3, #16]
 80111fa:	89fb      	ldrh	r3, [r7, #14]
 80111fc:	04d9      	lsls	r1, r3, #19
 80111fe:	4b31      	ldr	r3, [pc, #196]	; (80112c4 <USB_EPStartXfer+0x3b4>)
 8011200:	400b      	ands	r3, r1
 8011202:	6939      	ldr	r1, [r7, #16]
 8011204:	0148      	lsls	r0, r1, #5
 8011206:	6979      	ldr	r1, [r7, #20]
 8011208:	4401      	add	r1, r0
 801120a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801120e:	4313      	orrs	r3, r2
 8011210:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	015a      	lsls	r2, r3, #5
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	4413      	add	r3, r2
 801121a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801121e:	691a      	ldr	r2, [r3, #16]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	89f9      	ldrh	r1, [r7, #14]
 8011226:	fb01 f303 	mul.w	r3, r1, r3
 801122a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801122e:	6939      	ldr	r1, [r7, #16]
 8011230:	0148      	lsls	r0, r1, #5
 8011232:	6979      	ldr	r1, [r7, #20]
 8011234:	4401      	add	r1, r0
 8011236:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801123a:	4313      	orrs	r3, r2
 801123c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	78db      	ldrb	r3, [r3, #3]
 8011242:	2b01      	cmp	r3, #1
 8011244:	d128      	bne.n	8011298 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801124c:	689b      	ldr	r3, [r3, #8]
 801124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011252:	2b00      	cmp	r3, #0
 8011254:	d110      	bne.n	8011278 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	015a      	lsls	r2, r3, #5
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	4413      	add	r3, r2
 801125e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	693a      	ldr	r2, [r7, #16]
 8011266:	0151      	lsls	r1, r2, #5
 8011268:	697a      	ldr	r2, [r7, #20]
 801126a:	440a      	add	r2, r1
 801126c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011274:	6013      	str	r3, [r2, #0]
 8011276:	e00f      	b.n	8011298 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011278:	693b      	ldr	r3, [r7, #16]
 801127a:	015a      	lsls	r2, r3, #5
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	4413      	add	r3, r2
 8011280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	693a      	ldr	r2, [r7, #16]
 8011288:	0151      	lsls	r1, r2, #5
 801128a:	697a      	ldr	r2, [r7, #20]
 801128c:	440a      	add	r2, r1
 801128e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011296:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	015a      	lsls	r2, r3, #5
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	4413      	add	r3, r2
 80112a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	693a      	ldr	r2, [r7, #16]
 80112a8:	0151      	lsls	r1, r2, #5
 80112aa:	697a      	ldr	r2, [r7, #20]
 80112ac:	440a      	add	r2, r1
 80112ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80112b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80112b8:	2300      	movs	r3, #0
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3718      	adds	r7, #24
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	1ff80000 	.word	0x1ff80000

080112c8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b085      	sub	sp, #20
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	785b      	ldrb	r3, [r3, #1]
 80112e0:	2b01      	cmp	r3, #1
 80112e2:	f040 80ab 	bne.w	801143c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	695b      	ldr	r3, [r3, #20]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d132      	bne.n	8011354 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	015a      	lsls	r2, r3, #5
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	4413      	add	r3, r2
 80112f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112fa:	691b      	ldr	r3, [r3, #16]
 80112fc:	68ba      	ldr	r2, [r7, #8]
 80112fe:	0151      	lsls	r1, r2, #5
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	440a      	add	r2, r1
 8011304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011308:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801130c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	015a      	lsls	r2, r3, #5
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	4413      	add	r3, r2
 801131a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801131e:	691b      	ldr	r3, [r3, #16]
 8011320:	68ba      	ldr	r2, [r7, #8]
 8011322:	0151      	lsls	r1, r2, #5
 8011324:	68fa      	ldr	r2, [r7, #12]
 8011326:	440a      	add	r2, r1
 8011328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801132c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011330:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	015a      	lsls	r2, r3, #5
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	4413      	add	r3, r2
 801133a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801133e:	691b      	ldr	r3, [r3, #16]
 8011340:	68ba      	ldr	r2, [r7, #8]
 8011342:	0151      	lsls	r1, r2, #5
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	440a      	add	r2, r1
 8011348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801134c:	0cdb      	lsrs	r3, r3, #19
 801134e:	04db      	lsls	r3, r3, #19
 8011350:	6113      	str	r3, [r2, #16]
 8011352:	e04e      	b.n	80113f2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	015a      	lsls	r2, r3, #5
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	4413      	add	r3, r2
 801135c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011360:	691b      	ldr	r3, [r3, #16]
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	0151      	lsls	r1, r2, #5
 8011366:	68fa      	ldr	r2, [r7, #12]
 8011368:	440a      	add	r2, r1
 801136a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801136e:	0cdb      	lsrs	r3, r3, #19
 8011370:	04db      	lsls	r3, r3, #19
 8011372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	015a      	lsls	r2, r3, #5
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	4413      	add	r3, r2
 801137c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011380:	691b      	ldr	r3, [r3, #16]
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	0151      	lsls	r1, r2, #5
 8011386:	68fa      	ldr	r2, [r7, #12]
 8011388:	440a      	add	r2, r1
 801138a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801138e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011392:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011396:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	695a      	ldr	r2, [r3, #20]
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	689b      	ldr	r3, [r3, #8]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d903      	bls.n	80113ac <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	689a      	ldr	r2, [r3, #8]
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	015a      	lsls	r2, r3, #5
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	4413      	add	r3, r2
 80113b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113b8:	691b      	ldr	r3, [r3, #16]
 80113ba:	68ba      	ldr	r2, [r7, #8]
 80113bc:	0151      	lsls	r1, r2, #5
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	440a      	add	r2, r1
 80113c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80113ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	015a      	lsls	r2, r3, #5
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	4413      	add	r3, r2
 80113d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113d8:	691a      	ldr	r2, [r3, #16]
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	695b      	ldr	r3, [r3, #20]
 80113de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80113e2:	68b9      	ldr	r1, [r7, #8]
 80113e4:	0148      	lsls	r0, r1, #5
 80113e6:	68f9      	ldr	r1, [r7, #12]
 80113e8:	4401      	add	r1, r0
 80113ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80113ee:	4313      	orrs	r3, r2
 80113f0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	015a      	lsls	r2, r3, #5
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	4413      	add	r3, r2
 80113fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	68ba      	ldr	r2, [r7, #8]
 8011402:	0151      	lsls	r1, r2, #5
 8011404:	68fa      	ldr	r2, [r7, #12]
 8011406:	440a      	add	r2, r1
 8011408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801140c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011410:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	695b      	ldr	r3, [r3, #20]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d06d      	beq.n	80114f6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	781b      	ldrb	r3, [r3, #0]
 8011426:	f003 030f 	and.w	r3, r3, #15
 801142a:	2101      	movs	r1, #1
 801142c:	fa01 f303 	lsl.w	r3, r1, r3
 8011430:	68f9      	ldr	r1, [r7, #12]
 8011432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011436:	4313      	orrs	r3, r2
 8011438:	634b      	str	r3, [r1, #52]	; 0x34
 801143a:	e05c      	b.n	80114f6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	015a      	lsls	r2, r3, #5
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	4413      	add	r3, r2
 8011444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011448:	691b      	ldr	r3, [r3, #16]
 801144a:	68ba      	ldr	r2, [r7, #8]
 801144c:	0151      	lsls	r1, r2, #5
 801144e:	68fa      	ldr	r2, [r7, #12]
 8011450:	440a      	add	r2, r1
 8011452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011456:	0cdb      	lsrs	r3, r3, #19
 8011458:	04db      	lsls	r3, r3, #19
 801145a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	015a      	lsls	r2, r3, #5
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	4413      	add	r3, r2
 8011464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011468:	691b      	ldr	r3, [r3, #16]
 801146a:	68ba      	ldr	r2, [r7, #8]
 801146c:	0151      	lsls	r1, r2, #5
 801146e:	68fa      	ldr	r2, [r7, #12]
 8011470:	440a      	add	r2, r1
 8011472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011476:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801147a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801147e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	695b      	ldr	r3, [r3, #20]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d003      	beq.n	8011490 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	689a      	ldr	r2, [r3, #8]
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	015a      	lsls	r2, r3, #5
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	4413      	add	r3, r2
 8011498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801149c:	691b      	ldr	r3, [r3, #16]
 801149e:	68ba      	ldr	r2, [r7, #8]
 80114a0:	0151      	lsls	r1, r2, #5
 80114a2:	68fa      	ldr	r2, [r7, #12]
 80114a4:	440a      	add	r2, r1
 80114a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80114aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80114ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	015a      	lsls	r2, r3, #5
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	4413      	add	r3, r2
 80114b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114bc:	691a      	ldr	r2, [r3, #16]
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	689b      	ldr	r3, [r3, #8]
 80114c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80114c6:	68b9      	ldr	r1, [r7, #8]
 80114c8:	0148      	lsls	r0, r1, #5
 80114ca:	68f9      	ldr	r1, [r7, #12]
 80114cc:	4401      	add	r1, r0
 80114ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80114d2:	4313      	orrs	r3, r2
 80114d4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	015a      	lsls	r2, r3, #5
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	4413      	add	r3, r2
 80114de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	0151      	lsls	r1, r2, #5
 80114e8:	68fa      	ldr	r2, [r7, #12]
 80114ea:	440a      	add	r2, r1
 80114ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80114f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80114f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80114f6:	2300      	movs	r3, #0
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3714      	adds	r7, #20
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr

08011504 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8011504:	b480      	push	{r7}
 8011506:	b089      	sub	sp, #36	; 0x24
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	4611      	mov	r1, r2
 8011510:	461a      	mov	r2, r3
 8011512:	460b      	mov	r3, r1
 8011514:	71fb      	strb	r3, [r7, #7]
 8011516:	4613      	mov	r3, r2
 8011518:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8011522:	88bb      	ldrh	r3, [r7, #4]
 8011524:	3303      	adds	r3, #3
 8011526:	089b      	lsrs	r3, r3, #2
 8011528:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 801152a:	2300      	movs	r3, #0
 801152c:	61bb      	str	r3, [r7, #24]
 801152e:	e00f      	b.n	8011550 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011530:	79fb      	ldrb	r3, [r7, #7]
 8011532:	031a      	lsls	r2, r3, #12
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	4413      	add	r3, r2
 8011538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801153c:	461a      	mov	r2, r3
 801153e:	69fb      	ldr	r3, [r7, #28]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	6013      	str	r3, [r2, #0]
    pSrc++;
 8011544:	69fb      	ldr	r3, [r7, #28]
 8011546:	3304      	adds	r3, #4
 8011548:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801154a:	69bb      	ldr	r3, [r7, #24]
 801154c:	3301      	adds	r3, #1
 801154e:	61bb      	str	r3, [r7, #24]
 8011550:	69ba      	ldr	r2, [r7, #24]
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	429a      	cmp	r2, r3
 8011556:	d3eb      	bcc.n	8011530 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8011558:	2300      	movs	r3, #0
}
 801155a:	4618      	mov	r0, r3
 801155c:	3724      	adds	r7, #36	; 0x24
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr

08011566 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011566:	b480      	push	{r7}
 8011568:	b089      	sub	sp, #36	; 0x24
 801156a:	af00      	add	r7, sp, #0
 801156c:	60f8      	str	r0, [r7, #12]
 801156e:	60b9      	str	r1, [r7, #8]
 8011570:	4613      	mov	r3, r2
 8011572:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801157c:	88fb      	ldrh	r3, [r7, #6]
 801157e:	3303      	adds	r3, #3
 8011580:	089b      	lsrs	r3, r3, #2
 8011582:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011584:	2300      	movs	r3, #0
 8011586:	61bb      	str	r3, [r7, #24]
 8011588:	e00b      	b.n	80115a2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	69fb      	ldr	r3, [r7, #28]
 8011594:	601a      	str	r2, [r3, #0]
    pDest++;
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	3304      	adds	r3, #4
 801159a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801159c:	69bb      	ldr	r3, [r7, #24]
 801159e:	3301      	adds	r3, #1
 80115a0:	61bb      	str	r3, [r7, #24]
 80115a2:	69ba      	ldr	r2, [r7, #24]
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d3ef      	bcc.n	801158a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80115aa:	69fb      	ldr	r3, [r7, #28]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3724      	adds	r7, #36	; 0x24
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr

080115b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80115b8:	b480      	push	{r7}
 80115ba:	b085      	sub	sp, #20
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	781b      	ldrb	r3, [r3, #0]
 80115ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	785b      	ldrb	r3, [r3, #1]
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d12c      	bne.n	801162e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	015a      	lsls	r2, r3, #5
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	4413      	add	r3, r2
 80115dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	db12      	blt.n	801160c <USB_EPSetStall+0x54>
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d00f      	beq.n	801160c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	015a      	lsls	r2, r3, #5
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	4413      	add	r3, r2
 80115f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	68ba      	ldr	r2, [r7, #8]
 80115fc:	0151      	lsls	r1, r2, #5
 80115fe:	68fa      	ldr	r2, [r7, #12]
 8011600:	440a      	add	r2, r1
 8011602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801160a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	015a      	lsls	r2, r3, #5
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	4413      	add	r3, r2
 8011614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	68ba      	ldr	r2, [r7, #8]
 801161c:	0151      	lsls	r1, r2, #5
 801161e:	68fa      	ldr	r2, [r7, #12]
 8011620:	440a      	add	r2, r1
 8011622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801162a:	6013      	str	r3, [r2, #0]
 801162c:	e02b      	b.n	8011686 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	015a      	lsls	r2, r3, #5
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	4413      	add	r3, r2
 8011636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	2b00      	cmp	r3, #0
 801163e:	db12      	blt.n	8011666 <USB_EPSetStall+0xae>
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d00f      	beq.n	8011666 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	015a      	lsls	r2, r3, #5
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	4413      	add	r3, r2
 801164e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	68ba      	ldr	r2, [r7, #8]
 8011656:	0151      	lsls	r1, r2, #5
 8011658:	68fa      	ldr	r2, [r7, #12]
 801165a:	440a      	add	r2, r1
 801165c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011660:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011664:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	015a      	lsls	r2, r3, #5
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	4413      	add	r3, r2
 801166e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	68ba      	ldr	r2, [r7, #8]
 8011676:	0151      	lsls	r1, r2, #5
 8011678:	68fa      	ldr	r2, [r7, #12]
 801167a:	440a      	add	r2, r1
 801167c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011684:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3714      	adds	r7, #20
 801168c:	46bd      	mov	sp, r7
 801168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011692:	4770      	bx	lr

08011694 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011694:	b480      	push	{r7}
 8011696:	b085      	sub	sp, #20
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	785b      	ldrb	r3, [r3, #1]
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d128      	bne.n	8011702 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	015a      	lsls	r2, r3, #5
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	4413      	add	r3, r2
 80116b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	68ba      	ldr	r2, [r7, #8]
 80116c0:	0151      	lsls	r1, r2, #5
 80116c2:	68fa      	ldr	r2, [r7, #12]
 80116c4:	440a      	add	r2, r1
 80116c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80116ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	78db      	ldrb	r3, [r3, #3]
 80116d4:	2b03      	cmp	r3, #3
 80116d6:	d003      	beq.n	80116e0 <USB_EPClearStall+0x4c>
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	78db      	ldrb	r3, [r3, #3]
 80116dc:	2b02      	cmp	r3, #2
 80116de:	d138      	bne.n	8011752 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	015a      	lsls	r2, r3, #5
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	4413      	add	r3, r2
 80116e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	68ba      	ldr	r2, [r7, #8]
 80116f0:	0151      	lsls	r1, r2, #5
 80116f2:	68fa      	ldr	r2, [r7, #12]
 80116f4:	440a      	add	r2, r1
 80116f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116fe:	6013      	str	r3, [r2, #0]
 8011700:	e027      	b.n	8011752 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	015a      	lsls	r2, r3, #5
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	4413      	add	r3, r2
 801170a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	68ba      	ldr	r2, [r7, #8]
 8011712:	0151      	lsls	r1, r2, #5
 8011714:	68fa      	ldr	r2, [r7, #12]
 8011716:	440a      	add	r2, r1
 8011718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801171c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011720:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	78db      	ldrb	r3, [r3, #3]
 8011726:	2b03      	cmp	r3, #3
 8011728:	d003      	beq.n	8011732 <USB_EPClearStall+0x9e>
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	78db      	ldrb	r3, [r3, #3]
 801172e:	2b02      	cmp	r3, #2
 8011730:	d10f      	bne.n	8011752 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	015a      	lsls	r2, r3, #5
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	4413      	add	r3, r2
 801173a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	68ba      	ldr	r2, [r7, #8]
 8011742:	0151      	lsls	r1, r2, #5
 8011744:	68fa      	ldr	r2, [r7, #12]
 8011746:	440a      	add	r2, r1
 8011748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011750:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011752:	2300      	movs	r3, #0
}
 8011754:	4618      	mov	r0, r3
 8011756:	3714      	adds	r7, #20
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011760:	b480      	push	{r7}
 8011762:	b085      	sub	sp, #20
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	460b      	mov	r3, r1
 801176a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	68fa      	ldr	r2, [r7, #12]
 801177a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801177e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011782:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	78fb      	ldrb	r3, [r7, #3]
 801178e:	011b      	lsls	r3, r3, #4
 8011790:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011794:	68f9      	ldr	r1, [r7, #12]
 8011796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801179a:	4313      	orrs	r3, r2
 801179c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801179e:	2300      	movs	r3, #0
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3714      	adds	r7, #20
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b085      	sub	sp, #20
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	695b      	ldr	r3, [r3, #20]
 80117b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	699b      	ldr	r3, [r3, #24]
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	4013      	ands	r3, r2
 80117c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80117c4:	68fb      	ldr	r3, [r7, #12]
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3714      	adds	r7, #20
 80117ca:	46bd      	mov	sp, r7
 80117cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d0:	4770      	bx	lr

080117d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80117d2:	b480      	push	{r7}
 80117d4:	b085      	sub	sp, #20
 80117d6:	af00      	add	r7, sp, #0
 80117d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117e4:	699b      	ldr	r3, [r3, #24]
 80117e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117ee:	69db      	ldr	r3, [r3, #28]
 80117f0:	68ba      	ldr	r2, [r7, #8]
 80117f2:	4013      	ands	r3, r2
 80117f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	0c1b      	lsrs	r3, r3, #16
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3714      	adds	r7, #20
 80117fe:	46bd      	mov	sp, r7
 8011800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011804:	4770      	bx	lr

08011806 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011806:	b480      	push	{r7}
 8011808:	b085      	sub	sp, #20
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011818:	699b      	ldr	r3, [r3, #24]
 801181a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011822:	69db      	ldr	r3, [r3, #28]
 8011824:	68ba      	ldr	r2, [r7, #8]
 8011826:	4013      	ands	r3, r2
 8011828:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	b29b      	uxth	r3, r3
}
 801182e:	4618      	mov	r0, r3
 8011830:	3714      	adds	r7, #20
 8011832:	46bd      	mov	sp, r7
 8011834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011838:	4770      	bx	lr

0801183a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801183a:	b480      	push	{r7}
 801183c:	b085      	sub	sp, #20
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
 8011842:	460b      	mov	r3, r1
 8011844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801184a:	78fb      	ldrb	r3, [r7, #3]
 801184c:	015a      	lsls	r2, r3, #5
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	4413      	add	r3, r2
 8011852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011856:	689b      	ldr	r3, [r3, #8]
 8011858:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011860:	695b      	ldr	r3, [r3, #20]
 8011862:	68ba      	ldr	r2, [r7, #8]
 8011864:	4013      	ands	r3, r2
 8011866:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011868:	68bb      	ldr	r3, [r7, #8]
}
 801186a:	4618      	mov	r0, r3
 801186c:	3714      	adds	r7, #20
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr

08011876 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011876:	b480      	push	{r7}
 8011878:	b087      	sub	sp, #28
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
 801187e:	460b      	mov	r3, r1
 8011880:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801188c:	691b      	ldr	r3, [r3, #16]
 801188e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011898:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801189a:	78fb      	ldrb	r3, [r7, #3]
 801189c:	f003 030f 	and.w	r3, r3, #15
 80118a0:	68fa      	ldr	r2, [r7, #12]
 80118a2:	fa22 f303 	lsr.w	r3, r2, r3
 80118a6:	01db      	lsls	r3, r3, #7
 80118a8:	b2db      	uxtb	r3, r3
 80118aa:	693a      	ldr	r2, [r7, #16]
 80118ac:	4313      	orrs	r3, r2
 80118ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80118b0:	78fb      	ldrb	r3, [r7, #3]
 80118b2:	015a      	lsls	r2, r3, #5
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	4413      	add	r3, r2
 80118b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118bc:	689b      	ldr	r3, [r3, #8]
 80118be:	693a      	ldr	r2, [r7, #16]
 80118c0:	4013      	ands	r3, r2
 80118c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80118c4:	68bb      	ldr	r3, [r7, #8]
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	371c      	adds	r7, #28
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr

080118d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80118d2:	b480      	push	{r7}
 80118d4:	b083      	sub	sp, #12
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	695b      	ldr	r3, [r3, #20]
 80118de:	f003 0301 	and.w	r3, r3, #1
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	370c      	adds	r7, #12
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr

080118ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80118ee:	b480      	push	{r7}
 80118f0:	b085      	sub	sp, #20
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011908:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801190c:	f023 0307 	bic.w	r3, r3, #7
 8011910:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011924:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011926:	2300      	movs	r3, #0
}
 8011928:	4618      	mov	r0, r3
 801192a:	3714      	adds	r7, #20
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	333c      	adds	r3, #60	; 0x3c
 8011946:	3304      	adds	r3, #4
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	4a1c      	ldr	r2, [pc, #112]	; (80119c0 <USB_EP0_OutStart+0x8c>)
 8011950:	4293      	cmp	r3, r2
 8011952:	d90a      	bls.n	801196a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011964:	d101      	bne.n	801196a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8011966:	2300      	movs	r3, #0
 8011968:	e024      	b.n	80119b4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011970:	461a      	mov	r2, r3
 8011972:	2300      	movs	r3, #0
 8011974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801197c:	691b      	ldr	r3, [r3, #16]
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011984:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011990:	691b      	ldr	r3, [r3, #16]
 8011992:	68fa      	ldr	r2, [r7, #12]
 8011994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011998:	f043 0318 	orr.w	r3, r3, #24
 801199c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119a4:	691b      	ldr	r3, [r3, #16]
 80119a6:	68fa      	ldr	r2, [r7, #12]
 80119a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80119b0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80119b2:	2300      	movs	r3, #0
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3714      	adds	r7, #20
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr
 80119c0:	4f54300a 	.word	0x4f54300a

080119c4 <USBD_WCID_STREAMING_FillTxDataBuffer>:
* @param  size: length of data in bytes
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_FillTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t* buf, uint32_t size)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b08f      	sub	sp, #60	; 0x3c
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	60f8      	str	r0, [r7, #12]
 80119cc:	607a      	str	r2, [r7, #4]
 80119ce:	603b      	str	r3, [r7, #0]
 80119d0:	460b      	mov	r3, r1
 80119d2:	72fb      	strb	r3, [r7, #11]
    USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119da:	62fb      	str	r3, [r7, #44]	; 0x2c

   uint8_t ** TxBuffer = hwcid->TxBuffer;
 80119dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80119e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __IO uint8_t * TxBuffStatus = hwcid->TxBuffStatus;
 80119e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80119ea:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 80119ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ee:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80119f2:	623b      	str	r3, [r7, #32]
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 80119f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f6:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 80119fa:	61fb      	str	r3, [r7, #28]
   __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 80119fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fe:	f203 1365 	addw	r3, r3, #357	; 0x165
 8011a02:	61bb      	str	r3, [r7, #24]
   
  uint32_t i;   
  uint8_t * txBuffptr = (uint8_t*)TxBuffer[ch_number];  
 8011a04:	7afb      	ldrb	r3, [r7, #11]
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a0a:	4413      	add	r3, r2
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	617b      	str	r3, [r7, #20]
  
  if(TxBuffReset[ch_number] == 1)
 8011a10:	7afb      	ldrb	r3, [r7, #11]
 8011a12:	69ba      	ldr	r2, [r7, #24]
 8011a14:	4413      	add	r3, r2
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d121      	bne.n	8011a62 <USBD_WCID_STREAMING_FillTxDataBuffer+0x9e>
  {
    if(ch_number >= (N_IN_ENDPOINTS-1))
 8011a1e:	7afb      	ldrb	r3, [r7, #11]
 8011a20:	2b03      	cmp	r3, #3
 8011a22:	d90e      	bls.n	8011a42 <USBD_WCID_STREAMING_FillTxDataBuffer+0x7e>
    {
      txBuffptr[0] = ch_number;
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	7afa      	ldrb	r2, [r7, #11]
 8011a28:	701a      	strb	r2, [r3, #0]
      TxBuffIdx[ch_number] = 1;
 8011a2a:	7afb      	ldrb	r3, [r7, #11]
 8011a2c:	009b      	lsls	r3, r3, #2
 8011a2e:	6a3a      	ldr	r2, [r7, #32]
 8011a30:	4413      	add	r3, r2
 8011a32:	2201      	movs	r2, #1
 8011a34:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 8011a36:	7afb      	ldrb	r3, [r7, #11]
 8011a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a3a:	4413      	add	r3, r2
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	701a      	strb	r2, [r3, #0]
 8011a40:	e00a      	b.n	8011a58 <USBD_WCID_STREAMING_FillTxDataBuffer+0x94>
    }
    else
    {
      TxBuffIdx[ch_number] = 0;
 8011a42:	7afb      	ldrb	r3, [r7, #11]
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	6a3a      	ldr	r2, [r7, #32]
 8011a48:	4413      	add	r3, r2
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 8011a4e:	7afb      	ldrb	r3, [r7, #11]
 8011a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a52:	4413      	add	r3, r2
 8011a54:	2200      	movs	r2, #0
 8011a56:	701a      	strb	r2, [r3, #0]
      
    }
    TxBuffReset[ch_number] = 0;
 8011a58:	7afb      	ldrb	r3, [r7, #11]
 8011a5a:	69ba      	ldr	r2, [r7, #24]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	2200      	movs	r2, #0
 8011a60:	701a      	strb	r2, [r3, #0]
  }
  
  uint32_t txBuffIdx = TxBuffIdx[ch_number];  
 8011a62:	7afb      	ldrb	r3, [r7, #11]
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	6a3a      	ldr	r2, [r7, #32]
 8011a68:	4413      	add	r3, r2
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	633b      	str	r3, [r7, #48]	; 0x30
  
  for (i = 0; i < size; i++)
 8011a6e:	2300      	movs	r3, #0
 8011a70:	637b      	str	r3, [r7, #52]	; 0x34
 8011a72:	e046      	b.n	8011b02 <USBD_WCID_STREAMING_FillTxDataBuffer+0x13e>
  {
    txBuffptr[txBuffIdx] = buf[i];    
 8011a74:	687a      	ldr	r2, [r7, #4]
 8011a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a78:	441a      	add	r2, r3
 8011a7a:	6979      	ldr	r1, [r7, #20]
 8011a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a7e:	440b      	add	r3, r1
 8011a80:	7812      	ldrb	r2, [r2, #0]
 8011a82:	701a      	strb	r2, [r3, #0]
    txBuffIdx = (txBuffIdx + 1) %  (USB_DataSizePerEp[ch_number]);
 8011a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a86:	3301      	adds	r3, #1
 8011a88:	7afa      	ldrb	r2, [r7, #11]
 8011a8a:	0052      	lsls	r2, r2, #1
 8011a8c:	69f9      	ldr	r1, [r7, #28]
 8011a8e:	440a      	add	r2, r1
 8011a90:	8812      	ldrh	r2, [r2, #0]
 8011a92:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a96:	fb02 f201 	mul.w	r2, r2, r1
 8011a9a:	1a9b      	subs	r3, r3, r2
 8011a9c:	633b      	str	r3, [r7, #48]	; 0x30
    
    if(txBuffIdx == (USB_DataSizePerEp[ch_number]/2))
 8011a9e:	7afb      	ldrb	r3, [r7, #11]
 8011aa0:	005b      	lsls	r3, r3, #1
 8011aa2:	69fa      	ldr	r2, [r7, #28]
 8011aa4:	4413      	add	r3, r2
 8011aa6:	881b      	ldrh	r3, [r3, #0]
 8011aa8:	085b      	lsrs	r3, r3, #1
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	461a      	mov	r2, r3
 8011aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	d110      	bne.n	8011ad6 <USBD_WCID_STREAMING_FillTxDataBuffer+0x112>
    {
      TxBuffStatus[ch_number] = 1;
 8011ab4:	7afb      	ldrb	r3, [r7, #11]
 8011ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ab8:	4413      	add	r3, r2
 8011aba:	2201      	movs	r2, #1
 8011abc:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 8011abe:	7afb      	ldrb	r3, [r7, #11]
 8011ac0:	2b03      	cmp	r3, #3
 8011ac2:	d91b      	bls.n	8011afc <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 8011ac4:	697a      	ldr	r2, [r7, #20]
 8011ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac8:	4413      	add	r3, r2
 8011aca:	7afa      	ldrb	r2, [r7, #11]
 8011acc:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 8011ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8011ad4:	e012      	b.n	8011afc <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      }
    }
    else if (txBuffIdx == 0)
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d10f      	bne.n	8011afc <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
    {
      TxBuffStatus[ch_number] = 2;
 8011adc:	7afb      	ldrb	r3, [r7, #11]
 8011ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ae0:	4413      	add	r3, r2
 8011ae2:	2202      	movs	r2, #2
 8011ae4:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 8011ae6:	7afb      	ldrb	r3, [r7, #11]
 8011ae8:	2b03      	cmp	r3, #3
 8011aea:	d907      	bls.n	8011afc <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 8011aec:	697a      	ldr	r2, [r7, #20]
 8011aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af0:	4413      	add	r3, r2
 8011af2:	7afa      	ldrb	r2, [r7, #11]
 8011af4:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 8011af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af8:	3301      	adds	r3, #1
 8011afa:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < size; i++)
 8011afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011afe:	3301      	adds	r3, #1
 8011b00:	637b      	str	r3, [r7, #52]	; 0x34
 8011b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d3b4      	bcc.n	8011a74 <USBD_WCID_STREAMING_FillTxDataBuffer+0xb0>
      }
    }
  }  
  TxBuffIdx[ch_number] = txBuffIdx;  
 8011b0a:	7afb      	ldrb	r3, [r7, #11]
 8011b0c:	009b      	lsls	r3, r3, #2
 8011b0e:	6a3a      	ldr	r2, [r7, #32]
 8011b10:	4413      	add	r3, r2
 8011b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b14:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 8011b16:	2300      	movs	r3, #0
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	373c      	adds	r7, #60	; 0x3c
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr

08011b24 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011b2c:	2300      	movs	r3, #0
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	370c      	adds	r7, #12
 8011b32:	46bd      	mov	sp, r7
 8011b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b38:	4770      	bx	lr

08011b3a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011b3a:	b580      	push	{r7, lr}
 8011b3c:	b084      	sub	sp, #16
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6078      	str	r0, [r7, #4]
 8011b42:	460b      	mov	r3, r1
 8011b44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011b46:	2302      	movs	r3, #2
 8011b48:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d00c      	beq.n	8011b6e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	78fa      	ldrb	r2, [r7, #3]
 8011b5e:	4611      	mov	r1, r2
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	4798      	blx	r3
 8011b64:	4603      	mov	r3, r0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d101      	bne.n	8011b6e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3710      	adds	r7, #16
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	460b      	mov	r3, r1
 8011b82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	78fa      	ldrb	r2, [r7, #3]
 8011b8e:	4611      	mov	r1, r2
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	4798      	blx	r3

  return USBD_OK;
 8011b94:	2300      	movs	r3, #0
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3708      	adds	r7, #8
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
 8011ba6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011bae:	6839      	ldr	r1, [r7, #0]
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f000 ff28 	bl	8012a06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2201      	movs	r2, #1
 8011bba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011bd2:	f003 031f 	and.w	r3, r3, #31
 8011bd6:	2b02      	cmp	r3, #2
 8011bd8:	d016      	beq.n	8011c08 <USBD_LL_SetupStage+0x6a>
 8011bda:	2b02      	cmp	r3, #2
 8011bdc:	d81c      	bhi.n	8011c18 <USBD_LL_SetupStage+0x7a>
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d002      	beq.n	8011be8 <USBD_LL_SetupStage+0x4a>
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	d008      	beq.n	8011bf8 <USBD_LL_SetupStage+0x5a>
 8011be6:	e017      	b.n	8011c18 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011bee:	4619      	mov	r1, r3
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f000 fa09 	bl	8012008 <USBD_StdDevReq>
      break;
 8011bf6:	e01a      	b.n	8011c2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011bfe:	4619      	mov	r1, r3
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f000 fa6b 	bl	80120dc <USBD_StdItfReq>
      break;
 8011c06:	e012      	b.n	8011c2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011c0e:	4619      	mov	r1, r3
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f000 faab 	bl	801216c <USBD_StdEPReq>
      break;
 8011c16:	e00a      	b.n	8011c2e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011c1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011c22:	b2db      	uxtb	r3, r3
 8011c24:	4619      	mov	r1, r3
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f7f3 f9c8 	bl	8004fbc <USBD_LL_StallEP>
      break;
 8011c2c:	bf00      	nop
  }

  return USBD_OK;
 8011c2e:	2300      	movs	r3, #0
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b086      	sub	sp, #24
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	460b      	mov	r3, r1
 8011c42:	607a      	str	r2, [r7, #4]
 8011c44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011c46:	7afb      	ldrb	r3, [r7, #11]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d14b      	bne.n	8011ce4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011c52:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011c5a:	2b03      	cmp	r3, #3
 8011c5c:	d134      	bne.n	8011cc8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	68da      	ldr	r2, [r3, #12]
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	691b      	ldr	r3, [r3, #16]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d919      	bls.n	8011c9e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	68da      	ldr	r2, [r3, #12]
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	691b      	ldr	r3, [r3, #16]
 8011c72:	1ad2      	subs	r2, r2, r3
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	68da      	ldr	r2, [r3, #12]
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d203      	bcs.n	8011c8c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	e002      	b.n	8011c92 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	461a      	mov	r2, r3
 8011c94:	6879      	ldr	r1, [r7, #4]
 8011c96:	68f8      	ldr	r0, [r7, #12]
 8011c98:	f000 ff31 	bl	8012afe <USBD_CtlContinueRx>
 8011c9c:	e038      	b.n	8011d10 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ca4:	691b      	ldr	r3, [r3, #16]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d00a      	beq.n	8011cc0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011cb0:	2b03      	cmp	r3, #3
 8011cb2:	d105      	bne.n	8011cc0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cba:	691b      	ldr	r3, [r3, #16]
 8011cbc:	68f8      	ldr	r0, [r7, #12]
 8011cbe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011cc0:	68f8      	ldr	r0, [r7, #12]
 8011cc2:	f000 ff2e 	bl	8012b22 <USBD_CtlSendStatus>
 8011cc6:	e023      	b.n	8011d10 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011cce:	2b05      	cmp	r3, #5
 8011cd0:	d11e      	bne.n	8011d10 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8011cda:	2100      	movs	r1, #0
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f7f3 f96d 	bl	8004fbc <USBD_LL_StallEP>
 8011ce2:	e015      	b.n	8011d10 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cea:	699b      	ldr	r3, [r3, #24]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d00d      	beq.n	8011d0c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011cf6:	2b03      	cmp	r3, #3
 8011cf8:	d108      	bne.n	8011d0c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d00:	699b      	ldr	r3, [r3, #24]
 8011d02:	7afa      	ldrb	r2, [r7, #11]
 8011d04:	4611      	mov	r1, r2
 8011d06:	68f8      	ldr	r0, [r7, #12]
 8011d08:	4798      	blx	r3
 8011d0a:	e001      	b.n	8011d10 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011d0c:	2302      	movs	r3, #2
 8011d0e:	e000      	b.n	8011d12 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011d10:	2300      	movs	r3, #0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3718      	adds	r7, #24
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}

08011d1a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b086      	sub	sp, #24
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	60f8      	str	r0, [r7, #12]
 8011d22:	460b      	mov	r3, r1
 8011d24:	607a      	str	r2, [r7, #4]
 8011d26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011d28:	7afb      	ldrb	r3, [r7, #11]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d17f      	bne.n	8011e2e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	3314      	adds	r3, #20
 8011d32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d3a:	2b02      	cmp	r3, #2
 8011d3c:	d15c      	bne.n	8011df8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	68da      	ldr	r2, [r3, #12]
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	691b      	ldr	r3, [r3, #16]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d915      	bls.n	8011d76 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	68da      	ldr	r2, [r3, #12]
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	691b      	ldr	r3, [r3, #16]
 8011d52:	1ad2      	subs	r2, r2, r3
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	461a      	mov	r2, r3
 8011d60:	6879      	ldr	r1, [r7, #4]
 8011d62:	68f8      	ldr	r0, [r7, #12]
 8011d64:	f000 feb9 	bl	8012ada <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d68:	2300      	movs	r3, #0
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	2100      	movs	r1, #0
 8011d6e:	68f8      	ldr	r0, [r7, #12]
 8011d70:	f7f3 f9a0 	bl	80050b4 <USBD_LL_PrepareReceive>
 8011d74:	e04e      	b.n	8011e14 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	689b      	ldr	r3, [r3, #8]
 8011d7a:	697a      	ldr	r2, [r7, #20]
 8011d7c:	6912      	ldr	r2, [r2, #16]
 8011d7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d82:	fb02 f201 	mul.w	r2, r2, r1
 8011d86:	1a9b      	subs	r3, r3, r2
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d11c      	bne.n	8011dc6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	689a      	ldr	r2, [r3, #8]
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d316      	bcc.n	8011dc6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	689a      	ldr	r2, [r3, #8]
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d20f      	bcs.n	8011dc6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011da6:	2200      	movs	r2, #0
 8011da8:	2100      	movs	r1, #0
 8011daa:	68f8      	ldr	r0, [r7, #12]
 8011dac:	f000 fe95 	bl	8012ada <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011db8:	2300      	movs	r3, #0
 8011dba:	2200      	movs	r2, #0
 8011dbc:	2100      	movs	r1, #0
 8011dbe:	68f8      	ldr	r0, [r7, #12]
 8011dc0:	f7f3 f978 	bl	80050b4 <USBD_LL_PrepareReceive>
 8011dc4:	e026      	b.n	8011e14 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d00a      	beq.n	8011de8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011dd8:	2b03      	cmp	r3, #3
 8011dda:	d105      	bne.n	8011de8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	68f8      	ldr	r0, [r7, #12]
 8011de6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8011de8:	2180      	movs	r1, #128	; 0x80
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	f7f3 f8e6 	bl	8004fbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8011df0:	68f8      	ldr	r0, [r7, #12]
 8011df2:	f000 fea9 	bl	8012b48 <USBD_CtlReceiveStatus>
 8011df6:	e00d      	b.n	8011e14 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011dfe:	2b04      	cmp	r3, #4
 8011e00:	d004      	beq.n	8011e0c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d103      	bne.n	8011e14 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8011e0c:	2180      	movs	r1, #128	; 0x80
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f7f3 f8d4 	bl	8004fbc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011e1a:	2b01      	cmp	r3, #1
 8011e1c:	d11d      	bne.n	8011e5a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8011e1e:	68f8      	ldr	r0, [r7, #12]
 8011e20:	f7ff fe80 	bl	8011b24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2200      	movs	r2, #0
 8011e28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011e2c:	e015      	b.n	8011e5a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e34:	695b      	ldr	r3, [r3, #20]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d00d      	beq.n	8011e56 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011e40:	2b03      	cmp	r3, #3
 8011e42:	d108      	bne.n	8011e56 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e4a:	695b      	ldr	r3, [r3, #20]
 8011e4c:	7afa      	ldrb	r2, [r7, #11]
 8011e4e:	4611      	mov	r1, r2
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	4798      	blx	r3
 8011e54:	e001      	b.n	8011e5a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011e56:	2302      	movs	r3, #2
 8011e58:	e000      	b.n	8011e5c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8011e5a:	2300      	movs	r3, #0
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3718      	adds	r7, #24
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b082      	sub	sp, #8
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e6c:	2340      	movs	r3, #64	; 0x40
 8011e6e:	2200      	movs	r2, #0
 8011e70:	2100      	movs	r1, #0
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f7f3 f888 	bl	8004f88 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2240      	movs	r2, #64	; 0x40
 8011e84:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e88:	2340      	movs	r3, #64	; 0x40
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	2180      	movs	r1, #128	; 0x80
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f7f3 f87a 	bl	8004f88 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2201      	movs	r2, #1
 8011e98:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2240      	movs	r2, #64	; 0x40
 8011e9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d009      	beq.n	8011edc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	687a      	ldr	r2, [r7, #4]
 8011ed2:	6852      	ldr	r2, [r2, #4]
 8011ed4:	b2d2      	uxtb	r2, r2
 8011ed6:	4611      	mov	r1, r2
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	4798      	blx	r3
  }

  return USBD_OK;
 8011edc:	2300      	movs	r3, #0
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3708      	adds	r7, #8
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}

08011ee6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011ee6:	b480      	push	{r7}
 8011ee8:	b083      	sub	sp, #12
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
 8011eee:	460b      	mov	r3, r1
 8011ef0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	78fa      	ldrb	r2, [r7, #3]
 8011ef6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011ef8:	2300      	movs	r3, #0
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	370c      	adds	r7, #12
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr

08011f06 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011f06:	b480      	push	{r7}
 8011f08:	b083      	sub	sp, #12
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2204      	movs	r2, #4
 8011f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011f22:	2300      	movs	r3, #0
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	370c      	adds	r7, #12
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr

08011f30 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f3e:	2b04      	cmp	r3, #4
 8011f40:	d105      	bne.n	8011f4e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011f4e:	2300      	movs	r3, #0
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	370c      	adds	r7, #12
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr

08011f5c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f6a:	2b03      	cmp	r3, #3
 8011f6c:	d10b      	bne.n	8011f86 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f74:	69db      	ldr	r3, [r3, #28]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d005      	beq.n	8011f86 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f80:	69db      	ldr	r3, [r3, #28]
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011f86:	2300      	movs	r3, #0
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3708      	adds	r7, #8
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	460b      	mov	r3, r1
 8011f9a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011f9c:	2300      	movs	r3, #0
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011faa:	b480      	push	{r7}
 8011fac:	b083      	sub	sp, #12
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011fb6:	2300      	movs	r3, #0
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr

08011fc4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b083      	sub	sp, #12
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011fcc:	2300      	movs	r3, #0
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	370c      	adds	r7, #12
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd8:	4770      	bx	lr

08011fda <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b082      	sub	sp, #8
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2201      	movs	r2, #1
 8011fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ff0:	685b      	ldr	r3, [r3, #4]
 8011ff2:	687a      	ldr	r2, [r7, #4]
 8011ff4:	6852      	ldr	r2, [r2, #4]
 8011ff6:	b2d2      	uxtb	r2, r2
 8011ff8:	4611      	mov	r1, r2
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	4798      	blx	r3

  return USBD_OK;
 8011ffe:	2300      	movs	r3, #0
}
 8012000:	4618      	mov	r0, r3
 8012002:	3708      	adds	r7, #8
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012012:	2300      	movs	r3, #0
 8012014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801201e:	2b40      	cmp	r3, #64	; 0x40
 8012020:	d005      	beq.n	801202e <USBD_StdDevReq+0x26>
 8012022:	2b40      	cmp	r3, #64	; 0x40
 8012024:	d84f      	bhi.n	80120c6 <USBD_StdDevReq+0xbe>
 8012026:	2b00      	cmp	r3, #0
 8012028:	d009      	beq.n	801203e <USBD_StdDevReq+0x36>
 801202a:	2b20      	cmp	r3, #32
 801202c:	d14b      	bne.n	80120c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012034:	689b      	ldr	r3, [r3, #8]
 8012036:	6839      	ldr	r1, [r7, #0]
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	4798      	blx	r3
      break;
 801203c:	e048      	b.n	80120d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	785b      	ldrb	r3, [r3, #1]
 8012042:	2b09      	cmp	r3, #9
 8012044:	d839      	bhi.n	80120ba <USBD_StdDevReq+0xb2>
 8012046:	a201      	add	r2, pc, #4	; (adr r2, 801204c <USBD_StdDevReq+0x44>)
 8012048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801204c:	0801209d 	.word	0x0801209d
 8012050:	080120b1 	.word	0x080120b1
 8012054:	080120bb 	.word	0x080120bb
 8012058:	080120a7 	.word	0x080120a7
 801205c:	080120bb 	.word	0x080120bb
 8012060:	0801207f 	.word	0x0801207f
 8012064:	08012075 	.word	0x08012075
 8012068:	080120bb 	.word	0x080120bb
 801206c:	08012093 	.word	0x08012093
 8012070:	08012089 	.word	0x08012089
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012074:	6839      	ldr	r1, [r7, #0]
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f000 f9dc 	bl	8012434 <USBD_GetDescriptor>
          break;
 801207c:	e022      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801207e:	6839      	ldr	r1, [r7, #0]
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f000 fb51 	bl	8012728 <USBD_SetAddress>
          break;
 8012086:	e01d      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012088:	6839      	ldr	r1, [r7, #0]
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f000 fb90 	bl	80127b0 <USBD_SetConfig>
          break;
 8012090:	e018      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012092:	6839      	ldr	r1, [r7, #0]
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f000 fc19 	bl	80128cc <USBD_GetConfig>
          break;
 801209a:	e013      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801209c:	6839      	ldr	r1, [r7, #0]
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f000 fc49 	bl	8012936 <USBD_GetStatus>
          break;
 80120a4:	e00e      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80120a6:	6839      	ldr	r1, [r7, #0]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f000 fc77 	bl	801299c <USBD_SetFeature>
          break;
 80120ae:	e009      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80120b0:	6839      	ldr	r1, [r7, #0]
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f000 fc86 	bl	80129c4 <USBD_ClrFeature>
          break;
 80120b8:	e004      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80120ba:	6839      	ldr	r1, [r7, #0]
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f000 fcdf 	bl	8012a80 <USBD_CtlError>
          break;
 80120c2:	bf00      	nop
      }
      break;
 80120c4:	e004      	b.n	80120d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80120c6:	6839      	ldr	r1, [r7, #0]
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 fcd9 	bl	8012a80 <USBD_CtlError>
      break;
 80120ce:	bf00      	nop
  }

  return ret;
 80120d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3710      	adds	r7, #16
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop

080120dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80120f2:	2b40      	cmp	r3, #64	; 0x40
 80120f4:	d005      	beq.n	8012102 <USBD_StdItfReq+0x26>
 80120f6:	2b40      	cmp	r3, #64	; 0x40
 80120f8:	d82e      	bhi.n	8012158 <USBD_StdItfReq+0x7c>
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d001      	beq.n	8012102 <USBD_StdItfReq+0x26>
 80120fe:	2b20      	cmp	r3, #32
 8012100:	d12a      	bne.n	8012158 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012108:	3b01      	subs	r3, #1
 801210a:	2b02      	cmp	r3, #2
 801210c:	d81d      	bhi.n	801214a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	889b      	ldrh	r3, [r3, #4]
 8012112:	b2db      	uxtb	r3, r3
 8012114:	2b01      	cmp	r3, #1
 8012116:	d813      	bhi.n	8012140 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801211e:	689b      	ldr	r3, [r3, #8]
 8012120:	6839      	ldr	r1, [r7, #0]
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	4798      	blx	r3
 8012126:	4603      	mov	r3, r0
 8012128:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	88db      	ldrh	r3, [r3, #6]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d110      	bne.n	8012154 <USBD_StdItfReq+0x78>
 8012132:	7bfb      	ldrb	r3, [r7, #15]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10d      	bne.n	8012154 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f000 fcf2 	bl	8012b22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801213e:	e009      	b.n	8012154 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8012140:	6839      	ldr	r1, [r7, #0]
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f000 fc9c 	bl	8012a80 <USBD_CtlError>
          break;
 8012148:	e004      	b.n	8012154 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 801214a:	6839      	ldr	r1, [r7, #0]
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f000 fc97 	bl	8012a80 <USBD_CtlError>
          break;
 8012152:	e000      	b.n	8012156 <USBD_StdItfReq+0x7a>
          break;
 8012154:	bf00      	nop
      }
      break;
 8012156:	e004      	b.n	8012162 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8012158:	6839      	ldr	r1, [r7, #0]
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f000 fc90 	bl	8012a80 <USBD_CtlError>
      break;
 8012160:	bf00      	nop
  }

  return USBD_OK;
 8012162:	2300      	movs	r3, #0
}
 8012164:	4618      	mov	r0, r3
 8012166:	3710      	adds	r7, #16
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012176:	2300      	movs	r3, #0
 8012178:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	889b      	ldrh	r3, [r3, #4]
 801217e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012188:	2b40      	cmp	r3, #64	; 0x40
 801218a:	d007      	beq.n	801219c <USBD_StdEPReq+0x30>
 801218c:	2b40      	cmp	r3, #64	; 0x40
 801218e:	f200 8146 	bhi.w	801241e <USBD_StdEPReq+0x2b2>
 8012192:	2b00      	cmp	r3, #0
 8012194:	d00a      	beq.n	80121ac <USBD_StdEPReq+0x40>
 8012196:	2b20      	cmp	r3, #32
 8012198:	f040 8141 	bne.w	801241e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	6839      	ldr	r1, [r7, #0]
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	4798      	blx	r3
      break;
 80121aa:	e13d      	b.n	8012428 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121b4:	2b20      	cmp	r3, #32
 80121b6:	d10a      	bne.n	80121ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121be:	689b      	ldr	r3, [r3, #8]
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	4798      	blx	r3
 80121c6:	4603      	mov	r3, r0
 80121c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80121ca:	7bfb      	ldrb	r3, [r7, #15]
 80121cc:	e12d      	b.n	801242a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	785b      	ldrb	r3, [r3, #1]
 80121d2:	2b03      	cmp	r3, #3
 80121d4:	d007      	beq.n	80121e6 <USBD_StdEPReq+0x7a>
 80121d6:	2b03      	cmp	r3, #3
 80121d8:	f300 811b 	bgt.w	8012412 <USBD_StdEPReq+0x2a6>
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d072      	beq.n	80122c6 <USBD_StdEPReq+0x15a>
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d03a      	beq.n	801225a <USBD_StdEPReq+0xee>
 80121e4:	e115      	b.n	8012412 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121ec:	2b02      	cmp	r3, #2
 80121ee:	d002      	beq.n	80121f6 <USBD_StdEPReq+0x8a>
 80121f0:	2b03      	cmp	r3, #3
 80121f2:	d015      	beq.n	8012220 <USBD_StdEPReq+0xb4>
 80121f4:	e02b      	b.n	801224e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80121f6:	7bbb      	ldrb	r3, [r7, #14]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00c      	beq.n	8012216 <USBD_StdEPReq+0xaa>
 80121fc:	7bbb      	ldrb	r3, [r7, #14]
 80121fe:	2b80      	cmp	r3, #128	; 0x80
 8012200:	d009      	beq.n	8012216 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012202:	7bbb      	ldrb	r3, [r7, #14]
 8012204:	4619      	mov	r1, r3
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f7f2 fed8 	bl	8004fbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801220c:	2180      	movs	r1, #128	; 0x80
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f7f2 fed4 	bl	8004fbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012214:	e020      	b.n	8012258 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8012216:	6839      	ldr	r1, [r7, #0]
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 fc31 	bl	8012a80 <USBD_CtlError>
              break;
 801221e:	e01b      	b.n	8012258 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	885b      	ldrh	r3, [r3, #2]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d10e      	bne.n	8012246 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8012228:	7bbb      	ldrb	r3, [r7, #14]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00b      	beq.n	8012246 <USBD_StdEPReq+0xda>
 801222e:	7bbb      	ldrb	r3, [r7, #14]
 8012230:	2b80      	cmp	r3, #128	; 0x80
 8012232:	d008      	beq.n	8012246 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	88db      	ldrh	r3, [r3, #6]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d104      	bne.n	8012246 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801223c:	7bbb      	ldrb	r3, [r7, #14]
 801223e:	4619      	mov	r1, r3
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f7f2 febb 	bl	8004fbc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 fc6b 	bl	8012b22 <USBD_CtlSendStatus>

              break;
 801224c:	e004      	b.n	8012258 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 801224e:	6839      	ldr	r1, [r7, #0]
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 fc15 	bl	8012a80 <USBD_CtlError>
              break;
 8012256:	bf00      	nop
          }
          break;
 8012258:	e0e0      	b.n	801241c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012260:	2b02      	cmp	r3, #2
 8012262:	d002      	beq.n	801226a <USBD_StdEPReq+0xfe>
 8012264:	2b03      	cmp	r3, #3
 8012266:	d015      	beq.n	8012294 <USBD_StdEPReq+0x128>
 8012268:	e026      	b.n	80122b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801226a:	7bbb      	ldrb	r3, [r7, #14]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d00c      	beq.n	801228a <USBD_StdEPReq+0x11e>
 8012270:	7bbb      	ldrb	r3, [r7, #14]
 8012272:	2b80      	cmp	r3, #128	; 0x80
 8012274:	d009      	beq.n	801228a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012276:	7bbb      	ldrb	r3, [r7, #14]
 8012278:	4619      	mov	r1, r3
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7f2 fe9e 	bl	8004fbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012280:	2180      	movs	r1, #128	; 0x80
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f7f2 fe9a 	bl	8004fbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012288:	e01c      	b.n	80122c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 801228a:	6839      	ldr	r1, [r7, #0]
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 fbf7 	bl	8012a80 <USBD_CtlError>
              break;
 8012292:	e017      	b.n	80122c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	885b      	ldrh	r3, [r3, #2]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d112      	bne.n	80122c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801229c:	7bbb      	ldrb	r3, [r7, #14]
 801229e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d004      	beq.n	80122b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80122a6:	7bbb      	ldrb	r3, [r7, #14]
 80122a8:	4619      	mov	r1, r3
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f7f2 fe99 	bl	8004fe2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 fc36 	bl	8012b22 <USBD_CtlSendStatus>
              }
              break;
 80122b6:	e004      	b.n	80122c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 fbe0 	bl	8012a80 <USBD_CtlError>
              break;
 80122c0:	e000      	b.n	80122c4 <USBD_StdEPReq+0x158>
              break;
 80122c2:	bf00      	nop
          }
          break;
 80122c4:	e0aa      	b.n	801241c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d002      	beq.n	80122d6 <USBD_StdEPReq+0x16a>
 80122d0:	2b03      	cmp	r3, #3
 80122d2:	d032      	beq.n	801233a <USBD_StdEPReq+0x1ce>
 80122d4:	e097      	b.n	8012406 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80122d6:	7bbb      	ldrb	r3, [r7, #14]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d007      	beq.n	80122ec <USBD_StdEPReq+0x180>
 80122dc:	7bbb      	ldrb	r3, [r7, #14]
 80122de:	2b80      	cmp	r3, #128	; 0x80
 80122e0:	d004      	beq.n	80122ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80122e2:	6839      	ldr	r1, [r7, #0]
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f000 fbcb 	bl	8012a80 <USBD_CtlError>
                break;
 80122ea:	e091      	b.n	8012410 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	da0b      	bge.n	801230c <USBD_StdEPReq+0x1a0>
 80122f4:	7bbb      	ldrb	r3, [r7, #14]
 80122f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80122fa:	4613      	mov	r3, r2
 80122fc:	009b      	lsls	r3, r3, #2
 80122fe:	4413      	add	r3, r2
 8012300:	009b      	lsls	r3, r3, #2
 8012302:	3310      	adds	r3, #16
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	4413      	add	r3, r2
 8012308:	3304      	adds	r3, #4
 801230a:	e00b      	b.n	8012324 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801230c:	7bbb      	ldrb	r3, [r7, #14]
 801230e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012312:	4613      	mov	r3, r2
 8012314:	009b      	lsls	r3, r3, #2
 8012316:	4413      	add	r3, r2
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	4413      	add	r3, r2
 8012322:	3304      	adds	r3, #4
 8012324:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	2200      	movs	r2, #0
 801232a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	2202      	movs	r2, #2
 8012330:	4619      	mov	r1, r3
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 fbb5 	bl	8012aa2 <USBD_CtlSendData>
              break;
 8012338:	e06a      	b.n	8012410 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801233a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801233e:	2b00      	cmp	r3, #0
 8012340:	da11      	bge.n	8012366 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012342:	7bbb      	ldrb	r3, [r7, #14]
 8012344:	f003 020f 	and.w	r2, r3, #15
 8012348:	6879      	ldr	r1, [r7, #4]
 801234a:	4613      	mov	r3, r2
 801234c:	009b      	lsls	r3, r3, #2
 801234e:	4413      	add	r3, r2
 8012350:	009b      	lsls	r3, r3, #2
 8012352:	440b      	add	r3, r1
 8012354:	3318      	adds	r3, #24
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d117      	bne.n	801238c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801235c:	6839      	ldr	r1, [r7, #0]
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 fb8e 	bl	8012a80 <USBD_CtlError>
                  break;
 8012364:	e054      	b.n	8012410 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012366:	7bbb      	ldrb	r3, [r7, #14]
 8012368:	f003 020f 	and.w	r2, r3, #15
 801236c:	6879      	ldr	r1, [r7, #4]
 801236e:	4613      	mov	r3, r2
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	4413      	add	r3, r2
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	440b      	add	r3, r1
 8012378:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d104      	bne.n	801238c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8012382:	6839      	ldr	r1, [r7, #0]
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f000 fb7b 	bl	8012a80 <USBD_CtlError>
                  break;
 801238a:	e041      	b.n	8012410 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801238c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012390:	2b00      	cmp	r3, #0
 8012392:	da0b      	bge.n	80123ac <USBD_StdEPReq+0x240>
 8012394:	7bbb      	ldrb	r3, [r7, #14]
 8012396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801239a:	4613      	mov	r3, r2
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	4413      	add	r3, r2
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	3310      	adds	r3, #16
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	4413      	add	r3, r2
 80123a8:	3304      	adds	r3, #4
 80123aa:	e00b      	b.n	80123c4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80123ac:	7bbb      	ldrb	r3, [r7, #14]
 80123ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80123b2:	4613      	mov	r3, r2
 80123b4:	009b      	lsls	r3, r3, #2
 80123b6:	4413      	add	r3, r2
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80123be:	687a      	ldr	r2, [r7, #4]
 80123c0:	4413      	add	r3, r2
 80123c2:	3304      	adds	r3, #4
 80123c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80123c6:	7bbb      	ldrb	r3, [r7, #14]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d002      	beq.n	80123d2 <USBD_StdEPReq+0x266>
 80123cc:	7bbb      	ldrb	r3, [r7, #14]
 80123ce:	2b80      	cmp	r3, #128	; 0x80
 80123d0:	d103      	bne.n	80123da <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	2200      	movs	r2, #0
 80123d6:	601a      	str	r2, [r3, #0]
 80123d8:	e00e      	b.n	80123f8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80123da:	7bbb      	ldrb	r3, [r7, #14]
 80123dc:	4619      	mov	r1, r3
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f7f2 fe12 	bl	8005008 <USBD_LL_IsStallEP>
 80123e4:	4603      	mov	r3, r0
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d003      	beq.n	80123f2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	2201      	movs	r2, #1
 80123ee:	601a      	str	r2, [r3, #0]
 80123f0:	e002      	b.n	80123f8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	2200      	movs	r2, #0
 80123f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	2202      	movs	r2, #2
 80123fc:	4619      	mov	r1, r3
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 fb4f 	bl	8012aa2 <USBD_CtlSendData>
              break;
 8012404:	e004      	b.n	8012410 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8012406:	6839      	ldr	r1, [r7, #0]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fb39 	bl	8012a80 <USBD_CtlError>
              break;
 801240e:	bf00      	nop
          }
          break;
 8012410:	e004      	b.n	801241c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8012412:	6839      	ldr	r1, [r7, #0]
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 fb33 	bl	8012a80 <USBD_CtlError>
          break;
 801241a:	bf00      	nop
      }
      break;
 801241c:	e004      	b.n	8012428 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 801241e:	6839      	ldr	r1, [r7, #0]
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f000 fb2d 	bl	8012a80 <USBD_CtlError>
      break;
 8012426:	bf00      	nop
  }

  return ret;
 8012428:	7bfb      	ldrb	r3, [r7, #15]
}
 801242a:	4618      	mov	r0, r3
 801242c:	3710      	adds	r7, #16
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
	...

08012434 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801243e:	2300      	movs	r3, #0
 8012440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012442:	2300      	movs	r3, #0
 8012444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012446:	2300      	movs	r3, #0
 8012448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	885b      	ldrh	r3, [r3, #2]
 801244e:	0a1b      	lsrs	r3, r3, #8
 8012450:	b29b      	uxth	r3, r3
 8012452:	3b01      	subs	r3, #1
 8012454:	2b06      	cmp	r3, #6
 8012456:	f200 813b 	bhi.w	80126d0 <USBD_GetDescriptor+0x29c>
 801245a:	a201      	add	r2, pc, #4	; (adr r2, 8012460 <USBD_GetDescriptor+0x2c>)
 801245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012460:	0801247d 	.word	0x0801247d
 8012464:	08012495 	.word	0x08012495
 8012468:	080124d5 	.word	0x080124d5
 801246c:	080126d1 	.word	0x080126d1
 8012470:	080126d1 	.word	0x080126d1
 8012474:	08012671 	.word	0x08012671
 8012478:	0801269d 	.word	0x0801269d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	7c12      	ldrb	r2, [r2, #16]
 8012488:	f107 0108 	add.w	r1, r7, #8
 801248c:	4610      	mov	r0, r2
 801248e:	4798      	blx	r3
 8012490:	60f8      	str	r0, [r7, #12]
      break;
 8012492:	e125      	b.n	80126e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	7c1b      	ldrb	r3, [r3, #16]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d10d      	bne.n	80124b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124a4:	f107 0208 	add.w	r2, r7, #8
 80124a8:	4610      	mov	r0, r2
 80124aa:	4798      	blx	r3
 80124ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	3301      	adds	r3, #1
 80124b2:	2202      	movs	r2, #2
 80124b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80124b6:	e113      	b.n	80126e0 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124c0:	f107 0208 	add.w	r2, r7, #8
 80124c4:	4610      	mov	r0, r2
 80124c6:	4798      	blx	r3
 80124c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	3301      	adds	r3, #1
 80124ce:	2202      	movs	r2, #2
 80124d0:	701a      	strb	r2, [r3, #0]
      break;
 80124d2:	e105      	b.n	80126e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	885b      	ldrh	r3, [r3, #2]
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	2b05      	cmp	r3, #5
 80124dc:	f200 80ac 	bhi.w	8012638 <USBD_GetDescriptor+0x204>
 80124e0:	a201      	add	r2, pc, #4	; (adr r2, 80124e8 <USBD_GetDescriptor+0xb4>)
 80124e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124e6:	bf00      	nop
 80124e8:	08012501 	.word	0x08012501
 80124ec:	08012535 	.word	0x08012535
 80124f0:	08012569 	.word	0x08012569
 80124f4:	0801259d 	.word	0x0801259d
 80124f8:	080125d1 	.word	0x080125d1
 80124fc:	08012605 	.word	0x08012605
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d00b      	beq.n	8012524 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012512:	685b      	ldr	r3, [r3, #4]
 8012514:	687a      	ldr	r2, [r7, #4]
 8012516:	7c12      	ldrb	r2, [r2, #16]
 8012518:	f107 0108 	add.w	r1, r7, #8
 801251c:	4610      	mov	r0, r2
 801251e:	4798      	blx	r3
 8012520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012522:	e0a4      	b.n	801266e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8012524:	6839      	ldr	r1, [r7, #0]
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f000 faaa 	bl	8012a80 <USBD_CtlError>
            err++;
 801252c:	7afb      	ldrb	r3, [r7, #11]
 801252e:	3301      	adds	r3, #1
 8012530:	72fb      	strb	r3, [r7, #11]
          break;
 8012532:	e09c      	b.n	801266e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d00b      	beq.n	8012558 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012546:	689b      	ldr	r3, [r3, #8]
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	7c12      	ldrb	r2, [r2, #16]
 801254c:	f107 0108 	add.w	r1, r7, #8
 8012550:	4610      	mov	r0, r2
 8012552:	4798      	blx	r3
 8012554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012556:	e08a      	b.n	801266e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8012558:	6839      	ldr	r1, [r7, #0]
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f000 fa90 	bl	8012a80 <USBD_CtlError>
            err++;
 8012560:	7afb      	ldrb	r3, [r7, #11]
 8012562:	3301      	adds	r3, #1
 8012564:	72fb      	strb	r3, [r7, #11]
          break;
 8012566:	e082      	b.n	801266e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d00b      	beq.n	801258c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801257a:	68db      	ldr	r3, [r3, #12]
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	7c12      	ldrb	r2, [r2, #16]
 8012580:	f107 0108 	add.w	r1, r7, #8
 8012584:	4610      	mov	r0, r2
 8012586:	4798      	blx	r3
 8012588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801258a:	e070      	b.n	801266e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 801258c:	6839      	ldr	r1, [r7, #0]
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 fa76 	bl	8012a80 <USBD_CtlError>
            err++;
 8012594:	7afb      	ldrb	r3, [r7, #11]
 8012596:	3301      	adds	r3, #1
 8012598:	72fb      	strb	r3, [r7, #11]
          break;
 801259a:	e068      	b.n	801266e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80125a2:	691b      	ldr	r3, [r3, #16]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00b      	beq.n	80125c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80125ae:	691b      	ldr	r3, [r3, #16]
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	7c12      	ldrb	r2, [r2, #16]
 80125b4:	f107 0108 	add.w	r1, r7, #8
 80125b8:	4610      	mov	r0, r2
 80125ba:	4798      	blx	r3
 80125bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80125be:	e056      	b.n	801266e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80125c0:	6839      	ldr	r1, [r7, #0]
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f000 fa5c 	bl	8012a80 <USBD_CtlError>
            err++;
 80125c8:	7afb      	ldrb	r3, [r7, #11]
 80125ca:	3301      	adds	r3, #1
 80125cc:	72fb      	strb	r3, [r7, #11]
          break;
 80125ce:	e04e      	b.n	801266e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80125d6:	695b      	ldr	r3, [r3, #20]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00b      	beq.n	80125f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80125e2:	695b      	ldr	r3, [r3, #20]
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	7c12      	ldrb	r2, [r2, #16]
 80125e8:	f107 0108 	add.w	r1, r7, #8
 80125ec:	4610      	mov	r0, r2
 80125ee:	4798      	blx	r3
 80125f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80125f2:	e03c      	b.n	801266e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80125f4:	6839      	ldr	r1, [r7, #0]
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f000 fa42 	bl	8012a80 <USBD_CtlError>
            err++;
 80125fc:	7afb      	ldrb	r3, [r7, #11]
 80125fe:	3301      	adds	r3, #1
 8012600:	72fb      	strb	r3, [r7, #11]
          break;
 8012602:	e034      	b.n	801266e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801260a:	699b      	ldr	r3, [r3, #24]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d00b      	beq.n	8012628 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012616:	699b      	ldr	r3, [r3, #24]
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	7c12      	ldrb	r2, [r2, #16]
 801261c:	f107 0108 	add.w	r1, r7, #8
 8012620:	4610      	mov	r0, r2
 8012622:	4798      	blx	r3
 8012624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012626:	e022      	b.n	801266e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8012628:	6839      	ldr	r1, [r7, #0]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 fa28 	bl	8012a80 <USBD_CtlError>
            err++;
 8012630:	7afb      	ldrb	r3, [r7, #11]
 8012632:	3301      	adds	r3, #1
 8012634:	72fb      	strb	r3, [r7, #11]
          break;
 8012636:	e01a      	b.n	801266e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012640:	2b00      	cmp	r3, #0
 8012642:	d00c      	beq.n	801265e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801264c:	683a      	ldr	r2, [r7, #0]
 801264e:	8852      	ldrh	r2, [r2, #2]
 8012650:	b2d1      	uxtb	r1, r2
 8012652:	f107 0208 	add.w	r2, r7, #8
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	4798      	blx	r3
 801265a:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801265c:	e006      	b.n	801266c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 801265e:	6839      	ldr	r1, [r7, #0]
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 fa0d 	bl	8012a80 <USBD_CtlError>
            err++;
 8012666:	7afb      	ldrb	r3, [r7, #11]
 8012668:	3301      	adds	r3, #1
 801266a:	72fb      	strb	r3, [r7, #11]
          break;
 801266c:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 801266e:	e037      	b.n	80126e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	7c1b      	ldrb	r3, [r3, #16]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d109      	bne.n	801268c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012680:	f107 0208 	add.w	r2, r7, #8
 8012684:	4610      	mov	r0, r2
 8012686:	4798      	blx	r3
 8012688:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801268a:	e029      	b.n	80126e0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 801268c:	6839      	ldr	r1, [r7, #0]
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f000 f9f6 	bl	8012a80 <USBD_CtlError>
        err++;
 8012694:	7afb      	ldrb	r3, [r7, #11]
 8012696:	3301      	adds	r3, #1
 8012698:	72fb      	strb	r3, [r7, #11]
      break;
 801269a:	e021      	b.n	80126e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	7c1b      	ldrb	r3, [r3, #16]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d10d      	bne.n	80126c0 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126ac:	f107 0208 	add.w	r2, r7, #8
 80126b0:	4610      	mov	r0, r2
 80126b2:	4798      	blx	r3
 80126b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	3301      	adds	r3, #1
 80126ba:	2207      	movs	r2, #7
 80126bc:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80126be:	e00f      	b.n	80126e0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80126c0:	6839      	ldr	r1, [r7, #0]
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f000 f9dc 	bl	8012a80 <USBD_CtlError>
        err++;
 80126c8:	7afb      	ldrb	r3, [r7, #11]
 80126ca:	3301      	adds	r3, #1
 80126cc:	72fb      	strb	r3, [r7, #11]
      break;
 80126ce:	e007      	b.n	80126e0 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80126d0:	6839      	ldr	r1, [r7, #0]
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f000 f9d4 	bl	8012a80 <USBD_CtlError>
      err++;
 80126d8:	7afb      	ldrb	r3, [r7, #11]
 80126da:	3301      	adds	r3, #1
 80126dc:	72fb      	strb	r3, [r7, #11]
      break;
 80126de:	bf00      	nop
  }

  if (err != 0U)
 80126e0:	7afb      	ldrb	r3, [r7, #11]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d11c      	bne.n	8012720 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80126e6:	893b      	ldrh	r3, [r7, #8]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d011      	beq.n	8012710 <USBD_GetDescriptor+0x2dc>
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	88db      	ldrh	r3, [r3, #6]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d00d      	beq.n	8012710 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	88da      	ldrh	r2, [r3, #6]
 80126f8:	893b      	ldrh	r3, [r7, #8]
 80126fa:	4293      	cmp	r3, r2
 80126fc:	bf28      	it	cs
 80126fe:	4613      	movcs	r3, r2
 8012700:	b29b      	uxth	r3, r3
 8012702:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012704:	893b      	ldrh	r3, [r7, #8]
 8012706:	461a      	mov	r2, r3
 8012708:	68f9      	ldr	r1, [r7, #12]
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 f9c9 	bl	8012aa2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	88db      	ldrh	r3, [r3, #6]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d104      	bne.n	8012722 <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 fa02 	bl	8012b22 <USBD_CtlSendStatus>
 801271e:	e000      	b.n	8012722 <USBD_GetDescriptor+0x2ee>
    return;
 8012720:	bf00      	nop
    }
  }
}
 8012722:	3710      	adds	r7, #16
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}

08012728 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b084      	sub	sp, #16
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	889b      	ldrh	r3, [r3, #4]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d130      	bne.n	801279c <USBD_SetAddress+0x74>
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	88db      	ldrh	r3, [r3, #6]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d12c      	bne.n	801279c <USBD_SetAddress+0x74>
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	885b      	ldrh	r3, [r3, #2]
 8012746:	2b7f      	cmp	r3, #127	; 0x7f
 8012748:	d828      	bhi.n	801279c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	885b      	ldrh	r3, [r3, #2]
 801274e:	b2db      	uxtb	r3, r3
 8012750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012754:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801275c:	2b03      	cmp	r3, #3
 801275e:	d104      	bne.n	801276a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012760:	6839      	ldr	r1, [r7, #0]
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f000 f98c 	bl	8012a80 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012768:	e01d      	b.n	80127a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	7bfa      	ldrb	r2, [r7, #15]
 801276e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012772:	7bfb      	ldrb	r3, [r7, #15]
 8012774:	4619      	mov	r1, r3
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f7f2 fc72 	bl	8005060 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 f9d0 	bl	8012b22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012782:	7bfb      	ldrb	r3, [r7, #15]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d004      	beq.n	8012792 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2202      	movs	r2, #2
 801278c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012790:	e009      	b.n	80127a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2201      	movs	r2, #1
 8012796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801279a:	e004      	b.n	80127a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801279c:	6839      	ldr	r1, [r7, #0]
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f000 f96e 	bl	8012a80 <USBD_CtlError>
  }
}
 80127a4:	bf00      	nop
 80127a6:	bf00      	nop
 80127a8:	3710      	adds	r7, #16
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
	...

080127b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	885b      	ldrh	r3, [r3, #2]
 80127be:	b2da      	uxtb	r2, r3
 80127c0:	4b41      	ldr	r3, [pc, #260]	; (80128c8 <USBD_SetConfig+0x118>)
 80127c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80127c4:	4b40      	ldr	r3, [pc, #256]	; (80128c8 <USBD_SetConfig+0x118>)
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	2b01      	cmp	r3, #1
 80127ca:	d904      	bls.n	80127d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80127cc:	6839      	ldr	r1, [r7, #0]
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 f956 	bl	8012a80 <USBD_CtlError>
 80127d4:	e075      	b.n	80128c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127dc:	2b02      	cmp	r3, #2
 80127de:	d002      	beq.n	80127e6 <USBD_SetConfig+0x36>
 80127e0:	2b03      	cmp	r3, #3
 80127e2:	d023      	beq.n	801282c <USBD_SetConfig+0x7c>
 80127e4:	e062      	b.n	80128ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80127e6:	4b38      	ldr	r3, [pc, #224]	; (80128c8 <USBD_SetConfig+0x118>)
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d01a      	beq.n	8012824 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80127ee:	4b36      	ldr	r3, [pc, #216]	; (80128c8 <USBD_SetConfig+0x118>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	461a      	mov	r2, r3
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2203      	movs	r2, #3
 80127fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8012800:	4b31      	ldr	r3, [pc, #196]	; (80128c8 <USBD_SetConfig+0x118>)
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	4619      	mov	r1, r3
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f7ff f997 	bl	8011b3a <USBD_SetClassConfig>
 801280c:	4603      	mov	r3, r0
 801280e:	2b02      	cmp	r3, #2
 8012810:	d104      	bne.n	801281c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8012812:	6839      	ldr	r1, [r7, #0]
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f000 f933 	bl	8012a80 <USBD_CtlError>
            return;
 801281a:	e052      	b.n	80128c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f000 f980 	bl	8012b22 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8012822:	e04e      	b.n	80128c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f000 f97c 	bl	8012b22 <USBD_CtlSendStatus>
        break;
 801282a:	e04a      	b.n	80128c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801282c:	4b26      	ldr	r3, [pc, #152]	; (80128c8 <USBD_SetConfig+0x118>)
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d112      	bne.n	801285a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2202      	movs	r2, #2
 8012838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801283c:	4b22      	ldr	r3, [pc, #136]	; (80128c8 <USBD_SetConfig+0x118>)
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	461a      	mov	r2, r3
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8012846:	4b20      	ldr	r3, [pc, #128]	; (80128c8 <USBD_SetConfig+0x118>)
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	4619      	mov	r1, r3
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	f7ff f993 	bl	8011b78 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f000 f965 	bl	8012b22 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8012858:	e033      	b.n	80128c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801285a:	4b1b      	ldr	r3, [pc, #108]	; (80128c8 <USBD_SetConfig+0x118>)
 801285c:	781b      	ldrb	r3, [r3, #0]
 801285e:	461a      	mov	r2, r3
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	429a      	cmp	r2, r3
 8012866:	d01d      	beq.n	80128a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	685b      	ldr	r3, [r3, #4]
 801286c:	b2db      	uxtb	r3, r3
 801286e:	4619      	mov	r1, r3
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f7ff f981 	bl	8011b78 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8012876:	4b14      	ldr	r3, [pc, #80]	; (80128c8 <USBD_SetConfig+0x118>)
 8012878:	781b      	ldrb	r3, [r3, #0]
 801287a:	461a      	mov	r2, r3
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8012880:	4b11      	ldr	r3, [pc, #68]	; (80128c8 <USBD_SetConfig+0x118>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	4619      	mov	r1, r3
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7ff f957 	bl	8011b3a <USBD_SetClassConfig>
 801288c:	4603      	mov	r3, r0
 801288e:	2b02      	cmp	r3, #2
 8012890:	d104      	bne.n	801289c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8012892:	6839      	ldr	r1, [r7, #0]
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f000 f8f3 	bl	8012a80 <USBD_CtlError>
            return;
 801289a:	e012      	b.n	80128c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f000 f940 	bl	8012b22 <USBD_CtlSendStatus>
        break;
 80128a2:	e00e      	b.n	80128c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f000 f93c 	bl	8012b22 <USBD_CtlSendStatus>
        break;
 80128aa:	e00a      	b.n	80128c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80128ac:	6839      	ldr	r1, [r7, #0]
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f000 f8e6 	bl	8012a80 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80128b4:	4b04      	ldr	r3, [pc, #16]	; (80128c8 <USBD_SetConfig+0x118>)
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	4619      	mov	r1, r3
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f7ff f95c 	bl	8011b78 <USBD_ClrClassConfig>
        break;
 80128c0:	bf00      	nop
    }
  }
}
 80128c2:	3708      	adds	r7, #8
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	2000098c 	.word	0x2000098c

080128cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	88db      	ldrh	r3, [r3, #6]
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d004      	beq.n	80128e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80128de:	6839      	ldr	r1, [r7, #0]
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f000 f8cd 	bl	8012a80 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80128e6:	e022      	b.n	801292e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128ee:	2b02      	cmp	r3, #2
 80128f0:	dc02      	bgt.n	80128f8 <USBD_GetConfig+0x2c>
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	dc03      	bgt.n	80128fe <USBD_GetConfig+0x32>
 80128f6:	e015      	b.n	8012924 <USBD_GetConfig+0x58>
 80128f8:	2b03      	cmp	r3, #3
 80128fa:	d00b      	beq.n	8012914 <USBD_GetConfig+0x48>
 80128fc:	e012      	b.n	8012924 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2200      	movs	r2, #0
 8012902:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	3308      	adds	r3, #8
 8012908:	2201      	movs	r2, #1
 801290a:	4619      	mov	r1, r3
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f000 f8c8 	bl	8012aa2 <USBD_CtlSendData>
        break;
 8012912:	e00c      	b.n	801292e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	3304      	adds	r3, #4
 8012918:	2201      	movs	r2, #1
 801291a:	4619      	mov	r1, r3
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 f8c0 	bl	8012aa2 <USBD_CtlSendData>
        break;
 8012922:	e004      	b.n	801292e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8012924:	6839      	ldr	r1, [r7, #0]
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f000 f8aa 	bl	8012a80 <USBD_CtlError>
        break;
 801292c:	bf00      	nop
}
 801292e:	bf00      	nop
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012936:	b580      	push	{r7, lr}
 8012938:	b082      	sub	sp, #8
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
 801293e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012946:	3b01      	subs	r3, #1
 8012948:	2b02      	cmp	r3, #2
 801294a:	d81e      	bhi.n	801298a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	88db      	ldrh	r3, [r3, #6]
 8012950:	2b02      	cmp	r3, #2
 8012952:	d004      	beq.n	801295e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8012954:	6839      	ldr	r1, [r7, #0]
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f000 f892 	bl	8012a80 <USBD_CtlError>
        break;
 801295c:	e01a      	b.n	8012994 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2201      	movs	r2, #1
 8012962:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801296a:	2b00      	cmp	r3, #0
 801296c:	d005      	beq.n	801297a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	68db      	ldr	r3, [r3, #12]
 8012972:	f043 0202 	orr.w	r2, r3, #2
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	330c      	adds	r3, #12
 801297e:	2202      	movs	r2, #2
 8012980:	4619      	mov	r1, r3
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f000 f88d 	bl	8012aa2 <USBD_CtlSendData>
      break;
 8012988:	e004      	b.n	8012994 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801298a:	6839      	ldr	r1, [r7, #0]
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f000 f877 	bl	8012a80 <USBD_CtlError>
      break;
 8012992:	bf00      	nop
  }
}
 8012994:	bf00      	nop
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b082      	sub	sp, #8
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	885b      	ldrh	r3, [r3, #2]
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	d106      	bne.n	80129bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2201      	movs	r2, #1
 80129b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f000 f8b3 	bl	8012b22 <USBD_CtlSendStatus>
  }
}
 80129bc:	bf00      	nop
 80129be:	3708      	adds	r7, #8
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129d4:	3b01      	subs	r3, #1
 80129d6:	2b02      	cmp	r3, #2
 80129d8:	d80b      	bhi.n	80129f2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	885b      	ldrh	r3, [r3, #2]
 80129de:	2b01      	cmp	r3, #1
 80129e0:	d10c      	bne.n	80129fc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2200      	movs	r2, #0
 80129e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f000 f899 	bl	8012b22 <USBD_CtlSendStatus>
      }
      break;
 80129f0:	e004      	b.n	80129fc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80129f2:	6839      	ldr	r1, [r7, #0]
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 f843 	bl	8012a80 <USBD_CtlError>
      break;
 80129fa:	e000      	b.n	80129fe <USBD_ClrFeature+0x3a>
      break;
 80129fc:	bf00      	nop
  }
}
 80129fe:	bf00      	nop
 8012a00:	3708      	adds	r7, #8
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012a06:	b480      	push	{r7}
 8012a08:	b083      	sub	sp, #12
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
 8012a0e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	781a      	ldrb	r2, [r3, #0]
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	785a      	ldrb	r2, [r3, #1]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	3302      	adds	r3, #2
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	b29a      	uxth	r2, r3
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	3303      	adds	r3, #3
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	b29b      	uxth	r3, r3
 8012a30:	021b      	lsls	r3, r3, #8
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	4413      	add	r3, r2
 8012a36:	b29a      	uxth	r2, r3
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	3304      	adds	r3, #4
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	b29a      	uxth	r2, r3
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	3305      	adds	r3, #5
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	021b      	lsls	r3, r3, #8
 8012a4e:	b29b      	uxth	r3, r3
 8012a50:	4413      	add	r3, r2
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	3306      	adds	r3, #6
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	b29a      	uxth	r2, r3
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	3307      	adds	r3, #7
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	021b      	lsls	r3, r3, #8
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	4413      	add	r3, r2
 8012a6e:	b29a      	uxth	r2, r3
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	80da      	strh	r2, [r3, #6]

}
 8012a74:	bf00      	nop
 8012a76:	370c      	adds	r7, #12
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7e:	4770      	bx	lr

08012a80 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8012a8a:	2180      	movs	r1, #128	; 0x80
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f7f2 fa95 	bl	8004fbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8012a92:	2100      	movs	r1, #0
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f7f2 fa91 	bl	8004fbc <USBD_LL_StallEP>
}
 8012a9a:	bf00      	nop
 8012a9c:	3708      	adds	r7, #8
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}

08012aa2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8012aa2:	b580      	push	{r7, lr}
 8012aa4:	b084      	sub	sp, #16
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	60f8      	str	r0, [r7, #12]
 8012aaa:	60b9      	str	r1, [r7, #8]
 8012aac:	4613      	mov	r3, r2
 8012aae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	2202      	movs	r2, #2
 8012ab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012ab8:	88fa      	ldrh	r2, [r7, #6]
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8012abe:	88fa      	ldrh	r2, [r7, #6]
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ac4:	88fb      	ldrh	r3, [r7, #6]
 8012ac6:	68ba      	ldr	r2, [r7, #8]
 8012ac8:	2100      	movs	r1, #0
 8012aca:	68f8      	ldr	r0, [r7, #12]
 8012acc:	f7f2 fadb 	bl	8005086 <USBD_LL_Transmit>

  return USBD_OK;
 8012ad0:	2300      	movs	r3, #0
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3710      	adds	r7, #16
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8012ada:	b580      	push	{r7, lr}
 8012adc:	b084      	sub	sp, #16
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	60f8      	str	r0, [r7, #12]
 8012ae2:	60b9      	str	r1, [r7, #8]
 8012ae4:	4613      	mov	r3, r2
 8012ae6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ae8:	88fb      	ldrh	r3, [r7, #6]
 8012aea:	68ba      	ldr	r2, [r7, #8]
 8012aec:	2100      	movs	r1, #0
 8012aee:	68f8      	ldr	r0, [r7, #12]
 8012af0:	f7f2 fac9 	bl	8005086 <USBD_LL_Transmit>

  return USBD_OK;
 8012af4:	2300      	movs	r3, #0
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3710      	adds	r7, #16
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}

08012afe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b084      	sub	sp, #16
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	60f8      	str	r0, [r7, #12]
 8012b06:	60b9      	str	r1, [r7, #8]
 8012b08:	4613      	mov	r3, r2
 8012b0a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012b0c:	88fb      	ldrh	r3, [r7, #6]
 8012b0e:	68ba      	ldr	r2, [r7, #8]
 8012b10:	2100      	movs	r1, #0
 8012b12:	68f8      	ldr	r0, [r7, #12]
 8012b14:	f7f2 face 	bl	80050b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b18:	2300      	movs	r3, #0
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3710      	adds	r7, #16
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}

08012b22 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012b22:	b580      	push	{r7, lr}
 8012b24:	b082      	sub	sp, #8
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2204      	movs	r2, #4
 8012b2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012b32:	2300      	movs	r3, #0
 8012b34:	2200      	movs	r2, #0
 8012b36:	2100      	movs	r1, #0
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f7f2 faa4 	bl	8005086 <USBD_LL_Transmit>

  return USBD_OK;
 8012b3e:	2300      	movs	r3, #0
}
 8012b40:	4618      	mov	r0, r3
 8012b42:	3708      	adds	r7, #8
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2205      	movs	r2, #5
 8012b54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012b58:	2300      	movs	r3, #0
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f7f2 faa8 	bl	80050b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b64:	2300      	movs	r3, #0
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3708      	adds	r7, #8
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
	...

08012b70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b084      	sub	sp, #16
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	4603      	mov	r3, r0
 8012b78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012b7a:	79fb      	ldrb	r3, [r7, #7]
 8012b7c:	4a08      	ldr	r2, [pc, #32]	; (8012ba0 <disk_status+0x30>)
 8012b7e:	009b      	lsls	r3, r3, #2
 8012b80:	4413      	add	r3, r2
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	79fa      	ldrb	r2, [r7, #7]
 8012b88:	4905      	ldr	r1, [pc, #20]	; (8012ba0 <disk_status+0x30>)
 8012b8a:	440a      	add	r2, r1
 8012b8c:	7a12      	ldrb	r2, [r2, #8]
 8012b8e:	4610      	mov	r0, r2
 8012b90:	4798      	blx	r3
 8012b92:	4603      	mov	r3, r0
 8012b94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3710      	adds	r7, #16
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	20000cd8 	.word	0x20000cd8

08012ba4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b084      	sub	sp, #16
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	4603      	mov	r3, r0
 8012bac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012bb2:	79fb      	ldrb	r3, [r7, #7]
 8012bb4:	4a0d      	ldr	r2, [pc, #52]	; (8012bec <disk_initialize+0x48>)
 8012bb6:	5cd3      	ldrb	r3, [r2, r3]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d111      	bne.n	8012be0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012bbc:	79fb      	ldrb	r3, [r7, #7]
 8012bbe:	4a0b      	ldr	r2, [pc, #44]	; (8012bec <disk_initialize+0x48>)
 8012bc0:	2101      	movs	r1, #1
 8012bc2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012bc4:	79fb      	ldrb	r3, [r7, #7]
 8012bc6:	4a09      	ldr	r2, [pc, #36]	; (8012bec <disk_initialize+0x48>)
 8012bc8:	009b      	lsls	r3, r3, #2
 8012bca:	4413      	add	r3, r2
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	79fa      	ldrb	r2, [r7, #7]
 8012bd2:	4906      	ldr	r1, [pc, #24]	; (8012bec <disk_initialize+0x48>)
 8012bd4:	440a      	add	r2, r1
 8012bd6:	7a12      	ldrb	r2, [r2, #8]
 8012bd8:	4610      	mov	r0, r2
 8012bda:	4798      	blx	r3
 8012bdc:	4603      	mov	r3, r0
 8012bde:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3710      	adds	r7, #16
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	20000cd8 	.word	0x20000cd8

08012bf0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012bf0:	b590      	push	{r4, r7, lr}
 8012bf2:	b087      	sub	sp, #28
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	60b9      	str	r1, [r7, #8]
 8012bf8:	607a      	str	r2, [r7, #4]
 8012bfa:	603b      	str	r3, [r7, #0]
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012c00:	7bfb      	ldrb	r3, [r7, #15]
 8012c02:	4a0a      	ldr	r2, [pc, #40]	; (8012c2c <disk_read+0x3c>)
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	4413      	add	r3, r2
 8012c08:	685b      	ldr	r3, [r3, #4]
 8012c0a:	689c      	ldr	r4, [r3, #8]
 8012c0c:	7bfb      	ldrb	r3, [r7, #15]
 8012c0e:	4a07      	ldr	r2, [pc, #28]	; (8012c2c <disk_read+0x3c>)
 8012c10:	4413      	add	r3, r2
 8012c12:	7a18      	ldrb	r0, [r3, #8]
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	68b9      	ldr	r1, [r7, #8]
 8012c1a:	47a0      	blx	r4
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	371c      	adds	r7, #28
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd90      	pop	{r4, r7, pc}
 8012c2a:	bf00      	nop
 8012c2c:	20000cd8 	.word	0x20000cd8

08012c30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012c30:	b590      	push	{r4, r7, lr}
 8012c32:	b087      	sub	sp, #28
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	60b9      	str	r1, [r7, #8]
 8012c38:	607a      	str	r2, [r7, #4]
 8012c3a:	603b      	str	r3, [r7, #0]
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012c40:	7bfb      	ldrb	r3, [r7, #15]
 8012c42:	4a0a      	ldr	r2, [pc, #40]	; (8012c6c <disk_write+0x3c>)
 8012c44:	009b      	lsls	r3, r3, #2
 8012c46:	4413      	add	r3, r2
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	68dc      	ldr	r4, [r3, #12]
 8012c4c:	7bfb      	ldrb	r3, [r7, #15]
 8012c4e:	4a07      	ldr	r2, [pc, #28]	; (8012c6c <disk_write+0x3c>)
 8012c50:	4413      	add	r3, r2
 8012c52:	7a18      	ldrb	r0, [r3, #8]
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	687a      	ldr	r2, [r7, #4]
 8012c58:	68b9      	ldr	r1, [r7, #8]
 8012c5a:	47a0      	blx	r4
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	371c      	adds	r7, #28
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd90      	pop	{r4, r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	20000cd8 	.word	0x20000cd8

08012c70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	4603      	mov	r3, r0
 8012c78:	603a      	str	r2, [r7, #0]
 8012c7a:	71fb      	strb	r3, [r7, #7]
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012c80:	79fb      	ldrb	r3, [r7, #7]
 8012c82:	4a09      	ldr	r2, [pc, #36]	; (8012ca8 <disk_ioctl+0x38>)
 8012c84:	009b      	lsls	r3, r3, #2
 8012c86:	4413      	add	r3, r2
 8012c88:	685b      	ldr	r3, [r3, #4]
 8012c8a:	691b      	ldr	r3, [r3, #16]
 8012c8c:	79fa      	ldrb	r2, [r7, #7]
 8012c8e:	4906      	ldr	r1, [pc, #24]	; (8012ca8 <disk_ioctl+0x38>)
 8012c90:	440a      	add	r2, r1
 8012c92:	7a10      	ldrb	r0, [r2, #8]
 8012c94:	79b9      	ldrb	r1, [r7, #6]
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	4798      	blx	r3
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	73fb      	strb	r3, [r7, #15]
  return res;
 8012c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3710      	adds	r7, #16
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	20000cd8 	.word	0x20000cd8

08012cac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8012cac:	b480      	push	{r7}
 8012cae:	af00      	add	r7, sp, #0
  return 0;
 8012cb0:	2300      	movs	r3, #0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cba:	4770      	bx	lr

08012cbc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b085      	sub	sp, #20
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012ccc:	89fb      	ldrh	r3, [r7, #14]
 8012cce:	021b      	lsls	r3, r3, #8
 8012cd0:	b21a      	sxth	r2, r3
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	781b      	ldrb	r3, [r3, #0]
 8012cd6:	b21b      	sxth	r3, r3
 8012cd8:	4313      	orrs	r3, r2
 8012cda:	b21b      	sxth	r3, r3
 8012cdc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012cde:	89fb      	ldrh	r3, [r7, #14]
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3714      	adds	r7, #20
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012cec:	b480      	push	{r7}
 8012cee:	b085      	sub	sp, #20
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	3303      	adds	r3, #3
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	021b      	lsls	r3, r3, #8
 8012d00:	687a      	ldr	r2, [r7, #4]
 8012d02:	3202      	adds	r2, #2
 8012d04:	7812      	ldrb	r2, [r2, #0]
 8012d06:	4313      	orrs	r3, r2
 8012d08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	021b      	lsls	r3, r3, #8
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	3201      	adds	r2, #1
 8012d12:	7812      	ldrb	r2, [r2, #0]
 8012d14:	4313      	orrs	r3, r2
 8012d16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	021b      	lsls	r3, r3, #8
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	7812      	ldrb	r2, [r2, #0]
 8012d20:	4313      	orrs	r3, r2
 8012d22:	60fb      	str	r3, [r7, #12]
	return rv;
 8012d24:	68fb      	ldr	r3, [r7, #12]
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3714      	adds	r7, #20
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d30:	4770      	bx	lr

08012d32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012d32:	b480      	push	{r7}
 8012d34:	b083      	sub	sp, #12
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	1c5a      	adds	r2, r3, #1
 8012d42:	607a      	str	r2, [r7, #4]
 8012d44:	887a      	ldrh	r2, [r7, #2]
 8012d46:	b2d2      	uxtb	r2, r2
 8012d48:	701a      	strb	r2, [r3, #0]
 8012d4a:	887b      	ldrh	r3, [r7, #2]
 8012d4c:	0a1b      	lsrs	r3, r3, #8
 8012d4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	1c5a      	adds	r2, r3, #1
 8012d54:	607a      	str	r2, [r7, #4]
 8012d56:	887a      	ldrh	r2, [r7, #2]
 8012d58:	b2d2      	uxtb	r2, r2
 8012d5a:	701a      	strb	r2, [r3, #0]
}
 8012d5c:	bf00      	nop
 8012d5e:	370c      	adds	r7, #12
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr

08012d68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012d68:	b480      	push	{r7}
 8012d6a:	b083      	sub	sp, #12
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	1c5a      	adds	r2, r3, #1
 8012d76:	607a      	str	r2, [r7, #4]
 8012d78:	683a      	ldr	r2, [r7, #0]
 8012d7a:	b2d2      	uxtb	r2, r2
 8012d7c:	701a      	strb	r2, [r3, #0]
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	0a1b      	lsrs	r3, r3, #8
 8012d82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	1c5a      	adds	r2, r3, #1
 8012d88:	607a      	str	r2, [r7, #4]
 8012d8a:	683a      	ldr	r2, [r7, #0]
 8012d8c:	b2d2      	uxtb	r2, r2
 8012d8e:	701a      	strb	r2, [r3, #0]
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	0a1b      	lsrs	r3, r3, #8
 8012d94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	1c5a      	adds	r2, r3, #1
 8012d9a:	607a      	str	r2, [r7, #4]
 8012d9c:	683a      	ldr	r2, [r7, #0]
 8012d9e:	b2d2      	uxtb	r2, r2
 8012da0:	701a      	strb	r2, [r3, #0]
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	0a1b      	lsrs	r3, r3, #8
 8012da6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	1c5a      	adds	r2, r3, #1
 8012dac:	607a      	str	r2, [r7, #4]
 8012dae:	683a      	ldr	r2, [r7, #0]
 8012db0:	b2d2      	uxtb	r2, r2
 8012db2:	701a      	strb	r2, [r3, #0]
}
 8012db4:	bf00      	nop
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr

08012dc0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012dc0:	b480      	push	{r7}
 8012dc2:	b087      	sub	sp, #28
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00d      	beq.n	8012df6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012dda:	693a      	ldr	r2, [r7, #16]
 8012ddc:	1c53      	adds	r3, r2, #1
 8012dde:	613b      	str	r3, [r7, #16]
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	1c59      	adds	r1, r3, #1
 8012de4:	6179      	str	r1, [r7, #20]
 8012de6:	7812      	ldrb	r2, [r2, #0]
 8012de8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	3b01      	subs	r3, #1
 8012dee:	607b      	str	r3, [r7, #4]
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d1f1      	bne.n	8012dda <mem_cpy+0x1a>
	}
}
 8012df6:	bf00      	nop
 8012df8:	371c      	adds	r7, #28
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e00:	4770      	bx	lr

08012e02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012e02:	b480      	push	{r7}
 8012e04:	b087      	sub	sp, #28
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	60f8      	str	r0, [r7, #12]
 8012e0a:	60b9      	str	r1, [r7, #8]
 8012e0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	1c5a      	adds	r2, r3, #1
 8012e16:	617a      	str	r2, [r7, #20]
 8012e18:	68ba      	ldr	r2, [r7, #8]
 8012e1a:	b2d2      	uxtb	r2, r2
 8012e1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	3b01      	subs	r3, #1
 8012e22:	607b      	str	r3, [r7, #4]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d1f3      	bne.n	8012e12 <mem_set+0x10>
}
 8012e2a:	bf00      	nop
 8012e2c:	bf00      	nop
 8012e2e:	371c      	adds	r7, #28
 8012e30:	46bd      	mov	sp, r7
 8012e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e36:	4770      	bx	lr

08012e38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012e38:	b480      	push	{r7}
 8012e3a:	b089      	sub	sp, #36	; 0x24
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	60b9      	str	r1, [r7, #8]
 8012e42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	61fb      	str	r3, [r7, #28]
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012e50:	69fb      	ldr	r3, [r7, #28]
 8012e52:	1c5a      	adds	r2, r3, #1
 8012e54:	61fa      	str	r2, [r7, #28]
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	4619      	mov	r1, r3
 8012e5a:	69bb      	ldr	r3, [r7, #24]
 8012e5c:	1c5a      	adds	r2, r3, #1
 8012e5e:	61ba      	str	r2, [r7, #24]
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	1acb      	subs	r3, r1, r3
 8012e64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	607b      	str	r3, [r7, #4]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d002      	beq.n	8012e78 <mem_cmp+0x40>
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d0eb      	beq.n	8012e50 <mem_cmp+0x18>

	return r;
 8012e78:	697b      	ldr	r3, [r7, #20]
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3724      	adds	r7, #36	; 0x24
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr

08012e86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012e86:	b480      	push	{r7}
 8012e88:	b083      	sub	sp, #12
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	6078      	str	r0, [r7, #4]
 8012e8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012e90:	e002      	b.n	8012e98 <chk_chr+0x12>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	3301      	adds	r3, #1
 8012e96:	607b      	str	r3, [r7, #4]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d005      	beq.n	8012eac <chk_chr+0x26>
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	d1f2      	bne.n	8012e92 <chk_chr+0xc>
	return *str;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	781b      	ldrb	r3, [r3, #0]
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	370c      	adds	r7, #12
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eba:	4770      	bx	lr

08012ebc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b085      	sub	sp, #20
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	60bb      	str	r3, [r7, #8]
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	60fb      	str	r3, [r7, #12]
 8012ece:	e029      	b.n	8012f24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012ed0:	4a27      	ldr	r2, [pc, #156]	; (8012f70 <chk_lock+0xb4>)
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	011b      	lsls	r3, r3, #4
 8012ed6:	4413      	add	r3, r2
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d01d      	beq.n	8012f1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012ede:	4a24      	ldr	r2, [pc, #144]	; (8012f70 <chk_lock+0xb4>)
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	011b      	lsls	r3, r3, #4
 8012ee4:	4413      	add	r3, r2
 8012ee6:	681a      	ldr	r2, [r3, #0]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d116      	bne.n	8012f1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012ef0:	4a1f      	ldr	r2, [pc, #124]	; (8012f70 <chk_lock+0xb4>)
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	011b      	lsls	r3, r3, #4
 8012ef6:	4413      	add	r3, r2
 8012ef8:	3304      	adds	r3, #4
 8012efa:	681a      	ldr	r2, [r3, #0]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012f00:	429a      	cmp	r2, r3
 8012f02:	d10c      	bne.n	8012f1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012f04:	4a1a      	ldr	r2, [pc, #104]	; (8012f70 <chk_lock+0xb4>)
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	011b      	lsls	r3, r3, #4
 8012f0a:	4413      	add	r3, r2
 8012f0c:	3308      	adds	r3, #8
 8012f0e:	681a      	ldr	r2, [r3, #0]
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d102      	bne.n	8012f1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012f18:	e007      	b.n	8012f2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	3301      	adds	r3, #1
 8012f22:	60fb      	str	r3, [r7, #12]
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2b13      	cmp	r3, #19
 8012f28:	d9d2      	bls.n	8012ed0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	2b14      	cmp	r3, #20
 8012f2e:	d109      	bne.n	8012f44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d102      	bne.n	8012f3c <chk_lock+0x80>
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	2b02      	cmp	r3, #2
 8012f3a:	d101      	bne.n	8012f40 <chk_lock+0x84>
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	e010      	b.n	8012f62 <chk_lock+0xa6>
 8012f40:	2312      	movs	r3, #18
 8012f42:	e00e      	b.n	8012f62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d108      	bne.n	8012f5c <chk_lock+0xa0>
 8012f4a:	4a09      	ldr	r2, [pc, #36]	; (8012f70 <chk_lock+0xb4>)
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	011b      	lsls	r3, r3, #4
 8012f50:	4413      	add	r3, r2
 8012f52:	330c      	adds	r3, #12
 8012f54:	881b      	ldrh	r3, [r3, #0]
 8012f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f5a:	d101      	bne.n	8012f60 <chk_lock+0xa4>
 8012f5c:	2310      	movs	r3, #16
 8012f5e:	e000      	b.n	8012f62 <chk_lock+0xa6>
 8012f60:	2300      	movs	r3, #0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3714      	adds	r7, #20
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	20000998 	.word	0x20000998

08012f74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012f74:	b480      	push	{r7}
 8012f76:	b083      	sub	sp, #12
 8012f78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	607b      	str	r3, [r7, #4]
 8012f7e:	e002      	b.n	8012f86 <enq_lock+0x12>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	3301      	adds	r3, #1
 8012f84:	607b      	str	r3, [r7, #4]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2b13      	cmp	r3, #19
 8012f8a:	d806      	bhi.n	8012f9a <enq_lock+0x26>
 8012f8c:	4a09      	ldr	r2, [pc, #36]	; (8012fb4 <enq_lock+0x40>)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	011b      	lsls	r3, r3, #4
 8012f92:	4413      	add	r3, r2
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d1f2      	bne.n	8012f80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2b14      	cmp	r3, #20
 8012f9e:	bf14      	ite	ne
 8012fa0:	2301      	movne	r3, #1
 8012fa2:	2300      	moveq	r3, #0
 8012fa4:	b2db      	uxtb	r3, r3
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	370c      	adds	r7, #12
 8012faa:	46bd      	mov	sp, r7
 8012fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb0:	4770      	bx	lr
 8012fb2:	bf00      	nop
 8012fb4:	20000998 	.word	0x20000998

08012fb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012fb8:	b480      	push	{r7}
 8012fba:	b085      	sub	sp, #20
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	60fb      	str	r3, [r7, #12]
 8012fc6:	e01f      	b.n	8013008 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012fc8:	4a41      	ldr	r2, [pc, #260]	; (80130d0 <inc_lock+0x118>)
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	011b      	lsls	r3, r3, #4
 8012fce:	4413      	add	r3, r2
 8012fd0:	681a      	ldr	r2, [r3, #0]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d113      	bne.n	8013002 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012fda:	4a3d      	ldr	r2, [pc, #244]	; (80130d0 <inc_lock+0x118>)
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	011b      	lsls	r3, r3, #4
 8012fe0:	4413      	add	r3, r2
 8012fe2:	3304      	adds	r3, #4
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d109      	bne.n	8013002 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012fee:	4a38      	ldr	r2, [pc, #224]	; (80130d0 <inc_lock+0x118>)
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	011b      	lsls	r3, r3, #4
 8012ff4:	4413      	add	r3, r2
 8012ff6:	3308      	adds	r3, #8
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d006      	beq.n	8013010 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	3301      	adds	r3, #1
 8013006:	60fb      	str	r3, [r7, #12]
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	2b13      	cmp	r3, #19
 801300c:	d9dc      	bls.n	8012fc8 <inc_lock+0x10>
 801300e:	e000      	b.n	8013012 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013010:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	2b14      	cmp	r3, #20
 8013016:	d132      	bne.n	801307e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013018:	2300      	movs	r3, #0
 801301a:	60fb      	str	r3, [r7, #12]
 801301c:	e002      	b.n	8013024 <inc_lock+0x6c>
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	3301      	adds	r3, #1
 8013022:	60fb      	str	r3, [r7, #12]
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	2b13      	cmp	r3, #19
 8013028:	d806      	bhi.n	8013038 <inc_lock+0x80>
 801302a:	4a29      	ldr	r2, [pc, #164]	; (80130d0 <inc_lock+0x118>)
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	011b      	lsls	r3, r3, #4
 8013030:	4413      	add	r3, r2
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d1f2      	bne.n	801301e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2b14      	cmp	r3, #20
 801303c:	d101      	bne.n	8013042 <inc_lock+0x8a>
 801303e:	2300      	movs	r3, #0
 8013040:	e040      	b.n	80130c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681a      	ldr	r2, [r3, #0]
 8013046:	4922      	ldr	r1, [pc, #136]	; (80130d0 <inc_lock+0x118>)
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	011b      	lsls	r3, r3, #4
 801304c:	440b      	add	r3, r1
 801304e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	689a      	ldr	r2, [r3, #8]
 8013054:	491e      	ldr	r1, [pc, #120]	; (80130d0 <inc_lock+0x118>)
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	011b      	lsls	r3, r3, #4
 801305a:	440b      	add	r3, r1
 801305c:	3304      	adds	r3, #4
 801305e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	695a      	ldr	r2, [r3, #20]
 8013064:	491a      	ldr	r1, [pc, #104]	; (80130d0 <inc_lock+0x118>)
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	011b      	lsls	r3, r3, #4
 801306a:	440b      	add	r3, r1
 801306c:	3308      	adds	r3, #8
 801306e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013070:	4a17      	ldr	r2, [pc, #92]	; (80130d0 <inc_lock+0x118>)
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	011b      	lsls	r3, r3, #4
 8013076:	4413      	add	r3, r2
 8013078:	330c      	adds	r3, #12
 801307a:	2200      	movs	r2, #0
 801307c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d009      	beq.n	8013098 <inc_lock+0xe0>
 8013084:	4a12      	ldr	r2, [pc, #72]	; (80130d0 <inc_lock+0x118>)
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	011b      	lsls	r3, r3, #4
 801308a:	4413      	add	r3, r2
 801308c:	330c      	adds	r3, #12
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d001      	beq.n	8013098 <inc_lock+0xe0>
 8013094:	2300      	movs	r3, #0
 8013096:	e015      	b.n	80130c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d108      	bne.n	80130b0 <inc_lock+0xf8>
 801309e:	4a0c      	ldr	r2, [pc, #48]	; (80130d0 <inc_lock+0x118>)
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	011b      	lsls	r3, r3, #4
 80130a4:	4413      	add	r3, r2
 80130a6:	330c      	adds	r3, #12
 80130a8:	881b      	ldrh	r3, [r3, #0]
 80130aa:	3301      	adds	r3, #1
 80130ac:	b29a      	uxth	r2, r3
 80130ae:	e001      	b.n	80130b4 <inc_lock+0xfc>
 80130b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80130b4:	4906      	ldr	r1, [pc, #24]	; (80130d0 <inc_lock+0x118>)
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	011b      	lsls	r3, r3, #4
 80130ba:	440b      	add	r3, r1
 80130bc:	330c      	adds	r3, #12
 80130be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	3301      	adds	r3, #1
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3714      	adds	r7, #20
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr
 80130d0:	20000998 	.word	0x20000998

080130d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80130d4:	b480      	push	{r7}
 80130d6:	b085      	sub	sp, #20
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	3b01      	subs	r3, #1
 80130e0:	607b      	str	r3, [r7, #4]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2b13      	cmp	r3, #19
 80130e6:	d825      	bhi.n	8013134 <dec_lock+0x60>
		n = Files[i].ctr;
 80130e8:	4a17      	ldr	r2, [pc, #92]	; (8013148 <dec_lock+0x74>)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	011b      	lsls	r3, r3, #4
 80130ee:	4413      	add	r3, r2
 80130f0:	330c      	adds	r3, #12
 80130f2:	881b      	ldrh	r3, [r3, #0]
 80130f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80130f6:	89fb      	ldrh	r3, [r7, #14]
 80130f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130fc:	d101      	bne.n	8013102 <dec_lock+0x2e>
 80130fe:	2300      	movs	r3, #0
 8013100:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013102:	89fb      	ldrh	r3, [r7, #14]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d002      	beq.n	801310e <dec_lock+0x3a>
 8013108:	89fb      	ldrh	r3, [r7, #14]
 801310a:	3b01      	subs	r3, #1
 801310c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801310e:	4a0e      	ldr	r2, [pc, #56]	; (8013148 <dec_lock+0x74>)
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	011b      	lsls	r3, r3, #4
 8013114:	4413      	add	r3, r2
 8013116:	330c      	adds	r3, #12
 8013118:	89fa      	ldrh	r2, [r7, #14]
 801311a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801311c:	89fb      	ldrh	r3, [r7, #14]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d105      	bne.n	801312e <dec_lock+0x5a>
 8013122:	4a09      	ldr	r2, [pc, #36]	; (8013148 <dec_lock+0x74>)
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	011b      	lsls	r3, r3, #4
 8013128:	4413      	add	r3, r2
 801312a:	2200      	movs	r2, #0
 801312c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801312e:	2300      	movs	r3, #0
 8013130:	737b      	strb	r3, [r7, #13]
 8013132:	e001      	b.n	8013138 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013134:	2302      	movs	r3, #2
 8013136:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013138:	7b7b      	ldrb	r3, [r7, #13]
}
 801313a:	4618      	mov	r0, r3
 801313c:	3714      	adds	r7, #20
 801313e:	46bd      	mov	sp, r7
 8013140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013144:	4770      	bx	lr
 8013146:	bf00      	nop
 8013148:	20000998 	.word	0x20000998

0801314c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801314c:	b480      	push	{r7}
 801314e:	b085      	sub	sp, #20
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013154:	2300      	movs	r3, #0
 8013156:	60fb      	str	r3, [r7, #12]
 8013158:	e010      	b.n	801317c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801315a:	4a0d      	ldr	r2, [pc, #52]	; (8013190 <clear_lock+0x44>)
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	011b      	lsls	r3, r3, #4
 8013160:	4413      	add	r3, r2
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	429a      	cmp	r2, r3
 8013168:	d105      	bne.n	8013176 <clear_lock+0x2a>
 801316a:	4a09      	ldr	r2, [pc, #36]	; (8013190 <clear_lock+0x44>)
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	011b      	lsls	r3, r3, #4
 8013170:	4413      	add	r3, r2
 8013172:	2200      	movs	r2, #0
 8013174:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	3301      	adds	r3, #1
 801317a:	60fb      	str	r3, [r7, #12]
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2b13      	cmp	r3, #19
 8013180:	d9eb      	bls.n	801315a <clear_lock+0xe>
	}
}
 8013182:	bf00      	nop
 8013184:	bf00      	nop
 8013186:	3714      	adds	r7, #20
 8013188:	46bd      	mov	sp, r7
 801318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318e:	4770      	bx	lr
 8013190:	20000998 	.word	0x20000998

08013194 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b086      	sub	sp, #24
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801319c:	2300      	movs	r3, #0
 801319e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	78db      	ldrb	r3, [r3, #3]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d034      	beq.n	8013212 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	7858      	ldrb	r0, [r3, #1]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80131b8:	2301      	movs	r3, #1
 80131ba:	697a      	ldr	r2, [r7, #20]
 80131bc:	f7ff fd38 	bl	8012c30 <disk_write>
 80131c0:	4603      	mov	r3, r0
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d002      	beq.n	80131cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80131c6:	2301      	movs	r3, #1
 80131c8:	73fb      	strb	r3, [r7, #15]
 80131ca:	e022      	b.n	8013212 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2200      	movs	r2, #0
 80131d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131d6:	697a      	ldr	r2, [r7, #20]
 80131d8:	1ad2      	subs	r2, r2, r3
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	69db      	ldr	r3, [r3, #28]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d217      	bcs.n	8013212 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	789b      	ldrb	r3, [r3, #2]
 80131e6:	613b      	str	r3, [r7, #16]
 80131e8:	e010      	b.n	801320c <sync_window+0x78>
					wsect += fs->fsize;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	69db      	ldr	r3, [r3, #28]
 80131ee:	697a      	ldr	r2, [r7, #20]
 80131f0:	4413      	add	r3, r2
 80131f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	7858      	ldrb	r0, [r3, #1]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80131fe:	2301      	movs	r3, #1
 8013200:	697a      	ldr	r2, [r7, #20]
 8013202:	f7ff fd15 	bl	8012c30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	3b01      	subs	r3, #1
 801320a:	613b      	str	r3, [r7, #16]
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	2b01      	cmp	r3, #1
 8013210:	d8eb      	bhi.n	80131ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013212:	7bfb      	ldrb	r3, [r7, #15]
}
 8013214:	4618      	mov	r0, r3
 8013216:	3718      	adds	r7, #24
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}

0801321c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b084      	sub	sp, #16
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
 8013224:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013226:	2300      	movs	r3, #0
 8013228:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801322e:	683a      	ldr	r2, [r7, #0]
 8013230:	429a      	cmp	r2, r3
 8013232:	d01b      	beq.n	801326c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f7ff ffad 	bl	8013194 <sync_window>
 801323a:	4603      	mov	r3, r0
 801323c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801323e:	7bfb      	ldrb	r3, [r7, #15]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d113      	bne.n	801326c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	7858      	ldrb	r0, [r3, #1]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801324e:	2301      	movs	r3, #1
 8013250:	683a      	ldr	r2, [r7, #0]
 8013252:	f7ff fccd 	bl	8012bf0 <disk_read>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d004      	beq.n	8013266 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801325c:	f04f 33ff 	mov.w	r3, #4294967295
 8013260:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013262:	2301      	movs	r3, #1
 8013264:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	683a      	ldr	r2, [r7, #0]
 801326a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801326c:	7bfb      	ldrb	r3, [r7, #15]
}
 801326e:	4618      	mov	r0, r3
 8013270:	3710      	adds	r7, #16
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
	...

08013278 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f7ff ff87 	bl	8013194 <sync_window>
 8013286:	4603      	mov	r3, r0
 8013288:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801328a:	7bfb      	ldrb	r3, [r7, #15]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d158      	bne.n	8013342 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	781b      	ldrb	r3, [r3, #0]
 8013294:	2b03      	cmp	r3, #3
 8013296:	d148      	bne.n	801332a <sync_fs+0xb2>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	791b      	ldrb	r3, [r3, #4]
 801329c:	2b01      	cmp	r3, #1
 801329e:	d144      	bne.n	801332a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	3334      	adds	r3, #52	; 0x34
 80132a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132a8:	2100      	movs	r1, #0
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7ff fda9 	bl	8012e02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	3334      	adds	r3, #52	; 0x34
 80132b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80132b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80132bc:	4618      	mov	r0, r3
 80132be:	f7ff fd38 	bl	8012d32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	3334      	adds	r3, #52	; 0x34
 80132c6:	4921      	ldr	r1, [pc, #132]	; (801334c <sync_fs+0xd4>)
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7ff fd4d 	bl	8012d68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	3334      	adds	r3, #52	; 0x34
 80132d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80132d6:	491e      	ldr	r1, [pc, #120]	; (8013350 <sync_fs+0xd8>)
 80132d8:	4618      	mov	r0, r3
 80132da:	f7ff fd45 	bl	8012d68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	3334      	adds	r3, #52	; 0x34
 80132e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	695b      	ldr	r3, [r3, #20]
 80132ea:	4619      	mov	r1, r3
 80132ec:	4610      	mov	r0, r2
 80132ee:	f7ff fd3b 	bl	8012d68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	3334      	adds	r3, #52	; 0x34
 80132f6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	691b      	ldr	r3, [r3, #16]
 80132fe:	4619      	mov	r1, r3
 8013300:	4610      	mov	r0, r2
 8013302:	f7ff fd31 	bl	8012d68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	6a1b      	ldr	r3, [r3, #32]
 801330a:	1c5a      	adds	r2, r3, #1
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	7858      	ldrb	r0, [r3, #1]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801331e:	2301      	movs	r3, #1
 8013320:	f7ff fc86 	bl	8012c30 <disk_write>
			fs->fsi_flag = 0;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2200      	movs	r2, #0
 8013328:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	785b      	ldrb	r3, [r3, #1]
 801332e:	2200      	movs	r2, #0
 8013330:	2100      	movs	r1, #0
 8013332:	4618      	mov	r0, r3
 8013334:	f7ff fc9c 	bl	8012c70 <disk_ioctl>
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d001      	beq.n	8013342 <sync_fs+0xca>
 801333e:	2301      	movs	r3, #1
 8013340:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013342:	7bfb      	ldrb	r3, [r7, #15]
}
 8013344:	4618      	mov	r0, r3
 8013346:	3710      	adds	r7, #16
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	41615252 	.word	0x41615252
 8013350:	61417272 	.word	0x61417272

08013354 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013354:	b480      	push	{r7}
 8013356:	b083      	sub	sp, #12
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	3b02      	subs	r3, #2
 8013362:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	699b      	ldr	r3, [r3, #24]
 8013368:	3b02      	subs	r3, #2
 801336a:	683a      	ldr	r2, [r7, #0]
 801336c:	429a      	cmp	r2, r3
 801336e:	d301      	bcc.n	8013374 <clust2sect+0x20>
 8013370:	2300      	movs	r3, #0
 8013372:	e008      	b.n	8013386 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	895b      	ldrh	r3, [r3, #10]
 8013378:	461a      	mov	r2, r3
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	fb03 f202 	mul.w	r2, r3, r2
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013384:	4413      	add	r3, r2
}
 8013386:	4618      	mov	r0, r3
 8013388:	370c      	adds	r7, #12
 801338a:	46bd      	mov	sp, r7
 801338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013390:	4770      	bx	lr

08013392 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013392:	b580      	push	{r7, lr}
 8013394:	b086      	sub	sp, #24
 8013396:	af00      	add	r7, sp, #0
 8013398:	6078      	str	r0, [r7, #4]
 801339a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	d904      	bls.n	80133b2 <get_fat+0x20>
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	699b      	ldr	r3, [r3, #24]
 80133ac:	683a      	ldr	r2, [r7, #0]
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d302      	bcc.n	80133b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80133b2:	2301      	movs	r3, #1
 80133b4:	617b      	str	r3, [r7, #20]
 80133b6:	e08f      	b.n	80134d8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80133b8:	f04f 33ff 	mov.w	r3, #4294967295
 80133bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80133be:	693b      	ldr	r3, [r7, #16]
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	2b03      	cmp	r3, #3
 80133c4:	d062      	beq.n	801348c <get_fat+0xfa>
 80133c6:	2b03      	cmp	r3, #3
 80133c8:	dc7c      	bgt.n	80134c4 <get_fat+0x132>
 80133ca:	2b01      	cmp	r3, #1
 80133cc:	d002      	beq.n	80133d4 <get_fat+0x42>
 80133ce:	2b02      	cmp	r3, #2
 80133d0:	d042      	beq.n	8013458 <get_fat+0xc6>
 80133d2:	e077      	b.n	80134c4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	60fb      	str	r3, [r7, #12]
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	085b      	lsrs	r3, r3, #1
 80133dc:	68fa      	ldr	r2, [r7, #12]
 80133de:	4413      	add	r3, r2
 80133e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	0a5b      	lsrs	r3, r3, #9
 80133ea:	4413      	add	r3, r2
 80133ec:	4619      	mov	r1, r3
 80133ee:	6938      	ldr	r0, [r7, #16]
 80133f0:	f7ff ff14 	bl	801321c <move_window>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d167      	bne.n	80134ca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	1c5a      	adds	r2, r3, #1
 80133fe:	60fa      	str	r2, [r7, #12]
 8013400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013404:	693a      	ldr	r2, [r7, #16]
 8013406:	4413      	add	r3, r2
 8013408:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801340c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	0a5b      	lsrs	r3, r3, #9
 8013416:	4413      	add	r3, r2
 8013418:	4619      	mov	r1, r3
 801341a:	6938      	ldr	r0, [r7, #16]
 801341c:	f7ff fefe 	bl	801321c <move_window>
 8013420:	4603      	mov	r3, r0
 8013422:	2b00      	cmp	r3, #0
 8013424:	d153      	bne.n	80134ce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801342c:	693a      	ldr	r2, [r7, #16]
 801342e:	4413      	add	r3, r2
 8013430:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013434:	021b      	lsls	r3, r3, #8
 8013436:	461a      	mov	r2, r3
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	4313      	orrs	r3, r2
 801343c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	f003 0301 	and.w	r3, r3, #1
 8013444:	2b00      	cmp	r3, #0
 8013446:	d002      	beq.n	801344e <get_fat+0xbc>
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	091b      	lsrs	r3, r3, #4
 801344c:	e002      	b.n	8013454 <get_fat+0xc2>
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013454:	617b      	str	r3, [r7, #20]
			break;
 8013456:	e03f      	b.n	80134d8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	0a1b      	lsrs	r3, r3, #8
 8013460:	4413      	add	r3, r2
 8013462:	4619      	mov	r1, r3
 8013464:	6938      	ldr	r0, [r7, #16]
 8013466:	f7ff fed9 	bl	801321c <move_window>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d130      	bne.n	80134d2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	005b      	lsls	r3, r3, #1
 801347a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801347e:	4413      	add	r3, r2
 8013480:	4618      	mov	r0, r3
 8013482:	f7ff fc1b 	bl	8012cbc <ld_word>
 8013486:	4603      	mov	r3, r0
 8013488:	617b      	str	r3, [r7, #20]
			break;
 801348a:	e025      	b.n	80134d8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	09db      	lsrs	r3, r3, #7
 8013494:	4413      	add	r3, r2
 8013496:	4619      	mov	r1, r3
 8013498:	6938      	ldr	r0, [r7, #16]
 801349a:	f7ff febf 	bl	801321c <move_window>
 801349e:	4603      	mov	r3, r0
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d118      	bne.n	80134d6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80134b2:	4413      	add	r3, r2
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7ff fc19 	bl	8012cec <ld_dword>
 80134ba:	4603      	mov	r3, r0
 80134bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80134c0:	617b      	str	r3, [r7, #20]
			break;
 80134c2:	e009      	b.n	80134d8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80134c4:	2301      	movs	r3, #1
 80134c6:	617b      	str	r3, [r7, #20]
 80134c8:	e006      	b.n	80134d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134ca:	bf00      	nop
 80134cc:	e004      	b.n	80134d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134ce:	bf00      	nop
 80134d0:	e002      	b.n	80134d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80134d2:	bf00      	nop
 80134d4:	e000      	b.n	80134d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80134d6:	bf00      	nop
		}
	}

	return val;
 80134d8:	697b      	ldr	r3, [r7, #20]
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3718      	adds	r7, #24
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}

080134e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80134e2:	b590      	push	{r4, r7, lr}
 80134e4:	b089      	sub	sp, #36	; 0x24
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	60f8      	str	r0, [r7, #12]
 80134ea:	60b9      	str	r1, [r7, #8]
 80134ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80134ee:	2302      	movs	r3, #2
 80134f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	2b01      	cmp	r3, #1
 80134f6:	f240 80d2 	bls.w	801369e <put_fat+0x1bc>
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	699b      	ldr	r3, [r3, #24]
 80134fe:	68ba      	ldr	r2, [r7, #8]
 8013500:	429a      	cmp	r2, r3
 8013502:	f080 80cc 	bcs.w	801369e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	2b03      	cmp	r3, #3
 801350c:	f000 8096 	beq.w	801363c <put_fat+0x15a>
 8013510:	2b03      	cmp	r3, #3
 8013512:	f300 80cd 	bgt.w	80136b0 <put_fat+0x1ce>
 8013516:	2b01      	cmp	r3, #1
 8013518:	d002      	beq.n	8013520 <put_fat+0x3e>
 801351a:	2b02      	cmp	r3, #2
 801351c:	d06e      	beq.n	80135fc <put_fat+0x11a>
 801351e:	e0c7      	b.n	80136b0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	61bb      	str	r3, [r7, #24]
 8013524:	69bb      	ldr	r3, [r7, #24]
 8013526:	085b      	lsrs	r3, r3, #1
 8013528:	69ba      	ldr	r2, [r7, #24]
 801352a:	4413      	add	r3, r2
 801352c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013532:	69bb      	ldr	r3, [r7, #24]
 8013534:	0a5b      	lsrs	r3, r3, #9
 8013536:	4413      	add	r3, r2
 8013538:	4619      	mov	r1, r3
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f7ff fe6e 	bl	801321c <move_window>
 8013540:	4603      	mov	r3, r0
 8013542:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013544:	7ffb      	ldrb	r3, [r7, #31]
 8013546:	2b00      	cmp	r3, #0
 8013548:	f040 80ab 	bne.w	80136a2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	1c59      	adds	r1, r3, #1
 8013556:	61b9      	str	r1, [r7, #24]
 8013558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801355c:	4413      	add	r3, r2
 801355e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	f003 0301 	and.w	r3, r3, #1
 8013566:	2b00      	cmp	r3, #0
 8013568:	d00d      	beq.n	8013586 <put_fat+0xa4>
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	b25b      	sxtb	r3, r3
 8013570:	f003 030f 	and.w	r3, r3, #15
 8013574:	b25a      	sxtb	r2, r3
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	b2db      	uxtb	r3, r3
 801357a:	011b      	lsls	r3, r3, #4
 801357c:	b25b      	sxtb	r3, r3
 801357e:	4313      	orrs	r3, r2
 8013580:	b25b      	sxtb	r3, r3
 8013582:	b2db      	uxtb	r3, r3
 8013584:	e001      	b.n	801358a <put_fat+0xa8>
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	b2db      	uxtb	r3, r3
 801358a:	697a      	ldr	r2, [r7, #20]
 801358c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2201      	movs	r2, #1
 8013592:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013598:	69bb      	ldr	r3, [r7, #24]
 801359a:	0a5b      	lsrs	r3, r3, #9
 801359c:	4413      	add	r3, r2
 801359e:	4619      	mov	r1, r3
 80135a0:	68f8      	ldr	r0, [r7, #12]
 80135a2:	f7ff fe3b 	bl	801321c <move_window>
 80135a6:	4603      	mov	r3, r0
 80135a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80135aa:	7ffb      	ldrb	r3, [r7, #31]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d17a      	bne.n	80136a6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80135b6:	69bb      	ldr	r3, [r7, #24]
 80135b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135bc:	4413      	add	r3, r2
 80135be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	f003 0301 	and.w	r3, r3, #1
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d003      	beq.n	80135d2 <put_fat+0xf0>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	091b      	lsrs	r3, r3, #4
 80135ce:	b2db      	uxtb	r3, r3
 80135d0:	e00e      	b.n	80135f0 <put_fat+0x10e>
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	b25b      	sxtb	r3, r3
 80135d8:	f023 030f 	bic.w	r3, r3, #15
 80135dc:	b25a      	sxtb	r2, r3
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	0a1b      	lsrs	r3, r3, #8
 80135e2:	b25b      	sxtb	r3, r3
 80135e4:	f003 030f 	and.w	r3, r3, #15
 80135e8:	b25b      	sxtb	r3, r3
 80135ea:	4313      	orrs	r3, r2
 80135ec:	b25b      	sxtb	r3, r3
 80135ee:	b2db      	uxtb	r3, r3
 80135f0:	697a      	ldr	r2, [r7, #20]
 80135f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2201      	movs	r2, #1
 80135f8:	70da      	strb	r2, [r3, #3]
			break;
 80135fa:	e059      	b.n	80136b0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	0a1b      	lsrs	r3, r3, #8
 8013604:	4413      	add	r3, r2
 8013606:	4619      	mov	r1, r3
 8013608:	68f8      	ldr	r0, [r7, #12]
 801360a:	f7ff fe07 	bl	801321c <move_window>
 801360e:	4603      	mov	r3, r0
 8013610:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013612:	7ffb      	ldrb	r3, [r7, #31]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d148      	bne.n	80136aa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	005b      	lsls	r3, r3, #1
 8013622:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013626:	4413      	add	r3, r2
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	b292      	uxth	r2, r2
 801362c:	4611      	mov	r1, r2
 801362e:	4618      	mov	r0, r3
 8013630:	f7ff fb7f 	bl	8012d32 <st_word>
			fs->wflag = 1;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2201      	movs	r2, #1
 8013638:	70da      	strb	r2, [r3, #3]
			break;
 801363a:	e039      	b.n	80136b0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	09db      	lsrs	r3, r3, #7
 8013644:	4413      	add	r3, r2
 8013646:	4619      	mov	r1, r3
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f7ff fde7 	bl	801321c <move_window>
 801364e:	4603      	mov	r3, r0
 8013650:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013652:	7ffb      	ldrb	r3, [r7, #31]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d12a      	bne.n	80136ae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801366c:	4413      	add	r3, r2
 801366e:	4618      	mov	r0, r3
 8013670:	f7ff fb3c 	bl	8012cec <ld_dword>
 8013674:	4603      	mov	r3, r0
 8013676:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801367a:	4323      	orrs	r3, r4
 801367c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801368c:	4413      	add	r3, r2
 801368e:	6879      	ldr	r1, [r7, #4]
 8013690:	4618      	mov	r0, r3
 8013692:	f7ff fb69 	bl	8012d68 <st_dword>
			fs->wflag = 1;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	2201      	movs	r2, #1
 801369a:	70da      	strb	r2, [r3, #3]
			break;
 801369c:	e008      	b.n	80136b0 <put_fat+0x1ce>
		}
	}
 801369e:	bf00      	nop
 80136a0:	e006      	b.n	80136b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80136a2:	bf00      	nop
 80136a4:	e004      	b.n	80136b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80136a6:	bf00      	nop
 80136a8:	e002      	b.n	80136b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80136aa:	bf00      	nop
 80136ac:	e000      	b.n	80136b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80136ae:	bf00      	nop
	return res;
 80136b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	3724      	adds	r7, #36	; 0x24
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd90      	pop	{r4, r7, pc}

080136ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80136ba:	b580      	push	{r7, lr}
 80136bc:	b088      	sub	sp, #32
 80136be:	af00      	add	r7, sp, #0
 80136c0:	60f8      	str	r0, [r7, #12]
 80136c2:	60b9      	str	r1, [r7, #8]
 80136c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80136c6:	2300      	movs	r3, #0
 80136c8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	2b01      	cmp	r3, #1
 80136d4:	d904      	bls.n	80136e0 <remove_chain+0x26>
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	699b      	ldr	r3, [r3, #24]
 80136da:	68ba      	ldr	r2, [r7, #8]
 80136dc:	429a      	cmp	r2, r3
 80136de:	d301      	bcc.n	80136e4 <remove_chain+0x2a>
 80136e0:	2302      	movs	r3, #2
 80136e2:	e04b      	b.n	801377c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d00c      	beq.n	8013704 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80136ea:	f04f 32ff 	mov.w	r2, #4294967295
 80136ee:	6879      	ldr	r1, [r7, #4]
 80136f0:	69b8      	ldr	r0, [r7, #24]
 80136f2:	f7ff fef6 	bl	80134e2 <put_fat>
 80136f6:	4603      	mov	r3, r0
 80136f8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80136fa:	7ffb      	ldrb	r3, [r7, #31]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d001      	beq.n	8013704 <remove_chain+0x4a>
 8013700:	7ffb      	ldrb	r3, [r7, #31]
 8013702:	e03b      	b.n	801377c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013704:	68b9      	ldr	r1, [r7, #8]
 8013706:	68f8      	ldr	r0, [r7, #12]
 8013708:	f7ff fe43 	bl	8013392 <get_fat>
 801370c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d031      	beq.n	8013778 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	2b01      	cmp	r3, #1
 8013718:	d101      	bne.n	801371e <remove_chain+0x64>
 801371a:	2302      	movs	r3, #2
 801371c:	e02e      	b.n	801377c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013724:	d101      	bne.n	801372a <remove_chain+0x70>
 8013726:	2301      	movs	r3, #1
 8013728:	e028      	b.n	801377c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801372a:	2200      	movs	r2, #0
 801372c:	68b9      	ldr	r1, [r7, #8]
 801372e:	69b8      	ldr	r0, [r7, #24]
 8013730:	f7ff fed7 	bl	80134e2 <put_fat>
 8013734:	4603      	mov	r3, r0
 8013736:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013738:	7ffb      	ldrb	r3, [r7, #31]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d001      	beq.n	8013742 <remove_chain+0x88>
 801373e:	7ffb      	ldrb	r3, [r7, #31]
 8013740:	e01c      	b.n	801377c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013742:	69bb      	ldr	r3, [r7, #24]
 8013744:	695a      	ldr	r2, [r3, #20]
 8013746:	69bb      	ldr	r3, [r7, #24]
 8013748:	699b      	ldr	r3, [r3, #24]
 801374a:	3b02      	subs	r3, #2
 801374c:	429a      	cmp	r2, r3
 801374e:	d20b      	bcs.n	8013768 <remove_chain+0xae>
			fs->free_clst++;
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	695b      	ldr	r3, [r3, #20]
 8013754:	1c5a      	adds	r2, r3, #1
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	791b      	ldrb	r3, [r3, #4]
 801375e:	f043 0301 	orr.w	r3, r3, #1
 8013762:	b2da      	uxtb	r2, r3
 8013764:	69bb      	ldr	r3, [r7, #24]
 8013766:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	699b      	ldr	r3, [r3, #24]
 8013770:	68ba      	ldr	r2, [r7, #8]
 8013772:	429a      	cmp	r2, r3
 8013774:	d3c6      	bcc.n	8013704 <remove_chain+0x4a>
 8013776:	e000      	b.n	801377a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013778:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801377a:	2300      	movs	r3, #0
}
 801377c:	4618      	mov	r0, r3
 801377e:	3720      	adds	r7, #32
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}

08013784 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b088      	sub	sp, #32
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d10d      	bne.n	80137b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	691b      	ldr	r3, [r3, #16]
 801379e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d004      	beq.n	80137b0 <create_chain+0x2c>
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	699b      	ldr	r3, [r3, #24]
 80137aa:	69ba      	ldr	r2, [r7, #24]
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d31b      	bcc.n	80137e8 <create_chain+0x64>
 80137b0:	2301      	movs	r3, #1
 80137b2:	61bb      	str	r3, [r7, #24]
 80137b4:	e018      	b.n	80137e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80137b6:	6839      	ldr	r1, [r7, #0]
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7ff fdea 	bl	8013392 <get_fat>
 80137be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	2b01      	cmp	r3, #1
 80137c4:	d801      	bhi.n	80137ca <create_chain+0x46>
 80137c6:	2301      	movs	r3, #1
 80137c8:	e070      	b.n	80138ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137d0:	d101      	bne.n	80137d6 <create_chain+0x52>
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	e06a      	b.n	80138ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	699b      	ldr	r3, [r3, #24]
 80137da:	68fa      	ldr	r2, [r7, #12]
 80137dc:	429a      	cmp	r2, r3
 80137de:	d201      	bcs.n	80137e4 <create_chain+0x60>
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	e063      	b.n	80138ac <create_chain+0x128>
		scl = clst;
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80137ec:	69fb      	ldr	r3, [r7, #28]
 80137ee:	3301      	adds	r3, #1
 80137f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	699b      	ldr	r3, [r3, #24]
 80137f6:	69fa      	ldr	r2, [r7, #28]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d307      	bcc.n	801380c <create_chain+0x88>
				ncl = 2;
 80137fc:	2302      	movs	r3, #2
 80137fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013800:	69fa      	ldr	r2, [r7, #28]
 8013802:	69bb      	ldr	r3, [r7, #24]
 8013804:	429a      	cmp	r2, r3
 8013806:	d901      	bls.n	801380c <create_chain+0x88>
 8013808:	2300      	movs	r3, #0
 801380a:	e04f      	b.n	80138ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801380c:	69f9      	ldr	r1, [r7, #28]
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f7ff fdbf 	bl	8013392 <get_fat>
 8013814:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d00e      	beq.n	801383a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	2b01      	cmp	r3, #1
 8013820:	d003      	beq.n	801382a <create_chain+0xa6>
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013828:	d101      	bne.n	801382e <create_chain+0xaa>
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	e03e      	b.n	80138ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801382e:	69fa      	ldr	r2, [r7, #28]
 8013830:	69bb      	ldr	r3, [r7, #24]
 8013832:	429a      	cmp	r2, r3
 8013834:	d1da      	bne.n	80137ec <create_chain+0x68>
 8013836:	2300      	movs	r3, #0
 8013838:	e038      	b.n	80138ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801383a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801383c:	f04f 32ff 	mov.w	r2, #4294967295
 8013840:	69f9      	ldr	r1, [r7, #28]
 8013842:	6938      	ldr	r0, [r7, #16]
 8013844:	f7ff fe4d 	bl	80134e2 <put_fat>
 8013848:	4603      	mov	r3, r0
 801384a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801384c:	7dfb      	ldrb	r3, [r7, #23]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d109      	bne.n	8013866 <create_chain+0xe2>
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d006      	beq.n	8013866 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013858:	69fa      	ldr	r2, [r7, #28]
 801385a:	6839      	ldr	r1, [r7, #0]
 801385c:	6938      	ldr	r0, [r7, #16]
 801385e:	f7ff fe40 	bl	80134e2 <put_fat>
 8013862:	4603      	mov	r3, r0
 8013864:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013866:	7dfb      	ldrb	r3, [r7, #23]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d116      	bne.n	801389a <create_chain+0x116>
		fs->last_clst = ncl;
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	69fa      	ldr	r2, [r7, #28]
 8013870:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	695a      	ldr	r2, [r3, #20]
 8013876:	693b      	ldr	r3, [r7, #16]
 8013878:	699b      	ldr	r3, [r3, #24]
 801387a:	3b02      	subs	r3, #2
 801387c:	429a      	cmp	r2, r3
 801387e:	d804      	bhi.n	801388a <create_chain+0x106>
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	695b      	ldr	r3, [r3, #20]
 8013884:	1e5a      	subs	r2, r3, #1
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801388a:	693b      	ldr	r3, [r7, #16]
 801388c:	791b      	ldrb	r3, [r3, #4]
 801388e:	f043 0301 	orr.w	r3, r3, #1
 8013892:	b2da      	uxtb	r2, r3
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	711a      	strb	r2, [r3, #4]
 8013898:	e007      	b.n	80138aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801389a:	7dfb      	ldrb	r3, [r7, #23]
 801389c:	2b01      	cmp	r3, #1
 801389e:	d102      	bne.n	80138a6 <create_chain+0x122>
 80138a0:	f04f 33ff 	mov.w	r3, #4294967295
 80138a4:	e000      	b.n	80138a8 <create_chain+0x124>
 80138a6:	2301      	movs	r3, #1
 80138a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80138aa:	69fb      	ldr	r3, [r7, #28]
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	3720      	adds	r7, #32
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}

080138b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80138b4:	b480      	push	{r7}
 80138b6:	b087      	sub	sp, #28
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
 80138bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c8:	3304      	adds	r3, #4
 80138ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	0a5b      	lsrs	r3, r3, #9
 80138d0:	68fa      	ldr	r2, [r7, #12]
 80138d2:	8952      	ldrh	r2, [r2, #10]
 80138d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80138d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	1d1a      	adds	r2, r3, #4
 80138de:	613a      	str	r2, [r7, #16]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d101      	bne.n	80138ee <clmt_clust+0x3a>
 80138ea:	2300      	movs	r3, #0
 80138ec:	e010      	b.n	8013910 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80138ee:	697a      	ldr	r2, [r7, #20]
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d307      	bcc.n	8013906 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80138f6:	697a      	ldr	r2, [r7, #20]
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	1ad3      	subs	r3, r2, r3
 80138fc:	617b      	str	r3, [r7, #20]
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	3304      	adds	r3, #4
 8013902:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013904:	e7e9      	b.n	80138da <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013906:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	681a      	ldr	r2, [r3, #0]
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	4413      	add	r3, r2
}
 8013910:	4618      	mov	r0, r3
 8013912:	371c      	adds	r7, #28
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr

0801391c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b086      	sub	sp, #24
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013932:	d204      	bcs.n	801393e <dir_sdi+0x22>
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	f003 031f 	and.w	r3, r3, #31
 801393a:	2b00      	cmp	r3, #0
 801393c:	d001      	beq.n	8013942 <dir_sdi+0x26>
		return FR_INT_ERR;
 801393e:	2302      	movs	r3, #2
 8013940:	e063      	b.n	8013a0a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	683a      	ldr	r2, [r7, #0]
 8013946:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	689b      	ldr	r3, [r3, #8]
 801394c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d106      	bne.n	8013962 <dir_sdi+0x46>
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	2b02      	cmp	r3, #2
 801395a:	d902      	bls.n	8013962 <dir_sdi+0x46>
		clst = fs->dirbase;
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013960:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d10c      	bne.n	8013982 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	095b      	lsrs	r3, r3, #5
 801396c:	693a      	ldr	r2, [r7, #16]
 801396e:	8912      	ldrh	r2, [r2, #8]
 8013970:	4293      	cmp	r3, r2
 8013972:	d301      	bcc.n	8013978 <dir_sdi+0x5c>
 8013974:	2302      	movs	r3, #2
 8013976:	e048      	b.n	8013a0a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	61da      	str	r2, [r3, #28]
 8013980:	e029      	b.n	80139d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	895b      	ldrh	r3, [r3, #10]
 8013986:	025b      	lsls	r3, r3, #9
 8013988:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801398a:	e019      	b.n	80139c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6979      	ldr	r1, [r7, #20]
 8013990:	4618      	mov	r0, r3
 8013992:	f7ff fcfe 	bl	8013392 <get_fat>
 8013996:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801399e:	d101      	bne.n	80139a4 <dir_sdi+0x88>
 80139a0:	2301      	movs	r3, #1
 80139a2:	e032      	b.n	8013a0a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	2b01      	cmp	r3, #1
 80139a8:	d904      	bls.n	80139b4 <dir_sdi+0x98>
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	699b      	ldr	r3, [r3, #24]
 80139ae:	697a      	ldr	r2, [r7, #20]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d301      	bcc.n	80139b8 <dir_sdi+0x9c>
 80139b4:	2302      	movs	r3, #2
 80139b6:	e028      	b.n	8013a0a <dir_sdi+0xee>
			ofs -= csz;
 80139b8:	683a      	ldr	r2, [r7, #0]
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	1ad3      	subs	r3, r2, r3
 80139be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80139c0:	683a      	ldr	r2, [r7, #0]
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	429a      	cmp	r2, r3
 80139c6:	d2e1      	bcs.n	801398c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80139c8:	6979      	ldr	r1, [r7, #20]
 80139ca:	6938      	ldr	r0, [r7, #16]
 80139cc:	f7ff fcc2 	bl	8013354 <clust2sect>
 80139d0:	4602      	mov	r2, r0
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	697a      	ldr	r2, [r7, #20]
 80139da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	69db      	ldr	r3, [r3, #28]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d101      	bne.n	80139e8 <dir_sdi+0xcc>
 80139e4:	2302      	movs	r3, #2
 80139e6:	e010      	b.n	8013a0a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	69da      	ldr	r2, [r3, #28]
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	0a5b      	lsrs	r3, r3, #9
 80139f0:	441a      	add	r2, r3
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a02:	441a      	add	r2, r3
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013a08:	2300      	movs	r3, #0
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3718      	adds	r7, #24
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}

08013a12 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013a12:	b580      	push	{r7, lr}
 8013a14:	b086      	sub	sp, #24
 8013a16:	af00      	add	r7, sp, #0
 8013a18:	6078      	str	r0, [r7, #4]
 8013a1a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	695b      	ldr	r3, [r3, #20]
 8013a26:	3320      	adds	r3, #32
 8013a28:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	69db      	ldr	r3, [r3, #28]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d003      	beq.n	8013a3a <dir_next+0x28>
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a38:	d301      	bcc.n	8013a3e <dir_next+0x2c>
 8013a3a:	2304      	movs	r3, #4
 8013a3c:	e0aa      	b.n	8013b94 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	f040 8098 	bne.w	8013b7a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	69db      	ldr	r3, [r3, #28]
 8013a4e:	1c5a      	adds	r2, r3, #1
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	699b      	ldr	r3, [r3, #24]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d10b      	bne.n	8013a74 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	095b      	lsrs	r3, r3, #5
 8013a60:	68fa      	ldr	r2, [r7, #12]
 8013a62:	8912      	ldrh	r2, [r2, #8]
 8013a64:	4293      	cmp	r3, r2
 8013a66:	f0c0 8088 	bcc.w	8013b7a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	61da      	str	r2, [r3, #28]
 8013a70:	2304      	movs	r3, #4
 8013a72:	e08f      	b.n	8013b94 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	0a5b      	lsrs	r3, r3, #9
 8013a78:	68fa      	ldr	r2, [r7, #12]
 8013a7a:	8952      	ldrh	r2, [r2, #10]
 8013a7c:	3a01      	subs	r2, #1
 8013a7e:	4013      	ands	r3, r2
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d17a      	bne.n	8013b7a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013a84:	687a      	ldr	r2, [r7, #4]
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	699b      	ldr	r3, [r3, #24]
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	4610      	mov	r0, r2
 8013a8e:	f7ff fc80 	bl	8013392 <get_fat>
 8013a92:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013a94:	697b      	ldr	r3, [r7, #20]
 8013a96:	2b01      	cmp	r3, #1
 8013a98:	d801      	bhi.n	8013a9e <dir_next+0x8c>
 8013a9a:	2302      	movs	r3, #2
 8013a9c:	e07a      	b.n	8013b94 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013a9e:	697b      	ldr	r3, [r7, #20]
 8013aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aa4:	d101      	bne.n	8013aaa <dir_next+0x98>
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	e074      	b.n	8013b94 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	699b      	ldr	r3, [r3, #24]
 8013aae:	697a      	ldr	r2, [r7, #20]
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d358      	bcc.n	8013b66 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d104      	bne.n	8013ac4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2200      	movs	r2, #0
 8013abe:	61da      	str	r2, [r3, #28]
 8013ac0:	2304      	movs	r3, #4
 8013ac2:	e067      	b.n	8013b94 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	699b      	ldr	r3, [r3, #24]
 8013aca:	4619      	mov	r1, r3
 8013acc:	4610      	mov	r0, r2
 8013ace:	f7ff fe59 	bl	8013784 <create_chain>
 8013ad2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d101      	bne.n	8013ade <dir_next+0xcc>
 8013ada:	2307      	movs	r3, #7
 8013adc:	e05a      	b.n	8013b94 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	2b01      	cmp	r3, #1
 8013ae2:	d101      	bne.n	8013ae8 <dir_next+0xd6>
 8013ae4:	2302      	movs	r3, #2
 8013ae6:	e055      	b.n	8013b94 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aee:	d101      	bne.n	8013af4 <dir_next+0xe2>
 8013af0:	2301      	movs	r3, #1
 8013af2:	e04f      	b.n	8013b94 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013af4:	68f8      	ldr	r0, [r7, #12]
 8013af6:	f7ff fb4d 	bl	8013194 <sync_window>
 8013afa:	4603      	mov	r3, r0
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d001      	beq.n	8013b04 <dir_next+0xf2>
 8013b00:	2301      	movs	r3, #1
 8013b02:	e047      	b.n	8013b94 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	3334      	adds	r3, #52	; 0x34
 8013b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b0c:	2100      	movs	r1, #0
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7ff f977 	bl	8012e02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013b14:	2300      	movs	r3, #0
 8013b16:	613b      	str	r3, [r7, #16]
 8013b18:	6979      	ldr	r1, [r7, #20]
 8013b1a:	68f8      	ldr	r0, [r7, #12]
 8013b1c:	f7ff fc1a 	bl	8013354 <clust2sect>
 8013b20:	4602      	mov	r2, r0
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	631a      	str	r2, [r3, #48]	; 0x30
 8013b26:	e012      	b.n	8013b4e <dir_next+0x13c>
						fs->wflag = 1;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2201      	movs	r2, #1
 8013b2c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013b2e:	68f8      	ldr	r0, [r7, #12]
 8013b30:	f7ff fb30 	bl	8013194 <sync_window>
 8013b34:	4603      	mov	r3, r0
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d001      	beq.n	8013b3e <dir_next+0x12c>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	e02a      	b.n	8013b94 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	3301      	adds	r3, #1
 8013b42:	613b      	str	r3, [r7, #16]
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b48:	1c5a      	adds	r2, r3, #1
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	631a      	str	r2, [r3, #48]	; 0x30
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	895b      	ldrh	r3, [r3, #10]
 8013b52:	461a      	mov	r2, r3
 8013b54:	693b      	ldr	r3, [r7, #16]
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d3e6      	bcc.n	8013b28 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	1ad2      	subs	r2, r2, r3
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	697a      	ldr	r2, [r7, #20]
 8013b6a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013b6c:	6979      	ldr	r1, [r7, #20]
 8013b6e:	68f8      	ldr	r0, [r7, #12]
 8013b70:	f7ff fbf0 	bl	8013354 <clust2sect>
 8013b74:	4602      	mov	r2, r0
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	68ba      	ldr	r2, [r7, #8]
 8013b7e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b8c:	441a      	add	r2, r3
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013b92:	2300      	movs	r3, #0
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3718      	adds	r7, #24
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b086      	sub	sp, #24
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013bac:	2100      	movs	r1, #0
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7ff feb4 	bl	801391c <dir_sdi>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013bb8:	7dfb      	ldrb	r3, [r7, #23]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d12b      	bne.n	8013c16 <dir_alloc+0x7a>
		n = 0;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	69db      	ldr	r3, [r3, #28]
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	68f8      	ldr	r0, [r7, #12]
 8013bca:	f7ff fb27 	bl	801321c <move_window>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013bd2:	7dfb      	ldrb	r3, [r7, #23]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d11d      	bne.n	8013c14 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6a1b      	ldr	r3, [r3, #32]
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	2be5      	cmp	r3, #229	; 0xe5
 8013be0:	d004      	beq.n	8013bec <dir_alloc+0x50>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6a1b      	ldr	r3, [r3, #32]
 8013be6:	781b      	ldrb	r3, [r3, #0]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d107      	bne.n	8013bfc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	3301      	adds	r3, #1
 8013bf0:	613b      	str	r3, [r7, #16]
 8013bf2:	693a      	ldr	r2, [r7, #16]
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d102      	bne.n	8013c00 <dir_alloc+0x64>
 8013bfa:	e00c      	b.n	8013c16 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013c00:	2101      	movs	r1, #1
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f7ff ff05 	bl	8013a12 <dir_next>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013c0c:	7dfb      	ldrb	r3, [r7, #23]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d0d7      	beq.n	8013bc2 <dir_alloc+0x26>
 8013c12:	e000      	b.n	8013c16 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013c14:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013c16:	7dfb      	ldrb	r3, [r7, #23]
 8013c18:	2b04      	cmp	r3, #4
 8013c1a:	d101      	bne.n	8013c20 <dir_alloc+0x84>
 8013c1c:	2307      	movs	r3, #7
 8013c1e:	75fb      	strb	r3, [r7, #23]
	return res;
 8013c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3718      	adds	r7, #24
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}

08013c2a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013c2a:	b580      	push	{r7, lr}
 8013c2c:	b084      	sub	sp, #16
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	6078      	str	r0, [r7, #4]
 8013c32:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	331a      	adds	r3, #26
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7ff f83f 	bl	8012cbc <ld_word>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	2b03      	cmp	r3, #3
 8013c48:	d109      	bne.n	8013c5e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	3314      	adds	r3, #20
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7ff f834 	bl	8012cbc <ld_word>
 8013c54:	4603      	mov	r3, r0
 8013c56:	041b      	lsls	r3, r3, #16
 8013c58:	68fa      	ldr	r2, [r7, #12]
 8013c5a:	4313      	orrs	r3, r2
 8013c5c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013c5e:	68fb      	ldr	r3, [r7, #12]
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3710      	adds	r7, #16
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b084      	sub	sp, #16
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	60f8      	str	r0, [r7, #12]
 8013c70:	60b9      	str	r1, [r7, #8]
 8013c72:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	331a      	adds	r3, #26
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	b292      	uxth	r2, r2
 8013c7c:	4611      	mov	r1, r2
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7ff f857 	bl	8012d32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	2b03      	cmp	r3, #3
 8013c8a:	d109      	bne.n	8013ca0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	f103 0214 	add.w	r2, r3, #20
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	0c1b      	lsrs	r3, r3, #16
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	4619      	mov	r1, r3
 8013c9a:	4610      	mov	r0, r2
 8013c9c:	f7ff f849 	bl	8012d32 <st_word>
	}
}
 8013ca0:	bf00      	nop
 8013ca2:	3710      	adds	r7, #16
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}

08013ca8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8013ca8:	b590      	push	{r4, r7, lr}
 8013caa:	b087      	sub	sp, #28
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	331a      	adds	r3, #26
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7ff f800 	bl	8012cbc <ld_word>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d001      	beq.n	8013cc6 <cmp_lfn+0x1e>
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	e059      	b.n	8013d7a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013cce:	1e5a      	subs	r2, r3, #1
 8013cd0:	4613      	mov	r3, r2
 8013cd2:	005b      	lsls	r3, r3, #1
 8013cd4:	4413      	add	r3, r2
 8013cd6:	009b      	lsls	r3, r3, #2
 8013cd8:	4413      	add	r3, r2
 8013cda:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013cdc:	2301      	movs	r3, #1
 8013cde:	81fb      	strh	r3, [r7, #14]
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	613b      	str	r3, [r7, #16]
 8013ce4:	e033      	b.n	8013d4e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013ce6:	4a27      	ldr	r2, [pc, #156]	; (8013d84 <cmp_lfn+0xdc>)
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	4413      	add	r3, r2
 8013cec:	781b      	ldrb	r3, [r3, #0]
 8013cee:	461a      	mov	r2, r3
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	4413      	add	r3, r2
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7fe ffe1 	bl	8012cbc <ld_word>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013cfe:	89fb      	ldrh	r3, [r7, #14]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d01a      	beq.n	8013d3a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	2bfe      	cmp	r3, #254	; 0xfe
 8013d08:	d812      	bhi.n	8013d30 <cmp_lfn+0x88>
 8013d0a:	89bb      	ldrh	r3, [r7, #12]
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f002 fb45 	bl	801639c <ff_wtoupper>
 8013d12:	4603      	mov	r3, r0
 8013d14:	461c      	mov	r4, r3
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	1c5a      	adds	r2, r3, #1
 8013d1a:	617a      	str	r2, [r7, #20]
 8013d1c:	005b      	lsls	r3, r3, #1
 8013d1e:	687a      	ldr	r2, [r7, #4]
 8013d20:	4413      	add	r3, r2
 8013d22:	881b      	ldrh	r3, [r3, #0]
 8013d24:	4618      	mov	r0, r3
 8013d26:	f002 fb39 	bl	801639c <ff_wtoupper>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	429c      	cmp	r4, r3
 8013d2e:	d001      	beq.n	8013d34 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8013d30:	2300      	movs	r3, #0
 8013d32:	e022      	b.n	8013d7a <cmp_lfn+0xd2>
			}
			wc = uc;
 8013d34:	89bb      	ldrh	r3, [r7, #12]
 8013d36:	81fb      	strh	r3, [r7, #14]
 8013d38:	e006      	b.n	8013d48 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013d3a:	89bb      	ldrh	r3, [r7, #12]
 8013d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d40:	4293      	cmp	r3, r2
 8013d42:	d001      	beq.n	8013d48 <cmp_lfn+0xa0>
 8013d44:	2300      	movs	r3, #0
 8013d46:	e018      	b.n	8013d7a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	613b      	str	r3, [r7, #16]
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	2b0c      	cmp	r3, #12
 8013d52:	d9c8      	bls.n	8013ce6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d00b      	beq.n	8013d78 <cmp_lfn+0xd0>
 8013d60:	89fb      	ldrh	r3, [r7, #14]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d008      	beq.n	8013d78 <cmp_lfn+0xd0>
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	005b      	lsls	r3, r3, #1
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	881b      	ldrh	r3, [r3, #0]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d001      	beq.n	8013d78 <cmp_lfn+0xd0>
 8013d74:	2300      	movs	r3, #0
 8013d76:	e000      	b.n	8013d7a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8013d78:	2301      	movs	r3, #1
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	371c      	adds	r7, #28
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd90      	pop	{r4, r7, pc}
 8013d82:	bf00      	nop
 8013d84:	08021b34 	.word	0x08021b34

08013d88 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b086      	sub	sp, #24
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	331a      	adds	r3, #26
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7fe ff90 	bl	8012cbc <ld_word>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d001      	beq.n	8013da6 <pick_lfn+0x1e>
 8013da2:	2300      	movs	r3, #0
 8013da4:	e04d      	b.n	8013e42 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013dae:	1e5a      	subs	r2, r3, #1
 8013db0:	4613      	mov	r3, r2
 8013db2:	005b      	lsls	r3, r3, #1
 8013db4:	4413      	add	r3, r2
 8013db6:	009b      	lsls	r3, r3, #2
 8013db8:	4413      	add	r3, r2
 8013dba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	81fb      	strh	r3, [r7, #14]
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	613b      	str	r3, [r7, #16]
 8013dc4:	e028      	b.n	8013e18 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013dc6:	4a21      	ldr	r2, [pc, #132]	; (8013e4c <pick_lfn+0xc4>)
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	4413      	add	r3, r2
 8013dcc:	781b      	ldrb	r3, [r3, #0]
 8013dce:	461a      	mov	r2, r3
 8013dd0:	683b      	ldr	r3, [r7, #0]
 8013dd2:	4413      	add	r3, r2
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7fe ff71 	bl	8012cbc <ld_word>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013dde:	89fb      	ldrh	r3, [r7, #14]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d00f      	beq.n	8013e04 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8013de4:	697b      	ldr	r3, [r7, #20]
 8013de6:	2bfe      	cmp	r3, #254	; 0xfe
 8013de8:	d901      	bls.n	8013dee <pick_lfn+0x66>
 8013dea:	2300      	movs	r3, #0
 8013dec:	e029      	b.n	8013e42 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8013dee:	89bb      	ldrh	r3, [r7, #12]
 8013df0:	81fb      	strh	r3, [r7, #14]
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	1c5a      	adds	r2, r3, #1
 8013df6:	617a      	str	r2, [r7, #20]
 8013df8:	005b      	lsls	r3, r3, #1
 8013dfa:	687a      	ldr	r2, [r7, #4]
 8013dfc:	4413      	add	r3, r2
 8013dfe:	89fa      	ldrh	r2, [r7, #14]
 8013e00:	801a      	strh	r2, [r3, #0]
 8013e02:	e006      	b.n	8013e12 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013e04:	89bb      	ldrh	r3, [r7, #12]
 8013e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e0a:	4293      	cmp	r3, r2
 8013e0c:	d001      	beq.n	8013e12 <pick_lfn+0x8a>
 8013e0e:	2300      	movs	r3, #0
 8013e10:	e017      	b.n	8013e42 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	3301      	adds	r3, #1
 8013e16:	613b      	str	r3, [r7, #16]
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	2b0c      	cmp	r3, #12
 8013e1c:	d9d3      	bls.n	8013dc6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d00a      	beq.n	8013e40 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	2bfe      	cmp	r3, #254	; 0xfe
 8013e2e:	d901      	bls.n	8013e34 <pick_lfn+0xac>
 8013e30:	2300      	movs	r3, #0
 8013e32:	e006      	b.n	8013e42 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	005b      	lsls	r3, r3, #1
 8013e38:	687a      	ldr	r2, [r7, #4]
 8013e3a:	4413      	add	r3, r2
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8013e40:	2301      	movs	r3, #1
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3718      	adds	r7, #24
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	08021b34 	.word	0x08021b34

08013e50 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b088      	sub	sp, #32
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	60f8      	str	r0, [r7, #12]
 8013e58:	60b9      	str	r1, [r7, #8]
 8013e5a:	4611      	mov	r1, r2
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	460b      	mov	r3, r1
 8013e60:	71fb      	strb	r3, [r7, #7]
 8013e62:	4613      	mov	r3, r2
 8013e64:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	330d      	adds	r3, #13
 8013e6a:	79ba      	ldrb	r2, [r7, #6]
 8013e6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	330b      	adds	r3, #11
 8013e72:	220f      	movs	r2, #15
 8013e74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	330c      	adds	r3, #12
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	331a      	adds	r3, #26
 8013e82:	2100      	movs	r1, #0
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7fe ff54 	bl	8012d32 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8013e8a:	79fb      	ldrb	r3, [r7, #7]
 8013e8c:	1e5a      	subs	r2, r3, #1
 8013e8e:	4613      	mov	r3, r2
 8013e90:	005b      	lsls	r3, r3, #1
 8013e92:	4413      	add	r3, r2
 8013e94:	009b      	lsls	r3, r3, #2
 8013e96:	4413      	add	r3, r2
 8013e98:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	82fb      	strh	r3, [r7, #22]
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013ea2:	8afb      	ldrh	r3, [r7, #22]
 8013ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	d007      	beq.n	8013ebc <put_lfn+0x6c>
 8013eac:	69fb      	ldr	r3, [r7, #28]
 8013eae:	1c5a      	adds	r2, r3, #1
 8013eb0:	61fa      	str	r2, [r7, #28]
 8013eb2:	005b      	lsls	r3, r3, #1
 8013eb4:	68fa      	ldr	r2, [r7, #12]
 8013eb6:	4413      	add	r3, r2
 8013eb8:	881b      	ldrh	r3, [r3, #0]
 8013eba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8013ebc:	4a17      	ldr	r2, [pc, #92]	; (8013f1c <put_lfn+0xcc>)
 8013ebe:	69bb      	ldr	r3, [r7, #24]
 8013ec0:	4413      	add	r3, r2
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	4413      	add	r3, r2
 8013eca:	8afa      	ldrh	r2, [r7, #22]
 8013ecc:	4611      	mov	r1, r2
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7fe ff2f 	bl	8012d32 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013ed4:	8afb      	ldrh	r3, [r7, #22]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d102      	bne.n	8013ee0 <put_lfn+0x90>
 8013eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ede:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8013ee0:	69bb      	ldr	r3, [r7, #24]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	61bb      	str	r3, [r7, #24]
 8013ee6:	69bb      	ldr	r3, [r7, #24]
 8013ee8:	2b0c      	cmp	r3, #12
 8013eea:	d9da      	bls.n	8013ea2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013eec:	8afb      	ldrh	r3, [r7, #22]
 8013eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d006      	beq.n	8013f04 <put_lfn+0xb4>
 8013ef6:	69fb      	ldr	r3, [r7, #28]
 8013ef8:	005b      	lsls	r3, r3, #1
 8013efa:	68fa      	ldr	r2, [r7, #12]
 8013efc:	4413      	add	r3, r2
 8013efe:	881b      	ldrh	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d103      	bne.n	8013f0c <put_lfn+0xbc>
 8013f04:	79fb      	ldrb	r3, [r7, #7]
 8013f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f0a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	79fa      	ldrb	r2, [r7, #7]
 8013f10:	701a      	strb	r2, [r3, #0]
}
 8013f12:	bf00      	nop
 8013f14:	3720      	adds	r7, #32
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bd80      	pop	{r7, pc}
 8013f1a:	bf00      	nop
 8013f1c:	08021b34 	.word	0x08021b34

08013f20 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b08c      	sub	sp, #48	; 0x30
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	60b9      	str	r1, [r7, #8]
 8013f2a:	607a      	str	r2, [r7, #4]
 8013f2c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8013f2e:	220b      	movs	r2, #11
 8013f30:	68b9      	ldr	r1, [r7, #8]
 8013f32:	68f8      	ldr	r0, [r7, #12]
 8013f34:	f7fe ff44 	bl	8012dc0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	2b05      	cmp	r3, #5
 8013f3c:	d92b      	bls.n	8013f96 <gen_numname+0x76>
		sr = seq;
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8013f42:	e022      	b.n	8013f8a <gen_numname+0x6a>
			wc = *lfn++;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	1c9a      	adds	r2, r3, #2
 8013f48:	607a      	str	r2, [r7, #4]
 8013f4a:	881b      	ldrh	r3, [r3, #0]
 8013f4c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8013f4e:	2300      	movs	r3, #0
 8013f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f52:	e017      	b.n	8013f84 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8013f54:	69fb      	ldr	r3, [r7, #28]
 8013f56:	005a      	lsls	r2, r3, #1
 8013f58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f5a:	f003 0301 	and.w	r3, r3, #1
 8013f5e:	4413      	add	r3, r2
 8013f60:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8013f62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f64:	085b      	lsrs	r3, r3, #1
 8013f66:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8013f68:	69fb      	ldr	r3, [r7, #28]
 8013f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d005      	beq.n	8013f7e <gen_numname+0x5e>
 8013f72:	69fb      	ldr	r3, [r7, #28]
 8013f74:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8013f78:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8013f7c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8013f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f80:	3301      	adds	r3, #1
 8013f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f86:	2b0f      	cmp	r3, #15
 8013f88:	d9e4      	bls.n	8013f54 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	881b      	ldrh	r3, [r3, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d1d8      	bne.n	8013f44 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8013f92:	69fb      	ldr	r3, [r7, #28]
 8013f94:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8013f96:	2307      	movs	r3, #7
 8013f98:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	f003 030f 	and.w	r3, r3, #15
 8013fa2:	b2db      	uxtb	r3, r3
 8013fa4:	3330      	adds	r3, #48	; 0x30
 8013fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8013faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fae:	2b39      	cmp	r3, #57	; 0x39
 8013fb0:	d904      	bls.n	8013fbc <gen_numname+0x9c>
 8013fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fb6:	3307      	adds	r3, #7
 8013fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8013fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fbe:	1e5a      	subs	r2, r3, #1
 8013fc0:	62ba      	str	r2, [r7, #40]	; 0x28
 8013fc2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013fc6:	4413      	add	r3, r2
 8013fc8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013fcc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	091b      	lsrs	r3, r3, #4
 8013fd4:	603b      	str	r3, [r7, #0]
	} while (seq);
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d1de      	bne.n	8013f9a <gen_numname+0x7a>
	ns[i] = '~';
 8013fdc:	f107 0214 	add.w	r2, r7, #20
 8013fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe2:	4413      	add	r3, r2
 8013fe4:	227e      	movs	r2, #126	; 0x7e
 8013fe6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013fe8:	2300      	movs	r3, #0
 8013fea:	627b      	str	r3, [r7, #36]	; 0x24
 8013fec:	e002      	b.n	8013ff4 <gen_numname+0xd4>
 8013fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8013ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d205      	bcs.n	8014008 <gen_numname+0xe8>
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014000:	4413      	add	r3, r2
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	2b20      	cmp	r3, #32
 8014006:	d1f2      	bne.n	8013fee <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801400a:	2b07      	cmp	r3, #7
 801400c:	d808      	bhi.n	8014020 <gen_numname+0x100>
 801400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014010:	1c5a      	adds	r2, r3, #1
 8014012:	62ba      	str	r2, [r7, #40]	; 0x28
 8014014:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014018:	4413      	add	r3, r2
 801401a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801401e:	e000      	b.n	8014022 <gen_numname+0x102>
 8014020:	2120      	movs	r1, #32
 8014022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014024:	1c5a      	adds	r2, r3, #1
 8014026:	627a      	str	r2, [r7, #36]	; 0x24
 8014028:	68fa      	ldr	r2, [r7, #12]
 801402a:	4413      	add	r3, r2
 801402c:	460a      	mov	r2, r1
 801402e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8014030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014032:	2b07      	cmp	r3, #7
 8014034:	d9e8      	bls.n	8014008 <gen_numname+0xe8>
}
 8014036:	bf00      	nop
 8014038:	bf00      	nop
 801403a:	3730      	adds	r7, #48	; 0x30
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014040:	b480      	push	{r7}
 8014042:	b085      	sub	sp, #20
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8014048:	2300      	movs	r3, #0
 801404a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801404c:	230b      	movs	r3, #11
 801404e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014050:	7bfb      	ldrb	r3, [r7, #15]
 8014052:	b2da      	uxtb	r2, r3
 8014054:	0852      	lsrs	r2, r2, #1
 8014056:	01db      	lsls	r3, r3, #7
 8014058:	4313      	orrs	r3, r2
 801405a:	b2da      	uxtb	r2, r3
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	1c59      	adds	r1, r3, #1
 8014060:	6079      	str	r1, [r7, #4]
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	4413      	add	r3, r2
 8014066:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	3b01      	subs	r3, #1
 801406c:	60bb      	str	r3, [r7, #8]
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d1ed      	bne.n	8014050 <sum_sfn+0x10>
	return sum;
 8014074:	7bfb      	ldrb	r3, [r7, #15]
}
 8014076:	4618      	mov	r0, r3
 8014078:	3714      	adds	r7, #20
 801407a:	46bd      	mov	sp, r7
 801407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014080:	4770      	bx	lr

08014082 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8014082:	b580      	push	{r7, lr}
 8014084:	b086      	sub	sp, #24
 8014086:	af00      	add	r7, sp, #0
 8014088:	6078      	str	r0, [r7, #4]
 801408a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801408c:	2304      	movs	r3, #4
 801408e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8014096:	23ff      	movs	r3, #255	; 0xff
 8014098:	757b      	strb	r3, [r7, #21]
 801409a:	23ff      	movs	r3, #255	; 0xff
 801409c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801409e:	e081      	b.n	80141a4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	69db      	ldr	r3, [r3, #28]
 80140a4:	4619      	mov	r1, r3
 80140a6:	6938      	ldr	r0, [r7, #16]
 80140a8:	f7ff f8b8 	bl	801321c <move_window>
 80140ac:	4603      	mov	r3, r0
 80140ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80140b0:	7dfb      	ldrb	r3, [r7, #23]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d17c      	bne.n	80141b0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6a1b      	ldr	r3, [r3, #32]
 80140ba:	781b      	ldrb	r3, [r3, #0]
 80140bc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80140be:	7dbb      	ldrb	r3, [r7, #22]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d102      	bne.n	80140ca <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80140c4:	2304      	movs	r3, #4
 80140c6:	75fb      	strb	r3, [r7, #23]
 80140c8:	e077      	b.n	80141ba <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6a1b      	ldr	r3, [r3, #32]
 80140ce:	330b      	adds	r3, #11
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140d6:	73fb      	strb	r3, [r7, #15]
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	7bfa      	ldrb	r2, [r7, #15]
 80140dc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80140de:	7dbb      	ldrb	r3, [r7, #22]
 80140e0:	2be5      	cmp	r3, #229	; 0xe5
 80140e2:	d00e      	beq.n	8014102 <dir_read+0x80>
 80140e4:	7dbb      	ldrb	r3, [r7, #22]
 80140e6:	2b2e      	cmp	r3, #46	; 0x2e
 80140e8:	d00b      	beq.n	8014102 <dir_read+0x80>
 80140ea:	7bfb      	ldrb	r3, [r7, #15]
 80140ec:	f023 0320 	bic.w	r3, r3, #32
 80140f0:	2b08      	cmp	r3, #8
 80140f2:	bf0c      	ite	eq
 80140f4:	2301      	moveq	r3, #1
 80140f6:	2300      	movne	r3, #0
 80140f8:	b2db      	uxtb	r3, r3
 80140fa:	461a      	mov	r2, r3
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	4293      	cmp	r3, r2
 8014100:	d002      	beq.n	8014108 <dir_read+0x86>
				ord = 0xFF;
 8014102:	23ff      	movs	r3, #255	; 0xff
 8014104:	757b      	strb	r3, [r7, #21]
 8014106:	e044      	b.n	8014192 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8014108:	7bfb      	ldrb	r3, [r7, #15]
 801410a:	2b0f      	cmp	r3, #15
 801410c:	d12f      	bne.n	801416e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801410e:	7dbb      	ldrb	r3, [r7, #22]
 8014110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014114:	2b00      	cmp	r3, #0
 8014116:	d00d      	beq.n	8014134 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6a1b      	ldr	r3, [r3, #32]
 801411c:	7b5b      	ldrb	r3, [r3, #13]
 801411e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8014120:	7dbb      	ldrb	r3, [r7, #22]
 8014122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014126:	75bb      	strb	r3, [r7, #22]
 8014128:	7dbb      	ldrb	r3, [r7, #22]
 801412a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	695a      	ldr	r2, [r3, #20]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014134:	7dba      	ldrb	r2, [r7, #22]
 8014136:	7d7b      	ldrb	r3, [r7, #21]
 8014138:	429a      	cmp	r2, r3
 801413a:	d115      	bne.n	8014168 <dir_read+0xe6>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	6a1b      	ldr	r3, [r3, #32]
 8014140:	330d      	adds	r3, #13
 8014142:	781b      	ldrb	r3, [r3, #0]
 8014144:	7d3a      	ldrb	r2, [r7, #20]
 8014146:	429a      	cmp	r2, r3
 8014148:	d10e      	bne.n	8014168 <dir_read+0xe6>
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	68da      	ldr	r2, [r3, #12]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6a1b      	ldr	r3, [r3, #32]
 8014152:	4619      	mov	r1, r3
 8014154:	4610      	mov	r0, r2
 8014156:	f7ff fe17 	bl	8013d88 <pick_lfn>
 801415a:	4603      	mov	r3, r0
 801415c:	2b00      	cmp	r3, #0
 801415e:	d003      	beq.n	8014168 <dir_read+0xe6>
 8014160:	7d7b      	ldrb	r3, [r7, #21]
 8014162:	3b01      	subs	r3, #1
 8014164:	b2db      	uxtb	r3, r3
 8014166:	e000      	b.n	801416a <dir_read+0xe8>
 8014168:	23ff      	movs	r3, #255	; 0xff
 801416a:	757b      	strb	r3, [r7, #21]
 801416c:	e011      	b.n	8014192 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801416e:	7d7b      	ldrb	r3, [r7, #21]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d109      	bne.n	8014188 <dir_read+0x106>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	6a1b      	ldr	r3, [r3, #32]
 8014178:	4618      	mov	r0, r3
 801417a:	f7ff ff61 	bl	8014040 <sum_sfn>
 801417e:	4603      	mov	r3, r0
 8014180:	461a      	mov	r2, r3
 8014182:	7d3b      	ldrb	r3, [r7, #20]
 8014184:	4293      	cmp	r3, r2
 8014186:	d015      	beq.n	80141b4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f04f 32ff 	mov.w	r2, #4294967295
 801418e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8014190:	e010      	b.n	80141b4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8014192:	2100      	movs	r1, #0
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f7ff fc3c 	bl	8013a12 <dir_next>
 801419a:	4603      	mov	r3, r0
 801419c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801419e:	7dfb      	ldrb	r3, [r7, #23]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d109      	bne.n	80141b8 <dir_read+0x136>
	while (dp->sect) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	69db      	ldr	r3, [r3, #28]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	f47f af79 	bne.w	80140a0 <dir_read+0x1e>
 80141ae:	e004      	b.n	80141ba <dir_read+0x138>
		if (res != FR_OK) break;
 80141b0:	bf00      	nop
 80141b2:	e002      	b.n	80141ba <dir_read+0x138>
					break;
 80141b4:	bf00      	nop
 80141b6:	e000      	b.n	80141ba <dir_read+0x138>
		if (res != FR_OK) break;
 80141b8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80141ba:	7dfb      	ldrb	r3, [r7, #23]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d002      	beq.n	80141c6 <dir_read+0x144>
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2200      	movs	r2, #0
 80141c4:	61da      	str	r2, [r3, #28]
	return res;
 80141c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3718      	adds	r7, #24
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b086      	sub	sp, #24
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80141de:	2100      	movs	r1, #0
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f7ff fb9b 	bl	801391c <dir_sdi>
 80141e6:	4603      	mov	r3, r0
 80141e8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80141ea:	7dfb      	ldrb	r3, [r7, #23]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d001      	beq.n	80141f4 <dir_find+0x24>
 80141f0:	7dfb      	ldrb	r3, [r7, #23]
 80141f2:	e0a9      	b.n	8014348 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80141f4:	23ff      	movs	r3, #255	; 0xff
 80141f6:	753b      	strb	r3, [r7, #20]
 80141f8:	7d3b      	ldrb	r3, [r7, #20]
 80141fa:	757b      	strb	r3, [r7, #21]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014202:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	69db      	ldr	r3, [r3, #28]
 8014208:	4619      	mov	r1, r3
 801420a:	6938      	ldr	r0, [r7, #16]
 801420c:	f7ff f806 	bl	801321c <move_window>
 8014210:	4603      	mov	r3, r0
 8014212:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014214:	7dfb      	ldrb	r3, [r7, #23]
 8014216:	2b00      	cmp	r3, #0
 8014218:	f040 8090 	bne.w	801433c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	6a1b      	ldr	r3, [r3, #32]
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014224:	7dbb      	ldrb	r3, [r7, #22]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d102      	bne.n	8014230 <dir_find+0x60>
 801422a:	2304      	movs	r3, #4
 801422c:	75fb      	strb	r3, [r7, #23]
 801422e:	e08a      	b.n	8014346 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6a1b      	ldr	r3, [r3, #32]
 8014234:	330b      	adds	r3, #11
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801423c:	73fb      	strb	r3, [r7, #15]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	7bfa      	ldrb	r2, [r7, #15]
 8014242:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014244:	7dbb      	ldrb	r3, [r7, #22]
 8014246:	2be5      	cmp	r3, #229	; 0xe5
 8014248:	d007      	beq.n	801425a <dir_find+0x8a>
 801424a:	7bfb      	ldrb	r3, [r7, #15]
 801424c:	f003 0308 	and.w	r3, r3, #8
 8014250:	2b00      	cmp	r3, #0
 8014252:	d009      	beq.n	8014268 <dir_find+0x98>
 8014254:	7bfb      	ldrb	r3, [r7, #15]
 8014256:	2b0f      	cmp	r3, #15
 8014258:	d006      	beq.n	8014268 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801425a:	23ff      	movs	r3, #255	; 0xff
 801425c:	757b      	strb	r3, [r7, #21]
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f04f 32ff 	mov.w	r2, #4294967295
 8014264:	631a      	str	r2, [r3, #48]	; 0x30
 8014266:	e05e      	b.n	8014326 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8014268:	7bfb      	ldrb	r3, [r7, #15]
 801426a:	2b0f      	cmp	r3, #15
 801426c:	d136      	bne.n	80142dc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014278:	2b00      	cmp	r3, #0
 801427a:	d154      	bne.n	8014326 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801427c:	7dbb      	ldrb	r3, [r7, #22]
 801427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014282:	2b00      	cmp	r3, #0
 8014284:	d00d      	beq.n	80142a2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6a1b      	ldr	r3, [r3, #32]
 801428a:	7b5b      	ldrb	r3, [r3, #13]
 801428c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801428e:	7dbb      	ldrb	r3, [r7, #22]
 8014290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014294:	75bb      	strb	r3, [r7, #22]
 8014296:	7dbb      	ldrb	r3, [r7, #22]
 8014298:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	695a      	ldr	r2, [r3, #20]
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80142a2:	7dba      	ldrb	r2, [r7, #22]
 80142a4:	7d7b      	ldrb	r3, [r7, #21]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d115      	bne.n	80142d6 <dir_find+0x106>
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6a1b      	ldr	r3, [r3, #32]
 80142ae:	330d      	adds	r3, #13
 80142b0:	781b      	ldrb	r3, [r3, #0]
 80142b2:	7d3a      	ldrb	r2, [r7, #20]
 80142b4:	429a      	cmp	r2, r3
 80142b6:	d10e      	bne.n	80142d6 <dir_find+0x106>
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	68da      	ldr	r2, [r3, #12]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6a1b      	ldr	r3, [r3, #32]
 80142c0:	4619      	mov	r1, r3
 80142c2:	4610      	mov	r0, r2
 80142c4:	f7ff fcf0 	bl	8013ca8 <cmp_lfn>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d003      	beq.n	80142d6 <dir_find+0x106>
 80142ce:	7d7b      	ldrb	r3, [r7, #21]
 80142d0:	3b01      	subs	r3, #1
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	e000      	b.n	80142d8 <dir_find+0x108>
 80142d6:	23ff      	movs	r3, #255	; 0xff
 80142d8:	757b      	strb	r3, [r7, #21]
 80142da:	e024      	b.n	8014326 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80142dc:	7d7b      	ldrb	r3, [r7, #21]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d109      	bne.n	80142f6 <dir_find+0x126>
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6a1b      	ldr	r3, [r3, #32]
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7ff feaa 	bl	8014040 <sum_sfn>
 80142ec:	4603      	mov	r3, r0
 80142ee:	461a      	mov	r2, r3
 80142f0:	7d3b      	ldrb	r3, [r7, #20]
 80142f2:	4293      	cmp	r3, r2
 80142f4:	d024      	beq.n	8014340 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80142fc:	f003 0301 	and.w	r3, r3, #1
 8014300:	2b00      	cmp	r3, #0
 8014302:	d10a      	bne.n	801431a <dir_find+0x14a>
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6a18      	ldr	r0, [r3, #32]
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	3324      	adds	r3, #36	; 0x24
 801430c:	220b      	movs	r2, #11
 801430e:	4619      	mov	r1, r3
 8014310:	f7fe fd92 	bl	8012e38 <mem_cmp>
 8014314:	4603      	mov	r3, r0
 8014316:	2b00      	cmp	r3, #0
 8014318:	d014      	beq.n	8014344 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801431a:	23ff      	movs	r3, #255	; 0xff
 801431c:	757b      	strb	r3, [r7, #21]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f04f 32ff 	mov.w	r2, #4294967295
 8014324:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014326:	2100      	movs	r1, #0
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f7ff fb72 	bl	8013a12 <dir_next>
 801432e:	4603      	mov	r3, r0
 8014330:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014332:	7dfb      	ldrb	r3, [r7, #23]
 8014334:	2b00      	cmp	r3, #0
 8014336:	f43f af65 	beq.w	8014204 <dir_find+0x34>
 801433a:	e004      	b.n	8014346 <dir_find+0x176>
		if (res != FR_OK) break;
 801433c:	bf00      	nop
 801433e:	e002      	b.n	8014346 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014340:	bf00      	nop
 8014342:	e000      	b.n	8014346 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014344:	bf00      	nop

	return res;
 8014346:	7dfb      	ldrb	r3, [r7, #23]
}
 8014348:	4618      	mov	r0, r3
 801434a:	3718      	adds	r7, #24
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}

08014350 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b08c      	sub	sp, #48	; 0x30
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014364:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8014368:	2b00      	cmp	r3, #0
 801436a:	d001      	beq.n	8014370 <dir_register+0x20>
 801436c:	2306      	movs	r3, #6
 801436e:	e0e0      	b.n	8014532 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8014370:	2300      	movs	r3, #0
 8014372:	627b      	str	r3, [r7, #36]	; 0x24
 8014374:	e002      	b.n	801437c <dir_register+0x2c>
 8014376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014378:	3301      	adds	r3, #1
 801437a:	627b      	str	r3, [r7, #36]	; 0x24
 801437c:	69fb      	ldr	r3, [r7, #28]
 801437e:	68da      	ldr	r2, [r3, #12]
 8014380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014382:	005b      	lsls	r3, r3, #1
 8014384:	4413      	add	r3, r2
 8014386:	881b      	ldrh	r3, [r3, #0]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d1f4      	bne.n	8014376 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8014392:	f107 030c 	add.w	r3, r7, #12
 8014396:	220c      	movs	r2, #12
 8014398:	4618      	mov	r0, r3
 801439a:	f7fe fd11 	bl	8012dc0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801439e:	7dfb      	ldrb	r3, [r7, #23]
 80143a0:	f003 0301 	and.w	r3, r3, #1
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d032      	beq.n	801440e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2240      	movs	r2, #64	; 0x40
 80143ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80143b0:	2301      	movs	r3, #1
 80143b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80143b4:	e016      	b.n	80143e4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	68da      	ldr	r2, [r3, #12]
 80143c0:	f107 010c 	add.w	r1, r7, #12
 80143c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c6:	f7ff fdab 	bl	8013f20 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	f7ff ff00 	bl	80141d0 <dir_find>
 80143d0:	4603      	mov	r3, r0
 80143d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80143d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d106      	bne.n	80143ec <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80143de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e0:	3301      	adds	r3, #1
 80143e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80143e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e6:	2b63      	cmp	r3, #99	; 0x63
 80143e8:	d9e5      	bls.n	80143b6 <dir_register+0x66>
 80143ea:	e000      	b.n	80143ee <dir_register+0x9e>
			if (res != FR_OK) break;
 80143ec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80143ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f0:	2b64      	cmp	r3, #100	; 0x64
 80143f2:	d101      	bne.n	80143f8 <dir_register+0xa8>
 80143f4:	2307      	movs	r3, #7
 80143f6:	e09c      	b.n	8014532 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80143f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143fc:	2b04      	cmp	r3, #4
 80143fe:	d002      	beq.n	8014406 <dir_register+0xb6>
 8014400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014404:	e095      	b.n	8014532 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8014406:	7dfa      	ldrb	r2, [r7, #23]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801440e:	7dfb      	ldrb	r3, [r7, #23]
 8014410:	f003 0302 	and.w	r3, r3, #2
 8014414:	2b00      	cmp	r3, #0
 8014416:	d007      	beq.n	8014428 <dir_register+0xd8>
 8014418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441a:	330c      	adds	r3, #12
 801441c:	4a47      	ldr	r2, [pc, #284]	; (801453c <dir_register+0x1ec>)
 801441e:	fba2 2303 	umull	r2, r3, r2, r3
 8014422:	089b      	lsrs	r3, r3, #2
 8014424:	3301      	adds	r3, #1
 8014426:	e000      	b.n	801442a <dir_register+0xda>
 8014428:	2301      	movs	r3, #1
 801442a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801442c:	6a39      	ldr	r1, [r7, #32]
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f7ff fbb4 	bl	8013b9c <dir_alloc>
 8014434:	4603      	mov	r3, r0
 8014436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801443a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801443e:	2b00      	cmp	r3, #0
 8014440:	d148      	bne.n	80144d4 <dir_register+0x184>
 8014442:	6a3b      	ldr	r3, [r7, #32]
 8014444:	3b01      	subs	r3, #1
 8014446:	623b      	str	r3, [r7, #32]
 8014448:	6a3b      	ldr	r3, [r7, #32]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d042      	beq.n	80144d4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	695a      	ldr	r2, [r3, #20]
 8014452:	6a3b      	ldr	r3, [r7, #32]
 8014454:	015b      	lsls	r3, r3, #5
 8014456:	1ad3      	subs	r3, r2, r3
 8014458:	4619      	mov	r1, r3
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f7ff fa5e 	bl	801391c <dir_sdi>
 8014460:	4603      	mov	r3, r0
 8014462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8014466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801446a:	2b00      	cmp	r3, #0
 801446c:	d132      	bne.n	80144d4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	3324      	adds	r3, #36	; 0x24
 8014472:	4618      	mov	r0, r3
 8014474:	f7ff fde4 	bl	8014040 <sum_sfn>
 8014478:	4603      	mov	r3, r0
 801447a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	69db      	ldr	r3, [r3, #28]
 8014480:	4619      	mov	r1, r3
 8014482:	69f8      	ldr	r0, [r7, #28]
 8014484:	f7fe feca 	bl	801321c <move_window>
 8014488:	4603      	mov	r3, r0
 801448a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801448e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014492:	2b00      	cmp	r3, #0
 8014494:	d11d      	bne.n	80144d2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	68d8      	ldr	r0, [r3, #12]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6a19      	ldr	r1, [r3, #32]
 801449e:	6a3b      	ldr	r3, [r7, #32]
 80144a0:	b2da      	uxtb	r2, r3
 80144a2:	7efb      	ldrb	r3, [r7, #27]
 80144a4:	f7ff fcd4 	bl	8013e50 <put_lfn>
				fs->wflag = 1;
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	2201      	movs	r2, #1
 80144ac:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80144ae:	2100      	movs	r1, #0
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f7ff faae 	bl	8013a12 <dir_next>
 80144b6:	4603      	mov	r3, r0
 80144b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80144bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d107      	bne.n	80144d4 <dir_register+0x184>
 80144c4:	6a3b      	ldr	r3, [r7, #32]
 80144c6:	3b01      	subs	r3, #1
 80144c8:	623b      	str	r3, [r7, #32]
 80144ca:	6a3b      	ldr	r3, [r7, #32]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d1d5      	bne.n	801447c <dir_register+0x12c>
 80144d0:	e000      	b.n	80144d4 <dir_register+0x184>
				if (res != FR_OK) break;
 80144d2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80144d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d128      	bne.n	801452e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	69db      	ldr	r3, [r3, #28]
 80144e0:	4619      	mov	r1, r3
 80144e2:	69f8      	ldr	r0, [r7, #28]
 80144e4:	f7fe fe9a 	bl	801321c <move_window>
 80144e8:	4603      	mov	r3, r0
 80144ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80144ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d11b      	bne.n	801452e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	6a1b      	ldr	r3, [r3, #32]
 80144fa:	2220      	movs	r2, #32
 80144fc:	2100      	movs	r1, #0
 80144fe:	4618      	mov	r0, r3
 8014500:	f7fe fc7f 	bl	8012e02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	6a18      	ldr	r0, [r3, #32]
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	3324      	adds	r3, #36	; 0x24
 801450c:	220b      	movs	r2, #11
 801450e:	4619      	mov	r1, r3
 8014510:	f7fe fc56 	bl	8012dc0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	6a1b      	ldr	r3, [r3, #32]
 801451e:	330c      	adds	r3, #12
 8014520:	f002 0218 	and.w	r2, r2, #24
 8014524:	b2d2      	uxtb	r2, r2
 8014526:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	2201      	movs	r2, #1
 801452c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801452e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014532:	4618      	mov	r0, r3
 8014534:	3730      	adds	r7, #48	; 0x30
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}
 801453a:	bf00      	nop
 801453c:	4ec4ec4f 	.word	0x4ec4ec4f

08014540 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b088      	sub	sp, #32
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	2200      	movs	r2, #0
 8014554:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	69db      	ldr	r3, [r3, #28]
 801455a:	2b00      	cmp	r3, #0
 801455c:	f000 80c9 	beq.w	80146f2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014568:	d032      	beq.n	80145d0 <get_fileinfo+0x90>
			i = j = 0;
 801456a:	2300      	movs	r3, #0
 801456c:	61bb      	str	r3, [r7, #24]
 801456e:	69bb      	ldr	r3, [r7, #24]
 8014570:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8014572:	e01b      	b.n	80145ac <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8014574:	89fb      	ldrh	r3, [r7, #14]
 8014576:	2100      	movs	r1, #0
 8014578:	4618      	mov	r0, r3
 801457a:	f001 fed3 	bl	8016324 <ff_convert>
 801457e:	4603      	mov	r3, r0
 8014580:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8014582:	89fb      	ldrh	r3, [r7, #14]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d102      	bne.n	801458e <get_fileinfo+0x4e>
 8014588:	2300      	movs	r3, #0
 801458a:	61fb      	str	r3, [r7, #28]
 801458c:	e01a      	b.n	80145c4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801458e:	69fb      	ldr	r3, [r7, #28]
 8014590:	2bfe      	cmp	r3, #254	; 0xfe
 8014592:	d902      	bls.n	801459a <get_fileinfo+0x5a>
 8014594:	2300      	movs	r3, #0
 8014596:	61fb      	str	r3, [r7, #28]
 8014598:	e014      	b.n	80145c4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801459a:	69fb      	ldr	r3, [r7, #28]
 801459c:	1c5a      	adds	r2, r3, #1
 801459e:	61fa      	str	r2, [r7, #28]
 80145a0:	89fa      	ldrh	r2, [r7, #14]
 80145a2:	b2d1      	uxtb	r1, r2
 80145a4:	683a      	ldr	r2, [r7, #0]
 80145a6:	4413      	add	r3, r2
 80145a8:	460a      	mov	r2, r1
 80145aa:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	68da      	ldr	r2, [r3, #12]
 80145b0:	69bb      	ldr	r3, [r7, #24]
 80145b2:	1c59      	adds	r1, r3, #1
 80145b4:	61b9      	str	r1, [r7, #24]
 80145b6:	005b      	lsls	r3, r3, #1
 80145b8:	4413      	add	r3, r2
 80145ba:	881b      	ldrh	r3, [r3, #0]
 80145bc:	81fb      	strh	r3, [r7, #14]
 80145be:	89fb      	ldrh	r3, [r7, #14]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d1d7      	bne.n	8014574 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80145c4:	683a      	ldr	r2, [r7, #0]
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	4413      	add	r3, r2
 80145ca:	3316      	adds	r3, #22
 80145cc:	2200      	movs	r2, #0
 80145ce:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80145d0:	2300      	movs	r3, #0
 80145d2:	61bb      	str	r3, [r7, #24]
 80145d4:	69bb      	ldr	r3, [r7, #24]
 80145d6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80145d8:	683a      	ldr	r2, [r7, #0]
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	4413      	add	r3, r2
 80145de:	3316      	adds	r3, #22
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80145e4:	e04c      	b.n	8014680 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	6a1a      	ldr	r2, [r3, #32]
 80145ea:	69fb      	ldr	r3, [r7, #28]
 80145ec:	1c59      	adds	r1, r3, #1
 80145ee:	61f9      	str	r1, [r7, #28]
 80145f0:	4413      	add	r3, r2
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80145f6:	7dfb      	ldrb	r3, [r7, #23]
 80145f8:	2b20      	cmp	r3, #32
 80145fa:	d100      	bne.n	80145fe <get_fileinfo+0xbe>
 80145fc:	e040      	b.n	8014680 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80145fe:	7dfb      	ldrb	r3, [r7, #23]
 8014600:	2b05      	cmp	r3, #5
 8014602:	d101      	bne.n	8014608 <get_fileinfo+0xc8>
 8014604:	23e5      	movs	r3, #229	; 0xe5
 8014606:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8014608:	69fb      	ldr	r3, [r7, #28]
 801460a:	2b09      	cmp	r3, #9
 801460c:	d10f      	bne.n	801462e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801460e:	89bb      	ldrh	r3, [r7, #12]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d105      	bne.n	8014620 <get_fileinfo+0xe0>
 8014614:	683a      	ldr	r2, [r7, #0]
 8014616:	69bb      	ldr	r3, [r7, #24]
 8014618:	4413      	add	r3, r2
 801461a:	3316      	adds	r3, #22
 801461c:	222e      	movs	r2, #46	; 0x2e
 801461e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8014620:	69bb      	ldr	r3, [r7, #24]
 8014622:	1c5a      	adds	r2, r3, #1
 8014624:	61ba      	str	r2, [r7, #24]
 8014626:	683a      	ldr	r2, [r7, #0]
 8014628:	4413      	add	r3, r2
 801462a:	222e      	movs	r2, #46	; 0x2e
 801462c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801462e:	683a      	ldr	r2, [r7, #0]
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	4413      	add	r3, r2
 8014634:	3309      	adds	r3, #9
 8014636:	7dfa      	ldrb	r2, [r7, #23]
 8014638:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801463a:	89bb      	ldrh	r3, [r7, #12]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d11c      	bne.n	801467a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8014640:	7dfb      	ldrb	r3, [r7, #23]
 8014642:	2b40      	cmp	r3, #64	; 0x40
 8014644:	d913      	bls.n	801466e <get_fileinfo+0x12e>
 8014646:	7dfb      	ldrb	r3, [r7, #23]
 8014648:	2b5a      	cmp	r3, #90	; 0x5a
 801464a:	d810      	bhi.n	801466e <get_fileinfo+0x12e>
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	6a1b      	ldr	r3, [r3, #32]
 8014650:	330c      	adds	r3, #12
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	461a      	mov	r2, r3
 8014656:	69fb      	ldr	r3, [r7, #28]
 8014658:	2b08      	cmp	r3, #8
 801465a:	d901      	bls.n	8014660 <get_fileinfo+0x120>
 801465c:	2310      	movs	r3, #16
 801465e:	e000      	b.n	8014662 <get_fileinfo+0x122>
 8014660:	2308      	movs	r3, #8
 8014662:	4013      	ands	r3, r2
 8014664:	2b00      	cmp	r3, #0
 8014666:	d002      	beq.n	801466e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8014668:	7dfb      	ldrb	r3, [r7, #23]
 801466a:	3320      	adds	r3, #32
 801466c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801466e:	683a      	ldr	r2, [r7, #0]
 8014670:	69bb      	ldr	r3, [r7, #24]
 8014672:	4413      	add	r3, r2
 8014674:	3316      	adds	r3, #22
 8014676:	7dfa      	ldrb	r2, [r7, #23]
 8014678:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801467a:	69bb      	ldr	r3, [r7, #24]
 801467c:	3301      	adds	r3, #1
 801467e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8014680:	69fb      	ldr	r3, [r7, #28]
 8014682:	2b0a      	cmp	r3, #10
 8014684:	d9af      	bls.n	80145e6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8014686:	89bb      	ldrh	r3, [r7, #12]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d10d      	bne.n	80146a8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801468c:	683a      	ldr	r2, [r7, #0]
 801468e:	69bb      	ldr	r3, [r7, #24]
 8014690:	4413      	add	r3, r2
 8014692:	3316      	adds	r3, #22
 8014694:	2200      	movs	r2, #0
 8014696:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6a1b      	ldr	r3, [r3, #32]
 801469c:	330c      	adds	r3, #12
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d101      	bne.n	80146a8 <get_fileinfo+0x168>
 80146a4:	2300      	movs	r3, #0
 80146a6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80146a8:	683a      	ldr	r2, [r7, #0]
 80146aa:	69bb      	ldr	r3, [r7, #24]
 80146ac:	4413      	add	r3, r2
 80146ae:	3309      	adds	r3, #9
 80146b0:	2200      	movs	r2, #0
 80146b2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	6a1b      	ldr	r3, [r3, #32]
 80146b8:	7ada      	ldrb	r2, [r3, #11]
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6a1b      	ldr	r3, [r3, #32]
 80146c2:	331c      	adds	r3, #28
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7fe fb11 	bl	8012cec <ld_dword>
 80146ca:	4602      	mov	r2, r0
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6a1b      	ldr	r3, [r3, #32]
 80146d4:	3316      	adds	r3, #22
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7fe fb08 	bl	8012cec <ld_dword>
 80146dc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	b29a      	uxth	r2, r3
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	80da      	strh	r2, [r3, #6]
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	0c1b      	lsrs	r3, r3, #16
 80146ea:	b29a      	uxth	r2, r3
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	809a      	strh	r2, [r3, #4]
 80146f0:	e000      	b.n	80146f4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80146f2:	bf00      	nop
}
 80146f4:	3720      	adds	r7, #32
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}
	...

080146fc <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80146fc:	b480      	push	{r7}
 80146fe:	b085      	sub	sp, #20
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	1c59      	adds	r1, r3, #1
 801470a:	687a      	ldr	r2, [r7, #4]
 801470c:	6011      	str	r1, [r2, #0]
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8014712:	89fb      	ldrh	r3, [r7, #14]
 8014714:	2b60      	cmp	r3, #96	; 0x60
 8014716:	d905      	bls.n	8014724 <get_achar+0x28>
 8014718:	89fb      	ldrh	r3, [r7, #14]
 801471a:	2b7a      	cmp	r3, #122	; 0x7a
 801471c:	d802      	bhi.n	8014724 <get_achar+0x28>
 801471e:	89fb      	ldrh	r3, [r7, #14]
 8014720:	3b20      	subs	r3, #32
 8014722:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8014724:	89fb      	ldrh	r3, [r7, #14]
 8014726:	2b7f      	cmp	r3, #127	; 0x7f
 8014728:	d904      	bls.n	8014734 <get_achar+0x38>
 801472a:	89fb      	ldrh	r3, [r7, #14]
 801472c:	3b80      	subs	r3, #128	; 0x80
 801472e:	4a05      	ldr	r2, [pc, #20]	; (8014744 <get_achar+0x48>)
 8014730:	5cd3      	ldrb	r3, [r2, r3]
 8014732:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8014734:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8014736:	4618      	mov	r0, r3
 8014738:	3714      	adds	r7, #20
 801473a:	46bd      	mov	sp, r7
 801473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014740:	4770      	bx	lr
 8014742:	bf00      	nop
 8014744:	08021ab4 	.word	0x08021ab4

08014748 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b08a      	sub	sp, #40	; 0x28
 801474c:	af00      	add	r7, sp, #0
 801474e:	60f8      	str	r0, [r7, #12]
 8014750:	60b9      	str	r1, [r7, #8]
 8014752:	607a      	str	r2, [r7, #4]
 8014754:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8014756:	e009      	b.n	801476c <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8014758:	f107 0308 	add.w	r3, r7, #8
 801475c:	4618      	mov	r0, r3
 801475e:	f7ff ffcd 	bl	80146fc <get_achar>
 8014762:	4603      	mov	r3, r0
 8014764:	2b00      	cmp	r3, #0
 8014766:	d101      	bne.n	801476c <pattern_matching+0x24>
 8014768:	2300      	movs	r3, #0
 801476a:	e064      	b.n	8014836 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	1e5a      	subs	r2, r3, #1
 8014770:	607a      	str	r2, [r7, #4]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d1f0      	bne.n	8014758 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d104      	bne.n	8014788 <pattern_matching+0x40>
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d001      	beq.n	8014788 <pattern_matching+0x40>
 8014784:	2301      	movs	r3, #1
 8014786:	e056      	b.n	8014836 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	617b      	str	r3, [r7, #20]
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	2b3f      	cmp	r3, #63	; 0x3f
 8014796:	d003      	beq.n	80147a0 <pattern_matching+0x58>
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	781b      	ldrb	r3, [r3, #0]
 801479c:	2b2a      	cmp	r3, #42	; 0x2a
 801479e:	d126      	bne.n	80147ee <pattern_matching+0xa6>
				nm = nx = 0;
 80147a0:	2300      	movs	r3, #0
 80147a2:	61fb      	str	r3, [r7, #28]
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	1c5a      	adds	r2, r3, #1
 80147ac:	617a      	str	r2, [r7, #20]
 80147ae:	781b      	ldrb	r3, [r3, #0]
 80147b0:	2b3f      	cmp	r3, #63	; 0x3f
 80147b2:	d103      	bne.n	80147bc <pattern_matching+0x74>
 80147b4:	6a3b      	ldr	r3, [r7, #32]
 80147b6:	3301      	adds	r3, #1
 80147b8:	623b      	str	r3, [r7, #32]
 80147ba:	e001      	b.n	80147c0 <pattern_matching+0x78>
 80147bc:	2301      	movs	r3, #1
 80147be:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	2b3f      	cmp	r3, #63	; 0x3f
 80147c6:	d0ef      	beq.n	80147a8 <pattern_matching+0x60>
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	2b2a      	cmp	r3, #42	; 0x2a
 80147ce:	d0eb      	beq.n	80147a8 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80147d0:	6978      	ldr	r0, [r7, #20]
 80147d2:	6939      	ldr	r1, [r7, #16]
 80147d4:	69fb      	ldr	r3, [r7, #28]
 80147d6:	6a3a      	ldr	r2, [r7, #32]
 80147d8:	f7ff ffb6 	bl	8014748 <pattern_matching>
 80147dc:	4603      	mov	r3, r0
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d001      	beq.n	80147e6 <pattern_matching+0x9e>
 80147e2:	2301      	movs	r3, #1
 80147e4:	e027      	b.n	8014836 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80147ec:	e017      	b.n	801481e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80147ee:	f107 0314 	add.w	r3, r7, #20
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7ff ff82 	bl	80146fc <get_achar>
 80147f8:	4603      	mov	r3, r0
 80147fa:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80147fc:	f107 0310 	add.w	r3, r7, #16
 8014800:	4618      	mov	r0, r3
 8014802:	f7ff ff7b 	bl	80146fc <get_achar>
 8014806:	4603      	mov	r3, r0
 8014808:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 801480a:	8b7a      	ldrh	r2, [r7, #26]
 801480c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801480e:	429a      	cmp	r2, r3
 8014810:	d104      	bne.n	801481c <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8014812:	8b7b      	ldrh	r3, [r7, #26]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d1bb      	bne.n	8014790 <pattern_matching+0x48>
 8014818:	2301      	movs	r3, #1
 801481a:	e00c      	b.n	8014836 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 801481c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801481e:	f107 0308 	add.w	r3, r7, #8
 8014822:	4618      	mov	r0, r3
 8014824:	f7ff ff6a 	bl	80146fc <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d002      	beq.n	8014834 <pattern_matching+0xec>
 801482e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014830:	2b00      	cmp	r3, #0
 8014832:	d1a9      	bne.n	8014788 <pattern_matching+0x40>

	return 0;
 8014834:	2300      	movs	r3, #0
}
 8014836:	4618      	mov	r0, r3
 8014838:	3728      	adds	r7, #40	; 0x28
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}
	...

08014840 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b08a      	sub	sp, #40	; 0x28
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	613b      	str	r3, [r7, #16]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	68db      	ldr	r3, [r3, #12]
 8014856:	60fb      	str	r3, [r7, #12]
 8014858:	2300      	movs	r3, #0
 801485a:	617b      	str	r3, [r7, #20]
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8014860:	69bb      	ldr	r3, [r7, #24]
 8014862:	1c5a      	adds	r2, r3, #1
 8014864:	61ba      	str	r2, [r7, #24]
 8014866:	693a      	ldr	r2, [r7, #16]
 8014868:	4413      	add	r3, r2
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801486e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014870:	2b1f      	cmp	r3, #31
 8014872:	d940      	bls.n	80148f6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8014874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014876:	2b2f      	cmp	r3, #47	; 0x2f
 8014878:	d006      	beq.n	8014888 <create_name+0x48>
 801487a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801487c:	2b5c      	cmp	r3, #92	; 0x5c
 801487e:	d110      	bne.n	80148a2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014880:	e002      	b.n	8014888 <create_name+0x48>
 8014882:	69bb      	ldr	r3, [r7, #24]
 8014884:	3301      	adds	r3, #1
 8014886:	61bb      	str	r3, [r7, #24]
 8014888:	693a      	ldr	r2, [r7, #16]
 801488a:	69bb      	ldr	r3, [r7, #24]
 801488c:	4413      	add	r3, r2
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	2b2f      	cmp	r3, #47	; 0x2f
 8014892:	d0f6      	beq.n	8014882 <create_name+0x42>
 8014894:	693a      	ldr	r2, [r7, #16]
 8014896:	69bb      	ldr	r3, [r7, #24]
 8014898:	4413      	add	r3, r2
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	2b5c      	cmp	r3, #92	; 0x5c
 801489e:	d0f0      	beq.n	8014882 <create_name+0x42>
			break;
 80148a0:	e02a      	b.n	80148f8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	2bfe      	cmp	r3, #254	; 0xfe
 80148a6:	d901      	bls.n	80148ac <create_name+0x6c>
 80148a8:	2306      	movs	r3, #6
 80148aa:	e177      	b.n	8014b9c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80148ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148ae:	b2db      	uxtb	r3, r3
 80148b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80148b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148b4:	2101      	movs	r1, #1
 80148b6:	4618      	mov	r0, r3
 80148b8:	f001 fd34 	bl	8016324 <ff_convert>
 80148bc:	4603      	mov	r3, r0
 80148be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80148c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d101      	bne.n	80148ca <create_name+0x8a>
 80148c6:	2306      	movs	r3, #6
 80148c8:	e168      	b.n	8014b9c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80148ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148cc:	2b7f      	cmp	r3, #127	; 0x7f
 80148ce:	d809      	bhi.n	80148e4 <create_name+0xa4>
 80148d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148d2:	4619      	mov	r1, r3
 80148d4:	48b3      	ldr	r0, [pc, #716]	; (8014ba4 <create_name+0x364>)
 80148d6:	f7fe fad6 	bl	8012e86 <chk_chr>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d001      	beq.n	80148e4 <create_name+0xa4>
 80148e0:	2306      	movs	r3, #6
 80148e2:	e15b      	b.n	8014b9c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	1c5a      	adds	r2, r3, #1
 80148e8:	617a      	str	r2, [r7, #20]
 80148ea:	005b      	lsls	r3, r3, #1
 80148ec:	68fa      	ldr	r2, [r7, #12]
 80148ee:	4413      	add	r3, r2
 80148f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80148f2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80148f4:	e7b4      	b.n	8014860 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80148f6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80148f8:	693a      	ldr	r2, [r7, #16]
 80148fa:	69bb      	ldr	r3, [r7, #24]
 80148fc:	441a      	add	r2, r3
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8014902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014904:	2b1f      	cmp	r3, #31
 8014906:	d801      	bhi.n	801490c <create_name+0xcc>
 8014908:	2304      	movs	r3, #4
 801490a:	e000      	b.n	801490e <create_name+0xce>
 801490c:	2300      	movs	r3, #0
 801490e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8014912:	e011      	b.n	8014938 <create_name+0xf8>
		w = lfn[di - 1];
 8014914:	697b      	ldr	r3, [r7, #20]
 8014916:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801491a:	3b01      	subs	r3, #1
 801491c:	005b      	lsls	r3, r3, #1
 801491e:	68fa      	ldr	r2, [r7, #12]
 8014920:	4413      	add	r3, r2
 8014922:	881b      	ldrh	r3, [r3, #0]
 8014924:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8014926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014928:	2b20      	cmp	r3, #32
 801492a:	d002      	beq.n	8014932 <create_name+0xf2>
 801492c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801492e:	2b2e      	cmp	r3, #46	; 0x2e
 8014930:	d106      	bne.n	8014940 <create_name+0x100>
		di--;
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	3b01      	subs	r3, #1
 8014936:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d1ea      	bne.n	8014914 <create_name+0xd4>
 801493e:	e000      	b.n	8014942 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8014940:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8014942:	697b      	ldr	r3, [r7, #20]
 8014944:	005b      	lsls	r3, r3, #1
 8014946:	68fa      	ldr	r2, [r7, #12]
 8014948:	4413      	add	r3, r2
 801494a:	2200      	movs	r2, #0
 801494c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d101      	bne.n	8014958 <create_name+0x118>
 8014954:	2306      	movs	r3, #6
 8014956:	e121      	b.n	8014b9c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	3324      	adds	r3, #36	; 0x24
 801495c:	220b      	movs	r2, #11
 801495e:	2120      	movs	r1, #32
 8014960:	4618      	mov	r0, r3
 8014962:	f7fe fa4e 	bl	8012e02 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8014966:	2300      	movs	r3, #0
 8014968:	61bb      	str	r3, [r7, #24]
 801496a:	e002      	b.n	8014972 <create_name+0x132>
 801496c:	69bb      	ldr	r3, [r7, #24]
 801496e:	3301      	adds	r3, #1
 8014970:	61bb      	str	r3, [r7, #24]
 8014972:	69bb      	ldr	r3, [r7, #24]
 8014974:	005b      	lsls	r3, r3, #1
 8014976:	68fa      	ldr	r2, [r7, #12]
 8014978:	4413      	add	r3, r2
 801497a:	881b      	ldrh	r3, [r3, #0]
 801497c:	2b20      	cmp	r3, #32
 801497e:	d0f5      	beq.n	801496c <create_name+0x12c>
 8014980:	69bb      	ldr	r3, [r7, #24]
 8014982:	005b      	lsls	r3, r3, #1
 8014984:	68fa      	ldr	r2, [r7, #12]
 8014986:	4413      	add	r3, r2
 8014988:	881b      	ldrh	r3, [r3, #0]
 801498a:	2b2e      	cmp	r3, #46	; 0x2e
 801498c:	d0ee      	beq.n	801496c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801498e:	69bb      	ldr	r3, [r7, #24]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d009      	beq.n	80149a8 <create_name+0x168>
 8014994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014998:	f043 0303 	orr.w	r3, r3, #3
 801499c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80149a0:	e002      	b.n	80149a8 <create_name+0x168>
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	3b01      	subs	r3, #1
 80149a6:	617b      	str	r3, [r7, #20]
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d009      	beq.n	80149c2 <create_name+0x182>
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80149b4:	3b01      	subs	r3, #1
 80149b6:	005b      	lsls	r3, r3, #1
 80149b8:	68fa      	ldr	r2, [r7, #12]
 80149ba:	4413      	add	r3, r2
 80149bc:	881b      	ldrh	r3, [r3, #0]
 80149be:	2b2e      	cmp	r3, #46	; 0x2e
 80149c0:	d1ef      	bne.n	80149a2 <create_name+0x162>

	i = b = 0; ni = 8;
 80149c2:	2300      	movs	r3, #0
 80149c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80149c8:	2300      	movs	r3, #0
 80149ca:	623b      	str	r3, [r7, #32]
 80149cc:	2308      	movs	r3, #8
 80149ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80149d0:	69bb      	ldr	r3, [r7, #24]
 80149d2:	1c5a      	adds	r2, r3, #1
 80149d4:	61ba      	str	r2, [r7, #24]
 80149d6:	005b      	lsls	r3, r3, #1
 80149d8:	68fa      	ldr	r2, [r7, #12]
 80149da:	4413      	add	r3, r2
 80149dc:	881b      	ldrh	r3, [r3, #0]
 80149de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80149e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	f000 8090 	beq.w	8014b08 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80149e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149ea:	2b20      	cmp	r3, #32
 80149ec:	d006      	beq.n	80149fc <create_name+0x1bc>
 80149ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149f0:	2b2e      	cmp	r3, #46	; 0x2e
 80149f2:	d10a      	bne.n	8014a0a <create_name+0x1ca>
 80149f4:	69ba      	ldr	r2, [r7, #24]
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d006      	beq.n	8014a0a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80149fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a00:	f043 0303 	orr.w	r3, r3, #3
 8014a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a08:	e07d      	b.n	8014b06 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8014a0a:	6a3a      	ldr	r2, [r7, #32]
 8014a0c:	69fb      	ldr	r3, [r7, #28]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d203      	bcs.n	8014a1a <create_name+0x1da>
 8014a12:	69ba      	ldr	r2, [r7, #24]
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	429a      	cmp	r2, r3
 8014a18:	d123      	bne.n	8014a62 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8014a1a:	69fb      	ldr	r3, [r7, #28]
 8014a1c:	2b0b      	cmp	r3, #11
 8014a1e:	d106      	bne.n	8014a2e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8014a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a24:	f043 0303 	orr.w	r3, r3, #3
 8014a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a2c:	e06f      	b.n	8014b0e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8014a2e:	69ba      	ldr	r2, [r7, #24]
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d005      	beq.n	8014a42 <create_name+0x202>
 8014a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a3a:	f043 0303 	orr.w	r3, r3, #3
 8014a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8014a42:	69ba      	ldr	r2, [r7, #24]
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d860      	bhi.n	8014b0c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	61bb      	str	r3, [r7, #24]
 8014a4e:	2308      	movs	r3, #8
 8014a50:	623b      	str	r3, [r7, #32]
 8014a52:	230b      	movs	r3, #11
 8014a54:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8014a56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a5a:	009b      	lsls	r3, r3, #2
 8014a5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014a60:	e051      	b.n	8014b06 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8014a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a64:	2b7f      	cmp	r3, #127	; 0x7f
 8014a66:	d914      	bls.n	8014a92 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8014a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a6a:	2100      	movs	r1, #0
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f001 fc59 	bl	8016324 <ff_convert>
 8014a72:	4603      	mov	r3, r0
 8014a74:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8014a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d004      	beq.n	8014a86 <create_name+0x246>
 8014a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a7e:	3b80      	subs	r3, #128	; 0x80
 8014a80:	4a49      	ldr	r2, [pc, #292]	; (8014ba8 <create_name+0x368>)
 8014a82:	5cd3      	ldrb	r3, [r2, r3]
 8014a84:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8014a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a8a:	f043 0302 	orr.w	r3, r3, #2
 8014a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8014a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d007      	beq.n	8014aa8 <create_name+0x268>
 8014a98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a9a:	4619      	mov	r1, r3
 8014a9c:	4843      	ldr	r0, [pc, #268]	; (8014bac <create_name+0x36c>)
 8014a9e:	f7fe f9f2 	bl	8012e86 <chk_chr>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d008      	beq.n	8014aba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8014aa8:	235f      	movs	r3, #95	; 0x5f
 8014aaa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ab0:	f043 0303 	orr.w	r3, r3, #3
 8014ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ab8:	e01b      	b.n	8014af2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8014aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014abc:	2b40      	cmp	r3, #64	; 0x40
 8014abe:	d909      	bls.n	8014ad4 <create_name+0x294>
 8014ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ac2:	2b5a      	cmp	r3, #90	; 0x5a
 8014ac4:	d806      	bhi.n	8014ad4 <create_name+0x294>
					b |= 2;
 8014ac6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014aca:	f043 0302 	orr.w	r3, r3, #2
 8014ace:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014ad2:	e00e      	b.n	8014af2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8014ad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ad6:	2b60      	cmp	r3, #96	; 0x60
 8014ad8:	d90b      	bls.n	8014af2 <create_name+0x2b2>
 8014ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014adc:	2b7a      	cmp	r3, #122	; 0x7a
 8014ade:	d808      	bhi.n	8014af2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8014ae0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014ae4:	f043 0301 	orr.w	r3, r3, #1
 8014ae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014aee:	3b20      	subs	r3, #32
 8014af0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8014af2:	6a3b      	ldr	r3, [r7, #32]
 8014af4:	1c5a      	adds	r2, r3, #1
 8014af6:	623a      	str	r2, [r7, #32]
 8014af8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014afa:	b2d1      	uxtb	r1, r2
 8014afc:	687a      	ldr	r2, [r7, #4]
 8014afe:	4413      	add	r3, r2
 8014b00:	460a      	mov	r2, r1
 8014b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8014b06:	e763      	b.n	80149d0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8014b08:	bf00      	nop
 8014b0a:	e000      	b.n	8014b0e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8014b0c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014b14:	2be5      	cmp	r3, #229	; 0xe5
 8014b16:	d103      	bne.n	8014b20 <create_name+0x2e0>
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2205      	movs	r2, #5
 8014b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8014b20:	69fb      	ldr	r3, [r7, #28]
 8014b22:	2b08      	cmp	r3, #8
 8014b24:	d104      	bne.n	8014b30 <create_name+0x2f0>
 8014b26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b2a:	009b      	lsls	r3, r3, #2
 8014b2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8014b30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b34:	f003 030c 	and.w	r3, r3, #12
 8014b38:	2b0c      	cmp	r3, #12
 8014b3a:	d005      	beq.n	8014b48 <create_name+0x308>
 8014b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b40:	f003 0303 	and.w	r3, r3, #3
 8014b44:	2b03      	cmp	r3, #3
 8014b46:	d105      	bne.n	8014b54 <create_name+0x314>
 8014b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b4c:	f043 0302 	orr.w	r3, r3, #2
 8014b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8014b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b58:	f003 0302 	and.w	r3, r3, #2
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d117      	bne.n	8014b90 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8014b60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b64:	f003 0303 	and.w	r3, r3, #3
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d105      	bne.n	8014b78 <create_name+0x338>
 8014b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b70:	f043 0310 	orr.w	r3, r3, #16
 8014b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8014b78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b7c:	f003 030c 	and.w	r3, r3, #12
 8014b80:	2b04      	cmp	r3, #4
 8014b82:	d105      	bne.n	8014b90 <create_name+0x350>
 8014b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b88:	f043 0308 	orr.w	r3, r3, #8
 8014b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014b96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8014b9a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3728      	adds	r7, #40	; 0x28
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	0802184c 	.word	0x0802184c
 8014ba8:	08021ab4 	.word	0x08021ab4
 8014bac:	08021858 	.word	0x08021858

08014bb0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b086      	sub	sp, #24
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014bbe:	693b      	ldr	r3, [r7, #16]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014bc4:	e002      	b.n	8014bcc <follow_path+0x1c>
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	3301      	adds	r3, #1
 8014bca:	603b      	str	r3, [r7, #0]
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	781b      	ldrb	r3, [r3, #0]
 8014bd0:	2b2f      	cmp	r3, #47	; 0x2f
 8014bd2:	d0f8      	beq.n	8014bc6 <follow_path+0x16>
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	781b      	ldrb	r3, [r3, #0]
 8014bd8:	2b5c      	cmp	r3, #92	; 0x5c
 8014bda:	d0f4      	beq.n	8014bc6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014bdc:	693b      	ldr	r3, [r7, #16]
 8014bde:	2200      	movs	r2, #0
 8014be0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	2b1f      	cmp	r3, #31
 8014be8:	d80a      	bhi.n	8014c00 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2280      	movs	r2, #128	; 0x80
 8014bee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8014bf2:	2100      	movs	r1, #0
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f7fe fe91 	bl	801391c <dir_sdi>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	75fb      	strb	r3, [r7, #23]
 8014bfe:	e043      	b.n	8014c88 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014c00:	463b      	mov	r3, r7
 8014c02:	4619      	mov	r1, r3
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f7ff fe1b 	bl	8014840 <create_name>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014c0e:	7dfb      	ldrb	r3, [r7, #23]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d134      	bne.n	8014c7e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f7ff fadb 	bl	80141d0 <dir_find>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014c24:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014c26:	7dfb      	ldrb	r3, [r7, #23]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d00a      	beq.n	8014c42 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014c2c:	7dfb      	ldrb	r3, [r7, #23]
 8014c2e:	2b04      	cmp	r3, #4
 8014c30:	d127      	bne.n	8014c82 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014c32:	7afb      	ldrb	r3, [r7, #11]
 8014c34:	f003 0304 	and.w	r3, r3, #4
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d122      	bne.n	8014c82 <follow_path+0xd2>
 8014c3c:	2305      	movs	r3, #5
 8014c3e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014c40:	e01f      	b.n	8014c82 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014c42:	7afb      	ldrb	r3, [r7, #11]
 8014c44:	f003 0304 	and.w	r3, r3, #4
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d11c      	bne.n	8014c86 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	799b      	ldrb	r3, [r3, #6]
 8014c50:	f003 0310 	and.w	r3, r3, #16
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d102      	bne.n	8014c5e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014c58:	2305      	movs	r3, #5
 8014c5a:	75fb      	strb	r3, [r7, #23]
 8014c5c:	e014      	b.n	8014c88 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	695b      	ldr	r3, [r3, #20]
 8014c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c6c:	4413      	add	r3, r2
 8014c6e:	4619      	mov	r1, r3
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f7fe ffda 	bl	8013c2a <ld_clust>
 8014c76:	4602      	mov	r2, r0
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014c7c:	e7c0      	b.n	8014c00 <follow_path+0x50>
			if (res != FR_OK) break;
 8014c7e:	bf00      	nop
 8014c80:	e002      	b.n	8014c88 <follow_path+0xd8>
				break;
 8014c82:	bf00      	nop
 8014c84:	e000      	b.n	8014c88 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014c86:	bf00      	nop
			}
		}
	}

	return res;
 8014c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3718      	adds	r7, #24
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}

08014c92 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014c92:	b480      	push	{r7}
 8014c94:	b087      	sub	sp, #28
 8014c96:	af00      	add	r7, sp, #0
 8014c98:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c9e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d031      	beq.n	8014d0c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	617b      	str	r3, [r7, #20]
 8014cae:	e002      	b.n	8014cb6 <get_ldnumber+0x24>
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	3301      	adds	r3, #1
 8014cb4:	617b      	str	r3, [r7, #20]
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	2b1f      	cmp	r3, #31
 8014cbc:	d903      	bls.n	8014cc6 <get_ldnumber+0x34>
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	2b3a      	cmp	r3, #58	; 0x3a
 8014cc4:	d1f4      	bne.n	8014cb0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014cc6:	697b      	ldr	r3, [r7, #20]
 8014cc8:	781b      	ldrb	r3, [r3, #0]
 8014cca:	2b3a      	cmp	r3, #58	; 0x3a
 8014ccc:	d11c      	bne.n	8014d08 <get_ldnumber+0x76>
			tp = *path;
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	1c5a      	adds	r2, r3, #1
 8014cd8:	60fa      	str	r2, [r7, #12]
 8014cda:	781b      	ldrb	r3, [r3, #0]
 8014cdc:	3b30      	subs	r3, #48	; 0x30
 8014cde:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	2b09      	cmp	r3, #9
 8014ce4:	d80e      	bhi.n	8014d04 <get_ldnumber+0x72>
 8014ce6:	68fa      	ldr	r2, [r7, #12]
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	429a      	cmp	r2, r3
 8014cec:	d10a      	bne.n	8014d04 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d107      	bne.n	8014d04 <get_ldnumber+0x72>
					vol = (int)i;
 8014cf4:	68bb      	ldr	r3, [r7, #8]
 8014cf6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	3301      	adds	r3, #1
 8014cfc:	617b      	str	r3, [r7, #20]
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	697a      	ldr	r2, [r7, #20]
 8014d02:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	e002      	b.n	8014d0e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014d08:	2300      	movs	r3, #0
 8014d0a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014d0c:	693b      	ldr	r3, [r7, #16]
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	371c      	adds	r7, #28
 8014d12:	46bd      	mov	sp, r7
 8014d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d18:	4770      	bx	lr
	...

08014d1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b082      	sub	sp, #8
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
 8014d24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2200      	movs	r2, #0
 8014d2a:	70da      	strb	r2, [r3, #3]
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8014d32:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014d34:	6839      	ldr	r1, [r7, #0]
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f7fe fa70 	bl	801321c <move_window>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d001      	beq.n	8014d46 <check_fs+0x2a>
 8014d42:	2304      	movs	r3, #4
 8014d44:	e038      	b.n	8014db8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	3334      	adds	r3, #52	; 0x34
 8014d4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7fd ffb4 	bl	8012cbc <ld_word>
 8014d54:	4603      	mov	r3, r0
 8014d56:	461a      	mov	r2, r3
 8014d58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014d5c:	429a      	cmp	r2, r3
 8014d5e:	d001      	beq.n	8014d64 <check_fs+0x48>
 8014d60:	2303      	movs	r3, #3
 8014d62:	e029      	b.n	8014db8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014d6a:	2be9      	cmp	r3, #233	; 0xe9
 8014d6c:	d009      	beq.n	8014d82 <check_fs+0x66>
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014d74:	2beb      	cmp	r3, #235	; 0xeb
 8014d76:	d11e      	bne.n	8014db6 <check_fs+0x9a>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8014d7e:	2b90      	cmp	r3, #144	; 0x90
 8014d80:	d119      	bne.n	8014db6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	3334      	adds	r3, #52	; 0x34
 8014d86:	3336      	adds	r3, #54	; 0x36
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7fd ffaf 	bl	8012cec <ld_dword>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014d94:	4a0a      	ldr	r2, [pc, #40]	; (8014dc0 <check_fs+0xa4>)
 8014d96:	4293      	cmp	r3, r2
 8014d98:	d101      	bne.n	8014d9e <check_fs+0x82>
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	e00c      	b.n	8014db8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	3334      	adds	r3, #52	; 0x34
 8014da2:	3352      	adds	r3, #82	; 0x52
 8014da4:	4618      	mov	r0, r3
 8014da6:	f7fd ffa1 	bl	8012cec <ld_dword>
 8014daa:	4603      	mov	r3, r0
 8014dac:	4a05      	ldr	r2, [pc, #20]	; (8014dc4 <check_fs+0xa8>)
 8014dae:	4293      	cmp	r3, r2
 8014db0:	d101      	bne.n	8014db6 <check_fs+0x9a>
 8014db2:	2300      	movs	r3, #0
 8014db4:	e000      	b.n	8014db8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014db6:	2302      	movs	r3, #2
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	3708      	adds	r7, #8
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}
 8014dc0:	00544146 	.word	0x00544146
 8014dc4:	33544146 	.word	0x33544146

08014dc8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b096      	sub	sp, #88	; 0x58
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	60b9      	str	r1, [r7, #8]
 8014dd2:	4613      	mov	r3, r2
 8014dd4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014ddc:	68f8      	ldr	r0, [r7, #12]
 8014dde:	f7ff ff58 	bl	8014c92 <get_ldnumber>
 8014de2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	da01      	bge.n	8014dee <find_volume+0x26>
 8014dea:	230b      	movs	r3, #11
 8014dec:	e231      	b.n	8015252 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014dee:	4aa8      	ldr	r2, [pc, #672]	; (8015090 <find_volume+0x2c8>)
 8014df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014df6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d101      	bne.n	8014e02 <find_volume+0x3a>
 8014dfe:	230c      	movs	r3, #12
 8014e00:	e227      	b.n	8015252 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014e08:	79fb      	ldrb	r3, [r7, #7]
 8014e0a:	f023 0301 	bic.w	r3, r3, #1
 8014e0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e12:	781b      	ldrb	r3, [r3, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d01a      	beq.n	8014e4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e1a:	785b      	ldrb	r3, [r3, #1]
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7fd fea7 	bl	8012b70 <disk_status>
 8014e22:	4603      	mov	r3, r0
 8014e24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014e28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e2c:	f003 0301 	and.w	r3, r3, #1
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d10c      	bne.n	8014e4e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014e34:	79fb      	ldrb	r3, [r7, #7]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d007      	beq.n	8014e4a <find_volume+0x82>
 8014e3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e3e:	f003 0304 	and.w	r3, r3, #4
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d001      	beq.n	8014e4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014e46:	230a      	movs	r3, #10
 8014e48:	e203      	b.n	8015252 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	e201      	b.n	8015252 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e50:	2200      	movs	r2, #0
 8014e52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e56:	b2da      	uxtb	r2, r3
 8014e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e5e:	785b      	ldrb	r3, [r3, #1]
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7fd fe9f 	bl	8012ba4 <disk_initialize>
 8014e66:	4603      	mov	r3, r0
 8014e68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014e6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e70:	f003 0301 	and.w	r3, r3, #1
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d001      	beq.n	8014e7c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014e78:	2303      	movs	r3, #3
 8014e7a:	e1ea      	b.n	8015252 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014e7c:	79fb      	ldrb	r3, [r7, #7]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d007      	beq.n	8014e92 <find_volume+0xca>
 8014e82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e86:	f003 0304 	and.w	r3, r3, #4
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d001      	beq.n	8014e92 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014e8e:	230a      	movs	r3, #10
 8014e90:	e1df      	b.n	8015252 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014e92:	2300      	movs	r3, #0
 8014e94:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014e96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014e98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014e9a:	f7ff ff3f 	bl	8014d1c <check_fs>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014ea8:	2b02      	cmp	r3, #2
 8014eaa:	d14b      	bne.n	8014f44 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014eac:	2300      	movs	r3, #0
 8014eae:	643b      	str	r3, [r7, #64]	; 0x40
 8014eb0:	e01f      	b.n	8014ef2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eb4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014eba:	011b      	lsls	r3, r3, #4
 8014ebc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014ec0:	4413      	add	r3, r2
 8014ec2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec6:	3304      	adds	r3, #4
 8014ec8:	781b      	ldrb	r3, [r3, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d006      	beq.n	8014edc <find_volume+0x114>
 8014ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed0:	3308      	adds	r3, #8
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f7fd ff0a 	bl	8012cec <ld_dword>
 8014ed8:	4602      	mov	r2, r0
 8014eda:	e000      	b.n	8014ede <find_volume+0x116>
 8014edc:	2200      	movs	r2, #0
 8014ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ee0:	009b      	lsls	r3, r3, #2
 8014ee2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014ee6:	440b      	add	r3, r1
 8014ee8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014eee:	3301      	adds	r3, #1
 8014ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8014ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ef4:	2b03      	cmp	r3, #3
 8014ef6:	d9dc      	bls.n	8014eb2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014ef8:	2300      	movs	r3, #0
 8014efa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d002      	beq.n	8014f08 <find_volume+0x140>
 8014f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f04:	3b01      	subs	r3, #1
 8014f06:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f0a:	009b      	lsls	r3, r3, #2
 8014f0c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014f10:	4413      	add	r3, r2
 8014f12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014f16:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d005      	beq.n	8014f2a <find_volume+0x162>
 8014f1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014f22:	f7ff fefb 	bl	8014d1c <check_fs>
 8014f26:	4603      	mov	r3, r0
 8014f28:	e000      	b.n	8014f2c <find_volume+0x164>
 8014f2a:	2303      	movs	r3, #3
 8014f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014f34:	2b01      	cmp	r3, #1
 8014f36:	d905      	bls.n	8014f44 <find_volume+0x17c>
 8014f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	643b      	str	r3, [r7, #64]	; 0x40
 8014f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f40:	2b03      	cmp	r3, #3
 8014f42:	d9e1      	bls.n	8014f08 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014f44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014f48:	2b04      	cmp	r3, #4
 8014f4a:	d101      	bne.n	8014f50 <find_volume+0x188>
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	e180      	b.n	8015252 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014f50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014f54:	2b01      	cmp	r3, #1
 8014f56:	d901      	bls.n	8014f5c <find_volume+0x194>
 8014f58:	230d      	movs	r3, #13
 8014f5a:	e17a      	b.n	8015252 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f5e:	3334      	adds	r3, #52	; 0x34
 8014f60:	330b      	adds	r3, #11
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7fd feaa 	bl	8012cbc <ld_word>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f6e:	d001      	beq.n	8014f74 <find_volume+0x1ac>
 8014f70:	230d      	movs	r3, #13
 8014f72:	e16e      	b.n	8015252 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f76:	3334      	adds	r3, #52	; 0x34
 8014f78:	3316      	adds	r3, #22
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7fd fe9e 	bl	8012cbc <ld_word>
 8014f80:	4603      	mov	r3, r0
 8014f82:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d106      	bne.n	8014f98 <find_volume+0x1d0>
 8014f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f8c:	3334      	adds	r3, #52	; 0x34
 8014f8e:	3324      	adds	r3, #36	; 0x24
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7fd feab 	bl	8012cec <ld_dword>
 8014f96:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014f9c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014faa:	789b      	ldrb	r3, [r3, #2]
 8014fac:	2b01      	cmp	r3, #1
 8014fae:	d005      	beq.n	8014fbc <find_volume+0x1f4>
 8014fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fb2:	789b      	ldrb	r3, [r3, #2]
 8014fb4:	2b02      	cmp	r3, #2
 8014fb6:	d001      	beq.n	8014fbc <find_volume+0x1f4>
 8014fb8:	230d      	movs	r3, #13
 8014fba:	e14a      	b.n	8015252 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fbe:	789b      	ldrb	r3, [r3, #2]
 8014fc0:	461a      	mov	r2, r3
 8014fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fc4:	fb02 f303 	mul.w	r3, r2, r3
 8014fc8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014fd0:	b29a      	uxth	r2, r3
 8014fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fd4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fd8:	895b      	ldrh	r3, [r3, #10]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d008      	beq.n	8014ff0 <find_volume+0x228>
 8014fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fe0:	895b      	ldrh	r3, [r3, #10]
 8014fe2:	461a      	mov	r2, r3
 8014fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fe6:	895b      	ldrh	r3, [r3, #10]
 8014fe8:	3b01      	subs	r3, #1
 8014fea:	4013      	ands	r3, r2
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d001      	beq.n	8014ff4 <find_volume+0x22c>
 8014ff0:	230d      	movs	r3, #13
 8014ff2:	e12e      	b.n	8015252 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ff6:	3334      	adds	r3, #52	; 0x34
 8014ff8:	3311      	adds	r3, #17
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7fd fe5e 	bl	8012cbc <ld_word>
 8015000:	4603      	mov	r3, r0
 8015002:	461a      	mov	r2, r3
 8015004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015006:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801500a:	891b      	ldrh	r3, [r3, #8]
 801500c:	f003 030f 	and.w	r3, r3, #15
 8015010:	b29b      	uxth	r3, r3
 8015012:	2b00      	cmp	r3, #0
 8015014:	d001      	beq.n	801501a <find_volume+0x252>
 8015016:	230d      	movs	r3, #13
 8015018:	e11b      	b.n	8015252 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801501c:	3334      	adds	r3, #52	; 0x34
 801501e:	3313      	adds	r3, #19
 8015020:	4618      	mov	r0, r3
 8015022:	f7fd fe4b 	bl	8012cbc <ld_word>
 8015026:	4603      	mov	r3, r0
 8015028:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801502a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801502c:	2b00      	cmp	r3, #0
 801502e:	d106      	bne.n	801503e <find_volume+0x276>
 8015030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015032:	3334      	adds	r3, #52	; 0x34
 8015034:	3320      	adds	r3, #32
 8015036:	4618      	mov	r0, r3
 8015038:	f7fd fe58 	bl	8012cec <ld_dword>
 801503c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015040:	3334      	adds	r3, #52	; 0x34
 8015042:	330e      	adds	r3, #14
 8015044:	4618      	mov	r0, r3
 8015046:	f7fd fe39 	bl	8012cbc <ld_word>
 801504a:	4603      	mov	r3, r0
 801504c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801504e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015050:	2b00      	cmp	r3, #0
 8015052:	d101      	bne.n	8015058 <find_volume+0x290>
 8015054:	230d      	movs	r3, #13
 8015056:	e0fc      	b.n	8015252 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015058:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801505a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801505c:	4413      	add	r3, r2
 801505e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015060:	8912      	ldrh	r2, [r2, #8]
 8015062:	0912      	lsrs	r2, r2, #4
 8015064:	b292      	uxth	r2, r2
 8015066:	4413      	add	r3, r2
 8015068:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801506a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801506e:	429a      	cmp	r2, r3
 8015070:	d201      	bcs.n	8015076 <find_volume+0x2ae>
 8015072:	230d      	movs	r3, #13
 8015074:	e0ed      	b.n	8015252 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801507a:	1ad3      	subs	r3, r2, r3
 801507c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801507e:	8952      	ldrh	r2, [r2, #10]
 8015080:	fbb3 f3f2 	udiv	r3, r3, r2
 8015084:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015088:	2b00      	cmp	r3, #0
 801508a:	d103      	bne.n	8015094 <find_volume+0x2cc>
 801508c:	230d      	movs	r3, #13
 801508e:	e0e0      	b.n	8015252 <find_volume+0x48a>
 8015090:	20000990 	.word	0x20000990
		fmt = FS_FAT32;
 8015094:	2303      	movs	r3, #3
 8015096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80150a0:	4293      	cmp	r3, r2
 80150a2:	d802      	bhi.n	80150aa <find_volume+0x2e2>
 80150a4:	2302      	movs	r3, #2
 80150a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80150aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80150b0:	4293      	cmp	r3, r2
 80150b2:	d802      	bhi.n	80150ba <find_volume+0x2f2>
 80150b4:	2301      	movs	r3, #1
 80150b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80150ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150bc:	1c9a      	adds	r2, r3, #2
 80150be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150c0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80150c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80150c6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80150c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80150ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150cc:	441a      	add	r2, r3
 80150ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150d0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80150d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80150d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d6:	441a      	add	r2, r3
 80150d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150da:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80150dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80150e0:	2b03      	cmp	r3, #3
 80150e2:	d11e      	bne.n	8015122 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80150e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150e6:	3334      	adds	r3, #52	; 0x34
 80150e8:	332a      	adds	r3, #42	; 0x2a
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7fd fde6 	bl	8012cbc <ld_word>
 80150f0:	4603      	mov	r3, r0
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d001      	beq.n	80150fa <find_volume+0x332>
 80150f6:	230d      	movs	r3, #13
 80150f8:	e0ab      	b.n	8015252 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80150fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150fc:	891b      	ldrh	r3, [r3, #8]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d001      	beq.n	8015106 <find_volume+0x33e>
 8015102:	230d      	movs	r3, #13
 8015104:	e0a5      	b.n	8015252 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015108:	3334      	adds	r3, #52	; 0x34
 801510a:	332c      	adds	r3, #44	; 0x2c
 801510c:	4618      	mov	r0, r3
 801510e:	f7fd fded 	bl	8012cec <ld_dword>
 8015112:	4602      	mov	r2, r0
 8015114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015116:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801511a:	699b      	ldr	r3, [r3, #24]
 801511c:	009b      	lsls	r3, r3, #2
 801511e:	647b      	str	r3, [r7, #68]	; 0x44
 8015120:	e01f      	b.n	8015162 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015124:	891b      	ldrh	r3, [r3, #8]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d101      	bne.n	801512e <find_volume+0x366>
 801512a:	230d      	movs	r3, #13
 801512c:	e091      	b.n	8015252 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015134:	441a      	add	r2, r3
 8015136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015138:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801513a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801513e:	2b02      	cmp	r3, #2
 8015140:	d103      	bne.n	801514a <find_volume+0x382>
 8015142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015144:	699b      	ldr	r3, [r3, #24]
 8015146:	005b      	lsls	r3, r3, #1
 8015148:	e00a      	b.n	8015160 <find_volume+0x398>
 801514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801514c:	699a      	ldr	r2, [r3, #24]
 801514e:	4613      	mov	r3, r2
 8015150:	005b      	lsls	r3, r3, #1
 8015152:	4413      	add	r3, r2
 8015154:	085a      	lsrs	r2, r3, #1
 8015156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015158:	699b      	ldr	r3, [r3, #24]
 801515a:	f003 0301 	and.w	r3, r3, #1
 801515e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015160:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015164:	69da      	ldr	r2, [r3, #28]
 8015166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015168:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801516c:	0a5b      	lsrs	r3, r3, #9
 801516e:	429a      	cmp	r2, r3
 8015170:	d201      	bcs.n	8015176 <find_volume+0x3ae>
 8015172:	230d      	movs	r3, #13
 8015174:	e06d      	b.n	8015252 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015178:	f04f 32ff 	mov.w	r2, #4294967295
 801517c:	615a      	str	r2, [r3, #20]
 801517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015180:	695a      	ldr	r2, [r3, #20]
 8015182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015184:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8015186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015188:	2280      	movs	r2, #128	; 0x80
 801518a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801518c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015190:	2b03      	cmp	r3, #3
 8015192:	d149      	bne.n	8015228 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015196:	3334      	adds	r3, #52	; 0x34
 8015198:	3330      	adds	r3, #48	; 0x30
 801519a:	4618      	mov	r0, r3
 801519c:	f7fd fd8e 	bl	8012cbc <ld_word>
 80151a0:	4603      	mov	r3, r0
 80151a2:	2b01      	cmp	r3, #1
 80151a4:	d140      	bne.n	8015228 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80151a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151a8:	3301      	adds	r3, #1
 80151aa:	4619      	mov	r1, r3
 80151ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80151ae:	f7fe f835 	bl	801321c <move_window>
 80151b2:	4603      	mov	r3, r0
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d137      	bne.n	8015228 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80151b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151ba:	2200      	movs	r2, #0
 80151bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80151be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c0:	3334      	adds	r3, #52	; 0x34
 80151c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fd fd78 	bl	8012cbc <ld_word>
 80151cc:	4603      	mov	r3, r0
 80151ce:	461a      	mov	r2, r3
 80151d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d127      	bne.n	8015228 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80151d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151da:	3334      	adds	r3, #52	; 0x34
 80151dc:	4618      	mov	r0, r3
 80151de:	f7fd fd85 	bl	8012cec <ld_dword>
 80151e2:	4603      	mov	r3, r0
 80151e4:	4a1d      	ldr	r2, [pc, #116]	; (801525c <find_volume+0x494>)
 80151e6:	4293      	cmp	r3, r2
 80151e8:	d11e      	bne.n	8015228 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80151ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151ec:	3334      	adds	r3, #52	; 0x34
 80151ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80151f2:	4618      	mov	r0, r3
 80151f4:	f7fd fd7a 	bl	8012cec <ld_dword>
 80151f8:	4603      	mov	r3, r0
 80151fa:	4a19      	ldr	r2, [pc, #100]	; (8015260 <find_volume+0x498>)
 80151fc:	4293      	cmp	r3, r2
 80151fe:	d113      	bne.n	8015228 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8015200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015202:	3334      	adds	r3, #52	; 0x34
 8015204:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015208:	4618      	mov	r0, r3
 801520a:	f7fd fd6f 	bl	8012cec <ld_dword>
 801520e:	4602      	mov	r2, r0
 8015210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015212:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015216:	3334      	adds	r3, #52	; 0x34
 8015218:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801521c:	4618      	mov	r0, r3
 801521e:	f7fd fd65 	bl	8012cec <ld_dword>
 8015222:	4602      	mov	r2, r0
 8015224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015226:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801522a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801522e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015230:	4b0c      	ldr	r3, [pc, #48]	; (8015264 <find_volume+0x49c>)
 8015232:	881b      	ldrh	r3, [r3, #0]
 8015234:	3301      	adds	r3, #1
 8015236:	b29a      	uxth	r2, r3
 8015238:	4b0a      	ldr	r3, [pc, #40]	; (8015264 <find_volume+0x49c>)
 801523a:	801a      	strh	r2, [r3, #0]
 801523c:	4b09      	ldr	r3, [pc, #36]	; (8015264 <find_volume+0x49c>)
 801523e:	881a      	ldrh	r2, [r3, #0]
 8015240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015242:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8015244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015246:	4a08      	ldr	r2, [pc, #32]	; (8015268 <find_volume+0x4a0>)
 8015248:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801524a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801524c:	f7fd ff7e 	bl	801314c <clear_lock>
#endif
	return FR_OK;
 8015250:	2300      	movs	r3, #0
}
 8015252:	4618      	mov	r0, r3
 8015254:	3758      	adds	r7, #88	; 0x58
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	41615252 	.word	0x41615252
 8015260:	61417272 	.word	0x61417272
 8015264:	20000994 	.word	0x20000994
 8015268:	20000ad8 	.word	0x20000ad8

0801526c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b084      	sub	sp, #16
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015276:	2309      	movs	r3, #9
 8015278:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d01c      	beq.n	80152ba <validate+0x4e>
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d018      	beq.n	80152ba <validate+0x4e>
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d013      	beq.n	80152ba <validate+0x4e>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	889a      	ldrh	r2, [r3, #4]
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	88db      	ldrh	r3, [r3, #6]
 801529c:	429a      	cmp	r2, r3
 801529e:	d10c      	bne.n	80152ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	785b      	ldrb	r3, [r3, #1]
 80152a6:	4618      	mov	r0, r3
 80152a8:	f7fd fc62 	bl	8012b70 <disk_status>
 80152ac:	4603      	mov	r3, r0
 80152ae:	f003 0301 	and.w	r3, r3, #1
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d101      	bne.n	80152ba <validate+0x4e>
			res = FR_OK;
 80152b6:	2300      	movs	r3, #0
 80152b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80152ba:	7bfb      	ldrb	r3, [r7, #15]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d102      	bne.n	80152c6 <validate+0x5a>
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	e000      	b.n	80152c8 <validate+0x5c>
 80152c6:	2300      	movs	r3, #0
 80152c8:	683a      	ldr	r2, [r7, #0]
 80152ca:	6013      	str	r3, [r2, #0]
	return res;
 80152cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3710      	adds	r7, #16
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
	...

080152d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b088      	sub	sp, #32
 80152dc:	af00      	add	r7, sp, #0
 80152de:	60f8      	str	r0, [r7, #12]
 80152e0:	60b9      	str	r1, [r7, #8]
 80152e2:	4613      	mov	r3, r2
 80152e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80152ea:	f107 0310 	add.w	r3, r7, #16
 80152ee:	4618      	mov	r0, r3
 80152f0:	f7ff fccf 	bl	8014c92 <get_ldnumber>
 80152f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80152f6:	69fb      	ldr	r3, [r7, #28]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	da01      	bge.n	8015300 <f_mount+0x28>
 80152fc:	230b      	movs	r3, #11
 80152fe:	e02b      	b.n	8015358 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015300:	4a17      	ldr	r2, [pc, #92]	; (8015360 <f_mount+0x88>)
 8015302:	69fb      	ldr	r3, [r7, #28]
 8015304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015308:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801530a:	69bb      	ldr	r3, [r7, #24]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d005      	beq.n	801531c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8015310:	69b8      	ldr	r0, [r7, #24]
 8015312:	f7fd ff1b 	bl	801314c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015316:	69bb      	ldr	r3, [r7, #24]
 8015318:	2200      	movs	r2, #0
 801531a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d002      	beq.n	8015328 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	2200      	movs	r2, #0
 8015326:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8015328:	68fa      	ldr	r2, [r7, #12]
 801532a:	490d      	ldr	r1, [pc, #52]	; (8015360 <f_mount+0x88>)
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d002      	beq.n	801533e <f_mount+0x66>
 8015338:	79fb      	ldrb	r3, [r7, #7]
 801533a:	2b01      	cmp	r3, #1
 801533c:	d001      	beq.n	8015342 <f_mount+0x6a>
 801533e:	2300      	movs	r3, #0
 8015340:	e00a      	b.n	8015358 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015342:	f107 010c 	add.w	r1, r7, #12
 8015346:	f107 0308 	add.w	r3, r7, #8
 801534a:	2200      	movs	r2, #0
 801534c:	4618      	mov	r0, r3
 801534e:	f7ff fd3b 	bl	8014dc8 <find_volume>
 8015352:	4603      	mov	r3, r0
 8015354:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015356:	7dfb      	ldrb	r3, [r7, #23]
}
 8015358:	4618      	mov	r0, r3
 801535a:	3720      	adds	r7, #32
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}
 8015360:	20000990 	.word	0x20000990

08015364 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b09a      	sub	sp, #104	; 0x68
 8015368:	af00      	add	r7, sp, #0
 801536a:	60f8      	str	r0, [r7, #12]
 801536c:	60b9      	str	r1, [r7, #8]
 801536e:	4613      	mov	r3, r2
 8015370:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d101      	bne.n	801537c <f_open+0x18>
 8015378:	2309      	movs	r3, #9
 801537a:	e1ad      	b.n	80156d8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801537c:	79fb      	ldrb	r3, [r7, #7]
 801537e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015382:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015384:	79fa      	ldrb	r2, [r7, #7]
 8015386:	f107 0110 	add.w	r1, r7, #16
 801538a:	f107 0308 	add.w	r3, r7, #8
 801538e:	4618      	mov	r0, r3
 8015390:	f7ff fd1a 	bl	8014dc8 <find_volume>
 8015394:	4603      	mov	r3, r0
 8015396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801539a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801539e:	2b00      	cmp	r3, #0
 80153a0:	f040 8191 	bne.w	80156c6 <f_open+0x362>
		dj.obj.fs = fs;
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80153a8:	68ba      	ldr	r2, [r7, #8]
 80153aa:	f107 0314 	add.w	r3, r7, #20
 80153ae:	4611      	mov	r1, r2
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7ff fbfd 	bl	8014bb0 <follow_path>
 80153b6:	4603      	mov	r3, r0
 80153b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80153bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d11a      	bne.n	80153fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80153c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80153c8:	b25b      	sxtb	r3, r3
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	da03      	bge.n	80153d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80153ce:	2306      	movs	r3, #6
 80153d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80153d4:	e011      	b.n	80153fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80153d6:	79fb      	ldrb	r3, [r7, #7]
 80153d8:	f023 0301 	bic.w	r3, r3, #1
 80153dc:	2b00      	cmp	r3, #0
 80153de:	bf14      	ite	ne
 80153e0:	2301      	movne	r3, #1
 80153e2:	2300      	moveq	r3, #0
 80153e4:	b2db      	uxtb	r3, r3
 80153e6:	461a      	mov	r2, r3
 80153e8:	f107 0314 	add.w	r3, r7, #20
 80153ec:	4611      	mov	r1, r2
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7fd fd64 	bl	8012ebc <chk_lock>
 80153f4:	4603      	mov	r3, r0
 80153f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80153fa:	79fb      	ldrb	r3, [r7, #7]
 80153fc:	f003 031c 	and.w	r3, r3, #28
 8015400:	2b00      	cmp	r3, #0
 8015402:	d07f      	beq.n	8015504 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8015404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015408:	2b00      	cmp	r3, #0
 801540a:	d017      	beq.n	801543c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801540c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015410:	2b04      	cmp	r3, #4
 8015412:	d10e      	bne.n	8015432 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015414:	f7fd fdae 	bl	8012f74 <enq_lock>
 8015418:	4603      	mov	r3, r0
 801541a:	2b00      	cmp	r3, #0
 801541c:	d006      	beq.n	801542c <f_open+0xc8>
 801541e:	f107 0314 	add.w	r3, r7, #20
 8015422:	4618      	mov	r0, r3
 8015424:	f7fe ff94 	bl	8014350 <dir_register>
 8015428:	4603      	mov	r3, r0
 801542a:	e000      	b.n	801542e <f_open+0xca>
 801542c:	2312      	movs	r3, #18
 801542e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015432:	79fb      	ldrb	r3, [r7, #7]
 8015434:	f043 0308 	orr.w	r3, r3, #8
 8015438:	71fb      	strb	r3, [r7, #7]
 801543a:	e010      	b.n	801545e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801543c:	7ebb      	ldrb	r3, [r7, #26]
 801543e:	f003 0311 	and.w	r3, r3, #17
 8015442:	2b00      	cmp	r3, #0
 8015444:	d003      	beq.n	801544e <f_open+0xea>
					res = FR_DENIED;
 8015446:	2307      	movs	r3, #7
 8015448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801544c:	e007      	b.n	801545e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801544e:	79fb      	ldrb	r3, [r7, #7]
 8015450:	f003 0304 	and.w	r3, r3, #4
 8015454:	2b00      	cmp	r3, #0
 8015456:	d002      	beq.n	801545e <f_open+0xfa>
 8015458:	2308      	movs	r3, #8
 801545a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801545e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015462:	2b00      	cmp	r3, #0
 8015464:	d168      	bne.n	8015538 <f_open+0x1d4>
 8015466:	79fb      	ldrb	r3, [r7, #7]
 8015468:	f003 0308 	and.w	r3, r3, #8
 801546c:	2b00      	cmp	r3, #0
 801546e:	d063      	beq.n	8015538 <f_open+0x1d4>
				dw = GET_FATTIME();
 8015470:	f7fd fc1c 	bl	8012cac <get_fattime>
 8015474:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8015476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015478:	330e      	adds	r3, #14
 801547a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801547c:	4618      	mov	r0, r3
 801547e:	f7fd fc73 	bl	8012d68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8015482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015484:	3316      	adds	r3, #22
 8015486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015488:	4618      	mov	r0, r3
 801548a:	f7fd fc6d 	bl	8012d68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801548e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015490:	330b      	adds	r3, #11
 8015492:	2220      	movs	r2, #32
 8015494:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801549a:	4611      	mov	r1, r2
 801549c:	4618      	mov	r0, r3
 801549e:	f7fe fbc4 	bl	8013c2a <ld_clust>
 80154a2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80154a4:	693b      	ldr	r3, [r7, #16]
 80154a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80154a8:	2200      	movs	r2, #0
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7fe fbdc 	bl	8013c68 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80154b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154b2:	331c      	adds	r3, #28
 80154b4:	2100      	movs	r1, #0
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7fd fc56 	bl	8012d68 <st_dword>
					fs->wflag = 1;
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	2201      	movs	r2, #1
 80154c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80154c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d037      	beq.n	8015538 <f_open+0x1d4>
						dw = fs->winsect;
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154cc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80154ce:	f107 0314 	add.w	r3, r7, #20
 80154d2:	2200      	movs	r2, #0
 80154d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7fe f8ef 	bl	80136ba <remove_chain>
 80154dc:	4603      	mov	r3, r0
 80154de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80154e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d126      	bne.n	8015538 <f_open+0x1d4>
							res = move_window(fs, dw);
 80154ea:	693b      	ldr	r3, [r7, #16]
 80154ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80154ee:	4618      	mov	r0, r3
 80154f0:	f7fd fe94 	bl	801321c <move_window>
 80154f4:	4603      	mov	r3, r0
 80154f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80154fa:	693b      	ldr	r3, [r7, #16]
 80154fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80154fe:	3a01      	subs	r2, #1
 8015500:	611a      	str	r2, [r3, #16]
 8015502:	e019      	b.n	8015538 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015504:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015508:	2b00      	cmp	r3, #0
 801550a:	d115      	bne.n	8015538 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801550c:	7ebb      	ldrb	r3, [r7, #26]
 801550e:	f003 0310 	and.w	r3, r3, #16
 8015512:	2b00      	cmp	r3, #0
 8015514:	d003      	beq.n	801551e <f_open+0x1ba>
					res = FR_NO_FILE;
 8015516:	2304      	movs	r3, #4
 8015518:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801551c:	e00c      	b.n	8015538 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801551e:	79fb      	ldrb	r3, [r7, #7]
 8015520:	f003 0302 	and.w	r3, r3, #2
 8015524:	2b00      	cmp	r3, #0
 8015526:	d007      	beq.n	8015538 <f_open+0x1d4>
 8015528:	7ebb      	ldrb	r3, [r7, #26]
 801552a:	f003 0301 	and.w	r3, r3, #1
 801552e:	2b00      	cmp	r3, #0
 8015530:	d002      	beq.n	8015538 <f_open+0x1d4>
						res = FR_DENIED;
 8015532:	2307      	movs	r3, #7
 8015534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8015538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801553c:	2b00      	cmp	r3, #0
 801553e:	d128      	bne.n	8015592 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015540:	79fb      	ldrb	r3, [r7, #7]
 8015542:	f003 0308 	and.w	r3, r3, #8
 8015546:	2b00      	cmp	r3, #0
 8015548:	d003      	beq.n	8015552 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801554a:	79fb      	ldrb	r3, [r7, #7]
 801554c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015550:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801555a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015560:	79fb      	ldrb	r3, [r7, #7]
 8015562:	f023 0301 	bic.w	r3, r3, #1
 8015566:	2b00      	cmp	r3, #0
 8015568:	bf14      	ite	ne
 801556a:	2301      	movne	r3, #1
 801556c:	2300      	moveq	r3, #0
 801556e:	b2db      	uxtb	r3, r3
 8015570:	461a      	mov	r2, r3
 8015572:	f107 0314 	add.w	r3, r7, #20
 8015576:	4611      	mov	r1, r2
 8015578:	4618      	mov	r0, r3
 801557a:	f7fd fd1d 	bl	8012fb8 <inc_lock>
 801557e:	4602      	mov	r2, r0
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	691b      	ldr	r3, [r3, #16]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d102      	bne.n	8015592 <f_open+0x22e>
 801558c:	2302      	movs	r3, #2
 801558e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015592:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015596:	2b00      	cmp	r3, #0
 8015598:	f040 8095 	bne.w	80156c6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80155a0:	4611      	mov	r1, r2
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7fe fb41 	bl	8013c2a <ld_clust>
 80155a8:	4602      	mov	r2, r0
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80155ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155b0:	331c      	adds	r3, #28
 80155b2:	4618      	mov	r0, r3
 80155b4:	f7fd fb9a 	bl	8012cec <ld_dword>
 80155b8:	4602      	mov	r2, r0
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2200      	movs	r2, #0
 80155c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80155c4:	693a      	ldr	r2, [r7, #16]
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80155ca:	693b      	ldr	r3, [r7, #16]
 80155cc:	88da      	ldrh	r2, [r3, #6]
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	79fa      	ldrb	r2, [r7, #7]
 80155d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	2200      	movs	r2, #0
 80155dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	2200      	movs	r2, #0
 80155e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	2200      	movs	r2, #0
 80155e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	3330      	adds	r3, #48	; 0x30
 80155ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80155f2:	2100      	movs	r1, #0
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7fd fc04 	bl	8012e02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80155fa:	79fb      	ldrb	r3, [r7, #7]
 80155fc:	f003 0320 	and.w	r3, r3, #32
 8015600:	2b00      	cmp	r3, #0
 8015602:	d060      	beq.n	80156c6 <f_open+0x362>
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	68db      	ldr	r3, [r3, #12]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d05c      	beq.n	80156c6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	68da      	ldr	r2, [r3, #12]
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015614:	693b      	ldr	r3, [r7, #16]
 8015616:	895b      	ldrh	r3, [r3, #10]
 8015618:	025b      	lsls	r3, r3, #9
 801561a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	689b      	ldr	r3, [r3, #8]
 8015620:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	68db      	ldr	r3, [r3, #12]
 8015626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015628:	e016      	b.n	8015658 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801562e:	4618      	mov	r0, r3
 8015630:	f7fd feaf 	bl	8013392 <get_fat>
 8015634:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8015636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015638:	2b01      	cmp	r3, #1
 801563a:	d802      	bhi.n	8015642 <f_open+0x2de>
 801563c:	2302      	movs	r3, #2
 801563e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015648:	d102      	bne.n	8015650 <f_open+0x2ec>
 801564a:	2301      	movs	r3, #1
 801564c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015650:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015654:	1ad3      	subs	r3, r2, r3
 8015656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015658:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801565c:	2b00      	cmp	r3, #0
 801565e:	d103      	bne.n	8015668 <f_open+0x304>
 8015660:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015664:	429a      	cmp	r2, r3
 8015666:	d8e0      	bhi.n	801562a <f_open+0x2c6>
				}
				fp->clust = clst;
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801566c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801566e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015672:	2b00      	cmp	r3, #0
 8015674:	d127      	bne.n	80156c6 <f_open+0x362>
 8015676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801567c:	2b00      	cmp	r3, #0
 801567e:	d022      	beq.n	80156c6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015680:	693b      	ldr	r3, [r7, #16]
 8015682:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015684:	4618      	mov	r0, r3
 8015686:	f7fd fe65 	bl	8013354 <clust2sect>
 801568a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801568c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801568e:	2b00      	cmp	r3, #0
 8015690:	d103      	bne.n	801569a <f_open+0x336>
						res = FR_INT_ERR;
 8015692:	2302      	movs	r3, #2
 8015694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8015698:	e015      	b.n	80156c6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801569a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801569c:	0a5a      	lsrs	r2, r3, #9
 801569e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156a0:	441a      	add	r2, r3
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	7858      	ldrb	r0, [r3, #1]
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	6a1a      	ldr	r2, [r3, #32]
 80156b4:	2301      	movs	r3, #1
 80156b6:	f7fd fa9b 	bl	8012bf0 <disk_read>
 80156ba:	4603      	mov	r3, r0
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d002      	beq.n	80156c6 <f_open+0x362>
 80156c0:	2301      	movs	r3, #1
 80156c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80156c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d002      	beq.n	80156d4 <f_open+0x370>
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	2200      	movs	r2, #0
 80156d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80156d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3768      	adds	r7, #104	; 0x68
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}

080156e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b08e      	sub	sp, #56	; 0x38
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	60f8      	str	r0, [r7, #12]
 80156e8:	60b9      	str	r1, [r7, #8]
 80156ea:	607a      	str	r2, [r7, #4]
 80156ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80156ee:	68bb      	ldr	r3, [r7, #8]
 80156f0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	2200      	movs	r2, #0
 80156f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	f107 0214 	add.w	r2, r7, #20
 80156fe:	4611      	mov	r1, r2
 8015700:	4618      	mov	r0, r3
 8015702:	f7ff fdb3 	bl	801526c <validate>
 8015706:	4603      	mov	r3, r0
 8015708:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801570c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015710:	2b00      	cmp	r3, #0
 8015712:	d107      	bne.n	8015724 <f_read+0x44>
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	7d5b      	ldrb	r3, [r3, #21]
 8015718:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801571c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015720:	2b00      	cmp	r3, #0
 8015722:	d002      	beq.n	801572a <f_read+0x4a>
 8015724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015728:	e115      	b.n	8015956 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	7d1b      	ldrb	r3, [r3, #20]
 801572e:	f003 0301 	and.w	r3, r3, #1
 8015732:	2b00      	cmp	r3, #0
 8015734:	d101      	bne.n	801573a <f_read+0x5a>
 8015736:	2307      	movs	r3, #7
 8015738:	e10d      	b.n	8015956 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	68da      	ldr	r2, [r3, #12]
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	699b      	ldr	r3, [r3, #24]
 8015742:	1ad3      	subs	r3, r2, r3
 8015744:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8015746:	687a      	ldr	r2, [r7, #4]
 8015748:	6a3b      	ldr	r3, [r7, #32]
 801574a:	429a      	cmp	r2, r3
 801574c:	f240 80fe 	bls.w	801594c <f_read+0x26c>
 8015750:	6a3b      	ldr	r3, [r7, #32]
 8015752:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8015754:	e0fa      	b.n	801594c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	699b      	ldr	r3, [r3, #24]
 801575a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801575e:	2b00      	cmp	r3, #0
 8015760:	f040 80c6 	bne.w	80158f0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	699b      	ldr	r3, [r3, #24]
 8015768:	0a5b      	lsrs	r3, r3, #9
 801576a:	697a      	ldr	r2, [r7, #20]
 801576c:	8952      	ldrh	r2, [r2, #10]
 801576e:	3a01      	subs	r2, #1
 8015770:	4013      	ands	r3, r2
 8015772:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d12f      	bne.n	80157da <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	699b      	ldr	r3, [r3, #24]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d103      	bne.n	801578a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	689b      	ldr	r3, [r3, #8]
 8015786:	633b      	str	r3, [r7, #48]	; 0x30
 8015788:	e013      	b.n	80157b2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801578e:	2b00      	cmp	r3, #0
 8015790:	d007      	beq.n	80157a2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	699b      	ldr	r3, [r3, #24]
 8015796:	4619      	mov	r1, r3
 8015798:	68f8      	ldr	r0, [r7, #12]
 801579a:	f7fe f88b 	bl	80138b4 <clmt_clust>
 801579e:	6338      	str	r0, [r7, #48]	; 0x30
 80157a0:	e007      	b.n	80157b2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80157a2:	68fa      	ldr	r2, [r7, #12]
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	69db      	ldr	r3, [r3, #28]
 80157a8:	4619      	mov	r1, r3
 80157aa:	4610      	mov	r0, r2
 80157ac:	f7fd fdf1 	bl	8013392 <get_fat>
 80157b0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80157b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157b4:	2b01      	cmp	r3, #1
 80157b6:	d804      	bhi.n	80157c2 <f_read+0xe2>
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2202      	movs	r2, #2
 80157bc:	755a      	strb	r2, [r3, #21]
 80157be:	2302      	movs	r3, #2
 80157c0:	e0c9      	b.n	8015956 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80157c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157c8:	d104      	bne.n	80157d4 <f_read+0xf4>
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	2201      	movs	r2, #1
 80157ce:	755a      	strb	r2, [r3, #21]
 80157d0:	2301      	movs	r3, #1
 80157d2:	e0c0      	b.n	8015956 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157d8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80157da:	697a      	ldr	r2, [r7, #20]
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	69db      	ldr	r3, [r3, #28]
 80157e0:	4619      	mov	r1, r3
 80157e2:	4610      	mov	r0, r2
 80157e4:	f7fd fdb6 	bl	8013354 <clust2sect>
 80157e8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80157ea:	69bb      	ldr	r3, [r7, #24]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d104      	bne.n	80157fa <f_read+0x11a>
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	2202      	movs	r2, #2
 80157f4:	755a      	strb	r2, [r3, #21]
 80157f6:	2302      	movs	r3, #2
 80157f8:	e0ad      	b.n	8015956 <f_read+0x276>
			sect += csect;
 80157fa:	69ba      	ldr	r2, [r7, #24]
 80157fc:	69fb      	ldr	r3, [r7, #28]
 80157fe:	4413      	add	r3, r2
 8015800:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	0a5b      	lsrs	r3, r3, #9
 8015806:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8015808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580a:	2b00      	cmp	r3, #0
 801580c:	d039      	beq.n	8015882 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801580e:	69fa      	ldr	r2, [r7, #28]
 8015810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015812:	4413      	add	r3, r2
 8015814:	697a      	ldr	r2, [r7, #20]
 8015816:	8952      	ldrh	r2, [r2, #10]
 8015818:	4293      	cmp	r3, r2
 801581a:	d905      	bls.n	8015828 <f_read+0x148>
					cc = fs->csize - csect;
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	895b      	ldrh	r3, [r3, #10]
 8015820:	461a      	mov	r2, r3
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	1ad3      	subs	r3, r2, r3
 8015826:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	7858      	ldrb	r0, [r3, #1]
 801582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801582e:	69ba      	ldr	r2, [r7, #24]
 8015830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015832:	f7fd f9dd 	bl	8012bf0 <disk_read>
 8015836:	4603      	mov	r3, r0
 8015838:	2b00      	cmp	r3, #0
 801583a:	d004      	beq.n	8015846 <f_read+0x166>
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	2201      	movs	r2, #1
 8015840:	755a      	strb	r2, [r3, #21]
 8015842:	2301      	movs	r3, #1
 8015844:	e087      	b.n	8015956 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	7d1b      	ldrb	r3, [r3, #20]
 801584a:	b25b      	sxtb	r3, r3
 801584c:	2b00      	cmp	r3, #0
 801584e:	da14      	bge.n	801587a <f_read+0x19a>
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	6a1a      	ldr	r2, [r3, #32]
 8015854:	69bb      	ldr	r3, [r7, #24]
 8015856:	1ad3      	subs	r3, r2, r3
 8015858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801585a:	429a      	cmp	r2, r3
 801585c:	d90d      	bls.n	801587a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	6a1a      	ldr	r2, [r3, #32]
 8015862:	69bb      	ldr	r3, [r7, #24]
 8015864:	1ad3      	subs	r3, r2, r3
 8015866:	025b      	lsls	r3, r3, #9
 8015868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801586a:	18d0      	adds	r0, r2, r3
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	3330      	adds	r3, #48	; 0x30
 8015870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015874:	4619      	mov	r1, r3
 8015876:	f7fd faa3 	bl	8012dc0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801587c:	025b      	lsls	r3, r3, #9
 801587e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8015880:	e050      	b.n	8015924 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	6a1b      	ldr	r3, [r3, #32]
 8015886:	69ba      	ldr	r2, [r7, #24]
 8015888:	429a      	cmp	r2, r3
 801588a:	d02e      	beq.n	80158ea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	7d1b      	ldrb	r3, [r3, #20]
 8015890:	b25b      	sxtb	r3, r3
 8015892:	2b00      	cmp	r3, #0
 8015894:	da18      	bge.n	80158c8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015896:	697b      	ldr	r3, [r7, #20]
 8015898:	7858      	ldrb	r0, [r3, #1]
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	6a1a      	ldr	r2, [r3, #32]
 80158a4:	2301      	movs	r3, #1
 80158a6:	f7fd f9c3 	bl	8012c30 <disk_write>
 80158aa:	4603      	mov	r3, r0
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d004      	beq.n	80158ba <f_read+0x1da>
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	2201      	movs	r2, #1
 80158b4:	755a      	strb	r2, [r3, #21]
 80158b6:	2301      	movs	r3, #1
 80158b8:	e04d      	b.n	8015956 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	7d1b      	ldrb	r3, [r3, #20]
 80158be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158c2:	b2da      	uxtb	r2, r3
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80158c8:	697b      	ldr	r3, [r7, #20]
 80158ca:	7858      	ldrb	r0, [r3, #1]
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80158d2:	2301      	movs	r3, #1
 80158d4:	69ba      	ldr	r2, [r7, #24]
 80158d6:	f7fd f98b 	bl	8012bf0 <disk_read>
 80158da:	4603      	mov	r3, r0
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d004      	beq.n	80158ea <f_read+0x20a>
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	2201      	movs	r2, #1
 80158e4:	755a      	strb	r2, [r3, #21]
 80158e6:	2301      	movs	r3, #1
 80158e8:	e035      	b.n	8015956 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	69ba      	ldr	r2, [r7, #24]
 80158ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	699b      	ldr	r3, [r3, #24]
 80158f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80158f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80158fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80158fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	429a      	cmp	r2, r3
 8015904:	d901      	bls.n	801590a <f_read+0x22a>
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	699b      	ldr	r3, [r3, #24]
 8015914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015918:	4413      	add	r3, r2
 801591a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801591c:	4619      	mov	r1, r3
 801591e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015920:	f7fd fa4e 	bl	8012dc0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8015924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015928:	4413      	add	r3, r2
 801592a:	627b      	str	r3, [r7, #36]	; 0x24
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	699a      	ldr	r2, [r3, #24]
 8015930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015932:	441a      	add	r2, r3
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	619a      	str	r2, [r3, #24]
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	681a      	ldr	r2, [r3, #0]
 801593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593e:	441a      	add	r2, r3
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	601a      	str	r2, [r3, #0]
 8015944:	687a      	ldr	r2, [r7, #4]
 8015946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015948:	1ad3      	subs	r3, r2, r3
 801594a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2b00      	cmp	r3, #0
 8015950:	f47f af01 	bne.w	8015756 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8015954:	2300      	movs	r3, #0
}
 8015956:	4618      	mov	r0, r3
 8015958:	3738      	adds	r7, #56	; 0x38
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}

0801595e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801595e:	b580      	push	{r7, lr}
 8015960:	b08c      	sub	sp, #48	; 0x30
 8015962:	af00      	add	r7, sp, #0
 8015964:	60f8      	str	r0, [r7, #12]
 8015966:	60b9      	str	r1, [r7, #8]
 8015968:	607a      	str	r2, [r7, #4]
 801596a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	2200      	movs	r2, #0
 8015974:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	f107 0210 	add.w	r2, r7, #16
 801597c:	4611      	mov	r1, r2
 801597e:	4618      	mov	r0, r3
 8015980:	f7ff fc74 	bl	801526c <validate>
 8015984:	4603      	mov	r3, r0
 8015986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801598a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801598e:	2b00      	cmp	r3, #0
 8015990:	d107      	bne.n	80159a2 <f_write+0x44>
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	7d5b      	ldrb	r3, [r3, #21]
 8015996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801599a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d002      	beq.n	80159a8 <f_write+0x4a>
 80159a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80159a6:	e14b      	b.n	8015c40 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	7d1b      	ldrb	r3, [r3, #20]
 80159ac:	f003 0302 	and.w	r3, r3, #2
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d101      	bne.n	80159b8 <f_write+0x5a>
 80159b4:	2307      	movs	r3, #7
 80159b6:	e143      	b.n	8015c40 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	699a      	ldr	r2, [r3, #24]
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	441a      	add	r2, r3
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	699b      	ldr	r3, [r3, #24]
 80159c4:	429a      	cmp	r2, r3
 80159c6:	f080 812d 	bcs.w	8015c24 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	699b      	ldr	r3, [r3, #24]
 80159ce:	43db      	mvns	r3, r3
 80159d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80159d2:	e127      	b.n	8015c24 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	699b      	ldr	r3, [r3, #24]
 80159d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80159dc:	2b00      	cmp	r3, #0
 80159de:	f040 80e3 	bne.w	8015ba8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	699b      	ldr	r3, [r3, #24]
 80159e6:	0a5b      	lsrs	r3, r3, #9
 80159e8:	693a      	ldr	r2, [r7, #16]
 80159ea:	8952      	ldrh	r2, [r2, #10]
 80159ec:	3a01      	subs	r2, #1
 80159ee:	4013      	ands	r3, r2
 80159f0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80159f2:	69bb      	ldr	r3, [r7, #24]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d143      	bne.n	8015a80 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	699b      	ldr	r3, [r3, #24]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d10c      	bne.n	8015a1a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	689b      	ldr	r3, [r3, #8]
 8015a04:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d11a      	bne.n	8015a42 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	2100      	movs	r1, #0
 8015a10:	4618      	mov	r0, r3
 8015a12:	f7fd feb7 	bl	8013784 <create_chain>
 8015a16:	62b8      	str	r0, [r7, #40]	; 0x28
 8015a18:	e013      	b.n	8015a42 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d007      	beq.n	8015a32 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	699b      	ldr	r3, [r3, #24]
 8015a26:	4619      	mov	r1, r3
 8015a28:	68f8      	ldr	r0, [r7, #12]
 8015a2a:	f7fd ff43 	bl	80138b4 <clmt_clust>
 8015a2e:	62b8      	str	r0, [r7, #40]	; 0x28
 8015a30:	e007      	b.n	8015a42 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015a32:	68fa      	ldr	r2, [r7, #12]
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	69db      	ldr	r3, [r3, #28]
 8015a38:	4619      	mov	r1, r3
 8015a3a:	4610      	mov	r0, r2
 8015a3c:	f7fd fea2 	bl	8013784 <create_chain>
 8015a40:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	f000 80f2 	beq.w	8015c2e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a4c:	2b01      	cmp	r3, #1
 8015a4e:	d104      	bne.n	8015a5a <f_write+0xfc>
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	2202      	movs	r2, #2
 8015a54:	755a      	strb	r2, [r3, #21]
 8015a56:	2302      	movs	r3, #2
 8015a58:	e0f2      	b.n	8015c40 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a60:	d104      	bne.n	8015a6c <f_write+0x10e>
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2201      	movs	r2, #1
 8015a66:	755a      	strb	r2, [r3, #21]
 8015a68:	2301      	movs	r3, #1
 8015a6a:	e0e9      	b.n	8015c40 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a70:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	689b      	ldr	r3, [r3, #8]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d102      	bne.n	8015a80 <f_write+0x122>
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a7e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	7d1b      	ldrb	r3, [r3, #20]
 8015a84:	b25b      	sxtb	r3, r3
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	da18      	bge.n	8015abc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015a8a:	693b      	ldr	r3, [r7, #16]
 8015a8c:	7858      	ldrb	r0, [r3, #1]
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	6a1a      	ldr	r2, [r3, #32]
 8015a98:	2301      	movs	r3, #1
 8015a9a:	f7fd f8c9 	bl	8012c30 <disk_write>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d004      	beq.n	8015aae <f_write+0x150>
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	2201      	movs	r2, #1
 8015aa8:	755a      	strb	r2, [r3, #21]
 8015aaa:	2301      	movs	r3, #1
 8015aac:	e0c8      	b.n	8015c40 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	7d1b      	ldrb	r3, [r3, #20]
 8015ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ab6:	b2da      	uxtb	r2, r3
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015abc:	693a      	ldr	r2, [r7, #16]
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	69db      	ldr	r3, [r3, #28]
 8015ac2:	4619      	mov	r1, r3
 8015ac4:	4610      	mov	r0, r2
 8015ac6:	f7fd fc45 	bl	8013354 <clust2sect>
 8015aca:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d104      	bne.n	8015adc <f_write+0x17e>
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	2202      	movs	r2, #2
 8015ad6:	755a      	strb	r2, [r3, #21]
 8015ad8:	2302      	movs	r3, #2
 8015ada:	e0b1      	b.n	8015c40 <f_write+0x2e2>
			sect += csect;
 8015adc:	697a      	ldr	r2, [r7, #20]
 8015ade:	69bb      	ldr	r3, [r7, #24]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	0a5b      	lsrs	r3, r3, #9
 8015ae8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015aea:	6a3b      	ldr	r3, [r7, #32]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d03c      	beq.n	8015b6a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015af0:	69ba      	ldr	r2, [r7, #24]
 8015af2:	6a3b      	ldr	r3, [r7, #32]
 8015af4:	4413      	add	r3, r2
 8015af6:	693a      	ldr	r2, [r7, #16]
 8015af8:	8952      	ldrh	r2, [r2, #10]
 8015afa:	4293      	cmp	r3, r2
 8015afc:	d905      	bls.n	8015b0a <f_write+0x1ac>
					cc = fs->csize - csect;
 8015afe:	693b      	ldr	r3, [r7, #16]
 8015b00:	895b      	ldrh	r3, [r3, #10]
 8015b02:	461a      	mov	r2, r3
 8015b04:	69bb      	ldr	r3, [r7, #24]
 8015b06:	1ad3      	subs	r3, r2, r3
 8015b08:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	7858      	ldrb	r0, [r3, #1]
 8015b0e:	6a3b      	ldr	r3, [r7, #32]
 8015b10:	697a      	ldr	r2, [r7, #20]
 8015b12:	69f9      	ldr	r1, [r7, #28]
 8015b14:	f7fd f88c 	bl	8012c30 <disk_write>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d004      	beq.n	8015b28 <f_write+0x1ca>
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	2201      	movs	r2, #1
 8015b22:	755a      	strb	r2, [r3, #21]
 8015b24:	2301      	movs	r3, #1
 8015b26:	e08b      	b.n	8015c40 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	6a1a      	ldr	r2, [r3, #32]
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	1ad3      	subs	r3, r2, r3
 8015b30:	6a3a      	ldr	r2, [r7, #32]
 8015b32:	429a      	cmp	r2, r3
 8015b34:	d915      	bls.n	8015b62 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	6a1a      	ldr	r2, [r3, #32]
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	1ad3      	subs	r3, r2, r3
 8015b44:	025b      	lsls	r3, r3, #9
 8015b46:	69fa      	ldr	r2, [r7, #28]
 8015b48:	4413      	add	r3, r2
 8015b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015b4e:	4619      	mov	r1, r3
 8015b50:	f7fd f936 	bl	8012dc0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	7d1b      	ldrb	r3, [r3, #20]
 8015b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b5c:	b2da      	uxtb	r2, r3
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015b62:	6a3b      	ldr	r3, [r7, #32]
 8015b64:	025b      	lsls	r3, r3, #9
 8015b66:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015b68:	e03f      	b.n	8015bea <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	6a1b      	ldr	r3, [r3, #32]
 8015b6e:	697a      	ldr	r2, [r7, #20]
 8015b70:	429a      	cmp	r2, r3
 8015b72:	d016      	beq.n	8015ba2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	699a      	ldr	r2, [r3, #24]
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	d210      	bcs.n	8015ba2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	7858      	ldrb	r0, [r3, #1]
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	697a      	ldr	r2, [r7, #20]
 8015b8e:	f7fd f82f 	bl	8012bf0 <disk_read>
 8015b92:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d004      	beq.n	8015ba2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	2201      	movs	r2, #1
 8015b9c:	755a      	strb	r2, [r3, #21]
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	e04e      	b.n	8015c40 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	697a      	ldr	r2, [r7, #20]
 8015ba6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	699b      	ldr	r3, [r3, #24]
 8015bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015bb0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015bb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d901      	bls.n	8015bc2 <f_write+0x264>
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	699b      	ldr	r3, [r3, #24]
 8015bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015bd0:	4413      	add	r3, r2
 8015bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bd4:	69f9      	ldr	r1, [r7, #28]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7fd f8f2 	bl	8012dc0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	7d1b      	ldrb	r3, [r3, #20]
 8015be0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015be4:	b2da      	uxtb	r2, r3
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015bea:	69fa      	ldr	r2, [r7, #28]
 8015bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bee:	4413      	add	r3, r2
 8015bf0:	61fb      	str	r3, [r7, #28]
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	699a      	ldr	r2, [r3, #24]
 8015bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf8:	441a      	add	r2, r3
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	619a      	str	r2, [r3, #24]
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	68da      	ldr	r2, [r3, #12]
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	699b      	ldr	r3, [r3, #24]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	bf38      	it	cc
 8015c0a:	461a      	movcc	r2, r3
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	60da      	str	r2, [r3, #12]
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	681a      	ldr	r2, [r3, #0]
 8015c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c16:	441a      	add	r2, r3
 8015c18:	683b      	ldr	r3, [r7, #0]
 8015c1a:	601a      	str	r2, [r3, #0]
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c20:	1ad3      	subs	r3, r2, r3
 8015c22:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	f47f aed4 	bne.w	80159d4 <f_write+0x76>
 8015c2c:	e000      	b.n	8015c30 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015c2e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	7d1b      	ldrb	r3, [r3, #20]
 8015c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c38:	b2da      	uxtb	r2, r3
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015c3e:	2300      	movs	r3, #0
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	3730      	adds	r7, #48	; 0x30
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b086      	sub	sp, #24
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f107 0208 	add.w	r2, r7, #8
 8015c56:	4611      	mov	r1, r2
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7ff fb07 	bl	801526c <validate>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015c62:	7dfb      	ldrb	r3, [r7, #23]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d168      	bne.n	8015d3a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	7d1b      	ldrb	r3, [r3, #20]
 8015c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d062      	beq.n	8015d3a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	7d1b      	ldrb	r3, [r3, #20]
 8015c78:	b25b      	sxtb	r3, r3
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	da15      	bge.n	8015caa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015c7e:	68bb      	ldr	r3, [r7, #8]
 8015c80:	7858      	ldrb	r0, [r3, #1]
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	6a1a      	ldr	r2, [r3, #32]
 8015c8c:	2301      	movs	r3, #1
 8015c8e:	f7fc ffcf 	bl	8012c30 <disk_write>
 8015c92:	4603      	mov	r3, r0
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d001      	beq.n	8015c9c <f_sync+0x54>
 8015c98:	2301      	movs	r3, #1
 8015c9a:	e04f      	b.n	8015d3c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	7d1b      	ldrb	r3, [r3, #20]
 8015ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ca4:	b2da      	uxtb	r2, r3
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015caa:	f7fc ffff 	bl	8012cac <get_fattime>
 8015cae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015cb0:	68ba      	ldr	r2, [r7, #8]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cb6:	4619      	mov	r1, r3
 8015cb8:	4610      	mov	r0, r2
 8015cba:	f7fd faaf 	bl	801321c <move_window>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015cc2:	7dfb      	ldrb	r3, [r7, #23]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d138      	bne.n	8015d3a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ccc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	330b      	adds	r3, #11
 8015cd2:	781a      	ldrb	r2, [r3, #0]
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	330b      	adds	r3, #11
 8015cd8:	f042 0220 	orr.w	r2, r2, #32
 8015cdc:	b2d2      	uxtb	r2, r2
 8015cde:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	6818      	ldr	r0, [r3, #0]
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	689b      	ldr	r3, [r3, #8]
 8015ce8:	461a      	mov	r2, r3
 8015cea:	68f9      	ldr	r1, [r7, #12]
 8015cec:	f7fd ffbc 	bl	8013c68 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	f103 021c 	add.w	r2, r3, #28
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	68db      	ldr	r3, [r3, #12]
 8015cfa:	4619      	mov	r1, r3
 8015cfc:	4610      	mov	r0, r2
 8015cfe:	f7fd f833 	bl	8012d68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	3316      	adds	r3, #22
 8015d06:	6939      	ldr	r1, [r7, #16]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7fd f82d 	bl	8012d68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	3312      	adds	r3, #18
 8015d12:	2100      	movs	r1, #0
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7fd f80c 	bl	8012d32 <st_word>
					fs->wflag = 1;
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	2201      	movs	r2, #1
 8015d1e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7fd faa8 	bl	8013278 <sync_fs>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	7d1b      	ldrb	r3, [r3, #20]
 8015d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d34:	b2da      	uxtb	r2, r3
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	3718      	adds	r7, #24
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}

08015d44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b084      	sub	sp, #16
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f7ff ff7b 	bl	8015c48 <f_sync>
 8015d52:	4603      	mov	r3, r0
 8015d54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015d56:	7bfb      	ldrb	r3, [r7, #15]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d118      	bne.n	8015d8e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f107 0208 	add.w	r2, r7, #8
 8015d62:	4611      	mov	r1, r2
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7ff fa81 	bl	801526c <validate>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015d6e:	7bfb      	ldrb	r3, [r7, #15]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d10c      	bne.n	8015d8e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	691b      	ldr	r3, [r3, #16]
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7fd f9ab 	bl	80130d4 <dec_lock>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015d82:	7bfb      	ldrb	r3, [r7, #15]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d102      	bne.n	8015d8e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d90:	4618      	mov	r0, r3
 8015d92:	3710      	adds	r7, #16
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}

08015d98 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b086      	sub	sp, #24
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
 8015da0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d101      	bne.n	8015dac <f_opendir+0x14>
 8015da8:	2309      	movs	r3, #9
 8015daa:	e064      	b.n	8015e76 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015db0:	f107 010c 	add.w	r1, r7, #12
 8015db4:	463b      	mov	r3, r7
 8015db6:	2200      	movs	r2, #0
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7ff f805 	bl	8014dc8 <find_volume>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015dc2:	7dfb      	ldrb	r3, [r7, #23]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d14f      	bne.n	8015e68 <f_opendir+0xd0>
		obj->fs = fs;
 8015dc8:	68fa      	ldr	r2, [r7, #12]
 8015dca:	693b      	ldr	r3, [r7, #16]
 8015dcc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	4619      	mov	r1, r3
 8015dd2:	6878      	ldr	r0, [r7, #4]
 8015dd4:	f7fe feec 	bl	8014bb0 <follow_path>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015ddc:	7dfb      	ldrb	r3, [r7, #23]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d13d      	bne.n	8015e5e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015de8:	b25b      	sxtb	r3, r3
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	db12      	blt.n	8015e14 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	799b      	ldrb	r3, [r3, #6]
 8015df2:	f003 0310 	and.w	r3, r3, #16
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d00a      	beq.n	8015e10 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015dfa:	68fa      	ldr	r2, [r7, #12]
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6a1b      	ldr	r3, [r3, #32]
 8015e00:	4619      	mov	r1, r3
 8015e02:	4610      	mov	r0, r2
 8015e04:	f7fd ff11 	bl	8013c2a <ld_clust>
 8015e08:	4602      	mov	r2, r0
 8015e0a:	693b      	ldr	r3, [r7, #16]
 8015e0c:	609a      	str	r2, [r3, #8]
 8015e0e:	e001      	b.n	8015e14 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015e10:	2305      	movs	r3, #5
 8015e12:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015e14:	7dfb      	ldrb	r3, [r7, #23]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d121      	bne.n	8015e5e <f_opendir+0xc6>
				obj->id = fs->id;
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	88da      	ldrh	r2, [r3, #6]
 8015e1e:	693b      	ldr	r3, [r7, #16]
 8015e20:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015e22:	2100      	movs	r1, #0
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f7fd fd79 	bl	801391c <dir_sdi>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015e2e:	7dfb      	ldrb	r3, [r7, #23]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d114      	bne.n	8015e5e <f_opendir+0xc6>
					if (obj->sclust) {
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	689b      	ldr	r3, [r3, #8]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d00d      	beq.n	8015e58 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015e3c:	2100      	movs	r1, #0
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f7fd f8ba 	bl	8012fb8 <inc_lock>
 8015e44:	4602      	mov	r2, r0
 8015e46:	693b      	ldr	r3, [r7, #16]
 8015e48:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	691b      	ldr	r3, [r3, #16]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d105      	bne.n	8015e5e <f_opendir+0xc6>
 8015e52:	2312      	movs	r3, #18
 8015e54:	75fb      	strb	r3, [r7, #23]
 8015e56:	e002      	b.n	8015e5e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015e58:	693b      	ldr	r3, [r7, #16]
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015e5e:	7dfb      	ldrb	r3, [r7, #23]
 8015e60:	2b04      	cmp	r3, #4
 8015e62:	d101      	bne.n	8015e68 <f_opendir+0xd0>
 8015e64:	2305      	movs	r3, #5
 8015e66:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015e68:	7dfb      	ldrb	r3, [r7, #23]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d002      	beq.n	8015e74 <f_opendir+0xdc>
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	2200      	movs	r2, #0
 8015e72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3718      	adds	r7, #24
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}

08015e7e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015e7e:	b580      	push	{r7, lr}
 8015e80:	b084      	sub	sp, #16
 8015e82:	af00      	add	r7, sp, #0
 8015e84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f107 0208 	add.w	r2, r7, #8
 8015e8c:	4611      	mov	r1, r2
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f7ff f9ec 	bl	801526c <validate>
 8015e94:	4603      	mov	r3, r0
 8015e96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015e98:	7bfb      	ldrb	r3, [r7, #15]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d110      	bne.n	8015ec0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	691b      	ldr	r3, [r3, #16]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d006      	beq.n	8015eb4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	691b      	ldr	r3, [r3, #16]
 8015eaa:	4618      	mov	r0, r3
 8015eac:	f7fd f912 	bl	80130d4 <dec_lock>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8015eb4:	7bfb      	ldrb	r3, [r7, #15]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d102      	bne.n	8015ec0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8015ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	3710      	adds	r7, #16
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	bd80      	pop	{r7, pc}

08015eca <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015eca:	b580      	push	{r7, lr}
 8015ecc:	b084      	sub	sp, #16
 8015ece:	af00      	add	r7, sp, #0
 8015ed0:	6078      	str	r0, [r7, #4]
 8015ed2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f107 0208 	add.w	r2, r7, #8
 8015eda:	4611      	mov	r1, r2
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7ff f9c5 	bl	801526c <validate>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015ee6:	7bfb      	ldrb	r3, [r7, #15]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d126      	bne.n	8015f3a <f_readdir+0x70>
		if (!fno) {
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d106      	bne.n	8015f00 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015ef2:	2100      	movs	r1, #0
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f7fd fd11 	bl	801391c <dir_sdi>
 8015efa:	4603      	mov	r3, r0
 8015efc:	73fb      	strb	r3, [r7, #15]
 8015efe:	e01c      	b.n	8015f3a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8015f00:	2100      	movs	r1, #0
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f7fe f8bd 	bl	8014082 <dir_read>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015f0c:	7bfb      	ldrb	r3, [r7, #15]
 8015f0e:	2b04      	cmp	r3, #4
 8015f10:	d101      	bne.n	8015f16 <f_readdir+0x4c>
 8015f12:	2300      	movs	r3, #0
 8015f14:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015f16:	7bfb      	ldrb	r3, [r7, #15]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d10e      	bne.n	8015f3a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015f1c:	6839      	ldr	r1, [r7, #0]
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f7fe fb0e 	bl	8014540 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015f24:	2100      	movs	r1, #0
 8015f26:	6878      	ldr	r0, [r7, #4]
 8015f28:	f7fd fd73 	bl	8013a12 <dir_next>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015f30:	7bfb      	ldrb	r3, [r7, #15]
 8015f32:	2b04      	cmp	r3, #4
 8015f34:	d101      	bne.n	8015f3a <f_readdir+0x70>
 8015f36:	2300      	movs	r3, #0
 8015f38:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	3710      	adds	r7, #16
 8015f40:	46bd      	mov	sp, r7
 8015f42:	bd80      	pop	{r7, pc}

08015f44 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b084      	sub	sp, #16
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
 8015f4c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8015f4e:	6839      	ldr	r1, [r7, #0]
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f7ff ffba 	bl	8015eca <f_readdir>
 8015f56:	4603      	mov	r3, r0
 8015f58:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8015f5a:	7bfb      	ldrb	r3, [r7, #15]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d114      	bne.n	8015f8a <f_findnext+0x46>
 8015f60:	683b      	ldr	r3, [r7, #0]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d011      	beq.n	8015f8a <f_findnext+0x46>
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	7d9b      	ldrb	r3, [r3, #22]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d00d      	beq.n	8015f8a <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	f103 0116 	add.w	r1, r3, #22
 8015f78:	2300      	movs	r3, #0
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	f7fe fbe4 	bl	8014748 <pattern_matching>
 8015f80:	4603      	mov	r3, r0
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d100      	bne.n	8015f88 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8015f86:	e7e2      	b.n	8015f4e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8015f88:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8015f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3710      	adds	r7, #16
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}

08015f94 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b086      	sub	sp, #24
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	60f8      	str	r0, [r7, #12]
 8015f9c:	60b9      	str	r1, [r7, #8]
 8015f9e:	607a      	str	r2, [r7, #4]
 8015fa0:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	683a      	ldr	r2, [r7, #0]
 8015fa6:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8015fa8:	6879      	ldr	r1, [r7, #4]
 8015faa:	68f8      	ldr	r0, [r7, #12]
 8015fac:	f7ff fef4 	bl	8015d98 <f_opendir>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015fb4:	7dfb      	ldrb	r3, [r7, #23]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d105      	bne.n	8015fc6 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8015fba:	68b9      	ldr	r1, [r7, #8]
 8015fbc:	68f8      	ldr	r0, [r7, #12]
 8015fbe:	f7ff ffc1 	bl	8015f44 <f_findnext>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8015fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3718      	adds	r7, #24
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b098      	sub	sp, #96	; 0x60
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015fd8:	f107 0108 	add.w	r1, r7, #8
 8015fdc:	1d3b      	adds	r3, r7, #4
 8015fde:	2202      	movs	r2, #2
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7fe fef1 	bl	8014dc8 <find_volume>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8015ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	f040 80ec 	bne.w	80161d2 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015ffa:	687a      	ldr	r2, [r7, #4]
 8015ffc:	f107 030c 	add.w	r3, r7, #12
 8016000:	4611      	mov	r1, r2
 8016002:	4618      	mov	r0, r3
 8016004:	f7fe fdd4 	bl	8014bb0 <follow_path>
 8016008:	4603      	mov	r3, r0
 801600a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801600e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016012:	2b00      	cmp	r3, #0
 8016014:	d102      	bne.n	801601c <f_mkdir+0x4c>
 8016016:	2308      	movs	r3, #8
 8016018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801601c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016020:	2b04      	cmp	r3, #4
 8016022:	f040 80d6 	bne.w	80161d2 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016026:	f107 030c 	add.w	r3, r7, #12
 801602a:	2100      	movs	r1, #0
 801602c:	4618      	mov	r0, r3
 801602e:	f7fd fba9 	bl	8013784 <create_chain>
 8016032:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016034:	68bb      	ldr	r3, [r7, #8]
 8016036:	895b      	ldrh	r3, [r3, #10]
 8016038:	025b      	lsls	r3, r3, #9
 801603a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801603c:	2300      	movs	r3, #0
 801603e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8016042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016044:	2b00      	cmp	r3, #0
 8016046:	d102      	bne.n	801604e <f_mkdir+0x7e>
 8016048:	2307      	movs	r3, #7
 801604a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 801604e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016050:	2b01      	cmp	r3, #1
 8016052:	d102      	bne.n	801605a <f_mkdir+0x8a>
 8016054:	2302      	movs	r3, #2
 8016056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801605a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016060:	d102      	bne.n	8016068 <f_mkdir+0x98>
 8016062:	2301      	movs	r3, #1
 8016064:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8016068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801606c:	2b00      	cmp	r3, #0
 801606e:	d106      	bne.n	801607e <f_mkdir+0xae>
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	4618      	mov	r0, r3
 8016074:	f7fd f88e 	bl	8013194 <sync_window>
 8016078:	4603      	mov	r3, r0
 801607a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 801607e:	f7fc fe15 	bl	8012cac <get_fattime>
 8016082:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8016084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016088:	2b00      	cmp	r3, #0
 801608a:	d16a      	bne.n	8016162 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016090:	4618      	mov	r0, r3
 8016092:	f7fd f95f 	bl	8013354 <clust2sect>
 8016096:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	3334      	adds	r3, #52	; 0x34
 801609c:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 801609e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80160a2:	2100      	movs	r1, #0
 80160a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80160a6:	f7fc feac 	bl	8012e02 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80160aa:	220b      	movs	r2, #11
 80160ac:	2120      	movs	r1, #32
 80160ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80160b0:	f7fc fea7 	bl	8012e02 <mem_set>
					dir[DIR_Name] = '.';
 80160b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80160b6:	222e      	movs	r2, #46	; 0x2e
 80160b8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80160ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80160bc:	330b      	adds	r3, #11
 80160be:	2210      	movs	r2, #16
 80160c0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80160c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80160c4:	3316      	adds	r3, #22
 80160c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7fc fe4d 	bl	8012d68 <st_dword>
					st_clust(fs, dir, dcl);
 80160ce:	68bb      	ldr	r3, [r7, #8]
 80160d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80160d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7fd fdc7 	bl	8013c68 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80160da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80160dc:	3320      	adds	r3, #32
 80160de:	2220      	movs	r2, #32
 80160e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7fc fe6c 	bl	8012dc0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80160e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80160ea:	3321      	adds	r3, #33	; 0x21
 80160ec:	222e      	movs	r2, #46	; 0x2e
 80160ee:	701a      	strb	r2, [r3, #0]
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	2b03      	cmp	r3, #3
 80160fa:	d106      	bne.n	801610a <f_mkdir+0x13a>
 80160fc:	68bb      	ldr	r3, [r7, #8]
 80160fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016100:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016102:	429a      	cmp	r2, r3
 8016104:	d101      	bne.n	801610a <f_mkdir+0x13a>
 8016106:	2300      	movs	r3, #0
 8016108:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 801610a:	68b8      	ldr	r0, [r7, #8]
 801610c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801610e:	3320      	adds	r3, #32
 8016110:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016112:	4619      	mov	r1, r3
 8016114:	f7fd fda8 	bl	8013c68 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	895b      	ldrh	r3, [r3, #10]
 801611c:	65bb      	str	r3, [r7, #88]	; 0x58
 801611e:	e01b      	b.n	8016158 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8016120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016122:	1c5a      	adds	r2, r3, #1
 8016124:	657a      	str	r2, [r7, #84]	; 0x54
 8016126:	68ba      	ldr	r2, [r7, #8]
 8016128:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 801612a:	68bb      	ldr	r3, [r7, #8]
 801612c:	2201      	movs	r2, #1
 801612e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	4618      	mov	r0, r3
 8016134:	f7fd f82e 	bl	8013194 <sync_window>
 8016138:	4603      	mov	r3, r0
 801613a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 801613e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016142:	2b00      	cmp	r3, #0
 8016144:	d10c      	bne.n	8016160 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8016146:	f44f 7200 	mov.w	r2, #512	; 0x200
 801614a:	2100      	movs	r1, #0
 801614c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801614e:	f7fc fe58 	bl	8012e02 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016154:	3b01      	subs	r3, #1
 8016156:	65bb      	str	r3, [r7, #88]	; 0x58
 8016158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801615a:	2b00      	cmp	r3, #0
 801615c:	d1e0      	bne.n	8016120 <f_mkdir+0x150>
 801615e:	e000      	b.n	8016162 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8016160:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8016162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016166:	2b00      	cmp	r3, #0
 8016168:	d107      	bne.n	801617a <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801616a:	f107 030c 	add.w	r3, r7, #12
 801616e:	4618      	mov	r0, r3
 8016170:	f7fe f8ee 	bl	8014350 <dir_register>
 8016174:	4603      	mov	r3, r0
 8016176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 801617a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801617e:	2b00      	cmp	r3, #0
 8016180:	d120      	bne.n	80161c4 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8016182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016184:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8016186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016188:	3316      	adds	r3, #22
 801618a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801618c:	4618      	mov	r0, r3
 801618e:	f7fc fdeb 	bl	8012d68 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8016192:	68bb      	ldr	r3, [r7, #8]
 8016194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016198:	4618      	mov	r0, r3
 801619a:	f7fd fd65 	bl	8013c68 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801619e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161a0:	330b      	adds	r3, #11
 80161a2:	2210      	movs	r2, #16
 80161a4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80161a6:	68bb      	ldr	r3, [r7, #8]
 80161a8:	2201      	movs	r2, #1
 80161aa:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80161ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d10e      	bne.n	80161d2 <f_mkdir+0x202>
					res = sync_fs(fs);
 80161b4:	68bb      	ldr	r3, [r7, #8]
 80161b6:	4618      	mov	r0, r3
 80161b8:	f7fd f85e 	bl	8013278 <sync_fs>
 80161bc:	4603      	mov	r3, r0
 80161be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80161c2:	e006      	b.n	80161d2 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80161c4:	f107 030c 	add.w	r3, r7, #12
 80161c8:	2200      	movs	r2, #0
 80161ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7fd fa74 	bl	80136ba <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80161d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3760      	adds	r7, #96	; 0x60
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
	...

080161e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80161e0:	b480      	push	{r7}
 80161e2:	b087      	sub	sp, #28
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	60f8      	str	r0, [r7, #12]
 80161e8:	60b9      	str	r1, [r7, #8]
 80161ea:	4613      	mov	r3, r2
 80161ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80161ee:	2301      	movs	r3, #1
 80161f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80161f2:	2300      	movs	r3, #0
 80161f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80161f6:	4b1f      	ldr	r3, [pc, #124]	; (8016274 <FATFS_LinkDriverEx+0x94>)
 80161f8:	7a5b      	ldrb	r3, [r3, #9]
 80161fa:	b2db      	uxtb	r3, r3
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d131      	bne.n	8016264 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016200:	4b1c      	ldr	r3, [pc, #112]	; (8016274 <FATFS_LinkDriverEx+0x94>)
 8016202:	7a5b      	ldrb	r3, [r3, #9]
 8016204:	b2db      	uxtb	r3, r3
 8016206:	461a      	mov	r2, r3
 8016208:	4b1a      	ldr	r3, [pc, #104]	; (8016274 <FATFS_LinkDriverEx+0x94>)
 801620a:	2100      	movs	r1, #0
 801620c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801620e:	4b19      	ldr	r3, [pc, #100]	; (8016274 <FATFS_LinkDriverEx+0x94>)
 8016210:	7a5b      	ldrb	r3, [r3, #9]
 8016212:	b2db      	uxtb	r3, r3
 8016214:	4a17      	ldr	r2, [pc, #92]	; (8016274 <FATFS_LinkDriverEx+0x94>)
 8016216:	009b      	lsls	r3, r3, #2
 8016218:	4413      	add	r3, r2
 801621a:	68fa      	ldr	r2, [r7, #12]
 801621c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801621e:	4b15      	ldr	r3, [pc, #84]	; (8016274 <FATFS_LinkDriverEx+0x94>)
 8016220:	7a5b      	ldrb	r3, [r3, #9]
 8016222:	b2db      	uxtb	r3, r3
 8016224:	461a      	mov	r2, r3
 8016226:	4b13      	ldr	r3, [pc, #76]	; (8016274 <FATFS_LinkDriverEx+0x94>)
 8016228:	4413      	add	r3, r2
 801622a:	79fa      	ldrb	r2, [r7, #7]
 801622c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801622e:	4b11      	ldr	r3, [pc, #68]	; (8016274 <FATFS_LinkDriverEx+0x94>)
 8016230:	7a5b      	ldrb	r3, [r3, #9]
 8016232:	b2db      	uxtb	r3, r3
 8016234:	1c5a      	adds	r2, r3, #1
 8016236:	b2d1      	uxtb	r1, r2
 8016238:	4a0e      	ldr	r2, [pc, #56]	; (8016274 <FATFS_LinkDriverEx+0x94>)
 801623a:	7251      	strb	r1, [r2, #9]
 801623c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801623e:	7dbb      	ldrb	r3, [r7, #22]
 8016240:	3330      	adds	r3, #48	; 0x30
 8016242:	b2da      	uxtb	r2, r3
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	3301      	adds	r3, #1
 801624c:	223a      	movs	r2, #58	; 0x3a
 801624e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016250:	68bb      	ldr	r3, [r7, #8]
 8016252:	3302      	adds	r3, #2
 8016254:	222f      	movs	r2, #47	; 0x2f
 8016256:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016258:	68bb      	ldr	r3, [r7, #8]
 801625a:	3303      	adds	r3, #3
 801625c:	2200      	movs	r2, #0
 801625e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016260:	2300      	movs	r3, #0
 8016262:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016264:	7dfb      	ldrb	r3, [r7, #23]
}
 8016266:	4618      	mov	r0, r3
 8016268:	371c      	adds	r7, #28
 801626a:	46bd      	mov	sp, r7
 801626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016270:	4770      	bx	lr
 8016272:	bf00      	nop
 8016274:	20000cd8 	.word	0x20000cd8

08016278 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016282:	2200      	movs	r2, #0
 8016284:	6839      	ldr	r1, [r7, #0]
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f7ff ffaa 	bl	80161e0 <FATFS_LinkDriverEx>
 801628c:	4603      	mov	r3, r0
}
 801628e:	4618      	mov	r0, r3
 8016290:	3708      	adds	r7, #8
 8016292:	46bd      	mov	sp, r7
 8016294:	bd80      	pop	{r7, pc}
	...

08016298 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8016298:	b480      	push	{r7}
 801629a:	b085      	sub	sp, #20
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	460b      	mov	r3, r1
 80162a2:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80162a4:	2300      	movs	r3, #0
 80162a6:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80162a8:	2301      	movs	r3, #1
 80162aa:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80162ac:	4b15      	ldr	r3, [pc, #84]	; (8016304 <FATFS_UnLinkDriverEx+0x6c>)
 80162ae:	7a5b      	ldrb	r3, [r3, #9]
 80162b0:	b2db      	uxtb	r3, r3
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d01e      	beq.n	80162f4 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	781b      	ldrb	r3, [r3, #0]
 80162ba:	3b30      	subs	r3, #48	; 0x30
 80162bc:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80162be:	7bbb      	ldrb	r3, [r7, #14]
 80162c0:	4a10      	ldr	r2, [pc, #64]	; (8016304 <FATFS_UnLinkDriverEx+0x6c>)
 80162c2:	009b      	lsls	r3, r3, #2
 80162c4:	4413      	add	r3, r2
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d013      	beq.n	80162f4 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80162cc:	7bbb      	ldrb	r3, [r7, #14]
 80162ce:	4a0d      	ldr	r2, [pc, #52]	; (8016304 <FATFS_UnLinkDriverEx+0x6c>)
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	4413      	add	r3, r2
 80162d4:	2200      	movs	r2, #0
 80162d6:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80162d8:	7bbb      	ldrb	r3, [r7, #14]
 80162da:	4a0a      	ldr	r2, [pc, #40]	; (8016304 <FATFS_UnLinkDriverEx+0x6c>)
 80162dc:	4413      	add	r3, r2
 80162de:	2200      	movs	r2, #0
 80162e0:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 80162e2:	4b08      	ldr	r3, [pc, #32]	; (8016304 <FATFS_UnLinkDriverEx+0x6c>)
 80162e4:	7a5b      	ldrb	r3, [r3, #9]
 80162e6:	b2db      	uxtb	r3, r3
 80162e8:	3b01      	subs	r3, #1
 80162ea:	b2da      	uxtb	r2, r3
 80162ec:	4b05      	ldr	r3, [pc, #20]	; (8016304 <FATFS_UnLinkDriverEx+0x6c>)
 80162ee:	725a      	strb	r2, [r3, #9]
      ret = 0;
 80162f0:	2300      	movs	r3, #0
 80162f2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80162f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	3714      	adds	r7, #20
 80162fa:	46bd      	mov	sp, r7
 80162fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016300:	4770      	bx	lr
 8016302:	bf00      	nop
 8016304:	20000cd8 	.word	0x20000cd8

08016308 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b082      	sub	sp, #8
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8016310:	2100      	movs	r1, #0
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f7ff ffc0 	bl	8016298 <FATFS_UnLinkDriverEx>
 8016318:	4603      	mov	r3, r0
}
 801631a:	4618      	mov	r0, r3
 801631c:	3708      	adds	r7, #8
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}
	...

08016324 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016324:	b480      	push	{r7}
 8016326:	b085      	sub	sp, #20
 8016328:	af00      	add	r7, sp, #0
 801632a:	4603      	mov	r3, r0
 801632c:	6039      	str	r1, [r7, #0]
 801632e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016330:	88fb      	ldrh	r3, [r7, #6]
 8016332:	2b7f      	cmp	r3, #127	; 0x7f
 8016334:	d802      	bhi.n	801633c <ff_convert+0x18>
		c = chr;
 8016336:	88fb      	ldrh	r3, [r7, #6]
 8016338:	81fb      	strh	r3, [r7, #14]
 801633a:	e025      	b.n	8016388 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d00b      	beq.n	801635a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016342:	88fb      	ldrh	r3, [r7, #6]
 8016344:	2bff      	cmp	r3, #255	; 0xff
 8016346:	d805      	bhi.n	8016354 <ff_convert+0x30>
 8016348:	88fb      	ldrh	r3, [r7, #6]
 801634a:	3b80      	subs	r3, #128	; 0x80
 801634c:	4a12      	ldr	r2, [pc, #72]	; (8016398 <ff_convert+0x74>)
 801634e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016352:	e000      	b.n	8016356 <ff_convert+0x32>
 8016354:	2300      	movs	r3, #0
 8016356:	81fb      	strh	r3, [r7, #14]
 8016358:	e016      	b.n	8016388 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801635a:	2300      	movs	r3, #0
 801635c:	81fb      	strh	r3, [r7, #14]
 801635e:	e009      	b.n	8016374 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016360:	89fb      	ldrh	r3, [r7, #14]
 8016362:	4a0d      	ldr	r2, [pc, #52]	; (8016398 <ff_convert+0x74>)
 8016364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016368:	88fa      	ldrh	r2, [r7, #6]
 801636a:	429a      	cmp	r2, r3
 801636c:	d006      	beq.n	801637c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801636e:	89fb      	ldrh	r3, [r7, #14]
 8016370:	3301      	adds	r3, #1
 8016372:	81fb      	strh	r3, [r7, #14]
 8016374:	89fb      	ldrh	r3, [r7, #14]
 8016376:	2b7f      	cmp	r3, #127	; 0x7f
 8016378:	d9f2      	bls.n	8016360 <ff_convert+0x3c>
 801637a:	e000      	b.n	801637e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801637c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801637e:	89fb      	ldrh	r3, [r7, #14]
 8016380:	3380      	adds	r3, #128	; 0x80
 8016382:	b29b      	uxth	r3, r3
 8016384:	b2db      	uxtb	r3, r3
 8016386:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016388:	89fb      	ldrh	r3, [r7, #14]
}
 801638a:	4618      	mov	r0, r3
 801638c:	3714      	adds	r7, #20
 801638e:	46bd      	mov	sp, r7
 8016390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016394:	4770      	bx	lr
 8016396:	bf00      	nop
 8016398:	08021b44 	.word	0x08021b44

0801639c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801639c:	b480      	push	{r7}
 801639e:	b087      	sub	sp, #28
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	4603      	mov	r3, r0
 80163a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80163a6:	88fb      	ldrh	r3, [r7, #6]
 80163a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80163ac:	d201      	bcs.n	80163b2 <ff_wtoupper+0x16>
 80163ae:	4b3e      	ldr	r3, [pc, #248]	; (80164a8 <ff_wtoupper+0x10c>)
 80163b0:	e000      	b.n	80163b4 <ff_wtoupper+0x18>
 80163b2:	4b3e      	ldr	r3, [pc, #248]	; (80164ac <ff_wtoupper+0x110>)
 80163b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80163b6:	697b      	ldr	r3, [r7, #20]
 80163b8:	1c9a      	adds	r2, r3, #2
 80163ba:	617a      	str	r2, [r7, #20]
 80163bc:	881b      	ldrh	r3, [r3, #0]
 80163be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80163c0:	8a7b      	ldrh	r3, [r7, #18]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d068      	beq.n	8016498 <ff_wtoupper+0xfc>
 80163c6:	88fa      	ldrh	r2, [r7, #6]
 80163c8:	8a7b      	ldrh	r3, [r7, #18]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d364      	bcc.n	8016498 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80163ce:	697b      	ldr	r3, [r7, #20]
 80163d0:	1c9a      	adds	r2, r3, #2
 80163d2:	617a      	str	r2, [r7, #20]
 80163d4:	881b      	ldrh	r3, [r3, #0]
 80163d6:	823b      	strh	r3, [r7, #16]
 80163d8:	8a3b      	ldrh	r3, [r7, #16]
 80163da:	0a1b      	lsrs	r3, r3, #8
 80163dc:	81fb      	strh	r3, [r7, #14]
 80163de:	8a3b      	ldrh	r3, [r7, #16]
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80163e4:	88fa      	ldrh	r2, [r7, #6]
 80163e6:	8a79      	ldrh	r1, [r7, #18]
 80163e8:	8a3b      	ldrh	r3, [r7, #16]
 80163ea:	440b      	add	r3, r1
 80163ec:	429a      	cmp	r2, r3
 80163ee:	da49      	bge.n	8016484 <ff_wtoupper+0xe8>
			switch (cmd) {
 80163f0:	89fb      	ldrh	r3, [r7, #14]
 80163f2:	2b08      	cmp	r3, #8
 80163f4:	d84f      	bhi.n	8016496 <ff_wtoupper+0xfa>
 80163f6:	a201      	add	r2, pc, #4	; (adr r2, 80163fc <ff_wtoupper+0x60>)
 80163f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163fc:	08016421 	.word	0x08016421
 8016400:	08016433 	.word	0x08016433
 8016404:	08016449 	.word	0x08016449
 8016408:	08016451 	.word	0x08016451
 801640c:	08016459 	.word	0x08016459
 8016410:	08016461 	.word	0x08016461
 8016414:	08016469 	.word	0x08016469
 8016418:	08016471 	.word	0x08016471
 801641c:	08016479 	.word	0x08016479
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8016420:	88fa      	ldrh	r2, [r7, #6]
 8016422:	8a7b      	ldrh	r3, [r7, #18]
 8016424:	1ad3      	subs	r3, r2, r3
 8016426:	005b      	lsls	r3, r3, #1
 8016428:	697a      	ldr	r2, [r7, #20]
 801642a:	4413      	add	r3, r2
 801642c:	881b      	ldrh	r3, [r3, #0]
 801642e:	80fb      	strh	r3, [r7, #6]
 8016430:	e027      	b.n	8016482 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8016432:	88fa      	ldrh	r2, [r7, #6]
 8016434:	8a7b      	ldrh	r3, [r7, #18]
 8016436:	1ad3      	subs	r3, r2, r3
 8016438:	b29b      	uxth	r3, r3
 801643a:	f003 0301 	and.w	r3, r3, #1
 801643e:	b29b      	uxth	r3, r3
 8016440:	88fa      	ldrh	r2, [r7, #6]
 8016442:	1ad3      	subs	r3, r2, r3
 8016444:	80fb      	strh	r3, [r7, #6]
 8016446:	e01c      	b.n	8016482 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016448:	88fb      	ldrh	r3, [r7, #6]
 801644a:	3b10      	subs	r3, #16
 801644c:	80fb      	strh	r3, [r7, #6]
 801644e:	e018      	b.n	8016482 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016450:	88fb      	ldrh	r3, [r7, #6]
 8016452:	3b20      	subs	r3, #32
 8016454:	80fb      	strh	r3, [r7, #6]
 8016456:	e014      	b.n	8016482 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8016458:	88fb      	ldrh	r3, [r7, #6]
 801645a:	3b30      	subs	r3, #48	; 0x30
 801645c:	80fb      	strh	r3, [r7, #6]
 801645e:	e010      	b.n	8016482 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016460:	88fb      	ldrh	r3, [r7, #6]
 8016462:	3b1a      	subs	r3, #26
 8016464:	80fb      	strh	r3, [r7, #6]
 8016466:	e00c      	b.n	8016482 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8016468:	88fb      	ldrh	r3, [r7, #6]
 801646a:	3308      	adds	r3, #8
 801646c:	80fb      	strh	r3, [r7, #6]
 801646e:	e008      	b.n	8016482 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016470:	88fb      	ldrh	r3, [r7, #6]
 8016472:	3b50      	subs	r3, #80	; 0x50
 8016474:	80fb      	strh	r3, [r7, #6]
 8016476:	e004      	b.n	8016482 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8016478:	88fb      	ldrh	r3, [r7, #6]
 801647a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801647e:	80fb      	strh	r3, [r7, #6]
 8016480:	bf00      	nop
			}
			break;
 8016482:	e008      	b.n	8016496 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8016484:	89fb      	ldrh	r3, [r7, #14]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d195      	bne.n	80163b6 <ff_wtoupper+0x1a>
 801648a:	8a3b      	ldrh	r3, [r7, #16]
 801648c:	005b      	lsls	r3, r3, #1
 801648e:	697a      	ldr	r2, [r7, #20]
 8016490:	4413      	add	r3, r2
 8016492:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8016494:	e78f      	b.n	80163b6 <ff_wtoupper+0x1a>
			break;
 8016496:	bf00      	nop
	}

	return chr;
 8016498:	88fb      	ldrh	r3, [r7, #6]
}
 801649a:	4618      	mov	r0, r3
 801649c:	371c      	adds	r7, #28
 801649e:	46bd      	mov	sp, r7
 80164a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a4:	4770      	bx	lr
 80164a6:	bf00      	nop
 80164a8:	08021c44 	.word	0x08021c44
 80164ac:	08021e38 	.word	0x08021e38

080164b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80164b0:	b480      	push	{r7}
 80164b2:	b085      	sub	sp, #20
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	4603      	mov	r3, r0
 80164b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80164ba:	2300      	movs	r3, #0
 80164bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80164be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164c2:	2b84      	cmp	r3, #132	; 0x84
 80164c4:	d005      	beq.n	80164d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80164c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	4413      	add	r3, r2
 80164ce:	3303      	adds	r3, #3
 80164d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80164d2:	68fb      	ldr	r3, [r7, #12]
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	3714      	adds	r7, #20
 80164d8:	46bd      	mov	sp, r7
 80164da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164de:	4770      	bx	lr

080164e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80164e0:	b480      	push	{r7}
 80164e2:	b083      	sub	sp, #12
 80164e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80164e6:	f3ef 8305 	mrs	r3, IPSR
 80164ea:	607b      	str	r3, [r7, #4]
  return(result);
 80164ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	bf14      	ite	ne
 80164f2:	2301      	movne	r3, #1
 80164f4:	2300      	moveq	r3, #0
 80164f6:	b2db      	uxtb	r3, r3
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	370c      	adds	r7, #12
 80164fc:	46bd      	mov	sp, r7
 80164fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016502:	4770      	bx	lr

08016504 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8016508:	f001 fd6c 	bl	8017fe4 <vTaskStartScheduler>
  
  return osOK;
 801650c:	2300      	movs	r3, #0
}
 801650e:	4618      	mov	r0, r3
 8016510:	bd80      	pop	{r7, pc}

08016512 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8016512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016514:	b087      	sub	sp, #28
 8016516:	af02      	add	r7, sp, #8
 8016518:	6078      	str	r0, [r7, #4]
 801651a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	685c      	ldr	r4, [r3, #4]
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016528:	b29e      	uxth	r6, r3
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016530:	4618      	mov	r0, r3
 8016532:	f7ff ffbd 	bl	80164b0 <makeFreeRtosPriority>
 8016536:	4602      	mov	r2, r0
 8016538:	f107 030c 	add.w	r3, r7, #12
 801653c:	9301      	str	r3, [sp, #4]
 801653e:	9200      	str	r2, [sp, #0]
 8016540:	683b      	ldr	r3, [r7, #0]
 8016542:	4632      	mov	r2, r6
 8016544:	4629      	mov	r1, r5
 8016546:	4620      	mov	r0, r4
 8016548:	f001 fa76 	bl	8017a38 <xTaskCreate>
 801654c:	4603      	mov	r3, r0
 801654e:	2b01      	cmp	r3, #1
 8016550:	d001      	beq.n	8016556 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8016552:	2300      	movs	r3, #0
 8016554:	e000      	b.n	8016558 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8016556:	68fb      	ldr	r3, [r7, #12]
}
 8016558:	4618      	mov	r0, r3
 801655a:	3714      	adds	r7, #20
 801655c:	46bd      	mov	sp, r7
 801655e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016560 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8016560:	b580      	push	{r7, lr}
 8016562:	b084      	sub	sp, #16
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
 8016568:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801656a:	683b      	ldr	r3, [r7, #0]
 801656c:	2b01      	cmp	r3, #1
 801656e:	d110      	bne.n	8016592 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8016570:	2203      	movs	r2, #3
 8016572:	2100      	movs	r1, #0
 8016574:	2001      	movs	r0, #1
 8016576:	f000 fbb7 	bl	8016ce8 <xQueueGenericCreate>
 801657a:	60f8      	str	r0, [r7, #12]
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d005      	beq.n	801658e <osSemaphoreCreate+0x2e>
 8016582:	2300      	movs	r3, #0
 8016584:	2200      	movs	r2, #0
 8016586:	2100      	movs	r1, #0
 8016588:	68f8      	ldr	r0, [r7, #12]
 801658a:	f000 fc3f 	bl	8016e0c <xQueueGenericSend>
    return sema;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	e006      	b.n	80165a0 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	683a      	ldr	r2, [r7, #0]
 8016596:	4611      	mov	r1, r2
 8016598:	4618      	mov	r0, r3
 801659a:	f000 fc04 	bl	8016da6 <xQueueCreateCountingSemaphore>
 801659e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80165a0:	4618      	mov	r0, r3
 80165a2:	3710      	adds	r7, #16
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}

080165a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b084      	sub	sp, #16
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
 80165b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80165b2:	2300      	movs	r3, #0
 80165b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d101      	bne.n	80165c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80165bc:	2380      	movs	r3, #128	; 0x80
 80165be:	e03a      	b.n	8016636 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80165c0:	2300      	movs	r3, #0
 80165c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165ca:	d103      	bne.n	80165d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80165cc:	f04f 33ff 	mov.w	r3, #4294967295
 80165d0:	60fb      	str	r3, [r7, #12]
 80165d2:	e009      	b.n	80165e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d006      	beq.n	80165e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d101      	bne.n	80165e8 <osSemaphoreWait+0x40>
      ticks = 1;
 80165e4:	2301      	movs	r3, #1
 80165e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80165e8:	f7ff ff7a 	bl	80164e0 <inHandlerMode>
 80165ec:	4603      	mov	r3, r0
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d017      	beq.n	8016622 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80165f2:	f107 0308 	add.w	r3, r7, #8
 80165f6:	461a      	mov	r2, r3
 80165f8:	2100      	movs	r1, #0
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f001 f816 	bl	801762c <xQueueReceiveFromISR>
 8016600:	4603      	mov	r3, r0
 8016602:	2b01      	cmp	r3, #1
 8016604:	d001      	beq.n	801660a <osSemaphoreWait+0x62>
      return osErrorOS;
 8016606:	23ff      	movs	r3, #255	; 0xff
 8016608:	e015      	b.n	8016636 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d011      	beq.n	8016634 <osSemaphoreWait+0x8c>
 8016610:	4b0b      	ldr	r3, [pc, #44]	; (8016640 <osSemaphoreWait+0x98>)
 8016612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016616:	601a      	str	r2, [r3, #0]
 8016618:	f3bf 8f4f 	dsb	sy
 801661c:	f3bf 8f6f 	isb	sy
 8016620:	e008      	b.n	8016634 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8016622:	68f9      	ldr	r1, [r7, #12]
 8016624:	6878      	ldr	r0, [r7, #4]
 8016626:	f000 fef5 	bl	8017414 <xQueueSemaphoreTake>
 801662a:	4603      	mov	r3, r0
 801662c:	2b01      	cmp	r3, #1
 801662e:	d001      	beq.n	8016634 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8016630:	23ff      	movs	r3, #255	; 0xff
 8016632:	e000      	b.n	8016636 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8016634:	2300      	movs	r3, #0
}
 8016636:	4618      	mov	r0, r3
 8016638:	3710      	adds	r7, #16
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	e000ed04 	.word	0xe000ed04

08016644 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b084      	sub	sp, #16
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801664c:	2300      	movs	r3, #0
 801664e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8016650:	2300      	movs	r3, #0
 8016652:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8016654:	f7ff ff44 	bl	80164e0 <inHandlerMode>
 8016658:	4603      	mov	r3, r0
 801665a:	2b00      	cmp	r3, #0
 801665c:	d016      	beq.n	801668c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801665e:	f107 0308 	add.w	r3, r7, #8
 8016662:	4619      	mov	r1, r3
 8016664:	6878      	ldr	r0, [r7, #4]
 8016666:	f000 fd67 	bl	8017138 <xQueueGiveFromISR>
 801666a:	4603      	mov	r3, r0
 801666c:	2b01      	cmp	r3, #1
 801666e:	d001      	beq.n	8016674 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8016670:	23ff      	movs	r3, #255	; 0xff
 8016672:	e017      	b.n	80166a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016674:	68bb      	ldr	r3, [r7, #8]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d013      	beq.n	80166a2 <osSemaphoreRelease+0x5e>
 801667a:	4b0c      	ldr	r3, [pc, #48]	; (80166ac <osSemaphoreRelease+0x68>)
 801667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016680:	601a      	str	r2, [r3, #0]
 8016682:	f3bf 8f4f 	dsb	sy
 8016686:	f3bf 8f6f 	isb	sy
 801668a:	e00a      	b.n	80166a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801668c:	2300      	movs	r3, #0
 801668e:	2200      	movs	r2, #0
 8016690:	2100      	movs	r1, #0
 8016692:	6878      	ldr	r0, [r7, #4]
 8016694:	f000 fbba 	bl	8016e0c <xQueueGenericSend>
 8016698:	4603      	mov	r3, r0
 801669a:	2b01      	cmp	r3, #1
 801669c:	d001      	beq.n	80166a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801669e:	23ff      	movs	r3, #255	; 0xff
 80166a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80166a2:	68fb      	ldr	r3, [r7, #12]
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	3710      	adds	r7, #16
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	e000ed04 	.word	0xe000ed04

080166b0 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b086      	sub	sp, #24
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	685b      	ldr	r3, [r3, #4]
 80166bc:	3303      	adds	r3, #3
 80166be:	f023 0303 	bic.w	r3, r3, #3
 80166c2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80166c4:	2014      	movs	r0, #20
 80166c6:	f003 f85f 	bl	8019788 <pvPortMalloc>
 80166ca:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80166cc:	697b      	ldr	r3, [r7, #20]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d046      	beq.n	8016760 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681a      	ldr	r2, [r3, #0]
 80166d6:	697b      	ldr	r3, [r7, #20]
 80166d8:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80166da:	68fa      	ldr	r2, [r7, #12]
 80166dc:	697b      	ldr	r3, [r7, #20]
 80166de:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80166e0:	697b      	ldr	r3, [r7, #20]
 80166e2:	2200      	movs	r2, #0
 80166e4:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	4618      	mov	r0, r3
 80166ec:	f003 f84c 	bl	8019788 <pvPortMalloc>
 80166f0:	4602      	mov	r2, r0
 80166f2:	697b      	ldr	r3, [r7, #20]
 80166f4:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	685b      	ldr	r3, [r3, #4]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d02b      	beq.n	8016756 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	68fa      	ldr	r2, [r7, #12]
 8016704:	fb02 f303 	mul.w	r3, r2, r3
 8016708:	4618      	mov	r0, r3
 801670a:	f003 f83d 	bl	8019788 <pvPortMalloc>
 801670e:	4602      	mov	r2, r0
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8016714:	697b      	ldr	r3, [r7, #20]
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d011      	beq.n	8016740 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 801671c:	2300      	movs	r3, #0
 801671e:	613b      	str	r3, [r7, #16]
 8016720:	e008      	b.n	8016734 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8016722:	697b      	ldr	r3, [r7, #20]
 8016724:	685a      	ldr	r2, [r3, #4]
 8016726:	693b      	ldr	r3, [r7, #16]
 8016728:	4413      	add	r3, r2
 801672a:	2200      	movs	r2, #0
 801672c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801672e:	693b      	ldr	r3, [r7, #16]
 8016730:	3301      	adds	r3, #1
 8016732:	613b      	str	r3, [r7, #16]
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	693a      	ldr	r2, [r7, #16]
 801673a:	429a      	cmp	r2, r3
 801673c:	d3f1      	bcc.n	8016722 <osPoolCreate+0x72>
 801673e:	e00f      	b.n	8016760 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8016740:	697b      	ldr	r3, [r7, #20]
 8016742:	685b      	ldr	r3, [r3, #4]
 8016744:	4618      	mov	r0, r3
 8016746:	f003 f8e3 	bl	8019910 <vPortFree>
        vPortFree(thePool);
 801674a:	6978      	ldr	r0, [r7, #20]
 801674c:	f003 f8e0 	bl	8019910 <vPortFree>
        thePool = NULL;
 8016750:	2300      	movs	r3, #0
 8016752:	617b      	str	r3, [r7, #20]
 8016754:	e004      	b.n	8016760 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8016756:	6978      	ldr	r0, [r7, #20]
 8016758:	f003 f8da 	bl	8019910 <vPortFree>
      thePool = NULL;
 801675c:	2300      	movs	r3, #0
 801675e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8016760:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8016762:	4618      	mov	r0, r3
 8016764:	3718      	adds	r7, #24
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}

0801676a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 801676a:	b580      	push	{r7, lr}
 801676c:	b08a      	sub	sp, #40	; 0x28
 801676e:	af00      	add	r7, sp, #0
 8016770:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8016772:	2300      	movs	r3, #0
 8016774:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8016776:	2300      	movs	r3, #0
 8016778:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 801677a:	f7ff feb1 	bl	80164e0 <inHandlerMode>
 801677e:	4603      	mov	r3, r0
 8016780:	2b00      	cmp	r3, #0
 8016782:	d00e      	beq.n	80167a2 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016784:	f3ef 8211 	mrs	r2, BASEPRI
 8016788:	f04f 0320 	mov.w	r3, #32
 801678c:	f383 8811 	msr	BASEPRI, r3
 8016790:	f3bf 8f6f 	isb	sy
 8016794:	f3bf 8f4f 	dsb	sy
 8016798:	617a      	str	r2, [r7, #20]
 801679a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801679c:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 801679e:	627b      	str	r3, [r7, #36]	; 0x24
 80167a0:	e001      	b.n	80167a6 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80167a2:	f002 fecf 	bl	8019544 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80167a6:	2300      	movs	r3, #0
 80167a8:	61fb      	str	r3, [r7, #28]
 80167aa:	e029      	b.n	8016800 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	691a      	ldr	r2, [r3, #16]
 80167b0:	69fb      	ldr	r3, [r7, #28]
 80167b2:	4413      	add	r3, r2
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	6892      	ldr	r2, [r2, #8]
 80167b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80167bc:	fb02 f201 	mul.w	r2, r2, r1
 80167c0:	1a9b      	subs	r3, r3, r2
 80167c2:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	685a      	ldr	r2, [r3, #4]
 80167c8:	69bb      	ldr	r3, [r7, #24]
 80167ca:	4413      	add	r3, r2
 80167cc:	781b      	ldrb	r3, [r3, #0]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d113      	bne.n	80167fa <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	685a      	ldr	r2, [r3, #4]
 80167d6:	69bb      	ldr	r3, [r7, #24]
 80167d8:	4413      	add	r3, r2
 80167da:	2201      	movs	r2, #1
 80167dc:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	4619      	mov	r1, r3
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	68db      	ldr	r3, [r3, #12]
 80167e8:	69ba      	ldr	r2, [r7, #24]
 80167ea:	fb02 f303 	mul.w	r3, r2, r3
 80167ee:	440b      	add	r3, r1
 80167f0:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	69ba      	ldr	r2, [r7, #24]
 80167f6:	611a      	str	r2, [r3, #16]
      break;
 80167f8:	e007      	b.n	801680a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80167fa:	69fb      	ldr	r3, [r7, #28]
 80167fc:	3301      	adds	r3, #1
 80167fe:	61fb      	str	r3, [r7, #28]
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	689b      	ldr	r3, [r3, #8]
 8016804:	69fa      	ldr	r2, [r7, #28]
 8016806:	429a      	cmp	r2, r3
 8016808:	d3d0      	bcc.n	80167ac <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 801680a:	f7ff fe69 	bl	80164e0 <inHandlerMode>
 801680e:	4603      	mov	r3, r0
 8016810:	2b00      	cmp	r3, #0
 8016812:	d005      	beq.n	8016820 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8016814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016816:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801681e:	e001      	b.n	8016824 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8016820:	f002 fec0 	bl	80195a4 <vPortExitCritical>
  }
  
  return p;
 8016824:	6a3b      	ldr	r3, [r7, #32]
}
 8016826:	4618      	mov	r0, r3
 8016828:	3728      	adds	r7, #40	; 0x28
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}

0801682e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801682e:	b480      	push	{r7}
 8016830:	b085      	sub	sp, #20
 8016832:	af00      	add	r7, sp, #0
 8016834:	6078      	str	r0, [r7, #4]
 8016836:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d101      	bne.n	8016842 <osPoolFree+0x14>
    return osErrorParameter;
 801683e:	2380      	movs	r3, #128	; 0x80
 8016840:	e030      	b.n	80168a4 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d101      	bne.n	801684c <osPoolFree+0x1e>
    return osErrorParameter;
 8016848:	2380      	movs	r3, #128	; 0x80
 801684a:	e02b      	b.n	80168a4 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	683a      	ldr	r2, [r7, #0]
 8016852:	429a      	cmp	r2, r3
 8016854:	d201      	bcs.n	801685a <osPoolFree+0x2c>
    return osErrorParameter;
 8016856:	2380      	movs	r3, #128	; 0x80
 8016858:	e024      	b.n	80168a4 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	687a      	ldr	r2, [r7, #4]
 801685e:	6812      	ldr	r2, [r2, #0]
 8016860:	1a9b      	subs	r3, r3, r2
 8016862:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	68da      	ldr	r2, [r3, #12]
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	fbb3 f1f2 	udiv	r1, r3, r2
 801686e:	fb02 f201 	mul.w	r2, r2, r1
 8016872:	1a9b      	subs	r3, r3, r2
 8016874:	2b00      	cmp	r3, #0
 8016876:	d001      	beq.n	801687c <osPoolFree+0x4e>
    return osErrorParameter;
 8016878:	2380      	movs	r3, #128	; 0x80
 801687a:	e013      	b.n	80168a4 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	68db      	ldr	r3, [r3, #12]
 8016880:	68fa      	ldr	r2, [r7, #12]
 8016882:	fbb2 f3f3 	udiv	r3, r2, r3
 8016886:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	689b      	ldr	r3, [r3, #8]
 801688c:	68fa      	ldr	r2, [r7, #12]
 801688e:	429a      	cmp	r2, r3
 8016890:	d301      	bcc.n	8016896 <osPoolFree+0x68>
    return osErrorParameter;
 8016892:	2380      	movs	r3, #128	; 0x80
 8016894:	e006      	b.n	80168a4 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	685a      	ldr	r2, [r3, #4]
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	4413      	add	r3, r2
 801689e:	2200      	movs	r2, #0
 80168a0:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80168a2:	2300      	movs	r3, #0
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	3714      	adds	r7, #20
 80168a8:	46bd      	mov	sp, r7
 80168aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ae:	4770      	bx	lr

080168b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
 80168b8:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	6818      	ldr	r0, [r3, #0]
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	685b      	ldr	r3, [r3, #4]
 80168c2:	2200      	movs	r2, #0
 80168c4:	4619      	mov	r1, r3
 80168c6:	f000 fa0f 	bl	8016ce8 <xQueueGenericCreate>
 80168ca:	4603      	mov	r3, r0
#endif
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3708      	adds	r7, #8
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b086      	sub	sp, #24
 80168d8:	af00      	add	r7, sp, #0
 80168da:	60f8      	str	r0, [r7, #12]
 80168dc:	60b9      	str	r1, [r7, #8]
 80168de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80168e0:	2300      	movs	r3, #0
 80168e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80168e8:	697b      	ldr	r3, [r7, #20]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d101      	bne.n	80168f2 <osMessagePut+0x1e>
    ticks = 1;
 80168ee:	2301      	movs	r3, #1
 80168f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80168f2:	f7ff fdf5 	bl	80164e0 <inHandlerMode>
 80168f6:	4603      	mov	r3, r0
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d018      	beq.n	801692e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80168fc:	f107 0210 	add.w	r2, r7, #16
 8016900:	f107 0108 	add.w	r1, r7, #8
 8016904:	2300      	movs	r3, #0
 8016906:	68f8      	ldr	r0, [r7, #12]
 8016908:	f000 fb7e 	bl	8017008 <xQueueGenericSendFromISR>
 801690c:	4603      	mov	r3, r0
 801690e:	2b01      	cmp	r3, #1
 8016910:	d001      	beq.n	8016916 <osMessagePut+0x42>
      return osErrorOS;
 8016912:	23ff      	movs	r3, #255	; 0xff
 8016914:	e018      	b.n	8016948 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d014      	beq.n	8016946 <osMessagePut+0x72>
 801691c:	4b0c      	ldr	r3, [pc, #48]	; (8016950 <osMessagePut+0x7c>)
 801691e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016922:	601a      	str	r2, [r3, #0]
 8016924:	f3bf 8f4f 	dsb	sy
 8016928:	f3bf 8f6f 	isb	sy
 801692c:	e00b      	b.n	8016946 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801692e:	f107 0108 	add.w	r1, r7, #8
 8016932:	2300      	movs	r3, #0
 8016934:	697a      	ldr	r2, [r7, #20]
 8016936:	68f8      	ldr	r0, [r7, #12]
 8016938:	f000 fa68 	bl	8016e0c <xQueueGenericSend>
 801693c:	4603      	mov	r3, r0
 801693e:	2b01      	cmp	r3, #1
 8016940:	d001      	beq.n	8016946 <osMessagePut+0x72>
      return osErrorOS;
 8016942:	23ff      	movs	r3, #255	; 0xff
 8016944:	e000      	b.n	8016948 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8016946:	2300      	movs	r3, #0
}
 8016948:	4618      	mov	r0, r3
 801694a:	3718      	adds	r7, #24
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}
 8016950:	e000ed04 	.word	0xe000ed04

08016954 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8016954:	b590      	push	{r4, r7, lr}
 8016956:	b08b      	sub	sp, #44	; 0x2c
 8016958:	af00      	add	r7, sp, #0
 801695a:	60f8      	str	r0, [r7, #12]
 801695c:	60b9      	str	r1, [r7, #8]
 801695e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8016964:	2300      	movs	r3, #0
 8016966:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8016968:	68bb      	ldr	r3, [r7, #8]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d10a      	bne.n	8016984 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801696e:	2380      	movs	r3, #128	; 0x80
 8016970:	617b      	str	r3, [r7, #20]
    return event;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	461c      	mov	r4, r3
 8016976:	f107 0314 	add.w	r3, r7, #20
 801697a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801697e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016982:	e054      	b.n	8016a2e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8016984:	2300      	movs	r3, #0
 8016986:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8016988:	2300      	movs	r3, #0
 801698a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016992:	d103      	bne.n	801699c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8016994:	f04f 33ff 	mov.w	r3, #4294967295
 8016998:	627b      	str	r3, [r7, #36]	; 0x24
 801699a:	e009      	b.n	80169b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d006      	beq.n	80169b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80169a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d101      	bne.n	80169b0 <osMessageGet+0x5c>
      ticks = 1;
 80169ac:	2301      	movs	r3, #1
 80169ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80169b0:	f7ff fd96 	bl	80164e0 <inHandlerMode>
 80169b4:	4603      	mov	r3, r0
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d01c      	beq.n	80169f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80169ba:	f107 0220 	add.w	r2, r7, #32
 80169be:	f107 0314 	add.w	r3, r7, #20
 80169c2:	3304      	adds	r3, #4
 80169c4:	4619      	mov	r1, r3
 80169c6:	68b8      	ldr	r0, [r7, #8]
 80169c8:	f000 fe30 	bl	801762c <xQueueReceiveFromISR>
 80169cc:	4603      	mov	r3, r0
 80169ce:	2b01      	cmp	r3, #1
 80169d0:	d102      	bne.n	80169d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80169d2:	2310      	movs	r3, #16
 80169d4:	617b      	str	r3, [r7, #20]
 80169d6:	e001      	b.n	80169dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80169d8:	2300      	movs	r3, #0
 80169da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80169dc:	6a3b      	ldr	r3, [r7, #32]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d01d      	beq.n	8016a1e <osMessageGet+0xca>
 80169e2:	4b15      	ldr	r3, [pc, #84]	; (8016a38 <osMessageGet+0xe4>)
 80169e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169e8:	601a      	str	r2, [r3, #0]
 80169ea:	f3bf 8f4f 	dsb	sy
 80169ee:	f3bf 8f6f 	isb	sy
 80169f2:	e014      	b.n	8016a1e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80169f4:	f107 0314 	add.w	r3, r7, #20
 80169f8:	3304      	adds	r3, #4
 80169fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169fc:	4619      	mov	r1, r3
 80169fe:	68b8      	ldr	r0, [r7, #8]
 8016a00:	f000 fc28 	bl	8017254 <xQueueReceive>
 8016a04:	4603      	mov	r3, r0
 8016a06:	2b01      	cmp	r3, #1
 8016a08:	d102      	bne.n	8016a10 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8016a0a:	2310      	movs	r3, #16
 8016a0c:	617b      	str	r3, [r7, #20]
 8016a0e:	e006      	b.n	8016a1e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8016a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d101      	bne.n	8016a1a <osMessageGet+0xc6>
 8016a16:	2300      	movs	r3, #0
 8016a18:	e000      	b.n	8016a1c <osMessageGet+0xc8>
 8016a1a:	2340      	movs	r3, #64	; 0x40
 8016a1c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	461c      	mov	r4, r3
 8016a22:	f107 0314 	add.w	r3, r7, #20
 8016a26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016a2e:	68f8      	ldr	r0, [r7, #12]
 8016a30:	372c      	adds	r7, #44	; 0x2c
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd90      	pop	{r4, r7, pc}
 8016a36:	bf00      	nop
 8016a38:	e000ed04 	.word	0xe000ed04

08016a3c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8016a40:	f001 ff08 	bl	8018854 <xTaskGetSchedulerState>
 8016a44:	4603      	mov	r3, r0
 8016a46:	2b01      	cmp	r3, #1
 8016a48:	d001      	beq.n	8016a4e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8016a4a:	f002 fe0d 	bl	8019668 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8016a4e:	bf00      	nop
 8016a50:	bd80      	pop	{r7, pc}

08016a52 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8016a52:	b580      	push	{r7, lr}
 8016a54:	b082      	sub	sp, #8
 8016a56:	af00      	add	r7, sp, #0
 8016a58:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8016a5a:	6878      	ldr	r0, [r7, #4]
 8016a5c:	f001 f92e 	bl	8017cbc <vTaskSuspend>
  
  return osOK;
 8016a60:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3708      	adds	r7, #8
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
	...

08016a6c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8016a74:	f7ff fd34 	bl	80164e0 <inHandlerMode>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d00e      	beq.n	8016a9c <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f001 fa3e 	bl	8017f00 <xTaskResumeFromISR>
 8016a84:	4603      	mov	r3, r0
 8016a86:	2b01      	cmp	r3, #1
 8016a88:	d10b      	bne.n	8016aa2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8016a8a:	4b08      	ldr	r3, [pc, #32]	; (8016aac <osThreadResume+0x40>)
 8016a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a90:	601a      	str	r2, [r3, #0]
 8016a92:	f3bf 8f4f 	dsb	sy
 8016a96:	f3bf 8f6f 	isb	sy
 8016a9a:	e002      	b.n	8016aa2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8016a9c:	6878      	ldr	r0, [r7, #4]
 8016a9e:	f001 f9d1 	bl	8017e44 <vTaskResume>
  }
  return osOK;
 8016aa2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	3708      	adds	r7, #8
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}
 8016aac:	e000ed04 	.word	0xe000ed04

08016ab0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016ab0:	b480      	push	{r7}
 8016ab2:	b083      	sub	sp, #12
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	f103 0208 	add.w	r2, r3, #8
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ac8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	f103 0208 	add.w	r2, r3, #8
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	f103 0208 	add.w	r2, r3, #8
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016ae4:	bf00      	nop
 8016ae6:	370c      	adds	r7, #12
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aee:	4770      	bx	lr

08016af0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016af0:	b480      	push	{r7}
 8016af2:	b083      	sub	sp, #12
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	2200      	movs	r2, #0
 8016afc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016afe:	bf00      	nop
 8016b00:	370c      	adds	r7, #12
 8016b02:	46bd      	mov	sp, r7
 8016b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b08:	4770      	bx	lr

08016b0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016b0a:	b480      	push	{r7}
 8016b0c:	b085      	sub	sp, #20
 8016b0e:	af00      	add	r7, sp, #0
 8016b10:	6078      	str	r0, [r7, #4]
 8016b12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	685b      	ldr	r3, [r3, #4]
 8016b18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	68fa      	ldr	r2, [r7, #12]
 8016b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	689a      	ldr	r2, [r3, #8]
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	689b      	ldr	r3, [r3, #8]
 8016b2c:	683a      	ldr	r2, [r7, #0]
 8016b2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	683a      	ldr	r2, [r7, #0]
 8016b34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	687a      	ldr	r2, [r7, #4]
 8016b3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	1c5a      	adds	r2, r3, #1
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	601a      	str	r2, [r3, #0]
}
 8016b46:	bf00      	nop
 8016b48:	3714      	adds	r7, #20
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b50:	4770      	bx	lr

08016b52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016b52:	b480      	push	{r7}
 8016b54:	b085      	sub	sp, #20
 8016b56:	af00      	add	r7, sp, #0
 8016b58:	6078      	str	r0, [r7, #4]
 8016b5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016b5c:	683b      	ldr	r3, [r7, #0]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016b62:	68bb      	ldr	r3, [r7, #8]
 8016b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b68:	d103      	bne.n	8016b72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	691b      	ldr	r3, [r3, #16]
 8016b6e:	60fb      	str	r3, [r7, #12]
 8016b70:	e00c      	b.n	8016b8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	3308      	adds	r3, #8
 8016b76:	60fb      	str	r3, [r7, #12]
 8016b78:	e002      	b.n	8016b80 <vListInsert+0x2e>
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	685b      	ldr	r3, [r3, #4]
 8016b7e:	60fb      	str	r3, [r7, #12]
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	685b      	ldr	r3, [r3, #4]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	68ba      	ldr	r2, [r7, #8]
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	d2f6      	bcs.n	8016b7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	685a      	ldr	r2, [r3, #4]
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016b94:	683b      	ldr	r3, [r7, #0]
 8016b96:	685b      	ldr	r3, [r3, #4]
 8016b98:	683a      	ldr	r2, [r7, #0]
 8016b9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016b9c:	683b      	ldr	r3, [r7, #0]
 8016b9e:	68fa      	ldr	r2, [r7, #12]
 8016ba0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	683a      	ldr	r2, [r7, #0]
 8016ba6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	687a      	ldr	r2, [r7, #4]
 8016bac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	1c5a      	adds	r2, r3, #1
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	601a      	str	r2, [r3, #0]
}
 8016bb8:	bf00      	nop
 8016bba:	3714      	adds	r7, #20
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc2:	4770      	bx	lr

08016bc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016bc4:	b480      	push	{r7}
 8016bc6:	b085      	sub	sp, #20
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	691b      	ldr	r3, [r3, #16]
 8016bd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	685b      	ldr	r3, [r3, #4]
 8016bd6:	687a      	ldr	r2, [r7, #4]
 8016bd8:	6892      	ldr	r2, [r2, #8]
 8016bda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	689b      	ldr	r3, [r3, #8]
 8016be0:	687a      	ldr	r2, [r7, #4]
 8016be2:	6852      	ldr	r2, [r2, #4]
 8016be4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	685b      	ldr	r3, [r3, #4]
 8016bea:	687a      	ldr	r2, [r7, #4]
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d103      	bne.n	8016bf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	689a      	ldr	r2, [r3, #8]
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	1e5a      	subs	r2, r3, #1
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	681b      	ldr	r3, [r3, #0]
}
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	3714      	adds	r7, #20
 8016c10:	46bd      	mov	sp, r7
 8016c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c16:	4770      	bx	lr

08016c18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b084      	sub	sp, #16
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
 8016c20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d10a      	bne.n	8016c42 <xQueueGenericReset+0x2a>
	__asm volatile
 8016c2c:	f04f 0320 	mov.w	r3, #32
 8016c30:	f383 8811 	msr	BASEPRI, r3
 8016c34:	f3bf 8f6f 	isb	sy
 8016c38:	f3bf 8f4f 	dsb	sy
 8016c3c:	60bb      	str	r3, [r7, #8]
}
 8016c3e:	bf00      	nop
 8016c40:	e7fe      	b.n	8016c40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016c42:	f002 fc7f 	bl	8019544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	681a      	ldr	r2, [r3, #0]
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c4e:	68f9      	ldr	r1, [r7, #12]
 8016c50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016c52:	fb01 f303 	mul.w	r3, r1, r3
 8016c56:	441a      	add	r2, r3
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	2200      	movs	r2, #0
 8016c60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	681a      	ldr	r2, [r3, #0]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c72:	3b01      	subs	r3, #1
 8016c74:	68f9      	ldr	r1, [r7, #12]
 8016c76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016c78:	fb01 f303 	mul.w	r3, r1, r3
 8016c7c:	441a      	add	r2, r3
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	22ff      	movs	r2, #255	; 0xff
 8016c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	22ff      	movs	r2, #255	; 0xff
 8016c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d114      	bne.n	8016cc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	691b      	ldr	r3, [r3, #16]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d01a      	beq.n	8016cd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	3310      	adds	r3, #16
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	f001 fc37 	bl	8018518 <xTaskRemoveFromEventList>
 8016caa:	4603      	mov	r3, r0
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d012      	beq.n	8016cd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016cb0:	4b0c      	ldr	r3, [pc, #48]	; (8016ce4 <xQueueGenericReset+0xcc>)
 8016cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cb6:	601a      	str	r2, [r3, #0]
 8016cb8:	f3bf 8f4f 	dsb	sy
 8016cbc:	f3bf 8f6f 	isb	sy
 8016cc0:	e009      	b.n	8016cd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	3310      	adds	r3, #16
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f7ff fef2 	bl	8016ab0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	3324      	adds	r3, #36	; 0x24
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7ff feed 	bl	8016ab0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016cd6:	f002 fc65 	bl	80195a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016cda:	2301      	movs	r3, #1
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3710      	adds	r7, #16
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	e000ed04 	.word	0xe000ed04

08016ce8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b08a      	sub	sp, #40	; 0x28
 8016cec:	af02      	add	r7, sp, #8
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	60b9      	str	r1, [r7, #8]
 8016cf2:	4613      	mov	r3, r2
 8016cf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d10a      	bne.n	8016d12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8016cfc:	f04f 0320 	mov.w	r3, #32
 8016d00:	f383 8811 	msr	BASEPRI, r3
 8016d04:	f3bf 8f6f 	isb	sy
 8016d08:	f3bf 8f4f 	dsb	sy
 8016d0c:	613b      	str	r3, [r7, #16]
}
 8016d0e:	bf00      	nop
 8016d10:	e7fe      	b.n	8016d10 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016d12:	68bb      	ldr	r3, [r7, #8]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d102      	bne.n	8016d1e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016d18:	2300      	movs	r3, #0
 8016d1a:	61fb      	str	r3, [r7, #28]
 8016d1c:	e004      	b.n	8016d28 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	68ba      	ldr	r2, [r7, #8]
 8016d22:	fb02 f303 	mul.w	r3, r2, r3
 8016d26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016d28:	69fb      	ldr	r3, [r7, #28]
 8016d2a:	3350      	adds	r3, #80	; 0x50
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f002 fd2b 	bl	8019788 <pvPortMalloc>
 8016d32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016d34:	69bb      	ldr	r3, [r7, #24]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d00d      	beq.n	8016d56 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016d3e:	697b      	ldr	r3, [r7, #20]
 8016d40:	3350      	adds	r3, #80	; 0x50
 8016d42:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016d44:	79fa      	ldrb	r2, [r7, #7]
 8016d46:	69bb      	ldr	r3, [r7, #24]
 8016d48:	9300      	str	r3, [sp, #0]
 8016d4a:	4613      	mov	r3, r2
 8016d4c:	697a      	ldr	r2, [r7, #20]
 8016d4e:	68b9      	ldr	r1, [r7, #8]
 8016d50:	68f8      	ldr	r0, [r7, #12]
 8016d52:	f000 f805 	bl	8016d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016d56:	69bb      	ldr	r3, [r7, #24]
	}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	3720      	adds	r7, #32
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd80      	pop	{r7, pc}

08016d60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b084      	sub	sp, #16
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	60f8      	str	r0, [r7, #12]
 8016d68:	60b9      	str	r1, [r7, #8]
 8016d6a:	607a      	str	r2, [r7, #4]
 8016d6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016d6e:	68bb      	ldr	r3, [r7, #8]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d103      	bne.n	8016d7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016d74:	69bb      	ldr	r3, [r7, #24]
 8016d76:	69ba      	ldr	r2, [r7, #24]
 8016d78:	601a      	str	r2, [r3, #0]
 8016d7a:	e002      	b.n	8016d82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016d7c:	69bb      	ldr	r3, [r7, #24]
 8016d7e:	687a      	ldr	r2, [r7, #4]
 8016d80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016d82:	69bb      	ldr	r3, [r7, #24]
 8016d84:	68fa      	ldr	r2, [r7, #12]
 8016d86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016d88:	69bb      	ldr	r3, [r7, #24]
 8016d8a:	68ba      	ldr	r2, [r7, #8]
 8016d8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016d8e:	2101      	movs	r1, #1
 8016d90:	69b8      	ldr	r0, [r7, #24]
 8016d92:	f7ff ff41 	bl	8016c18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016d96:	69bb      	ldr	r3, [r7, #24]
 8016d98:	78fa      	ldrb	r2, [r7, #3]
 8016d9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016d9e:	bf00      	nop
 8016da0:	3710      	adds	r7, #16
 8016da2:	46bd      	mov	sp, r7
 8016da4:	bd80      	pop	{r7, pc}

08016da6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016da6:	b580      	push	{r7, lr}
 8016da8:	b086      	sub	sp, #24
 8016daa:	af00      	add	r7, sp, #0
 8016dac:	6078      	str	r0, [r7, #4]
 8016dae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d10a      	bne.n	8016dcc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8016db6:	f04f 0320 	mov.w	r3, #32
 8016dba:	f383 8811 	msr	BASEPRI, r3
 8016dbe:	f3bf 8f6f 	isb	sy
 8016dc2:	f3bf 8f4f 	dsb	sy
 8016dc6:	613b      	str	r3, [r7, #16]
}
 8016dc8:	bf00      	nop
 8016dca:	e7fe      	b.n	8016dca <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016dcc:	683a      	ldr	r2, [r7, #0]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d90a      	bls.n	8016dea <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8016dd4:	f04f 0320 	mov.w	r3, #32
 8016dd8:	f383 8811 	msr	BASEPRI, r3
 8016ddc:	f3bf 8f6f 	isb	sy
 8016de0:	f3bf 8f4f 	dsb	sy
 8016de4:	60fb      	str	r3, [r7, #12]
}
 8016de6:	bf00      	nop
 8016de8:	e7fe      	b.n	8016de8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016dea:	2202      	movs	r2, #2
 8016dec:	2100      	movs	r1, #0
 8016dee:	6878      	ldr	r0, [r7, #4]
 8016df0:	f7ff ff7a 	bl	8016ce8 <xQueueGenericCreate>
 8016df4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016df6:	697b      	ldr	r3, [r7, #20]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d002      	beq.n	8016e02 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016dfc:	697b      	ldr	r3, [r7, #20]
 8016dfe:	683a      	ldr	r2, [r7, #0]
 8016e00:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016e02:	697b      	ldr	r3, [r7, #20]
	}
 8016e04:	4618      	mov	r0, r3
 8016e06:	3718      	adds	r7, #24
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	bd80      	pop	{r7, pc}

08016e0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b08e      	sub	sp, #56	; 0x38
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	60f8      	str	r0, [r7, #12]
 8016e14:	60b9      	str	r1, [r7, #8]
 8016e16:	607a      	str	r2, [r7, #4]
 8016e18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d10a      	bne.n	8016e3e <xQueueGenericSend+0x32>
	__asm volatile
 8016e28:	f04f 0320 	mov.w	r3, #32
 8016e2c:	f383 8811 	msr	BASEPRI, r3
 8016e30:	f3bf 8f6f 	isb	sy
 8016e34:	f3bf 8f4f 	dsb	sy
 8016e38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016e3a:	bf00      	nop
 8016e3c:	e7fe      	b.n	8016e3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d103      	bne.n	8016e4c <xQueueGenericSend+0x40>
 8016e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d101      	bne.n	8016e50 <xQueueGenericSend+0x44>
 8016e4c:	2301      	movs	r3, #1
 8016e4e:	e000      	b.n	8016e52 <xQueueGenericSend+0x46>
 8016e50:	2300      	movs	r3, #0
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d10a      	bne.n	8016e6c <xQueueGenericSend+0x60>
	__asm volatile
 8016e56:	f04f 0320 	mov.w	r3, #32
 8016e5a:	f383 8811 	msr	BASEPRI, r3
 8016e5e:	f3bf 8f6f 	isb	sy
 8016e62:	f3bf 8f4f 	dsb	sy
 8016e66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016e68:	bf00      	nop
 8016e6a:	e7fe      	b.n	8016e6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	2b02      	cmp	r3, #2
 8016e70:	d103      	bne.n	8016e7a <xQueueGenericSend+0x6e>
 8016e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e76:	2b01      	cmp	r3, #1
 8016e78:	d101      	bne.n	8016e7e <xQueueGenericSend+0x72>
 8016e7a:	2301      	movs	r3, #1
 8016e7c:	e000      	b.n	8016e80 <xQueueGenericSend+0x74>
 8016e7e:	2300      	movs	r3, #0
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d10a      	bne.n	8016e9a <xQueueGenericSend+0x8e>
	__asm volatile
 8016e84:	f04f 0320 	mov.w	r3, #32
 8016e88:	f383 8811 	msr	BASEPRI, r3
 8016e8c:	f3bf 8f6f 	isb	sy
 8016e90:	f3bf 8f4f 	dsb	sy
 8016e94:	623b      	str	r3, [r7, #32]
}
 8016e96:	bf00      	nop
 8016e98:	e7fe      	b.n	8016e98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016e9a:	f001 fcdb 	bl	8018854 <xTaskGetSchedulerState>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d102      	bne.n	8016eaa <xQueueGenericSend+0x9e>
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d101      	bne.n	8016eae <xQueueGenericSend+0xa2>
 8016eaa:	2301      	movs	r3, #1
 8016eac:	e000      	b.n	8016eb0 <xQueueGenericSend+0xa4>
 8016eae:	2300      	movs	r3, #0
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d10a      	bne.n	8016eca <xQueueGenericSend+0xbe>
	__asm volatile
 8016eb4:	f04f 0320 	mov.w	r3, #32
 8016eb8:	f383 8811 	msr	BASEPRI, r3
 8016ebc:	f3bf 8f6f 	isb	sy
 8016ec0:	f3bf 8f4f 	dsb	sy
 8016ec4:	61fb      	str	r3, [r7, #28]
}
 8016ec6:	bf00      	nop
 8016ec8:	e7fe      	b.n	8016ec8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016eca:	f002 fb3b 	bl	8019544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ed6:	429a      	cmp	r2, r3
 8016ed8:	d302      	bcc.n	8016ee0 <xQueueGenericSend+0xd4>
 8016eda:	683b      	ldr	r3, [r7, #0]
 8016edc:	2b02      	cmp	r3, #2
 8016ede:	d129      	bne.n	8016f34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016ee0:	683a      	ldr	r2, [r7, #0]
 8016ee2:	68b9      	ldr	r1, [r7, #8]
 8016ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ee6:	f000 fc39 	bl	801775c <prvCopyDataToQueue>
 8016eea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d010      	beq.n	8016f16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef6:	3324      	adds	r3, #36	; 0x24
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f001 fb0d 	bl	8018518 <xTaskRemoveFromEventList>
 8016efe:	4603      	mov	r3, r0
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d013      	beq.n	8016f2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016f04:	4b3f      	ldr	r3, [pc, #252]	; (8017004 <xQueueGenericSend+0x1f8>)
 8016f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f0a:	601a      	str	r2, [r3, #0]
 8016f0c:	f3bf 8f4f 	dsb	sy
 8016f10:	f3bf 8f6f 	isb	sy
 8016f14:	e00a      	b.n	8016f2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d007      	beq.n	8016f2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016f1c:	4b39      	ldr	r3, [pc, #228]	; (8017004 <xQueueGenericSend+0x1f8>)
 8016f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f22:	601a      	str	r2, [r3, #0]
 8016f24:	f3bf 8f4f 	dsb	sy
 8016f28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016f2c:	f002 fb3a 	bl	80195a4 <vPortExitCritical>
				return pdPASS;
 8016f30:	2301      	movs	r3, #1
 8016f32:	e063      	b.n	8016ffc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d103      	bne.n	8016f42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016f3a:	f002 fb33 	bl	80195a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	e05c      	b.n	8016ffc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d106      	bne.n	8016f56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016f48:	f107 0314 	add.w	r3, r7, #20
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f001 fb45 	bl	80185dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016f52:	2301      	movs	r3, #1
 8016f54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016f56:	f002 fb25 	bl	80195a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016f5a:	f001 f899 	bl	8018090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016f5e:	f002 faf1 	bl	8019544 <vPortEnterCritical>
 8016f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f68:	b25b      	sxtb	r3, r3
 8016f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f6e:	d103      	bne.n	8016f78 <xQueueGenericSend+0x16c>
 8016f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f72:	2200      	movs	r2, #0
 8016f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f7e:	b25b      	sxtb	r3, r3
 8016f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f84:	d103      	bne.n	8016f8e <xQueueGenericSend+0x182>
 8016f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f88:	2200      	movs	r2, #0
 8016f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016f8e:	f002 fb09 	bl	80195a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016f92:	1d3a      	adds	r2, r7, #4
 8016f94:	f107 0314 	add.w	r3, r7, #20
 8016f98:	4611      	mov	r1, r2
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f001 fb34 	bl	8018608 <xTaskCheckForTimeOut>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d124      	bne.n	8016ff0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fa8:	f000 fcd0 	bl	801794c <prvIsQueueFull>
 8016fac:	4603      	mov	r3, r0
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d018      	beq.n	8016fe4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb4:	3310      	adds	r3, #16
 8016fb6:	687a      	ldr	r2, [r7, #4]
 8016fb8:	4611      	mov	r1, r2
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f001 fa5c 	bl	8018478 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fc2:	f000 fc5b 	bl	801787c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016fc6:	f001 f871 	bl	80180ac <xTaskResumeAll>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	f47f af7c 	bne.w	8016eca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016fd2:	4b0c      	ldr	r3, [pc, #48]	; (8017004 <xQueueGenericSend+0x1f8>)
 8016fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016fd8:	601a      	str	r2, [r3, #0]
 8016fda:	f3bf 8f4f 	dsb	sy
 8016fde:	f3bf 8f6f 	isb	sy
 8016fe2:	e772      	b.n	8016eca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fe6:	f000 fc49 	bl	801787c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016fea:	f001 f85f 	bl	80180ac <xTaskResumeAll>
 8016fee:	e76c      	b.n	8016eca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ff2:	f000 fc43 	bl	801787c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016ff6:	f001 f859 	bl	80180ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016ffa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3738      	adds	r7, #56	; 0x38
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}
 8017004:	e000ed04 	.word	0xe000ed04

08017008 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b08e      	sub	sp, #56	; 0x38
 801700c:	af00      	add	r7, sp, #0
 801700e:	60f8      	str	r0, [r7, #12]
 8017010:	60b9      	str	r1, [r7, #8]
 8017012:	607a      	str	r2, [r7, #4]
 8017014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801701c:	2b00      	cmp	r3, #0
 801701e:	d10a      	bne.n	8017036 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017020:	f04f 0320 	mov.w	r3, #32
 8017024:	f383 8811 	msr	BASEPRI, r3
 8017028:	f3bf 8f6f 	isb	sy
 801702c:	f3bf 8f4f 	dsb	sy
 8017030:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017032:	bf00      	nop
 8017034:	e7fe      	b.n	8017034 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017036:	68bb      	ldr	r3, [r7, #8]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d103      	bne.n	8017044 <xQueueGenericSendFromISR+0x3c>
 801703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017040:	2b00      	cmp	r3, #0
 8017042:	d101      	bne.n	8017048 <xQueueGenericSendFromISR+0x40>
 8017044:	2301      	movs	r3, #1
 8017046:	e000      	b.n	801704a <xQueueGenericSendFromISR+0x42>
 8017048:	2300      	movs	r3, #0
 801704a:	2b00      	cmp	r3, #0
 801704c:	d10a      	bne.n	8017064 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801704e:	f04f 0320 	mov.w	r3, #32
 8017052:	f383 8811 	msr	BASEPRI, r3
 8017056:	f3bf 8f6f 	isb	sy
 801705a:	f3bf 8f4f 	dsb	sy
 801705e:	623b      	str	r3, [r7, #32]
}
 8017060:	bf00      	nop
 8017062:	e7fe      	b.n	8017062 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	2b02      	cmp	r3, #2
 8017068:	d103      	bne.n	8017072 <xQueueGenericSendFromISR+0x6a>
 801706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801706c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801706e:	2b01      	cmp	r3, #1
 8017070:	d101      	bne.n	8017076 <xQueueGenericSendFromISR+0x6e>
 8017072:	2301      	movs	r3, #1
 8017074:	e000      	b.n	8017078 <xQueueGenericSendFromISR+0x70>
 8017076:	2300      	movs	r3, #0
 8017078:	2b00      	cmp	r3, #0
 801707a:	d10a      	bne.n	8017092 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801707c:	f04f 0320 	mov.w	r3, #32
 8017080:	f383 8811 	msr	BASEPRI, r3
 8017084:	f3bf 8f6f 	isb	sy
 8017088:	f3bf 8f4f 	dsb	sy
 801708c:	61fb      	str	r3, [r7, #28]
}
 801708e:	bf00      	nop
 8017090:	e7fe      	b.n	8017090 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017092:	f002 fb39 	bl	8019708 <vPortValidateInterruptPriority>
	__asm volatile
 8017096:	f3ef 8211 	mrs	r2, BASEPRI
 801709a:	f04f 0320 	mov.w	r3, #32
 801709e:	f383 8811 	msr	BASEPRI, r3
 80170a2:	f3bf 8f6f 	isb	sy
 80170a6:	f3bf 8f4f 	dsb	sy
 80170aa:	61ba      	str	r2, [r7, #24]
 80170ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80170ae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80170b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80170b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80170b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170ba:	429a      	cmp	r2, r3
 80170bc:	d302      	bcc.n	80170c4 <xQueueGenericSendFromISR+0xbc>
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	2b02      	cmp	r3, #2
 80170c2:	d12c      	bne.n	801711e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80170c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80170ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80170ce:	683a      	ldr	r2, [r7, #0]
 80170d0:	68b9      	ldr	r1, [r7, #8]
 80170d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80170d4:	f000 fb42 	bl	801775c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80170d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80170dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170e0:	d112      	bne.n	8017108 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80170e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d016      	beq.n	8017118 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80170ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ec:	3324      	adds	r3, #36	; 0x24
 80170ee:	4618      	mov	r0, r3
 80170f0:	f001 fa12 	bl	8018518 <xTaskRemoveFromEventList>
 80170f4:	4603      	mov	r3, r0
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d00e      	beq.n	8017118 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d00b      	beq.n	8017118 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	2201      	movs	r2, #1
 8017104:	601a      	str	r2, [r3, #0]
 8017106:	e007      	b.n	8017118 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017108:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801710c:	3301      	adds	r3, #1
 801710e:	b2db      	uxtb	r3, r3
 8017110:	b25a      	sxtb	r2, r3
 8017112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017118:	2301      	movs	r3, #1
 801711a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801711c:	e001      	b.n	8017122 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801711e:	2300      	movs	r3, #0
 8017120:	637b      	str	r3, [r7, #52]	; 0x34
 8017122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017124:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017126:	693b      	ldr	r3, [r7, #16]
 8017128:	f383 8811 	msr	BASEPRI, r3
}
 801712c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017130:	4618      	mov	r0, r3
 8017132:	3738      	adds	r7, #56	; 0x38
 8017134:	46bd      	mov	sp, r7
 8017136:	bd80      	pop	{r7, pc}

08017138 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b08e      	sub	sp, #56	; 0x38
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
 8017140:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017148:	2b00      	cmp	r3, #0
 801714a:	d10a      	bne.n	8017162 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801714c:	f04f 0320 	mov.w	r3, #32
 8017150:	f383 8811 	msr	BASEPRI, r3
 8017154:	f3bf 8f6f 	isb	sy
 8017158:	f3bf 8f4f 	dsb	sy
 801715c:	623b      	str	r3, [r7, #32]
}
 801715e:	bf00      	nop
 8017160:	e7fe      	b.n	8017160 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017166:	2b00      	cmp	r3, #0
 8017168:	d00a      	beq.n	8017180 <xQueueGiveFromISR+0x48>
	__asm volatile
 801716a:	f04f 0320 	mov.w	r3, #32
 801716e:	f383 8811 	msr	BASEPRI, r3
 8017172:	f3bf 8f6f 	isb	sy
 8017176:	f3bf 8f4f 	dsb	sy
 801717a:	61fb      	str	r3, [r7, #28]
}
 801717c:	bf00      	nop
 801717e:	e7fe      	b.n	801717e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d103      	bne.n	8017190 <xQueueGiveFromISR+0x58>
 8017188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801718a:	689b      	ldr	r3, [r3, #8]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d101      	bne.n	8017194 <xQueueGiveFromISR+0x5c>
 8017190:	2301      	movs	r3, #1
 8017192:	e000      	b.n	8017196 <xQueueGiveFromISR+0x5e>
 8017194:	2300      	movs	r3, #0
 8017196:	2b00      	cmp	r3, #0
 8017198:	d10a      	bne.n	80171b0 <xQueueGiveFromISR+0x78>
	__asm volatile
 801719a:	f04f 0320 	mov.w	r3, #32
 801719e:	f383 8811 	msr	BASEPRI, r3
 80171a2:	f3bf 8f6f 	isb	sy
 80171a6:	f3bf 8f4f 	dsb	sy
 80171aa:	61bb      	str	r3, [r7, #24]
}
 80171ac:	bf00      	nop
 80171ae:	e7fe      	b.n	80171ae <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80171b0:	f002 faaa 	bl	8019708 <vPortValidateInterruptPriority>
	__asm volatile
 80171b4:	f3ef 8211 	mrs	r2, BASEPRI
 80171b8:	f04f 0320 	mov.w	r3, #32
 80171bc:	f383 8811 	msr	BASEPRI, r3
 80171c0:	f3bf 8f6f 	isb	sy
 80171c4:	f3bf 8f4f 	dsb	sy
 80171c8:	617a      	str	r2, [r7, #20]
 80171ca:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80171cc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80171ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80171d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171d4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80171d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80171dc:	429a      	cmp	r2, r3
 80171de:	d22b      	bcs.n	8017238 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80171e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80171e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80171ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171ec:	1c5a      	adds	r2, r3, #1
 80171ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171f0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80171f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80171f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171fa:	d112      	bne.n	8017222 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80171fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017200:	2b00      	cmp	r3, #0
 8017202:	d016      	beq.n	8017232 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017206:	3324      	adds	r3, #36	; 0x24
 8017208:	4618      	mov	r0, r3
 801720a:	f001 f985 	bl	8018518 <xTaskRemoveFromEventList>
 801720e:	4603      	mov	r3, r0
 8017210:	2b00      	cmp	r3, #0
 8017212:	d00e      	beq.n	8017232 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d00b      	beq.n	8017232 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801721a:	683b      	ldr	r3, [r7, #0]
 801721c:	2201      	movs	r2, #1
 801721e:	601a      	str	r2, [r3, #0]
 8017220:	e007      	b.n	8017232 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017226:	3301      	adds	r3, #1
 8017228:	b2db      	uxtb	r3, r3
 801722a:	b25a      	sxtb	r2, r3
 801722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801722e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017232:	2301      	movs	r3, #1
 8017234:	637b      	str	r3, [r7, #52]	; 0x34
 8017236:	e001      	b.n	801723c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017238:	2300      	movs	r3, #0
 801723a:	637b      	str	r3, [r7, #52]	; 0x34
 801723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801723e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	f383 8811 	msr	BASEPRI, r3
}
 8017246:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801724a:	4618      	mov	r0, r3
 801724c:	3738      	adds	r7, #56	; 0x38
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
	...

08017254 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b08c      	sub	sp, #48	; 0x30
 8017258:	af00      	add	r7, sp, #0
 801725a:	60f8      	str	r0, [r7, #12]
 801725c:	60b9      	str	r1, [r7, #8]
 801725e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017260:	2300      	movs	r3, #0
 8017262:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801726a:	2b00      	cmp	r3, #0
 801726c:	d10a      	bne.n	8017284 <xQueueReceive+0x30>
	__asm volatile
 801726e:	f04f 0320 	mov.w	r3, #32
 8017272:	f383 8811 	msr	BASEPRI, r3
 8017276:	f3bf 8f6f 	isb	sy
 801727a:	f3bf 8f4f 	dsb	sy
 801727e:	623b      	str	r3, [r7, #32]
}
 8017280:	bf00      	nop
 8017282:	e7fe      	b.n	8017282 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d103      	bne.n	8017292 <xQueueReceive+0x3e>
 801728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801728e:	2b00      	cmp	r3, #0
 8017290:	d101      	bne.n	8017296 <xQueueReceive+0x42>
 8017292:	2301      	movs	r3, #1
 8017294:	e000      	b.n	8017298 <xQueueReceive+0x44>
 8017296:	2300      	movs	r3, #0
 8017298:	2b00      	cmp	r3, #0
 801729a:	d10a      	bne.n	80172b2 <xQueueReceive+0x5e>
	__asm volatile
 801729c:	f04f 0320 	mov.w	r3, #32
 80172a0:	f383 8811 	msr	BASEPRI, r3
 80172a4:	f3bf 8f6f 	isb	sy
 80172a8:	f3bf 8f4f 	dsb	sy
 80172ac:	61fb      	str	r3, [r7, #28]
}
 80172ae:	bf00      	nop
 80172b0:	e7fe      	b.n	80172b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80172b2:	f001 facf 	bl	8018854 <xTaskGetSchedulerState>
 80172b6:	4603      	mov	r3, r0
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d102      	bne.n	80172c2 <xQueueReceive+0x6e>
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d101      	bne.n	80172c6 <xQueueReceive+0x72>
 80172c2:	2301      	movs	r3, #1
 80172c4:	e000      	b.n	80172c8 <xQueueReceive+0x74>
 80172c6:	2300      	movs	r3, #0
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d10a      	bne.n	80172e2 <xQueueReceive+0x8e>
	__asm volatile
 80172cc:	f04f 0320 	mov.w	r3, #32
 80172d0:	f383 8811 	msr	BASEPRI, r3
 80172d4:	f3bf 8f6f 	isb	sy
 80172d8:	f3bf 8f4f 	dsb	sy
 80172dc:	61bb      	str	r3, [r7, #24]
}
 80172de:	bf00      	nop
 80172e0:	e7fe      	b.n	80172e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80172e2:	f002 f92f 	bl	8019544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80172e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80172ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d01f      	beq.n	8017332 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80172f2:	68b9      	ldr	r1, [r7, #8]
 80172f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80172f6:	f000 fa9b 	bl	8017830 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80172fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172fc:	1e5a      	subs	r2, r3, #1
 80172fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017300:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017304:	691b      	ldr	r3, [r3, #16]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d00f      	beq.n	801732a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801730c:	3310      	adds	r3, #16
 801730e:	4618      	mov	r0, r3
 8017310:	f001 f902 	bl	8018518 <xTaskRemoveFromEventList>
 8017314:	4603      	mov	r3, r0
 8017316:	2b00      	cmp	r3, #0
 8017318:	d007      	beq.n	801732a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801731a:	4b3d      	ldr	r3, [pc, #244]	; (8017410 <xQueueReceive+0x1bc>)
 801731c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017320:	601a      	str	r2, [r3, #0]
 8017322:	f3bf 8f4f 	dsb	sy
 8017326:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801732a:	f002 f93b 	bl	80195a4 <vPortExitCritical>
				return pdPASS;
 801732e:	2301      	movs	r3, #1
 8017330:	e069      	b.n	8017406 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d103      	bne.n	8017340 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017338:	f002 f934 	bl	80195a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801733c:	2300      	movs	r3, #0
 801733e:	e062      	b.n	8017406 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017342:	2b00      	cmp	r3, #0
 8017344:	d106      	bne.n	8017354 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017346:	f107 0310 	add.w	r3, r7, #16
 801734a:	4618      	mov	r0, r3
 801734c:	f001 f946 	bl	80185dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017350:	2301      	movs	r3, #1
 8017352:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017354:	f002 f926 	bl	80195a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017358:	f000 fe9a 	bl	8018090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801735c:	f002 f8f2 	bl	8019544 <vPortEnterCritical>
 8017360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017366:	b25b      	sxtb	r3, r3
 8017368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801736c:	d103      	bne.n	8017376 <xQueueReceive+0x122>
 801736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017370:	2200      	movs	r2, #0
 8017372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801737c:	b25b      	sxtb	r3, r3
 801737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017382:	d103      	bne.n	801738c <xQueueReceive+0x138>
 8017384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017386:	2200      	movs	r2, #0
 8017388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801738c:	f002 f90a 	bl	80195a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017390:	1d3a      	adds	r2, r7, #4
 8017392:	f107 0310 	add.w	r3, r7, #16
 8017396:	4611      	mov	r1, r2
 8017398:	4618      	mov	r0, r3
 801739a:	f001 f935 	bl	8018608 <xTaskCheckForTimeOut>
 801739e:	4603      	mov	r3, r0
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d123      	bne.n	80173ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80173a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173a6:	f000 fabb 	bl	8017920 <prvIsQueueEmpty>
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d017      	beq.n	80173e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80173b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b2:	3324      	adds	r3, #36	; 0x24
 80173b4:	687a      	ldr	r2, [r7, #4]
 80173b6:	4611      	mov	r1, r2
 80173b8:	4618      	mov	r0, r3
 80173ba:	f001 f85d 	bl	8018478 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80173be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173c0:	f000 fa5c 	bl	801787c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80173c4:	f000 fe72 	bl	80180ac <xTaskResumeAll>
 80173c8:	4603      	mov	r3, r0
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d189      	bne.n	80172e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80173ce:	4b10      	ldr	r3, [pc, #64]	; (8017410 <xQueueReceive+0x1bc>)
 80173d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173d4:	601a      	str	r2, [r3, #0]
 80173d6:	f3bf 8f4f 	dsb	sy
 80173da:	f3bf 8f6f 	isb	sy
 80173de:	e780      	b.n	80172e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80173e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173e2:	f000 fa4b 	bl	801787c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80173e6:	f000 fe61 	bl	80180ac <xTaskResumeAll>
 80173ea:	e77a      	b.n	80172e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80173ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173ee:	f000 fa45 	bl	801787c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80173f2:	f000 fe5b 	bl	80180ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80173f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173f8:	f000 fa92 	bl	8017920 <prvIsQueueEmpty>
 80173fc:	4603      	mov	r3, r0
 80173fe:	2b00      	cmp	r3, #0
 8017400:	f43f af6f 	beq.w	80172e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017404:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017406:	4618      	mov	r0, r3
 8017408:	3730      	adds	r7, #48	; 0x30
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}
 801740e:	bf00      	nop
 8017410:	e000ed04 	.word	0xe000ed04

08017414 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b08e      	sub	sp, #56	; 0x38
 8017418:	af00      	add	r7, sp, #0
 801741a:	6078      	str	r0, [r7, #4]
 801741c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801741e:	2300      	movs	r3, #0
 8017420:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8017426:	2300      	movs	r3, #0
 8017428:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801742c:	2b00      	cmp	r3, #0
 801742e:	d10a      	bne.n	8017446 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8017430:	f04f 0320 	mov.w	r3, #32
 8017434:	f383 8811 	msr	BASEPRI, r3
 8017438:	f3bf 8f6f 	isb	sy
 801743c:	f3bf 8f4f 	dsb	sy
 8017440:	623b      	str	r3, [r7, #32]
}
 8017442:	bf00      	nop
 8017444:	e7fe      	b.n	8017444 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00a      	beq.n	8017464 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801744e:	f04f 0320 	mov.w	r3, #32
 8017452:	f383 8811 	msr	BASEPRI, r3
 8017456:	f3bf 8f6f 	isb	sy
 801745a:	f3bf 8f4f 	dsb	sy
 801745e:	61fb      	str	r3, [r7, #28]
}
 8017460:	bf00      	nop
 8017462:	e7fe      	b.n	8017462 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017464:	f001 f9f6 	bl	8018854 <xTaskGetSchedulerState>
 8017468:	4603      	mov	r3, r0
 801746a:	2b00      	cmp	r3, #0
 801746c:	d102      	bne.n	8017474 <xQueueSemaphoreTake+0x60>
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d101      	bne.n	8017478 <xQueueSemaphoreTake+0x64>
 8017474:	2301      	movs	r3, #1
 8017476:	e000      	b.n	801747a <xQueueSemaphoreTake+0x66>
 8017478:	2300      	movs	r3, #0
 801747a:	2b00      	cmp	r3, #0
 801747c:	d10a      	bne.n	8017494 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801747e:	f04f 0320 	mov.w	r3, #32
 8017482:	f383 8811 	msr	BASEPRI, r3
 8017486:	f3bf 8f6f 	isb	sy
 801748a:	f3bf 8f4f 	dsb	sy
 801748e:	61bb      	str	r3, [r7, #24]
}
 8017490:	bf00      	nop
 8017492:	e7fe      	b.n	8017492 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017494:	f002 f856 	bl	8019544 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801749c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d024      	beq.n	80174ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80174a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a6:	1e5a      	subs	r2, r3, #1
 80174a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80174ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d104      	bne.n	80174be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80174b4:	f001 fb8c 	bl	8018bd0 <pvTaskIncrementMutexHeldCount>
 80174b8:	4602      	mov	r2, r0
 80174ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80174be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c0:	691b      	ldr	r3, [r3, #16]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d00f      	beq.n	80174e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80174c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c8:	3310      	adds	r3, #16
 80174ca:	4618      	mov	r0, r3
 80174cc:	f001 f824 	bl	8018518 <xTaskRemoveFromEventList>
 80174d0:	4603      	mov	r3, r0
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d007      	beq.n	80174e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80174d6:	4b54      	ldr	r3, [pc, #336]	; (8017628 <xQueueSemaphoreTake+0x214>)
 80174d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174dc:	601a      	str	r2, [r3, #0]
 80174de:	f3bf 8f4f 	dsb	sy
 80174e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80174e6:	f002 f85d 	bl	80195a4 <vPortExitCritical>
				return pdPASS;
 80174ea:	2301      	movs	r3, #1
 80174ec:	e097      	b.n	801761e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d111      	bne.n	8017518 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80174f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d00a      	beq.n	8017510 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80174fa:	f04f 0320 	mov.w	r3, #32
 80174fe:	f383 8811 	msr	BASEPRI, r3
 8017502:	f3bf 8f6f 	isb	sy
 8017506:	f3bf 8f4f 	dsb	sy
 801750a:	617b      	str	r3, [r7, #20]
}
 801750c:	bf00      	nop
 801750e:	e7fe      	b.n	801750e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017510:	f002 f848 	bl	80195a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017514:	2300      	movs	r3, #0
 8017516:	e082      	b.n	801761e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801751a:	2b00      	cmp	r3, #0
 801751c:	d106      	bne.n	801752c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801751e:	f107 030c 	add.w	r3, r7, #12
 8017522:	4618      	mov	r0, r3
 8017524:	f001 f85a 	bl	80185dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017528:	2301      	movs	r3, #1
 801752a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801752c:	f002 f83a 	bl	80195a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017530:	f000 fdae 	bl	8018090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017534:	f002 f806 	bl	8019544 <vPortEnterCritical>
 8017538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801753a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801753e:	b25b      	sxtb	r3, r3
 8017540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017544:	d103      	bne.n	801754e <xQueueSemaphoreTake+0x13a>
 8017546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017548:	2200      	movs	r2, #0
 801754a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017550:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017554:	b25b      	sxtb	r3, r3
 8017556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801755a:	d103      	bne.n	8017564 <xQueueSemaphoreTake+0x150>
 801755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801755e:	2200      	movs	r2, #0
 8017560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017564:	f002 f81e 	bl	80195a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017568:	463a      	mov	r2, r7
 801756a:	f107 030c 	add.w	r3, r7, #12
 801756e:	4611      	mov	r1, r2
 8017570:	4618      	mov	r0, r3
 8017572:	f001 f849 	bl	8018608 <xTaskCheckForTimeOut>
 8017576:	4603      	mov	r3, r0
 8017578:	2b00      	cmp	r3, #0
 801757a:	d132      	bne.n	80175e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801757c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801757e:	f000 f9cf 	bl	8017920 <prvIsQueueEmpty>
 8017582:	4603      	mov	r3, r0
 8017584:	2b00      	cmp	r3, #0
 8017586:	d026      	beq.n	80175d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d109      	bne.n	80175a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8017590:	f001 ffd8 	bl	8019544 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017596:	689b      	ldr	r3, [r3, #8]
 8017598:	4618      	mov	r0, r3
 801759a:	f001 f979 	bl	8018890 <xTaskPriorityInherit>
 801759e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80175a0:	f002 f800 	bl	80195a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80175a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a6:	3324      	adds	r3, #36	; 0x24
 80175a8:	683a      	ldr	r2, [r7, #0]
 80175aa:	4611      	mov	r1, r2
 80175ac:	4618      	mov	r0, r3
 80175ae:	f000 ff63 	bl	8018478 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80175b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175b4:	f000 f962 	bl	801787c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80175b8:	f000 fd78 	bl	80180ac <xTaskResumeAll>
 80175bc:	4603      	mov	r3, r0
 80175be:	2b00      	cmp	r3, #0
 80175c0:	f47f af68 	bne.w	8017494 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80175c4:	4b18      	ldr	r3, [pc, #96]	; (8017628 <xQueueSemaphoreTake+0x214>)
 80175c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175ca:	601a      	str	r2, [r3, #0]
 80175cc:	f3bf 8f4f 	dsb	sy
 80175d0:	f3bf 8f6f 	isb	sy
 80175d4:	e75e      	b.n	8017494 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80175d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175d8:	f000 f950 	bl	801787c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80175dc:	f000 fd66 	bl	80180ac <xTaskResumeAll>
 80175e0:	e758      	b.n	8017494 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80175e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175e4:	f000 f94a 	bl	801787c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80175e8:	f000 fd60 	bl	80180ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80175ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175ee:	f000 f997 	bl	8017920 <prvIsQueueEmpty>
 80175f2:	4603      	mov	r3, r0
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	f43f af4d 	beq.w	8017494 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80175fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d00d      	beq.n	801761c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8017600:	f001 ffa0 	bl	8019544 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017606:	f000 f891 	bl	801772c <prvGetDisinheritPriorityAfterTimeout>
 801760a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801760c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801760e:	689b      	ldr	r3, [r3, #8]
 8017610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017612:	4618      	mov	r0, r3
 8017614:	f001 fa42 	bl	8018a9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017618:	f001 ffc4 	bl	80195a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801761c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801761e:	4618      	mov	r0, r3
 8017620:	3738      	adds	r7, #56	; 0x38
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}
 8017626:	bf00      	nop
 8017628:	e000ed04 	.word	0xe000ed04

0801762c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b08e      	sub	sp, #56	; 0x38
 8017630:	af00      	add	r7, sp, #0
 8017632:	60f8      	str	r0, [r7, #12]
 8017634:	60b9      	str	r1, [r7, #8]
 8017636:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801763e:	2b00      	cmp	r3, #0
 8017640:	d10a      	bne.n	8017658 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8017642:	f04f 0320 	mov.w	r3, #32
 8017646:	f383 8811 	msr	BASEPRI, r3
 801764a:	f3bf 8f6f 	isb	sy
 801764e:	f3bf 8f4f 	dsb	sy
 8017652:	623b      	str	r3, [r7, #32]
}
 8017654:	bf00      	nop
 8017656:	e7fe      	b.n	8017656 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d103      	bne.n	8017666 <xQueueReceiveFromISR+0x3a>
 801765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017662:	2b00      	cmp	r3, #0
 8017664:	d101      	bne.n	801766a <xQueueReceiveFromISR+0x3e>
 8017666:	2301      	movs	r3, #1
 8017668:	e000      	b.n	801766c <xQueueReceiveFromISR+0x40>
 801766a:	2300      	movs	r3, #0
 801766c:	2b00      	cmp	r3, #0
 801766e:	d10a      	bne.n	8017686 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8017670:	f04f 0320 	mov.w	r3, #32
 8017674:	f383 8811 	msr	BASEPRI, r3
 8017678:	f3bf 8f6f 	isb	sy
 801767c:	f3bf 8f4f 	dsb	sy
 8017680:	61fb      	str	r3, [r7, #28]
}
 8017682:	bf00      	nop
 8017684:	e7fe      	b.n	8017684 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017686:	f002 f83f 	bl	8019708 <vPortValidateInterruptPriority>
	__asm volatile
 801768a:	f3ef 8211 	mrs	r2, BASEPRI
 801768e:	f04f 0320 	mov.w	r3, #32
 8017692:	f383 8811 	msr	BASEPRI, r3
 8017696:	f3bf 8f6f 	isb	sy
 801769a:	f3bf 8f4f 	dsb	sy
 801769e:	61ba      	str	r2, [r7, #24]
 80176a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80176a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80176a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80176a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80176ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d02f      	beq.n	8017712 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80176b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80176b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80176bc:	68b9      	ldr	r1, [r7, #8]
 80176be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176c0:	f000 f8b6 	bl	8017830 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80176c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176c6:	1e5a      	subs	r2, r3, #1
 80176c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80176cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80176d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176d4:	d112      	bne.n	80176fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80176d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d8:	691b      	ldr	r3, [r3, #16]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d016      	beq.n	801770c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80176de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e0:	3310      	adds	r3, #16
 80176e2:	4618      	mov	r0, r3
 80176e4:	f000 ff18 	bl	8018518 <xTaskRemoveFromEventList>
 80176e8:	4603      	mov	r3, r0
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d00e      	beq.n	801770c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d00b      	beq.n	801770c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	2201      	movs	r2, #1
 80176f8:	601a      	str	r2, [r3, #0]
 80176fa:	e007      	b.n	801770c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80176fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017700:	3301      	adds	r3, #1
 8017702:	b2db      	uxtb	r3, r3
 8017704:	b25a      	sxtb	r2, r3
 8017706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801770c:	2301      	movs	r3, #1
 801770e:	637b      	str	r3, [r7, #52]	; 0x34
 8017710:	e001      	b.n	8017716 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8017712:	2300      	movs	r3, #0
 8017714:	637b      	str	r3, [r7, #52]	; 0x34
 8017716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017718:	613b      	str	r3, [r7, #16]
	__asm volatile
 801771a:	693b      	ldr	r3, [r7, #16]
 801771c:	f383 8811 	msr	BASEPRI, r3
}
 8017720:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017724:	4618      	mov	r0, r3
 8017726:	3738      	adds	r7, #56	; 0x38
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}

0801772c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801772c:	b480      	push	{r7}
 801772e:	b085      	sub	sp, #20
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017738:	2b00      	cmp	r3, #0
 801773a:	d006      	beq.n	801774a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	f1c3 0307 	rsb	r3, r3, #7
 8017746:	60fb      	str	r3, [r7, #12]
 8017748:	e001      	b.n	801774e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801774a:	2300      	movs	r3, #0
 801774c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801774e:	68fb      	ldr	r3, [r7, #12]
	}
 8017750:	4618      	mov	r0, r3
 8017752:	3714      	adds	r7, #20
 8017754:	46bd      	mov	sp, r7
 8017756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775a:	4770      	bx	lr

0801775c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801775c:	b580      	push	{r7, lr}
 801775e:	b086      	sub	sp, #24
 8017760:	af00      	add	r7, sp, #0
 8017762:	60f8      	str	r0, [r7, #12]
 8017764:	60b9      	str	r1, [r7, #8]
 8017766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017768:	2300      	movs	r3, #0
 801776a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017770:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017776:	2b00      	cmp	r3, #0
 8017778:	d10d      	bne.n	8017796 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d14d      	bne.n	801781e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	689b      	ldr	r3, [r3, #8]
 8017786:	4618      	mov	r0, r3
 8017788:	f001 f902 	bl	8018990 <xTaskPriorityDisinherit>
 801778c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	2200      	movs	r2, #0
 8017792:	609a      	str	r2, [r3, #8]
 8017794:	e043      	b.n	801781e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d119      	bne.n	80177d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	6858      	ldr	r0, [r3, #4]
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177a4:	461a      	mov	r2, r3
 80177a6:	68b9      	ldr	r1, [r7, #8]
 80177a8:	f005 fd4c 	bl	801d244 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	685a      	ldr	r2, [r3, #4]
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177b4:	441a      	add	r2, r3
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	685a      	ldr	r2, [r3, #4]
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	689b      	ldr	r3, [r3, #8]
 80177c2:	429a      	cmp	r2, r3
 80177c4:	d32b      	bcc.n	801781e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	681a      	ldr	r2, [r3, #0]
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	605a      	str	r2, [r3, #4]
 80177ce:	e026      	b.n	801781e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	68d8      	ldr	r0, [r3, #12]
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177d8:	461a      	mov	r2, r3
 80177da:	68b9      	ldr	r1, [r7, #8]
 80177dc:	f005 fd32 	bl	801d244 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	68da      	ldr	r2, [r3, #12]
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177e8:	425b      	negs	r3, r3
 80177ea:	441a      	add	r2, r3
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	68da      	ldr	r2, [r3, #12]
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	429a      	cmp	r2, r3
 80177fa:	d207      	bcs.n	801780c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	689a      	ldr	r2, [r3, #8]
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017804:	425b      	negs	r3, r3
 8017806:	441a      	add	r2, r3
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	2b02      	cmp	r3, #2
 8017810:	d105      	bne.n	801781e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017812:	693b      	ldr	r3, [r7, #16]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d002      	beq.n	801781e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017818:	693b      	ldr	r3, [r7, #16]
 801781a:	3b01      	subs	r3, #1
 801781c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801781e:	693b      	ldr	r3, [r7, #16]
 8017820:	1c5a      	adds	r2, r3, #1
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017826:	697b      	ldr	r3, [r7, #20]
}
 8017828:	4618      	mov	r0, r3
 801782a:	3718      	adds	r7, #24
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}

08017830 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b082      	sub	sp, #8
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
 8017838:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801783e:	2b00      	cmp	r3, #0
 8017840:	d018      	beq.n	8017874 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	68da      	ldr	r2, [r3, #12]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801784a:	441a      	add	r2, r3
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	68da      	ldr	r2, [r3, #12]
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	689b      	ldr	r3, [r3, #8]
 8017858:	429a      	cmp	r2, r3
 801785a:	d303      	bcc.n	8017864 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681a      	ldr	r2, [r3, #0]
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	68d9      	ldr	r1, [r3, #12]
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801786c:	461a      	mov	r2, r3
 801786e:	6838      	ldr	r0, [r7, #0]
 8017870:	f005 fce8 	bl	801d244 <memcpy>
	}
}
 8017874:	bf00      	nop
 8017876:	3708      	adds	r7, #8
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}

0801787c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b084      	sub	sp, #16
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017884:	f001 fe5e 	bl	8019544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801788e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017890:	e011      	b.n	80178b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017896:	2b00      	cmp	r3, #0
 8017898:	d012      	beq.n	80178c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	3324      	adds	r3, #36	; 0x24
 801789e:	4618      	mov	r0, r3
 80178a0:	f000 fe3a 	bl	8018518 <xTaskRemoveFromEventList>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d001      	beq.n	80178ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80178aa:	f000 ff0f 	bl	80186cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80178ae:	7bfb      	ldrb	r3, [r7, #15]
 80178b0:	3b01      	subs	r3, #1
 80178b2:	b2db      	uxtb	r3, r3
 80178b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80178b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	dce9      	bgt.n	8017892 <prvUnlockQueue+0x16>
 80178be:	e000      	b.n	80178c2 <prvUnlockQueue+0x46>
					break;
 80178c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	22ff      	movs	r2, #255	; 0xff
 80178c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80178ca:	f001 fe6b 	bl	80195a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80178ce:	f001 fe39 	bl	8019544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80178d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80178da:	e011      	b.n	8017900 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	691b      	ldr	r3, [r3, #16]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d012      	beq.n	801790a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	3310      	adds	r3, #16
 80178e8:	4618      	mov	r0, r3
 80178ea:	f000 fe15 	bl	8018518 <xTaskRemoveFromEventList>
 80178ee:	4603      	mov	r3, r0
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d001      	beq.n	80178f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80178f4:	f000 feea 	bl	80186cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80178f8:	7bbb      	ldrb	r3, [r7, #14]
 80178fa:	3b01      	subs	r3, #1
 80178fc:	b2db      	uxtb	r3, r3
 80178fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017904:	2b00      	cmp	r3, #0
 8017906:	dce9      	bgt.n	80178dc <prvUnlockQueue+0x60>
 8017908:	e000      	b.n	801790c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801790a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	22ff      	movs	r2, #255	; 0xff
 8017910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017914:	f001 fe46 	bl	80195a4 <vPortExitCritical>
}
 8017918:	bf00      	nop
 801791a:	3710      	adds	r7, #16
 801791c:	46bd      	mov	sp, r7
 801791e:	bd80      	pop	{r7, pc}

08017920 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b084      	sub	sp, #16
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017928:	f001 fe0c 	bl	8019544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017930:	2b00      	cmp	r3, #0
 8017932:	d102      	bne.n	801793a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017934:	2301      	movs	r3, #1
 8017936:	60fb      	str	r3, [r7, #12]
 8017938:	e001      	b.n	801793e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801793a:	2300      	movs	r3, #0
 801793c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801793e:	f001 fe31 	bl	80195a4 <vPortExitCritical>

	return xReturn;
 8017942:	68fb      	ldr	r3, [r7, #12]
}
 8017944:	4618      	mov	r0, r3
 8017946:	3710      	adds	r7, #16
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}

0801794c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b084      	sub	sp, #16
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017954:	f001 fdf6 	bl	8019544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017960:	429a      	cmp	r2, r3
 8017962:	d102      	bne.n	801796a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017964:	2301      	movs	r3, #1
 8017966:	60fb      	str	r3, [r7, #12]
 8017968:	e001      	b.n	801796e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801796a:	2300      	movs	r3, #0
 801796c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801796e:	f001 fe19 	bl	80195a4 <vPortExitCritical>

	return xReturn;
 8017972:	68fb      	ldr	r3, [r7, #12]
}
 8017974:	4618      	mov	r0, r3
 8017976:	3710      	adds	r7, #16
 8017978:	46bd      	mov	sp, r7
 801797a:	bd80      	pop	{r7, pc}

0801797c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801797c:	b480      	push	{r7}
 801797e:	b085      	sub	sp, #20
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
 8017984:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017986:	2300      	movs	r3, #0
 8017988:	60fb      	str	r3, [r7, #12]
 801798a:	e014      	b.n	80179b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801798c:	4a0f      	ldr	r2, [pc, #60]	; (80179cc <vQueueAddToRegistry+0x50>)
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d10b      	bne.n	80179b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017998:	490c      	ldr	r1, [pc, #48]	; (80179cc <vQueueAddToRegistry+0x50>)
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	683a      	ldr	r2, [r7, #0]
 801799e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80179a2:	4a0a      	ldr	r2, [pc, #40]	; (80179cc <vQueueAddToRegistry+0x50>)
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	00db      	lsls	r3, r3, #3
 80179a8:	4413      	add	r3, r2
 80179aa:	687a      	ldr	r2, [r7, #4]
 80179ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80179ae:	e006      	b.n	80179be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	3301      	adds	r3, #1
 80179b4:	60fb      	str	r3, [r7, #12]
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	2b63      	cmp	r3, #99	; 0x63
 80179ba:	d9e7      	bls.n	801798c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80179bc:	bf00      	nop
 80179be:	bf00      	nop
 80179c0:	3714      	adds	r7, #20
 80179c2:	46bd      	mov	sp, r7
 80179c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c8:	4770      	bx	lr
 80179ca:	bf00      	nop
 80179cc:	20018ef4 	.word	0x20018ef4

080179d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b086      	sub	sp, #24
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	60f8      	str	r0, [r7, #12]
 80179d8:	60b9      	str	r1, [r7, #8]
 80179da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80179e0:	f001 fdb0 	bl	8019544 <vPortEnterCritical>
 80179e4:	697b      	ldr	r3, [r7, #20]
 80179e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80179ea:	b25b      	sxtb	r3, r3
 80179ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179f0:	d103      	bne.n	80179fa <vQueueWaitForMessageRestricted+0x2a>
 80179f2:	697b      	ldr	r3, [r7, #20]
 80179f4:	2200      	movs	r2, #0
 80179f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017a00:	b25b      	sxtb	r3, r3
 8017a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a06:	d103      	bne.n	8017a10 <vQueueWaitForMessageRestricted+0x40>
 8017a08:	697b      	ldr	r3, [r7, #20]
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017a10:	f001 fdc8 	bl	80195a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017a14:	697b      	ldr	r3, [r7, #20]
 8017a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d106      	bne.n	8017a2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017a1c:	697b      	ldr	r3, [r7, #20]
 8017a1e:	3324      	adds	r3, #36	; 0x24
 8017a20:	687a      	ldr	r2, [r7, #4]
 8017a22:	68b9      	ldr	r1, [r7, #8]
 8017a24:	4618      	mov	r0, r3
 8017a26:	f000 fd4b 	bl	80184c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017a2a:	6978      	ldr	r0, [r7, #20]
 8017a2c:	f7ff ff26 	bl	801787c <prvUnlockQueue>
	}
 8017a30:	bf00      	nop
 8017a32:	3718      	adds	r7, #24
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd80      	pop	{r7, pc}

08017a38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b08c      	sub	sp, #48	; 0x30
 8017a3c:	af04      	add	r7, sp, #16
 8017a3e:	60f8      	str	r0, [r7, #12]
 8017a40:	60b9      	str	r1, [r7, #8]
 8017a42:	603b      	str	r3, [r7, #0]
 8017a44:	4613      	mov	r3, r2
 8017a46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017a48:	88fb      	ldrh	r3, [r7, #6]
 8017a4a:	009b      	lsls	r3, r3, #2
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f001 fe9b 	bl	8019788 <pvPortMalloc>
 8017a52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017a54:	697b      	ldr	r3, [r7, #20]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d00e      	beq.n	8017a78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017a5a:	2060      	movs	r0, #96	; 0x60
 8017a5c:	f001 fe94 	bl	8019788 <pvPortMalloc>
 8017a60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017a62:	69fb      	ldr	r3, [r7, #28]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d003      	beq.n	8017a70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017a68:	69fb      	ldr	r3, [r7, #28]
 8017a6a:	697a      	ldr	r2, [r7, #20]
 8017a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8017a6e:	e005      	b.n	8017a7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017a70:	6978      	ldr	r0, [r7, #20]
 8017a72:	f001 ff4d 	bl	8019910 <vPortFree>
 8017a76:	e001      	b.n	8017a7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017a78:	2300      	movs	r3, #0
 8017a7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017a7c:	69fb      	ldr	r3, [r7, #28]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d013      	beq.n	8017aaa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017a82:	88fa      	ldrh	r2, [r7, #6]
 8017a84:	2300      	movs	r3, #0
 8017a86:	9303      	str	r3, [sp, #12]
 8017a88:	69fb      	ldr	r3, [r7, #28]
 8017a8a:	9302      	str	r3, [sp, #8]
 8017a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a8e:	9301      	str	r3, [sp, #4]
 8017a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a92:	9300      	str	r3, [sp, #0]
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	68b9      	ldr	r1, [r7, #8]
 8017a98:	68f8      	ldr	r0, [r7, #12]
 8017a9a:	f000 f80e 	bl	8017aba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017a9e:	69f8      	ldr	r0, [r7, #28]
 8017aa0:	f000 f89e 	bl	8017be0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017aa4:	2301      	movs	r3, #1
 8017aa6:	61bb      	str	r3, [r7, #24]
 8017aa8:	e002      	b.n	8017ab0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8017aae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017ab0:	69bb      	ldr	r3, [r7, #24]
	}
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	3720      	adds	r7, #32
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bd80      	pop	{r7, pc}

08017aba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017aba:	b580      	push	{r7, lr}
 8017abc:	b088      	sub	sp, #32
 8017abe:	af00      	add	r7, sp, #0
 8017ac0:	60f8      	str	r0, [r7, #12]
 8017ac2:	60b9      	str	r1, [r7, #8]
 8017ac4:	607a      	str	r2, [r7, #4]
 8017ac6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	009b      	lsls	r3, r3, #2
 8017ad0:	461a      	mov	r2, r3
 8017ad2:	21a5      	movs	r1, #165	; 0xa5
 8017ad4:	f005 fbde 	bl	801d294 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017ae2:	3b01      	subs	r3, #1
 8017ae4:	009b      	lsls	r3, r3, #2
 8017ae6:	4413      	add	r3, r2
 8017ae8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017aea:	69bb      	ldr	r3, [r7, #24]
 8017aec:	f023 0307 	bic.w	r3, r3, #7
 8017af0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017af2:	69bb      	ldr	r3, [r7, #24]
 8017af4:	f003 0307 	and.w	r3, r3, #7
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d00a      	beq.n	8017b12 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017afc:	f04f 0320 	mov.w	r3, #32
 8017b00:	f383 8811 	msr	BASEPRI, r3
 8017b04:	f3bf 8f6f 	isb	sy
 8017b08:	f3bf 8f4f 	dsb	sy
 8017b0c:	617b      	str	r3, [r7, #20]
}
 8017b0e:	bf00      	nop
 8017b10:	e7fe      	b.n	8017b10 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017b12:	68bb      	ldr	r3, [r7, #8]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d01f      	beq.n	8017b58 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017b18:	2300      	movs	r3, #0
 8017b1a:	61fb      	str	r3, [r7, #28]
 8017b1c:	e012      	b.n	8017b44 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017b1e:	68ba      	ldr	r2, [r7, #8]
 8017b20:	69fb      	ldr	r3, [r7, #28]
 8017b22:	4413      	add	r3, r2
 8017b24:	7819      	ldrb	r1, [r3, #0]
 8017b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b28:	69fb      	ldr	r3, [r7, #28]
 8017b2a:	4413      	add	r3, r2
 8017b2c:	3334      	adds	r3, #52	; 0x34
 8017b2e:	460a      	mov	r2, r1
 8017b30:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017b32:	68ba      	ldr	r2, [r7, #8]
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	4413      	add	r3, r2
 8017b38:	781b      	ldrb	r3, [r3, #0]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d006      	beq.n	8017b4c <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017b3e:	69fb      	ldr	r3, [r7, #28]
 8017b40:	3301      	adds	r3, #1
 8017b42:	61fb      	str	r3, [r7, #28]
 8017b44:	69fb      	ldr	r3, [r7, #28]
 8017b46:	2b0f      	cmp	r3, #15
 8017b48:	d9e9      	bls.n	8017b1e <prvInitialiseNewTask+0x64>
 8017b4a:	e000      	b.n	8017b4e <prvInitialiseNewTask+0x94>
			{
				break;
 8017b4c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b50:	2200      	movs	r2, #0
 8017b52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017b56:	e003      	b.n	8017b60 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b62:	2b06      	cmp	r3, #6
 8017b64:	d901      	bls.n	8017b6a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017b66:	2306      	movs	r3, #6
 8017b68:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b6e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b74:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b78:	2200      	movs	r2, #0
 8017b7a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b7e:	3304      	adds	r3, #4
 8017b80:	4618      	mov	r0, r3
 8017b82:	f7fe ffb5 	bl	8016af0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b88:	3318      	adds	r3, #24
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f7fe ffb0 	bl	8016af0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b98:	f1c3 0207 	rsb	r2, r3, #7
 8017b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ba4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ba8:	2200      	movs	r2, #0
 8017baa:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bae:	2200      	movs	r2, #0
 8017bb0:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017bba:	683a      	ldr	r2, [r7, #0]
 8017bbc:	68f9      	ldr	r1, [r7, #12]
 8017bbe:	69b8      	ldr	r0, [r7, #24]
 8017bc0:	f001 fb92 	bl	80192e8 <pxPortInitialiseStack>
 8017bc4:	4602      	mov	r2, r0
 8017bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d002      	beq.n	8017bd6 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017bd6:	bf00      	nop
 8017bd8:	3720      	adds	r7, #32
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	bd80      	pop	{r7, pc}
	...

08017be0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b082      	sub	sp, #8
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017be8:	f001 fcac 	bl	8019544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017bec:	4b2c      	ldr	r3, [pc, #176]	; (8017ca0 <prvAddNewTaskToReadyList+0xc0>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	3301      	adds	r3, #1
 8017bf2:	4a2b      	ldr	r2, [pc, #172]	; (8017ca0 <prvAddNewTaskToReadyList+0xc0>)
 8017bf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017bf6:	4b2b      	ldr	r3, [pc, #172]	; (8017ca4 <prvAddNewTaskToReadyList+0xc4>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d109      	bne.n	8017c12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017bfe:	4a29      	ldr	r2, [pc, #164]	; (8017ca4 <prvAddNewTaskToReadyList+0xc4>)
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017c04:	4b26      	ldr	r3, [pc, #152]	; (8017ca0 <prvAddNewTaskToReadyList+0xc0>)
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	2b01      	cmp	r3, #1
 8017c0a:	d110      	bne.n	8017c2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017c0c:	f000 fd84 	bl	8018718 <prvInitialiseTaskLists>
 8017c10:	e00d      	b.n	8017c2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017c12:	4b25      	ldr	r3, [pc, #148]	; (8017ca8 <prvAddNewTaskToReadyList+0xc8>)
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d109      	bne.n	8017c2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017c1a:	4b22      	ldr	r3, [pc, #136]	; (8017ca4 <prvAddNewTaskToReadyList+0xc4>)
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c24:	429a      	cmp	r2, r3
 8017c26:	d802      	bhi.n	8017c2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017c28:	4a1e      	ldr	r2, [pc, #120]	; (8017ca4 <prvAddNewTaskToReadyList+0xc4>)
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017c2e:	4b1f      	ldr	r3, [pc, #124]	; (8017cac <prvAddNewTaskToReadyList+0xcc>)
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	3301      	adds	r3, #1
 8017c34:	4a1d      	ldr	r2, [pc, #116]	; (8017cac <prvAddNewTaskToReadyList+0xcc>)
 8017c36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017c38:	4b1c      	ldr	r3, [pc, #112]	; (8017cac <prvAddNewTaskToReadyList+0xcc>)
 8017c3a:	681a      	ldr	r2, [r3, #0]
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c44:	2201      	movs	r2, #1
 8017c46:	409a      	lsls	r2, r3
 8017c48:	4b19      	ldr	r3, [pc, #100]	; (8017cb0 <prvAddNewTaskToReadyList+0xd0>)
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	4313      	orrs	r3, r2
 8017c4e:	4a18      	ldr	r2, [pc, #96]	; (8017cb0 <prvAddNewTaskToReadyList+0xd0>)
 8017c50:	6013      	str	r3, [r2, #0]
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c56:	4613      	mov	r3, r2
 8017c58:	009b      	lsls	r3, r3, #2
 8017c5a:	4413      	add	r3, r2
 8017c5c:	009b      	lsls	r3, r3, #2
 8017c5e:	4a15      	ldr	r2, [pc, #84]	; (8017cb4 <prvAddNewTaskToReadyList+0xd4>)
 8017c60:	441a      	add	r2, r3
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	3304      	adds	r3, #4
 8017c66:	4619      	mov	r1, r3
 8017c68:	4610      	mov	r0, r2
 8017c6a:	f7fe ff4e 	bl	8016b0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017c6e:	f001 fc99 	bl	80195a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017c72:	4b0d      	ldr	r3, [pc, #52]	; (8017ca8 <prvAddNewTaskToReadyList+0xc8>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d00e      	beq.n	8017c98 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017c7a:	4b0a      	ldr	r3, [pc, #40]	; (8017ca4 <prvAddNewTaskToReadyList+0xc4>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c84:	429a      	cmp	r2, r3
 8017c86:	d207      	bcs.n	8017c98 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017c88:	4b0b      	ldr	r3, [pc, #44]	; (8017cb8 <prvAddNewTaskToReadyList+0xd8>)
 8017c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c8e:	601a      	str	r2, [r3, #0]
 8017c90:	f3bf 8f4f 	dsb	sy
 8017c94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017c98:	bf00      	nop
 8017c9a:	3708      	adds	r7, #8
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd80      	pop	{r7, pc}
 8017ca0:	20000de4 	.word	0x20000de4
 8017ca4:	20000ce4 	.word	0x20000ce4
 8017ca8:	20000df0 	.word	0x20000df0
 8017cac:	20000e00 	.word	0x20000e00
 8017cb0:	20000dec 	.word	0x20000dec
 8017cb4:	20000ce8 	.word	0x20000ce8
 8017cb8:	e000ed04 	.word	0xe000ed04

08017cbc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b084      	sub	sp, #16
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8017cc4:	f001 fc3e 	bl	8019544 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d102      	bne.n	8017cd4 <vTaskSuspend+0x18>
 8017cce:	4b3c      	ldr	r3, [pc, #240]	; (8017dc0 <vTaskSuspend+0x104>)
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	e000      	b.n	8017cd6 <vTaskSuspend+0x1a>
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	3304      	adds	r3, #4
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f7fe ff71 	bl	8016bc4 <uxListRemove>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d115      	bne.n	8017d14 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cec:	4935      	ldr	r1, [pc, #212]	; (8017dc4 <vTaskSuspend+0x108>)
 8017cee:	4613      	mov	r3, r2
 8017cf0:	009b      	lsls	r3, r3, #2
 8017cf2:	4413      	add	r3, r2
 8017cf4:	009b      	lsls	r3, r3, #2
 8017cf6:	440b      	add	r3, r1
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d10a      	bne.n	8017d14 <vTaskSuspend+0x58>
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d02:	2201      	movs	r2, #1
 8017d04:	fa02 f303 	lsl.w	r3, r2, r3
 8017d08:	43da      	mvns	r2, r3
 8017d0a:	4b2f      	ldr	r3, [pc, #188]	; (8017dc8 <vTaskSuspend+0x10c>)
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	4013      	ands	r3, r2
 8017d10:	4a2d      	ldr	r2, [pc, #180]	; (8017dc8 <vTaskSuspend+0x10c>)
 8017d12:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d004      	beq.n	8017d26 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	3318      	adds	r3, #24
 8017d20:	4618      	mov	r0, r3
 8017d22:	f7fe ff4f 	bl	8016bc4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	3304      	adds	r3, #4
 8017d2a:	4619      	mov	r1, r3
 8017d2c:	4827      	ldr	r0, [pc, #156]	; (8017dcc <vTaskSuspend+0x110>)
 8017d2e:	f7fe feec 	bl	8016b0a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	2b01      	cmp	r3, #1
 8017d3c:	d103      	bne.n	8017d46 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	2200      	movs	r2, #0
 8017d42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8017d46:	f001 fc2d 	bl	80195a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8017d4a:	4b21      	ldr	r3, [pc, #132]	; (8017dd0 <vTaskSuspend+0x114>)
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d005      	beq.n	8017d5e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8017d52:	f001 fbf7 	bl	8019544 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8017d56:	f000 fd5d 	bl	8018814 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8017d5a:	f001 fc23 	bl	80195a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8017d5e:	4b18      	ldr	r3, [pc, #96]	; (8017dc0 <vTaskSuspend+0x104>)
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	68fa      	ldr	r2, [r7, #12]
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d127      	bne.n	8017db8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8017d68:	4b19      	ldr	r3, [pc, #100]	; (8017dd0 <vTaskSuspend+0x114>)
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d017      	beq.n	8017da0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8017d70:	4b18      	ldr	r3, [pc, #96]	; (8017dd4 <vTaskSuspend+0x118>)
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d00a      	beq.n	8017d8e <vTaskSuspend+0xd2>
	__asm volatile
 8017d78:	f04f 0320 	mov.w	r3, #32
 8017d7c:	f383 8811 	msr	BASEPRI, r3
 8017d80:	f3bf 8f6f 	isb	sy
 8017d84:	f3bf 8f4f 	dsb	sy
 8017d88:	60bb      	str	r3, [r7, #8]
}
 8017d8a:	bf00      	nop
 8017d8c:	e7fe      	b.n	8017d8c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8017d8e:	4b12      	ldr	r3, [pc, #72]	; (8017dd8 <vTaskSuspend+0x11c>)
 8017d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d94:	601a      	str	r2, [r3, #0]
 8017d96:	f3bf 8f4f 	dsb	sy
 8017d9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017d9e:	e00b      	b.n	8017db8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8017da0:	4b0a      	ldr	r3, [pc, #40]	; (8017dcc <vTaskSuspend+0x110>)
 8017da2:	681a      	ldr	r2, [r3, #0]
 8017da4:	4b0d      	ldr	r3, [pc, #52]	; (8017ddc <vTaskSuspend+0x120>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	429a      	cmp	r2, r3
 8017daa:	d103      	bne.n	8017db4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8017dac:	4b04      	ldr	r3, [pc, #16]	; (8017dc0 <vTaskSuspend+0x104>)
 8017dae:	2200      	movs	r2, #0
 8017db0:	601a      	str	r2, [r3, #0]
	}
 8017db2:	e001      	b.n	8017db8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8017db4:	f000 fafa 	bl	80183ac <vTaskSwitchContext>
	}
 8017db8:	bf00      	nop
 8017dba:	3710      	adds	r7, #16
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}
 8017dc0:	20000ce4 	.word	0x20000ce4
 8017dc4:	20000ce8 	.word	0x20000ce8
 8017dc8:	20000dec 	.word	0x20000dec
 8017dcc:	20000dd0 	.word	0x20000dd0
 8017dd0:	20000df0 	.word	0x20000df0
 8017dd4:	20000e0c 	.word	0x20000e0c
 8017dd8:	e000ed04 	.word	0xe000ed04
 8017ddc:	20000de4 	.word	0x20000de4

08017de0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8017de0:	b480      	push	{r7}
 8017de2:	b087      	sub	sp, #28
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8017de8:	2300      	movs	r3, #0
 8017dea:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d10a      	bne.n	8017e0c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8017df6:	f04f 0320 	mov.w	r3, #32
 8017dfa:	f383 8811 	msr	BASEPRI, r3
 8017dfe:	f3bf 8f6f 	isb	sy
 8017e02:	f3bf 8f4f 	dsb	sy
 8017e06:	60fb      	str	r3, [r7, #12]
}
 8017e08:	bf00      	nop
 8017e0a:	e7fe      	b.n	8017e0a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017e0c:	693b      	ldr	r3, [r7, #16]
 8017e0e:	695b      	ldr	r3, [r3, #20]
 8017e10:	4a0a      	ldr	r2, [pc, #40]	; (8017e3c <prvTaskIsTaskSuspended+0x5c>)
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d10a      	bne.n	8017e2c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8017e16:	693b      	ldr	r3, [r7, #16]
 8017e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e1a:	4a09      	ldr	r2, [pc, #36]	; (8017e40 <prvTaskIsTaskSuspended+0x60>)
 8017e1c:	4293      	cmp	r3, r2
 8017e1e:	d005      	beq.n	8017e2c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8017e20:	693b      	ldr	r3, [r7, #16]
 8017e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d101      	bne.n	8017e2c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8017e28:	2301      	movs	r3, #1
 8017e2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017e2c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017e2e:	4618      	mov	r0, r3
 8017e30:	371c      	adds	r7, #28
 8017e32:	46bd      	mov	sp, r7
 8017e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e38:	4770      	bx	lr
 8017e3a:	bf00      	nop
 8017e3c:	20000dd0 	.word	0x20000dd0
 8017e40:	20000da4 	.word	0x20000da4

08017e44 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b084      	sub	sp, #16
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d10a      	bne.n	8017e6c <vTaskResume+0x28>
	__asm volatile
 8017e56:	f04f 0320 	mov.w	r3, #32
 8017e5a:	f383 8811 	msr	BASEPRI, r3
 8017e5e:	f3bf 8f6f 	isb	sy
 8017e62:	f3bf 8f4f 	dsb	sy
 8017e66:	60bb      	str	r3, [r7, #8]
}
 8017e68:	bf00      	nop
 8017e6a:	e7fe      	b.n	8017e6a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8017e6c:	4b20      	ldr	r3, [pc, #128]	; (8017ef0 <vTaskResume+0xac>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	68fa      	ldr	r2, [r7, #12]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d037      	beq.n	8017ee6 <vTaskResume+0xa2>
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d034      	beq.n	8017ee6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8017e7c:	f001 fb62 	bl	8019544 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8017e80:	68f8      	ldr	r0, [r7, #12]
 8017e82:	f7ff ffad 	bl	8017de0 <prvTaskIsTaskSuspended>
 8017e86:	4603      	mov	r3, r0
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d02a      	beq.n	8017ee2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	3304      	adds	r3, #4
 8017e90:	4618      	mov	r0, r3
 8017e92:	f7fe fe97 	bl	8016bc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e9a:	2201      	movs	r2, #1
 8017e9c:	409a      	lsls	r2, r3
 8017e9e:	4b15      	ldr	r3, [pc, #84]	; (8017ef4 <vTaskResume+0xb0>)
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	4313      	orrs	r3, r2
 8017ea4:	4a13      	ldr	r2, [pc, #76]	; (8017ef4 <vTaskResume+0xb0>)
 8017ea6:	6013      	str	r3, [r2, #0]
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017eac:	4613      	mov	r3, r2
 8017eae:	009b      	lsls	r3, r3, #2
 8017eb0:	4413      	add	r3, r2
 8017eb2:	009b      	lsls	r3, r3, #2
 8017eb4:	4a10      	ldr	r2, [pc, #64]	; (8017ef8 <vTaskResume+0xb4>)
 8017eb6:	441a      	add	r2, r3
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	3304      	adds	r3, #4
 8017ebc:	4619      	mov	r1, r3
 8017ebe:	4610      	mov	r0, r2
 8017ec0:	f7fe fe23 	bl	8016b0a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ec8:	4b09      	ldr	r3, [pc, #36]	; (8017ef0 <vTaskResume+0xac>)
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	d307      	bcc.n	8017ee2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8017ed2:	4b0a      	ldr	r3, [pc, #40]	; (8017efc <vTaskResume+0xb8>)
 8017ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ed8:	601a      	str	r2, [r3, #0]
 8017eda:	f3bf 8f4f 	dsb	sy
 8017ede:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8017ee2:	f001 fb5f 	bl	80195a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017ee6:	bf00      	nop
 8017ee8:	3710      	adds	r7, #16
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bd80      	pop	{r7, pc}
 8017eee:	bf00      	nop
 8017ef0:	20000ce4 	.word	0x20000ce4
 8017ef4:	20000dec 	.word	0x20000dec
 8017ef8:	20000ce8 	.word	0x20000ce8
 8017efc:	e000ed04 	.word	0xe000ed04

08017f00 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b08a      	sub	sp, #40	; 0x28
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8017f08:	2300      	movs	r3, #0
 8017f0a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d10a      	bne.n	8017f2c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8017f16:	f04f 0320 	mov.w	r3, #32
 8017f1a:	f383 8811 	msr	BASEPRI, r3
 8017f1e:	f3bf 8f6f 	isb	sy
 8017f22:	f3bf 8f4f 	dsb	sy
 8017f26:	61bb      	str	r3, [r7, #24]
}
 8017f28:	bf00      	nop
 8017f2a:	e7fe      	b.n	8017f2a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017f2c:	f001 fbec 	bl	8019708 <vPortValidateInterruptPriority>
	__asm volatile
 8017f30:	f3ef 8211 	mrs	r2, BASEPRI
 8017f34:	f04f 0320 	mov.w	r3, #32
 8017f38:	f383 8811 	msr	BASEPRI, r3
 8017f3c:	f3bf 8f6f 	isb	sy
 8017f40:	f3bf 8f4f 	dsb	sy
 8017f44:	617a      	str	r2, [r7, #20]
 8017f46:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017f48:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017f4a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8017f4c:	6a38      	ldr	r0, [r7, #32]
 8017f4e:	f7ff ff47 	bl	8017de0 <prvTaskIsTaskSuspended>
 8017f52:	4603      	mov	r3, r0
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d02f      	beq.n	8017fb8 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017f58:	4b1d      	ldr	r3, [pc, #116]	; (8017fd0 <xTaskResumeFromISR+0xd0>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d125      	bne.n	8017fac <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017f60:	6a3b      	ldr	r3, [r7, #32]
 8017f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f64:	4b1b      	ldr	r3, [pc, #108]	; (8017fd4 <xTaskResumeFromISR+0xd4>)
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d301      	bcc.n	8017f72 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8017f6e:	2301      	movs	r3, #1
 8017f70:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017f72:	6a3b      	ldr	r3, [r7, #32]
 8017f74:	3304      	adds	r3, #4
 8017f76:	4618      	mov	r0, r3
 8017f78:	f7fe fe24 	bl	8016bc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017f7c:	6a3b      	ldr	r3, [r7, #32]
 8017f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f80:	2201      	movs	r2, #1
 8017f82:	409a      	lsls	r2, r3
 8017f84:	4b14      	ldr	r3, [pc, #80]	; (8017fd8 <xTaskResumeFromISR+0xd8>)
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	4313      	orrs	r3, r2
 8017f8a:	4a13      	ldr	r2, [pc, #76]	; (8017fd8 <xTaskResumeFromISR+0xd8>)
 8017f8c:	6013      	str	r3, [r2, #0]
 8017f8e:	6a3b      	ldr	r3, [r7, #32]
 8017f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f92:	4613      	mov	r3, r2
 8017f94:	009b      	lsls	r3, r3, #2
 8017f96:	4413      	add	r3, r2
 8017f98:	009b      	lsls	r3, r3, #2
 8017f9a:	4a10      	ldr	r2, [pc, #64]	; (8017fdc <xTaskResumeFromISR+0xdc>)
 8017f9c:	441a      	add	r2, r3
 8017f9e:	6a3b      	ldr	r3, [r7, #32]
 8017fa0:	3304      	adds	r3, #4
 8017fa2:	4619      	mov	r1, r3
 8017fa4:	4610      	mov	r0, r2
 8017fa6:	f7fe fdb0 	bl	8016b0a <vListInsertEnd>
 8017faa:	e005      	b.n	8017fb8 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8017fac:	6a3b      	ldr	r3, [r7, #32]
 8017fae:	3318      	adds	r3, #24
 8017fb0:	4619      	mov	r1, r3
 8017fb2:	480b      	ldr	r0, [pc, #44]	; (8017fe0 <xTaskResumeFromISR+0xe0>)
 8017fb4:	f7fe fda9 	bl	8016b0a <vListInsertEnd>
 8017fb8:	69fb      	ldr	r3, [r7, #28]
 8017fba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	f383 8811 	msr	BASEPRI, r3
}
 8017fc2:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8017fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	3728      	adds	r7, #40	; 0x28
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd80      	pop	{r7, pc}
 8017fce:	bf00      	nop
 8017fd0:	20000e0c 	.word	0x20000e0c
 8017fd4:	20000ce4 	.word	0x20000ce4
 8017fd8:	20000dec 	.word	0x20000dec
 8017fdc:	20000ce8 	.word	0x20000ce8
 8017fe0:	20000da4 	.word	0x20000da4

08017fe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b086      	sub	sp, #24
 8017fe8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8017fea:	4b22      	ldr	r3, [pc, #136]	; (8018074 <vTaskStartScheduler+0x90>)
 8017fec:	9301      	str	r3, [sp, #4]
 8017fee:	2300      	movs	r3, #0
 8017ff0:	9300      	str	r3, [sp, #0]
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	2280      	movs	r2, #128	; 0x80
 8017ff6:	4920      	ldr	r1, [pc, #128]	; (8018078 <vTaskStartScheduler+0x94>)
 8017ff8:	4820      	ldr	r0, [pc, #128]	; (801807c <vTaskStartScheduler+0x98>)
 8017ffa:	f7ff fd1d 	bl	8017a38 <xTaskCreate>
 8017ffe:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	2b01      	cmp	r3, #1
 8018004:	d102      	bne.n	801800c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8018006:	f000 fe5d 	bl	8018cc4 <xTimerCreateTimerTask>
 801800a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	2b01      	cmp	r3, #1
 8018010:	d11c      	bne.n	801804c <vTaskStartScheduler+0x68>
	__asm volatile
 8018012:	f04f 0320 	mov.w	r3, #32
 8018016:	f383 8811 	msr	BASEPRI, r3
 801801a:	f3bf 8f6f 	isb	sy
 801801e:	f3bf 8f4f 	dsb	sy
 8018022:	60bb      	str	r3, [r7, #8]
}
 8018024:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018026:	4b16      	ldr	r3, [pc, #88]	; (8018080 <vTaskStartScheduler+0x9c>)
 8018028:	f04f 32ff 	mov.w	r2, #4294967295
 801802c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801802e:	4b15      	ldr	r3, [pc, #84]	; (8018084 <vTaskStartScheduler+0xa0>)
 8018030:	2201      	movs	r2, #1
 8018032:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018034:	4b14      	ldr	r3, [pc, #80]	; (8018088 <vTaskStartScheduler+0xa4>)
 8018036:	2200      	movs	r2, #0
 8018038:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 801803a:	4b14      	ldr	r3, [pc, #80]	; (801808c <vTaskStartScheduler+0xa8>)
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018040:	4618      	mov	r0, r3
 8018042:	f7ed ff1b 	bl	8005e7c <BSP_DEBUG_PIN_On>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018046:	f001 f9db 	bl	8019400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801804a:	e00e      	b.n	801806a <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018052:	d10a      	bne.n	801806a <vTaskStartScheduler+0x86>
	__asm volatile
 8018054:	f04f 0320 	mov.w	r3, #32
 8018058:	f383 8811 	msr	BASEPRI, r3
 801805c:	f3bf 8f6f 	isb	sy
 8018060:	f3bf 8f4f 	dsb	sy
 8018064:	607b      	str	r3, [r7, #4]
}
 8018066:	bf00      	nop
 8018068:	e7fe      	b.n	8018068 <vTaskStartScheduler+0x84>
}
 801806a:	bf00      	nop
 801806c:	3710      	adds	r7, #16
 801806e:	46bd      	mov	sp, r7
 8018070:	bd80      	pop	{r7, pc}
 8018072:	bf00      	nop
 8018074:	20000e08 	.word	0x20000e08
 8018078:	08021894 	.word	0x08021894
 801807c:	080186e5 	.word	0x080186e5
 8018080:	20000e04 	.word	0x20000e04
 8018084:	20000df0 	.word	0x20000df0
 8018088:	20000de8 	.word	0x20000de8
 801808c:	20000ce4 	.word	0x20000ce4

08018090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018090:	b480      	push	{r7}
 8018092:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8018094:	4b04      	ldr	r3, [pc, #16]	; (80180a8 <vTaskSuspendAll+0x18>)
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	3301      	adds	r3, #1
 801809a:	4a03      	ldr	r2, [pc, #12]	; (80180a8 <vTaskSuspendAll+0x18>)
 801809c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801809e:	bf00      	nop
 80180a0:	46bd      	mov	sp, r7
 80180a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a6:	4770      	bx	lr
 80180a8:	20000e0c 	.word	0x20000e0c

080180ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b084      	sub	sp, #16
 80180b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80180b2:	2300      	movs	r3, #0
 80180b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80180b6:	2300      	movs	r3, #0
 80180b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80180ba:	4b41      	ldr	r3, [pc, #260]	; (80181c0 <xTaskResumeAll+0x114>)
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d10a      	bne.n	80180d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80180c2:	f04f 0320 	mov.w	r3, #32
 80180c6:	f383 8811 	msr	BASEPRI, r3
 80180ca:	f3bf 8f6f 	isb	sy
 80180ce:	f3bf 8f4f 	dsb	sy
 80180d2:	603b      	str	r3, [r7, #0]
}
 80180d4:	bf00      	nop
 80180d6:	e7fe      	b.n	80180d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80180d8:	f001 fa34 	bl	8019544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80180dc:	4b38      	ldr	r3, [pc, #224]	; (80181c0 <xTaskResumeAll+0x114>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	3b01      	subs	r3, #1
 80180e2:	4a37      	ldr	r2, [pc, #220]	; (80181c0 <xTaskResumeAll+0x114>)
 80180e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80180e6:	4b36      	ldr	r3, [pc, #216]	; (80181c0 <xTaskResumeAll+0x114>)
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d161      	bne.n	80181b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80180ee:	4b35      	ldr	r3, [pc, #212]	; (80181c4 <xTaskResumeAll+0x118>)
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d05d      	beq.n	80181b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80180f6:	e02e      	b.n	8018156 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80180f8:	4b33      	ldr	r3, [pc, #204]	; (80181c8 <xTaskResumeAll+0x11c>)
 80180fa:	68db      	ldr	r3, [r3, #12]
 80180fc:	68db      	ldr	r3, [r3, #12]
 80180fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	3318      	adds	r3, #24
 8018104:	4618      	mov	r0, r3
 8018106:	f7fe fd5d 	bl	8016bc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	3304      	adds	r3, #4
 801810e:	4618      	mov	r0, r3
 8018110:	f7fe fd58 	bl	8016bc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018118:	2201      	movs	r2, #1
 801811a:	409a      	lsls	r2, r3
 801811c:	4b2b      	ldr	r3, [pc, #172]	; (80181cc <xTaskResumeAll+0x120>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	4313      	orrs	r3, r2
 8018122:	4a2a      	ldr	r2, [pc, #168]	; (80181cc <xTaskResumeAll+0x120>)
 8018124:	6013      	str	r3, [r2, #0]
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801812a:	4613      	mov	r3, r2
 801812c:	009b      	lsls	r3, r3, #2
 801812e:	4413      	add	r3, r2
 8018130:	009b      	lsls	r3, r3, #2
 8018132:	4a27      	ldr	r2, [pc, #156]	; (80181d0 <xTaskResumeAll+0x124>)
 8018134:	441a      	add	r2, r3
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	3304      	adds	r3, #4
 801813a:	4619      	mov	r1, r3
 801813c:	4610      	mov	r0, r2
 801813e:	f7fe fce4 	bl	8016b0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018146:	4b23      	ldr	r3, [pc, #140]	; (80181d4 <xTaskResumeAll+0x128>)
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801814c:	429a      	cmp	r2, r3
 801814e:	d302      	bcc.n	8018156 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8018150:	4b21      	ldr	r3, [pc, #132]	; (80181d8 <xTaskResumeAll+0x12c>)
 8018152:	2201      	movs	r2, #1
 8018154:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018156:	4b1c      	ldr	r3, [pc, #112]	; (80181c8 <xTaskResumeAll+0x11c>)
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d1cc      	bne.n	80180f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d001      	beq.n	8018168 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018164:	f000 fb56 	bl	8018814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8018168:	4b1c      	ldr	r3, [pc, #112]	; (80181dc <xTaskResumeAll+0x130>)
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d010      	beq.n	8018196 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018174:	f000 f846 	bl	8018204 <xTaskIncrementTick>
 8018178:	4603      	mov	r3, r0
 801817a:	2b00      	cmp	r3, #0
 801817c:	d002      	beq.n	8018184 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801817e:	4b16      	ldr	r3, [pc, #88]	; (80181d8 <xTaskResumeAll+0x12c>)
 8018180:	2201      	movs	r2, #1
 8018182:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	3b01      	subs	r3, #1
 8018188:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d1f1      	bne.n	8018174 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8018190:	4b12      	ldr	r3, [pc, #72]	; (80181dc <xTaskResumeAll+0x130>)
 8018192:	2200      	movs	r2, #0
 8018194:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018196:	4b10      	ldr	r3, [pc, #64]	; (80181d8 <xTaskResumeAll+0x12c>)
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d009      	beq.n	80181b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801819e:	2301      	movs	r3, #1
 80181a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80181a2:	4b0f      	ldr	r3, [pc, #60]	; (80181e0 <xTaskResumeAll+0x134>)
 80181a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181a8:	601a      	str	r2, [r3, #0]
 80181aa:	f3bf 8f4f 	dsb	sy
 80181ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80181b2:	f001 f9f7 	bl	80195a4 <vPortExitCritical>

	return xAlreadyYielded;
 80181b6:	68bb      	ldr	r3, [r7, #8]
}
 80181b8:	4618      	mov	r0, r3
 80181ba:	3710      	adds	r7, #16
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}
 80181c0:	20000e0c 	.word	0x20000e0c
 80181c4:	20000de4 	.word	0x20000de4
 80181c8:	20000da4 	.word	0x20000da4
 80181cc:	20000dec 	.word	0x20000dec
 80181d0:	20000ce8 	.word	0x20000ce8
 80181d4:	20000ce4 	.word	0x20000ce4
 80181d8:	20000df8 	.word	0x20000df8
 80181dc:	20000df4 	.word	0x20000df4
 80181e0:	e000ed04 	.word	0xe000ed04

080181e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80181e4:	b480      	push	{r7}
 80181e6:	b083      	sub	sp, #12
 80181e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80181ea:	4b05      	ldr	r3, [pc, #20]	; (8018200 <xTaskGetTickCount+0x1c>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80181f0:	687b      	ldr	r3, [r7, #4]
}
 80181f2:	4618      	mov	r0, r3
 80181f4:	370c      	adds	r7, #12
 80181f6:	46bd      	mov	sp, r7
 80181f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fc:	4770      	bx	lr
 80181fe:	bf00      	nop
 8018200:	20000de8 	.word	0x20000de8

08018204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b086      	sub	sp, #24
 8018208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801820a:	2300      	movs	r3, #0
 801820c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801820e:	4b4e      	ldr	r3, [pc, #312]	; (8018348 <xTaskIncrementTick+0x144>)
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	2b00      	cmp	r3, #0
 8018214:	f040 8088 	bne.w	8018328 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018218:	4b4c      	ldr	r3, [pc, #304]	; (801834c <xTaskIncrementTick+0x148>)
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	3301      	adds	r3, #1
 801821e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018220:	4a4a      	ldr	r2, [pc, #296]	; (801834c <xTaskIncrementTick+0x148>)
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018226:	693b      	ldr	r3, [r7, #16]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d120      	bne.n	801826e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801822c:	4b48      	ldr	r3, [pc, #288]	; (8018350 <xTaskIncrementTick+0x14c>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d00a      	beq.n	801824c <xTaskIncrementTick+0x48>
	__asm volatile
 8018236:	f04f 0320 	mov.w	r3, #32
 801823a:	f383 8811 	msr	BASEPRI, r3
 801823e:	f3bf 8f6f 	isb	sy
 8018242:	f3bf 8f4f 	dsb	sy
 8018246:	603b      	str	r3, [r7, #0]
}
 8018248:	bf00      	nop
 801824a:	e7fe      	b.n	801824a <xTaskIncrementTick+0x46>
 801824c:	4b40      	ldr	r3, [pc, #256]	; (8018350 <xTaskIncrementTick+0x14c>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	60fb      	str	r3, [r7, #12]
 8018252:	4b40      	ldr	r3, [pc, #256]	; (8018354 <xTaskIncrementTick+0x150>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	4a3e      	ldr	r2, [pc, #248]	; (8018350 <xTaskIncrementTick+0x14c>)
 8018258:	6013      	str	r3, [r2, #0]
 801825a:	4a3e      	ldr	r2, [pc, #248]	; (8018354 <xTaskIncrementTick+0x150>)
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	6013      	str	r3, [r2, #0]
 8018260:	4b3d      	ldr	r3, [pc, #244]	; (8018358 <xTaskIncrementTick+0x154>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	3301      	adds	r3, #1
 8018266:	4a3c      	ldr	r2, [pc, #240]	; (8018358 <xTaskIncrementTick+0x154>)
 8018268:	6013      	str	r3, [r2, #0]
 801826a:	f000 fad3 	bl	8018814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801826e:	4b3b      	ldr	r3, [pc, #236]	; (801835c <xTaskIncrementTick+0x158>)
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	693a      	ldr	r2, [r7, #16]
 8018274:	429a      	cmp	r2, r3
 8018276:	d348      	bcc.n	801830a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018278:	4b35      	ldr	r3, [pc, #212]	; (8018350 <xTaskIncrementTick+0x14c>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d104      	bne.n	801828c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018282:	4b36      	ldr	r3, [pc, #216]	; (801835c <xTaskIncrementTick+0x158>)
 8018284:	f04f 32ff 	mov.w	r2, #4294967295
 8018288:	601a      	str	r2, [r3, #0]
					break;
 801828a:	e03e      	b.n	801830a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801828c:	4b30      	ldr	r3, [pc, #192]	; (8018350 <xTaskIncrementTick+0x14c>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	68db      	ldr	r3, [r3, #12]
 8018292:	68db      	ldr	r3, [r3, #12]
 8018294:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	685b      	ldr	r3, [r3, #4]
 801829a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801829c:	693a      	ldr	r2, [r7, #16]
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	429a      	cmp	r2, r3
 80182a2:	d203      	bcs.n	80182ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80182a4:	4a2d      	ldr	r2, [pc, #180]	; (801835c <xTaskIncrementTick+0x158>)
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80182aa:	e02e      	b.n	801830a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80182ac:	68bb      	ldr	r3, [r7, #8]
 80182ae:	3304      	adds	r3, #4
 80182b0:	4618      	mov	r0, r3
 80182b2:	f7fe fc87 	bl	8016bc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80182b6:	68bb      	ldr	r3, [r7, #8]
 80182b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d004      	beq.n	80182c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	3318      	adds	r3, #24
 80182c2:	4618      	mov	r0, r3
 80182c4:	f7fe fc7e 	bl	8016bc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80182c8:	68bb      	ldr	r3, [r7, #8]
 80182ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182cc:	2201      	movs	r2, #1
 80182ce:	409a      	lsls	r2, r3
 80182d0:	4b23      	ldr	r3, [pc, #140]	; (8018360 <xTaskIncrementTick+0x15c>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	4313      	orrs	r3, r2
 80182d6:	4a22      	ldr	r2, [pc, #136]	; (8018360 <xTaskIncrementTick+0x15c>)
 80182d8:	6013      	str	r3, [r2, #0]
 80182da:	68bb      	ldr	r3, [r7, #8]
 80182dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182de:	4613      	mov	r3, r2
 80182e0:	009b      	lsls	r3, r3, #2
 80182e2:	4413      	add	r3, r2
 80182e4:	009b      	lsls	r3, r3, #2
 80182e6:	4a1f      	ldr	r2, [pc, #124]	; (8018364 <xTaskIncrementTick+0x160>)
 80182e8:	441a      	add	r2, r3
 80182ea:	68bb      	ldr	r3, [r7, #8]
 80182ec:	3304      	adds	r3, #4
 80182ee:	4619      	mov	r1, r3
 80182f0:	4610      	mov	r0, r2
 80182f2:	f7fe fc0a 	bl	8016b0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182fa:	4b1b      	ldr	r3, [pc, #108]	; (8018368 <xTaskIncrementTick+0x164>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018300:	429a      	cmp	r2, r3
 8018302:	d3b9      	bcc.n	8018278 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018304:	2301      	movs	r3, #1
 8018306:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018308:	e7b6      	b.n	8018278 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801830a:	4b17      	ldr	r3, [pc, #92]	; (8018368 <xTaskIncrementTick+0x164>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018310:	4914      	ldr	r1, [pc, #80]	; (8018364 <xTaskIncrementTick+0x160>)
 8018312:	4613      	mov	r3, r2
 8018314:	009b      	lsls	r3, r3, #2
 8018316:	4413      	add	r3, r2
 8018318:	009b      	lsls	r3, r3, #2
 801831a:	440b      	add	r3, r1
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2b01      	cmp	r3, #1
 8018320:	d907      	bls.n	8018332 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8018322:	2301      	movs	r3, #1
 8018324:	617b      	str	r3, [r7, #20]
 8018326:	e004      	b.n	8018332 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8018328:	4b10      	ldr	r3, [pc, #64]	; (801836c <xTaskIncrementTick+0x168>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	3301      	adds	r3, #1
 801832e:	4a0f      	ldr	r2, [pc, #60]	; (801836c <xTaskIncrementTick+0x168>)
 8018330:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8018332:	4b0f      	ldr	r3, [pc, #60]	; (8018370 <xTaskIncrementTick+0x16c>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d001      	beq.n	801833e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801833a:	2301      	movs	r3, #1
 801833c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801833e:	697b      	ldr	r3, [r7, #20]
}
 8018340:	4618      	mov	r0, r3
 8018342:	3718      	adds	r7, #24
 8018344:	46bd      	mov	sp, r7
 8018346:	bd80      	pop	{r7, pc}
 8018348:	20000e0c 	.word	0x20000e0c
 801834c:	20000de8 	.word	0x20000de8
 8018350:	20000d9c 	.word	0x20000d9c
 8018354:	20000da0 	.word	0x20000da0
 8018358:	20000dfc 	.word	0x20000dfc
 801835c:	20000e04 	.word	0x20000e04
 8018360:	20000dec 	.word	0x20000dec
 8018364:	20000ce8 	.word	0x20000ce8
 8018368:	20000ce4 	.word	0x20000ce4
 801836c:	20000df4 	.word	0x20000df4
 8018370:	20000df8 	.word	0x20000df8

08018374 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8018374:	b580      	push	{r7, lr}
 8018376:	b084      	sub	sp, #16
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
 801837c:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d103      	bne.n	801838c <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8018384:	4b08      	ldr	r3, [pc, #32]	; (80183a8 <vTaskSetApplicationTaskTag+0x34>)
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	60fb      	str	r3, [r7, #12]
 801838a:	e001      	b.n	8018390 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8018390:	f001 f8d8 	bl	8019544 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	683a      	ldr	r2, [r7, #0]
 8018398:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 801839a:	f001 f903 	bl	80195a4 <vPortExitCritical>
	}
 801839e:	bf00      	nop
 80183a0:	3710      	adds	r7, #16
 80183a2:	46bd      	mov	sp, r7
 80183a4:	bd80      	pop	{r7, pc}
 80183a6:	bf00      	nop
 80183a8:	20000ce4 	.word	0x20000ce4

080183ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b086      	sub	sp, #24
 80183b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80183b2:	4b2c      	ldr	r3, [pc, #176]	; (8018464 <vTaskSwitchContext+0xb8>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d003      	beq.n	80183c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80183ba:	4b2b      	ldr	r3, [pc, #172]	; (8018468 <vTaskSwitchContext+0xbc>)
 80183bc:	2201      	movs	r2, #1
 80183be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80183c0:	e04b      	b.n	801845a <vTaskSwitchContext+0xae>
		xYieldPending = pdFALSE;
 80183c2:	4b29      	ldr	r3, [pc, #164]	; (8018468 <vTaskSwitchContext+0xbc>)
 80183c4:	2200      	movs	r2, #0
 80183c6:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80183c8:	4b28      	ldr	r3, [pc, #160]	; (801846c <vTaskSwitchContext+0xc0>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7ed fd6e 	bl	8005eb0 <BSP_DEBUG_PIN_Off>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183d4:	4b26      	ldr	r3, [pc, #152]	; (8018470 <vTaskSwitchContext+0xc4>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	fab3 f383 	clz	r3, r3
 80183e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80183e2:	7afb      	ldrb	r3, [r7, #11]
 80183e4:	f1c3 031f 	rsb	r3, r3, #31
 80183e8:	617b      	str	r3, [r7, #20]
 80183ea:	4922      	ldr	r1, [pc, #136]	; (8018474 <vTaskSwitchContext+0xc8>)
 80183ec:	697a      	ldr	r2, [r7, #20]
 80183ee:	4613      	mov	r3, r2
 80183f0:	009b      	lsls	r3, r3, #2
 80183f2:	4413      	add	r3, r2
 80183f4:	009b      	lsls	r3, r3, #2
 80183f6:	440b      	add	r3, r1
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d10a      	bne.n	8018414 <vTaskSwitchContext+0x68>
	__asm volatile
 80183fe:	f04f 0320 	mov.w	r3, #32
 8018402:	f383 8811 	msr	BASEPRI, r3
 8018406:	f3bf 8f6f 	isb	sy
 801840a:	f3bf 8f4f 	dsb	sy
 801840e:	607b      	str	r3, [r7, #4]
}
 8018410:	bf00      	nop
 8018412:	e7fe      	b.n	8018412 <vTaskSwitchContext+0x66>
 8018414:	697a      	ldr	r2, [r7, #20]
 8018416:	4613      	mov	r3, r2
 8018418:	009b      	lsls	r3, r3, #2
 801841a:	4413      	add	r3, r2
 801841c:	009b      	lsls	r3, r3, #2
 801841e:	4a15      	ldr	r2, [pc, #84]	; (8018474 <vTaskSwitchContext+0xc8>)
 8018420:	4413      	add	r3, r2
 8018422:	613b      	str	r3, [r7, #16]
 8018424:	693b      	ldr	r3, [r7, #16]
 8018426:	685b      	ldr	r3, [r3, #4]
 8018428:	685a      	ldr	r2, [r3, #4]
 801842a:	693b      	ldr	r3, [r7, #16]
 801842c:	605a      	str	r2, [r3, #4]
 801842e:	693b      	ldr	r3, [r7, #16]
 8018430:	685a      	ldr	r2, [r3, #4]
 8018432:	693b      	ldr	r3, [r7, #16]
 8018434:	3308      	adds	r3, #8
 8018436:	429a      	cmp	r2, r3
 8018438:	d104      	bne.n	8018444 <vTaskSwitchContext+0x98>
 801843a:	693b      	ldr	r3, [r7, #16]
 801843c:	685b      	ldr	r3, [r3, #4]
 801843e:	685a      	ldr	r2, [r3, #4]
 8018440:	693b      	ldr	r3, [r7, #16]
 8018442:	605a      	str	r2, [r3, #4]
 8018444:	693b      	ldr	r3, [r7, #16]
 8018446:	685b      	ldr	r3, [r3, #4]
 8018448:	68db      	ldr	r3, [r3, #12]
 801844a:	4a08      	ldr	r2, [pc, #32]	; (801846c <vTaskSwitchContext+0xc0>)
 801844c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801844e:	4b07      	ldr	r3, [pc, #28]	; (801846c <vTaskSwitchContext+0xc0>)
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018454:	4618      	mov	r0, r3
 8018456:	f7ed fd11 	bl	8005e7c <BSP_DEBUG_PIN_On>
}
 801845a:	bf00      	nop
 801845c:	3718      	adds	r7, #24
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}
 8018462:	bf00      	nop
 8018464:	20000e0c 	.word	0x20000e0c
 8018468:	20000df8 	.word	0x20000df8
 801846c:	20000ce4 	.word	0x20000ce4
 8018470:	20000dec 	.word	0x20000dec
 8018474:	20000ce8 	.word	0x20000ce8

08018478 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b084      	sub	sp, #16
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
 8018480:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d10a      	bne.n	801849e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018488:	f04f 0320 	mov.w	r3, #32
 801848c:	f383 8811 	msr	BASEPRI, r3
 8018490:	f3bf 8f6f 	isb	sy
 8018494:	f3bf 8f4f 	dsb	sy
 8018498:	60fb      	str	r3, [r7, #12]
}
 801849a:	bf00      	nop
 801849c:	e7fe      	b.n	801849c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801849e:	4b07      	ldr	r3, [pc, #28]	; (80184bc <vTaskPlaceOnEventList+0x44>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	3318      	adds	r3, #24
 80184a4:	4619      	mov	r1, r3
 80184a6:	6878      	ldr	r0, [r7, #4]
 80184a8:	f7fe fb53 	bl	8016b52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80184ac:	2101      	movs	r1, #1
 80184ae:	6838      	ldr	r0, [r7, #0]
 80184b0:	f000 fba2 	bl	8018bf8 <prvAddCurrentTaskToDelayedList>
}
 80184b4:	bf00      	nop
 80184b6:	3710      	adds	r7, #16
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}
 80184bc:	20000ce4 	.word	0x20000ce4

080184c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b086      	sub	sp, #24
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	60f8      	str	r0, [r7, #12]
 80184c8:	60b9      	str	r1, [r7, #8]
 80184ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d10a      	bne.n	80184e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80184d2:	f04f 0320 	mov.w	r3, #32
 80184d6:	f383 8811 	msr	BASEPRI, r3
 80184da:	f3bf 8f6f 	isb	sy
 80184de:	f3bf 8f4f 	dsb	sy
 80184e2:	617b      	str	r3, [r7, #20]
}
 80184e4:	bf00      	nop
 80184e6:	e7fe      	b.n	80184e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80184e8:	4b0a      	ldr	r3, [pc, #40]	; (8018514 <vTaskPlaceOnEventListRestricted+0x54>)
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	3318      	adds	r3, #24
 80184ee:	4619      	mov	r1, r3
 80184f0:	68f8      	ldr	r0, [r7, #12]
 80184f2:	f7fe fb0a 	bl	8016b0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d002      	beq.n	8018502 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80184fc:	f04f 33ff 	mov.w	r3, #4294967295
 8018500:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018502:	6879      	ldr	r1, [r7, #4]
 8018504:	68b8      	ldr	r0, [r7, #8]
 8018506:	f000 fb77 	bl	8018bf8 <prvAddCurrentTaskToDelayedList>
	}
 801850a:	bf00      	nop
 801850c:	3718      	adds	r7, #24
 801850e:	46bd      	mov	sp, r7
 8018510:	bd80      	pop	{r7, pc}
 8018512:	bf00      	nop
 8018514:	20000ce4 	.word	0x20000ce4

08018518 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b086      	sub	sp, #24
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	68db      	ldr	r3, [r3, #12]
 8018524:	68db      	ldr	r3, [r3, #12]
 8018526:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018528:	693b      	ldr	r3, [r7, #16]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d10a      	bne.n	8018544 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801852e:	f04f 0320 	mov.w	r3, #32
 8018532:	f383 8811 	msr	BASEPRI, r3
 8018536:	f3bf 8f6f 	isb	sy
 801853a:	f3bf 8f4f 	dsb	sy
 801853e:	60fb      	str	r3, [r7, #12]
}
 8018540:	bf00      	nop
 8018542:	e7fe      	b.n	8018542 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018544:	693b      	ldr	r3, [r7, #16]
 8018546:	3318      	adds	r3, #24
 8018548:	4618      	mov	r0, r3
 801854a:	f7fe fb3b 	bl	8016bc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801854e:	4b1d      	ldr	r3, [pc, #116]	; (80185c4 <xTaskRemoveFromEventList+0xac>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d11c      	bne.n	8018590 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018556:	693b      	ldr	r3, [r7, #16]
 8018558:	3304      	adds	r3, #4
 801855a:	4618      	mov	r0, r3
 801855c:	f7fe fb32 	bl	8016bc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018560:	693b      	ldr	r3, [r7, #16]
 8018562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018564:	2201      	movs	r2, #1
 8018566:	409a      	lsls	r2, r3
 8018568:	4b17      	ldr	r3, [pc, #92]	; (80185c8 <xTaskRemoveFromEventList+0xb0>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	4313      	orrs	r3, r2
 801856e:	4a16      	ldr	r2, [pc, #88]	; (80185c8 <xTaskRemoveFromEventList+0xb0>)
 8018570:	6013      	str	r3, [r2, #0]
 8018572:	693b      	ldr	r3, [r7, #16]
 8018574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018576:	4613      	mov	r3, r2
 8018578:	009b      	lsls	r3, r3, #2
 801857a:	4413      	add	r3, r2
 801857c:	009b      	lsls	r3, r3, #2
 801857e:	4a13      	ldr	r2, [pc, #76]	; (80185cc <xTaskRemoveFromEventList+0xb4>)
 8018580:	441a      	add	r2, r3
 8018582:	693b      	ldr	r3, [r7, #16]
 8018584:	3304      	adds	r3, #4
 8018586:	4619      	mov	r1, r3
 8018588:	4610      	mov	r0, r2
 801858a:	f7fe fabe 	bl	8016b0a <vListInsertEnd>
 801858e:	e005      	b.n	801859c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018590:	693b      	ldr	r3, [r7, #16]
 8018592:	3318      	adds	r3, #24
 8018594:	4619      	mov	r1, r3
 8018596:	480e      	ldr	r0, [pc, #56]	; (80185d0 <xTaskRemoveFromEventList+0xb8>)
 8018598:	f7fe fab7 	bl	8016b0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801859c:	693b      	ldr	r3, [r7, #16]
 801859e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185a0:	4b0c      	ldr	r3, [pc, #48]	; (80185d4 <xTaskRemoveFromEventList+0xbc>)
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185a6:	429a      	cmp	r2, r3
 80185a8:	d905      	bls.n	80185b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80185aa:	2301      	movs	r3, #1
 80185ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80185ae:	4b0a      	ldr	r3, [pc, #40]	; (80185d8 <xTaskRemoveFromEventList+0xc0>)
 80185b0:	2201      	movs	r2, #1
 80185b2:	601a      	str	r2, [r3, #0]
 80185b4:	e001      	b.n	80185ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80185b6:	2300      	movs	r3, #0
 80185b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80185ba:	697b      	ldr	r3, [r7, #20]
}
 80185bc:	4618      	mov	r0, r3
 80185be:	3718      	adds	r7, #24
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}
 80185c4:	20000e0c 	.word	0x20000e0c
 80185c8:	20000dec 	.word	0x20000dec
 80185cc:	20000ce8 	.word	0x20000ce8
 80185d0:	20000da4 	.word	0x20000da4
 80185d4:	20000ce4 	.word	0x20000ce4
 80185d8:	20000df8 	.word	0x20000df8

080185dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80185dc:	b480      	push	{r7}
 80185de:	b083      	sub	sp, #12
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80185e4:	4b06      	ldr	r3, [pc, #24]	; (8018600 <vTaskInternalSetTimeOutState+0x24>)
 80185e6:	681a      	ldr	r2, [r3, #0]
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80185ec:	4b05      	ldr	r3, [pc, #20]	; (8018604 <vTaskInternalSetTimeOutState+0x28>)
 80185ee:	681a      	ldr	r2, [r3, #0]
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	605a      	str	r2, [r3, #4]
}
 80185f4:	bf00      	nop
 80185f6:	370c      	adds	r7, #12
 80185f8:	46bd      	mov	sp, r7
 80185fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185fe:	4770      	bx	lr
 8018600:	20000dfc 	.word	0x20000dfc
 8018604:	20000de8 	.word	0x20000de8

08018608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b088      	sub	sp, #32
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
 8018610:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d10a      	bne.n	801862e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018618:	f04f 0320 	mov.w	r3, #32
 801861c:	f383 8811 	msr	BASEPRI, r3
 8018620:	f3bf 8f6f 	isb	sy
 8018624:	f3bf 8f4f 	dsb	sy
 8018628:	613b      	str	r3, [r7, #16]
}
 801862a:	bf00      	nop
 801862c:	e7fe      	b.n	801862c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801862e:	683b      	ldr	r3, [r7, #0]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d10a      	bne.n	801864a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018634:	f04f 0320 	mov.w	r3, #32
 8018638:	f383 8811 	msr	BASEPRI, r3
 801863c:	f3bf 8f6f 	isb	sy
 8018640:	f3bf 8f4f 	dsb	sy
 8018644:	60fb      	str	r3, [r7, #12]
}
 8018646:	bf00      	nop
 8018648:	e7fe      	b.n	8018648 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801864a:	f000 ff7b 	bl	8019544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801864e:	4b1d      	ldr	r3, [pc, #116]	; (80186c4 <xTaskCheckForTimeOut+0xbc>)
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	685b      	ldr	r3, [r3, #4]
 8018658:	69ba      	ldr	r2, [r7, #24]
 801865a:	1ad3      	subs	r3, r2, r3
 801865c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801865e:	683b      	ldr	r3, [r7, #0]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018666:	d102      	bne.n	801866e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018668:	2300      	movs	r3, #0
 801866a:	61fb      	str	r3, [r7, #28]
 801866c:	e023      	b.n	80186b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	681a      	ldr	r2, [r3, #0]
 8018672:	4b15      	ldr	r3, [pc, #84]	; (80186c8 <xTaskCheckForTimeOut+0xc0>)
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	429a      	cmp	r2, r3
 8018678:	d007      	beq.n	801868a <xTaskCheckForTimeOut+0x82>
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	685b      	ldr	r3, [r3, #4]
 801867e:	69ba      	ldr	r2, [r7, #24]
 8018680:	429a      	cmp	r2, r3
 8018682:	d302      	bcc.n	801868a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018684:	2301      	movs	r3, #1
 8018686:	61fb      	str	r3, [r7, #28]
 8018688:	e015      	b.n	80186b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801868a:	683b      	ldr	r3, [r7, #0]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	697a      	ldr	r2, [r7, #20]
 8018690:	429a      	cmp	r2, r3
 8018692:	d20b      	bcs.n	80186ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018694:	683b      	ldr	r3, [r7, #0]
 8018696:	681a      	ldr	r2, [r3, #0]
 8018698:	697b      	ldr	r3, [r7, #20]
 801869a:	1ad2      	subs	r2, r2, r3
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80186a0:	6878      	ldr	r0, [r7, #4]
 80186a2:	f7ff ff9b 	bl	80185dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80186a6:	2300      	movs	r3, #0
 80186a8:	61fb      	str	r3, [r7, #28]
 80186aa:	e004      	b.n	80186b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80186ac:	683b      	ldr	r3, [r7, #0]
 80186ae:	2200      	movs	r2, #0
 80186b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80186b2:	2301      	movs	r3, #1
 80186b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80186b6:	f000 ff75 	bl	80195a4 <vPortExitCritical>

	return xReturn;
 80186ba:	69fb      	ldr	r3, [r7, #28]
}
 80186bc:	4618      	mov	r0, r3
 80186be:	3720      	adds	r7, #32
 80186c0:	46bd      	mov	sp, r7
 80186c2:	bd80      	pop	{r7, pc}
 80186c4:	20000de8 	.word	0x20000de8
 80186c8:	20000dfc 	.word	0x20000dfc

080186cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80186cc:	b480      	push	{r7}
 80186ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80186d0:	4b03      	ldr	r3, [pc, #12]	; (80186e0 <vTaskMissedYield+0x14>)
 80186d2:	2201      	movs	r2, #1
 80186d4:	601a      	str	r2, [r3, #0]
}
 80186d6:	bf00      	nop
 80186d8:	46bd      	mov	sp, r7
 80186da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186de:	4770      	bx	lr
 80186e0:	20000df8 	.word	0x20000df8

080186e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b082      	sub	sp, #8
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80186ec:	f000 f854 	bl	8018798 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80186f0:	4b07      	ldr	r3, [pc, #28]	; (8018710 <prvIdleTask+0x2c>)
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	2b01      	cmp	r3, #1
 80186f6:	d907      	bls.n	8018708 <prvIdleTask+0x24>
			{
				taskYIELD();
 80186f8:	4b06      	ldr	r3, [pc, #24]	; (8018714 <prvIdleTask+0x30>)
 80186fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186fe:	601a      	str	r2, [r3, #0]
 8018700:	f3bf 8f4f 	dsb	sy
 8018704:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8018708:	f7ea fc14 	bl	8002f34 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801870c:	e7ee      	b.n	80186ec <prvIdleTask+0x8>
 801870e:	bf00      	nop
 8018710:	20000ce8 	.word	0x20000ce8
 8018714:	e000ed04 	.word	0xe000ed04

08018718 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801871e:	2300      	movs	r3, #0
 8018720:	607b      	str	r3, [r7, #4]
 8018722:	e00c      	b.n	801873e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018724:	687a      	ldr	r2, [r7, #4]
 8018726:	4613      	mov	r3, r2
 8018728:	009b      	lsls	r3, r3, #2
 801872a:	4413      	add	r3, r2
 801872c:	009b      	lsls	r3, r3, #2
 801872e:	4a12      	ldr	r2, [pc, #72]	; (8018778 <prvInitialiseTaskLists+0x60>)
 8018730:	4413      	add	r3, r2
 8018732:	4618      	mov	r0, r3
 8018734:	f7fe f9bc 	bl	8016ab0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	3301      	adds	r3, #1
 801873c:	607b      	str	r3, [r7, #4]
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	2b06      	cmp	r3, #6
 8018742:	d9ef      	bls.n	8018724 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018744:	480d      	ldr	r0, [pc, #52]	; (801877c <prvInitialiseTaskLists+0x64>)
 8018746:	f7fe f9b3 	bl	8016ab0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801874a:	480d      	ldr	r0, [pc, #52]	; (8018780 <prvInitialiseTaskLists+0x68>)
 801874c:	f7fe f9b0 	bl	8016ab0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018750:	480c      	ldr	r0, [pc, #48]	; (8018784 <prvInitialiseTaskLists+0x6c>)
 8018752:	f7fe f9ad 	bl	8016ab0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018756:	480c      	ldr	r0, [pc, #48]	; (8018788 <prvInitialiseTaskLists+0x70>)
 8018758:	f7fe f9aa 	bl	8016ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801875c:	480b      	ldr	r0, [pc, #44]	; (801878c <prvInitialiseTaskLists+0x74>)
 801875e:	f7fe f9a7 	bl	8016ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018762:	4b0b      	ldr	r3, [pc, #44]	; (8018790 <prvInitialiseTaskLists+0x78>)
 8018764:	4a05      	ldr	r2, [pc, #20]	; (801877c <prvInitialiseTaskLists+0x64>)
 8018766:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018768:	4b0a      	ldr	r3, [pc, #40]	; (8018794 <prvInitialiseTaskLists+0x7c>)
 801876a:	4a05      	ldr	r2, [pc, #20]	; (8018780 <prvInitialiseTaskLists+0x68>)
 801876c:	601a      	str	r2, [r3, #0]
}
 801876e:	bf00      	nop
 8018770:	3708      	adds	r7, #8
 8018772:	46bd      	mov	sp, r7
 8018774:	bd80      	pop	{r7, pc}
 8018776:	bf00      	nop
 8018778:	20000ce8 	.word	0x20000ce8
 801877c:	20000d74 	.word	0x20000d74
 8018780:	20000d88 	.word	0x20000d88
 8018784:	20000da4 	.word	0x20000da4
 8018788:	20000db8 	.word	0x20000db8
 801878c:	20000dd0 	.word	0x20000dd0
 8018790:	20000d9c 	.word	0x20000d9c
 8018794:	20000da0 	.word	0x20000da0

08018798 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018798:	b580      	push	{r7, lr}
 801879a:	b082      	sub	sp, #8
 801879c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801879e:	e019      	b.n	80187d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80187a0:	f000 fed0 	bl	8019544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187a4:	4b10      	ldr	r3, [pc, #64]	; (80187e8 <prvCheckTasksWaitingTermination+0x50>)
 80187a6:	68db      	ldr	r3, [r3, #12]
 80187a8:	68db      	ldr	r3, [r3, #12]
 80187aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	3304      	adds	r3, #4
 80187b0:	4618      	mov	r0, r3
 80187b2:	f7fe fa07 	bl	8016bc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80187b6:	4b0d      	ldr	r3, [pc, #52]	; (80187ec <prvCheckTasksWaitingTermination+0x54>)
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	3b01      	subs	r3, #1
 80187bc:	4a0b      	ldr	r2, [pc, #44]	; (80187ec <prvCheckTasksWaitingTermination+0x54>)
 80187be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80187c0:	4b0b      	ldr	r3, [pc, #44]	; (80187f0 <prvCheckTasksWaitingTermination+0x58>)
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	3b01      	subs	r3, #1
 80187c6:	4a0a      	ldr	r2, [pc, #40]	; (80187f0 <prvCheckTasksWaitingTermination+0x58>)
 80187c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80187ca:	f000 feeb 	bl	80195a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80187ce:	6878      	ldr	r0, [r7, #4]
 80187d0:	f000 f810 	bl	80187f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80187d4:	4b06      	ldr	r3, [pc, #24]	; (80187f0 <prvCheckTasksWaitingTermination+0x58>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d1e1      	bne.n	80187a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80187dc:	bf00      	nop
 80187de:	bf00      	nop
 80187e0:	3708      	adds	r7, #8
 80187e2:	46bd      	mov	sp, r7
 80187e4:	bd80      	pop	{r7, pc}
 80187e6:	bf00      	nop
 80187e8:	20000db8 	.word	0x20000db8
 80187ec:	20000de4 	.word	0x20000de4
 80187f0:	20000dcc 	.word	0x20000dcc

080187f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b082      	sub	sp, #8
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018800:	4618      	mov	r0, r3
 8018802:	f001 f885 	bl	8019910 <vPortFree>
			vPortFree( pxTCB );
 8018806:	6878      	ldr	r0, [r7, #4]
 8018808:	f001 f882 	bl	8019910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801880c:	bf00      	nop
 801880e:	3708      	adds	r7, #8
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}

08018814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018814:	b480      	push	{r7}
 8018816:	b083      	sub	sp, #12
 8018818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801881a:	4b0c      	ldr	r3, [pc, #48]	; (801884c <prvResetNextTaskUnblockTime+0x38>)
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d104      	bne.n	801882e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018824:	4b0a      	ldr	r3, [pc, #40]	; (8018850 <prvResetNextTaskUnblockTime+0x3c>)
 8018826:	f04f 32ff 	mov.w	r2, #4294967295
 801882a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801882c:	e008      	b.n	8018840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801882e:	4b07      	ldr	r3, [pc, #28]	; (801884c <prvResetNextTaskUnblockTime+0x38>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	68db      	ldr	r3, [r3, #12]
 8018834:	68db      	ldr	r3, [r3, #12]
 8018836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	685b      	ldr	r3, [r3, #4]
 801883c:	4a04      	ldr	r2, [pc, #16]	; (8018850 <prvResetNextTaskUnblockTime+0x3c>)
 801883e:	6013      	str	r3, [r2, #0]
}
 8018840:	bf00      	nop
 8018842:	370c      	adds	r7, #12
 8018844:	46bd      	mov	sp, r7
 8018846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801884a:	4770      	bx	lr
 801884c:	20000d9c 	.word	0x20000d9c
 8018850:	20000e04 	.word	0x20000e04

08018854 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018854:	b480      	push	{r7}
 8018856:	b083      	sub	sp, #12
 8018858:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801885a:	4b0b      	ldr	r3, [pc, #44]	; (8018888 <xTaskGetSchedulerState+0x34>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	2b00      	cmp	r3, #0
 8018860:	d102      	bne.n	8018868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018862:	2301      	movs	r3, #1
 8018864:	607b      	str	r3, [r7, #4]
 8018866:	e008      	b.n	801887a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018868:	4b08      	ldr	r3, [pc, #32]	; (801888c <xTaskGetSchedulerState+0x38>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d102      	bne.n	8018876 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018870:	2302      	movs	r3, #2
 8018872:	607b      	str	r3, [r7, #4]
 8018874:	e001      	b.n	801887a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018876:	2300      	movs	r3, #0
 8018878:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801887a:	687b      	ldr	r3, [r7, #4]
	}
 801887c:	4618      	mov	r0, r3
 801887e:	370c      	adds	r7, #12
 8018880:	46bd      	mov	sp, r7
 8018882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018886:	4770      	bx	lr
 8018888:	20000df0 	.word	0x20000df0
 801888c:	20000e0c 	.word	0x20000e0c

08018890 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018890:	b580      	push	{r7, lr}
 8018892:	b084      	sub	sp, #16
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801889c:	2300      	movs	r3, #0
 801889e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d069      	beq.n	801897a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80188a6:	68bb      	ldr	r3, [r7, #8]
 80188a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188aa:	4b36      	ldr	r3, [pc, #216]	; (8018984 <xTaskPriorityInherit+0xf4>)
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188b0:	429a      	cmp	r2, r3
 80188b2:	d259      	bcs.n	8018968 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80188b4:	68bb      	ldr	r3, [r7, #8]
 80188b6:	699b      	ldr	r3, [r3, #24]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	db06      	blt.n	80188ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80188bc:	4b31      	ldr	r3, [pc, #196]	; (8018984 <xTaskPriorityInherit+0xf4>)
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188c2:	f1c3 0207 	rsb	r2, r3, #7
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80188ca:	68bb      	ldr	r3, [r7, #8]
 80188cc:	6959      	ldr	r1, [r3, #20]
 80188ce:	68bb      	ldr	r3, [r7, #8]
 80188d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188d2:	4613      	mov	r3, r2
 80188d4:	009b      	lsls	r3, r3, #2
 80188d6:	4413      	add	r3, r2
 80188d8:	009b      	lsls	r3, r3, #2
 80188da:	4a2b      	ldr	r2, [pc, #172]	; (8018988 <xTaskPriorityInherit+0xf8>)
 80188dc:	4413      	add	r3, r2
 80188de:	4299      	cmp	r1, r3
 80188e0:	d13a      	bne.n	8018958 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80188e2:	68bb      	ldr	r3, [r7, #8]
 80188e4:	3304      	adds	r3, #4
 80188e6:	4618      	mov	r0, r3
 80188e8:	f7fe f96c 	bl	8016bc4 <uxListRemove>
 80188ec:	4603      	mov	r3, r0
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d115      	bne.n	801891e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80188f2:	68bb      	ldr	r3, [r7, #8]
 80188f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188f6:	4924      	ldr	r1, [pc, #144]	; (8018988 <xTaskPriorityInherit+0xf8>)
 80188f8:	4613      	mov	r3, r2
 80188fa:	009b      	lsls	r3, r3, #2
 80188fc:	4413      	add	r3, r2
 80188fe:	009b      	lsls	r3, r3, #2
 8018900:	440b      	add	r3, r1
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d10a      	bne.n	801891e <xTaskPriorityInherit+0x8e>
 8018908:	68bb      	ldr	r3, [r7, #8]
 801890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801890c:	2201      	movs	r2, #1
 801890e:	fa02 f303 	lsl.w	r3, r2, r3
 8018912:	43da      	mvns	r2, r3
 8018914:	4b1d      	ldr	r3, [pc, #116]	; (801898c <xTaskPriorityInherit+0xfc>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	4013      	ands	r3, r2
 801891a:	4a1c      	ldr	r2, [pc, #112]	; (801898c <xTaskPriorityInherit+0xfc>)
 801891c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801891e:	4b19      	ldr	r3, [pc, #100]	; (8018984 <xTaskPriorityInherit+0xf4>)
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018924:	68bb      	ldr	r3, [r7, #8]
 8018926:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018928:	68bb      	ldr	r3, [r7, #8]
 801892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801892c:	2201      	movs	r2, #1
 801892e:	409a      	lsls	r2, r3
 8018930:	4b16      	ldr	r3, [pc, #88]	; (801898c <xTaskPriorityInherit+0xfc>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	4313      	orrs	r3, r2
 8018936:	4a15      	ldr	r2, [pc, #84]	; (801898c <xTaskPriorityInherit+0xfc>)
 8018938:	6013      	str	r3, [r2, #0]
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801893e:	4613      	mov	r3, r2
 8018940:	009b      	lsls	r3, r3, #2
 8018942:	4413      	add	r3, r2
 8018944:	009b      	lsls	r3, r3, #2
 8018946:	4a10      	ldr	r2, [pc, #64]	; (8018988 <xTaskPriorityInherit+0xf8>)
 8018948:	441a      	add	r2, r3
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	3304      	adds	r3, #4
 801894e:	4619      	mov	r1, r3
 8018950:	4610      	mov	r0, r2
 8018952:	f7fe f8da 	bl	8016b0a <vListInsertEnd>
 8018956:	e004      	b.n	8018962 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018958:	4b0a      	ldr	r3, [pc, #40]	; (8018984 <xTaskPriorityInherit+0xf4>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018962:	2301      	movs	r3, #1
 8018964:	60fb      	str	r3, [r7, #12]
 8018966:	e008      	b.n	801897a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801896c:	4b05      	ldr	r3, [pc, #20]	; (8018984 <xTaskPriorityInherit+0xf4>)
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018972:	429a      	cmp	r2, r3
 8018974:	d201      	bcs.n	801897a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018976:	2301      	movs	r3, #1
 8018978:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801897a:	68fb      	ldr	r3, [r7, #12]
	}
 801897c:	4618      	mov	r0, r3
 801897e:	3710      	adds	r7, #16
 8018980:	46bd      	mov	sp, r7
 8018982:	bd80      	pop	{r7, pc}
 8018984:	20000ce4 	.word	0x20000ce4
 8018988:	20000ce8 	.word	0x20000ce8
 801898c:	20000dec 	.word	0x20000dec

08018990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018990:	b580      	push	{r7, lr}
 8018992:	b086      	sub	sp, #24
 8018994:	af00      	add	r7, sp, #0
 8018996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801899c:	2300      	movs	r3, #0
 801899e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d06e      	beq.n	8018a84 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80189a6:	4b3a      	ldr	r3, [pc, #232]	; (8018a90 <xTaskPriorityDisinherit+0x100>)
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	693a      	ldr	r2, [r7, #16]
 80189ac:	429a      	cmp	r2, r3
 80189ae:	d00a      	beq.n	80189c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80189b0:	f04f 0320 	mov.w	r3, #32
 80189b4:	f383 8811 	msr	BASEPRI, r3
 80189b8:	f3bf 8f6f 	isb	sy
 80189bc:	f3bf 8f4f 	dsb	sy
 80189c0:	60fb      	str	r3, [r7, #12]
}
 80189c2:	bf00      	nop
 80189c4:	e7fe      	b.n	80189c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80189c6:	693b      	ldr	r3, [r7, #16]
 80189c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d10a      	bne.n	80189e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80189ce:	f04f 0320 	mov.w	r3, #32
 80189d2:	f383 8811 	msr	BASEPRI, r3
 80189d6:	f3bf 8f6f 	isb	sy
 80189da:	f3bf 8f4f 	dsb	sy
 80189de:	60bb      	str	r3, [r7, #8]
}
 80189e0:	bf00      	nop
 80189e2:	e7fe      	b.n	80189e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80189e4:	693b      	ldr	r3, [r7, #16]
 80189e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189e8:	1e5a      	subs	r2, r3, #1
 80189ea:	693b      	ldr	r3, [r7, #16]
 80189ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80189ee:	693b      	ldr	r3, [r7, #16]
 80189f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189f2:	693b      	ldr	r3, [r7, #16]
 80189f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189f6:	429a      	cmp	r2, r3
 80189f8:	d044      	beq.n	8018a84 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80189fa:	693b      	ldr	r3, [r7, #16]
 80189fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d140      	bne.n	8018a84 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a02:	693b      	ldr	r3, [r7, #16]
 8018a04:	3304      	adds	r3, #4
 8018a06:	4618      	mov	r0, r3
 8018a08:	f7fe f8dc 	bl	8016bc4 <uxListRemove>
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d115      	bne.n	8018a3e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018a12:	693b      	ldr	r3, [r7, #16]
 8018a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a16:	491f      	ldr	r1, [pc, #124]	; (8018a94 <xTaskPriorityDisinherit+0x104>)
 8018a18:	4613      	mov	r3, r2
 8018a1a:	009b      	lsls	r3, r3, #2
 8018a1c:	4413      	add	r3, r2
 8018a1e:	009b      	lsls	r3, r3, #2
 8018a20:	440b      	add	r3, r1
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d10a      	bne.n	8018a3e <xTaskPriorityDisinherit+0xae>
 8018a28:	693b      	ldr	r3, [r7, #16]
 8018a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a2c:	2201      	movs	r2, #1
 8018a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8018a32:	43da      	mvns	r2, r3
 8018a34:	4b18      	ldr	r3, [pc, #96]	; (8018a98 <xTaskPriorityDisinherit+0x108>)
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	4013      	ands	r3, r2
 8018a3a:	4a17      	ldr	r2, [pc, #92]	; (8018a98 <xTaskPriorityDisinherit+0x108>)
 8018a3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018a3e:	693b      	ldr	r3, [r7, #16]
 8018a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018a42:	693b      	ldr	r3, [r7, #16]
 8018a44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a46:	693b      	ldr	r3, [r7, #16]
 8018a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a4a:	f1c3 0207 	rsb	r2, r3, #7
 8018a4e:	693b      	ldr	r3, [r7, #16]
 8018a50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018a52:	693b      	ldr	r3, [r7, #16]
 8018a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a56:	2201      	movs	r2, #1
 8018a58:	409a      	lsls	r2, r3
 8018a5a:	4b0f      	ldr	r3, [pc, #60]	; (8018a98 <xTaskPriorityDisinherit+0x108>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	4313      	orrs	r3, r2
 8018a60:	4a0d      	ldr	r2, [pc, #52]	; (8018a98 <xTaskPriorityDisinherit+0x108>)
 8018a62:	6013      	str	r3, [r2, #0]
 8018a64:	693b      	ldr	r3, [r7, #16]
 8018a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a68:	4613      	mov	r3, r2
 8018a6a:	009b      	lsls	r3, r3, #2
 8018a6c:	4413      	add	r3, r2
 8018a6e:	009b      	lsls	r3, r3, #2
 8018a70:	4a08      	ldr	r2, [pc, #32]	; (8018a94 <xTaskPriorityDisinherit+0x104>)
 8018a72:	441a      	add	r2, r3
 8018a74:	693b      	ldr	r3, [r7, #16]
 8018a76:	3304      	adds	r3, #4
 8018a78:	4619      	mov	r1, r3
 8018a7a:	4610      	mov	r0, r2
 8018a7c:	f7fe f845 	bl	8016b0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018a80:	2301      	movs	r3, #1
 8018a82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018a84:	697b      	ldr	r3, [r7, #20]
	}
 8018a86:	4618      	mov	r0, r3
 8018a88:	3718      	adds	r7, #24
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	bd80      	pop	{r7, pc}
 8018a8e:	bf00      	nop
 8018a90:	20000ce4 	.word	0x20000ce4
 8018a94:	20000ce8 	.word	0x20000ce8
 8018a98:	20000dec 	.word	0x20000dec

08018a9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	b088      	sub	sp, #32
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	6078      	str	r0, [r7, #4]
 8018aa4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018aaa:	2301      	movs	r3, #1
 8018aac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	f000 8083 	beq.w	8018bbc <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018ab6:	69bb      	ldr	r3, [r7, #24]
 8018ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d10a      	bne.n	8018ad4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8018abe:	f04f 0320 	mov.w	r3, #32
 8018ac2:	f383 8811 	msr	BASEPRI, r3
 8018ac6:	f3bf 8f6f 	isb	sy
 8018aca:	f3bf 8f4f 	dsb	sy
 8018ace:	60fb      	str	r3, [r7, #12]
}
 8018ad0:	bf00      	nop
 8018ad2:	e7fe      	b.n	8018ad2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018ad4:	69bb      	ldr	r3, [r7, #24]
 8018ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ad8:	683a      	ldr	r2, [r7, #0]
 8018ada:	429a      	cmp	r2, r3
 8018adc:	d902      	bls.n	8018ae4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018ade:	683b      	ldr	r3, [r7, #0]
 8018ae0:	61fb      	str	r3, [r7, #28]
 8018ae2:	e002      	b.n	8018aea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018ae4:	69bb      	ldr	r3, [r7, #24]
 8018ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ae8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018aea:	69bb      	ldr	r3, [r7, #24]
 8018aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aee:	69fa      	ldr	r2, [r7, #28]
 8018af0:	429a      	cmp	r2, r3
 8018af2:	d063      	beq.n	8018bbc <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018af4:	69bb      	ldr	r3, [r7, #24]
 8018af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018af8:	697a      	ldr	r2, [r7, #20]
 8018afa:	429a      	cmp	r2, r3
 8018afc:	d15e      	bne.n	8018bbc <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018afe:	4b31      	ldr	r3, [pc, #196]	; (8018bc4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	69ba      	ldr	r2, [r7, #24]
 8018b04:	429a      	cmp	r2, r3
 8018b06:	d10a      	bne.n	8018b1e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8018b08:	f04f 0320 	mov.w	r3, #32
 8018b0c:	f383 8811 	msr	BASEPRI, r3
 8018b10:	f3bf 8f6f 	isb	sy
 8018b14:	f3bf 8f4f 	dsb	sy
 8018b18:	60bb      	str	r3, [r7, #8]
}
 8018b1a:	bf00      	nop
 8018b1c:	e7fe      	b.n	8018b1c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018b1e:	69bb      	ldr	r3, [r7, #24]
 8018b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b22:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018b24:	69bb      	ldr	r3, [r7, #24]
 8018b26:	69fa      	ldr	r2, [r7, #28]
 8018b28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018b2a:	69bb      	ldr	r3, [r7, #24]
 8018b2c:	699b      	ldr	r3, [r3, #24]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	db04      	blt.n	8018b3c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018b32:	69fb      	ldr	r3, [r7, #28]
 8018b34:	f1c3 0207 	rsb	r2, r3, #7
 8018b38:	69bb      	ldr	r3, [r7, #24]
 8018b3a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018b3c:	69bb      	ldr	r3, [r7, #24]
 8018b3e:	6959      	ldr	r1, [r3, #20]
 8018b40:	693a      	ldr	r2, [r7, #16]
 8018b42:	4613      	mov	r3, r2
 8018b44:	009b      	lsls	r3, r3, #2
 8018b46:	4413      	add	r3, r2
 8018b48:	009b      	lsls	r3, r3, #2
 8018b4a:	4a1f      	ldr	r2, [pc, #124]	; (8018bc8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8018b4c:	4413      	add	r3, r2
 8018b4e:	4299      	cmp	r1, r3
 8018b50:	d134      	bne.n	8018bbc <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018b52:	69bb      	ldr	r3, [r7, #24]
 8018b54:	3304      	adds	r3, #4
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7fe f834 	bl	8016bc4 <uxListRemove>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d115      	bne.n	8018b8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018b62:	69bb      	ldr	r3, [r7, #24]
 8018b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b66:	4918      	ldr	r1, [pc, #96]	; (8018bc8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8018b68:	4613      	mov	r3, r2
 8018b6a:	009b      	lsls	r3, r3, #2
 8018b6c:	4413      	add	r3, r2
 8018b6e:	009b      	lsls	r3, r3, #2
 8018b70:	440b      	add	r3, r1
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d10a      	bne.n	8018b8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8018b78:	69bb      	ldr	r3, [r7, #24]
 8018b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8018b82:	43da      	mvns	r2, r3
 8018b84:	4b11      	ldr	r3, [pc, #68]	; (8018bcc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	4013      	ands	r3, r2
 8018b8a:	4a10      	ldr	r2, [pc, #64]	; (8018bcc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8018b8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018b8e:	69bb      	ldr	r3, [r7, #24]
 8018b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b92:	2201      	movs	r2, #1
 8018b94:	409a      	lsls	r2, r3
 8018b96:	4b0d      	ldr	r3, [pc, #52]	; (8018bcc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	4313      	orrs	r3, r2
 8018b9c:	4a0b      	ldr	r2, [pc, #44]	; (8018bcc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8018b9e:	6013      	str	r3, [r2, #0]
 8018ba0:	69bb      	ldr	r3, [r7, #24]
 8018ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ba4:	4613      	mov	r3, r2
 8018ba6:	009b      	lsls	r3, r3, #2
 8018ba8:	4413      	add	r3, r2
 8018baa:	009b      	lsls	r3, r3, #2
 8018bac:	4a06      	ldr	r2, [pc, #24]	; (8018bc8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8018bae:	441a      	add	r2, r3
 8018bb0:	69bb      	ldr	r3, [r7, #24]
 8018bb2:	3304      	adds	r3, #4
 8018bb4:	4619      	mov	r1, r3
 8018bb6:	4610      	mov	r0, r2
 8018bb8:	f7fd ffa7 	bl	8016b0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018bbc:	bf00      	nop
 8018bbe:	3720      	adds	r7, #32
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	20000ce4 	.word	0x20000ce4
 8018bc8:	20000ce8 	.word	0x20000ce8
 8018bcc:	20000dec 	.word	0x20000dec

08018bd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018bd0:	b480      	push	{r7}
 8018bd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018bd4:	4b07      	ldr	r3, [pc, #28]	; (8018bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d004      	beq.n	8018be6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018bdc:	4b05      	ldr	r3, [pc, #20]	; (8018bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018be2:	3201      	adds	r2, #1
 8018be4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018be6:	4b03      	ldr	r3, [pc, #12]	; (8018bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018be8:	681b      	ldr	r3, [r3, #0]
	}
 8018bea:	4618      	mov	r0, r3
 8018bec:	46bd      	mov	sp, r7
 8018bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf2:	4770      	bx	lr
 8018bf4:	20000ce4 	.word	0x20000ce4

08018bf8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b084      	sub	sp, #16
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018c02:	4b29      	ldr	r3, [pc, #164]	; (8018ca8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018c08:	4b28      	ldr	r3, [pc, #160]	; (8018cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	3304      	adds	r3, #4
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f7fd ffd8 	bl	8016bc4 <uxListRemove>
 8018c14:	4603      	mov	r3, r0
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d10b      	bne.n	8018c32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018c1a:	4b24      	ldr	r3, [pc, #144]	; (8018cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c20:	2201      	movs	r2, #1
 8018c22:	fa02 f303 	lsl.w	r3, r2, r3
 8018c26:	43da      	mvns	r2, r3
 8018c28:	4b21      	ldr	r3, [pc, #132]	; (8018cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	4013      	ands	r3, r2
 8018c2e:	4a20      	ldr	r2, [pc, #128]	; (8018cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018c30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c38:	d10a      	bne.n	8018c50 <prvAddCurrentTaskToDelayedList+0x58>
 8018c3a:	683b      	ldr	r3, [r7, #0]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d007      	beq.n	8018c50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c40:	4b1a      	ldr	r3, [pc, #104]	; (8018cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	3304      	adds	r3, #4
 8018c46:	4619      	mov	r1, r3
 8018c48:	481a      	ldr	r0, [pc, #104]	; (8018cb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8018c4a:	f7fd ff5e 	bl	8016b0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018c4e:	e026      	b.n	8018c9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018c50:	68fa      	ldr	r2, [r7, #12]
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	4413      	add	r3, r2
 8018c56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018c58:	4b14      	ldr	r3, [pc, #80]	; (8018cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	68ba      	ldr	r2, [r7, #8]
 8018c5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018c60:	68ba      	ldr	r2, [r7, #8]
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d209      	bcs.n	8018c7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c68:	4b13      	ldr	r3, [pc, #76]	; (8018cb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8018c6a:	681a      	ldr	r2, [r3, #0]
 8018c6c:	4b0f      	ldr	r3, [pc, #60]	; (8018cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	3304      	adds	r3, #4
 8018c72:	4619      	mov	r1, r3
 8018c74:	4610      	mov	r0, r2
 8018c76:	f7fd ff6c 	bl	8016b52 <vListInsert>
}
 8018c7a:	e010      	b.n	8018c9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c7c:	4b0f      	ldr	r3, [pc, #60]	; (8018cbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8018c7e:	681a      	ldr	r2, [r3, #0]
 8018c80:	4b0a      	ldr	r3, [pc, #40]	; (8018cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	3304      	adds	r3, #4
 8018c86:	4619      	mov	r1, r3
 8018c88:	4610      	mov	r0, r2
 8018c8a:	f7fd ff62 	bl	8016b52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018c8e:	4b0c      	ldr	r3, [pc, #48]	; (8018cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	68ba      	ldr	r2, [r7, #8]
 8018c94:	429a      	cmp	r2, r3
 8018c96:	d202      	bcs.n	8018c9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018c98:	4a09      	ldr	r2, [pc, #36]	; (8018cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	6013      	str	r3, [r2, #0]
}
 8018c9e:	bf00      	nop
 8018ca0:	3710      	adds	r7, #16
 8018ca2:	46bd      	mov	sp, r7
 8018ca4:	bd80      	pop	{r7, pc}
 8018ca6:	bf00      	nop
 8018ca8:	20000de8 	.word	0x20000de8
 8018cac:	20000ce4 	.word	0x20000ce4
 8018cb0:	20000dec 	.word	0x20000dec
 8018cb4:	20000dd0 	.word	0x20000dd0
 8018cb8:	20000da0 	.word	0x20000da0
 8018cbc:	20000d9c 	.word	0x20000d9c
 8018cc0:	20000e04 	.word	0x20000e04

08018cc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b084      	sub	sp, #16
 8018cc8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8018cca:	2300      	movs	r3, #0
 8018ccc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018cce:	f000 fad5 	bl	801927c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018cd2:	4b11      	ldr	r3, [pc, #68]	; (8018d18 <xTimerCreateTimerTask+0x54>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d00b      	beq.n	8018cf2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8018cda:	4b10      	ldr	r3, [pc, #64]	; (8018d1c <xTimerCreateTimerTask+0x58>)
 8018cdc:	9301      	str	r3, [sp, #4]
 8018cde:	2306      	movs	r3, #6
 8018ce0:	9300      	str	r3, [sp, #0]
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018ce8:	490d      	ldr	r1, [pc, #52]	; (8018d20 <xTimerCreateTimerTask+0x5c>)
 8018cea:	480e      	ldr	r0, [pc, #56]	; (8018d24 <xTimerCreateTimerTask+0x60>)
 8018cec:	f7fe fea4 	bl	8017a38 <xTaskCreate>
 8018cf0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d10a      	bne.n	8018d0e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8018cf8:	f04f 0320 	mov.w	r3, #32
 8018cfc:	f383 8811 	msr	BASEPRI, r3
 8018d00:	f3bf 8f6f 	isb	sy
 8018d04:	f3bf 8f4f 	dsb	sy
 8018d08:	603b      	str	r3, [r7, #0]
}
 8018d0a:	bf00      	nop
 8018d0c:	e7fe      	b.n	8018d0c <xTimerCreateTimerTask+0x48>
	return xReturn;
 8018d0e:	687b      	ldr	r3, [r7, #4]
}
 8018d10:	4618      	mov	r0, r3
 8018d12:	3708      	adds	r7, #8
 8018d14:	46bd      	mov	sp, r7
 8018d16:	bd80      	pop	{r7, pc}
 8018d18:	20000e40 	.word	0x20000e40
 8018d1c:	20000e44 	.word	0x20000e44
 8018d20:	0802189c 	.word	0x0802189c
 8018d24:	08018e5d 	.word	0x08018e5d

08018d28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b08a      	sub	sp, #40	; 0x28
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	60f8      	str	r0, [r7, #12]
 8018d30:	60b9      	str	r1, [r7, #8]
 8018d32:	607a      	str	r2, [r7, #4]
 8018d34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018d36:	2300      	movs	r3, #0
 8018d38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d10a      	bne.n	8018d56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8018d40:	f04f 0320 	mov.w	r3, #32
 8018d44:	f383 8811 	msr	BASEPRI, r3
 8018d48:	f3bf 8f6f 	isb	sy
 8018d4c:	f3bf 8f4f 	dsb	sy
 8018d50:	623b      	str	r3, [r7, #32]
}
 8018d52:	bf00      	nop
 8018d54:	e7fe      	b.n	8018d54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018d56:	4b1a      	ldr	r3, [pc, #104]	; (8018dc0 <xTimerGenericCommand+0x98>)
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d02a      	beq.n	8018db4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018d5e:	68bb      	ldr	r3, [r7, #8]
 8018d60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018d6a:	68bb      	ldr	r3, [r7, #8]
 8018d6c:	2b05      	cmp	r3, #5
 8018d6e:	dc18      	bgt.n	8018da2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018d70:	f7ff fd70 	bl	8018854 <xTaskGetSchedulerState>
 8018d74:	4603      	mov	r3, r0
 8018d76:	2b02      	cmp	r3, #2
 8018d78:	d109      	bne.n	8018d8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018d7a:	4b11      	ldr	r3, [pc, #68]	; (8018dc0 <xTimerGenericCommand+0x98>)
 8018d7c:	6818      	ldr	r0, [r3, #0]
 8018d7e:	f107 0114 	add.w	r1, r7, #20
 8018d82:	2300      	movs	r3, #0
 8018d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018d86:	f7fe f841 	bl	8016e0c <xQueueGenericSend>
 8018d8a:	6278      	str	r0, [r7, #36]	; 0x24
 8018d8c:	e012      	b.n	8018db4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018d8e:	4b0c      	ldr	r3, [pc, #48]	; (8018dc0 <xTimerGenericCommand+0x98>)
 8018d90:	6818      	ldr	r0, [r3, #0]
 8018d92:	f107 0114 	add.w	r1, r7, #20
 8018d96:	2300      	movs	r3, #0
 8018d98:	2200      	movs	r2, #0
 8018d9a:	f7fe f837 	bl	8016e0c <xQueueGenericSend>
 8018d9e:	6278      	str	r0, [r7, #36]	; 0x24
 8018da0:	e008      	b.n	8018db4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018da2:	4b07      	ldr	r3, [pc, #28]	; (8018dc0 <xTimerGenericCommand+0x98>)
 8018da4:	6818      	ldr	r0, [r3, #0]
 8018da6:	f107 0114 	add.w	r1, r7, #20
 8018daa:	2300      	movs	r3, #0
 8018dac:	683a      	ldr	r2, [r7, #0]
 8018dae:	f7fe f92b 	bl	8017008 <xQueueGenericSendFromISR>
 8018db2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018db6:	4618      	mov	r0, r3
 8018db8:	3728      	adds	r7, #40	; 0x28
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	bd80      	pop	{r7, pc}
 8018dbe:	bf00      	nop
 8018dc0:	20000e40 	.word	0x20000e40

08018dc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b088      	sub	sp, #32
 8018dc8:	af02      	add	r7, sp, #8
 8018dca:	6078      	str	r0, [r7, #4]
 8018dcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018dce:	4b22      	ldr	r3, [pc, #136]	; (8018e58 <prvProcessExpiredTimer+0x94>)
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	68db      	ldr	r3, [r3, #12]
 8018dd4:	68db      	ldr	r3, [r3, #12]
 8018dd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018dd8:	697b      	ldr	r3, [r7, #20]
 8018dda:	3304      	adds	r3, #4
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f7fd fef1 	bl	8016bc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018de2:	697b      	ldr	r3, [r7, #20]
 8018de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018de8:	f003 0304 	and.w	r3, r3, #4
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d022      	beq.n	8018e36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018df0:	697b      	ldr	r3, [r7, #20]
 8018df2:	699a      	ldr	r2, [r3, #24]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	18d1      	adds	r1, r2, r3
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	683a      	ldr	r2, [r7, #0]
 8018dfc:	6978      	ldr	r0, [r7, #20]
 8018dfe:	f000 f8d1 	bl	8018fa4 <prvInsertTimerInActiveList>
 8018e02:	4603      	mov	r3, r0
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d01f      	beq.n	8018e48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018e08:	2300      	movs	r3, #0
 8018e0a:	9300      	str	r3, [sp, #0]
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	687a      	ldr	r2, [r7, #4]
 8018e10:	2100      	movs	r1, #0
 8018e12:	6978      	ldr	r0, [r7, #20]
 8018e14:	f7ff ff88 	bl	8018d28 <xTimerGenericCommand>
 8018e18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018e1a:	693b      	ldr	r3, [r7, #16]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d113      	bne.n	8018e48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018e20:	f04f 0320 	mov.w	r3, #32
 8018e24:	f383 8811 	msr	BASEPRI, r3
 8018e28:	f3bf 8f6f 	isb	sy
 8018e2c:	f3bf 8f4f 	dsb	sy
 8018e30:	60fb      	str	r3, [r7, #12]
}
 8018e32:	bf00      	nop
 8018e34:	e7fe      	b.n	8018e34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018e36:	697b      	ldr	r3, [r7, #20]
 8018e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e3c:	f023 0301 	bic.w	r3, r3, #1
 8018e40:	b2da      	uxtb	r2, r3
 8018e42:	697b      	ldr	r3, [r7, #20]
 8018e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018e48:	697b      	ldr	r3, [r7, #20]
 8018e4a:	6a1b      	ldr	r3, [r3, #32]
 8018e4c:	6978      	ldr	r0, [r7, #20]
 8018e4e:	4798      	blx	r3
}
 8018e50:	bf00      	nop
 8018e52:	3718      	adds	r7, #24
 8018e54:	46bd      	mov	sp, r7
 8018e56:	bd80      	pop	{r7, pc}
 8018e58:	20000e38 	.word	0x20000e38

08018e5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b084      	sub	sp, #16
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018e64:	f107 0308 	add.w	r3, r7, #8
 8018e68:	4618      	mov	r0, r3
 8018e6a:	f000 f857 	bl	8018f1c <prvGetNextExpireTime>
 8018e6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018e70:	68bb      	ldr	r3, [r7, #8]
 8018e72:	4619      	mov	r1, r3
 8018e74:	68f8      	ldr	r0, [r7, #12]
 8018e76:	f000 f803 	bl	8018e80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018e7a:	f000 f8d5 	bl	8019028 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018e7e:	e7f1      	b.n	8018e64 <prvTimerTask+0x8>

08018e80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b084      	sub	sp, #16
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
 8018e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018e8a:	f7ff f901 	bl	8018090 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018e8e:	f107 0308 	add.w	r3, r7, #8
 8018e92:	4618      	mov	r0, r3
 8018e94:	f000 f866 	bl	8018f64 <prvSampleTimeNow>
 8018e98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018e9a:	68bb      	ldr	r3, [r7, #8]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d130      	bne.n	8018f02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018ea0:	683b      	ldr	r3, [r7, #0]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d10a      	bne.n	8018ebc <prvProcessTimerOrBlockTask+0x3c>
 8018ea6:	687a      	ldr	r2, [r7, #4]
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	429a      	cmp	r2, r3
 8018eac:	d806      	bhi.n	8018ebc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018eae:	f7ff f8fd 	bl	80180ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018eb2:	68f9      	ldr	r1, [r7, #12]
 8018eb4:	6878      	ldr	r0, [r7, #4]
 8018eb6:	f7ff ff85 	bl	8018dc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018eba:	e024      	b.n	8018f06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018ebc:	683b      	ldr	r3, [r7, #0]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d008      	beq.n	8018ed4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018ec2:	4b13      	ldr	r3, [pc, #76]	; (8018f10 <prvProcessTimerOrBlockTask+0x90>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d101      	bne.n	8018ed0 <prvProcessTimerOrBlockTask+0x50>
 8018ecc:	2301      	movs	r3, #1
 8018ece:	e000      	b.n	8018ed2 <prvProcessTimerOrBlockTask+0x52>
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018ed4:	4b0f      	ldr	r3, [pc, #60]	; (8018f14 <prvProcessTimerOrBlockTask+0x94>)
 8018ed6:	6818      	ldr	r0, [r3, #0]
 8018ed8:	687a      	ldr	r2, [r7, #4]
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	1ad3      	subs	r3, r2, r3
 8018ede:	683a      	ldr	r2, [r7, #0]
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	f7fe fd75 	bl	80179d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018ee6:	f7ff f8e1 	bl	80180ac <xTaskResumeAll>
 8018eea:	4603      	mov	r3, r0
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d10a      	bne.n	8018f06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018ef0:	4b09      	ldr	r3, [pc, #36]	; (8018f18 <prvProcessTimerOrBlockTask+0x98>)
 8018ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ef6:	601a      	str	r2, [r3, #0]
 8018ef8:	f3bf 8f4f 	dsb	sy
 8018efc:	f3bf 8f6f 	isb	sy
}
 8018f00:	e001      	b.n	8018f06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018f02:	f7ff f8d3 	bl	80180ac <xTaskResumeAll>
}
 8018f06:	bf00      	nop
 8018f08:	3710      	adds	r7, #16
 8018f0a:	46bd      	mov	sp, r7
 8018f0c:	bd80      	pop	{r7, pc}
 8018f0e:	bf00      	nop
 8018f10:	20000e3c 	.word	0x20000e3c
 8018f14:	20000e40 	.word	0x20000e40
 8018f18:	e000ed04 	.word	0xe000ed04

08018f1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018f1c:	b480      	push	{r7}
 8018f1e:	b085      	sub	sp, #20
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018f24:	4b0e      	ldr	r3, [pc, #56]	; (8018f60 <prvGetNextExpireTime+0x44>)
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d101      	bne.n	8018f32 <prvGetNextExpireTime+0x16>
 8018f2e:	2201      	movs	r2, #1
 8018f30:	e000      	b.n	8018f34 <prvGetNextExpireTime+0x18>
 8018f32:	2200      	movs	r2, #0
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d105      	bne.n	8018f4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018f40:	4b07      	ldr	r3, [pc, #28]	; (8018f60 <prvGetNextExpireTime+0x44>)
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	68db      	ldr	r3, [r3, #12]
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	60fb      	str	r3, [r7, #12]
 8018f4a:	e001      	b.n	8018f50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018f50:	68fb      	ldr	r3, [r7, #12]
}
 8018f52:	4618      	mov	r0, r3
 8018f54:	3714      	adds	r7, #20
 8018f56:	46bd      	mov	sp, r7
 8018f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f5c:	4770      	bx	lr
 8018f5e:	bf00      	nop
 8018f60:	20000e38 	.word	0x20000e38

08018f64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b084      	sub	sp, #16
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018f6c:	f7ff f93a 	bl	80181e4 <xTaskGetTickCount>
 8018f70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018f72:	4b0b      	ldr	r3, [pc, #44]	; (8018fa0 <prvSampleTimeNow+0x3c>)
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	68fa      	ldr	r2, [r7, #12]
 8018f78:	429a      	cmp	r2, r3
 8018f7a:	d205      	bcs.n	8018f88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018f7c:	f000 f91a 	bl	80191b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2201      	movs	r2, #1
 8018f84:	601a      	str	r2, [r3, #0]
 8018f86:	e002      	b.n	8018f8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018f8e:	4a04      	ldr	r2, [pc, #16]	; (8018fa0 <prvSampleTimeNow+0x3c>)
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018f94:	68fb      	ldr	r3, [r7, #12]
}
 8018f96:	4618      	mov	r0, r3
 8018f98:	3710      	adds	r7, #16
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bd80      	pop	{r7, pc}
 8018f9e:	bf00      	nop
 8018fa0:	20000e48 	.word	0x20000e48

08018fa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b086      	sub	sp, #24
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	60f8      	str	r0, [r7, #12]
 8018fac:	60b9      	str	r1, [r7, #8]
 8018fae:	607a      	str	r2, [r7, #4]
 8018fb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	68ba      	ldr	r2, [r7, #8]
 8018fba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	68fa      	ldr	r2, [r7, #12]
 8018fc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018fc2:	68ba      	ldr	r2, [r7, #8]
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	429a      	cmp	r2, r3
 8018fc8:	d812      	bhi.n	8018ff0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018fca:	687a      	ldr	r2, [r7, #4]
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	1ad2      	subs	r2, r2, r3
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	699b      	ldr	r3, [r3, #24]
 8018fd4:	429a      	cmp	r2, r3
 8018fd6:	d302      	bcc.n	8018fde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018fd8:	2301      	movs	r3, #1
 8018fda:	617b      	str	r3, [r7, #20]
 8018fdc:	e01b      	b.n	8019016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018fde:	4b10      	ldr	r3, [pc, #64]	; (8019020 <prvInsertTimerInActiveList+0x7c>)
 8018fe0:	681a      	ldr	r2, [r3, #0]
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	3304      	adds	r3, #4
 8018fe6:	4619      	mov	r1, r3
 8018fe8:	4610      	mov	r0, r2
 8018fea:	f7fd fdb2 	bl	8016b52 <vListInsert>
 8018fee:	e012      	b.n	8019016 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018ff0:	687a      	ldr	r2, [r7, #4]
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	429a      	cmp	r2, r3
 8018ff6:	d206      	bcs.n	8019006 <prvInsertTimerInActiveList+0x62>
 8018ff8:	68ba      	ldr	r2, [r7, #8]
 8018ffa:	683b      	ldr	r3, [r7, #0]
 8018ffc:	429a      	cmp	r2, r3
 8018ffe:	d302      	bcc.n	8019006 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019000:	2301      	movs	r3, #1
 8019002:	617b      	str	r3, [r7, #20]
 8019004:	e007      	b.n	8019016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019006:	4b07      	ldr	r3, [pc, #28]	; (8019024 <prvInsertTimerInActiveList+0x80>)
 8019008:	681a      	ldr	r2, [r3, #0]
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	3304      	adds	r3, #4
 801900e:	4619      	mov	r1, r3
 8019010:	4610      	mov	r0, r2
 8019012:	f7fd fd9e 	bl	8016b52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019016:	697b      	ldr	r3, [r7, #20]
}
 8019018:	4618      	mov	r0, r3
 801901a:	3718      	adds	r7, #24
 801901c:	46bd      	mov	sp, r7
 801901e:	bd80      	pop	{r7, pc}
 8019020:	20000e3c 	.word	0x20000e3c
 8019024:	20000e38 	.word	0x20000e38

08019028 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b08c      	sub	sp, #48	; 0x30
 801902c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801902e:	e0ae      	b.n	801918e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019030:	68bb      	ldr	r3, [r7, #8]
 8019032:	2b00      	cmp	r3, #0
 8019034:	f2c0 80aa 	blt.w	801918c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019038:	693b      	ldr	r3, [r7, #16]
 801903a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801903e:	695b      	ldr	r3, [r3, #20]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d004      	beq.n	801904e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019046:	3304      	adds	r3, #4
 8019048:	4618      	mov	r0, r3
 801904a:	f7fd fdbb 	bl	8016bc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801904e:	1d3b      	adds	r3, r7, #4
 8019050:	4618      	mov	r0, r3
 8019052:	f7ff ff87 	bl	8018f64 <prvSampleTimeNow>
 8019056:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8019058:	68bb      	ldr	r3, [r7, #8]
 801905a:	2b09      	cmp	r3, #9
 801905c:	f200 8097 	bhi.w	801918e <prvProcessReceivedCommands+0x166>
 8019060:	a201      	add	r2, pc, #4	; (adr r2, 8019068 <prvProcessReceivedCommands+0x40>)
 8019062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019066:	bf00      	nop
 8019068:	08019091 	.word	0x08019091
 801906c:	08019091 	.word	0x08019091
 8019070:	08019091 	.word	0x08019091
 8019074:	08019105 	.word	0x08019105
 8019078:	08019119 	.word	0x08019119
 801907c:	08019163 	.word	0x08019163
 8019080:	08019091 	.word	0x08019091
 8019084:	08019091 	.word	0x08019091
 8019088:	08019105 	.word	0x08019105
 801908c:	08019119 	.word	0x08019119
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019096:	f043 0301 	orr.w	r3, r3, #1
 801909a:	b2da      	uxtb	r2, r3
 801909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801909e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80190a2:	68fa      	ldr	r2, [r7, #12]
 80190a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190a6:	699b      	ldr	r3, [r3, #24]
 80190a8:	18d1      	adds	r1, r2, r3
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	6a3a      	ldr	r2, [r7, #32]
 80190ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80190b0:	f7ff ff78 	bl	8018fa4 <prvInsertTimerInActiveList>
 80190b4:	4603      	mov	r3, r0
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d069      	beq.n	801918e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80190ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190bc:	6a1b      	ldr	r3, [r3, #32]
 80190be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80190c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80190c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190c8:	f003 0304 	and.w	r3, r3, #4
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d05e      	beq.n	801918e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80190d0:	68fa      	ldr	r2, [r7, #12]
 80190d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190d4:	699b      	ldr	r3, [r3, #24]
 80190d6:	441a      	add	r2, r3
 80190d8:	2300      	movs	r3, #0
 80190da:	9300      	str	r3, [sp, #0]
 80190dc:	2300      	movs	r3, #0
 80190de:	2100      	movs	r1, #0
 80190e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80190e2:	f7ff fe21 	bl	8018d28 <xTimerGenericCommand>
 80190e6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80190e8:	69fb      	ldr	r3, [r7, #28]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d14f      	bne.n	801918e <prvProcessReceivedCommands+0x166>
	__asm volatile
 80190ee:	f04f 0320 	mov.w	r3, #32
 80190f2:	f383 8811 	msr	BASEPRI, r3
 80190f6:	f3bf 8f6f 	isb	sy
 80190fa:	f3bf 8f4f 	dsb	sy
 80190fe:	61bb      	str	r3, [r7, #24]
}
 8019100:	bf00      	nop
 8019102:	e7fe      	b.n	8019102 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801910a:	f023 0301 	bic.w	r3, r3, #1
 801910e:	b2da      	uxtb	r2, r3
 8019110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019116:	e03a      	b.n	801918e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801911a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801911e:	f043 0301 	orr.w	r3, r3, #1
 8019122:	b2da      	uxtb	r2, r3
 8019124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801912a:	68fa      	ldr	r2, [r7, #12]
 801912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801912e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019132:	699b      	ldr	r3, [r3, #24]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d10a      	bne.n	801914e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8019138:	f04f 0320 	mov.w	r3, #32
 801913c:	f383 8811 	msr	BASEPRI, r3
 8019140:	f3bf 8f6f 	isb	sy
 8019144:	f3bf 8f4f 	dsb	sy
 8019148:	617b      	str	r3, [r7, #20]
}
 801914a:	bf00      	nop
 801914c:	e7fe      	b.n	801914c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019150:	699a      	ldr	r2, [r3, #24]
 8019152:	6a3b      	ldr	r3, [r7, #32]
 8019154:	18d1      	adds	r1, r2, r3
 8019156:	6a3b      	ldr	r3, [r7, #32]
 8019158:	6a3a      	ldr	r2, [r7, #32]
 801915a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801915c:	f7ff ff22 	bl	8018fa4 <prvInsertTimerInActiveList>
					break;
 8019160:	e015      	b.n	801918e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019168:	f003 0302 	and.w	r3, r3, #2
 801916c:	2b00      	cmp	r3, #0
 801916e:	d103      	bne.n	8019178 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8019170:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019172:	f000 fbcd 	bl	8019910 <vPortFree>
 8019176:	e00a      	b.n	801918e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801917a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801917e:	f023 0301 	bic.w	r3, r3, #1
 8019182:	b2da      	uxtb	r2, r3
 8019184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801918a:	e000      	b.n	801918e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801918c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801918e:	4b08      	ldr	r3, [pc, #32]	; (80191b0 <prvProcessReceivedCommands+0x188>)
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	f107 0108 	add.w	r1, r7, #8
 8019196:	2200      	movs	r2, #0
 8019198:	4618      	mov	r0, r3
 801919a:	f7fe f85b 	bl	8017254 <xQueueReceive>
 801919e:	4603      	mov	r3, r0
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	f47f af45 	bne.w	8019030 <prvProcessReceivedCommands+0x8>
	}
}
 80191a6:	bf00      	nop
 80191a8:	bf00      	nop
 80191aa:	3728      	adds	r7, #40	; 0x28
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd80      	pop	{r7, pc}
 80191b0:	20000e40 	.word	0x20000e40

080191b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b088      	sub	sp, #32
 80191b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80191ba:	e048      	b.n	801924e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80191bc:	4b2d      	ldr	r3, [pc, #180]	; (8019274 <prvSwitchTimerLists+0xc0>)
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	68db      	ldr	r3, [r3, #12]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80191c6:	4b2b      	ldr	r3, [pc, #172]	; (8019274 <prvSwitchTimerLists+0xc0>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	68db      	ldr	r3, [r3, #12]
 80191cc:	68db      	ldr	r3, [r3, #12]
 80191ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	3304      	adds	r3, #4
 80191d4:	4618      	mov	r0, r3
 80191d6:	f7fd fcf5 	bl	8016bc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	6a1b      	ldr	r3, [r3, #32]
 80191de:	68f8      	ldr	r0, [r7, #12]
 80191e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191e8:	f003 0304 	and.w	r3, r3, #4
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d02e      	beq.n	801924e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	699b      	ldr	r3, [r3, #24]
 80191f4:	693a      	ldr	r2, [r7, #16]
 80191f6:	4413      	add	r3, r2
 80191f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80191fa:	68ba      	ldr	r2, [r7, #8]
 80191fc:	693b      	ldr	r3, [r7, #16]
 80191fe:	429a      	cmp	r2, r3
 8019200:	d90e      	bls.n	8019220 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	68ba      	ldr	r2, [r7, #8]
 8019206:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	68fa      	ldr	r2, [r7, #12]
 801920c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801920e:	4b19      	ldr	r3, [pc, #100]	; (8019274 <prvSwitchTimerLists+0xc0>)
 8019210:	681a      	ldr	r2, [r3, #0]
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	3304      	adds	r3, #4
 8019216:	4619      	mov	r1, r3
 8019218:	4610      	mov	r0, r2
 801921a:	f7fd fc9a 	bl	8016b52 <vListInsert>
 801921e:	e016      	b.n	801924e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019220:	2300      	movs	r3, #0
 8019222:	9300      	str	r3, [sp, #0]
 8019224:	2300      	movs	r3, #0
 8019226:	693a      	ldr	r2, [r7, #16]
 8019228:	2100      	movs	r1, #0
 801922a:	68f8      	ldr	r0, [r7, #12]
 801922c:	f7ff fd7c 	bl	8018d28 <xTimerGenericCommand>
 8019230:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d10a      	bne.n	801924e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019238:	f04f 0320 	mov.w	r3, #32
 801923c:	f383 8811 	msr	BASEPRI, r3
 8019240:	f3bf 8f6f 	isb	sy
 8019244:	f3bf 8f4f 	dsb	sy
 8019248:	603b      	str	r3, [r7, #0]
}
 801924a:	bf00      	nop
 801924c:	e7fe      	b.n	801924c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801924e:	4b09      	ldr	r3, [pc, #36]	; (8019274 <prvSwitchTimerLists+0xc0>)
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	2b00      	cmp	r3, #0
 8019256:	d1b1      	bne.n	80191bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019258:	4b06      	ldr	r3, [pc, #24]	; (8019274 <prvSwitchTimerLists+0xc0>)
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801925e:	4b06      	ldr	r3, [pc, #24]	; (8019278 <prvSwitchTimerLists+0xc4>)
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	4a04      	ldr	r2, [pc, #16]	; (8019274 <prvSwitchTimerLists+0xc0>)
 8019264:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019266:	4a04      	ldr	r2, [pc, #16]	; (8019278 <prvSwitchTimerLists+0xc4>)
 8019268:	697b      	ldr	r3, [r7, #20]
 801926a:	6013      	str	r3, [r2, #0]
}
 801926c:	bf00      	nop
 801926e:	3718      	adds	r7, #24
 8019270:	46bd      	mov	sp, r7
 8019272:	bd80      	pop	{r7, pc}
 8019274:	20000e38 	.word	0x20000e38
 8019278:	20000e3c 	.word	0x20000e3c

0801927c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801927c:	b580      	push	{r7, lr}
 801927e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019280:	f000 f960 	bl	8019544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019284:	4b12      	ldr	r3, [pc, #72]	; (80192d0 <prvCheckForValidListAndQueue+0x54>)
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d11d      	bne.n	80192c8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 801928c:	4811      	ldr	r0, [pc, #68]	; (80192d4 <prvCheckForValidListAndQueue+0x58>)
 801928e:	f7fd fc0f 	bl	8016ab0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019292:	4811      	ldr	r0, [pc, #68]	; (80192d8 <prvCheckForValidListAndQueue+0x5c>)
 8019294:	f7fd fc0c 	bl	8016ab0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019298:	4b10      	ldr	r3, [pc, #64]	; (80192dc <prvCheckForValidListAndQueue+0x60>)
 801929a:	4a0e      	ldr	r2, [pc, #56]	; (80192d4 <prvCheckForValidListAndQueue+0x58>)
 801929c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801929e:	4b10      	ldr	r3, [pc, #64]	; (80192e0 <prvCheckForValidListAndQueue+0x64>)
 80192a0:	4a0d      	ldr	r2, [pc, #52]	; (80192d8 <prvCheckForValidListAndQueue+0x5c>)
 80192a2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80192a4:	2200      	movs	r2, #0
 80192a6:	210c      	movs	r1, #12
 80192a8:	2064      	movs	r0, #100	; 0x64
 80192aa:	f7fd fd1d 	bl	8016ce8 <xQueueGenericCreate>
 80192ae:	4603      	mov	r3, r0
 80192b0:	4a07      	ldr	r2, [pc, #28]	; (80192d0 <prvCheckForValidListAndQueue+0x54>)
 80192b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80192b4:	4b06      	ldr	r3, [pc, #24]	; (80192d0 <prvCheckForValidListAndQueue+0x54>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d005      	beq.n	80192c8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80192bc:	4b04      	ldr	r3, [pc, #16]	; (80192d0 <prvCheckForValidListAndQueue+0x54>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	4908      	ldr	r1, [pc, #32]	; (80192e4 <prvCheckForValidListAndQueue+0x68>)
 80192c2:	4618      	mov	r0, r3
 80192c4:	f7fe fb5a 	bl	801797c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80192c8:	f000 f96c 	bl	80195a4 <vPortExitCritical>
}
 80192cc:	bf00      	nop
 80192ce:	bd80      	pop	{r7, pc}
 80192d0:	20000e40 	.word	0x20000e40
 80192d4:	20000e10 	.word	0x20000e10
 80192d8:	20000e24 	.word	0x20000e24
 80192dc:	20000e38 	.word	0x20000e38
 80192e0:	20000e3c 	.word	0x20000e3c
 80192e4:	080218a4 	.word	0x080218a4

080192e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80192e8:	b480      	push	{r7}
 80192ea:	b085      	sub	sp, #20
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	60f8      	str	r0, [r7, #12]
 80192f0:	60b9      	str	r1, [r7, #8]
 80192f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	3b04      	subs	r3, #4
 80192f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	3b04      	subs	r3, #4
 8019306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	f023 0201 	bic.w	r2, r3, #1
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	3b04      	subs	r3, #4
 8019316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019318:	4a0c      	ldr	r2, [pc, #48]	; (801934c <pxPortInitialiseStack+0x64>)
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	3b14      	subs	r3, #20
 8019322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019324:	687a      	ldr	r2, [r7, #4]
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	3b04      	subs	r3, #4
 801932e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	f06f 0202 	mvn.w	r2, #2
 8019336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	3b20      	subs	r3, #32
 801933c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801933e:	68fb      	ldr	r3, [r7, #12]
}
 8019340:	4618      	mov	r0, r3
 8019342:	3714      	adds	r7, #20
 8019344:	46bd      	mov	sp, r7
 8019346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934a:	4770      	bx	lr
 801934c:	08019351 	.word	0x08019351

08019350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019350:	b480      	push	{r7}
 8019352:	b085      	sub	sp, #20
 8019354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019356:	2300      	movs	r3, #0
 8019358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801935a:	4b12      	ldr	r3, [pc, #72]	; (80193a4 <prvTaskExitError+0x54>)
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019362:	d00a      	beq.n	801937a <prvTaskExitError+0x2a>
	__asm volatile
 8019364:	f04f 0320 	mov.w	r3, #32
 8019368:	f383 8811 	msr	BASEPRI, r3
 801936c:	f3bf 8f6f 	isb	sy
 8019370:	f3bf 8f4f 	dsb	sy
 8019374:	60fb      	str	r3, [r7, #12]
}
 8019376:	bf00      	nop
 8019378:	e7fe      	b.n	8019378 <prvTaskExitError+0x28>
	__asm volatile
 801937a:	f04f 0320 	mov.w	r3, #32
 801937e:	f383 8811 	msr	BASEPRI, r3
 8019382:	f3bf 8f6f 	isb	sy
 8019386:	f3bf 8f4f 	dsb	sy
 801938a:	60bb      	str	r3, [r7, #8]
}
 801938c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801938e:	bf00      	nop
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d0fc      	beq.n	8019390 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019396:	bf00      	nop
 8019398:	bf00      	nop
 801939a:	3714      	adds	r7, #20
 801939c:	46bd      	mov	sp, r7
 801939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a2:	4770      	bx	lr
 80193a4:	20000080 	.word	0x20000080
	...

080193b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80193b0:	4b07      	ldr	r3, [pc, #28]	; (80193d0 <pxCurrentTCBConst2>)
 80193b2:	6819      	ldr	r1, [r3, #0]
 80193b4:	6808      	ldr	r0, [r1, #0]
 80193b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ba:	f380 8809 	msr	PSP, r0
 80193be:	f3bf 8f6f 	isb	sy
 80193c2:	f04f 0000 	mov.w	r0, #0
 80193c6:	f380 8811 	msr	BASEPRI, r0
 80193ca:	4770      	bx	lr
 80193cc:	f3af 8000 	nop.w

080193d0 <pxCurrentTCBConst2>:
 80193d0:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80193d4:	bf00      	nop
 80193d6:	bf00      	nop

080193d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80193d8:	4808      	ldr	r0, [pc, #32]	; (80193fc <prvPortStartFirstTask+0x24>)
 80193da:	6800      	ldr	r0, [r0, #0]
 80193dc:	6800      	ldr	r0, [r0, #0]
 80193de:	f380 8808 	msr	MSP, r0
 80193e2:	f04f 0000 	mov.w	r0, #0
 80193e6:	f380 8814 	msr	CONTROL, r0
 80193ea:	b662      	cpsie	i
 80193ec:	b661      	cpsie	f
 80193ee:	f3bf 8f4f 	dsb	sy
 80193f2:	f3bf 8f6f 	isb	sy
 80193f6:	df00      	svc	0
 80193f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80193fa:	bf00      	nop
 80193fc:	e000ed08 	.word	0xe000ed08

08019400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b086      	sub	sp, #24
 8019404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019406:	4b46      	ldr	r3, [pc, #280]	; (8019520 <xPortStartScheduler+0x120>)
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	4a46      	ldr	r2, [pc, #280]	; (8019524 <xPortStartScheduler+0x124>)
 801940c:	4293      	cmp	r3, r2
 801940e:	d10a      	bne.n	8019426 <xPortStartScheduler+0x26>
	__asm volatile
 8019410:	f04f 0320 	mov.w	r3, #32
 8019414:	f383 8811 	msr	BASEPRI, r3
 8019418:	f3bf 8f6f 	isb	sy
 801941c:	f3bf 8f4f 	dsb	sy
 8019420:	613b      	str	r3, [r7, #16]
}
 8019422:	bf00      	nop
 8019424:	e7fe      	b.n	8019424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019426:	4b3e      	ldr	r3, [pc, #248]	; (8019520 <xPortStartScheduler+0x120>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	4a3f      	ldr	r2, [pc, #252]	; (8019528 <xPortStartScheduler+0x128>)
 801942c:	4293      	cmp	r3, r2
 801942e:	d10a      	bne.n	8019446 <xPortStartScheduler+0x46>
	__asm volatile
 8019430:	f04f 0320 	mov.w	r3, #32
 8019434:	f383 8811 	msr	BASEPRI, r3
 8019438:	f3bf 8f6f 	isb	sy
 801943c:	f3bf 8f4f 	dsb	sy
 8019440:	60fb      	str	r3, [r7, #12]
}
 8019442:	bf00      	nop
 8019444:	e7fe      	b.n	8019444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019446:	4b39      	ldr	r3, [pc, #228]	; (801952c <xPortStartScheduler+0x12c>)
 8019448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801944a:	697b      	ldr	r3, [r7, #20]
 801944c:	781b      	ldrb	r3, [r3, #0]
 801944e:	b2db      	uxtb	r3, r3
 8019450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019452:	697b      	ldr	r3, [r7, #20]
 8019454:	22ff      	movs	r2, #255	; 0xff
 8019456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019458:	697b      	ldr	r3, [r7, #20]
 801945a:	781b      	ldrb	r3, [r3, #0]
 801945c:	b2db      	uxtb	r3, r3
 801945e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019460:	78fb      	ldrb	r3, [r7, #3]
 8019462:	b2db      	uxtb	r3, r3
 8019464:	f003 0320 	and.w	r3, r3, #32
 8019468:	b2da      	uxtb	r2, r3
 801946a:	4b31      	ldr	r3, [pc, #196]	; (8019530 <xPortStartScheduler+0x130>)
 801946c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801946e:	4b31      	ldr	r3, [pc, #196]	; (8019534 <xPortStartScheduler+0x134>)
 8019470:	2207      	movs	r2, #7
 8019472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019474:	e009      	b.n	801948a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019476:	4b2f      	ldr	r3, [pc, #188]	; (8019534 <xPortStartScheduler+0x134>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	3b01      	subs	r3, #1
 801947c:	4a2d      	ldr	r2, [pc, #180]	; (8019534 <xPortStartScheduler+0x134>)
 801947e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019480:	78fb      	ldrb	r3, [r7, #3]
 8019482:	b2db      	uxtb	r3, r3
 8019484:	005b      	lsls	r3, r3, #1
 8019486:	b2db      	uxtb	r3, r3
 8019488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801948a:	78fb      	ldrb	r3, [r7, #3]
 801948c:	b2db      	uxtb	r3, r3
 801948e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019492:	2b80      	cmp	r3, #128	; 0x80
 8019494:	d0ef      	beq.n	8019476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019496:	4b27      	ldr	r3, [pc, #156]	; (8019534 <xPortStartScheduler+0x134>)
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	f1c3 0307 	rsb	r3, r3, #7
 801949e:	2b04      	cmp	r3, #4
 80194a0:	d00a      	beq.n	80194b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80194a2:	f04f 0320 	mov.w	r3, #32
 80194a6:	f383 8811 	msr	BASEPRI, r3
 80194aa:	f3bf 8f6f 	isb	sy
 80194ae:	f3bf 8f4f 	dsb	sy
 80194b2:	60bb      	str	r3, [r7, #8]
}
 80194b4:	bf00      	nop
 80194b6:	e7fe      	b.n	80194b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80194b8:	4b1e      	ldr	r3, [pc, #120]	; (8019534 <xPortStartScheduler+0x134>)
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	021b      	lsls	r3, r3, #8
 80194be:	4a1d      	ldr	r2, [pc, #116]	; (8019534 <xPortStartScheduler+0x134>)
 80194c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80194c2:	4b1c      	ldr	r3, [pc, #112]	; (8019534 <xPortStartScheduler+0x134>)
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80194ca:	4a1a      	ldr	r2, [pc, #104]	; (8019534 <xPortStartScheduler+0x134>)
 80194cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	b2da      	uxtb	r2, r3
 80194d2:	697b      	ldr	r3, [r7, #20]
 80194d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80194d6:	4b18      	ldr	r3, [pc, #96]	; (8019538 <xPortStartScheduler+0x138>)
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	4a17      	ldr	r2, [pc, #92]	; (8019538 <xPortStartScheduler+0x138>)
 80194dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80194e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80194e2:	4b15      	ldr	r3, [pc, #84]	; (8019538 <xPortStartScheduler+0x138>)
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	4a14      	ldr	r2, [pc, #80]	; (8019538 <xPortStartScheduler+0x138>)
 80194e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80194ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80194ee:	f000 f8dd 	bl	80196ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80194f2:	4b12      	ldr	r3, [pc, #72]	; (801953c <xPortStartScheduler+0x13c>)
 80194f4:	2200      	movs	r2, #0
 80194f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80194f8:	f000 f8fc 	bl	80196f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80194fc:	4b10      	ldr	r3, [pc, #64]	; (8019540 <xPortStartScheduler+0x140>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	4a0f      	ldr	r2, [pc, #60]	; (8019540 <xPortStartScheduler+0x140>)
 8019502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019508:	f7ff ff66 	bl	80193d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801950c:	f7fe ff4e 	bl	80183ac <vTaskSwitchContext>
	prvTaskExitError();
 8019510:	f7ff ff1e 	bl	8019350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019514:	2300      	movs	r3, #0
}
 8019516:	4618      	mov	r0, r3
 8019518:	3718      	adds	r7, #24
 801951a:	46bd      	mov	sp, r7
 801951c:	bd80      	pop	{r7, pc}
 801951e:	bf00      	nop
 8019520:	e000ed00 	.word	0xe000ed00
 8019524:	410fc271 	.word	0x410fc271
 8019528:	410fc270 	.word	0x410fc270
 801952c:	e000e400 	.word	0xe000e400
 8019530:	20000e4c 	.word	0x20000e4c
 8019534:	20000e50 	.word	0x20000e50
 8019538:	e000ed20 	.word	0xe000ed20
 801953c:	20000080 	.word	0x20000080
 8019540:	e000ef34 	.word	0xe000ef34

08019544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019544:	b480      	push	{r7}
 8019546:	b083      	sub	sp, #12
 8019548:	af00      	add	r7, sp, #0
	__asm volatile
 801954a:	f04f 0320 	mov.w	r3, #32
 801954e:	f383 8811 	msr	BASEPRI, r3
 8019552:	f3bf 8f6f 	isb	sy
 8019556:	f3bf 8f4f 	dsb	sy
 801955a:	607b      	str	r3, [r7, #4]
}
 801955c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801955e:	4b0f      	ldr	r3, [pc, #60]	; (801959c <vPortEnterCritical+0x58>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	3301      	adds	r3, #1
 8019564:	4a0d      	ldr	r2, [pc, #52]	; (801959c <vPortEnterCritical+0x58>)
 8019566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019568:	4b0c      	ldr	r3, [pc, #48]	; (801959c <vPortEnterCritical+0x58>)
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	2b01      	cmp	r3, #1
 801956e:	d10f      	bne.n	8019590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019570:	4b0b      	ldr	r3, [pc, #44]	; (80195a0 <vPortEnterCritical+0x5c>)
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	b2db      	uxtb	r3, r3
 8019576:	2b00      	cmp	r3, #0
 8019578:	d00a      	beq.n	8019590 <vPortEnterCritical+0x4c>
	__asm volatile
 801957a:	f04f 0320 	mov.w	r3, #32
 801957e:	f383 8811 	msr	BASEPRI, r3
 8019582:	f3bf 8f6f 	isb	sy
 8019586:	f3bf 8f4f 	dsb	sy
 801958a:	603b      	str	r3, [r7, #0]
}
 801958c:	bf00      	nop
 801958e:	e7fe      	b.n	801958e <vPortEnterCritical+0x4a>
	}
}
 8019590:	bf00      	nop
 8019592:	370c      	adds	r7, #12
 8019594:	46bd      	mov	sp, r7
 8019596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959a:	4770      	bx	lr
 801959c:	20000080 	.word	0x20000080
 80195a0:	e000ed04 	.word	0xe000ed04

080195a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80195a4:	b480      	push	{r7}
 80195a6:	b083      	sub	sp, #12
 80195a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80195aa:	4b12      	ldr	r3, [pc, #72]	; (80195f4 <vPortExitCritical+0x50>)
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d10a      	bne.n	80195c8 <vPortExitCritical+0x24>
	__asm volatile
 80195b2:	f04f 0320 	mov.w	r3, #32
 80195b6:	f383 8811 	msr	BASEPRI, r3
 80195ba:	f3bf 8f6f 	isb	sy
 80195be:	f3bf 8f4f 	dsb	sy
 80195c2:	607b      	str	r3, [r7, #4]
}
 80195c4:	bf00      	nop
 80195c6:	e7fe      	b.n	80195c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80195c8:	4b0a      	ldr	r3, [pc, #40]	; (80195f4 <vPortExitCritical+0x50>)
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	3b01      	subs	r3, #1
 80195ce:	4a09      	ldr	r2, [pc, #36]	; (80195f4 <vPortExitCritical+0x50>)
 80195d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80195d2:	4b08      	ldr	r3, [pc, #32]	; (80195f4 <vPortExitCritical+0x50>)
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d105      	bne.n	80195e6 <vPortExitCritical+0x42>
 80195da:	2300      	movs	r3, #0
 80195dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80195de:	683b      	ldr	r3, [r7, #0]
 80195e0:	f383 8811 	msr	BASEPRI, r3
}
 80195e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80195e6:	bf00      	nop
 80195e8:	370c      	adds	r7, #12
 80195ea:	46bd      	mov	sp, r7
 80195ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f0:	4770      	bx	lr
 80195f2:	bf00      	nop
 80195f4:	20000080 	.word	0x20000080
	...

08019600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019600:	f3ef 8009 	mrs	r0, PSP
 8019604:	f3bf 8f6f 	isb	sy
 8019608:	4b15      	ldr	r3, [pc, #84]	; (8019660 <pxCurrentTCBConst>)
 801960a:	681a      	ldr	r2, [r3, #0]
 801960c:	f01e 0f10 	tst.w	lr, #16
 8019610:	bf08      	it	eq
 8019612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801961a:	6010      	str	r0, [r2, #0]
 801961c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019620:	f04f 0020 	mov.w	r0, #32
 8019624:	f380 8811 	msr	BASEPRI, r0
 8019628:	f3bf 8f4f 	dsb	sy
 801962c:	f3bf 8f6f 	isb	sy
 8019630:	f7fe febc 	bl	80183ac <vTaskSwitchContext>
 8019634:	f04f 0000 	mov.w	r0, #0
 8019638:	f380 8811 	msr	BASEPRI, r0
 801963c:	bc09      	pop	{r0, r3}
 801963e:	6819      	ldr	r1, [r3, #0]
 8019640:	6808      	ldr	r0, [r1, #0]
 8019642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019646:	f01e 0f10 	tst.w	lr, #16
 801964a:	bf08      	it	eq
 801964c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019650:	f380 8809 	msr	PSP, r0
 8019654:	f3bf 8f6f 	isb	sy
 8019658:	4770      	bx	lr
 801965a:	bf00      	nop
 801965c:	f3af 8000 	nop.w

08019660 <pxCurrentTCBConst>:
 8019660:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019664:	bf00      	nop
 8019666:	bf00      	nop

08019668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b082      	sub	sp, #8
 801966c:	af00      	add	r7, sp, #0
	__asm volatile
 801966e:	f04f 0320 	mov.w	r3, #32
 8019672:	f383 8811 	msr	BASEPRI, r3
 8019676:	f3bf 8f6f 	isb	sy
 801967a:	f3bf 8f4f 	dsb	sy
 801967e:	607b      	str	r3, [r7, #4]
}
 8019680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019682:	f7fe fdbf 	bl	8018204 <xTaskIncrementTick>
 8019686:	4603      	mov	r3, r0
 8019688:	2b00      	cmp	r3, #0
 801968a:	d003      	beq.n	8019694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801968c:	4b06      	ldr	r3, [pc, #24]	; (80196a8 <xPortSysTickHandler+0x40>)
 801968e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019692:	601a      	str	r2, [r3, #0]
 8019694:	2300      	movs	r3, #0
 8019696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019698:	683b      	ldr	r3, [r7, #0]
 801969a:	f383 8811 	msr	BASEPRI, r3
}
 801969e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80196a0:	bf00      	nop
 80196a2:	3708      	adds	r7, #8
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd80      	pop	{r7, pc}
 80196a8:	e000ed04 	.word	0xe000ed04

080196ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80196ac:	b480      	push	{r7}
 80196ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80196b0:	4b0b      	ldr	r3, [pc, #44]	; (80196e0 <vPortSetupTimerInterrupt+0x34>)
 80196b2:	2200      	movs	r2, #0
 80196b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80196b6:	4b0b      	ldr	r3, [pc, #44]	; (80196e4 <vPortSetupTimerInterrupt+0x38>)
 80196b8:	2200      	movs	r2, #0
 80196ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80196bc:	4b0a      	ldr	r3, [pc, #40]	; (80196e8 <vPortSetupTimerInterrupt+0x3c>)
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	4a0a      	ldr	r2, [pc, #40]	; (80196ec <vPortSetupTimerInterrupt+0x40>)
 80196c2:	fba2 2303 	umull	r2, r3, r2, r3
 80196c6:	099b      	lsrs	r3, r3, #6
 80196c8:	4a09      	ldr	r2, [pc, #36]	; (80196f0 <vPortSetupTimerInterrupt+0x44>)
 80196ca:	3b01      	subs	r3, #1
 80196cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80196ce:	4b04      	ldr	r3, [pc, #16]	; (80196e0 <vPortSetupTimerInterrupt+0x34>)
 80196d0:	2207      	movs	r2, #7
 80196d2:	601a      	str	r2, [r3, #0]
}
 80196d4:	bf00      	nop
 80196d6:	46bd      	mov	sp, r7
 80196d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196dc:	4770      	bx	lr
 80196de:	bf00      	nop
 80196e0:	e000e010 	.word	0xe000e010
 80196e4:	e000e018 	.word	0xe000e018
 80196e8:	20000038 	.word	0x20000038
 80196ec:	10624dd3 	.word	0x10624dd3
 80196f0:	e000e014 	.word	0xe000e014

080196f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80196f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019704 <vPortEnableVFP+0x10>
 80196f8:	6801      	ldr	r1, [r0, #0]
 80196fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80196fe:	6001      	str	r1, [r0, #0]
 8019700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019702:	bf00      	nop
 8019704:	e000ed88 	.word	0xe000ed88

08019708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019708:	b480      	push	{r7}
 801970a:	b085      	sub	sp, #20
 801970c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801970e:	f3ef 8305 	mrs	r3, IPSR
 8019712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	2b0f      	cmp	r3, #15
 8019718:	d914      	bls.n	8019744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801971a:	4a17      	ldr	r2, [pc, #92]	; (8019778 <vPortValidateInterruptPriority+0x70>)
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	4413      	add	r3, r2
 8019720:	781b      	ldrb	r3, [r3, #0]
 8019722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019724:	4b15      	ldr	r3, [pc, #84]	; (801977c <vPortValidateInterruptPriority+0x74>)
 8019726:	781b      	ldrb	r3, [r3, #0]
 8019728:	7afa      	ldrb	r2, [r7, #11]
 801972a:	429a      	cmp	r2, r3
 801972c:	d20a      	bcs.n	8019744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801972e:	f04f 0320 	mov.w	r3, #32
 8019732:	f383 8811 	msr	BASEPRI, r3
 8019736:	f3bf 8f6f 	isb	sy
 801973a:	f3bf 8f4f 	dsb	sy
 801973e:	607b      	str	r3, [r7, #4]
}
 8019740:	bf00      	nop
 8019742:	e7fe      	b.n	8019742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019744:	4b0e      	ldr	r3, [pc, #56]	; (8019780 <vPortValidateInterruptPriority+0x78>)
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801974c:	4b0d      	ldr	r3, [pc, #52]	; (8019784 <vPortValidateInterruptPriority+0x7c>)
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	429a      	cmp	r2, r3
 8019752:	d90a      	bls.n	801976a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019754:	f04f 0320 	mov.w	r3, #32
 8019758:	f383 8811 	msr	BASEPRI, r3
 801975c:	f3bf 8f6f 	isb	sy
 8019760:	f3bf 8f4f 	dsb	sy
 8019764:	603b      	str	r3, [r7, #0]
}
 8019766:	bf00      	nop
 8019768:	e7fe      	b.n	8019768 <vPortValidateInterruptPriority+0x60>
	}
 801976a:	bf00      	nop
 801976c:	3714      	adds	r7, #20
 801976e:	46bd      	mov	sp, r7
 8019770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019774:	4770      	bx	lr
 8019776:	bf00      	nop
 8019778:	e000e3f0 	.word	0xe000e3f0
 801977c:	20000e4c 	.word	0x20000e4c
 8019780:	e000ed0c 	.word	0xe000ed0c
 8019784:	20000e50 	.word	0x20000e50

08019788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019788:	b580      	push	{r7, lr}
 801978a:	b08a      	sub	sp, #40	; 0x28
 801978c:	af00      	add	r7, sp, #0
 801978e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019790:	2300      	movs	r3, #0
 8019792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019794:	f7fe fc7c 	bl	8018090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019798:	4b58      	ldr	r3, [pc, #352]	; (80198fc <pvPortMalloc+0x174>)
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d101      	bne.n	80197a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80197a0:	f000 f910 	bl	80199c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80197a4:	4b56      	ldr	r3, [pc, #344]	; (8019900 <pvPortMalloc+0x178>)
 80197a6:	681a      	ldr	r2, [r3, #0]
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	4013      	ands	r3, r2
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	f040 808e 	bne.w	80198ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d01d      	beq.n	80197f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80197b8:	2208      	movs	r2, #8
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	4413      	add	r3, r2
 80197be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	f003 0307 	and.w	r3, r3, #7
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d014      	beq.n	80197f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	f023 0307 	bic.w	r3, r3, #7
 80197d0:	3308      	adds	r3, #8
 80197d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	f003 0307 	and.w	r3, r3, #7
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d00a      	beq.n	80197f4 <pvPortMalloc+0x6c>
	__asm volatile
 80197de:	f04f 0320 	mov.w	r3, #32
 80197e2:	f383 8811 	msr	BASEPRI, r3
 80197e6:	f3bf 8f6f 	isb	sy
 80197ea:	f3bf 8f4f 	dsb	sy
 80197ee:	617b      	str	r3, [r7, #20]
}
 80197f0:	bf00      	nop
 80197f2:	e7fe      	b.n	80197f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d069      	beq.n	80198ce <pvPortMalloc+0x146>
 80197fa:	4b42      	ldr	r3, [pc, #264]	; (8019904 <pvPortMalloc+0x17c>)
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	687a      	ldr	r2, [r7, #4]
 8019800:	429a      	cmp	r2, r3
 8019802:	d864      	bhi.n	80198ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019804:	4b40      	ldr	r3, [pc, #256]	; (8019908 <pvPortMalloc+0x180>)
 8019806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019808:	4b3f      	ldr	r3, [pc, #252]	; (8019908 <pvPortMalloc+0x180>)
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801980e:	e004      	b.n	801981a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801981c:	685b      	ldr	r3, [r3, #4]
 801981e:	687a      	ldr	r2, [r7, #4]
 8019820:	429a      	cmp	r2, r3
 8019822:	d903      	bls.n	801982c <pvPortMalloc+0xa4>
 8019824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d1f1      	bne.n	8019810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801982c:	4b33      	ldr	r3, [pc, #204]	; (80198fc <pvPortMalloc+0x174>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019832:	429a      	cmp	r2, r3
 8019834:	d04b      	beq.n	80198ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019836:	6a3b      	ldr	r3, [r7, #32]
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	2208      	movs	r2, #8
 801983c:	4413      	add	r3, r2
 801983e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019842:	681a      	ldr	r2, [r3, #0]
 8019844:	6a3b      	ldr	r3, [r7, #32]
 8019846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801984a:	685a      	ldr	r2, [r3, #4]
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	1ad2      	subs	r2, r2, r3
 8019850:	2308      	movs	r3, #8
 8019852:	005b      	lsls	r3, r3, #1
 8019854:	429a      	cmp	r2, r3
 8019856:	d91f      	bls.n	8019898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	4413      	add	r3, r2
 801985e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019860:	69bb      	ldr	r3, [r7, #24]
 8019862:	f003 0307 	and.w	r3, r3, #7
 8019866:	2b00      	cmp	r3, #0
 8019868:	d00a      	beq.n	8019880 <pvPortMalloc+0xf8>
	__asm volatile
 801986a:	f04f 0320 	mov.w	r3, #32
 801986e:	f383 8811 	msr	BASEPRI, r3
 8019872:	f3bf 8f6f 	isb	sy
 8019876:	f3bf 8f4f 	dsb	sy
 801987a:	613b      	str	r3, [r7, #16]
}
 801987c:	bf00      	nop
 801987e:	e7fe      	b.n	801987e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019882:	685a      	ldr	r2, [r3, #4]
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	1ad2      	subs	r2, r2, r3
 8019888:	69bb      	ldr	r3, [r7, #24]
 801988a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801988e:	687a      	ldr	r2, [r7, #4]
 8019890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019892:	69b8      	ldr	r0, [r7, #24]
 8019894:	f000 f8f8 	bl	8019a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019898:	4b1a      	ldr	r3, [pc, #104]	; (8019904 <pvPortMalloc+0x17c>)
 801989a:	681a      	ldr	r2, [r3, #0]
 801989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801989e:	685b      	ldr	r3, [r3, #4]
 80198a0:	1ad3      	subs	r3, r2, r3
 80198a2:	4a18      	ldr	r2, [pc, #96]	; (8019904 <pvPortMalloc+0x17c>)
 80198a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80198a6:	4b17      	ldr	r3, [pc, #92]	; (8019904 <pvPortMalloc+0x17c>)
 80198a8:	681a      	ldr	r2, [r3, #0]
 80198aa:	4b18      	ldr	r3, [pc, #96]	; (801990c <pvPortMalloc+0x184>)
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	429a      	cmp	r2, r3
 80198b0:	d203      	bcs.n	80198ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80198b2:	4b14      	ldr	r3, [pc, #80]	; (8019904 <pvPortMalloc+0x17c>)
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	4a15      	ldr	r2, [pc, #84]	; (801990c <pvPortMalloc+0x184>)
 80198b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80198ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198bc:	685a      	ldr	r2, [r3, #4]
 80198be:	4b10      	ldr	r3, [pc, #64]	; (8019900 <pvPortMalloc+0x178>)
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	431a      	orrs	r2, r3
 80198c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80198c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ca:	2200      	movs	r2, #0
 80198cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80198ce:	f7fe fbed 	bl	80180ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80198d2:	69fb      	ldr	r3, [r7, #28]
 80198d4:	f003 0307 	and.w	r3, r3, #7
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d00a      	beq.n	80198f2 <pvPortMalloc+0x16a>
	__asm volatile
 80198dc:	f04f 0320 	mov.w	r3, #32
 80198e0:	f383 8811 	msr	BASEPRI, r3
 80198e4:	f3bf 8f6f 	isb	sy
 80198e8:	f3bf 8f4f 	dsb	sy
 80198ec:	60fb      	str	r3, [r7, #12]
}
 80198ee:	bf00      	nop
 80198f0:	e7fe      	b.n	80198f0 <pvPortMalloc+0x168>
	return pvReturn;
 80198f2:	69fb      	ldr	r3, [r7, #28]
}
 80198f4:	4618      	mov	r0, r3
 80198f6:	3728      	adds	r7, #40	; 0x28
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bd80      	pop	{r7, pc}
 80198fc:	2000fe5c 	.word	0x2000fe5c
 8019900:	2000fe68 	.word	0x2000fe68
 8019904:	2000fe60 	.word	0x2000fe60
 8019908:	2000fe54 	.word	0x2000fe54
 801990c:	2000fe64 	.word	0x2000fe64

08019910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b086      	sub	sp, #24
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d048      	beq.n	80199b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019922:	2308      	movs	r3, #8
 8019924:	425b      	negs	r3, r3
 8019926:	697a      	ldr	r2, [r7, #20]
 8019928:	4413      	add	r3, r2
 801992a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801992c:	697b      	ldr	r3, [r7, #20]
 801992e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019930:	693b      	ldr	r3, [r7, #16]
 8019932:	685a      	ldr	r2, [r3, #4]
 8019934:	4b21      	ldr	r3, [pc, #132]	; (80199bc <vPortFree+0xac>)
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	4013      	ands	r3, r2
 801993a:	2b00      	cmp	r3, #0
 801993c:	d10a      	bne.n	8019954 <vPortFree+0x44>
	__asm volatile
 801993e:	f04f 0320 	mov.w	r3, #32
 8019942:	f383 8811 	msr	BASEPRI, r3
 8019946:	f3bf 8f6f 	isb	sy
 801994a:	f3bf 8f4f 	dsb	sy
 801994e:	60fb      	str	r3, [r7, #12]
}
 8019950:	bf00      	nop
 8019952:	e7fe      	b.n	8019952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019954:	693b      	ldr	r3, [r7, #16]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d00a      	beq.n	8019972 <vPortFree+0x62>
	__asm volatile
 801995c:	f04f 0320 	mov.w	r3, #32
 8019960:	f383 8811 	msr	BASEPRI, r3
 8019964:	f3bf 8f6f 	isb	sy
 8019968:	f3bf 8f4f 	dsb	sy
 801996c:	60bb      	str	r3, [r7, #8]
}
 801996e:	bf00      	nop
 8019970:	e7fe      	b.n	8019970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019972:	693b      	ldr	r3, [r7, #16]
 8019974:	685a      	ldr	r2, [r3, #4]
 8019976:	4b11      	ldr	r3, [pc, #68]	; (80199bc <vPortFree+0xac>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	4013      	ands	r3, r2
 801997c:	2b00      	cmp	r3, #0
 801997e:	d019      	beq.n	80199b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019980:	693b      	ldr	r3, [r7, #16]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d115      	bne.n	80199b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019988:	693b      	ldr	r3, [r7, #16]
 801998a:	685a      	ldr	r2, [r3, #4]
 801998c:	4b0b      	ldr	r3, [pc, #44]	; (80199bc <vPortFree+0xac>)
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	43db      	mvns	r3, r3
 8019992:	401a      	ands	r2, r3
 8019994:	693b      	ldr	r3, [r7, #16]
 8019996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019998:	f7fe fb7a 	bl	8018090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801999c:	693b      	ldr	r3, [r7, #16]
 801999e:	685a      	ldr	r2, [r3, #4]
 80199a0:	4b07      	ldr	r3, [pc, #28]	; (80199c0 <vPortFree+0xb0>)
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	4413      	add	r3, r2
 80199a6:	4a06      	ldr	r2, [pc, #24]	; (80199c0 <vPortFree+0xb0>)
 80199a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80199aa:	6938      	ldr	r0, [r7, #16]
 80199ac:	f000 f86c 	bl	8019a88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80199b0:	f7fe fb7c 	bl	80180ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80199b4:	bf00      	nop
 80199b6:	3718      	adds	r7, #24
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}
 80199bc:	2000fe68 	.word	0x2000fe68
 80199c0:	2000fe60 	.word	0x2000fe60

080199c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80199c4:	b480      	push	{r7}
 80199c6:	b085      	sub	sp, #20
 80199c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80199ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80199ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80199d0:	4b27      	ldr	r3, [pc, #156]	; (8019a70 <prvHeapInit+0xac>)
 80199d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	f003 0307 	and.w	r3, r3, #7
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d00c      	beq.n	80199f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	3307      	adds	r3, #7
 80199e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	f023 0307 	bic.w	r3, r3, #7
 80199ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80199ec:	68ba      	ldr	r2, [r7, #8]
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	1ad3      	subs	r3, r2, r3
 80199f2:	4a1f      	ldr	r2, [pc, #124]	; (8019a70 <prvHeapInit+0xac>)
 80199f4:	4413      	add	r3, r2
 80199f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80199fc:	4a1d      	ldr	r2, [pc, #116]	; (8019a74 <prvHeapInit+0xb0>)
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019a02:	4b1c      	ldr	r3, [pc, #112]	; (8019a74 <prvHeapInit+0xb0>)
 8019a04:	2200      	movs	r2, #0
 8019a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	68ba      	ldr	r2, [r7, #8]
 8019a0c:	4413      	add	r3, r2
 8019a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019a10:	2208      	movs	r2, #8
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	1a9b      	subs	r3, r3, r2
 8019a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	f023 0307 	bic.w	r3, r3, #7
 8019a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	4a15      	ldr	r2, [pc, #84]	; (8019a78 <prvHeapInit+0xb4>)
 8019a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019a26:	4b14      	ldr	r3, [pc, #80]	; (8019a78 <prvHeapInit+0xb4>)
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019a2e:	4b12      	ldr	r3, [pc, #72]	; (8019a78 <prvHeapInit+0xb4>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	2200      	movs	r2, #0
 8019a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019a3a:	683b      	ldr	r3, [r7, #0]
 8019a3c:	68fa      	ldr	r2, [r7, #12]
 8019a3e:	1ad2      	subs	r2, r2, r3
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019a44:	4b0c      	ldr	r3, [pc, #48]	; (8019a78 <prvHeapInit+0xb4>)
 8019a46:	681a      	ldr	r2, [r3, #0]
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019a4c:	683b      	ldr	r3, [r7, #0]
 8019a4e:	685b      	ldr	r3, [r3, #4]
 8019a50:	4a0a      	ldr	r2, [pc, #40]	; (8019a7c <prvHeapInit+0xb8>)
 8019a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019a54:	683b      	ldr	r3, [r7, #0]
 8019a56:	685b      	ldr	r3, [r3, #4]
 8019a58:	4a09      	ldr	r2, [pc, #36]	; (8019a80 <prvHeapInit+0xbc>)
 8019a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019a5c:	4b09      	ldr	r3, [pc, #36]	; (8019a84 <prvHeapInit+0xc0>)
 8019a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019a62:	601a      	str	r2, [r3, #0]
}
 8019a64:	bf00      	nop
 8019a66:	3714      	adds	r7, #20
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a6e:	4770      	bx	lr
 8019a70:	20000e54 	.word	0x20000e54
 8019a74:	2000fe54 	.word	0x2000fe54
 8019a78:	2000fe5c 	.word	0x2000fe5c
 8019a7c:	2000fe64 	.word	0x2000fe64
 8019a80:	2000fe60 	.word	0x2000fe60
 8019a84:	2000fe68 	.word	0x2000fe68

08019a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019a88:	b480      	push	{r7}
 8019a8a:	b085      	sub	sp, #20
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019a90:	4b28      	ldr	r3, [pc, #160]	; (8019b34 <prvInsertBlockIntoFreeList+0xac>)
 8019a92:	60fb      	str	r3, [r7, #12]
 8019a94:	e002      	b.n	8019a9c <prvInsertBlockIntoFreeList+0x14>
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	60fb      	str	r3, [r7, #12]
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	687a      	ldr	r2, [r7, #4]
 8019aa2:	429a      	cmp	r2, r3
 8019aa4:	d8f7      	bhi.n	8019a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	685b      	ldr	r3, [r3, #4]
 8019aae:	68ba      	ldr	r2, [r7, #8]
 8019ab0:	4413      	add	r3, r2
 8019ab2:	687a      	ldr	r2, [r7, #4]
 8019ab4:	429a      	cmp	r2, r3
 8019ab6:	d108      	bne.n	8019aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	685a      	ldr	r2, [r3, #4]
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	685b      	ldr	r3, [r3, #4]
 8019ac0:	441a      	add	r2, r3
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	68ba      	ldr	r2, [r7, #8]
 8019ad4:	441a      	add	r2, r3
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	429a      	cmp	r2, r3
 8019adc:	d118      	bne.n	8019b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	681a      	ldr	r2, [r3, #0]
 8019ae2:	4b15      	ldr	r3, [pc, #84]	; (8019b38 <prvInsertBlockIntoFreeList+0xb0>)
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	429a      	cmp	r2, r3
 8019ae8:	d00d      	beq.n	8019b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	685a      	ldr	r2, [r3, #4]
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	685b      	ldr	r3, [r3, #4]
 8019af4:	441a      	add	r2, r3
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	681a      	ldr	r2, [r3, #0]
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	601a      	str	r2, [r3, #0]
 8019b04:	e008      	b.n	8019b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019b06:	4b0c      	ldr	r3, [pc, #48]	; (8019b38 <prvInsertBlockIntoFreeList+0xb0>)
 8019b08:	681a      	ldr	r2, [r3, #0]
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	601a      	str	r2, [r3, #0]
 8019b0e:	e003      	b.n	8019b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	681a      	ldr	r2, [r3, #0]
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019b18:	68fa      	ldr	r2, [r7, #12]
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	429a      	cmp	r2, r3
 8019b1e:	d002      	beq.n	8019b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	687a      	ldr	r2, [r7, #4]
 8019b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019b26:	bf00      	nop
 8019b28:	3714      	adds	r7, #20
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b30:	4770      	bx	lr
 8019b32:	bf00      	nop
 8019b34:	2000fe54 	.word	0x2000fe54
 8019b38:	2000fe5c 	.word	0x2000fe5c

08019b3c <parson_strndup>:
static int    json_serialize_string(const char *string, char *buf);
static int    append_indent(char *buf, int level);
static int    append_string(char *buf, const char *string);

/* Various */
static char * parson_strndup(const char *string, size_t n) {
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b084      	sub	sp, #16
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
 8019b44:	6039      	str	r1, [r7, #0]
    char *output_string = (char*)parson_malloc(n + 1);
 8019b46:	4b0d      	ldr	r3, [pc, #52]	; (8019b7c <parson_strndup+0x40>)
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	683a      	ldr	r2, [r7, #0]
 8019b4c:	3201      	adds	r2, #1
 8019b4e:	4610      	mov	r0, r2
 8019b50:	4798      	blx	r3
 8019b52:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d101      	bne.n	8019b5e <parson_strndup+0x22>
        return NULL;
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	e00a      	b.n	8019b74 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 8019b5e:	68fa      	ldr	r2, [r7, #12]
 8019b60:	683b      	ldr	r3, [r7, #0]
 8019b62:	4413      	add	r3, r2
 8019b64:	2200      	movs	r2, #0
 8019b66:	701a      	strb	r2, [r3, #0]
    strncpy(output_string, string, n);
 8019b68:	683a      	ldr	r2, [r7, #0]
 8019b6a:	6879      	ldr	r1, [r7, #4]
 8019b6c:	68f8      	ldr	r0, [r7, #12]
 8019b6e:	f004 f95e 	bl	801de2e <strncpy>
    return output_string;
 8019b72:	68fb      	ldr	r3, [r7, #12]
}
 8019b74:	4618      	mov	r0, r3
 8019b76:	3710      	adds	r7, #16
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}
 8019b7c:	20000084 	.word	0x20000084

08019b80 <hex_char_to_int>:

static char * parson_strdup(const char *string) {
    return parson_strndup(string, strlen(string));
}

static int hex_char_to_int(char c) {
 8019b80:	b480      	push	{r7}
 8019b82:	b083      	sub	sp, #12
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	4603      	mov	r3, r0
 8019b88:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8019b8a:	79fb      	ldrb	r3, [r7, #7]
 8019b8c:	2b2f      	cmp	r3, #47	; 0x2f
 8019b8e:	d905      	bls.n	8019b9c <hex_char_to_int+0x1c>
 8019b90:	79fb      	ldrb	r3, [r7, #7]
 8019b92:	2b39      	cmp	r3, #57	; 0x39
 8019b94:	d802      	bhi.n	8019b9c <hex_char_to_int+0x1c>
        return c - '0';
 8019b96:	79fb      	ldrb	r3, [r7, #7]
 8019b98:	3b30      	subs	r3, #48	; 0x30
 8019b9a:	e013      	b.n	8019bc4 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 8019b9c:	79fb      	ldrb	r3, [r7, #7]
 8019b9e:	2b60      	cmp	r3, #96	; 0x60
 8019ba0:	d905      	bls.n	8019bae <hex_char_to_int+0x2e>
 8019ba2:	79fb      	ldrb	r3, [r7, #7]
 8019ba4:	2b66      	cmp	r3, #102	; 0x66
 8019ba6:	d802      	bhi.n	8019bae <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 8019ba8:	79fb      	ldrb	r3, [r7, #7]
 8019baa:	3b57      	subs	r3, #87	; 0x57
 8019bac:	e00a      	b.n	8019bc4 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 8019bae:	79fb      	ldrb	r3, [r7, #7]
 8019bb0:	2b40      	cmp	r3, #64	; 0x40
 8019bb2:	d905      	bls.n	8019bc0 <hex_char_to_int+0x40>
 8019bb4:	79fb      	ldrb	r3, [r7, #7]
 8019bb6:	2b46      	cmp	r3, #70	; 0x46
 8019bb8:	d802      	bhi.n	8019bc0 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 8019bba:	79fb      	ldrb	r3, [r7, #7]
 8019bbc:	3b37      	subs	r3, #55	; 0x37
 8019bbe:	e001      	b.n	8019bc4 <hex_char_to_int+0x44>
    }
    return -1;
 8019bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	370c      	adds	r7, #12
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bce:	4770      	bx	lr

08019bd0 <parse_utf16_hex>:

static int parse_utf16_hex(const char *s, unsigned int *result) {
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b086      	sub	sp, #24
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
 8019bd8:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	781b      	ldrb	r3, [r3, #0]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d00e      	beq.n	8019c00 <parse_utf16_hex+0x30>
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	3301      	adds	r3, #1
 8019be6:	781b      	ldrb	r3, [r3, #0]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d009      	beq.n	8019c00 <parse_utf16_hex+0x30>
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	3302      	adds	r3, #2
 8019bf0:	781b      	ldrb	r3, [r3, #0]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d004      	beq.n	8019c00 <parse_utf16_hex+0x30>
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	3303      	adds	r3, #3
 8019bfa:	781b      	ldrb	r3, [r3, #0]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d101      	bne.n	8019c04 <parse_utf16_hex+0x34>
        return 0;
 8019c00:	2300      	movs	r3, #0
 8019c02:	e03a      	b.n	8019c7a <parse_utf16_hex+0xaa>
    }
    x1 = hex_char_to_int(s[0]);
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	781b      	ldrb	r3, [r3, #0]
 8019c08:	4618      	mov	r0, r3
 8019c0a:	f7ff ffb9 	bl	8019b80 <hex_char_to_int>
 8019c0e:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	3301      	adds	r3, #1
 8019c14:	781b      	ldrb	r3, [r3, #0]
 8019c16:	4618      	mov	r0, r3
 8019c18:	f7ff ffb2 	bl	8019b80 <hex_char_to_int>
 8019c1c:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	3302      	adds	r3, #2
 8019c22:	781b      	ldrb	r3, [r3, #0]
 8019c24:	4618      	mov	r0, r3
 8019c26:	f7ff ffab 	bl	8019b80 <hex_char_to_int>
 8019c2a:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	3303      	adds	r3, #3
 8019c30:	781b      	ldrb	r3, [r3, #0]
 8019c32:	4618      	mov	r0, r3
 8019c34:	f7ff ffa4 	bl	8019b80 <hex_char_to_int>
 8019c38:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8019c3a:	697b      	ldr	r3, [r7, #20]
 8019c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c40:	d00b      	beq.n	8019c5a <parse_utf16_hex+0x8a>
 8019c42:	693b      	ldr	r3, [r7, #16]
 8019c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c48:	d007      	beq.n	8019c5a <parse_utf16_hex+0x8a>
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c50:	d003      	beq.n	8019c5a <parse_utf16_hex+0x8a>
 8019c52:	68bb      	ldr	r3, [r7, #8]
 8019c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c58:	d101      	bne.n	8019c5e <parse_utf16_hex+0x8e>
        return 0;
 8019c5a:	2300      	movs	r3, #0
 8019c5c:	e00d      	b.n	8019c7a <parse_utf16_hex+0xaa>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 8019c5e:	697b      	ldr	r3, [r7, #20]
 8019c60:	031a      	lsls	r2, r3, #12
 8019c62:	693b      	ldr	r3, [r7, #16]
 8019c64:	021b      	lsls	r3, r3, #8
 8019c66:	431a      	orrs	r2, r3
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	011b      	lsls	r3, r3, #4
 8019c6c:	431a      	orrs	r2, r3
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	4313      	orrs	r3, r2
 8019c72:	461a      	mov	r2, r3
 8019c74:	683b      	ldr	r3, [r7, #0]
 8019c76:	601a      	str	r2, [r3, #0]
    return 1;
 8019c78:	2301      	movs	r3, #1
}
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	3718      	adds	r7, #24
 8019c7e:	46bd      	mov	sp, r7
 8019c80:	bd80      	pop	{r7, pc}

08019c82 <num_bytes_in_utf8_sequence>:

static int num_bytes_in_utf8_sequence(unsigned char c) {
 8019c82:	b480      	push	{r7}
 8019c84:	b083      	sub	sp, #12
 8019c86:	af00      	add	r7, sp, #0
 8019c88:	4603      	mov	r3, r0
 8019c8a:	71fb      	strb	r3, [r7, #7]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 8019c8c:	79fb      	ldrb	r3, [r7, #7]
 8019c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8019c90:	d00a      	beq.n	8019ca8 <num_bytes_in_utf8_sequence+0x26>
 8019c92:	79fb      	ldrb	r3, [r7, #7]
 8019c94:	2bc1      	cmp	r3, #193	; 0xc1
 8019c96:	d007      	beq.n	8019ca8 <num_bytes_in_utf8_sequence+0x26>
 8019c98:	79fb      	ldrb	r3, [r7, #7]
 8019c9a:	2bf4      	cmp	r3, #244	; 0xf4
 8019c9c:	d804      	bhi.n	8019ca8 <num_bytes_in_utf8_sequence+0x26>
 8019c9e:	79fb      	ldrb	r3, [r7, #7]
 8019ca0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019ca4:	2b80      	cmp	r3, #128	; 0x80
 8019ca6:	d101      	bne.n	8019cac <num_bytes_in_utf8_sequence+0x2a>
        return 0;
 8019ca8:	2300      	movs	r3, #0
 8019caa:	e01b      	b.n	8019ce4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 8019cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	db01      	blt.n	8019cb8 <num_bytes_in_utf8_sequence+0x36>
        return 1;
 8019cb4:	2301      	movs	r3, #1
 8019cb6:	e015      	b.n	8019ce4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 8019cb8:	79fb      	ldrb	r3, [r7, #7]
 8019cba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8019cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8019cc0:	d101      	bne.n	8019cc6 <num_bytes_in_utf8_sequence+0x44>
        return 2;
 8019cc2:	2302      	movs	r3, #2
 8019cc4:	e00e      	b.n	8019ce4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 8019cc6:	79fb      	ldrb	r3, [r7, #7]
 8019cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019ccc:	2be0      	cmp	r3, #224	; 0xe0
 8019cce:	d101      	bne.n	8019cd4 <num_bytes_in_utf8_sequence+0x52>
        return 3;
 8019cd0:	2303      	movs	r3, #3
 8019cd2:	e007      	b.n	8019ce4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 8019cd4:	79fb      	ldrb	r3, [r7, #7]
 8019cd6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8019cda:	2bf0      	cmp	r3, #240	; 0xf0
 8019cdc:	d101      	bne.n	8019ce2 <num_bytes_in_utf8_sequence+0x60>
        return 4;
 8019cde:	2304      	movs	r3, #4
 8019ce0:	e000      	b.n	8019ce4 <num_bytes_in_utf8_sequence+0x62>
    }
    return 0; /* won't happen */
 8019ce2:	2300      	movs	r3, #0
}
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	370c      	adds	r7, #12
 8019ce8:	46bd      	mov	sp, r7
 8019cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cee:	4770      	bx	lr

08019cf0 <verify_utf8_sequence>:

static int verify_utf8_sequence(const unsigned char *string, int *len) {
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b084      	sub	sp, #16
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]
 8019cf8:	6039      	str	r1, [r7, #0]
    unsigned int cp = 0;
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	60fb      	str	r3, [r7, #12]
    *len = num_bytes_in_utf8_sequence(string[0]);
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	781b      	ldrb	r3, [r3, #0]
 8019d02:	4618      	mov	r0, r3
 8019d04:	f7ff ffbd 	bl	8019c82 <num_bytes_in_utf8_sequence>
 8019d08:	4602      	mov	r2, r0
 8019d0a:	683b      	ldr	r3, [r7, #0]
 8019d0c:	601a      	str	r2, [r3, #0]

    if (*len == 1) {
 8019d0e:	683b      	ldr	r3, [r7, #0]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	2b01      	cmp	r3, #1
 8019d14:	d103      	bne.n	8019d1e <verify_utf8_sequence+0x2e>
        cp = string[0];
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	781b      	ldrb	r3, [r3, #0]
 8019d1a:	60fb      	str	r3, [r7, #12]
 8019d1c:	e07f      	b.n	8019e1e <verify_utf8_sequence+0x12e>
    } else if (*len == 2 && IS_CONT(string[1])) {
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	2b02      	cmp	r3, #2
 8019d24:	d115      	bne.n	8019d52 <verify_utf8_sequence+0x62>
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	3301      	adds	r3, #1
 8019d2a:	781b      	ldrb	r3, [r3, #0]
 8019d2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019d30:	2b80      	cmp	r3, #128	; 0x80
 8019d32:	d10e      	bne.n	8019d52 <verify_utf8_sequence+0x62>
        cp = string[0] & 0x1F;
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	781b      	ldrb	r3, [r3, #0]
 8019d38:	f003 031f 	and.w	r3, r3, #31
 8019d3c:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	019a      	lsls	r2, r3, #6
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	3301      	adds	r3, #1
 8019d46:	781b      	ldrb	r3, [r3, #0]
 8019d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019d4c:	4313      	orrs	r3, r2
 8019d4e:	60fb      	str	r3, [r7, #12]
 8019d50:	e065      	b.n	8019e1e <verify_utf8_sequence+0x12e>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 8019d52:	683b      	ldr	r3, [r7, #0]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	2b03      	cmp	r3, #3
 8019d58:	d125      	bne.n	8019da6 <verify_utf8_sequence+0xb6>
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	3301      	adds	r3, #1
 8019d5e:	781b      	ldrb	r3, [r3, #0]
 8019d60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019d64:	2b80      	cmp	r3, #128	; 0x80
 8019d66:	d11e      	bne.n	8019da6 <verify_utf8_sequence+0xb6>
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	3302      	adds	r3, #2
 8019d6c:	781b      	ldrb	r3, [r3, #0]
 8019d6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019d72:	2b80      	cmp	r3, #128	; 0x80
 8019d74:	d117      	bne.n	8019da6 <verify_utf8_sequence+0xb6>
        cp = ((unsigned char)string[0]) & 0xF;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	781b      	ldrb	r3, [r3, #0]
 8019d7a:	f003 030f 	and.w	r3, r3, #15
 8019d7e:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	019a      	lsls	r2, r3, #6
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	3301      	adds	r3, #1
 8019d88:	781b      	ldrb	r3, [r3, #0]
 8019d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019d8e:	4313      	orrs	r3, r2
 8019d90:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	019a      	lsls	r2, r3, #6
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	3302      	adds	r3, #2
 8019d9a:	781b      	ldrb	r3, [r3, #0]
 8019d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019da0:	4313      	orrs	r3, r2
 8019da2:	60fb      	str	r3, [r7, #12]
 8019da4:	e03b      	b.n	8019e1e <verify_utf8_sequence+0x12e>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	2b04      	cmp	r3, #4
 8019dac:	d135      	bne.n	8019e1a <verify_utf8_sequence+0x12a>
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	3301      	adds	r3, #1
 8019db2:	781b      	ldrb	r3, [r3, #0]
 8019db4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019db8:	2b80      	cmp	r3, #128	; 0x80
 8019dba:	d12e      	bne.n	8019e1a <verify_utf8_sequence+0x12a>
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	3302      	adds	r3, #2
 8019dc0:	781b      	ldrb	r3, [r3, #0]
 8019dc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019dc6:	2b80      	cmp	r3, #128	; 0x80
 8019dc8:	d127      	bne.n	8019e1a <verify_utf8_sequence+0x12a>
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	3303      	adds	r3, #3
 8019dce:	781b      	ldrb	r3, [r3, #0]
 8019dd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019dd4:	2b80      	cmp	r3, #128	; 0x80
 8019dd6:	d120      	bne.n	8019e1a <verify_utf8_sequence+0x12a>
        cp = string[0] & 0x7;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	781b      	ldrb	r3, [r3, #0]
 8019ddc:	f003 0307 	and.w	r3, r3, #7
 8019de0:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	019a      	lsls	r2, r3, #6
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	3301      	adds	r3, #1
 8019dea:	781b      	ldrb	r3, [r3, #0]
 8019dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019df0:	4313      	orrs	r3, r2
 8019df2:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	019a      	lsls	r2, r3, #6
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	3302      	adds	r3, #2
 8019dfc:	781b      	ldrb	r3, [r3, #0]
 8019dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e02:	4313      	orrs	r3, r2
 8019e04:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[3] & 0x3F);
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	019a      	lsls	r2, r3, #6
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	3303      	adds	r3, #3
 8019e0e:	781b      	ldrb	r3, [r3, #0]
 8019e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e14:	4313      	orrs	r3, r2
 8019e16:	60fb      	str	r3, [r7, #12]
 8019e18:	e001      	b.n	8019e1e <verify_utf8_sequence+0x12e>
    } else {
        return 0;
 8019e1a:	2300      	movs	r3, #0
 8019e1c:	e029      	b.n	8019e72 <verify_utf8_sequence+0x182>
    }

    /* overlong encodings */
    if ((cp < 0x80    && *len > 1) ||
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	2b7f      	cmp	r3, #127	; 0x7f
 8019e22:	d803      	bhi.n	8019e2c <verify_utf8_sequence+0x13c>
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	2b01      	cmp	r3, #1
 8019e2a:	dc0f      	bgt.n	8019e4c <verify_utf8_sequence+0x15c>
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019e32:	d203      	bcs.n	8019e3c <verify_utf8_sequence+0x14c>
        (cp < 0x800   && *len > 2) ||
 8019e34:	683b      	ldr	r3, [r7, #0]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	2b02      	cmp	r3, #2
 8019e3a:	dc07      	bgt.n	8019e4c <verify_utf8_sequence+0x15c>
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019e42:	d205      	bcs.n	8019e50 <verify_utf8_sequence+0x160>
        (cp < 0x10000 && *len > 3)) {
 8019e44:	683b      	ldr	r3, [r7, #0]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	2b03      	cmp	r3, #3
 8019e4a:	dd01      	ble.n	8019e50 <verify_utf8_sequence+0x160>
        return 0;
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	e010      	b.n	8019e72 <verify_utf8_sequence+0x182>
    }

    /* invalid unicode */
    if (cp > 0x10FFFF) {
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8019e56:	d301      	bcc.n	8019e5c <verify_utf8_sequence+0x16c>
        return 0;
 8019e58:	2300      	movs	r3, #0
 8019e5a:	e00a      	b.n	8019e72 <verify_utf8_sequence+0x182>
    }

    /* surrogate halves */
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8019e62:	d305      	bcc.n	8019e70 <verify_utf8_sequence+0x180>
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8019e6a:	d201      	bcs.n	8019e70 <verify_utf8_sequence+0x180>
        return 0;
 8019e6c:	2300      	movs	r3, #0
 8019e6e:	e000      	b.n	8019e72 <verify_utf8_sequence+0x182>
    }

    return 1;
 8019e70:	2301      	movs	r3, #1
}
 8019e72:	4618      	mov	r0, r3
 8019e74:	3710      	adds	r7, #16
 8019e76:	46bd      	mov	sp, r7
 8019e78:	bd80      	pop	{r7, pc}

08019e7a <is_valid_utf8>:

static int is_valid_utf8(const char *string, size_t string_len) {
 8019e7a:	b580      	push	{r7, lr}
 8019e7c:	b084      	sub	sp, #16
 8019e7e:	af00      	add	r7, sp, #0
 8019e80:	6078      	str	r0, [r7, #4]
 8019e82:	6039      	str	r1, [r7, #0]
    int len = 0;
 8019e84:	2300      	movs	r3, #0
 8019e86:	60bb      	str	r3, [r7, #8]
    const char *string_end =  string + string_len;
 8019e88:	687a      	ldr	r2, [r7, #4]
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	4413      	add	r3, r2
 8019e8e:	60fb      	str	r3, [r7, #12]
    while (string < string_end) {
 8019e90:	e00f      	b.n	8019eb2 <is_valid_utf8+0x38>
        if (!verify_utf8_sequence((const unsigned char*)string, &len)) {
 8019e92:	f107 0308 	add.w	r3, r7, #8
 8019e96:	4619      	mov	r1, r3
 8019e98:	6878      	ldr	r0, [r7, #4]
 8019e9a:	f7ff ff29 	bl	8019cf0 <verify_utf8_sequence>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d101      	bne.n	8019ea8 <is_valid_utf8+0x2e>
            return 0;
 8019ea4:	2300      	movs	r3, #0
 8019ea6:	e009      	b.n	8019ebc <is_valid_utf8+0x42>
        }
        string += len;
 8019ea8:	68bb      	ldr	r3, [r7, #8]
 8019eaa:	461a      	mov	r2, r3
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	4413      	add	r3, r2
 8019eb0:	607b      	str	r3, [r7, #4]
    while (string < string_end) {
 8019eb2:	687a      	ldr	r2, [r7, #4]
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	429a      	cmp	r2, r3
 8019eb8:	d3eb      	bcc.n	8019e92 <is_valid_utf8+0x18>
    }
    return 1;
 8019eba:	2301      	movs	r3, #1
}
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	3710      	adds	r7, #16
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd80      	pop	{r7, pc}

08019ec4 <is_decimal>:

static int is_decimal(const char *string, size_t length) {
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b082      	sub	sp, #8
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
 8019ecc:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	2b01      	cmp	r3, #1
 8019ed2:	d90a      	bls.n	8019eea <is_decimal+0x26>
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	781b      	ldrb	r3, [r3, #0]
 8019ed8:	2b30      	cmp	r3, #48	; 0x30
 8019eda:	d106      	bne.n	8019eea <is_decimal+0x26>
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	3301      	adds	r3, #1
 8019ee0:	781b      	ldrb	r3, [r3, #0]
 8019ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8019ee4:	d001      	beq.n	8019eea <is_decimal+0x26>
        return 0;
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	e024      	b.n	8019f34 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 8019eea:	683b      	ldr	r3, [r7, #0]
 8019eec:	2b02      	cmp	r3, #2
 8019eee:	d91b      	bls.n	8019f28 <is_decimal+0x64>
 8019ef0:	2202      	movs	r2, #2
 8019ef2:	4912      	ldr	r1, [pc, #72]	; (8019f3c <is_decimal+0x78>)
 8019ef4:	6878      	ldr	r0, [r7, #4]
 8019ef6:	f003 ff88 	bl	801de0a <strncmp>
 8019efa:	4603      	mov	r3, r0
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d113      	bne.n	8019f28 <is_decimal+0x64>
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	3302      	adds	r3, #2
 8019f04:	781b      	ldrb	r3, [r3, #0]
 8019f06:	2b2e      	cmp	r3, #46	; 0x2e
 8019f08:	d00e      	beq.n	8019f28 <is_decimal+0x64>
        return 0;
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	e012      	b.n	8019f34 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 8019f0e:	687a      	ldr	r2, [r7, #4]
 8019f10:	683b      	ldr	r3, [r7, #0]
 8019f12:	4413      	add	r3, r2
 8019f14:	781b      	ldrb	r3, [r3, #0]
 8019f16:	4619      	mov	r1, r3
 8019f18:	4809      	ldr	r0, [pc, #36]	; (8019f40 <is_decimal+0x7c>)
 8019f1a:	f003 ff69 	bl	801ddf0 <strchr>
 8019f1e:	4603      	mov	r3, r0
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d001      	beq.n	8019f28 <is_decimal+0x64>
            return 0;
 8019f24:	2300      	movs	r3, #0
 8019f26:	e005      	b.n	8019f34 <is_decimal+0x70>
    while (length--) {
 8019f28:	683b      	ldr	r3, [r7, #0]
 8019f2a:	1e5a      	subs	r2, r3, #1
 8019f2c:	603a      	str	r2, [r7, #0]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d1ed      	bne.n	8019f0e <is_decimal+0x4a>
        }
    }
    return 1;
 8019f32:	2301      	movs	r3, #1
}
 8019f34:	4618      	mov	r0, r3
 8019f36:	3708      	adds	r7, #8
 8019f38:	46bd      	mov	sp, r7
 8019f3a:	bd80      	pop	{r7, pc}
 8019f3c:	080218ac 	.word	0x080218ac
 8019f40:	080218b0 	.word	0x080218b0

08019f44 <json_object_init>:
        string++;
    }
}

/* JSON Object */
static JSON_Object * json_object_init(JSON_Value *wrapping_value) {
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b084      	sub	sp, #16
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 8019f4c:	4b0e      	ldr	r3, [pc, #56]	; (8019f88 <json_object_init+0x44>)
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	2014      	movs	r0, #20
 8019f52:	4798      	blx	r3
 8019f54:	60f8      	str	r0, [r7, #12]
    if (new_obj == NULL) {
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d101      	bne.n	8019f60 <json_object_init+0x1c>
        return NULL;
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	e00f      	b.n	8019f80 <json_object_init+0x3c>
    }
    new_obj->wrapping_value = wrapping_value;
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	687a      	ldr	r2, [r7, #4]
 8019f64:	601a      	str	r2, [r3, #0]
    new_obj->names = (char**)NULL;
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	2200      	movs	r2, #0
 8019f6a:	605a      	str	r2, [r3, #4]
    new_obj->values = (JSON_Value**)NULL;
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	2200      	movs	r2, #0
 8019f70:	609a      	str	r2, [r3, #8]
    new_obj->capacity = 0;
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	2200      	movs	r2, #0
 8019f76:	611a      	str	r2, [r3, #16]
    new_obj->count = 0;
 8019f78:	68fb      	ldr	r3, [r7, #12]
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	60da      	str	r2, [r3, #12]
    return new_obj;
 8019f7e:	68fb      	ldr	r3, [r7, #12]
}
 8019f80:	4618      	mov	r0, r3
 8019f82:	3710      	adds	r7, #16
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bd80      	pop	{r7, pc}
 8019f88:	20000084 	.word	0x20000084

08019f8c <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
 8019f8c:	b580      	push	{r7, lr}
 8019f8e:	b084      	sub	sp, #16
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	60f8      	str	r0, [r7, #12]
 8019f94:	60b9      	str	r1, [r7, #8]
 8019f96:	607a      	str	r2, [r7, #4]
    if (name == NULL) {
 8019f98:	68bb      	ldr	r3, [r7, #8]
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d102      	bne.n	8019fa4 <json_object_add+0x18>
        return JSONFailure;
 8019f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8019fa2:	e009      	b.n	8019fb8 <json_object_add+0x2c>
    }
    return json_object_addn(object, name, strlen(name), value);
 8019fa4:	68b8      	ldr	r0, [r7, #8]
 8019fa6:	f7e6 f935 	bl	8000214 <strlen>
 8019faa:	4602      	mov	r2, r0
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	68b9      	ldr	r1, [r7, #8]
 8019fb0:	68f8      	ldr	r0, [r7, #12]
 8019fb2:	f000 f805 	bl	8019fc0 <json_object_addn>
 8019fb6:	4603      	mov	r3, r0
}
 8019fb8:	4618      	mov	r0, r3
 8019fba:	3710      	adds	r7, #16
 8019fbc:	46bd      	mov	sp, r7
 8019fbe:	bd80      	pop	{r7, pc}

08019fc0 <json_object_addn>:

static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 8019fc0:	b590      	push	{r4, r7, lr}
 8019fc2:	b087      	sub	sp, #28
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	60f8      	str	r0, [r7, #12]
 8019fc8:	60b9      	str	r1, [r7, #8]
 8019fca:	607a      	str	r2, [r7, #4]
 8019fcc:	603b      	str	r3, [r7, #0]
    size_t index = 0;
 8019fce:	2300      	movs	r3, #0
 8019fd0:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d005      	beq.n	8019fe4 <json_object_addn+0x24>
 8019fd8:	68bb      	ldr	r3, [r7, #8]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d002      	beq.n	8019fe4 <json_object_addn+0x24>
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d102      	bne.n	8019fea <json_object_addn+0x2a>
        return JSONFailure;
 8019fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8019fe8:	e04e      	b.n	801a088 <json_object_addn+0xc8>
    }
    if (json_object_getn_value(object, name, name_len) != NULL) {
 8019fea:	687a      	ldr	r2, [r7, #4]
 8019fec:	68b9      	ldr	r1, [r7, #8]
 8019fee:	68f8      	ldr	r0, [r7, #12]
 8019ff0:	f000 f8c8 	bl	801a184 <json_object_getn_value>
 8019ff4:	4603      	mov	r3, r0
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d002      	beq.n	801a000 <json_object_addn+0x40>
        return JSONFailure;
 8019ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8019ffe:	e043      	b.n	801a088 <json_object_addn+0xc8>
    }
    if (object->count >= object->capacity) {
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	68da      	ldr	r2, [r3, #12]
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	691b      	ldr	r3, [r3, #16]
 801a008:	429a      	cmp	r2, r3
 801a00a:	d311      	bcc.n	801a030 <json_object_addn+0x70>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	691b      	ldr	r3, [r3, #16]
 801a010:	005b      	lsls	r3, r3, #1
 801a012:	2b10      	cmp	r3, #16
 801a014:	bf38      	it	cc
 801a016:	2310      	movcc	r3, #16
 801a018:	613b      	str	r3, [r7, #16]
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 801a01a:	6939      	ldr	r1, [r7, #16]
 801a01c:	68f8      	ldr	r0, [r7, #12]
 801a01e:	f000 f837 	bl	801a090 <json_object_resize>
 801a022:	4603      	mov	r3, r0
 801a024:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a028:	d102      	bne.n	801a030 <json_object_addn+0x70>
            return JSONFailure;
 801a02a:	f04f 33ff 	mov.w	r3, #4294967295
 801a02e:	e02b      	b.n	801a088 <json_object_addn+0xc8>
        }
    }
    index = object->count;
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	68db      	ldr	r3, [r3, #12]
 801a034:	617b      	str	r3, [r7, #20]
    object->names[index] = parson_strndup(name, name_len);
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	685a      	ldr	r2, [r3, #4]
 801a03a:	697b      	ldr	r3, [r7, #20]
 801a03c:	009b      	lsls	r3, r3, #2
 801a03e:	18d4      	adds	r4, r2, r3
 801a040:	6879      	ldr	r1, [r7, #4]
 801a042:	68b8      	ldr	r0, [r7, #8]
 801a044:	f7ff fd7a 	bl	8019b3c <parson_strndup>
 801a048:	4603      	mov	r3, r0
 801a04a:	6023      	str	r3, [r4, #0]
    if (object->names[index] == NULL) {
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	685a      	ldr	r2, [r3, #4]
 801a050:	697b      	ldr	r3, [r7, #20]
 801a052:	009b      	lsls	r3, r3, #2
 801a054:	4413      	add	r3, r2
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d102      	bne.n	801a062 <json_object_addn+0xa2>
        return JSONFailure;
 801a05c:	f04f 33ff 	mov.w	r3, #4294967295
 801a060:	e012      	b.n	801a088 <json_object_addn+0xc8>
    }
    value->parent = json_object_get_wrapping_value(object);
 801a062:	68f8      	ldr	r0, [r7, #12]
 801a064:	f002 f8c2 	bl	801c1ec <json_object_get_wrapping_value>
 801a068:	4602      	mov	r2, r0
 801a06a:	683b      	ldr	r3, [r7, #0]
 801a06c:	601a      	str	r2, [r3, #0]
    object->values[index] = value;
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	689a      	ldr	r2, [r3, #8]
 801a072:	697b      	ldr	r3, [r7, #20]
 801a074:	009b      	lsls	r3, r3, #2
 801a076:	4413      	add	r3, r2
 801a078:	683a      	ldr	r2, [r7, #0]
 801a07a:	601a      	str	r2, [r3, #0]
    object->count++;
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	68db      	ldr	r3, [r3, #12]
 801a080:	1c5a      	adds	r2, r3, #1
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801a086:	2300      	movs	r3, #0
}
 801a088:	4618      	mov	r0, r3
 801a08a:	371c      	adds	r7, #28
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd90      	pop	{r4, r7, pc}

0801a090 <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 801a090:	b580      	push	{r7, lr}
 801a092:	b084      	sub	sp, #16
 801a094:	af00      	add	r7, sp, #0
 801a096:	6078      	str	r0, [r7, #4]
 801a098:	6039      	str	r1, [r7, #0]
    char **temp_names = NULL;
 801a09a:	2300      	movs	r3, #0
 801a09c:	60fb      	str	r3, [r7, #12]
    JSON_Value **temp_values = NULL;
 801a09e:	2300      	movs	r3, #0
 801a0a0:	60bb      	str	r3, [r7, #8]

    if ((object->names == NULL && object->values != NULL) ||
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	685b      	ldr	r3, [r3, #4]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d103      	bne.n	801a0b2 <json_object_resize+0x22>
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	689b      	ldr	r3, [r3, #8]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d10a      	bne.n	801a0c8 <json_object_resize+0x38>
        (object->names != NULL && object->values == NULL) ||
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	685b      	ldr	r3, [r3, #4]
    if ((object->names == NULL && object->values != NULL) ||
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d003      	beq.n	801a0c2 <json_object_resize+0x32>
        (object->names != NULL && object->values == NULL) ||
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	689b      	ldr	r3, [r3, #8]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d002      	beq.n	801a0c8 <json_object_resize+0x38>
 801a0c2:	683b      	ldr	r3, [r7, #0]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d102      	bne.n	801a0ce <json_object_resize+0x3e>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
 801a0c8:	f04f 33ff 	mov.w	r3, #4294967295
 801a0cc:	e051      	b.n	801a172 <json_object_resize+0xe2>
    }
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 801a0ce:	4b2b      	ldr	r3, [pc, #172]	; (801a17c <json_object_resize+0xec>)
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	683a      	ldr	r2, [r7, #0]
 801a0d4:	0092      	lsls	r2, r2, #2
 801a0d6:	4610      	mov	r0, r2
 801a0d8:	4798      	blx	r3
 801a0da:	60f8      	str	r0, [r7, #12]
    if (temp_names == NULL) {
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d102      	bne.n	801a0e8 <json_object_resize+0x58>
        return JSONFailure;
 801a0e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a0e6:	e044      	b.n	801a172 <json_object_resize+0xe2>
    }
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801a0e8:	4b24      	ldr	r3, [pc, #144]	; (801a17c <json_object_resize+0xec>)
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	683a      	ldr	r2, [r7, #0]
 801a0ee:	0092      	lsls	r2, r2, #2
 801a0f0:	4610      	mov	r0, r2
 801a0f2:	4798      	blx	r3
 801a0f4:	60b8      	str	r0, [r7, #8]
    if (temp_values == NULL) {
 801a0f6:	68bb      	ldr	r3, [r7, #8]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d106      	bne.n	801a10a <json_object_resize+0x7a>
        parson_free(temp_names);
 801a0fc:	4b20      	ldr	r3, [pc, #128]	; (801a180 <json_object_resize+0xf0>)
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	68f8      	ldr	r0, [r7, #12]
 801a102:	4798      	blx	r3
        return JSONFailure;
 801a104:	f04f 33ff 	mov.w	r3, #4294967295
 801a108:	e033      	b.n	801a172 <json_object_resize+0xe2>
    }
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	685b      	ldr	r3, [r3, #4]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d019      	beq.n	801a146 <json_object_resize+0xb6>
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	689b      	ldr	r3, [r3, #8]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d015      	beq.n	801a146 <json_object_resize+0xb6>
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	68db      	ldr	r3, [r3, #12]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d011      	beq.n	801a146 <json_object_resize+0xb6>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	6859      	ldr	r1, [r3, #4]
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	68db      	ldr	r3, [r3, #12]
 801a12a:	009b      	lsls	r3, r3, #2
 801a12c:	461a      	mov	r2, r3
 801a12e:	68f8      	ldr	r0, [r7, #12]
 801a130:	f003 f888 	bl	801d244 <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	6899      	ldr	r1, [r3, #8]
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	68db      	ldr	r3, [r3, #12]
 801a13c:	009b      	lsls	r3, r3, #2
 801a13e:	461a      	mov	r2, r3
 801a140:	68b8      	ldr	r0, [r7, #8]
 801a142:	f003 f87f 	bl	801d244 <memcpy>
    }
    parson_free(object->names);
 801a146:	4b0e      	ldr	r3, [pc, #56]	; (801a180 <json_object_resize+0xf0>)
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	687a      	ldr	r2, [r7, #4]
 801a14c:	6852      	ldr	r2, [r2, #4]
 801a14e:	4610      	mov	r0, r2
 801a150:	4798      	blx	r3
    parson_free(object->values);
 801a152:	4b0b      	ldr	r3, [pc, #44]	; (801a180 <json_object_resize+0xf0>)
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	687a      	ldr	r2, [r7, #4]
 801a158:	6892      	ldr	r2, [r2, #8]
 801a15a:	4610      	mov	r0, r2
 801a15c:	4798      	blx	r3
    object->names = temp_names;
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	68fa      	ldr	r2, [r7, #12]
 801a162:	605a      	str	r2, [r3, #4]
    object->values = temp_values;
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	68ba      	ldr	r2, [r7, #8]
 801a168:	609a      	str	r2, [r3, #8]
    object->capacity = new_capacity;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	683a      	ldr	r2, [r7, #0]
 801a16e:	611a      	str	r2, [r3, #16]
    return JSONSuccess;
 801a170:	2300      	movs	r3, #0
}
 801a172:	4618      	mov	r0, r3
 801a174:	3710      	adds	r7, #16
 801a176:	46bd      	mov	sp, r7
 801a178:	bd80      	pop	{r7, pc}
 801a17a:	bf00      	nop
 801a17c:	20000084 	.word	0x20000084
 801a180:	20000088 	.word	0x20000088

0801a184 <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 801a184:	b580      	push	{r7, lr}
 801a186:	b086      	sub	sp, #24
 801a188:	af00      	add	r7, sp, #0
 801a18a:	60f8      	str	r0, [r7, #12]
 801a18c:	60b9      	str	r1, [r7, #8]
 801a18e:	607a      	str	r2, [r7, #4]
    size_t i, name_length;
    for (i = 0; i < json_object_get_count(object); i++) {
 801a190:	2300      	movs	r3, #0
 801a192:	617b      	str	r3, [r7, #20]
 801a194:	e026      	b.n	801a1e4 <json_object_getn_value+0x60>
        name_length = strlen(object->names[i]);
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	685a      	ldr	r2, [r3, #4]
 801a19a:	697b      	ldr	r3, [r7, #20]
 801a19c:	009b      	lsls	r3, r3, #2
 801a19e:	4413      	add	r3, r2
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	f7e6 f836 	bl	8000214 <strlen>
 801a1a8:	6138      	str	r0, [r7, #16]
        if (name_length != name_len) {
 801a1aa:	693a      	ldr	r2, [r7, #16]
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	429a      	cmp	r2, r3
 801a1b0:	d114      	bne.n	801a1dc <json_object_getn_value+0x58>
            continue;
        }
        if (strncmp(object->names[i], name, name_len) == 0) {
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	685a      	ldr	r2, [r3, #4]
 801a1b6:	697b      	ldr	r3, [r7, #20]
 801a1b8:	009b      	lsls	r3, r3, #2
 801a1ba:	4413      	add	r3, r2
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	687a      	ldr	r2, [r7, #4]
 801a1c0:	68b9      	ldr	r1, [r7, #8]
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	f003 fe21 	bl	801de0a <strncmp>
 801a1c8:	4603      	mov	r3, r0
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d107      	bne.n	801a1de <json_object_getn_value+0x5a>
            return object->values[i];
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	689a      	ldr	r2, [r3, #8]
 801a1d2:	697b      	ldr	r3, [r7, #20]
 801a1d4:	009b      	lsls	r3, r3, #2
 801a1d6:	4413      	add	r3, r2
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	e00b      	b.n	801a1f4 <json_object_getn_value+0x70>
            continue;
 801a1dc:	bf00      	nop
    for (i = 0; i < json_object_get_count(object); i++) {
 801a1de:	697b      	ldr	r3, [r7, #20]
 801a1e0:	3301      	adds	r3, #1
 801a1e2:	617b      	str	r3, [r7, #20]
 801a1e4:	68f8      	ldr	r0, [r7, #12]
 801a1e6:	f001 ffd5 	bl	801c194 <json_object_get_count>
 801a1ea:	4602      	mov	r2, r0
 801a1ec:	697b      	ldr	r3, [r7, #20]
 801a1ee:	4293      	cmp	r3, r2
 801a1f0:	d3d1      	bcc.n	801a196 <json_object_getn_value+0x12>
        }
    }
    return NULL;
 801a1f2:	2300      	movs	r3, #0
}
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	3718      	adds	r7, #24
 801a1f8:	46bd      	mov	sp, r7
 801a1fa:	bd80      	pop	{r7, pc}

0801a1fc <json_object_remove_internal>:

static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b086      	sub	sp, #24
 801a200:	af00      	add	r7, sp, #0
 801a202:	60f8      	str	r0, [r7, #12]
 801a204:	60b9      	str	r1, [r7, #8]
 801a206:	607a      	str	r2, [r7, #4]
    size_t i = 0, last_item_index = 0;
 801a208:	2300      	movs	r3, #0
 801a20a:	617b      	str	r3, [r7, #20]
 801a20c:	2300      	movs	r3, #0
 801a20e:	613b      	str	r3, [r7, #16]
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d006      	beq.n	801a224 <json_object_remove_internal+0x28>
 801a216:	68b9      	ldr	r1, [r7, #8]
 801a218:	68f8      	ldr	r0, [r7, #12]
 801a21a:	f001 ff39 	bl	801c090 <json_object_get_value>
 801a21e:	4603      	mov	r3, r0
 801a220:	2b00      	cmp	r3, #0
 801a222:	d102      	bne.n	801a22a <json_object_remove_internal+0x2e>
        return JSONFailure;
 801a224:	f04f 33ff 	mov.w	r3, #4294967295
 801a228:	e05a      	b.n	801a2e0 <json_object_remove_internal+0xe4>
    }
    last_item_index = json_object_get_count(object) - 1;
 801a22a:	68f8      	ldr	r0, [r7, #12]
 801a22c:	f001 ffb2 	bl	801c194 <json_object_get_count>
 801a230:	4603      	mov	r3, r0
 801a232:	3b01      	subs	r3, #1
 801a234:	613b      	str	r3, [r7, #16]
    for (i = 0; i < json_object_get_count(object); i++) {
 801a236:	2300      	movs	r3, #0
 801a238:	617b      	str	r3, [r7, #20]
 801a23a:	e048      	b.n	801a2ce <json_object_remove_internal+0xd2>
        if (strcmp(object->names[i], name) == 0) {
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	685a      	ldr	r2, [r3, #4]
 801a240:	697b      	ldr	r3, [r7, #20]
 801a242:	009b      	lsls	r3, r3, #2
 801a244:	4413      	add	r3, r2
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	68b9      	ldr	r1, [r7, #8]
 801a24a:	4618      	mov	r0, r3
 801a24c:	f7e5 ffd8 	bl	8000200 <strcmp>
 801a250:	4603      	mov	r3, r0
 801a252:	2b00      	cmp	r3, #0
 801a254:	d138      	bne.n	801a2c8 <json_object_remove_internal+0xcc>
            parson_free(object->names[i]);
 801a256:	4b24      	ldr	r3, [pc, #144]	; (801a2e8 <json_object_remove_internal+0xec>)
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	68fa      	ldr	r2, [r7, #12]
 801a25c:	6851      	ldr	r1, [r2, #4]
 801a25e:	697a      	ldr	r2, [r7, #20]
 801a260:	0092      	lsls	r2, r2, #2
 801a262:	440a      	add	r2, r1
 801a264:	6812      	ldr	r2, [r2, #0]
 801a266:	4610      	mov	r0, r2
 801a268:	4798      	blx	r3
            if (free_value) {
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d008      	beq.n	801a282 <json_object_remove_internal+0x86>
                json_value_free(object->values[i]);
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	689a      	ldr	r2, [r3, #8]
 801a274:	697b      	ldr	r3, [r7, #20]
 801a276:	009b      	lsls	r3, r3, #2
 801a278:	4413      	add	r3, r2
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	4618      	mov	r0, r3
 801a27e:	f002 f895 	bl	801c3ac <json_value_free>
            }
            if (i != last_item_index) { /* Replace key value pair with one from the end */
 801a282:	697a      	ldr	r2, [r7, #20]
 801a284:	693b      	ldr	r3, [r7, #16]
 801a286:	429a      	cmp	r2, r3
 801a288:	d017      	beq.n	801a2ba <json_object_remove_internal+0xbe>
                object->names[i] = object->names[last_item_index];
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	685a      	ldr	r2, [r3, #4]
 801a28e:	693b      	ldr	r3, [r7, #16]
 801a290:	009b      	lsls	r3, r3, #2
 801a292:	441a      	add	r2, r3
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	6859      	ldr	r1, [r3, #4]
 801a298:	697b      	ldr	r3, [r7, #20]
 801a29a:	009b      	lsls	r3, r3, #2
 801a29c:	440b      	add	r3, r1
 801a29e:	6812      	ldr	r2, [r2, #0]
 801a2a0:	601a      	str	r2, [r3, #0]
                object->values[i] = object->values[last_item_index];
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	689a      	ldr	r2, [r3, #8]
 801a2a6:	693b      	ldr	r3, [r7, #16]
 801a2a8:	009b      	lsls	r3, r3, #2
 801a2aa:	441a      	add	r2, r3
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	6899      	ldr	r1, [r3, #8]
 801a2b0:	697b      	ldr	r3, [r7, #20]
 801a2b2:	009b      	lsls	r3, r3, #2
 801a2b4:	440b      	add	r3, r1
 801a2b6:	6812      	ldr	r2, [r2, #0]
 801a2b8:	601a      	str	r2, [r3, #0]
            }
            object->count -= 1;
 801a2ba:	68fb      	ldr	r3, [r7, #12]
 801a2bc:	68db      	ldr	r3, [r3, #12]
 801a2be:	1e5a      	subs	r2, r3, #1
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	60da      	str	r2, [r3, #12]
            return JSONSuccess;
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	e00b      	b.n	801a2e0 <json_object_remove_internal+0xe4>
    for (i = 0; i < json_object_get_count(object); i++) {
 801a2c8:	697b      	ldr	r3, [r7, #20]
 801a2ca:	3301      	adds	r3, #1
 801a2cc:	617b      	str	r3, [r7, #20]
 801a2ce:	68f8      	ldr	r0, [r7, #12]
 801a2d0:	f001 ff60 	bl	801c194 <json_object_get_count>
 801a2d4:	4602      	mov	r2, r0
 801a2d6:	697b      	ldr	r3, [r7, #20]
 801a2d8:	4293      	cmp	r3, r2
 801a2da:	d3af      	bcc.n	801a23c <json_object_remove_internal+0x40>
        }
    }
    return JSONFailure; /* No execution path should end here */
 801a2dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	3718      	adds	r7, #24
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}
 801a2e8:	20000088 	.word	0x20000088

0801a2ec <json_object_dotremove_internal>:

static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, int free_value) {
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b088      	sub	sp, #32
 801a2f0:	af00      	add	r7, sp, #0
 801a2f2:	60f8      	str	r0, [r7, #12]
 801a2f4:	60b9      	str	r1, [r7, #8]
 801a2f6:	607a      	str	r2, [r7, #4]
    JSON_Value *temp_value = NULL;
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	61fb      	str	r3, [r7, #28]
    JSON_Object *temp_object = NULL;
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	61bb      	str	r3, [r7, #24]
    const char *dot_pos = strchr(name, '.');
 801a300:	212e      	movs	r1, #46	; 0x2e
 801a302:	68b8      	ldr	r0, [r7, #8]
 801a304:	f003 fd74 	bl	801ddf0 <strchr>
 801a308:	6178      	str	r0, [r7, #20]
    if (dot_pos == NULL) {
 801a30a:	697b      	ldr	r3, [r7, #20]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d106      	bne.n	801a31e <json_object_dotremove_internal+0x32>
        return json_object_remove_internal(object, name, free_value);
 801a310:	687a      	ldr	r2, [r7, #4]
 801a312:	68b9      	ldr	r1, [r7, #8]
 801a314:	68f8      	ldr	r0, [r7, #12]
 801a316:	f7ff ff71 	bl	801a1fc <json_object_remove_internal>
 801a31a:	4603      	mov	r3, r0
 801a31c:	e01d      	b.n	801a35a <json_object_dotremove_internal+0x6e>
    }
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 801a31e:	697a      	ldr	r2, [r7, #20]
 801a320:	68bb      	ldr	r3, [r7, #8]
 801a322:	1ad3      	subs	r3, r2, r3
 801a324:	461a      	mov	r2, r3
 801a326:	68b9      	ldr	r1, [r7, #8]
 801a328:	68f8      	ldr	r0, [r7, #12]
 801a32a:	f7ff ff2b 	bl	801a184 <json_object_getn_value>
 801a32e:	61f8      	str	r0, [r7, #28]
    if (json_value_get_type(temp_value) != JSONObject) {
 801a330:	69f8      	ldr	r0, [r7, #28]
 801a332:	f001 ffc4 	bl	801c2be <json_value_get_type>
 801a336:	4603      	mov	r3, r0
 801a338:	2b04      	cmp	r3, #4
 801a33a:	d002      	beq.n	801a342 <json_object_dotremove_internal+0x56>
        return JSONFailure;
 801a33c:	f04f 33ff 	mov.w	r3, #4294967295
 801a340:	e00b      	b.n	801a35a <json_object_dotremove_internal+0x6e>
    }
    temp_object = json_value_get_object(temp_value);
 801a342:	69f8      	ldr	r0, [r7, #28]
 801a344:	f001 ffcd 	bl	801c2e2 <json_value_get_object>
 801a348:	61b8      	str	r0, [r7, #24]
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 801a34a:	697b      	ldr	r3, [r7, #20]
 801a34c:	3301      	adds	r3, #1
 801a34e:	687a      	ldr	r2, [r7, #4]
 801a350:	4619      	mov	r1, r3
 801a352:	69b8      	ldr	r0, [r7, #24]
 801a354:	f7ff ffca 	bl	801a2ec <json_object_dotremove_internal>
 801a358:	4603      	mov	r3, r0
}
 801a35a:	4618      	mov	r0, r3
 801a35c:	3720      	adds	r7, #32
 801a35e:	46bd      	mov	sp, r7
 801a360:	bd80      	pop	{r7, pc}
	...

0801a364 <json_object_free>:

static void json_object_free(JSON_Object *object) {
 801a364:	b580      	push	{r7, lr}
 801a366:	b084      	sub	sp, #16
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < object->count; i++) {
 801a36c:	2300      	movs	r3, #0
 801a36e:	60fb      	str	r3, [r7, #12]
 801a370:	e015      	b.n	801a39e <json_object_free+0x3a>
        parson_free(object->names[i]);
 801a372:	4b17      	ldr	r3, [pc, #92]	; (801a3d0 <json_object_free+0x6c>)
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	687a      	ldr	r2, [r7, #4]
 801a378:	6851      	ldr	r1, [r2, #4]
 801a37a:	68fa      	ldr	r2, [r7, #12]
 801a37c:	0092      	lsls	r2, r2, #2
 801a37e:	440a      	add	r2, r1
 801a380:	6812      	ldr	r2, [r2, #0]
 801a382:	4610      	mov	r0, r2
 801a384:	4798      	blx	r3
        json_value_free(object->values[i]);
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	689a      	ldr	r2, [r3, #8]
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	009b      	lsls	r3, r3, #2
 801a38e:	4413      	add	r3, r2
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	4618      	mov	r0, r3
 801a394:	f002 f80a 	bl	801c3ac <json_value_free>
    for (i = 0; i < object->count; i++) {
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	3301      	adds	r3, #1
 801a39c:	60fb      	str	r3, [r7, #12]
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	68db      	ldr	r3, [r3, #12]
 801a3a2:	68fa      	ldr	r2, [r7, #12]
 801a3a4:	429a      	cmp	r2, r3
 801a3a6:	d3e4      	bcc.n	801a372 <json_object_free+0xe>
    }
    parson_free(object->names);
 801a3a8:	4b09      	ldr	r3, [pc, #36]	; (801a3d0 <json_object_free+0x6c>)
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	687a      	ldr	r2, [r7, #4]
 801a3ae:	6852      	ldr	r2, [r2, #4]
 801a3b0:	4610      	mov	r0, r2
 801a3b2:	4798      	blx	r3
    parson_free(object->values);
 801a3b4:	4b06      	ldr	r3, [pc, #24]	; (801a3d0 <json_object_free+0x6c>)
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	687a      	ldr	r2, [r7, #4]
 801a3ba:	6892      	ldr	r2, [r2, #8]
 801a3bc:	4610      	mov	r0, r2
 801a3be:	4798      	blx	r3
    parson_free(object);
 801a3c0:	4b03      	ldr	r3, [pc, #12]	; (801a3d0 <json_object_free+0x6c>)
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	6878      	ldr	r0, [r7, #4]
 801a3c6:	4798      	blx	r3
}
 801a3c8:	bf00      	nop
 801a3ca:	3710      	adds	r7, #16
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	bd80      	pop	{r7, pc}
 801a3d0:	20000088 	.word	0x20000088

0801a3d4 <json_array_init>:

/* JSON Array */
static JSON_Array * json_array_init(JSON_Value *wrapping_value) {
 801a3d4:	b580      	push	{r7, lr}
 801a3d6:	b084      	sub	sp, #16
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 801a3dc:	4b0d      	ldr	r3, [pc, #52]	; (801a414 <json_array_init+0x40>)
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	2010      	movs	r0, #16
 801a3e2:	4798      	blx	r3
 801a3e4:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d101      	bne.n	801a3f0 <json_array_init+0x1c>
        return NULL;
 801a3ec:	2300      	movs	r3, #0
 801a3ee:	e00c      	b.n	801a40a <json_array_init+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	687a      	ldr	r2, [r7, #4]
 801a3f4:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	2200      	movs	r2, #0
 801a3fa:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	2200      	movs	r2, #0
 801a400:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	2200      	movs	r2, #0
 801a406:	609a      	str	r2, [r3, #8]
    return new_array;
 801a408:	68fb      	ldr	r3, [r7, #12]
}
 801a40a:	4618      	mov	r0, r3
 801a40c:	3710      	adds	r7, #16
 801a40e:	46bd      	mov	sp, r7
 801a410:	bd80      	pop	{r7, pc}
 801a412:	bf00      	nop
 801a414:	20000084 	.word	0x20000084

0801a418 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 801a418:	b580      	push	{r7, lr}
 801a41a:	b084      	sub	sp, #16
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
 801a420:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	689a      	ldr	r2, [r3, #8]
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	68db      	ldr	r3, [r3, #12]
 801a42a:	429a      	cmp	r2, r3
 801a42c:	d311      	bcc.n	801a452 <json_array_add+0x3a>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	68db      	ldr	r3, [r3, #12]
 801a432:	005b      	lsls	r3, r3, #1
 801a434:	2b10      	cmp	r3, #16
 801a436:	bf38      	it	cc
 801a438:	2310      	movcc	r3, #16
 801a43a:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) == JSONFailure) {
 801a43c:	68f9      	ldr	r1, [r7, #12]
 801a43e:	6878      	ldr	r0, [r7, #4]
 801a440:	f000 f820 	bl	801a484 <json_array_resize>
 801a444:	4603      	mov	r3, r0
 801a446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a44a:	d102      	bne.n	801a452 <json_array_add+0x3a>
            return JSONFailure;
 801a44c:	f04f 33ff 	mov.w	r3, #4294967295
 801a450:	e013      	b.n	801a47a <json_array_add+0x62>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 801a452:	6878      	ldr	r0, [r7, #4]
 801a454:	f001 ff27 	bl	801c2a6 <json_array_get_wrapping_value>
 801a458:	4602      	mov	r2, r0
 801a45a:	683b      	ldr	r3, [r7, #0]
 801a45c:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	685a      	ldr	r2, [r3, #4]
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	689b      	ldr	r3, [r3, #8]
 801a466:	009b      	lsls	r3, r3, #2
 801a468:	4413      	add	r3, r2
 801a46a:	683a      	ldr	r2, [r7, #0]
 801a46c:	601a      	str	r2, [r3, #0]
    array->count++;
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	689b      	ldr	r3, [r3, #8]
 801a472:	1c5a      	adds	r2, r3, #1
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 801a478:	2300      	movs	r3, #0
}
 801a47a:	4618      	mov	r0, r3
 801a47c:	3710      	adds	r7, #16
 801a47e:	46bd      	mov	sp, r7
 801a480:	bd80      	pop	{r7, pc}
	...

0801a484 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 801a484:	b580      	push	{r7, lr}
 801a486:	b084      	sub	sp, #16
 801a488:	af00      	add	r7, sp, #0
 801a48a:	6078      	str	r0, [r7, #4]
 801a48c:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 801a48e:	2300      	movs	r3, #0
 801a490:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 801a492:	683b      	ldr	r3, [r7, #0]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d102      	bne.n	801a49e <json_array_resize+0x1a>
        return JSONFailure;
 801a498:	f04f 33ff 	mov.w	r3, #4294967295
 801a49c:	e02a      	b.n	801a4f4 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801a49e:	4b17      	ldr	r3, [pc, #92]	; (801a4fc <json_array_resize+0x78>)
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	683a      	ldr	r2, [r7, #0]
 801a4a4:	0092      	lsls	r2, r2, #2
 801a4a6:	4610      	mov	r0, r2
 801a4a8:	4798      	blx	r3
 801a4aa:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d102      	bne.n	801a4b8 <json_array_resize+0x34>
        return JSONFailure;
 801a4b2:	f04f 33ff 	mov.w	r3, #4294967295
 801a4b6:	e01d      	b.n	801a4f4 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	685b      	ldr	r3, [r3, #4]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d00c      	beq.n	801a4da <json_array_resize+0x56>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	689b      	ldr	r3, [r3, #8]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d008      	beq.n	801a4da <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	6859      	ldr	r1, [r3, #4]
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	689b      	ldr	r3, [r3, #8]
 801a4d0:	009b      	lsls	r3, r3, #2
 801a4d2:	461a      	mov	r2, r3
 801a4d4:	68f8      	ldr	r0, [r7, #12]
 801a4d6:	f002 feb5 	bl	801d244 <memcpy>
    }
    parson_free(array->items);
 801a4da:	4b09      	ldr	r3, [pc, #36]	; (801a500 <json_array_resize+0x7c>)
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	687a      	ldr	r2, [r7, #4]
 801a4e0:	6852      	ldr	r2, [r2, #4]
 801a4e2:	4610      	mov	r0, r2
 801a4e4:	4798      	blx	r3
    array->items = new_items;
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	68fa      	ldr	r2, [r7, #12]
 801a4ea:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	683a      	ldr	r2, [r7, #0]
 801a4f0:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801a4f2:	2300      	movs	r3, #0
}
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	3710      	adds	r7, #16
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	bd80      	pop	{r7, pc}
 801a4fc:	20000084 	.word	0x20000084
 801a500:	20000088 	.word	0x20000088

0801a504 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 801a504:	b580      	push	{r7, lr}
 801a506:	b084      	sub	sp, #16
 801a508:	af00      	add	r7, sp, #0
 801a50a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 801a50c:	2300      	movs	r3, #0
 801a50e:	60fb      	str	r3, [r7, #12]
 801a510:	e00b      	b.n	801a52a <json_array_free+0x26>
        json_value_free(array->items[i]);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	685a      	ldr	r2, [r3, #4]
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	009b      	lsls	r3, r3, #2
 801a51a:	4413      	add	r3, r2
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	4618      	mov	r0, r3
 801a520:	f001 ff44 	bl	801c3ac <json_value_free>
    for (i = 0; i < array->count; i++) {
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	3301      	adds	r3, #1
 801a528:	60fb      	str	r3, [r7, #12]
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	689b      	ldr	r3, [r3, #8]
 801a52e:	68fa      	ldr	r2, [r7, #12]
 801a530:	429a      	cmp	r2, r3
 801a532:	d3ee      	bcc.n	801a512 <json_array_free+0xe>
    }
    parson_free(array->items);
 801a534:	4b06      	ldr	r3, [pc, #24]	; (801a550 <json_array_free+0x4c>)
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	687a      	ldr	r2, [r7, #4]
 801a53a:	6852      	ldr	r2, [r2, #4]
 801a53c:	4610      	mov	r0, r2
 801a53e:	4798      	blx	r3
    parson_free(array);
 801a540:	4b03      	ldr	r3, [pc, #12]	; (801a550 <json_array_free+0x4c>)
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	6878      	ldr	r0, [r7, #4]
 801a546:	4798      	blx	r3
}
 801a548:	bf00      	nop
 801a54a:	3710      	adds	r7, #16
 801a54c:	46bd      	mov	sp, r7
 801a54e:	bd80      	pop	{r7, pc}
 801a550:	20000088 	.word	0x20000088

0801a554 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
 801a554:	b580      	push	{r7, lr}
 801a556:	b084      	sub	sp, #16
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801a55c:	4b0b      	ldr	r3, [pc, #44]	; (801a58c <json_value_init_string_no_copy+0x38>)
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	2010      	movs	r0, #16
 801a562:	4798      	blx	r3
 801a564:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d101      	bne.n	801a570 <json_value_init_string_no_copy+0x1c>
        return NULL;
 801a56c:	2300      	movs	r3, #0
 801a56e:	e009      	b.n	801a584 <json_value_init_string_no_copy+0x30>
    }
    new_value->parent = NULL;
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	2200      	movs	r2, #0
 801a574:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	2202      	movs	r2, #2
 801a57a:	605a      	str	r2, [r3, #4]
    new_value->value.string = string;
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	687a      	ldr	r2, [r7, #4]
 801a580:	609a      	str	r2, [r3, #8]
    return new_value;
 801a582:	68fb      	ldr	r3, [r7, #12]
}
 801a584:	4618      	mov	r0, r3
 801a586:	3710      	adds	r7, #16
 801a588:	46bd      	mov	sp, r7
 801a58a:	bd80      	pop	{r7, pc}
 801a58c:	20000084 	.word	0x20000084

0801a590 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 801a590:	b480      	push	{r7}
 801a592:	b083      	sub	sp, #12
 801a594:	af00      	add	r7, sp, #0
 801a596:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	781b      	ldrb	r3, [r3, #0]
 801a59e:	2b22      	cmp	r3, #34	; 0x22
 801a5a0:	d002      	beq.n	801a5a8 <skip_quotes+0x18>
        return JSONFailure;
 801a5a2:	f04f 33ff 	mov.w	r3, #4294967295
 801a5a6:	e02f      	b.n	801a608 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	1c5a      	adds	r2, r3, #1
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801a5b2:	e01e      	b.n	801a5f2 <skip_quotes+0x62>
        if (**string == '\0') {
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	781b      	ldrb	r3, [r3, #0]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d102      	bne.n	801a5c4 <skip_quotes+0x34>
            return JSONFailure;
 801a5be:	f04f 33ff 	mov.w	r3, #4294967295
 801a5c2:	e021      	b.n	801a608 <skip_quotes+0x78>
        } else if (**string == '\\') {
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	2b5c      	cmp	r3, #92	; 0x5c
 801a5cc:	d10c      	bne.n	801a5e8 <skip_quotes+0x58>
            SKIP_CHAR(string);
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	1c5a      	adds	r2, r3, #1
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	781b      	ldrb	r3, [r3, #0]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d102      	bne.n	801a5e8 <skip_quotes+0x58>
                return JSONFailure;
 801a5e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a5e6:	e00f      	b.n	801a608 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	1c5a      	adds	r2, r3, #1
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	781b      	ldrb	r3, [r3, #0]
 801a5f8:	2b22      	cmp	r3, #34	; 0x22
 801a5fa:	d1db      	bne.n	801a5b4 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	1c5a      	adds	r2, r3, #1
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801a606:	2300      	movs	r3, #0
}
 801a608:	4618      	mov	r0, r3
 801a60a:	370c      	adds	r7, #12
 801a60c:	46bd      	mov	sp, r7
 801a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a612:	4770      	bx	lr

0801a614 <parse_utf16>:

static int parse_utf16(const char **unprocessed, char **processed) {
 801a614:	b580      	push	{r7, lr}
 801a616:	b088      	sub	sp, #32
 801a618:	af00      	add	r7, sp, #0
 801a61a:	6078      	str	r0, [r7, #4]
 801a61c:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    int parse_succeeded = 0;
 801a61e:	2300      	movs	r3, #0
 801a620:	617b      	str	r3, [r7, #20]
    char *processed_ptr = *processed;
 801a622:	683b      	ldr	r3, [r7, #0]
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	61bb      	str	r3, [r7, #24]
    unprocessed_ptr++; /* skips u */
 801a62e:	69bb      	ldr	r3, [r7, #24]
 801a630:	3301      	adds	r3, #1
 801a632:	61bb      	str	r3, [r7, #24]
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 801a634:	f107 030c 	add.w	r3, r7, #12
 801a638:	4619      	mov	r1, r3
 801a63a:	69b8      	ldr	r0, [r7, #24]
 801a63c:	f7ff fac8 	bl	8019bd0 <parse_utf16_hex>
 801a640:	6178      	str	r0, [r7, #20]
    if (!parse_succeeded) {
 801a642:	697b      	ldr	r3, [r7, #20]
 801a644:	2b00      	cmp	r3, #0
 801a646:	d102      	bne.n	801a64e <parse_utf16+0x3a>
        return JSONFailure;
 801a648:	f04f 33ff 	mov.w	r3, #4294967295
 801a64c:	e0ce      	b.n	801a7ec <parse_utf16+0x1d8>
    }
    if (cp < 0x80) {
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	2b7f      	cmp	r3, #127	; 0x7f
 801a652:	d804      	bhi.n	801a65e <parse_utf16+0x4a>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 801a654:	68fb      	ldr	r3, [r7, #12]
 801a656:	b2da      	uxtb	r2, r3
 801a658:	69fb      	ldr	r3, [r7, #28]
 801a65a:	701a      	strb	r2, [r3, #0]
 801a65c:	e0bc      	b.n	801a7d8 <parse_utf16+0x1c4>
    } else if (cp < 0x800) {
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a664:	d219      	bcs.n	801a69a <parse_utf16+0x86>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	099b      	lsrs	r3, r3, #6
 801a66a:	b2db      	uxtb	r3, r3
 801a66c:	f003 031f 	and.w	r3, r3, #31
 801a670:	b2db      	uxtb	r3, r3
 801a672:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801a676:	b2da      	uxtb	r2, r3
 801a678:	69fb      	ldr	r3, [r7, #28]
 801a67a:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	b2db      	uxtb	r3, r3
 801a680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a684:	b2da      	uxtb	r2, r3
 801a686:	69fb      	ldr	r3, [r7, #28]
 801a688:	3301      	adds	r3, #1
 801a68a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a68e:	b2d2      	uxtb	r2, r2
 801a690:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 801a692:	69fb      	ldr	r3, [r7, #28]
 801a694:	3301      	adds	r3, #1
 801a696:	61fb      	str	r3, [r7, #28]
 801a698:	e09e      	b.n	801a7d8 <parse_utf16+0x1c4>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801a6a0:	d303      	bcc.n	801a6aa <parse_utf16+0x96>
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801a6a8:	d325      	bcc.n	801a6f6 <parse_utf16+0xe2>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	0b1b      	lsrs	r3, r3, #12
 801a6ae:	b2db      	uxtb	r3, r3
 801a6b0:	f003 030f 	and.w	r3, r3, #15
 801a6b4:	b2db      	uxtb	r3, r3
 801a6b6:	f063 031f 	orn	r3, r3, #31
 801a6ba:	b2da      	uxtb	r2, r3
 801a6bc:	69fb      	ldr	r3, [r7, #28]
 801a6be:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	099b      	lsrs	r3, r3, #6
 801a6c4:	b2db      	uxtb	r3, r3
 801a6c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a6ca:	b2da      	uxtb	r2, r3
 801a6cc:	69fb      	ldr	r3, [r7, #28]
 801a6ce:	3301      	adds	r3, #1
 801a6d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a6d4:	b2d2      	uxtb	r2, r2
 801a6d6:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	b2db      	uxtb	r3, r3
 801a6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a6e0:	b2da      	uxtb	r2, r3
 801a6e2:	69fb      	ldr	r3, [r7, #28]
 801a6e4:	3302      	adds	r3, #2
 801a6e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a6ea:	b2d2      	uxtb	r2, r2
 801a6ec:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 801a6ee:	69fb      	ldr	r3, [r7, #28]
 801a6f0:	3302      	adds	r3, #2
 801a6f2:	61fb      	str	r3, [r7, #28]
 801a6f4:	e070      	b.n	801a7d8 <parse_utf16+0x1c4>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801a6fc:	d369      	bcc.n	801a7d2 <parse_utf16+0x1be>
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801a704:	d265      	bcs.n	801a7d2 <parse_utf16+0x1be>
        lead = cp;
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 801a70a:	69bb      	ldr	r3, [r7, #24]
 801a70c:	3304      	adds	r3, #4
 801a70e:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 801a710:	69bb      	ldr	r3, [r7, #24]
 801a712:	1c5a      	adds	r2, r3, #1
 801a714:	61ba      	str	r2, [r7, #24]
 801a716:	781b      	ldrb	r3, [r3, #0]
 801a718:	2b5c      	cmp	r3, #92	; 0x5c
 801a71a:	d105      	bne.n	801a728 <parse_utf16+0x114>
 801a71c:	69bb      	ldr	r3, [r7, #24]
 801a71e:	1c5a      	adds	r2, r3, #1
 801a720:	61ba      	str	r2, [r7, #24]
 801a722:	781b      	ldrb	r3, [r3, #0]
 801a724:	2b75      	cmp	r3, #117	; 0x75
 801a726:	d002      	beq.n	801a72e <parse_utf16+0x11a>
            return JSONFailure;
 801a728:	f04f 33ff 	mov.w	r3, #4294967295
 801a72c:	e05e      	b.n	801a7ec <parse_utf16+0x1d8>
        }
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 801a72e:	f107 0308 	add.w	r3, r7, #8
 801a732:	4619      	mov	r1, r3
 801a734:	69b8      	ldr	r0, [r7, #24]
 801a736:	f7ff fa4b 	bl	8019bd0 <parse_utf16_hex>
 801a73a:	6178      	str	r0, [r7, #20]
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 801a73c:	697b      	ldr	r3, [r7, #20]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d007      	beq.n	801a752 <parse_utf16+0x13e>
 801a742:	68bb      	ldr	r3, [r7, #8]
 801a744:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801a748:	d303      	bcc.n	801a752 <parse_utf16+0x13e>
 801a74a:	68bb      	ldr	r3, [r7, #8]
 801a74c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801a750:	d302      	bcc.n	801a758 <parse_utf16+0x144>
            return JSONFailure;
 801a752:	f04f 33ff 	mov.w	r3, #4294967295
 801a756:	e049      	b.n	801a7ec <parse_utf16+0x1d8>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 801a758:	693b      	ldr	r3, [r7, #16]
 801a75a:	029a      	lsls	r2, r3, #10
 801a75c:	4b25      	ldr	r3, [pc, #148]	; (801a7f4 <parse_utf16+0x1e0>)
 801a75e:	4013      	ands	r3, r2
 801a760:	68ba      	ldr	r2, [r7, #8]
 801a762:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801a766:	4313      	orrs	r3, r2
 801a768:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801a76c:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	0c9b      	lsrs	r3, r3, #18
 801a772:	b2db      	uxtb	r3, r3
 801a774:	f003 0307 	and.w	r3, r3, #7
 801a778:	b2db      	uxtb	r3, r3
 801a77a:	f063 030f 	orn	r3, r3, #15
 801a77e:	b2da      	uxtb	r2, r3
 801a780:	69fb      	ldr	r3, [r7, #28]
 801a782:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801a784:	68fb      	ldr	r3, [r7, #12]
 801a786:	0b1b      	lsrs	r3, r3, #12
 801a788:	b2db      	uxtb	r3, r3
 801a78a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a78e:	b2da      	uxtb	r2, r3
 801a790:	69fb      	ldr	r3, [r7, #28]
 801a792:	3301      	adds	r3, #1
 801a794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a798:	b2d2      	uxtb	r2, r2
 801a79a:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	099b      	lsrs	r3, r3, #6
 801a7a0:	b2db      	uxtb	r3, r3
 801a7a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a7a6:	b2da      	uxtb	r2, r3
 801a7a8:	69fb      	ldr	r3, [r7, #28]
 801a7aa:	3302      	adds	r3, #2
 801a7ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a7b0:	b2d2      	uxtb	r2, r2
 801a7b2:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	b2db      	uxtb	r3, r3
 801a7b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a7bc:	b2da      	uxtb	r2, r3
 801a7be:	69fb      	ldr	r3, [r7, #28]
 801a7c0:	3303      	adds	r3, #3
 801a7c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a7c6:	b2d2      	uxtb	r2, r2
 801a7c8:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 801a7ca:	69fb      	ldr	r3, [r7, #28]
 801a7cc:	3303      	adds	r3, #3
 801a7ce:	61fb      	str	r3, [r7, #28]
 801a7d0:	e002      	b.n	801a7d8 <parse_utf16+0x1c4>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 801a7d2:	f04f 33ff 	mov.w	r3, #4294967295
 801a7d6:	e009      	b.n	801a7ec <parse_utf16+0x1d8>
    }
    unprocessed_ptr += 3;
 801a7d8:	69bb      	ldr	r3, [r7, #24]
 801a7da:	3303      	adds	r3, #3
 801a7dc:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 801a7de:	683b      	ldr	r3, [r7, #0]
 801a7e0:	69fa      	ldr	r2, [r7, #28]
 801a7e2:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	69ba      	ldr	r2, [r7, #24]
 801a7e8:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801a7ea:	2300      	movs	r3, #0
}
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	3720      	adds	r7, #32
 801a7f0:	46bd      	mov	sp, r7
 801a7f2:	bd80      	pop	{r7, pc}
 801a7f4:	000ffc00 	.word	0x000ffc00

0801a7f8 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t len) {
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b088      	sub	sp, #32
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	6078      	str	r0, [r7, #4]
 801a800:	6039      	str	r1, [r7, #0]
    const char *input_ptr = input;
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	60fb      	str	r3, [r7, #12]
    size_t initial_size = (len + 1) * sizeof(char);
 801a806:	683b      	ldr	r3, [r7, #0]
 801a808:	3301      	adds	r3, #1
 801a80a:	61fb      	str	r3, [r7, #28]
    size_t final_size = 0;
 801a80c:	2300      	movs	r3, #0
 801a80e:	61bb      	str	r3, [r7, #24]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 801a810:	2300      	movs	r3, #0
 801a812:	617b      	str	r3, [r7, #20]
 801a814:	2300      	movs	r3, #0
 801a816:	60bb      	str	r3, [r7, #8]
 801a818:	2300      	movs	r3, #0
 801a81a:	613b      	str	r3, [r7, #16]
    output = (char*)parson_malloc(initial_size);
 801a81c:	4b66      	ldr	r3, [pc, #408]	; (801a9b8 <process_string+0x1c0>)
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	69f8      	ldr	r0, [r7, #28]
 801a822:	4798      	blx	r3
 801a824:	6178      	str	r0, [r7, #20]
    if (output == NULL) {
 801a826:	697b      	ldr	r3, [r7, #20]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	f000 80b5 	beq.w	801a998 <process_string+0x1a0>
        goto error;
    }
    output_ptr = output;
 801a82e:	697b      	ldr	r3, [r7, #20]
 801a830:	60bb      	str	r3, [r7, #8]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801a832:	e08a      	b.n	801a94a <process_string+0x152>
        if (*input_ptr == '\\') {
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	781b      	ldrb	r3, [r3, #0]
 801a838:	2b5c      	cmp	r3, #92	; 0x5c
 801a83a:	d176      	bne.n	801a92a <process_string+0x132>
            input_ptr++;
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	3301      	adds	r3, #1
 801a840:	60fb      	str	r3, [r7, #12]
            switch (*input_ptr) {
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	781b      	ldrb	r3, [r3, #0]
 801a846:	2b75      	cmp	r3, #117	; 0x75
 801a848:	f300 80a8 	bgt.w	801a99c <process_string+0x1a4>
 801a84c:	2b5c      	cmp	r3, #92	; 0x5c
 801a84e:	da04      	bge.n	801a85a <process_string+0x62>
 801a850:	2b22      	cmp	r3, #34	; 0x22
 801a852:	d03d      	beq.n	801a8d0 <process_string+0xd8>
 801a854:	2b2f      	cmp	r3, #47	; 0x2f
 801a856:	d043      	beq.n	801a8e0 <process_string+0xe8>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 801a858:	e0a0      	b.n	801a99c <process_string+0x1a4>
 801a85a:	3b5c      	subs	r3, #92	; 0x5c
 801a85c:	2b19      	cmp	r3, #25
 801a85e:	f200 809d 	bhi.w	801a99c <process_string+0x1a4>
 801a862:	a201      	add	r2, pc, #4	; (adr r2, 801a868 <process_string+0x70>)
 801a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a868:	0801a8d9 	.word	0x0801a8d9
 801a86c:	0801a99d 	.word	0x0801a99d
 801a870:	0801a99d 	.word	0x0801a99d
 801a874:	0801a99d 	.word	0x0801a99d
 801a878:	0801a99d 	.word	0x0801a99d
 801a87c:	0801a99d 	.word	0x0801a99d
 801a880:	0801a8e9 	.word	0x0801a8e9
 801a884:	0801a99d 	.word	0x0801a99d
 801a888:	0801a99d 	.word	0x0801a99d
 801a88c:	0801a99d 	.word	0x0801a99d
 801a890:	0801a8f1 	.word	0x0801a8f1
 801a894:	0801a99d 	.word	0x0801a99d
 801a898:	0801a99d 	.word	0x0801a99d
 801a89c:	0801a99d 	.word	0x0801a99d
 801a8a0:	0801a99d 	.word	0x0801a99d
 801a8a4:	0801a99d 	.word	0x0801a99d
 801a8a8:	0801a99d 	.word	0x0801a99d
 801a8ac:	0801a99d 	.word	0x0801a99d
 801a8b0:	0801a8f9 	.word	0x0801a8f9
 801a8b4:	0801a99d 	.word	0x0801a99d
 801a8b8:	0801a99d 	.word	0x0801a99d
 801a8bc:	0801a99d 	.word	0x0801a99d
 801a8c0:	0801a901 	.word	0x0801a901
 801a8c4:	0801a99d 	.word	0x0801a99d
 801a8c8:	0801a909 	.word	0x0801a909
 801a8cc:	0801a911 	.word	0x0801a911
                case '\"': *output_ptr = '\"'; break;
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	2222      	movs	r2, #34	; 0x22
 801a8d4:	701a      	strb	r2, [r3, #0]
 801a8d6:	e032      	b.n	801a93e <process_string+0x146>
                case '\\': *output_ptr = '\\'; break;
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	225c      	movs	r2, #92	; 0x5c
 801a8dc:	701a      	strb	r2, [r3, #0]
 801a8de:	e02e      	b.n	801a93e <process_string+0x146>
                case '/':  *output_ptr = '/';  break;
 801a8e0:	68bb      	ldr	r3, [r7, #8]
 801a8e2:	222f      	movs	r2, #47	; 0x2f
 801a8e4:	701a      	strb	r2, [r3, #0]
 801a8e6:	e02a      	b.n	801a93e <process_string+0x146>
                case 'b':  *output_ptr = '\b'; break;
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	2208      	movs	r2, #8
 801a8ec:	701a      	strb	r2, [r3, #0]
 801a8ee:	e026      	b.n	801a93e <process_string+0x146>
                case 'f':  *output_ptr = '\f'; break;
 801a8f0:	68bb      	ldr	r3, [r7, #8]
 801a8f2:	220c      	movs	r2, #12
 801a8f4:	701a      	strb	r2, [r3, #0]
 801a8f6:	e022      	b.n	801a93e <process_string+0x146>
                case 'n':  *output_ptr = '\n'; break;
 801a8f8:	68bb      	ldr	r3, [r7, #8]
 801a8fa:	220a      	movs	r2, #10
 801a8fc:	701a      	strb	r2, [r3, #0]
 801a8fe:	e01e      	b.n	801a93e <process_string+0x146>
                case 'r':  *output_ptr = '\r'; break;
 801a900:	68bb      	ldr	r3, [r7, #8]
 801a902:	220d      	movs	r2, #13
 801a904:	701a      	strb	r2, [r3, #0]
 801a906:	e01a      	b.n	801a93e <process_string+0x146>
                case 't':  *output_ptr = '\t'; break;
 801a908:	68bb      	ldr	r3, [r7, #8]
 801a90a:	2209      	movs	r2, #9
 801a90c:	701a      	strb	r2, [r3, #0]
 801a90e:	e016      	b.n	801a93e <process_string+0x146>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
 801a910:	f107 0208 	add.w	r2, r7, #8
 801a914:	f107 030c 	add.w	r3, r7, #12
 801a918:	4611      	mov	r1, r2
 801a91a:	4618      	mov	r0, r3
 801a91c:	f7ff fe7a 	bl	801a614 <parse_utf16>
 801a920:	4603      	mov	r3, r0
 801a922:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a926:	d109      	bne.n	801a93c <process_string+0x144>
                        goto error;
 801a928:	e03d      	b.n	801a9a6 <process_string+0x1ae>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	781b      	ldrb	r3, [r3, #0]
 801a92e:	2b1f      	cmp	r3, #31
 801a930:	d936      	bls.n	801a9a0 <process_string+0x1a8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 801a932:	68fa      	ldr	r2, [r7, #12]
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	7812      	ldrb	r2, [r2, #0]
 801a938:	701a      	strb	r2, [r3, #0]
 801a93a:	e000      	b.n	801a93e <process_string+0x146>
                    break;
 801a93c:	bf00      	nop
        }
        output_ptr++;
 801a93e:	68bb      	ldr	r3, [r7, #8]
 801a940:	3301      	adds	r3, #1
 801a942:	60bb      	str	r3, [r7, #8]
        input_ptr++;
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	3301      	adds	r3, #1
 801a948:	60fb      	str	r3, [r7, #12]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	781b      	ldrb	r3, [r3, #0]
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d007      	beq.n	801a962 <process_string+0x16a>
 801a952:	68fa      	ldr	r2, [r7, #12]
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	1ad3      	subs	r3, r2, r3
 801a958:	461a      	mov	r2, r3
 801a95a:	683b      	ldr	r3, [r7, #0]
 801a95c:	4293      	cmp	r3, r2
 801a95e:	f63f af69 	bhi.w	801a834 <process_string+0x3c>
    }
    *output_ptr = '\0';
 801a962:	68bb      	ldr	r3, [r7, #8]
 801a964:	2200      	movs	r2, #0
 801a966:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 801a968:	68ba      	ldr	r2, [r7, #8]
 801a96a:	697b      	ldr	r3, [r7, #20]
 801a96c:	1ad3      	subs	r3, r2, r3
 801a96e:	3301      	adds	r3, #1
 801a970:	61bb      	str	r3, [r7, #24]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 801a972:	4b11      	ldr	r3, [pc, #68]	; (801a9b8 <process_string+0x1c0>)
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	69b8      	ldr	r0, [r7, #24]
 801a978:	4798      	blx	r3
 801a97a:	6138      	str	r0, [r7, #16]
    if (resized_output == NULL) {
 801a97c:	693b      	ldr	r3, [r7, #16]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d010      	beq.n	801a9a4 <process_string+0x1ac>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 801a982:	69ba      	ldr	r2, [r7, #24]
 801a984:	6979      	ldr	r1, [r7, #20]
 801a986:	6938      	ldr	r0, [r7, #16]
 801a988:	f002 fc5c 	bl	801d244 <memcpy>
    parson_free(output);
 801a98c:	4b0b      	ldr	r3, [pc, #44]	; (801a9bc <process_string+0x1c4>)
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	6978      	ldr	r0, [r7, #20]
 801a992:	4798      	blx	r3
    return resized_output;
 801a994:	693b      	ldr	r3, [r7, #16]
 801a996:	e00b      	b.n	801a9b0 <process_string+0x1b8>
        goto error;
 801a998:	bf00      	nop
 801a99a:	e004      	b.n	801a9a6 <process_string+0x1ae>
                    goto error;
 801a99c:	bf00      	nop
 801a99e:	e002      	b.n	801a9a6 <process_string+0x1ae>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 801a9a0:	bf00      	nop
 801a9a2:	e000      	b.n	801a9a6 <process_string+0x1ae>
        goto error;
 801a9a4:	bf00      	nop
error:
    parson_free(output);
 801a9a6:	4b05      	ldr	r3, [pc, #20]	; (801a9bc <process_string+0x1c4>)
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	6978      	ldr	r0, [r7, #20]
 801a9ac:	4798      	blx	r3
    return NULL;
 801a9ae:	2300      	movs	r3, #0
}
 801a9b0:	4618      	mov	r0, r3
 801a9b2:	3720      	adds	r7, #32
 801a9b4:	46bd      	mov	sp, r7
 801a9b6:	bd80      	pop	{r7, pc}
 801a9b8:	20000084 	.word	0x20000084
 801a9bc:	20000088 	.word	0x20000088

0801a9c0 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b086      	sub	sp, #24
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	6078      	str	r0, [r7, #4]
    const char *string_start = *string;
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	617b      	str	r3, [r7, #20]
    size_t string_len = 0;
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 801a9d2:	6878      	ldr	r0, [r7, #4]
 801a9d4:	f7ff fddc 	bl	801a590 <skip_quotes>
 801a9d8:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d001      	beq.n	801a9e4 <get_quoted_string+0x24>
        return NULL;
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	e00c      	b.n	801a9fe <get_quoted_string+0x3e>
    }
    string_len = *string - string_start - 2; /* length without quotes */
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	681a      	ldr	r2, [r3, #0]
 801a9e8:	697b      	ldr	r3, [r7, #20]
 801a9ea:	1ad3      	subs	r3, r2, r3
 801a9ec:	3b02      	subs	r3, #2
 801a9ee:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, string_len);
 801a9f0:	697b      	ldr	r3, [r7, #20]
 801a9f2:	3301      	adds	r3, #1
 801a9f4:	6939      	ldr	r1, [r7, #16]
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	f7ff fefe 	bl	801a7f8 <process_string>
 801a9fc:	4603      	mov	r3, r0
}
 801a9fe:	4618      	mov	r0, r3
 801aa00:	3718      	adds	r7, #24
 801aa02:	46bd      	mov	sp, r7
 801aa04:	bd80      	pop	{r7, pc}
	...

0801aa08 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	b082      	sub	sp, #8
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
 801aa10:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 801aa12:	683b      	ldr	r3, [r7, #0]
 801aa14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801aa18:	d906      	bls.n	801aa28 <parse_value+0x20>
        return NULL;
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	e08d      	b.n	801ab3a <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	1c5a      	adds	r2, r3, #1
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	601a      	str	r2, [r3, #0]
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	781b      	ldrb	r3, [r3, #0]
 801aa2e:	3301      	adds	r3, #1
 801aa30:	4a44      	ldr	r2, [pc, #272]	; (801ab44 <parse_value+0x13c>)
 801aa32:	4413      	add	r3, r2
 801aa34:	781b      	ldrb	r3, [r3, #0]
 801aa36:	f003 0308 	and.w	r3, r3, #8
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d1ef      	bne.n	801aa1e <parse_value+0x16>
    switch (**string) {
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	781b      	ldrb	r3, [r3, #0]
 801aa44:	2b7b      	cmp	r3, #123	; 0x7b
 801aa46:	dc77      	bgt.n	801ab38 <parse_value+0x130>
 801aa48:	2b5b      	cmp	r3, #91	; 0x5b
 801aa4a:	da08      	bge.n	801aa5e <parse_value+0x56>
 801aa4c:	2b39      	cmp	r3, #57	; 0x39
 801aa4e:	dc73      	bgt.n	801ab38 <parse_value+0x130>
 801aa50:	2b30      	cmp	r3, #48	; 0x30
 801aa52:	da67      	bge.n	801ab24 <parse_value+0x11c>
 801aa54:	2b22      	cmp	r3, #34	; 0x22
 801aa56:	d05b      	beq.n	801ab10 <parse_value+0x108>
 801aa58:	2b2d      	cmp	r3, #45	; 0x2d
 801aa5a:	d063      	beq.n	801ab24 <parse_value+0x11c>
 801aa5c:	e06c      	b.n	801ab38 <parse_value+0x130>
 801aa5e:	3b5b      	subs	r3, #91	; 0x5b
 801aa60:	2b20      	cmp	r3, #32
 801aa62:	d869      	bhi.n	801ab38 <parse_value+0x130>
 801aa64:	a201      	add	r2, pc, #4	; (adr r2, 801aa6c <parse_value+0x64>)
 801aa66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa6a:	bf00      	nop
 801aa6c:	0801ab01 	.word	0x0801ab01
 801aa70:	0801ab39 	.word	0x0801ab39
 801aa74:	0801ab39 	.word	0x0801ab39
 801aa78:	0801ab39 	.word	0x0801ab39
 801aa7c:	0801ab39 	.word	0x0801ab39
 801aa80:	0801ab39 	.word	0x0801ab39
 801aa84:	0801ab39 	.word	0x0801ab39
 801aa88:	0801ab39 	.word	0x0801ab39
 801aa8c:	0801ab39 	.word	0x0801ab39
 801aa90:	0801ab39 	.word	0x0801ab39
 801aa94:	0801ab39 	.word	0x0801ab39
 801aa98:	0801ab1b 	.word	0x0801ab1b
 801aa9c:	0801ab39 	.word	0x0801ab39
 801aaa0:	0801ab39 	.word	0x0801ab39
 801aaa4:	0801ab39 	.word	0x0801ab39
 801aaa8:	0801ab39 	.word	0x0801ab39
 801aaac:	0801ab39 	.word	0x0801ab39
 801aab0:	0801ab39 	.word	0x0801ab39
 801aab4:	0801ab39 	.word	0x0801ab39
 801aab8:	0801ab2f 	.word	0x0801ab2f
 801aabc:	0801ab39 	.word	0x0801ab39
 801aac0:	0801ab39 	.word	0x0801ab39
 801aac4:	0801ab39 	.word	0x0801ab39
 801aac8:	0801ab39 	.word	0x0801ab39
 801aacc:	0801ab39 	.word	0x0801ab39
 801aad0:	0801ab1b 	.word	0x0801ab1b
 801aad4:	0801ab39 	.word	0x0801ab39
 801aad8:	0801ab39 	.word	0x0801ab39
 801aadc:	0801ab39 	.word	0x0801ab39
 801aae0:	0801ab39 	.word	0x0801ab39
 801aae4:	0801ab39 	.word	0x0801ab39
 801aae8:	0801ab39 	.word	0x0801ab39
 801aaec:	0801aaf1 	.word	0x0801aaf1
        case '{':
            return parse_object_value(string, nesting + 1);
 801aaf0:	683b      	ldr	r3, [r7, #0]
 801aaf2:	3301      	adds	r3, #1
 801aaf4:	4619      	mov	r1, r3
 801aaf6:	6878      	ldr	r0, [r7, #4]
 801aaf8:	f000 f826 	bl	801ab48 <parse_object_value>
 801aafc:	4603      	mov	r3, r0
 801aafe:	e01c      	b.n	801ab3a <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 801ab00:	683b      	ldr	r3, [r7, #0]
 801ab02:	3301      	adds	r3, #1
 801ab04:	4619      	mov	r1, r3
 801ab06:	6878      	ldr	r0, [r7, #4]
 801ab08:	f000 f926 	bl	801ad58 <parse_array_value>
 801ab0c:	4603      	mov	r3, r0
 801ab0e:	e014      	b.n	801ab3a <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 801ab10:	6878      	ldr	r0, [r7, #4]
 801ab12:	f000 f9e7 	bl	801aee4 <parse_string_value>
 801ab16:	4603      	mov	r3, r0
 801ab18:	e00f      	b.n	801ab3a <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 801ab1a:	6878      	ldr	r0, [r7, #4]
 801ab1c:	f000 fa06 	bl	801af2c <parse_boolean_value>
 801ab20:	4603      	mov	r3, r0
 801ab22:	e00a      	b.n	801ab3a <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 801ab24:	6878      	ldr	r0, [r7, #4]
 801ab26:	f000 fa3d 	bl	801afa4 <parse_number_value>
 801ab2a:	4603      	mov	r3, r0
 801ab2c:	e005      	b.n	801ab3a <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 801ab2e:	6878      	ldr	r0, [r7, #4]
 801ab30:	f000 fa72 	bl	801b018 <parse_null_value>
 801ab34:	4603      	mov	r3, r0
 801ab36:	e000      	b.n	801ab3a <parse_value+0x132>
        default:
            return NULL;
 801ab38:	2300      	movs	r3, #0
    }
}
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	3708      	adds	r7, #8
 801ab3e:	46bd      	mov	sp, r7
 801ab40:	bd80      	pop	{r7, pc}
 801ab42:	bf00      	nop
 801ab44:	08021ef4 	.word	0x08021ef4

0801ab48 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 801ab48:	b580      	push	{r7, lr}
 801ab4a:	b086      	sub	sp, #24
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
 801ab50:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_value = NULL;
 801ab52:	2300      	movs	r3, #0
 801ab54:	617b      	str	r3, [r7, #20]
 801ab56:	2300      	movs	r3, #0
 801ab58:	613b      	str	r3, [r7, #16]
    JSON_Object *output_object = NULL;
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	60fb      	str	r3, [r7, #12]
    char *new_key = NULL;
 801ab5e:	2300      	movs	r3, #0
 801ab60:	60bb      	str	r3, [r7, #8]
    output_value = json_value_init_object();
 801ab62:	f001 fc51 	bl	801c408 <json_value_init_object>
 801ab66:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801ab68:	697b      	ldr	r3, [r7, #20]
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d101      	bne.n	801ab72 <parse_object_value+0x2a>
        return NULL;
 801ab6e:	2300      	movs	r3, #0
 801ab70:	e0ea      	b.n	801ad48 <parse_object_value+0x200>
    }
    if (**string != '{') {
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	781b      	ldrb	r3, [r3, #0]
 801ab78:	2b7b      	cmp	r3, #123	; 0x7b
 801ab7a:	d004      	beq.n	801ab86 <parse_object_value+0x3e>
        json_value_free(output_value);
 801ab7c:	6978      	ldr	r0, [r7, #20]
 801ab7e:	f001 fc15 	bl	801c3ac <json_value_free>
        return NULL;
 801ab82:	2300      	movs	r3, #0
 801ab84:	e0e0      	b.n	801ad48 <parse_object_value+0x200>
    }
    output_object = json_value_get_object(output_value);
 801ab86:	6978      	ldr	r0, [r7, #20]
 801ab88:	f001 fbab 	bl	801c2e2 <json_value_get_object>
 801ab8c:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	1c5a      	adds	r2, r3, #1
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801ab98:	e004      	b.n	801aba4 <parse_object_value+0x5c>
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	1c5a      	adds	r2, r3, #1
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	601a      	str	r2, [r3, #0]
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	781b      	ldrb	r3, [r3, #0]
 801abaa:	3301      	adds	r3, #1
 801abac:	4a68      	ldr	r2, [pc, #416]	; (801ad50 <parse_object_value+0x208>)
 801abae:	4413      	add	r3, r2
 801abb0:	781b      	ldrb	r3, [r3, #0]
 801abb2:	f003 0308 	and.w	r3, r3, #8
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d1ef      	bne.n	801ab9a <parse_object_value+0x52>
    if (**string == '}') { /* empty object */
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	781b      	ldrb	r3, [r3, #0]
 801abc0:	2b7d      	cmp	r3, #125	; 0x7d
 801abc2:	f040 808c 	bne.w	801acde <parse_object_value+0x196>
        SKIP_CHAR(string);
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	1c5a      	adds	r2, r3, #1
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	601a      	str	r2, [r3, #0]
        return output_value;
 801abd0:	697b      	ldr	r3, [r7, #20]
 801abd2:	e0b9      	b.n	801ad48 <parse_object_value+0x200>
    }
    while (**string != '\0') {
        new_key = get_quoted_string(string);
 801abd4:	6878      	ldr	r0, [r7, #4]
 801abd6:	f7ff fef3 	bl	801a9c0 <get_quoted_string>
 801abda:	60b8      	str	r0, [r7, #8]
        if (new_key == NULL) {
 801abdc:	68bb      	ldr	r3, [r7, #8]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d109      	bne.n	801abf6 <parse_object_value+0xae>
            json_value_free(output_value);
 801abe2:	6978      	ldr	r0, [r7, #20]
 801abe4:	f001 fbe2 	bl	801c3ac <json_value_free>
            return NULL;
 801abe8:	2300      	movs	r3, #0
 801abea:	e0ad      	b.n	801ad48 <parse_object_value+0x200>
        }
        SKIP_WHITESPACES(string);
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	1c5a      	adds	r2, r3, #1
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	601a      	str	r2, [r3, #0]
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	781b      	ldrb	r3, [r3, #0]
 801abfc:	3301      	adds	r3, #1
 801abfe:	4a54      	ldr	r2, [pc, #336]	; (801ad50 <parse_object_value+0x208>)
 801ac00:	4413      	add	r3, r2
 801ac02:	781b      	ldrb	r3, [r3, #0]
 801ac04:	f003 0308 	and.w	r3, r3, #8
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d1ef      	bne.n	801abec <parse_object_value+0xa4>
        if (**string != ':') {
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	781b      	ldrb	r3, [r3, #0]
 801ac12:	2b3a      	cmp	r3, #58	; 0x3a
 801ac14:	d008      	beq.n	801ac28 <parse_object_value+0xe0>
            parson_free(new_key);
 801ac16:	4b4f      	ldr	r3, [pc, #316]	; (801ad54 <parse_object_value+0x20c>)
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	68b8      	ldr	r0, [r7, #8]
 801ac1c:	4798      	blx	r3
            json_value_free(output_value);
 801ac1e:	6978      	ldr	r0, [r7, #20]
 801ac20:	f001 fbc4 	bl	801c3ac <json_value_free>
            return NULL;
 801ac24:	2300      	movs	r3, #0
 801ac26:	e08f      	b.n	801ad48 <parse_object_value+0x200>
        }
        SKIP_CHAR(string);
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	1c5a      	adds	r2, r3, #1
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 801ac32:	6839      	ldr	r1, [r7, #0]
 801ac34:	6878      	ldr	r0, [r7, #4]
 801ac36:	f7ff fee7 	bl	801aa08 <parse_value>
 801ac3a:	6138      	str	r0, [r7, #16]
        if (new_value == NULL) {
 801ac3c:	693b      	ldr	r3, [r7, #16]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d108      	bne.n	801ac54 <parse_object_value+0x10c>
            parson_free(new_key);
 801ac42:	4b44      	ldr	r3, [pc, #272]	; (801ad54 <parse_object_value+0x20c>)
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	68b8      	ldr	r0, [r7, #8]
 801ac48:	4798      	blx	r3
            json_value_free(output_value);
 801ac4a:	6978      	ldr	r0, [r7, #20]
 801ac4c:	f001 fbae 	bl	801c3ac <json_value_free>
            return NULL;
 801ac50:	2300      	movs	r3, #0
 801ac52:	e079      	b.n	801ad48 <parse_object_value+0x200>
        }
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 801ac54:	693a      	ldr	r2, [r7, #16]
 801ac56:	68b9      	ldr	r1, [r7, #8]
 801ac58:	68f8      	ldr	r0, [r7, #12]
 801ac5a:	f7ff f997 	bl	8019f8c <json_object_add>
 801ac5e:	4603      	mov	r3, r0
 801ac60:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac64:	d10b      	bne.n	801ac7e <parse_object_value+0x136>
            parson_free(new_key);
 801ac66:	4b3b      	ldr	r3, [pc, #236]	; (801ad54 <parse_object_value+0x20c>)
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	68b8      	ldr	r0, [r7, #8]
 801ac6c:	4798      	blx	r3
            json_value_free(new_value);
 801ac6e:	6938      	ldr	r0, [r7, #16]
 801ac70:	f001 fb9c 	bl	801c3ac <json_value_free>
            json_value_free(output_value);
 801ac74:	6978      	ldr	r0, [r7, #20]
 801ac76:	f001 fb99 	bl	801c3ac <json_value_free>
            return NULL;
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	e064      	b.n	801ad48 <parse_object_value+0x200>
        }
        parson_free(new_key);
 801ac7e:	4b35      	ldr	r3, [pc, #212]	; (801ad54 <parse_object_value+0x20c>)
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	68b8      	ldr	r0, [r7, #8]
 801ac84:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 801ac86:	e004      	b.n	801ac92 <parse_object_value+0x14a>
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	1c5a      	adds	r2, r3, #1
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	601a      	str	r2, [r3, #0]
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	781b      	ldrb	r3, [r3, #0]
 801ac98:	3301      	adds	r3, #1
 801ac9a:	4a2d      	ldr	r2, [pc, #180]	; (801ad50 <parse_object_value+0x208>)
 801ac9c:	4413      	add	r3, r2
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	f003 0308 	and.w	r3, r3, #8
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d1ef      	bne.n	801ac88 <parse_object_value+0x140>
        if (**string != ',') {
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	781b      	ldrb	r3, [r3, #0]
 801acae:	2b2c      	cmp	r3, #44	; 0x2c
 801acb0:	d11c      	bne.n	801acec <parse_object_value+0x1a4>
            break;
        }
        SKIP_CHAR(string);
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	1c5a      	adds	r2, r3, #1
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801acbc:	e004      	b.n	801acc8 <parse_object_value+0x180>
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	1c5a      	adds	r2, r3, #1
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	601a      	str	r2, [r3, #0]
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	781b      	ldrb	r3, [r3, #0]
 801acce:	3301      	adds	r3, #1
 801acd0:	4a1f      	ldr	r2, [pc, #124]	; (801ad50 <parse_object_value+0x208>)
 801acd2:	4413      	add	r3, r2
 801acd4:	781b      	ldrb	r3, [r3, #0]
 801acd6:	f003 0308 	and.w	r3, r3, #8
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d1ef      	bne.n	801acbe <parse_object_value+0x176>
    while (**string != '\0') {
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	781b      	ldrb	r3, [r3, #0]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	f47f af75 	bne.w	801abd4 <parse_object_value+0x8c>
 801acea:	e006      	b.n	801acfa <parse_object_value+0x1b2>
            break;
 801acec:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801acee:	e004      	b.n	801acfa <parse_object_value+0x1b2>
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	1c5a      	adds	r2, r3, #1
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	601a      	str	r2, [r3, #0]
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	781b      	ldrb	r3, [r3, #0]
 801ad00:	3301      	adds	r3, #1
 801ad02:	4a13      	ldr	r2, [pc, #76]	; (801ad50 <parse_object_value+0x208>)
 801ad04:	4413      	add	r3, r2
 801ad06:	781b      	ldrb	r3, [r3, #0]
 801ad08:	f003 0308 	and.w	r3, r3, #8
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	d1ef      	bne.n	801acf0 <parse_object_value+0x1a8>
    if (**string != '}' || /* Trim object after parsing is over */
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	781b      	ldrb	r3, [r3, #0]
 801ad16:	2b7d      	cmp	r3, #125	; 0x7d
 801ad18:	d10b      	bne.n	801ad32 <parse_object_value+0x1ea>
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 801ad1a:	68f8      	ldr	r0, [r7, #12]
 801ad1c:	f001 fa3a 	bl	801c194 <json_object_get_count>
 801ad20:	4603      	mov	r3, r0
 801ad22:	4619      	mov	r1, r3
 801ad24:	68f8      	ldr	r0, [r7, #12]
 801ad26:	f7ff f9b3 	bl	801a090 <json_object_resize>
 801ad2a:	4603      	mov	r3, r0
    if (**string != '}' || /* Trim object after parsing is over */
 801ad2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad30:	d104      	bne.n	801ad3c <parse_object_value+0x1f4>
            json_value_free(output_value);
 801ad32:	6978      	ldr	r0, [r7, #20]
 801ad34:	f001 fb3a 	bl	801c3ac <json_value_free>
            return NULL;
 801ad38:	2300      	movs	r3, #0
 801ad3a:	e005      	b.n	801ad48 <parse_object_value+0x200>
    }
    SKIP_CHAR(string);
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	1c5a      	adds	r2, r3, #1
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	601a      	str	r2, [r3, #0]
    return output_value;
 801ad46:	697b      	ldr	r3, [r7, #20]
}
 801ad48:	4618      	mov	r0, r3
 801ad4a:	3718      	adds	r7, #24
 801ad4c:	46bd      	mov	sp, r7
 801ad4e:	bd80      	pop	{r7, pc}
 801ad50:	08021ef4 	.word	0x08021ef4
 801ad54:	20000088 	.word	0x20000088

0801ad58 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b086      	sub	sp, #24
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
 801ad60:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 801ad62:	2300      	movs	r3, #0
 801ad64:	617b      	str	r3, [r7, #20]
 801ad66:	2300      	movs	r3, #0
 801ad68:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 801ad6a:	2300      	movs	r3, #0
 801ad6c:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 801ad6e:	f001 fb77 	bl	801c460 <json_value_init_array>
 801ad72:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801ad74:	697b      	ldr	r3, [r7, #20]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d101      	bne.n	801ad7e <parse_array_value+0x26>
        return NULL;
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	e0ab      	b.n	801aed6 <parse_array_value+0x17e>
    }
    if (**string != '[') {
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	781b      	ldrb	r3, [r3, #0]
 801ad84:	2b5b      	cmp	r3, #91	; 0x5b
 801ad86:	d004      	beq.n	801ad92 <parse_array_value+0x3a>
        json_value_free(output_value);
 801ad88:	6978      	ldr	r0, [r7, #20]
 801ad8a:	f001 fb0f 	bl	801c3ac <json_value_free>
        return NULL;
 801ad8e:	2300      	movs	r3, #0
 801ad90:	e0a1      	b.n	801aed6 <parse_array_value+0x17e>
    }
    output_array = json_value_get_array(output_value);
 801ad92:	6978      	ldr	r0, [r7, #20]
 801ad94:	f001 fab7 	bl	801c306 <json_value_get_array>
 801ad98:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	1c5a      	adds	r2, r3, #1
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801ada4:	e004      	b.n	801adb0 <parse_array_value+0x58>
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	1c5a      	adds	r2, r3, #1
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	601a      	str	r2, [r3, #0]
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	781b      	ldrb	r3, [r3, #0]
 801adb6:	3301      	adds	r3, #1
 801adb8:	4a49      	ldr	r2, [pc, #292]	; (801aee0 <parse_array_value+0x188>)
 801adba:	4413      	add	r3, r2
 801adbc:	781b      	ldrb	r3, [r3, #0]
 801adbe:	f003 0308 	and.w	r3, r3, #8
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d1ef      	bne.n	801ada6 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	781b      	ldrb	r3, [r3, #0]
 801adcc:	2b5d      	cmp	r3, #93	; 0x5d
 801adce:	d14e      	bne.n	801ae6e <parse_array_value+0x116>
        SKIP_CHAR(string);
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	1c5a      	adds	r2, r3, #1
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	601a      	str	r2, [r3, #0]
        return output_value;
 801adda:	697b      	ldr	r3, [r7, #20]
 801addc:	e07b      	b.n	801aed6 <parse_array_value+0x17e>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 801adde:	6839      	ldr	r1, [r7, #0]
 801ade0:	6878      	ldr	r0, [r7, #4]
 801ade2:	f7ff fe11 	bl	801aa08 <parse_value>
 801ade6:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 801ade8:	693b      	ldr	r3, [r7, #16]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d104      	bne.n	801adf8 <parse_array_value+0xa0>
            json_value_free(output_value);
 801adee:	6978      	ldr	r0, [r7, #20]
 801adf0:	f001 fadc 	bl	801c3ac <json_value_free>
            return NULL;
 801adf4:	2300      	movs	r3, #0
 801adf6:	e06e      	b.n	801aed6 <parse_array_value+0x17e>
        }
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 801adf8:	6939      	ldr	r1, [r7, #16]
 801adfa:	68f8      	ldr	r0, [r7, #12]
 801adfc:	f7ff fb0c 	bl	801a418 <json_array_add>
 801ae00:	4603      	mov	r3, r0
 801ae02:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae06:	d10c      	bne.n	801ae22 <parse_array_value+0xca>
            json_value_free(new_array_value);
 801ae08:	6938      	ldr	r0, [r7, #16]
 801ae0a:	f001 facf 	bl	801c3ac <json_value_free>
            json_value_free(output_value);
 801ae0e:	6978      	ldr	r0, [r7, #20]
 801ae10:	f001 facc 	bl	801c3ac <json_value_free>
            return NULL;
 801ae14:	2300      	movs	r3, #0
 801ae16:	e05e      	b.n	801aed6 <parse_array_value+0x17e>
        }
        SKIP_WHITESPACES(string);
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	1c5a      	adds	r2, r3, #1
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	601a      	str	r2, [r3, #0]
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	781b      	ldrb	r3, [r3, #0]
 801ae28:	3301      	adds	r3, #1
 801ae2a:	4a2d      	ldr	r2, [pc, #180]	; (801aee0 <parse_array_value+0x188>)
 801ae2c:	4413      	add	r3, r2
 801ae2e:	781b      	ldrb	r3, [r3, #0]
 801ae30:	f003 0308 	and.w	r3, r3, #8
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d1ef      	bne.n	801ae18 <parse_array_value+0xc0>
        if (**string != ',') {
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	781b      	ldrb	r3, [r3, #0]
 801ae3e:	2b2c      	cmp	r3, #44	; 0x2c
 801ae40:	d11b      	bne.n	801ae7a <parse_array_value+0x122>
            break;
        }
        SKIP_CHAR(string);
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	1c5a      	adds	r2, r3, #1
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801ae4c:	e004      	b.n	801ae58 <parse_array_value+0x100>
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	1c5a      	adds	r2, r3, #1
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	601a      	str	r2, [r3, #0]
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	781b      	ldrb	r3, [r3, #0]
 801ae5e:	3301      	adds	r3, #1
 801ae60:	4a1f      	ldr	r2, [pc, #124]	; (801aee0 <parse_array_value+0x188>)
 801ae62:	4413      	add	r3, r2
 801ae64:	781b      	ldrb	r3, [r3, #0]
 801ae66:	f003 0308 	and.w	r3, r3, #8
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d1ef      	bne.n	801ae4e <parse_array_value+0xf6>
    while (**string != '\0') {
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	781b      	ldrb	r3, [r3, #0]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d1b2      	bne.n	801adde <parse_array_value+0x86>
 801ae78:	e006      	b.n	801ae88 <parse_array_value+0x130>
            break;
 801ae7a:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801ae7c:	e004      	b.n	801ae88 <parse_array_value+0x130>
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	1c5a      	adds	r2, r3, #1
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	601a      	str	r2, [r3, #0]
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	781b      	ldrb	r3, [r3, #0]
 801ae8e:	3301      	adds	r3, #1
 801ae90:	4a13      	ldr	r2, [pc, #76]	; (801aee0 <parse_array_value+0x188>)
 801ae92:	4413      	add	r3, r2
 801ae94:	781b      	ldrb	r3, [r3, #0]
 801ae96:	f003 0308 	and.w	r3, r3, #8
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d1ef      	bne.n	801ae7e <parse_array_value+0x126>
    if (**string != ']' || /* Trim array after parsing is over */
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	781b      	ldrb	r3, [r3, #0]
 801aea4:	2b5d      	cmp	r3, #93	; 0x5d
 801aea6:	d10b      	bne.n	801aec0 <parse_array_value+0x168>
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
 801aea8:	68f8      	ldr	r0, [r7, #12]
 801aeaa:	f001 f9eb 	bl	801c284 <json_array_get_count>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	4619      	mov	r1, r3
 801aeb2:	68f8      	ldr	r0, [r7, #12]
 801aeb4:	f7ff fae6 	bl	801a484 <json_array_resize>
 801aeb8:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 801aeba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aebe:	d104      	bne.n	801aeca <parse_array_value+0x172>
            json_value_free(output_value);
 801aec0:	6978      	ldr	r0, [r7, #20]
 801aec2:	f001 fa73 	bl	801c3ac <json_value_free>
            return NULL;
 801aec6:	2300      	movs	r3, #0
 801aec8:	e005      	b.n	801aed6 <parse_array_value+0x17e>
    }
    SKIP_CHAR(string);
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	1c5a      	adds	r2, r3, #1
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	601a      	str	r2, [r3, #0]
    return output_value;
 801aed4:	697b      	ldr	r3, [r7, #20]
}
 801aed6:	4618      	mov	r0, r3
 801aed8:	3718      	adds	r7, #24
 801aeda:	46bd      	mov	sp, r7
 801aedc:	bd80      	pop	{r7, pc}
 801aede:	bf00      	nop
 801aee0:	08021ef4 	.word	0x08021ef4

0801aee4 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b084      	sub	sp, #16
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 801aeec:	2300      	movs	r3, #0
 801aeee:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string);
 801aef0:	6878      	ldr	r0, [r7, #4]
 801aef2:	f7ff fd65 	bl	801a9c0 <get_quoted_string>
 801aef6:	60b8      	str	r0, [r7, #8]
    if (new_string == NULL) {
 801aef8:	68bb      	ldr	r3, [r7, #8]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d101      	bne.n	801af02 <parse_string_value+0x1e>
        return NULL;
 801aefe:	2300      	movs	r3, #0
 801af00:	e00d      	b.n	801af1e <parse_string_value+0x3a>
    }
    value = json_value_init_string_no_copy(new_string);
 801af02:	68b8      	ldr	r0, [r7, #8]
 801af04:	f7ff fb26 	bl	801a554 <json_value_init_string_no_copy>
 801af08:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d105      	bne.n	801af1c <parse_string_value+0x38>
        parson_free(new_string);
 801af10:	4b05      	ldr	r3, [pc, #20]	; (801af28 <parse_string_value+0x44>)
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	68b8      	ldr	r0, [r7, #8]
 801af16:	4798      	blx	r3
        return NULL;
 801af18:	2300      	movs	r3, #0
 801af1a:	e000      	b.n	801af1e <parse_string_value+0x3a>
    }
    return value;
 801af1c:	68fb      	ldr	r3, [r7, #12]
}
 801af1e:	4618      	mov	r0, r3
 801af20:	3710      	adds	r7, #16
 801af22:	46bd      	mov	sp, r7
 801af24:	bd80      	pop	{r7, pc}
 801af26:	bf00      	nop
 801af28:	20000088 	.word	0x20000088

0801af2c <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b084      	sub	sp, #16
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 801af34:	2304      	movs	r3, #4
 801af36:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 801af38:	2305      	movs	r3, #5
 801af3a:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	68fa      	ldr	r2, [r7, #12]
 801af42:	4619      	mov	r1, r3
 801af44:	4815      	ldr	r0, [pc, #84]	; (801af9c <parse_boolean_value+0x70>)
 801af46:	f002 ff60 	bl	801de0a <strncmp>
 801af4a:	4603      	mov	r3, r0
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d10a      	bne.n	801af66 <parse_boolean_value+0x3a>
        *string += true_token_size;
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	681a      	ldr	r2, [r3, #0]
 801af54:	68fb      	ldr	r3, [r7, #12]
 801af56:	441a      	add	r2, r3
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 801af5c:	2001      	movs	r0, #1
 801af5e:	f001 fb33 	bl	801c5c8 <json_value_init_boolean>
 801af62:	4603      	mov	r3, r0
 801af64:	e015      	b.n	801af92 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	68ba      	ldr	r2, [r7, #8]
 801af6c:	4619      	mov	r1, r3
 801af6e:	480c      	ldr	r0, [pc, #48]	; (801afa0 <parse_boolean_value+0x74>)
 801af70:	f002 ff4b 	bl	801de0a <strncmp>
 801af74:	4603      	mov	r3, r0
 801af76:	2b00      	cmp	r3, #0
 801af78:	d10a      	bne.n	801af90 <parse_boolean_value+0x64>
        *string += false_token_size;
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	681a      	ldr	r2, [r3, #0]
 801af7e:	68bb      	ldr	r3, [r7, #8]
 801af80:	441a      	add	r2, r3
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 801af86:	2000      	movs	r0, #0
 801af88:	f001 fb1e 	bl	801c5c8 <json_value_init_boolean>
 801af8c:	4603      	mov	r3, r0
 801af8e:	e000      	b.n	801af92 <parse_boolean_value+0x66>
    }
    return NULL;
 801af90:	2300      	movs	r3, #0
}
 801af92:	4618      	mov	r0, r3
 801af94:	3710      	adds	r7, #16
 801af96:	46bd      	mov	sp, r7
 801af98:	bd80      	pop	{r7, pc}
 801af9a:	bf00      	nop
 801af9c:	080218b8 	.word	0x080218b8
 801afa0:	080218c0 	.word	0x080218c0

0801afa4 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b086      	sub	sp, #24
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 801afac:	f04f 0200 	mov.w	r2, #0
 801afb0:	f04f 0300 	mov.w	r3, #0
 801afb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 801afb8:	f001 fed0 	bl	801cd5c <__errno>
 801afbc:	4603      	mov	r3, r0
 801afbe:	2200      	movs	r2, #0
 801afc0:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	f107 020c 	add.w	r2, r7, #12
 801afca:	4611      	mov	r1, r2
 801afcc:	4618      	mov	r0, r3
 801afce:	f003 fd69 	bl	801eaa4 <strtod>
 801afd2:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno || !is_decimal(*string, end - *string)) {
 801afd6:	f001 fec1 	bl	801cd5c <__errno>
 801afda:	4603      	mov	r3, r0
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d10b      	bne.n	801affa <parse_number_value+0x56>
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	6818      	ldr	r0, [r3, #0]
 801afe6:	68fa      	ldr	r2, [r7, #12]
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	1ad3      	subs	r3, r2, r3
 801afee:	4619      	mov	r1, r3
 801aff0:	f7fe ff68 	bl	8019ec4 <is_decimal>
 801aff4:	4603      	mov	r3, r0
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d101      	bne.n	801affe <parse_number_value+0x5a>
        return NULL;
 801affa:	2300      	movs	r3, #0
 801affc:	e007      	b.n	801b00e <parse_number_value+0x6a>
    }
    *string = end;
 801affe:	68fa      	ldr	r2, [r7, #12]
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 801b004:	ed97 0b04 	vldr	d0, [r7, #16]
 801b008:	f001 fa8c 	bl	801c524 <json_value_init_number>
 801b00c:	4603      	mov	r3, r0
}
 801b00e:	4618      	mov	r0, r3
 801b010:	3718      	adds	r7, #24
 801b012:	46bd      	mov	sp, r7
 801b014:	bd80      	pop	{r7, pc}
	...

0801b018 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 801b018:	b580      	push	{r7, lr}
 801b01a:	b084      	sub	sp, #16
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 801b020:	2304      	movs	r3, #4
 801b022:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	68fa      	ldr	r2, [r7, #12]
 801b02a:	4619      	mov	r1, r3
 801b02c:	480a      	ldr	r0, [pc, #40]	; (801b058 <parse_null_value+0x40>)
 801b02e:	f002 feec 	bl	801de0a <strncmp>
 801b032:	4603      	mov	r3, r0
 801b034:	2b00      	cmp	r3, #0
 801b036:	d109      	bne.n	801b04c <parse_null_value+0x34>
        *string += token_size;
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	681a      	ldr	r2, [r3, #0]
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	441a      	add	r2, r3
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 801b044:	f001 fae4 	bl	801c610 <json_value_init_null>
 801b048:	4603      	mov	r3, r0
 801b04a:	e000      	b.n	801b04e <parse_null_value+0x36>
    }
    return NULL;
 801b04c:	2300      	movs	r3, #0
}
 801b04e:	4618      	mov	r0, r3
 801b050:	3710      	adds	r7, #16
 801b052:	46bd      	mov	sp, r7
 801b054:	bd80      	pop	{r7, pc}
 801b056:	bf00      	nop
 801b058:	080218c8 	.word	0x080218c8

0801b05c <json_serialize_to_buffer_r>:
                                  if (written < 0) { return -1; }\
                                  if (buf != NULL) { buf += written; }\
                                  written_total += written; } while(0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b092      	sub	sp, #72	; 0x48
 801b060:	af02      	add	r7, sp, #8
 801b062:	60f8      	str	r0, [r7, #12]
 801b064:	60b9      	str	r1, [r7, #8]
 801b066:	607a      	str	r2, [r7, #4]
 801b068:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 801b06a:	2300      	movs	r3, #0
 801b06c:	637b      	str	r3, [r7, #52]	; 0x34
 801b06e:	2300      	movs	r3, #0
 801b070:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Value *temp_value = NULL;
 801b072:	2300      	movs	r3, #0
 801b074:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Array *array = NULL;
 801b076:	2300      	movs	r3, #0
 801b078:	62bb      	str	r3, [r7, #40]	; 0x28
    JSON_Object *object = NULL;
 801b07a:	2300      	movs	r3, #0
 801b07c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i = 0, count = 0;
 801b07e:	2300      	movs	r3, #0
 801b080:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b082:	2300      	movs	r3, #0
 801b084:	623b      	str	r3, [r7, #32]
    double num = 0.0;
 801b086:	f04f 0200 	mov.w	r2, #0
 801b08a:	f04f 0300 	mov.w	r3, #0
 801b08e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 801b092:	f04f 33ff 	mov.w	r3, #4294967295
 801b096:	617b      	str	r3, [r7, #20]
 801b098:	2300      	movs	r3, #0
 801b09a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (json_value_get_type(value)) {
 801b09c:	68f8      	ldr	r0, [r7, #12]
 801b09e:	f001 f90e 	bl	801c2be <json_value_get_type>
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	3301      	adds	r3, #1
 801b0a6:	2b07      	cmp	r3, #7
 801b0a8:	f200 82e4 	bhi.w	801b674 <json_serialize_to_buffer_r+0x618>
 801b0ac:	a201      	add	r2, pc, #4	; (adr r2, 801b0b4 <json_serialize_to_buffer_r+0x58>)
 801b0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b0b2:	bf00      	nop
 801b0b4:	0801b66f 	.word	0x0801b66f
 801b0b8:	0801b675 	.word	0x0801b675
 801b0bc:	0801b63f 	.word	0x0801b63f
 801b0c0:	0801b529 	.word	0x0801b529
 801b0c4:	0801b5d7 	.word	0x0801b5d7
 801b0c8:	0801b2a3 	.word	0x0801b2a3
 801b0cc:	0801b0d5 	.word	0x0801b0d5
 801b0d0:	0801b56d 	.word	0x0801b56d
        case JSONArray:
            array = json_value_get_array(value);
 801b0d4:	68f8      	ldr	r0, [r7, #12]
 801b0d6:	f001 f916 	bl	801c306 <json_value_get_array>
 801b0da:	62b8      	str	r0, [r7, #40]	; 0x28
            count = json_array_get_count(array);
 801b0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b0de:	f001 f8d1 	bl	801c284 <json_array_get_count>
 801b0e2:	6238      	str	r0, [r7, #32]
            APPEND_STRING("[");
 801b0e4:	499b      	ldr	r1, [pc, #620]	; (801b354 <json_serialize_to_buffer_r+0x2f8>)
 801b0e6:	68b8      	ldr	r0, [r7, #8]
 801b0e8:	f000 ff94 	bl	801c014 <append_string>
 801b0ec:	6178      	str	r0, [r7, #20]
 801b0ee:	697b      	ldr	r3, [r7, #20]
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	da02      	bge.n	801b0fa <json_serialize_to_buffer_r+0x9e>
 801b0f4:	f04f 33ff 	mov.w	r3, #4294967295
 801b0f8:	e2be      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b0fa:	68bb      	ldr	r3, [r7, #8]
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d003      	beq.n	801b108 <json_serialize_to_buffer_r+0xac>
 801b100:	697b      	ldr	r3, [r7, #20]
 801b102:	68ba      	ldr	r2, [r7, #8]
 801b104:	4413      	add	r3, r2
 801b106:	60bb      	str	r3, [r7, #8]
 801b108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b10a:	697b      	ldr	r3, [r7, #20]
 801b10c:	4413      	add	r3, r2
 801b10e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801b110:	6a3b      	ldr	r3, [r7, #32]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d018      	beq.n	801b148 <json_serialize_to_buffer_r+0xec>
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d015      	beq.n	801b148 <json_serialize_to_buffer_r+0xec>
                APPEND_STRING("\n");
 801b11c:	498e      	ldr	r1, [pc, #568]	; (801b358 <json_serialize_to_buffer_r+0x2fc>)
 801b11e:	68b8      	ldr	r0, [r7, #8]
 801b120:	f000 ff78 	bl	801c014 <append_string>
 801b124:	6178      	str	r0, [r7, #20]
 801b126:	697b      	ldr	r3, [r7, #20]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	da02      	bge.n	801b132 <json_serialize_to_buffer_r+0xd6>
 801b12c:	f04f 33ff 	mov.w	r3, #4294967295
 801b130:	e2a2      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b132:	68bb      	ldr	r3, [r7, #8]
 801b134:	2b00      	cmp	r3, #0
 801b136:	d003      	beq.n	801b140 <json_serialize_to_buffer_r+0xe4>
 801b138:	697b      	ldr	r3, [r7, #20]
 801b13a:	68ba      	ldr	r2, [r7, #8]
 801b13c:	4413      	add	r3, r2
 801b13e:	60bb      	str	r3, [r7, #8]
 801b140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b142:	697b      	ldr	r3, [r7, #20]
 801b144:	4413      	add	r3, r2
 801b146:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801b148:	2300      	movs	r3, #0
 801b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b14c:	e071      	b.n	801b232 <json_serialize_to_buffer_r+0x1d6>
                if (is_pretty) {
 801b14e:	683b      	ldr	r3, [r7, #0]
 801b150:	2b00      	cmp	r3, #0
 801b152:	d017      	beq.n	801b184 <json_serialize_to_buffer_r+0x128>
                    APPEND_INDENT(level+1);
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	3301      	adds	r3, #1
 801b158:	4619      	mov	r1, r3
 801b15a:	68b8      	ldr	r0, [r7, #8]
 801b15c:	f000 ff28 	bl	801bfb0 <append_indent>
 801b160:	6178      	str	r0, [r7, #20]
 801b162:	697b      	ldr	r3, [r7, #20]
 801b164:	2b00      	cmp	r3, #0
 801b166:	da02      	bge.n	801b16e <json_serialize_to_buffer_r+0x112>
 801b168:	f04f 33ff 	mov.w	r3, #4294967295
 801b16c:	e284      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b16e:	68bb      	ldr	r3, [r7, #8]
 801b170:	2b00      	cmp	r3, #0
 801b172:	d003      	beq.n	801b17c <json_serialize_to_buffer_r+0x120>
 801b174:	697b      	ldr	r3, [r7, #20]
 801b176:	68ba      	ldr	r2, [r7, #8]
 801b178:	4413      	add	r3, r2
 801b17a:	60bb      	str	r3, [r7, #8]
 801b17c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b17e:	697b      	ldr	r3, [r7, #20]
 801b180:	4413      	add	r3, r2
 801b182:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_array_get_value(array, i);
 801b184:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b188:	f001 f84f 	bl	801c22a <json_array_get_value>
 801b18c:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	1c5a      	adds	r2, r3, #1
 801b192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b194:	9300      	str	r3, [sp, #0]
 801b196:	683b      	ldr	r3, [r7, #0]
 801b198:	68b9      	ldr	r1, [r7, #8]
 801b19a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b19c:	f7ff ff5e 	bl	801b05c <json_serialize_to_buffer_r>
 801b1a0:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801b1a2:	697b      	ldr	r3, [r7, #20]
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	da02      	bge.n	801b1ae <json_serialize_to_buffer_r+0x152>
                    return -1;
 801b1a8:	f04f 33ff 	mov.w	r3, #4294967295
 801b1ac:	e264      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801b1ae:	68bb      	ldr	r3, [r7, #8]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d003      	beq.n	801b1bc <json_serialize_to_buffer_r+0x160>
                    buf += written;
 801b1b4:	697b      	ldr	r3, [r7, #20]
 801b1b6:	68ba      	ldr	r2, [r7, #8]
 801b1b8:	4413      	add	r3, r2
 801b1ba:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801b1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b1be:	697b      	ldr	r3, [r7, #20]
 801b1c0:	4413      	add	r3, r2
 801b1c2:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801b1c4:	6a3b      	ldr	r3, [r7, #32]
 801b1c6:	3b01      	subs	r3, #1
 801b1c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b1ca:	429a      	cmp	r2, r3
 801b1cc:	d215      	bcs.n	801b1fa <json_serialize_to_buffer_r+0x19e>
                    APPEND_STRING(",");
 801b1ce:	4963      	ldr	r1, [pc, #396]	; (801b35c <json_serialize_to_buffer_r+0x300>)
 801b1d0:	68b8      	ldr	r0, [r7, #8]
 801b1d2:	f000 ff1f 	bl	801c014 <append_string>
 801b1d6:	6178      	str	r0, [r7, #20]
 801b1d8:	697b      	ldr	r3, [r7, #20]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	da02      	bge.n	801b1e4 <json_serialize_to_buffer_r+0x188>
 801b1de:	f04f 33ff 	mov.w	r3, #4294967295
 801b1e2:	e249      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b1e4:	68bb      	ldr	r3, [r7, #8]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d003      	beq.n	801b1f2 <json_serialize_to_buffer_r+0x196>
 801b1ea:	697b      	ldr	r3, [r7, #20]
 801b1ec:	68ba      	ldr	r2, [r7, #8]
 801b1ee:	4413      	add	r3, r2
 801b1f0:	60bb      	str	r3, [r7, #8]
 801b1f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b1f4:	697b      	ldr	r3, [r7, #20]
 801b1f6:	4413      	add	r3, r2
 801b1f8:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801b1fa:	683b      	ldr	r3, [r7, #0]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d015      	beq.n	801b22c <json_serialize_to_buffer_r+0x1d0>
                    APPEND_STRING("\n");
 801b200:	4955      	ldr	r1, [pc, #340]	; (801b358 <json_serialize_to_buffer_r+0x2fc>)
 801b202:	68b8      	ldr	r0, [r7, #8]
 801b204:	f000 ff06 	bl	801c014 <append_string>
 801b208:	6178      	str	r0, [r7, #20]
 801b20a:	697b      	ldr	r3, [r7, #20]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	da02      	bge.n	801b216 <json_serialize_to_buffer_r+0x1ba>
 801b210:	f04f 33ff 	mov.w	r3, #4294967295
 801b214:	e230      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b216:	68bb      	ldr	r3, [r7, #8]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d003      	beq.n	801b224 <json_serialize_to_buffer_r+0x1c8>
 801b21c:	697b      	ldr	r3, [r7, #20]
 801b21e:	68ba      	ldr	r2, [r7, #8]
 801b220:	4413      	add	r3, r2
 801b222:	60bb      	str	r3, [r7, #8]
 801b224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b226:	697b      	ldr	r3, [r7, #20]
 801b228:	4413      	add	r3, r2
 801b22a:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801b22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b22e:	3301      	adds	r3, #1
 801b230:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b234:	6a3b      	ldr	r3, [r7, #32]
 801b236:	429a      	cmp	r2, r3
 801b238:	d389      	bcc.n	801b14e <json_serialize_to_buffer_r+0xf2>
                }
            }
            if (count > 0 && is_pretty) {
 801b23a:	6a3b      	ldr	r3, [r7, #32]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d018      	beq.n	801b272 <json_serialize_to_buffer_r+0x216>
 801b240:	683b      	ldr	r3, [r7, #0]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d015      	beq.n	801b272 <json_serialize_to_buffer_r+0x216>
                APPEND_INDENT(level);
 801b246:	6879      	ldr	r1, [r7, #4]
 801b248:	68b8      	ldr	r0, [r7, #8]
 801b24a:	f000 feb1 	bl	801bfb0 <append_indent>
 801b24e:	6178      	str	r0, [r7, #20]
 801b250:	697b      	ldr	r3, [r7, #20]
 801b252:	2b00      	cmp	r3, #0
 801b254:	da02      	bge.n	801b25c <json_serialize_to_buffer_r+0x200>
 801b256:	f04f 33ff 	mov.w	r3, #4294967295
 801b25a:	e20d      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b25c:	68bb      	ldr	r3, [r7, #8]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d003      	beq.n	801b26a <json_serialize_to_buffer_r+0x20e>
 801b262:	697b      	ldr	r3, [r7, #20]
 801b264:	68ba      	ldr	r2, [r7, #8]
 801b266:	4413      	add	r3, r2
 801b268:	60bb      	str	r3, [r7, #8]
 801b26a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b26c:	697b      	ldr	r3, [r7, #20]
 801b26e:	4413      	add	r3, r2
 801b270:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("]");
 801b272:	493b      	ldr	r1, [pc, #236]	; (801b360 <json_serialize_to_buffer_r+0x304>)
 801b274:	68b8      	ldr	r0, [r7, #8]
 801b276:	f000 fecd 	bl	801c014 <append_string>
 801b27a:	6178      	str	r0, [r7, #20]
 801b27c:	697b      	ldr	r3, [r7, #20]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	da02      	bge.n	801b288 <json_serialize_to_buffer_r+0x22c>
 801b282:	f04f 33ff 	mov.w	r3, #4294967295
 801b286:	e1f7      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d003      	beq.n	801b296 <json_serialize_to_buffer_r+0x23a>
 801b28e:	697b      	ldr	r3, [r7, #20]
 801b290:	68ba      	ldr	r2, [r7, #8]
 801b292:	4413      	add	r3, r2
 801b294:	60bb      	str	r3, [r7, #8]
 801b296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b298:	697b      	ldr	r3, [r7, #20]
 801b29a:	4413      	add	r3, r2
 801b29c:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801b29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b2a0:	e1ea      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
        case JSONObject:
            object = json_value_get_object(value);
 801b2a2:	68f8      	ldr	r0, [r7, #12]
 801b2a4:	f001 f81d 	bl	801c2e2 <json_value_get_object>
 801b2a8:	6278      	str	r0, [r7, #36]	; 0x24
            count  = json_object_get_count(object);
 801b2aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b2ac:	f000 ff72 	bl	801c194 <json_object_get_count>
 801b2b0:	6238      	str	r0, [r7, #32]
            APPEND_STRING("{");
 801b2b2:	492c      	ldr	r1, [pc, #176]	; (801b364 <json_serialize_to_buffer_r+0x308>)
 801b2b4:	68b8      	ldr	r0, [r7, #8]
 801b2b6:	f000 fead 	bl	801c014 <append_string>
 801b2ba:	6178      	str	r0, [r7, #20]
 801b2bc:	697b      	ldr	r3, [r7, #20]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	da02      	bge.n	801b2c8 <json_serialize_to_buffer_r+0x26c>
 801b2c2:	f04f 33ff 	mov.w	r3, #4294967295
 801b2c6:	e1d7      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b2c8:	68bb      	ldr	r3, [r7, #8]
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d003      	beq.n	801b2d6 <json_serialize_to_buffer_r+0x27a>
 801b2ce:	697b      	ldr	r3, [r7, #20]
 801b2d0:	68ba      	ldr	r2, [r7, #8]
 801b2d2:	4413      	add	r3, r2
 801b2d4:	60bb      	str	r3, [r7, #8]
 801b2d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b2d8:	697b      	ldr	r3, [r7, #20]
 801b2da:	4413      	add	r3, r2
 801b2dc:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801b2de:	6a3b      	ldr	r3, [r7, #32]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d018      	beq.n	801b316 <json_serialize_to_buffer_r+0x2ba>
 801b2e4:	683b      	ldr	r3, [r7, #0]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d015      	beq.n	801b316 <json_serialize_to_buffer_r+0x2ba>
                APPEND_STRING("\n");
 801b2ea:	491b      	ldr	r1, [pc, #108]	; (801b358 <json_serialize_to_buffer_r+0x2fc>)
 801b2ec:	68b8      	ldr	r0, [r7, #8]
 801b2ee:	f000 fe91 	bl	801c014 <append_string>
 801b2f2:	6178      	str	r0, [r7, #20]
 801b2f4:	697b      	ldr	r3, [r7, #20]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	da02      	bge.n	801b300 <json_serialize_to_buffer_r+0x2a4>
 801b2fa:	f04f 33ff 	mov.w	r3, #4294967295
 801b2fe:	e1bb      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b300:	68bb      	ldr	r3, [r7, #8]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d003      	beq.n	801b30e <json_serialize_to_buffer_r+0x2b2>
 801b306:	697b      	ldr	r3, [r7, #20]
 801b308:	68ba      	ldr	r2, [r7, #8]
 801b30a:	4413      	add	r3, r2
 801b30c:	60bb      	str	r3, [r7, #8]
 801b30e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b310:	697b      	ldr	r3, [r7, #20]
 801b312:	4413      	add	r3, r2
 801b314:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801b316:	2300      	movs	r3, #0
 801b318:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b31a:	e0cc      	b.n	801b4b6 <json_serialize_to_buffer_r+0x45a>
                key = json_object_get_name(object, i);
 801b31c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b31e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b320:	f000 ff49 	bl	801c1b6 <json_object_get_name>
 801b324:	6378      	str	r0, [r7, #52]	; 0x34
                if (key == NULL) {
 801b326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d102      	bne.n	801b332 <json_serialize_to_buffer_r+0x2d6>
                    return -1;
 801b32c:	f04f 33ff 	mov.w	r3, #4294967295
 801b330:	e1a2      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
                }
                if (is_pretty) {
 801b332:	683b      	ldr	r3, [r7, #0]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d022      	beq.n	801b37e <json_serialize_to_buffer_r+0x322>
                    APPEND_INDENT(level+1);
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	3301      	adds	r3, #1
 801b33c:	4619      	mov	r1, r3
 801b33e:	68b8      	ldr	r0, [r7, #8]
 801b340:	f000 fe36 	bl	801bfb0 <append_indent>
 801b344:	6178      	str	r0, [r7, #20]
 801b346:	697b      	ldr	r3, [r7, #20]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	da0d      	bge.n	801b368 <json_serialize_to_buffer_r+0x30c>
 801b34c:	f04f 33ff 	mov.w	r3, #4294967295
 801b350:	e192      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b352:	bf00      	nop
 801b354:	080218d0 	.word	0x080218d0
 801b358:	080218d4 	.word	0x080218d4
 801b35c:	080218d8 	.word	0x080218d8
 801b360:	080218dc 	.word	0x080218dc
 801b364:	080218e0 	.word	0x080218e0
 801b368:	68bb      	ldr	r3, [r7, #8]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d003      	beq.n	801b376 <json_serialize_to_buffer_r+0x31a>
 801b36e:	697b      	ldr	r3, [r7, #20]
 801b370:	68ba      	ldr	r2, [r7, #8]
 801b372:	4413      	add	r3, r2
 801b374:	60bb      	str	r3, [r7, #8]
 801b376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b378:	697b      	ldr	r3, [r7, #20]
 801b37a:	4413      	add	r3, r2
 801b37c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                written = json_serialize_string(key, buf);
 801b37e:	68b9      	ldr	r1, [r7, #8]
 801b380:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b382:	f000 f97f 	bl	801b684 <json_serialize_string>
 801b386:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801b388:	697b      	ldr	r3, [r7, #20]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	da02      	bge.n	801b394 <json_serialize_to_buffer_r+0x338>
                    return -1;
 801b38e:	f04f 33ff 	mov.w	r3, #4294967295
 801b392:	e171      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801b394:	68bb      	ldr	r3, [r7, #8]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d003      	beq.n	801b3a2 <json_serialize_to_buffer_r+0x346>
                    buf += written;
 801b39a:	697b      	ldr	r3, [r7, #20]
 801b39c:	68ba      	ldr	r2, [r7, #8]
 801b39e:	4413      	add	r3, r2
 801b3a0:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801b3a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3a4:	697b      	ldr	r3, [r7, #20]
 801b3a6:	4413      	add	r3, r2
 801b3a8:	63bb      	str	r3, [r7, #56]	; 0x38
                APPEND_STRING(":");
 801b3aa:	4996      	ldr	r1, [pc, #600]	; (801b604 <json_serialize_to_buffer_r+0x5a8>)
 801b3ac:	68b8      	ldr	r0, [r7, #8]
 801b3ae:	f000 fe31 	bl	801c014 <append_string>
 801b3b2:	6178      	str	r0, [r7, #20]
 801b3b4:	697b      	ldr	r3, [r7, #20]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	da02      	bge.n	801b3c0 <json_serialize_to_buffer_r+0x364>
 801b3ba:	f04f 33ff 	mov.w	r3, #4294967295
 801b3be:	e15b      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b3c0:	68bb      	ldr	r3, [r7, #8]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d003      	beq.n	801b3ce <json_serialize_to_buffer_r+0x372>
 801b3c6:	697b      	ldr	r3, [r7, #20]
 801b3c8:	68ba      	ldr	r2, [r7, #8]
 801b3ca:	4413      	add	r3, r2
 801b3cc:	60bb      	str	r3, [r7, #8]
 801b3ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3d0:	697b      	ldr	r3, [r7, #20]
 801b3d2:	4413      	add	r3, r2
 801b3d4:	63bb      	str	r3, [r7, #56]	; 0x38
                if (is_pretty) {
 801b3d6:	683b      	ldr	r3, [r7, #0]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d015      	beq.n	801b408 <json_serialize_to_buffer_r+0x3ac>
                    APPEND_STRING(" ");
 801b3dc:	498a      	ldr	r1, [pc, #552]	; (801b608 <json_serialize_to_buffer_r+0x5ac>)
 801b3de:	68b8      	ldr	r0, [r7, #8]
 801b3e0:	f000 fe18 	bl	801c014 <append_string>
 801b3e4:	6178      	str	r0, [r7, #20]
 801b3e6:	697b      	ldr	r3, [r7, #20]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	da02      	bge.n	801b3f2 <json_serialize_to_buffer_r+0x396>
 801b3ec:	f04f 33ff 	mov.w	r3, #4294967295
 801b3f0:	e142      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d003      	beq.n	801b400 <json_serialize_to_buffer_r+0x3a4>
 801b3f8:	697b      	ldr	r3, [r7, #20]
 801b3fa:	68ba      	ldr	r2, [r7, #8]
 801b3fc:	4413      	add	r3, r2
 801b3fe:	60bb      	str	r3, [r7, #8]
 801b400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b402:	697b      	ldr	r3, [r7, #20]
 801b404:	4413      	add	r3, r2
 801b406:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_object_get_value(object, key);
 801b408:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b40a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b40c:	f000 fe40 	bl	801c090 <json_object_get_value>
 801b410:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	1c5a      	adds	r2, r3, #1
 801b416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b418:	9300      	str	r3, [sp, #0]
 801b41a:	683b      	ldr	r3, [r7, #0]
 801b41c:	68b9      	ldr	r1, [r7, #8]
 801b41e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b420:	f7ff fe1c 	bl	801b05c <json_serialize_to_buffer_r>
 801b424:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801b426:	697b      	ldr	r3, [r7, #20]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	da02      	bge.n	801b432 <json_serialize_to_buffer_r+0x3d6>
                    return -1;
 801b42c:	f04f 33ff 	mov.w	r3, #4294967295
 801b430:	e122      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801b432:	68bb      	ldr	r3, [r7, #8]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d003      	beq.n	801b440 <json_serialize_to_buffer_r+0x3e4>
                    buf += written;
 801b438:	697b      	ldr	r3, [r7, #20]
 801b43a:	68ba      	ldr	r2, [r7, #8]
 801b43c:	4413      	add	r3, r2
 801b43e:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801b440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b442:	697b      	ldr	r3, [r7, #20]
 801b444:	4413      	add	r3, r2
 801b446:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801b448:	6a3b      	ldr	r3, [r7, #32]
 801b44a:	3b01      	subs	r3, #1
 801b44c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b44e:	429a      	cmp	r2, r3
 801b450:	d215      	bcs.n	801b47e <json_serialize_to_buffer_r+0x422>
                    APPEND_STRING(",");
 801b452:	496e      	ldr	r1, [pc, #440]	; (801b60c <json_serialize_to_buffer_r+0x5b0>)
 801b454:	68b8      	ldr	r0, [r7, #8]
 801b456:	f000 fddd 	bl	801c014 <append_string>
 801b45a:	6178      	str	r0, [r7, #20]
 801b45c:	697b      	ldr	r3, [r7, #20]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	da02      	bge.n	801b468 <json_serialize_to_buffer_r+0x40c>
 801b462:	f04f 33ff 	mov.w	r3, #4294967295
 801b466:	e107      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b468:	68bb      	ldr	r3, [r7, #8]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d003      	beq.n	801b476 <json_serialize_to_buffer_r+0x41a>
 801b46e:	697b      	ldr	r3, [r7, #20]
 801b470:	68ba      	ldr	r2, [r7, #8]
 801b472:	4413      	add	r3, r2
 801b474:	60bb      	str	r3, [r7, #8]
 801b476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b478:	697b      	ldr	r3, [r7, #20]
 801b47a:	4413      	add	r3, r2
 801b47c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801b47e:	683b      	ldr	r3, [r7, #0]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d015      	beq.n	801b4b0 <json_serialize_to_buffer_r+0x454>
                    APPEND_STRING("\n");
 801b484:	4962      	ldr	r1, [pc, #392]	; (801b610 <json_serialize_to_buffer_r+0x5b4>)
 801b486:	68b8      	ldr	r0, [r7, #8]
 801b488:	f000 fdc4 	bl	801c014 <append_string>
 801b48c:	6178      	str	r0, [r7, #20]
 801b48e:	697b      	ldr	r3, [r7, #20]
 801b490:	2b00      	cmp	r3, #0
 801b492:	da02      	bge.n	801b49a <json_serialize_to_buffer_r+0x43e>
 801b494:	f04f 33ff 	mov.w	r3, #4294967295
 801b498:	e0ee      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b49a:	68bb      	ldr	r3, [r7, #8]
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d003      	beq.n	801b4a8 <json_serialize_to_buffer_r+0x44c>
 801b4a0:	697b      	ldr	r3, [r7, #20]
 801b4a2:	68ba      	ldr	r2, [r7, #8]
 801b4a4:	4413      	add	r3, r2
 801b4a6:	60bb      	str	r3, [r7, #8]
 801b4a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b4aa:	697b      	ldr	r3, [r7, #20]
 801b4ac:	4413      	add	r3, r2
 801b4ae:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801b4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b4b2:	3301      	adds	r3, #1
 801b4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b4b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b4b8:	6a3b      	ldr	r3, [r7, #32]
 801b4ba:	429a      	cmp	r2, r3
 801b4bc:	f4ff af2e 	bcc.w	801b31c <json_serialize_to_buffer_r+0x2c0>
                }
            }
            if (count > 0 && is_pretty) {
 801b4c0:	6a3b      	ldr	r3, [r7, #32]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d018      	beq.n	801b4f8 <json_serialize_to_buffer_r+0x49c>
 801b4c6:	683b      	ldr	r3, [r7, #0]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d015      	beq.n	801b4f8 <json_serialize_to_buffer_r+0x49c>
                APPEND_INDENT(level);
 801b4cc:	6879      	ldr	r1, [r7, #4]
 801b4ce:	68b8      	ldr	r0, [r7, #8]
 801b4d0:	f000 fd6e 	bl	801bfb0 <append_indent>
 801b4d4:	6178      	str	r0, [r7, #20]
 801b4d6:	697b      	ldr	r3, [r7, #20]
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	da02      	bge.n	801b4e2 <json_serialize_to_buffer_r+0x486>
 801b4dc:	f04f 33ff 	mov.w	r3, #4294967295
 801b4e0:	e0ca      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b4e2:	68bb      	ldr	r3, [r7, #8]
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d003      	beq.n	801b4f0 <json_serialize_to_buffer_r+0x494>
 801b4e8:	697b      	ldr	r3, [r7, #20]
 801b4ea:	68ba      	ldr	r2, [r7, #8]
 801b4ec:	4413      	add	r3, r2
 801b4ee:	60bb      	str	r3, [r7, #8]
 801b4f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b4f2:	697b      	ldr	r3, [r7, #20]
 801b4f4:	4413      	add	r3, r2
 801b4f6:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("}");
 801b4f8:	4946      	ldr	r1, [pc, #280]	; (801b614 <json_serialize_to_buffer_r+0x5b8>)
 801b4fa:	68b8      	ldr	r0, [r7, #8]
 801b4fc:	f000 fd8a 	bl	801c014 <append_string>
 801b500:	6178      	str	r0, [r7, #20]
 801b502:	697b      	ldr	r3, [r7, #20]
 801b504:	2b00      	cmp	r3, #0
 801b506:	da02      	bge.n	801b50e <json_serialize_to_buffer_r+0x4b2>
 801b508:	f04f 33ff 	mov.w	r3, #4294967295
 801b50c:	e0b4      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b50e:	68bb      	ldr	r3, [r7, #8]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d003      	beq.n	801b51c <json_serialize_to_buffer_r+0x4c0>
 801b514:	697b      	ldr	r3, [r7, #20]
 801b516:	68ba      	ldr	r2, [r7, #8]
 801b518:	4413      	add	r3, r2
 801b51a:	60bb      	str	r3, [r7, #8]
 801b51c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b51e:	697b      	ldr	r3, [r7, #20]
 801b520:	4413      	add	r3, r2
 801b522:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b526:	e0a7      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
        case JSONString:
            string = json_value_get_string(value);
 801b528:	68f8      	ldr	r0, [r7, #12]
 801b52a:	f000 fefe 	bl	801c32a <json_value_get_string>
 801b52e:	6338      	str	r0, [r7, #48]	; 0x30
            if (string == NULL) {
 801b530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b532:	2b00      	cmp	r3, #0
 801b534:	d102      	bne.n	801b53c <json_serialize_to_buffer_r+0x4e0>
                return -1;
 801b536:	f04f 33ff 	mov.w	r3, #4294967295
 801b53a:	e09d      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
            }
            written = json_serialize_string(string, buf);
 801b53c:	68b9      	ldr	r1, [r7, #8]
 801b53e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b540:	f000 f8a0 	bl	801b684 <json_serialize_string>
 801b544:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801b546:	697b      	ldr	r3, [r7, #20]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	da02      	bge.n	801b552 <json_serialize_to_buffer_r+0x4f6>
                return -1;
 801b54c:	f04f 33ff 	mov.w	r3, #4294967295
 801b550:	e092      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
            }
            if (buf != NULL) {
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d003      	beq.n	801b560 <json_serialize_to_buffer_r+0x504>
                buf += written;
 801b558:	697b      	ldr	r3, [r7, #20]
 801b55a:	68ba      	ldr	r2, [r7, #8]
 801b55c:	4413      	add	r3, r2
 801b55e:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801b560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b562:	697b      	ldr	r3, [r7, #20]
 801b564:	4413      	add	r3, r2
 801b566:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801b568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b56a:	e085      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 801b56c:	68f8      	ldr	r0, [r7, #12]
 801b56e:	f000 ff09 	bl	801c384 <json_value_get_boolean>
 801b572:	4603      	mov	r3, r0
 801b574:	2b00      	cmp	r3, #0
 801b576:	d016      	beq.n	801b5a6 <json_serialize_to_buffer_r+0x54a>
                APPEND_STRING("true");
 801b578:	4927      	ldr	r1, [pc, #156]	; (801b618 <json_serialize_to_buffer_r+0x5bc>)
 801b57a:	68b8      	ldr	r0, [r7, #8]
 801b57c:	f000 fd4a 	bl	801c014 <append_string>
 801b580:	6178      	str	r0, [r7, #20]
 801b582:	697b      	ldr	r3, [r7, #20]
 801b584:	2b00      	cmp	r3, #0
 801b586:	da02      	bge.n	801b58e <json_serialize_to_buffer_r+0x532>
 801b588:	f04f 33ff 	mov.w	r3, #4294967295
 801b58c:	e074      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b58e:	68bb      	ldr	r3, [r7, #8]
 801b590:	2b00      	cmp	r3, #0
 801b592:	d003      	beq.n	801b59c <json_serialize_to_buffer_r+0x540>
 801b594:	697b      	ldr	r3, [r7, #20]
 801b596:	68ba      	ldr	r2, [r7, #8]
 801b598:	4413      	add	r3, r2
 801b59a:	60bb      	str	r3, [r7, #8]
 801b59c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b59e:	697b      	ldr	r3, [r7, #20]
 801b5a0:	4413      	add	r3, r2
 801b5a2:	63bb      	str	r3, [r7, #56]	; 0x38
 801b5a4:	e015      	b.n	801b5d2 <json_serialize_to_buffer_r+0x576>
            } else {
                APPEND_STRING("false");
 801b5a6:	491d      	ldr	r1, [pc, #116]	; (801b61c <json_serialize_to_buffer_r+0x5c0>)
 801b5a8:	68b8      	ldr	r0, [r7, #8]
 801b5aa:	f000 fd33 	bl	801c014 <append_string>
 801b5ae:	6178      	str	r0, [r7, #20]
 801b5b0:	697b      	ldr	r3, [r7, #20]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	da02      	bge.n	801b5bc <json_serialize_to_buffer_r+0x560>
 801b5b6:	f04f 33ff 	mov.w	r3, #4294967295
 801b5ba:	e05d      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b5bc:	68bb      	ldr	r3, [r7, #8]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d003      	beq.n	801b5ca <json_serialize_to_buffer_r+0x56e>
 801b5c2:	697b      	ldr	r3, [r7, #20]
 801b5c4:	68ba      	ldr	r2, [r7, #8]
 801b5c6:	4413      	add	r3, r2
 801b5c8:	60bb      	str	r3, [r7, #8]
 801b5ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b5cc:	697b      	ldr	r3, [r7, #20]
 801b5ce:	4413      	add	r3, r2
 801b5d0:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            return written_total;
 801b5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5d4:	e050      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
        case JSONNumber:
            num = json_value_get_number(value);
 801b5d6:	68f8      	ldr	r0, [r7, #12]
 801b5d8:	f000 feb9 	bl	801c34e <json_value_get_number>
 801b5dc:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 801b5e0:	68bb      	ldr	r3, [r7, #8]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d001      	beq.n	801b5ea <json_serialize_to_buffer_r+0x58e>
                num_buf = buf;
 801b5e6:	68bb      	ldr	r3, [r7, #8]
 801b5e8:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 801b5ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b5ee:	490c      	ldr	r1, [pc, #48]	; (801b620 <json_serialize_to_buffer_r+0x5c4>)
 801b5f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801b5f2:	f002 fb8b 	bl	801dd0c <siprintf>
 801b5f6:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801b5f8:	697b      	ldr	r3, [r7, #20]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	da12      	bge.n	801b624 <json_serialize_to_buffer_r+0x5c8>
                return -1;
 801b5fe:	f04f 33ff 	mov.w	r3, #4294967295
 801b602:	e039      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b604:	080218e4 	.word	0x080218e4
 801b608:	080218e8 	.word	0x080218e8
 801b60c:	080218d8 	.word	0x080218d8
 801b610:	080218d4 	.word	0x080218d4
 801b614:	080218ec 	.word	0x080218ec
 801b618:	080218b8 	.word	0x080218b8
 801b61c:	080218c0 	.word	0x080218c0
 801b620:	080218f0 	.word	0x080218f0
            }
            if (buf != NULL) {
 801b624:	68bb      	ldr	r3, [r7, #8]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d003      	beq.n	801b632 <json_serialize_to_buffer_r+0x5d6>
                buf += written;
 801b62a:	697b      	ldr	r3, [r7, #20]
 801b62c:	68ba      	ldr	r2, [r7, #8]
 801b62e:	4413      	add	r3, r2
 801b630:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801b632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b634:	697b      	ldr	r3, [r7, #20]
 801b636:	4413      	add	r3, r2
 801b638:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b63c:	e01c      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
        case JSONNull:
            APPEND_STRING("null");
 801b63e:	4910      	ldr	r1, [pc, #64]	; (801b680 <json_serialize_to_buffer_r+0x624>)
 801b640:	68b8      	ldr	r0, [r7, #8]
 801b642:	f000 fce7 	bl	801c014 <append_string>
 801b646:	6178      	str	r0, [r7, #20]
 801b648:	697b      	ldr	r3, [r7, #20]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	da02      	bge.n	801b654 <json_serialize_to_buffer_r+0x5f8>
 801b64e:	f04f 33ff 	mov.w	r3, #4294967295
 801b652:	e011      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
 801b654:	68bb      	ldr	r3, [r7, #8]
 801b656:	2b00      	cmp	r3, #0
 801b658:	d003      	beq.n	801b662 <json_serialize_to_buffer_r+0x606>
 801b65a:	697b      	ldr	r3, [r7, #20]
 801b65c:	68ba      	ldr	r2, [r7, #8]
 801b65e:	4413      	add	r3, r2
 801b660:	60bb      	str	r3, [r7, #8]
 801b662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b664:	697b      	ldr	r3, [r7, #20]
 801b666:	4413      	add	r3, r2
 801b668:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801b66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b66c:	e004      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
        case JSONError:
            return -1;
 801b66e:	f04f 33ff 	mov.w	r3, #4294967295
 801b672:	e001      	b.n	801b678 <json_serialize_to_buffer_r+0x61c>
        default:
            return -1;
 801b674:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801b678:	4618      	mov	r0, r3
 801b67a:	3740      	adds	r7, #64	; 0x40
 801b67c:	46bd      	mov	sp, r7
 801b67e:	bd80      	pop	{r7, pc}
 801b680:	080218c8 	.word	0x080218c8

0801b684 <json_serialize_string>:

static int json_serialize_string(const char *string, char *buf) {
 801b684:	b580      	push	{r7, lr}
 801b686:	b088      	sub	sp, #32
 801b688:	af00      	add	r7, sp, #0
 801b68a:	6078      	str	r0, [r7, #4]
 801b68c:	6039      	str	r1, [r7, #0]
    size_t i = 0, len = strlen(string);
 801b68e:	2300      	movs	r3, #0
 801b690:	61fb      	str	r3, [r7, #28]
 801b692:	6878      	ldr	r0, [r7, #4]
 801b694:	f7e4 fdbe 	bl	8000214 <strlen>
 801b698:	6178      	str	r0, [r7, #20]
    char c = '\0';
 801b69a:	2300      	movs	r3, #0
 801b69c:	74fb      	strb	r3, [r7, #19]
    int written = -1, written_total = 0;
 801b69e:	f04f 33ff 	mov.w	r3, #4294967295
 801b6a2:	60fb      	str	r3, [r7, #12]
 801b6a4:	2300      	movs	r3, #0
 801b6a6:	61bb      	str	r3, [r7, #24]
    APPEND_STRING("\"");
 801b6a8:	49bb      	ldr	r1, [pc, #748]	; (801b998 <json_serialize_string+0x314>)
 801b6aa:	6838      	ldr	r0, [r7, #0]
 801b6ac:	f000 fcb2 	bl	801c014 <append_string>
 801b6b0:	60f8      	str	r0, [r7, #12]
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	da03      	bge.n	801b6c0 <json_serialize_string+0x3c>
 801b6b8:	f04f 33ff 	mov.w	r3, #4294967295
 801b6bc:	f000 bc6e 	b.w	801bf9c <json_serialize_string+0x918>
 801b6c0:	683b      	ldr	r3, [r7, #0]
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d003      	beq.n	801b6ce <json_serialize_string+0x4a>
 801b6c6:	68fb      	ldr	r3, [r7, #12]
 801b6c8:	683a      	ldr	r2, [r7, #0]
 801b6ca:	4413      	add	r3, r2
 801b6cc:	603b      	str	r3, [r7, #0]
 801b6ce:	69ba      	ldr	r2, [r7, #24]
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	4413      	add	r3, r2
 801b6d4:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 801b6d6:	2300      	movs	r3, #0
 801b6d8:	61fb      	str	r3, [r7, #28]
 801b6da:	f000 bc43 	b.w	801bf64 <json_serialize_string+0x8e0>
        c = string[i];
 801b6de:	687a      	ldr	r2, [r7, #4]
 801b6e0:	69fb      	ldr	r3, [r7, #28]
 801b6e2:	4413      	add	r3, r2
 801b6e4:	781b      	ldrb	r3, [r3, #0]
 801b6e6:	74fb      	strb	r3, [r7, #19]
        switch (c) {
 801b6e8:	7cfb      	ldrb	r3, [r7, #19]
 801b6ea:	2b5c      	cmp	r3, #92	; 0x5c
 801b6ec:	f200 842a 	bhi.w	801bf44 <json_serialize_string+0x8c0>
 801b6f0:	a201      	add	r2, pc, #4	; (adr r2, 801b6f8 <json_serialize_string+0x74>)
 801b6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b6f6:	bf00      	nop
 801b6f8:	0801b9ff 	.word	0x0801b9ff
 801b6fc:	0801ba2d 	.word	0x0801ba2d
 801b700:	0801ba5b 	.word	0x0801ba5b
 801b704:	0801ba89 	.word	0x0801ba89
 801b708:	0801bab7 	.word	0x0801bab7
 801b70c:	0801bae5 	.word	0x0801bae5
 801b710:	0801bb13 	.word	0x0801bb13
 801b714:	0801bb41 	.word	0x0801bb41
 801b718:	0801b8f7 	.word	0x0801b8f7
 801b71c:	0801b9d1 	.word	0x0801b9d1
 801b720:	0801b953 	.word	0x0801b953
 801b724:	0801bb6f 	.word	0x0801bb6f
 801b728:	0801b925 	.word	0x0801b925
 801b72c:	0801b981 	.word	0x0801b981
 801b730:	0801bb9d 	.word	0x0801bb9d
 801b734:	0801bbcb 	.word	0x0801bbcb
 801b738:	0801bbf9 	.word	0x0801bbf9
 801b73c:	0801bc5d 	.word	0x0801bc5d
 801b740:	0801bc8b 	.word	0x0801bc8b
 801b744:	0801bcb9 	.word	0x0801bcb9
 801b748:	0801bce7 	.word	0x0801bce7
 801b74c:	0801bd15 	.word	0x0801bd15
 801b750:	0801bd43 	.word	0x0801bd43
 801b754:	0801bd71 	.word	0x0801bd71
 801b758:	0801bd9f 	.word	0x0801bd9f
 801b75c:	0801bdcd 	.word	0x0801bdcd
 801b760:	0801bdfb 	.word	0x0801bdfb
 801b764:	0801be29 	.word	0x0801be29
 801b768:	0801be57 	.word	0x0801be57
 801b76c:	0801be85 	.word	0x0801be85
 801b770:	0801bee9 	.word	0x0801bee9
 801b774:	0801bf17 	.word	0x0801bf17
 801b778:	0801bf45 	.word	0x0801bf45
 801b77c:	0801bf45 	.word	0x0801bf45
 801b780:	0801b86d 	.word	0x0801b86d
 801b784:	0801bf45 	.word	0x0801bf45
 801b788:	0801bf45 	.word	0x0801bf45
 801b78c:	0801bf45 	.word	0x0801bf45
 801b790:	0801bf45 	.word	0x0801bf45
 801b794:	0801bf45 	.word	0x0801bf45
 801b798:	0801bf45 	.word	0x0801bf45
 801b79c:	0801bf45 	.word	0x0801bf45
 801b7a0:	0801bf45 	.word	0x0801bf45
 801b7a4:	0801bf45 	.word	0x0801bf45
 801b7a8:	0801bf45 	.word	0x0801bf45
 801b7ac:	0801bf45 	.word	0x0801bf45
 801b7b0:	0801bf45 	.word	0x0801bf45
 801b7b4:	0801b8c9 	.word	0x0801b8c9
 801b7b8:	0801bf45 	.word	0x0801bf45
 801b7bc:	0801bf45 	.word	0x0801bf45
 801b7c0:	0801bf45 	.word	0x0801bf45
 801b7c4:	0801bf45 	.word	0x0801bf45
 801b7c8:	0801bf45 	.word	0x0801bf45
 801b7cc:	0801bf45 	.word	0x0801bf45
 801b7d0:	0801bf45 	.word	0x0801bf45
 801b7d4:	0801bf45 	.word	0x0801bf45
 801b7d8:	0801bf45 	.word	0x0801bf45
 801b7dc:	0801bf45 	.word	0x0801bf45
 801b7e0:	0801bf45 	.word	0x0801bf45
 801b7e4:	0801bf45 	.word	0x0801bf45
 801b7e8:	0801bf45 	.word	0x0801bf45
 801b7ec:	0801bf45 	.word	0x0801bf45
 801b7f0:	0801bf45 	.word	0x0801bf45
 801b7f4:	0801bf45 	.word	0x0801bf45
 801b7f8:	0801bf45 	.word	0x0801bf45
 801b7fc:	0801bf45 	.word	0x0801bf45
 801b800:	0801bf45 	.word	0x0801bf45
 801b804:	0801bf45 	.word	0x0801bf45
 801b808:	0801bf45 	.word	0x0801bf45
 801b80c:	0801bf45 	.word	0x0801bf45
 801b810:	0801bf45 	.word	0x0801bf45
 801b814:	0801bf45 	.word	0x0801bf45
 801b818:	0801bf45 	.word	0x0801bf45
 801b81c:	0801bf45 	.word	0x0801bf45
 801b820:	0801bf45 	.word	0x0801bf45
 801b824:	0801bf45 	.word	0x0801bf45
 801b828:	0801bf45 	.word	0x0801bf45
 801b82c:	0801bf45 	.word	0x0801bf45
 801b830:	0801bf45 	.word	0x0801bf45
 801b834:	0801bf45 	.word	0x0801bf45
 801b838:	0801bf45 	.word	0x0801bf45
 801b83c:	0801bf45 	.word	0x0801bf45
 801b840:	0801bf45 	.word	0x0801bf45
 801b844:	0801bf45 	.word	0x0801bf45
 801b848:	0801bf45 	.word	0x0801bf45
 801b84c:	0801bf45 	.word	0x0801bf45
 801b850:	0801bf45 	.word	0x0801bf45
 801b854:	0801bf45 	.word	0x0801bf45
 801b858:	0801bf45 	.word	0x0801bf45
 801b85c:	0801bf45 	.word	0x0801bf45
 801b860:	0801bf45 	.word	0x0801bf45
 801b864:	0801bf45 	.word	0x0801bf45
 801b868:	0801b89b 	.word	0x0801b89b
            case '\"': APPEND_STRING("\\\""); break;
 801b86c:	494b      	ldr	r1, [pc, #300]	; (801b99c <json_serialize_string+0x318>)
 801b86e:	6838      	ldr	r0, [r7, #0]
 801b870:	f000 fbd0 	bl	801c014 <append_string>
 801b874:	60f8      	str	r0, [r7, #12]
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	da02      	bge.n	801b882 <json_serialize_string+0x1fe>
 801b87c:	f04f 33ff 	mov.w	r3, #4294967295
 801b880:	e38c      	b.n	801bf9c <json_serialize_string+0x918>
 801b882:	683b      	ldr	r3, [r7, #0]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d003      	beq.n	801b890 <json_serialize_string+0x20c>
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	683a      	ldr	r2, [r7, #0]
 801b88c:	4413      	add	r3, r2
 801b88e:	603b      	str	r3, [r7, #0]
 801b890:	69ba      	ldr	r2, [r7, #24]
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	4413      	add	r3, r2
 801b896:	61bb      	str	r3, [r7, #24]
 801b898:	e361      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\\': APPEND_STRING("\\\\"); break;
 801b89a:	4941      	ldr	r1, [pc, #260]	; (801b9a0 <json_serialize_string+0x31c>)
 801b89c:	6838      	ldr	r0, [r7, #0]
 801b89e:	f000 fbb9 	bl	801c014 <append_string>
 801b8a2:	60f8      	str	r0, [r7, #12]
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	da02      	bge.n	801b8b0 <json_serialize_string+0x22c>
 801b8aa:	f04f 33ff 	mov.w	r3, #4294967295
 801b8ae:	e375      	b.n	801bf9c <json_serialize_string+0x918>
 801b8b0:	683b      	ldr	r3, [r7, #0]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d003      	beq.n	801b8be <json_serialize_string+0x23a>
 801b8b6:	68fb      	ldr	r3, [r7, #12]
 801b8b8:	683a      	ldr	r2, [r7, #0]
 801b8ba:	4413      	add	r3, r2
 801b8bc:	603b      	str	r3, [r7, #0]
 801b8be:	69ba      	ldr	r2, [r7, #24]
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	4413      	add	r3, r2
 801b8c4:	61bb      	str	r3, [r7, #24]
 801b8c6:	e34a      	b.n	801bf5e <json_serialize_string+0x8da>
            case '/':  APPEND_STRING("\\/"); break; /* to make json embeddable in xml\/html */
 801b8c8:	4936      	ldr	r1, [pc, #216]	; (801b9a4 <json_serialize_string+0x320>)
 801b8ca:	6838      	ldr	r0, [r7, #0]
 801b8cc:	f000 fba2 	bl	801c014 <append_string>
 801b8d0:	60f8      	str	r0, [r7, #12]
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	da02      	bge.n	801b8de <json_serialize_string+0x25a>
 801b8d8:	f04f 33ff 	mov.w	r3, #4294967295
 801b8dc:	e35e      	b.n	801bf9c <json_serialize_string+0x918>
 801b8de:	683b      	ldr	r3, [r7, #0]
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d003      	beq.n	801b8ec <json_serialize_string+0x268>
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	683a      	ldr	r2, [r7, #0]
 801b8e8:	4413      	add	r3, r2
 801b8ea:	603b      	str	r3, [r7, #0]
 801b8ec:	69ba      	ldr	r2, [r7, #24]
 801b8ee:	68fb      	ldr	r3, [r7, #12]
 801b8f0:	4413      	add	r3, r2
 801b8f2:	61bb      	str	r3, [r7, #24]
 801b8f4:	e333      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\b': APPEND_STRING("\\b"); break;
 801b8f6:	492c      	ldr	r1, [pc, #176]	; (801b9a8 <json_serialize_string+0x324>)
 801b8f8:	6838      	ldr	r0, [r7, #0]
 801b8fa:	f000 fb8b 	bl	801c014 <append_string>
 801b8fe:	60f8      	str	r0, [r7, #12]
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	2b00      	cmp	r3, #0
 801b904:	da02      	bge.n	801b90c <json_serialize_string+0x288>
 801b906:	f04f 33ff 	mov.w	r3, #4294967295
 801b90a:	e347      	b.n	801bf9c <json_serialize_string+0x918>
 801b90c:	683b      	ldr	r3, [r7, #0]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d003      	beq.n	801b91a <json_serialize_string+0x296>
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	683a      	ldr	r2, [r7, #0]
 801b916:	4413      	add	r3, r2
 801b918:	603b      	str	r3, [r7, #0]
 801b91a:	69ba      	ldr	r2, [r7, #24]
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	4413      	add	r3, r2
 801b920:	61bb      	str	r3, [r7, #24]
 801b922:	e31c      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\f': APPEND_STRING("\\f"); break;
 801b924:	4921      	ldr	r1, [pc, #132]	; (801b9ac <json_serialize_string+0x328>)
 801b926:	6838      	ldr	r0, [r7, #0]
 801b928:	f000 fb74 	bl	801c014 <append_string>
 801b92c:	60f8      	str	r0, [r7, #12]
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	2b00      	cmp	r3, #0
 801b932:	da02      	bge.n	801b93a <json_serialize_string+0x2b6>
 801b934:	f04f 33ff 	mov.w	r3, #4294967295
 801b938:	e330      	b.n	801bf9c <json_serialize_string+0x918>
 801b93a:	683b      	ldr	r3, [r7, #0]
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d003      	beq.n	801b948 <json_serialize_string+0x2c4>
 801b940:	68fb      	ldr	r3, [r7, #12]
 801b942:	683a      	ldr	r2, [r7, #0]
 801b944:	4413      	add	r3, r2
 801b946:	603b      	str	r3, [r7, #0]
 801b948:	69ba      	ldr	r2, [r7, #24]
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	4413      	add	r3, r2
 801b94e:	61bb      	str	r3, [r7, #24]
 801b950:	e305      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\n': APPEND_STRING("\\n"); break;
 801b952:	4917      	ldr	r1, [pc, #92]	; (801b9b0 <json_serialize_string+0x32c>)
 801b954:	6838      	ldr	r0, [r7, #0]
 801b956:	f000 fb5d 	bl	801c014 <append_string>
 801b95a:	60f8      	str	r0, [r7, #12]
 801b95c:	68fb      	ldr	r3, [r7, #12]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	da02      	bge.n	801b968 <json_serialize_string+0x2e4>
 801b962:	f04f 33ff 	mov.w	r3, #4294967295
 801b966:	e319      	b.n	801bf9c <json_serialize_string+0x918>
 801b968:	683b      	ldr	r3, [r7, #0]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d003      	beq.n	801b976 <json_serialize_string+0x2f2>
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	683a      	ldr	r2, [r7, #0]
 801b972:	4413      	add	r3, r2
 801b974:	603b      	str	r3, [r7, #0]
 801b976:	69ba      	ldr	r2, [r7, #24]
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	4413      	add	r3, r2
 801b97c:	61bb      	str	r3, [r7, #24]
 801b97e:	e2ee      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\r': APPEND_STRING("\\r"); break;
 801b980:	490c      	ldr	r1, [pc, #48]	; (801b9b4 <json_serialize_string+0x330>)
 801b982:	6838      	ldr	r0, [r7, #0]
 801b984:	f000 fb46 	bl	801c014 <append_string>
 801b988:	60f8      	str	r0, [r7, #12]
 801b98a:	68fb      	ldr	r3, [r7, #12]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	da13      	bge.n	801b9b8 <json_serialize_string+0x334>
 801b990:	f04f 33ff 	mov.w	r3, #4294967295
 801b994:	e302      	b.n	801bf9c <json_serialize_string+0x918>
 801b996:	bf00      	nop
 801b998:	080218f8 	.word	0x080218f8
 801b99c:	080218fc 	.word	0x080218fc
 801b9a0:	08021900 	.word	0x08021900
 801b9a4:	08021904 	.word	0x08021904
 801b9a8:	08021908 	.word	0x08021908
 801b9ac:	0802190c 	.word	0x0802190c
 801b9b0:	08021910 	.word	0x08021910
 801b9b4:	08021914 	.word	0x08021914
 801b9b8:	683b      	ldr	r3, [r7, #0]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d003      	beq.n	801b9c6 <json_serialize_string+0x342>
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	683a      	ldr	r2, [r7, #0]
 801b9c2:	4413      	add	r3, r2
 801b9c4:	603b      	str	r3, [r7, #0]
 801b9c6:	69ba      	ldr	r2, [r7, #24]
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	4413      	add	r3, r2
 801b9cc:	61bb      	str	r3, [r7, #24]
 801b9ce:	e2c6      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\t': APPEND_STRING("\\t"); break;
 801b9d0:	4995      	ldr	r1, [pc, #596]	; (801bc28 <json_serialize_string+0x5a4>)
 801b9d2:	6838      	ldr	r0, [r7, #0]
 801b9d4:	f000 fb1e 	bl	801c014 <append_string>
 801b9d8:	60f8      	str	r0, [r7, #12]
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	da02      	bge.n	801b9e6 <json_serialize_string+0x362>
 801b9e0:	f04f 33ff 	mov.w	r3, #4294967295
 801b9e4:	e2da      	b.n	801bf9c <json_serialize_string+0x918>
 801b9e6:	683b      	ldr	r3, [r7, #0]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d003      	beq.n	801b9f4 <json_serialize_string+0x370>
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	683a      	ldr	r2, [r7, #0]
 801b9f0:	4413      	add	r3, r2
 801b9f2:	603b      	str	r3, [r7, #0]
 801b9f4:	69ba      	ldr	r2, [r7, #24]
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	4413      	add	r3, r2
 801b9fa:	61bb      	str	r3, [r7, #24]
 801b9fc:	e2af      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x00': APPEND_STRING("\\u0000"); break;
 801b9fe:	498b      	ldr	r1, [pc, #556]	; (801bc2c <json_serialize_string+0x5a8>)
 801ba00:	6838      	ldr	r0, [r7, #0]
 801ba02:	f000 fb07 	bl	801c014 <append_string>
 801ba06:	60f8      	str	r0, [r7, #12]
 801ba08:	68fb      	ldr	r3, [r7, #12]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	da02      	bge.n	801ba14 <json_serialize_string+0x390>
 801ba0e:	f04f 33ff 	mov.w	r3, #4294967295
 801ba12:	e2c3      	b.n	801bf9c <json_serialize_string+0x918>
 801ba14:	683b      	ldr	r3, [r7, #0]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d003      	beq.n	801ba22 <json_serialize_string+0x39e>
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	683a      	ldr	r2, [r7, #0]
 801ba1e:	4413      	add	r3, r2
 801ba20:	603b      	str	r3, [r7, #0]
 801ba22:	69ba      	ldr	r2, [r7, #24]
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	4413      	add	r3, r2
 801ba28:	61bb      	str	r3, [r7, #24]
 801ba2a:	e298      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x01': APPEND_STRING("\\u0001"); break;
 801ba2c:	4980      	ldr	r1, [pc, #512]	; (801bc30 <json_serialize_string+0x5ac>)
 801ba2e:	6838      	ldr	r0, [r7, #0]
 801ba30:	f000 faf0 	bl	801c014 <append_string>
 801ba34:	60f8      	str	r0, [r7, #12]
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	da02      	bge.n	801ba42 <json_serialize_string+0x3be>
 801ba3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ba40:	e2ac      	b.n	801bf9c <json_serialize_string+0x918>
 801ba42:	683b      	ldr	r3, [r7, #0]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d003      	beq.n	801ba50 <json_serialize_string+0x3cc>
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	683a      	ldr	r2, [r7, #0]
 801ba4c:	4413      	add	r3, r2
 801ba4e:	603b      	str	r3, [r7, #0]
 801ba50:	69ba      	ldr	r2, [r7, #24]
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	4413      	add	r3, r2
 801ba56:	61bb      	str	r3, [r7, #24]
 801ba58:	e281      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x02': APPEND_STRING("\\u0002"); break;
 801ba5a:	4976      	ldr	r1, [pc, #472]	; (801bc34 <json_serialize_string+0x5b0>)
 801ba5c:	6838      	ldr	r0, [r7, #0]
 801ba5e:	f000 fad9 	bl	801c014 <append_string>
 801ba62:	60f8      	str	r0, [r7, #12]
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	da02      	bge.n	801ba70 <json_serialize_string+0x3ec>
 801ba6a:	f04f 33ff 	mov.w	r3, #4294967295
 801ba6e:	e295      	b.n	801bf9c <json_serialize_string+0x918>
 801ba70:	683b      	ldr	r3, [r7, #0]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d003      	beq.n	801ba7e <json_serialize_string+0x3fa>
 801ba76:	68fb      	ldr	r3, [r7, #12]
 801ba78:	683a      	ldr	r2, [r7, #0]
 801ba7a:	4413      	add	r3, r2
 801ba7c:	603b      	str	r3, [r7, #0]
 801ba7e:	69ba      	ldr	r2, [r7, #24]
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	4413      	add	r3, r2
 801ba84:	61bb      	str	r3, [r7, #24]
 801ba86:	e26a      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x03': APPEND_STRING("\\u0003"); break;
 801ba88:	496b      	ldr	r1, [pc, #428]	; (801bc38 <json_serialize_string+0x5b4>)
 801ba8a:	6838      	ldr	r0, [r7, #0]
 801ba8c:	f000 fac2 	bl	801c014 <append_string>
 801ba90:	60f8      	str	r0, [r7, #12]
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	da02      	bge.n	801ba9e <json_serialize_string+0x41a>
 801ba98:	f04f 33ff 	mov.w	r3, #4294967295
 801ba9c:	e27e      	b.n	801bf9c <json_serialize_string+0x918>
 801ba9e:	683b      	ldr	r3, [r7, #0]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d003      	beq.n	801baac <json_serialize_string+0x428>
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	683a      	ldr	r2, [r7, #0]
 801baa8:	4413      	add	r3, r2
 801baaa:	603b      	str	r3, [r7, #0]
 801baac:	69ba      	ldr	r2, [r7, #24]
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	4413      	add	r3, r2
 801bab2:	61bb      	str	r3, [r7, #24]
 801bab4:	e253      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x04': APPEND_STRING("\\u0004"); break;
 801bab6:	4961      	ldr	r1, [pc, #388]	; (801bc3c <json_serialize_string+0x5b8>)
 801bab8:	6838      	ldr	r0, [r7, #0]
 801baba:	f000 faab 	bl	801c014 <append_string>
 801babe:	60f8      	str	r0, [r7, #12]
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	da02      	bge.n	801bacc <json_serialize_string+0x448>
 801bac6:	f04f 33ff 	mov.w	r3, #4294967295
 801baca:	e267      	b.n	801bf9c <json_serialize_string+0x918>
 801bacc:	683b      	ldr	r3, [r7, #0]
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d003      	beq.n	801bada <json_serialize_string+0x456>
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	683a      	ldr	r2, [r7, #0]
 801bad6:	4413      	add	r3, r2
 801bad8:	603b      	str	r3, [r7, #0]
 801bada:	69ba      	ldr	r2, [r7, #24]
 801badc:	68fb      	ldr	r3, [r7, #12]
 801bade:	4413      	add	r3, r2
 801bae0:	61bb      	str	r3, [r7, #24]
 801bae2:	e23c      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x05': APPEND_STRING("\\u0005"); break;
 801bae4:	4956      	ldr	r1, [pc, #344]	; (801bc40 <json_serialize_string+0x5bc>)
 801bae6:	6838      	ldr	r0, [r7, #0]
 801bae8:	f000 fa94 	bl	801c014 <append_string>
 801baec:	60f8      	str	r0, [r7, #12]
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	da02      	bge.n	801bafa <json_serialize_string+0x476>
 801baf4:	f04f 33ff 	mov.w	r3, #4294967295
 801baf8:	e250      	b.n	801bf9c <json_serialize_string+0x918>
 801bafa:	683b      	ldr	r3, [r7, #0]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d003      	beq.n	801bb08 <json_serialize_string+0x484>
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	683a      	ldr	r2, [r7, #0]
 801bb04:	4413      	add	r3, r2
 801bb06:	603b      	str	r3, [r7, #0]
 801bb08:	69ba      	ldr	r2, [r7, #24]
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	4413      	add	r3, r2
 801bb0e:	61bb      	str	r3, [r7, #24]
 801bb10:	e225      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x06': APPEND_STRING("\\u0006"); break;
 801bb12:	494c      	ldr	r1, [pc, #304]	; (801bc44 <json_serialize_string+0x5c0>)
 801bb14:	6838      	ldr	r0, [r7, #0]
 801bb16:	f000 fa7d 	bl	801c014 <append_string>
 801bb1a:	60f8      	str	r0, [r7, #12]
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	da02      	bge.n	801bb28 <json_serialize_string+0x4a4>
 801bb22:	f04f 33ff 	mov.w	r3, #4294967295
 801bb26:	e239      	b.n	801bf9c <json_serialize_string+0x918>
 801bb28:	683b      	ldr	r3, [r7, #0]
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d003      	beq.n	801bb36 <json_serialize_string+0x4b2>
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	683a      	ldr	r2, [r7, #0]
 801bb32:	4413      	add	r3, r2
 801bb34:	603b      	str	r3, [r7, #0]
 801bb36:	69ba      	ldr	r2, [r7, #24]
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	4413      	add	r3, r2
 801bb3c:	61bb      	str	r3, [r7, #24]
 801bb3e:	e20e      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x07': APPEND_STRING("\\u0007"); break;
 801bb40:	4941      	ldr	r1, [pc, #260]	; (801bc48 <json_serialize_string+0x5c4>)
 801bb42:	6838      	ldr	r0, [r7, #0]
 801bb44:	f000 fa66 	bl	801c014 <append_string>
 801bb48:	60f8      	str	r0, [r7, #12]
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	da02      	bge.n	801bb56 <json_serialize_string+0x4d2>
 801bb50:	f04f 33ff 	mov.w	r3, #4294967295
 801bb54:	e222      	b.n	801bf9c <json_serialize_string+0x918>
 801bb56:	683b      	ldr	r3, [r7, #0]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d003      	beq.n	801bb64 <json_serialize_string+0x4e0>
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	683a      	ldr	r2, [r7, #0]
 801bb60:	4413      	add	r3, r2
 801bb62:	603b      	str	r3, [r7, #0]
 801bb64:	69ba      	ldr	r2, [r7, #24]
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	4413      	add	r3, r2
 801bb6a:	61bb      	str	r3, [r7, #24]
 801bb6c:	e1f7      	b.n	801bf5e <json_serialize_string+0x8da>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 801bb6e:	4937      	ldr	r1, [pc, #220]	; (801bc4c <json_serialize_string+0x5c8>)
 801bb70:	6838      	ldr	r0, [r7, #0]
 801bb72:	f000 fa4f 	bl	801c014 <append_string>
 801bb76:	60f8      	str	r0, [r7, #12]
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	da02      	bge.n	801bb84 <json_serialize_string+0x500>
 801bb7e:	f04f 33ff 	mov.w	r3, #4294967295
 801bb82:	e20b      	b.n	801bf9c <json_serialize_string+0x918>
 801bb84:	683b      	ldr	r3, [r7, #0]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d003      	beq.n	801bb92 <json_serialize_string+0x50e>
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	683a      	ldr	r2, [r7, #0]
 801bb8e:	4413      	add	r3, r2
 801bb90:	603b      	str	r3, [r7, #0]
 801bb92:	69ba      	ldr	r2, [r7, #24]
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	4413      	add	r3, r2
 801bb98:	61bb      	str	r3, [r7, #24]
 801bb9a:	e1e0      	b.n	801bf5e <json_serialize_string+0x8da>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 801bb9c:	492c      	ldr	r1, [pc, #176]	; (801bc50 <json_serialize_string+0x5cc>)
 801bb9e:	6838      	ldr	r0, [r7, #0]
 801bba0:	f000 fa38 	bl	801c014 <append_string>
 801bba4:	60f8      	str	r0, [r7, #12]
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	da02      	bge.n	801bbb2 <json_serialize_string+0x52e>
 801bbac:	f04f 33ff 	mov.w	r3, #4294967295
 801bbb0:	e1f4      	b.n	801bf9c <json_serialize_string+0x918>
 801bbb2:	683b      	ldr	r3, [r7, #0]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d003      	beq.n	801bbc0 <json_serialize_string+0x53c>
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	683a      	ldr	r2, [r7, #0]
 801bbbc:	4413      	add	r3, r2
 801bbbe:	603b      	str	r3, [r7, #0]
 801bbc0:	69ba      	ldr	r2, [r7, #24]
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	4413      	add	r3, r2
 801bbc6:	61bb      	str	r3, [r7, #24]
 801bbc8:	e1c9      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 801bbca:	4922      	ldr	r1, [pc, #136]	; (801bc54 <json_serialize_string+0x5d0>)
 801bbcc:	6838      	ldr	r0, [r7, #0]
 801bbce:	f000 fa21 	bl	801c014 <append_string>
 801bbd2:	60f8      	str	r0, [r7, #12]
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	da02      	bge.n	801bbe0 <json_serialize_string+0x55c>
 801bbda:	f04f 33ff 	mov.w	r3, #4294967295
 801bbde:	e1dd      	b.n	801bf9c <json_serialize_string+0x918>
 801bbe0:	683b      	ldr	r3, [r7, #0]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d003      	beq.n	801bbee <json_serialize_string+0x56a>
 801bbe6:	68fb      	ldr	r3, [r7, #12]
 801bbe8:	683a      	ldr	r2, [r7, #0]
 801bbea:	4413      	add	r3, r2
 801bbec:	603b      	str	r3, [r7, #0]
 801bbee:	69ba      	ldr	r2, [r7, #24]
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	4413      	add	r3, r2
 801bbf4:	61bb      	str	r3, [r7, #24]
 801bbf6:	e1b2      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x10': APPEND_STRING("\\u0010"); break;
 801bbf8:	4917      	ldr	r1, [pc, #92]	; (801bc58 <json_serialize_string+0x5d4>)
 801bbfa:	6838      	ldr	r0, [r7, #0]
 801bbfc:	f000 fa0a 	bl	801c014 <append_string>
 801bc00:	60f8      	str	r0, [r7, #12]
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	da02      	bge.n	801bc0e <json_serialize_string+0x58a>
 801bc08:	f04f 33ff 	mov.w	r3, #4294967295
 801bc0c:	e1c6      	b.n	801bf9c <json_serialize_string+0x918>
 801bc0e:	683b      	ldr	r3, [r7, #0]
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d003      	beq.n	801bc1c <json_serialize_string+0x598>
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	683a      	ldr	r2, [r7, #0]
 801bc18:	4413      	add	r3, r2
 801bc1a:	603b      	str	r3, [r7, #0]
 801bc1c:	69ba      	ldr	r2, [r7, #24]
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	4413      	add	r3, r2
 801bc22:	61bb      	str	r3, [r7, #24]
 801bc24:	e19b      	b.n	801bf5e <json_serialize_string+0x8da>
 801bc26:	bf00      	nop
 801bc28:	08021918 	.word	0x08021918
 801bc2c:	0802191c 	.word	0x0802191c
 801bc30:	08021924 	.word	0x08021924
 801bc34:	0802192c 	.word	0x0802192c
 801bc38:	08021934 	.word	0x08021934
 801bc3c:	0802193c 	.word	0x0802193c
 801bc40:	08021944 	.word	0x08021944
 801bc44:	0802194c 	.word	0x0802194c
 801bc48:	08021954 	.word	0x08021954
 801bc4c:	0802195c 	.word	0x0802195c
 801bc50:	08021964 	.word	0x08021964
 801bc54:	0802196c 	.word	0x0802196c
 801bc58:	08021974 	.word	0x08021974
            case '\x11': APPEND_STRING("\\u0011"); break;
 801bc5c:	4995      	ldr	r1, [pc, #596]	; (801beb4 <json_serialize_string+0x830>)
 801bc5e:	6838      	ldr	r0, [r7, #0]
 801bc60:	f000 f9d8 	bl	801c014 <append_string>
 801bc64:	60f8      	str	r0, [r7, #12]
 801bc66:	68fb      	ldr	r3, [r7, #12]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	da02      	bge.n	801bc72 <json_serialize_string+0x5ee>
 801bc6c:	f04f 33ff 	mov.w	r3, #4294967295
 801bc70:	e194      	b.n	801bf9c <json_serialize_string+0x918>
 801bc72:	683b      	ldr	r3, [r7, #0]
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d003      	beq.n	801bc80 <json_serialize_string+0x5fc>
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	683a      	ldr	r2, [r7, #0]
 801bc7c:	4413      	add	r3, r2
 801bc7e:	603b      	str	r3, [r7, #0]
 801bc80:	69ba      	ldr	r2, [r7, #24]
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	4413      	add	r3, r2
 801bc86:	61bb      	str	r3, [r7, #24]
 801bc88:	e169      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x12': APPEND_STRING("\\u0012"); break;
 801bc8a:	498b      	ldr	r1, [pc, #556]	; (801beb8 <json_serialize_string+0x834>)
 801bc8c:	6838      	ldr	r0, [r7, #0]
 801bc8e:	f000 f9c1 	bl	801c014 <append_string>
 801bc92:	60f8      	str	r0, [r7, #12]
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	da02      	bge.n	801bca0 <json_serialize_string+0x61c>
 801bc9a:	f04f 33ff 	mov.w	r3, #4294967295
 801bc9e:	e17d      	b.n	801bf9c <json_serialize_string+0x918>
 801bca0:	683b      	ldr	r3, [r7, #0]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d003      	beq.n	801bcae <json_serialize_string+0x62a>
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	683a      	ldr	r2, [r7, #0]
 801bcaa:	4413      	add	r3, r2
 801bcac:	603b      	str	r3, [r7, #0]
 801bcae:	69ba      	ldr	r2, [r7, #24]
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	4413      	add	r3, r2
 801bcb4:	61bb      	str	r3, [r7, #24]
 801bcb6:	e152      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x13': APPEND_STRING("\\u0013"); break;
 801bcb8:	4980      	ldr	r1, [pc, #512]	; (801bebc <json_serialize_string+0x838>)
 801bcba:	6838      	ldr	r0, [r7, #0]
 801bcbc:	f000 f9aa 	bl	801c014 <append_string>
 801bcc0:	60f8      	str	r0, [r7, #12]
 801bcc2:	68fb      	ldr	r3, [r7, #12]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	da02      	bge.n	801bcce <json_serialize_string+0x64a>
 801bcc8:	f04f 33ff 	mov.w	r3, #4294967295
 801bccc:	e166      	b.n	801bf9c <json_serialize_string+0x918>
 801bcce:	683b      	ldr	r3, [r7, #0]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d003      	beq.n	801bcdc <json_serialize_string+0x658>
 801bcd4:	68fb      	ldr	r3, [r7, #12]
 801bcd6:	683a      	ldr	r2, [r7, #0]
 801bcd8:	4413      	add	r3, r2
 801bcda:	603b      	str	r3, [r7, #0]
 801bcdc:	69ba      	ldr	r2, [r7, #24]
 801bcde:	68fb      	ldr	r3, [r7, #12]
 801bce0:	4413      	add	r3, r2
 801bce2:	61bb      	str	r3, [r7, #24]
 801bce4:	e13b      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x14': APPEND_STRING("\\u0014"); break;
 801bce6:	4976      	ldr	r1, [pc, #472]	; (801bec0 <json_serialize_string+0x83c>)
 801bce8:	6838      	ldr	r0, [r7, #0]
 801bcea:	f000 f993 	bl	801c014 <append_string>
 801bcee:	60f8      	str	r0, [r7, #12]
 801bcf0:	68fb      	ldr	r3, [r7, #12]
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	da02      	bge.n	801bcfc <json_serialize_string+0x678>
 801bcf6:	f04f 33ff 	mov.w	r3, #4294967295
 801bcfa:	e14f      	b.n	801bf9c <json_serialize_string+0x918>
 801bcfc:	683b      	ldr	r3, [r7, #0]
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d003      	beq.n	801bd0a <json_serialize_string+0x686>
 801bd02:	68fb      	ldr	r3, [r7, #12]
 801bd04:	683a      	ldr	r2, [r7, #0]
 801bd06:	4413      	add	r3, r2
 801bd08:	603b      	str	r3, [r7, #0]
 801bd0a:	69ba      	ldr	r2, [r7, #24]
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	4413      	add	r3, r2
 801bd10:	61bb      	str	r3, [r7, #24]
 801bd12:	e124      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x15': APPEND_STRING("\\u0015"); break;
 801bd14:	496b      	ldr	r1, [pc, #428]	; (801bec4 <json_serialize_string+0x840>)
 801bd16:	6838      	ldr	r0, [r7, #0]
 801bd18:	f000 f97c 	bl	801c014 <append_string>
 801bd1c:	60f8      	str	r0, [r7, #12]
 801bd1e:	68fb      	ldr	r3, [r7, #12]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	da02      	bge.n	801bd2a <json_serialize_string+0x6a6>
 801bd24:	f04f 33ff 	mov.w	r3, #4294967295
 801bd28:	e138      	b.n	801bf9c <json_serialize_string+0x918>
 801bd2a:	683b      	ldr	r3, [r7, #0]
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d003      	beq.n	801bd38 <json_serialize_string+0x6b4>
 801bd30:	68fb      	ldr	r3, [r7, #12]
 801bd32:	683a      	ldr	r2, [r7, #0]
 801bd34:	4413      	add	r3, r2
 801bd36:	603b      	str	r3, [r7, #0]
 801bd38:	69ba      	ldr	r2, [r7, #24]
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	4413      	add	r3, r2
 801bd3e:	61bb      	str	r3, [r7, #24]
 801bd40:	e10d      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x16': APPEND_STRING("\\u0016"); break;
 801bd42:	4961      	ldr	r1, [pc, #388]	; (801bec8 <json_serialize_string+0x844>)
 801bd44:	6838      	ldr	r0, [r7, #0]
 801bd46:	f000 f965 	bl	801c014 <append_string>
 801bd4a:	60f8      	str	r0, [r7, #12]
 801bd4c:	68fb      	ldr	r3, [r7, #12]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	da02      	bge.n	801bd58 <json_serialize_string+0x6d4>
 801bd52:	f04f 33ff 	mov.w	r3, #4294967295
 801bd56:	e121      	b.n	801bf9c <json_serialize_string+0x918>
 801bd58:	683b      	ldr	r3, [r7, #0]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d003      	beq.n	801bd66 <json_serialize_string+0x6e2>
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	683a      	ldr	r2, [r7, #0]
 801bd62:	4413      	add	r3, r2
 801bd64:	603b      	str	r3, [r7, #0]
 801bd66:	69ba      	ldr	r2, [r7, #24]
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	4413      	add	r3, r2
 801bd6c:	61bb      	str	r3, [r7, #24]
 801bd6e:	e0f6      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x17': APPEND_STRING("\\u0017"); break;
 801bd70:	4956      	ldr	r1, [pc, #344]	; (801becc <json_serialize_string+0x848>)
 801bd72:	6838      	ldr	r0, [r7, #0]
 801bd74:	f000 f94e 	bl	801c014 <append_string>
 801bd78:	60f8      	str	r0, [r7, #12]
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	da02      	bge.n	801bd86 <json_serialize_string+0x702>
 801bd80:	f04f 33ff 	mov.w	r3, #4294967295
 801bd84:	e10a      	b.n	801bf9c <json_serialize_string+0x918>
 801bd86:	683b      	ldr	r3, [r7, #0]
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d003      	beq.n	801bd94 <json_serialize_string+0x710>
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	683a      	ldr	r2, [r7, #0]
 801bd90:	4413      	add	r3, r2
 801bd92:	603b      	str	r3, [r7, #0]
 801bd94:	69ba      	ldr	r2, [r7, #24]
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	4413      	add	r3, r2
 801bd9a:	61bb      	str	r3, [r7, #24]
 801bd9c:	e0df      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x18': APPEND_STRING("\\u0018"); break;
 801bd9e:	494c      	ldr	r1, [pc, #304]	; (801bed0 <json_serialize_string+0x84c>)
 801bda0:	6838      	ldr	r0, [r7, #0]
 801bda2:	f000 f937 	bl	801c014 <append_string>
 801bda6:	60f8      	str	r0, [r7, #12]
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	da02      	bge.n	801bdb4 <json_serialize_string+0x730>
 801bdae:	f04f 33ff 	mov.w	r3, #4294967295
 801bdb2:	e0f3      	b.n	801bf9c <json_serialize_string+0x918>
 801bdb4:	683b      	ldr	r3, [r7, #0]
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d003      	beq.n	801bdc2 <json_serialize_string+0x73e>
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	683a      	ldr	r2, [r7, #0]
 801bdbe:	4413      	add	r3, r2
 801bdc0:	603b      	str	r3, [r7, #0]
 801bdc2:	69ba      	ldr	r2, [r7, #24]
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	4413      	add	r3, r2
 801bdc8:	61bb      	str	r3, [r7, #24]
 801bdca:	e0c8      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x19': APPEND_STRING("\\u0019"); break;
 801bdcc:	4941      	ldr	r1, [pc, #260]	; (801bed4 <json_serialize_string+0x850>)
 801bdce:	6838      	ldr	r0, [r7, #0]
 801bdd0:	f000 f920 	bl	801c014 <append_string>
 801bdd4:	60f8      	str	r0, [r7, #12]
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	da02      	bge.n	801bde2 <json_serialize_string+0x75e>
 801bddc:	f04f 33ff 	mov.w	r3, #4294967295
 801bde0:	e0dc      	b.n	801bf9c <json_serialize_string+0x918>
 801bde2:	683b      	ldr	r3, [r7, #0]
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d003      	beq.n	801bdf0 <json_serialize_string+0x76c>
 801bde8:	68fb      	ldr	r3, [r7, #12]
 801bdea:	683a      	ldr	r2, [r7, #0]
 801bdec:	4413      	add	r3, r2
 801bdee:	603b      	str	r3, [r7, #0]
 801bdf0:	69ba      	ldr	r2, [r7, #24]
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	4413      	add	r3, r2
 801bdf6:	61bb      	str	r3, [r7, #24]
 801bdf8:	e0b1      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 801bdfa:	4937      	ldr	r1, [pc, #220]	; (801bed8 <json_serialize_string+0x854>)
 801bdfc:	6838      	ldr	r0, [r7, #0]
 801bdfe:	f000 f909 	bl	801c014 <append_string>
 801be02:	60f8      	str	r0, [r7, #12]
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	2b00      	cmp	r3, #0
 801be08:	da02      	bge.n	801be10 <json_serialize_string+0x78c>
 801be0a:	f04f 33ff 	mov.w	r3, #4294967295
 801be0e:	e0c5      	b.n	801bf9c <json_serialize_string+0x918>
 801be10:	683b      	ldr	r3, [r7, #0]
 801be12:	2b00      	cmp	r3, #0
 801be14:	d003      	beq.n	801be1e <json_serialize_string+0x79a>
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	683a      	ldr	r2, [r7, #0]
 801be1a:	4413      	add	r3, r2
 801be1c:	603b      	str	r3, [r7, #0]
 801be1e:	69ba      	ldr	r2, [r7, #24]
 801be20:	68fb      	ldr	r3, [r7, #12]
 801be22:	4413      	add	r3, r2
 801be24:	61bb      	str	r3, [r7, #24]
 801be26:	e09a      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 801be28:	492c      	ldr	r1, [pc, #176]	; (801bedc <json_serialize_string+0x858>)
 801be2a:	6838      	ldr	r0, [r7, #0]
 801be2c:	f000 f8f2 	bl	801c014 <append_string>
 801be30:	60f8      	str	r0, [r7, #12]
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	2b00      	cmp	r3, #0
 801be36:	da02      	bge.n	801be3e <json_serialize_string+0x7ba>
 801be38:	f04f 33ff 	mov.w	r3, #4294967295
 801be3c:	e0ae      	b.n	801bf9c <json_serialize_string+0x918>
 801be3e:	683b      	ldr	r3, [r7, #0]
 801be40:	2b00      	cmp	r3, #0
 801be42:	d003      	beq.n	801be4c <json_serialize_string+0x7c8>
 801be44:	68fb      	ldr	r3, [r7, #12]
 801be46:	683a      	ldr	r2, [r7, #0]
 801be48:	4413      	add	r3, r2
 801be4a:	603b      	str	r3, [r7, #0]
 801be4c:	69ba      	ldr	r2, [r7, #24]
 801be4e:	68fb      	ldr	r3, [r7, #12]
 801be50:	4413      	add	r3, r2
 801be52:	61bb      	str	r3, [r7, #24]
 801be54:	e083      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 801be56:	4922      	ldr	r1, [pc, #136]	; (801bee0 <json_serialize_string+0x85c>)
 801be58:	6838      	ldr	r0, [r7, #0]
 801be5a:	f000 f8db 	bl	801c014 <append_string>
 801be5e:	60f8      	str	r0, [r7, #12]
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	2b00      	cmp	r3, #0
 801be64:	da02      	bge.n	801be6c <json_serialize_string+0x7e8>
 801be66:	f04f 33ff 	mov.w	r3, #4294967295
 801be6a:	e097      	b.n	801bf9c <json_serialize_string+0x918>
 801be6c:	683b      	ldr	r3, [r7, #0]
 801be6e:	2b00      	cmp	r3, #0
 801be70:	d003      	beq.n	801be7a <json_serialize_string+0x7f6>
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	683a      	ldr	r2, [r7, #0]
 801be76:	4413      	add	r3, r2
 801be78:	603b      	str	r3, [r7, #0]
 801be7a:	69ba      	ldr	r2, [r7, #24]
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	4413      	add	r3, r2
 801be80:	61bb      	str	r3, [r7, #24]
 801be82:	e06c      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 801be84:	4917      	ldr	r1, [pc, #92]	; (801bee4 <json_serialize_string+0x860>)
 801be86:	6838      	ldr	r0, [r7, #0]
 801be88:	f000 f8c4 	bl	801c014 <append_string>
 801be8c:	60f8      	str	r0, [r7, #12]
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	2b00      	cmp	r3, #0
 801be92:	da02      	bge.n	801be9a <json_serialize_string+0x816>
 801be94:	f04f 33ff 	mov.w	r3, #4294967295
 801be98:	e080      	b.n	801bf9c <json_serialize_string+0x918>
 801be9a:	683b      	ldr	r3, [r7, #0]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d003      	beq.n	801bea8 <json_serialize_string+0x824>
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	683a      	ldr	r2, [r7, #0]
 801bea4:	4413      	add	r3, r2
 801bea6:	603b      	str	r3, [r7, #0]
 801bea8:	69ba      	ldr	r2, [r7, #24]
 801beaa:	68fb      	ldr	r3, [r7, #12]
 801beac:	4413      	add	r3, r2
 801beae:	61bb      	str	r3, [r7, #24]
 801beb0:	e055      	b.n	801bf5e <json_serialize_string+0x8da>
 801beb2:	bf00      	nop
 801beb4:	0802197c 	.word	0x0802197c
 801beb8:	08021984 	.word	0x08021984
 801bebc:	0802198c 	.word	0x0802198c
 801bec0:	08021994 	.word	0x08021994
 801bec4:	0802199c 	.word	0x0802199c
 801bec8:	080219a4 	.word	0x080219a4
 801becc:	080219ac 	.word	0x080219ac
 801bed0:	080219b4 	.word	0x080219b4
 801bed4:	080219bc 	.word	0x080219bc
 801bed8:	080219c4 	.word	0x080219c4
 801bedc:	080219cc 	.word	0x080219cc
 801bee0:	080219d4 	.word	0x080219d4
 801bee4:	080219dc 	.word	0x080219dc
            case '\x1e': APPEND_STRING("\\u001e"); break;
 801bee8:	492e      	ldr	r1, [pc, #184]	; (801bfa4 <json_serialize_string+0x920>)
 801beea:	6838      	ldr	r0, [r7, #0]
 801beec:	f000 f892 	bl	801c014 <append_string>
 801bef0:	60f8      	str	r0, [r7, #12]
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	da02      	bge.n	801befe <json_serialize_string+0x87a>
 801bef8:	f04f 33ff 	mov.w	r3, #4294967295
 801befc:	e04e      	b.n	801bf9c <json_serialize_string+0x918>
 801befe:	683b      	ldr	r3, [r7, #0]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d003      	beq.n	801bf0c <json_serialize_string+0x888>
 801bf04:	68fb      	ldr	r3, [r7, #12]
 801bf06:	683a      	ldr	r2, [r7, #0]
 801bf08:	4413      	add	r3, r2
 801bf0a:	603b      	str	r3, [r7, #0]
 801bf0c:	69ba      	ldr	r2, [r7, #24]
 801bf0e:	68fb      	ldr	r3, [r7, #12]
 801bf10:	4413      	add	r3, r2
 801bf12:	61bb      	str	r3, [r7, #24]
 801bf14:	e023      	b.n	801bf5e <json_serialize_string+0x8da>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 801bf16:	4924      	ldr	r1, [pc, #144]	; (801bfa8 <json_serialize_string+0x924>)
 801bf18:	6838      	ldr	r0, [r7, #0]
 801bf1a:	f000 f87b 	bl	801c014 <append_string>
 801bf1e:	60f8      	str	r0, [r7, #12]
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	da02      	bge.n	801bf2c <json_serialize_string+0x8a8>
 801bf26:	f04f 33ff 	mov.w	r3, #4294967295
 801bf2a:	e037      	b.n	801bf9c <json_serialize_string+0x918>
 801bf2c:	683b      	ldr	r3, [r7, #0]
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	d003      	beq.n	801bf3a <json_serialize_string+0x8b6>
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	683a      	ldr	r2, [r7, #0]
 801bf36:	4413      	add	r3, r2
 801bf38:	603b      	str	r3, [r7, #0]
 801bf3a:	69ba      	ldr	r2, [r7, #24]
 801bf3c:	68fb      	ldr	r3, [r7, #12]
 801bf3e:	4413      	add	r3, r2
 801bf40:	61bb      	str	r3, [r7, #24]
 801bf42:	e00c      	b.n	801bf5e <json_serialize_string+0x8da>
            default:
                if (buf != NULL) {
 801bf44:	683b      	ldr	r3, [r7, #0]
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d005      	beq.n	801bf56 <json_serialize_string+0x8d2>
                    buf[0] = c;
 801bf4a:	683b      	ldr	r3, [r7, #0]
 801bf4c:	7cfa      	ldrb	r2, [r7, #19]
 801bf4e:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 801bf50:	683b      	ldr	r3, [r7, #0]
 801bf52:	3301      	adds	r3, #1
 801bf54:	603b      	str	r3, [r7, #0]
                }
                written_total += 1;
 801bf56:	69bb      	ldr	r3, [r7, #24]
 801bf58:	3301      	adds	r3, #1
 801bf5a:	61bb      	str	r3, [r7, #24]
                break;
 801bf5c:	bf00      	nop
    for (i = 0; i < len; i++) {
 801bf5e:	69fb      	ldr	r3, [r7, #28]
 801bf60:	3301      	adds	r3, #1
 801bf62:	61fb      	str	r3, [r7, #28]
 801bf64:	69fa      	ldr	r2, [r7, #28]
 801bf66:	697b      	ldr	r3, [r7, #20]
 801bf68:	429a      	cmp	r2, r3
 801bf6a:	f4ff abb8 	bcc.w	801b6de <json_serialize_string+0x5a>
        }
    }
    APPEND_STRING("\"");
 801bf6e:	490f      	ldr	r1, [pc, #60]	; (801bfac <json_serialize_string+0x928>)
 801bf70:	6838      	ldr	r0, [r7, #0]
 801bf72:	f000 f84f 	bl	801c014 <append_string>
 801bf76:	60f8      	str	r0, [r7, #12]
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	da02      	bge.n	801bf84 <json_serialize_string+0x900>
 801bf7e:	f04f 33ff 	mov.w	r3, #4294967295
 801bf82:	e00b      	b.n	801bf9c <json_serialize_string+0x918>
 801bf84:	683b      	ldr	r3, [r7, #0]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d003      	beq.n	801bf92 <json_serialize_string+0x90e>
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	683a      	ldr	r2, [r7, #0]
 801bf8e:	4413      	add	r3, r2
 801bf90:	603b      	str	r3, [r7, #0]
 801bf92:	69ba      	ldr	r2, [r7, #24]
 801bf94:	68fb      	ldr	r3, [r7, #12]
 801bf96:	4413      	add	r3, r2
 801bf98:	61bb      	str	r3, [r7, #24]
    return written_total;
 801bf9a:	69bb      	ldr	r3, [r7, #24]
}
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	3720      	adds	r7, #32
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	bd80      	pop	{r7, pc}
 801bfa4:	080219e4 	.word	0x080219e4
 801bfa8:	080219ec 	.word	0x080219ec
 801bfac:	080218f8 	.word	0x080218f8

0801bfb0 <append_indent>:

static int append_indent(char *buf, int level) {
 801bfb0:	b580      	push	{r7, lr}
 801bfb2:	b086      	sub	sp, #24
 801bfb4:	af00      	add	r7, sp, #0
 801bfb6:	6078      	str	r0, [r7, #4]
 801bfb8:	6039      	str	r1, [r7, #0]
    int i;
    int written = -1, written_total = 0;
 801bfba:	f04f 33ff 	mov.w	r3, #4294967295
 801bfbe:	60fb      	str	r3, [r7, #12]
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801bfc4:	2300      	movs	r3, #0
 801bfc6:	617b      	str	r3, [r7, #20]
 801bfc8:	e018      	b.n	801bffc <append_indent+0x4c>
        APPEND_STRING("    ");
 801bfca:	4911      	ldr	r1, [pc, #68]	; (801c010 <append_indent+0x60>)
 801bfcc:	6878      	ldr	r0, [r7, #4]
 801bfce:	f000 f821 	bl	801c014 <append_string>
 801bfd2:	60f8      	str	r0, [r7, #12]
 801bfd4:	68fb      	ldr	r3, [r7, #12]
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	da02      	bge.n	801bfe0 <append_indent+0x30>
 801bfda:	f04f 33ff 	mov.w	r3, #4294967295
 801bfde:	e012      	b.n	801c006 <append_indent+0x56>
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d003      	beq.n	801bfee <append_indent+0x3e>
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	687a      	ldr	r2, [r7, #4]
 801bfea:	4413      	add	r3, r2
 801bfec:	607b      	str	r3, [r7, #4]
 801bfee:	693a      	ldr	r2, [r7, #16]
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	4413      	add	r3, r2
 801bff4:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801bff6:	697b      	ldr	r3, [r7, #20]
 801bff8:	3301      	adds	r3, #1
 801bffa:	617b      	str	r3, [r7, #20]
 801bffc:	697a      	ldr	r2, [r7, #20]
 801bffe:	683b      	ldr	r3, [r7, #0]
 801c000:	429a      	cmp	r2, r3
 801c002:	dbe2      	blt.n	801bfca <append_indent+0x1a>
    }
    return written_total;
 801c004:	693b      	ldr	r3, [r7, #16]
}
 801c006:	4618      	mov	r0, r3
 801c008:	3718      	adds	r7, #24
 801c00a:	46bd      	mov	sp, r7
 801c00c:	bd80      	pop	{r7, pc}
 801c00e:	bf00      	nop
 801c010:	080219f4 	.word	0x080219f4

0801c014 <append_string>:

static int append_string(char *buf, const char *string) {
 801c014:	b580      	push	{r7, lr}
 801c016:	b082      	sub	sp, #8
 801c018:	af00      	add	r7, sp, #0
 801c01a:	6078      	str	r0, [r7, #4]
 801c01c:	6039      	str	r1, [r7, #0]
    if (buf == NULL) {
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d104      	bne.n	801c02e <append_string+0x1a>
        return (int)strlen(string);
 801c024:	6838      	ldr	r0, [r7, #0]
 801c026:	f7e4 f8f5 	bl	8000214 <strlen>
 801c02a:	4603      	mov	r3, r0
 801c02c:	e005      	b.n	801c03a <append_string+0x26>
    }
    return sprintf(buf, "%s", string);
 801c02e:	683a      	ldr	r2, [r7, #0]
 801c030:	4904      	ldr	r1, [pc, #16]	; (801c044 <append_string+0x30>)
 801c032:	6878      	ldr	r0, [r7, #4]
 801c034:	f001 fe6a 	bl	801dd0c <siprintf>
 801c038:	4603      	mov	r3, r0
}
 801c03a:	4618      	mov	r0, r3
 801c03c:	3708      	adds	r7, #8
 801c03e:	46bd      	mov	sp, r7
 801c040:	bd80      	pop	{r7, pc}
 801c042:	bf00      	nop
 801c044:	080219fc 	.word	0x080219fc

0801c048 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 801c048:	b580      	push	{r7, lr}
 801c04a:	b082      	sub	sp, #8
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	2b00      	cmp	r3, #0
 801c054:	d101      	bne.n	801c05a <json_parse_string+0x12>
        return NULL;
 801c056:	2300      	movs	r3, #0
 801c058:	e016      	b.n	801c088 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	781b      	ldrb	r3, [r3, #0]
 801c05e:	2bef      	cmp	r3, #239	; 0xef
 801c060:	d10c      	bne.n	801c07c <json_parse_string+0x34>
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	3301      	adds	r3, #1
 801c066:	781b      	ldrb	r3, [r3, #0]
 801c068:	2bbb      	cmp	r3, #187	; 0xbb
 801c06a:	d107      	bne.n	801c07c <json_parse_string+0x34>
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	3302      	adds	r3, #2
 801c070:	781b      	ldrb	r3, [r3, #0]
 801c072:	2bbf      	cmp	r3, #191	; 0xbf
 801c074:	d102      	bne.n	801c07c <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	3303      	adds	r3, #3
 801c07a:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 801c07c:	1d3b      	adds	r3, r7, #4
 801c07e:	2100      	movs	r1, #0
 801c080:	4618      	mov	r0, r3
 801c082:	f7fe fcc1 	bl	801aa08 <parse_value>
 801c086:	4603      	mov	r3, r0
}
 801c088:	4618      	mov	r0, r3
 801c08a:	3708      	adds	r7, #8
 801c08c:	46bd      	mov	sp, r7
 801c08e:	bd80      	pop	{r7, pc}

0801c090 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 801c090:	b580      	push	{r7, lr}
 801c092:	b082      	sub	sp, #8
 801c094:	af00      	add	r7, sp, #0
 801c096:	6078      	str	r0, [r7, #4]
 801c098:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d002      	beq.n	801c0a6 <json_object_get_value+0x16>
 801c0a0:	683b      	ldr	r3, [r7, #0]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d101      	bne.n	801c0aa <json_object_get_value+0x1a>
        return NULL;
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	e009      	b.n	801c0be <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 801c0aa:	6838      	ldr	r0, [r7, #0]
 801c0ac:	f7e4 f8b2 	bl	8000214 <strlen>
 801c0b0:	4603      	mov	r3, r0
 801c0b2:	461a      	mov	r2, r3
 801c0b4:	6839      	ldr	r1, [r7, #0]
 801c0b6:	6878      	ldr	r0, [r7, #4]
 801c0b8:	f7fe f864 	bl	801a184 <json_object_getn_value>
 801c0bc:	4603      	mov	r3, r0
}
 801c0be:	4618      	mov	r0, r3
 801c0c0:	3708      	adds	r7, #8
 801c0c2:	46bd      	mov	sp, r7
 801c0c4:	bd80      	pop	{r7, pc}

0801c0c6 <json_object_dotget_value>:

int json_object_get_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_get_value(object, name));
}

JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 801c0c6:	b580      	push	{r7, lr}
 801c0c8:	b084      	sub	sp, #16
 801c0ca:	af00      	add	r7, sp, #0
 801c0cc:	6078      	str	r0, [r7, #4]
 801c0ce:	6039      	str	r1, [r7, #0]
    const char *dot_position = strchr(name, '.');
 801c0d0:	212e      	movs	r1, #46	; 0x2e
 801c0d2:	6838      	ldr	r0, [r7, #0]
 801c0d4:	f001 fe8c 	bl	801ddf0 <strchr>
 801c0d8:	60f8      	str	r0, [r7, #12]
    if (!dot_position) {
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d105      	bne.n	801c0ec <json_object_dotget_value+0x26>
        return json_object_get_value(object, name);
 801c0e0:	6839      	ldr	r1, [r7, #0]
 801c0e2:	6878      	ldr	r0, [r7, #4]
 801c0e4:	f7ff ffd4 	bl	801c090 <json_object_get_value>
 801c0e8:	4603      	mov	r3, r0
 801c0ea:	e013      	b.n	801c114 <json_object_dotget_value+0x4e>
    }
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 801c0ec:	68fa      	ldr	r2, [r7, #12]
 801c0ee:	683b      	ldr	r3, [r7, #0]
 801c0f0:	1ad3      	subs	r3, r2, r3
 801c0f2:	461a      	mov	r2, r3
 801c0f4:	6839      	ldr	r1, [r7, #0]
 801c0f6:	6878      	ldr	r0, [r7, #4]
 801c0f8:	f7fe f844 	bl	801a184 <json_object_getn_value>
 801c0fc:	4603      	mov	r3, r0
 801c0fe:	4618      	mov	r0, r3
 801c100:	f000 f8ef 	bl	801c2e2 <json_value_get_object>
 801c104:	6078      	str	r0, [r7, #4]
    return json_object_dotget_value(object, dot_position + 1);
 801c106:	68fb      	ldr	r3, [r7, #12]
 801c108:	3301      	adds	r3, #1
 801c10a:	4619      	mov	r1, r3
 801c10c:	6878      	ldr	r0, [r7, #4]
 801c10e:	f7ff ffda 	bl	801c0c6 <json_object_dotget_value>
 801c112:	4603      	mov	r3, r0
}
 801c114:	4618      	mov	r0, r3
 801c116:	3710      	adds	r7, #16
 801c118:	46bd      	mov	sp, r7
 801c11a:	bd80      	pop	{r7, pc}

0801c11c <json_object_dotget_number>:

const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
    return json_value_get_string(json_object_dotget_value(object, name));
}

double json_object_dotget_number(const JSON_Object *object, const char *name) {
 801c11c:	b580      	push	{r7, lr}
 801c11e:	b082      	sub	sp, #8
 801c120:	af00      	add	r7, sp, #0
 801c122:	6078      	str	r0, [r7, #4]
 801c124:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_dotget_value(object, name));
 801c126:	6839      	ldr	r1, [r7, #0]
 801c128:	6878      	ldr	r0, [r7, #4]
 801c12a:	f7ff ffcc 	bl	801c0c6 <json_object_dotget_value>
 801c12e:	4603      	mov	r3, r0
 801c130:	4618      	mov	r0, r3
 801c132:	f000 f90c 	bl	801c34e <json_value_get_number>
 801c136:	eeb0 7a40 	vmov.f32	s14, s0
 801c13a:	eef0 7a60 	vmov.f32	s15, s1
}
 801c13e:	eeb0 0a47 	vmov.f32	s0, s14
 801c142:	eef0 0a67 	vmov.f32	s1, s15
 801c146:	3708      	adds	r7, #8
 801c148:	46bd      	mov	sp, r7
 801c14a:	bd80      	pop	{r7, pc}

0801c14c <json_object_dotget_array>:

JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
    return json_value_get_object(json_object_dotget_value(object, name));
}

JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 801c14c:	b580      	push	{r7, lr}
 801c14e:	b082      	sub	sp, #8
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
 801c154:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_dotget_value(object, name));
 801c156:	6839      	ldr	r1, [r7, #0]
 801c158:	6878      	ldr	r0, [r7, #4]
 801c15a:	f7ff ffb4 	bl	801c0c6 <json_object_dotget_value>
 801c15e:	4603      	mov	r3, r0
 801c160:	4618      	mov	r0, r3
 801c162:	f000 f8d0 	bl	801c306 <json_value_get_array>
 801c166:	4603      	mov	r3, r0
}
 801c168:	4618      	mov	r0, r3
 801c16a:	3708      	adds	r7, #8
 801c16c:	46bd      	mov	sp, r7
 801c16e:	bd80      	pop	{r7, pc}

0801c170 <json_object_dotget_boolean>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
 801c170:	b580      	push	{r7, lr}
 801c172:	b082      	sub	sp, #8
 801c174:	af00      	add	r7, sp, #0
 801c176:	6078      	str	r0, [r7, #4]
 801c178:	6039      	str	r1, [r7, #0]
    return json_value_get_boolean(json_object_dotget_value(object, name));
 801c17a:	6839      	ldr	r1, [r7, #0]
 801c17c:	6878      	ldr	r0, [r7, #4]
 801c17e:	f7ff ffa2 	bl	801c0c6 <json_object_dotget_value>
 801c182:	4603      	mov	r3, r0
 801c184:	4618      	mov	r0, r3
 801c186:	f000 f8fd 	bl	801c384 <json_value_get_boolean>
 801c18a:	4603      	mov	r3, r0
}
 801c18c:	4618      	mov	r0, r3
 801c18e:	3708      	adds	r7, #8
 801c190:	46bd      	mov	sp, r7
 801c192:	bd80      	pop	{r7, pc}

0801c194 <json_object_get_count>:

size_t json_object_get_count(const JSON_Object *object) {
 801c194:	b480      	push	{r7}
 801c196:	b083      	sub	sp, #12
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d002      	beq.n	801c1a8 <json_object_get_count+0x14>
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	68db      	ldr	r3, [r3, #12]
 801c1a6:	e000      	b.n	801c1aa <json_object_get_count+0x16>
 801c1a8:	2300      	movs	r3, #0
}
 801c1aa:	4618      	mov	r0, r3
 801c1ac:	370c      	adds	r7, #12
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b4:	4770      	bx	lr

0801c1b6 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 801c1b6:	b580      	push	{r7, lr}
 801c1b8:	b082      	sub	sp, #8
 801c1ba:	af00      	add	r7, sp, #0
 801c1bc:	6078      	str	r0, [r7, #4]
 801c1be:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d006      	beq.n	801c1d4 <json_object_get_name+0x1e>
 801c1c6:	6878      	ldr	r0, [r7, #4]
 801c1c8:	f7ff ffe4 	bl	801c194 <json_object_get_count>
 801c1cc:	4602      	mov	r2, r0
 801c1ce:	683b      	ldr	r3, [r7, #0]
 801c1d0:	4293      	cmp	r3, r2
 801c1d2:	d301      	bcc.n	801c1d8 <json_object_get_name+0x22>
        return NULL;
 801c1d4:	2300      	movs	r3, #0
 801c1d6:	e005      	b.n	801c1e4 <json_object_get_name+0x2e>
    }
    return object->names[index];
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	685a      	ldr	r2, [r3, #4]
 801c1dc:	683b      	ldr	r3, [r7, #0]
 801c1de:	009b      	lsls	r3, r3, #2
 801c1e0:	4413      	add	r3, r2
 801c1e2:	681b      	ldr	r3, [r3, #0]
}
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	3708      	adds	r7, #8
 801c1e8:	46bd      	mov	sp, r7
 801c1ea:	bd80      	pop	{r7, pc}

0801c1ec <json_object_get_wrapping_value>:
        return NULL;
    }
    return object->values[index];
}

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 801c1ec:	b480      	push	{r7}
 801c1ee:	b083      	sub	sp, #12
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	6078      	str	r0, [r7, #4]
    return object->wrapping_value;
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	681b      	ldr	r3, [r3, #0]
}
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	370c      	adds	r7, #12
 801c1fc:	46bd      	mov	sp, r7
 801c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c202:	4770      	bx	lr

0801c204 <json_object_dothas_value>:
int json_object_has_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {
    JSON_Value *val = json_object_get_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

int json_object_dothas_value (const JSON_Object *object, const char *name) {
 801c204:	b580      	push	{r7, lr}
 801c206:	b082      	sub	sp, #8
 801c208:	af00      	add	r7, sp, #0
 801c20a:	6078      	str	r0, [r7, #4]
 801c20c:	6039      	str	r1, [r7, #0]
    return json_object_dotget_value(object, name) != NULL;
 801c20e:	6839      	ldr	r1, [r7, #0]
 801c210:	6878      	ldr	r0, [r7, #4]
 801c212:	f7ff ff58 	bl	801c0c6 <json_object_dotget_value>
 801c216:	4603      	mov	r3, r0
 801c218:	2b00      	cmp	r3, #0
 801c21a:	bf14      	ite	ne
 801c21c:	2301      	movne	r3, #1
 801c21e:	2300      	moveq	r3, #0
 801c220:	b2db      	uxtb	r3, r3
}
 801c222:	4618      	mov	r0, r3
 801c224:	3708      	adds	r7, #8
 801c226:	46bd      	mov	sp, r7
 801c228:	bd80      	pop	{r7, pc}

0801c22a <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 801c22a:	b580      	push	{r7, lr}
 801c22c:	b082      	sub	sp, #8
 801c22e:	af00      	add	r7, sp, #0
 801c230:	6078      	str	r0, [r7, #4]
 801c232:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	2b00      	cmp	r3, #0
 801c238:	d006      	beq.n	801c248 <json_array_get_value+0x1e>
 801c23a:	6878      	ldr	r0, [r7, #4]
 801c23c:	f000 f822 	bl	801c284 <json_array_get_count>
 801c240:	4602      	mov	r2, r0
 801c242:	683b      	ldr	r3, [r7, #0]
 801c244:	4293      	cmp	r3, r2
 801c246:	d301      	bcc.n	801c24c <json_array_get_value+0x22>
        return NULL;
 801c248:	2300      	movs	r3, #0
 801c24a:	e005      	b.n	801c258 <json_array_get_value+0x2e>
    }
    return array->items[index];
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	685a      	ldr	r2, [r3, #4]
 801c250:	683b      	ldr	r3, [r7, #0]
 801c252:	009b      	lsls	r3, r3, #2
 801c254:	4413      	add	r3, r2
 801c256:	681b      	ldr	r3, [r3, #0]
}
 801c258:	4618      	mov	r0, r3
 801c25a:	3708      	adds	r7, #8
 801c25c:	46bd      	mov	sp, r7
 801c25e:	bd80      	pop	{r7, pc}

0801c260 <json_array_get_object>:

double json_array_get_number(const JSON_Array *array, size_t index) {
    return json_value_get_number(json_array_get_value(array, index));
}

JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {
 801c260:	b580      	push	{r7, lr}
 801c262:	b082      	sub	sp, #8
 801c264:	af00      	add	r7, sp, #0
 801c266:	6078      	str	r0, [r7, #4]
 801c268:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_array_get_value(array, index));
 801c26a:	6839      	ldr	r1, [r7, #0]
 801c26c:	6878      	ldr	r0, [r7, #4]
 801c26e:	f7ff ffdc 	bl	801c22a <json_array_get_value>
 801c272:	4603      	mov	r3, r0
 801c274:	4618      	mov	r0, r3
 801c276:	f000 f834 	bl	801c2e2 <json_value_get_object>
 801c27a:	4603      	mov	r3, r0
}
 801c27c:	4618      	mov	r0, r3
 801c27e:	3708      	adds	r7, #8
 801c280:	46bd      	mov	sp, r7
 801c282:	bd80      	pop	{r7, pc}

0801c284 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 801c284:	b480      	push	{r7}
 801c286:	b083      	sub	sp, #12
 801c288:	af00      	add	r7, sp, #0
 801c28a:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d002      	beq.n	801c298 <json_array_get_count+0x14>
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	689b      	ldr	r3, [r3, #8]
 801c296:	e000      	b.n	801c29a <json_array_get_count+0x16>
 801c298:	2300      	movs	r3, #0
}
 801c29a:	4618      	mov	r0, r3
 801c29c:	370c      	adds	r7, #12
 801c29e:	46bd      	mov	sp, r7
 801c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2a4:	4770      	bx	lr

0801c2a6 <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 801c2a6:	b480      	push	{r7}
 801c2a8:	b083      	sub	sp, #12
 801c2aa:	af00      	add	r7, sp, #0
 801c2ac:	6078      	str	r0, [r7, #4]
    return array->wrapping_value;
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	681b      	ldr	r3, [r3, #0]
}
 801c2b2:	4618      	mov	r0, r3
 801c2b4:	370c      	adds	r7, #12
 801c2b6:	46bd      	mov	sp, r7
 801c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2bc:	4770      	bx	lr

0801c2be <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 801c2be:	b480      	push	{r7}
 801c2c0:	b083      	sub	sp, #12
 801c2c2:	af00      	add	r7, sp, #0
 801c2c4:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d002      	beq.n	801c2d2 <json_value_get_type+0x14>
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	685b      	ldr	r3, [r3, #4]
 801c2d0:	e001      	b.n	801c2d6 <json_value_get_type+0x18>
 801c2d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	370c      	adds	r7, #12
 801c2da:	46bd      	mov	sp, r7
 801c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e0:	4770      	bx	lr

0801c2e2 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 801c2e2:	b580      	push	{r7, lr}
 801c2e4:	b082      	sub	sp, #8
 801c2e6:	af00      	add	r7, sp, #0
 801c2e8:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801c2ea:	6878      	ldr	r0, [r7, #4]
 801c2ec:	f7ff ffe7 	bl	801c2be <json_value_get_type>
 801c2f0:	4603      	mov	r3, r0
 801c2f2:	2b04      	cmp	r3, #4
 801c2f4:	d102      	bne.n	801c2fc <json_value_get_object+0x1a>
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	689b      	ldr	r3, [r3, #8]
 801c2fa:	e000      	b.n	801c2fe <json_value_get_object+0x1c>
 801c2fc:	2300      	movs	r3, #0
}
 801c2fe:	4618      	mov	r0, r3
 801c300:	3708      	adds	r7, #8
 801c302:	46bd      	mov	sp, r7
 801c304:	bd80      	pop	{r7, pc}

0801c306 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 801c306:	b580      	push	{r7, lr}
 801c308:	b082      	sub	sp, #8
 801c30a:	af00      	add	r7, sp, #0
 801c30c:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 801c30e:	6878      	ldr	r0, [r7, #4]
 801c310:	f7ff ffd5 	bl	801c2be <json_value_get_type>
 801c314:	4603      	mov	r3, r0
 801c316:	2b05      	cmp	r3, #5
 801c318:	d102      	bne.n	801c320 <json_value_get_array+0x1a>
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	689b      	ldr	r3, [r3, #8]
 801c31e:	e000      	b.n	801c322 <json_value_get_array+0x1c>
 801c320:	2300      	movs	r3, #0
}
 801c322:	4618      	mov	r0, r3
 801c324:	3708      	adds	r7, #8
 801c326:	46bd      	mov	sp, r7
 801c328:	bd80      	pop	{r7, pc}

0801c32a <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 801c32a:	b580      	push	{r7, lr}
 801c32c:	b082      	sub	sp, #8
 801c32e:	af00      	add	r7, sp, #0
 801c330:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
 801c332:	6878      	ldr	r0, [r7, #4]
 801c334:	f7ff ffc3 	bl	801c2be <json_value_get_type>
 801c338:	4603      	mov	r3, r0
 801c33a:	2b02      	cmp	r3, #2
 801c33c:	d102      	bne.n	801c344 <json_value_get_string+0x1a>
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	689b      	ldr	r3, [r3, #8]
 801c342:	e000      	b.n	801c346 <json_value_get_string+0x1c>
 801c344:	2300      	movs	r3, #0
}
 801c346:	4618      	mov	r0, r3
 801c348:	3708      	adds	r7, #8
 801c34a:	46bd      	mov	sp, r7
 801c34c:	bd80      	pop	{r7, pc}

0801c34e <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 801c34e:	b580      	push	{r7, lr}
 801c350:	b082      	sub	sp, #8
 801c352:	af00      	add	r7, sp, #0
 801c354:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 801c356:	6878      	ldr	r0, [r7, #4]
 801c358:	f7ff ffb1 	bl	801c2be <json_value_get_type>
 801c35c:	4603      	mov	r3, r0
 801c35e:	2b03      	cmp	r3, #3
 801c360:	d103      	bne.n	801c36a <json_value_get_number+0x1c>
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c368:	e003      	b.n	801c372 <json_value_get_number+0x24>
 801c36a:	f04f 0200 	mov.w	r2, #0
 801c36e:	f04f 0300 	mov.w	r3, #0
 801c372:	ec43 2b17 	vmov	d7, r2, r3
}
 801c376:	eeb0 0a47 	vmov.f32	s0, s14
 801c37a:	eef0 0a67 	vmov.f32	s1, s15
 801c37e:	3708      	adds	r7, #8
 801c380:	46bd      	mov	sp, r7
 801c382:	bd80      	pop	{r7, pc}

0801c384 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 801c384:	b580      	push	{r7, lr}
 801c386:	b082      	sub	sp, #8
 801c388:	af00      	add	r7, sp, #0
 801c38a:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 801c38c:	6878      	ldr	r0, [r7, #4]
 801c38e:	f7ff ff96 	bl	801c2be <json_value_get_type>
 801c392:	4603      	mov	r3, r0
 801c394:	2b06      	cmp	r3, #6
 801c396:	d102      	bne.n	801c39e <json_value_get_boolean+0x1a>
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	689b      	ldr	r3, [r3, #8]
 801c39c:	e001      	b.n	801c3a2 <json_value_get_boolean+0x1e>
 801c39e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	3708      	adds	r7, #8
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	bd80      	pop	{r7, pc}
	...

0801c3ac <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 801c3ac:	b580      	push	{r7, lr}
 801c3ae:	b082      	sub	sp, #8
 801c3b0:	af00      	add	r7, sp, #0
 801c3b2:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 801c3b4:	6878      	ldr	r0, [r7, #4]
 801c3b6:	f7ff ff82 	bl	801c2be <json_value_get_type>
 801c3ba:	4603      	mov	r3, r0
 801c3bc:	2b05      	cmp	r3, #5
 801c3be:	d012      	beq.n	801c3e6 <json_value_free+0x3a>
 801c3c0:	2b05      	cmp	r3, #5
 801c3c2:	dc16      	bgt.n	801c3f2 <json_value_free+0x46>
 801c3c4:	2b02      	cmp	r3, #2
 801c3c6:	d007      	beq.n	801c3d8 <json_value_free+0x2c>
 801c3c8:	2b04      	cmp	r3, #4
 801c3ca:	d112      	bne.n	801c3f2 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	689b      	ldr	r3, [r3, #8]
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	f7fd ffc7 	bl	801a364 <json_object_free>
            break;
 801c3d6:	e00d      	b.n	801c3f4 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string);
 801c3d8:	4b0a      	ldr	r3, [pc, #40]	; (801c404 <json_value_free+0x58>)
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	687a      	ldr	r2, [r7, #4]
 801c3de:	6892      	ldr	r2, [r2, #8]
 801c3e0:	4610      	mov	r0, r2
 801c3e2:	4798      	blx	r3
            break;
 801c3e4:	e006      	b.n	801c3f4 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	689b      	ldr	r3, [r3, #8]
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	f7fe f88a 	bl	801a504 <json_array_free>
            break;
 801c3f0:	e000      	b.n	801c3f4 <json_value_free+0x48>
        default:
            break;
 801c3f2:	bf00      	nop
    }
    parson_free(value);
 801c3f4:	4b03      	ldr	r3, [pc, #12]	; (801c404 <json_value_free+0x58>)
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	6878      	ldr	r0, [r7, #4]
 801c3fa:	4798      	blx	r3
}
 801c3fc:	bf00      	nop
 801c3fe:	3708      	adds	r7, #8
 801c400:	46bd      	mov	sp, r7
 801c402:	bd80      	pop	{r7, pc}
 801c404:	20000088 	.word	0x20000088

0801c408 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 801c408:	b580      	push	{r7, lr}
 801c40a:	b082      	sub	sp, #8
 801c40c:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801c40e:	4b12      	ldr	r3, [pc, #72]	; (801c458 <json_value_init_object+0x50>)
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	2010      	movs	r0, #16
 801c414:	4798      	blx	r3
 801c416:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d101      	bne.n	801c422 <json_value_init_object+0x1a>
        return NULL;
 801c41e:	2300      	movs	r3, #0
 801c420:	e016      	b.n	801c450 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	2200      	movs	r2, #0
 801c426:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	2204      	movs	r2, #4
 801c42c:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_init(new_value);
 801c42e:	6878      	ldr	r0, [r7, #4]
 801c430:	f7fd fd88 	bl	8019f44 <json_object_init>
 801c434:	4602      	mov	r2, r0
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	689b      	ldr	r3, [r3, #8]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d105      	bne.n	801c44e <json_value_init_object+0x46>
        parson_free(new_value);
 801c442:	4b06      	ldr	r3, [pc, #24]	; (801c45c <json_value_init_object+0x54>)
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	6878      	ldr	r0, [r7, #4]
 801c448:	4798      	blx	r3
        return NULL;
 801c44a:	2300      	movs	r3, #0
 801c44c:	e000      	b.n	801c450 <json_value_init_object+0x48>
    }
    return new_value;
 801c44e:	687b      	ldr	r3, [r7, #4]
}
 801c450:	4618      	mov	r0, r3
 801c452:	3708      	adds	r7, #8
 801c454:	46bd      	mov	sp, r7
 801c456:	bd80      	pop	{r7, pc}
 801c458:	20000084 	.word	0x20000084
 801c45c:	20000088 	.word	0x20000088

0801c460 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 801c460:	b580      	push	{r7, lr}
 801c462:	b082      	sub	sp, #8
 801c464:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801c466:	4b12      	ldr	r3, [pc, #72]	; (801c4b0 <json_value_init_array+0x50>)
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	2010      	movs	r0, #16
 801c46c:	4798      	blx	r3
 801c46e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d101      	bne.n	801c47a <json_value_init_array+0x1a>
        return NULL;
 801c476:	2300      	movs	r3, #0
 801c478:	e016      	b.n	801c4a8 <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	2200      	movs	r2, #0
 801c47e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	2205      	movs	r2, #5
 801c484:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_init(new_value);
 801c486:	6878      	ldr	r0, [r7, #4]
 801c488:	f7fd ffa4 	bl	801a3d4 <json_array_init>
 801c48c:	4602      	mov	r2, r0
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	689b      	ldr	r3, [r3, #8]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d105      	bne.n	801c4a6 <json_value_init_array+0x46>
        parson_free(new_value);
 801c49a:	4b06      	ldr	r3, [pc, #24]	; (801c4b4 <json_value_init_array+0x54>)
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	6878      	ldr	r0, [r7, #4]
 801c4a0:	4798      	blx	r3
        return NULL;
 801c4a2:	2300      	movs	r3, #0
 801c4a4:	e000      	b.n	801c4a8 <json_value_init_array+0x48>
    }
    return new_value;
 801c4a6:	687b      	ldr	r3, [r7, #4]
}
 801c4a8:	4618      	mov	r0, r3
 801c4aa:	3708      	adds	r7, #8
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	bd80      	pop	{r7, pc}
 801c4b0:	20000084 	.word	0x20000084
 801c4b4:	20000088 	.word	0x20000088

0801c4b8 <json_value_init_string>:

JSON_Value * json_value_init_string(const char *string) {
 801c4b8:	b580      	push	{r7, lr}
 801c4ba:	b086      	sub	sp, #24
 801c4bc:	af00      	add	r7, sp, #0
 801c4be:	6078      	str	r0, [r7, #4]
    char *copy = NULL;
 801c4c0:	2300      	movs	r3, #0
 801c4c2:	617b      	str	r3, [r7, #20]
    JSON_Value *value;
    size_t string_len = 0;
 801c4c4:	2300      	movs	r3, #0
 801c4c6:	613b      	str	r3, [r7, #16]
    if (string == NULL) {
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d101      	bne.n	801c4d2 <json_value_init_string+0x1a>
        return NULL;
 801c4ce:	2300      	movs	r3, #0
 801c4d0:	e022      	b.n	801c518 <json_value_init_string+0x60>
    }
    string_len = strlen(string);
 801c4d2:	6878      	ldr	r0, [r7, #4]
 801c4d4:	f7e3 fe9e 	bl	8000214 <strlen>
 801c4d8:	6138      	str	r0, [r7, #16]
    if (!is_valid_utf8(string, string_len)) {
 801c4da:	6939      	ldr	r1, [r7, #16]
 801c4dc:	6878      	ldr	r0, [r7, #4]
 801c4de:	f7fd fccc 	bl	8019e7a <is_valid_utf8>
 801c4e2:	4603      	mov	r3, r0
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d101      	bne.n	801c4ec <json_value_init_string+0x34>
        return NULL;
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	e015      	b.n	801c518 <json_value_init_string+0x60>
    }
    copy = parson_strndup(string, string_len);
 801c4ec:	6939      	ldr	r1, [r7, #16]
 801c4ee:	6878      	ldr	r0, [r7, #4]
 801c4f0:	f7fd fb24 	bl	8019b3c <parson_strndup>
 801c4f4:	6178      	str	r0, [r7, #20]
    if (copy == NULL) {
 801c4f6:	697b      	ldr	r3, [r7, #20]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d101      	bne.n	801c500 <json_value_init_string+0x48>
        return NULL;
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	e00b      	b.n	801c518 <json_value_init_string+0x60>
    }
    value = json_value_init_string_no_copy(copy);
 801c500:	6978      	ldr	r0, [r7, #20]
 801c502:	f7fe f827 	bl	801a554 <json_value_init_string_no_copy>
 801c506:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d103      	bne.n	801c516 <json_value_init_string+0x5e>
        parson_free(copy);
 801c50e:	4b04      	ldr	r3, [pc, #16]	; (801c520 <json_value_init_string+0x68>)
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	6978      	ldr	r0, [r7, #20]
 801c514:	4798      	blx	r3
    }
    return value;
 801c516:	68fb      	ldr	r3, [r7, #12]
}
 801c518:	4618      	mov	r0, r3
 801c51a:	3718      	adds	r7, #24
 801c51c:	46bd      	mov	sp, r7
 801c51e:	bd80      	pop	{r7, pc}
 801c520:	20000088 	.word	0x20000088

0801c524 <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 801c524:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c526:	b085      	sub	sp, #20
 801c528:	af00      	add	r7, sp, #0
 801c52a:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 801c52e:	2300      	movs	r3, #0
 801c530:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 801c532:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c536:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c53a:	f7e4 fb1f 	bl	8000b7c <__aeabi_dcmpun>
 801c53e:	4603      	mov	r3, r0
 801c540:	2b00      	cmp	r3, #0
 801c542:	d121      	bne.n	801c588 <json_value_init_number+0x64>
 801c544:	683c      	ldr	r4, [r7, #0]
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801c54c:	2301      	movs	r3, #1
 801c54e:	461e      	mov	r6, r3
 801c550:	f04f 32ff 	mov.w	r2, #4294967295
 801c554:	4b1a      	ldr	r3, [pc, #104]	; (801c5c0 <json_value_init_number+0x9c>)
 801c556:	4620      	mov	r0, r4
 801c558:	4629      	mov	r1, r5
 801c55a:	f7e4 fb0f 	bl	8000b7c <__aeabi_dcmpun>
 801c55e:	4603      	mov	r3, r0
 801c560:	2b00      	cmp	r3, #0
 801c562:	d10b      	bne.n	801c57c <json_value_init_number+0x58>
 801c564:	f04f 32ff 	mov.w	r2, #4294967295
 801c568:	4b15      	ldr	r3, [pc, #84]	; (801c5c0 <json_value_init_number+0x9c>)
 801c56a:	4620      	mov	r0, r4
 801c56c:	4629      	mov	r1, r5
 801c56e:	f7e4 fae7 	bl	8000b40 <__aeabi_dcmple>
 801c572:	4603      	mov	r3, r0
 801c574:	2b00      	cmp	r3, #0
 801c576:	d101      	bne.n	801c57c <json_value_init_number+0x58>
 801c578:	2300      	movs	r3, #0
 801c57a:	461e      	mov	r6, r3
 801c57c:	b2f3      	uxtb	r3, r6
 801c57e:	f083 0301 	eor.w	r3, r3, #1
 801c582:	b2db      	uxtb	r3, r3
 801c584:	2b00      	cmp	r3, #0
 801c586:	d001      	beq.n	801c58c <json_value_init_number+0x68>
        return NULL;
 801c588:	2300      	movs	r3, #0
 801c58a:	e015      	b.n	801c5b8 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801c58c:	4b0d      	ldr	r3, [pc, #52]	; (801c5c4 <json_value_init_number+0xa0>)
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	2010      	movs	r0, #16
 801c592:	4798      	blx	r3
 801c594:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d101      	bne.n	801c5a0 <json_value_init_number+0x7c>
        return NULL;
 801c59c:	2300      	movs	r3, #0
 801c59e:	e00b      	b.n	801c5b8 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	2203      	movs	r2, #3
 801c5aa:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 801c5ac:	68f9      	ldr	r1, [r7, #12]
 801c5ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c5b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 801c5b6:	68fb      	ldr	r3, [r7, #12]
}
 801c5b8:	4618      	mov	r0, r3
 801c5ba:	3714      	adds	r7, #20
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c5c0:	7fefffff 	.word	0x7fefffff
 801c5c4:	20000084 	.word	0x20000084

0801c5c8 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	b084      	sub	sp, #16
 801c5cc:	af00      	add	r7, sp, #0
 801c5ce:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801c5d0:	4b0e      	ldr	r3, [pc, #56]	; (801c60c <json_value_init_boolean+0x44>)
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	2010      	movs	r0, #16
 801c5d6:	4798      	blx	r3
 801c5d8:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d101      	bne.n	801c5e4 <json_value_init_boolean+0x1c>
        return NULL;
 801c5e0:	2300      	movs	r3, #0
 801c5e2:	e00f      	b.n	801c604 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	2200      	movs	r2, #0
 801c5e8:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	2206      	movs	r2, #6
 801c5ee:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	bf14      	ite	ne
 801c5f6:	2301      	movne	r3, #1
 801c5f8:	2300      	moveq	r3, #0
 801c5fa:	b2db      	uxtb	r3, r3
 801c5fc:	461a      	mov	r2, r3
 801c5fe:	68fb      	ldr	r3, [r7, #12]
 801c600:	609a      	str	r2, [r3, #8]
    return new_value;
 801c602:	68fb      	ldr	r3, [r7, #12]
}
 801c604:	4618      	mov	r0, r3
 801c606:	3710      	adds	r7, #16
 801c608:	46bd      	mov	sp, r7
 801c60a:	bd80      	pop	{r7, pc}
 801c60c:	20000084 	.word	0x20000084

0801c610 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 801c610:	b580      	push	{r7, lr}
 801c612:	b082      	sub	sp, #8
 801c614:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801c616:	4b0a      	ldr	r3, [pc, #40]	; (801c640 <json_value_init_null+0x30>)
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	2010      	movs	r0, #16
 801c61c:	4798      	blx	r3
 801c61e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	2b00      	cmp	r3, #0
 801c624:	d101      	bne.n	801c62a <json_value_init_null+0x1a>
        return NULL;
 801c626:	2300      	movs	r3, #0
 801c628:	e006      	b.n	801c638 <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	2200      	movs	r2, #0
 801c62e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	2201      	movs	r2, #1
 801c634:	605a      	str	r2, [r3, #4]
    return new_value;
 801c636:	687b      	ldr	r3, [r7, #4]
}
 801c638:	4618      	mov	r0, r3
 801c63a:	3708      	adds	r7, #8
 801c63c:	46bd      	mov	sp, r7
 801c63e:	bd80      	pop	{r7, pc}
 801c640:	20000084 	.word	0x20000084

0801c644 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 801c644:	b580      	push	{r7, lr}
 801c646:	b096      	sub	sp, #88	; 0x58
 801c648:	af02      	add	r7, sp, #8
 801c64a:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 801c64c:	f107 030c 	add.w	r3, r7, #12
 801c650:	9300      	str	r3, [sp, #0]
 801c652:	2300      	movs	r3, #0
 801c654:	2200      	movs	r2, #0
 801c656:	2100      	movs	r1, #0
 801c658:	6878      	ldr	r0, [r7, #4]
 801c65a:	f7fe fcff 	bl	801b05c <json_serialize_to_buffer_r>
 801c65e:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801c660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c662:	2b00      	cmp	r3, #0
 801c664:	db02      	blt.n	801c66c <json_serialization_size+0x28>
 801c666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c668:	3301      	adds	r3, #1
 801c66a:	e000      	b.n	801c66e <json_serialization_size+0x2a>
 801c66c:	2300      	movs	r3, #0
}
 801c66e:	4618      	mov	r0, r3
 801c670:	3750      	adds	r7, #80	; 0x50
 801c672:	46bd      	mov	sp, r7
 801c674:	bd80      	pop	{r7, pc}

0801c676 <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801c676:	b580      	push	{r7, lr}
 801c678:	b088      	sub	sp, #32
 801c67a:	af02      	add	r7, sp, #8
 801c67c:	60f8      	str	r0, [r7, #12]
 801c67e:	60b9      	str	r1, [r7, #8]
 801c680:	607a      	str	r2, [r7, #4]
    int written = -1;
 801c682:	f04f 33ff 	mov.w	r3, #4294967295
 801c686:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 801c688:	68f8      	ldr	r0, [r7, #12]
 801c68a:	f7ff ffdb 	bl	801c644 <json_serialization_size>
 801c68e:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801c690:	693b      	ldr	r3, [r7, #16]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d003      	beq.n	801c69e <json_serialize_to_buffer+0x28>
 801c696:	687a      	ldr	r2, [r7, #4]
 801c698:	693b      	ldr	r3, [r7, #16]
 801c69a:	429a      	cmp	r2, r3
 801c69c:	d202      	bcs.n	801c6a4 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 801c69e:	f04f 33ff 	mov.w	r3, #4294967295
 801c6a2:	e00f      	b.n	801c6c4 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 0, NULL);
 801c6a4:	2300      	movs	r3, #0
 801c6a6:	9300      	str	r3, [sp, #0]
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	2200      	movs	r2, #0
 801c6ac:	68b9      	ldr	r1, [r7, #8]
 801c6ae:	68f8      	ldr	r0, [r7, #12]
 801c6b0:	f7fe fcd4 	bl	801b05c <json_serialize_to_buffer_r>
 801c6b4:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801c6b6:	697b      	ldr	r3, [r7, #20]
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	da02      	bge.n	801c6c2 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 801c6bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c6c0:	e000      	b.n	801c6c4 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 801c6c2:	2300      	movs	r3, #0
}
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	3718      	adds	r7, #24
 801c6c8:	46bd      	mov	sp, r7
 801c6ca:	bd80      	pop	{r7, pc}

0801c6cc <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 801c6cc:	b580      	push	{r7, lr}
 801c6ce:	b086      	sub	sp, #24
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801c6d4:	f04f 33ff 	mov.w	r3, #4294967295
 801c6d8:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 801c6da:	6878      	ldr	r0, [r7, #4]
 801c6dc:	f7ff ffb2 	bl	801c644 <json_serialization_size>
 801c6e0:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801c6e2:	2300      	movs	r3, #0
 801c6e4:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801c6e6:	693b      	ldr	r3, [r7, #16]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d101      	bne.n	801c6f0 <json_serialize_to_string+0x24>
        return NULL;
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	e019      	b.n	801c724 <json_serialize_to_string+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801c6f0:	4b0e      	ldr	r3, [pc, #56]	; (801c72c <json_serialize_to_string+0x60>)
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	6938      	ldr	r0, [r7, #16]
 801c6f6:	4798      	blx	r3
 801c6f8:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d101      	bne.n	801c704 <json_serialize_to_string+0x38>
        return NULL;
 801c700:	2300      	movs	r3, #0
 801c702:	e00f      	b.n	801c724 <json_serialize_to_string+0x58>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 801c704:	693a      	ldr	r2, [r7, #16]
 801c706:	68f9      	ldr	r1, [r7, #12]
 801c708:	6878      	ldr	r0, [r7, #4]
 801c70a:	f7ff ffb4 	bl	801c676 <json_serialize_to_buffer>
 801c70e:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801c710:	697b      	ldr	r3, [r7, #20]
 801c712:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c716:	d104      	bne.n	801c722 <json_serialize_to_string+0x56>
        json_free_serialized_string(buf);
 801c718:	68f8      	ldr	r0, [r7, #12]
 801c71a:	f000 f87f 	bl	801c81c <json_free_serialized_string>
        return NULL;
 801c71e:	2300      	movs	r3, #0
 801c720:	e000      	b.n	801c724 <json_serialize_to_string+0x58>
    }
    return buf;
 801c722:	68fb      	ldr	r3, [r7, #12]
}
 801c724:	4618      	mov	r0, r3
 801c726:	3718      	adds	r7, #24
 801c728:	46bd      	mov	sp, r7
 801c72a:	bd80      	pop	{r7, pc}
 801c72c:	20000084 	.word	0x20000084

0801c730 <json_serialization_size_pretty>:

size_t json_serialization_size_pretty(const JSON_Value *value) {
 801c730:	b580      	push	{r7, lr}
 801c732:	b096      	sub	sp, #88	; 0x58
 801c734:	af02      	add	r7, sp, #8
 801c736:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 801c738:	f107 030c 	add.w	r3, r7, #12
 801c73c:	9300      	str	r3, [sp, #0]
 801c73e:	2301      	movs	r3, #1
 801c740:	2200      	movs	r2, #0
 801c742:	2100      	movs	r1, #0
 801c744:	6878      	ldr	r0, [r7, #4]
 801c746:	f7fe fc89 	bl	801b05c <json_serialize_to_buffer_r>
 801c74a:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801c74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c74e:	2b00      	cmp	r3, #0
 801c750:	db02      	blt.n	801c758 <json_serialization_size_pretty+0x28>
 801c752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c754:	3301      	adds	r3, #1
 801c756:	e000      	b.n	801c75a <json_serialization_size_pretty+0x2a>
 801c758:	2300      	movs	r3, #0
}
 801c75a:	4618      	mov	r0, r3
 801c75c:	3750      	adds	r7, #80	; 0x50
 801c75e:	46bd      	mov	sp, r7
 801c760:	bd80      	pop	{r7, pc}

0801c762 <json_serialize_to_buffer_pretty>:

JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801c762:	b580      	push	{r7, lr}
 801c764:	b088      	sub	sp, #32
 801c766:	af02      	add	r7, sp, #8
 801c768:	60f8      	str	r0, [r7, #12]
 801c76a:	60b9      	str	r1, [r7, #8]
 801c76c:	607a      	str	r2, [r7, #4]
    int written = -1;
 801c76e:	f04f 33ff 	mov.w	r3, #4294967295
 801c772:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size_pretty(value);
 801c774:	68f8      	ldr	r0, [r7, #12]
 801c776:	f7ff ffdb 	bl	801c730 <json_serialization_size_pretty>
 801c77a:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801c77c:	693b      	ldr	r3, [r7, #16]
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d003      	beq.n	801c78a <json_serialize_to_buffer_pretty+0x28>
 801c782:	687a      	ldr	r2, [r7, #4]
 801c784:	693b      	ldr	r3, [r7, #16]
 801c786:	429a      	cmp	r2, r3
 801c788:	d202      	bcs.n	801c790 <json_serialize_to_buffer_pretty+0x2e>
        return JSONFailure;
 801c78a:	f04f 33ff 	mov.w	r3, #4294967295
 801c78e:	e00f      	b.n	801c7b0 <json_serialize_to_buffer_pretty+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 1, NULL);
 801c790:	2300      	movs	r3, #0
 801c792:	9300      	str	r3, [sp, #0]
 801c794:	2301      	movs	r3, #1
 801c796:	2200      	movs	r2, #0
 801c798:	68b9      	ldr	r1, [r7, #8]
 801c79a:	68f8      	ldr	r0, [r7, #12]
 801c79c:	f7fe fc5e 	bl	801b05c <json_serialize_to_buffer_r>
 801c7a0:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801c7a2:	697b      	ldr	r3, [r7, #20]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	da02      	bge.n	801c7ae <json_serialize_to_buffer_pretty+0x4c>
        return JSONFailure;
 801c7a8:	f04f 33ff 	mov.w	r3, #4294967295
 801c7ac:	e000      	b.n	801c7b0 <json_serialize_to_buffer_pretty+0x4e>
    }
    return JSONSuccess;
 801c7ae:	2300      	movs	r3, #0
}
 801c7b0:	4618      	mov	r0, r3
 801c7b2:	3718      	adds	r7, #24
 801c7b4:	46bd      	mov	sp, r7
 801c7b6:	bd80      	pop	{r7, pc}

0801c7b8 <json_serialize_to_string_pretty>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string_pretty(const JSON_Value *value) {
 801c7b8:	b580      	push	{r7, lr}
 801c7ba:	b086      	sub	sp, #24
 801c7bc:	af00      	add	r7, sp, #0
 801c7be:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801c7c0:	f04f 33ff 	mov.w	r3, #4294967295
 801c7c4:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size_pretty(value);
 801c7c6:	6878      	ldr	r0, [r7, #4]
 801c7c8:	f7ff ffb2 	bl	801c730 <json_serialization_size_pretty>
 801c7cc:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801c7ce:	2300      	movs	r3, #0
 801c7d0:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801c7d2:	693b      	ldr	r3, [r7, #16]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d101      	bne.n	801c7dc <json_serialize_to_string_pretty+0x24>
        return NULL;
 801c7d8:	2300      	movs	r3, #0
 801c7da:	e019      	b.n	801c810 <json_serialize_to_string_pretty+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801c7dc:	4b0e      	ldr	r3, [pc, #56]	; (801c818 <json_serialize_to_string_pretty+0x60>)
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	6938      	ldr	r0, [r7, #16]
 801c7e2:	4798      	blx	r3
 801c7e4:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d101      	bne.n	801c7f0 <json_serialize_to_string_pretty+0x38>
        return NULL;
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	e00f      	b.n	801c810 <json_serialize_to_string_pretty+0x58>
    }
    serialization_result = json_serialize_to_buffer_pretty(value, buf, buf_size_bytes);
 801c7f0:	693a      	ldr	r2, [r7, #16]
 801c7f2:	68f9      	ldr	r1, [r7, #12]
 801c7f4:	6878      	ldr	r0, [r7, #4]
 801c7f6:	f7ff ffb4 	bl	801c762 <json_serialize_to_buffer_pretty>
 801c7fa:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801c7fc:	697b      	ldr	r3, [r7, #20]
 801c7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c802:	d104      	bne.n	801c80e <json_serialize_to_string_pretty+0x56>
        json_free_serialized_string(buf);
 801c804:	68f8      	ldr	r0, [r7, #12]
 801c806:	f000 f809 	bl	801c81c <json_free_serialized_string>
        return NULL;
 801c80a:	2300      	movs	r3, #0
 801c80c:	e000      	b.n	801c810 <json_serialize_to_string_pretty+0x58>
    }
    return buf;
 801c80e:	68fb      	ldr	r3, [r7, #12]
}
 801c810:	4618      	mov	r0, r3
 801c812:	3718      	adds	r7, #24
 801c814:	46bd      	mov	sp, r7
 801c816:	bd80      	pop	{r7, pc}
 801c818:	20000084 	.word	0x20000084

0801c81c <json_free_serialized_string>:

void json_free_serialized_string(char *string) {
 801c81c:	b580      	push	{r7, lr}
 801c81e:	b082      	sub	sp, #8
 801c820:	af00      	add	r7, sp, #0
 801c822:	6078      	str	r0, [r7, #4]
    parson_free(string);
 801c824:	4b03      	ldr	r3, [pc, #12]	; (801c834 <json_free_serialized_string+0x18>)
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	6878      	ldr	r0, [r7, #4]
 801c82a:	4798      	blx	r3
}
 801c82c:	bf00      	nop
 801c82e:	3708      	adds	r7, #8
 801c830:	46bd      	mov	sp, r7
 801c832:	bd80      	pop	{r7, pc}
 801c834:	20000088 	.word	0x20000088

0801c838 <json_array_append_value>:
    }
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
 801c838:	b580      	push	{r7, lr}
 801c83a:	b082      	sub	sp, #8
 801c83c:	af00      	add	r7, sp, #0
 801c83e:	6078      	str	r0, [r7, #4]
 801c840:	6039      	str	r1, [r7, #0]
    if (array == NULL || value == NULL || value->parent != NULL) {
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d006      	beq.n	801c856 <json_array_append_value+0x1e>
 801c848:	683b      	ldr	r3, [r7, #0]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d003      	beq.n	801c856 <json_array_append_value+0x1e>
 801c84e:	683b      	ldr	r3, [r7, #0]
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	2b00      	cmp	r3, #0
 801c854:	d002      	beq.n	801c85c <json_array_append_value+0x24>
        return JSONFailure;
 801c856:	f04f 33ff 	mov.w	r3, #4294967295
 801c85a:	e004      	b.n	801c866 <json_array_append_value+0x2e>
    }
    return json_array_add(array, value);
 801c85c:	6839      	ldr	r1, [r7, #0]
 801c85e:	6878      	ldr	r0, [r7, #4]
 801c860:	f7fd fdda 	bl	801a418 <json_array_add>
 801c864:	4603      	mov	r3, r0
}
 801c866:	4618      	mov	r0, r3
 801c868:	3708      	adds	r7, #8
 801c86a:	46bd      	mov	sp, r7
 801c86c:	bd80      	pop	{r7, pc}

0801c86e <json_array_append_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_array_append_number(JSON_Array *array, double number) {
 801c86e:	b580      	push	{r7, lr}
 801c870:	b086      	sub	sp, #24
 801c872:	af00      	add	r7, sp, #0
 801c874:	60f8      	str	r0, [r7, #12]
 801c876:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801c87a:	ed97 0b00 	vldr	d0, [r7]
 801c87e:	f7ff fe51 	bl	801c524 <json_value_init_number>
 801c882:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801c884:	697b      	ldr	r3, [r7, #20]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d102      	bne.n	801c890 <json_array_append_number+0x22>
        return JSONFailure;
 801c88a:	f04f 33ff 	mov.w	r3, #4294967295
 801c88e:	e00e      	b.n	801c8ae <json_array_append_number+0x40>
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 801c890:	6979      	ldr	r1, [r7, #20]
 801c892:	68f8      	ldr	r0, [r7, #12]
 801c894:	f7ff ffd0 	bl	801c838 <json_array_append_value>
 801c898:	4603      	mov	r3, r0
 801c89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c89e:	d105      	bne.n	801c8ac <json_array_append_number+0x3e>
        json_value_free(value);
 801c8a0:	6978      	ldr	r0, [r7, #20]
 801c8a2:	f7ff fd83 	bl	801c3ac <json_value_free>
        return JSONFailure;
 801c8a6:	f04f 33ff 	mov.w	r3, #4294967295
 801c8aa:	e000      	b.n	801c8ae <json_array_append_number+0x40>
    }
    return JSONSuccess;
 801c8ac:	2300      	movs	r3, #0
}
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	3718      	adds	r7, #24
 801c8b2:	46bd      	mov	sp, r7
 801c8b4:	bd80      	pop	{r7, pc}

0801c8b6 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801c8b6:	b580      	push	{r7, lr}
 801c8b8:	b086      	sub	sp, #24
 801c8ba:	af00      	add	r7, sp, #0
 801c8bc:	60f8      	str	r0, [r7, #12]
 801c8be:	60b9      	str	r1, [r7, #8]
 801c8c0:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 801c8c2:	2300      	movs	r3, #0
 801c8c4:	617b      	str	r3, [r7, #20]
    JSON_Value *old_value;
    if (object == NULL || name == NULL || value == NULL || value->parent != NULL) {
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d009      	beq.n	801c8e0 <json_object_set_value+0x2a>
 801c8cc:	68bb      	ldr	r3, [r7, #8]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d006      	beq.n	801c8e0 <json_object_set_value+0x2a>
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d003      	beq.n	801c8e0 <json_object_set_value+0x2a>
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	681b      	ldr	r3, [r3, #0]
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	d002      	beq.n	801c8e6 <json_object_set_value+0x30>
        return JSONFailure;
 801c8e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c8e4:	e039      	b.n	801c95a <json_object_set_value+0xa4>
    }
    old_value = json_object_get_value(object, name);
 801c8e6:	68b9      	ldr	r1, [r7, #8]
 801c8e8:	68f8      	ldr	r0, [r7, #12]
 801c8ea:	f7ff fbd1 	bl	801c090 <json_object_get_value>
 801c8ee:	6138      	str	r0, [r7, #16]
    if (old_value != NULL) { /* free and overwrite old value */
 801c8f0:	693b      	ldr	r3, [r7, #16]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d02b      	beq.n	801c94e <json_object_set_value+0x98>
        json_value_free(old_value);
 801c8f6:	6938      	ldr	r0, [r7, #16]
 801c8f8:	f7ff fd58 	bl	801c3ac <json_value_free>
        for (i = 0; i < json_object_get_count(object); i++) {
 801c8fc:	2300      	movs	r3, #0
 801c8fe:	617b      	str	r3, [r7, #20]
 801c900:	e01e      	b.n	801c940 <json_object_set_value+0x8a>
            if (strcmp(object->names[i], name) == 0) {
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	685a      	ldr	r2, [r3, #4]
 801c906:	697b      	ldr	r3, [r7, #20]
 801c908:	009b      	lsls	r3, r3, #2
 801c90a:	4413      	add	r3, r2
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	68b9      	ldr	r1, [r7, #8]
 801c910:	4618      	mov	r0, r3
 801c912:	f7e3 fc75 	bl	8000200 <strcmp>
 801c916:	4603      	mov	r3, r0
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d10e      	bne.n	801c93a <json_object_set_value+0x84>
                value->parent = json_object_get_wrapping_value(object);
 801c91c:	68f8      	ldr	r0, [r7, #12]
 801c91e:	f7ff fc65 	bl	801c1ec <json_object_get_wrapping_value>
 801c922:	4602      	mov	r2, r0
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	601a      	str	r2, [r3, #0]
                object->values[i] = value;
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	689a      	ldr	r2, [r3, #8]
 801c92c:	697b      	ldr	r3, [r7, #20]
 801c92e:	009b      	lsls	r3, r3, #2
 801c930:	4413      	add	r3, r2
 801c932:	687a      	ldr	r2, [r7, #4]
 801c934:	601a      	str	r2, [r3, #0]
                return JSONSuccess;
 801c936:	2300      	movs	r3, #0
 801c938:	e00f      	b.n	801c95a <json_object_set_value+0xa4>
        for (i = 0; i < json_object_get_count(object); i++) {
 801c93a:	697b      	ldr	r3, [r7, #20]
 801c93c:	3301      	adds	r3, #1
 801c93e:	617b      	str	r3, [r7, #20]
 801c940:	68f8      	ldr	r0, [r7, #12]
 801c942:	f7ff fc27 	bl	801c194 <json_object_get_count>
 801c946:	4602      	mov	r2, r0
 801c948:	697b      	ldr	r3, [r7, #20]
 801c94a:	4293      	cmp	r3, r2
 801c94c:	d3d9      	bcc.n	801c902 <json_object_set_value+0x4c>
            }
        }
    }
    /* add new key value pair */
    return json_object_add(object, name, value);
 801c94e:	687a      	ldr	r2, [r7, #4]
 801c950:	68b9      	ldr	r1, [r7, #8]
 801c952:	68f8      	ldr	r0, [r7, #12]
 801c954:	f7fd fb1a 	bl	8019f8c <json_object_add>
 801c958:	4603      	mov	r3, r0
}
 801c95a:	4618      	mov	r0, r3
 801c95c:	3718      	adds	r7, #24
 801c95e:	46bd      	mov	sp, r7
 801c960:	bd80      	pop	{r7, pc}

0801c962 <json_object_dotset_value>:

JSON_Status json_object_set_null(JSON_Object *object, const char *name) {
    return json_object_set_value(object, name, json_value_init_null());
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801c962:	b580      	push	{r7, lr}
 801c964:	b08c      	sub	sp, #48	; 0x30
 801c966:	af00      	add	r7, sp, #0
 801c968:	60f8      	str	r0, [r7, #12]
 801c96a:	60b9      	str	r1, [r7, #8]
 801c96c:	607a      	str	r2, [r7, #4]
    const char *dot_pos = NULL;
 801c96e:	2300      	movs	r3, #0
 801c970:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Value *temp_value = NULL, *new_value = NULL;
 801c972:	2300      	movs	r3, #0
 801c974:	62bb      	str	r3, [r7, #40]	; 0x28
 801c976:	2300      	movs	r3, #0
 801c978:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Object *temp_object = NULL, *new_object = NULL;
 801c97a:	2300      	movs	r3, #0
 801c97c:	623b      	str	r3, [r7, #32]
 801c97e:	2300      	movs	r3, #0
 801c980:	61fb      	str	r3, [r7, #28]
    JSON_Status status = JSONFailure;
 801c982:	f04f 33ff 	mov.w	r3, #4294967295
 801c986:	61bb      	str	r3, [r7, #24]
    size_t name_len = 0;
 801c988:	2300      	movs	r3, #0
 801c98a:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d005      	beq.n	801c99e <json_object_dotset_value+0x3c>
 801c992:	68bb      	ldr	r3, [r7, #8]
 801c994:	2b00      	cmp	r3, #0
 801c996:	d002      	beq.n	801c99e <json_object_dotset_value+0x3c>
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d102      	bne.n	801c9a4 <json_object_dotset_value+0x42>
        return JSONFailure;
 801c99e:	f04f 33ff 	mov.w	r3, #4294967295
 801c9a2:	e067      	b.n	801ca74 <json_object_dotset_value+0x112>
    }
    dot_pos = strchr(name, '.');
 801c9a4:	212e      	movs	r1, #46	; 0x2e
 801c9a6:	68b8      	ldr	r0, [r7, #8]
 801c9a8:	f001 fa22 	bl	801ddf0 <strchr>
 801c9ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (dot_pos == NULL) {
 801c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d106      	bne.n	801c9c2 <json_object_dotset_value+0x60>
        return json_object_set_value(object, name, value);
 801c9b4:	687a      	ldr	r2, [r7, #4]
 801c9b6:	68b9      	ldr	r1, [r7, #8]
 801c9b8:	68f8      	ldr	r0, [r7, #12]
 801c9ba:	f7ff ff7c 	bl	801c8b6 <json_object_set_value>
 801c9be:	4603      	mov	r3, r0
 801c9c0:	e058      	b.n	801ca74 <json_object_dotset_value+0x112>
    }
    name_len = dot_pos - name;
 801c9c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c9c4:	68bb      	ldr	r3, [r7, #8]
 801c9c6:	1ad3      	subs	r3, r2, r3
 801c9c8:	617b      	str	r3, [r7, #20]
    temp_value = json_object_getn_value(object, name, name_len);
 801c9ca:	697a      	ldr	r2, [r7, #20]
 801c9cc:	68b9      	ldr	r1, [r7, #8]
 801c9ce:	68f8      	ldr	r0, [r7, #12]
 801c9d0:	f7fd fbd8 	bl	801a184 <json_object_getn_value>
 801c9d4:	62b8      	str	r0, [r7, #40]	; 0x28
    if (temp_value) {
 801c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	d015      	beq.n	801ca08 <json_object_dotset_value+0xa6>
        /* Don't overwrite existing non-object (unlike json_object_set_value, but it shouldn't be changed at this point) */
        if (json_value_get_type(temp_value) != JSONObject) {
 801c9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c9de:	f7ff fc6e 	bl	801c2be <json_value_get_type>
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	2b04      	cmp	r3, #4
 801c9e6:	d002      	beq.n	801c9ee <json_object_dotset_value+0x8c>
            return JSONFailure;
 801c9e8:	f04f 33ff 	mov.w	r3, #4294967295
 801c9ec:	e042      	b.n	801ca74 <json_object_dotset_value+0x112>
        }
        temp_object = json_value_get_object(temp_value);
 801c9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c9f0:	f7ff fc77 	bl	801c2e2 <json_value_get_object>
 801c9f4:	6238      	str	r0, [r7, #32]
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 801c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9f8:	3301      	adds	r3, #1
 801c9fa:	687a      	ldr	r2, [r7, #4]
 801c9fc:	4619      	mov	r1, r3
 801c9fe:	6a38      	ldr	r0, [r7, #32]
 801ca00:	f7ff ffaf 	bl	801c962 <json_object_dotset_value>
 801ca04:	4603      	mov	r3, r0
 801ca06:	e035      	b.n	801ca74 <json_object_dotset_value+0x112>
    }
    new_value = json_value_init_object();
 801ca08:	f7ff fcfe 	bl	801c408 <json_value_init_object>
 801ca0c:	6278      	str	r0, [r7, #36]	; 0x24
    if (new_value == NULL) {
 801ca0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d102      	bne.n	801ca1a <json_object_dotset_value+0xb8>
        return JSONFailure;
 801ca14:	f04f 33ff 	mov.w	r3, #4294967295
 801ca18:	e02c      	b.n	801ca74 <json_object_dotset_value+0x112>
    }
    new_object = json_value_get_object(new_value);
 801ca1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ca1c:	f7ff fc61 	bl	801c2e2 <json_value_get_object>
 801ca20:	61f8      	str	r0, [r7, #28]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 801ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca24:	3301      	adds	r3, #1
 801ca26:	687a      	ldr	r2, [r7, #4]
 801ca28:	4619      	mov	r1, r3
 801ca2a:	69f8      	ldr	r0, [r7, #28]
 801ca2c:	f7ff ff99 	bl	801c962 <json_object_dotset_value>
 801ca30:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801ca32:	69bb      	ldr	r3, [r7, #24]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d005      	beq.n	801ca44 <json_object_dotset_value+0xe2>
        json_value_free(new_value);
 801ca38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ca3a:	f7ff fcb7 	bl	801c3ac <json_value_free>
        return JSONFailure;
 801ca3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca42:	e017      	b.n	801ca74 <json_object_dotset_value+0x112>
    }
    status = json_object_addn(object, name, name_len, new_value);
 801ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca46:	697a      	ldr	r2, [r7, #20]
 801ca48:	68b9      	ldr	r1, [r7, #8]
 801ca4a:	68f8      	ldr	r0, [r7, #12]
 801ca4c:	f7fd fab8 	bl	8019fc0 <json_object_addn>
 801ca50:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801ca52:	69bb      	ldr	r3, [r7, #24]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d00c      	beq.n	801ca72 <json_object_dotset_value+0x110>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 801ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca5a:	3301      	adds	r3, #1
 801ca5c:	2200      	movs	r2, #0
 801ca5e:	4619      	mov	r1, r3
 801ca60:	69f8      	ldr	r0, [r7, #28]
 801ca62:	f7fd fc43 	bl	801a2ec <json_object_dotremove_internal>
        json_value_free(new_value);
 801ca66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ca68:	f7ff fca0 	bl	801c3ac <json_value_free>
        return JSONFailure;
 801ca6c:	f04f 33ff 	mov.w	r3, #4294967295
 801ca70:	e000      	b.n	801ca74 <json_object_dotset_value+0x112>
    }
    return JSONSuccess;
 801ca72:	2300      	movs	r3, #0
}
 801ca74:	4618      	mov	r0, r3
 801ca76:	3730      	adds	r7, #48	; 0x30
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bd80      	pop	{r7, pc}

0801ca7c <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801ca7c:	b580      	push	{r7, lr}
 801ca7e:	b086      	sub	sp, #24
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	60f8      	str	r0, [r7, #12]
 801ca84:	60b9      	str	r1, [r7, #8]
 801ca86:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_string(string);
 801ca88:	6878      	ldr	r0, [r7, #4]
 801ca8a:	f7ff fd15 	bl	801c4b8 <json_value_init_string>
 801ca8e:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801ca90:	697b      	ldr	r3, [r7, #20]
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d102      	bne.n	801ca9c <json_object_dotset_string+0x20>
        return JSONFailure;
 801ca96:	f04f 33ff 	mov.w	r3, #4294967295
 801ca9a:	e00f      	b.n	801cabc <json_object_dotset_string+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801ca9c:	697a      	ldr	r2, [r7, #20]
 801ca9e:	68b9      	ldr	r1, [r7, #8]
 801caa0:	68f8      	ldr	r0, [r7, #12]
 801caa2:	f7ff ff5e 	bl	801c962 <json_object_dotset_value>
 801caa6:	4603      	mov	r3, r0
 801caa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801caac:	d105      	bne.n	801caba <json_object_dotset_string+0x3e>
        json_value_free(value);
 801caae:	6978      	ldr	r0, [r7, #20]
 801cab0:	f7ff fc7c 	bl	801c3ac <json_value_free>
        return JSONFailure;
 801cab4:	f04f 33ff 	mov.w	r3, #4294967295
 801cab8:	e000      	b.n	801cabc <json_object_dotset_string+0x40>
    }
    return JSONSuccess;
 801caba:	2300      	movs	r3, #0
}
 801cabc:	4618      	mov	r0, r3
 801cabe:	3718      	adds	r7, #24
 801cac0:	46bd      	mov	sp, r7
 801cac2:	bd80      	pop	{r7, pc}

0801cac4 <json_object_dotset_number>:

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b086      	sub	sp, #24
 801cac8:	af00      	add	r7, sp, #0
 801caca:	60f8      	str	r0, [r7, #12]
 801cacc:	60b9      	str	r1, [r7, #8]
 801cace:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801cad2:	ed97 0b00 	vldr	d0, [r7]
 801cad6:	f7ff fd25 	bl	801c524 <json_value_init_number>
 801cada:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801cadc:	697b      	ldr	r3, [r7, #20]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d102      	bne.n	801cae8 <json_object_dotset_number+0x24>
        return JSONFailure;
 801cae2:	f04f 33ff 	mov.w	r3, #4294967295
 801cae6:	e00f      	b.n	801cb08 <json_object_dotset_number+0x44>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801cae8:	697a      	ldr	r2, [r7, #20]
 801caea:	68b9      	ldr	r1, [r7, #8]
 801caec:	68f8      	ldr	r0, [r7, #12]
 801caee:	f7ff ff38 	bl	801c962 <json_object_dotset_value>
 801caf2:	4603      	mov	r3, r0
 801caf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801caf8:	d105      	bne.n	801cb06 <json_object_dotset_number+0x42>
        json_value_free(value);
 801cafa:	6978      	ldr	r0, [r7, #20]
 801cafc:	f7ff fc56 	bl	801c3ac <json_value_free>
        return JSONFailure;
 801cb00:	f04f 33ff 	mov.w	r3, #4294967295
 801cb04:	e000      	b.n	801cb08 <json_object_dotset_number+0x44>
    }
    return JSONSuccess;
 801cb06:	2300      	movs	r3, #0
}
 801cb08:	4618      	mov	r0, r3
 801cb0a:	3718      	adds	r7, #24
 801cb0c:	46bd      	mov	sp, r7
 801cb0e:	bd80      	pop	{r7, pc}

0801cb10 <json_object_dotset_boolean>:

JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 801cb10:	b580      	push	{r7, lr}
 801cb12:	b086      	sub	sp, #24
 801cb14:	af00      	add	r7, sp, #0
 801cb16:	60f8      	str	r0, [r7, #12]
 801cb18:	60b9      	str	r1, [r7, #8]
 801cb1a:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_boolean(boolean);
 801cb1c:	6878      	ldr	r0, [r7, #4]
 801cb1e:	f7ff fd53 	bl	801c5c8 <json_value_init_boolean>
 801cb22:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801cb24:	697b      	ldr	r3, [r7, #20]
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d102      	bne.n	801cb30 <json_object_dotset_boolean+0x20>
        return JSONFailure;
 801cb2a:	f04f 33ff 	mov.w	r3, #4294967295
 801cb2e:	e00f      	b.n	801cb50 <json_object_dotset_boolean+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801cb30:	697a      	ldr	r2, [r7, #20]
 801cb32:	68b9      	ldr	r1, [r7, #8]
 801cb34:	68f8      	ldr	r0, [r7, #12]
 801cb36:	f7ff ff14 	bl	801c962 <json_object_dotset_value>
 801cb3a:	4603      	mov	r3, r0
 801cb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb40:	d105      	bne.n	801cb4e <json_object_dotset_boolean+0x3e>
        json_value_free(value);
 801cb42:	6978      	ldr	r0, [r7, #20]
 801cb44:	f7ff fc32 	bl	801c3ac <json_value_free>
        return JSONFailure;
 801cb48:	f04f 33ff 	mov.w	r3, #4294967295
 801cb4c:	e000      	b.n	801cb50 <json_object_dotset_boolean+0x40>
    }
    return JSONSuccess;
 801cb4e:	2300      	movs	r3, #0
}
 801cb50:	4618      	mov	r0, r3
 801cb52:	3718      	adds	r7, #24
 801cb54:	46bd      	mov	sp, r7
 801cb56:	bd80      	pop	{r7, pc}

0801cb58 <json_set_allocation_functions>:

int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
 801cb58:	b480      	push	{r7}
 801cb5a:	b083      	sub	sp, #12
 801cb5c:	af00      	add	r7, sp, #0
 801cb5e:	6078      	str	r0, [r7, #4]
 801cb60:	6039      	str	r1, [r7, #0]
    parson_malloc = malloc_fun;
 801cb62:	4a06      	ldr	r2, [pc, #24]	; (801cb7c <json_set_allocation_functions+0x24>)
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	6013      	str	r3, [r2, #0]
    parson_free = free_fun;
 801cb68:	4a05      	ldr	r2, [pc, #20]	; (801cb80 <json_set_allocation_functions+0x28>)
 801cb6a:	683b      	ldr	r3, [r7, #0]
 801cb6c:	6013      	str	r3, [r2, #0]
}
 801cb6e:	bf00      	nop
 801cb70:	370c      	adds	r7, #12
 801cb72:	46bd      	mov	sp, r7
 801cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb78:	4770      	bx	lr
 801cb7a:	bf00      	nop
 801cb7c:	20000084 	.word	0x20000084
 801cb80:	20000088 	.word	0x20000088

0801cb84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801cb84:	480d      	ldr	r0, [pc, #52]	; (801cbbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801cb86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 801cb88:	f7e8 f902 	bl	8004d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801cb8c:	480c      	ldr	r0, [pc, #48]	; (801cbc0 <LoopForever+0x6>)
  ldr r1, =_edata
 801cb8e:	490d      	ldr	r1, [pc, #52]	; (801cbc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 801cb90:	4a0d      	ldr	r2, [pc, #52]	; (801cbc8 <LoopForever+0xe>)
  movs r3, #0
 801cb92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801cb94:	e002      	b.n	801cb9c <LoopCopyDataInit>

0801cb96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801cb96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801cb98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801cb9a:	3304      	adds	r3, #4

0801cb9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801cb9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801cb9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801cba0:	d3f9      	bcc.n	801cb96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801cba2:	4a0a      	ldr	r2, [pc, #40]	; (801cbcc <LoopForever+0x12>)
  ldr r4, =_ebss
 801cba4:	4c0a      	ldr	r4, [pc, #40]	; (801cbd0 <LoopForever+0x16>)
  movs r3, #0
 801cba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 801cba8:	e001      	b.n	801cbae <LoopFillZerobss>

0801cbaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801cbaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801cbac:	3204      	adds	r2, #4

0801cbae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801cbae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801cbb0:	d3fb      	bcc.n	801cbaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 801cbb2:	f000 fa91 	bl	801d0d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801cbb6:	f7e5 ff8b 	bl	8002ad0 <main>

0801cbba <LoopForever>:

LoopForever:
    b LoopForever
 801cbba:	e7fe      	b.n	801cbba <LoopForever>
  ldr   r0, =_estack
 801cbbc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 801cbc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801cbc4:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 801cbc8:	080223d4 	.word	0x080223d4
  ldr r2, =_sbss
 801cbcc:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 801cbd0:	20019224 	.word	0x20019224

0801cbd4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801cbd4:	e7fe      	b.n	801cbd4 <ADC1_IRQHandler>
	...

0801cbd8 <_sbrk>:




caddr_t _sbrk(int incr)
{
 801cbd8:	b580      	push	{r7, lr}
 801cbda:	b084      	sub	sp, #16
 801cbdc:	af00      	add	r7, sp, #0
 801cbde:	6078      	str	r0, [r7, #4]
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 801cbe0:	4b15      	ldr	r3, [pc, #84]	; (801cc38 <_sbrk+0x60>)
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d102      	bne.n	801cbee <_sbrk+0x16>
		heap_end = &end;
 801cbe8:	4b13      	ldr	r3, [pc, #76]	; (801cc38 <_sbrk+0x60>)
 801cbea:	4a14      	ldr	r2, [pc, #80]	; (801cc3c <_sbrk+0x64>)
 801cbec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801cbee:	4b12      	ldr	r3, [pc, #72]	; (801cc38 <_sbrk+0x60>)
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 801cbf4:	4b12      	ldr	r3, [pc, #72]	; (801cc40 <_sbrk+0x68>)
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 801cbfc:	68bb      	ldr	r3, [r7, #8]
 801cbfe:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 801cc02:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 801cc04:	4b0c      	ldr	r3, [pc, #48]	; (801cc38 <_sbrk+0x60>)
 801cc06:	681a      	ldr	r2, [r3, #0]
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	4413      	add	r3, r2
 801cc0c:	68ba      	ldr	r2, [r7, #8]
 801cc0e:	429a      	cmp	r2, r3
 801cc10:	d207      	bcs.n	801cc22 <_sbrk+0x4a>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801cc12:	f000 f8a3 	bl	801cd5c <__errno>
 801cc16:	4603      	mov	r3, r0
 801cc18:	220c      	movs	r2, #12
 801cc1a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801cc1c:	f04f 33ff 	mov.w	r3, #4294967295
 801cc20:	e006      	b.n	801cc30 <_sbrk+0x58>
	}

	heap_end += incr;
 801cc22:	4b05      	ldr	r3, [pc, #20]	; (801cc38 <_sbrk+0x60>)
 801cc24:	681a      	ldr	r2, [r3, #0]
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	4413      	add	r3, r2
 801cc2a:	4a03      	ldr	r2, [pc, #12]	; (801cc38 <_sbrk+0x60>)
 801cc2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801cc2e:	68fb      	ldr	r3, [r7, #12]
}
 801cc30:	4618      	mov	r0, r3
 801cc32:	3710      	adds	r7, #16
 801cc34:	46bd      	mov	sp, r7
 801cc36:	bd80      	pop	{r7, pc}
 801cc38:	2000fe6c 	.word	0x2000fe6c
 801cc3c:	20019228 	.word	0x20019228
 801cc40:	e000ed08 	.word	0xe000ed08

0801cc44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801cc44:	b480      	push	{r7}
 801cc46:	af00      	add	r7, sp, #0
	return 1;
 801cc48:	2301      	movs	r3, #1
}
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc52:	4770      	bx	lr

0801cc54 <_kill>:

int _kill(int pid, int sig)
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b082      	sub	sp, #8
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
 801cc5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801cc5e:	f000 f87d 	bl	801cd5c <__errno>
 801cc62:	4603      	mov	r3, r0
 801cc64:	2216      	movs	r2, #22
 801cc66:	601a      	str	r2, [r3, #0]
	return -1;
 801cc68:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cc6c:	4618      	mov	r0, r3
 801cc6e:	3708      	adds	r7, #8
 801cc70:	46bd      	mov	sp, r7
 801cc72:	bd80      	pop	{r7, pc}

0801cc74 <_exit>:

void _exit (int status)
{
 801cc74:	b580      	push	{r7, lr}
 801cc76:	b082      	sub	sp, #8
 801cc78:	af00      	add	r7, sp, #0
 801cc7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801cc7c:	f04f 31ff 	mov.w	r1, #4294967295
 801cc80:	6878      	ldr	r0, [r7, #4]
 801cc82:	f7ff ffe7 	bl	801cc54 <_kill>
	while (1) {}
 801cc86:	e7fe      	b.n	801cc86 <_exit+0x12>

0801cc88 <_write>:
}

int _write(int file, char *ptr, int len)
{
 801cc88:	b580      	push	{r7, lr}
 801cc8a:	b086      	sub	sp, #24
 801cc8c:	af00      	add	r7, sp, #0
 801cc8e:	60f8      	str	r0, [r7, #12]
 801cc90:	60b9      	str	r1, [r7, #8]
 801cc92:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801cc94:	2300      	movs	r3, #0
 801cc96:	617b      	str	r3, [r7, #20]
 801cc98:	e009      	b.n	801ccae <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 801cc9a:	68bb      	ldr	r3, [r7, #8]
 801cc9c:	1c5a      	adds	r2, r3, #1
 801cc9e:	60ba      	str	r2, [r7, #8]
 801cca0:	781b      	ldrb	r3, [r3, #0]
 801cca2:	4618      	mov	r0, r3
 801cca4:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801cca8:	697b      	ldr	r3, [r7, #20]
 801ccaa:	3301      	adds	r3, #1
 801ccac:	617b      	str	r3, [r7, #20]
 801ccae:	697a      	ldr	r2, [r7, #20]
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	429a      	cmp	r2, r3
 801ccb4:	dbf1      	blt.n	801cc9a <_write+0x12>
		}
	return len;
 801ccb6:	687b      	ldr	r3, [r7, #4]
}
 801ccb8:	4618      	mov	r0, r3
 801ccba:	3718      	adds	r7, #24
 801ccbc:	46bd      	mov	sp, r7
 801ccbe:	bd80      	pop	{r7, pc}

0801ccc0 <_close>:

int _close(int file)
{
 801ccc0:	b480      	push	{r7}
 801ccc2:	b083      	sub	sp, #12
 801ccc4:	af00      	add	r7, sp, #0
 801ccc6:	6078      	str	r0, [r7, #4]
	return -1;
 801ccc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cccc:	4618      	mov	r0, r3
 801ccce:	370c      	adds	r7, #12
 801ccd0:	46bd      	mov	sp, r7
 801ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccd6:	4770      	bx	lr

0801ccd8 <_fstat>:

int _fstat(int file, struct stat *st)
{
 801ccd8:	b480      	push	{r7}
 801ccda:	b083      	sub	sp, #12
 801ccdc:	af00      	add	r7, sp, #0
 801ccde:	6078      	str	r0, [r7, #4]
 801cce0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801cce2:	683b      	ldr	r3, [r7, #0]
 801cce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801cce8:	605a      	str	r2, [r3, #4]
	return 0;
 801ccea:	2300      	movs	r3, #0
}
 801ccec:	4618      	mov	r0, r3
 801ccee:	370c      	adds	r7, #12
 801ccf0:	46bd      	mov	sp, r7
 801ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccf6:	4770      	bx	lr

0801ccf8 <_isatty>:

int _isatty(int file)
{
 801ccf8:	b480      	push	{r7}
 801ccfa:	b083      	sub	sp, #12
 801ccfc:	af00      	add	r7, sp, #0
 801ccfe:	6078      	str	r0, [r7, #4]
	return 1;
 801cd00:	2301      	movs	r3, #1
}
 801cd02:	4618      	mov	r0, r3
 801cd04:	370c      	adds	r7, #12
 801cd06:	46bd      	mov	sp, r7
 801cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd0c:	4770      	bx	lr

0801cd0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801cd0e:	b480      	push	{r7}
 801cd10:	b085      	sub	sp, #20
 801cd12:	af00      	add	r7, sp, #0
 801cd14:	60f8      	str	r0, [r7, #12]
 801cd16:	60b9      	str	r1, [r7, #8]
 801cd18:	607a      	str	r2, [r7, #4]
	return 0;
 801cd1a:	2300      	movs	r3, #0
}
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	3714      	adds	r7, #20
 801cd20:	46bd      	mov	sp, r7
 801cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd26:	4770      	bx	lr

0801cd28 <_read>:

int _read(int file, char *ptr, int len)
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b084      	sub	sp, #16
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	60f8      	str	r0, [r7, #12]
 801cd30:	60b9      	str	r1, [r7, #8]
 801cd32:	607a      	str	r2, [r7, #4]
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 801cd34:	f3af 8000 	nop.w
 801cd38:	4603      	mov	r3, r0
 801cd3a:	b2da      	uxtb	r2, r3
 801cd3c:	68bb      	ldr	r3, [r7, #8]
 801cd3e:	701a      	strb	r2, [r3, #0]
	return 1;
 801cd40:	2301      	movs	r3, #1
}
 801cd42:	4618      	mov	r0, r3
 801cd44:	3710      	adds	r7, #16
 801cd46:	46bd      	mov	sp, r7
 801cd48:	bd80      	pop	{r7, pc}
	...

0801cd4c <calloc>:
 801cd4c:	4b02      	ldr	r3, [pc, #8]	; (801cd58 <calloc+0xc>)
 801cd4e:	460a      	mov	r2, r1
 801cd50:	4601      	mov	r1, r0
 801cd52:	6818      	ldr	r0, [r3, #0]
 801cd54:	f000 baa6 	b.w	801d2a4 <_calloc_r>
 801cd58:	2000008c 	.word	0x2000008c

0801cd5c <__errno>:
 801cd5c:	4b01      	ldr	r3, [pc, #4]	; (801cd64 <__errno+0x8>)
 801cd5e:	6818      	ldr	r0, [r3, #0]
 801cd60:	4770      	bx	lr
 801cd62:	bf00      	nop
 801cd64:	2000008c 	.word	0x2000008c

0801cd68 <__sflush_r>:
 801cd68:	898a      	ldrh	r2, [r1, #12]
 801cd6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd6e:	4605      	mov	r5, r0
 801cd70:	0710      	lsls	r0, r2, #28
 801cd72:	460c      	mov	r4, r1
 801cd74:	d458      	bmi.n	801ce28 <__sflush_r+0xc0>
 801cd76:	684b      	ldr	r3, [r1, #4]
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	dc05      	bgt.n	801cd88 <__sflush_r+0x20>
 801cd7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	dc02      	bgt.n	801cd88 <__sflush_r+0x20>
 801cd82:	2000      	movs	r0, #0
 801cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cd8a:	2e00      	cmp	r6, #0
 801cd8c:	d0f9      	beq.n	801cd82 <__sflush_r+0x1a>
 801cd8e:	2300      	movs	r3, #0
 801cd90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cd94:	682f      	ldr	r7, [r5, #0]
 801cd96:	602b      	str	r3, [r5, #0]
 801cd98:	d032      	beq.n	801ce00 <__sflush_r+0x98>
 801cd9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cd9c:	89a3      	ldrh	r3, [r4, #12]
 801cd9e:	075a      	lsls	r2, r3, #29
 801cda0:	d505      	bpl.n	801cdae <__sflush_r+0x46>
 801cda2:	6863      	ldr	r3, [r4, #4]
 801cda4:	1ac0      	subs	r0, r0, r3
 801cda6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cda8:	b10b      	cbz	r3, 801cdae <__sflush_r+0x46>
 801cdaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cdac:	1ac0      	subs	r0, r0, r3
 801cdae:	2300      	movs	r3, #0
 801cdb0:	4602      	mov	r2, r0
 801cdb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cdb4:	6a21      	ldr	r1, [r4, #32]
 801cdb6:	4628      	mov	r0, r5
 801cdb8:	47b0      	blx	r6
 801cdba:	1c43      	adds	r3, r0, #1
 801cdbc:	89a3      	ldrh	r3, [r4, #12]
 801cdbe:	d106      	bne.n	801cdce <__sflush_r+0x66>
 801cdc0:	6829      	ldr	r1, [r5, #0]
 801cdc2:	291d      	cmp	r1, #29
 801cdc4:	d82c      	bhi.n	801ce20 <__sflush_r+0xb8>
 801cdc6:	4a2a      	ldr	r2, [pc, #168]	; (801ce70 <__sflush_r+0x108>)
 801cdc8:	40ca      	lsrs	r2, r1
 801cdca:	07d6      	lsls	r6, r2, #31
 801cdcc:	d528      	bpl.n	801ce20 <__sflush_r+0xb8>
 801cdce:	2200      	movs	r2, #0
 801cdd0:	6062      	str	r2, [r4, #4]
 801cdd2:	04d9      	lsls	r1, r3, #19
 801cdd4:	6922      	ldr	r2, [r4, #16]
 801cdd6:	6022      	str	r2, [r4, #0]
 801cdd8:	d504      	bpl.n	801cde4 <__sflush_r+0x7c>
 801cdda:	1c42      	adds	r2, r0, #1
 801cddc:	d101      	bne.n	801cde2 <__sflush_r+0x7a>
 801cdde:	682b      	ldr	r3, [r5, #0]
 801cde0:	b903      	cbnz	r3, 801cde4 <__sflush_r+0x7c>
 801cde2:	6560      	str	r0, [r4, #84]	; 0x54
 801cde4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cde6:	602f      	str	r7, [r5, #0]
 801cde8:	2900      	cmp	r1, #0
 801cdea:	d0ca      	beq.n	801cd82 <__sflush_r+0x1a>
 801cdec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cdf0:	4299      	cmp	r1, r3
 801cdf2:	d002      	beq.n	801cdfa <__sflush_r+0x92>
 801cdf4:	4628      	mov	r0, r5
 801cdf6:	f000 fa65 	bl	801d2c4 <_free_r>
 801cdfa:	2000      	movs	r0, #0
 801cdfc:	6360      	str	r0, [r4, #52]	; 0x34
 801cdfe:	e7c1      	b.n	801cd84 <__sflush_r+0x1c>
 801ce00:	6a21      	ldr	r1, [r4, #32]
 801ce02:	2301      	movs	r3, #1
 801ce04:	4628      	mov	r0, r5
 801ce06:	47b0      	blx	r6
 801ce08:	1c41      	adds	r1, r0, #1
 801ce0a:	d1c7      	bne.n	801cd9c <__sflush_r+0x34>
 801ce0c:	682b      	ldr	r3, [r5, #0]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d0c4      	beq.n	801cd9c <__sflush_r+0x34>
 801ce12:	2b1d      	cmp	r3, #29
 801ce14:	d001      	beq.n	801ce1a <__sflush_r+0xb2>
 801ce16:	2b16      	cmp	r3, #22
 801ce18:	d101      	bne.n	801ce1e <__sflush_r+0xb6>
 801ce1a:	602f      	str	r7, [r5, #0]
 801ce1c:	e7b1      	b.n	801cd82 <__sflush_r+0x1a>
 801ce1e:	89a3      	ldrh	r3, [r4, #12]
 801ce20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce24:	81a3      	strh	r3, [r4, #12]
 801ce26:	e7ad      	b.n	801cd84 <__sflush_r+0x1c>
 801ce28:	690f      	ldr	r7, [r1, #16]
 801ce2a:	2f00      	cmp	r7, #0
 801ce2c:	d0a9      	beq.n	801cd82 <__sflush_r+0x1a>
 801ce2e:	0793      	lsls	r3, r2, #30
 801ce30:	680e      	ldr	r6, [r1, #0]
 801ce32:	bf08      	it	eq
 801ce34:	694b      	ldreq	r3, [r1, #20]
 801ce36:	600f      	str	r7, [r1, #0]
 801ce38:	bf18      	it	ne
 801ce3a:	2300      	movne	r3, #0
 801ce3c:	eba6 0807 	sub.w	r8, r6, r7
 801ce40:	608b      	str	r3, [r1, #8]
 801ce42:	f1b8 0f00 	cmp.w	r8, #0
 801ce46:	dd9c      	ble.n	801cd82 <__sflush_r+0x1a>
 801ce48:	6a21      	ldr	r1, [r4, #32]
 801ce4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ce4c:	4643      	mov	r3, r8
 801ce4e:	463a      	mov	r2, r7
 801ce50:	4628      	mov	r0, r5
 801ce52:	47b0      	blx	r6
 801ce54:	2800      	cmp	r0, #0
 801ce56:	dc06      	bgt.n	801ce66 <__sflush_r+0xfe>
 801ce58:	89a3      	ldrh	r3, [r4, #12]
 801ce5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce5e:	81a3      	strh	r3, [r4, #12]
 801ce60:	f04f 30ff 	mov.w	r0, #4294967295
 801ce64:	e78e      	b.n	801cd84 <__sflush_r+0x1c>
 801ce66:	4407      	add	r7, r0
 801ce68:	eba8 0800 	sub.w	r8, r8, r0
 801ce6c:	e7e9      	b.n	801ce42 <__sflush_r+0xda>
 801ce6e:	bf00      	nop
 801ce70:	20400001 	.word	0x20400001

0801ce74 <_fflush_r>:
 801ce74:	b538      	push	{r3, r4, r5, lr}
 801ce76:	690b      	ldr	r3, [r1, #16]
 801ce78:	4605      	mov	r5, r0
 801ce7a:	460c      	mov	r4, r1
 801ce7c:	b913      	cbnz	r3, 801ce84 <_fflush_r+0x10>
 801ce7e:	2500      	movs	r5, #0
 801ce80:	4628      	mov	r0, r5
 801ce82:	bd38      	pop	{r3, r4, r5, pc}
 801ce84:	b118      	cbz	r0, 801ce8e <_fflush_r+0x1a>
 801ce86:	6983      	ldr	r3, [r0, #24]
 801ce88:	b90b      	cbnz	r3, 801ce8e <_fflush_r+0x1a>
 801ce8a:	f000 f887 	bl	801cf9c <__sinit>
 801ce8e:	4b14      	ldr	r3, [pc, #80]	; (801cee0 <_fflush_r+0x6c>)
 801ce90:	429c      	cmp	r4, r3
 801ce92:	d11b      	bne.n	801cecc <_fflush_r+0x58>
 801ce94:	686c      	ldr	r4, [r5, #4]
 801ce96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d0ef      	beq.n	801ce7e <_fflush_r+0xa>
 801ce9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cea0:	07d0      	lsls	r0, r2, #31
 801cea2:	d404      	bmi.n	801ceae <_fflush_r+0x3a>
 801cea4:	0599      	lsls	r1, r3, #22
 801cea6:	d402      	bmi.n	801ceae <_fflush_r+0x3a>
 801cea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ceaa:	f000 f954 	bl	801d156 <__retarget_lock_acquire_recursive>
 801ceae:	4628      	mov	r0, r5
 801ceb0:	4621      	mov	r1, r4
 801ceb2:	f7ff ff59 	bl	801cd68 <__sflush_r>
 801ceb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ceb8:	07da      	lsls	r2, r3, #31
 801ceba:	4605      	mov	r5, r0
 801cebc:	d4e0      	bmi.n	801ce80 <_fflush_r+0xc>
 801cebe:	89a3      	ldrh	r3, [r4, #12]
 801cec0:	059b      	lsls	r3, r3, #22
 801cec2:	d4dd      	bmi.n	801ce80 <_fflush_r+0xc>
 801cec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cec6:	f000 f947 	bl	801d158 <__retarget_lock_release_recursive>
 801ceca:	e7d9      	b.n	801ce80 <_fflush_r+0xc>
 801cecc:	4b05      	ldr	r3, [pc, #20]	; (801cee4 <_fflush_r+0x70>)
 801cece:	429c      	cmp	r4, r3
 801ced0:	d101      	bne.n	801ced6 <_fflush_r+0x62>
 801ced2:	68ac      	ldr	r4, [r5, #8]
 801ced4:	e7df      	b.n	801ce96 <_fflush_r+0x22>
 801ced6:	4b04      	ldr	r3, [pc, #16]	; (801cee8 <_fflush_r+0x74>)
 801ced8:	429c      	cmp	r4, r3
 801ceda:	bf08      	it	eq
 801cedc:	68ec      	ldreq	r4, [r5, #12]
 801cede:	e7da      	b.n	801ce96 <_fflush_r+0x22>
 801cee0:	08022018 	.word	0x08022018
 801cee4:	08022038 	.word	0x08022038
 801cee8:	08021ff8 	.word	0x08021ff8

0801ceec <std>:
 801ceec:	2300      	movs	r3, #0
 801ceee:	b510      	push	{r4, lr}
 801cef0:	4604      	mov	r4, r0
 801cef2:	e9c0 3300 	strd	r3, r3, [r0]
 801cef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cefa:	6083      	str	r3, [r0, #8]
 801cefc:	8181      	strh	r1, [r0, #12]
 801cefe:	6643      	str	r3, [r0, #100]	; 0x64
 801cf00:	81c2      	strh	r2, [r0, #14]
 801cf02:	6183      	str	r3, [r0, #24]
 801cf04:	4619      	mov	r1, r3
 801cf06:	2208      	movs	r2, #8
 801cf08:	305c      	adds	r0, #92	; 0x5c
 801cf0a:	f000 f9c3 	bl	801d294 <memset>
 801cf0e:	4b05      	ldr	r3, [pc, #20]	; (801cf24 <std+0x38>)
 801cf10:	6263      	str	r3, [r4, #36]	; 0x24
 801cf12:	4b05      	ldr	r3, [pc, #20]	; (801cf28 <std+0x3c>)
 801cf14:	62a3      	str	r3, [r4, #40]	; 0x28
 801cf16:	4b05      	ldr	r3, [pc, #20]	; (801cf2c <std+0x40>)
 801cf18:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cf1a:	4b05      	ldr	r3, [pc, #20]	; (801cf30 <std+0x44>)
 801cf1c:	6224      	str	r4, [r4, #32]
 801cf1e:	6323      	str	r3, [r4, #48]	; 0x30
 801cf20:	bd10      	pop	{r4, pc}
 801cf22:	bf00      	nop
 801cf24:	0801dd4d 	.word	0x0801dd4d
 801cf28:	0801dd6f 	.word	0x0801dd6f
 801cf2c:	0801dda7 	.word	0x0801dda7
 801cf30:	0801ddcb 	.word	0x0801ddcb

0801cf34 <_cleanup_r>:
 801cf34:	4901      	ldr	r1, [pc, #4]	; (801cf3c <_cleanup_r+0x8>)
 801cf36:	f000 b8af 	b.w	801d098 <_fwalk_reent>
 801cf3a:	bf00      	nop
 801cf3c:	0801ce75 	.word	0x0801ce75

0801cf40 <__sfmoreglue>:
 801cf40:	b570      	push	{r4, r5, r6, lr}
 801cf42:	1e4a      	subs	r2, r1, #1
 801cf44:	2568      	movs	r5, #104	; 0x68
 801cf46:	4355      	muls	r5, r2
 801cf48:	460e      	mov	r6, r1
 801cf4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cf4e:	f000 fa09 	bl	801d364 <_malloc_r>
 801cf52:	4604      	mov	r4, r0
 801cf54:	b140      	cbz	r0, 801cf68 <__sfmoreglue+0x28>
 801cf56:	2100      	movs	r1, #0
 801cf58:	e9c0 1600 	strd	r1, r6, [r0]
 801cf5c:	300c      	adds	r0, #12
 801cf5e:	60a0      	str	r0, [r4, #8]
 801cf60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cf64:	f000 f996 	bl	801d294 <memset>
 801cf68:	4620      	mov	r0, r4
 801cf6a:	bd70      	pop	{r4, r5, r6, pc}

0801cf6c <__sfp_lock_acquire>:
 801cf6c:	4801      	ldr	r0, [pc, #4]	; (801cf74 <__sfp_lock_acquire+0x8>)
 801cf6e:	f000 b8f2 	b.w	801d156 <__retarget_lock_acquire_recursive>
 801cf72:	bf00      	nop
 801cf74:	20019218 	.word	0x20019218

0801cf78 <__sfp_lock_release>:
 801cf78:	4801      	ldr	r0, [pc, #4]	; (801cf80 <__sfp_lock_release+0x8>)
 801cf7a:	f000 b8ed 	b.w	801d158 <__retarget_lock_release_recursive>
 801cf7e:	bf00      	nop
 801cf80:	20019218 	.word	0x20019218

0801cf84 <__sinit_lock_acquire>:
 801cf84:	4801      	ldr	r0, [pc, #4]	; (801cf8c <__sinit_lock_acquire+0x8>)
 801cf86:	f000 b8e6 	b.w	801d156 <__retarget_lock_acquire_recursive>
 801cf8a:	bf00      	nop
 801cf8c:	20019217 	.word	0x20019217

0801cf90 <__sinit_lock_release>:
 801cf90:	4801      	ldr	r0, [pc, #4]	; (801cf98 <__sinit_lock_release+0x8>)
 801cf92:	f000 b8e1 	b.w	801d158 <__retarget_lock_release_recursive>
 801cf96:	bf00      	nop
 801cf98:	20019217 	.word	0x20019217

0801cf9c <__sinit>:
 801cf9c:	b510      	push	{r4, lr}
 801cf9e:	4604      	mov	r4, r0
 801cfa0:	f7ff fff0 	bl	801cf84 <__sinit_lock_acquire>
 801cfa4:	69a3      	ldr	r3, [r4, #24]
 801cfa6:	b11b      	cbz	r3, 801cfb0 <__sinit+0x14>
 801cfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfac:	f7ff bff0 	b.w	801cf90 <__sinit_lock_release>
 801cfb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801cfb4:	6523      	str	r3, [r4, #80]	; 0x50
 801cfb6:	4b13      	ldr	r3, [pc, #76]	; (801d004 <__sinit+0x68>)
 801cfb8:	4a13      	ldr	r2, [pc, #76]	; (801d008 <__sinit+0x6c>)
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	62a2      	str	r2, [r4, #40]	; 0x28
 801cfbe:	42a3      	cmp	r3, r4
 801cfc0:	bf04      	itt	eq
 801cfc2:	2301      	moveq	r3, #1
 801cfc4:	61a3      	streq	r3, [r4, #24]
 801cfc6:	4620      	mov	r0, r4
 801cfc8:	f000 f820 	bl	801d00c <__sfp>
 801cfcc:	6060      	str	r0, [r4, #4]
 801cfce:	4620      	mov	r0, r4
 801cfd0:	f000 f81c 	bl	801d00c <__sfp>
 801cfd4:	60a0      	str	r0, [r4, #8]
 801cfd6:	4620      	mov	r0, r4
 801cfd8:	f000 f818 	bl	801d00c <__sfp>
 801cfdc:	2200      	movs	r2, #0
 801cfde:	60e0      	str	r0, [r4, #12]
 801cfe0:	2104      	movs	r1, #4
 801cfe2:	6860      	ldr	r0, [r4, #4]
 801cfe4:	f7ff ff82 	bl	801ceec <std>
 801cfe8:	68a0      	ldr	r0, [r4, #8]
 801cfea:	2201      	movs	r2, #1
 801cfec:	2109      	movs	r1, #9
 801cfee:	f7ff ff7d 	bl	801ceec <std>
 801cff2:	68e0      	ldr	r0, [r4, #12]
 801cff4:	2202      	movs	r2, #2
 801cff6:	2112      	movs	r1, #18
 801cff8:	f7ff ff78 	bl	801ceec <std>
 801cffc:	2301      	movs	r3, #1
 801cffe:	61a3      	str	r3, [r4, #24]
 801d000:	e7d2      	b.n	801cfa8 <__sinit+0xc>
 801d002:	bf00      	nop
 801d004:	08022058 	.word	0x08022058
 801d008:	0801cf35 	.word	0x0801cf35

0801d00c <__sfp>:
 801d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d00e:	4607      	mov	r7, r0
 801d010:	f7ff ffac 	bl	801cf6c <__sfp_lock_acquire>
 801d014:	4b1e      	ldr	r3, [pc, #120]	; (801d090 <__sfp+0x84>)
 801d016:	681e      	ldr	r6, [r3, #0]
 801d018:	69b3      	ldr	r3, [r6, #24]
 801d01a:	b913      	cbnz	r3, 801d022 <__sfp+0x16>
 801d01c:	4630      	mov	r0, r6
 801d01e:	f7ff ffbd 	bl	801cf9c <__sinit>
 801d022:	3648      	adds	r6, #72	; 0x48
 801d024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d028:	3b01      	subs	r3, #1
 801d02a:	d503      	bpl.n	801d034 <__sfp+0x28>
 801d02c:	6833      	ldr	r3, [r6, #0]
 801d02e:	b30b      	cbz	r3, 801d074 <__sfp+0x68>
 801d030:	6836      	ldr	r6, [r6, #0]
 801d032:	e7f7      	b.n	801d024 <__sfp+0x18>
 801d034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d038:	b9d5      	cbnz	r5, 801d070 <__sfp+0x64>
 801d03a:	4b16      	ldr	r3, [pc, #88]	; (801d094 <__sfp+0x88>)
 801d03c:	60e3      	str	r3, [r4, #12]
 801d03e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d042:	6665      	str	r5, [r4, #100]	; 0x64
 801d044:	f000 f886 	bl	801d154 <__retarget_lock_init_recursive>
 801d048:	f7ff ff96 	bl	801cf78 <__sfp_lock_release>
 801d04c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d050:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d054:	6025      	str	r5, [r4, #0]
 801d056:	61a5      	str	r5, [r4, #24]
 801d058:	2208      	movs	r2, #8
 801d05a:	4629      	mov	r1, r5
 801d05c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d060:	f000 f918 	bl	801d294 <memset>
 801d064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d06c:	4620      	mov	r0, r4
 801d06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d070:	3468      	adds	r4, #104	; 0x68
 801d072:	e7d9      	b.n	801d028 <__sfp+0x1c>
 801d074:	2104      	movs	r1, #4
 801d076:	4638      	mov	r0, r7
 801d078:	f7ff ff62 	bl	801cf40 <__sfmoreglue>
 801d07c:	4604      	mov	r4, r0
 801d07e:	6030      	str	r0, [r6, #0]
 801d080:	2800      	cmp	r0, #0
 801d082:	d1d5      	bne.n	801d030 <__sfp+0x24>
 801d084:	f7ff ff78 	bl	801cf78 <__sfp_lock_release>
 801d088:	230c      	movs	r3, #12
 801d08a:	603b      	str	r3, [r7, #0]
 801d08c:	e7ee      	b.n	801d06c <__sfp+0x60>
 801d08e:	bf00      	nop
 801d090:	08022058 	.word	0x08022058
 801d094:	ffff0001 	.word	0xffff0001

0801d098 <_fwalk_reent>:
 801d098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d09c:	4606      	mov	r6, r0
 801d09e:	4688      	mov	r8, r1
 801d0a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d0a4:	2700      	movs	r7, #0
 801d0a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d0aa:	f1b9 0901 	subs.w	r9, r9, #1
 801d0ae:	d505      	bpl.n	801d0bc <_fwalk_reent+0x24>
 801d0b0:	6824      	ldr	r4, [r4, #0]
 801d0b2:	2c00      	cmp	r4, #0
 801d0b4:	d1f7      	bne.n	801d0a6 <_fwalk_reent+0xe>
 801d0b6:	4638      	mov	r0, r7
 801d0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0bc:	89ab      	ldrh	r3, [r5, #12]
 801d0be:	2b01      	cmp	r3, #1
 801d0c0:	d907      	bls.n	801d0d2 <_fwalk_reent+0x3a>
 801d0c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d0c6:	3301      	adds	r3, #1
 801d0c8:	d003      	beq.n	801d0d2 <_fwalk_reent+0x3a>
 801d0ca:	4629      	mov	r1, r5
 801d0cc:	4630      	mov	r0, r6
 801d0ce:	47c0      	blx	r8
 801d0d0:	4307      	orrs	r7, r0
 801d0d2:	3568      	adds	r5, #104	; 0x68
 801d0d4:	e7e9      	b.n	801d0aa <_fwalk_reent+0x12>
	...

0801d0d8 <__libc_init_array>:
 801d0d8:	b570      	push	{r4, r5, r6, lr}
 801d0da:	4d0d      	ldr	r5, [pc, #52]	; (801d110 <__libc_init_array+0x38>)
 801d0dc:	4c0d      	ldr	r4, [pc, #52]	; (801d114 <__libc_init_array+0x3c>)
 801d0de:	1b64      	subs	r4, r4, r5
 801d0e0:	10a4      	asrs	r4, r4, #2
 801d0e2:	2600      	movs	r6, #0
 801d0e4:	42a6      	cmp	r6, r4
 801d0e6:	d109      	bne.n	801d0fc <__libc_init_array+0x24>
 801d0e8:	4d0b      	ldr	r5, [pc, #44]	; (801d118 <__libc_init_array+0x40>)
 801d0ea:	4c0c      	ldr	r4, [pc, #48]	; (801d11c <__libc_init_array+0x44>)
 801d0ec:	f004 f91a 	bl	8021324 <_init>
 801d0f0:	1b64      	subs	r4, r4, r5
 801d0f2:	10a4      	asrs	r4, r4, #2
 801d0f4:	2600      	movs	r6, #0
 801d0f6:	42a6      	cmp	r6, r4
 801d0f8:	d105      	bne.n	801d106 <__libc_init_array+0x2e>
 801d0fa:	bd70      	pop	{r4, r5, r6, pc}
 801d0fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801d100:	4798      	blx	r3
 801d102:	3601      	adds	r6, #1
 801d104:	e7ee      	b.n	801d0e4 <__libc_init_array+0xc>
 801d106:	f855 3b04 	ldr.w	r3, [r5], #4
 801d10a:	4798      	blx	r3
 801d10c:	3601      	adds	r6, #1
 801d10e:	e7f2      	b.n	801d0f6 <__libc_init_array+0x1e>
 801d110:	080223cc 	.word	0x080223cc
 801d114:	080223cc 	.word	0x080223cc
 801d118:	080223cc 	.word	0x080223cc
 801d11c:	080223d0 	.word	0x080223d0

0801d120 <__itoa>:
 801d120:	1e93      	subs	r3, r2, #2
 801d122:	2b22      	cmp	r3, #34	; 0x22
 801d124:	b510      	push	{r4, lr}
 801d126:	460c      	mov	r4, r1
 801d128:	d904      	bls.n	801d134 <__itoa+0x14>
 801d12a:	2300      	movs	r3, #0
 801d12c:	700b      	strb	r3, [r1, #0]
 801d12e:	461c      	mov	r4, r3
 801d130:	4620      	mov	r0, r4
 801d132:	bd10      	pop	{r4, pc}
 801d134:	2a0a      	cmp	r2, #10
 801d136:	d109      	bne.n	801d14c <__itoa+0x2c>
 801d138:	2800      	cmp	r0, #0
 801d13a:	da07      	bge.n	801d14c <__itoa+0x2c>
 801d13c:	232d      	movs	r3, #45	; 0x2d
 801d13e:	700b      	strb	r3, [r1, #0]
 801d140:	4240      	negs	r0, r0
 801d142:	2101      	movs	r1, #1
 801d144:	4421      	add	r1, r4
 801d146:	f001 fd47 	bl	801ebd8 <__utoa>
 801d14a:	e7f1      	b.n	801d130 <__itoa+0x10>
 801d14c:	2100      	movs	r1, #0
 801d14e:	e7f9      	b.n	801d144 <__itoa+0x24>

0801d150 <itoa>:
 801d150:	f7ff bfe6 	b.w	801d120 <__itoa>

0801d154 <__retarget_lock_init_recursive>:
 801d154:	4770      	bx	lr

0801d156 <__retarget_lock_acquire_recursive>:
 801d156:	4770      	bx	lr

0801d158 <__retarget_lock_release_recursive>:
 801d158:	4770      	bx	lr

0801d15a <__swhatbuf_r>:
 801d15a:	b570      	push	{r4, r5, r6, lr}
 801d15c:	460e      	mov	r6, r1
 801d15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d162:	2900      	cmp	r1, #0
 801d164:	b096      	sub	sp, #88	; 0x58
 801d166:	4614      	mov	r4, r2
 801d168:	461d      	mov	r5, r3
 801d16a:	da07      	bge.n	801d17c <__swhatbuf_r+0x22>
 801d16c:	2300      	movs	r3, #0
 801d16e:	602b      	str	r3, [r5, #0]
 801d170:	89b3      	ldrh	r3, [r6, #12]
 801d172:	061a      	lsls	r2, r3, #24
 801d174:	d410      	bmi.n	801d198 <__swhatbuf_r+0x3e>
 801d176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d17a:	e00e      	b.n	801d19a <__swhatbuf_r+0x40>
 801d17c:	466a      	mov	r2, sp
 801d17e:	f002 fcc7 	bl	801fb10 <_fstat_r>
 801d182:	2800      	cmp	r0, #0
 801d184:	dbf2      	blt.n	801d16c <__swhatbuf_r+0x12>
 801d186:	9a01      	ldr	r2, [sp, #4]
 801d188:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d18c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d190:	425a      	negs	r2, r3
 801d192:	415a      	adcs	r2, r3
 801d194:	602a      	str	r2, [r5, #0]
 801d196:	e7ee      	b.n	801d176 <__swhatbuf_r+0x1c>
 801d198:	2340      	movs	r3, #64	; 0x40
 801d19a:	2000      	movs	r0, #0
 801d19c:	6023      	str	r3, [r4, #0]
 801d19e:	b016      	add	sp, #88	; 0x58
 801d1a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d1a4 <__smakebuf_r>:
 801d1a4:	898b      	ldrh	r3, [r1, #12]
 801d1a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d1a8:	079d      	lsls	r5, r3, #30
 801d1aa:	4606      	mov	r6, r0
 801d1ac:	460c      	mov	r4, r1
 801d1ae:	d507      	bpl.n	801d1c0 <__smakebuf_r+0x1c>
 801d1b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d1b4:	6023      	str	r3, [r4, #0]
 801d1b6:	6123      	str	r3, [r4, #16]
 801d1b8:	2301      	movs	r3, #1
 801d1ba:	6163      	str	r3, [r4, #20]
 801d1bc:	b002      	add	sp, #8
 801d1be:	bd70      	pop	{r4, r5, r6, pc}
 801d1c0:	ab01      	add	r3, sp, #4
 801d1c2:	466a      	mov	r2, sp
 801d1c4:	f7ff ffc9 	bl	801d15a <__swhatbuf_r>
 801d1c8:	9900      	ldr	r1, [sp, #0]
 801d1ca:	4605      	mov	r5, r0
 801d1cc:	4630      	mov	r0, r6
 801d1ce:	f000 f8c9 	bl	801d364 <_malloc_r>
 801d1d2:	b948      	cbnz	r0, 801d1e8 <__smakebuf_r+0x44>
 801d1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1d8:	059a      	lsls	r2, r3, #22
 801d1da:	d4ef      	bmi.n	801d1bc <__smakebuf_r+0x18>
 801d1dc:	f023 0303 	bic.w	r3, r3, #3
 801d1e0:	f043 0302 	orr.w	r3, r3, #2
 801d1e4:	81a3      	strh	r3, [r4, #12]
 801d1e6:	e7e3      	b.n	801d1b0 <__smakebuf_r+0xc>
 801d1e8:	4b0d      	ldr	r3, [pc, #52]	; (801d220 <__smakebuf_r+0x7c>)
 801d1ea:	62b3      	str	r3, [r6, #40]	; 0x28
 801d1ec:	89a3      	ldrh	r3, [r4, #12]
 801d1ee:	6020      	str	r0, [r4, #0]
 801d1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d1f4:	81a3      	strh	r3, [r4, #12]
 801d1f6:	9b00      	ldr	r3, [sp, #0]
 801d1f8:	6163      	str	r3, [r4, #20]
 801d1fa:	9b01      	ldr	r3, [sp, #4]
 801d1fc:	6120      	str	r0, [r4, #16]
 801d1fe:	b15b      	cbz	r3, 801d218 <__smakebuf_r+0x74>
 801d200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d204:	4630      	mov	r0, r6
 801d206:	f003 f805 	bl	8020214 <_isatty_r>
 801d20a:	b128      	cbz	r0, 801d218 <__smakebuf_r+0x74>
 801d20c:	89a3      	ldrh	r3, [r4, #12]
 801d20e:	f023 0303 	bic.w	r3, r3, #3
 801d212:	f043 0301 	orr.w	r3, r3, #1
 801d216:	81a3      	strh	r3, [r4, #12]
 801d218:	89a0      	ldrh	r0, [r4, #12]
 801d21a:	4305      	orrs	r5, r0
 801d21c:	81a5      	strh	r5, [r4, #12]
 801d21e:	e7cd      	b.n	801d1bc <__smakebuf_r+0x18>
 801d220:	0801cf35 	.word	0x0801cf35

0801d224 <malloc>:
 801d224:	4b02      	ldr	r3, [pc, #8]	; (801d230 <malloc+0xc>)
 801d226:	4601      	mov	r1, r0
 801d228:	6818      	ldr	r0, [r3, #0]
 801d22a:	f000 b89b 	b.w	801d364 <_malloc_r>
 801d22e:	bf00      	nop
 801d230:	2000008c 	.word	0x2000008c

0801d234 <free>:
 801d234:	4b02      	ldr	r3, [pc, #8]	; (801d240 <free+0xc>)
 801d236:	4601      	mov	r1, r0
 801d238:	6818      	ldr	r0, [r3, #0]
 801d23a:	f000 b843 	b.w	801d2c4 <_free_r>
 801d23e:	bf00      	nop
 801d240:	2000008c 	.word	0x2000008c

0801d244 <memcpy>:
 801d244:	440a      	add	r2, r1
 801d246:	4291      	cmp	r1, r2
 801d248:	f100 33ff 	add.w	r3, r0, #4294967295
 801d24c:	d100      	bne.n	801d250 <memcpy+0xc>
 801d24e:	4770      	bx	lr
 801d250:	b510      	push	{r4, lr}
 801d252:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d256:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d25a:	4291      	cmp	r1, r2
 801d25c:	d1f9      	bne.n	801d252 <memcpy+0xe>
 801d25e:	bd10      	pop	{r4, pc}

0801d260 <memmove>:
 801d260:	4288      	cmp	r0, r1
 801d262:	b510      	push	{r4, lr}
 801d264:	eb01 0402 	add.w	r4, r1, r2
 801d268:	d902      	bls.n	801d270 <memmove+0x10>
 801d26a:	4284      	cmp	r4, r0
 801d26c:	4623      	mov	r3, r4
 801d26e:	d807      	bhi.n	801d280 <memmove+0x20>
 801d270:	1e43      	subs	r3, r0, #1
 801d272:	42a1      	cmp	r1, r4
 801d274:	d008      	beq.n	801d288 <memmove+0x28>
 801d276:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d27a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d27e:	e7f8      	b.n	801d272 <memmove+0x12>
 801d280:	4402      	add	r2, r0
 801d282:	4601      	mov	r1, r0
 801d284:	428a      	cmp	r2, r1
 801d286:	d100      	bne.n	801d28a <memmove+0x2a>
 801d288:	bd10      	pop	{r4, pc}
 801d28a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d28e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d292:	e7f7      	b.n	801d284 <memmove+0x24>

0801d294 <memset>:
 801d294:	4402      	add	r2, r0
 801d296:	4603      	mov	r3, r0
 801d298:	4293      	cmp	r3, r2
 801d29a:	d100      	bne.n	801d29e <memset+0xa>
 801d29c:	4770      	bx	lr
 801d29e:	f803 1b01 	strb.w	r1, [r3], #1
 801d2a2:	e7f9      	b.n	801d298 <memset+0x4>

0801d2a4 <_calloc_r>:
 801d2a4:	b513      	push	{r0, r1, r4, lr}
 801d2a6:	434a      	muls	r2, r1
 801d2a8:	4611      	mov	r1, r2
 801d2aa:	9201      	str	r2, [sp, #4]
 801d2ac:	f000 f85a 	bl	801d364 <_malloc_r>
 801d2b0:	4604      	mov	r4, r0
 801d2b2:	b118      	cbz	r0, 801d2bc <_calloc_r+0x18>
 801d2b4:	9a01      	ldr	r2, [sp, #4]
 801d2b6:	2100      	movs	r1, #0
 801d2b8:	f7ff ffec 	bl	801d294 <memset>
 801d2bc:	4620      	mov	r0, r4
 801d2be:	b002      	add	sp, #8
 801d2c0:	bd10      	pop	{r4, pc}
	...

0801d2c4 <_free_r>:
 801d2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d2c6:	2900      	cmp	r1, #0
 801d2c8:	d048      	beq.n	801d35c <_free_r+0x98>
 801d2ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d2ce:	9001      	str	r0, [sp, #4]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	f1a1 0404 	sub.w	r4, r1, #4
 801d2d6:	bfb8      	it	lt
 801d2d8:	18e4      	addlt	r4, r4, r3
 801d2da:	f002 ffd3 	bl	8020284 <__malloc_lock>
 801d2de:	4a20      	ldr	r2, [pc, #128]	; (801d360 <_free_r+0x9c>)
 801d2e0:	9801      	ldr	r0, [sp, #4]
 801d2e2:	6813      	ldr	r3, [r2, #0]
 801d2e4:	4615      	mov	r5, r2
 801d2e6:	b933      	cbnz	r3, 801d2f6 <_free_r+0x32>
 801d2e8:	6063      	str	r3, [r4, #4]
 801d2ea:	6014      	str	r4, [r2, #0]
 801d2ec:	b003      	add	sp, #12
 801d2ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d2f2:	f002 bfcd 	b.w	8020290 <__malloc_unlock>
 801d2f6:	42a3      	cmp	r3, r4
 801d2f8:	d90b      	bls.n	801d312 <_free_r+0x4e>
 801d2fa:	6821      	ldr	r1, [r4, #0]
 801d2fc:	1862      	adds	r2, r4, r1
 801d2fe:	4293      	cmp	r3, r2
 801d300:	bf04      	itt	eq
 801d302:	681a      	ldreq	r2, [r3, #0]
 801d304:	685b      	ldreq	r3, [r3, #4]
 801d306:	6063      	str	r3, [r4, #4]
 801d308:	bf04      	itt	eq
 801d30a:	1852      	addeq	r2, r2, r1
 801d30c:	6022      	streq	r2, [r4, #0]
 801d30e:	602c      	str	r4, [r5, #0]
 801d310:	e7ec      	b.n	801d2ec <_free_r+0x28>
 801d312:	461a      	mov	r2, r3
 801d314:	685b      	ldr	r3, [r3, #4]
 801d316:	b10b      	cbz	r3, 801d31c <_free_r+0x58>
 801d318:	42a3      	cmp	r3, r4
 801d31a:	d9fa      	bls.n	801d312 <_free_r+0x4e>
 801d31c:	6811      	ldr	r1, [r2, #0]
 801d31e:	1855      	adds	r5, r2, r1
 801d320:	42a5      	cmp	r5, r4
 801d322:	d10b      	bne.n	801d33c <_free_r+0x78>
 801d324:	6824      	ldr	r4, [r4, #0]
 801d326:	4421      	add	r1, r4
 801d328:	1854      	adds	r4, r2, r1
 801d32a:	42a3      	cmp	r3, r4
 801d32c:	6011      	str	r1, [r2, #0]
 801d32e:	d1dd      	bne.n	801d2ec <_free_r+0x28>
 801d330:	681c      	ldr	r4, [r3, #0]
 801d332:	685b      	ldr	r3, [r3, #4]
 801d334:	6053      	str	r3, [r2, #4]
 801d336:	4421      	add	r1, r4
 801d338:	6011      	str	r1, [r2, #0]
 801d33a:	e7d7      	b.n	801d2ec <_free_r+0x28>
 801d33c:	d902      	bls.n	801d344 <_free_r+0x80>
 801d33e:	230c      	movs	r3, #12
 801d340:	6003      	str	r3, [r0, #0]
 801d342:	e7d3      	b.n	801d2ec <_free_r+0x28>
 801d344:	6825      	ldr	r5, [r4, #0]
 801d346:	1961      	adds	r1, r4, r5
 801d348:	428b      	cmp	r3, r1
 801d34a:	bf04      	itt	eq
 801d34c:	6819      	ldreq	r1, [r3, #0]
 801d34e:	685b      	ldreq	r3, [r3, #4]
 801d350:	6063      	str	r3, [r4, #4]
 801d352:	bf04      	itt	eq
 801d354:	1949      	addeq	r1, r1, r5
 801d356:	6021      	streq	r1, [r4, #0]
 801d358:	6054      	str	r4, [r2, #4]
 801d35a:	e7c7      	b.n	801d2ec <_free_r+0x28>
 801d35c:	b003      	add	sp, #12
 801d35e:	bd30      	pop	{r4, r5, pc}
 801d360:	2000fe70 	.word	0x2000fe70

0801d364 <_malloc_r>:
 801d364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d366:	1ccd      	adds	r5, r1, #3
 801d368:	f025 0503 	bic.w	r5, r5, #3
 801d36c:	3508      	adds	r5, #8
 801d36e:	2d0c      	cmp	r5, #12
 801d370:	bf38      	it	cc
 801d372:	250c      	movcc	r5, #12
 801d374:	2d00      	cmp	r5, #0
 801d376:	4606      	mov	r6, r0
 801d378:	db01      	blt.n	801d37e <_malloc_r+0x1a>
 801d37a:	42a9      	cmp	r1, r5
 801d37c:	d903      	bls.n	801d386 <_malloc_r+0x22>
 801d37e:	230c      	movs	r3, #12
 801d380:	6033      	str	r3, [r6, #0]
 801d382:	2000      	movs	r0, #0
 801d384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d386:	f002 ff7d 	bl	8020284 <__malloc_lock>
 801d38a:	4921      	ldr	r1, [pc, #132]	; (801d410 <_malloc_r+0xac>)
 801d38c:	680a      	ldr	r2, [r1, #0]
 801d38e:	4614      	mov	r4, r2
 801d390:	b99c      	cbnz	r4, 801d3ba <_malloc_r+0x56>
 801d392:	4f20      	ldr	r7, [pc, #128]	; (801d414 <_malloc_r+0xb0>)
 801d394:	683b      	ldr	r3, [r7, #0]
 801d396:	b923      	cbnz	r3, 801d3a2 <_malloc_r+0x3e>
 801d398:	4621      	mov	r1, r4
 801d39a:	4630      	mov	r0, r6
 801d39c:	f000 fca6 	bl	801dcec <_sbrk_r>
 801d3a0:	6038      	str	r0, [r7, #0]
 801d3a2:	4629      	mov	r1, r5
 801d3a4:	4630      	mov	r0, r6
 801d3a6:	f000 fca1 	bl	801dcec <_sbrk_r>
 801d3aa:	1c43      	adds	r3, r0, #1
 801d3ac:	d123      	bne.n	801d3f6 <_malloc_r+0x92>
 801d3ae:	230c      	movs	r3, #12
 801d3b0:	6033      	str	r3, [r6, #0]
 801d3b2:	4630      	mov	r0, r6
 801d3b4:	f002 ff6c 	bl	8020290 <__malloc_unlock>
 801d3b8:	e7e3      	b.n	801d382 <_malloc_r+0x1e>
 801d3ba:	6823      	ldr	r3, [r4, #0]
 801d3bc:	1b5b      	subs	r3, r3, r5
 801d3be:	d417      	bmi.n	801d3f0 <_malloc_r+0x8c>
 801d3c0:	2b0b      	cmp	r3, #11
 801d3c2:	d903      	bls.n	801d3cc <_malloc_r+0x68>
 801d3c4:	6023      	str	r3, [r4, #0]
 801d3c6:	441c      	add	r4, r3
 801d3c8:	6025      	str	r5, [r4, #0]
 801d3ca:	e004      	b.n	801d3d6 <_malloc_r+0x72>
 801d3cc:	6863      	ldr	r3, [r4, #4]
 801d3ce:	42a2      	cmp	r2, r4
 801d3d0:	bf0c      	ite	eq
 801d3d2:	600b      	streq	r3, [r1, #0]
 801d3d4:	6053      	strne	r3, [r2, #4]
 801d3d6:	4630      	mov	r0, r6
 801d3d8:	f002 ff5a 	bl	8020290 <__malloc_unlock>
 801d3dc:	f104 000b 	add.w	r0, r4, #11
 801d3e0:	1d23      	adds	r3, r4, #4
 801d3e2:	f020 0007 	bic.w	r0, r0, #7
 801d3e6:	1ac2      	subs	r2, r0, r3
 801d3e8:	d0cc      	beq.n	801d384 <_malloc_r+0x20>
 801d3ea:	1a1b      	subs	r3, r3, r0
 801d3ec:	50a3      	str	r3, [r4, r2]
 801d3ee:	e7c9      	b.n	801d384 <_malloc_r+0x20>
 801d3f0:	4622      	mov	r2, r4
 801d3f2:	6864      	ldr	r4, [r4, #4]
 801d3f4:	e7cc      	b.n	801d390 <_malloc_r+0x2c>
 801d3f6:	1cc4      	adds	r4, r0, #3
 801d3f8:	f024 0403 	bic.w	r4, r4, #3
 801d3fc:	42a0      	cmp	r0, r4
 801d3fe:	d0e3      	beq.n	801d3c8 <_malloc_r+0x64>
 801d400:	1a21      	subs	r1, r4, r0
 801d402:	4630      	mov	r0, r6
 801d404:	f000 fc72 	bl	801dcec <_sbrk_r>
 801d408:	3001      	adds	r0, #1
 801d40a:	d1dd      	bne.n	801d3c8 <_malloc_r+0x64>
 801d40c:	e7cf      	b.n	801d3ae <_malloc_r+0x4a>
 801d40e:	bf00      	nop
 801d410:	2000fe70 	.word	0x2000fe70
 801d414:	2000fe74 	.word	0x2000fe74

0801d418 <__cvt>:
 801d418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d41c:	ec55 4b10 	vmov	r4, r5, d0
 801d420:	2d00      	cmp	r5, #0
 801d422:	460e      	mov	r6, r1
 801d424:	4619      	mov	r1, r3
 801d426:	462b      	mov	r3, r5
 801d428:	bfbb      	ittet	lt
 801d42a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801d42e:	461d      	movlt	r5, r3
 801d430:	2300      	movge	r3, #0
 801d432:	232d      	movlt	r3, #45	; 0x2d
 801d434:	700b      	strb	r3, [r1, #0]
 801d436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d438:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801d43c:	4691      	mov	r9, r2
 801d43e:	f023 0820 	bic.w	r8, r3, #32
 801d442:	bfbc      	itt	lt
 801d444:	4622      	movlt	r2, r4
 801d446:	4614      	movlt	r4, r2
 801d448:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d44c:	d005      	beq.n	801d45a <__cvt+0x42>
 801d44e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d452:	d100      	bne.n	801d456 <__cvt+0x3e>
 801d454:	3601      	adds	r6, #1
 801d456:	2102      	movs	r1, #2
 801d458:	e000      	b.n	801d45c <__cvt+0x44>
 801d45a:	2103      	movs	r1, #3
 801d45c:	ab03      	add	r3, sp, #12
 801d45e:	9301      	str	r3, [sp, #4]
 801d460:	ab02      	add	r3, sp, #8
 801d462:	9300      	str	r3, [sp, #0]
 801d464:	ec45 4b10 	vmov	d0, r4, r5
 801d468:	4653      	mov	r3, sl
 801d46a:	4632      	mov	r2, r6
 801d46c:	f001 fd64 	bl	801ef38 <_dtoa_r>
 801d470:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d474:	4607      	mov	r7, r0
 801d476:	d102      	bne.n	801d47e <__cvt+0x66>
 801d478:	f019 0f01 	tst.w	r9, #1
 801d47c:	d022      	beq.n	801d4c4 <__cvt+0xac>
 801d47e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d482:	eb07 0906 	add.w	r9, r7, r6
 801d486:	d110      	bne.n	801d4aa <__cvt+0x92>
 801d488:	783b      	ldrb	r3, [r7, #0]
 801d48a:	2b30      	cmp	r3, #48	; 0x30
 801d48c:	d10a      	bne.n	801d4a4 <__cvt+0x8c>
 801d48e:	2200      	movs	r2, #0
 801d490:	2300      	movs	r3, #0
 801d492:	4620      	mov	r0, r4
 801d494:	4629      	mov	r1, r5
 801d496:	f7e3 fb3f 	bl	8000b18 <__aeabi_dcmpeq>
 801d49a:	b918      	cbnz	r0, 801d4a4 <__cvt+0x8c>
 801d49c:	f1c6 0601 	rsb	r6, r6, #1
 801d4a0:	f8ca 6000 	str.w	r6, [sl]
 801d4a4:	f8da 3000 	ldr.w	r3, [sl]
 801d4a8:	4499      	add	r9, r3
 801d4aa:	2200      	movs	r2, #0
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	4620      	mov	r0, r4
 801d4b0:	4629      	mov	r1, r5
 801d4b2:	f7e3 fb31 	bl	8000b18 <__aeabi_dcmpeq>
 801d4b6:	b108      	cbz	r0, 801d4bc <__cvt+0xa4>
 801d4b8:	f8cd 900c 	str.w	r9, [sp, #12]
 801d4bc:	2230      	movs	r2, #48	; 0x30
 801d4be:	9b03      	ldr	r3, [sp, #12]
 801d4c0:	454b      	cmp	r3, r9
 801d4c2:	d307      	bcc.n	801d4d4 <__cvt+0xbc>
 801d4c4:	9b03      	ldr	r3, [sp, #12]
 801d4c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d4c8:	1bdb      	subs	r3, r3, r7
 801d4ca:	4638      	mov	r0, r7
 801d4cc:	6013      	str	r3, [r2, #0]
 801d4ce:	b004      	add	sp, #16
 801d4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4d4:	1c59      	adds	r1, r3, #1
 801d4d6:	9103      	str	r1, [sp, #12]
 801d4d8:	701a      	strb	r2, [r3, #0]
 801d4da:	e7f0      	b.n	801d4be <__cvt+0xa6>

0801d4dc <__exponent>:
 801d4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d4de:	4603      	mov	r3, r0
 801d4e0:	2900      	cmp	r1, #0
 801d4e2:	bfb8      	it	lt
 801d4e4:	4249      	neglt	r1, r1
 801d4e6:	f803 2b02 	strb.w	r2, [r3], #2
 801d4ea:	bfb4      	ite	lt
 801d4ec:	222d      	movlt	r2, #45	; 0x2d
 801d4ee:	222b      	movge	r2, #43	; 0x2b
 801d4f0:	2909      	cmp	r1, #9
 801d4f2:	7042      	strb	r2, [r0, #1]
 801d4f4:	dd2a      	ble.n	801d54c <__exponent+0x70>
 801d4f6:	f10d 0407 	add.w	r4, sp, #7
 801d4fa:	46a4      	mov	ip, r4
 801d4fc:	270a      	movs	r7, #10
 801d4fe:	46a6      	mov	lr, r4
 801d500:	460a      	mov	r2, r1
 801d502:	fb91 f6f7 	sdiv	r6, r1, r7
 801d506:	fb07 1516 	mls	r5, r7, r6, r1
 801d50a:	3530      	adds	r5, #48	; 0x30
 801d50c:	2a63      	cmp	r2, #99	; 0x63
 801d50e:	f104 34ff 	add.w	r4, r4, #4294967295
 801d512:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801d516:	4631      	mov	r1, r6
 801d518:	dcf1      	bgt.n	801d4fe <__exponent+0x22>
 801d51a:	3130      	adds	r1, #48	; 0x30
 801d51c:	f1ae 0502 	sub.w	r5, lr, #2
 801d520:	f804 1c01 	strb.w	r1, [r4, #-1]
 801d524:	1c44      	adds	r4, r0, #1
 801d526:	4629      	mov	r1, r5
 801d528:	4561      	cmp	r1, ip
 801d52a:	d30a      	bcc.n	801d542 <__exponent+0x66>
 801d52c:	f10d 0209 	add.w	r2, sp, #9
 801d530:	eba2 020e 	sub.w	r2, r2, lr
 801d534:	4565      	cmp	r5, ip
 801d536:	bf88      	it	hi
 801d538:	2200      	movhi	r2, #0
 801d53a:	4413      	add	r3, r2
 801d53c:	1a18      	subs	r0, r3, r0
 801d53e:	b003      	add	sp, #12
 801d540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d542:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d546:	f804 2f01 	strb.w	r2, [r4, #1]!
 801d54a:	e7ed      	b.n	801d528 <__exponent+0x4c>
 801d54c:	2330      	movs	r3, #48	; 0x30
 801d54e:	3130      	adds	r1, #48	; 0x30
 801d550:	7083      	strb	r3, [r0, #2]
 801d552:	70c1      	strb	r1, [r0, #3]
 801d554:	1d03      	adds	r3, r0, #4
 801d556:	e7f1      	b.n	801d53c <__exponent+0x60>

0801d558 <_printf_float>:
 801d558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d55c:	ed2d 8b02 	vpush	{d8}
 801d560:	b08d      	sub	sp, #52	; 0x34
 801d562:	460c      	mov	r4, r1
 801d564:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d568:	4616      	mov	r6, r2
 801d56a:	461f      	mov	r7, r3
 801d56c:	4605      	mov	r5, r0
 801d56e:	f002 fe61 	bl	8020234 <_localeconv_r>
 801d572:	f8d0 a000 	ldr.w	sl, [r0]
 801d576:	4650      	mov	r0, sl
 801d578:	f7e2 fe4c 	bl	8000214 <strlen>
 801d57c:	2300      	movs	r3, #0
 801d57e:	930a      	str	r3, [sp, #40]	; 0x28
 801d580:	6823      	ldr	r3, [r4, #0]
 801d582:	9305      	str	r3, [sp, #20]
 801d584:	f8d8 3000 	ldr.w	r3, [r8]
 801d588:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d58c:	3307      	adds	r3, #7
 801d58e:	f023 0307 	bic.w	r3, r3, #7
 801d592:	f103 0208 	add.w	r2, r3, #8
 801d596:	f8c8 2000 	str.w	r2, [r8]
 801d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d59e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801d5a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801d5a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d5aa:	9307      	str	r3, [sp, #28]
 801d5ac:	f8cd 8018 	str.w	r8, [sp, #24]
 801d5b0:	ee08 0a10 	vmov	s16, r0
 801d5b4:	4b9f      	ldr	r3, [pc, #636]	; (801d834 <_printf_float+0x2dc>)
 801d5b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d5ba:	f04f 32ff 	mov.w	r2, #4294967295
 801d5be:	f7e3 fadd 	bl	8000b7c <__aeabi_dcmpun>
 801d5c2:	bb88      	cbnz	r0, 801d628 <_printf_float+0xd0>
 801d5c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d5c8:	4b9a      	ldr	r3, [pc, #616]	; (801d834 <_printf_float+0x2dc>)
 801d5ca:	f04f 32ff 	mov.w	r2, #4294967295
 801d5ce:	f7e3 fab7 	bl	8000b40 <__aeabi_dcmple>
 801d5d2:	bb48      	cbnz	r0, 801d628 <_printf_float+0xd0>
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	2300      	movs	r3, #0
 801d5d8:	4640      	mov	r0, r8
 801d5da:	4649      	mov	r1, r9
 801d5dc:	f7e3 faa6 	bl	8000b2c <__aeabi_dcmplt>
 801d5e0:	b110      	cbz	r0, 801d5e8 <_printf_float+0x90>
 801d5e2:	232d      	movs	r3, #45	; 0x2d
 801d5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d5e8:	4b93      	ldr	r3, [pc, #588]	; (801d838 <_printf_float+0x2e0>)
 801d5ea:	4894      	ldr	r0, [pc, #592]	; (801d83c <_printf_float+0x2e4>)
 801d5ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801d5f0:	bf94      	ite	ls
 801d5f2:	4698      	movls	r8, r3
 801d5f4:	4680      	movhi	r8, r0
 801d5f6:	2303      	movs	r3, #3
 801d5f8:	6123      	str	r3, [r4, #16]
 801d5fa:	9b05      	ldr	r3, [sp, #20]
 801d5fc:	f023 0204 	bic.w	r2, r3, #4
 801d600:	6022      	str	r2, [r4, #0]
 801d602:	f04f 0900 	mov.w	r9, #0
 801d606:	9700      	str	r7, [sp, #0]
 801d608:	4633      	mov	r3, r6
 801d60a:	aa0b      	add	r2, sp, #44	; 0x2c
 801d60c:	4621      	mov	r1, r4
 801d60e:	4628      	mov	r0, r5
 801d610:	f000 f9d8 	bl	801d9c4 <_printf_common>
 801d614:	3001      	adds	r0, #1
 801d616:	f040 8090 	bne.w	801d73a <_printf_float+0x1e2>
 801d61a:	f04f 30ff 	mov.w	r0, #4294967295
 801d61e:	b00d      	add	sp, #52	; 0x34
 801d620:	ecbd 8b02 	vpop	{d8}
 801d624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d628:	4642      	mov	r2, r8
 801d62a:	464b      	mov	r3, r9
 801d62c:	4640      	mov	r0, r8
 801d62e:	4649      	mov	r1, r9
 801d630:	f7e3 faa4 	bl	8000b7c <__aeabi_dcmpun>
 801d634:	b140      	cbz	r0, 801d648 <_printf_float+0xf0>
 801d636:	464b      	mov	r3, r9
 801d638:	2b00      	cmp	r3, #0
 801d63a:	bfbc      	itt	lt
 801d63c:	232d      	movlt	r3, #45	; 0x2d
 801d63e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d642:	487f      	ldr	r0, [pc, #508]	; (801d840 <_printf_float+0x2e8>)
 801d644:	4b7f      	ldr	r3, [pc, #508]	; (801d844 <_printf_float+0x2ec>)
 801d646:	e7d1      	b.n	801d5ec <_printf_float+0x94>
 801d648:	6863      	ldr	r3, [r4, #4]
 801d64a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801d64e:	9206      	str	r2, [sp, #24]
 801d650:	1c5a      	adds	r2, r3, #1
 801d652:	d13f      	bne.n	801d6d4 <_printf_float+0x17c>
 801d654:	2306      	movs	r3, #6
 801d656:	6063      	str	r3, [r4, #4]
 801d658:	9b05      	ldr	r3, [sp, #20]
 801d65a:	6861      	ldr	r1, [r4, #4]
 801d65c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d660:	2300      	movs	r3, #0
 801d662:	9303      	str	r3, [sp, #12]
 801d664:	ab0a      	add	r3, sp, #40	; 0x28
 801d666:	e9cd b301 	strd	fp, r3, [sp, #4]
 801d66a:	ab09      	add	r3, sp, #36	; 0x24
 801d66c:	ec49 8b10 	vmov	d0, r8, r9
 801d670:	9300      	str	r3, [sp, #0]
 801d672:	6022      	str	r2, [r4, #0]
 801d674:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d678:	4628      	mov	r0, r5
 801d67a:	f7ff fecd 	bl	801d418 <__cvt>
 801d67e:	9b06      	ldr	r3, [sp, #24]
 801d680:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d682:	2b47      	cmp	r3, #71	; 0x47
 801d684:	4680      	mov	r8, r0
 801d686:	d108      	bne.n	801d69a <_printf_float+0x142>
 801d688:	1cc8      	adds	r0, r1, #3
 801d68a:	db02      	blt.n	801d692 <_printf_float+0x13a>
 801d68c:	6863      	ldr	r3, [r4, #4]
 801d68e:	4299      	cmp	r1, r3
 801d690:	dd41      	ble.n	801d716 <_printf_float+0x1be>
 801d692:	f1ab 0b02 	sub.w	fp, fp, #2
 801d696:	fa5f fb8b 	uxtb.w	fp, fp
 801d69a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d69e:	d820      	bhi.n	801d6e2 <_printf_float+0x18a>
 801d6a0:	3901      	subs	r1, #1
 801d6a2:	465a      	mov	r2, fp
 801d6a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d6a8:	9109      	str	r1, [sp, #36]	; 0x24
 801d6aa:	f7ff ff17 	bl	801d4dc <__exponent>
 801d6ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d6b0:	1813      	adds	r3, r2, r0
 801d6b2:	2a01      	cmp	r2, #1
 801d6b4:	4681      	mov	r9, r0
 801d6b6:	6123      	str	r3, [r4, #16]
 801d6b8:	dc02      	bgt.n	801d6c0 <_printf_float+0x168>
 801d6ba:	6822      	ldr	r2, [r4, #0]
 801d6bc:	07d2      	lsls	r2, r2, #31
 801d6be:	d501      	bpl.n	801d6c4 <_printf_float+0x16c>
 801d6c0:	3301      	adds	r3, #1
 801d6c2:	6123      	str	r3, [r4, #16]
 801d6c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	d09c      	beq.n	801d606 <_printf_float+0xae>
 801d6cc:	232d      	movs	r3, #45	; 0x2d
 801d6ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d6d2:	e798      	b.n	801d606 <_printf_float+0xae>
 801d6d4:	9a06      	ldr	r2, [sp, #24]
 801d6d6:	2a47      	cmp	r2, #71	; 0x47
 801d6d8:	d1be      	bne.n	801d658 <_printf_float+0x100>
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d1bc      	bne.n	801d658 <_printf_float+0x100>
 801d6de:	2301      	movs	r3, #1
 801d6e0:	e7b9      	b.n	801d656 <_printf_float+0xfe>
 801d6e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801d6e6:	d118      	bne.n	801d71a <_printf_float+0x1c2>
 801d6e8:	2900      	cmp	r1, #0
 801d6ea:	6863      	ldr	r3, [r4, #4]
 801d6ec:	dd0b      	ble.n	801d706 <_printf_float+0x1ae>
 801d6ee:	6121      	str	r1, [r4, #16]
 801d6f0:	b913      	cbnz	r3, 801d6f8 <_printf_float+0x1a0>
 801d6f2:	6822      	ldr	r2, [r4, #0]
 801d6f4:	07d0      	lsls	r0, r2, #31
 801d6f6:	d502      	bpl.n	801d6fe <_printf_float+0x1a6>
 801d6f8:	3301      	adds	r3, #1
 801d6fa:	440b      	add	r3, r1
 801d6fc:	6123      	str	r3, [r4, #16]
 801d6fe:	65a1      	str	r1, [r4, #88]	; 0x58
 801d700:	f04f 0900 	mov.w	r9, #0
 801d704:	e7de      	b.n	801d6c4 <_printf_float+0x16c>
 801d706:	b913      	cbnz	r3, 801d70e <_printf_float+0x1b6>
 801d708:	6822      	ldr	r2, [r4, #0]
 801d70a:	07d2      	lsls	r2, r2, #31
 801d70c:	d501      	bpl.n	801d712 <_printf_float+0x1ba>
 801d70e:	3302      	adds	r3, #2
 801d710:	e7f4      	b.n	801d6fc <_printf_float+0x1a4>
 801d712:	2301      	movs	r3, #1
 801d714:	e7f2      	b.n	801d6fc <_printf_float+0x1a4>
 801d716:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801d71a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d71c:	4299      	cmp	r1, r3
 801d71e:	db05      	blt.n	801d72c <_printf_float+0x1d4>
 801d720:	6823      	ldr	r3, [r4, #0]
 801d722:	6121      	str	r1, [r4, #16]
 801d724:	07d8      	lsls	r0, r3, #31
 801d726:	d5ea      	bpl.n	801d6fe <_printf_float+0x1a6>
 801d728:	1c4b      	adds	r3, r1, #1
 801d72a:	e7e7      	b.n	801d6fc <_printf_float+0x1a4>
 801d72c:	2900      	cmp	r1, #0
 801d72e:	bfd4      	ite	le
 801d730:	f1c1 0202 	rsble	r2, r1, #2
 801d734:	2201      	movgt	r2, #1
 801d736:	4413      	add	r3, r2
 801d738:	e7e0      	b.n	801d6fc <_printf_float+0x1a4>
 801d73a:	6823      	ldr	r3, [r4, #0]
 801d73c:	055a      	lsls	r2, r3, #21
 801d73e:	d407      	bmi.n	801d750 <_printf_float+0x1f8>
 801d740:	6923      	ldr	r3, [r4, #16]
 801d742:	4642      	mov	r2, r8
 801d744:	4631      	mov	r1, r6
 801d746:	4628      	mov	r0, r5
 801d748:	47b8      	blx	r7
 801d74a:	3001      	adds	r0, #1
 801d74c:	d12c      	bne.n	801d7a8 <_printf_float+0x250>
 801d74e:	e764      	b.n	801d61a <_printf_float+0xc2>
 801d750:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d754:	f240 80e0 	bls.w	801d918 <_printf_float+0x3c0>
 801d758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d75c:	2200      	movs	r2, #0
 801d75e:	2300      	movs	r3, #0
 801d760:	f7e3 f9da 	bl	8000b18 <__aeabi_dcmpeq>
 801d764:	2800      	cmp	r0, #0
 801d766:	d034      	beq.n	801d7d2 <_printf_float+0x27a>
 801d768:	4a37      	ldr	r2, [pc, #220]	; (801d848 <_printf_float+0x2f0>)
 801d76a:	2301      	movs	r3, #1
 801d76c:	4631      	mov	r1, r6
 801d76e:	4628      	mov	r0, r5
 801d770:	47b8      	blx	r7
 801d772:	3001      	adds	r0, #1
 801d774:	f43f af51 	beq.w	801d61a <_printf_float+0xc2>
 801d778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d77c:	429a      	cmp	r2, r3
 801d77e:	db02      	blt.n	801d786 <_printf_float+0x22e>
 801d780:	6823      	ldr	r3, [r4, #0]
 801d782:	07d8      	lsls	r0, r3, #31
 801d784:	d510      	bpl.n	801d7a8 <_printf_float+0x250>
 801d786:	ee18 3a10 	vmov	r3, s16
 801d78a:	4652      	mov	r2, sl
 801d78c:	4631      	mov	r1, r6
 801d78e:	4628      	mov	r0, r5
 801d790:	47b8      	blx	r7
 801d792:	3001      	adds	r0, #1
 801d794:	f43f af41 	beq.w	801d61a <_printf_float+0xc2>
 801d798:	f04f 0800 	mov.w	r8, #0
 801d79c:	f104 091a 	add.w	r9, r4, #26
 801d7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7a2:	3b01      	subs	r3, #1
 801d7a4:	4543      	cmp	r3, r8
 801d7a6:	dc09      	bgt.n	801d7bc <_printf_float+0x264>
 801d7a8:	6823      	ldr	r3, [r4, #0]
 801d7aa:	079b      	lsls	r3, r3, #30
 801d7ac:	f100 8105 	bmi.w	801d9ba <_printf_float+0x462>
 801d7b0:	68e0      	ldr	r0, [r4, #12]
 801d7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d7b4:	4298      	cmp	r0, r3
 801d7b6:	bfb8      	it	lt
 801d7b8:	4618      	movlt	r0, r3
 801d7ba:	e730      	b.n	801d61e <_printf_float+0xc6>
 801d7bc:	2301      	movs	r3, #1
 801d7be:	464a      	mov	r2, r9
 801d7c0:	4631      	mov	r1, r6
 801d7c2:	4628      	mov	r0, r5
 801d7c4:	47b8      	blx	r7
 801d7c6:	3001      	adds	r0, #1
 801d7c8:	f43f af27 	beq.w	801d61a <_printf_float+0xc2>
 801d7cc:	f108 0801 	add.w	r8, r8, #1
 801d7d0:	e7e6      	b.n	801d7a0 <_printf_float+0x248>
 801d7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	dc39      	bgt.n	801d84c <_printf_float+0x2f4>
 801d7d8:	4a1b      	ldr	r2, [pc, #108]	; (801d848 <_printf_float+0x2f0>)
 801d7da:	2301      	movs	r3, #1
 801d7dc:	4631      	mov	r1, r6
 801d7de:	4628      	mov	r0, r5
 801d7e0:	47b8      	blx	r7
 801d7e2:	3001      	adds	r0, #1
 801d7e4:	f43f af19 	beq.w	801d61a <_printf_float+0xc2>
 801d7e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d7ec:	4313      	orrs	r3, r2
 801d7ee:	d102      	bne.n	801d7f6 <_printf_float+0x29e>
 801d7f0:	6823      	ldr	r3, [r4, #0]
 801d7f2:	07d9      	lsls	r1, r3, #31
 801d7f4:	d5d8      	bpl.n	801d7a8 <_printf_float+0x250>
 801d7f6:	ee18 3a10 	vmov	r3, s16
 801d7fa:	4652      	mov	r2, sl
 801d7fc:	4631      	mov	r1, r6
 801d7fe:	4628      	mov	r0, r5
 801d800:	47b8      	blx	r7
 801d802:	3001      	adds	r0, #1
 801d804:	f43f af09 	beq.w	801d61a <_printf_float+0xc2>
 801d808:	f04f 0900 	mov.w	r9, #0
 801d80c:	f104 0a1a 	add.w	sl, r4, #26
 801d810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d812:	425b      	negs	r3, r3
 801d814:	454b      	cmp	r3, r9
 801d816:	dc01      	bgt.n	801d81c <_printf_float+0x2c4>
 801d818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d81a:	e792      	b.n	801d742 <_printf_float+0x1ea>
 801d81c:	2301      	movs	r3, #1
 801d81e:	4652      	mov	r2, sl
 801d820:	4631      	mov	r1, r6
 801d822:	4628      	mov	r0, r5
 801d824:	47b8      	blx	r7
 801d826:	3001      	adds	r0, #1
 801d828:	f43f aef7 	beq.w	801d61a <_printf_float+0xc2>
 801d82c:	f109 0901 	add.w	r9, r9, #1
 801d830:	e7ee      	b.n	801d810 <_printf_float+0x2b8>
 801d832:	bf00      	nop
 801d834:	7fefffff 	.word	0x7fefffff
 801d838:	0802205c 	.word	0x0802205c
 801d83c:	08022060 	.word	0x08022060
 801d840:	08022068 	.word	0x08022068
 801d844:	08022064 	.word	0x08022064
 801d848:	0802206c 	.word	0x0802206c
 801d84c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d84e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d850:	429a      	cmp	r2, r3
 801d852:	bfa8      	it	ge
 801d854:	461a      	movge	r2, r3
 801d856:	2a00      	cmp	r2, #0
 801d858:	4691      	mov	r9, r2
 801d85a:	dc37      	bgt.n	801d8cc <_printf_float+0x374>
 801d85c:	f04f 0b00 	mov.w	fp, #0
 801d860:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d864:	f104 021a 	add.w	r2, r4, #26
 801d868:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d86a:	9305      	str	r3, [sp, #20]
 801d86c:	eba3 0309 	sub.w	r3, r3, r9
 801d870:	455b      	cmp	r3, fp
 801d872:	dc33      	bgt.n	801d8dc <_printf_float+0x384>
 801d874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d878:	429a      	cmp	r2, r3
 801d87a:	db3b      	blt.n	801d8f4 <_printf_float+0x39c>
 801d87c:	6823      	ldr	r3, [r4, #0]
 801d87e:	07da      	lsls	r2, r3, #31
 801d880:	d438      	bmi.n	801d8f4 <_printf_float+0x39c>
 801d882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d884:	9b05      	ldr	r3, [sp, #20]
 801d886:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d888:	1ad3      	subs	r3, r2, r3
 801d88a:	eba2 0901 	sub.w	r9, r2, r1
 801d88e:	4599      	cmp	r9, r3
 801d890:	bfa8      	it	ge
 801d892:	4699      	movge	r9, r3
 801d894:	f1b9 0f00 	cmp.w	r9, #0
 801d898:	dc35      	bgt.n	801d906 <_printf_float+0x3ae>
 801d89a:	f04f 0800 	mov.w	r8, #0
 801d89e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d8a2:	f104 0a1a 	add.w	sl, r4, #26
 801d8a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d8aa:	1a9b      	subs	r3, r3, r2
 801d8ac:	eba3 0309 	sub.w	r3, r3, r9
 801d8b0:	4543      	cmp	r3, r8
 801d8b2:	f77f af79 	ble.w	801d7a8 <_printf_float+0x250>
 801d8b6:	2301      	movs	r3, #1
 801d8b8:	4652      	mov	r2, sl
 801d8ba:	4631      	mov	r1, r6
 801d8bc:	4628      	mov	r0, r5
 801d8be:	47b8      	blx	r7
 801d8c0:	3001      	adds	r0, #1
 801d8c2:	f43f aeaa 	beq.w	801d61a <_printf_float+0xc2>
 801d8c6:	f108 0801 	add.w	r8, r8, #1
 801d8ca:	e7ec      	b.n	801d8a6 <_printf_float+0x34e>
 801d8cc:	4613      	mov	r3, r2
 801d8ce:	4631      	mov	r1, r6
 801d8d0:	4642      	mov	r2, r8
 801d8d2:	4628      	mov	r0, r5
 801d8d4:	47b8      	blx	r7
 801d8d6:	3001      	adds	r0, #1
 801d8d8:	d1c0      	bne.n	801d85c <_printf_float+0x304>
 801d8da:	e69e      	b.n	801d61a <_printf_float+0xc2>
 801d8dc:	2301      	movs	r3, #1
 801d8de:	4631      	mov	r1, r6
 801d8e0:	4628      	mov	r0, r5
 801d8e2:	9205      	str	r2, [sp, #20]
 801d8e4:	47b8      	blx	r7
 801d8e6:	3001      	adds	r0, #1
 801d8e8:	f43f ae97 	beq.w	801d61a <_printf_float+0xc2>
 801d8ec:	9a05      	ldr	r2, [sp, #20]
 801d8ee:	f10b 0b01 	add.w	fp, fp, #1
 801d8f2:	e7b9      	b.n	801d868 <_printf_float+0x310>
 801d8f4:	ee18 3a10 	vmov	r3, s16
 801d8f8:	4652      	mov	r2, sl
 801d8fa:	4631      	mov	r1, r6
 801d8fc:	4628      	mov	r0, r5
 801d8fe:	47b8      	blx	r7
 801d900:	3001      	adds	r0, #1
 801d902:	d1be      	bne.n	801d882 <_printf_float+0x32a>
 801d904:	e689      	b.n	801d61a <_printf_float+0xc2>
 801d906:	9a05      	ldr	r2, [sp, #20]
 801d908:	464b      	mov	r3, r9
 801d90a:	4442      	add	r2, r8
 801d90c:	4631      	mov	r1, r6
 801d90e:	4628      	mov	r0, r5
 801d910:	47b8      	blx	r7
 801d912:	3001      	adds	r0, #1
 801d914:	d1c1      	bne.n	801d89a <_printf_float+0x342>
 801d916:	e680      	b.n	801d61a <_printf_float+0xc2>
 801d918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d91a:	2a01      	cmp	r2, #1
 801d91c:	dc01      	bgt.n	801d922 <_printf_float+0x3ca>
 801d91e:	07db      	lsls	r3, r3, #31
 801d920:	d538      	bpl.n	801d994 <_printf_float+0x43c>
 801d922:	2301      	movs	r3, #1
 801d924:	4642      	mov	r2, r8
 801d926:	4631      	mov	r1, r6
 801d928:	4628      	mov	r0, r5
 801d92a:	47b8      	blx	r7
 801d92c:	3001      	adds	r0, #1
 801d92e:	f43f ae74 	beq.w	801d61a <_printf_float+0xc2>
 801d932:	ee18 3a10 	vmov	r3, s16
 801d936:	4652      	mov	r2, sl
 801d938:	4631      	mov	r1, r6
 801d93a:	4628      	mov	r0, r5
 801d93c:	47b8      	blx	r7
 801d93e:	3001      	adds	r0, #1
 801d940:	f43f ae6b 	beq.w	801d61a <_printf_float+0xc2>
 801d944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d948:	2200      	movs	r2, #0
 801d94a:	2300      	movs	r3, #0
 801d94c:	f7e3 f8e4 	bl	8000b18 <__aeabi_dcmpeq>
 801d950:	b9d8      	cbnz	r0, 801d98a <_printf_float+0x432>
 801d952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d954:	f108 0201 	add.w	r2, r8, #1
 801d958:	3b01      	subs	r3, #1
 801d95a:	4631      	mov	r1, r6
 801d95c:	4628      	mov	r0, r5
 801d95e:	47b8      	blx	r7
 801d960:	3001      	adds	r0, #1
 801d962:	d10e      	bne.n	801d982 <_printf_float+0x42a>
 801d964:	e659      	b.n	801d61a <_printf_float+0xc2>
 801d966:	2301      	movs	r3, #1
 801d968:	4652      	mov	r2, sl
 801d96a:	4631      	mov	r1, r6
 801d96c:	4628      	mov	r0, r5
 801d96e:	47b8      	blx	r7
 801d970:	3001      	adds	r0, #1
 801d972:	f43f ae52 	beq.w	801d61a <_printf_float+0xc2>
 801d976:	f108 0801 	add.w	r8, r8, #1
 801d97a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d97c:	3b01      	subs	r3, #1
 801d97e:	4543      	cmp	r3, r8
 801d980:	dcf1      	bgt.n	801d966 <_printf_float+0x40e>
 801d982:	464b      	mov	r3, r9
 801d984:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d988:	e6dc      	b.n	801d744 <_printf_float+0x1ec>
 801d98a:	f04f 0800 	mov.w	r8, #0
 801d98e:	f104 0a1a 	add.w	sl, r4, #26
 801d992:	e7f2      	b.n	801d97a <_printf_float+0x422>
 801d994:	2301      	movs	r3, #1
 801d996:	4642      	mov	r2, r8
 801d998:	e7df      	b.n	801d95a <_printf_float+0x402>
 801d99a:	2301      	movs	r3, #1
 801d99c:	464a      	mov	r2, r9
 801d99e:	4631      	mov	r1, r6
 801d9a0:	4628      	mov	r0, r5
 801d9a2:	47b8      	blx	r7
 801d9a4:	3001      	adds	r0, #1
 801d9a6:	f43f ae38 	beq.w	801d61a <_printf_float+0xc2>
 801d9aa:	f108 0801 	add.w	r8, r8, #1
 801d9ae:	68e3      	ldr	r3, [r4, #12]
 801d9b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d9b2:	1a5b      	subs	r3, r3, r1
 801d9b4:	4543      	cmp	r3, r8
 801d9b6:	dcf0      	bgt.n	801d99a <_printf_float+0x442>
 801d9b8:	e6fa      	b.n	801d7b0 <_printf_float+0x258>
 801d9ba:	f04f 0800 	mov.w	r8, #0
 801d9be:	f104 0919 	add.w	r9, r4, #25
 801d9c2:	e7f4      	b.n	801d9ae <_printf_float+0x456>

0801d9c4 <_printf_common>:
 801d9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9c8:	4616      	mov	r6, r2
 801d9ca:	4699      	mov	r9, r3
 801d9cc:	688a      	ldr	r2, [r1, #8]
 801d9ce:	690b      	ldr	r3, [r1, #16]
 801d9d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d9d4:	4293      	cmp	r3, r2
 801d9d6:	bfb8      	it	lt
 801d9d8:	4613      	movlt	r3, r2
 801d9da:	6033      	str	r3, [r6, #0]
 801d9dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d9e0:	4607      	mov	r7, r0
 801d9e2:	460c      	mov	r4, r1
 801d9e4:	b10a      	cbz	r2, 801d9ea <_printf_common+0x26>
 801d9e6:	3301      	adds	r3, #1
 801d9e8:	6033      	str	r3, [r6, #0]
 801d9ea:	6823      	ldr	r3, [r4, #0]
 801d9ec:	0699      	lsls	r1, r3, #26
 801d9ee:	bf42      	ittt	mi
 801d9f0:	6833      	ldrmi	r3, [r6, #0]
 801d9f2:	3302      	addmi	r3, #2
 801d9f4:	6033      	strmi	r3, [r6, #0]
 801d9f6:	6825      	ldr	r5, [r4, #0]
 801d9f8:	f015 0506 	ands.w	r5, r5, #6
 801d9fc:	d106      	bne.n	801da0c <_printf_common+0x48>
 801d9fe:	f104 0a19 	add.w	sl, r4, #25
 801da02:	68e3      	ldr	r3, [r4, #12]
 801da04:	6832      	ldr	r2, [r6, #0]
 801da06:	1a9b      	subs	r3, r3, r2
 801da08:	42ab      	cmp	r3, r5
 801da0a:	dc26      	bgt.n	801da5a <_printf_common+0x96>
 801da0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801da10:	1e13      	subs	r3, r2, #0
 801da12:	6822      	ldr	r2, [r4, #0]
 801da14:	bf18      	it	ne
 801da16:	2301      	movne	r3, #1
 801da18:	0692      	lsls	r2, r2, #26
 801da1a:	d42b      	bmi.n	801da74 <_printf_common+0xb0>
 801da1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801da20:	4649      	mov	r1, r9
 801da22:	4638      	mov	r0, r7
 801da24:	47c0      	blx	r8
 801da26:	3001      	adds	r0, #1
 801da28:	d01e      	beq.n	801da68 <_printf_common+0xa4>
 801da2a:	6823      	ldr	r3, [r4, #0]
 801da2c:	68e5      	ldr	r5, [r4, #12]
 801da2e:	6832      	ldr	r2, [r6, #0]
 801da30:	f003 0306 	and.w	r3, r3, #6
 801da34:	2b04      	cmp	r3, #4
 801da36:	bf08      	it	eq
 801da38:	1aad      	subeq	r5, r5, r2
 801da3a:	68a3      	ldr	r3, [r4, #8]
 801da3c:	6922      	ldr	r2, [r4, #16]
 801da3e:	bf0c      	ite	eq
 801da40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801da44:	2500      	movne	r5, #0
 801da46:	4293      	cmp	r3, r2
 801da48:	bfc4      	itt	gt
 801da4a:	1a9b      	subgt	r3, r3, r2
 801da4c:	18ed      	addgt	r5, r5, r3
 801da4e:	2600      	movs	r6, #0
 801da50:	341a      	adds	r4, #26
 801da52:	42b5      	cmp	r5, r6
 801da54:	d11a      	bne.n	801da8c <_printf_common+0xc8>
 801da56:	2000      	movs	r0, #0
 801da58:	e008      	b.n	801da6c <_printf_common+0xa8>
 801da5a:	2301      	movs	r3, #1
 801da5c:	4652      	mov	r2, sl
 801da5e:	4649      	mov	r1, r9
 801da60:	4638      	mov	r0, r7
 801da62:	47c0      	blx	r8
 801da64:	3001      	adds	r0, #1
 801da66:	d103      	bne.n	801da70 <_printf_common+0xac>
 801da68:	f04f 30ff 	mov.w	r0, #4294967295
 801da6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da70:	3501      	adds	r5, #1
 801da72:	e7c6      	b.n	801da02 <_printf_common+0x3e>
 801da74:	18e1      	adds	r1, r4, r3
 801da76:	1c5a      	adds	r2, r3, #1
 801da78:	2030      	movs	r0, #48	; 0x30
 801da7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801da7e:	4422      	add	r2, r4
 801da80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801da84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801da88:	3302      	adds	r3, #2
 801da8a:	e7c7      	b.n	801da1c <_printf_common+0x58>
 801da8c:	2301      	movs	r3, #1
 801da8e:	4622      	mov	r2, r4
 801da90:	4649      	mov	r1, r9
 801da92:	4638      	mov	r0, r7
 801da94:	47c0      	blx	r8
 801da96:	3001      	adds	r0, #1
 801da98:	d0e6      	beq.n	801da68 <_printf_common+0xa4>
 801da9a:	3601      	adds	r6, #1
 801da9c:	e7d9      	b.n	801da52 <_printf_common+0x8e>
	...

0801daa0 <_printf_i>:
 801daa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801daa4:	460c      	mov	r4, r1
 801daa6:	4691      	mov	r9, r2
 801daa8:	7e27      	ldrb	r7, [r4, #24]
 801daaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801daac:	2f78      	cmp	r7, #120	; 0x78
 801daae:	4680      	mov	r8, r0
 801dab0:	469a      	mov	sl, r3
 801dab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dab6:	d807      	bhi.n	801dac8 <_printf_i+0x28>
 801dab8:	2f62      	cmp	r7, #98	; 0x62
 801daba:	d80a      	bhi.n	801dad2 <_printf_i+0x32>
 801dabc:	2f00      	cmp	r7, #0
 801dabe:	f000 80d8 	beq.w	801dc72 <_printf_i+0x1d2>
 801dac2:	2f58      	cmp	r7, #88	; 0x58
 801dac4:	f000 80a3 	beq.w	801dc0e <_printf_i+0x16e>
 801dac8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801dacc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dad0:	e03a      	b.n	801db48 <_printf_i+0xa8>
 801dad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dad6:	2b15      	cmp	r3, #21
 801dad8:	d8f6      	bhi.n	801dac8 <_printf_i+0x28>
 801dada:	a001      	add	r0, pc, #4	; (adr r0, 801dae0 <_printf_i+0x40>)
 801dadc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801dae0:	0801db39 	.word	0x0801db39
 801dae4:	0801db4d 	.word	0x0801db4d
 801dae8:	0801dac9 	.word	0x0801dac9
 801daec:	0801dac9 	.word	0x0801dac9
 801daf0:	0801dac9 	.word	0x0801dac9
 801daf4:	0801dac9 	.word	0x0801dac9
 801daf8:	0801db4d 	.word	0x0801db4d
 801dafc:	0801dac9 	.word	0x0801dac9
 801db00:	0801dac9 	.word	0x0801dac9
 801db04:	0801dac9 	.word	0x0801dac9
 801db08:	0801dac9 	.word	0x0801dac9
 801db0c:	0801dc59 	.word	0x0801dc59
 801db10:	0801db7d 	.word	0x0801db7d
 801db14:	0801dc3b 	.word	0x0801dc3b
 801db18:	0801dac9 	.word	0x0801dac9
 801db1c:	0801dac9 	.word	0x0801dac9
 801db20:	0801dc7b 	.word	0x0801dc7b
 801db24:	0801dac9 	.word	0x0801dac9
 801db28:	0801db7d 	.word	0x0801db7d
 801db2c:	0801dac9 	.word	0x0801dac9
 801db30:	0801dac9 	.word	0x0801dac9
 801db34:	0801dc43 	.word	0x0801dc43
 801db38:	680b      	ldr	r3, [r1, #0]
 801db3a:	1d1a      	adds	r2, r3, #4
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	600a      	str	r2, [r1, #0]
 801db40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801db44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801db48:	2301      	movs	r3, #1
 801db4a:	e0a3      	b.n	801dc94 <_printf_i+0x1f4>
 801db4c:	6825      	ldr	r5, [r4, #0]
 801db4e:	6808      	ldr	r0, [r1, #0]
 801db50:	062e      	lsls	r6, r5, #24
 801db52:	f100 0304 	add.w	r3, r0, #4
 801db56:	d50a      	bpl.n	801db6e <_printf_i+0xce>
 801db58:	6805      	ldr	r5, [r0, #0]
 801db5a:	600b      	str	r3, [r1, #0]
 801db5c:	2d00      	cmp	r5, #0
 801db5e:	da03      	bge.n	801db68 <_printf_i+0xc8>
 801db60:	232d      	movs	r3, #45	; 0x2d
 801db62:	426d      	negs	r5, r5
 801db64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801db68:	485e      	ldr	r0, [pc, #376]	; (801dce4 <_printf_i+0x244>)
 801db6a:	230a      	movs	r3, #10
 801db6c:	e019      	b.n	801dba2 <_printf_i+0x102>
 801db6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801db72:	6805      	ldr	r5, [r0, #0]
 801db74:	600b      	str	r3, [r1, #0]
 801db76:	bf18      	it	ne
 801db78:	b22d      	sxthne	r5, r5
 801db7a:	e7ef      	b.n	801db5c <_printf_i+0xbc>
 801db7c:	680b      	ldr	r3, [r1, #0]
 801db7e:	6825      	ldr	r5, [r4, #0]
 801db80:	1d18      	adds	r0, r3, #4
 801db82:	6008      	str	r0, [r1, #0]
 801db84:	0628      	lsls	r0, r5, #24
 801db86:	d501      	bpl.n	801db8c <_printf_i+0xec>
 801db88:	681d      	ldr	r5, [r3, #0]
 801db8a:	e002      	b.n	801db92 <_printf_i+0xf2>
 801db8c:	0669      	lsls	r1, r5, #25
 801db8e:	d5fb      	bpl.n	801db88 <_printf_i+0xe8>
 801db90:	881d      	ldrh	r5, [r3, #0]
 801db92:	4854      	ldr	r0, [pc, #336]	; (801dce4 <_printf_i+0x244>)
 801db94:	2f6f      	cmp	r7, #111	; 0x6f
 801db96:	bf0c      	ite	eq
 801db98:	2308      	moveq	r3, #8
 801db9a:	230a      	movne	r3, #10
 801db9c:	2100      	movs	r1, #0
 801db9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dba2:	6866      	ldr	r6, [r4, #4]
 801dba4:	60a6      	str	r6, [r4, #8]
 801dba6:	2e00      	cmp	r6, #0
 801dba8:	bfa2      	ittt	ge
 801dbaa:	6821      	ldrge	r1, [r4, #0]
 801dbac:	f021 0104 	bicge.w	r1, r1, #4
 801dbb0:	6021      	strge	r1, [r4, #0]
 801dbb2:	b90d      	cbnz	r5, 801dbb8 <_printf_i+0x118>
 801dbb4:	2e00      	cmp	r6, #0
 801dbb6:	d04d      	beq.n	801dc54 <_printf_i+0x1b4>
 801dbb8:	4616      	mov	r6, r2
 801dbba:	fbb5 f1f3 	udiv	r1, r5, r3
 801dbbe:	fb03 5711 	mls	r7, r3, r1, r5
 801dbc2:	5dc7      	ldrb	r7, [r0, r7]
 801dbc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801dbc8:	462f      	mov	r7, r5
 801dbca:	42bb      	cmp	r3, r7
 801dbcc:	460d      	mov	r5, r1
 801dbce:	d9f4      	bls.n	801dbba <_printf_i+0x11a>
 801dbd0:	2b08      	cmp	r3, #8
 801dbd2:	d10b      	bne.n	801dbec <_printf_i+0x14c>
 801dbd4:	6823      	ldr	r3, [r4, #0]
 801dbd6:	07df      	lsls	r7, r3, #31
 801dbd8:	d508      	bpl.n	801dbec <_printf_i+0x14c>
 801dbda:	6923      	ldr	r3, [r4, #16]
 801dbdc:	6861      	ldr	r1, [r4, #4]
 801dbde:	4299      	cmp	r1, r3
 801dbe0:	bfde      	ittt	le
 801dbe2:	2330      	movle	r3, #48	; 0x30
 801dbe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801dbe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801dbec:	1b92      	subs	r2, r2, r6
 801dbee:	6122      	str	r2, [r4, #16]
 801dbf0:	f8cd a000 	str.w	sl, [sp]
 801dbf4:	464b      	mov	r3, r9
 801dbf6:	aa03      	add	r2, sp, #12
 801dbf8:	4621      	mov	r1, r4
 801dbfa:	4640      	mov	r0, r8
 801dbfc:	f7ff fee2 	bl	801d9c4 <_printf_common>
 801dc00:	3001      	adds	r0, #1
 801dc02:	d14c      	bne.n	801dc9e <_printf_i+0x1fe>
 801dc04:	f04f 30ff 	mov.w	r0, #4294967295
 801dc08:	b004      	add	sp, #16
 801dc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc0e:	4835      	ldr	r0, [pc, #212]	; (801dce4 <_printf_i+0x244>)
 801dc10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801dc14:	6823      	ldr	r3, [r4, #0]
 801dc16:	680e      	ldr	r6, [r1, #0]
 801dc18:	061f      	lsls	r7, r3, #24
 801dc1a:	f856 5b04 	ldr.w	r5, [r6], #4
 801dc1e:	600e      	str	r6, [r1, #0]
 801dc20:	d514      	bpl.n	801dc4c <_printf_i+0x1ac>
 801dc22:	07d9      	lsls	r1, r3, #31
 801dc24:	bf44      	itt	mi
 801dc26:	f043 0320 	orrmi.w	r3, r3, #32
 801dc2a:	6023      	strmi	r3, [r4, #0]
 801dc2c:	b91d      	cbnz	r5, 801dc36 <_printf_i+0x196>
 801dc2e:	6823      	ldr	r3, [r4, #0]
 801dc30:	f023 0320 	bic.w	r3, r3, #32
 801dc34:	6023      	str	r3, [r4, #0]
 801dc36:	2310      	movs	r3, #16
 801dc38:	e7b0      	b.n	801db9c <_printf_i+0xfc>
 801dc3a:	6823      	ldr	r3, [r4, #0]
 801dc3c:	f043 0320 	orr.w	r3, r3, #32
 801dc40:	6023      	str	r3, [r4, #0]
 801dc42:	2378      	movs	r3, #120	; 0x78
 801dc44:	4828      	ldr	r0, [pc, #160]	; (801dce8 <_printf_i+0x248>)
 801dc46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801dc4a:	e7e3      	b.n	801dc14 <_printf_i+0x174>
 801dc4c:	065e      	lsls	r6, r3, #25
 801dc4e:	bf48      	it	mi
 801dc50:	b2ad      	uxthmi	r5, r5
 801dc52:	e7e6      	b.n	801dc22 <_printf_i+0x182>
 801dc54:	4616      	mov	r6, r2
 801dc56:	e7bb      	b.n	801dbd0 <_printf_i+0x130>
 801dc58:	680b      	ldr	r3, [r1, #0]
 801dc5a:	6826      	ldr	r6, [r4, #0]
 801dc5c:	6960      	ldr	r0, [r4, #20]
 801dc5e:	1d1d      	adds	r5, r3, #4
 801dc60:	600d      	str	r5, [r1, #0]
 801dc62:	0635      	lsls	r5, r6, #24
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	d501      	bpl.n	801dc6c <_printf_i+0x1cc>
 801dc68:	6018      	str	r0, [r3, #0]
 801dc6a:	e002      	b.n	801dc72 <_printf_i+0x1d2>
 801dc6c:	0671      	lsls	r1, r6, #25
 801dc6e:	d5fb      	bpl.n	801dc68 <_printf_i+0x1c8>
 801dc70:	8018      	strh	r0, [r3, #0]
 801dc72:	2300      	movs	r3, #0
 801dc74:	6123      	str	r3, [r4, #16]
 801dc76:	4616      	mov	r6, r2
 801dc78:	e7ba      	b.n	801dbf0 <_printf_i+0x150>
 801dc7a:	680b      	ldr	r3, [r1, #0]
 801dc7c:	1d1a      	adds	r2, r3, #4
 801dc7e:	600a      	str	r2, [r1, #0]
 801dc80:	681e      	ldr	r6, [r3, #0]
 801dc82:	6862      	ldr	r2, [r4, #4]
 801dc84:	2100      	movs	r1, #0
 801dc86:	4630      	mov	r0, r6
 801dc88:	f7e2 fad2 	bl	8000230 <memchr>
 801dc8c:	b108      	cbz	r0, 801dc92 <_printf_i+0x1f2>
 801dc8e:	1b80      	subs	r0, r0, r6
 801dc90:	6060      	str	r0, [r4, #4]
 801dc92:	6863      	ldr	r3, [r4, #4]
 801dc94:	6123      	str	r3, [r4, #16]
 801dc96:	2300      	movs	r3, #0
 801dc98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dc9c:	e7a8      	b.n	801dbf0 <_printf_i+0x150>
 801dc9e:	6923      	ldr	r3, [r4, #16]
 801dca0:	4632      	mov	r2, r6
 801dca2:	4649      	mov	r1, r9
 801dca4:	4640      	mov	r0, r8
 801dca6:	47d0      	blx	sl
 801dca8:	3001      	adds	r0, #1
 801dcaa:	d0ab      	beq.n	801dc04 <_printf_i+0x164>
 801dcac:	6823      	ldr	r3, [r4, #0]
 801dcae:	079b      	lsls	r3, r3, #30
 801dcb0:	d413      	bmi.n	801dcda <_printf_i+0x23a>
 801dcb2:	68e0      	ldr	r0, [r4, #12]
 801dcb4:	9b03      	ldr	r3, [sp, #12]
 801dcb6:	4298      	cmp	r0, r3
 801dcb8:	bfb8      	it	lt
 801dcba:	4618      	movlt	r0, r3
 801dcbc:	e7a4      	b.n	801dc08 <_printf_i+0x168>
 801dcbe:	2301      	movs	r3, #1
 801dcc0:	4632      	mov	r2, r6
 801dcc2:	4649      	mov	r1, r9
 801dcc4:	4640      	mov	r0, r8
 801dcc6:	47d0      	blx	sl
 801dcc8:	3001      	adds	r0, #1
 801dcca:	d09b      	beq.n	801dc04 <_printf_i+0x164>
 801dccc:	3501      	adds	r5, #1
 801dcce:	68e3      	ldr	r3, [r4, #12]
 801dcd0:	9903      	ldr	r1, [sp, #12]
 801dcd2:	1a5b      	subs	r3, r3, r1
 801dcd4:	42ab      	cmp	r3, r5
 801dcd6:	dcf2      	bgt.n	801dcbe <_printf_i+0x21e>
 801dcd8:	e7eb      	b.n	801dcb2 <_printf_i+0x212>
 801dcda:	2500      	movs	r5, #0
 801dcdc:	f104 0619 	add.w	r6, r4, #25
 801dce0:	e7f5      	b.n	801dcce <_printf_i+0x22e>
 801dce2:	bf00      	nop
 801dce4:	0802206e 	.word	0x0802206e
 801dce8:	0802207f 	.word	0x0802207f

0801dcec <_sbrk_r>:
 801dcec:	b538      	push	{r3, r4, r5, lr}
 801dcee:	4d06      	ldr	r5, [pc, #24]	; (801dd08 <_sbrk_r+0x1c>)
 801dcf0:	2300      	movs	r3, #0
 801dcf2:	4604      	mov	r4, r0
 801dcf4:	4608      	mov	r0, r1
 801dcf6:	602b      	str	r3, [r5, #0]
 801dcf8:	f7fe ff6e 	bl	801cbd8 <_sbrk>
 801dcfc:	1c43      	adds	r3, r0, #1
 801dcfe:	d102      	bne.n	801dd06 <_sbrk_r+0x1a>
 801dd00:	682b      	ldr	r3, [r5, #0]
 801dd02:	b103      	cbz	r3, 801dd06 <_sbrk_r+0x1a>
 801dd04:	6023      	str	r3, [r4, #0]
 801dd06:	bd38      	pop	{r3, r4, r5, pc}
 801dd08:	20019220 	.word	0x20019220

0801dd0c <siprintf>:
 801dd0c:	b40e      	push	{r1, r2, r3}
 801dd0e:	b500      	push	{lr}
 801dd10:	b09c      	sub	sp, #112	; 0x70
 801dd12:	ab1d      	add	r3, sp, #116	; 0x74
 801dd14:	9002      	str	r0, [sp, #8]
 801dd16:	9006      	str	r0, [sp, #24]
 801dd18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dd1c:	4809      	ldr	r0, [pc, #36]	; (801dd44 <siprintf+0x38>)
 801dd1e:	9107      	str	r1, [sp, #28]
 801dd20:	9104      	str	r1, [sp, #16]
 801dd22:	4909      	ldr	r1, [pc, #36]	; (801dd48 <siprintf+0x3c>)
 801dd24:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd28:	9105      	str	r1, [sp, #20]
 801dd2a:	6800      	ldr	r0, [r0, #0]
 801dd2c:	9301      	str	r3, [sp, #4]
 801dd2e:	a902      	add	r1, sp, #8
 801dd30:	f002 ffca 	bl	8020cc8 <_svfiprintf_r>
 801dd34:	9b02      	ldr	r3, [sp, #8]
 801dd36:	2200      	movs	r2, #0
 801dd38:	701a      	strb	r2, [r3, #0]
 801dd3a:	b01c      	add	sp, #112	; 0x70
 801dd3c:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd40:	b003      	add	sp, #12
 801dd42:	4770      	bx	lr
 801dd44:	2000008c 	.word	0x2000008c
 801dd48:	ffff0208 	.word	0xffff0208

0801dd4c <__sread>:
 801dd4c:	b510      	push	{r4, lr}
 801dd4e:	460c      	mov	r4, r1
 801dd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd54:	f003 f8b8 	bl	8020ec8 <_read_r>
 801dd58:	2800      	cmp	r0, #0
 801dd5a:	bfab      	itete	ge
 801dd5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dd5e:	89a3      	ldrhlt	r3, [r4, #12]
 801dd60:	181b      	addge	r3, r3, r0
 801dd62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dd66:	bfac      	ite	ge
 801dd68:	6563      	strge	r3, [r4, #84]	; 0x54
 801dd6a:	81a3      	strhlt	r3, [r4, #12]
 801dd6c:	bd10      	pop	{r4, pc}

0801dd6e <__swrite>:
 801dd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd72:	461f      	mov	r7, r3
 801dd74:	898b      	ldrh	r3, [r1, #12]
 801dd76:	05db      	lsls	r3, r3, #23
 801dd78:	4605      	mov	r5, r0
 801dd7a:	460c      	mov	r4, r1
 801dd7c:	4616      	mov	r6, r2
 801dd7e:	d505      	bpl.n	801dd8c <__swrite+0x1e>
 801dd80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd84:	2302      	movs	r3, #2
 801dd86:	2200      	movs	r2, #0
 801dd88:	f002 fa58 	bl	802023c <_lseek_r>
 801dd8c:	89a3      	ldrh	r3, [r4, #12]
 801dd8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dd92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dd96:	81a3      	strh	r3, [r4, #12]
 801dd98:	4632      	mov	r2, r6
 801dd9a:	463b      	mov	r3, r7
 801dd9c:	4628      	mov	r0, r5
 801dd9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dda2:	f000 bfad 	b.w	801ed00 <_write_r>

0801dda6 <__sseek>:
 801dda6:	b510      	push	{r4, lr}
 801dda8:	460c      	mov	r4, r1
 801ddaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddae:	f002 fa45 	bl	802023c <_lseek_r>
 801ddb2:	1c43      	adds	r3, r0, #1
 801ddb4:	89a3      	ldrh	r3, [r4, #12]
 801ddb6:	bf15      	itete	ne
 801ddb8:	6560      	strne	r0, [r4, #84]	; 0x54
 801ddba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ddbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ddc2:	81a3      	strheq	r3, [r4, #12]
 801ddc4:	bf18      	it	ne
 801ddc6:	81a3      	strhne	r3, [r4, #12]
 801ddc8:	bd10      	pop	{r4, pc}

0801ddca <__sclose>:
 801ddca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddce:	f001 b817 	b.w	801ee00 <_close_r>

0801ddd2 <strcat>:
 801ddd2:	b510      	push	{r4, lr}
 801ddd4:	4602      	mov	r2, r0
 801ddd6:	7814      	ldrb	r4, [r2, #0]
 801ddd8:	4613      	mov	r3, r2
 801ddda:	3201      	adds	r2, #1
 801dddc:	2c00      	cmp	r4, #0
 801ddde:	d1fa      	bne.n	801ddd6 <strcat+0x4>
 801dde0:	3b01      	subs	r3, #1
 801dde2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dde6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ddea:	2a00      	cmp	r2, #0
 801ddec:	d1f9      	bne.n	801dde2 <strcat+0x10>
 801ddee:	bd10      	pop	{r4, pc}

0801ddf0 <strchr>:
 801ddf0:	b2c9      	uxtb	r1, r1
 801ddf2:	4603      	mov	r3, r0
 801ddf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ddf8:	b11a      	cbz	r2, 801de02 <strchr+0x12>
 801ddfa:	428a      	cmp	r2, r1
 801ddfc:	d1f9      	bne.n	801ddf2 <strchr+0x2>
 801ddfe:	4618      	mov	r0, r3
 801de00:	4770      	bx	lr
 801de02:	2900      	cmp	r1, #0
 801de04:	bf18      	it	ne
 801de06:	2300      	movne	r3, #0
 801de08:	e7f9      	b.n	801ddfe <strchr+0xe>

0801de0a <strncmp>:
 801de0a:	b510      	push	{r4, lr}
 801de0c:	b16a      	cbz	r2, 801de2a <strncmp+0x20>
 801de0e:	3901      	subs	r1, #1
 801de10:	1884      	adds	r4, r0, r2
 801de12:	f810 3b01 	ldrb.w	r3, [r0], #1
 801de16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801de1a:	4293      	cmp	r3, r2
 801de1c:	d103      	bne.n	801de26 <strncmp+0x1c>
 801de1e:	42a0      	cmp	r0, r4
 801de20:	d001      	beq.n	801de26 <strncmp+0x1c>
 801de22:	2b00      	cmp	r3, #0
 801de24:	d1f5      	bne.n	801de12 <strncmp+0x8>
 801de26:	1a98      	subs	r0, r3, r2
 801de28:	bd10      	pop	{r4, pc}
 801de2a:	4610      	mov	r0, r2
 801de2c:	e7fc      	b.n	801de28 <strncmp+0x1e>

0801de2e <strncpy>:
 801de2e:	b510      	push	{r4, lr}
 801de30:	3901      	subs	r1, #1
 801de32:	4603      	mov	r3, r0
 801de34:	b132      	cbz	r2, 801de44 <strncpy+0x16>
 801de36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801de3a:	f803 4b01 	strb.w	r4, [r3], #1
 801de3e:	3a01      	subs	r2, #1
 801de40:	2c00      	cmp	r4, #0
 801de42:	d1f7      	bne.n	801de34 <strncpy+0x6>
 801de44:	441a      	add	r2, r3
 801de46:	2100      	movs	r1, #0
 801de48:	4293      	cmp	r3, r2
 801de4a:	d100      	bne.n	801de4e <strncpy+0x20>
 801de4c:	bd10      	pop	{r4, pc}
 801de4e:	f803 1b01 	strb.w	r1, [r3], #1
 801de52:	e7f9      	b.n	801de48 <strncpy+0x1a>

0801de54 <sulp>:
 801de54:	b570      	push	{r4, r5, r6, lr}
 801de56:	4604      	mov	r4, r0
 801de58:	460d      	mov	r5, r1
 801de5a:	ec45 4b10 	vmov	d0, r4, r5
 801de5e:	4616      	mov	r6, r2
 801de60:	f002 fd88 	bl	8020974 <__ulp>
 801de64:	ec51 0b10 	vmov	r0, r1, d0
 801de68:	b17e      	cbz	r6, 801de8a <sulp+0x36>
 801de6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801de6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801de72:	2b00      	cmp	r3, #0
 801de74:	dd09      	ble.n	801de8a <sulp+0x36>
 801de76:	051b      	lsls	r3, r3, #20
 801de78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801de7c:	2400      	movs	r4, #0
 801de7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801de82:	4622      	mov	r2, r4
 801de84:	462b      	mov	r3, r5
 801de86:	f7e2 fbdf 	bl	8000648 <__aeabi_dmul>
 801de8a:	bd70      	pop	{r4, r5, r6, pc}
 801de8c:	0000      	movs	r0, r0
	...

0801de90 <_strtod_l>:
 801de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de94:	b0a3      	sub	sp, #140	; 0x8c
 801de96:	461f      	mov	r7, r3
 801de98:	2300      	movs	r3, #0
 801de9a:	931e      	str	r3, [sp, #120]	; 0x78
 801de9c:	4ba4      	ldr	r3, [pc, #656]	; (801e130 <_strtod_l+0x2a0>)
 801de9e:	9219      	str	r2, [sp, #100]	; 0x64
 801dea0:	681b      	ldr	r3, [r3, #0]
 801dea2:	9307      	str	r3, [sp, #28]
 801dea4:	4604      	mov	r4, r0
 801dea6:	4618      	mov	r0, r3
 801dea8:	4688      	mov	r8, r1
 801deaa:	f7e2 f9b3 	bl	8000214 <strlen>
 801deae:	f04f 0a00 	mov.w	sl, #0
 801deb2:	4605      	mov	r5, r0
 801deb4:	f04f 0b00 	mov.w	fp, #0
 801deb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801debc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801debe:	781a      	ldrb	r2, [r3, #0]
 801dec0:	2a2b      	cmp	r2, #43	; 0x2b
 801dec2:	d04c      	beq.n	801df5e <_strtod_l+0xce>
 801dec4:	d839      	bhi.n	801df3a <_strtod_l+0xaa>
 801dec6:	2a0d      	cmp	r2, #13
 801dec8:	d832      	bhi.n	801df30 <_strtod_l+0xa0>
 801deca:	2a08      	cmp	r2, #8
 801decc:	d832      	bhi.n	801df34 <_strtod_l+0xa4>
 801dece:	2a00      	cmp	r2, #0
 801ded0:	d03c      	beq.n	801df4c <_strtod_l+0xbc>
 801ded2:	2300      	movs	r3, #0
 801ded4:	930e      	str	r3, [sp, #56]	; 0x38
 801ded6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ded8:	7833      	ldrb	r3, [r6, #0]
 801deda:	2b30      	cmp	r3, #48	; 0x30
 801dedc:	f040 80b4 	bne.w	801e048 <_strtod_l+0x1b8>
 801dee0:	7873      	ldrb	r3, [r6, #1]
 801dee2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801dee6:	2b58      	cmp	r3, #88	; 0x58
 801dee8:	d16c      	bne.n	801dfc4 <_strtod_l+0x134>
 801deea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801deec:	9301      	str	r3, [sp, #4]
 801deee:	ab1e      	add	r3, sp, #120	; 0x78
 801def0:	9702      	str	r7, [sp, #8]
 801def2:	9300      	str	r3, [sp, #0]
 801def4:	4a8f      	ldr	r2, [pc, #572]	; (801e134 <_strtod_l+0x2a4>)
 801def6:	ab1f      	add	r3, sp, #124	; 0x7c
 801def8:	a91d      	add	r1, sp, #116	; 0x74
 801defa:	4620      	mov	r0, r4
 801defc:	f001 fe82 	bl	801fc04 <__gethex>
 801df00:	f010 0707 	ands.w	r7, r0, #7
 801df04:	4605      	mov	r5, r0
 801df06:	d005      	beq.n	801df14 <_strtod_l+0x84>
 801df08:	2f06      	cmp	r7, #6
 801df0a:	d12a      	bne.n	801df62 <_strtod_l+0xd2>
 801df0c:	3601      	adds	r6, #1
 801df0e:	2300      	movs	r3, #0
 801df10:	961d      	str	r6, [sp, #116]	; 0x74
 801df12:	930e      	str	r3, [sp, #56]	; 0x38
 801df14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801df16:	2b00      	cmp	r3, #0
 801df18:	f040 8596 	bne.w	801ea48 <_strtod_l+0xbb8>
 801df1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df1e:	b1db      	cbz	r3, 801df58 <_strtod_l+0xc8>
 801df20:	4652      	mov	r2, sl
 801df22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801df26:	ec43 2b10 	vmov	d0, r2, r3
 801df2a:	b023      	add	sp, #140	; 0x8c
 801df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df30:	2a20      	cmp	r2, #32
 801df32:	d1ce      	bne.n	801ded2 <_strtod_l+0x42>
 801df34:	3301      	adds	r3, #1
 801df36:	931d      	str	r3, [sp, #116]	; 0x74
 801df38:	e7c0      	b.n	801debc <_strtod_l+0x2c>
 801df3a:	2a2d      	cmp	r2, #45	; 0x2d
 801df3c:	d1c9      	bne.n	801ded2 <_strtod_l+0x42>
 801df3e:	2201      	movs	r2, #1
 801df40:	920e      	str	r2, [sp, #56]	; 0x38
 801df42:	1c5a      	adds	r2, r3, #1
 801df44:	921d      	str	r2, [sp, #116]	; 0x74
 801df46:	785b      	ldrb	r3, [r3, #1]
 801df48:	2b00      	cmp	r3, #0
 801df4a:	d1c4      	bne.n	801ded6 <_strtod_l+0x46>
 801df4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801df4e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801df52:	2b00      	cmp	r3, #0
 801df54:	f040 8576 	bne.w	801ea44 <_strtod_l+0xbb4>
 801df58:	4652      	mov	r2, sl
 801df5a:	465b      	mov	r3, fp
 801df5c:	e7e3      	b.n	801df26 <_strtod_l+0x96>
 801df5e:	2200      	movs	r2, #0
 801df60:	e7ee      	b.n	801df40 <_strtod_l+0xb0>
 801df62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801df64:	b13a      	cbz	r2, 801df76 <_strtod_l+0xe6>
 801df66:	2135      	movs	r1, #53	; 0x35
 801df68:	a820      	add	r0, sp, #128	; 0x80
 801df6a:	f002 fe0e 	bl	8020b8a <__copybits>
 801df6e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801df70:	4620      	mov	r0, r4
 801df72:	f002 f9d3 	bl	802031c <_Bfree>
 801df76:	3f01      	subs	r7, #1
 801df78:	2f05      	cmp	r7, #5
 801df7a:	d807      	bhi.n	801df8c <_strtod_l+0xfc>
 801df7c:	e8df f007 	tbb	[pc, r7]
 801df80:	1d180b0e 	.word	0x1d180b0e
 801df84:	030e      	.short	0x030e
 801df86:	f04f 0b00 	mov.w	fp, #0
 801df8a:	46da      	mov	sl, fp
 801df8c:	0728      	lsls	r0, r5, #28
 801df8e:	d5c1      	bpl.n	801df14 <_strtod_l+0x84>
 801df90:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801df94:	e7be      	b.n	801df14 <_strtod_l+0x84>
 801df96:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801df9a:	e7f7      	b.n	801df8c <_strtod_l+0xfc>
 801df9c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801dfa0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801dfa2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801dfa6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801dfaa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801dfae:	e7ed      	b.n	801df8c <_strtod_l+0xfc>
 801dfb0:	f8df b184 	ldr.w	fp, [pc, #388]	; 801e138 <_strtod_l+0x2a8>
 801dfb4:	f04f 0a00 	mov.w	sl, #0
 801dfb8:	e7e8      	b.n	801df8c <_strtod_l+0xfc>
 801dfba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801dfbe:	f04f 3aff 	mov.w	sl, #4294967295
 801dfc2:	e7e3      	b.n	801df8c <_strtod_l+0xfc>
 801dfc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dfc6:	1c5a      	adds	r2, r3, #1
 801dfc8:	921d      	str	r2, [sp, #116]	; 0x74
 801dfca:	785b      	ldrb	r3, [r3, #1]
 801dfcc:	2b30      	cmp	r3, #48	; 0x30
 801dfce:	d0f9      	beq.n	801dfc4 <_strtod_l+0x134>
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d09f      	beq.n	801df14 <_strtod_l+0x84>
 801dfd4:	2301      	movs	r3, #1
 801dfd6:	f04f 0900 	mov.w	r9, #0
 801dfda:	9304      	str	r3, [sp, #16]
 801dfdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dfde:	930a      	str	r3, [sp, #40]	; 0x28
 801dfe0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801dfe4:	464f      	mov	r7, r9
 801dfe6:	220a      	movs	r2, #10
 801dfe8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801dfea:	7806      	ldrb	r6, [r0, #0]
 801dfec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801dff0:	b2d9      	uxtb	r1, r3
 801dff2:	2909      	cmp	r1, #9
 801dff4:	d92a      	bls.n	801e04c <_strtod_l+0x1bc>
 801dff6:	9907      	ldr	r1, [sp, #28]
 801dff8:	462a      	mov	r2, r5
 801dffa:	f7ff ff06 	bl	801de0a <strncmp>
 801dffe:	b398      	cbz	r0, 801e068 <_strtod_l+0x1d8>
 801e000:	2000      	movs	r0, #0
 801e002:	4633      	mov	r3, r6
 801e004:	463d      	mov	r5, r7
 801e006:	9007      	str	r0, [sp, #28]
 801e008:	4602      	mov	r2, r0
 801e00a:	2b65      	cmp	r3, #101	; 0x65
 801e00c:	d001      	beq.n	801e012 <_strtod_l+0x182>
 801e00e:	2b45      	cmp	r3, #69	; 0x45
 801e010:	d118      	bne.n	801e044 <_strtod_l+0x1b4>
 801e012:	b91d      	cbnz	r5, 801e01c <_strtod_l+0x18c>
 801e014:	9b04      	ldr	r3, [sp, #16]
 801e016:	4303      	orrs	r3, r0
 801e018:	d098      	beq.n	801df4c <_strtod_l+0xbc>
 801e01a:	2500      	movs	r5, #0
 801e01c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801e020:	f108 0301 	add.w	r3, r8, #1
 801e024:	931d      	str	r3, [sp, #116]	; 0x74
 801e026:	f898 3001 	ldrb.w	r3, [r8, #1]
 801e02a:	2b2b      	cmp	r3, #43	; 0x2b
 801e02c:	d075      	beq.n	801e11a <_strtod_l+0x28a>
 801e02e:	2b2d      	cmp	r3, #45	; 0x2d
 801e030:	d07b      	beq.n	801e12a <_strtod_l+0x29a>
 801e032:	f04f 0c00 	mov.w	ip, #0
 801e036:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801e03a:	2909      	cmp	r1, #9
 801e03c:	f240 8082 	bls.w	801e144 <_strtod_l+0x2b4>
 801e040:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801e044:	2600      	movs	r6, #0
 801e046:	e09d      	b.n	801e184 <_strtod_l+0x2f4>
 801e048:	2300      	movs	r3, #0
 801e04a:	e7c4      	b.n	801dfd6 <_strtod_l+0x146>
 801e04c:	2f08      	cmp	r7, #8
 801e04e:	bfd8      	it	le
 801e050:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801e052:	f100 0001 	add.w	r0, r0, #1
 801e056:	bfda      	itte	le
 801e058:	fb02 3301 	mlale	r3, r2, r1, r3
 801e05c:	9309      	strle	r3, [sp, #36]	; 0x24
 801e05e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801e062:	3701      	adds	r7, #1
 801e064:	901d      	str	r0, [sp, #116]	; 0x74
 801e066:	e7bf      	b.n	801dfe8 <_strtod_l+0x158>
 801e068:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e06a:	195a      	adds	r2, r3, r5
 801e06c:	921d      	str	r2, [sp, #116]	; 0x74
 801e06e:	5d5b      	ldrb	r3, [r3, r5]
 801e070:	2f00      	cmp	r7, #0
 801e072:	d037      	beq.n	801e0e4 <_strtod_l+0x254>
 801e074:	9007      	str	r0, [sp, #28]
 801e076:	463d      	mov	r5, r7
 801e078:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801e07c:	2a09      	cmp	r2, #9
 801e07e:	d912      	bls.n	801e0a6 <_strtod_l+0x216>
 801e080:	2201      	movs	r2, #1
 801e082:	e7c2      	b.n	801e00a <_strtod_l+0x17a>
 801e084:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e086:	1c5a      	adds	r2, r3, #1
 801e088:	921d      	str	r2, [sp, #116]	; 0x74
 801e08a:	785b      	ldrb	r3, [r3, #1]
 801e08c:	3001      	adds	r0, #1
 801e08e:	2b30      	cmp	r3, #48	; 0x30
 801e090:	d0f8      	beq.n	801e084 <_strtod_l+0x1f4>
 801e092:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801e096:	2a08      	cmp	r2, #8
 801e098:	f200 84db 	bhi.w	801ea52 <_strtod_l+0xbc2>
 801e09c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e09e:	9007      	str	r0, [sp, #28]
 801e0a0:	2000      	movs	r0, #0
 801e0a2:	920a      	str	r2, [sp, #40]	; 0x28
 801e0a4:	4605      	mov	r5, r0
 801e0a6:	3b30      	subs	r3, #48	; 0x30
 801e0a8:	f100 0201 	add.w	r2, r0, #1
 801e0ac:	d014      	beq.n	801e0d8 <_strtod_l+0x248>
 801e0ae:	9907      	ldr	r1, [sp, #28]
 801e0b0:	4411      	add	r1, r2
 801e0b2:	9107      	str	r1, [sp, #28]
 801e0b4:	462a      	mov	r2, r5
 801e0b6:	eb00 0e05 	add.w	lr, r0, r5
 801e0ba:	210a      	movs	r1, #10
 801e0bc:	4572      	cmp	r2, lr
 801e0be:	d113      	bne.n	801e0e8 <_strtod_l+0x258>
 801e0c0:	182a      	adds	r2, r5, r0
 801e0c2:	2a08      	cmp	r2, #8
 801e0c4:	f105 0501 	add.w	r5, r5, #1
 801e0c8:	4405      	add	r5, r0
 801e0ca:	dc1c      	bgt.n	801e106 <_strtod_l+0x276>
 801e0cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e0ce:	220a      	movs	r2, #10
 801e0d0:	fb02 3301 	mla	r3, r2, r1, r3
 801e0d4:	9309      	str	r3, [sp, #36]	; 0x24
 801e0d6:	2200      	movs	r2, #0
 801e0d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e0da:	1c59      	adds	r1, r3, #1
 801e0dc:	911d      	str	r1, [sp, #116]	; 0x74
 801e0de:	785b      	ldrb	r3, [r3, #1]
 801e0e0:	4610      	mov	r0, r2
 801e0e2:	e7c9      	b.n	801e078 <_strtod_l+0x1e8>
 801e0e4:	4638      	mov	r0, r7
 801e0e6:	e7d2      	b.n	801e08e <_strtod_l+0x1fe>
 801e0e8:	2a08      	cmp	r2, #8
 801e0ea:	dc04      	bgt.n	801e0f6 <_strtod_l+0x266>
 801e0ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e0ee:	434e      	muls	r6, r1
 801e0f0:	9609      	str	r6, [sp, #36]	; 0x24
 801e0f2:	3201      	adds	r2, #1
 801e0f4:	e7e2      	b.n	801e0bc <_strtod_l+0x22c>
 801e0f6:	f102 0c01 	add.w	ip, r2, #1
 801e0fa:	f1bc 0f10 	cmp.w	ip, #16
 801e0fe:	bfd8      	it	le
 801e100:	fb01 f909 	mulle.w	r9, r1, r9
 801e104:	e7f5      	b.n	801e0f2 <_strtod_l+0x262>
 801e106:	2d10      	cmp	r5, #16
 801e108:	bfdc      	itt	le
 801e10a:	220a      	movle	r2, #10
 801e10c:	fb02 3909 	mlale	r9, r2, r9, r3
 801e110:	e7e1      	b.n	801e0d6 <_strtod_l+0x246>
 801e112:	2300      	movs	r3, #0
 801e114:	9307      	str	r3, [sp, #28]
 801e116:	2201      	movs	r2, #1
 801e118:	e77c      	b.n	801e014 <_strtod_l+0x184>
 801e11a:	f04f 0c00 	mov.w	ip, #0
 801e11e:	f108 0302 	add.w	r3, r8, #2
 801e122:	931d      	str	r3, [sp, #116]	; 0x74
 801e124:	f898 3002 	ldrb.w	r3, [r8, #2]
 801e128:	e785      	b.n	801e036 <_strtod_l+0x1a6>
 801e12a:	f04f 0c01 	mov.w	ip, #1
 801e12e:	e7f6      	b.n	801e11e <_strtod_l+0x28e>
 801e130:	08022204 	.word	0x08022204
 801e134:	08022090 	.word	0x08022090
 801e138:	7ff00000 	.word	0x7ff00000
 801e13c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e13e:	1c59      	adds	r1, r3, #1
 801e140:	911d      	str	r1, [sp, #116]	; 0x74
 801e142:	785b      	ldrb	r3, [r3, #1]
 801e144:	2b30      	cmp	r3, #48	; 0x30
 801e146:	d0f9      	beq.n	801e13c <_strtod_l+0x2ac>
 801e148:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801e14c:	2908      	cmp	r1, #8
 801e14e:	f63f af79 	bhi.w	801e044 <_strtod_l+0x1b4>
 801e152:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801e156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e158:	9308      	str	r3, [sp, #32]
 801e15a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e15c:	1c59      	adds	r1, r3, #1
 801e15e:	911d      	str	r1, [sp, #116]	; 0x74
 801e160:	785b      	ldrb	r3, [r3, #1]
 801e162:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801e166:	2e09      	cmp	r6, #9
 801e168:	d937      	bls.n	801e1da <_strtod_l+0x34a>
 801e16a:	9e08      	ldr	r6, [sp, #32]
 801e16c:	1b89      	subs	r1, r1, r6
 801e16e:	2908      	cmp	r1, #8
 801e170:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801e174:	dc02      	bgt.n	801e17c <_strtod_l+0x2ec>
 801e176:	4576      	cmp	r6, lr
 801e178:	bfa8      	it	ge
 801e17a:	4676      	movge	r6, lr
 801e17c:	f1bc 0f00 	cmp.w	ip, #0
 801e180:	d000      	beq.n	801e184 <_strtod_l+0x2f4>
 801e182:	4276      	negs	r6, r6
 801e184:	2d00      	cmp	r5, #0
 801e186:	d14f      	bne.n	801e228 <_strtod_l+0x398>
 801e188:	9904      	ldr	r1, [sp, #16]
 801e18a:	4301      	orrs	r1, r0
 801e18c:	f47f aec2 	bne.w	801df14 <_strtod_l+0x84>
 801e190:	2a00      	cmp	r2, #0
 801e192:	f47f aedb 	bne.w	801df4c <_strtod_l+0xbc>
 801e196:	2b69      	cmp	r3, #105	; 0x69
 801e198:	d027      	beq.n	801e1ea <_strtod_l+0x35a>
 801e19a:	dc24      	bgt.n	801e1e6 <_strtod_l+0x356>
 801e19c:	2b49      	cmp	r3, #73	; 0x49
 801e19e:	d024      	beq.n	801e1ea <_strtod_l+0x35a>
 801e1a0:	2b4e      	cmp	r3, #78	; 0x4e
 801e1a2:	f47f aed3 	bne.w	801df4c <_strtod_l+0xbc>
 801e1a6:	499e      	ldr	r1, [pc, #632]	; (801e420 <_strtod_l+0x590>)
 801e1a8:	a81d      	add	r0, sp, #116	; 0x74
 801e1aa:	f001 ff83 	bl	80200b4 <__match>
 801e1ae:	2800      	cmp	r0, #0
 801e1b0:	f43f aecc 	beq.w	801df4c <_strtod_l+0xbc>
 801e1b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e1b6:	781b      	ldrb	r3, [r3, #0]
 801e1b8:	2b28      	cmp	r3, #40	; 0x28
 801e1ba:	d12d      	bne.n	801e218 <_strtod_l+0x388>
 801e1bc:	4999      	ldr	r1, [pc, #612]	; (801e424 <_strtod_l+0x594>)
 801e1be:	aa20      	add	r2, sp, #128	; 0x80
 801e1c0:	a81d      	add	r0, sp, #116	; 0x74
 801e1c2:	f001 ff8b 	bl	80200dc <__hexnan>
 801e1c6:	2805      	cmp	r0, #5
 801e1c8:	d126      	bne.n	801e218 <_strtod_l+0x388>
 801e1ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e1cc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801e1d0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801e1d4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801e1d8:	e69c      	b.n	801df14 <_strtod_l+0x84>
 801e1da:	210a      	movs	r1, #10
 801e1dc:	fb01 3e0e 	mla	lr, r1, lr, r3
 801e1e0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801e1e4:	e7b9      	b.n	801e15a <_strtod_l+0x2ca>
 801e1e6:	2b6e      	cmp	r3, #110	; 0x6e
 801e1e8:	e7db      	b.n	801e1a2 <_strtod_l+0x312>
 801e1ea:	498f      	ldr	r1, [pc, #572]	; (801e428 <_strtod_l+0x598>)
 801e1ec:	a81d      	add	r0, sp, #116	; 0x74
 801e1ee:	f001 ff61 	bl	80200b4 <__match>
 801e1f2:	2800      	cmp	r0, #0
 801e1f4:	f43f aeaa 	beq.w	801df4c <_strtod_l+0xbc>
 801e1f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e1fa:	498c      	ldr	r1, [pc, #560]	; (801e42c <_strtod_l+0x59c>)
 801e1fc:	3b01      	subs	r3, #1
 801e1fe:	a81d      	add	r0, sp, #116	; 0x74
 801e200:	931d      	str	r3, [sp, #116]	; 0x74
 801e202:	f001 ff57 	bl	80200b4 <__match>
 801e206:	b910      	cbnz	r0, 801e20e <_strtod_l+0x37e>
 801e208:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e20a:	3301      	adds	r3, #1
 801e20c:	931d      	str	r3, [sp, #116]	; 0x74
 801e20e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801e43c <_strtod_l+0x5ac>
 801e212:	f04f 0a00 	mov.w	sl, #0
 801e216:	e67d      	b.n	801df14 <_strtod_l+0x84>
 801e218:	4885      	ldr	r0, [pc, #532]	; (801e430 <_strtod_l+0x5a0>)
 801e21a:	f002 fe69 	bl	8020ef0 <nan>
 801e21e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801e222:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801e226:	e675      	b.n	801df14 <_strtod_l+0x84>
 801e228:	9b07      	ldr	r3, [sp, #28]
 801e22a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e22c:	1af3      	subs	r3, r6, r3
 801e22e:	2f00      	cmp	r7, #0
 801e230:	bf08      	it	eq
 801e232:	462f      	moveq	r7, r5
 801e234:	2d10      	cmp	r5, #16
 801e236:	9308      	str	r3, [sp, #32]
 801e238:	46a8      	mov	r8, r5
 801e23a:	bfa8      	it	ge
 801e23c:	f04f 0810 	movge.w	r8, #16
 801e240:	f7e2 f988 	bl	8000554 <__aeabi_ui2d>
 801e244:	2d09      	cmp	r5, #9
 801e246:	4682      	mov	sl, r0
 801e248:	468b      	mov	fp, r1
 801e24a:	dd13      	ble.n	801e274 <_strtod_l+0x3e4>
 801e24c:	4b79      	ldr	r3, [pc, #484]	; (801e434 <_strtod_l+0x5a4>)
 801e24e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801e252:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801e256:	f7e2 f9f7 	bl	8000648 <__aeabi_dmul>
 801e25a:	4682      	mov	sl, r0
 801e25c:	4648      	mov	r0, r9
 801e25e:	468b      	mov	fp, r1
 801e260:	f7e2 f978 	bl	8000554 <__aeabi_ui2d>
 801e264:	4602      	mov	r2, r0
 801e266:	460b      	mov	r3, r1
 801e268:	4650      	mov	r0, sl
 801e26a:	4659      	mov	r1, fp
 801e26c:	f7e2 f836 	bl	80002dc <__adddf3>
 801e270:	4682      	mov	sl, r0
 801e272:	468b      	mov	fp, r1
 801e274:	2d0f      	cmp	r5, #15
 801e276:	dc38      	bgt.n	801e2ea <_strtod_l+0x45a>
 801e278:	9b08      	ldr	r3, [sp, #32]
 801e27a:	2b00      	cmp	r3, #0
 801e27c:	f43f ae4a 	beq.w	801df14 <_strtod_l+0x84>
 801e280:	dd24      	ble.n	801e2cc <_strtod_l+0x43c>
 801e282:	2b16      	cmp	r3, #22
 801e284:	dc0b      	bgt.n	801e29e <_strtod_l+0x40e>
 801e286:	4d6b      	ldr	r5, [pc, #428]	; (801e434 <_strtod_l+0x5a4>)
 801e288:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801e28c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801e290:	4652      	mov	r2, sl
 801e292:	465b      	mov	r3, fp
 801e294:	f7e2 f9d8 	bl	8000648 <__aeabi_dmul>
 801e298:	4682      	mov	sl, r0
 801e29a:	468b      	mov	fp, r1
 801e29c:	e63a      	b.n	801df14 <_strtod_l+0x84>
 801e29e:	9a08      	ldr	r2, [sp, #32]
 801e2a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801e2a4:	4293      	cmp	r3, r2
 801e2a6:	db20      	blt.n	801e2ea <_strtod_l+0x45a>
 801e2a8:	4c62      	ldr	r4, [pc, #392]	; (801e434 <_strtod_l+0x5a4>)
 801e2aa:	f1c5 050f 	rsb	r5, r5, #15
 801e2ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801e2b2:	4652      	mov	r2, sl
 801e2b4:	465b      	mov	r3, fp
 801e2b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e2ba:	f7e2 f9c5 	bl	8000648 <__aeabi_dmul>
 801e2be:	9b08      	ldr	r3, [sp, #32]
 801e2c0:	1b5d      	subs	r5, r3, r5
 801e2c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801e2c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e2ca:	e7e3      	b.n	801e294 <_strtod_l+0x404>
 801e2cc:	9b08      	ldr	r3, [sp, #32]
 801e2ce:	3316      	adds	r3, #22
 801e2d0:	db0b      	blt.n	801e2ea <_strtod_l+0x45a>
 801e2d2:	9b07      	ldr	r3, [sp, #28]
 801e2d4:	4a57      	ldr	r2, [pc, #348]	; (801e434 <_strtod_l+0x5a4>)
 801e2d6:	1b9e      	subs	r6, r3, r6
 801e2d8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801e2dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e2e0:	4650      	mov	r0, sl
 801e2e2:	4659      	mov	r1, fp
 801e2e4:	f7e2 fada 	bl	800089c <__aeabi_ddiv>
 801e2e8:	e7d6      	b.n	801e298 <_strtod_l+0x408>
 801e2ea:	9b08      	ldr	r3, [sp, #32]
 801e2ec:	eba5 0808 	sub.w	r8, r5, r8
 801e2f0:	4498      	add	r8, r3
 801e2f2:	f1b8 0f00 	cmp.w	r8, #0
 801e2f6:	dd71      	ble.n	801e3dc <_strtod_l+0x54c>
 801e2f8:	f018 030f 	ands.w	r3, r8, #15
 801e2fc:	d00a      	beq.n	801e314 <_strtod_l+0x484>
 801e2fe:	494d      	ldr	r1, [pc, #308]	; (801e434 <_strtod_l+0x5a4>)
 801e300:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e304:	4652      	mov	r2, sl
 801e306:	465b      	mov	r3, fp
 801e308:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e30c:	f7e2 f99c 	bl	8000648 <__aeabi_dmul>
 801e310:	4682      	mov	sl, r0
 801e312:	468b      	mov	fp, r1
 801e314:	f038 080f 	bics.w	r8, r8, #15
 801e318:	d04d      	beq.n	801e3b6 <_strtod_l+0x526>
 801e31a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801e31e:	dd22      	ble.n	801e366 <_strtod_l+0x4d6>
 801e320:	2500      	movs	r5, #0
 801e322:	462e      	mov	r6, r5
 801e324:	9509      	str	r5, [sp, #36]	; 0x24
 801e326:	9507      	str	r5, [sp, #28]
 801e328:	2322      	movs	r3, #34	; 0x22
 801e32a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801e43c <_strtod_l+0x5ac>
 801e32e:	6023      	str	r3, [r4, #0]
 801e330:	f04f 0a00 	mov.w	sl, #0
 801e334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e336:	2b00      	cmp	r3, #0
 801e338:	f43f adec 	beq.w	801df14 <_strtod_l+0x84>
 801e33c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e33e:	4620      	mov	r0, r4
 801e340:	f001 ffec 	bl	802031c <_Bfree>
 801e344:	9907      	ldr	r1, [sp, #28]
 801e346:	4620      	mov	r0, r4
 801e348:	f001 ffe8 	bl	802031c <_Bfree>
 801e34c:	4631      	mov	r1, r6
 801e34e:	4620      	mov	r0, r4
 801e350:	f001 ffe4 	bl	802031c <_Bfree>
 801e354:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e356:	4620      	mov	r0, r4
 801e358:	f001 ffe0 	bl	802031c <_Bfree>
 801e35c:	4629      	mov	r1, r5
 801e35e:	4620      	mov	r0, r4
 801e360:	f001 ffdc 	bl	802031c <_Bfree>
 801e364:	e5d6      	b.n	801df14 <_strtod_l+0x84>
 801e366:	2300      	movs	r3, #0
 801e368:	ea4f 1828 	mov.w	r8, r8, asr #4
 801e36c:	4650      	mov	r0, sl
 801e36e:	4659      	mov	r1, fp
 801e370:	4699      	mov	r9, r3
 801e372:	f1b8 0f01 	cmp.w	r8, #1
 801e376:	dc21      	bgt.n	801e3bc <_strtod_l+0x52c>
 801e378:	b10b      	cbz	r3, 801e37e <_strtod_l+0x4ee>
 801e37a:	4682      	mov	sl, r0
 801e37c:	468b      	mov	fp, r1
 801e37e:	4b2e      	ldr	r3, [pc, #184]	; (801e438 <_strtod_l+0x5a8>)
 801e380:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801e384:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801e388:	4652      	mov	r2, sl
 801e38a:	465b      	mov	r3, fp
 801e38c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801e390:	f7e2 f95a 	bl	8000648 <__aeabi_dmul>
 801e394:	4b29      	ldr	r3, [pc, #164]	; (801e43c <_strtod_l+0x5ac>)
 801e396:	460a      	mov	r2, r1
 801e398:	400b      	ands	r3, r1
 801e39a:	4929      	ldr	r1, [pc, #164]	; (801e440 <_strtod_l+0x5b0>)
 801e39c:	428b      	cmp	r3, r1
 801e39e:	4682      	mov	sl, r0
 801e3a0:	d8be      	bhi.n	801e320 <_strtod_l+0x490>
 801e3a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801e3a6:	428b      	cmp	r3, r1
 801e3a8:	bf86      	itte	hi
 801e3aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801e444 <_strtod_l+0x5b4>
 801e3ae:	f04f 3aff 	movhi.w	sl, #4294967295
 801e3b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801e3b6:	2300      	movs	r3, #0
 801e3b8:	9304      	str	r3, [sp, #16]
 801e3ba:	e081      	b.n	801e4c0 <_strtod_l+0x630>
 801e3bc:	f018 0f01 	tst.w	r8, #1
 801e3c0:	d007      	beq.n	801e3d2 <_strtod_l+0x542>
 801e3c2:	4b1d      	ldr	r3, [pc, #116]	; (801e438 <_strtod_l+0x5a8>)
 801e3c4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801e3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3cc:	f7e2 f93c 	bl	8000648 <__aeabi_dmul>
 801e3d0:	2301      	movs	r3, #1
 801e3d2:	f109 0901 	add.w	r9, r9, #1
 801e3d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801e3da:	e7ca      	b.n	801e372 <_strtod_l+0x4e2>
 801e3dc:	d0eb      	beq.n	801e3b6 <_strtod_l+0x526>
 801e3de:	f1c8 0800 	rsb	r8, r8, #0
 801e3e2:	f018 020f 	ands.w	r2, r8, #15
 801e3e6:	d00a      	beq.n	801e3fe <_strtod_l+0x56e>
 801e3e8:	4b12      	ldr	r3, [pc, #72]	; (801e434 <_strtod_l+0x5a4>)
 801e3ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e3ee:	4650      	mov	r0, sl
 801e3f0:	4659      	mov	r1, fp
 801e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3f6:	f7e2 fa51 	bl	800089c <__aeabi_ddiv>
 801e3fa:	4682      	mov	sl, r0
 801e3fc:	468b      	mov	fp, r1
 801e3fe:	ea5f 1828 	movs.w	r8, r8, asr #4
 801e402:	d0d8      	beq.n	801e3b6 <_strtod_l+0x526>
 801e404:	f1b8 0f1f 	cmp.w	r8, #31
 801e408:	dd1e      	ble.n	801e448 <_strtod_l+0x5b8>
 801e40a:	2500      	movs	r5, #0
 801e40c:	462e      	mov	r6, r5
 801e40e:	9509      	str	r5, [sp, #36]	; 0x24
 801e410:	9507      	str	r5, [sp, #28]
 801e412:	2322      	movs	r3, #34	; 0x22
 801e414:	f04f 0a00 	mov.w	sl, #0
 801e418:	f04f 0b00 	mov.w	fp, #0
 801e41c:	6023      	str	r3, [r4, #0]
 801e41e:	e789      	b.n	801e334 <_strtod_l+0x4a4>
 801e420:	08022069 	.word	0x08022069
 801e424:	080220a4 	.word	0x080220a4
 801e428:	08022061 	.word	0x08022061
 801e42c:	08022108 	.word	0x08022108
 801e430:	080223c0 	.word	0x080223c0
 801e434:	080222a0 	.word	0x080222a0
 801e438:	08022278 	.word	0x08022278
 801e43c:	7ff00000 	.word	0x7ff00000
 801e440:	7ca00000 	.word	0x7ca00000
 801e444:	7fefffff 	.word	0x7fefffff
 801e448:	f018 0310 	ands.w	r3, r8, #16
 801e44c:	bf18      	it	ne
 801e44e:	236a      	movne	r3, #106	; 0x6a
 801e450:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801e808 <_strtod_l+0x978>
 801e454:	9304      	str	r3, [sp, #16]
 801e456:	4650      	mov	r0, sl
 801e458:	4659      	mov	r1, fp
 801e45a:	2300      	movs	r3, #0
 801e45c:	f018 0f01 	tst.w	r8, #1
 801e460:	d004      	beq.n	801e46c <_strtod_l+0x5dc>
 801e462:	e9d9 2300 	ldrd	r2, r3, [r9]
 801e466:	f7e2 f8ef 	bl	8000648 <__aeabi_dmul>
 801e46a:	2301      	movs	r3, #1
 801e46c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801e470:	f109 0908 	add.w	r9, r9, #8
 801e474:	d1f2      	bne.n	801e45c <_strtod_l+0x5cc>
 801e476:	b10b      	cbz	r3, 801e47c <_strtod_l+0x5ec>
 801e478:	4682      	mov	sl, r0
 801e47a:	468b      	mov	fp, r1
 801e47c:	9b04      	ldr	r3, [sp, #16]
 801e47e:	b1bb      	cbz	r3, 801e4b0 <_strtod_l+0x620>
 801e480:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801e484:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e488:	2b00      	cmp	r3, #0
 801e48a:	4659      	mov	r1, fp
 801e48c:	dd10      	ble.n	801e4b0 <_strtod_l+0x620>
 801e48e:	2b1f      	cmp	r3, #31
 801e490:	f340 8128 	ble.w	801e6e4 <_strtod_l+0x854>
 801e494:	2b34      	cmp	r3, #52	; 0x34
 801e496:	bfde      	ittt	le
 801e498:	3b20      	suble	r3, #32
 801e49a:	f04f 32ff 	movle.w	r2, #4294967295
 801e49e:	fa02 f303 	lslle.w	r3, r2, r3
 801e4a2:	f04f 0a00 	mov.w	sl, #0
 801e4a6:	bfcc      	ite	gt
 801e4a8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801e4ac:	ea03 0b01 	andle.w	fp, r3, r1
 801e4b0:	2200      	movs	r2, #0
 801e4b2:	2300      	movs	r3, #0
 801e4b4:	4650      	mov	r0, sl
 801e4b6:	4659      	mov	r1, fp
 801e4b8:	f7e2 fb2e 	bl	8000b18 <__aeabi_dcmpeq>
 801e4bc:	2800      	cmp	r0, #0
 801e4be:	d1a4      	bne.n	801e40a <_strtod_l+0x57a>
 801e4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4c2:	9300      	str	r3, [sp, #0]
 801e4c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e4c6:	462b      	mov	r3, r5
 801e4c8:	463a      	mov	r2, r7
 801e4ca:	4620      	mov	r0, r4
 801e4cc:	f001 ff92 	bl	80203f4 <__s2b>
 801e4d0:	9009      	str	r0, [sp, #36]	; 0x24
 801e4d2:	2800      	cmp	r0, #0
 801e4d4:	f43f af24 	beq.w	801e320 <_strtod_l+0x490>
 801e4d8:	9b07      	ldr	r3, [sp, #28]
 801e4da:	1b9e      	subs	r6, r3, r6
 801e4dc:	9b08      	ldr	r3, [sp, #32]
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	bfb4      	ite	lt
 801e4e2:	4633      	movlt	r3, r6
 801e4e4:	2300      	movge	r3, #0
 801e4e6:	9310      	str	r3, [sp, #64]	; 0x40
 801e4e8:	9b08      	ldr	r3, [sp, #32]
 801e4ea:	2500      	movs	r5, #0
 801e4ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e4f0:	9318      	str	r3, [sp, #96]	; 0x60
 801e4f2:	462e      	mov	r6, r5
 801e4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4f6:	4620      	mov	r0, r4
 801e4f8:	6859      	ldr	r1, [r3, #4]
 801e4fa:	f001 fecf 	bl	802029c <_Balloc>
 801e4fe:	9007      	str	r0, [sp, #28]
 801e500:	2800      	cmp	r0, #0
 801e502:	f43f af11 	beq.w	801e328 <_strtod_l+0x498>
 801e506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e508:	691a      	ldr	r2, [r3, #16]
 801e50a:	3202      	adds	r2, #2
 801e50c:	f103 010c 	add.w	r1, r3, #12
 801e510:	0092      	lsls	r2, r2, #2
 801e512:	300c      	adds	r0, #12
 801e514:	f7fe fe96 	bl	801d244 <memcpy>
 801e518:	ec4b ab10 	vmov	d0, sl, fp
 801e51c:	aa20      	add	r2, sp, #128	; 0x80
 801e51e:	a91f      	add	r1, sp, #124	; 0x7c
 801e520:	4620      	mov	r0, r4
 801e522:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e526:	f002 faa1 	bl	8020a6c <__d2b>
 801e52a:	901e      	str	r0, [sp, #120]	; 0x78
 801e52c:	2800      	cmp	r0, #0
 801e52e:	f43f aefb 	beq.w	801e328 <_strtod_l+0x498>
 801e532:	2101      	movs	r1, #1
 801e534:	4620      	mov	r0, r4
 801e536:	f001 fff7 	bl	8020528 <__i2b>
 801e53a:	4606      	mov	r6, r0
 801e53c:	2800      	cmp	r0, #0
 801e53e:	f43f aef3 	beq.w	801e328 <_strtod_l+0x498>
 801e542:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e544:	9904      	ldr	r1, [sp, #16]
 801e546:	2b00      	cmp	r3, #0
 801e548:	bfab      	itete	ge
 801e54a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801e54c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801e54e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801e550:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801e554:	bfac      	ite	ge
 801e556:	eb03 0902 	addge.w	r9, r3, r2
 801e55a:	1ad7      	sublt	r7, r2, r3
 801e55c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e55e:	eba3 0801 	sub.w	r8, r3, r1
 801e562:	4490      	add	r8, r2
 801e564:	4ba3      	ldr	r3, [pc, #652]	; (801e7f4 <_strtod_l+0x964>)
 801e566:	f108 38ff 	add.w	r8, r8, #4294967295
 801e56a:	4598      	cmp	r8, r3
 801e56c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e570:	f280 80cc 	bge.w	801e70c <_strtod_l+0x87c>
 801e574:	eba3 0308 	sub.w	r3, r3, r8
 801e578:	2b1f      	cmp	r3, #31
 801e57a:	eba2 0203 	sub.w	r2, r2, r3
 801e57e:	f04f 0101 	mov.w	r1, #1
 801e582:	f300 80b6 	bgt.w	801e6f2 <_strtod_l+0x862>
 801e586:	fa01 f303 	lsl.w	r3, r1, r3
 801e58a:	9311      	str	r3, [sp, #68]	; 0x44
 801e58c:	2300      	movs	r3, #0
 801e58e:	930c      	str	r3, [sp, #48]	; 0x30
 801e590:	eb09 0802 	add.w	r8, r9, r2
 801e594:	9b04      	ldr	r3, [sp, #16]
 801e596:	45c1      	cmp	r9, r8
 801e598:	4417      	add	r7, r2
 801e59a:	441f      	add	r7, r3
 801e59c:	464b      	mov	r3, r9
 801e59e:	bfa8      	it	ge
 801e5a0:	4643      	movge	r3, r8
 801e5a2:	42bb      	cmp	r3, r7
 801e5a4:	bfa8      	it	ge
 801e5a6:	463b      	movge	r3, r7
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	bfc2      	ittt	gt
 801e5ac:	eba8 0803 	subgt.w	r8, r8, r3
 801e5b0:	1aff      	subgt	r7, r7, r3
 801e5b2:	eba9 0903 	subgt.w	r9, r9, r3
 801e5b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	dd17      	ble.n	801e5ec <_strtod_l+0x75c>
 801e5bc:	4631      	mov	r1, r6
 801e5be:	461a      	mov	r2, r3
 801e5c0:	4620      	mov	r0, r4
 801e5c2:	f002 f86d 	bl	80206a0 <__pow5mult>
 801e5c6:	4606      	mov	r6, r0
 801e5c8:	2800      	cmp	r0, #0
 801e5ca:	f43f aead 	beq.w	801e328 <_strtod_l+0x498>
 801e5ce:	4601      	mov	r1, r0
 801e5d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e5d2:	4620      	mov	r0, r4
 801e5d4:	f001 ffbe 	bl	8020554 <__multiply>
 801e5d8:	900f      	str	r0, [sp, #60]	; 0x3c
 801e5da:	2800      	cmp	r0, #0
 801e5dc:	f43f aea4 	beq.w	801e328 <_strtod_l+0x498>
 801e5e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e5e2:	4620      	mov	r0, r4
 801e5e4:	f001 fe9a 	bl	802031c <_Bfree>
 801e5e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e5ea:	931e      	str	r3, [sp, #120]	; 0x78
 801e5ec:	f1b8 0f00 	cmp.w	r8, #0
 801e5f0:	f300 8091 	bgt.w	801e716 <_strtod_l+0x886>
 801e5f4:	9b08      	ldr	r3, [sp, #32]
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	dd08      	ble.n	801e60c <_strtod_l+0x77c>
 801e5fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e5fc:	9907      	ldr	r1, [sp, #28]
 801e5fe:	4620      	mov	r0, r4
 801e600:	f002 f84e 	bl	80206a0 <__pow5mult>
 801e604:	9007      	str	r0, [sp, #28]
 801e606:	2800      	cmp	r0, #0
 801e608:	f43f ae8e 	beq.w	801e328 <_strtod_l+0x498>
 801e60c:	2f00      	cmp	r7, #0
 801e60e:	dd08      	ble.n	801e622 <_strtod_l+0x792>
 801e610:	9907      	ldr	r1, [sp, #28]
 801e612:	463a      	mov	r2, r7
 801e614:	4620      	mov	r0, r4
 801e616:	f002 f89d 	bl	8020754 <__lshift>
 801e61a:	9007      	str	r0, [sp, #28]
 801e61c:	2800      	cmp	r0, #0
 801e61e:	f43f ae83 	beq.w	801e328 <_strtod_l+0x498>
 801e622:	f1b9 0f00 	cmp.w	r9, #0
 801e626:	dd08      	ble.n	801e63a <_strtod_l+0x7aa>
 801e628:	4631      	mov	r1, r6
 801e62a:	464a      	mov	r2, r9
 801e62c:	4620      	mov	r0, r4
 801e62e:	f002 f891 	bl	8020754 <__lshift>
 801e632:	4606      	mov	r6, r0
 801e634:	2800      	cmp	r0, #0
 801e636:	f43f ae77 	beq.w	801e328 <_strtod_l+0x498>
 801e63a:	9a07      	ldr	r2, [sp, #28]
 801e63c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e63e:	4620      	mov	r0, r4
 801e640:	f002 f910 	bl	8020864 <__mdiff>
 801e644:	4605      	mov	r5, r0
 801e646:	2800      	cmp	r0, #0
 801e648:	f43f ae6e 	beq.w	801e328 <_strtod_l+0x498>
 801e64c:	68c3      	ldr	r3, [r0, #12]
 801e64e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e650:	2300      	movs	r3, #0
 801e652:	60c3      	str	r3, [r0, #12]
 801e654:	4631      	mov	r1, r6
 801e656:	f002 f8e9 	bl	802082c <__mcmp>
 801e65a:	2800      	cmp	r0, #0
 801e65c:	da65      	bge.n	801e72a <_strtod_l+0x89a>
 801e65e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e660:	ea53 030a 	orrs.w	r3, r3, sl
 801e664:	f040 8087 	bne.w	801e776 <_strtod_l+0x8e6>
 801e668:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	f040 8082 	bne.w	801e776 <_strtod_l+0x8e6>
 801e672:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e676:	0d1b      	lsrs	r3, r3, #20
 801e678:	051b      	lsls	r3, r3, #20
 801e67a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e67e:	d97a      	bls.n	801e776 <_strtod_l+0x8e6>
 801e680:	696b      	ldr	r3, [r5, #20]
 801e682:	b913      	cbnz	r3, 801e68a <_strtod_l+0x7fa>
 801e684:	692b      	ldr	r3, [r5, #16]
 801e686:	2b01      	cmp	r3, #1
 801e688:	dd75      	ble.n	801e776 <_strtod_l+0x8e6>
 801e68a:	4629      	mov	r1, r5
 801e68c:	2201      	movs	r2, #1
 801e68e:	4620      	mov	r0, r4
 801e690:	f002 f860 	bl	8020754 <__lshift>
 801e694:	4631      	mov	r1, r6
 801e696:	4605      	mov	r5, r0
 801e698:	f002 f8c8 	bl	802082c <__mcmp>
 801e69c:	2800      	cmp	r0, #0
 801e69e:	dd6a      	ble.n	801e776 <_strtod_l+0x8e6>
 801e6a0:	9904      	ldr	r1, [sp, #16]
 801e6a2:	4a55      	ldr	r2, [pc, #340]	; (801e7f8 <_strtod_l+0x968>)
 801e6a4:	465b      	mov	r3, fp
 801e6a6:	2900      	cmp	r1, #0
 801e6a8:	f000 8085 	beq.w	801e7b6 <_strtod_l+0x926>
 801e6ac:	ea02 010b 	and.w	r1, r2, fp
 801e6b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e6b4:	dc7f      	bgt.n	801e7b6 <_strtod_l+0x926>
 801e6b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e6ba:	f77f aeaa 	ble.w	801e412 <_strtod_l+0x582>
 801e6be:	4a4f      	ldr	r2, [pc, #316]	; (801e7fc <_strtod_l+0x96c>)
 801e6c0:	2300      	movs	r3, #0
 801e6c2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801e6c6:	4650      	mov	r0, sl
 801e6c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801e6cc:	4659      	mov	r1, fp
 801e6ce:	f7e1 ffbb 	bl	8000648 <__aeabi_dmul>
 801e6d2:	460b      	mov	r3, r1
 801e6d4:	4303      	orrs	r3, r0
 801e6d6:	bf08      	it	eq
 801e6d8:	2322      	moveq	r3, #34	; 0x22
 801e6da:	4682      	mov	sl, r0
 801e6dc:	468b      	mov	fp, r1
 801e6de:	bf08      	it	eq
 801e6e0:	6023      	streq	r3, [r4, #0]
 801e6e2:	e62b      	b.n	801e33c <_strtod_l+0x4ac>
 801e6e4:	f04f 32ff 	mov.w	r2, #4294967295
 801e6e8:	fa02 f303 	lsl.w	r3, r2, r3
 801e6ec:	ea03 0a0a 	and.w	sl, r3, sl
 801e6f0:	e6de      	b.n	801e4b0 <_strtod_l+0x620>
 801e6f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801e6f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801e6fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801e6fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801e702:	fa01 f308 	lsl.w	r3, r1, r8
 801e706:	930c      	str	r3, [sp, #48]	; 0x30
 801e708:	9111      	str	r1, [sp, #68]	; 0x44
 801e70a:	e741      	b.n	801e590 <_strtod_l+0x700>
 801e70c:	2300      	movs	r3, #0
 801e70e:	930c      	str	r3, [sp, #48]	; 0x30
 801e710:	2301      	movs	r3, #1
 801e712:	9311      	str	r3, [sp, #68]	; 0x44
 801e714:	e73c      	b.n	801e590 <_strtod_l+0x700>
 801e716:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e718:	4642      	mov	r2, r8
 801e71a:	4620      	mov	r0, r4
 801e71c:	f002 f81a 	bl	8020754 <__lshift>
 801e720:	901e      	str	r0, [sp, #120]	; 0x78
 801e722:	2800      	cmp	r0, #0
 801e724:	f47f af66 	bne.w	801e5f4 <_strtod_l+0x764>
 801e728:	e5fe      	b.n	801e328 <_strtod_l+0x498>
 801e72a:	465f      	mov	r7, fp
 801e72c:	d16e      	bne.n	801e80c <_strtod_l+0x97c>
 801e72e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e730:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e734:	b342      	cbz	r2, 801e788 <_strtod_l+0x8f8>
 801e736:	4a32      	ldr	r2, [pc, #200]	; (801e800 <_strtod_l+0x970>)
 801e738:	4293      	cmp	r3, r2
 801e73a:	d128      	bne.n	801e78e <_strtod_l+0x8fe>
 801e73c:	9b04      	ldr	r3, [sp, #16]
 801e73e:	4650      	mov	r0, sl
 801e740:	b1eb      	cbz	r3, 801e77e <_strtod_l+0x8ee>
 801e742:	4a2d      	ldr	r2, [pc, #180]	; (801e7f8 <_strtod_l+0x968>)
 801e744:	403a      	ands	r2, r7
 801e746:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801e74a:	f04f 31ff 	mov.w	r1, #4294967295
 801e74e:	d819      	bhi.n	801e784 <_strtod_l+0x8f4>
 801e750:	0d12      	lsrs	r2, r2, #20
 801e752:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e756:	fa01 f303 	lsl.w	r3, r1, r3
 801e75a:	4298      	cmp	r0, r3
 801e75c:	d117      	bne.n	801e78e <_strtod_l+0x8fe>
 801e75e:	4b29      	ldr	r3, [pc, #164]	; (801e804 <_strtod_l+0x974>)
 801e760:	429f      	cmp	r7, r3
 801e762:	d102      	bne.n	801e76a <_strtod_l+0x8da>
 801e764:	3001      	adds	r0, #1
 801e766:	f43f addf 	beq.w	801e328 <_strtod_l+0x498>
 801e76a:	4b23      	ldr	r3, [pc, #140]	; (801e7f8 <_strtod_l+0x968>)
 801e76c:	403b      	ands	r3, r7
 801e76e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801e772:	f04f 0a00 	mov.w	sl, #0
 801e776:	9b04      	ldr	r3, [sp, #16]
 801e778:	2b00      	cmp	r3, #0
 801e77a:	d1a0      	bne.n	801e6be <_strtod_l+0x82e>
 801e77c:	e5de      	b.n	801e33c <_strtod_l+0x4ac>
 801e77e:	f04f 33ff 	mov.w	r3, #4294967295
 801e782:	e7ea      	b.n	801e75a <_strtod_l+0x8ca>
 801e784:	460b      	mov	r3, r1
 801e786:	e7e8      	b.n	801e75a <_strtod_l+0x8ca>
 801e788:	ea53 030a 	orrs.w	r3, r3, sl
 801e78c:	d088      	beq.n	801e6a0 <_strtod_l+0x810>
 801e78e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e790:	b1db      	cbz	r3, 801e7ca <_strtod_l+0x93a>
 801e792:	423b      	tst	r3, r7
 801e794:	d0ef      	beq.n	801e776 <_strtod_l+0x8e6>
 801e796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e798:	9a04      	ldr	r2, [sp, #16]
 801e79a:	4650      	mov	r0, sl
 801e79c:	4659      	mov	r1, fp
 801e79e:	b1c3      	cbz	r3, 801e7d2 <_strtod_l+0x942>
 801e7a0:	f7ff fb58 	bl	801de54 <sulp>
 801e7a4:	4602      	mov	r2, r0
 801e7a6:	460b      	mov	r3, r1
 801e7a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e7ac:	f7e1 fd96 	bl	80002dc <__adddf3>
 801e7b0:	4682      	mov	sl, r0
 801e7b2:	468b      	mov	fp, r1
 801e7b4:	e7df      	b.n	801e776 <_strtod_l+0x8e6>
 801e7b6:	4013      	ands	r3, r2
 801e7b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e7bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e7c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e7c4:	f04f 3aff 	mov.w	sl, #4294967295
 801e7c8:	e7d5      	b.n	801e776 <_strtod_l+0x8e6>
 801e7ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e7cc:	ea13 0f0a 	tst.w	r3, sl
 801e7d0:	e7e0      	b.n	801e794 <_strtod_l+0x904>
 801e7d2:	f7ff fb3f 	bl	801de54 <sulp>
 801e7d6:	4602      	mov	r2, r0
 801e7d8:	460b      	mov	r3, r1
 801e7da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e7de:	f7e1 fd7b 	bl	80002d8 <__aeabi_dsub>
 801e7e2:	2200      	movs	r2, #0
 801e7e4:	2300      	movs	r3, #0
 801e7e6:	4682      	mov	sl, r0
 801e7e8:	468b      	mov	fp, r1
 801e7ea:	f7e2 f995 	bl	8000b18 <__aeabi_dcmpeq>
 801e7ee:	2800      	cmp	r0, #0
 801e7f0:	d0c1      	beq.n	801e776 <_strtod_l+0x8e6>
 801e7f2:	e60e      	b.n	801e412 <_strtod_l+0x582>
 801e7f4:	fffffc02 	.word	0xfffffc02
 801e7f8:	7ff00000 	.word	0x7ff00000
 801e7fc:	39500000 	.word	0x39500000
 801e800:	000fffff 	.word	0x000fffff
 801e804:	7fefffff 	.word	0x7fefffff
 801e808:	080220b8 	.word	0x080220b8
 801e80c:	4631      	mov	r1, r6
 801e80e:	4628      	mov	r0, r5
 801e810:	f002 f988 	bl	8020b24 <__ratio>
 801e814:	ec59 8b10 	vmov	r8, r9, d0
 801e818:	ee10 0a10 	vmov	r0, s0
 801e81c:	2200      	movs	r2, #0
 801e81e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e822:	4649      	mov	r1, r9
 801e824:	f7e2 f98c 	bl	8000b40 <__aeabi_dcmple>
 801e828:	2800      	cmp	r0, #0
 801e82a:	d07c      	beq.n	801e926 <_strtod_l+0xa96>
 801e82c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d04c      	beq.n	801e8cc <_strtod_l+0xa3c>
 801e832:	4b95      	ldr	r3, [pc, #596]	; (801ea88 <_strtod_l+0xbf8>)
 801e834:	2200      	movs	r2, #0
 801e836:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e83a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ea88 <_strtod_l+0xbf8>
 801e83e:	f04f 0800 	mov.w	r8, #0
 801e842:	4b92      	ldr	r3, [pc, #584]	; (801ea8c <_strtod_l+0xbfc>)
 801e844:	403b      	ands	r3, r7
 801e846:	9311      	str	r3, [sp, #68]	; 0x44
 801e848:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e84a:	4b91      	ldr	r3, [pc, #580]	; (801ea90 <_strtod_l+0xc00>)
 801e84c:	429a      	cmp	r2, r3
 801e84e:	f040 80b2 	bne.w	801e9b6 <_strtod_l+0xb26>
 801e852:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e85a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801e85e:	ec4b ab10 	vmov	d0, sl, fp
 801e862:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801e866:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e86a:	f002 f883 	bl	8020974 <__ulp>
 801e86e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e872:	ec53 2b10 	vmov	r2, r3, d0
 801e876:	f7e1 fee7 	bl	8000648 <__aeabi_dmul>
 801e87a:	4652      	mov	r2, sl
 801e87c:	465b      	mov	r3, fp
 801e87e:	f7e1 fd2d 	bl	80002dc <__adddf3>
 801e882:	460b      	mov	r3, r1
 801e884:	4981      	ldr	r1, [pc, #516]	; (801ea8c <_strtod_l+0xbfc>)
 801e886:	4a83      	ldr	r2, [pc, #524]	; (801ea94 <_strtod_l+0xc04>)
 801e888:	4019      	ands	r1, r3
 801e88a:	4291      	cmp	r1, r2
 801e88c:	4682      	mov	sl, r0
 801e88e:	d95e      	bls.n	801e94e <_strtod_l+0xabe>
 801e890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e892:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801e896:	4293      	cmp	r3, r2
 801e898:	d103      	bne.n	801e8a2 <_strtod_l+0xa12>
 801e89a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e89c:	3301      	adds	r3, #1
 801e89e:	f43f ad43 	beq.w	801e328 <_strtod_l+0x498>
 801e8a2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801eaa0 <_strtod_l+0xc10>
 801e8a6:	f04f 3aff 	mov.w	sl, #4294967295
 801e8aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e8ac:	4620      	mov	r0, r4
 801e8ae:	f001 fd35 	bl	802031c <_Bfree>
 801e8b2:	9907      	ldr	r1, [sp, #28]
 801e8b4:	4620      	mov	r0, r4
 801e8b6:	f001 fd31 	bl	802031c <_Bfree>
 801e8ba:	4631      	mov	r1, r6
 801e8bc:	4620      	mov	r0, r4
 801e8be:	f001 fd2d 	bl	802031c <_Bfree>
 801e8c2:	4629      	mov	r1, r5
 801e8c4:	4620      	mov	r0, r4
 801e8c6:	f001 fd29 	bl	802031c <_Bfree>
 801e8ca:	e613      	b.n	801e4f4 <_strtod_l+0x664>
 801e8cc:	f1ba 0f00 	cmp.w	sl, #0
 801e8d0:	d11b      	bne.n	801e90a <_strtod_l+0xa7a>
 801e8d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e8d6:	b9f3      	cbnz	r3, 801e916 <_strtod_l+0xa86>
 801e8d8:	4b6b      	ldr	r3, [pc, #428]	; (801ea88 <_strtod_l+0xbf8>)
 801e8da:	2200      	movs	r2, #0
 801e8dc:	4640      	mov	r0, r8
 801e8de:	4649      	mov	r1, r9
 801e8e0:	f7e2 f924 	bl	8000b2c <__aeabi_dcmplt>
 801e8e4:	b9d0      	cbnz	r0, 801e91c <_strtod_l+0xa8c>
 801e8e6:	4640      	mov	r0, r8
 801e8e8:	4649      	mov	r1, r9
 801e8ea:	4b6b      	ldr	r3, [pc, #428]	; (801ea98 <_strtod_l+0xc08>)
 801e8ec:	2200      	movs	r2, #0
 801e8ee:	f7e1 feab 	bl	8000648 <__aeabi_dmul>
 801e8f2:	4680      	mov	r8, r0
 801e8f4:	4689      	mov	r9, r1
 801e8f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e8fa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801e8fe:	931b      	str	r3, [sp, #108]	; 0x6c
 801e900:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801e904:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e908:	e79b      	b.n	801e842 <_strtod_l+0x9b2>
 801e90a:	f1ba 0f01 	cmp.w	sl, #1
 801e90e:	d102      	bne.n	801e916 <_strtod_l+0xa86>
 801e910:	2f00      	cmp	r7, #0
 801e912:	f43f ad7e 	beq.w	801e412 <_strtod_l+0x582>
 801e916:	4b61      	ldr	r3, [pc, #388]	; (801ea9c <_strtod_l+0xc0c>)
 801e918:	2200      	movs	r2, #0
 801e91a:	e78c      	b.n	801e836 <_strtod_l+0x9a6>
 801e91c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801ea98 <_strtod_l+0xc08>
 801e920:	f04f 0800 	mov.w	r8, #0
 801e924:	e7e7      	b.n	801e8f6 <_strtod_l+0xa66>
 801e926:	4b5c      	ldr	r3, [pc, #368]	; (801ea98 <_strtod_l+0xc08>)
 801e928:	4640      	mov	r0, r8
 801e92a:	4649      	mov	r1, r9
 801e92c:	2200      	movs	r2, #0
 801e92e:	f7e1 fe8b 	bl	8000648 <__aeabi_dmul>
 801e932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e934:	4680      	mov	r8, r0
 801e936:	4689      	mov	r9, r1
 801e938:	b933      	cbnz	r3, 801e948 <_strtod_l+0xab8>
 801e93a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e93e:	9012      	str	r0, [sp, #72]	; 0x48
 801e940:	9313      	str	r3, [sp, #76]	; 0x4c
 801e942:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801e946:	e7dd      	b.n	801e904 <_strtod_l+0xa74>
 801e948:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801e94c:	e7f9      	b.n	801e942 <_strtod_l+0xab2>
 801e94e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801e952:	9b04      	ldr	r3, [sp, #16]
 801e954:	2b00      	cmp	r3, #0
 801e956:	d1a8      	bne.n	801e8aa <_strtod_l+0xa1a>
 801e958:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e95c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e95e:	0d1b      	lsrs	r3, r3, #20
 801e960:	051b      	lsls	r3, r3, #20
 801e962:	429a      	cmp	r2, r3
 801e964:	d1a1      	bne.n	801e8aa <_strtod_l+0xa1a>
 801e966:	4640      	mov	r0, r8
 801e968:	4649      	mov	r1, r9
 801e96a:	f7e2 f9cd 	bl	8000d08 <__aeabi_d2lz>
 801e96e:	f7e1 fe3d 	bl	80005ec <__aeabi_l2d>
 801e972:	4602      	mov	r2, r0
 801e974:	460b      	mov	r3, r1
 801e976:	4640      	mov	r0, r8
 801e978:	4649      	mov	r1, r9
 801e97a:	f7e1 fcad 	bl	80002d8 <__aeabi_dsub>
 801e97e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e980:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e984:	ea43 030a 	orr.w	r3, r3, sl
 801e988:	4313      	orrs	r3, r2
 801e98a:	4680      	mov	r8, r0
 801e98c:	4689      	mov	r9, r1
 801e98e:	d053      	beq.n	801ea38 <_strtod_l+0xba8>
 801e990:	a335      	add	r3, pc, #212	; (adr r3, 801ea68 <_strtod_l+0xbd8>)
 801e992:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e996:	f7e2 f8c9 	bl	8000b2c <__aeabi_dcmplt>
 801e99a:	2800      	cmp	r0, #0
 801e99c:	f47f acce 	bne.w	801e33c <_strtod_l+0x4ac>
 801e9a0:	a333      	add	r3, pc, #204	; (adr r3, 801ea70 <_strtod_l+0xbe0>)
 801e9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9a6:	4640      	mov	r0, r8
 801e9a8:	4649      	mov	r1, r9
 801e9aa:	f7e2 f8dd 	bl	8000b68 <__aeabi_dcmpgt>
 801e9ae:	2800      	cmp	r0, #0
 801e9b0:	f43f af7b 	beq.w	801e8aa <_strtod_l+0xa1a>
 801e9b4:	e4c2      	b.n	801e33c <_strtod_l+0x4ac>
 801e9b6:	9b04      	ldr	r3, [sp, #16]
 801e9b8:	b333      	cbz	r3, 801ea08 <_strtod_l+0xb78>
 801e9ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e9bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e9c0:	d822      	bhi.n	801ea08 <_strtod_l+0xb78>
 801e9c2:	a32d      	add	r3, pc, #180	; (adr r3, 801ea78 <_strtod_l+0xbe8>)
 801e9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9c8:	4640      	mov	r0, r8
 801e9ca:	4649      	mov	r1, r9
 801e9cc:	f7e2 f8b8 	bl	8000b40 <__aeabi_dcmple>
 801e9d0:	b1a0      	cbz	r0, 801e9fc <_strtod_l+0xb6c>
 801e9d2:	4649      	mov	r1, r9
 801e9d4:	4640      	mov	r0, r8
 801e9d6:	f7e2 f90f 	bl	8000bf8 <__aeabi_d2uiz>
 801e9da:	2801      	cmp	r0, #1
 801e9dc:	bf38      	it	cc
 801e9de:	2001      	movcc	r0, #1
 801e9e0:	f7e1 fdb8 	bl	8000554 <__aeabi_ui2d>
 801e9e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e9e6:	4680      	mov	r8, r0
 801e9e8:	4689      	mov	r9, r1
 801e9ea:	bb13      	cbnz	r3, 801ea32 <_strtod_l+0xba2>
 801e9ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e9f0:	9014      	str	r0, [sp, #80]	; 0x50
 801e9f2:	9315      	str	r3, [sp, #84]	; 0x54
 801e9f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801e9f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e9fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e9fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ea00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801ea04:	1a9b      	subs	r3, r3, r2
 801ea06:	930d      	str	r3, [sp, #52]	; 0x34
 801ea08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ea0c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ea10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ea14:	f001 ffae 	bl	8020974 <__ulp>
 801ea18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ea1c:	ec53 2b10 	vmov	r2, r3, d0
 801ea20:	f7e1 fe12 	bl	8000648 <__aeabi_dmul>
 801ea24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ea28:	f7e1 fc58 	bl	80002dc <__adddf3>
 801ea2c:	4682      	mov	sl, r0
 801ea2e:	468b      	mov	fp, r1
 801ea30:	e78f      	b.n	801e952 <_strtod_l+0xac2>
 801ea32:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801ea36:	e7dd      	b.n	801e9f4 <_strtod_l+0xb64>
 801ea38:	a311      	add	r3, pc, #68	; (adr r3, 801ea80 <_strtod_l+0xbf0>)
 801ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea3e:	f7e2 f875 	bl	8000b2c <__aeabi_dcmplt>
 801ea42:	e7b4      	b.n	801e9ae <_strtod_l+0xb1e>
 801ea44:	2300      	movs	r3, #0
 801ea46:	930e      	str	r3, [sp, #56]	; 0x38
 801ea48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ea4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ea4c:	6013      	str	r3, [r2, #0]
 801ea4e:	f7ff ba65 	b.w	801df1c <_strtod_l+0x8c>
 801ea52:	2b65      	cmp	r3, #101	; 0x65
 801ea54:	f43f ab5d 	beq.w	801e112 <_strtod_l+0x282>
 801ea58:	2b45      	cmp	r3, #69	; 0x45
 801ea5a:	f43f ab5a 	beq.w	801e112 <_strtod_l+0x282>
 801ea5e:	2201      	movs	r2, #1
 801ea60:	f7ff bb92 	b.w	801e188 <_strtod_l+0x2f8>
 801ea64:	f3af 8000 	nop.w
 801ea68:	94a03595 	.word	0x94a03595
 801ea6c:	3fdfffff 	.word	0x3fdfffff
 801ea70:	35afe535 	.word	0x35afe535
 801ea74:	3fe00000 	.word	0x3fe00000
 801ea78:	ffc00000 	.word	0xffc00000
 801ea7c:	41dfffff 	.word	0x41dfffff
 801ea80:	94a03595 	.word	0x94a03595
 801ea84:	3fcfffff 	.word	0x3fcfffff
 801ea88:	3ff00000 	.word	0x3ff00000
 801ea8c:	7ff00000 	.word	0x7ff00000
 801ea90:	7fe00000 	.word	0x7fe00000
 801ea94:	7c9fffff 	.word	0x7c9fffff
 801ea98:	3fe00000 	.word	0x3fe00000
 801ea9c:	bff00000 	.word	0xbff00000
 801eaa0:	7fefffff 	.word	0x7fefffff

0801eaa4 <strtod>:
 801eaa4:	460a      	mov	r2, r1
 801eaa6:	4601      	mov	r1, r0
 801eaa8:	4802      	ldr	r0, [pc, #8]	; (801eab4 <strtod+0x10>)
 801eaaa:	4b03      	ldr	r3, [pc, #12]	; (801eab8 <strtod+0x14>)
 801eaac:	6800      	ldr	r0, [r0, #0]
 801eaae:	f7ff b9ef 	b.w	801de90 <_strtod_l>
 801eab2:	bf00      	nop
 801eab4:	2000008c 	.word	0x2000008c
 801eab8:	200000f4 	.word	0x200000f4

0801eabc <_strtol_l.isra.0>:
 801eabc:	2b01      	cmp	r3, #1
 801eabe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eac2:	d001      	beq.n	801eac8 <_strtol_l.isra.0+0xc>
 801eac4:	2b24      	cmp	r3, #36	; 0x24
 801eac6:	d906      	bls.n	801ead6 <_strtol_l.isra.0+0x1a>
 801eac8:	f7fe f948 	bl	801cd5c <__errno>
 801eacc:	2316      	movs	r3, #22
 801eace:	6003      	str	r3, [r0, #0]
 801ead0:	2000      	movs	r0, #0
 801ead2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ead6:	4f3a      	ldr	r7, [pc, #232]	; (801ebc0 <_strtol_l.isra.0+0x104>)
 801ead8:	468e      	mov	lr, r1
 801eada:	4676      	mov	r6, lr
 801eadc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801eae0:	5de5      	ldrb	r5, [r4, r7]
 801eae2:	f015 0508 	ands.w	r5, r5, #8
 801eae6:	d1f8      	bne.n	801eada <_strtol_l.isra.0+0x1e>
 801eae8:	2c2d      	cmp	r4, #45	; 0x2d
 801eaea:	d134      	bne.n	801eb56 <_strtol_l.isra.0+0x9a>
 801eaec:	f89e 4000 	ldrb.w	r4, [lr]
 801eaf0:	f04f 0801 	mov.w	r8, #1
 801eaf4:	f106 0e02 	add.w	lr, r6, #2
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d05c      	beq.n	801ebb6 <_strtol_l.isra.0+0xfa>
 801eafc:	2b10      	cmp	r3, #16
 801eafe:	d10c      	bne.n	801eb1a <_strtol_l.isra.0+0x5e>
 801eb00:	2c30      	cmp	r4, #48	; 0x30
 801eb02:	d10a      	bne.n	801eb1a <_strtol_l.isra.0+0x5e>
 801eb04:	f89e 4000 	ldrb.w	r4, [lr]
 801eb08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801eb0c:	2c58      	cmp	r4, #88	; 0x58
 801eb0e:	d14d      	bne.n	801ebac <_strtol_l.isra.0+0xf0>
 801eb10:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801eb14:	2310      	movs	r3, #16
 801eb16:	f10e 0e02 	add.w	lr, lr, #2
 801eb1a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801eb1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eb22:	2600      	movs	r6, #0
 801eb24:	fbbc f9f3 	udiv	r9, ip, r3
 801eb28:	4635      	mov	r5, r6
 801eb2a:	fb03 ca19 	mls	sl, r3, r9, ip
 801eb2e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801eb32:	2f09      	cmp	r7, #9
 801eb34:	d818      	bhi.n	801eb68 <_strtol_l.isra.0+0xac>
 801eb36:	463c      	mov	r4, r7
 801eb38:	42a3      	cmp	r3, r4
 801eb3a:	dd24      	ble.n	801eb86 <_strtol_l.isra.0+0xca>
 801eb3c:	2e00      	cmp	r6, #0
 801eb3e:	db1f      	blt.n	801eb80 <_strtol_l.isra.0+0xc4>
 801eb40:	45a9      	cmp	r9, r5
 801eb42:	d31d      	bcc.n	801eb80 <_strtol_l.isra.0+0xc4>
 801eb44:	d101      	bne.n	801eb4a <_strtol_l.isra.0+0x8e>
 801eb46:	45a2      	cmp	sl, r4
 801eb48:	db1a      	blt.n	801eb80 <_strtol_l.isra.0+0xc4>
 801eb4a:	fb05 4503 	mla	r5, r5, r3, r4
 801eb4e:	2601      	movs	r6, #1
 801eb50:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801eb54:	e7eb      	b.n	801eb2e <_strtol_l.isra.0+0x72>
 801eb56:	2c2b      	cmp	r4, #43	; 0x2b
 801eb58:	bf08      	it	eq
 801eb5a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801eb5e:	46a8      	mov	r8, r5
 801eb60:	bf08      	it	eq
 801eb62:	f106 0e02 	addeq.w	lr, r6, #2
 801eb66:	e7c7      	b.n	801eaf8 <_strtol_l.isra.0+0x3c>
 801eb68:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801eb6c:	2f19      	cmp	r7, #25
 801eb6e:	d801      	bhi.n	801eb74 <_strtol_l.isra.0+0xb8>
 801eb70:	3c37      	subs	r4, #55	; 0x37
 801eb72:	e7e1      	b.n	801eb38 <_strtol_l.isra.0+0x7c>
 801eb74:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801eb78:	2f19      	cmp	r7, #25
 801eb7a:	d804      	bhi.n	801eb86 <_strtol_l.isra.0+0xca>
 801eb7c:	3c57      	subs	r4, #87	; 0x57
 801eb7e:	e7db      	b.n	801eb38 <_strtol_l.isra.0+0x7c>
 801eb80:	f04f 36ff 	mov.w	r6, #4294967295
 801eb84:	e7e4      	b.n	801eb50 <_strtol_l.isra.0+0x94>
 801eb86:	2e00      	cmp	r6, #0
 801eb88:	da05      	bge.n	801eb96 <_strtol_l.isra.0+0xda>
 801eb8a:	2322      	movs	r3, #34	; 0x22
 801eb8c:	6003      	str	r3, [r0, #0]
 801eb8e:	4665      	mov	r5, ip
 801eb90:	b942      	cbnz	r2, 801eba4 <_strtol_l.isra.0+0xe8>
 801eb92:	4628      	mov	r0, r5
 801eb94:	e79d      	b.n	801ead2 <_strtol_l.isra.0+0x16>
 801eb96:	f1b8 0f00 	cmp.w	r8, #0
 801eb9a:	d000      	beq.n	801eb9e <_strtol_l.isra.0+0xe2>
 801eb9c:	426d      	negs	r5, r5
 801eb9e:	2a00      	cmp	r2, #0
 801eba0:	d0f7      	beq.n	801eb92 <_strtol_l.isra.0+0xd6>
 801eba2:	b10e      	cbz	r6, 801eba8 <_strtol_l.isra.0+0xec>
 801eba4:	f10e 31ff 	add.w	r1, lr, #4294967295
 801eba8:	6011      	str	r1, [r2, #0]
 801ebaa:	e7f2      	b.n	801eb92 <_strtol_l.isra.0+0xd6>
 801ebac:	2430      	movs	r4, #48	; 0x30
 801ebae:	2b00      	cmp	r3, #0
 801ebb0:	d1b3      	bne.n	801eb1a <_strtol_l.isra.0+0x5e>
 801ebb2:	2308      	movs	r3, #8
 801ebb4:	e7b1      	b.n	801eb1a <_strtol_l.isra.0+0x5e>
 801ebb6:	2c30      	cmp	r4, #48	; 0x30
 801ebb8:	d0a4      	beq.n	801eb04 <_strtol_l.isra.0+0x48>
 801ebba:	230a      	movs	r3, #10
 801ebbc:	e7ad      	b.n	801eb1a <_strtol_l.isra.0+0x5e>
 801ebbe:	bf00      	nop
 801ebc0:	08021ef5 	.word	0x08021ef5

0801ebc4 <strtol>:
 801ebc4:	4613      	mov	r3, r2
 801ebc6:	460a      	mov	r2, r1
 801ebc8:	4601      	mov	r1, r0
 801ebca:	4802      	ldr	r0, [pc, #8]	; (801ebd4 <strtol+0x10>)
 801ebcc:	6800      	ldr	r0, [r0, #0]
 801ebce:	f7ff bf75 	b.w	801eabc <_strtol_l.isra.0>
 801ebd2:	bf00      	nop
 801ebd4:	2000008c 	.word	0x2000008c

0801ebd8 <__utoa>:
 801ebd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebda:	4c1f      	ldr	r4, [pc, #124]	; (801ec58 <__utoa+0x80>)
 801ebdc:	b08b      	sub	sp, #44	; 0x2c
 801ebde:	4605      	mov	r5, r0
 801ebe0:	460b      	mov	r3, r1
 801ebe2:	466e      	mov	r6, sp
 801ebe4:	f104 0c20 	add.w	ip, r4, #32
 801ebe8:	6820      	ldr	r0, [r4, #0]
 801ebea:	6861      	ldr	r1, [r4, #4]
 801ebec:	4637      	mov	r7, r6
 801ebee:	c703      	stmia	r7!, {r0, r1}
 801ebf0:	3408      	adds	r4, #8
 801ebf2:	4564      	cmp	r4, ip
 801ebf4:	463e      	mov	r6, r7
 801ebf6:	d1f7      	bne.n	801ebe8 <__utoa+0x10>
 801ebf8:	7921      	ldrb	r1, [r4, #4]
 801ebfa:	7139      	strb	r1, [r7, #4]
 801ebfc:	1e91      	subs	r1, r2, #2
 801ebfe:	6820      	ldr	r0, [r4, #0]
 801ec00:	6038      	str	r0, [r7, #0]
 801ec02:	2922      	cmp	r1, #34	; 0x22
 801ec04:	f04f 0100 	mov.w	r1, #0
 801ec08:	d904      	bls.n	801ec14 <__utoa+0x3c>
 801ec0a:	7019      	strb	r1, [r3, #0]
 801ec0c:	460b      	mov	r3, r1
 801ec0e:	4618      	mov	r0, r3
 801ec10:	b00b      	add	sp, #44	; 0x2c
 801ec12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec14:	1e58      	subs	r0, r3, #1
 801ec16:	4684      	mov	ip, r0
 801ec18:	fbb5 f7f2 	udiv	r7, r5, r2
 801ec1c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801ec20:	fb02 5617 	mls	r6, r2, r7, r5
 801ec24:	4476      	add	r6, lr
 801ec26:	460c      	mov	r4, r1
 801ec28:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801ec2c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801ec30:	462e      	mov	r6, r5
 801ec32:	42b2      	cmp	r2, r6
 801ec34:	f101 0101 	add.w	r1, r1, #1
 801ec38:	463d      	mov	r5, r7
 801ec3a:	d9ed      	bls.n	801ec18 <__utoa+0x40>
 801ec3c:	2200      	movs	r2, #0
 801ec3e:	545a      	strb	r2, [r3, r1]
 801ec40:	1919      	adds	r1, r3, r4
 801ec42:	1aa5      	subs	r5, r4, r2
 801ec44:	42aa      	cmp	r2, r5
 801ec46:	dae2      	bge.n	801ec0e <__utoa+0x36>
 801ec48:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801ec4c:	780e      	ldrb	r6, [r1, #0]
 801ec4e:	7006      	strb	r6, [r0, #0]
 801ec50:	3201      	adds	r2, #1
 801ec52:	f801 5901 	strb.w	r5, [r1], #-1
 801ec56:	e7f4      	b.n	801ec42 <__utoa+0x6a>
 801ec58:	080220e0 	.word	0x080220e0

0801ec5c <__swbuf_r>:
 801ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec5e:	460e      	mov	r6, r1
 801ec60:	4614      	mov	r4, r2
 801ec62:	4605      	mov	r5, r0
 801ec64:	b118      	cbz	r0, 801ec6e <__swbuf_r+0x12>
 801ec66:	6983      	ldr	r3, [r0, #24]
 801ec68:	b90b      	cbnz	r3, 801ec6e <__swbuf_r+0x12>
 801ec6a:	f7fe f997 	bl	801cf9c <__sinit>
 801ec6e:	4b21      	ldr	r3, [pc, #132]	; (801ecf4 <__swbuf_r+0x98>)
 801ec70:	429c      	cmp	r4, r3
 801ec72:	d12b      	bne.n	801eccc <__swbuf_r+0x70>
 801ec74:	686c      	ldr	r4, [r5, #4]
 801ec76:	69a3      	ldr	r3, [r4, #24]
 801ec78:	60a3      	str	r3, [r4, #8]
 801ec7a:	89a3      	ldrh	r3, [r4, #12]
 801ec7c:	071a      	lsls	r2, r3, #28
 801ec7e:	d52f      	bpl.n	801ece0 <__swbuf_r+0x84>
 801ec80:	6923      	ldr	r3, [r4, #16]
 801ec82:	b36b      	cbz	r3, 801ece0 <__swbuf_r+0x84>
 801ec84:	6923      	ldr	r3, [r4, #16]
 801ec86:	6820      	ldr	r0, [r4, #0]
 801ec88:	1ac0      	subs	r0, r0, r3
 801ec8a:	6963      	ldr	r3, [r4, #20]
 801ec8c:	b2f6      	uxtb	r6, r6
 801ec8e:	4283      	cmp	r3, r0
 801ec90:	4637      	mov	r7, r6
 801ec92:	dc04      	bgt.n	801ec9e <__swbuf_r+0x42>
 801ec94:	4621      	mov	r1, r4
 801ec96:	4628      	mov	r0, r5
 801ec98:	f7fe f8ec 	bl	801ce74 <_fflush_r>
 801ec9c:	bb30      	cbnz	r0, 801ecec <__swbuf_r+0x90>
 801ec9e:	68a3      	ldr	r3, [r4, #8]
 801eca0:	3b01      	subs	r3, #1
 801eca2:	60a3      	str	r3, [r4, #8]
 801eca4:	6823      	ldr	r3, [r4, #0]
 801eca6:	1c5a      	adds	r2, r3, #1
 801eca8:	6022      	str	r2, [r4, #0]
 801ecaa:	701e      	strb	r6, [r3, #0]
 801ecac:	6963      	ldr	r3, [r4, #20]
 801ecae:	3001      	adds	r0, #1
 801ecb0:	4283      	cmp	r3, r0
 801ecb2:	d004      	beq.n	801ecbe <__swbuf_r+0x62>
 801ecb4:	89a3      	ldrh	r3, [r4, #12]
 801ecb6:	07db      	lsls	r3, r3, #31
 801ecb8:	d506      	bpl.n	801ecc8 <__swbuf_r+0x6c>
 801ecba:	2e0a      	cmp	r6, #10
 801ecbc:	d104      	bne.n	801ecc8 <__swbuf_r+0x6c>
 801ecbe:	4621      	mov	r1, r4
 801ecc0:	4628      	mov	r0, r5
 801ecc2:	f7fe f8d7 	bl	801ce74 <_fflush_r>
 801ecc6:	b988      	cbnz	r0, 801ecec <__swbuf_r+0x90>
 801ecc8:	4638      	mov	r0, r7
 801ecca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eccc:	4b0a      	ldr	r3, [pc, #40]	; (801ecf8 <__swbuf_r+0x9c>)
 801ecce:	429c      	cmp	r4, r3
 801ecd0:	d101      	bne.n	801ecd6 <__swbuf_r+0x7a>
 801ecd2:	68ac      	ldr	r4, [r5, #8]
 801ecd4:	e7cf      	b.n	801ec76 <__swbuf_r+0x1a>
 801ecd6:	4b09      	ldr	r3, [pc, #36]	; (801ecfc <__swbuf_r+0xa0>)
 801ecd8:	429c      	cmp	r4, r3
 801ecda:	bf08      	it	eq
 801ecdc:	68ec      	ldreq	r4, [r5, #12]
 801ecde:	e7ca      	b.n	801ec76 <__swbuf_r+0x1a>
 801ece0:	4621      	mov	r1, r4
 801ece2:	4628      	mov	r0, r5
 801ece4:	f000 f81e 	bl	801ed24 <__swsetup_r>
 801ece8:	2800      	cmp	r0, #0
 801ecea:	d0cb      	beq.n	801ec84 <__swbuf_r+0x28>
 801ecec:	f04f 37ff 	mov.w	r7, #4294967295
 801ecf0:	e7ea      	b.n	801ecc8 <__swbuf_r+0x6c>
 801ecf2:	bf00      	nop
 801ecf4:	08022018 	.word	0x08022018
 801ecf8:	08022038 	.word	0x08022038
 801ecfc:	08021ff8 	.word	0x08021ff8

0801ed00 <_write_r>:
 801ed00:	b538      	push	{r3, r4, r5, lr}
 801ed02:	4d07      	ldr	r5, [pc, #28]	; (801ed20 <_write_r+0x20>)
 801ed04:	4604      	mov	r4, r0
 801ed06:	4608      	mov	r0, r1
 801ed08:	4611      	mov	r1, r2
 801ed0a:	2200      	movs	r2, #0
 801ed0c:	602a      	str	r2, [r5, #0]
 801ed0e:	461a      	mov	r2, r3
 801ed10:	f7fd ffba 	bl	801cc88 <_write>
 801ed14:	1c43      	adds	r3, r0, #1
 801ed16:	d102      	bne.n	801ed1e <_write_r+0x1e>
 801ed18:	682b      	ldr	r3, [r5, #0]
 801ed1a:	b103      	cbz	r3, 801ed1e <_write_r+0x1e>
 801ed1c:	6023      	str	r3, [r4, #0]
 801ed1e:	bd38      	pop	{r3, r4, r5, pc}
 801ed20:	20019220 	.word	0x20019220

0801ed24 <__swsetup_r>:
 801ed24:	4b32      	ldr	r3, [pc, #200]	; (801edf0 <__swsetup_r+0xcc>)
 801ed26:	b570      	push	{r4, r5, r6, lr}
 801ed28:	681d      	ldr	r5, [r3, #0]
 801ed2a:	4606      	mov	r6, r0
 801ed2c:	460c      	mov	r4, r1
 801ed2e:	b125      	cbz	r5, 801ed3a <__swsetup_r+0x16>
 801ed30:	69ab      	ldr	r3, [r5, #24]
 801ed32:	b913      	cbnz	r3, 801ed3a <__swsetup_r+0x16>
 801ed34:	4628      	mov	r0, r5
 801ed36:	f7fe f931 	bl	801cf9c <__sinit>
 801ed3a:	4b2e      	ldr	r3, [pc, #184]	; (801edf4 <__swsetup_r+0xd0>)
 801ed3c:	429c      	cmp	r4, r3
 801ed3e:	d10f      	bne.n	801ed60 <__swsetup_r+0x3c>
 801ed40:	686c      	ldr	r4, [r5, #4]
 801ed42:	89a3      	ldrh	r3, [r4, #12]
 801ed44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ed48:	0719      	lsls	r1, r3, #28
 801ed4a:	d42c      	bmi.n	801eda6 <__swsetup_r+0x82>
 801ed4c:	06dd      	lsls	r5, r3, #27
 801ed4e:	d411      	bmi.n	801ed74 <__swsetup_r+0x50>
 801ed50:	2309      	movs	r3, #9
 801ed52:	6033      	str	r3, [r6, #0]
 801ed54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ed58:	81a3      	strh	r3, [r4, #12]
 801ed5a:	f04f 30ff 	mov.w	r0, #4294967295
 801ed5e:	e03e      	b.n	801edde <__swsetup_r+0xba>
 801ed60:	4b25      	ldr	r3, [pc, #148]	; (801edf8 <__swsetup_r+0xd4>)
 801ed62:	429c      	cmp	r4, r3
 801ed64:	d101      	bne.n	801ed6a <__swsetup_r+0x46>
 801ed66:	68ac      	ldr	r4, [r5, #8]
 801ed68:	e7eb      	b.n	801ed42 <__swsetup_r+0x1e>
 801ed6a:	4b24      	ldr	r3, [pc, #144]	; (801edfc <__swsetup_r+0xd8>)
 801ed6c:	429c      	cmp	r4, r3
 801ed6e:	bf08      	it	eq
 801ed70:	68ec      	ldreq	r4, [r5, #12]
 801ed72:	e7e6      	b.n	801ed42 <__swsetup_r+0x1e>
 801ed74:	0758      	lsls	r0, r3, #29
 801ed76:	d512      	bpl.n	801ed9e <__swsetup_r+0x7a>
 801ed78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ed7a:	b141      	cbz	r1, 801ed8e <__swsetup_r+0x6a>
 801ed7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed80:	4299      	cmp	r1, r3
 801ed82:	d002      	beq.n	801ed8a <__swsetup_r+0x66>
 801ed84:	4630      	mov	r0, r6
 801ed86:	f7fe fa9d 	bl	801d2c4 <_free_r>
 801ed8a:	2300      	movs	r3, #0
 801ed8c:	6363      	str	r3, [r4, #52]	; 0x34
 801ed8e:	89a3      	ldrh	r3, [r4, #12]
 801ed90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ed94:	81a3      	strh	r3, [r4, #12]
 801ed96:	2300      	movs	r3, #0
 801ed98:	6063      	str	r3, [r4, #4]
 801ed9a:	6923      	ldr	r3, [r4, #16]
 801ed9c:	6023      	str	r3, [r4, #0]
 801ed9e:	89a3      	ldrh	r3, [r4, #12]
 801eda0:	f043 0308 	orr.w	r3, r3, #8
 801eda4:	81a3      	strh	r3, [r4, #12]
 801eda6:	6923      	ldr	r3, [r4, #16]
 801eda8:	b94b      	cbnz	r3, 801edbe <__swsetup_r+0x9a>
 801edaa:	89a3      	ldrh	r3, [r4, #12]
 801edac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801edb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801edb4:	d003      	beq.n	801edbe <__swsetup_r+0x9a>
 801edb6:	4621      	mov	r1, r4
 801edb8:	4630      	mov	r0, r6
 801edba:	f7fe f9f3 	bl	801d1a4 <__smakebuf_r>
 801edbe:	89a0      	ldrh	r0, [r4, #12]
 801edc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801edc4:	f010 0301 	ands.w	r3, r0, #1
 801edc8:	d00a      	beq.n	801ede0 <__swsetup_r+0xbc>
 801edca:	2300      	movs	r3, #0
 801edcc:	60a3      	str	r3, [r4, #8]
 801edce:	6963      	ldr	r3, [r4, #20]
 801edd0:	425b      	negs	r3, r3
 801edd2:	61a3      	str	r3, [r4, #24]
 801edd4:	6923      	ldr	r3, [r4, #16]
 801edd6:	b943      	cbnz	r3, 801edea <__swsetup_r+0xc6>
 801edd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801eddc:	d1ba      	bne.n	801ed54 <__swsetup_r+0x30>
 801edde:	bd70      	pop	{r4, r5, r6, pc}
 801ede0:	0781      	lsls	r1, r0, #30
 801ede2:	bf58      	it	pl
 801ede4:	6963      	ldrpl	r3, [r4, #20]
 801ede6:	60a3      	str	r3, [r4, #8]
 801ede8:	e7f4      	b.n	801edd4 <__swsetup_r+0xb0>
 801edea:	2000      	movs	r0, #0
 801edec:	e7f7      	b.n	801edde <__swsetup_r+0xba>
 801edee:	bf00      	nop
 801edf0:	2000008c 	.word	0x2000008c
 801edf4:	08022018 	.word	0x08022018
 801edf8:	08022038 	.word	0x08022038
 801edfc:	08021ff8 	.word	0x08021ff8

0801ee00 <_close_r>:
 801ee00:	b538      	push	{r3, r4, r5, lr}
 801ee02:	4d06      	ldr	r5, [pc, #24]	; (801ee1c <_close_r+0x1c>)
 801ee04:	2300      	movs	r3, #0
 801ee06:	4604      	mov	r4, r0
 801ee08:	4608      	mov	r0, r1
 801ee0a:	602b      	str	r3, [r5, #0]
 801ee0c:	f7fd ff58 	bl	801ccc0 <_close>
 801ee10:	1c43      	adds	r3, r0, #1
 801ee12:	d102      	bne.n	801ee1a <_close_r+0x1a>
 801ee14:	682b      	ldr	r3, [r5, #0]
 801ee16:	b103      	cbz	r3, 801ee1a <_close_r+0x1a>
 801ee18:	6023      	str	r3, [r4, #0]
 801ee1a:	bd38      	pop	{r3, r4, r5, pc}
 801ee1c:	20019220 	.word	0x20019220

0801ee20 <quorem>:
 801ee20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee24:	6903      	ldr	r3, [r0, #16]
 801ee26:	690c      	ldr	r4, [r1, #16]
 801ee28:	42a3      	cmp	r3, r4
 801ee2a:	4607      	mov	r7, r0
 801ee2c:	f2c0 8081 	blt.w	801ef32 <quorem+0x112>
 801ee30:	3c01      	subs	r4, #1
 801ee32:	f101 0814 	add.w	r8, r1, #20
 801ee36:	f100 0514 	add.w	r5, r0, #20
 801ee3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ee3e:	9301      	str	r3, [sp, #4]
 801ee40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ee44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ee48:	3301      	adds	r3, #1
 801ee4a:	429a      	cmp	r2, r3
 801ee4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ee50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ee54:	fbb2 f6f3 	udiv	r6, r2, r3
 801ee58:	d331      	bcc.n	801eebe <quorem+0x9e>
 801ee5a:	f04f 0e00 	mov.w	lr, #0
 801ee5e:	4640      	mov	r0, r8
 801ee60:	46ac      	mov	ip, r5
 801ee62:	46f2      	mov	sl, lr
 801ee64:	f850 2b04 	ldr.w	r2, [r0], #4
 801ee68:	b293      	uxth	r3, r2
 801ee6a:	fb06 e303 	mla	r3, r6, r3, lr
 801ee6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ee72:	b29b      	uxth	r3, r3
 801ee74:	ebaa 0303 	sub.w	r3, sl, r3
 801ee78:	0c12      	lsrs	r2, r2, #16
 801ee7a:	f8dc a000 	ldr.w	sl, [ip]
 801ee7e:	fb06 e202 	mla	r2, r6, r2, lr
 801ee82:	fa13 f38a 	uxtah	r3, r3, sl
 801ee86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ee8a:	fa1f fa82 	uxth.w	sl, r2
 801ee8e:	f8dc 2000 	ldr.w	r2, [ip]
 801ee92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801ee96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ee9a:	b29b      	uxth	r3, r3
 801ee9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801eea0:	4581      	cmp	r9, r0
 801eea2:	f84c 3b04 	str.w	r3, [ip], #4
 801eea6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801eeaa:	d2db      	bcs.n	801ee64 <quorem+0x44>
 801eeac:	f855 300b 	ldr.w	r3, [r5, fp]
 801eeb0:	b92b      	cbnz	r3, 801eebe <quorem+0x9e>
 801eeb2:	9b01      	ldr	r3, [sp, #4]
 801eeb4:	3b04      	subs	r3, #4
 801eeb6:	429d      	cmp	r5, r3
 801eeb8:	461a      	mov	r2, r3
 801eeba:	d32e      	bcc.n	801ef1a <quorem+0xfa>
 801eebc:	613c      	str	r4, [r7, #16]
 801eebe:	4638      	mov	r0, r7
 801eec0:	f001 fcb4 	bl	802082c <__mcmp>
 801eec4:	2800      	cmp	r0, #0
 801eec6:	db24      	blt.n	801ef12 <quorem+0xf2>
 801eec8:	3601      	adds	r6, #1
 801eeca:	4628      	mov	r0, r5
 801eecc:	f04f 0c00 	mov.w	ip, #0
 801eed0:	f858 2b04 	ldr.w	r2, [r8], #4
 801eed4:	f8d0 e000 	ldr.w	lr, [r0]
 801eed8:	b293      	uxth	r3, r2
 801eeda:	ebac 0303 	sub.w	r3, ip, r3
 801eede:	0c12      	lsrs	r2, r2, #16
 801eee0:	fa13 f38e 	uxtah	r3, r3, lr
 801eee4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801eee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801eeec:	b29b      	uxth	r3, r3
 801eeee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801eef2:	45c1      	cmp	r9, r8
 801eef4:	f840 3b04 	str.w	r3, [r0], #4
 801eef8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801eefc:	d2e8      	bcs.n	801eed0 <quorem+0xb0>
 801eefe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ef02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ef06:	b922      	cbnz	r2, 801ef12 <quorem+0xf2>
 801ef08:	3b04      	subs	r3, #4
 801ef0a:	429d      	cmp	r5, r3
 801ef0c:	461a      	mov	r2, r3
 801ef0e:	d30a      	bcc.n	801ef26 <quorem+0x106>
 801ef10:	613c      	str	r4, [r7, #16]
 801ef12:	4630      	mov	r0, r6
 801ef14:	b003      	add	sp, #12
 801ef16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef1a:	6812      	ldr	r2, [r2, #0]
 801ef1c:	3b04      	subs	r3, #4
 801ef1e:	2a00      	cmp	r2, #0
 801ef20:	d1cc      	bne.n	801eebc <quorem+0x9c>
 801ef22:	3c01      	subs	r4, #1
 801ef24:	e7c7      	b.n	801eeb6 <quorem+0x96>
 801ef26:	6812      	ldr	r2, [r2, #0]
 801ef28:	3b04      	subs	r3, #4
 801ef2a:	2a00      	cmp	r2, #0
 801ef2c:	d1f0      	bne.n	801ef10 <quorem+0xf0>
 801ef2e:	3c01      	subs	r4, #1
 801ef30:	e7eb      	b.n	801ef0a <quorem+0xea>
 801ef32:	2000      	movs	r0, #0
 801ef34:	e7ee      	b.n	801ef14 <quorem+0xf4>
	...

0801ef38 <_dtoa_r>:
 801ef38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef3c:	ed2d 8b02 	vpush	{d8}
 801ef40:	ec57 6b10 	vmov	r6, r7, d0
 801ef44:	b095      	sub	sp, #84	; 0x54
 801ef46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ef48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ef4c:	9105      	str	r1, [sp, #20]
 801ef4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ef52:	4604      	mov	r4, r0
 801ef54:	9209      	str	r2, [sp, #36]	; 0x24
 801ef56:	930f      	str	r3, [sp, #60]	; 0x3c
 801ef58:	b975      	cbnz	r5, 801ef78 <_dtoa_r+0x40>
 801ef5a:	2010      	movs	r0, #16
 801ef5c:	f7fe f962 	bl	801d224 <malloc>
 801ef60:	4602      	mov	r2, r0
 801ef62:	6260      	str	r0, [r4, #36]	; 0x24
 801ef64:	b920      	cbnz	r0, 801ef70 <_dtoa_r+0x38>
 801ef66:	4bb2      	ldr	r3, [pc, #712]	; (801f230 <_dtoa_r+0x2f8>)
 801ef68:	21ea      	movs	r1, #234	; 0xea
 801ef6a:	48b2      	ldr	r0, [pc, #712]	; (801f234 <_dtoa_r+0x2fc>)
 801ef6c:	f001 ffd6 	bl	8020f1c <__assert_func>
 801ef70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ef74:	6005      	str	r5, [r0, #0]
 801ef76:	60c5      	str	r5, [r0, #12]
 801ef78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ef7a:	6819      	ldr	r1, [r3, #0]
 801ef7c:	b151      	cbz	r1, 801ef94 <_dtoa_r+0x5c>
 801ef7e:	685a      	ldr	r2, [r3, #4]
 801ef80:	604a      	str	r2, [r1, #4]
 801ef82:	2301      	movs	r3, #1
 801ef84:	4093      	lsls	r3, r2
 801ef86:	608b      	str	r3, [r1, #8]
 801ef88:	4620      	mov	r0, r4
 801ef8a:	f001 f9c7 	bl	802031c <_Bfree>
 801ef8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ef90:	2200      	movs	r2, #0
 801ef92:	601a      	str	r2, [r3, #0]
 801ef94:	1e3b      	subs	r3, r7, #0
 801ef96:	bfb9      	ittee	lt
 801ef98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ef9c:	9303      	strlt	r3, [sp, #12]
 801ef9e:	2300      	movge	r3, #0
 801efa0:	f8c8 3000 	strge.w	r3, [r8]
 801efa4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801efa8:	4ba3      	ldr	r3, [pc, #652]	; (801f238 <_dtoa_r+0x300>)
 801efaa:	bfbc      	itt	lt
 801efac:	2201      	movlt	r2, #1
 801efae:	f8c8 2000 	strlt.w	r2, [r8]
 801efb2:	ea33 0309 	bics.w	r3, r3, r9
 801efb6:	d11b      	bne.n	801eff0 <_dtoa_r+0xb8>
 801efb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801efba:	f242 730f 	movw	r3, #9999	; 0x270f
 801efbe:	6013      	str	r3, [r2, #0]
 801efc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801efc4:	4333      	orrs	r3, r6
 801efc6:	f000 857a 	beq.w	801fabe <_dtoa_r+0xb86>
 801efca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801efcc:	b963      	cbnz	r3, 801efe8 <_dtoa_r+0xb0>
 801efce:	4b9b      	ldr	r3, [pc, #620]	; (801f23c <_dtoa_r+0x304>)
 801efd0:	e024      	b.n	801f01c <_dtoa_r+0xe4>
 801efd2:	4b9b      	ldr	r3, [pc, #620]	; (801f240 <_dtoa_r+0x308>)
 801efd4:	9300      	str	r3, [sp, #0]
 801efd6:	3308      	adds	r3, #8
 801efd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801efda:	6013      	str	r3, [r2, #0]
 801efdc:	9800      	ldr	r0, [sp, #0]
 801efde:	b015      	add	sp, #84	; 0x54
 801efe0:	ecbd 8b02 	vpop	{d8}
 801efe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efe8:	4b94      	ldr	r3, [pc, #592]	; (801f23c <_dtoa_r+0x304>)
 801efea:	9300      	str	r3, [sp, #0]
 801efec:	3303      	adds	r3, #3
 801efee:	e7f3      	b.n	801efd8 <_dtoa_r+0xa0>
 801eff0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801eff4:	2200      	movs	r2, #0
 801eff6:	ec51 0b17 	vmov	r0, r1, d7
 801effa:	2300      	movs	r3, #0
 801effc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801f000:	f7e1 fd8a 	bl	8000b18 <__aeabi_dcmpeq>
 801f004:	4680      	mov	r8, r0
 801f006:	b158      	cbz	r0, 801f020 <_dtoa_r+0xe8>
 801f008:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f00a:	2301      	movs	r3, #1
 801f00c:	6013      	str	r3, [r2, #0]
 801f00e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f010:	2b00      	cmp	r3, #0
 801f012:	f000 8551 	beq.w	801fab8 <_dtoa_r+0xb80>
 801f016:	488b      	ldr	r0, [pc, #556]	; (801f244 <_dtoa_r+0x30c>)
 801f018:	6018      	str	r0, [r3, #0]
 801f01a:	1e43      	subs	r3, r0, #1
 801f01c:	9300      	str	r3, [sp, #0]
 801f01e:	e7dd      	b.n	801efdc <_dtoa_r+0xa4>
 801f020:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801f024:	aa12      	add	r2, sp, #72	; 0x48
 801f026:	a913      	add	r1, sp, #76	; 0x4c
 801f028:	4620      	mov	r0, r4
 801f02a:	f001 fd1f 	bl	8020a6c <__d2b>
 801f02e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f032:	4683      	mov	fp, r0
 801f034:	2d00      	cmp	r5, #0
 801f036:	d07c      	beq.n	801f132 <_dtoa_r+0x1fa>
 801f038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f03a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801f03e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f042:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801f046:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801f04a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801f04e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801f052:	4b7d      	ldr	r3, [pc, #500]	; (801f248 <_dtoa_r+0x310>)
 801f054:	2200      	movs	r2, #0
 801f056:	4630      	mov	r0, r6
 801f058:	4639      	mov	r1, r7
 801f05a:	f7e1 f93d 	bl	80002d8 <__aeabi_dsub>
 801f05e:	a36e      	add	r3, pc, #440	; (adr r3, 801f218 <_dtoa_r+0x2e0>)
 801f060:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f064:	f7e1 faf0 	bl	8000648 <__aeabi_dmul>
 801f068:	a36d      	add	r3, pc, #436	; (adr r3, 801f220 <_dtoa_r+0x2e8>)
 801f06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f06e:	f7e1 f935 	bl	80002dc <__adddf3>
 801f072:	4606      	mov	r6, r0
 801f074:	4628      	mov	r0, r5
 801f076:	460f      	mov	r7, r1
 801f078:	f7e1 fa7c 	bl	8000574 <__aeabi_i2d>
 801f07c:	a36a      	add	r3, pc, #424	; (adr r3, 801f228 <_dtoa_r+0x2f0>)
 801f07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f082:	f7e1 fae1 	bl	8000648 <__aeabi_dmul>
 801f086:	4602      	mov	r2, r0
 801f088:	460b      	mov	r3, r1
 801f08a:	4630      	mov	r0, r6
 801f08c:	4639      	mov	r1, r7
 801f08e:	f7e1 f925 	bl	80002dc <__adddf3>
 801f092:	4606      	mov	r6, r0
 801f094:	460f      	mov	r7, r1
 801f096:	f7e1 fd87 	bl	8000ba8 <__aeabi_d2iz>
 801f09a:	2200      	movs	r2, #0
 801f09c:	4682      	mov	sl, r0
 801f09e:	2300      	movs	r3, #0
 801f0a0:	4630      	mov	r0, r6
 801f0a2:	4639      	mov	r1, r7
 801f0a4:	f7e1 fd42 	bl	8000b2c <__aeabi_dcmplt>
 801f0a8:	b148      	cbz	r0, 801f0be <_dtoa_r+0x186>
 801f0aa:	4650      	mov	r0, sl
 801f0ac:	f7e1 fa62 	bl	8000574 <__aeabi_i2d>
 801f0b0:	4632      	mov	r2, r6
 801f0b2:	463b      	mov	r3, r7
 801f0b4:	f7e1 fd30 	bl	8000b18 <__aeabi_dcmpeq>
 801f0b8:	b908      	cbnz	r0, 801f0be <_dtoa_r+0x186>
 801f0ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f0be:	f1ba 0f16 	cmp.w	sl, #22
 801f0c2:	d854      	bhi.n	801f16e <_dtoa_r+0x236>
 801f0c4:	4b61      	ldr	r3, [pc, #388]	; (801f24c <_dtoa_r+0x314>)
 801f0c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f0d2:	f7e1 fd2b 	bl	8000b2c <__aeabi_dcmplt>
 801f0d6:	2800      	cmp	r0, #0
 801f0d8:	d04b      	beq.n	801f172 <_dtoa_r+0x23a>
 801f0da:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f0de:	2300      	movs	r3, #0
 801f0e0:	930e      	str	r3, [sp, #56]	; 0x38
 801f0e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f0e4:	1b5d      	subs	r5, r3, r5
 801f0e6:	1e6b      	subs	r3, r5, #1
 801f0e8:	9304      	str	r3, [sp, #16]
 801f0ea:	bf43      	ittte	mi
 801f0ec:	2300      	movmi	r3, #0
 801f0ee:	f1c5 0801 	rsbmi	r8, r5, #1
 801f0f2:	9304      	strmi	r3, [sp, #16]
 801f0f4:	f04f 0800 	movpl.w	r8, #0
 801f0f8:	f1ba 0f00 	cmp.w	sl, #0
 801f0fc:	db3b      	blt.n	801f176 <_dtoa_r+0x23e>
 801f0fe:	9b04      	ldr	r3, [sp, #16]
 801f100:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801f104:	4453      	add	r3, sl
 801f106:	9304      	str	r3, [sp, #16]
 801f108:	2300      	movs	r3, #0
 801f10a:	9306      	str	r3, [sp, #24]
 801f10c:	9b05      	ldr	r3, [sp, #20]
 801f10e:	2b09      	cmp	r3, #9
 801f110:	d869      	bhi.n	801f1e6 <_dtoa_r+0x2ae>
 801f112:	2b05      	cmp	r3, #5
 801f114:	bfc4      	itt	gt
 801f116:	3b04      	subgt	r3, #4
 801f118:	9305      	strgt	r3, [sp, #20]
 801f11a:	9b05      	ldr	r3, [sp, #20]
 801f11c:	f1a3 0302 	sub.w	r3, r3, #2
 801f120:	bfcc      	ite	gt
 801f122:	2500      	movgt	r5, #0
 801f124:	2501      	movle	r5, #1
 801f126:	2b03      	cmp	r3, #3
 801f128:	d869      	bhi.n	801f1fe <_dtoa_r+0x2c6>
 801f12a:	e8df f003 	tbb	[pc, r3]
 801f12e:	4e2c      	.short	0x4e2c
 801f130:	5a4c      	.short	0x5a4c
 801f132:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801f136:	441d      	add	r5, r3
 801f138:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801f13c:	2b20      	cmp	r3, #32
 801f13e:	bfc1      	itttt	gt
 801f140:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801f144:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801f148:	fa09 f303 	lslgt.w	r3, r9, r3
 801f14c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801f150:	bfda      	itte	le
 801f152:	f1c3 0320 	rsble	r3, r3, #32
 801f156:	fa06 f003 	lslle.w	r0, r6, r3
 801f15a:	4318      	orrgt	r0, r3
 801f15c:	f7e1 f9fa 	bl	8000554 <__aeabi_ui2d>
 801f160:	2301      	movs	r3, #1
 801f162:	4606      	mov	r6, r0
 801f164:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801f168:	3d01      	subs	r5, #1
 801f16a:	9310      	str	r3, [sp, #64]	; 0x40
 801f16c:	e771      	b.n	801f052 <_dtoa_r+0x11a>
 801f16e:	2301      	movs	r3, #1
 801f170:	e7b6      	b.n	801f0e0 <_dtoa_r+0x1a8>
 801f172:	900e      	str	r0, [sp, #56]	; 0x38
 801f174:	e7b5      	b.n	801f0e2 <_dtoa_r+0x1aa>
 801f176:	f1ca 0300 	rsb	r3, sl, #0
 801f17a:	9306      	str	r3, [sp, #24]
 801f17c:	2300      	movs	r3, #0
 801f17e:	eba8 080a 	sub.w	r8, r8, sl
 801f182:	930d      	str	r3, [sp, #52]	; 0x34
 801f184:	e7c2      	b.n	801f10c <_dtoa_r+0x1d4>
 801f186:	2300      	movs	r3, #0
 801f188:	9308      	str	r3, [sp, #32]
 801f18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f18c:	2b00      	cmp	r3, #0
 801f18e:	dc39      	bgt.n	801f204 <_dtoa_r+0x2cc>
 801f190:	f04f 0901 	mov.w	r9, #1
 801f194:	f8cd 9004 	str.w	r9, [sp, #4]
 801f198:	464b      	mov	r3, r9
 801f19a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f19e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f1a0:	2200      	movs	r2, #0
 801f1a2:	6042      	str	r2, [r0, #4]
 801f1a4:	2204      	movs	r2, #4
 801f1a6:	f102 0614 	add.w	r6, r2, #20
 801f1aa:	429e      	cmp	r6, r3
 801f1ac:	6841      	ldr	r1, [r0, #4]
 801f1ae:	d92f      	bls.n	801f210 <_dtoa_r+0x2d8>
 801f1b0:	4620      	mov	r0, r4
 801f1b2:	f001 f873 	bl	802029c <_Balloc>
 801f1b6:	9000      	str	r0, [sp, #0]
 801f1b8:	2800      	cmp	r0, #0
 801f1ba:	d14b      	bne.n	801f254 <_dtoa_r+0x31c>
 801f1bc:	4b24      	ldr	r3, [pc, #144]	; (801f250 <_dtoa_r+0x318>)
 801f1be:	4602      	mov	r2, r0
 801f1c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f1c4:	e6d1      	b.n	801ef6a <_dtoa_r+0x32>
 801f1c6:	2301      	movs	r3, #1
 801f1c8:	e7de      	b.n	801f188 <_dtoa_r+0x250>
 801f1ca:	2300      	movs	r3, #0
 801f1cc:	9308      	str	r3, [sp, #32]
 801f1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1d0:	eb0a 0903 	add.w	r9, sl, r3
 801f1d4:	f109 0301 	add.w	r3, r9, #1
 801f1d8:	2b01      	cmp	r3, #1
 801f1da:	9301      	str	r3, [sp, #4]
 801f1dc:	bfb8      	it	lt
 801f1de:	2301      	movlt	r3, #1
 801f1e0:	e7dd      	b.n	801f19e <_dtoa_r+0x266>
 801f1e2:	2301      	movs	r3, #1
 801f1e4:	e7f2      	b.n	801f1cc <_dtoa_r+0x294>
 801f1e6:	2501      	movs	r5, #1
 801f1e8:	2300      	movs	r3, #0
 801f1ea:	9305      	str	r3, [sp, #20]
 801f1ec:	9508      	str	r5, [sp, #32]
 801f1ee:	f04f 39ff 	mov.w	r9, #4294967295
 801f1f2:	2200      	movs	r2, #0
 801f1f4:	f8cd 9004 	str.w	r9, [sp, #4]
 801f1f8:	2312      	movs	r3, #18
 801f1fa:	9209      	str	r2, [sp, #36]	; 0x24
 801f1fc:	e7cf      	b.n	801f19e <_dtoa_r+0x266>
 801f1fe:	2301      	movs	r3, #1
 801f200:	9308      	str	r3, [sp, #32]
 801f202:	e7f4      	b.n	801f1ee <_dtoa_r+0x2b6>
 801f204:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f208:	f8cd 9004 	str.w	r9, [sp, #4]
 801f20c:	464b      	mov	r3, r9
 801f20e:	e7c6      	b.n	801f19e <_dtoa_r+0x266>
 801f210:	3101      	adds	r1, #1
 801f212:	6041      	str	r1, [r0, #4]
 801f214:	0052      	lsls	r2, r2, #1
 801f216:	e7c6      	b.n	801f1a6 <_dtoa_r+0x26e>
 801f218:	636f4361 	.word	0x636f4361
 801f21c:	3fd287a7 	.word	0x3fd287a7
 801f220:	8b60c8b3 	.word	0x8b60c8b3
 801f224:	3fc68a28 	.word	0x3fc68a28
 801f228:	509f79fb 	.word	0x509f79fb
 801f22c:	3fd34413 	.word	0x3fd34413
 801f230:	08022112 	.word	0x08022112
 801f234:	08022129 	.word	0x08022129
 801f238:	7ff00000 	.word	0x7ff00000
 801f23c:	0802210e 	.word	0x0802210e
 801f240:	08022105 	.word	0x08022105
 801f244:	0802206d 	.word	0x0802206d
 801f248:	3ff80000 	.word	0x3ff80000
 801f24c:	080222a0 	.word	0x080222a0
 801f250:	08022188 	.word	0x08022188
 801f254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f256:	9a00      	ldr	r2, [sp, #0]
 801f258:	601a      	str	r2, [r3, #0]
 801f25a:	9b01      	ldr	r3, [sp, #4]
 801f25c:	2b0e      	cmp	r3, #14
 801f25e:	f200 80ad 	bhi.w	801f3bc <_dtoa_r+0x484>
 801f262:	2d00      	cmp	r5, #0
 801f264:	f000 80aa 	beq.w	801f3bc <_dtoa_r+0x484>
 801f268:	f1ba 0f00 	cmp.w	sl, #0
 801f26c:	dd36      	ble.n	801f2dc <_dtoa_r+0x3a4>
 801f26e:	4ac3      	ldr	r2, [pc, #780]	; (801f57c <_dtoa_r+0x644>)
 801f270:	f00a 030f 	and.w	r3, sl, #15
 801f274:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f278:	ed93 7b00 	vldr	d7, [r3]
 801f27c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801f280:	ea4f 172a 	mov.w	r7, sl, asr #4
 801f284:	eeb0 8a47 	vmov.f32	s16, s14
 801f288:	eef0 8a67 	vmov.f32	s17, s15
 801f28c:	d016      	beq.n	801f2bc <_dtoa_r+0x384>
 801f28e:	4bbc      	ldr	r3, [pc, #752]	; (801f580 <_dtoa_r+0x648>)
 801f290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f298:	f7e1 fb00 	bl	800089c <__aeabi_ddiv>
 801f29c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f2a0:	f007 070f 	and.w	r7, r7, #15
 801f2a4:	2503      	movs	r5, #3
 801f2a6:	4eb6      	ldr	r6, [pc, #728]	; (801f580 <_dtoa_r+0x648>)
 801f2a8:	b957      	cbnz	r7, 801f2c0 <_dtoa_r+0x388>
 801f2aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f2ae:	ec53 2b18 	vmov	r2, r3, d8
 801f2b2:	f7e1 faf3 	bl	800089c <__aeabi_ddiv>
 801f2b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f2ba:	e029      	b.n	801f310 <_dtoa_r+0x3d8>
 801f2bc:	2502      	movs	r5, #2
 801f2be:	e7f2      	b.n	801f2a6 <_dtoa_r+0x36e>
 801f2c0:	07f9      	lsls	r1, r7, #31
 801f2c2:	d508      	bpl.n	801f2d6 <_dtoa_r+0x39e>
 801f2c4:	ec51 0b18 	vmov	r0, r1, d8
 801f2c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f2cc:	f7e1 f9bc 	bl	8000648 <__aeabi_dmul>
 801f2d0:	ec41 0b18 	vmov	d8, r0, r1
 801f2d4:	3501      	adds	r5, #1
 801f2d6:	107f      	asrs	r7, r7, #1
 801f2d8:	3608      	adds	r6, #8
 801f2da:	e7e5      	b.n	801f2a8 <_dtoa_r+0x370>
 801f2dc:	f000 80a6 	beq.w	801f42c <_dtoa_r+0x4f4>
 801f2e0:	f1ca 0600 	rsb	r6, sl, #0
 801f2e4:	4ba5      	ldr	r3, [pc, #660]	; (801f57c <_dtoa_r+0x644>)
 801f2e6:	4fa6      	ldr	r7, [pc, #664]	; (801f580 <_dtoa_r+0x648>)
 801f2e8:	f006 020f 	and.w	r2, r6, #15
 801f2ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f2f8:	f7e1 f9a6 	bl	8000648 <__aeabi_dmul>
 801f2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f300:	1136      	asrs	r6, r6, #4
 801f302:	2300      	movs	r3, #0
 801f304:	2502      	movs	r5, #2
 801f306:	2e00      	cmp	r6, #0
 801f308:	f040 8085 	bne.w	801f416 <_dtoa_r+0x4de>
 801f30c:	2b00      	cmp	r3, #0
 801f30e:	d1d2      	bne.n	801f2b6 <_dtoa_r+0x37e>
 801f310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f312:	2b00      	cmp	r3, #0
 801f314:	f000 808c 	beq.w	801f430 <_dtoa_r+0x4f8>
 801f318:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f31c:	4b99      	ldr	r3, [pc, #612]	; (801f584 <_dtoa_r+0x64c>)
 801f31e:	2200      	movs	r2, #0
 801f320:	4630      	mov	r0, r6
 801f322:	4639      	mov	r1, r7
 801f324:	f7e1 fc02 	bl	8000b2c <__aeabi_dcmplt>
 801f328:	2800      	cmp	r0, #0
 801f32a:	f000 8081 	beq.w	801f430 <_dtoa_r+0x4f8>
 801f32e:	9b01      	ldr	r3, [sp, #4]
 801f330:	2b00      	cmp	r3, #0
 801f332:	d07d      	beq.n	801f430 <_dtoa_r+0x4f8>
 801f334:	f1b9 0f00 	cmp.w	r9, #0
 801f338:	dd3c      	ble.n	801f3b4 <_dtoa_r+0x47c>
 801f33a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f33e:	9307      	str	r3, [sp, #28]
 801f340:	2200      	movs	r2, #0
 801f342:	4b91      	ldr	r3, [pc, #580]	; (801f588 <_dtoa_r+0x650>)
 801f344:	4630      	mov	r0, r6
 801f346:	4639      	mov	r1, r7
 801f348:	f7e1 f97e 	bl	8000648 <__aeabi_dmul>
 801f34c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f350:	3501      	adds	r5, #1
 801f352:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801f356:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f35a:	4628      	mov	r0, r5
 801f35c:	f7e1 f90a 	bl	8000574 <__aeabi_i2d>
 801f360:	4632      	mov	r2, r6
 801f362:	463b      	mov	r3, r7
 801f364:	f7e1 f970 	bl	8000648 <__aeabi_dmul>
 801f368:	4b88      	ldr	r3, [pc, #544]	; (801f58c <_dtoa_r+0x654>)
 801f36a:	2200      	movs	r2, #0
 801f36c:	f7e0 ffb6 	bl	80002dc <__adddf3>
 801f370:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f378:	9303      	str	r3, [sp, #12]
 801f37a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	d15c      	bne.n	801f43a <_dtoa_r+0x502>
 801f380:	4b83      	ldr	r3, [pc, #524]	; (801f590 <_dtoa_r+0x658>)
 801f382:	2200      	movs	r2, #0
 801f384:	4630      	mov	r0, r6
 801f386:	4639      	mov	r1, r7
 801f388:	f7e0 ffa6 	bl	80002d8 <__aeabi_dsub>
 801f38c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f390:	4606      	mov	r6, r0
 801f392:	460f      	mov	r7, r1
 801f394:	f7e1 fbe8 	bl	8000b68 <__aeabi_dcmpgt>
 801f398:	2800      	cmp	r0, #0
 801f39a:	f040 8296 	bne.w	801f8ca <_dtoa_r+0x992>
 801f39e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f3a2:	4630      	mov	r0, r6
 801f3a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f3a8:	4639      	mov	r1, r7
 801f3aa:	f7e1 fbbf 	bl	8000b2c <__aeabi_dcmplt>
 801f3ae:	2800      	cmp	r0, #0
 801f3b0:	f040 8288 	bne.w	801f8c4 <_dtoa_r+0x98c>
 801f3b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f3b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f3bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	f2c0 8158 	blt.w	801f674 <_dtoa_r+0x73c>
 801f3c4:	f1ba 0f0e 	cmp.w	sl, #14
 801f3c8:	f300 8154 	bgt.w	801f674 <_dtoa_r+0x73c>
 801f3cc:	4b6b      	ldr	r3, [pc, #428]	; (801f57c <_dtoa_r+0x644>)
 801f3ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f3d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	f280 80e3 	bge.w	801f5a4 <_dtoa_r+0x66c>
 801f3de:	9b01      	ldr	r3, [sp, #4]
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	f300 80df 	bgt.w	801f5a4 <_dtoa_r+0x66c>
 801f3e6:	f040 826d 	bne.w	801f8c4 <_dtoa_r+0x98c>
 801f3ea:	4b69      	ldr	r3, [pc, #420]	; (801f590 <_dtoa_r+0x658>)
 801f3ec:	2200      	movs	r2, #0
 801f3ee:	4640      	mov	r0, r8
 801f3f0:	4649      	mov	r1, r9
 801f3f2:	f7e1 f929 	bl	8000648 <__aeabi_dmul>
 801f3f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f3fa:	f7e1 fbab 	bl	8000b54 <__aeabi_dcmpge>
 801f3fe:	9e01      	ldr	r6, [sp, #4]
 801f400:	4637      	mov	r7, r6
 801f402:	2800      	cmp	r0, #0
 801f404:	f040 8243 	bne.w	801f88e <_dtoa_r+0x956>
 801f408:	9d00      	ldr	r5, [sp, #0]
 801f40a:	2331      	movs	r3, #49	; 0x31
 801f40c:	f805 3b01 	strb.w	r3, [r5], #1
 801f410:	f10a 0a01 	add.w	sl, sl, #1
 801f414:	e23f      	b.n	801f896 <_dtoa_r+0x95e>
 801f416:	07f2      	lsls	r2, r6, #31
 801f418:	d505      	bpl.n	801f426 <_dtoa_r+0x4ee>
 801f41a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f41e:	f7e1 f913 	bl	8000648 <__aeabi_dmul>
 801f422:	3501      	adds	r5, #1
 801f424:	2301      	movs	r3, #1
 801f426:	1076      	asrs	r6, r6, #1
 801f428:	3708      	adds	r7, #8
 801f42a:	e76c      	b.n	801f306 <_dtoa_r+0x3ce>
 801f42c:	2502      	movs	r5, #2
 801f42e:	e76f      	b.n	801f310 <_dtoa_r+0x3d8>
 801f430:	9b01      	ldr	r3, [sp, #4]
 801f432:	f8cd a01c 	str.w	sl, [sp, #28]
 801f436:	930c      	str	r3, [sp, #48]	; 0x30
 801f438:	e78d      	b.n	801f356 <_dtoa_r+0x41e>
 801f43a:	9900      	ldr	r1, [sp, #0]
 801f43c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f43e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f440:	4b4e      	ldr	r3, [pc, #312]	; (801f57c <_dtoa_r+0x644>)
 801f442:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f446:	4401      	add	r1, r0
 801f448:	9102      	str	r1, [sp, #8]
 801f44a:	9908      	ldr	r1, [sp, #32]
 801f44c:	eeb0 8a47 	vmov.f32	s16, s14
 801f450:	eef0 8a67 	vmov.f32	s17, s15
 801f454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f458:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f45c:	2900      	cmp	r1, #0
 801f45e:	d045      	beq.n	801f4ec <_dtoa_r+0x5b4>
 801f460:	494c      	ldr	r1, [pc, #304]	; (801f594 <_dtoa_r+0x65c>)
 801f462:	2000      	movs	r0, #0
 801f464:	f7e1 fa1a 	bl	800089c <__aeabi_ddiv>
 801f468:	ec53 2b18 	vmov	r2, r3, d8
 801f46c:	f7e0 ff34 	bl	80002d8 <__aeabi_dsub>
 801f470:	9d00      	ldr	r5, [sp, #0]
 801f472:	ec41 0b18 	vmov	d8, r0, r1
 801f476:	4639      	mov	r1, r7
 801f478:	4630      	mov	r0, r6
 801f47a:	f7e1 fb95 	bl	8000ba8 <__aeabi_d2iz>
 801f47e:	900c      	str	r0, [sp, #48]	; 0x30
 801f480:	f7e1 f878 	bl	8000574 <__aeabi_i2d>
 801f484:	4602      	mov	r2, r0
 801f486:	460b      	mov	r3, r1
 801f488:	4630      	mov	r0, r6
 801f48a:	4639      	mov	r1, r7
 801f48c:	f7e0 ff24 	bl	80002d8 <__aeabi_dsub>
 801f490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f492:	3330      	adds	r3, #48	; 0x30
 801f494:	f805 3b01 	strb.w	r3, [r5], #1
 801f498:	ec53 2b18 	vmov	r2, r3, d8
 801f49c:	4606      	mov	r6, r0
 801f49e:	460f      	mov	r7, r1
 801f4a0:	f7e1 fb44 	bl	8000b2c <__aeabi_dcmplt>
 801f4a4:	2800      	cmp	r0, #0
 801f4a6:	d165      	bne.n	801f574 <_dtoa_r+0x63c>
 801f4a8:	4632      	mov	r2, r6
 801f4aa:	463b      	mov	r3, r7
 801f4ac:	4935      	ldr	r1, [pc, #212]	; (801f584 <_dtoa_r+0x64c>)
 801f4ae:	2000      	movs	r0, #0
 801f4b0:	f7e0 ff12 	bl	80002d8 <__aeabi_dsub>
 801f4b4:	ec53 2b18 	vmov	r2, r3, d8
 801f4b8:	f7e1 fb38 	bl	8000b2c <__aeabi_dcmplt>
 801f4bc:	2800      	cmp	r0, #0
 801f4be:	f040 80b9 	bne.w	801f634 <_dtoa_r+0x6fc>
 801f4c2:	9b02      	ldr	r3, [sp, #8]
 801f4c4:	429d      	cmp	r5, r3
 801f4c6:	f43f af75 	beq.w	801f3b4 <_dtoa_r+0x47c>
 801f4ca:	4b2f      	ldr	r3, [pc, #188]	; (801f588 <_dtoa_r+0x650>)
 801f4cc:	ec51 0b18 	vmov	r0, r1, d8
 801f4d0:	2200      	movs	r2, #0
 801f4d2:	f7e1 f8b9 	bl	8000648 <__aeabi_dmul>
 801f4d6:	4b2c      	ldr	r3, [pc, #176]	; (801f588 <_dtoa_r+0x650>)
 801f4d8:	ec41 0b18 	vmov	d8, r0, r1
 801f4dc:	2200      	movs	r2, #0
 801f4de:	4630      	mov	r0, r6
 801f4e0:	4639      	mov	r1, r7
 801f4e2:	f7e1 f8b1 	bl	8000648 <__aeabi_dmul>
 801f4e6:	4606      	mov	r6, r0
 801f4e8:	460f      	mov	r7, r1
 801f4ea:	e7c4      	b.n	801f476 <_dtoa_r+0x53e>
 801f4ec:	ec51 0b17 	vmov	r0, r1, d7
 801f4f0:	f7e1 f8aa 	bl	8000648 <__aeabi_dmul>
 801f4f4:	9b02      	ldr	r3, [sp, #8]
 801f4f6:	9d00      	ldr	r5, [sp, #0]
 801f4f8:	930c      	str	r3, [sp, #48]	; 0x30
 801f4fa:	ec41 0b18 	vmov	d8, r0, r1
 801f4fe:	4639      	mov	r1, r7
 801f500:	4630      	mov	r0, r6
 801f502:	f7e1 fb51 	bl	8000ba8 <__aeabi_d2iz>
 801f506:	9011      	str	r0, [sp, #68]	; 0x44
 801f508:	f7e1 f834 	bl	8000574 <__aeabi_i2d>
 801f50c:	4602      	mov	r2, r0
 801f50e:	460b      	mov	r3, r1
 801f510:	4630      	mov	r0, r6
 801f512:	4639      	mov	r1, r7
 801f514:	f7e0 fee0 	bl	80002d8 <__aeabi_dsub>
 801f518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f51a:	3330      	adds	r3, #48	; 0x30
 801f51c:	f805 3b01 	strb.w	r3, [r5], #1
 801f520:	9b02      	ldr	r3, [sp, #8]
 801f522:	429d      	cmp	r5, r3
 801f524:	4606      	mov	r6, r0
 801f526:	460f      	mov	r7, r1
 801f528:	f04f 0200 	mov.w	r2, #0
 801f52c:	d134      	bne.n	801f598 <_dtoa_r+0x660>
 801f52e:	4b19      	ldr	r3, [pc, #100]	; (801f594 <_dtoa_r+0x65c>)
 801f530:	ec51 0b18 	vmov	r0, r1, d8
 801f534:	f7e0 fed2 	bl	80002dc <__adddf3>
 801f538:	4602      	mov	r2, r0
 801f53a:	460b      	mov	r3, r1
 801f53c:	4630      	mov	r0, r6
 801f53e:	4639      	mov	r1, r7
 801f540:	f7e1 fb12 	bl	8000b68 <__aeabi_dcmpgt>
 801f544:	2800      	cmp	r0, #0
 801f546:	d175      	bne.n	801f634 <_dtoa_r+0x6fc>
 801f548:	ec53 2b18 	vmov	r2, r3, d8
 801f54c:	4911      	ldr	r1, [pc, #68]	; (801f594 <_dtoa_r+0x65c>)
 801f54e:	2000      	movs	r0, #0
 801f550:	f7e0 fec2 	bl	80002d8 <__aeabi_dsub>
 801f554:	4602      	mov	r2, r0
 801f556:	460b      	mov	r3, r1
 801f558:	4630      	mov	r0, r6
 801f55a:	4639      	mov	r1, r7
 801f55c:	f7e1 fae6 	bl	8000b2c <__aeabi_dcmplt>
 801f560:	2800      	cmp	r0, #0
 801f562:	f43f af27 	beq.w	801f3b4 <_dtoa_r+0x47c>
 801f566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f568:	1e6b      	subs	r3, r5, #1
 801f56a:	930c      	str	r3, [sp, #48]	; 0x30
 801f56c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f570:	2b30      	cmp	r3, #48	; 0x30
 801f572:	d0f8      	beq.n	801f566 <_dtoa_r+0x62e>
 801f574:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f578:	e04a      	b.n	801f610 <_dtoa_r+0x6d8>
 801f57a:	bf00      	nop
 801f57c:	080222a0 	.word	0x080222a0
 801f580:	08022278 	.word	0x08022278
 801f584:	3ff00000 	.word	0x3ff00000
 801f588:	40240000 	.word	0x40240000
 801f58c:	401c0000 	.word	0x401c0000
 801f590:	40140000 	.word	0x40140000
 801f594:	3fe00000 	.word	0x3fe00000
 801f598:	4baf      	ldr	r3, [pc, #700]	; (801f858 <_dtoa_r+0x920>)
 801f59a:	f7e1 f855 	bl	8000648 <__aeabi_dmul>
 801f59e:	4606      	mov	r6, r0
 801f5a0:	460f      	mov	r7, r1
 801f5a2:	e7ac      	b.n	801f4fe <_dtoa_r+0x5c6>
 801f5a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f5a8:	9d00      	ldr	r5, [sp, #0]
 801f5aa:	4642      	mov	r2, r8
 801f5ac:	464b      	mov	r3, r9
 801f5ae:	4630      	mov	r0, r6
 801f5b0:	4639      	mov	r1, r7
 801f5b2:	f7e1 f973 	bl	800089c <__aeabi_ddiv>
 801f5b6:	f7e1 faf7 	bl	8000ba8 <__aeabi_d2iz>
 801f5ba:	9002      	str	r0, [sp, #8]
 801f5bc:	f7e0 ffda 	bl	8000574 <__aeabi_i2d>
 801f5c0:	4642      	mov	r2, r8
 801f5c2:	464b      	mov	r3, r9
 801f5c4:	f7e1 f840 	bl	8000648 <__aeabi_dmul>
 801f5c8:	4602      	mov	r2, r0
 801f5ca:	460b      	mov	r3, r1
 801f5cc:	4630      	mov	r0, r6
 801f5ce:	4639      	mov	r1, r7
 801f5d0:	f7e0 fe82 	bl	80002d8 <__aeabi_dsub>
 801f5d4:	9e02      	ldr	r6, [sp, #8]
 801f5d6:	9f01      	ldr	r7, [sp, #4]
 801f5d8:	3630      	adds	r6, #48	; 0x30
 801f5da:	f805 6b01 	strb.w	r6, [r5], #1
 801f5de:	9e00      	ldr	r6, [sp, #0]
 801f5e0:	1bae      	subs	r6, r5, r6
 801f5e2:	42b7      	cmp	r7, r6
 801f5e4:	4602      	mov	r2, r0
 801f5e6:	460b      	mov	r3, r1
 801f5e8:	d137      	bne.n	801f65a <_dtoa_r+0x722>
 801f5ea:	f7e0 fe77 	bl	80002dc <__adddf3>
 801f5ee:	4642      	mov	r2, r8
 801f5f0:	464b      	mov	r3, r9
 801f5f2:	4606      	mov	r6, r0
 801f5f4:	460f      	mov	r7, r1
 801f5f6:	f7e1 fab7 	bl	8000b68 <__aeabi_dcmpgt>
 801f5fa:	b9c8      	cbnz	r0, 801f630 <_dtoa_r+0x6f8>
 801f5fc:	4642      	mov	r2, r8
 801f5fe:	464b      	mov	r3, r9
 801f600:	4630      	mov	r0, r6
 801f602:	4639      	mov	r1, r7
 801f604:	f7e1 fa88 	bl	8000b18 <__aeabi_dcmpeq>
 801f608:	b110      	cbz	r0, 801f610 <_dtoa_r+0x6d8>
 801f60a:	9b02      	ldr	r3, [sp, #8]
 801f60c:	07d9      	lsls	r1, r3, #31
 801f60e:	d40f      	bmi.n	801f630 <_dtoa_r+0x6f8>
 801f610:	4620      	mov	r0, r4
 801f612:	4659      	mov	r1, fp
 801f614:	f000 fe82 	bl	802031c <_Bfree>
 801f618:	2300      	movs	r3, #0
 801f61a:	702b      	strb	r3, [r5, #0]
 801f61c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f61e:	f10a 0001 	add.w	r0, sl, #1
 801f622:	6018      	str	r0, [r3, #0]
 801f624:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f626:	2b00      	cmp	r3, #0
 801f628:	f43f acd8 	beq.w	801efdc <_dtoa_r+0xa4>
 801f62c:	601d      	str	r5, [r3, #0]
 801f62e:	e4d5      	b.n	801efdc <_dtoa_r+0xa4>
 801f630:	f8cd a01c 	str.w	sl, [sp, #28]
 801f634:	462b      	mov	r3, r5
 801f636:	461d      	mov	r5, r3
 801f638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f63c:	2a39      	cmp	r2, #57	; 0x39
 801f63e:	d108      	bne.n	801f652 <_dtoa_r+0x71a>
 801f640:	9a00      	ldr	r2, [sp, #0]
 801f642:	429a      	cmp	r2, r3
 801f644:	d1f7      	bne.n	801f636 <_dtoa_r+0x6fe>
 801f646:	9a07      	ldr	r2, [sp, #28]
 801f648:	9900      	ldr	r1, [sp, #0]
 801f64a:	3201      	adds	r2, #1
 801f64c:	9207      	str	r2, [sp, #28]
 801f64e:	2230      	movs	r2, #48	; 0x30
 801f650:	700a      	strb	r2, [r1, #0]
 801f652:	781a      	ldrb	r2, [r3, #0]
 801f654:	3201      	adds	r2, #1
 801f656:	701a      	strb	r2, [r3, #0]
 801f658:	e78c      	b.n	801f574 <_dtoa_r+0x63c>
 801f65a:	4b7f      	ldr	r3, [pc, #508]	; (801f858 <_dtoa_r+0x920>)
 801f65c:	2200      	movs	r2, #0
 801f65e:	f7e0 fff3 	bl	8000648 <__aeabi_dmul>
 801f662:	2200      	movs	r2, #0
 801f664:	2300      	movs	r3, #0
 801f666:	4606      	mov	r6, r0
 801f668:	460f      	mov	r7, r1
 801f66a:	f7e1 fa55 	bl	8000b18 <__aeabi_dcmpeq>
 801f66e:	2800      	cmp	r0, #0
 801f670:	d09b      	beq.n	801f5aa <_dtoa_r+0x672>
 801f672:	e7cd      	b.n	801f610 <_dtoa_r+0x6d8>
 801f674:	9a08      	ldr	r2, [sp, #32]
 801f676:	2a00      	cmp	r2, #0
 801f678:	f000 80c4 	beq.w	801f804 <_dtoa_r+0x8cc>
 801f67c:	9a05      	ldr	r2, [sp, #20]
 801f67e:	2a01      	cmp	r2, #1
 801f680:	f300 80a8 	bgt.w	801f7d4 <_dtoa_r+0x89c>
 801f684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f686:	2a00      	cmp	r2, #0
 801f688:	f000 80a0 	beq.w	801f7cc <_dtoa_r+0x894>
 801f68c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f690:	9e06      	ldr	r6, [sp, #24]
 801f692:	4645      	mov	r5, r8
 801f694:	9a04      	ldr	r2, [sp, #16]
 801f696:	2101      	movs	r1, #1
 801f698:	441a      	add	r2, r3
 801f69a:	4620      	mov	r0, r4
 801f69c:	4498      	add	r8, r3
 801f69e:	9204      	str	r2, [sp, #16]
 801f6a0:	f000 ff42 	bl	8020528 <__i2b>
 801f6a4:	4607      	mov	r7, r0
 801f6a6:	2d00      	cmp	r5, #0
 801f6a8:	dd0b      	ble.n	801f6c2 <_dtoa_r+0x78a>
 801f6aa:	9b04      	ldr	r3, [sp, #16]
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	dd08      	ble.n	801f6c2 <_dtoa_r+0x78a>
 801f6b0:	42ab      	cmp	r3, r5
 801f6b2:	9a04      	ldr	r2, [sp, #16]
 801f6b4:	bfa8      	it	ge
 801f6b6:	462b      	movge	r3, r5
 801f6b8:	eba8 0803 	sub.w	r8, r8, r3
 801f6bc:	1aed      	subs	r5, r5, r3
 801f6be:	1ad3      	subs	r3, r2, r3
 801f6c0:	9304      	str	r3, [sp, #16]
 801f6c2:	9b06      	ldr	r3, [sp, #24]
 801f6c4:	b1fb      	cbz	r3, 801f706 <_dtoa_r+0x7ce>
 801f6c6:	9b08      	ldr	r3, [sp, #32]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	f000 809f 	beq.w	801f80c <_dtoa_r+0x8d4>
 801f6ce:	2e00      	cmp	r6, #0
 801f6d0:	dd11      	ble.n	801f6f6 <_dtoa_r+0x7be>
 801f6d2:	4639      	mov	r1, r7
 801f6d4:	4632      	mov	r2, r6
 801f6d6:	4620      	mov	r0, r4
 801f6d8:	f000 ffe2 	bl	80206a0 <__pow5mult>
 801f6dc:	465a      	mov	r2, fp
 801f6de:	4601      	mov	r1, r0
 801f6e0:	4607      	mov	r7, r0
 801f6e2:	4620      	mov	r0, r4
 801f6e4:	f000 ff36 	bl	8020554 <__multiply>
 801f6e8:	4659      	mov	r1, fp
 801f6ea:	9007      	str	r0, [sp, #28]
 801f6ec:	4620      	mov	r0, r4
 801f6ee:	f000 fe15 	bl	802031c <_Bfree>
 801f6f2:	9b07      	ldr	r3, [sp, #28]
 801f6f4:	469b      	mov	fp, r3
 801f6f6:	9b06      	ldr	r3, [sp, #24]
 801f6f8:	1b9a      	subs	r2, r3, r6
 801f6fa:	d004      	beq.n	801f706 <_dtoa_r+0x7ce>
 801f6fc:	4659      	mov	r1, fp
 801f6fe:	4620      	mov	r0, r4
 801f700:	f000 ffce 	bl	80206a0 <__pow5mult>
 801f704:	4683      	mov	fp, r0
 801f706:	2101      	movs	r1, #1
 801f708:	4620      	mov	r0, r4
 801f70a:	f000 ff0d 	bl	8020528 <__i2b>
 801f70e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f710:	2b00      	cmp	r3, #0
 801f712:	4606      	mov	r6, r0
 801f714:	dd7c      	ble.n	801f810 <_dtoa_r+0x8d8>
 801f716:	461a      	mov	r2, r3
 801f718:	4601      	mov	r1, r0
 801f71a:	4620      	mov	r0, r4
 801f71c:	f000 ffc0 	bl	80206a0 <__pow5mult>
 801f720:	9b05      	ldr	r3, [sp, #20]
 801f722:	2b01      	cmp	r3, #1
 801f724:	4606      	mov	r6, r0
 801f726:	dd76      	ble.n	801f816 <_dtoa_r+0x8de>
 801f728:	2300      	movs	r3, #0
 801f72a:	9306      	str	r3, [sp, #24]
 801f72c:	6933      	ldr	r3, [r6, #16]
 801f72e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f732:	6918      	ldr	r0, [r3, #16]
 801f734:	f000 fea8 	bl	8020488 <__hi0bits>
 801f738:	f1c0 0020 	rsb	r0, r0, #32
 801f73c:	9b04      	ldr	r3, [sp, #16]
 801f73e:	4418      	add	r0, r3
 801f740:	f010 001f 	ands.w	r0, r0, #31
 801f744:	f000 8086 	beq.w	801f854 <_dtoa_r+0x91c>
 801f748:	f1c0 0320 	rsb	r3, r0, #32
 801f74c:	2b04      	cmp	r3, #4
 801f74e:	dd7f      	ble.n	801f850 <_dtoa_r+0x918>
 801f750:	f1c0 001c 	rsb	r0, r0, #28
 801f754:	9b04      	ldr	r3, [sp, #16]
 801f756:	4403      	add	r3, r0
 801f758:	4480      	add	r8, r0
 801f75a:	4405      	add	r5, r0
 801f75c:	9304      	str	r3, [sp, #16]
 801f75e:	f1b8 0f00 	cmp.w	r8, #0
 801f762:	dd05      	ble.n	801f770 <_dtoa_r+0x838>
 801f764:	4659      	mov	r1, fp
 801f766:	4642      	mov	r2, r8
 801f768:	4620      	mov	r0, r4
 801f76a:	f000 fff3 	bl	8020754 <__lshift>
 801f76e:	4683      	mov	fp, r0
 801f770:	9b04      	ldr	r3, [sp, #16]
 801f772:	2b00      	cmp	r3, #0
 801f774:	dd05      	ble.n	801f782 <_dtoa_r+0x84a>
 801f776:	4631      	mov	r1, r6
 801f778:	461a      	mov	r2, r3
 801f77a:	4620      	mov	r0, r4
 801f77c:	f000 ffea 	bl	8020754 <__lshift>
 801f780:	4606      	mov	r6, r0
 801f782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f784:	2b00      	cmp	r3, #0
 801f786:	d069      	beq.n	801f85c <_dtoa_r+0x924>
 801f788:	4631      	mov	r1, r6
 801f78a:	4658      	mov	r0, fp
 801f78c:	f001 f84e 	bl	802082c <__mcmp>
 801f790:	2800      	cmp	r0, #0
 801f792:	da63      	bge.n	801f85c <_dtoa_r+0x924>
 801f794:	2300      	movs	r3, #0
 801f796:	4659      	mov	r1, fp
 801f798:	220a      	movs	r2, #10
 801f79a:	4620      	mov	r0, r4
 801f79c:	f000 fde0 	bl	8020360 <__multadd>
 801f7a0:	9b08      	ldr	r3, [sp, #32]
 801f7a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f7a6:	4683      	mov	fp, r0
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	f000 818f 	beq.w	801facc <_dtoa_r+0xb94>
 801f7ae:	4639      	mov	r1, r7
 801f7b0:	2300      	movs	r3, #0
 801f7b2:	220a      	movs	r2, #10
 801f7b4:	4620      	mov	r0, r4
 801f7b6:	f000 fdd3 	bl	8020360 <__multadd>
 801f7ba:	f1b9 0f00 	cmp.w	r9, #0
 801f7be:	4607      	mov	r7, r0
 801f7c0:	f300 808e 	bgt.w	801f8e0 <_dtoa_r+0x9a8>
 801f7c4:	9b05      	ldr	r3, [sp, #20]
 801f7c6:	2b02      	cmp	r3, #2
 801f7c8:	dc50      	bgt.n	801f86c <_dtoa_r+0x934>
 801f7ca:	e089      	b.n	801f8e0 <_dtoa_r+0x9a8>
 801f7cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f7ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f7d2:	e75d      	b.n	801f690 <_dtoa_r+0x758>
 801f7d4:	9b01      	ldr	r3, [sp, #4]
 801f7d6:	1e5e      	subs	r6, r3, #1
 801f7d8:	9b06      	ldr	r3, [sp, #24]
 801f7da:	42b3      	cmp	r3, r6
 801f7dc:	bfbf      	itttt	lt
 801f7de:	9b06      	ldrlt	r3, [sp, #24]
 801f7e0:	9606      	strlt	r6, [sp, #24]
 801f7e2:	1af2      	sublt	r2, r6, r3
 801f7e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f7e6:	bfb6      	itet	lt
 801f7e8:	189b      	addlt	r3, r3, r2
 801f7ea:	1b9e      	subge	r6, r3, r6
 801f7ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f7ee:	9b01      	ldr	r3, [sp, #4]
 801f7f0:	bfb8      	it	lt
 801f7f2:	2600      	movlt	r6, #0
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	bfb5      	itete	lt
 801f7f8:	eba8 0503 	sublt.w	r5, r8, r3
 801f7fc:	9b01      	ldrge	r3, [sp, #4]
 801f7fe:	2300      	movlt	r3, #0
 801f800:	4645      	movge	r5, r8
 801f802:	e747      	b.n	801f694 <_dtoa_r+0x75c>
 801f804:	9e06      	ldr	r6, [sp, #24]
 801f806:	9f08      	ldr	r7, [sp, #32]
 801f808:	4645      	mov	r5, r8
 801f80a:	e74c      	b.n	801f6a6 <_dtoa_r+0x76e>
 801f80c:	9a06      	ldr	r2, [sp, #24]
 801f80e:	e775      	b.n	801f6fc <_dtoa_r+0x7c4>
 801f810:	9b05      	ldr	r3, [sp, #20]
 801f812:	2b01      	cmp	r3, #1
 801f814:	dc18      	bgt.n	801f848 <_dtoa_r+0x910>
 801f816:	9b02      	ldr	r3, [sp, #8]
 801f818:	b9b3      	cbnz	r3, 801f848 <_dtoa_r+0x910>
 801f81a:	9b03      	ldr	r3, [sp, #12]
 801f81c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f820:	b9a3      	cbnz	r3, 801f84c <_dtoa_r+0x914>
 801f822:	9b03      	ldr	r3, [sp, #12]
 801f824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f828:	0d1b      	lsrs	r3, r3, #20
 801f82a:	051b      	lsls	r3, r3, #20
 801f82c:	b12b      	cbz	r3, 801f83a <_dtoa_r+0x902>
 801f82e:	9b04      	ldr	r3, [sp, #16]
 801f830:	3301      	adds	r3, #1
 801f832:	9304      	str	r3, [sp, #16]
 801f834:	f108 0801 	add.w	r8, r8, #1
 801f838:	2301      	movs	r3, #1
 801f83a:	9306      	str	r3, [sp, #24]
 801f83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f83e:	2b00      	cmp	r3, #0
 801f840:	f47f af74 	bne.w	801f72c <_dtoa_r+0x7f4>
 801f844:	2001      	movs	r0, #1
 801f846:	e779      	b.n	801f73c <_dtoa_r+0x804>
 801f848:	2300      	movs	r3, #0
 801f84a:	e7f6      	b.n	801f83a <_dtoa_r+0x902>
 801f84c:	9b02      	ldr	r3, [sp, #8]
 801f84e:	e7f4      	b.n	801f83a <_dtoa_r+0x902>
 801f850:	d085      	beq.n	801f75e <_dtoa_r+0x826>
 801f852:	4618      	mov	r0, r3
 801f854:	301c      	adds	r0, #28
 801f856:	e77d      	b.n	801f754 <_dtoa_r+0x81c>
 801f858:	40240000 	.word	0x40240000
 801f85c:	9b01      	ldr	r3, [sp, #4]
 801f85e:	2b00      	cmp	r3, #0
 801f860:	dc38      	bgt.n	801f8d4 <_dtoa_r+0x99c>
 801f862:	9b05      	ldr	r3, [sp, #20]
 801f864:	2b02      	cmp	r3, #2
 801f866:	dd35      	ble.n	801f8d4 <_dtoa_r+0x99c>
 801f868:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f86c:	f1b9 0f00 	cmp.w	r9, #0
 801f870:	d10d      	bne.n	801f88e <_dtoa_r+0x956>
 801f872:	4631      	mov	r1, r6
 801f874:	464b      	mov	r3, r9
 801f876:	2205      	movs	r2, #5
 801f878:	4620      	mov	r0, r4
 801f87a:	f000 fd71 	bl	8020360 <__multadd>
 801f87e:	4601      	mov	r1, r0
 801f880:	4606      	mov	r6, r0
 801f882:	4658      	mov	r0, fp
 801f884:	f000 ffd2 	bl	802082c <__mcmp>
 801f888:	2800      	cmp	r0, #0
 801f88a:	f73f adbd 	bgt.w	801f408 <_dtoa_r+0x4d0>
 801f88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f890:	9d00      	ldr	r5, [sp, #0]
 801f892:	ea6f 0a03 	mvn.w	sl, r3
 801f896:	f04f 0800 	mov.w	r8, #0
 801f89a:	4631      	mov	r1, r6
 801f89c:	4620      	mov	r0, r4
 801f89e:	f000 fd3d 	bl	802031c <_Bfree>
 801f8a2:	2f00      	cmp	r7, #0
 801f8a4:	f43f aeb4 	beq.w	801f610 <_dtoa_r+0x6d8>
 801f8a8:	f1b8 0f00 	cmp.w	r8, #0
 801f8ac:	d005      	beq.n	801f8ba <_dtoa_r+0x982>
 801f8ae:	45b8      	cmp	r8, r7
 801f8b0:	d003      	beq.n	801f8ba <_dtoa_r+0x982>
 801f8b2:	4641      	mov	r1, r8
 801f8b4:	4620      	mov	r0, r4
 801f8b6:	f000 fd31 	bl	802031c <_Bfree>
 801f8ba:	4639      	mov	r1, r7
 801f8bc:	4620      	mov	r0, r4
 801f8be:	f000 fd2d 	bl	802031c <_Bfree>
 801f8c2:	e6a5      	b.n	801f610 <_dtoa_r+0x6d8>
 801f8c4:	2600      	movs	r6, #0
 801f8c6:	4637      	mov	r7, r6
 801f8c8:	e7e1      	b.n	801f88e <_dtoa_r+0x956>
 801f8ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f8cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f8d0:	4637      	mov	r7, r6
 801f8d2:	e599      	b.n	801f408 <_dtoa_r+0x4d0>
 801f8d4:	9b08      	ldr	r3, [sp, #32]
 801f8d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	f000 80fd 	beq.w	801fada <_dtoa_r+0xba2>
 801f8e0:	2d00      	cmp	r5, #0
 801f8e2:	dd05      	ble.n	801f8f0 <_dtoa_r+0x9b8>
 801f8e4:	4639      	mov	r1, r7
 801f8e6:	462a      	mov	r2, r5
 801f8e8:	4620      	mov	r0, r4
 801f8ea:	f000 ff33 	bl	8020754 <__lshift>
 801f8ee:	4607      	mov	r7, r0
 801f8f0:	9b06      	ldr	r3, [sp, #24]
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d05c      	beq.n	801f9b0 <_dtoa_r+0xa78>
 801f8f6:	6879      	ldr	r1, [r7, #4]
 801f8f8:	4620      	mov	r0, r4
 801f8fa:	f000 fccf 	bl	802029c <_Balloc>
 801f8fe:	4605      	mov	r5, r0
 801f900:	b928      	cbnz	r0, 801f90e <_dtoa_r+0x9d6>
 801f902:	4b80      	ldr	r3, [pc, #512]	; (801fb04 <_dtoa_r+0xbcc>)
 801f904:	4602      	mov	r2, r0
 801f906:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f90a:	f7ff bb2e 	b.w	801ef6a <_dtoa_r+0x32>
 801f90e:	693a      	ldr	r2, [r7, #16]
 801f910:	3202      	adds	r2, #2
 801f912:	0092      	lsls	r2, r2, #2
 801f914:	f107 010c 	add.w	r1, r7, #12
 801f918:	300c      	adds	r0, #12
 801f91a:	f7fd fc93 	bl	801d244 <memcpy>
 801f91e:	2201      	movs	r2, #1
 801f920:	4629      	mov	r1, r5
 801f922:	4620      	mov	r0, r4
 801f924:	f000 ff16 	bl	8020754 <__lshift>
 801f928:	9b00      	ldr	r3, [sp, #0]
 801f92a:	3301      	adds	r3, #1
 801f92c:	9301      	str	r3, [sp, #4]
 801f92e:	9b00      	ldr	r3, [sp, #0]
 801f930:	444b      	add	r3, r9
 801f932:	9307      	str	r3, [sp, #28]
 801f934:	9b02      	ldr	r3, [sp, #8]
 801f936:	f003 0301 	and.w	r3, r3, #1
 801f93a:	46b8      	mov	r8, r7
 801f93c:	9306      	str	r3, [sp, #24]
 801f93e:	4607      	mov	r7, r0
 801f940:	9b01      	ldr	r3, [sp, #4]
 801f942:	4631      	mov	r1, r6
 801f944:	3b01      	subs	r3, #1
 801f946:	4658      	mov	r0, fp
 801f948:	9302      	str	r3, [sp, #8]
 801f94a:	f7ff fa69 	bl	801ee20 <quorem>
 801f94e:	4603      	mov	r3, r0
 801f950:	3330      	adds	r3, #48	; 0x30
 801f952:	9004      	str	r0, [sp, #16]
 801f954:	4641      	mov	r1, r8
 801f956:	4658      	mov	r0, fp
 801f958:	9308      	str	r3, [sp, #32]
 801f95a:	f000 ff67 	bl	802082c <__mcmp>
 801f95e:	463a      	mov	r2, r7
 801f960:	4681      	mov	r9, r0
 801f962:	4631      	mov	r1, r6
 801f964:	4620      	mov	r0, r4
 801f966:	f000 ff7d 	bl	8020864 <__mdiff>
 801f96a:	68c2      	ldr	r2, [r0, #12]
 801f96c:	9b08      	ldr	r3, [sp, #32]
 801f96e:	4605      	mov	r5, r0
 801f970:	bb02      	cbnz	r2, 801f9b4 <_dtoa_r+0xa7c>
 801f972:	4601      	mov	r1, r0
 801f974:	4658      	mov	r0, fp
 801f976:	f000 ff59 	bl	802082c <__mcmp>
 801f97a:	9b08      	ldr	r3, [sp, #32]
 801f97c:	4602      	mov	r2, r0
 801f97e:	4629      	mov	r1, r5
 801f980:	4620      	mov	r0, r4
 801f982:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f986:	f000 fcc9 	bl	802031c <_Bfree>
 801f98a:	9b05      	ldr	r3, [sp, #20]
 801f98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f98e:	9d01      	ldr	r5, [sp, #4]
 801f990:	ea43 0102 	orr.w	r1, r3, r2
 801f994:	9b06      	ldr	r3, [sp, #24]
 801f996:	430b      	orrs	r3, r1
 801f998:	9b08      	ldr	r3, [sp, #32]
 801f99a:	d10d      	bne.n	801f9b8 <_dtoa_r+0xa80>
 801f99c:	2b39      	cmp	r3, #57	; 0x39
 801f99e:	d029      	beq.n	801f9f4 <_dtoa_r+0xabc>
 801f9a0:	f1b9 0f00 	cmp.w	r9, #0
 801f9a4:	dd01      	ble.n	801f9aa <_dtoa_r+0xa72>
 801f9a6:	9b04      	ldr	r3, [sp, #16]
 801f9a8:	3331      	adds	r3, #49	; 0x31
 801f9aa:	9a02      	ldr	r2, [sp, #8]
 801f9ac:	7013      	strb	r3, [r2, #0]
 801f9ae:	e774      	b.n	801f89a <_dtoa_r+0x962>
 801f9b0:	4638      	mov	r0, r7
 801f9b2:	e7b9      	b.n	801f928 <_dtoa_r+0x9f0>
 801f9b4:	2201      	movs	r2, #1
 801f9b6:	e7e2      	b.n	801f97e <_dtoa_r+0xa46>
 801f9b8:	f1b9 0f00 	cmp.w	r9, #0
 801f9bc:	db06      	blt.n	801f9cc <_dtoa_r+0xa94>
 801f9be:	9905      	ldr	r1, [sp, #20]
 801f9c0:	ea41 0909 	orr.w	r9, r1, r9
 801f9c4:	9906      	ldr	r1, [sp, #24]
 801f9c6:	ea59 0101 	orrs.w	r1, r9, r1
 801f9ca:	d120      	bne.n	801fa0e <_dtoa_r+0xad6>
 801f9cc:	2a00      	cmp	r2, #0
 801f9ce:	ddec      	ble.n	801f9aa <_dtoa_r+0xa72>
 801f9d0:	4659      	mov	r1, fp
 801f9d2:	2201      	movs	r2, #1
 801f9d4:	4620      	mov	r0, r4
 801f9d6:	9301      	str	r3, [sp, #4]
 801f9d8:	f000 febc 	bl	8020754 <__lshift>
 801f9dc:	4631      	mov	r1, r6
 801f9de:	4683      	mov	fp, r0
 801f9e0:	f000 ff24 	bl	802082c <__mcmp>
 801f9e4:	2800      	cmp	r0, #0
 801f9e6:	9b01      	ldr	r3, [sp, #4]
 801f9e8:	dc02      	bgt.n	801f9f0 <_dtoa_r+0xab8>
 801f9ea:	d1de      	bne.n	801f9aa <_dtoa_r+0xa72>
 801f9ec:	07da      	lsls	r2, r3, #31
 801f9ee:	d5dc      	bpl.n	801f9aa <_dtoa_r+0xa72>
 801f9f0:	2b39      	cmp	r3, #57	; 0x39
 801f9f2:	d1d8      	bne.n	801f9a6 <_dtoa_r+0xa6e>
 801f9f4:	9a02      	ldr	r2, [sp, #8]
 801f9f6:	2339      	movs	r3, #57	; 0x39
 801f9f8:	7013      	strb	r3, [r2, #0]
 801f9fa:	462b      	mov	r3, r5
 801f9fc:	461d      	mov	r5, r3
 801f9fe:	3b01      	subs	r3, #1
 801fa00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801fa04:	2a39      	cmp	r2, #57	; 0x39
 801fa06:	d050      	beq.n	801faaa <_dtoa_r+0xb72>
 801fa08:	3201      	adds	r2, #1
 801fa0a:	701a      	strb	r2, [r3, #0]
 801fa0c:	e745      	b.n	801f89a <_dtoa_r+0x962>
 801fa0e:	2a00      	cmp	r2, #0
 801fa10:	dd03      	ble.n	801fa1a <_dtoa_r+0xae2>
 801fa12:	2b39      	cmp	r3, #57	; 0x39
 801fa14:	d0ee      	beq.n	801f9f4 <_dtoa_r+0xabc>
 801fa16:	3301      	adds	r3, #1
 801fa18:	e7c7      	b.n	801f9aa <_dtoa_r+0xa72>
 801fa1a:	9a01      	ldr	r2, [sp, #4]
 801fa1c:	9907      	ldr	r1, [sp, #28]
 801fa1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fa22:	428a      	cmp	r2, r1
 801fa24:	d02a      	beq.n	801fa7c <_dtoa_r+0xb44>
 801fa26:	4659      	mov	r1, fp
 801fa28:	2300      	movs	r3, #0
 801fa2a:	220a      	movs	r2, #10
 801fa2c:	4620      	mov	r0, r4
 801fa2e:	f000 fc97 	bl	8020360 <__multadd>
 801fa32:	45b8      	cmp	r8, r7
 801fa34:	4683      	mov	fp, r0
 801fa36:	f04f 0300 	mov.w	r3, #0
 801fa3a:	f04f 020a 	mov.w	r2, #10
 801fa3e:	4641      	mov	r1, r8
 801fa40:	4620      	mov	r0, r4
 801fa42:	d107      	bne.n	801fa54 <_dtoa_r+0xb1c>
 801fa44:	f000 fc8c 	bl	8020360 <__multadd>
 801fa48:	4680      	mov	r8, r0
 801fa4a:	4607      	mov	r7, r0
 801fa4c:	9b01      	ldr	r3, [sp, #4]
 801fa4e:	3301      	adds	r3, #1
 801fa50:	9301      	str	r3, [sp, #4]
 801fa52:	e775      	b.n	801f940 <_dtoa_r+0xa08>
 801fa54:	f000 fc84 	bl	8020360 <__multadd>
 801fa58:	4639      	mov	r1, r7
 801fa5a:	4680      	mov	r8, r0
 801fa5c:	2300      	movs	r3, #0
 801fa5e:	220a      	movs	r2, #10
 801fa60:	4620      	mov	r0, r4
 801fa62:	f000 fc7d 	bl	8020360 <__multadd>
 801fa66:	4607      	mov	r7, r0
 801fa68:	e7f0      	b.n	801fa4c <_dtoa_r+0xb14>
 801fa6a:	f1b9 0f00 	cmp.w	r9, #0
 801fa6e:	9a00      	ldr	r2, [sp, #0]
 801fa70:	bfcc      	ite	gt
 801fa72:	464d      	movgt	r5, r9
 801fa74:	2501      	movle	r5, #1
 801fa76:	4415      	add	r5, r2
 801fa78:	f04f 0800 	mov.w	r8, #0
 801fa7c:	4659      	mov	r1, fp
 801fa7e:	2201      	movs	r2, #1
 801fa80:	4620      	mov	r0, r4
 801fa82:	9301      	str	r3, [sp, #4]
 801fa84:	f000 fe66 	bl	8020754 <__lshift>
 801fa88:	4631      	mov	r1, r6
 801fa8a:	4683      	mov	fp, r0
 801fa8c:	f000 fece 	bl	802082c <__mcmp>
 801fa90:	2800      	cmp	r0, #0
 801fa92:	dcb2      	bgt.n	801f9fa <_dtoa_r+0xac2>
 801fa94:	d102      	bne.n	801fa9c <_dtoa_r+0xb64>
 801fa96:	9b01      	ldr	r3, [sp, #4]
 801fa98:	07db      	lsls	r3, r3, #31
 801fa9a:	d4ae      	bmi.n	801f9fa <_dtoa_r+0xac2>
 801fa9c:	462b      	mov	r3, r5
 801fa9e:	461d      	mov	r5, r3
 801faa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801faa4:	2a30      	cmp	r2, #48	; 0x30
 801faa6:	d0fa      	beq.n	801fa9e <_dtoa_r+0xb66>
 801faa8:	e6f7      	b.n	801f89a <_dtoa_r+0x962>
 801faaa:	9a00      	ldr	r2, [sp, #0]
 801faac:	429a      	cmp	r2, r3
 801faae:	d1a5      	bne.n	801f9fc <_dtoa_r+0xac4>
 801fab0:	f10a 0a01 	add.w	sl, sl, #1
 801fab4:	2331      	movs	r3, #49	; 0x31
 801fab6:	e779      	b.n	801f9ac <_dtoa_r+0xa74>
 801fab8:	4b13      	ldr	r3, [pc, #76]	; (801fb08 <_dtoa_r+0xbd0>)
 801faba:	f7ff baaf 	b.w	801f01c <_dtoa_r+0xe4>
 801fabe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fac0:	2b00      	cmp	r3, #0
 801fac2:	f47f aa86 	bne.w	801efd2 <_dtoa_r+0x9a>
 801fac6:	4b11      	ldr	r3, [pc, #68]	; (801fb0c <_dtoa_r+0xbd4>)
 801fac8:	f7ff baa8 	b.w	801f01c <_dtoa_r+0xe4>
 801facc:	f1b9 0f00 	cmp.w	r9, #0
 801fad0:	dc03      	bgt.n	801fada <_dtoa_r+0xba2>
 801fad2:	9b05      	ldr	r3, [sp, #20]
 801fad4:	2b02      	cmp	r3, #2
 801fad6:	f73f aec9 	bgt.w	801f86c <_dtoa_r+0x934>
 801fada:	9d00      	ldr	r5, [sp, #0]
 801fadc:	4631      	mov	r1, r6
 801fade:	4658      	mov	r0, fp
 801fae0:	f7ff f99e 	bl	801ee20 <quorem>
 801fae4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801fae8:	f805 3b01 	strb.w	r3, [r5], #1
 801faec:	9a00      	ldr	r2, [sp, #0]
 801faee:	1aaa      	subs	r2, r5, r2
 801faf0:	4591      	cmp	r9, r2
 801faf2:	ddba      	ble.n	801fa6a <_dtoa_r+0xb32>
 801faf4:	4659      	mov	r1, fp
 801faf6:	2300      	movs	r3, #0
 801faf8:	220a      	movs	r2, #10
 801fafa:	4620      	mov	r0, r4
 801fafc:	f000 fc30 	bl	8020360 <__multadd>
 801fb00:	4683      	mov	fp, r0
 801fb02:	e7eb      	b.n	801fadc <_dtoa_r+0xba4>
 801fb04:	08022188 	.word	0x08022188
 801fb08:	0802206c 	.word	0x0802206c
 801fb0c:	08022105 	.word	0x08022105

0801fb10 <_fstat_r>:
 801fb10:	b538      	push	{r3, r4, r5, lr}
 801fb12:	4d07      	ldr	r5, [pc, #28]	; (801fb30 <_fstat_r+0x20>)
 801fb14:	2300      	movs	r3, #0
 801fb16:	4604      	mov	r4, r0
 801fb18:	4608      	mov	r0, r1
 801fb1a:	4611      	mov	r1, r2
 801fb1c:	602b      	str	r3, [r5, #0]
 801fb1e:	f7fd f8db 	bl	801ccd8 <_fstat>
 801fb22:	1c43      	adds	r3, r0, #1
 801fb24:	d102      	bne.n	801fb2c <_fstat_r+0x1c>
 801fb26:	682b      	ldr	r3, [r5, #0]
 801fb28:	b103      	cbz	r3, 801fb2c <_fstat_r+0x1c>
 801fb2a:	6023      	str	r3, [r4, #0]
 801fb2c:	bd38      	pop	{r3, r4, r5, pc}
 801fb2e:	bf00      	nop
 801fb30:	20019220 	.word	0x20019220

0801fb34 <rshift>:
 801fb34:	6903      	ldr	r3, [r0, #16]
 801fb36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801fb3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fb3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801fb42:	f100 0414 	add.w	r4, r0, #20
 801fb46:	dd45      	ble.n	801fbd4 <rshift+0xa0>
 801fb48:	f011 011f 	ands.w	r1, r1, #31
 801fb4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801fb50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801fb54:	d10c      	bne.n	801fb70 <rshift+0x3c>
 801fb56:	f100 0710 	add.w	r7, r0, #16
 801fb5a:	4629      	mov	r1, r5
 801fb5c:	42b1      	cmp	r1, r6
 801fb5e:	d334      	bcc.n	801fbca <rshift+0x96>
 801fb60:	1a9b      	subs	r3, r3, r2
 801fb62:	009b      	lsls	r3, r3, #2
 801fb64:	1eea      	subs	r2, r5, #3
 801fb66:	4296      	cmp	r6, r2
 801fb68:	bf38      	it	cc
 801fb6a:	2300      	movcc	r3, #0
 801fb6c:	4423      	add	r3, r4
 801fb6e:	e015      	b.n	801fb9c <rshift+0x68>
 801fb70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801fb74:	f1c1 0820 	rsb	r8, r1, #32
 801fb78:	40cf      	lsrs	r7, r1
 801fb7a:	f105 0e04 	add.w	lr, r5, #4
 801fb7e:	46a1      	mov	r9, r4
 801fb80:	4576      	cmp	r6, lr
 801fb82:	46f4      	mov	ip, lr
 801fb84:	d815      	bhi.n	801fbb2 <rshift+0x7e>
 801fb86:	1a9b      	subs	r3, r3, r2
 801fb88:	009a      	lsls	r2, r3, #2
 801fb8a:	3a04      	subs	r2, #4
 801fb8c:	3501      	adds	r5, #1
 801fb8e:	42ae      	cmp	r6, r5
 801fb90:	bf38      	it	cc
 801fb92:	2200      	movcc	r2, #0
 801fb94:	18a3      	adds	r3, r4, r2
 801fb96:	50a7      	str	r7, [r4, r2]
 801fb98:	b107      	cbz	r7, 801fb9c <rshift+0x68>
 801fb9a:	3304      	adds	r3, #4
 801fb9c:	1b1a      	subs	r2, r3, r4
 801fb9e:	42a3      	cmp	r3, r4
 801fba0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801fba4:	bf08      	it	eq
 801fba6:	2300      	moveq	r3, #0
 801fba8:	6102      	str	r2, [r0, #16]
 801fbaa:	bf08      	it	eq
 801fbac:	6143      	streq	r3, [r0, #20]
 801fbae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fbb2:	f8dc c000 	ldr.w	ip, [ip]
 801fbb6:	fa0c fc08 	lsl.w	ip, ip, r8
 801fbba:	ea4c 0707 	orr.w	r7, ip, r7
 801fbbe:	f849 7b04 	str.w	r7, [r9], #4
 801fbc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801fbc6:	40cf      	lsrs	r7, r1
 801fbc8:	e7da      	b.n	801fb80 <rshift+0x4c>
 801fbca:	f851 cb04 	ldr.w	ip, [r1], #4
 801fbce:	f847 cf04 	str.w	ip, [r7, #4]!
 801fbd2:	e7c3      	b.n	801fb5c <rshift+0x28>
 801fbd4:	4623      	mov	r3, r4
 801fbd6:	e7e1      	b.n	801fb9c <rshift+0x68>

0801fbd8 <__hexdig_fun>:
 801fbd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801fbdc:	2b09      	cmp	r3, #9
 801fbde:	d802      	bhi.n	801fbe6 <__hexdig_fun+0xe>
 801fbe0:	3820      	subs	r0, #32
 801fbe2:	b2c0      	uxtb	r0, r0
 801fbe4:	4770      	bx	lr
 801fbe6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801fbea:	2b05      	cmp	r3, #5
 801fbec:	d801      	bhi.n	801fbf2 <__hexdig_fun+0x1a>
 801fbee:	3847      	subs	r0, #71	; 0x47
 801fbf0:	e7f7      	b.n	801fbe2 <__hexdig_fun+0xa>
 801fbf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801fbf6:	2b05      	cmp	r3, #5
 801fbf8:	d801      	bhi.n	801fbfe <__hexdig_fun+0x26>
 801fbfa:	3827      	subs	r0, #39	; 0x27
 801fbfc:	e7f1      	b.n	801fbe2 <__hexdig_fun+0xa>
 801fbfe:	2000      	movs	r0, #0
 801fc00:	4770      	bx	lr
	...

0801fc04 <__gethex>:
 801fc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc08:	ed2d 8b02 	vpush	{d8}
 801fc0c:	b089      	sub	sp, #36	; 0x24
 801fc0e:	ee08 0a10 	vmov	s16, r0
 801fc12:	9304      	str	r3, [sp, #16]
 801fc14:	4bbc      	ldr	r3, [pc, #752]	; (801ff08 <__gethex+0x304>)
 801fc16:	681b      	ldr	r3, [r3, #0]
 801fc18:	9301      	str	r3, [sp, #4]
 801fc1a:	4618      	mov	r0, r3
 801fc1c:	468b      	mov	fp, r1
 801fc1e:	4690      	mov	r8, r2
 801fc20:	f7e0 faf8 	bl	8000214 <strlen>
 801fc24:	9b01      	ldr	r3, [sp, #4]
 801fc26:	f8db 2000 	ldr.w	r2, [fp]
 801fc2a:	4403      	add	r3, r0
 801fc2c:	4682      	mov	sl, r0
 801fc2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801fc32:	9305      	str	r3, [sp, #20]
 801fc34:	1c93      	adds	r3, r2, #2
 801fc36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801fc3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801fc3e:	32fe      	adds	r2, #254	; 0xfe
 801fc40:	18d1      	adds	r1, r2, r3
 801fc42:	461f      	mov	r7, r3
 801fc44:	f813 0b01 	ldrb.w	r0, [r3], #1
 801fc48:	9100      	str	r1, [sp, #0]
 801fc4a:	2830      	cmp	r0, #48	; 0x30
 801fc4c:	d0f8      	beq.n	801fc40 <__gethex+0x3c>
 801fc4e:	f7ff ffc3 	bl	801fbd8 <__hexdig_fun>
 801fc52:	4604      	mov	r4, r0
 801fc54:	2800      	cmp	r0, #0
 801fc56:	d13a      	bne.n	801fcce <__gethex+0xca>
 801fc58:	9901      	ldr	r1, [sp, #4]
 801fc5a:	4652      	mov	r2, sl
 801fc5c:	4638      	mov	r0, r7
 801fc5e:	f7fe f8d4 	bl	801de0a <strncmp>
 801fc62:	4605      	mov	r5, r0
 801fc64:	2800      	cmp	r0, #0
 801fc66:	d168      	bne.n	801fd3a <__gethex+0x136>
 801fc68:	f817 000a 	ldrb.w	r0, [r7, sl]
 801fc6c:	eb07 060a 	add.w	r6, r7, sl
 801fc70:	f7ff ffb2 	bl	801fbd8 <__hexdig_fun>
 801fc74:	2800      	cmp	r0, #0
 801fc76:	d062      	beq.n	801fd3e <__gethex+0x13a>
 801fc78:	4633      	mov	r3, r6
 801fc7a:	7818      	ldrb	r0, [r3, #0]
 801fc7c:	2830      	cmp	r0, #48	; 0x30
 801fc7e:	461f      	mov	r7, r3
 801fc80:	f103 0301 	add.w	r3, r3, #1
 801fc84:	d0f9      	beq.n	801fc7a <__gethex+0x76>
 801fc86:	f7ff ffa7 	bl	801fbd8 <__hexdig_fun>
 801fc8a:	2301      	movs	r3, #1
 801fc8c:	fab0 f480 	clz	r4, r0
 801fc90:	0964      	lsrs	r4, r4, #5
 801fc92:	4635      	mov	r5, r6
 801fc94:	9300      	str	r3, [sp, #0]
 801fc96:	463a      	mov	r2, r7
 801fc98:	4616      	mov	r6, r2
 801fc9a:	3201      	adds	r2, #1
 801fc9c:	7830      	ldrb	r0, [r6, #0]
 801fc9e:	f7ff ff9b 	bl	801fbd8 <__hexdig_fun>
 801fca2:	2800      	cmp	r0, #0
 801fca4:	d1f8      	bne.n	801fc98 <__gethex+0x94>
 801fca6:	9901      	ldr	r1, [sp, #4]
 801fca8:	4652      	mov	r2, sl
 801fcaa:	4630      	mov	r0, r6
 801fcac:	f7fe f8ad 	bl	801de0a <strncmp>
 801fcb0:	b980      	cbnz	r0, 801fcd4 <__gethex+0xd0>
 801fcb2:	b94d      	cbnz	r5, 801fcc8 <__gethex+0xc4>
 801fcb4:	eb06 050a 	add.w	r5, r6, sl
 801fcb8:	462a      	mov	r2, r5
 801fcba:	4616      	mov	r6, r2
 801fcbc:	3201      	adds	r2, #1
 801fcbe:	7830      	ldrb	r0, [r6, #0]
 801fcc0:	f7ff ff8a 	bl	801fbd8 <__hexdig_fun>
 801fcc4:	2800      	cmp	r0, #0
 801fcc6:	d1f8      	bne.n	801fcba <__gethex+0xb6>
 801fcc8:	1bad      	subs	r5, r5, r6
 801fcca:	00ad      	lsls	r5, r5, #2
 801fccc:	e004      	b.n	801fcd8 <__gethex+0xd4>
 801fcce:	2400      	movs	r4, #0
 801fcd0:	4625      	mov	r5, r4
 801fcd2:	e7e0      	b.n	801fc96 <__gethex+0x92>
 801fcd4:	2d00      	cmp	r5, #0
 801fcd6:	d1f7      	bne.n	801fcc8 <__gethex+0xc4>
 801fcd8:	7833      	ldrb	r3, [r6, #0]
 801fcda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fcde:	2b50      	cmp	r3, #80	; 0x50
 801fce0:	d13b      	bne.n	801fd5a <__gethex+0x156>
 801fce2:	7873      	ldrb	r3, [r6, #1]
 801fce4:	2b2b      	cmp	r3, #43	; 0x2b
 801fce6:	d02c      	beq.n	801fd42 <__gethex+0x13e>
 801fce8:	2b2d      	cmp	r3, #45	; 0x2d
 801fcea:	d02e      	beq.n	801fd4a <__gethex+0x146>
 801fcec:	1c71      	adds	r1, r6, #1
 801fcee:	f04f 0900 	mov.w	r9, #0
 801fcf2:	7808      	ldrb	r0, [r1, #0]
 801fcf4:	f7ff ff70 	bl	801fbd8 <__hexdig_fun>
 801fcf8:	1e43      	subs	r3, r0, #1
 801fcfa:	b2db      	uxtb	r3, r3
 801fcfc:	2b18      	cmp	r3, #24
 801fcfe:	d82c      	bhi.n	801fd5a <__gethex+0x156>
 801fd00:	f1a0 0210 	sub.w	r2, r0, #16
 801fd04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801fd08:	f7ff ff66 	bl	801fbd8 <__hexdig_fun>
 801fd0c:	1e43      	subs	r3, r0, #1
 801fd0e:	b2db      	uxtb	r3, r3
 801fd10:	2b18      	cmp	r3, #24
 801fd12:	d91d      	bls.n	801fd50 <__gethex+0x14c>
 801fd14:	f1b9 0f00 	cmp.w	r9, #0
 801fd18:	d000      	beq.n	801fd1c <__gethex+0x118>
 801fd1a:	4252      	negs	r2, r2
 801fd1c:	4415      	add	r5, r2
 801fd1e:	f8cb 1000 	str.w	r1, [fp]
 801fd22:	b1e4      	cbz	r4, 801fd5e <__gethex+0x15a>
 801fd24:	9b00      	ldr	r3, [sp, #0]
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	bf14      	ite	ne
 801fd2a:	2700      	movne	r7, #0
 801fd2c:	2706      	moveq	r7, #6
 801fd2e:	4638      	mov	r0, r7
 801fd30:	b009      	add	sp, #36	; 0x24
 801fd32:	ecbd 8b02 	vpop	{d8}
 801fd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd3a:	463e      	mov	r6, r7
 801fd3c:	4625      	mov	r5, r4
 801fd3e:	2401      	movs	r4, #1
 801fd40:	e7ca      	b.n	801fcd8 <__gethex+0xd4>
 801fd42:	f04f 0900 	mov.w	r9, #0
 801fd46:	1cb1      	adds	r1, r6, #2
 801fd48:	e7d3      	b.n	801fcf2 <__gethex+0xee>
 801fd4a:	f04f 0901 	mov.w	r9, #1
 801fd4e:	e7fa      	b.n	801fd46 <__gethex+0x142>
 801fd50:	230a      	movs	r3, #10
 801fd52:	fb03 0202 	mla	r2, r3, r2, r0
 801fd56:	3a10      	subs	r2, #16
 801fd58:	e7d4      	b.n	801fd04 <__gethex+0x100>
 801fd5a:	4631      	mov	r1, r6
 801fd5c:	e7df      	b.n	801fd1e <__gethex+0x11a>
 801fd5e:	1bf3      	subs	r3, r6, r7
 801fd60:	3b01      	subs	r3, #1
 801fd62:	4621      	mov	r1, r4
 801fd64:	2b07      	cmp	r3, #7
 801fd66:	dc0b      	bgt.n	801fd80 <__gethex+0x17c>
 801fd68:	ee18 0a10 	vmov	r0, s16
 801fd6c:	f000 fa96 	bl	802029c <_Balloc>
 801fd70:	4604      	mov	r4, r0
 801fd72:	b940      	cbnz	r0, 801fd86 <__gethex+0x182>
 801fd74:	4b65      	ldr	r3, [pc, #404]	; (801ff0c <__gethex+0x308>)
 801fd76:	4602      	mov	r2, r0
 801fd78:	21de      	movs	r1, #222	; 0xde
 801fd7a:	4865      	ldr	r0, [pc, #404]	; (801ff10 <__gethex+0x30c>)
 801fd7c:	f001 f8ce 	bl	8020f1c <__assert_func>
 801fd80:	3101      	adds	r1, #1
 801fd82:	105b      	asrs	r3, r3, #1
 801fd84:	e7ee      	b.n	801fd64 <__gethex+0x160>
 801fd86:	f100 0914 	add.w	r9, r0, #20
 801fd8a:	f04f 0b00 	mov.w	fp, #0
 801fd8e:	f1ca 0301 	rsb	r3, sl, #1
 801fd92:	f8cd 9008 	str.w	r9, [sp, #8]
 801fd96:	f8cd b000 	str.w	fp, [sp]
 801fd9a:	9306      	str	r3, [sp, #24]
 801fd9c:	42b7      	cmp	r7, r6
 801fd9e:	d340      	bcc.n	801fe22 <__gethex+0x21e>
 801fda0:	9802      	ldr	r0, [sp, #8]
 801fda2:	9b00      	ldr	r3, [sp, #0]
 801fda4:	f840 3b04 	str.w	r3, [r0], #4
 801fda8:	eba0 0009 	sub.w	r0, r0, r9
 801fdac:	1080      	asrs	r0, r0, #2
 801fdae:	0146      	lsls	r6, r0, #5
 801fdb0:	6120      	str	r0, [r4, #16]
 801fdb2:	4618      	mov	r0, r3
 801fdb4:	f000 fb68 	bl	8020488 <__hi0bits>
 801fdb8:	1a30      	subs	r0, r6, r0
 801fdba:	f8d8 6000 	ldr.w	r6, [r8]
 801fdbe:	42b0      	cmp	r0, r6
 801fdc0:	dd63      	ble.n	801fe8a <__gethex+0x286>
 801fdc2:	1b87      	subs	r7, r0, r6
 801fdc4:	4639      	mov	r1, r7
 801fdc6:	4620      	mov	r0, r4
 801fdc8:	f000 ff02 	bl	8020bd0 <__any_on>
 801fdcc:	4682      	mov	sl, r0
 801fdce:	b1a8      	cbz	r0, 801fdfc <__gethex+0x1f8>
 801fdd0:	1e7b      	subs	r3, r7, #1
 801fdd2:	1159      	asrs	r1, r3, #5
 801fdd4:	f003 021f 	and.w	r2, r3, #31
 801fdd8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801fddc:	f04f 0a01 	mov.w	sl, #1
 801fde0:	fa0a f202 	lsl.w	r2, sl, r2
 801fde4:	420a      	tst	r2, r1
 801fde6:	d009      	beq.n	801fdfc <__gethex+0x1f8>
 801fde8:	4553      	cmp	r3, sl
 801fdea:	dd05      	ble.n	801fdf8 <__gethex+0x1f4>
 801fdec:	1eb9      	subs	r1, r7, #2
 801fdee:	4620      	mov	r0, r4
 801fdf0:	f000 feee 	bl	8020bd0 <__any_on>
 801fdf4:	2800      	cmp	r0, #0
 801fdf6:	d145      	bne.n	801fe84 <__gethex+0x280>
 801fdf8:	f04f 0a02 	mov.w	sl, #2
 801fdfc:	4639      	mov	r1, r7
 801fdfe:	4620      	mov	r0, r4
 801fe00:	f7ff fe98 	bl	801fb34 <rshift>
 801fe04:	443d      	add	r5, r7
 801fe06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fe0a:	42ab      	cmp	r3, r5
 801fe0c:	da4c      	bge.n	801fea8 <__gethex+0x2a4>
 801fe0e:	ee18 0a10 	vmov	r0, s16
 801fe12:	4621      	mov	r1, r4
 801fe14:	f000 fa82 	bl	802031c <_Bfree>
 801fe18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe1a:	2300      	movs	r3, #0
 801fe1c:	6013      	str	r3, [r2, #0]
 801fe1e:	27a3      	movs	r7, #163	; 0xa3
 801fe20:	e785      	b.n	801fd2e <__gethex+0x12a>
 801fe22:	1e73      	subs	r3, r6, #1
 801fe24:	9a05      	ldr	r2, [sp, #20]
 801fe26:	9303      	str	r3, [sp, #12]
 801fe28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fe2c:	4293      	cmp	r3, r2
 801fe2e:	d019      	beq.n	801fe64 <__gethex+0x260>
 801fe30:	f1bb 0f20 	cmp.w	fp, #32
 801fe34:	d107      	bne.n	801fe46 <__gethex+0x242>
 801fe36:	9b02      	ldr	r3, [sp, #8]
 801fe38:	9a00      	ldr	r2, [sp, #0]
 801fe3a:	f843 2b04 	str.w	r2, [r3], #4
 801fe3e:	9302      	str	r3, [sp, #8]
 801fe40:	2300      	movs	r3, #0
 801fe42:	9300      	str	r3, [sp, #0]
 801fe44:	469b      	mov	fp, r3
 801fe46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801fe4a:	f7ff fec5 	bl	801fbd8 <__hexdig_fun>
 801fe4e:	9b00      	ldr	r3, [sp, #0]
 801fe50:	f000 000f 	and.w	r0, r0, #15
 801fe54:	fa00 f00b 	lsl.w	r0, r0, fp
 801fe58:	4303      	orrs	r3, r0
 801fe5a:	9300      	str	r3, [sp, #0]
 801fe5c:	f10b 0b04 	add.w	fp, fp, #4
 801fe60:	9b03      	ldr	r3, [sp, #12]
 801fe62:	e00d      	b.n	801fe80 <__gethex+0x27c>
 801fe64:	9b03      	ldr	r3, [sp, #12]
 801fe66:	9a06      	ldr	r2, [sp, #24]
 801fe68:	4413      	add	r3, r2
 801fe6a:	42bb      	cmp	r3, r7
 801fe6c:	d3e0      	bcc.n	801fe30 <__gethex+0x22c>
 801fe6e:	4618      	mov	r0, r3
 801fe70:	9901      	ldr	r1, [sp, #4]
 801fe72:	9307      	str	r3, [sp, #28]
 801fe74:	4652      	mov	r2, sl
 801fe76:	f7fd ffc8 	bl	801de0a <strncmp>
 801fe7a:	9b07      	ldr	r3, [sp, #28]
 801fe7c:	2800      	cmp	r0, #0
 801fe7e:	d1d7      	bne.n	801fe30 <__gethex+0x22c>
 801fe80:	461e      	mov	r6, r3
 801fe82:	e78b      	b.n	801fd9c <__gethex+0x198>
 801fe84:	f04f 0a03 	mov.w	sl, #3
 801fe88:	e7b8      	b.n	801fdfc <__gethex+0x1f8>
 801fe8a:	da0a      	bge.n	801fea2 <__gethex+0x29e>
 801fe8c:	1a37      	subs	r7, r6, r0
 801fe8e:	4621      	mov	r1, r4
 801fe90:	ee18 0a10 	vmov	r0, s16
 801fe94:	463a      	mov	r2, r7
 801fe96:	f000 fc5d 	bl	8020754 <__lshift>
 801fe9a:	1bed      	subs	r5, r5, r7
 801fe9c:	4604      	mov	r4, r0
 801fe9e:	f100 0914 	add.w	r9, r0, #20
 801fea2:	f04f 0a00 	mov.w	sl, #0
 801fea6:	e7ae      	b.n	801fe06 <__gethex+0x202>
 801fea8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801feac:	42a8      	cmp	r0, r5
 801feae:	dd72      	ble.n	801ff96 <__gethex+0x392>
 801feb0:	1b45      	subs	r5, r0, r5
 801feb2:	42ae      	cmp	r6, r5
 801feb4:	dc36      	bgt.n	801ff24 <__gethex+0x320>
 801feb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801feba:	2b02      	cmp	r3, #2
 801febc:	d02a      	beq.n	801ff14 <__gethex+0x310>
 801febe:	2b03      	cmp	r3, #3
 801fec0:	d02c      	beq.n	801ff1c <__gethex+0x318>
 801fec2:	2b01      	cmp	r3, #1
 801fec4:	d115      	bne.n	801fef2 <__gethex+0x2ee>
 801fec6:	42ae      	cmp	r6, r5
 801fec8:	d113      	bne.n	801fef2 <__gethex+0x2ee>
 801feca:	2e01      	cmp	r6, #1
 801fecc:	d10b      	bne.n	801fee6 <__gethex+0x2e2>
 801fece:	9a04      	ldr	r2, [sp, #16]
 801fed0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fed4:	6013      	str	r3, [r2, #0]
 801fed6:	2301      	movs	r3, #1
 801fed8:	6123      	str	r3, [r4, #16]
 801feda:	f8c9 3000 	str.w	r3, [r9]
 801fede:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fee0:	2762      	movs	r7, #98	; 0x62
 801fee2:	601c      	str	r4, [r3, #0]
 801fee4:	e723      	b.n	801fd2e <__gethex+0x12a>
 801fee6:	1e71      	subs	r1, r6, #1
 801fee8:	4620      	mov	r0, r4
 801feea:	f000 fe71 	bl	8020bd0 <__any_on>
 801feee:	2800      	cmp	r0, #0
 801fef0:	d1ed      	bne.n	801fece <__gethex+0x2ca>
 801fef2:	ee18 0a10 	vmov	r0, s16
 801fef6:	4621      	mov	r1, r4
 801fef8:	f000 fa10 	bl	802031c <_Bfree>
 801fefc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fefe:	2300      	movs	r3, #0
 801ff00:	6013      	str	r3, [r2, #0]
 801ff02:	2750      	movs	r7, #80	; 0x50
 801ff04:	e713      	b.n	801fd2e <__gethex+0x12a>
 801ff06:	bf00      	nop
 801ff08:	08022204 	.word	0x08022204
 801ff0c:	08022188 	.word	0x08022188
 801ff10:	08022199 	.word	0x08022199
 801ff14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	d1eb      	bne.n	801fef2 <__gethex+0x2ee>
 801ff1a:	e7d8      	b.n	801fece <__gethex+0x2ca>
 801ff1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d1d5      	bne.n	801fece <__gethex+0x2ca>
 801ff22:	e7e6      	b.n	801fef2 <__gethex+0x2ee>
 801ff24:	1e6f      	subs	r7, r5, #1
 801ff26:	f1ba 0f00 	cmp.w	sl, #0
 801ff2a:	d131      	bne.n	801ff90 <__gethex+0x38c>
 801ff2c:	b127      	cbz	r7, 801ff38 <__gethex+0x334>
 801ff2e:	4639      	mov	r1, r7
 801ff30:	4620      	mov	r0, r4
 801ff32:	f000 fe4d 	bl	8020bd0 <__any_on>
 801ff36:	4682      	mov	sl, r0
 801ff38:	117b      	asrs	r3, r7, #5
 801ff3a:	2101      	movs	r1, #1
 801ff3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ff40:	f007 071f 	and.w	r7, r7, #31
 801ff44:	fa01 f707 	lsl.w	r7, r1, r7
 801ff48:	421f      	tst	r7, r3
 801ff4a:	4629      	mov	r1, r5
 801ff4c:	4620      	mov	r0, r4
 801ff4e:	bf18      	it	ne
 801ff50:	f04a 0a02 	orrne.w	sl, sl, #2
 801ff54:	1b76      	subs	r6, r6, r5
 801ff56:	f7ff fded 	bl	801fb34 <rshift>
 801ff5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ff5e:	2702      	movs	r7, #2
 801ff60:	f1ba 0f00 	cmp.w	sl, #0
 801ff64:	d048      	beq.n	801fff8 <__gethex+0x3f4>
 801ff66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ff6a:	2b02      	cmp	r3, #2
 801ff6c:	d015      	beq.n	801ff9a <__gethex+0x396>
 801ff6e:	2b03      	cmp	r3, #3
 801ff70:	d017      	beq.n	801ffa2 <__gethex+0x39e>
 801ff72:	2b01      	cmp	r3, #1
 801ff74:	d109      	bne.n	801ff8a <__gethex+0x386>
 801ff76:	f01a 0f02 	tst.w	sl, #2
 801ff7a:	d006      	beq.n	801ff8a <__gethex+0x386>
 801ff7c:	f8d9 0000 	ldr.w	r0, [r9]
 801ff80:	ea4a 0a00 	orr.w	sl, sl, r0
 801ff84:	f01a 0f01 	tst.w	sl, #1
 801ff88:	d10e      	bne.n	801ffa8 <__gethex+0x3a4>
 801ff8a:	f047 0710 	orr.w	r7, r7, #16
 801ff8e:	e033      	b.n	801fff8 <__gethex+0x3f4>
 801ff90:	f04f 0a01 	mov.w	sl, #1
 801ff94:	e7d0      	b.n	801ff38 <__gethex+0x334>
 801ff96:	2701      	movs	r7, #1
 801ff98:	e7e2      	b.n	801ff60 <__gethex+0x35c>
 801ff9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff9c:	f1c3 0301 	rsb	r3, r3, #1
 801ffa0:	9315      	str	r3, [sp, #84]	; 0x54
 801ffa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d0f0      	beq.n	801ff8a <__gethex+0x386>
 801ffa8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ffac:	f104 0314 	add.w	r3, r4, #20
 801ffb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ffb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ffb8:	f04f 0c00 	mov.w	ip, #0
 801ffbc:	4618      	mov	r0, r3
 801ffbe:	f853 2b04 	ldr.w	r2, [r3], #4
 801ffc2:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ffc6:	d01c      	beq.n	8020002 <__gethex+0x3fe>
 801ffc8:	3201      	adds	r2, #1
 801ffca:	6002      	str	r2, [r0, #0]
 801ffcc:	2f02      	cmp	r7, #2
 801ffce:	f104 0314 	add.w	r3, r4, #20
 801ffd2:	d13f      	bne.n	8020054 <__gethex+0x450>
 801ffd4:	f8d8 2000 	ldr.w	r2, [r8]
 801ffd8:	3a01      	subs	r2, #1
 801ffda:	42b2      	cmp	r2, r6
 801ffdc:	d10a      	bne.n	801fff4 <__gethex+0x3f0>
 801ffde:	1171      	asrs	r1, r6, #5
 801ffe0:	2201      	movs	r2, #1
 801ffe2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ffe6:	f006 061f 	and.w	r6, r6, #31
 801ffea:	fa02 f606 	lsl.w	r6, r2, r6
 801ffee:	421e      	tst	r6, r3
 801fff0:	bf18      	it	ne
 801fff2:	4617      	movne	r7, r2
 801fff4:	f047 0720 	orr.w	r7, r7, #32
 801fff8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fffa:	601c      	str	r4, [r3, #0]
 801fffc:	9b04      	ldr	r3, [sp, #16]
 801fffe:	601d      	str	r5, [r3, #0]
 8020000:	e695      	b.n	801fd2e <__gethex+0x12a>
 8020002:	4299      	cmp	r1, r3
 8020004:	f843 cc04 	str.w	ip, [r3, #-4]
 8020008:	d8d8      	bhi.n	801ffbc <__gethex+0x3b8>
 802000a:	68a3      	ldr	r3, [r4, #8]
 802000c:	459b      	cmp	fp, r3
 802000e:	db19      	blt.n	8020044 <__gethex+0x440>
 8020010:	6861      	ldr	r1, [r4, #4]
 8020012:	ee18 0a10 	vmov	r0, s16
 8020016:	3101      	adds	r1, #1
 8020018:	f000 f940 	bl	802029c <_Balloc>
 802001c:	4681      	mov	r9, r0
 802001e:	b918      	cbnz	r0, 8020028 <__gethex+0x424>
 8020020:	4b1a      	ldr	r3, [pc, #104]	; (802008c <__gethex+0x488>)
 8020022:	4602      	mov	r2, r0
 8020024:	2184      	movs	r1, #132	; 0x84
 8020026:	e6a8      	b.n	801fd7a <__gethex+0x176>
 8020028:	6922      	ldr	r2, [r4, #16]
 802002a:	3202      	adds	r2, #2
 802002c:	f104 010c 	add.w	r1, r4, #12
 8020030:	0092      	lsls	r2, r2, #2
 8020032:	300c      	adds	r0, #12
 8020034:	f7fd f906 	bl	801d244 <memcpy>
 8020038:	4621      	mov	r1, r4
 802003a:	ee18 0a10 	vmov	r0, s16
 802003e:	f000 f96d 	bl	802031c <_Bfree>
 8020042:	464c      	mov	r4, r9
 8020044:	6923      	ldr	r3, [r4, #16]
 8020046:	1c5a      	adds	r2, r3, #1
 8020048:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802004c:	6122      	str	r2, [r4, #16]
 802004e:	2201      	movs	r2, #1
 8020050:	615a      	str	r2, [r3, #20]
 8020052:	e7bb      	b.n	801ffcc <__gethex+0x3c8>
 8020054:	6922      	ldr	r2, [r4, #16]
 8020056:	455a      	cmp	r2, fp
 8020058:	dd0b      	ble.n	8020072 <__gethex+0x46e>
 802005a:	2101      	movs	r1, #1
 802005c:	4620      	mov	r0, r4
 802005e:	f7ff fd69 	bl	801fb34 <rshift>
 8020062:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020066:	3501      	adds	r5, #1
 8020068:	42ab      	cmp	r3, r5
 802006a:	f6ff aed0 	blt.w	801fe0e <__gethex+0x20a>
 802006e:	2701      	movs	r7, #1
 8020070:	e7c0      	b.n	801fff4 <__gethex+0x3f0>
 8020072:	f016 061f 	ands.w	r6, r6, #31
 8020076:	d0fa      	beq.n	802006e <__gethex+0x46a>
 8020078:	449a      	add	sl, r3
 802007a:	f1c6 0620 	rsb	r6, r6, #32
 802007e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8020082:	f000 fa01 	bl	8020488 <__hi0bits>
 8020086:	42b0      	cmp	r0, r6
 8020088:	dbe7      	blt.n	802005a <__gethex+0x456>
 802008a:	e7f0      	b.n	802006e <__gethex+0x46a>
 802008c:	08022188 	.word	0x08022188

08020090 <L_shift>:
 8020090:	f1c2 0208 	rsb	r2, r2, #8
 8020094:	0092      	lsls	r2, r2, #2
 8020096:	b570      	push	{r4, r5, r6, lr}
 8020098:	f1c2 0620 	rsb	r6, r2, #32
 802009c:	6843      	ldr	r3, [r0, #4]
 802009e:	6804      	ldr	r4, [r0, #0]
 80200a0:	fa03 f506 	lsl.w	r5, r3, r6
 80200a4:	432c      	orrs	r4, r5
 80200a6:	40d3      	lsrs	r3, r2
 80200a8:	6004      	str	r4, [r0, #0]
 80200aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80200ae:	4288      	cmp	r0, r1
 80200b0:	d3f4      	bcc.n	802009c <L_shift+0xc>
 80200b2:	bd70      	pop	{r4, r5, r6, pc}

080200b4 <__match>:
 80200b4:	b530      	push	{r4, r5, lr}
 80200b6:	6803      	ldr	r3, [r0, #0]
 80200b8:	3301      	adds	r3, #1
 80200ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80200be:	b914      	cbnz	r4, 80200c6 <__match+0x12>
 80200c0:	6003      	str	r3, [r0, #0]
 80200c2:	2001      	movs	r0, #1
 80200c4:	bd30      	pop	{r4, r5, pc}
 80200c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80200ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80200ce:	2d19      	cmp	r5, #25
 80200d0:	bf98      	it	ls
 80200d2:	3220      	addls	r2, #32
 80200d4:	42a2      	cmp	r2, r4
 80200d6:	d0f0      	beq.n	80200ba <__match+0x6>
 80200d8:	2000      	movs	r0, #0
 80200da:	e7f3      	b.n	80200c4 <__match+0x10>

080200dc <__hexnan>:
 80200dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200e0:	680b      	ldr	r3, [r1, #0]
 80200e2:	6801      	ldr	r1, [r0, #0]
 80200e4:	115e      	asrs	r6, r3, #5
 80200e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80200ea:	f013 031f 	ands.w	r3, r3, #31
 80200ee:	b087      	sub	sp, #28
 80200f0:	bf18      	it	ne
 80200f2:	3604      	addne	r6, #4
 80200f4:	2500      	movs	r5, #0
 80200f6:	1f37      	subs	r7, r6, #4
 80200f8:	4682      	mov	sl, r0
 80200fa:	4690      	mov	r8, r2
 80200fc:	9301      	str	r3, [sp, #4]
 80200fe:	f846 5c04 	str.w	r5, [r6, #-4]
 8020102:	46b9      	mov	r9, r7
 8020104:	463c      	mov	r4, r7
 8020106:	9502      	str	r5, [sp, #8]
 8020108:	46ab      	mov	fp, r5
 802010a:	784a      	ldrb	r2, [r1, #1]
 802010c:	1c4b      	adds	r3, r1, #1
 802010e:	9303      	str	r3, [sp, #12]
 8020110:	b342      	cbz	r2, 8020164 <__hexnan+0x88>
 8020112:	4610      	mov	r0, r2
 8020114:	9105      	str	r1, [sp, #20]
 8020116:	9204      	str	r2, [sp, #16]
 8020118:	f7ff fd5e 	bl	801fbd8 <__hexdig_fun>
 802011c:	2800      	cmp	r0, #0
 802011e:	d14f      	bne.n	80201c0 <__hexnan+0xe4>
 8020120:	9a04      	ldr	r2, [sp, #16]
 8020122:	9905      	ldr	r1, [sp, #20]
 8020124:	2a20      	cmp	r2, #32
 8020126:	d818      	bhi.n	802015a <__hexnan+0x7e>
 8020128:	9b02      	ldr	r3, [sp, #8]
 802012a:	459b      	cmp	fp, r3
 802012c:	dd13      	ble.n	8020156 <__hexnan+0x7a>
 802012e:	454c      	cmp	r4, r9
 8020130:	d206      	bcs.n	8020140 <__hexnan+0x64>
 8020132:	2d07      	cmp	r5, #7
 8020134:	dc04      	bgt.n	8020140 <__hexnan+0x64>
 8020136:	462a      	mov	r2, r5
 8020138:	4649      	mov	r1, r9
 802013a:	4620      	mov	r0, r4
 802013c:	f7ff ffa8 	bl	8020090 <L_shift>
 8020140:	4544      	cmp	r4, r8
 8020142:	d950      	bls.n	80201e6 <__hexnan+0x10a>
 8020144:	2300      	movs	r3, #0
 8020146:	f1a4 0904 	sub.w	r9, r4, #4
 802014a:	f844 3c04 	str.w	r3, [r4, #-4]
 802014e:	f8cd b008 	str.w	fp, [sp, #8]
 8020152:	464c      	mov	r4, r9
 8020154:	461d      	mov	r5, r3
 8020156:	9903      	ldr	r1, [sp, #12]
 8020158:	e7d7      	b.n	802010a <__hexnan+0x2e>
 802015a:	2a29      	cmp	r2, #41	; 0x29
 802015c:	d156      	bne.n	802020c <__hexnan+0x130>
 802015e:	3102      	adds	r1, #2
 8020160:	f8ca 1000 	str.w	r1, [sl]
 8020164:	f1bb 0f00 	cmp.w	fp, #0
 8020168:	d050      	beq.n	802020c <__hexnan+0x130>
 802016a:	454c      	cmp	r4, r9
 802016c:	d206      	bcs.n	802017c <__hexnan+0xa0>
 802016e:	2d07      	cmp	r5, #7
 8020170:	dc04      	bgt.n	802017c <__hexnan+0xa0>
 8020172:	462a      	mov	r2, r5
 8020174:	4649      	mov	r1, r9
 8020176:	4620      	mov	r0, r4
 8020178:	f7ff ff8a 	bl	8020090 <L_shift>
 802017c:	4544      	cmp	r4, r8
 802017e:	d934      	bls.n	80201ea <__hexnan+0x10e>
 8020180:	f1a8 0204 	sub.w	r2, r8, #4
 8020184:	4623      	mov	r3, r4
 8020186:	f853 1b04 	ldr.w	r1, [r3], #4
 802018a:	f842 1f04 	str.w	r1, [r2, #4]!
 802018e:	429f      	cmp	r7, r3
 8020190:	d2f9      	bcs.n	8020186 <__hexnan+0xaa>
 8020192:	1b3b      	subs	r3, r7, r4
 8020194:	f023 0303 	bic.w	r3, r3, #3
 8020198:	3304      	adds	r3, #4
 802019a:	3401      	adds	r4, #1
 802019c:	3e03      	subs	r6, #3
 802019e:	42b4      	cmp	r4, r6
 80201a0:	bf88      	it	hi
 80201a2:	2304      	movhi	r3, #4
 80201a4:	4443      	add	r3, r8
 80201a6:	2200      	movs	r2, #0
 80201a8:	f843 2b04 	str.w	r2, [r3], #4
 80201ac:	429f      	cmp	r7, r3
 80201ae:	d2fb      	bcs.n	80201a8 <__hexnan+0xcc>
 80201b0:	683b      	ldr	r3, [r7, #0]
 80201b2:	b91b      	cbnz	r3, 80201bc <__hexnan+0xe0>
 80201b4:	4547      	cmp	r7, r8
 80201b6:	d127      	bne.n	8020208 <__hexnan+0x12c>
 80201b8:	2301      	movs	r3, #1
 80201ba:	603b      	str	r3, [r7, #0]
 80201bc:	2005      	movs	r0, #5
 80201be:	e026      	b.n	802020e <__hexnan+0x132>
 80201c0:	3501      	adds	r5, #1
 80201c2:	2d08      	cmp	r5, #8
 80201c4:	f10b 0b01 	add.w	fp, fp, #1
 80201c8:	dd06      	ble.n	80201d8 <__hexnan+0xfc>
 80201ca:	4544      	cmp	r4, r8
 80201cc:	d9c3      	bls.n	8020156 <__hexnan+0x7a>
 80201ce:	2300      	movs	r3, #0
 80201d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80201d4:	2501      	movs	r5, #1
 80201d6:	3c04      	subs	r4, #4
 80201d8:	6822      	ldr	r2, [r4, #0]
 80201da:	f000 000f 	and.w	r0, r0, #15
 80201de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80201e2:	6022      	str	r2, [r4, #0]
 80201e4:	e7b7      	b.n	8020156 <__hexnan+0x7a>
 80201e6:	2508      	movs	r5, #8
 80201e8:	e7b5      	b.n	8020156 <__hexnan+0x7a>
 80201ea:	9b01      	ldr	r3, [sp, #4]
 80201ec:	2b00      	cmp	r3, #0
 80201ee:	d0df      	beq.n	80201b0 <__hexnan+0xd4>
 80201f0:	f04f 32ff 	mov.w	r2, #4294967295
 80201f4:	f1c3 0320 	rsb	r3, r3, #32
 80201f8:	fa22 f303 	lsr.w	r3, r2, r3
 80201fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020200:	401a      	ands	r2, r3
 8020202:	f846 2c04 	str.w	r2, [r6, #-4]
 8020206:	e7d3      	b.n	80201b0 <__hexnan+0xd4>
 8020208:	3f04      	subs	r7, #4
 802020a:	e7d1      	b.n	80201b0 <__hexnan+0xd4>
 802020c:	2004      	movs	r0, #4
 802020e:	b007      	add	sp, #28
 8020210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020214 <_isatty_r>:
 8020214:	b538      	push	{r3, r4, r5, lr}
 8020216:	4d06      	ldr	r5, [pc, #24]	; (8020230 <_isatty_r+0x1c>)
 8020218:	2300      	movs	r3, #0
 802021a:	4604      	mov	r4, r0
 802021c:	4608      	mov	r0, r1
 802021e:	602b      	str	r3, [r5, #0]
 8020220:	f7fc fd6a 	bl	801ccf8 <_isatty>
 8020224:	1c43      	adds	r3, r0, #1
 8020226:	d102      	bne.n	802022e <_isatty_r+0x1a>
 8020228:	682b      	ldr	r3, [r5, #0]
 802022a:	b103      	cbz	r3, 802022e <_isatty_r+0x1a>
 802022c:	6023      	str	r3, [r4, #0]
 802022e:	bd38      	pop	{r3, r4, r5, pc}
 8020230:	20019220 	.word	0x20019220

08020234 <_localeconv_r>:
 8020234:	4800      	ldr	r0, [pc, #0]	; (8020238 <_localeconv_r+0x4>)
 8020236:	4770      	bx	lr
 8020238:	200001e4 	.word	0x200001e4

0802023c <_lseek_r>:
 802023c:	b538      	push	{r3, r4, r5, lr}
 802023e:	4d07      	ldr	r5, [pc, #28]	; (802025c <_lseek_r+0x20>)
 8020240:	4604      	mov	r4, r0
 8020242:	4608      	mov	r0, r1
 8020244:	4611      	mov	r1, r2
 8020246:	2200      	movs	r2, #0
 8020248:	602a      	str	r2, [r5, #0]
 802024a:	461a      	mov	r2, r3
 802024c:	f7fc fd5f 	bl	801cd0e <_lseek>
 8020250:	1c43      	adds	r3, r0, #1
 8020252:	d102      	bne.n	802025a <_lseek_r+0x1e>
 8020254:	682b      	ldr	r3, [r5, #0]
 8020256:	b103      	cbz	r3, 802025a <_lseek_r+0x1e>
 8020258:	6023      	str	r3, [r4, #0]
 802025a:	bd38      	pop	{r3, r4, r5, pc}
 802025c:	20019220 	.word	0x20019220

08020260 <__ascii_mbtowc>:
 8020260:	b082      	sub	sp, #8
 8020262:	b901      	cbnz	r1, 8020266 <__ascii_mbtowc+0x6>
 8020264:	a901      	add	r1, sp, #4
 8020266:	b142      	cbz	r2, 802027a <__ascii_mbtowc+0x1a>
 8020268:	b14b      	cbz	r3, 802027e <__ascii_mbtowc+0x1e>
 802026a:	7813      	ldrb	r3, [r2, #0]
 802026c:	600b      	str	r3, [r1, #0]
 802026e:	7812      	ldrb	r2, [r2, #0]
 8020270:	1e10      	subs	r0, r2, #0
 8020272:	bf18      	it	ne
 8020274:	2001      	movne	r0, #1
 8020276:	b002      	add	sp, #8
 8020278:	4770      	bx	lr
 802027a:	4610      	mov	r0, r2
 802027c:	e7fb      	b.n	8020276 <__ascii_mbtowc+0x16>
 802027e:	f06f 0001 	mvn.w	r0, #1
 8020282:	e7f8      	b.n	8020276 <__ascii_mbtowc+0x16>

08020284 <__malloc_lock>:
 8020284:	4801      	ldr	r0, [pc, #4]	; (802028c <__malloc_lock+0x8>)
 8020286:	f7fc bf66 	b.w	801d156 <__retarget_lock_acquire_recursive>
 802028a:	bf00      	nop
 802028c:	20019214 	.word	0x20019214

08020290 <__malloc_unlock>:
 8020290:	4801      	ldr	r0, [pc, #4]	; (8020298 <__malloc_unlock+0x8>)
 8020292:	f7fc bf61 	b.w	801d158 <__retarget_lock_release_recursive>
 8020296:	bf00      	nop
 8020298:	20019214 	.word	0x20019214

0802029c <_Balloc>:
 802029c:	b570      	push	{r4, r5, r6, lr}
 802029e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80202a0:	4604      	mov	r4, r0
 80202a2:	460d      	mov	r5, r1
 80202a4:	b976      	cbnz	r6, 80202c4 <_Balloc+0x28>
 80202a6:	2010      	movs	r0, #16
 80202a8:	f7fc ffbc 	bl	801d224 <malloc>
 80202ac:	4602      	mov	r2, r0
 80202ae:	6260      	str	r0, [r4, #36]	; 0x24
 80202b0:	b920      	cbnz	r0, 80202bc <_Balloc+0x20>
 80202b2:	4b18      	ldr	r3, [pc, #96]	; (8020314 <_Balloc+0x78>)
 80202b4:	4818      	ldr	r0, [pc, #96]	; (8020318 <_Balloc+0x7c>)
 80202b6:	2166      	movs	r1, #102	; 0x66
 80202b8:	f000 fe30 	bl	8020f1c <__assert_func>
 80202bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80202c0:	6006      	str	r6, [r0, #0]
 80202c2:	60c6      	str	r6, [r0, #12]
 80202c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80202c6:	68f3      	ldr	r3, [r6, #12]
 80202c8:	b183      	cbz	r3, 80202ec <_Balloc+0x50>
 80202ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80202cc:	68db      	ldr	r3, [r3, #12]
 80202ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80202d2:	b9b8      	cbnz	r0, 8020304 <_Balloc+0x68>
 80202d4:	2101      	movs	r1, #1
 80202d6:	fa01 f605 	lsl.w	r6, r1, r5
 80202da:	1d72      	adds	r2, r6, #5
 80202dc:	0092      	lsls	r2, r2, #2
 80202de:	4620      	mov	r0, r4
 80202e0:	f7fc ffe0 	bl	801d2a4 <_calloc_r>
 80202e4:	b160      	cbz	r0, 8020300 <_Balloc+0x64>
 80202e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80202ea:	e00e      	b.n	802030a <_Balloc+0x6e>
 80202ec:	2221      	movs	r2, #33	; 0x21
 80202ee:	2104      	movs	r1, #4
 80202f0:	4620      	mov	r0, r4
 80202f2:	f7fc ffd7 	bl	801d2a4 <_calloc_r>
 80202f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80202f8:	60f0      	str	r0, [r6, #12]
 80202fa:	68db      	ldr	r3, [r3, #12]
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	d1e4      	bne.n	80202ca <_Balloc+0x2e>
 8020300:	2000      	movs	r0, #0
 8020302:	bd70      	pop	{r4, r5, r6, pc}
 8020304:	6802      	ldr	r2, [r0, #0]
 8020306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802030a:	2300      	movs	r3, #0
 802030c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020310:	e7f7      	b.n	8020302 <_Balloc+0x66>
 8020312:	bf00      	nop
 8020314:	08022112 	.word	0x08022112
 8020318:	08022218 	.word	0x08022218

0802031c <_Bfree>:
 802031c:	b570      	push	{r4, r5, r6, lr}
 802031e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020320:	4605      	mov	r5, r0
 8020322:	460c      	mov	r4, r1
 8020324:	b976      	cbnz	r6, 8020344 <_Bfree+0x28>
 8020326:	2010      	movs	r0, #16
 8020328:	f7fc ff7c 	bl	801d224 <malloc>
 802032c:	4602      	mov	r2, r0
 802032e:	6268      	str	r0, [r5, #36]	; 0x24
 8020330:	b920      	cbnz	r0, 802033c <_Bfree+0x20>
 8020332:	4b09      	ldr	r3, [pc, #36]	; (8020358 <_Bfree+0x3c>)
 8020334:	4809      	ldr	r0, [pc, #36]	; (802035c <_Bfree+0x40>)
 8020336:	218a      	movs	r1, #138	; 0x8a
 8020338:	f000 fdf0 	bl	8020f1c <__assert_func>
 802033c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020340:	6006      	str	r6, [r0, #0]
 8020342:	60c6      	str	r6, [r0, #12]
 8020344:	b13c      	cbz	r4, 8020356 <_Bfree+0x3a>
 8020346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020348:	6862      	ldr	r2, [r4, #4]
 802034a:	68db      	ldr	r3, [r3, #12]
 802034c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020350:	6021      	str	r1, [r4, #0]
 8020352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020356:	bd70      	pop	{r4, r5, r6, pc}
 8020358:	08022112 	.word	0x08022112
 802035c:	08022218 	.word	0x08022218

08020360 <__multadd>:
 8020360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020364:	690e      	ldr	r6, [r1, #16]
 8020366:	4607      	mov	r7, r0
 8020368:	4698      	mov	r8, r3
 802036a:	460c      	mov	r4, r1
 802036c:	f101 0014 	add.w	r0, r1, #20
 8020370:	2300      	movs	r3, #0
 8020372:	6805      	ldr	r5, [r0, #0]
 8020374:	b2a9      	uxth	r1, r5
 8020376:	fb02 8101 	mla	r1, r2, r1, r8
 802037a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802037e:	0c2d      	lsrs	r5, r5, #16
 8020380:	fb02 c505 	mla	r5, r2, r5, ip
 8020384:	b289      	uxth	r1, r1
 8020386:	3301      	adds	r3, #1
 8020388:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802038c:	429e      	cmp	r6, r3
 802038e:	f840 1b04 	str.w	r1, [r0], #4
 8020392:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020396:	dcec      	bgt.n	8020372 <__multadd+0x12>
 8020398:	f1b8 0f00 	cmp.w	r8, #0
 802039c:	d022      	beq.n	80203e4 <__multadd+0x84>
 802039e:	68a3      	ldr	r3, [r4, #8]
 80203a0:	42b3      	cmp	r3, r6
 80203a2:	dc19      	bgt.n	80203d8 <__multadd+0x78>
 80203a4:	6861      	ldr	r1, [r4, #4]
 80203a6:	4638      	mov	r0, r7
 80203a8:	3101      	adds	r1, #1
 80203aa:	f7ff ff77 	bl	802029c <_Balloc>
 80203ae:	4605      	mov	r5, r0
 80203b0:	b928      	cbnz	r0, 80203be <__multadd+0x5e>
 80203b2:	4602      	mov	r2, r0
 80203b4:	4b0d      	ldr	r3, [pc, #52]	; (80203ec <__multadd+0x8c>)
 80203b6:	480e      	ldr	r0, [pc, #56]	; (80203f0 <__multadd+0x90>)
 80203b8:	21b5      	movs	r1, #181	; 0xb5
 80203ba:	f000 fdaf 	bl	8020f1c <__assert_func>
 80203be:	6922      	ldr	r2, [r4, #16]
 80203c0:	3202      	adds	r2, #2
 80203c2:	f104 010c 	add.w	r1, r4, #12
 80203c6:	0092      	lsls	r2, r2, #2
 80203c8:	300c      	adds	r0, #12
 80203ca:	f7fc ff3b 	bl	801d244 <memcpy>
 80203ce:	4621      	mov	r1, r4
 80203d0:	4638      	mov	r0, r7
 80203d2:	f7ff ffa3 	bl	802031c <_Bfree>
 80203d6:	462c      	mov	r4, r5
 80203d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80203dc:	3601      	adds	r6, #1
 80203de:	f8c3 8014 	str.w	r8, [r3, #20]
 80203e2:	6126      	str	r6, [r4, #16]
 80203e4:	4620      	mov	r0, r4
 80203e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203ea:	bf00      	nop
 80203ec:	08022188 	.word	0x08022188
 80203f0:	08022218 	.word	0x08022218

080203f4 <__s2b>:
 80203f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203f8:	460c      	mov	r4, r1
 80203fa:	4615      	mov	r5, r2
 80203fc:	461f      	mov	r7, r3
 80203fe:	2209      	movs	r2, #9
 8020400:	3308      	adds	r3, #8
 8020402:	4606      	mov	r6, r0
 8020404:	fb93 f3f2 	sdiv	r3, r3, r2
 8020408:	2100      	movs	r1, #0
 802040a:	2201      	movs	r2, #1
 802040c:	429a      	cmp	r2, r3
 802040e:	db09      	blt.n	8020424 <__s2b+0x30>
 8020410:	4630      	mov	r0, r6
 8020412:	f7ff ff43 	bl	802029c <_Balloc>
 8020416:	b940      	cbnz	r0, 802042a <__s2b+0x36>
 8020418:	4602      	mov	r2, r0
 802041a:	4b19      	ldr	r3, [pc, #100]	; (8020480 <__s2b+0x8c>)
 802041c:	4819      	ldr	r0, [pc, #100]	; (8020484 <__s2b+0x90>)
 802041e:	21ce      	movs	r1, #206	; 0xce
 8020420:	f000 fd7c 	bl	8020f1c <__assert_func>
 8020424:	0052      	lsls	r2, r2, #1
 8020426:	3101      	adds	r1, #1
 8020428:	e7f0      	b.n	802040c <__s2b+0x18>
 802042a:	9b08      	ldr	r3, [sp, #32]
 802042c:	6143      	str	r3, [r0, #20]
 802042e:	2d09      	cmp	r5, #9
 8020430:	f04f 0301 	mov.w	r3, #1
 8020434:	6103      	str	r3, [r0, #16]
 8020436:	dd16      	ble.n	8020466 <__s2b+0x72>
 8020438:	f104 0909 	add.w	r9, r4, #9
 802043c:	46c8      	mov	r8, r9
 802043e:	442c      	add	r4, r5
 8020440:	f818 3b01 	ldrb.w	r3, [r8], #1
 8020444:	4601      	mov	r1, r0
 8020446:	3b30      	subs	r3, #48	; 0x30
 8020448:	220a      	movs	r2, #10
 802044a:	4630      	mov	r0, r6
 802044c:	f7ff ff88 	bl	8020360 <__multadd>
 8020450:	45a0      	cmp	r8, r4
 8020452:	d1f5      	bne.n	8020440 <__s2b+0x4c>
 8020454:	f1a5 0408 	sub.w	r4, r5, #8
 8020458:	444c      	add	r4, r9
 802045a:	1b2d      	subs	r5, r5, r4
 802045c:	1963      	adds	r3, r4, r5
 802045e:	42bb      	cmp	r3, r7
 8020460:	db04      	blt.n	802046c <__s2b+0x78>
 8020462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020466:	340a      	adds	r4, #10
 8020468:	2509      	movs	r5, #9
 802046a:	e7f6      	b.n	802045a <__s2b+0x66>
 802046c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020470:	4601      	mov	r1, r0
 8020472:	3b30      	subs	r3, #48	; 0x30
 8020474:	220a      	movs	r2, #10
 8020476:	4630      	mov	r0, r6
 8020478:	f7ff ff72 	bl	8020360 <__multadd>
 802047c:	e7ee      	b.n	802045c <__s2b+0x68>
 802047e:	bf00      	nop
 8020480:	08022188 	.word	0x08022188
 8020484:	08022218 	.word	0x08022218

08020488 <__hi0bits>:
 8020488:	0c03      	lsrs	r3, r0, #16
 802048a:	041b      	lsls	r3, r3, #16
 802048c:	b9d3      	cbnz	r3, 80204c4 <__hi0bits+0x3c>
 802048e:	0400      	lsls	r0, r0, #16
 8020490:	2310      	movs	r3, #16
 8020492:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020496:	bf04      	itt	eq
 8020498:	0200      	lsleq	r0, r0, #8
 802049a:	3308      	addeq	r3, #8
 802049c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80204a0:	bf04      	itt	eq
 80204a2:	0100      	lsleq	r0, r0, #4
 80204a4:	3304      	addeq	r3, #4
 80204a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80204aa:	bf04      	itt	eq
 80204ac:	0080      	lsleq	r0, r0, #2
 80204ae:	3302      	addeq	r3, #2
 80204b0:	2800      	cmp	r0, #0
 80204b2:	db05      	blt.n	80204c0 <__hi0bits+0x38>
 80204b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80204b8:	f103 0301 	add.w	r3, r3, #1
 80204bc:	bf08      	it	eq
 80204be:	2320      	moveq	r3, #32
 80204c0:	4618      	mov	r0, r3
 80204c2:	4770      	bx	lr
 80204c4:	2300      	movs	r3, #0
 80204c6:	e7e4      	b.n	8020492 <__hi0bits+0xa>

080204c8 <__lo0bits>:
 80204c8:	6803      	ldr	r3, [r0, #0]
 80204ca:	f013 0207 	ands.w	r2, r3, #7
 80204ce:	4601      	mov	r1, r0
 80204d0:	d00b      	beq.n	80204ea <__lo0bits+0x22>
 80204d2:	07da      	lsls	r2, r3, #31
 80204d4:	d424      	bmi.n	8020520 <__lo0bits+0x58>
 80204d6:	0798      	lsls	r0, r3, #30
 80204d8:	bf49      	itett	mi
 80204da:	085b      	lsrmi	r3, r3, #1
 80204dc:	089b      	lsrpl	r3, r3, #2
 80204de:	2001      	movmi	r0, #1
 80204e0:	600b      	strmi	r3, [r1, #0]
 80204e2:	bf5c      	itt	pl
 80204e4:	600b      	strpl	r3, [r1, #0]
 80204e6:	2002      	movpl	r0, #2
 80204e8:	4770      	bx	lr
 80204ea:	b298      	uxth	r0, r3
 80204ec:	b9b0      	cbnz	r0, 802051c <__lo0bits+0x54>
 80204ee:	0c1b      	lsrs	r3, r3, #16
 80204f0:	2010      	movs	r0, #16
 80204f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80204f6:	bf04      	itt	eq
 80204f8:	0a1b      	lsreq	r3, r3, #8
 80204fa:	3008      	addeq	r0, #8
 80204fc:	071a      	lsls	r2, r3, #28
 80204fe:	bf04      	itt	eq
 8020500:	091b      	lsreq	r3, r3, #4
 8020502:	3004      	addeq	r0, #4
 8020504:	079a      	lsls	r2, r3, #30
 8020506:	bf04      	itt	eq
 8020508:	089b      	lsreq	r3, r3, #2
 802050a:	3002      	addeq	r0, #2
 802050c:	07da      	lsls	r2, r3, #31
 802050e:	d403      	bmi.n	8020518 <__lo0bits+0x50>
 8020510:	085b      	lsrs	r3, r3, #1
 8020512:	f100 0001 	add.w	r0, r0, #1
 8020516:	d005      	beq.n	8020524 <__lo0bits+0x5c>
 8020518:	600b      	str	r3, [r1, #0]
 802051a:	4770      	bx	lr
 802051c:	4610      	mov	r0, r2
 802051e:	e7e8      	b.n	80204f2 <__lo0bits+0x2a>
 8020520:	2000      	movs	r0, #0
 8020522:	4770      	bx	lr
 8020524:	2020      	movs	r0, #32
 8020526:	4770      	bx	lr

08020528 <__i2b>:
 8020528:	b510      	push	{r4, lr}
 802052a:	460c      	mov	r4, r1
 802052c:	2101      	movs	r1, #1
 802052e:	f7ff feb5 	bl	802029c <_Balloc>
 8020532:	4602      	mov	r2, r0
 8020534:	b928      	cbnz	r0, 8020542 <__i2b+0x1a>
 8020536:	4b05      	ldr	r3, [pc, #20]	; (802054c <__i2b+0x24>)
 8020538:	4805      	ldr	r0, [pc, #20]	; (8020550 <__i2b+0x28>)
 802053a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802053e:	f000 fced 	bl	8020f1c <__assert_func>
 8020542:	2301      	movs	r3, #1
 8020544:	6144      	str	r4, [r0, #20]
 8020546:	6103      	str	r3, [r0, #16]
 8020548:	bd10      	pop	{r4, pc}
 802054a:	bf00      	nop
 802054c:	08022188 	.word	0x08022188
 8020550:	08022218 	.word	0x08022218

08020554 <__multiply>:
 8020554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020558:	4614      	mov	r4, r2
 802055a:	690a      	ldr	r2, [r1, #16]
 802055c:	6923      	ldr	r3, [r4, #16]
 802055e:	429a      	cmp	r2, r3
 8020560:	bfb8      	it	lt
 8020562:	460b      	movlt	r3, r1
 8020564:	460d      	mov	r5, r1
 8020566:	bfbc      	itt	lt
 8020568:	4625      	movlt	r5, r4
 802056a:	461c      	movlt	r4, r3
 802056c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8020570:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020574:	68ab      	ldr	r3, [r5, #8]
 8020576:	6869      	ldr	r1, [r5, #4]
 8020578:	eb0a 0709 	add.w	r7, sl, r9
 802057c:	42bb      	cmp	r3, r7
 802057e:	b085      	sub	sp, #20
 8020580:	bfb8      	it	lt
 8020582:	3101      	addlt	r1, #1
 8020584:	f7ff fe8a 	bl	802029c <_Balloc>
 8020588:	b930      	cbnz	r0, 8020598 <__multiply+0x44>
 802058a:	4602      	mov	r2, r0
 802058c:	4b42      	ldr	r3, [pc, #264]	; (8020698 <__multiply+0x144>)
 802058e:	4843      	ldr	r0, [pc, #268]	; (802069c <__multiply+0x148>)
 8020590:	f240 115d 	movw	r1, #349	; 0x15d
 8020594:	f000 fcc2 	bl	8020f1c <__assert_func>
 8020598:	f100 0614 	add.w	r6, r0, #20
 802059c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80205a0:	4633      	mov	r3, r6
 80205a2:	2200      	movs	r2, #0
 80205a4:	4543      	cmp	r3, r8
 80205a6:	d31e      	bcc.n	80205e6 <__multiply+0x92>
 80205a8:	f105 0c14 	add.w	ip, r5, #20
 80205ac:	f104 0314 	add.w	r3, r4, #20
 80205b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80205b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80205b8:	9202      	str	r2, [sp, #8]
 80205ba:	ebac 0205 	sub.w	r2, ip, r5
 80205be:	3a15      	subs	r2, #21
 80205c0:	f022 0203 	bic.w	r2, r2, #3
 80205c4:	3204      	adds	r2, #4
 80205c6:	f105 0115 	add.w	r1, r5, #21
 80205ca:	458c      	cmp	ip, r1
 80205cc:	bf38      	it	cc
 80205ce:	2204      	movcc	r2, #4
 80205d0:	9201      	str	r2, [sp, #4]
 80205d2:	9a02      	ldr	r2, [sp, #8]
 80205d4:	9303      	str	r3, [sp, #12]
 80205d6:	429a      	cmp	r2, r3
 80205d8:	d808      	bhi.n	80205ec <__multiply+0x98>
 80205da:	2f00      	cmp	r7, #0
 80205dc:	dc55      	bgt.n	802068a <__multiply+0x136>
 80205de:	6107      	str	r7, [r0, #16]
 80205e0:	b005      	add	sp, #20
 80205e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205e6:	f843 2b04 	str.w	r2, [r3], #4
 80205ea:	e7db      	b.n	80205a4 <__multiply+0x50>
 80205ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80205f0:	f1ba 0f00 	cmp.w	sl, #0
 80205f4:	d020      	beq.n	8020638 <__multiply+0xe4>
 80205f6:	f105 0e14 	add.w	lr, r5, #20
 80205fa:	46b1      	mov	r9, r6
 80205fc:	2200      	movs	r2, #0
 80205fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8020602:	f8d9 b000 	ldr.w	fp, [r9]
 8020606:	b2a1      	uxth	r1, r4
 8020608:	fa1f fb8b 	uxth.w	fp, fp
 802060c:	fb0a b101 	mla	r1, sl, r1, fp
 8020610:	4411      	add	r1, r2
 8020612:	f8d9 2000 	ldr.w	r2, [r9]
 8020616:	0c24      	lsrs	r4, r4, #16
 8020618:	0c12      	lsrs	r2, r2, #16
 802061a:	fb0a 2404 	mla	r4, sl, r4, r2
 802061e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8020622:	b289      	uxth	r1, r1
 8020624:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8020628:	45f4      	cmp	ip, lr
 802062a:	f849 1b04 	str.w	r1, [r9], #4
 802062e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8020632:	d8e4      	bhi.n	80205fe <__multiply+0xaa>
 8020634:	9901      	ldr	r1, [sp, #4]
 8020636:	5072      	str	r2, [r6, r1]
 8020638:	9a03      	ldr	r2, [sp, #12]
 802063a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802063e:	3304      	adds	r3, #4
 8020640:	f1b9 0f00 	cmp.w	r9, #0
 8020644:	d01f      	beq.n	8020686 <__multiply+0x132>
 8020646:	6834      	ldr	r4, [r6, #0]
 8020648:	f105 0114 	add.w	r1, r5, #20
 802064c:	46b6      	mov	lr, r6
 802064e:	f04f 0a00 	mov.w	sl, #0
 8020652:	880a      	ldrh	r2, [r1, #0]
 8020654:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020658:	fb09 b202 	mla	r2, r9, r2, fp
 802065c:	4492      	add	sl, r2
 802065e:	b2a4      	uxth	r4, r4
 8020660:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020664:	f84e 4b04 	str.w	r4, [lr], #4
 8020668:	f851 4b04 	ldr.w	r4, [r1], #4
 802066c:	f8be 2000 	ldrh.w	r2, [lr]
 8020670:	0c24      	lsrs	r4, r4, #16
 8020672:	fb09 2404 	mla	r4, r9, r4, r2
 8020676:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802067a:	458c      	cmp	ip, r1
 802067c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8020680:	d8e7      	bhi.n	8020652 <__multiply+0xfe>
 8020682:	9a01      	ldr	r2, [sp, #4]
 8020684:	50b4      	str	r4, [r6, r2]
 8020686:	3604      	adds	r6, #4
 8020688:	e7a3      	b.n	80205d2 <__multiply+0x7e>
 802068a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802068e:	2b00      	cmp	r3, #0
 8020690:	d1a5      	bne.n	80205de <__multiply+0x8a>
 8020692:	3f01      	subs	r7, #1
 8020694:	e7a1      	b.n	80205da <__multiply+0x86>
 8020696:	bf00      	nop
 8020698:	08022188 	.word	0x08022188
 802069c:	08022218 	.word	0x08022218

080206a0 <__pow5mult>:
 80206a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80206a4:	4615      	mov	r5, r2
 80206a6:	f012 0203 	ands.w	r2, r2, #3
 80206aa:	4606      	mov	r6, r0
 80206ac:	460f      	mov	r7, r1
 80206ae:	d007      	beq.n	80206c0 <__pow5mult+0x20>
 80206b0:	4c25      	ldr	r4, [pc, #148]	; (8020748 <__pow5mult+0xa8>)
 80206b2:	3a01      	subs	r2, #1
 80206b4:	2300      	movs	r3, #0
 80206b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80206ba:	f7ff fe51 	bl	8020360 <__multadd>
 80206be:	4607      	mov	r7, r0
 80206c0:	10ad      	asrs	r5, r5, #2
 80206c2:	d03d      	beq.n	8020740 <__pow5mult+0xa0>
 80206c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80206c6:	b97c      	cbnz	r4, 80206e8 <__pow5mult+0x48>
 80206c8:	2010      	movs	r0, #16
 80206ca:	f7fc fdab 	bl	801d224 <malloc>
 80206ce:	4602      	mov	r2, r0
 80206d0:	6270      	str	r0, [r6, #36]	; 0x24
 80206d2:	b928      	cbnz	r0, 80206e0 <__pow5mult+0x40>
 80206d4:	4b1d      	ldr	r3, [pc, #116]	; (802074c <__pow5mult+0xac>)
 80206d6:	481e      	ldr	r0, [pc, #120]	; (8020750 <__pow5mult+0xb0>)
 80206d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80206dc:	f000 fc1e 	bl	8020f1c <__assert_func>
 80206e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80206e4:	6004      	str	r4, [r0, #0]
 80206e6:	60c4      	str	r4, [r0, #12]
 80206e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80206ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80206f0:	b94c      	cbnz	r4, 8020706 <__pow5mult+0x66>
 80206f2:	f240 2171 	movw	r1, #625	; 0x271
 80206f6:	4630      	mov	r0, r6
 80206f8:	f7ff ff16 	bl	8020528 <__i2b>
 80206fc:	2300      	movs	r3, #0
 80206fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8020702:	4604      	mov	r4, r0
 8020704:	6003      	str	r3, [r0, #0]
 8020706:	f04f 0900 	mov.w	r9, #0
 802070a:	07eb      	lsls	r3, r5, #31
 802070c:	d50a      	bpl.n	8020724 <__pow5mult+0x84>
 802070e:	4639      	mov	r1, r7
 8020710:	4622      	mov	r2, r4
 8020712:	4630      	mov	r0, r6
 8020714:	f7ff ff1e 	bl	8020554 <__multiply>
 8020718:	4639      	mov	r1, r7
 802071a:	4680      	mov	r8, r0
 802071c:	4630      	mov	r0, r6
 802071e:	f7ff fdfd 	bl	802031c <_Bfree>
 8020722:	4647      	mov	r7, r8
 8020724:	106d      	asrs	r5, r5, #1
 8020726:	d00b      	beq.n	8020740 <__pow5mult+0xa0>
 8020728:	6820      	ldr	r0, [r4, #0]
 802072a:	b938      	cbnz	r0, 802073c <__pow5mult+0x9c>
 802072c:	4622      	mov	r2, r4
 802072e:	4621      	mov	r1, r4
 8020730:	4630      	mov	r0, r6
 8020732:	f7ff ff0f 	bl	8020554 <__multiply>
 8020736:	6020      	str	r0, [r4, #0]
 8020738:	f8c0 9000 	str.w	r9, [r0]
 802073c:	4604      	mov	r4, r0
 802073e:	e7e4      	b.n	802070a <__pow5mult+0x6a>
 8020740:	4638      	mov	r0, r7
 8020742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020746:	bf00      	nop
 8020748:	08022368 	.word	0x08022368
 802074c:	08022112 	.word	0x08022112
 8020750:	08022218 	.word	0x08022218

08020754 <__lshift>:
 8020754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020758:	460c      	mov	r4, r1
 802075a:	6849      	ldr	r1, [r1, #4]
 802075c:	6923      	ldr	r3, [r4, #16]
 802075e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020762:	68a3      	ldr	r3, [r4, #8]
 8020764:	4607      	mov	r7, r0
 8020766:	4691      	mov	r9, r2
 8020768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802076c:	f108 0601 	add.w	r6, r8, #1
 8020770:	42b3      	cmp	r3, r6
 8020772:	db0b      	blt.n	802078c <__lshift+0x38>
 8020774:	4638      	mov	r0, r7
 8020776:	f7ff fd91 	bl	802029c <_Balloc>
 802077a:	4605      	mov	r5, r0
 802077c:	b948      	cbnz	r0, 8020792 <__lshift+0x3e>
 802077e:	4602      	mov	r2, r0
 8020780:	4b28      	ldr	r3, [pc, #160]	; (8020824 <__lshift+0xd0>)
 8020782:	4829      	ldr	r0, [pc, #164]	; (8020828 <__lshift+0xd4>)
 8020784:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020788:	f000 fbc8 	bl	8020f1c <__assert_func>
 802078c:	3101      	adds	r1, #1
 802078e:	005b      	lsls	r3, r3, #1
 8020790:	e7ee      	b.n	8020770 <__lshift+0x1c>
 8020792:	2300      	movs	r3, #0
 8020794:	f100 0114 	add.w	r1, r0, #20
 8020798:	f100 0210 	add.w	r2, r0, #16
 802079c:	4618      	mov	r0, r3
 802079e:	4553      	cmp	r3, sl
 80207a0:	db33      	blt.n	802080a <__lshift+0xb6>
 80207a2:	6920      	ldr	r0, [r4, #16]
 80207a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80207a8:	f104 0314 	add.w	r3, r4, #20
 80207ac:	f019 091f 	ands.w	r9, r9, #31
 80207b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80207b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80207b8:	d02b      	beq.n	8020812 <__lshift+0xbe>
 80207ba:	f1c9 0e20 	rsb	lr, r9, #32
 80207be:	468a      	mov	sl, r1
 80207c0:	2200      	movs	r2, #0
 80207c2:	6818      	ldr	r0, [r3, #0]
 80207c4:	fa00 f009 	lsl.w	r0, r0, r9
 80207c8:	4302      	orrs	r2, r0
 80207ca:	f84a 2b04 	str.w	r2, [sl], #4
 80207ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80207d2:	459c      	cmp	ip, r3
 80207d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80207d8:	d8f3      	bhi.n	80207c2 <__lshift+0x6e>
 80207da:	ebac 0304 	sub.w	r3, ip, r4
 80207de:	3b15      	subs	r3, #21
 80207e0:	f023 0303 	bic.w	r3, r3, #3
 80207e4:	3304      	adds	r3, #4
 80207e6:	f104 0015 	add.w	r0, r4, #21
 80207ea:	4584      	cmp	ip, r0
 80207ec:	bf38      	it	cc
 80207ee:	2304      	movcc	r3, #4
 80207f0:	50ca      	str	r2, [r1, r3]
 80207f2:	b10a      	cbz	r2, 80207f8 <__lshift+0xa4>
 80207f4:	f108 0602 	add.w	r6, r8, #2
 80207f8:	3e01      	subs	r6, #1
 80207fa:	4638      	mov	r0, r7
 80207fc:	612e      	str	r6, [r5, #16]
 80207fe:	4621      	mov	r1, r4
 8020800:	f7ff fd8c 	bl	802031c <_Bfree>
 8020804:	4628      	mov	r0, r5
 8020806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802080a:	f842 0f04 	str.w	r0, [r2, #4]!
 802080e:	3301      	adds	r3, #1
 8020810:	e7c5      	b.n	802079e <__lshift+0x4a>
 8020812:	3904      	subs	r1, #4
 8020814:	f853 2b04 	ldr.w	r2, [r3], #4
 8020818:	f841 2f04 	str.w	r2, [r1, #4]!
 802081c:	459c      	cmp	ip, r3
 802081e:	d8f9      	bhi.n	8020814 <__lshift+0xc0>
 8020820:	e7ea      	b.n	80207f8 <__lshift+0xa4>
 8020822:	bf00      	nop
 8020824:	08022188 	.word	0x08022188
 8020828:	08022218 	.word	0x08022218

0802082c <__mcmp>:
 802082c:	b530      	push	{r4, r5, lr}
 802082e:	6902      	ldr	r2, [r0, #16]
 8020830:	690c      	ldr	r4, [r1, #16]
 8020832:	1b12      	subs	r2, r2, r4
 8020834:	d10e      	bne.n	8020854 <__mcmp+0x28>
 8020836:	f100 0314 	add.w	r3, r0, #20
 802083a:	3114      	adds	r1, #20
 802083c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020840:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020844:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020848:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802084c:	42a5      	cmp	r5, r4
 802084e:	d003      	beq.n	8020858 <__mcmp+0x2c>
 8020850:	d305      	bcc.n	802085e <__mcmp+0x32>
 8020852:	2201      	movs	r2, #1
 8020854:	4610      	mov	r0, r2
 8020856:	bd30      	pop	{r4, r5, pc}
 8020858:	4283      	cmp	r3, r0
 802085a:	d3f3      	bcc.n	8020844 <__mcmp+0x18>
 802085c:	e7fa      	b.n	8020854 <__mcmp+0x28>
 802085e:	f04f 32ff 	mov.w	r2, #4294967295
 8020862:	e7f7      	b.n	8020854 <__mcmp+0x28>

08020864 <__mdiff>:
 8020864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020868:	460c      	mov	r4, r1
 802086a:	4606      	mov	r6, r0
 802086c:	4611      	mov	r1, r2
 802086e:	4620      	mov	r0, r4
 8020870:	4617      	mov	r7, r2
 8020872:	f7ff ffdb 	bl	802082c <__mcmp>
 8020876:	1e05      	subs	r5, r0, #0
 8020878:	d110      	bne.n	802089c <__mdiff+0x38>
 802087a:	4629      	mov	r1, r5
 802087c:	4630      	mov	r0, r6
 802087e:	f7ff fd0d 	bl	802029c <_Balloc>
 8020882:	b930      	cbnz	r0, 8020892 <__mdiff+0x2e>
 8020884:	4b39      	ldr	r3, [pc, #228]	; (802096c <__mdiff+0x108>)
 8020886:	4602      	mov	r2, r0
 8020888:	f240 2132 	movw	r1, #562	; 0x232
 802088c:	4838      	ldr	r0, [pc, #224]	; (8020970 <__mdiff+0x10c>)
 802088e:	f000 fb45 	bl	8020f1c <__assert_func>
 8020892:	2301      	movs	r3, #1
 8020894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802089c:	bfa4      	itt	ge
 802089e:	463b      	movge	r3, r7
 80208a0:	4627      	movge	r7, r4
 80208a2:	4630      	mov	r0, r6
 80208a4:	6879      	ldr	r1, [r7, #4]
 80208a6:	bfa6      	itte	ge
 80208a8:	461c      	movge	r4, r3
 80208aa:	2500      	movge	r5, #0
 80208ac:	2501      	movlt	r5, #1
 80208ae:	f7ff fcf5 	bl	802029c <_Balloc>
 80208b2:	b920      	cbnz	r0, 80208be <__mdiff+0x5a>
 80208b4:	4b2d      	ldr	r3, [pc, #180]	; (802096c <__mdiff+0x108>)
 80208b6:	4602      	mov	r2, r0
 80208b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80208bc:	e7e6      	b.n	802088c <__mdiff+0x28>
 80208be:	693e      	ldr	r6, [r7, #16]
 80208c0:	60c5      	str	r5, [r0, #12]
 80208c2:	6925      	ldr	r5, [r4, #16]
 80208c4:	f107 0114 	add.w	r1, r7, #20
 80208c8:	f104 0914 	add.w	r9, r4, #20
 80208cc:	f100 0e14 	add.w	lr, r0, #20
 80208d0:	f107 0210 	add.w	r2, r7, #16
 80208d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80208d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80208dc:	46f2      	mov	sl, lr
 80208de:	2700      	movs	r7, #0
 80208e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80208e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80208e8:	fa1f f883 	uxth.w	r8, r3
 80208ec:	fa17 f78b 	uxtah	r7, r7, fp
 80208f0:	0c1b      	lsrs	r3, r3, #16
 80208f2:	eba7 0808 	sub.w	r8, r7, r8
 80208f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80208fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80208fe:	fa1f f888 	uxth.w	r8, r8
 8020902:	141f      	asrs	r7, r3, #16
 8020904:	454d      	cmp	r5, r9
 8020906:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802090a:	f84a 3b04 	str.w	r3, [sl], #4
 802090e:	d8e7      	bhi.n	80208e0 <__mdiff+0x7c>
 8020910:	1b2b      	subs	r3, r5, r4
 8020912:	3b15      	subs	r3, #21
 8020914:	f023 0303 	bic.w	r3, r3, #3
 8020918:	3304      	adds	r3, #4
 802091a:	3415      	adds	r4, #21
 802091c:	42a5      	cmp	r5, r4
 802091e:	bf38      	it	cc
 8020920:	2304      	movcc	r3, #4
 8020922:	4419      	add	r1, r3
 8020924:	4473      	add	r3, lr
 8020926:	469e      	mov	lr, r3
 8020928:	460d      	mov	r5, r1
 802092a:	4565      	cmp	r5, ip
 802092c:	d30e      	bcc.n	802094c <__mdiff+0xe8>
 802092e:	f10c 0203 	add.w	r2, ip, #3
 8020932:	1a52      	subs	r2, r2, r1
 8020934:	f022 0203 	bic.w	r2, r2, #3
 8020938:	3903      	subs	r1, #3
 802093a:	458c      	cmp	ip, r1
 802093c:	bf38      	it	cc
 802093e:	2200      	movcc	r2, #0
 8020940:	441a      	add	r2, r3
 8020942:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8020946:	b17b      	cbz	r3, 8020968 <__mdiff+0x104>
 8020948:	6106      	str	r6, [r0, #16]
 802094a:	e7a5      	b.n	8020898 <__mdiff+0x34>
 802094c:	f855 8b04 	ldr.w	r8, [r5], #4
 8020950:	fa17 f488 	uxtah	r4, r7, r8
 8020954:	1422      	asrs	r2, r4, #16
 8020956:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802095a:	b2a4      	uxth	r4, r4
 802095c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020960:	f84e 4b04 	str.w	r4, [lr], #4
 8020964:	1417      	asrs	r7, r2, #16
 8020966:	e7e0      	b.n	802092a <__mdiff+0xc6>
 8020968:	3e01      	subs	r6, #1
 802096a:	e7ea      	b.n	8020942 <__mdiff+0xde>
 802096c:	08022188 	.word	0x08022188
 8020970:	08022218 	.word	0x08022218

08020974 <__ulp>:
 8020974:	b082      	sub	sp, #8
 8020976:	ed8d 0b00 	vstr	d0, [sp]
 802097a:	9b01      	ldr	r3, [sp, #4]
 802097c:	4912      	ldr	r1, [pc, #72]	; (80209c8 <__ulp+0x54>)
 802097e:	4019      	ands	r1, r3
 8020980:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8020984:	2900      	cmp	r1, #0
 8020986:	dd05      	ble.n	8020994 <__ulp+0x20>
 8020988:	2200      	movs	r2, #0
 802098a:	460b      	mov	r3, r1
 802098c:	ec43 2b10 	vmov	d0, r2, r3
 8020990:	b002      	add	sp, #8
 8020992:	4770      	bx	lr
 8020994:	4249      	negs	r1, r1
 8020996:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802099a:	ea4f 5021 	mov.w	r0, r1, asr #20
 802099e:	f04f 0200 	mov.w	r2, #0
 80209a2:	f04f 0300 	mov.w	r3, #0
 80209a6:	da04      	bge.n	80209b2 <__ulp+0x3e>
 80209a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80209ac:	fa41 f300 	asr.w	r3, r1, r0
 80209b0:	e7ec      	b.n	802098c <__ulp+0x18>
 80209b2:	f1a0 0114 	sub.w	r1, r0, #20
 80209b6:	291e      	cmp	r1, #30
 80209b8:	bfda      	itte	le
 80209ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80209be:	fa20 f101 	lsrle.w	r1, r0, r1
 80209c2:	2101      	movgt	r1, #1
 80209c4:	460a      	mov	r2, r1
 80209c6:	e7e1      	b.n	802098c <__ulp+0x18>
 80209c8:	7ff00000 	.word	0x7ff00000

080209cc <__b2d>:
 80209cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209ce:	6905      	ldr	r5, [r0, #16]
 80209d0:	f100 0714 	add.w	r7, r0, #20
 80209d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80209d8:	1f2e      	subs	r6, r5, #4
 80209da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80209de:	4620      	mov	r0, r4
 80209e0:	f7ff fd52 	bl	8020488 <__hi0bits>
 80209e4:	f1c0 0320 	rsb	r3, r0, #32
 80209e8:	280a      	cmp	r0, #10
 80209ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8020a68 <__b2d+0x9c>
 80209ee:	600b      	str	r3, [r1, #0]
 80209f0:	dc14      	bgt.n	8020a1c <__b2d+0x50>
 80209f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80209f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80209fa:	42b7      	cmp	r7, r6
 80209fc:	ea41 030c 	orr.w	r3, r1, ip
 8020a00:	bf34      	ite	cc
 8020a02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020a06:	2100      	movcs	r1, #0
 8020a08:	3015      	adds	r0, #21
 8020a0a:	fa04 f000 	lsl.w	r0, r4, r0
 8020a0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8020a12:	ea40 0201 	orr.w	r2, r0, r1
 8020a16:	ec43 2b10 	vmov	d0, r2, r3
 8020a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a1c:	42b7      	cmp	r7, r6
 8020a1e:	bf3a      	itte	cc
 8020a20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020a24:	f1a5 0608 	subcc.w	r6, r5, #8
 8020a28:	2100      	movcs	r1, #0
 8020a2a:	380b      	subs	r0, #11
 8020a2c:	d017      	beq.n	8020a5e <__b2d+0x92>
 8020a2e:	f1c0 0c20 	rsb	ip, r0, #32
 8020a32:	fa04 f500 	lsl.w	r5, r4, r0
 8020a36:	42be      	cmp	r6, r7
 8020a38:	fa21 f40c 	lsr.w	r4, r1, ip
 8020a3c:	ea45 0504 	orr.w	r5, r5, r4
 8020a40:	bf8c      	ite	hi
 8020a42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8020a46:	2400      	movls	r4, #0
 8020a48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8020a4c:	fa01 f000 	lsl.w	r0, r1, r0
 8020a50:	fa24 f40c 	lsr.w	r4, r4, ip
 8020a54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020a58:	ea40 0204 	orr.w	r2, r0, r4
 8020a5c:	e7db      	b.n	8020a16 <__b2d+0x4a>
 8020a5e:	ea44 030c 	orr.w	r3, r4, ip
 8020a62:	460a      	mov	r2, r1
 8020a64:	e7d7      	b.n	8020a16 <__b2d+0x4a>
 8020a66:	bf00      	nop
 8020a68:	3ff00000 	.word	0x3ff00000

08020a6c <__d2b>:
 8020a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020a70:	4689      	mov	r9, r1
 8020a72:	2101      	movs	r1, #1
 8020a74:	ec57 6b10 	vmov	r6, r7, d0
 8020a78:	4690      	mov	r8, r2
 8020a7a:	f7ff fc0f 	bl	802029c <_Balloc>
 8020a7e:	4604      	mov	r4, r0
 8020a80:	b930      	cbnz	r0, 8020a90 <__d2b+0x24>
 8020a82:	4602      	mov	r2, r0
 8020a84:	4b25      	ldr	r3, [pc, #148]	; (8020b1c <__d2b+0xb0>)
 8020a86:	4826      	ldr	r0, [pc, #152]	; (8020b20 <__d2b+0xb4>)
 8020a88:	f240 310a 	movw	r1, #778	; 0x30a
 8020a8c:	f000 fa46 	bl	8020f1c <__assert_func>
 8020a90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020a94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020a98:	bb35      	cbnz	r5, 8020ae8 <__d2b+0x7c>
 8020a9a:	2e00      	cmp	r6, #0
 8020a9c:	9301      	str	r3, [sp, #4]
 8020a9e:	d028      	beq.n	8020af2 <__d2b+0x86>
 8020aa0:	4668      	mov	r0, sp
 8020aa2:	9600      	str	r6, [sp, #0]
 8020aa4:	f7ff fd10 	bl	80204c8 <__lo0bits>
 8020aa8:	9900      	ldr	r1, [sp, #0]
 8020aaa:	b300      	cbz	r0, 8020aee <__d2b+0x82>
 8020aac:	9a01      	ldr	r2, [sp, #4]
 8020aae:	f1c0 0320 	rsb	r3, r0, #32
 8020ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8020ab6:	430b      	orrs	r3, r1
 8020ab8:	40c2      	lsrs	r2, r0
 8020aba:	6163      	str	r3, [r4, #20]
 8020abc:	9201      	str	r2, [sp, #4]
 8020abe:	9b01      	ldr	r3, [sp, #4]
 8020ac0:	61a3      	str	r3, [r4, #24]
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	bf14      	ite	ne
 8020ac6:	2202      	movne	r2, #2
 8020ac8:	2201      	moveq	r2, #1
 8020aca:	6122      	str	r2, [r4, #16]
 8020acc:	b1d5      	cbz	r5, 8020b04 <__d2b+0x98>
 8020ace:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020ad2:	4405      	add	r5, r0
 8020ad4:	f8c9 5000 	str.w	r5, [r9]
 8020ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020adc:	f8c8 0000 	str.w	r0, [r8]
 8020ae0:	4620      	mov	r0, r4
 8020ae2:	b003      	add	sp, #12
 8020ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020aec:	e7d5      	b.n	8020a9a <__d2b+0x2e>
 8020aee:	6161      	str	r1, [r4, #20]
 8020af0:	e7e5      	b.n	8020abe <__d2b+0x52>
 8020af2:	a801      	add	r0, sp, #4
 8020af4:	f7ff fce8 	bl	80204c8 <__lo0bits>
 8020af8:	9b01      	ldr	r3, [sp, #4]
 8020afa:	6163      	str	r3, [r4, #20]
 8020afc:	2201      	movs	r2, #1
 8020afe:	6122      	str	r2, [r4, #16]
 8020b00:	3020      	adds	r0, #32
 8020b02:	e7e3      	b.n	8020acc <__d2b+0x60>
 8020b04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020b08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020b0c:	f8c9 0000 	str.w	r0, [r9]
 8020b10:	6918      	ldr	r0, [r3, #16]
 8020b12:	f7ff fcb9 	bl	8020488 <__hi0bits>
 8020b16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020b1a:	e7df      	b.n	8020adc <__d2b+0x70>
 8020b1c:	08022188 	.word	0x08022188
 8020b20:	08022218 	.word	0x08022218

08020b24 <__ratio>:
 8020b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b28:	4688      	mov	r8, r1
 8020b2a:	4669      	mov	r1, sp
 8020b2c:	4681      	mov	r9, r0
 8020b2e:	f7ff ff4d 	bl	80209cc <__b2d>
 8020b32:	a901      	add	r1, sp, #4
 8020b34:	4640      	mov	r0, r8
 8020b36:	ec55 4b10 	vmov	r4, r5, d0
 8020b3a:	f7ff ff47 	bl	80209cc <__b2d>
 8020b3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020b42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8020b46:	eba3 0c02 	sub.w	ip, r3, r2
 8020b4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020b4e:	1a9b      	subs	r3, r3, r2
 8020b50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8020b54:	ec51 0b10 	vmov	r0, r1, d0
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	bfd6      	itet	le
 8020b5c:	460a      	movle	r2, r1
 8020b5e:	462a      	movgt	r2, r5
 8020b60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020b64:	468b      	mov	fp, r1
 8020b66:	462f      	mov	r7, r5
 8020b68:	bfd4      	ite	le
 8020b6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8020b6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020b72:	4620      	mov	r0, r4
 8020b74:	ee10 2a10 	vmov	r2, s0
 8020b78:	465b      	mov	r3, fp
 8020b7a:	4639      	mov	r1, r7
 8020b7c:	f7df fe8e 	bl	800089c <__aeabi_ddiv>
 8020b80:	ec41 0b10 	vmov	d0, r0, r1
 8020b84:	b003      	add	sp, #12
 8020b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b8a <__copybits>:
 8020b8a:	3901      	subs	r1, #1
 8020b8c:	b570      	push	{r4, r5, r6, lr}
 8020b8e:	1149      	asrs	r1, r1, #5
 8020b90:	6914      	ldr	r4, [r2, #16]
 8020b92:	3101      	adds	r1, #1
 8020b94:	f102 0314 	add.w	r3, r2, #20
 8020b98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020b9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020ba0:	1f05      	subs	r5, r0, #4
 8020ba2:	42a3      	cmp	r3, r4
 8020ba4:	d30c      	bcc.n	8020bc0 <__copybits+0x36>
 8020ba6:	1aa3      	subs	r3, r4, r2
 8020ba8:	3b11      	subs	r3, #17
 8020baa:	f023 0303 	bic.w	r3, r3, #3
 8020bae:	3211      	adds	r2, #17
 8020bb0:	42a2      	cmp	r2, r4
 8020bb2:	bf88      	it	hi
 8020bb4:	2300      	movhi	r3, #0
 8020bb6:	4418      	add	r0, r3
 8020bb8:	2300      	movs	r3, #0
 8020bba:	4288      	cmp	r0, r1
 8020bbc:	d305      	bcc.n	8020bca <__copybits+0x40>
 8020bbe:	bd70      	pop	{r4, r5, r6, pc}
 8020bc0:	f853 6b04 	ldr.w	r6, [r3], #4
 8020bc4:	f845 6f04 	str.w	r6, [r5, #4]!
 8020bc8:	e7eb      	b.n	8020ba2 <__copybits+0x18>
 8020bca:	f840 3b04 	str.w	r3, [r0], #4
 8020bce:	e7f4      	b.n	8020bba <__copybits+0x30>

08020bd0 <__any_on>:
 8020bd0:	f100 0214 	add.w	r2, r0, #20
 8020bd4:	6900      	ldr	r0, [r0, #16]
 8020bd6:	114b      	asrs	r3, r1, #5
 8020bd8:	4298      	cmp	r0, r3
 8020bda:	b510      	push	{r4, lr}
 8020bdc:	db11      	blt.n	8020c02 <__any_on+0x32>
 8020bde:	dd0a      	ble.n	8020bf6 <__any_on+0x26>
 8020be0:	f011 011f 	ands.w	r1, r1, #31
 8020be4:	d007      	beq.n	8020bf6 <__any_on+0x26>
 8020be6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020bea:	fa24 f001 	lsr.w	r0, r4, r1
 8020bee:	fa00 f101 	lsl.w	r1, r0, r1
 8020bf2:	428c      	cmp	r4, r1
 8020bf4:	d10b      	bne.n	8020c0e <__any_on+0x3e>
 8020bf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020bfa:	4293      	cmp	r3, r2
 8020bfc:	d803      	bhi.n	8020c06 <__any_on+0x36>
 8020bfe:	2000      	movs	r0, #0
 8020c00:	bd10      	pop	{r4, pc}
 8020c02:	4603      	mov	r3, r0
 8020c04:	e7f7      	b.n	8020bf6 <__any_on+0x26>
 8020c06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020c0a:	2900      	cmp	r1, #0
 8020c0c:	d0f5      	beq.n	8020bfa <__any_on+0x2a>
 8020c0e:	2001      	movs	r0, #1
 8020c10:	e7f6      	b.n	8020c00 <__any_on+0x30>

08020c12 <__ssputs_r>:
 8020c12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020c16:	688e      	ldr	r6, [r1, #8]
 8020c18:	429e      	cmp	r6, r3
 8020c1a:	4682      	mov	sl, r0
 8020c1c:	460c      	mov	r4, r1
 8020c1e:	4690      	mov	r8, r2
 8020c20:	461f      	mov	r7, r3
 8020c22:	d838      	bhi.n	8020c96 <__ssputs_r+0x84>
 8020c24:	898a      	ldrh	r2, [r1, #12]
 8020c26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020c2a:	d032      	beq.n	8020c92 <__ssputs_r+0x80>
 8020c2c:	6825      	ldr	r5, [r4, #0]
 8020c2e:	6909      	ldr	r1, [r1, #16]
 8020c30:	eba5 0901 	sub.w	r9, r5, r1
 8020c34:	6965      	ldr	r5, [r4, #20]
 8020c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020c3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020c3e:	3301      	adds	r3, #1
 8020c40:	444b      	add	r3, r9
 8020c42:	106d      	asrs	r5, r5, #1
 8020c44:	429d      	cmp	r5, r3
 8020c46:	bf38      	it	cc
 8020c48:	461d      	movcc	r5, r3
 8020c4a:	0553      	lsls	r3, r2, #21
 8020c4c:	d531      	bpl.n	8020cb2 <__ssputs_r+0xa0>
 8020c4e:	4629      	mov	r1, r5
 8020c50:	f7fc fb88 	bl	801d364 <_malloc_r>
 8020c54:	4606      	mov	r6, r0
 8020c56:	b950      	cbnz	r0, 8020c6e <__ssputs_r+0x5c>
 8020c58:	230c      	movs	r3, #12
 8020c5a:	f8ca 3000 	str.w	r3, [sl]
 8020c5e:	89a3      	ldrh	r3, [r4, #12]
 8020c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020c64:	81a3      	strh	r3, [r4, #12]
 8020c66:	f04f 30ff 	mov.w	r0, #4294967295
 8020c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c6e:	6921      	ldr	r1, [r4, #16]
 8020c70:	464a      	mov	r2, r9
 8020c72:	f7fc fae7 	bl	801d244 <memcpy>
 8020c76:	89a3      	ldrh	r3, [r4, #12]
 8020c78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c80:	81a3      	strh	r3, [r4, #12]
 8020c82:	6126      	str	r6, [r4, #16]
 8020c84:	6165      	str	r5, [r4, #20]
 8020c86:	444e      	add	r6, r9
 8020c88:	eba5 0509 	sub.w	r5, r5, r9
 8020c8c:	6026      	str	r6, [r4, #0]
 8020c8e:	60a5      	str	r5, [r4, #8]
 8020c90:	463e      	mov	r6, r7
 8020c92:	42be      	cmp	r6, r7
 8020c94:	d900      	bls.n	8020c98 <__ssputs_r+0x86>
 8020c96:	463e      	mov	r6, r7
 8020c98:	4632      	mov	r2, r6
 8020c9a:	6820      	ldr	r0, [r4, #0]
 8020c9c:	4641      	mov	r1, r8
 8020c9e:	f7fc fadf 	bl	801d260 <memmove>
 8020ca2:	68a3      	ldr	r3, [r4, #8]
 8020ca4:	6822      	ldr	r2, [r4, #0]
 8020ca6:	1b9b      	subs	r3, r3, r6
 8020ca8:	4432      	add	r2, r6
 8020caa:	60a3      	str	r3, [r4, #8]
 8020cac:	6022      	str	r2, [r4, #0]
 8020cae:	2000      	movs	r0, #0
 8020cb0:	e7db      	b.n	8020c6a <__ssputs_r+0x58>
 8020cb2:	462a      	mov	r2, r5
 8020cb4:	f000 f962 	bl	8020f7c <_realloc_r>
 8020cb8:	4606      	mov	r6, r0
 8020cba:	2800      	cmp	r0, #0
 8020cbc:	d1e1      	bne.n	8020c82 <__ssputs_r+0x70>
 8020cbe:	6921      	ldr	r1, [r4, #16]
 8020cc0:	4650      	mov	r0, sl
 8020cc2:	f7fc faff 	bl	801d2c4 <_free_r>
 8020cc6:	e7c7      	b.n	8020c58 <__ssputs_r+0x46>

08020cc8 <_svfiprintf_r>:
 8020cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ccc:	4698      	mov	r8, r3
 8020cce:	898b      	ldrh	r3, [r1, #12]
 8020cd0:	061b      	lsls	r3, r3, #24
 8020cd2:	b09d      	sub	sp, #116	; 0x74
 8020cd4:	4607      	mov	r7, r0
 8020cd6:	460d      	mov	r5, r1
 8020cd8:	4614      	mov	r4, r2
 8020cda:	d50e      	bpl.n	8020cfa <_svfiprintf_r+0x32>
 8020cdc:	690b      	ldr	r3, [r1, #16]
 8020cde:	b963      	cbnz	r3, 8020cfa <_svfiprintf_r+0x32>
 8020ce0:	2140      	movs	r1, #64	; 0x40
 8020ce2:	f7fc fb3f 	bl	801d364 <_malloc_r>
 8020ce6:	6028      	str	r0, [r5, #0]
 8020ce8:	6128      	str	r0, [r5, #16]
 8020cea:	b920      	cbnz	r0, 8020cf6 <_svfiprintf_r+0x2e>
 8020cec:	230c      	movs	r3, #12
 8020cee:	603b      	str	r3, [r7, #0]
 8020cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8020cf4:	e0d1      	b.n	8020e9a <_svfiprintf_r+0x1d2>
 8020cf6:	2340      	movs	r3, #64	; 0x40
 8020cf8:	616b      	str	r3, [r5, #20]
 8020cfa:	2300      	movs	r3, #0
 8020cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8020cfe:	2320      	movs	r3, #32
 8020d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8020d08:	2330      	movs	r3, #48	; 0x30
 8020d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020eb4 <_svfiprintf_r+0x1ec>
 8020d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020d12:	f04f 0901 	mov.w	r9, #1
 8020d16:	4623      	mov	r3, r4
 8020d18:	469a      	mov	sl, r3
 8020d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020d1e:	b10a      	cbz	r2, 8020d24 <_svfiprintf_r+0x5c>
 8020d20:	2a25      	cmp	r2, #37	; 0x25
 8020d22:	d1f9      	bne.n	8020d18 <_svfiprintf_r+0x50>
 8020d24:	ebba 0b04 	subs.w	fp, sl, r4
 8020d28:	d00b      	beq.n	8020d42 <_svfiprintf_r+0x7a>
 8020d2a:	465b      	mov	r3, fp
 8020d2c:	4622      	mov	r2, r4
 8020d2e:	4629      	mov	r1, r5
 8020d30:	4638      	mov	r0, r7
 8020d32:	f7ff ff6e 	bl	8020c12 <__ssputs_r>
 8020d36:	3001      	adds	r0, #1
 8020d38:	f000 80aa 	beq.w	8020e90 <_svfiprintf_r+0x1c8>
 8020d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d3e:	445a      	add	r2, fp
 8020d40:	9209      	str	r2, [sp, #36]	; 0x24
 8020d42:	f89a 3000 	ldrb.w	r3, [sl]
 8020d46:	2b00      	cmp	r3, #0
 8020d48:	f000 80a2 	beq.w	8020e90 <_svfiprintf_r+0x1c8>
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8020d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020d56:	f10a 0a01 	add.w	sl, sl, #1
 8020d5a:	9304      	str	r3, [sp, #16]
 8020d5c:	9307      	str	r3, [sp, #28]
 8020d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020d62:	931a      	str	r3, [sp, #104]	; 0x68
 8020d64:	4654      	mov	r4, sl
 8020d66:	2205      	movs	r2, #5
 8020d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d6c:	4851      	ldr	r0, [pc, #324]	; (8020eb4 <_svfiprintf_r+0x1ec>)
 8020d6e:	f7df fa5f 	bl	8000230 <memchr>
 8020d72:	9a04      	ldr	r2, [sp, #16]
 8020d74:	b9d8      	cbnz	r0, 8020dae <_svfiprintf_r+0xe6>
 8020d76:	06d0      	lsls	r0, r2, #27
 8020d78:	bf44      	itt	mi
 8020d7a:	2320      	movmi	r3, #32
 8020d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020d80:	0711      	lsls	r1, r2, #28
 8020d82:	bf44      	itt	mi
 8020d84:	232b      	movmi	r3, #43	; 0x2b
 8020d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8020d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8020d90:	d015      	beq.n	8020dbe <_svfiprintf_r+0xf6>
 8020d92:	9a07      	ldr	r2, [sp, #28]
 8020d94:	4654      	mov	r4, sl
 8020d96:	2000      	movs	r0, #0
 8020d98:	f04f 0c0a 	mov.w	ip, #10
 8020d9c:	4621      	mov	r1, r4
 8020d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020da2:	3b30      	subs	r3, #48	; 0x30
 8020da4:	2b09      	cmp	r3, #9
 8020da6:	d94e      	bls.n	8020e46 <_svfiprintf_r+0x17e>
 8020da8:	b1b0      	cbz	r0, 8020dd8 <_svfiprintf_r+0x110>
 8020daa:	9207      	str	r2, [sp, #28]
 8020dac:	e014      	b.n	8020dd8 <_svfiprintf_r+0x110>
 8020dae:	eba0 0308 	sub.w	r3, r0, r8
 8020db2:	fa09 f303 	lsl.w	r3, r9, r3
 8020db6:	4313      	orrs	r3, r2
 8020db8:	9304      	str	r3, [sp, #16]
 8020dba:	46a2      	mov	sl, r4
 8020dbc:	e7d2      	b.n	8020d64 <_svfiprintf_r+0x9c>
 8020dbe:	9b03      	ldr	r3, [sp, #12]
 8020dc0:	1d19      	adds	r1, r3, #4
 8020dc2:	681b      	ldr	r3, [r3, #0]
 8020dc4:	9103      	str	r1, [sp, #12]
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	bfbb      	ittet	lt
 8020dca:	425b      	neglt	r3, r3
 8020dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8020dd0:	9307      	strge	r3, [sp, #28]
 8020dd2:	9307      	strlt	r3, [sp, #28]
 8020dd4:	bfb8      	it	lt
 8020dd6:	9204      	strlt	r2, [sp, #16]
 8020dd8:	7823      	ldrb	r3, [r4, #0]
 8020dda:	2b2e      	cmp	r3, #46	; 0x2e
 8020ddc:	d10c      	bne.n	8020df8 <_svfiprintf_r+0x130>
 8020dde:	7863      	ldrb	r3, [r4, #1]
 8020de0:	2b2a      	cmp	r3, #42	; 0x2a
 8020de2:	d135      	bne.n	8020e50 <_svfiprintf_r+0x188>
 8020de4:	9b03      	ldr	r3, [sp, #12]
 8020de6:	1d1a      	adds	r2, r3, #4
 8020de8:	681b      	ldr	r3, [r3, #0]
 8020dea:	9203      	str	r2, [sp, #12]
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	bfb8      	it	lt
 8020df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8020df4:	3402      	adds	r4, #2
 8020df6:	9305      	str	r3, [sp, #20]
 8020df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020ec4 <_svfiprintf_r+0x1fc>
 8020dfc:	7821      	ldrb	r1, [r4, #0]
 8020dfe:	2203      	movs	r2, #3
 8020e00:	4650      	mov	r0, sl
 8020e02:	f7df fa15 	bl	8000230 <memchr>
 8020e06:	b140      	cbz	r0, 8020e1a <_svfiprintf_r+0x152>
 8020e08:	2340      	movs	r3, #64	; 0x40
 8020e0a:	eba0 000a 	sub.w	r0, r0, sl
 8020e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8020e12:	9b04      	ldr	r3, [sp, #16]
 8020e14:	4303      	orrs	r3, r0
 8020e16:	3401      	adds	r4, #1
 8020e18:	9304      	str	r3, [sp, #16]
 8020e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e1e:	4826      	ldr	r0, [pc, #152]	; (8020eb8 <_svfiprintf_r+0x1f0>)
 8020e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020e24:	2206      	movs	r2, #6
 8020e26:	f7df fa03 	bl	8000230 <memchr>
 8020e2a:	2800      	cmp	r0, #0
 8020e2c:	d038      	beq.n	8020ea0 <_svfiprintf_r+0x1d8>
 8020e2e:	4b23      	ldr	r3, [pc, #140]	; (8020ebc <_svfiprintf_r+0x1f4>)
 8020e30:	bb1b      	cbnz	r3, 8020e7a <_svfiprintf_r+0x1b2>
 8020e32:	9b03      	ldr	r3, [sp, #12]
 8020e34:	3307      	adds	r3, #7
 8020e36:	f023 0307 	bic.w	r3, r3, #7
 8020e3a:	3308      	adds	r3, #8
 8020e3c:	9303      	str	r3, [sp, #12]
 8020e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e40:	4433      	add	r3, r6
 8020e42:	9309      	str	r3, [sp, #36]	; 0x24
 8020e44:	e767      	b.n	8020d16 <_svfiprintf_r+0x4e>
 8020e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8020e4a:	460c      	mov	r4, r1
 8020e4c:	2001      	movs	r0, #1
 8020e4e:	e7a5      	b.n	8020d9c <_svfiprintf_r+0xd4>
 8020e50:	2300      	movs	r3, #0
 8020e52:	3401      	adds	r4, #1
 8020e54:	9305      	str	r3, [sp, #20]
 8020e56:	4619      	mov	r1, r3
 8020e58:	f04f 0c0a 	mov.w	ip, #10
 8020e5c:	4620      	mov	r0, r4
 8020e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020e62:	3a30      	subs	r2, #48	; 0x30
 8020e64:	2a09      	cmp	r2, #9
 8020e66:	d903      	bls.n	8020e70 <_svfiprintf_r+0x1a8>
 8020e68:	2b00      	cmp	r3, #0
 8020e6a:	d0c5      	beq.n	8020df8 <_svfiprintf_r+0x130>
 8020e6c:	9105      	str	r1, [sp, #20]
 8020e6e:	e7c3      	b.n	8020df8 <_svfiprintf_r+0x130>
 8020e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8020e74:	4604      	mov	r4, r0
 8020e76:	2301      	movs	r3, #1
 8020e78:	e7f0      	b.n	8020e5c <_svfiprintf_r+0x194>
 8020e7a:	ab03      	add	r3, sp, #12
 8020e7c:	9300      	str	r3, [sp, #0]
 8020e7e:	462a      	mov	r2, r5
 8020e80:	4b0f      	ldr	r3, [pc, #60]	; (8020ec0 <_svfiprintf_r+0x1f8>)
 8020e82:	a904      	add	r1, sp, #16
 8020e84:	4638      	mov	r0, r7
 8020e86:	f7fc fb67 	bl	801d558 <_printf_float>
 8020e8a:	1c42      	adds	r2, r0, #1
 8020e8c:	4606      	mov	r6, r0
 8020e8e:	d1d6      	bne.n	8020e3e <_svfiprintf_r+0x176>
 8020e90:	89ab      	ldrh	r3, [r5, #12]
 8020e92:	065b      	lsls	r3, r3, #25
 8020e94:	f53f af2c 	bmi.w	8020cf0 <_svfiprintf_r+0x28>
 8020e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020e9a:	b01d      	add	sp, #116	; 0x74
 8020e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ea0:	ab03      	add	r3, sp, #12
 8020ea2:	9300      	str	r3, [sp, #0]
 8020ea4:	462a      	mov	r2, r5
 8020ea6:	4b06      	ldr	r3, [pc, #24]	; (8020ec0 <_svfiprintf_r+0x1f8>)
 8020ea8:	a904      	add	r1, sp, #16
 8020eaa:	4638      	mov	r0, r7
 8020eac:	f7fc fdf8 	bl	801daa0 <_printf_i>
 8020eb0:	e7eb      	b.n	8020e8a <_svfiprintf_r+0x1c2>
 8020eb2:	bf00      	nop
 8020eb4:	08022374 	.word	0x08022374
 8020eb8:	0802237e 	.word	0x0802237e
 8020ebc:	0801d559 	.word	0x0801d559
 8020ec0:	08020c13 	.word	0x08020c13
 8020ec4:	0802237a 	.word	0x0802237a

08020ec8 <_read_r>:
 8020ec8:	b538      	push	{r3, r4, r5, lr}
 8020eca:	4d07      	ldr	r5, [pc, #28]	; (8020ee8 <_read_r+0x20>)
 8020ecc:	4604      	mov	r4, r0
 8020ece:	4608      	mov	r0, r1
 8020ed0:	4611      	mov	r1, r2
 8020ed2:	2200      	movs	r2, #0
 8020ed4:	602a      	str	r2, [r5, #0]
 8020ed6:	461a      	mov	r2, r3
 8020ed8:	f7fb ff26 	bl	801cd28 <_read>
 8020edc:	1c43      	adds	r3, r0, #1
 8020ede:	d102      	bne.n	8020ee6 <_read_r+0x1e>
 8020ee0:	682b      	ldr	r3, [r5, #0]
 8020ee2:	b103      	cbz	r3, 8020ee6 <_read_r+0x1e>
 8020ee4:	6023      	str	r3, [r4, #0]
 8020ee6:	bd38      	pop	{r3, r4, r5, pc}
 8020ee8:	20019220 	.word	0x20019220
 8020eec:	00000000 	.word	0x00000000

08020ef0 <nan>:
 8020ef0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020ef8 <nan+0x8>
 8020ef4:	4770      	bx	lr
 8020ef6:	bf00      	nop
 8020ef8:	00000000 	.word	0x00000000
 8020efc:	7ff80000 	.word	0x7ff80000

08020f00 <__ascii_wctomb>:
 8020f00:	b149      	cbz	r1, 8020f16 <__ascii_wctomb+0x16>
 8020f02:	2aff      	cmp	r2, #255	; 0xff
 8020f04:	bf85      	ittet	hi
 8020f06:	238a      	movhi	r3, #138	; 0x8a
 8020f08:	6003      	strhi	r3, [r0, #0]
 8020f0a:	700a      	strbls	r2, [r1, #0]
 8020f0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8020f10:	bf98      	it	ls
 8020f12:	2001      	movls	r0, #1
 8020f14:	4770      	bx	lr
 8020f16:	4608      	mov	r0, r1
 8020f18:	4770      	bx	lr
	...

08020f1c <__assert_func>:
 8020f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020f1e:	4614      	mov	r4, r2
 8020f20:	461a      	mov	r2, r3
 8020f22:	4b09      	ldr	r3, [pc, #36]	; (8020f48 <__assert_func+0x2c>)
 8020f24:	681b      	ldr	r3, [r3, #0]
 8020f26:	4605      	mov	r5, r0
 8020f28:	68d8      	ldr	r0, [r3, #12]
 8020f2a:	b14c      	cbz	r4, 8020f40 <__assert_func+0x24>
 8020f2c:	4b07      	ldr	r3, [pc, #28]	; (8020f4c <__assert_func+0x30>)
 8020f2e:	9100      	str	r1, [sp, #0]
 8020f30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020f34:	4906      	ldr	r1, [pc, #24]	; (8020f50 <__assert_func+0x34>)
 8020f36:	462b      	mov	r3, r5
 8020f38:	f000 f80e 	bl	8020f58 <fiprintf>
 8020f3c:	f000 f99e 	bl	802127c <abort>
 8020f40:	4b04      	ldr	r3, [pc, #16]	; (8020f54 <__assert_func+0x38>)
 8020f42:	461c      	mov	r4, r3
 8020f44:	e7f3      	b.n	8020f2e <__assert_func+0x12>
 8020f46:	bf00      	nop
 8020f48:	2000008c 	.word	0x2000008c
 8020f4c:	08022385 	.word	0x08022385
 8020f50:	08022392 	.word	0x08022392
 8020f54:	080223c0 	.word	0x080223c0

08020f58 <fiprintf>:
 8020f58:	b40e      	push	{r1, r2, r3}
 8020f5a:	b503      	push	{r0, r1, lr}
 8020f5c:	4601      	mov	r1, r0
 8020f5e:	ab03      	add	r3, sp, #12
 8020f60:	4805      	ldr	r0, [pc, #20]	; (8020f78 <fiprintf+0x20>)
 8020f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8020f66:	6800      	ldr	r0, [r0, #0]
 8020f68:	9301      	str	r3, [sp, #4]
 8020f6a:	f000 f857 	bl	802101c <_vfiprintf_r>
 8020f6e:	b002      	add	sp, #8
 8020f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8020f74:	b003      	add	sp, #12
 8020f76:	4770      	bx	lr
 8020f78:	2000008c 	.word	0x2000008c

08020f7c <_realloc_r>:
 8020f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f7e:	4607      	mov	r7, r0
 8020f80:	4614      	mov	r4, r2
 8020f82:	460e      	mov	r6, r1
 8020f84:	b921      	cbnz	r1, 8020f90 <_realloc_r+0x14>
 8020f86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020f8a:	4611      	mov	r1, r2
 8020f8c:	f7fc b9ea 	b.w	801d364 <_malloc_r>
 8020f90:	b922      	cbnz	r2, 8020f9c <_realloc_r+0x20>
 8020f92:	f7fc f997 	bl	801d2c4 <_free_r>
 8020f96:	4625      	mov	r5, r4
 8020f98:	4628      	mov	r0, r5
 8020f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f9c:	f000 f975 	bl	802128a <_malloc_usable_size_r>
 8020fa0:	42a0      	cmp	r0, r4
 8020fa2:	d20f      	bcs.n	8020fc4 <_realloc_r+0x48>
 8020fa4:	4621      	mov	r1, r4
 8020fa6:	4638      	mov	r0, r7
 8020fa8:	f7fc f9dc 	bl	801d364 <_malloc_r>
 8020fac:	4605      	mov	r5, r0
 8020fae:	2800      	cmp	r0, #0
 8020fb0:	d0f2      	beq.n	8020f98 <_realloc_r+0x1c>
 8020fb2:	4631      	mov	r1, r6
 8020fb4:	4622      	mov	r2, r4
 8020fb6:	f7fc f945 	bl	801d244 <memcpy>
 8020fba:	4631      	mov	r1, r6
 8020fbc:	4638      	mov	r0, r7
 8020fbe:	f7fc f981 	bl	801d2c4 <_free_r>
 8020fc2:	e7e9      	b.n	8020f98 <_realloc_r+0x1c>
 8020fc4:	4635      	mov	r5, r6
 8020fc6:	e7e7      	b.n	8020f98 <_realloc_r+0x1c>

08020fc8 <__sfputc_r>:
 8020fc8:	6893      	ldr	r3, [r2, #8]
 8020fca:	3b01      	subs	r3, #1
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	b410      	push	{r4}
 8020fd0:	6093      	str	r3, [r2, #8]
 8020fd2:	da08      	bge.n	8020fe6 <__sfputc_r+0x1e>
 8020fd4:	6994      	ldr	r4, [r2, #24]
 8020fd6:	42a3      	cmp	r3, r4
 8020fd8:	db01      	blt.n	8020fde <__sfputc_r+0x16>
 8020fda:	290a      	cmp	r1, #10
 8020fdc:	d103      	bne.n	8020fe6 <__sfputc_r+0x1e>
 8020fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020fe2:	f7fd be3b 	b.w	801ec5c <__swbuf_r>
 8020fe6:	6813      	ldr	r3, [r2, #0]
 8020fe8:	1c58      	adds	r0, r3, #1
 8020fea:	6010      	str	r0, [r2, #0]
 8020fec:	7019      	strb	r1, [r3, #0]
 8020fee:	4608      	mov	r0, r1
 8020ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020ff4:	4770      	bx	lr

08020ff6 <__sfputs_r>:
 8020ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ff8:	4606      	mov	r6, r0
 8020ffa:	460f      	mov	r7, r1
 8020ffc:	4614      	mov	r4, r2
 8020ffe:	18d5      	adds	r5, r2, r3
 8021000:	42ac      	cmp	r4, r5
 8021002:	d101      	bne.n	8021008 <__sfputs_r+0x12>
 8021004:	2000      	movs	r0, #0
 8021006:	e007      	b.n	8021018 <__sfputs_r+0x22>
 8021008:	f814 1b01 	ldrb.w	r1, [r4], #1
 802100c:	463a      	mov	r2, r7
 802100e:	4630      	mov	r0, r6
 8021010:	f7ff ffda 	bl	8020fc8 <__sfputc_r>
 8021014:	1c43      	adds	r3, r0, #1
 8021016:	d1f3      	bne.n	8021000 <__sfputs_r+0xa>
 8021018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802101c <_vfiprintf_r>:
 802101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021020:	460d      	mov	r5, r1
 8021022:	b09d      	sub	sp, #116	; 0x74
 8021024:	4614      	mov	r4, r2
 8021026:	4698      	mov	r8, r3
 8021028:	4606      	mov	r6, r0
 802102a:	b118      	cbz	r0, 8021034 <_vfiprintf_r+0x18>
 802102c:	6983      	ldr	r3, [r0, #24]
 802102e:	b90b      	cbnz	r3, 8021034 <_vfiprintf_r+0x18>
 8021030:	f7fb ffb4 	bl	801cf9c <__sinit>
 8021034:	4b89      	ldr	r3, [pc, #548]	; (802125c <_vfiprintf_r+0x240>)
 8021036:	429d      	cmp	r5, r3
 8021038:	d11b      	bne.n	8021072 <_vfiprintf_r+0x56>
 802103a:	6875      	ldr	r5, [r6, #4]
 802103c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802103e:	07d9      	lsls	r1, r3, #31
 8021040:	d405      	bmi.n	802104e <_vfiprintf_r+0x32>
 8021042:	89ab      	ldrh	r3, [r5, #12]
 8021044:	059a      	lsls	r2, r3, #22
 8021046:	d402      	bmi.n	802104e <_vfiprintf_r+0x32>
 8021048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802104a:	f7fc f884 	bl	801d156 <__retarget_lock_acquire_recursive>
 802104e:	89ab      	ldrh	r3, [r5, #12]
 8021050:	071b      	lsls	r3, r3, #28
 8021052:	d501      	bpl.n	8021058 <_vfiprintf_r+0x3c>
 8021054:	692b      	ldr	r3, [r5, #16]
 8021056:	b9eb      	cbnz	r3, 8021094 <_vfiprintf_r+0x78>
 8021058:	4629      	mov	r1, r5
 802105a:	4630      	mov	r0, r6
 802105c:	f7fd fe62 	bl	801ed24 <__swsetup_r>
 8021060:	b1c0      	cbz	r0, 8021094 <_vfiprintf_r+0x78>
 8021062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021064:	07dc      	lsls	r4, r3, #31
 8021066:	d50e      	bpl.n	8021086 <_vfiprintf_r+0x6a>
 8021068:	f04f 30ff 	mov.w	r0, #4294967295
 802106c:	b01d      	add	sp, #116	; 0x74
 802106e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021072:	4b7b      	ldr	r3, [pc, #492]	; (8021260 <_vfiprintf_r+0x244>)
 8021074:	429d      	cmp	r5, r3
 8021076:	d101      	bne.n	802107c <_vfiprintf_r+0x60>
 8021078:	68b5      	ldr	r5, [r6, #8]
 802107a:	e7df      	b.n	802103c <_vfiprintf_r+0x20>
 802107c:	4b79      	ldr	r3, [pc, #484]	; (8021264 <_vfiprintf_r+0x248>)
 802107e:	429d      	cmp	r5, r3
 8021080:	bf08      	it	eq
 8021082:	68f5      	ldreq	r5, [r6, #12]
 8021084:	e7da      	b.n	802103c <_vfiprintf_r+0x20>
 8021086:	89ab      	ldrh	r3, [r5, #12]
 8021088:	0598      	lsls	r0, r3, #22
 802108a:	d4ed      	bmi.n	8021068 <_vfiprintf_r+0x4c>
 802108c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802108e:	f7fc f863 	bl	801d158 <__retarget_lock_release_recursive>
 8021092:	e7e9      	b.n	8021068 <_vfiprintf_r+0x4c>
 8021094:	2300      	movs	r3, #0
 8021096:	9309      	str	r3, [sp, #36]	; 0x24
 8021098:	2320      	movs	r3, #32
 802109a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802109e:	f8cd 800c 	str.w	r8, [sp, #12]
 80210a2:	2330      	movs	r3, #48	; 0x30
 80210a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021268 <_vfiprintf_r+0x24c>
 80210a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80210ac:	f04f 0901 	mov.w	r9, #1
 80210b0:	4623      	mov	r3, r4
 80210b2:	469a      	mov	sl, r3
 80210b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80210b8:	b10a      	cbz	r2, 80210be <_vfiprintf_r+0xa2>
 80210ba:	2a25      	cmp	r2, #37	; 0x25
 80210bc:	d1f9      	bne.n	80210b2 <_vfiprintf_r+0x96>
 80210be:	ebba 0b04 	subs.w	fp, sl, r4
 80210c2:	d00b      	beq.n	80210dc <_vfiprintf_r+0xc0>
 80210c4:	465b      	mov	r3, fp
 80210c6:	4622      	mov	r2, r4
 80210c8:	4629      	mov	r1, r5
 80210ca:	4630      	mov	r0, r6
 80210cc:	f7ff ff93 	bl	8020ff6 <__sfputs_r>
 80210d0:	3001      	adds	r0, #1
 80210d2:	f000 80aa 	beq.w	802122a <_vfiprintf_r+0x20e>
 80210d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80210d8:	445a      	add	r2, fp
 80210da:	9209      	str	r2, [sp, #36]	; 0x24
 80210dc:	f89a 3000 	ldrb.w	r3, [sl]
 80210e0:	2b00      	cmp	r3, #0
 80210e2:	f000 80a2 	beq.w	802122a <_vfiprintf_r+0x20e>
 80210e6:	2300      	movs	r3, #0
 80210e8:	f04f 32ff 	mov.w	r2, #4294967295
 80210ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80210f0:	f10a 0a01 	add.w	sl, sl, #1
 80210f4:	9304      	str	r3, [sp, #16]
 80210f6:	9307      	str	r3, [sp, #28]
 80210f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80210fc:	931a      	str	r3, [sp, #104]	; 0x68
 80210fe:	4654      	mov	r4, sl
 8021100:	2205      	movs	r2, #5
 8021102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021106:	4858      	ldr	r0, [pc, #352]	; (8021268 <_vfiprintf_r+0x24c>)
 8021108:	f7df f892 	bl	8000230 <memchr>
 802110c:	9a04      	ldr	r2, [sp, #16]
 802110e:	b9d8      	cbnz	r0, 8021148 <_vfiprintf_r+0x12c>
 8021110:	06d1      	lsls	r1, r2, #27
 8021112:	bf44      	itt	mi
 8021114:	2320      	movmi	r3, #32
 8021116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802111a:	0713      	lsls	r3, r2, #28
 802111c:	bf44      	itt	mi
 802111e:	232b      	movmi	r3, #43	; 0x2b
 8021120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021124:	f89a 3000 	ldrb.w	r3, [sl]
 8021128:	2b2a      	cmp	r3, #42	; 0x2a
 802112a:	d015      	beq.n	8021158 <_vfiprintf_r+0x13c>
 802112c:	9a07      	ldr	r2, [sp, #28]
 802112e:	4654      	mov	r4, sl
 8021130:	2000      	movs	r0, #0
 8021132:	f04f 0c0a 	mov.w	ip, #10
 8021136:	4621      	mov	r1, r4
 8021138:	f811 3b01 	ldrb.w	r3, [r1], #1
 802113c:	3b30      	subs	r3, #48	; 0x30
 802113e:	2b09      	cmp	r3, #9
 8021140:	d94e      	bls.n	80211e0 <_vfiprintf_r+0x1c4>
 8021142:	b1b0      	cbz	r0, 8021172 <_vfiprintf_r+0x156>
 8021144:	9207      	str	r2, [sp, #28]
 8021146:	e014      	b.n	8021172 <_vfiprintf_r+0x156>
 8021148:	eba0 0308 	sub.w	r3, r0, r8
 802114c:	fa09 f303 	lsl.w	r3, r9, r3
 8021150:	4313      	orrs	r3, r2
 8021152:	9304      	str	r3, [sp, #16]
 8021154:	46a2      	mov	sl, r4
 8021156:	e7d2      	b.n	80210fe <_vfiprintf_r+0xe2>
 8021158:	9b03      	ldr	r3, [sp, #12]
 802115a:	1d19      	adds	r1, r3, #4
 802115c:	681b      	ldr	r3, [r3, #0]
 802115e:	9103      	str	r1, [sp, #12]
 8021160:	2b00      	cmp	r3, #0
 8021162:	bfbb      	ittet	lt
 8021164:	425b      	neglt	r3, r3
 8021166:	f042 0202 	orrlt.w	r2, r2, #2
 802116a:	9307      	strge	r3, [sp, #28]
 802116c:	9307      	strlt	r3, [sp, #28]
 802116e:	bfb8      	it	lt
 8021170:	9204      	strlt	r2, [sp, #16]
 8021172:	7823      	ldrb	r3, [r4, #0]
 8021174:	2b2e      	cmp	r3, #46	; 0x2e
 8021176:	d10c      	bne.n	8021192 <_vfiprintf_r+0x176>
 8021178:	7863      	ldrb	r3, [r4, #1]
 802117a:	2b2a      	cmp	r3, #42	; 0x2a
 802117c:	d135      	bne.n	80211ea <_vfiprintf_r+0x1ce>
 802117e:	9b03      	ldr	r3, [sp, #12]
 8021180:	1d1a      	adds	r2, r3, #4
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	9203      	str	r2, [sp, #12]
 8021186:	2b00      	cmp	r3, #0
 8021188:	bfb8      	it	lt
 802118a:	f04f 33ff 	movlt.w	r3, #4294967295
 802118e:	3402      	adds	r4, #2
 8021190:	9305      	str	r3, [sp, #20]
 8021192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021278 <_vfiprintf_r+0x25c>
 8021196:	7821      	ldrb	r1, [r4, #0]
 8021198:	2203      	movs	r2, #3
 802119a:	4650      	mov	r0, sl
 802119c:	f7df f848 	bl	8000230 <memchr>
 80211a0:	b140      	cbz	r0, 80211b4 <_vfiprintf_r+0x198>
 80211a2:	2340      	movs	r3, #64	; 0x40
 80211a4:	eba0 000a 	sub.w	r0, r0, sl
 80211a8:	fa03 f000 	lsl.w	r0, r3, r0
 80211ac:	9b04      	ldr	r3, [sp, #16]
 80211ae:	4303      	orrs	r3, r0
 80211b0:	3401      	adds	r4, #1
 80211b2:	9304      	str	r3, [sp, #16]
 80211b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80211b8:	482c      	ldr	r0, [pc, #176]	; (802126c <_vfiprintf_r+0x250>)
 80211ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80211be:	2206      	movs	r2, #6
 80211c0:	f7df f836 	bl	8000230 <memchr>
 80211c4:	2800      	cmp	r0, #0
 80211c6:	d03f      	beq.n	8021248 <_vfiprintf_r+0x22c>
 80211c8:	4b29      	ldr	r3, [pc, #164]	; (8021270 <_vfiprintf_r+0x254>)
 80211ca:	bb1b      	cbnz	r3, 8021214 <_vfiprintf_r+0x1f8>
 80211cc:	9b03      	ldr	r3, [sp, #12]
 80211ce:	3307      	adds	r3, #7
 80211d0:	f023 0307 	bic.w	r3, r3, #7
 80211d4:	3308      	adds	r3, #8
 80211d6:	9303      	str	r3, [sp, #12]
 80211d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211da:	443b      	add	r3, r7
 80211dc:	9309      	str	r3, [sp, #36]	; 0x24
 80211de:	e767      	b.n	80210b0 <_vfiprintf_r+0x94>
 80211e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80211e4:	460c      	mov	r4, r1
 80211e6:	2001      	movs	r0, #1
 80211e8:	e7a5      	b.n	8021136 <_vfiprintf_r+0x11a>
 80211ea:	2300      	movs	r3, #0
 80211ec:	3401      	adds	r4, #1
 80211ee:	9305      	str	r3, [sp, #20]
 80211f0:	4619      	mov	r1, r3
 80211f2:	f04f 0c0a 	mov.w	ip, #10
 80211f6:	4620      	mov	r0, r4
 80211f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80211fc:	3a30      	subs	r2, #48	; 0x30
 80211fe:	2a09      	cmp	r2, #9
 8021200:	d903      	bls.n	802120a <_vfiprintf_r+0x1ee>
 8021202:	2b00      	cmp	r3, #0
 8021204:	d0c5      	beq.n	8021192 <_vfiprintf_r+0x176>
 8021206:	9105      	str	r1, [sp, #20]
 8021208:	e7c3      	b.n	8021192 <_vfiprintf_r+0x176>
 802120a:	fb0c 2101 	mla	r1, ip, r1, r2
 802120e:	4604      	mov	r4, r0
 8021210:	2301      	movs	r3, #1
 8021212:	e7f0      	b.n	80211f6 <_vfiprintf_r+0x1da>
 8021214:	ab03      	add	r3, sp, #12
 8021216:	9300      	str	r3, [sp, #0]
 8021218:	462a      	mov	r2, r5
 802121a:	4b16      	ldr	r3, [pc, #88]	; (8021274 <_vfiprintf_r+0x258>)
 802121c:	a904      	add	r1, sp, #16
 802121e:	4630      	mov	r0, r6
 8021220:	f7fc f99a 	bl	801d558 <_printf_float>
 8021224:	4607      	mov	r7, r0
 8021226:	1c78      	adds	r0, r7, #1
 8021228:	d1d6      	bne.n	80211d8 <_vfiprintf_r+0x1bc>
 802122a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802122c:	07d9      	lsls	r1, r3, #31
 802122e:	d405      	bmi.n	802123c <_vfiprintf_r+0x220>
 8021230:	89ab      	ldrh	r3, [r5, #12]
 8021232:	059a      	lsls	r2, r3, #22
 8021234:	d402      	bmi.n	802123c <_vfiprintf_r+0x220>
 8021236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021238:	f7fb ff8e 	bl	801d158 <__retarget_lock_release_recursive>
 802123c:	89ab      	ldrh	r3, [r5, #12]
 802123e:	065b      	lsls	r3, r3, #25
 8021240:	f53f af12 	bmi.w	8021068 <_vfiprintf_r+0x4c>
 8021244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021246:	e711      	b.n	802106c <_vfiprintf_r+0x50>
 8021248:	ab03      	add	r3, sp, #12
 802124a:	9300      	str	r3, [sp, #0]
 802124c:	462a      	mov	r2, r5
 802124e:	4b09      	ldr	r3, [pc, #36]	; (8021274 <_vfiprintf_r+0x258>)
 8021250:	a904      	add	r1, sp, #16
 8021252:	4630      	mov	r0, r6
 8021254:	f7fc fc24 	bl	801daa0 <_printf_i>
 8021258:	e7e4      	b.n	8021224 <_vfiprintf_r+0x208>
 802125a:	bf00      	nop
 802125c:	08022018 	.word	0x08022018
 8021260:	08022038 	.word	0x08022038
 8021264:	08021ff8 	.word	0x08021ff8
 8021268:	08022374 	.word	0x08022374
 802126c:	0802237e 	.word	0x0802237e
 8021270:	0801d559 	.word	0x0801d559
 8021274:	08020ff7 	.word	0x08020ff7
 8021278:	0802237a 	.word	0x0802237a

0802127c <abort>:
 802127c:	b508      	push	{r3, lr}
 802127e:	2006      	movs	r0, #6
 8021280:	f000 f834 	bl	80212ec <raise>
 8021284:	2001      	movs	r0, #1
 8021286:	f7fb fcf5 	bl	801cc74 <_exit>

0802128a <_malloc_usable_size_r>:
 802128a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802128e:	1f18      	subs	r0, r3, #4
 8021290:	2b00      	cmp	r3, #0
 8021292:	bfbc      	itt	lt
 8021294:	580b      	ldrlt	r3, [r1, r0]
 8021296:	18c0      	addlt	r0, r0, r3
 8021298:	4770      	bx	lr

0802129a <_raise_r>:
 802129a:	291f      	cmp	r1, #31
 802129c:	b538      	push	{r3, r4, r5, lr}
 802129e:	4604      	mov	r4, r0
 80212a0:	460d      	mov	r5, r1
 80212a2:	d904      	bls.n	80212ae <_raise_r+0x14>
 80212a4:	2316      	movs	r3, #22
 80212a6:	6003      	str	r3, [r0, #0]
 80212a8:	f04f 30ff 	mov.w	r0, #4294967295
 80212ac:	bd38      	pop	{r3, r4, r5, pc}
 80212ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80212b0:	b112      	cbz	r2, 80212b8 <_raise_r+0x1e>
 80212b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80212b6:	b94b      	cbnz	r3, 80212cc <_raise_r+0x32>
 80212b8:	4620      	mov	r0, r4
 80212ba:	f000 f831 	bl	8021320 <_getpid_r>
 80212be:	462a      	mov	r2, r5
 80212c0:	4601      	mov	r1, r0
 80212c2:	4620      	mov	r0, r4
 80212c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80212c8:	f000 b818 	b.w	80212fc <_kill_r>
 80212cc:	2b01      	cmp	r3, #1
 80212ce:	d00a      	beq.n	80212e6 <_raise_r+0x4c>
 80212d0:	1c59      	adds	r1, r3, #1
 80212d2:	d103      	bne.n	80212dc <_raise_r+0x42>
 80212d4:	2316      	movs	r3, #22
 80212d6:	6003      	str	r3, [r0, #0]
 80212d8:	2001      	movs	r0, #1
 80212da:	e7e7      	b.n	80212ac <_raise_r+0x12>
 80212dc:	2400      	movs	r4, #0
 80212de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80212e2:	4628      	mov	r0, r5
 80212e4:	4798      	blx	r3
 80212e6:	2000      	movs	r0, #0
 80212e8:	e7e0      	b.n	80212ac <_raise_r+0x12>
	...

080212ec <raise>:
 80212ec:	4b02      	ldr	r3, [pc, #8]	; (80212f8 <raise+0xc>)
 80212ee:	4601      	mov	r1, r0
 80212f0:	6818      	ldr	r0, [r3, #0]
 80212f2:	f7ff bfd2 	b.w	802129a <_raise_r>
 80212f6:	bf00      	nop
 80212f8:	2000008c 	.word	0x2000008c

080212fc <_kill_r>:
 80212fc:	b538      	push	{r3, r4, r5, lr}
 80212fe:	4d07      	ldr	r5, [pc, #28]	; (802131c <_kill_r+0x20>)
 8021300:	2300      	movs	r3, #0
 8021302:	4604      	mov	r4, r0
 8021304:	4608      	mov	r0, r1
 8021306:	4611      	mov	r1, r2
 8021308:	602b      	str	r3, [r5, #0]
 802130a:	f7fb fca3 	bl	801cc54 <_kill>
 802130e:	1c43      	adds	r3, r0, #1
 8021310:	d102      	bne.n	8021318 <_kill_r+0x1c>
 8021312:	682b      	ldr	r3, [r5, #0]
 8021314:	b103      	cbz	r3, 8021318 <_kill_r+0x1c>
 8021316:	6023      	str	r3, [r4, #0]
 8021318:	bd38      	pop	{r3, r4, r5, pc}
 802131a:	bf00      	nop
 802131c:	20019220 	.word	0x20019220

08021320 <_getpid_r>:
 8021320:	f7fb bc90 	b.w	801cc44 <_getpid>

08021324 <_init>:
 8021324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021326:	bf00      	nop
 8021328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802132a:	bc08      	pop	{r3}
 802132c:	469e      	mov	lr, r3
 802132e:	4770      	bx	lr

08021330 <_fini>:
 8021330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021332:	bf00      	nop
 8021334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021336:	bc08      	pop	{r3}
 8021338:	469e      	mov	lr, r3
 802133a:	4770      	bx	lr
