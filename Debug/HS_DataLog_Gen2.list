
HS_DataLog_Gen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021d7c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c4  08021f40  08021f40  00031f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023004  08023004  00040260  2**0
                  CONTENTS
  4 .ARM          00000008  08023004  08023004  00033004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802300c  0802300c  00040260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802300c  0802300c  0003300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023010  08023010  00033010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  08023014  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00040260  2**0
                  CONTENTS
 10 .bss          00018fe8  20000260  20000260  00040260  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20019248  20019248  00040260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040260  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007e28a  00000000  00000000  00040290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b28b  00000000  00000000  000be51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004290  00000000  00000000  000c97a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003e88  00000000  00000000  000cda38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00048baa  00000000  00000000  000d18c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005abcd  00000000  00000000  0011a46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016f203  00000000  00000000  00175037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002e423a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00012ff4  00000000  00000000  002e4290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000260 	.word	0x20000260
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08021f24 	.word	0x08021f24

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000264 	.word	0x20000264
 80001fc:	08021f24 	.word	0x08021f24

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <HSD_JSON_set_allocation_functions>:
* @param  malloc_function: malloc() implementation
* @param  free_function: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_set_allocation_functions(void * (*malloc_function)(size_t), void (*free_function)(void *))
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  json_set_allocation_functions(malloc_function, free_function);
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f01c fb85 	bl	801d758 <json_set_allocation_functions>
  JSON_free_function = free_function;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HSD_JSON_set_allocation_functions+0x24>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	6013      	str	r3, [r2, #0]
  return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000027c 	.word	0x2000027c

08001064 <HSD_JSON_free>:

int32_t HSD_JSON_free(void * mem)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  JSON_free_function(mem);
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HSD_JSON_free+0x1c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	4798      	blx	r3
  return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000027c 	.word	0x2000027c

08001084 <HSD_JSON_serialize_Device>:
* @param  Device: COM_Device_t struct instance to be serialized 
* @param  SerializedJSON: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_serialize_Device(COM_Device_t *Device, char **SerializedJSON, uint8_t pretty)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]
  return get_JSON_from_Device(Device, SerializedJSON, pretty);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	461a      	mov	r2, r3
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 f813 	bl	80010c4 <get_JSON_from_Device>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HSD_JSON_parse_Device>:
{
  return get_JSON_from_SubSensorStatus(SubSensorStatus, SerializedJSON);
}

int32_t HSD_JSON_parse_Device(char *SerializedJSON, COM_Device_t *Device)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  return parse_Device_from_JSON(SerializedJSON, Device);
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f87f 	bl	80011b8 <parse_Device_from_JSON>
 80010ba:	4603      	mov	r3, r0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <get_JSON_from_Device>:
}


/* Private function ----------------------------------------------------------*/
static int32_t get_JSON_from_Device(COM_Device_t *device, char **serialized_string, uint8_t pretty)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	4613      	mov	r3, r2
 80010d0:	71fb      	strb	r3, [r7, #7]
  JSON_Object *JSON_Device;
  JSON_Array *JSON_SensorArray;
  uint32_t size;
  uint32_t i;
  
  tempJSON = json_value_init_object();
 80010d2:	f01b ff99 	bl	801d008 <json_value_init_object>
 80010d6:	61f8      	str	r0, [r7, #28]
  JSON_Device = json_value_get_object(tempJSON);
 80010d8:	69f8      	ldr	r0, [r7, #28]
 80010da:	f01b ff02 	bl	801cee2 <json_value_get_object>
 80010de:	61b8      	str	r0, [r7, #24]
  
  json_object_dotset_string(JSON_Device, "device.deviceInfo.serialNumber", device->deviceDescriptor.serialNumber);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4930      	ldr	r1, [pc, #192]	; (80011a8 <get_JSON_from_Device+0xe4>)
 80010e6:	69b8      	ldr	r0, [r7, #24]
 80010e8:	f01c fac8 	bl	801d67c <json_object_dotset_string>
  json_object_dotset_string(JSON_Device, "device.deviceInfo.alias", device->deviceDescriptor.alias);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3315      	adds	r3, #21
 80010f0:	461a      	mov	r2, r3
 80010f2:	492e      	ldr	r1, [pc, #184]	; (80011ac <get_JSON_from_Device+0xe8>)
 80010f4:	69b8      	ldr	r0, [r7, #24]
 80010f6:	f01c fac1 	bl	801d67c <json_object_dotset_string>
  json_object_dotset_number(JSON_Device, "device.deviceInfo.nSensor", device->deviceDescriptor.nSensor);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa28 	bl	8000554 <__aeabi_ui2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	ec43 2b10 	vmov	d0, r2, r3
 800110c:	4928      	ldr	r1, [pc, #160]	; (80011b0 <get_JSON_from_Device+0xec>)
 800110e:	69b8      	ldr	r0, [r7, #24]
 8001110:	f01c fad8 	bl	801d6c4 <json_object_dotset_number>
  
  json_object_dotset_value(JSON_Device, "device.sensor", json_value_init_array());
 8001114:	f01b ffa4 	bl	801d060 <json_value_init_array>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4925      	ldr	r1, [pc, #148]	; (80011b4 <get_JSON_from_Device+0xf0>)
 800111e:	69b8      	ldr	r0, [r7, #24]
 8001120:	f01c fa1f 	bl	801d562 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_Device, "device.sensor");
 8001124:	4923      	ldr	r1, [pc, #140]	; (80011b4 <get_JSON_from_Device+0xf0>)
 8001126:	69b8      	ldr	r0, [r7, #24]
 8001128:	f01b fe10 	bl	801cd4c <json_object_dotget_array>
 800112c:	6178      	str	r0, [r7, #20]
  
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
 8001132:	e013      	b.n	800115c <get_JSON_from_Device+0x98>
  {        
    tempJSON1 = json_value_init_object();  
 8001134:	f01b ff68 	bl	801d008 <json_value_init_object>
 8001138:	6138      	str	r0, [r7, #16]
    create_JSON_Sensor(device->sensors[i], tempJSON1);    
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	330a      	adds	r3, #10
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	6939      	ldr	r1, [r7, #16]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f9cd 	bl	80014e8 <create_JSON_Sensor>
    json_array_append_value(JSON_SensorArray,tempJSON1);
 800114e:	6939      	ldr	r1, [r7, #16]
 8001150:	6978      	ldr	r0, [r7, #20]
 8001152:	f01c f971 	bl	801d438 <json_array_append_value>
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	3301      	adds	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	6a3a      	ldr	r2, [r7, #32]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3e6      	bcc.n	8001134 <get_JSON_from_Device+0x70>
  }  
  
  /* convert to a json string and write to file */
  if (pretty == 1)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d10a      	bne.n	8001182 <get_JSON_from_Device+0xbe>
  {
    *serialized_string = json_serialize_to_string_pretty(tempJSON);
 800116c:	69f8      	ldr	r0, [r7, #28]
 800116e:	f01c f923 	bl	801d3b8 <json_serialize_to_string_pretty>
 8001172:	4602      	mov	r2, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	601a      	str	r2, [r3, #0]
    size = json_serialization_size_pretty(tempJSON);    
 8001178:	69f8      	ldr	r0, [r7, #28]
 800117a:	f01c f8d9 	bl	801d330 <json_serialization_size_pretty>
 800117e:	6278      	str	r0, [r7, #36]	; 0x24
 8001180:	e009      	b.n	8001196 <get_JSON_from_Device+0xd2>
  }
  else
  {
    *serialized_string = json_serialize_to_string(tempJSON);
 8001182:	69f8      	ldr	r0, [r7, #28]
 8001184:	f01c f8a2 	bl	801d2cc <json_serialize_to_string>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	601a      	str	r2, [r3, #0]
    size = json_serialization_size(tempJSON);    
 800118e:	69f8      	ldr	r0, [r7, #28]
 8001190:	f01c f858 	bl	801d244 <json_serialization_size>
 8001194:	6278      	str	r0, [r7, #36]	; 0x24
  }
  
  json_value_free(tempJSON);
 8001196:	69f8      	ldr	r0, [r7, #28]
 8001198:	f01b ff08 	bl	801cfac <json_value_free>
  
  return size;    
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08021f40 	.word	0x08021f40
 80011ac:	08021f60 	.word	0x08021f60
 80011b0:	08021f78 	.word	0x08021f78
 80011b4:	08021f94 	.word	0x08021f94

080011b8 <parse_Device_from_JSON>:
  return size;
}


static int32_t parse_Device_from_JSON(char *SerializedJSON, COM_Device_t* Device)
{  
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  char *StatusText;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f01b fd40 	bl	801cc48 <json_parse_string>
 80011c8:	6238      	str	r0, [r7, #32]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80011ca:	6a38      	ldr	r0, [r7, #32]
 80011cc:	f01b fe89 	bl	801cee2 <json_value_get_object>
 80011d0:	61f8      	str	r0, [r7, #28]
  
  if (json_object_dothas_value(JSON_ParseHandler,"device.sensor"))
 80011d2:	4921      	ldr	r1, [pc, #132]	; (8001258 <parse_Device_from_JSON+0xa0>)
 80011d4:	69f8      	ldr	r0, [r7, #28]
 80011d6:	f01b fe15 	bl	801ce04 <json_object_dothas_value>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d033      	beq.n	8001248 <parse_Device_from_JSON+0x90>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "device.sensor");    
 80011e0:	491d      	ldr	r1, [pc, #116]	; (8001258 <parse_Device_from_JSON+0xa0>)
 80011e2:	69f8      	ldr	r0, [r7, #28]
 80011e4:	f01b fdb2 	bl	801cd4c <json_object_dotget_array>
 80011e8:	61b8      	str	r0, [r7, #24]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 80011ea:	69b8      	ldr	r0, [r7, #24]
 80011ec:	f01b fe4a 	bl	801ce84 <json_array_get_count>
 80011f0:	6178      	str	r0, [r7, #20]
    
    for (ii = 0; ii < size; ii++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	e023      	b.n	8001240 <parse_Device_from_JSON+0x88>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);
 80011f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011fa:	69b8      	ldr	r0, [r7, #24]
 80011fc:	f01b fe30 	bl	801ce60 <json_array_get_object>
 8001200:	6138      	str	r0, [r7, #16]
      if (json_object_dothas_value(JSON_subSensorObj,"sensorStatus"))
 8001202:	4916      	ldr	r1, [pc, #88]	; (800125c <parse_Device_from_JSON+0xa4>)
 8001204:	6938      	ldr	r0, [r7, #16]
 8001206:	f01b fdfd 	bl	801ce04 <json_object_dothas_value>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d014      	beq.n	800123a <parse_Device_from_JSON+0x82>
      {
        StatusText = json_serialize_to_string(json_object_get_value(JSON_subSensorObj,"sensorStatus"));
 8001210:	4912      	ldr	r1, [pc, #72]	; (800125c <parse_Device_from_JSON+0xa4>)
 8001212:	6938      	ldr	r0, [r7, #16]
 8001214:	f01b fd3c 	bl	801cc90 <json_object_get_value>
 8001218:	4603      	mov	r3, r0
 800121a:	4618      	mov	r0, r3
 800121c:	f01c f856 	bl	801d2cc <json_serialize_to_string>
 8001220:	60f8      	str	r0, [r7, #12]
        parse_Status_from_JSON(StatusText, &Device->sensors[ii]->sensorStatus);
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	330a      	adds	r3, #10
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8001232:	4619      	mov	r1, r3
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 f813 	bl	8001260 <parse_Status_from_JSON>
    for (ii = 0; ii < size; ii++)
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	3301      	adds	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
 8001240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3d7      	bcc.n	80011f8 <parse_Device_from_JSON+0x40>
      }
    }
  }
  
  json_value_free(tempJSON);
 8001248:	6a38      	ldr	r0, [r7, #32]
 800124a:	f01b feaf 	bl	801cfac <json_value_free>
  
  return 0;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08021f94 	.word	0x08021f94
 800125c:	08021fa4 	.word	0x08021fa4

08001260 <parse_Status_from_JSON>:
  
  return 0;  
}
volatile  int8_t subid = -1;
static int32_t parse_Status_from_JSON(char *SerializedJSON, COM_SensorStatus_t * sensorStatus)
{  
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f01b fcec 	bl	801cc48 <json_parse_string>
 8001270:	61b8      	str	r0, [r7, #24]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8001272:	69b8      	ldr	r0, [r7, #24]
 8001274:	f01b fe35 	bl	801cee2 <json_value_get_object>
 8001278:	6178      	str	r0, [r7, #20]
  
  if (json_object_dothas_value(JSON_ParseHandler,"odr"))
 800127a:	4990      	ldr	r1, [pc, #576]	; (80014bc <parse_Status_from_JSON+0x25c>)
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f01b fdc1 	bl	801ce04 <json_object_dothas_value>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00c      	beq.n	80012a2 <parse_Status_from_JSON+0x42>
  {
    sensorStatus->ODR = json_object_dotget_number(JSON_ParseHandler, "odr");
 8001288:	498c      	ldr	r1, [pc, #560]	; (80014bc <parse_Status_from_JSON+0x25c>)
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f01b fd46 	bl	801cd1c <json_object_dotget_number>
 8001290:	ec53 2b10 	vmov	r2, r3, d0
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fcce 	bl	8000c38 <__aeabi_d2f>
 800129c:	4602      	mov	r2, r0
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	601a      	str	r2, [r3, #0]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"usbDataPacketSize"))
 80012a2:	4987      	ldr	r1, [pc, #540]	; (80014c0 <parse_Status_from_JSON+0x260>)
 80012a4:	6978      	ldr	r0, [r7, #20]
 80012a6:	f01b fdad 	bl	801ce04 <json_object_dothas_value>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00d      	beq.n	80012cc <parse_Status_from_JSON+0x6c>
  {
    sensorStatus->usbDataPacketSize = (uint16_t) json_object_dotget_number(JSON_ParseHandler, "usbDataPacketSize");
 80012b0:	4983      	ldr	r1, [pc, #524]	; (80014c0 <parse_Status_from_JSON+0x260>)
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f01b fd32 	bl	801cd1c <json_object_dotget_number>
 80012b8:	ec53 2b10 	vmov	r2, r3, d0
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc9a 	bl	8000bf8 <__aeabi_d2uiz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	821a      	strh	r2, [r3, #16]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"sdWriteBufferSize"))
 80012cc:	497d      	ldr	r1, [pc, #500]	; (80014c4 <parse_Status_from_JSON+0x264>)
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f01b fd98 	bl	801ce04 <json_object_dothas_value>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <parse_Status_from_JSON+0x94>
  {
    sensorStatus->sdWriteBufferSize = (uint32_t) json_object_dotget_number(JSON_ParseHandler, "sdWriteBufferSize");
 80012da:	497a      	ldr	r1, [pc, #488]	; (80014c4 <parse_Status_from_JSON+0x264>)
 80012dc:	6978      	ldr	r0, [r7, #20]
 80012de:	f01b fd1d 	bl	801cd1c <json_object_dotget_number>
 80012e2:	ec53 2b10 	vmov	r2, r3, d0
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc85 	bl	8000bf8 <__aeabi_d2uiz>
 80012ee:	4602      	mov	r2, r0
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	615a      	str	r2, [r3, #20]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"comChannelNumber"))
 80012f4:	4974      	ldr	r1, [pc, #464]	; (80014c8 <parse_Status_from_JSON+0x268>)
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f01b fd84 	bl	801ce04 <json_object_dothas_value>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00d      	beq.n	800131e <parse_Status_from_JSON+0xbe>
  {
    sensorStatus->comChannelNumber = (int16_t) json_object_dotget_number(JSON_ParseHandler, "comChannelNumber");
 8001302:	4971      	ldr	r1, [pc, #452]	; (80014c8 <parse_Status_from_JSON+0x268>)
 8001304:	6978      	ldr	r0, [r7, #20]
 8001306:	f01b fd09 	bl	801cd1c <json_object_dotget_number>
 800130a:	ec53 2b10 	vmov	r2, r3, d0
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc49 	bl	8000ba8 <__aeabi_d2iz>
 8001316:	4603      	mov	r3, r0
 8001318:	b21a      	sxth	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	831a      	strh	r2, [r3, #24]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"samplesPerTs"))
 800131e:	496b      	ldr	r1, [pc, #428]	; (80014cc <parse_Status_from_JSON+0x26c>)
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f01b fd6f 	bl	801ce04 <json_object_dothas_value>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00d      	beq.n	8001348 <parse_Status_from_JSON+0xe8>
  {
    sensorStatus->samplesPerTimestamp = (uint16_t)json_object_dotget_number(JSON_ParseHandler, "samplesPerTs");
 800132c:	4967      	ldr	r1, [pc, #412]	; (80014cc <parse_Status_from_JSON+0x26c>)
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f01b fcf4 	bl	801cd1c <json_object_dotget_number>
 8001334:	ec53 2b10 	vmov	r2, r3, d0
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fc5c 	bl	8000bf8 <__aeabi_d2uiz>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	819a      	strh	r2, [r3, #12]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"isActive"))
 8001348:	4961      	ldr	r1, [pc, #388]	; (80014d0 <parse_Status_from_JSON+0x270>)
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f01b fd5a 	bl	801ce04 <json_object_dothas_value>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00d      	beq.n	8001372 <parse_Status_from_JSON+0x112>
  {
    if (json_object_dotget_boolean(JSON_ParseHandler,"isActive") == 1)
 8001356:	495e      	ldr	r1, [pc, #376]	; (80014d0 <parse_Status_from_JSON+0x270>)
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f01b fd09 	bl	801cd70 <json_object_dotget_boolean>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d103      	bne.n	800136c <parse_Status_from_JSON+0x10c>
    {
      sensorStatus->isActive = 1;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	739a      	strb	r2, [r3, #14]
 800136a:	e002      	b.n	8001372 <parse_Status_from_JSON+0x112>
    }
    else 
    {
      sensorStatus->isActive = 0;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	739a      	strb	r2, [r3, #14]
    }
  }
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorStatus"))
 8001372:	4958      	ldr	r1, [pc, #352]	; (80014d4 <parse_Status_from_JSON+0x274>)
 8001374:	6978      	ldr	r0, [r7, #20]
 8001376:	f01b fd45 	bl	801ce04 <json_object_dothas_value>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8094 	beq.w	80014aa <parse_Status_from_JSON+0x24a>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "subSensorStatus");    
 8001382:	4954      	ldr	r1, [pc, #336]	; (80014d4 <parse_Status_from_JSON+0x274>)
 8001384:	6978      	ldr	r0, [r7, #20]
 8001386:	f01b fce1 	bl	801cd4c <json_object_dotget_array>
 800138a:	6138      	str	r0, [r7, #16]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 800138c:	6938      	ldr	r0, [r7, #16]
 800138e:	f01b fd79 	bl	801ce84 <json_array_get_count>
 8001392:	60f8      	str	r0, [r7, #12]
    
    for (ii = 0; ii < size; ii++)
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	e082      	b.n	80014a0 <parse_Status_from_JSON+0x240>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);      
 800139a:	69f9      	ldr	r1, [r7, #28]
 800139c:	6938      	ldr	r0, [r7, #16]
 800139e:	f01b fd5f 	bl	801ce60 <json_array_get_object>
 80013a2:	60b8      	str	r0, [r7, #8]
      
      if (json_object_dothas_value(JSON_subSensorObj,"id"))  
 80013a4:	494c      	ldr	r1, [pc, #304]	; (80014d8 <parse_Status_from_JSON+0x278>)
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	f01b fd2c 	bl	801ce04 <json_object_dothas_value>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00e      	beq.n	80013d0 <parse_Status_from_JSON+0x170>
      {
        subid = (int8_t)json_object_dotget_number(JSON_subSensorObj, "id");
 80013b2:	4949      	ldr	r1, [pc, #292]	; (80014d8 <parse_Status_from_JSON+0x278>)
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f01b fcb1 	bl	801cd1c <json_object_dotget_number>
 80013ba:	ec53 2b10 	vmov	r2, r3, d0
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fbf1 	bl	8000ba8 <__aeabi_d2iz>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b25a      	sxtb	r2, r3
 80013ca:	4b44      	ldr	r3, [pc, #272]	; (80014dc <parse_Status_from_JSON+0x27c>)
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e003      	b.n	80013d8 <parse_Status_from_JSON+0x178>
      }
      else
      {
        subid = ii;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	b25a      	sxtb	r2, r3
 80013d4:	4b41      	ldr	r3, [pc, #260]	; (80014dc <parse_Status_from_JSON+0x27c>)
 80013d6:	701a      	strb	r2, [r3, #0]
      }
      
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 80013d8:	4941      	ldr	r1, [pc, #260]	; (80014e0 <parse_Status_from_JSON+0x280>)
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f01b fd12 	bl	801ce04 <json_object_dothas_value>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d014      	beq.n	8001410 <parse_Status_from_JSON+0x1b0>
      {
        sensorStatus->subSensorStatus[subid].FS = json_object_dotget_number(JSON_subSensorObj, "fs");
 80013e6:	493e      	ldr	r1, [pc, #248]	; (80014e0 <parse_Status_from_JSON+0x280>)
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	f01b fc97 	bl	801cd1c <json_object_dotget_number>
 80013ee:	ec51 0b10 	vmov	r0, r1, d0
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <parse_Status_from_JSON+0x27c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	461c      	mov	r4, r3
 80013fa:	f7ff fc1d 	bl	8000c38 <__aeabi_d2f>
 80013fe:	4601      	mov	r1, r0
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	4623      	mov	r3, r4
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4423      	add	r3, r4
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	331c      	adds	r3, #28
 800140e:	6019      	str	r1, [r3, #0]
      }
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 8001410:	4934      	ldr	r1, [pc, #208]	; (80014e4 <parse_Status_from_JSON+0x284>)
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f01b fcf6 	bl	801ce04 <json_object_dothas_value>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d014      	beq.n	8001448 <parse_Status_from_JSON+0x1e8>
      {
        sensorStatus->subSensorStatus[subid].sensitivity = json_object_dotget_number(JSON_subSensorObj, "sensitivity");
 800141e:	4931      	ldr	r1, [pc, #196]	; (80014e4 <parse_Status_from_JSON+0x284>)
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f01b fc7b 	bl	801cd1c <json_object_dotget_number>
 8001426:	ec51 0b10 	vmov	r0, r1, d0
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <parse_Status_from_JSON+0x27c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b25b      	sxtb	r3, r3
 8001430:	461c      	mov	r4, r3
 8001432:	f7ff fc01 	bl	8000c38 <__aeabi_d2f>
 8001436:	4601      	mov	r1, r0
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4623      	mov	r3, r4
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4423      	add	r3, r4
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3320      	adds	r3, #32
 8001446:	6019      	str	r1, [r3, #0]
      }      
      if (json_object_dothas_value(JSON_subSensorObj,"isActive"))
 8001448:	4921      	ldr	r1, [pc, #132]	; (80014d0 <parse_Status_from_JSON+0x270>)
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f01b fcda 	bl	801ce04 <json_object_dothas_value>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d021      	beq.n	800149a <parse_Status_from_JSON+0x23a>
      {
        if (json_object_dotget_boolean(JSON_subSensorObj,"isActive") == 1)
 8001456:	491e      	ldr	r1, [pc, #120]	; (80014d0 <parse_Status_from_JSON+0x270>)
 8001458:	68b8      	ldr	r0, [r7, #8]
 800145a:	f01b fc89 	bl	801cd70 <json_object_dotget_boolean>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d10d      	bne.n	8001480 <parse_Status_from_JSON+0x220>
        {
          sensorStatus->subSensorStatus[subid].isActive = 1;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <parse_Status_from_JSON+0x27c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	460b      	mov	r3, r1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	440b      	add	r3, r1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3324      	adds	r3, #36	; 0x24
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e00c      	b.n	800149a <parse_Status_from_JSON+0x23a>
        }
        else 
        {
          sensorStatus->subSensorStatus[subid].isActive = 0;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <parse_Status_from_JSON+0x27c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	460b      	mov	r3, r1
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	440b      	add	r3, r1
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3324      	adds	r3, #36	; 0x24
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
    for (ii = 0; ii < size; ii++)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3301      	adds	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f4ff af78 	bcc.w	800139a <parse_Status_from_JSON+0x13a>
        }
      }
    }
  }  
  json_value_free(tempJSON);
 80014aa:	69b8      	ldr	r0, [r7, #24]
 80014ac:	f01b fd7e 	bl	801cfac <json_value_free>
  
  return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	0802201c 	.word	0x0802201c
 80014c0:	08022020 	.word	0x08022020
 80014c4:	08022034 	.word	0x08022034
 80014c8:	08022048 	.word	0x08022048
 80014cc:	0802205c 	.word	0x0802205c
 80014d0:	0802206c 	.word	0x0802206c
 80014d4:	08022078 	.word	0x08022078
 80014d8:	08022088 	.word	0x08022088
 80014dc:	20000000 	.word	0x20000000
 80014e0:	0802208c 	.word	0x0802208c
 80014e4:	08022090 	.word	0x08022090

080014e8 <create_JSON_Sensor>:
  
}


static void create_JSON_Sensor(COM_Sensor_t *sensor, JSON_Value *tempJSON)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON1;
  JSON_Value *tempJSON2;
  JSON_Array *JSON_SensorArray1;
  JSON_Array *JSON_SensorArray2;
  uint32_t ii = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t nSubSensors = sensor->sensorDescriptor.nSubSensors; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80014fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t nSensor = sensor->sensorDescriptor.id;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  
  JSON_Object *JSON_Sensor = json_value_get_object(tempJSON);
 8001508:	6838      	ldr	r0, [r7, #0]
 800150a:	f01b fcea 	bl	801cee2 <json_value_get_object>
 800150e:	6278      	str	r0, [r7, #36]	; 0x24
  
  json_object_dotset_number(JSON_Sensor, "id", nSensor);
 8001510:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f81d 	bl	8000554 <__aeabi_ui2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ec43 2b10 	vmov	d0, r2, r3
 8001522:	493e      	ldr	r1, [pc, #248]	; (800161c <create_JSON_Sensor+0x134>)
 8001524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001526:	f01c f8cd 	bl	801d6c4 <json_object_dotset_number>
  
  JSON_Value *DescriptorJSON = json_value_init_object();
 800152a:	f01b fd6d 	bl	801d008 <json_value_init_object>
 800152e:	6238      	str	r0, [r7, #32]
  json_object_set_value(JSON_Sensor, "sensorDescriptor", DescriptorJSON);
 8001530:	6a3a      	ldr	r2, [r7, #32]
 8001532:	493b      	ldr	r1, [pc, #236]	; (8001620 <create_JSON_Sensor+0x138>)
 8001534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001536:	f01b ffbe 	bl	801d4b6 <json_object_set_value>
  create_JSON_SensorDescriptor(&sensor->sensorDescriptor, DescriptorJSON); 
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a39      	ldr	r1, [r7, #32]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f876 	bl	8001630 <create_JSON_SensorDescriptor>
  
  json_object_dotset_value(JSON_Sensor, "sensorDescriptor.subSensorDescriptor", json_value_init_array());
 8001544:	f01b fd8c 	bl	801d060 <json_value_init_array>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4935      	ldr	r1, [pc, #212]	; (8001624 <create_JSON_Sensor+0x13c>)
 800154e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001550:	f01c f807 	bl	801d562 <json_object_dotset_value>
  
  JSON_SensorArray1 = json_object_dotget_array(JSON_Sensor, "sensorDescriptor.subSensorDescriptor"); 
 8001554:	4933      	ldr	r1, [pc, #204]	; (8001624 <create_JSON_Sensor+0x13c>)
 8001556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001558:	f01b fbf8 	bl	801cd4c <json_object_dotget_array>
 800155c:	61f8      	str	r0, [r7, #28]
  for (ii = 0; ii < nSubSensors; ii++)
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001562:	e015      	b.n	8001590 <create_JSON_Sensor+0xa8>
  {
    tempJSON1 = json_value_init_object();  
 8001564:	f01b fd50 	bl	801d008 <json_value_init_object>
 8001568:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor->sensorDescriptor.subSensorDescriptor[ii], tempJSON1);  
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	2254      	movs	r2, #84	; 0x54
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	3358      	adds	r3, #88	; 0x58
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	3304      	adds	r3, #4
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f9cf 	bl	8001920 <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	69f8      	ldr	r0, [r7, #28]
 8001586:	f01b ff57 	bl	801d438 <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	3301      	adds	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001590:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001596:	429a      	cmp	r2, r3
 8001598:	d3e4      	bcc.n	8001564 <create_JSON_Sensor+0x7c>
  }
  
  JSON_Value *statusJSON = json_value_init_object();
 800159a:	f01b fd35 	bl	801d008 <json_value_init_object>
 800159e:	61b8      	str	r0, [r7, #24]
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4921      	ldr	r1, [pc, #132]	; (8001628 <create_JSON_Sensor+0x140>)
 80015a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015a6:	f01b ff86 	bl	801d4b6 <json_object_set_value>
  create_JSON_SensorStatus(&sensor->sensorStatus, statusJSON); 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80015b0:	69b9      	ldr	r1, [r7, #24]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f934 	bl	8001820 <create_JSON_SensorStatus>
  
  json_object_dotset_value(JSON_Sensor, "sensorStatus.subSensorStatus", json_value_init_array());
 80015b8:	f01b fd52 	bl	801d060 <json_value_init_array>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	491a      	ldr	r1, [pc, #104]	; (800162c <create_JSON_Sensor+0x144>)
 80015c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015c4:	f01b ffcd 	bl	801d562 <json_object_dotset_value>
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 80015c8:	4918      	ldr	r1, [pc, #96]	; (800162c <create_JSON_Sensor+0x144>)
 80015ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015cc:	f01b fbbe 	bl	801cd4c <json_object_dotget_array>
 80015d0:	6178      	str	r0, [r7, #20]
  for (ii = 0; ii < nSubSensors; ii++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e017      	b.n	8001608 <create_JSON_Sensor+0x120>
  {
    tempJSON2 = json_value_init_object();  
 80015d8:	f01b fd16 	bl	801d008 <json_value_init_object>
 80015dc:	6138      	str	r0, [r7, #16]
    create_JSON_SubSensorStatus(&sensor->sensorStatus.subSensorStatus[ii], tempJSON2);    
 80015de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	3308      	adds	r3, #8
 80015f2:	6939      	ldr	r1, [r7, #16]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fa5d 	bl	8001ab4 <create_JSON_SubSensorStatus>
    json_array_append_value(JSON_SensorArray2,tempJSON2);
 80015fa:	6939      	ldr	r1, [r7, #16]
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f01b ff1b 	bl	801d438 <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	3301      	adds	r3, #1
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001608:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800160c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160e:	429a      	cmp	r2, r3
 8001610:	d3e2      	bcc.n	80015d8 <create_JSON_Sensor+0xf0>
  }
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3730      	adds	r7, #48	; 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08022088 	.word	0x08022088
 8001620:	080220bc 	.word	0x080220bc
 8001624:	080220d0 	.word	0x080220d0
 8001628:	08021fa4 	.word	0x08021fa4
 800162c:	080220f8 	.word	0x080220f8

08001630 <create_JSON_SensorDescriptor>:


static void create_JSON_SensorDescriptor(COM_SensorDescriptor_t *sensor_descriptor, JSON_Value *tempJSON)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  
  JSON_Object *JSON_SensorDescriptor = json_value_get_object(tempJSON);
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f01b fc4f 	bl	801cee2 <json_value_get_object>
 8001644:	61b8      	str	r0, [r7, #24]
  JSON_Array *JSON_SensorArray1;
  JSON_Value *tempJSON1;
  
  json_object_dotset_string(JSON_SensorDescriptor, "name", sensor_descriptor->name);  
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3301      	adds	r3, #1
 800164a:	461a      	mov	r2, r3
 800164c:	4965      	ldr	r1, [pc, #404]	; (80017e4 <create_JSON_SensorDescriptor+0x1b4>)
 800164e:	69b8      	ldr	r0, [r7, #24]
 8001650:	f01c f814 	bl	801d67c <json_object_dotset_string>
  
  switch (sensor_descriptor->dataType)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7c5b      	ldrb	r3, [r3, #17]
 8001658:	2b06      	cmp	r3, #6
 800165a:	d83b      	bhi.n	80016d4 <create_JSON_SensorDescriptor+0xa4>
 800165c:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <create_JSON_SensorDescriptor+0x34>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	08001681 	.word	0x08001681
 8001668:	0800168d 	.word	0x0800168d
 800166c:	08001699 	.word	0x08001699
 8001670:	080016a5 	.word	0x080016a5
 8001674:	080016b1 	.word	0x080016b1
 8001678:	080016bd 	.word	0x080016bd
 800167c:	080016c9 	.word	0x080016c9
  {
  case DATA_TYPE_UINT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint8_t");
 8001680:	4a59      	ldr	r2, [pc, #356]	; (80017e8 <create_JSON_SensorDescriptor+0x1b8>)
 8001682:	495a      	ldr	r1, [pc, #360]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 8001684:	69b8      	ldr	r0, [r7, #24]
 8001686:	f01b fff9 	bl	801d67c <json_object_dotset_string>
    break;
 800168a:	e029      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int8_t");
 800168c:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <create_JSON_SensorDescriptor+0x1c0>)
 800168e:	4957      	ldr	r1, [pc, #348]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 8001690:	69b8      	ldr	r0, [r7, #24]
 8001692:	f01b fff3 	bl	801d67c <json_object_dotset_string>
    break;
 8001696:	e023      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint16_t");
 8001698:	4a56      	ldr	r2, [pc, #344]	; (80017f4 <create_JSON_SensorDescriptor+0x1c4>)
 800169a:	4954      	ldr	r1, [pc, #336]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 800169c:	69b8      	ldr	r0, [r7, #24]
 800169e:	f01b ffed 	bl	801d67c <json_object_dotset_string>
    break;
 80016a2:	e01d      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int16_t");
 80016a4:	4a54      	ldr	r2, [pc, #336]	; (80017f8 <create_JSON_SensorDescriptor+0x1c8>)
 80016a6:	4951      	ldr	r1, [pc, #324]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016a8:	69b8      	ldr	r0, [r7, #24]
 80016aa:	f01b ffe7 	bl	801d67c <json_object_dotset_string>
    break;
 80016ae:	e017      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint32_t");
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <create_JSON_SensorDescriptor+0x1cc>)
 80016b2:	494e      	ldr	r1, [pc, #312]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016b4:	69b8      	ldr	r0, [r7, #24]
 80016b6:	f01b ffe1 	bl	801d67c <json_object_dotset_string>
    break;
 80016ba:	e011      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int32_t");
 80016bc:	4a50      	ldr	r2, [pc, #320]	; (8001800 <create_JSON_SensorDescriptor+0x1d0>)
 80016be:	494b      	ldr	r1, [pc, #300]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016c0:	69b8      	ldr	r0, [r7, #24]
 80016c2:	f01b ffdb 	bl	801d67c <json_object_dotset_string>
    break;
 80016c6:	e00b      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_FLOAT:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "float");
 80016c8:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <create_JSON_SensorDescriptor+0x1d4>)
 80016ca:	4948      	ldr	r1, [pc, #288]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016cc:	69b8      	ldr	r0, [r7, #24]
 80016ce:	f01b ffd5 	bl	801d67c <json_object_dotset_string>
    break;
 80016d2:	e005      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  default:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "NA");
 80016d4:	4a4c      	ldr	r2, [pc, #304]	; (8001808 <create_JSON_SensorDescriptor+0x1d8>)
 80016d6:	4945      	ldr	r1, [pc, #276]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016d8:	69b8      	ldr	r0, [r7, #24]
 80016da:	f01b ffcf 	bl	801d67c <json_object_dotset_string>
    break;
 80016de:	bf00      	nop
  }  
  
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.min", sensor_descriptor->samplesPerTimestamp[0]);  
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff34 	bl	8000554 <__aeabi_ui2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	ec43 2b10 	vmov	d0, r2, r3
 80016f4:	4945      	ldr	r1, [pc, #276]	; (800180c <create_JSON_SensorDescriptor+0x1dc>)
 80016f6:	69b8      	ldr	r0, [r7, #24]
 80016f8:	f01b ffe4 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.max", sensor_descriptor->samplesPerTimestamp[1]);  
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff26 	bl	8000554 <__aeabi_ui2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	ec43 2b10 	vmov	d0, r2, r3
 8001710:	493f      	ldr	r1, [pc, #252]	; (8001810 <create_JSON_SensorDescriptor+0x1e0>)
 8001712:	69b8      	ldr	r0, [r7, #24]
 8001714:	f01b ffd6 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_string(JSON_SensorDescriptor, "samplesPerTs.dataType", "int16_t");  
 8001718:	4a37      	ldr	r2, [pc, #220]	; (80017f8 <create_JSON_SensorDescriptor+0x1c8>)
 800171a:	493e      	ldr	r1, [pc, #248]	; (8001814 <create_JSON_SensorDescriptor+0x1e4>)
 800171c:	69b8      	ldr	r0, [r7, #24]
 800171e:	f01b ffad 	bl	801d67c <json_object_dotset_string>
  
  json_object_dotset_value(JSON_SensorDescriptor, "odr.values", json_value_init_array());
 8001722:	f01b fc9d 	bl	801d060 <json_value_init_array>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	493b      	ldr	r1, [pc, #236]	; (8001818 <create_JSON_SensorDescriptor+0x1e8>)
 800172c:	69b8      	ldr	r0, [r7, #24]
 800172e:	f01b ff18 	bl	801d562 <json_object_dotset_value>
  JSON_Array *JSON_SensorArray = json_object_dotget_array(JSON_SensorDescriptor, "odr.values");
 8001732:	4939      	ldr	r1, [pc, #228]	; (8001818 <create_JSON_SensorDescriptor+0x1e8>)
 8001734:	69b8      	ldr	r0, [r7, #24]
 8001736:	f01b fb09 	bl	801cd4c <json_object_dotget_array>
 800173a:	6178      	str	r0, [r7, #20]
  
  while (sensor_descriptor->ODR[ii] > 0)
 800173c:	e013      	b.n	8001766 <create_JSON_SensorDescriptor+0x136>
  {
    json_array_append_number(JSON_SensorArray, sensor_descriptor->ODR[ii]);
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	3304      	adds	r3, #4
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3304      	adds	r3, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff23 	bl	8000598 <__aeabi_f2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	ec43 2b10 	vmov	d0, r2, r3
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f01b fe87 	bl	801d46e <json_array_append_number>
    ii++;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	3301      	adds	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
  while (sensor_descriptor->ODR[ii] > 0)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3304      	adds	r3, #4
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	3304      	adds	r3, #4
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	dcde      	bgt.n	800173e <create_JSON_SensorDescriptor+0x10e>
  }
  
  json_object_dotset_value(JSON_SensorDescriptor, "subSensorDescriptor", json_value_init_array());  
 8001780:	f01b fc6e 	bl	801d060 <json_value_init_array>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4924      	ldr	r1, [pc, #144]	; (800181c <create_JSON_SensorDescriptor+0x1ec>)
 800178a:	69b8      	ldr	r0, [r7, #24]
 800178c:	f01b fee9 	bl	801d562 <json_object_dotset_value>
  JSON_SensorArray1 = json_object_dotget_array(JSON_SensorDescriptor, "subSensorDescriptor"); 
 8001790:	4922      	ldr	r1, [pc, #136]	; (800181c <create_JSON_SensorDescriptor+0x1ec>)
 8001792:	69b8      	ldr	r0, [r7, #24]
 8001794:	f01b fada 	bl	801cd4c <json_object_dotget_array>
 8001798:	6138      	str	r0, [r7, #16]
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e015      	b.n	80017cc <create_JSON_SensorDescriptor+0x19c>
  {
    tempJSON1 = json_value_init_object();  
 80017a0:	f01b fc32 	bl	801d008 <json_value_init_object>
 80017a4:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor_descriptor->subSensorDescriptor[ii], tempJSON1);  
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	2254      	movs	r2, #84	; 0x54
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	3358      	adds	r3, #88	; 0x58
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	3304      	adds	r3, #4
 80017b6:	68f9      	ldr	r1, [r7, #12]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f8b1 	bl	8001920 <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	6938      	ldr	r0, [r7, #16]
 80017c2:	f01b fe39 	bl	801d438 <json_array_append_value>
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017d2:	461a      	mov	r2, r3
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d3e2      	bcc.n	80017a0 <create_JSON_SensorDescriptor+0x170>
  }  
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	08022118 	.word	0x08022118
 80017e8:	08022120 	.word	0x08022120
 80017ec:	08022128 	.word	0x08022128
 80017f0:	08022134 	.word	0x08022134
 80017f4:	0802213c 	.word	0x0802213c
 80017f8:	08022148 	.word	0x08022148
 80017fc:	08022150 	.word	0x08022150
 8001800:	0802215c 	.word	0x0802215c
 8001804:	08022164 	.word	0x08022164
 8001808:	0802216c 	.word	0x0802216c
 800180c:	08022170 	.word	0x08022170
 8001810:	08022184 	.word	0x08022184
 8001814:	08022198 	.word	0x08022198
 8001818:	080221b0 	.word	0x080221b0
 800181c:	080221bc 	.word	0x080221bc

08001820 <create_JSON_SensorStatus>:


static void create_JSON_SensorStatus(COM_SensorStatus_t *sensor_status, JSON_Value *tempJSON)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SensorStatus= json_value_get_object(tempJSON);
 800182a:	6838      	ldr	r0, [r7, #0]
 800182c:	f01b fb59 	bl	801cee2 <json_value_get_object>
 8001830:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SensorStatus, "odr", sensor_status->ODR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe feae 	bl	8000598 <__aeabi_f2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	ec43 2b10 	vmov	d0, r2, r3
 8001844:	492e      	ldr	r1, [pc, #184]	; (8001900 <create_JSON_SensorStatus+0xe0>)
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f01b ff3c 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "odrMeasured", sensor_status->measuredODR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fea1 	bl	8000598 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	ec43 2b10 	vmov	d0, r2, r3
 800185e:	4929      	ldr	r1, [pc, #164]	; (8001904 <create_JSON_SensorStatus+0xe4>)
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f01b ff2f 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "initialOffset", sensor_status->initialOffset);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe94 	bl	8000598 <__aeabi_f2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	ec43 2b10 	vmov	d0, r2, r3
 8001878:	4923      	ldr	r1, [pc, #140]	; (8001908 <create_JSON_SensorStatus+0xe8>)
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f01b ff22 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SensorStatus, "isActive", sensor_status->isActive);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7b9b      	ldrb	r3, [r3, #14]
 8001884:	461a      	mov	r2, r3
 8001886:	4921      	ldr	r1, [pc, #132]	; (800190c <create_JSON_SensorStatus+0xec>)
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f01b ff41 	bl	801d710 <json_object_dotset_boolean>
  json_object_dotset_number(JSON_SensorStatus, "samplesPerTs", sensor_status->samplesPerTimestamp);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	899b      	ldrh	r3, [r3, #12]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe5e 	bl	8000554 <__aeabi_ui2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	ec43 2b10 	vmov	d0, r2, r3
 80018a0:	491b      	ldr	r1, [pc, #108]	; (8001910 <create_JSON_SensorStatus+0xf0>)
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f01b ff0e 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "usbDataPacketSize", sensor_status->usbDataPacketSize);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8a1b      	ldrh	r3, [r3, #16]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe51 	bl	8000554 <__aeabi_ui2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	ec43 2b10 	vmov	d0, r2, r3
 80018ba:	4916      	ldr	r1, [pc, #88]	; (8001914 <create_JSON_SensorStatus+0xf4>)
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f01b ff01 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "sdWriteBufferSize", sensor_status->sdWriteBufferSize);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe44 	bl	8000554 <__aeabi_ui2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	ec43 2b10 	vmov	d0, r2, r3
 80018d4:	4910      	ldr	r1, [pc, #64]	; (8001918 <create_JSON_SensorStatus+0xf8>)
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f01b fef4 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "comChannelNumber", sensor_status->comChannelNumber);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe46 	bl	8000574 <__aeabi_i2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	ec43 2b10 	vmov	d0, r2, r3
 80018f0:	490a      	ldr	r1, [pc, #40]	; (800191c <create_JSON_SensorStatus+0xfc>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f01b fee6 	bl	801d6c4 <json_object_dotset_number>
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	0802201c 	.word	0x0802201c
 8001904:	080221d0 	.word	0x080221d0
 8001908:	080221dc 	.word	0x080221dc
 800190c:	0802206c 	.word	0x0802206c
 8001910:	0802205c 	.word	0x0802205c
 8001914:	08022020 	.word	0x08022020
 8001918:	08022034 	.word	0x08022034
 800191c:	08022048 	.word	0x08022048

08001920 <create_JSON_SubSensorDescriptor>:


static void create_JSON_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, JSON_Value *tempJSON)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  
  JSON_Value *tempJSONarray = json_value_init_object();
 800192e:	f01b fb6b 	bl	801d008 <json_value_init_object>
 8001932:	6138      	str	r0, [r7, #16]
  JSON_Array *JSON_SensorArray = json_value_get_array(tempJSONarray);
 8001934:	6938      	ldr	r0, [r7, #16]
 8001936:	f01b fae6 	bl	801cf06 <json_value_get_array>
 800193a:	60f8      	str	r0, [r7, #12]
  JSON_Object *JSON_SubSensorDescriptor= json_value_get_object(tempJSON);
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f01b fad0 	bl	801cee2 <json_value_get_object>
 8001942:	60b8      	str	r0, [r7, #8]
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "id", sub_sensor_descriptor->id);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe03 	bl	8000554 <__aeabi_ui2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ec43 2b10 	vmov	d0, r2, r3
 8001956:	494a      	ldr	r1, [pc, #296]	; (8001a80 <create_JSON_SubSensorDescriptor+0x160>)
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f01b feb3 	bl	801d6c4 <json_object_dotset_number>
  
  switch (sub_sensor_descriptor->sensorType)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	3b01      	subs	r3, #1
 8001964:	2b06      	cmp	r3, #6
 8001966:	d83b      	bhi.n	80019e0 <create_JSON_SubSensorDescriptor+0xc0>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <create_JSON_SubSensorDescriptor+0x50>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	0800198d 	.word	0x0800198d
 8001974:	08001999 	.word	0x08001999
 8001978:	080019a5 	.word	0x080019a5
 800197c:	080019b1 	.word	0x080019b1
 8001980:	080019bd 	.word	0x080019bd
 8001984:	080019c9 	.word	0x080019c9
 8001988:	080019d5 	.word	0x080019d5
  {
  case COM_TYPE_ACC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "ACC");
 800198c:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <create_JSON_SubSensorDescriptor+0x164>)
 800198e:	493e      	ldr	r1, [pc, #248]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f01b fe73 	bl	801d67c <json_object_dotset_string>
    break;
 8001996:	e029      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MAG:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MAG");
 8001998:	4a3c      	ldr	r2, [pc, #240]	; (8001a8c <create_JSON_SubSensorDescriptor+0x16c>)
 800199a:	493b      	ldr	r1, [pc, #236]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 800199c:	68b8      	ldr	r0, [r7, #8]
 800199e:	f01b fe6d 	bl	801d67c <json_object_dotset_string>
    break;
 80019a2:	e023      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_GYRO:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "GYRO");
 80019a4:	4a3a      	ldr	r2, [pc, #232]	; (8001a90 <create_JSON_SubSensorDescriptor+0x170>)
 80019a6:	4938      	ldr	r1, [pc, #224]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019a8:	68b8      	ldr	r0, [r7, #8]
 80019aa:	f01b fe67 	bl	801d67c <json_object_dotset_string>
    break;
 80019ae:	e01d      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_TEMP:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "TEMP");
 80019b0:	4a38      	ldr	r2, [pc, #224]	; (8001a94 <create_JSON_SubSensorDescriptor+0x174>)
 80019b2:	4935      	ldr	r1, [pc, #212]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019b4:	68b8      	ldr	r0, [r7, #8]
 80019b6:	f01b fe61 	bl	801d67c <json_object_dotset_string>
    break;
 80019ba:	e017      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_PRESS:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "PRESS");
 80019bc:	4a36      	ldr	r2, [pc, #216]	; (8001a98 <create_JSON_SubSensorDescriptor+0x178>)
 80019be:	4932      	ldr	r1, [pc, #200]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019c0:	68b8      	ldr	r0, [r7, #8]
 80019c2:	f01b fe5b 	bl	801d67c <json_object_dotset_string>
    break;
 80019c6:	e011      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_HUM:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "HUM");
 80019c8:	4a34      	ldr	r2, [pc, #208]	; (8001a9c <create_JSON_SubSensorDescriptor+0x17c>)
 80019ca:	492f      	ldr	r1, [pc, #188]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f01b fe55 	bl	801d67c <json_object_dotset_string>
    break;
 80019d2:	e00b      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MIC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MIC");
 80019d4:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <create_JSON_SubSensorDescriptor+0x180>)
 80019d6:	492c      	ldr	r1, [pc, #176]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f01b fe4f 	bl	801d67c <json_object_dotset_string>
    break;
 80019de:	e005      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  default:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "NA");
 80019e0:	4a30      	ldr	r2, [pc, #192]	; (8001aa4 <create_JSON_SubSensorDescriptor+0x184>)
 80019e2:	4929      	ldr	r1, [pc, #164]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019e4:	68b8      	ldr	r0, [r7, #8]
 80019e6:	f01b fe49 	bl	801d67c <json_object_dotset_string>
    break;      
 80019ea:	bf00      	nop
  }
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "dataPerSample", sub_sensor_descriptor->dataPerSample);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	789b      	ldrb	r3, [r3, #2]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdaf 	bl	8000554 <__aeabi_ui2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	ec43 2b10 	vmov	d0, r2, r3
 80019fe:	492a      	ldr	r1, [pc, #168]	; (8001aa8 <create_JSON_SubSensorDescriptor+0x188>)
 8001a00:	68b8      	ldr	r0, [r7, #8]
 8001a02:	f01b fe5f 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_string(JSON_SubSensorDescriptor, "unit", sub_sensor_descriptor->unit);  
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3303      	adds	r3, #3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4927      	ldr	r1, [pc, #156]	; (8001aac <create_JSON_SubSensorDescriptor+0x18c>)
 8001a0e:	68b8      	ldr	r0, [r7, #8]
 8001a10:	f01b fe34 	bl	801d67c <json_object_dotset_string>
  json_object_dotset_value(JSON_SubSensorDescriptor, "fs.values", json_value_init_array());
 8001a14:	f01b fb24 	bl	801d060 <json_value_init_array>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4924      	ldr	r1, [pc, #144]	; (8001ab0 <create_JSON_SubSensorDescriptor+0x190>)
 8001a1e:	68b8      	ldr	r0, [r7, #8]
 8001a20:	f01b fd9f 	bl	801d562 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_SubSensorDescriptor, "fs.values");
 8001a24:	4922      	ldr	r1, [pc, #136]	; (8001ab0 <create_JSON_SubSensorDescriptor+0x190>)
 8001a26:	68b8      	ldr	r0, [r7, #8]
 8001a28:	f01b f990 	bl	801cd4c <json_object_dotget_array>
 8001a2c:	60f8      	str	r0, [r7, #12]
  
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001a2e:	e013      	b.n	8001a58 <create_JSON_SubSensorDescriptor+0x138>
  {
    json_array_append_number(JSON_SensorArray, sub_sensor_descriptor->FS[ii]);
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3304      	adds	r3, #4
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fdaa 	bl	8000598 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	ec43 2b10 	vmov	d0, r2, r3
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f01b fd0e 	bl	801d46e <json_array_append_number>
    ii++;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3304      	adds	r3, #4
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	dcde      	bgt.n	8001a30 <create_JSON_SubSensorDescriptor+0x110>
  }  
  json_value_free(tempJSONarray);
 8001a72:	6938      	ldr	r0, [r7, #16]
 8001a74:	f01b fa9a 	bl	801cfac <json_value_free>
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	08022088 	.word	0x08022088
 8001a84:	080221ec 	.word	0x080221ec
 8001a88:	080221f0 	.word	0x080221f0
 8001a8c:	080221fc 	.word	0x080221fc
 8001a90:	08022200 	.word	0x08022200
 8001a94:	08022208 	.word	0x08022208
 8001a98:	08022210 	.word	0x08022210
 8001a9c:	08022218 	.word	0x08022218
 8001aa0:	0802221c 	.word	0x0802221c
 8001aa4:	0802216c 	.word	0x0802216c
 8001aa8:	08022220 	.word	0x08022220
 8001aac:	08022230 	.word	0x08022230
 8001ab0:	08022238 	.word	0x08022238

08001ab4 <create_JSON_SubSensorStatus>:


static void create_JSON_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, JSON_Value *tempJSON)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SubSensorStatus = json_value_get_object(tempJSON);
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f01b fa0f 	bl	801cee2 <json_value_get_object>
 8001ac4:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SubSensorStatus, "fs", sub_sensor_status->FS);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd64 	bl	8000598 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	ec43 2b10 	vmov	d0, r2, r3
 8001ad8:	490d      	ldr	r1, [pc, #52]	; (8001b10 <create_JSON_SubSensorStatus+0x5c>)
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f01b fdf2 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SubSensorStatus, "sensitivity", sub_sensor_status->sensitivity);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd57 	bl	8000598 <__aeabi_f2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	ec43 2b10 	vmov	d0, r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <create_JSON_SubSensorStatus+0x60>)
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f01b fde5 	bl	801d6c4 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SubSensorStatus, "isActive", sub_sensor_status->isActive);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7a1b      	ldrb	r3, [r3, #8]
 8001afe:	461a      	mov	r2, r3
 8001b00:	4905      	ldr	r1, [pc, #20]	; (8001b18 <create_JSON_SubSensorStatus+0x64>)
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f01b fe04 	bl	801d710 <json_object_dotset_boolean>
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	0802208c 	.word	0x0802208c
 8001b14:	08022090 	.word	0x08022090
 8001b18:	0802206c 	.word	0x0802206c

08001b1c <COM_AddSensor>:
* @brief Add Sensor to Db
* @param None
* @retval Sensor unique sID
*/
int32_t COM_AddSensor(void)
{  
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  uint32_t ii = COM_device.deviceDescriptor.nSensor;
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <COM_AddSensor+0x68>)
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	607b      	str	r3, [r7, #4]
  
  COM_device.sensors[ii] = calloc(1, sizeof(COM_Sensor_t));   
 8001b28:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f01b ff0d 	bl	801d94c <calloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4619      	mov	r1, r3
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <COM_AddSensor+0x68>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	330a      	adds	r3, #10
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	6059      	str	r1, [r3, #4]
  
  if(COM_device.sensors[ii] == NULL)
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <COM_AddSensor+0x68>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330a      	adds	r3, #10
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <COM_AddSensor+0x3c>
    return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e010      	b.n	8001b7a <COM_AddSensor+0x5e>
  
  COM_device.sensors[ii]->sensorDescriptor.id = ii;
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <COM_AddSensor+0x68>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	330a      	adds	r3, #10
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
  COM_device.deviceDescriptor.nSensor++;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <COM_AddSensor+0x68>)
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <COM_AddSensor+0x68>)
 8001b72:	6293      	str	r3, [r2, #40]	; 0x28
  return COM_device.deviceDescriptor.nSensor - 1;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <COM_AddSensor+0x68>)
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	3b01      	subs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000280 	.word	0x20000280

08001b88 <COM_GetDevice>:
* @brief Get Device Struct
* @param None
* @retval whole device Structure
*/
COM_Device_t * COM_GetDevice(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return (COM_Device_t *)&COM_device;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <COM_GetDevice+0x10>)
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	20000280 	.word	0x20000280

08001b9c <COM_GetDeviceDescriptor>:
* @brief Get Device Descriptor
* @param None
* @retval Device Descriptor
*/
COM_DeviceDescriptor_t * COM_GetDeviceDescriptor(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return (COM_DeviceDescriptor_t *)&(COM_device.deviceDescriptor);
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <COM_GetDeviceDescriptor+0x10>)
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	20000280 	.word	0x20000280

08001bb0 <COM_GetSensor>:
* @brief Get Sensor 
* @param None
* @retval Sensor unique sID
*/
COM_Sensor_t * COM_GetSensor(uint8_t sID)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  return COM_device.sensors[sID];
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <COM_GetSensor+0x24>)
 8001bbe:	330a      	adds	r3, #10
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	685b      	ldr	r3, [r3, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000280 	.word	0x20000280

08001bd8 <COM_GetSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SensorDescriptor_t * COM_GetSensorDescriptor(uint8_t sID)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorDescriptor);  
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <COM_GetSensorDescriptor+0x24>)
 8001be6:	330a      	adds	r3, #10
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	685b      	ldr	r3, [r3, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000280 	.word	0x20000280

08001c00 <COM_GetSensorStatus>:
* @brief Get Sensor Status
* @param None
* @retval Sensor unique sID
*/
COM_SensorStatus_t * COM_GetSensorStatus(uint8_t sID)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorStatus);  
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <COM_GetSensorStatus+0x28>)
 8001c0e:	330a      	adds	r3, #10
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000280 	.word	0x20000280

08001c2c <COM_GetSubSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorDescriptor_t * COM_GetSubSensorDescriptor(uint8_t sID, uint8_t ssID)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71bb      	strb	r3, [r7, #6]
    return &(COM_device.sensors[sID]->sensorDescriptor.subSensorDescriptor[ssID]);  
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <COM_GetSubSensorDescriptor+0x38>)
 8001c40:	330a      	adds	r3, #10
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	2154      	movs	r1, #84	; 0x54
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	3358      	adds	r3, #88	; 0x58
 8001c52:	4413      	add	r3, r2
 8001c54:	3304      	adds	r3, #4
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000280 	.word	0x20000280

08001c68 <COM_GetSubSensorNumber>:
* @brief Get Sensor Status
* @param Sensor unique sID
* @retval number of subsensors
*/
uint8_t COM_GetSubSensorNumber(uint8_t sID)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
    return COM_device.sensors[sID]->sensorDescriptor.nSubSensors;  
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <COM_GetSubSensorNumber+0x28>)
 8001c76:	330a      	adds	r3, #10
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000280 	.word	0x20000280

08001c94 <COM_IsOdrLegal>:
  
  return ret;
}

uint8_t COM_IsOdrLegal(float value, uint8_t sID)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	70fb      	strb	r3, [r7, #3]
  uint16_t i = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	737b      	strb	r3, [r7, #13]
  float * list = COM_device.sensors[sID]->sensorDescriptor.ODR;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <COM_IsOdrLegal+0x74>)
 8001cae:	330a      	adds	r3, #10
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	60bb      	str	r3, [r7, #8]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001cba:	e011      	b.n	8001ce0 <COM_IsOdrLegal+0x4c>
  {
    if(list[i] == value)
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ccc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d101      	bne.n	8001cda <COM_IsOdrLegal+0x46>
      ret = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	737b      	strb	r3, [r7, #13]
    i++;
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	81fb      	strh	r3, [r7, #14]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001cf0:	eef4 7a47 	vcmp.f32	s15, s14
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	d1e0      	bne.n	8001cbc <COM_IsOdrLegal+0x28>
  }
  
  return ret;
 8001cfa:	7b7b      	ldrb	r3, [r7, #13]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000280 	.word	0x20000280

08001d0c <get_unique_id>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


static void get_unique_id(char * id)
{ 
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t deviceserial[3];
  
  deviceserial[0] = *(uint32_t*)DEVICE_ID_REG_1;
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <get_unique_id+0xd4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  deviceserial[1] = *(uint32_t*)DEVICE_ID_REG_2;
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <get_unique_id+0xd8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
  deviceserial[2] = *(uint32_t*)DEVICE_ID_REG_3; 
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <get_unique_id+0xdc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	617b      	str	r3, [r7, #20]
  
  uint16_t y = (deviceserial[0] & 0xFFFF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t x = ((deviceserial[0] >> 16) & 0xFFFF);  
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t waf_num = (deviceserial[1] & 0xFF);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  id[0] = (deviceserial[1]>>8) & 0xFF;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	701a      	strb	r2, [r3, #0]
  id[1] = (deviceserial[1]>>16) & 0xFF;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	0c1a      	lsrs	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3301      	adds	r3, #1
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
  id[2] = (deviceserial[1]>>24) & 0xFF;  
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	0e1a      	lsrs	r2, r3, #24
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3302      	adds	r3, #2
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]
  id[3] = (deviceserial[2]) & 0xFF;
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3303      	adds	r3, #3
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
  id[4] = (deviceserial[2]>>8) & 0xFF;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	0a1a      	lsrs	r2, r3, #8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]
  id[5] = (deviceserial[2]>>16) & 0xFF;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	0c1a      	lsrs	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3305      	adds	r3, #5
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]
  id[6] = (deviceserial[2]>>24) & 0xFF;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	0e1a      	lsrs	r2, r3, #24
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3306      	adds	r3, #6
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	701a      	strb	r2, [r3, #0]
  
  int n;
  char * p = &id[7];
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3307      	adds	r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%03u", waf_num);
 8001d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d90:	461a      	mov	r2, r3
 8001d92:	4916      	ldr	r1, [pc, #88]	; (8001dec <get_unique_id+0xe0>)
 8001d94:	69f8      	ldr	r0, [r7, #28]
 8001d96:	f01c fdb9 	bl	801e90c <siprintf>
 8001d9a:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4413      	add	r3, r2
 8001da2:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", x);
 8001da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001da6:	461a      	mov	r2, r3
 8001da8:	4911      	ldr	r1, [pc, #68]	; (8001df0 <get_unique_id+0xe4>)
 8001daa:	69f8      	ldr	r0, [r7, #28]
 8001dac:	f01c fdae 	bl	801e90c <siprintf>
 8001db0:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	4413      	add	r3, r2
 8001db8:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", y);
 8001dba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	490c      	ldr	r1, [pc, #48]	; (8001df0 <get_unique_id+0xe4>)
 8001dc0:	69f8      	ldr	r0, [r7, #28]
 8001dc2:	f01c fda3 	bl	801e90c <siprintf>
 8001dc6:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	61fb      	str	r3, [r7, #28]
  
  *p = '\0';
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
  /*OUT: | LOT NUMBER [7] | WAF NUMBER [3] | X ON WAF [5] | Y ON WAF [5] | */  
}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	1fff7590 	.word	0x1fff7590
 8001de4:	1fff7594 	.word	0x1fff7594
 8001de8:	1fff7598 	.word	0x1fff7598
 8001dec:	08022244 	.word	0x08022244
 8001df0:	0802224c 	.word	0x0802224c

08001df4 <set_default_description>:
* @brief Set default device description
* @param None
* @retval None
*/
void set_default_description(void)
{  
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;
  COM_DeviceDescriptor_t * tempDeviceDescriptor;
  tempDeviceDescriptor = COM_GetDeviceDescriptor();
 8001dfa:	f7ff fecf 	bl	8001b9c <COM_GetDeviceDescriptor>
 8001dfe:	6078      	str	r0, [r7, #4]
  
  get_unique_id(tempDeviceDescriptor->serialNumber);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff82 	bl	8001d0c <get_unique_id>
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3315      	adds	r3, #21
 8001e0c:	495e      	ldr	r1, [pc, #376]	; (8001f88 <set_default_description+0x194>)
 8001e0e:	461a      	mov	r2, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	cb03      	ldmia	r3!, {r0, r1}
 8001e14:	6010      	str	r0, [r2, #0]
 8001e16:	6051      	str	r1, [r2, #4]
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	8113      	strh	r3, [r2, #8]
    
  /***** IIS3DWB *****/
  iis3dwb_com_id = COM_AddSensor();
 8001e1c:	f7ff fe7e 	bl	8001b1c <COM_AddSensor>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <set_default_description+0x198>)
 8001e26:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);
 8001e28:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <set_default_description+0x198>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff febf 	bl	8001bb0 <COM_GetSensor>
 8001e32:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4955      	ldr	r1, [pc, #340]	; (8001f90 <set_default_description+0x19c>)
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	cb03      	ldmia	r3!, {r0, r1}
 8001e40:	6010      	str	r0, [r2, #0]
 8001e42:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2203      	movs	r2, #3
 8001e48:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 26667.0f;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	4a51      	ldr	r2, [pc, #324]	; (8001f94 <set_default_description+0x1a0>)
 8001e4e:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  /* Terminate list */
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4a51      	ldr	r2, [pc, #324]	; (8001f98 <set_default_description+0x1a4>)
 8001e54:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 26667.0f;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <set_default_description+0x1a0>)
 8001e74:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e92:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 1;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 3000;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ea4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS3DWB;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001eae:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	335f      	adds	r3, #95	; 0x5f
 8001ed8:	4a30      	ldr	r2, [pc, #192]	; (8001f9c <set_default_description+0x1a8>)
 8001eda:	8811      	ldrh	r1, [r2, #0]
 8001edc:	7892      	ldrb	r2, [r2, #2]
 8001ede:	8019      	strh	r1, [r3, #0]
 8001ee0:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee8:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001ef0:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001ef8:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001f00:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <set_default_description+0x1a4>)
 8001f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001f10:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8001f22:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001fa0 <set_default_description+0x1ac>
 8001f26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f2a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc

  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001f3e:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <set_default_description+0x1b0>)
 8001f40:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001f48:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <set_default_description+0x1b0>)
 8001f4a:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <set_default_description+0x1b0>)
 8001f54:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis3dwb_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS3DWB / (uint32_t)(IIS3DWB_Init_Param.ODR * 6); 
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <set_default_description+0x1b0>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f68:	ee17 2a90 	vmov	r2, s15
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <set_default_description+0x198>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <set_default_description+0x1b4>)
 8001f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f78:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <set_default_description+0x1b8>)
 8001f7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  

  maxWriteTimeSensor[stts751_com_id] = 1000 * WRITE_BUFFER_SIZE_STTS751 / (uint32_t)(STTS751_Init_Param.ODR * 4); 
#endif
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	08022254 	.word	0x08022254
 8001f8c:	20016040 	.word	0x20016040
 8001f90:	08022260 	.word	0x08022260
 8001f94:	46d05600 	.word	0x46d05600
 8001f98:	bf800000 	.word	0xbf800000
 8001f9c:	08022268 	.word	0x08022268
 8001fa0:	3d79db23 	.word	0x3d79db23
 8001fa4:	2000ff08 	.word	0x2000ff08
 8001fa8:	01e84800 	.word	0x01e84800
 8001fac:	20016320 	.word	0x20016320

08001fb0 <update_sensorStatus>:

void update_sensorStatus(COM_SensorStatus_t * oldSensorStatus, COM_SensorStatus_t * newSensorStatus, uint8_t sID)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	71fb      	strb	r3, [r7, #7]
  /* Check differencies between oldSensorStatus and newSensorStatus, act properly*/
  /* ODR */
  if(oldSensorStatus->ODR != newSensorStatus->ODR)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	ed93 7a00 	vldr	s14, [r3]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	d00f      	beq.n	8001ff4 <update_sensorStatus+0x44>
  {
    if(COM_IsOdrLegal(newSensorStatus->ODR, sID))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	f7ff fe57 	bl	8001c94 <COM_IsOdrLegal>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <update_sensorStatus+0x44>
    {
      oldSensorStatus->ODR = newSensorStatus->ODR; /* Todo Setters and getters */
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* isActive */
  if(oldSensorStatus->isActive != newSensorStatus->isActive)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	7b9a      	ldrb	r2, [r3, #14]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	7b9b      	ldrb	r3, [r3, #14]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d003      	beq.n	8002008 <update_sensorStatus+0x58>
  {
    oldSensorStatus->isActive = newSensorStatus->isActive;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	7b9a      	ldrb	r2, [r3, #14]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	739a      	strb	r2, [r3, #14]
  }
  
  /* subsensor: FS, is Active*/
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e054      	b.n	80020b8 <update_sensorStatus+0x108>
  {
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 800200e:	68f9      	ldr	r1, [r7, #12]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	331c      	adds	r3, #28
 800201e:	ed93 7a00 	vldr	s14, [r3]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	331c      	adds	r3, #28
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	eeb4 7a67 	vcmp.f32	s14, s15
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	d011      	beq.n	8002064 <update_sensorStatus+0xb4>
    {
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	331c      	adds	r3, #28
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4403      	add	r3, r0
 8002060:	331c      	adds	r3, #28
 8002062:	6019      	str	r1, [r3, #0]
    }
    
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8002064:	68f9      	ldr	r1, [r7, #12]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3324      	adds	r3, #36	; 0x24
 8002074:	7819      	ldrb	r1, [r3, #0]
 8002076:	68b8      	ldr	r0, [r7, #8]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4403      	add	r3, r0
 8002084:	3324      	adds	r3, #36	; 0x24
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4299      	cmp	r1, r3
 800208a:	d012      	beq.n	80020b2 <update_sensorStatus+0x102>
    {
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	3324      	adds	r3, #36	; 0x24
 800209c:	7818      	ldrb	r0, [r3, #0]
 800209e:	68f9      	ldr	r1, [r7, #12]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3324      	adds	r3, #36	; 0x24
 80020ae:	4602      	mov	r2, r0
 80020b0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fdd4 	bl	8001c68 <COM_GetSubSensorNumber>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4293      	cmp	r3, r2
 80020c8:	dba1      	blt.n	800200e <update_sensorStatus+0x5e>
    }
  }
  
  if (sID == iis3dwb_com_id)
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <update_sensorStatus+0x200>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10e      	bne.n	80020f2 <update_sensorStatus+0x142>
  {
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80020da:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80021b4 <update_sensorStatus+0x204>
 80020de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	edc3 7a08 	vstr	s15, [r3, #32]
 80020f0:	e043      	b.n	800217a <update_sensorStatus+0x1ca>
  }
  else if (sID == iis2dh_com_id)
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <update_sensorStatus+0x208>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	79fa      	ldrb	r2, [r7, #7]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d11d      	bne.n	8002138 <update_sensorStatus+0x188>
  {    
    if (oldSensorStatus->subSensorStatus[0].FS == 16.0f)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002102:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002106:	eef4 7a47 	vcmp.f32	s15, s14
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210e:	d104      	bne.n	800211a <update_sensorStatus+0x16a>
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.75f;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002116:	621a      	str	r2, [r3, #32]
 8002118:	e02f      	b.n	800217a <update_sensorStatus+0x1ca>
    }
    else
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.0625f *  oldSensorStatus->subSensorStatus[0].FS/2;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002120:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80021bc <update_sensorStatus+0x20c>
 8002124:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002128:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800212c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	edc3 7a08 	vstr	s15, [r3, #32]
 8002136:	e020      	b.n	800217a <update_sensorStatus+0x1ca>
    }
  }
  else if (sID == ism330dhcx_com_id)
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <update_sensorStatus+0x210>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	429a      	cmp	r2, r3
 8002140:	d11b      	bne.n	800217a <update_sensorStatus+0x1ca>
  {        
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	edd3 7a07 	vldr	s15, [r3, #28]
 8002148:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021b4 <update_sensorStatus+0x204>
 800214c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002150:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	edc3 7a08 	vstr	s15, [r3, #32]
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002164:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80021c4 <update_sensorStatus+0x214>
 8002168:	ee27 7a87 	vmul.f32	s14, s15, s14
 800216c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80021c8 <update_sensorStatus+0x218>
 8002170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  }
  
  /* CHANNEL NUMBER */
  if(oldSensorStatus->comChannelNumber != newSensorStatus->comChannelNumber)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002186:	429a      	cmp	r2, r3
 8002188:	d004      	beq.n	8002194 <update_sensorStatus+0x1e4>
  {
    oldSensorStatus->comChannelNumber = newSensorStatus->comChannelNumber; /* Todo Setters and getters */         
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	831a      	strh	r2, [r3, #24]
  }  
  
   /* CHANNEL NUMBER */
  if(oldSensorStatus->samplesPerTimestamp != newSensorStatus->samplesPerTimestamp)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	899a      	ldrh	r2, [r3, #12]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	899b      	ldrh	r3, [r3, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d003      	beq.n	80021a8 <update_sensorStatus+0x1f8>
  {
    oldSensorStatus->samplesPerTimestamp = newSensorStatus->samplesPerTimestamp; /* Todo Setters and getters */         
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	899a      	ldrh	r2, [r3, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	819a      	strh	r2, [r3, #12]
  }  
}
 80021a8:	bf00      	nop
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20016040 	.word	0x20016040
 80021b4:	3d79db23 	.word	0x3d79db23
 80021b8:	200163f0 	.word	0x200163f0
 80021bc:	3d800000 	.word	0x3d800000
 80021c0:	20016355 	.word	0x20016355
 80021c4:	408c0000 	.word	0x408c0000
 80021c8:	42fa0000 	.word	0x42fa0000

080021cc <update_sensors_config>:

void update_sensors_config(void)
{  
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;  
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);  
 80021d2:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <update_sensors_config+0x1c4>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fcea 	bl	8001bb0 <COM_GetSensor>
 80021dc:	6078      	str	r0, [r7, #4]
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80021e4:	4a6b      	ldr	r2, [pc, #428]	; (8002394 <update_sensors_config+0x1c8>)
 80021e6:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80021ee:	4a69      	ldr	r2, [pc, #420]	; (8002394 <update_sensors_config+0x1c8>)
 80021f0:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80021f8:	4b66      	ldr	r3, [pc, #408]	; (8002394 <update_sensors_config+0x1c8>)
 80021fa:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(hts221_com_id);
 80021fc:	4b66      	ldr	r3, [pc, #408]	; (8002398 <update_sensors_config+0x1cc>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fcd5 	bl	8001bb0 <COM_GetSensor>
 8002206:	6078      	str	r0, [r7, #4]
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800220e:	4a63      	ldr	r2, [pc, #396]	; (800239c <update_sensors_config+0x1d0>)
 8002210:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002218:	4a60      	ldr	r2, [pc, #384]	; (800239c <update_sensors_config+0x1d0>)
 800221a:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002222:	4a5e      	ldr	r2, [pc, #376]	; (800239c <update_sensors_config+0x1d0>)
 8002224:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800222c:	4b5b      	ldr	r3, [pc, #364]	; (800239c <update_sensors_config+0x1d0>)
 800222e:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8002236:	4b59      	ldr	r3, [pc, #356]	; (800239c <update_sensors_config+0x1d0>)
 8002238:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(iis2dh_com_id);
 800223a:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <update_sensors_config+0x1d4>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fcb6 	bl	8001bb0 <COM_GetSensor>
 8002244:	6078      	str	r0, [r7, #4]
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800224c:	4a55      	ldr	r2, [pc, #340]	; (80023a4 <update_sensors_config+0x1d8>)
 800224e:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002256:	4a53      	ldr	r2, [pc, #332]	; (80023a4 <update_sensors_config+0x1d8>)
 8002258:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <update_sensors_config+0x1d8>)
 8002262:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <update_sensors_config+0x1dc>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fca1 	bl	8001bb0 <COM_GetSensor>
 800226e:	6078      	str	r0, [r7, #4]
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002276:	4a4d      	ldr	r2, [pc, #308]	; (80023ac <update_sensors_config+0x1e0>)
 8002278:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002280:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <update_sensors_config+0x1e0>)
 8002282:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800228a:	4b48      	ldr	r3, [pc, #288]	; (80023ac <update_sensors_config+0x1e0>)
 800228c:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 800228e:	4b48      	ldr	r3, [pc, #288]	; (80023b0 <update_sensors_config+0x1e4>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fc8c 	bl	8001bb0 <COM_GetSensor>
 8002298:	6078      	str	r0, [r7, #4]
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80022a0:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <update_sensors_config+0x1e8>)
 80022a2:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80022aa:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <update_sensors_config+0x1e8>)
 80022ac:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <update_sensors_config+0x1e8>)
 80022b6:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(ism330dhcx_com_id);
 80022b8:	4b3f      	ldr	r3, [pc, #252]	; (80023b8 <update_sensors_config+0x1ec>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fc77 	bl	8001bb0 <COM_GetSensor>
 80022c2:	6078      	str	r0, [r7, #4]
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80022ca:	4a3c      	ldr	r2, [pc, #240]	; (80023bc <update_sensors_config+0x1f0>)
 80022cc:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80022d4:	4a39      	ldr	r2, [pc, #228]	; (80023bc <update_sensors_config+0x1f0>)
 80022d6:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80022de:	4a37      	ldr	r2, [pc, #220]	; (80023bc <update_sensors_config+0x1f0>)
 80022e0:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80022e8:	4b34      	ldr	r3, [pc, #208]	; (80023bc <update_sensors_config+0x1f0>)
 80022ea:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80022f2:	4b32      	ldr	r3, [pc, #200]	; (80023bc <update_sensors_config+0x1f0>)
 80022f4:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 80022f6:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <update_sensors_config+0x1f4>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fc58 	bl	8001bb0 <COM_GetSensor>
 8002300:	6078      	str	r0, [r7, #4]
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002308:	4a2e      	ldr	r2, [pc, #184]	; (80023c4 <update_sensors_config+0x1f8>)
 800230a:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002312:	4a2c      	ldr	r2, [pc, #176]	; (80023c4 <update_sensors_config+0x1f8>)
 8002314:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800231c:	4a29      	ldr	r2, [pc, #164]	; (80023c4 <update_sensors_config+0x1f8>)
 800231e:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002326:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <update_sensors_config+0x1f8>)
 8002328:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive; 
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <update_sensors_config+0x1f8>)
 8002332:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(mp23abs1_com_id);
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <update_sensors_config+0x1fc>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fc39 	bl	8001bb0 <COM_GetSensor>
 800233e:	6078      	str	r0, [r7, #4]
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002346:	4a21      	ldr	r2, [pc, #132]	; (80023cc <update_sensors_config+0x200>)
 8002348:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002350:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <update_sensors_config+0x200>)
 8002352:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <update_sensors_config+0x200>)
 800235c:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 800235e:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <update_sensors_config+0x204>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fc24 	bl	8001bb0 <COM_GetSensor>
 8002368:	6078      	str	r0, [r7, #4]
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002370:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <update_sensors_config+0x208>)
 8002372:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800237a:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <update_sensors_config+0x208>)
 800237c:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <update_sensors_config+0x208>)
 8002386:	751a      	strb	r2, [r3, #20]
  
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20016040 	.word	0x20016040
 8002394:	2000ff08 	.word	0x2000ff08
 8002398:	20016354 	.word	0x20016354
 800239c:	2000fe78 	.word	0x2000fe78
 80023a0:	200163f0 	.word	0x200163f0
 80023a4:	2000fea4 	.word	0x2000fea4
 80023a8:	20016315 	.word	0x20016315
 80023ac:	2000fedc 	.word	0x2000fedc
 80023b0:	200163e8 	.word	0x200163e8
 80023b4:	20014e58 	.word	0x20014e58
 80023b8:	20016355 	.word	0x20016355
 80023bc:	20015f8c 	.word	0x20015f8c
 80023c0:	200163f9 	.word	0x200163f9
 80023c4:	20015fa8 	.word	0x20015fa8
 80023c8:	20016314 	.word	0x20016314
 80023cc:	20016544 	.word	0x20016544
 80023d0:	200163f8 	.word	0x200163f8
 80023d4:	20018a14 	.word	0x20018a14

080023d8 <HTS221_Set_State>:
  
  osSemaphoreRelease(hts221_data_ready_sem_id);    
}

void HTS221_Set_State(SM_Sensor_State_t newState)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  HTS221_Sensor_State = newState;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HTS221_Set_State+0x1c>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	7013      	strb	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	20000001 	.word	0x20000001

080023f8 <HTS221_Start>:
  HTS221_Init_Param.FS[0] = newFS1;
  HTS221_Init_Param.FS[0] = newFS2;
}

void HTS221_Start(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f7ff ffeb 	bl	80023d8 <HTS221_Set_State>
  osThreadResume(HTS221_Thread_Id);
 8002402:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HTS221_Start+0x18>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f015 f92e 	bl	8017668 <osThreadResume>
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000fe98 	.word	0x2000fe98

08002414 <HTS221_Stop>:

void HTS221_Stop(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002418:	2001      	movs	r0, #1
 800241a:	f7ff ffdd 	bl	80023d8 <HTS221_Set_State>
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <IIS2DH_Set_State>:
{
  osSemaphoreRelease( iis2dh_DreadySem_id);    
}

void IIS2DH_Set_State(SM_Sensor_State_t newState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  IIS2DH_Sensor_State = newState;
 800242e:	4a04      	ldr	r2, [pc, #16]	; (8002440 <IIS2DH_Set_State+0x1c>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	7013      	strb	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	20000002 	.word	0x20000002

08002444 <IIS2DH_Start>:
  IIS2DH_Init_Param.FS[0] = newFS1;
  IIS2DH_Init_Param.FS[0] = newFS2;
}

void IIS2DH_Start(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002448:	2003      	movs	r0, #3
 800244a:	f7ff ffeb 	bl	8002424 <IIS2DH_Set_State>
  osThreadResume(IIS2DH_Thread_Id);
 800244e:	4b03      	ldr	r3, [pc, #12]	; (800245c <IIS2DH_Start+0x18>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f015 f908 	bl	8017668 <osThreadResume>
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000fec0 	.word	0x2000fec0

08002460 <IIS2DH_Stop>:

void IIS2DH_Stop(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002464:	2001      	movs	r0, #1
 8002466:	f7ff ffdd 	bl	8002424 <IIS2DH_Set_State>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <IIS2MDC_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(iis2mdc_data_ready_sem_id);    
}

void IIS2MDC_Set_State(SM_Sensor_State_t newState)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  IIS2MDC_Sensor_State = newState;
 800247a:	4a04      	ldr	r2, [pc, #16]	; (800248c <IIS2MDC_Set_State+0x1c>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	7013      	strb	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	20000003 	.word	0x20000003

08002490 <IIS2MDC_Start>:
  IIS2MDC_Init_Param.FS[0] = newFS1;
  IIS2MDC_Init_Param.FS[0] = newFS2;
}

void IIS2MDC_Start(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002494:	2003      	movs	r0, #3
 8002496:	f7ff ffeb 	bl	8002470 <IIS2MDC_Set_State>
  osThreadResume(IIS2MDC_Thread_Id);
 800249a:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <IIS2MDC_Start+0x18>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f015 f8e2 	bl	8017668 <osThreadResume>
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	2000fef4 	.word	0x2000fef4

080024ac <IIS2MDC_Stop>:

void IIS2MDC_Stop(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80024b0:	2001      	movs	r0, #1
 80024b2:	f7ff ffdd 	bl	8002470 <IIS2MDC_Set_State>
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <IIS3DWB_Peripheral_Init>:
* @brief IIS3DWB GPIO Initialization Function
* @param None
* @retval None
*/
void IIS3DWB_Peripheral_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOE_CLK_ENABLE();
//  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();		//SPI2_CS
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	4a3d      	ldr	r2, [pc, #244]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();		//SPI2_MOSI,SPI2_INT
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a37      	ldr	r2, [pc, #220]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f6:	4b35      	ldr	r3, [pc, #212]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();		//SPI2_CLK,SPI2_MISO
 8002502:	4b32      	ldr	r3, [pc, #200]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	4a31      	ldr	r2, [pc, #196]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250e:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();		//SEL_3_4
 800251a:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	4a2b      	ldr	r2, [pc, #172]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002526:	4b29      	ldr	r3, [pc, #164]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();		//SEL_1_2
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	4a25      	ldr	r2, [pc, #148]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 8002538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800253c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253e:	4b23      	ldr	r3, [pc, #140]	; (80025cc <IIS3DWB_Peripheral_Init+0x110>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 800254a:	2201      	movs	r2, #1
 800254c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002550:	481f      	ldr	r0, [pc, #124]	; (80025d0 <IIS3DWB_Peripheral_Init+0x114>)
 8002552:	f006 f9a7 	bl	80088a4 <HAL_GPIO_WritePin>

  //Configure GPIO pin Output Level of 1_2_SEL and 3_4_SEL
  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
 8002556:	2200      	movs	r2, #0
 8002558:	2101      	movs	r1, #1
 800255a:	481e      	ldr	r0, [pc, #120]	; (80025d4 <IIS3DWB_Peripheral_Init+0x118>)
 800255c:	f006 f9a2 	bl	80088a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);
 8002560:	2201      	movs	r2, #1
 8002562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002566:	481c      	ldr	r0, [pc, #112]	; (80025d8 <IIS3DWB_Peripheral_Init+0x11c>)
 8002568:	f006 f99c 	bl	80088a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IIS3DWB_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 800256c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800257a:	2302      	movs	r3, #2
 800257c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	4812      	ldr	r0, [pc, #72]	; (80025d0 <IIS3DWB_Peripheral_Init+0x114>)
 8002586:	f005 ffe3 	bl	8008550 <HAL_GPIO_Init>

  /*Configure GPIO pins : STTS751_INT_Pin IIS3DWB_INT1_Pin */
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 800258a:	2320      	movs	r3, #32
 800258c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <IIS3DWB_Peripheral_Init+0x120>)
 8002590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IIS3DWB_INT1_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	4619      	mov	r1, r3
 800259c:	4810      	ldr	r0, [pc, #64]	; (80025e0 <IIS3DWB_Peripheral_Init+0x124>)
 800259e:	f005 ffd7 	bl	8008550 <HAL_GPIO_Init>
//
//  SM_SPIx_CLK_ENABLE();
  //---------------------------------------------------------

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2105      	movs	r1, #5
 80025a6:	2017      	movs	r0, #23
 80025a8:	f005 fd1b 	bl	8007fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025ac:	2017      	movs	r0, #23
 80025ae:	f005 fd34 	bl	800801a <HAL_NVIC_EnableIRQ>
  HAL_EXTI_GetHandle(&iis3dwb_exti, EXTI_LINE_5);
 80025b2:	490c      	ldr	r1, [pc, #48]	; (80025e4 <IIS3DWB_Peripheral_Init+0x128>)
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <IIS3DWB_Peripheral_Init+0x12c>)
 80025b6:	f005 ff87 	bl	80084c8 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&iis3dwb_exti,  HAL_EXTI_COMMON_CB_ID, IIS3DWB_Int_Callback);
 80025ba:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <IIS3DWB_Peripheral_Init+0x130>)
 80025bc:	2100      	movs	r1, #0
 80025be:	480a      	ldr	r0, [pc, #40]	; (80025e8 <IIS3DWB_Peripheral_Init+0x12c>)
 80025c0:	f005 ff68 	bl	8008494 <HAL_EXTI_RegisterCallback>
  
}
 80025c4:	bf00      	nop
 80025c6:	3728      	adds	r7, #40	; 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	48000400 	.word	0x48000400
 80025d4:	48001800 	.word	0x48001800
 80025d8:	48001400 	.word	0x48001400
 80025dc:	10110000 	.word	0x10110000
 80025e0:	48000800 	.word	0x48000800
 80025e4:	16000005 	.word	0x16000005
 80025e8:	2000ff20 	.word	0x2000ff20
 80025ec:	08002995 	.word	0x08002995

080025f0 <IIS3DWB_OS_Init>:
* @brief IIS3DWB Threads Creation
* @param None
* @retval None
*/
void IIS3DWB_OS_Init(void)
{  
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
  /* Data read complete semaphore initialization */  
  iis3dwb_data_read_cmplt_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_read_cmplt_sem), 1);
 80025f6:	2101      	movs	r1, #1
 80025f8:	481f      	ldr	r0, [pc, #124]	; (8002678 <IIS3DWB_OS_Init+0x88>)
 80025fa:	f014 fdaf 	bl	801715c <osSemaphoreCreate>
 80025fe:	4603      	mov	r3, r0
 8002600:	4a1e      	ldr	r2, [pc, #120]	; (800267c <IIS3DWB_OS_Init+0x8c>)
 8002602:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_read_cmplt_sem_id, "iis3dwb_data_read_cmplt_sem_id" );
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <IIS3DWB_OS_Init+0x8c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	491d      	ldr	r1, [pc, #116]	; (8002680 <IIS3DWB_OS_Init+0x90>)
 800260a:	4618      	mov	r0, r3
 800260c:	f015 ffb4 	bl	8018578 <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_read_cmplt_sem_id,osWaitForever);
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <IIS3DWB_OS_Init+0x8c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	4618      	mov	r0, r3
 800261a:	f014 fdc3 	bl	80171a4 <osSemaphoreWait>
  
  /* Data ready interrupt semaphore initialization */  
  iis3dwb_data_ready_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_ready_sem), 1);
 800261e:	2101      	movs	r1, #1
 8002620:	4818      	ldr	r0, [pc, #96]	; (8002684 <IIS3DWB_OS_Init+0x94>)
 8002622:	f014 fd9b 	bl	801715c <osSemaphoreCreate>
 8002626:	4603      	mov	r3, r0
 8002628:	4a17      	ldr	r2, [pc, #92]	; (8002688 <IIS3DWB_OS_Init+0x98>)
 800262a:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_ready_sem_id, "iis3dwb_data_ready_sem_id" );
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <IIS3DWB_OS_Init+0x98>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4916      	ldr	r1, [pc, #88]	; (800268c <IIS3DWB_OS_Init+0x9c>)
 8002632:	4618      	mov	r0, r3
 8002634:	f015 ffa0 	bl	8018578 <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <IIS3DWB_OS_Init+0x98>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	4618      	mov	r0, r3
 8002642:	f014 fdaf 	bl	80171a4 <osSemaphoreWait>
  

  /* Thread definition: read data */  
  osThreadDef(IIS3DWB_Acquisition_Thread, IIS3DWB_Thread, IIS3DWB_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);  
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <IIS3DWB_OS_Init+0xa0>)
 8002648:	1d3c      	adds	r4, r7, #4
 800264a:	461d      	mov	r5, r3
 800264c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800264e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002650:	682b      	ldr	r3, [r5, #0]
 8002652:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  IIS3DWB_Thread_Id = osThreadCreate(osThread(IIS3DWB_Acquisition_Thread), NULL); 
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f014 fd58 	bl	801710e <osThreadCreate>
 800265e:	4603      	mov	r3, r0
 8002660:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <IIS3DWB_OS_Init+0xa4>)
 8002662:	6013      	str	r3, [r2, #0]
  osThreadSuspend(IIS3DWB_Thread_Id);
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <IIS3DWB_OS_Init+0xa4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f014 fff0 	bl	801764e <osThreadSuspend>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bdb0      	pop	{r4, r5, r7, pc}
 8002676:	bf00      	nop
 8002678:	08022654 	.word	0x08022654
 800267c:	200002dc 	.word	0x200002dc
 8002680:	08022288 	.word	0x08022288
 8002684:	08022650 	.word	0x08022650
 8002688:	200002d8 	.word	0x200002d8
 800268c:	080222a8 	.word	0x080222a8
 8002690:	080222c4 	.word	0x080222c4
 8002694:	2000ff04 	.word	0x2000ff04

08002698 <IIS3DWB_Thread>:


static void IIS3DWB_Thread(void const *argument)
{
 8002698:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800269c:	b088      	sub	sp, #32
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  (void) argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_IIS3DWB_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_IIS3DWB_DEBUG_PIN );
 80026a2:	2101      	movs	r1, #1
 80026a4:	2000      	movs	r0, #0
 80026a6:	f016 fc63 	bl	8018f70 <vTaskSetApplicationTaskTag>
#endif
  
  uint8_t reg0;
  uint8_t reg1;
  
  volatile uint16_t fifo_level = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	823b      	strh	r3, [r7, #16]
  
  for (;;)
  {
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 80026ae:	4bae      	ldr	r3, [pc, #696]	; (8002968 <IIS3DWB_Thread+0x2d0>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	f040 8094 	bne.w	80027e0 <IIS3DWB_Thread+0x148>
    {  
      ts_iis3dwb = 0;
 80026b8:	49ac      	ldr	r1, [pc, #688]	; (800296c <IIS3DWB_Thread+0x2d4>)
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9c1 2300 	strd	r2, r3, [r1]
      tim_value_old = 0;
 80026c6:	4baa      	ldr	r3, [pc, #680]	; (8002970 <IIS3DWB_Thread+0x2d8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
      
      iis3dwb_device_id_get( &iis3dwb_ctx_instance, (uint8_t *)&reg0);
 80026cc:	f107 0313 	add.w	r3, r7, #19
 80026d0:	4619      	mov	r1, r3
 80026d2:	48a8      	ldr	r0, [pc, #672]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 80026d4:	f002 ff05 	bl	80054e2 <iis3dwb_device_id_get>
      iis3dwb_reset_set(&iis3dwb_ctx_instance, 1);
 80026d8:	2101      	movs	r1, #1
 80026da:	48a6      	ldr	r0, [pc, #664]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 80026dc:	f002 ff12 	bl	8005504 <iis3dwb_reset_set>
      iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80026e0:	f107 0213 	add.w	r2, r7, #19
 80026e4:	2301      	movs	r3, #1
 80026e6:	2110      	movs	r1, #16
 80026e8:	48a2      	ldr	r0, [pc, #648]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 80026ea:	f002 fe7e 	bl	80053ea <iis3dwb_read_reg>
      reg0 |= 0xA0;
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	74fb      	strb	r3, [r7, #19]
      iis3dwb_write_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80026f8:	f107 0213 	add.w	r2, r7, #19
 80026fc:	2301      	movs	r3, #1
 80026fe:	2110      	movs	r1, #16
 8002700:	489c      	ldr	r0, [pc, #624]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 8002702:	f002 fe8a 	bl	800541a <iis3dwb_write_reg>
      /*Set fifo in continuous / stream mode*/
      iis3dwb_i2c_interface_set(&iis3dwb_ctx_instance, IIS3DWB_I2C_DISABLE); 
 8002706:	2101      	movs	r1, #1
 8002708:	489a      	ldr	r0, [pc, #616]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 800270a:	f002 ff79 	bl	8005600 <iis3dwb_i2c_interface_set>
      iis3dwb_fifo_mode_set(&iis3dwb_ctx_instance, IIS3DWB_STREAM_MODE); 
 800270e:	2106      	movs	r1, #6
 8002710:	4898      	ldr	r0, [pc, #608]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 8002712:	f003 f813 	bl	800573c <iis3dwb_fifo_mode_set>
      /*Set watermark*/
      iis3dwb_fifo_watermark_set(&iis3dwb_ctx_instance, IIS3DWB_WTM_LEVEL);
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	4896      	ldr	r0, [pc, #600]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 800271a:	f002 ffb3 	bl	8005684 <iis3dwb_fifo_watermark_set>
      /*Data Ready pulse mode*/
      iis3dwb_data_ready_mode_set(&iis3dwb_ctx_instance, IIS3DWB_DRDY_PULSED);
 800271e:	2101      	movs	r1, #1
 8002720:	4894      	ldr	r0, [pc, #592]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 8002722:	f002 feb8 	bl	8005496 <iis3dwb_data_ready_mode_set>
      /*Set full scale*/
      if(IIS3DWB_Init_Param.FS[0] < 3.0f)
 8002726:	4b94      	ldr	r3, [pc, #592]	; (8002978 <IIS3DWB_Thread+0x2e0>)
 8002728:	edd3 7a01 	vldr	s15, [r3, #4]
 800272c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002738:	d504      	bpl.n	8002744 <IIS3DWB_Thread+0xac>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_2g);
 800273a:	2100      	movs	r1, #0
 800273c:	488d      	ldr	r0, [pc, #564]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 800273e:	f002 fe84 	bl	800544a <iis3dwb_xl_full_scale_set>
 8002742:	e02b      	b.n	800279c <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 5.0f)
 8002744:	4b8c      	ldr	r3, [pc, #560]	; (8002978 <IIS3DWB_Thread+0x2e0>)
 8002746:	edd3 7a01 	vldr	s15, [r3, #4]
 800274a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800274e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002756:	d504      	bpl.n	8002762 <IIS3DWB_Thread+0xca>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_4g);
 8002758:	2102      	movs	r1, #2
 800275a:	4886      	ldr	r0, [pc, #536]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 800275c:	f002 fe75 	bl	800544a <iis3dwb_xl_full_scale_set>
 8002760:	e01c      	b.n	800279c <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 9.0f)
 8002762:	4b85      	ldr	r3, [pc, #532]	; (8002978 <IIS3DWB_Thread+0x2e0>)
 8002764:	edd3 7a01 	vldr	s15, [r3, #4]
 8002768:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800276c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	d504      	bpl.n	8002780 <IIS3DWB_Thread+0xe8>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_8g);
 8002776:	2103      	movs	r1, #3
 8002778:	487e      	ldr	r0, [pc, #504]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 800277a:	f002 fe66 	bl	800544a <iis3dwb_xl_full_scale_set>
 800277e:	e00d      	b.n	800279c <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 17.0f)
 8002780:	4b7d      	ldr	r3, [pc, #500]	; (8002978 <IIS3DWB_Thread+0x2e0>)
 8002782:	edd3 7a01 	vldr	s15, [r3, #4]
 8002786:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 800278a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	d503      	bpl.n	800279c <IIS3DWB_Thread+0x104>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_16g);
 8002794:	2101      	movs	r1, #1
 8002796:	4877      	ldr	r0, [pc, #476]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 8002798:	f002 fe57 	bl	800544a <iis3dwb_xl_full_scale_set>
      
      /*Set 2nd stage filter*/
      iis3dwb_xl_hp_path_on_out_set(&iis3dwb_ctx_instance,IIS3DWB_LP_5kHz);
 800279c:	2100      	movs	r1, #0
 800279e:	4875      	ldr	r0, [pc, #468]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 80027a0:	f002 fed6 	bl	8005550 <iis3dwb_xl_hp_path_on_out_set>
      /* FIFO_WTM_IA routing on pin INT1 */
      iis3dwb_pin_int1_route_t pin_int1_route;
      *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 80027a4:	f107 030c 	add.w	r3, r7, #12
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
      *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
 80027ac:	f107 030c 	add.w	r3, r7, #12
 80027b0:	3301      	adds	r3, #1
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
      pin_int1_route.int1_ctrl.int1_fifo_th = 1;
 80027b6:	7b3b      	ldrb	r3, [r7, #12]
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	733b      	strb	r3, [r7, #12]
      iis3dwb_pin_int1_route_set(&iis3dwb_ctx_instance, &pin_int1_route);
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	4619      	mov	r1, r3
 80027c4:	486b      	ldr	r0, [pc, #428]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 80027c6:	f002 ff41 	bl	800564c <iis3dwb_pin_int1_route_set>
      
      /*Enable writing to FIFO*/
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 80027ca:	210a      	movs	r1, #10
 80027cc:	4869      	ldr	r0, [pc, #420]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 80027ce:	f002 ff8f 	bl	80056f0 <iis3dwb_fifo_xl_batch_set>
      
      HAL_NVIC_EnableIRQ(IIS3DWB_INT1_EXTI_IRQn); 
 80027d2:	2017      	movs	r0, #23
 80027d4:	f005 fc21 	bl	800801a <HAL_NVIC_EnableIRQ>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_RUNNING;      
 80027d8:	4b63      	ldr	r3, [pc, #396]	; (8002968 <IIS3DWB_Thread+0x2d0>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e766      	b.n	80026ae <IIS3DWB_Thread+0x16>
    }
    else if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING)
 80027e0:	4b61      	ldr	r3, [pc, #388]	; (8002968 <IIS3DWB_Thread+0x2d0>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 80ad 	bne.w	8002944 <IIS3DWB_Thread+0x2ac>
    {  
      osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);     
 80027ea:	4b64      	ldr	r3, [pc, #400]	; (800297c <IIS3DWB_Thread+0x2e4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f04f 31ff 	mov.w	r1, #4294967295
 80027f2:	4618      	mov	r0, r3
 80027f4:	f014 fcd6 	bl	80171a4 <osSemaphoreWait>
      
      if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING) /* Change of state can happen while task blocked */
 80027f8:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <IIS3DWB_Thread+0x2d0>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f47f af56 	bne.w	80026ae <IIS3DWB_Thread+0x16>
      {
        /* Check FIFO_WTM_IA anf fifo level. We do not use PID in order to avoid reading one register twice */
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS1, &reg0, 1);
 8002802:	f107 0213 	add.w	r2, r7, #19
 8002806:	2301      	movs	r3, #1
 8002808:	213a      	movs	r1, #58	; 0x3a
 800280a:	485a      	ldr	r0, [pc, #360]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 800280c:	f002 fded 	bl	80053ea <iis3dwb_read_reg>
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS2, &reg1, 1);        
 8002810:	f107 0212 	add.w	r2, r7, #18
 8002814:	2301      	movs	r3, #1
 8002816:	213b      	movs	r1, #59	; 0x3b
 8002818:	4856      	ldr	r0, [pc, #344]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 800281a:	f002 fde6 	bl	80053ea <iis3dwb_read_reg>
        fifo_level = ((reg1 & 0x03) << 8) + reg0; 
 800281e:	7cbb      	ldrb	r3, [r7, #18]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	b29b      	uxth	r3, r3
 8002824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002828:	b29a      	uxth	r2, r3
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	b29b      	uxth	r3, r3
 800282e:	4413      	add	r3, r2
 8002830:	b29b      	uxth	r3, r3
 8002832:	823b      	strh	r3, [r7, #16]
        if((reg1) & 0x80  && (fifo_level>=IIS3DWB_SAMPLES_PER_IT) )
 8002834:	7cbb      	ldrb	r3, [r7, #18]
 8002836:	b25b      	sxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	f6bf af38 	bge.w	80026ae <IIS3DWB_Thread+0x16>
 800283e:	8a3b      	ldrh	r3, [r7, #16]
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b7f      	cmp	r3, #127	; 0x7f
 8002844:	f67f af33 	bls.w	80026ae <IIS3DWB_Thread+0x16>
        {        
          if(tim_value >= tim_value_old)
 8002848:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <IIS3DWB_Thread+0x2e8>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b48      	ldr	r3, [pc, #288]	; (8002970 <IIS3DWB_Thread+0x2d8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d307      	bcc.n	8002864 <IIS3DWB_Thread+0x1cc>
          {
            period = tim_value - tim_value_old;
 8002854:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <IIS3DWB_Thread+0x2e8>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b45      	ldr	r3, [pc, #276]	; (8002970 <IIS3DWB_Thread+0x2d8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	4a49      	ldr	r2, [pc, #292]	; (8002984 <IIS3DWB_Thread+0x2ec>)
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e007      	b.n	8002874 <IIS3DWB_Thread+0x1dc>
          }
          else
          {
            period = tim_value + (0xFFFFFFFF - tim_value_old);
 8002864:	4b46      	ldr	r3, [pc, #280]	; (8002980 <IIS3DWB_Thread+0x2e8>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b41      	ldr	r3, [pc, #260]	; (8002970 <IIS3DWB_Thread+0x2d8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	4a44      	ldr	r2, [pc, #272]	; (8002984 <IIS3DWB_Thread+0x2ec>)
 8002872:	6013      	str	r3, [r2, #0]
          }
          
          tim_value_old = tim_value;
 8002874:	4b42      	ldr	r3, [pc, #264]	; (8002980 <IIS3DWB_Thread+0x2e8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a3d      	ldr	r2, [pc, #244]	; (8002970 <IIS3DWB_Thread+0x2d8>)
 800287a:	6013      	str	r3, [r2, #0]
          ts_iis3dwb +=  period;
 800287c:	4b41      	ldr	r3, [pc, #260]	; (8002984 <IIS3DWB_Thread+0x2ec>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f04f 0100 	mov.w	r1, #0
 8002886:	4b39      	ldr	r3, [pc, #228]	; (800296c <IIS3DWB_Thread+0x2d4>)
 8002888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288c:	1884      	adds	r4, r0, r2
 800288e:	eb41 0503 	adc.w	r5, r1, r3
 8002892:	4b36      	ldr	r3, [pc, #216]	; (800296c <IIS3DWB_Thread+0x2d4>)
 8002894:	e9c3 4500 	strd	r4, r5, [r3]
          
          uint16_t i = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	83fb      	strh	r3, [r7, #30]
          iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 800289c:	f44f 7360 	mov.w	r3, #896	; 0x380
 80028a0:	4a39      	ldr	r2, [pc, #228]	; (8002988 <IIS3DWB_Thread+0x2f0>)
 80028a2:	2178      	movs	r1, #120	; 0x78
 80028a4:	4833      	ldr	r0, [pc, #204]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 80028a6:	f002 fda0 	bl	80053ea <iis3dwb_read_reg>
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
          }
#else
          int16_t * p16src = (int16_t *)iis3dwb_mem;
 80028aa:	4b37      	ldr	r3, [pc, #220]	; (8002988 <IIS3DWB_Thread+0x2f0>)
 80028ac:	61bb      	str	r3, [r7, #24]
          int16_t * p16dest = (int16_t *)iis3dwb_mem;
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <IIS3DWB_Thread+0x2f0>)
 80028b0:	617b      	str	r3, [r7, #20]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 80028b2:	2300      	movs	r3, #0
 80028b4:	83fb      	strh	r3, [r7, #30]
 80028b6:	e020      	b.n	80028fa <IIS3DWB_Thread+0x262>
          {      
            p16src = (int16_t *)&((uint8_t *)(p16src))[1];          
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	3301      	adds	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]
            *p16dest++ = *p16src++;
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	1c93      	adds	r3, r2, #2
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	1c99      	adds	r1, r3, #2
 80028c8:	6179      	str	r1, [r7, #20]
 80028ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028ce:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	1c93      	adds	r3, r2, #2
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	1c99      	adds	r1, r3, #2
 80028da:	6179      	str	r1, [r7, #20]
 80028dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028e0:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	1c93      	adds	r3, r2, #2
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	1c99      	adds	r1, r3, #2
 80028ec:	6179      	str	r1, [r7, #20]
 80028ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028f2:	801a      	strh	r2, [r3, #0]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 80028f4:	8bfb      	ldrh	r3, [r7, #30]
 80028f6:	3301      	adds	r3, #1
 80028f8:	83fb      	strh	r3, [r7, #30]
 80028fa:	8bfb      	ldrh	r3, [r7, #30]
 80028fc:	2b7f      	cmp	r3, #127	; 0x7f
 80028fe:	d9db      	bls.n	80028b8 <IIS3DWB_Thread+0x220>
          }
#endif  
          IIS3DWB_Data_Ready((uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 6, (double)ts_iis3dwb/(double)SystemCoreClock);        
 8002900:	4b1a      	ldr	r3, [pc, #104]	; (800296c <IIS3DWB_Thread+0x2d4>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f7fd fe67 	bl	80005dc <__aeabi_ul2d>
 800290e:	4680      	mov	r8, r0
 8002910:	4689      	mov	r9, r1
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <IIS3DWB_Thread+0x2f4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe1c 	bl	8000554 <__aeabi_ui2d>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4640      	mov	r0, r8
 8002922:	4649      	mov	r1, r9
 8002924:	f7fd ffba 	bl	800089c <__aeabi_ddiv>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	ec43 2b17 	vmov	d7, r2, r3
 8002930:	eeb0 0a47 	vmov.f32	s0, s14
 8002934:	eef0 0a67 	vmov.f32	s1, s15
 8002938:	f44f 7140 	mov.w	r1, #768	; 0x300
 800293c:	4812      	ldr	r0, [pc, #72]	; (8002988 <IIS3DWB_Thread+0x2f0>)
 800293e:	f000 fd5f 	bl	8003400 <IIS3DWB_Data_Ready>
 8002942:	e6b4      	b.n	80026ae <IIS3DWB_Thread+0x16>
        }
      }
    }
    else if ( IIS3DWB_Sensor_State == SM_SENSOR_STATE_SUSPENDING)
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <IIS3DWB_Thread+0x2d0>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	f47f aeb0 	bne.w	80026ae <IIS3DWB_Thread+0x16>
    {
#ifdef DATA_TEST
      usbTestData = 0;
#endif      
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_NOT_BATCHED);
 800294e:	2100      	movs	r1, #0
 8002950:	4808      	ldr	r0, [pc, #32]	; (8002974 <IIS3DWB_Thread+0x2dc>)
 8002952:	f002 fecd 	bl	80056f0 <iis3dwb_fifo_xl_batch_set>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_SUSPENDED;
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <IIS3DWB_Thread+0x2d0>)
 8002958:	2202      	movs	r2, #2
 800295a:	701a      	strb	r2, [r3, #0]
      osThreadSuspend(IIS3DWB_Thread_Id);
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <IIS3DWB_Thread+0x2f8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f014 fe74 	bl	801764e <osThreadSuspend>
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 8002966:	e6a2      	b.n	80026ae <IIS3DWB_Thread+0x16>
 8002968:	20000004 	.word	0x20000004
 800296c:	20000670 	.word	0x20000670
 8002970:	20000664 	.word	0x20000664
 8002974:	20000018 	.word	0x20000018
 8002978:	2000ff08 	.word	0x2000ff08
 800297c:	200002d8 	.word	0x200002d8
 8002980:	20000660 	.word	0x20000660
 8002984:	20000668 	.word	0x20000668
 8002988:	200002e0 	.word	0x200002e0
 800298c:	20000038 	.word	0x20000038
 8002990:	2000ff04 	.word	0x2000ff04

08002994 <IIS3DWB_Int_Callback>:
}



static void IIS3DWB_Int_Callback(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  tim_value = hsm_tim.Instance->CNT;
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <IIS3DWB_Int_Callback+0x1c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <IIS3DWB_Int_Callback+0x20>)
 80029a0:	6013      	str	r3, [r2, #0]
  osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <IIS3DWB_Int_Callback+0x24>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f014 fc4a 	bl	8017240 <osSemaphoreRelease>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200187fc 	.word	0x200187fc
 80029b4:	20000660 	.word	0x20000660
 80029b8:	200002d8 	.word	0x200002d8

080029bc <UpdateTimerValue>:

void UpdateTimerValue(void){
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
	tim_value = hsm_tim.Instance->CNT;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <UpdateTimerValue+0x1c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <UpdateTimerValue+0x20>)
 80029c8:	6013      	str	r3, [r2, #0]
	osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <UpdateTimerValue+0x24>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f014 fc36 	bl	8017240 <osSemaphoreRelease>
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200187fc 	.word	0x200187fc
 80029dc:	20000660 	.word	0x20000660
 80029e0:	200002d8 	.word	0x200002d8

080029e4 <IIS3DWB_Set_State>:

void IIS3DWB_Set_State(SM_Sensor_State_t newState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  IIS3DWB_Sensor_State = newState;
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <IIS3DWB_Set_State+0x1c>)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	7013      	strb	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	20000004 	.word	0x20000004

08002a04 <IIS3DWB_Start>:
  IIS3DWB_Init_Param.FS[0] = newFS1;
  IIS3DWB_Init_Param.FS[0] = newFS2;
}

void IIS3DWB_Start(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f7ff ffeb 	bl	80029e4 <IIS3DWB_Set_State>
  osThreadResume(IIS3DWB_Thread_Id);
 8002a0e:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <IIS3DWB_Start+0x18>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f014 fe28 	bl	8017668 <osThreadResume>
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	2000ff04 	.word	0x2000ff04

08002a20 <IIS3DWB_Stop>:

void IIS3DWB_Stop(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_SUSPENDING);  
 8002a24:	2001      	movs	r0, #1
 8002a26:	f7ff ffdd 	bl	80029e4 <IIS3DWB_Set_State>
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <IMP34DT05_Set_State>:
  
}


void IMP34DT05_Set_State(SM_Sensor_State_t newState)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  IMP34DT05_Sensor_State = newState;
 8002a3a:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <IMP34DT05_Set_State+0x1c>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	7013      	strb	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	20000024 	.word	0x20000024

08002a50 <IMP34DT05_Start>:
  IMP34DT05_Init_Param.FS[0] = newFS1;
  IMP34DT05_Init_Param.FS[0] = newFS2;
}

void IMP34DT05_Start(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002a54:	2003      	movs	r0, #3
 8002a56:	f7ff ffeb 	bl	8002a30 <IMP34DT05_Set_State>
  osThreadResume(IMP34DT05_Thread_Id);
 8002a5a:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <IMP34DT05_Start+0x18>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f014 fe02 	bl	8017668 <osThreadResume>
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	2000ff28 	.word	0x2000ff28

08002a6c <IMP34DT05_Stop>:

void IMP34DT05_Stop(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002a70:	2001      	movs	r0, #1
 8002a72:	f7ff ffdd 	bl	8002a30 <IMP34DT05_Set_State>
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <ISM330DHCX_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(ism330dhcx_DreadySem_id);    
}

void ISM330DHCX_Set_State(SM_Sensor_State_t newState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  ISM330DHCX_Sensor_State = newState;
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <ISM330DHCX_Set_State+0x1c>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	7013      	strb	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	20000025 	.word	0x20000025

08002a9c <ISM330DHCX_Start>:
  ISM330DHCX_Init_Param.FS[0] = newFS1;
  ISM330DHCX_Init_Param.FS[0] = newFS2;
}

void ISM330DHCX_Start(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f7ff ffeb 	bl	8002a7c <ISM330DHCX_Set_State>
  osThreadResume(ISM330DHCX_Thread_Id);
 8002aa6:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <ISM330DHCX_Start+0x18>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f014 fddc 	bl	8017668 <osThreadResume>
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20015e80 	.word	0x20015e80

08002ab8 <ISM330DHCX_Stop>:

void ISM330DHCX_Stop(void)
{  
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002abc:	2001      	movs	r0, #1
 8002abe:	f7ff ffdd 	bl	8002a7c <ISM330DHCX_Set_State>
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <LPS22HH_Set_State>:
    }    
  }     
}

void LPS22HH_Set_State(SM_Sensor_State_t newState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  LPS22HH_Sensor_State = newState;
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <LPS22HH_Set_State+0x1c>)
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	7013      	strb	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	20000026 	.word	0x20000026

08002ae8 <LPS22HH_Start>:
  LPS22HH_Init_Param.FS[0] = newFS1;
  LPS22HH_Init_Param.FS[0] = newFS2;
}

void LPS22HH_Start(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002aec:	2003      	movs	r0, #3
 8002aee:	f7ff ffeb 	bl	8002ac8 <LPS22HH_Set_State>
  osThreadResume(LPS22HH_Thread_Id);
 8002af2:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <LPS22HH_Start+0x18>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f014 fdb6 	bl	8017668 <osThreadResume>
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20015fa4 	.word	0x20015fa4

08002b04 <LPS22HH_Stop>:

void LPS22HH_Stop(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7ff ffdd 	bl	8002ac8 <LPS22HH_Set_State>
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <main>:
* @brief  Main program
* @param  None
* @retval None
*/  
int main(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	; 0x38
 8002b18:	af00      	add	r7, sp, #0



	HAL_Init();
 8002b1a:	f003 fc9b 	bl	8006454 <HAL_Init>

	SystemClock_Config();
 8002b1e:	f000 f92d 	bl	8002d7c <SystemClock_Config>
    
	/* Enable Power Clock for low power modes*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <main+0x104>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	4a3c      	ldr	r2, [pc, #240]	; (8002c18 <main+0x104>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b2e:	4b3a      	ldr	r3, [pc, #232]	; (8002c18 <main+0x104>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
	MX_SDMMC1_SD_Init();
 8002b3a:	f000 f87d 	bl	8002c38 <MX_SDMMC1_SD_Init>
	//HAL_PWREx_EnableVddUSB();		/* USB */
	//HAL_PWREx_EnableVddIO2();		/* VddIO2 is for Port G, since we are not using it */
	//BSP_Enable_DCDC2();				//Only for I2C 3, WiFi
  
	/* Configure the Battery Charger */
	BattChrg_Init();
 8002b3e:	f000 f9bd 	bl	8002ebc <BattChrg_Init>
  
	/* Configure Power Voltage Detector(PVD) to detect if battery voltage is low */
	PVD_Config();
 8002b42:	f000 f9ef 	bl	8002f24 <PVD_Config>
  
	/* Configure DEBUG PIN and LED */
	//BSP_DEBUG_PIN_Init_All();
	BSP_LED_Init(LED1);				//Green
 8002b46:	2000      	movs	r0, #0
 8002b48:	f002 ff30 	bl	80059ac <BSP_LED_Init>
	BSP_LED_Init(LED2);				//Orange
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f002 ff2d 	bl	80059ac <BSP_LED_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();		//PA13, 14 are for DEBUG
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <main+0x104>)
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	4a30      	ldr	r2, [pc, #192]	; (8002c18 <main+0x104>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <main+0x104>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
   
	HSD_JSON_set_allocation_functions(HSD_malloc, HSD_free);
 8002b6a:	492c      	ldr	r1, [pc, #176]	; (8002c1c <main+0x108>)
 8002b6c:	482c      	ldr	r0, [pc, #176]	; (8002c20 <main+0x10c>)
 8002b6e:	f7fe fa65 	bl	800103c <HSD_JSON_set_allocation_functions>
  
  /* Start USB */  
  //MX_USB_DEVICE_Init();			//Dont know why this is disabled
  
  /* Set default device description */
  set_default_description();
 8002b72:	f7ff f93f 	bl	8001df4 <set_default_description>
  
  /* USER Button initialization */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002b76:	2101      	movs	r1, #1
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f002 fec5 	bl	8005908 <BSP_PB_Init>
  BSP_PB_PWR_Init();
 8002b7e:	f002 fe93 	bl	80058a8 <BSP_PB_PWR_Init>
  
  /* Sensor Manager initilization, only using PID (Platform Indepentent Drivers) */
  SM_Peripheral_Init();
 8002b82:	f002 f81b 	bl	8004bbc <SM_Peripheral_Init>
  SM_OS_Init();
 8002b86:	f001 fedd 	bl	8004944 <SM_OS_Init>
  
  MX_USART2_Init();
 8002b8a:	f000 f877 	bl	8002c7c <MX_USART2_Init>
  Peripheral_MSP_Init_All();  
 8002b8e:	f000 fc4f 	bl	8003430 <Peripheral_MSP_Init_All>
  SDM_Peripheral_Init();
 8002b92:	f001 f88d 	bl	8003cb0 <SDM_Peripheral_Init>
  
  Peripheral_OS_Init_All();  
 8002b96:	f000 fc51 	bl	800343c <Peripheral_OS_Init_All>
  SDM_OS_Init();
 8002b9a:	f001 f88f 	bl	8003cbc <SDM_OS_Init>
  
  //Show reset
  char wakeUp [] = {"MCU WAKE UP"};
 8002b9e:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <main+0x110>)
 8002ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ba6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t *) wakeUp, sizeof(wakeUp), HAL_MAX_DELAY);
 8002baa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	481c      	ldr	r0, [pc, #112]	; (8002c28 <main+0x114>)
 8002bb6:	f00c fb8f 	bl	800f2d8 <HAL_UART_Transmit>

  //Get SOC
  BSP_BC_GetVoltageAndLevel(&mvLevel, &batteryLevel);
 8002bba:	491c      	ldr	r1, [pc, #112]	; (8002c2c <main+0x118>)
 8002bbc:	481c      	ldr	r0, [pc, #112]	; (8002c30 <main+0x11c>)
 8002bbe:	f003 f807 	bl	8005bd0 <BSP_BC_GetVoltageAndLevel>

  //Show SOC
  char soc[21] = {"SOC in % :"};
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <main+0x120>)
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bca:	c303      	stmia	r3!, {r0, r1}
 8002bcc:	801a      	strh	r2, [r3, #0]
 8002bce:	3302      	adds	r3, #2
 8002bd0:	0c12      	lsrs	r2, r2, #16
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	f107 031f 	add.w	r3, r7, #31
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	811a      	strh	r2, [r3, #8]
  char batVal[5];
  itoa(batteryLevel, batVal,10);
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <main+0x118>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	220a      	movs	r2, #10
 8002bec:	4619      	mov	r1, r3
 8002bee:	f01b f8af 	bl	801dd50 <itoa>
  strcat(soc, batVal);
 8002bf2:	f107 020c 	add.w	r2, r7, #12
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f01b fee8 	bl	801e9d2 <strcat>
  HAL_UART_Transmit(&huart2, (uint8_t *) soc, sizeof(soc), HAL_MAX_DELAY);
 8002c02:	f107 0114 	add.w	r1, r7, #20
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	2215      	movs	r2, #21
 8002c0c:	4806      	ldr	r0, [pc, #24]	; (8002c28 <main+0x114>)
 8002c0e:	f00c fb63 	bl	800f2d8 <HAL_UART_Transmit>

  /* Start scheduler */
  osKernelStart();
 8002c12:	f014 fa75 	bl	8017100 <osKernelStart>
  
  while(1);  
 8002c16:	e7fe      	b.n	8002c16 <main+0x102>
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	0801de35 	.word	0x0801de35
 8002c20:	0801de25 	.word	0x0801de25
 8002c24:	080222d8 	.word	0x080222d8
 8002c28:	20016358 	.word	0x20016358
 8002c2c:	20000720 	.word	0x20000720
 8002c30:	2000071c 	.word	0x2000071c
 8002c34:	080222e4 	.word	0x080222e4

08002c38 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <MX_SDMMC1_SD_Init+0x3c>)
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <MX_SDMMC1_SD_Init+0x40>)
 8002c40:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <MX_SDMMC1_SD_Init+0x3c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <MX_SDMMC1_SD_Init+0x3c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <MX_SDMMC1_SD_Init+0x3c>)
 8002c50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c54:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <MX_SDMMC1_SD_Init+0x3c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <MX_SDMMC1_SD_Init+0x3c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <MX_SDMMC1_SD_Init+0x3c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20015fc0 	.word	0x20015fc0
 8002c78:	50062400 	.word	0x50062400

08002c7c <MX_USART2_Init>:


//UART2 INIT
void MX_USART2_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <MX_USART2_Init+0x94>)
 8002c82:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <MX_USART2_Init+0x98>)
 8002c84:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <MX_USART2_Init+0x94>)
 8002c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c8c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <MX_USART2_Init+0x94>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <MX_USART2_Init+0x94>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <MX_USART2_Init+0x94>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <MX_USART2_Init+0x94>)
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <MX_USART2_Init+0x94>)
 8002ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cac:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <MX_USART2_Init+0x94>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <MX_USART2_Init+0x94>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <MX_USART2_Init+0x94>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <MX_USART2_Init+0x94>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cc6:	4812      	ldr	r0, [pc, #72]	; (8002d10 <MX_USART2_Init+0x94>)
 8002cc8:	f00c fab6 	bl	800f238 <HAL_UART_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_USART2_Init+0x5a>
	{
		Error_Handler();
 8002cd2:	f000 fbcf 	bl	8003474 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	480d      	ldr	r0, [pc, #52]	; (8002d10 <MX_USART2_Init+0x94>)
 8002cda:	f00d fef4 	bl	8010ac6 <HAL_UARTEx_SetTxFifoThreshold>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_USART2_Init+0x6c>
	{
		Error_Handler();
 8002ce4:	f000 fbc6 	bl	8003474 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4809      	ldr	r0, [pc, #36]	; (8002d10 <MX_USART2_Init+0x94>)
 8002cec:	f00d ff29 	bl	8010b42 <HAL_UARTEx_SetRxFifoThreshold>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_USART2_Init+0x7e>
	{
		Error_Handler();
 8002cf6:	f000 fbbd 	bl	8003474 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002cfa:	4805      	ldr	r0, [pc, #20]	; (8002d10 <MX_USART2_Init+0x94>)
 8002cfc:	f00d feaa 	bl	8010a54 <HAL_UARTEx_DisableFifoMode>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_USART2_Init+0x8e>
	{
		Error_Handler();
 8002d06:	f000 fbb5 	bl	8003474 <Error_Handler>
	}

}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20016358 	.word	0x20016358
 8002d14:	40004400 	.word	0x40004400

08002d18 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
 // UNUSED(huart);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 030c 	add.w	r3, r7, #12
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_UART_MspInit+0x58>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <HAL_UART_MspInit+0x58>)
 8002d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <HAL_UART_MspInit+0x58>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART_CR2_RXINV|USART2_RTS_Pin|USART2_TX_Pin;
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_UART_MspInit+0x5c>)
 8002d4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d58:	2307      	movs	r3, #7
 8002d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d5c:	f107 030c 	add.w	r3, r7, #12
 8002d60:	4619      	mov	r1, r3
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <HAL_UART_MspInit+0x60>)
 8002d64:	f005 fbf4 	bl	8008550 <HAL_GPIO_Init>
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	00010030 	.word	0x00010030
 8002d78:	48000c00 	.word	0x48000c00

08002d7c <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0be      	sub	sp, #248	; 0xf8
 8002d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d82:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d86:	2244      	movs	r2, #68	; 0x44
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f01b f882 	bl	801de94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d90:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	229c      	movs	r2, #156	; 0x9c
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f01b f874 	bl	801de94 <memset>
  
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002dac:	2000      	movs	r0, #0
 8002dae:	f007 f9bf 	bl	800a130 <HAL_PWREx_ControlVoltageScaling>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <SystemClock_Config+0x40>
  {
    Error_Handler();
 8002db8:	f000 fb5c 	bl	8003474 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  HAL_PWR_EnableBkUpAccess();
 8002dbc:	f007 f918 	bl	8009ff0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <SystemClock_Config+0x134>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	; (8002eb0 <SystemClock_Config+0x134>)
 8002dc8:	f023 0318 	bic.w	r3, r3, #24
 8002dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;	//Changed
 8002dd0:	2325      	movs	r3, #37	; 0x25
 8002dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;					//Changed
 8002dde:	2301      	movs	r3, #1
 8002de0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002df0:	2303      	movs	r3, #3
 8002df2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002df6:	2302      	movs	r3, #2
 8002df8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002dfc:	2314      	movs	r3, #20
 8002dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;				//Changed
 8002e02:	2302      	movs	r3, #2
 8002e04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e14:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f007 faa1 	bl	800a360 <HAL_RCC_OscConfig>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002e24:	f000 fb26 	bl	8003474 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e28:	230f      	movs	r3, #15
 8002e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e4a:	2105      	movs	r1, #5
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f007 fead 	bl	800abac <HAL_RCC_ClockConfig>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002e58:	f000 fb0c 	bl	8003474 <Error_Handler>
#if 0
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
    |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
      |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_DFSDM1AUDIO;
#else
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
 8002e5c:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <SystemClock_Config+0x138>)
 8002e5e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
#endif

  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002e60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
#endif

  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8002e6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e70:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

#if 1
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8002e7e:	2305      	movs	r3, #5
 8002e80:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8002e82:	2360      	movs	r3, #96	; 0x60
 8002e84:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8002e86:	2319      	movs	r3, #25
 8002e88:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002e8e:	2304      	movs	r3, #4
 8002e90:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <SystemClock_Config+0x13c>)
 8002e94:	623b      	str	r3, [r7, #32]
#endif

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f008 f935 	bl	800b108 <HAL_RCCEx_PeriphCLKConfig>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8002ea4:	f000 fae6 	bl	8003474 <Error_Handler>
  }  
}
 8002ea8:	bf00      	nop
 8002eaa:	37f8      	adds	r7, #248	; 0xf8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	000a4002 	.word	0x000a4002
 8002eb8:	01010000 	.word	0x01010000

08002ebc <BattChrg_Init>:


void BattChrg_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  BSP_BC_Init();
 8002ec0:	f002 fdea 	bl	8005a98 <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 8002ec4:	f002 fe2c 	bl	8005b20 <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);  
 8002ec8:	200a      	movs	r0, #10
 8002eca:	f002 fded 	bl	8005aa8 <BSP_BC_CmdSend>
  
  HAL_EXTI_GetHandle(&BC_exti, EXTI_LINE_10);  
 8002ece:	4908      	ldr	r1, [pc, #32]	; (8002ef0 <BattChrg_Init+0x34>)
 8002ed0:	4808      	ldr	r0, [pc, #32]	; (8002ef4 <BattChrg_Init+0x38>)
 8002ed2:	f005 faf9 	bl	80084c8 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&BC_exti,  HAL_EXTI_COMMON_CB_ID, BC_Int_Callback);
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <BattChrg_Init+0x3c>)
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4806      	ldr	r0, [pc, #24]	; (8002ef4 <BattChrg_Init+0x38>)
 8002edc:	f005 fada 	bl	8008494 <HAL_EXTI_RegisterCallback>
  
  t_stwin = HAL_GetTick(); 
 8002ee0:	f003 fb24 	bl	800652c <HAL_GetTick>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <BattChrg_Init+0x40>)
 8002ee8:	6013      	str	r3, [r2, #0]
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	1600000a 	.word	0x1600000a
 8002ef4:	20016318 	.word	0x20016318
 8002ef8:	08002f01 	.word	0x08002f01
 8002efc:	20000718 	.word	0x20000718

08002f00 <BC_Int_Callback>:
* @brief  Battery Charger Interrupt callback
* @param  None
* @retval None
*/
void BC_Int_Callback(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  if(HAL_GetTick() - t_stwin > 4000)
 8002f04:	f003 fb12 	bl	800652c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <BC_Int_Callback+0x20>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002f14:	d902      	bls.n	8002f1c <BC_Int_Callback+0x1c>
  {
    BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8002f16:	2017      	movs	r0, #23
 8002f18:	f002 fdc6 	bl	8005aa8 <BSP_BC_CmdSend>
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000718 	.word	0x20000718

08002f24 <PVD_Config>:
* @brief  Configures the PVD resources.
* @param  None
* @retval None
*/
void PVD_Config(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD;
  
  /*##-1- Enable Power Clock #################################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <PVD_Config+0x50>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <PVD_Config+0x50>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6593      	str	r3, [r2, #88]	; 0x58
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <PVD_Config+0x50>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
  
  /*##-2- Configure the NVIC for PVD #########################################*/
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2100      	movs	r1, #0
 8002f46:	2001      	movs	r0, #1
 8002f48:	f005 f84b 	bl	8007fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f005 f864 	bl	800801a <HAL_NVIC_EnableIRQ>
  
  /* Configure the PVD Level to 6 and generate an interrupt on falling
  edge(PVD detection level set to 2.9V, refer to the electrical characteristics
  of you device datasheet for more details) */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002f52:	230c      	movs	r3, #12
 8002f54:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8002f56:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002f5a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	4618      	mov	r0, r3
 8002f62:	f007 f855 	bl	800a010 <HAL_PWR_ConfigPVD>
  
  /* Enable the PVD Output */
  HAL_PWR_EnablePVD();
 8002f66:	f007 f8b3 	bl	800a0d0 <HAL_PWR_EnablePVD>
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000

08002f78 <vApplicationIdleHook>:


void vApplicationIdleHook( void )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
	//Starts measurement manually


#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT) 
	//If SD_Logging enabled start measurement
  if(SD_Logging_Enabled)
 8002f7c:	4b3e      	ldr	r3, [pc, #248]	; (8003078 <vApplicationIdleHook+0x100>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <vApplicationIdleHook+0x10>
  {
    SDM_AutosaveFile();
 8002f84:	f001 fc38 	bl	80047f8 <SDM_AutosaveFile>
  }
#endif
  
  if (!SD_Logging_Active)
 8002f88:	4b3c      	ldr	r3, [pc, #240]	; (800307c <vApplicationIdleHook+0x104>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d171      	bne.n	8003074 <vApplicationIdleHook+0xfc>
  {
    if(com_status == HS_DATALOG_USB_STARTED)
 8002f90:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <vApplicationIdleHook+0x108>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d121      	bne.n	8002fde <vApplicationIdleHook+0x66>
    {
        if(!(HAL_GetTick()%100)) 
 8002f9a:	f003 fac7 	bl	800652c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	4b38      	ldr	r3, [pc, #224]	; (8003084 <vApplicationIdleHook+0x10c>)
 8002fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2164      	movs	r1, #100	; 0x64
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <vApplicationIdleHook+0x44>
        {
          BSP_LED_On(LED_ORANGE);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f002 fd3b 	bl	8005a30 <BSP_LED_On>
 8002fba:	e059      	b.n	8003070 <vApplicationIdleHook+0xf8>
        }
        else 
        {
          if(!(HAL_GetTick()%50)) 
 8002fbc:	f003 fab6 	bl	800652c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b30      	ldr	r3, [pc, #192]	; (8003084 <vApplicationIdleHook+0x10c>)
 8002fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	2132      	movs	r1, #50	; 0x32
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d14c      	bne.n	8003070 <vApplicationIdleHook+0xf8>
          {
            BSP_LED_Off(LED_ORANGE);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f002 fd44 	bl	8005a64 <BSP_LED_Off>
 8002fdc:	e048      	b.n	8003070 <vApplicationIdleHook+0xf8>
          }
        }        
    }
    else
    {
      if (!BSP_SD_IsDetected())
 8002fde:	f003 f95d 	bl	800629c <BSP_SD_IsDetected>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d121      	bne.n	800302c <vApplicationIdleHook+0xb4>
      {
        if(!(HAL_GetTick()%200)) 
 8002fe8:	f003 faa0 	bl	800652c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b25      	ldr	r3, [pc, #148]	; (8003084 <vApplicationIdleHook+0x10c>)
 8002ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	21c8      	movs	r1, #200	; 0xc8
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <vApplicationIdleHook+0x92>
        {
          BSP_LED_On(LED_ORANGE);
 8003002:	2001      	movs	r0, #1
 8003004:	f002 fd14 	bl	8005a30 <BSP_LED_On>
 8003008:	e032      	b.n	8003070 <vApplicationIdleHook+0xf8>
        }
        else 
        {
          if(!(HAL_GetTick()%100)) 
 800300a:	f003 fa8f 	bl	800652c <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <vApplicationIdleHook+0x10c>)
 8003012:	fba3 1302 	umull	r1, r3, r3, r2
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2164      	movs	r1, #100	; 0x64
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d125      	bne.n	8003070 <vApplicationIdleHook+0xf8>
          {
            BSP_LED_Off(LED_ORANGE);
 8003024:	2001      	movs	r0, #1
 8003026:	f002 fd1d 	bl	8005a64 <BSP_LED_Off>
 800302a:	e021      	b.n	8003070 <vApplicationIdleHook+0xf8>
          }
        }    
      }
      else
      {
        if(!(HAL_GetTick()%1000)) 
 800302c:	f003 fa7e 	bl	800652c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <vApplicationIdleHook+0x110>)
 8003034:	fba3 1302 	umull	r1, r3, r3, r2
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d103      	bne.n	8003050 <vApplicationIdleHook+0xd8>
        {
          BSP_LED_On(LED_ORANGE);
 8003048:	2001      	movs	r0, #1
 800304a:	f002 fcf1 	bl	8005a30 <BSP_LED_On>
 800304e:	e00f      	b.n	8003070 <vApplicationIdleHook+0xf8>
        }
        else 
        {
          if(!(HAL_GetTick()%50)) 
 8003050:	f003 fa6c 	bl	800652c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <vApplicationIdleHook+0x10c>)
 8003058:	fba3 1302 	umull	r1, r3, r3, r2
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	2132      	movs	r1, #50	; 0x32
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <vApplicationIdleHook+0xf8>
          {
            BSP_LED_Off(LED_ORANGE);
 800306a:	2001      	movs	r0, #1
 800306c:	f002 fcfa 	bl	8005a64 <BSP_LED_Off>
        }
      }
    }
    //Start Measurement manually
    //Show reset
    SDM_StartMeasurements();
 8003070:	f001 fb62 	bl	8004738 <SDM_StartMeasurements>
  }
}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000768 	.word	0x20000768
 800307c:	20000754 	.word	0x20000754
 8003080:	200002d4 	.word	0x200002d4
 8003084:	51eb851f 	.word	0x51eb851f
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <SENSOR_Generic_Data_Ready>:
* @param  size: input data buffer size [bytes]
* @param  timeStamp: timestamp of the latest sample in the input buffer
* @retval 
*/
void SENSOR_Generic_Data_Ready(uint16_t sId, uint8_t *buf, uint16_t size, double timeStamp)
{ 
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b08c      	sub	sp, #48	; 0x30
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	ed87 0b00 	vstr	d0, [r7]
 800309a:	81fb      	strh	r3, [r7, #14]
 800309c:	4613      	mov	r3, r2
 800309e:	81bb      	strh	r3, [r7, #12]
  COM_SensorStatus_t * tempStatus = COM_GetSensorStatus(sId);    
 80030a0:	89fb      	ldrh	r3, [r7, #14]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fe fdab 	bl	8001c00 <COM_GetSensorStatus>
 80030aa:	6238      	str	r0, [r7, #32]
  COM_SensorDescriptor_t * tempDescriptor = COM_GetSensorDescriptor(sId); 
 80030ac:	89fb      	ldrh	r3, [r7, #14]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fd91 	bl	8001bd8 <COM_GetSensorDescriptor>
 80030b6:	61f8      	str	r0, [r7, #28]
  COM_SubSensorDescriptor_t *tempSubSensorDescriptor; 
  uint16_t toSend = 0, nBytesPerSample = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80030bc:	2300      	movs	r3, #0
 80030be:	85bb      	strh	r3, [r7, #44]	; 0x2c
  
  if (sensor_first_dataReady[sId]) // Discard first set of sensor data
 80030c0:	89fb      	ldrh	r3, [r7, #14]
 80030c2:	4a89      	ldr	r2, [pc, #548]	; (80032e8 <SENSOR_Generic_Data_Ready+0x25c>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d020      	beq.n	800310c <SENSOR_Generic_Data_Ready+0x80>
  {
    sensor_first_dataReady[sId] = 0;    
 80030ca:	89fb      	ldrh	r3, [r7, #14]
 80030cc:	4a86      	ldr	r2, [pc, #536]	; (80032e8 <SENSOR_Generic_Data_Ready+0x25c>)
 80030ce:	2100      	movs	r1, #0
 80030d0:	54d1      	strb	r1, [r2, r3]
    sensor_n_samples_acc[sId] = 0.0f;    
 80030d2:	89fb      	ldrh	r3, [r7, #14]
 80030d4:	4a85      	ldr	r2, [pc, #532]	; (80032ec <SENSOR_Generic_Data_Ready+0x260>)
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
    tempStatus->initialOffset = (float)timeStamp;
 80030e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030e4:	f7fd fda8 	bl	8000c38 <__aeabi_d2f>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	609a      	str	r2, [r3, #8]
    old_time_stamp[sId] = timeStamp;
 80030ee:	89fb      	ldrh	r3, [r7, #14]
 80030f0:	4a7f      	ldr	r2, [pc, #508]	; (80032f0 <SENSOR_Generic_Data_Ready+0x264>)
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	18d1      	adds	r1, r2, r3
 80030f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030fa:	e9c1 2300 	strd	r2, r3, [r1]
    sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;
 80030fe:	89fb      	ldrh	r3, [r7, #14]
 8003100:	6a3a      	ldr	r2, [r7, #32]
 8003102:	8991      	ldrh	r1, [r2, #12]
 8003104:	4a7b      	ldr	r2, [pc, #492]	; (80032f4 <SENSOR_Generic_Data_Ready+0x268>)
 8003106:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
      }      
    }    
  }    
}
 800310a:	e16c      	b.n	80033e6 <SENSOR_Generic_Data_Ready+0x35a>
    if(tempDescriptor->dataType == DATA_TYPE_FLOAT || tempDescriptor->dataType == DATA_TYPE_INT32 || tempDescriptor->dataType == DATA_TYPE_UINT32) 
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	7c5b      	ldrb	r3, [r3, #17]
 8003110:	2b06      	cmp	r3, #6
 8003112:	d007      	beq.n	8003124 <SENSOR_Generic_Data_Ready+0x98>
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	7c5b      	ldrb	r3, [r3, #17]
 8003118:	2b05      	cmp	r3, #5
 800311a:	d003      	beq.n	8003124 <SENSOR_Generic_Data_Ready+0x98>
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	7c5b      	ldrb	r3, [r3, #17]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d102      	bne.n	800312a <SENSOR_Generic_Data_Ready+0x9e>
      nBytesPerSample = 4;
 8003124:	2304      	movs	r3, #4
 8003126:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003128:	e014      	b.n	8003154 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT16 || tempDescriptor->dataType == DATA_TYPE_INT16) 
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	7c5b      	ldrb	r3, [r3, #17]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d003      	beq.n	800313a <SENSOR_Generic_Data_Ready+0xae>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	7c5b      	ldrb	r3, [r3, #17]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d102      	bne.n	8003140 <SENSOR_Generic_Data_Ready+0xb4>
      nBytesPerSample = 2;
 800313a:	2302      	movs	r3, #2
 800313c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800313e:	e009      	b.n	8003154 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT8 || tempDescriptor->dataType == DATA_TYPE_INT8) 
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	7c5b      	ldrb	r3, [r3, #17]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <SENSOR_Generic_Data_Ready+0xc4>
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	7c5b      	ldrb	r3, [r3, #17]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <SENSOR_Generic_Data_Ready+0xc8>
      nBytesPerSample = 1;
 8003150:	2301      	movs	r3, #1
 8003152:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint8_t totalDataPerSample = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 800315a:	2300      	movs	r3, #0
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
 800315e:	e01d      	b.n	800319c <SENSOR_Generic_Data_Ready+0x110>
      if (tempStatus->subSensorStatus[i].isActive)
 8003160:	6a39      	ldr	r1, [r7, #32]
 8003162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3324      	adds	r3, #36	; 0x24
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00f      	beq.n	8003196 <SENSOR_Generic_Data_Ready+0x10a>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 8003176:	89fb      	ldrh	r3, [r7, #14]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe fd53 	bl	8001c2c <COM_GetSubSensorDescriptor>
 8003186:	61b8      	str	r0, [r7, #24]
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	789a      	ldrb	r2, [r3, #2]
 800318c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003190:	4413      	add	r3, r2
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	3301      	adds	r3, #1
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031a2:	461a      	mov	r2, r3
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	4293      	cmp	r3, r2
 80031a8:	dbda      	blt.n	8003160 <SENSOR_Generic_Data_Ready+0xd4>
    nBytesPerSample *= totalDataPerSample;
 80031aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80031b2:	fb12 f303 	smulbb	r3, r2, r3
 80031b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sensor_n_samples_acc[sId] = (float)(size / nBytesPerSample);
 80031b8:	89ba      	ldrh	r2, [r7, #12]
 80031ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	89fb      	ldrh	r3, [r7, #14]
 80031c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031cc:	4a47      	ldr	r2, [pc, #284]	; (80032ec <SENSOR_Generic_Data_Ready+0x260>)
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	edc3 7a00 	vstr	s15, [r3]
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 80031d6:	89fb      	ldrh	r3, [r7, #14]
 80031d8:	4a44      	ldr	r2, [pc, #272]	; (80032ec <SENSOR_Generic_Data_Ready+0x260>)
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9d9 	bl	8000598 <__aeabi_f2d>
 80031e6:	4604      	mov	r4, r0
 80031e8:	460d      	mov	r5, r1
 80031ea:	89fb      	ldrh	r3, [r7, #14]
 80031ec:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <SENSOR_Generic_Data_Ready+0x264>)
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031fa:	f7fd f86d 	bl	80002d8 <__aeabi_dsub>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4620      	mov	r0, r4
 8003204:	4629      	mov	r1, r5
 8003206:	f7fd fb49 	bl	800089c <__aeabi_ddiv>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	f7fd fd11 	bl	8000c38 <__aeabi_d2f>
 8003216:	4602      	mov	r2, r0
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	605a      	str	r2, [r3, #4]
    old_time_stamp[sId] = timeStamp;
 800321c:	89fb      	ldrh	r3, [r7, #14]
 800321e:	4a34      	ldr	r2, [pc, #208]	; (80032f0 <SENSOR_Generic_Data_Ready+0x264>)
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	18d1      	adds	r1, r2, r3
 8003224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003228:	e9c1 2300 	strd	r2, r3, [r1]
    toSend = size/nBytesPerSample;
 800322c:	89ba      	ldrh	r2, [r7, #12]
 800322e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(toSend > 0)
 8003236:	e0d2      	b.n	80033de <SENSOR_Generic_Data_Ready+0x352>
      if(toSend < sensor_n_samples_to_timestamp[sId] || sensor_n_samples_to_timestamp[sId] == 0)
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4a2e      	ldr	r2, [pc, #184]	; (80032f4 <SENSOR_Generic_Data_Ready+0x268>)
 800323c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003240:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003242:	429a      	cmp	r2, r3
 8003244:	d305      	bcc.n	8003252 <SENSOR_Generic_Data_Ready+0x1c6>
 8003246:	89fb      	ldrh	r3, [r7, #14]
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <SENSOR_Generic_Data_Ready+0x268>)
 800324a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d135      	bne.n	80032be <SENSOR_Generic_Data_Ready+0x232>
        if(com_status == HS_DATALOG_SD_STARTED)
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <SENSOR_Generic_Data_Ready+0x26c>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d10b      	bne.n	8003274 <SENSOR_Generic_Data_Ready+0x1e8>
          SDM_Fill_Buffer(sId , (uint8_t *)buf, toSend * nBytesPerSample);
 800325c:	89fb      	ldrh	r3, [r7, #14]
 800325e:	b2d8      	uxtb	r0, r3
 8003260:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003262:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003264:	fb12 f303 	smulbb	r3, r2, r3
 8003268:	b29b      	uxth	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	f001 f8a9 	bl	80043c4 <SDM_Fill_Buffer>
 8003272:	e010      	b.n	8003296 <SENSOR_Generic_Data_Ready+0x20a>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <SENSOR_Generic_Data_Ready+0x26c>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10b      	bne.n	8003296 <SENSOR_Generic_Data_Ready+0x20a>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber  , (uint8_t *)buf, toSend * nBytesPerSample);
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003284:	b2d9      	uxtb	r1, r3
 8003286:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003288:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	481a      	ldr	r0, [pc, #104]	; (80032fc <SENSOR_Generic_Data_Ready+0x270>)
 8003292:	f00f f995 	bl	80125c0 <USBD_WCID_STREAMING_FillTxDataBuffer>
        if(sensor_n_samples_to_timestamp[sId] != 0)
 8003296:	89fb      	ldrh	r3, [r7, #14]
 8003298:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <SENSOR_Generic_Data_Ready+0x268>)
 800329a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <SENSOR_Generic_Data_Ready+0x22c>
          sensor_n_samples_to_timestamp[sId] -= toSend;
 80032a2:	89fb      	ldrh	r3, [r7, #14]
 80032a4:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <SENSOR_Generic_Data_Ready+0x268>)
 80032a6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80032aa:	89fb      	ldrh	r3, [r7, #14]
 80032ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80032ae:	1a8a      	subs	r2, r1, r2
 80032b0:	b291      	uxth	r1, r2
 80032b2:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <SENSOR_Generic_Data_Ready+0x268>)
 80032b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        toSend = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80032bc:	e08f      	b.n	80033de <SENSOR_Generic_Data_Ready+0x352>
        if(com_status == HS_DATALOG_SD_STARTED)
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <SENSOR_Generic_Data_Ready+0x26c>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d11b      	bne.n	8003300 <SENSOR_Generic_Data_Ready+0x274>
          SDM_Fill_Buffer(sId, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 80032c8:	89fb      	ldrh	r3, [r7, #14]
 80032ca:	b2d8      	uxtb	r0, r3
 80032cc:	89fb      	ldrh	r3, [r7, #14]
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <SENSOR_Generic_Data_Ready+0x268>)
 80032d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80032d6:	fb12 f303 	smulbb	r3, r2, r3
 80032da:	b29b      	uxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	f001 f870 	bl	80043c4 <SDM_Fill_Buffer>
 80032e4:	e021      	b.n	800332a <SENSOR_Generic_Data_Ready+0x29e>
 80032e6:	bf00      	nop
 80032e8:	20000028 	.word	0x20000028
 80032ec:	20000678 	.word	0x20000678
 80032f0:	200006a8 	.word	0x200006a8
 80032f4:	20000700 	.word	0x20000700
 80032f8:	200002d4 	.word	0x200002d4
 80032fc:	20016050 	.word	0x20016050
        else if (com_status == HS_DATALOG_USB_STARTED )
 8003300:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <SENSOR_Generic_Data_Ready+0x364>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d10f      	bne.n	800332a <SENSOR_Generic_Data_Ready+0x29e>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003310:	b2d9      	uxtb	r1, r3
 8003312:	89fb      	ldrh	r3, [r7, #14]
 8003314:	4a37      	ldr	r2, [pc, #220]	; (80033f4 <SENSOR_Generic_Data_Ready+0x368>)
 8003316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800331a:	461a      	mov	r2, r3
 800331c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800331e:	fb03 f302 	mul.w	r3, r3, r2
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4834      	ldr	r0, [pc, #208]	; (80033f8 <SENSOR_Generic_Data_Ready+0x36c>)
 8003326:	f00f f94b 	bl	80125c0 <USBD_WCID_STREAMING_FillTxDataBuffer>
        buf+=sensor_n_samples_to_timestamp[sId] * nBytesPerSample;
 800332a:	89fb      	ldrh	r3, [r7, #14]
 800332c:	4a31      	ldr	r2, [pc, #196]	; (80033f4 <SENSOR_Generic_Data_Ready+0x368>)
 800332e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003332:	461a      	mov	r2, r3
 8003334:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003336:	fb03 f302 	mul.w	r3, r3, r2
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4413      	add	r3, r2
 8003340:	60bb      	str	r3, [r7, #8]
        toSend -= sensor_n_samples_to_timestamp[sId];
 8003342:	89fb      	ldrh	r3, [r7, #14]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <SENSOR_Generic_Data_Ready+0x368>)
 8003346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800334a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd f91f 	bl	8000598 <__aeabi_f2d>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	f04f 0000 	mov.w	r0, #0
 8003362:	4926      	ldr	r1, [pc, #152]	; (80033fc <SENSOR_Generic_Data_Ready+0x370>)
 8003364:	f7fd fa9a 	bl	800089c <__aeabi_ddiv>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4614      	mov	r4, r2
 800336e:	461d      	mov	r5, r3
 8003370:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd f8fe 	bl	8000574 <__aeabi_i2d>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fd f962 	bl	8000648 <__aeabi_dmul>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800338c:	f7fc ffa4 	bl	80002d8 <__aeabi_dsub>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if(com_status == HS_DATALOG_SD_STARTED)
 8003398:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <SENSOR_Generic_Data_Ready+0x364>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d108      	bne.n	80033b4 <SENSOR_Generic_Data_Ready+0x328>
          SDM_Fill_Buffer(sId, (uint8_t *)&newTS, 8);
 80033a2:	89fb      	ldrh	r3, [r7, #14]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f107 0110 	add.w	r1, r7, #16
 80033aa:	2208      	movs	r2, #8
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 f809 	bl	80043c4 <SDM_Fill_Buffer>
 80033b2:	e00e      	b.n	80033d2 <SENSOR_Generic_Data_Ready+0x346>
        else if (com_status == HS_DATALOG_USB_STARTED )
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <SENSOR_Generic_Data_Ready+0x364>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d109      	bne.n	80033d2 <SENSOR_Generic_Data_Ready+0x346>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)&newTS, 8);
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80033c4:	b2d9      	uxtb	r1, r3
 80033c6:	f107 0210 	add.w	r2, r7, #16
 80033ca:	2308      	movs	r3, #8
 80033cc:	480a      	ldr	r0, [pc, #40]	; (80033f8 <SENSOR_Generic_Data_Ready+0x36c>)
 80033ce:	f00f f8f7 	bl	80125c0 <USBD_WCID_STREAMING_FillTxDataBuffer>
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	8991      	ldrh	r1, [r2, #12]
 80033d8:	4a06      	ldr	r2, [pc, #24]	; (80033f4 <SENSOR_Generic_Data_Ready+0x368>)
 80033da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    while(toSend > 0)
 80033de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f47f af29 	bne.w	8003238 <SENSOR_Generic_Data_Ready+0x1ac>
}
 80033e6:	bf00      	nop
 80033e8:	3730      	adds	r7, #48	; 0x30
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bdb0      	pop	{r4, r5, r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200002d4 	.word	0x200002d4
 80033f4:	20000700 	.word	0x20000700
 80033f8:	20016050 	.word	0x20016050
 80033fc:	3ff00000 	.word	0x3ff00000

08003400 <IIS3DWB_Data_Ready>:


/*  ---------- Sensors data ready functions ----------- */
void IIS3DWB_Data_Ready(uint8_t * buf, uint16_t size, double timeStamp)
{  
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	460b      	mov	r3, r1
 800340a:	ed87 0b00 	vstr	d0, [r7]
 800340e:	817b      	strh	r3, [r7, #10]
  SENSOR_Generic_Data_Ready(iis3dwb_com_id, buf, size, timeStamp);
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <IIS3DWB_Data_Ready+0x2c>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	897a      	ldrh	r2, [r7, #10]
 8003418:	ed97 0b00 	vldr	d0, [r7]
 800341c:	68f9      	ldr	r1, [r7, #12]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fe34 	bl	800308c <SENSOR_Generic_Data_Ready>
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20016040 	.word	0x20016040

08003430 <Peripheral_MSP_Init_All>:
}



void Peripheral_MSP_Init_All(void)
{  
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  HTS221_Peripheral_Init();
  IMP34DT05_Peripheral_Init();
  MP23ABS1_Peripheral_Init();
  ISM330DHCX_Peripheral_Init();
#endif
  IIS3DWB_Peripheral_Init();
 8003434:	f7ff f842 	bl	80024bc <IIS3DWB_Peripheral_Init>
#if 0
  IIS2DH_Peripheral_Init();
#endif
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}

0800343c <Peripheral_OS_Init_All>:


void Peripheral_OS_Init_All(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  HTS221_OS_Init();
  IMP34DT05_OS_Init();
  MP23ABS1_OS_Init();
  ISM330DHCX_OS_Init();
#endif
  IIS3DWB_OS_Init();
 8003440:	f7ff f8d6 	bl	80025f0 <IIS3DWB_OS_Init>
#if 0
  IIS2DH_OS_Init();
#endif
}
 8003444:	bf00      	nop
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d002      	beq.n	800345e <HAL_GPIO_EXTI_Callback+0x16>
 8003458:	2b20      	cmp	r3, #32
 800345a:	d004      	beq.n	8003466 <HAL_GPIO_EXTI_Callback+0x1e>
		  userButtonCallback(GPIO_Pin);
	  case  IIS3DWB_INT1_Pin:
		  UpdateTimerValue();

	  default:
		break;
 800345c:	e005      	b.n	800346a <HAL_GPIO_EXTI_Callback+0x22>
		  userButtonCallback(GPIO_Pin);
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	4618      	mov	r0, r3
 8003462:	f001 f95a 	bl	800471a <userButtonCallback>
		  UpdateTimerValue();
 8003466:	f7ff faa9 	bl	80029bc <UpdateTimerValue>
		break;
 800346a:	bf00      	nop
  }
}
 800346c:	bf00      	nop
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  while(1);
 8003478:	e7fe      	b.n	8003478 <Error_Handler+0x4>
	...

0800347c <MP23ABS1_Set_State>:
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}

void MP23ABS1_Set_State(SM_Sensor_State_t newState)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  MP23ABS1_Sensor_State = newState;
 8003486:	4a04      	ldr	r2, [pc, #16]	; (8003498 <MP23ABS1_Set_State+0x1c>)
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	7013      	strb	r3, [r2, #0]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	20000033 	.word	0x20000033

0800349c <MP23ABS1_Start>:
  MP23ABS1_Init_Param.FS[0] = newFS1;
  MP23ABS1_Init_Param.FS[0] = newFS2;
}

void MP23ABS1_Start(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80034a0:	2003      	movs	r0, #3
 80034a2:	f7ff ffeb 	bl	800347c <MP23ABS1_Set_State>
  osThreadResume(MP23ABS1_Thread_Id);
 80034a6:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <MP23ABS1_Start+0x18>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f014 f8dc 	bl	8017668 <osThreadResume>
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20016400 	.word	0x20016400

080034b8 <MP23ABS1_Stop>:

void MP23ABS1_Stop(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80034bc:	2001      	movs	r0, #1
 80034be:	f7ff ffdd 	bl	800347c <MP23ABS1_Set_State>
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b09c      	sub	sp, #112	; 0x70
 80034cc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80034ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80034de:	2300      	movs	r3, #0
 80034e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RTC_AlarmTypeDef sAlarm = {0};
 80034e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034e6:	222c      	movs	r2, #44	; 0x2c
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f01a fcd2 	bl	801de94 <memset>
  RTC_TamperTypeDef sTamper = {0};
 80034f0:	1d3b      	adds	r3, r7, #4
 80034f2:	2228      	movs	r2, #40	; 0x28
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f01a fccc 	bl	801de94 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034fc:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <MX_RTC_Init+0x134>)
 80034fe:	4a40      	ldr	r2, [pc, #256]	; (8003600 <MX_RTC_Init+0x138>)
 8003500:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003502:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <MX_RTC_Init+0x134>)
 8003504:	2200      	movs	r2, #0
 8003506:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003508:	4b3c      	ldr	r3, [pc, #240]	; (80035fc <MX_RTC_Init+0x134>)
 800350a:	227f      	movs	r2, #127	; 0x7f
 800350c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <MX_RTC_Init+0x134>)
 8003510:	22ff      	movs	r2, #255	; 0xff
 8003512:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003514:	4b39      	ldr	r3, [pc, #228]	; (80035fc <MX_RTC_Init+0x134>)
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800351a:	4b38      	ldr	r3, [pc, #224]	; (80035fc <MX_RTC_Init+0x134>)
 800351c:	2200      	movs	r2, #0
 800351e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003520:	4b36      	ldr	r3, [pc, #216]	; (80035fc <MX_RTC_Init+0x134>)
 8003522:	2200      	movs	r2, #0
 8003524:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003526:	4b35      	ldr	r3, [pc, #212]	; (80035fc <MX_RTC_Init+0x134>)
 8003528:	2200      	movs	r2, #0
 800352a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800352c:	4833      	ldr	r0, [pc, #204]	; (80035fc <MX_RTC_Init+0x134>)
 800352e:	f008 fb63 	bl	800bbf8 <HAL_RTC_Init>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003532:	2300      	movs	r3, #0
 8003534:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  sTime.Minutes = 0x0;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  sTime.Seconds = 0x0;
 800353e:	2300      	movs	r3, #0
 8003540:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003544:	2300      	movs	r3, #0
 8003546:	66bb      	str	r3, [r7, #104]	; 0x68
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003548:	2300      	movs	r3, #0
 800354a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800354c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003550:	2201      	movs	r2, #1
 8003552:	4619      	mov	r1, r3
 8003554:	4829      	ldr	r0, [pc, #164]	; (80035fc <MX_RTC_Init+0x134>)
 8003556:	f008 fbca 	bl	800bcee <HAL_RTC_SetTime>
  {
//    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  sDate.Month = RTC_MONTH_JANUARY;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  sDate.Date = 0x1;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
  sDate.Year = 0x0;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003572:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003576:	2201      	movs	r2, #1
 8003578:	4619      	mov	r1, r3
 800357a:	4820      	ldr	r0, [pc, #128]	; (80035fc <MX_RTC_Init+0x134>)
 800357c:	f008 fc54 	bl	800be28 <HAL_RTC_SetDate>
  {
//   Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003580:	2300      	movs	r3, #0
 8003582:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sAlarm.AlarmTime.Minutes = 0x0;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sAlarm.AlarmTime.Seconds = 0x15;
 800358c:	2315      	movs	r3, #21
 800358e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003592:	2300      	movs	r3, #0
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003596:	2300      	movs	r3, #0
 8003598:	63bb      	str	r3, [r7, #56]	; 0x38
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800359a:	2300      	movs	r3, #0
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800359e:	2300      	movs	r3, #0
 80035a0:	643b      	str	r3, [r7, #64]	; 0x40
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	64bb      	str	r3, [r7, #72]	; 0x48
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sAlarm.AlarmDateWeekDay = 0x1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  sAlarm.Alarm = RTC_ALARM_A;
 80035b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80035b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035ba:	2201      	movs	r2, #1
 80035bc:	4619      	mov	r1, r3
 80035be:	480f      	ldr	r0, [pc, #60]	; (80035fc <MX_RTC_Init+0x134>)
 80035c0:	f008 fcba 	bl	800bf38 <HAL_RTC_SetAlarm_IT>
  {
//    Error_Handler();
  }
  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 80035c4:	2301      	movs	r3, #1
 80035c6:	607b      	str	r3, [r7, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	613b      	str	r3, [r7, #16]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 80035dc:	2300      	movs	r3, #0
 80035de:	623b      	str	r3, [r7, #32]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	4619      	mov	r1, r3
 80035ec:	4803      	ldr	r0, [pc, #12]	; (80035fc <MX_RTC_Init+0x134>)
 80035ee:	f008 fe97 	bl	800c320 <HAL_RTCEx_SetTamper>
  {
//    Error_Handler();
  }

}
 80035f2:	bf00      	nop
 80035f4:	3770      	adds	r7, #112	; 0x70
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200165d4 	.word	0x200165d4
 8003600:	40002800 	.word	0x40002800

08003604 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <HAL_RTC_MspInit+0x3c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10f      	bne.n	8003636 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003616:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RTC_MspInit+0x40>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	4a09      	ldr	r2, [pc, #36]	; (8003644 <HAL_RTC_MspInit+0x40>)
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003626:	2200      	movs	r2, #0
 8003628:	2100      	movs	r1, #0
 800362a:	2029      	movs	r0, #41	; 0x29
 800362c:	f004 fcd9 	bl	8007fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003630:	2029      	movs	r0, #41	; 0x29
 8003632:	f004 fcf2 	bl	800801a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40002800 	.word	0x40002800
 8003644:	40021000 	.word	0x40021000

08003648 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <SD_CheckStatus+0x38>)
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003658:	f002 feca 	bl	80063f0 <BSP_SD_GetCardState>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <SD_CheckStatus+0x38>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <SD_CheckStatus+0x38>)
 8003670:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003672:	4b03      	ldr	r3, [pc, #12]	; (8003680 <SD_CheckStatus+0x38>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b2db      	uxtb	r3, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000034 	.word	0x20000034

08003684 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <SD_initialize+0x38>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003694:	f002 fdaa 	bl	80061ec <BSP_SD_Init>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d107      	bne.n	80036ae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ffd1 	bl	8003648 <SD_CheckStatus>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <SD_initialize+0x38>)
 80036ac:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80036ae:	4b03      	ldr	r3, [pc, #12]	; (80036bc <SD_initialize+0x38>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b2db      	uxtb	r3, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20000034 	.word	0x20000034

080036c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ffbb 	bl	8003648 <SD_CheckStatus>
 80036d2:	4603      	mov	r3, r0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
  ReadStatus = 0;
 80036f0:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <SD_read+0x94>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	68b8      	ldr	r0, [r7, #8]
 80036fc:	f002 fde8 	bl	80062d0 <BSP_SD_ReadBlocks_DMA>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d12f      	bne.n	8003766 <SD_read+0x8a>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 8003706:	f002 ff11 	bl	800652c <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800370c:	bf00      	nop
 800370e:	4b18      	ldr	r3, [pc, #96]	; (8003770 <SD_read+0x94>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <SD_read+0x4c>
 8003716:	f002 ff09 	bl	800652c <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f247 522f 	movw	r2, #29999	; 0x752f
 8003724:	4293      	cmp	r3, r2
 8003726:	d9f2      	bls.n	800370e <SD_read+0x32>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <SD_read+0x94>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <SD_read+0x5a>
    {
      res = RES_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
 8003734:	e017      	b.n	8003766 <SD_read+0x8a>
    }
    else
    {
      ReadStatus = 0;
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <SD_read+0x94>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 800373c:	f002 fef6 	bl	800652c <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8003742:	e007      	b.n	8003754 <SD_read+0x78>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8003744:	f002 fe54 	bl	80063f0 <BSP_SD_GetCardState>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <SD_read+0x78>
        {
          res = RES_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	75fb      	strb	r3, [r7, #23]
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
           break;
 8003752:	e008      	b.n	8003766 <SD_read+0x8a>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8003754:	f002 feea 	bl	800652c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f247 522f 	movw	r2, #29999	; 0x752f
 8003762:	4293      	cmp	r3, r2
 8003764:	d9ee      	bls.n	8003744 <SD_read+0x68>
        }
      }
    }
  }

  return res;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000728 	.word	0x20000728

08003774 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4603      	mov	r3, r0
 8003782:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
  WriteStatus = 0;
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <SD_write+0x88>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	68b8      	ldr	r0, [r7, #8]
 8003794:	f002 fdb6 	bl	8006304 <BSP_SD_WriteBlocks_DMA>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d128      	bne.n	80037f0 <SD_write+0x7c>
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */
//    BSP_DBG_On(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
    timeout = HAL_GetTick();
 800379e:	f002 fec5 	bl	800652c <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]
    osSemaphoreWait(sdioSem_id, SD_TIMEOUT);
 80037a4:	4b16      	ldr	r3, [pc, #88]	; (8003800 <SD_write+0x8c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f247 5130 	movw	r1, #30000	; 0x7530
 80037ac:	4618      	mov	r0, r3
 80037ae:	f013 fcf9 	bl	80171a4 <osSemaphoreWait>
//    {
//    }
//    BSP_DBG_Off(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <SD_write+0x88>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <SD_write+0x4c>
    {
      res = RES_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	75fb      	strb	r3, [r7, #23]
 80037be:	e017      	b.n	80037f0 <SD_write+0x7c>
    }
    else
    {
      WriteStatus = 0;
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <SD_write+0x88>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 80037c6:	f002 feb1 	bl	800652c <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80037cc:	e007      	b.n	80037de <SD_write+0x6a>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80037ce:	f002 fe0f 	bl	80063f0 <BSP_SD_GetCardState>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <SD_write+0x6a>
        {
          res = RES_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	75fb      	strb	r3, [r7, #23]
          break;
 80037dc:	e008      	b.n	80037f0 <SD_write+0x7c>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80037de:	f002 fea5 	bl	800652c <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f247 522f 	movw	r2, #29999	; 0x752f
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d9ee      	bls.n	80037ce <SD_write+0x5a>
        }
      }
    }
  }

  return res;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000724 	.word	0x20000724
 8003800:	20018728 	.word	0x20018728

08003804 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08c      	sub	sp, #48	; 0x30
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	603a      	str	r2, [r7, #0]
 800380e:	71fb      	strb	r3, [r7, #7]
 8003810:	460b      	mov	r3, r1
 8003812:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800381a:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <SD_ioctl+0xac>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <SD_ioctl+0x28>
 8003828:	2303      	movs	r3, #3
 800382a:	e03c      	b.n	80038a6 <SD_ioctl+0xa2>

  switch (cmd)
 800382c:	79bb      	ldrb	r3, [r7, #6]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d834      	bhi.n	800389c <SD_ioctl+0x98>
 8003832:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <SD_ioctl+0x34>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	08003849 	.word	0x08003849
 800383c:	08003851 	.word	0x08003851
 8003840:	08003869 	.word	0x08003869
 8003844:	08003883 	.word	0x08003883
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800384e:	e028      	b.n	80038a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003850:	f107 0308 	add.w	r3, r7, #8
 8003854:	4618      	mov	r0, r3
 8003856:	f002 fddb 	bl	8006410 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003866:	e01c      	b.n	80038a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003868:	f107 0308 	add.w	r3, r7, #8
 800386c:	4618      	mov	r0, r3
 800386e:	f002 fdcf 	bl	8006410 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	b29a      	uxth	r2, r3
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003880:	e00f      	b.n	80038a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003882:	f107 0308 	add.w	r3, r7, #8
 8003886:	4618      	mov	r0, r3
 8003888:	f002 fdc2 	bl	8006410 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	0a5a      	lsrs	r2, r3, #9
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800389a:	e002      	b.n	80038a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800389c:	2304      	movs	r3, #4
 800389e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80038a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3730      	adds	r7, #48	; 0x30
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000034 	.word	0x20000034

080038b4 <BSP_SD_WriteCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  WriteStatus = 1;
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <BSP_SD_WriteCpltCallback+0x18>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
  osSemaphoreRelease(sdioSem_id);
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <BSP_SD_WriteCpltCallback+0x1c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f013 fcbc 	bl	8017240 <osSemaphoreRelease>
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000724 	.word	0x20000724
 80038d0:	20018728 	.word	0x20018728

080038d4 <BSP_SD_ReadCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <BSP_SD_ReadCpltCallback+0x14>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
}
 80038de:	bf00      	nop
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	20000728 	.word	0x20000728

080038ec <Enable_Sensors>:
uint32_t SD_Logging_Enabled = 0;
#endif

/*----------------------------------------------------------------------------*/
void Enable_Sensors(void)
{  
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Comment or uncomment each of the following lines
  * to chose which sensor you want to log.         */
  
  Activate_Sensor(iis3dwb_com_id);
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <Enable_Sensors+0x14>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f805 	bl	8003904 <Activate_Sensor>
  Activate_Sensor(mp23abs1_com_id);
  Activate_Sensor(ism330dhcx_com_id);
  Activate_Sensor(lps22hh_com_id);
  Activate_Sensor(stts751_com_id);
#endif
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20016040 	.word	0x20016040

08003904 <Activate_Sensor>:


void Activate_Sensor(uint32_t id)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe f975 	bl	8001c00 <COM_GetSensorStatus>
 8003916:	60f8      	str	r0, [r7, #12]
  sensor_status->isActive = 1;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	739a      	strb	r2, [r3, #14]
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <SDM_Thread>:



/*----------------------------------------------------------------------------*/
static void SDM_Thread(void const *argument)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b09a      	sub	sp, #104	; 0x68
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  (void)argument;
  osEvent evt;
  DIR dir;
  static FILINFO fno;
  int isJSON = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	667b      	str	r3, [r7, #100]	; 0x64
  
  if (BSP_SD_IsDetected())
 8003934:	f002 fcb2 	bl	800629c <BSP_SD_IsDetected>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d063      	beq.n	8003a06 <SDM_Thread+0xde>
  {        
    if (init_SD_peripheral != 1)
 800393e:	4b91      	ldr	r3, [pc, #580]	; (8003b84 <SDM_Thread+0x25c>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d004      	beq.n	8003950 <SDM_Thread+0x28>
    {
      SDM_SD_Init();
 8003946:	f000 f9f9 	bl	8003d3c <SDM_SD_Init>
      init_SD_peripheral = 1;
 800394a:	4b8e      	ldr	r3, [pc, #568]	; (8003b84 <SDM_Thread+0x25c>)
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]
    }
    
    /* Check if a custom configuration JSON is available in the root folder of the SD Card*/   
    (void)f_opendir(&dir, "/"); /* Open the root directory */
 8003950:	f107 030c 	add.w	r3, r7, #12
 8003954:	498c      	ldr	r1, [pc, #560]	; (8003b88 <SDM_Thread+0x260>)
 8003956:	4618      	mov	r0, r3
 8003958:	f013 f81c 	bl	8016994 <f_opendir>
    
    for (;;) 
    {
      (void)f_readdir(&dir, &fno); /* Read files in root folder */
 800395c:	f107 030c 	add.w	r3, r7, #12
 8003960:	498a      	ldr	r1, [pc, #552]	; (8003b8c <SDM_Thread+0x264>)
 8003962:	4618      	mov	r0, r3
 8003964:	f013 f8af 	bl	8016ac6 <f_readdir>
      if (fno.fname[0] == 0) break;
 8003968:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <SDM_Thread+0x264>)
 800396a:	7d9b      	ldrb	r3, [r3, #22]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d034      	beq.n	80039da <SDM_Thread+0xb2>
      if (fno.fattrib & AM_ARC) /* It is a file. */
 8003970:	4b86      	ldr	r3, [pc, #536]	; (8003b8c <SDM_Thread+0x264>)
 8003972:	7a1b      	ldrb	r3, [r3, #8]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ef      	beq.n	800395c <SDM_Thread+0x34>
      {
        isJSON = strcmp(".json",fno.fname);
 800397c:	4984      	ldr	r1, [pc, #528]	; (8003b90 <SDM_Thread+0x268>)
 800397e:	4885      	ldr	r0, [pc, #532]	; (8003b94 <SDM_Thread+0x26c>)
 8003980:	f7fc fc3e 	bl	8000200 <strcmp>
 8003984:	6678      	str	r0, [r7, #100]	; 0x64
        if (isJSON)
 8003986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003988:	2b00      	cmp	r3, #0
 800398a:	d028      	beq.n	80039de <SDM_Thread+0xb6>
        {
          if(f_open(&FileConfigJSON, fno.fname, FA_OPEN_EXISTING | FA_READ) == FR_OK)
 800398c:	2201      	movs	r2, #1
 800398e:	4980      	ldr	r1, [pc, #512]	; (8003b90 <SDM_Thread+0x268>)
 8003990:	4881      	ldr	r0, [pc, #516]	; (8003b98 <SDM_Thread+0x270>)
 8003992:	f012 fae5 	bl	8015f60 <f_open>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d120      	bne.n	80039de <SDM_Thread+0xb6>
          {  
            char* config_JSON_string = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	663b      	str	r3, [r7, #96]	; 0x60
            int sizeFile;
            uint32_t br;  
            sizeFile = f_size(&FileConfigJSON)+1;
 80039a0:	4b7d      	ldr	r3, [pc, #500]	; (8003b98 <SDM_Thread+0x270>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	3301      	adds	r3, #1
 80039a6:	65fb      	str	r3, [r7, #92]	; 0x5c
            config_JSON_string = HSD_malloc(sizeFile);
 80039a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039aa:	4618      	mov	r0, r3
 80039ac:	f01a fa3a 	bl	801de24 <malloc>
 80039b0:	4603      	mov	r3, r0
 80039b2:	663b      	str	r3, [r7, #96]	; 0x60
            f_read (&FileConfigJSON, config_JSON_string, sizeFile, &br);
 80039b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80039bc:	4876      	ldr	r0, [pc, #472]	; (8003b98 <SDM_Thread+0x270>)
 80039be:	f012 fc8d 	bl	80162dc <f_read>
            SDM_ReadJSON(config_JSON_string);
 80039c2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80039c4:	f000 fe5c 	bl	8004680 <SDM_ReadJSON>
            HSD_JSON_free(config_JSON_string);
 80039c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80039ca:	f7fd fb4b 	bl	8001064 <HSD_JSON_free>
            config_JSON_string = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	663b      	str	r3, [r7, #96]	; 0x60
            f_close(&FileConfigJSON);
 80039d2:	4871      	ldr	r0, [pc, #452]	; (8003b98 <SDM_Thread+0x270>)
 80039d4:	f012 ffb4 	bl	8016940 <f_close>
          }
        }
        break; 
 80039d8:	e001      	b.n	80039de <SDM_Thread+0xb6>
      if (fno.fname[0] == 0) break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <SDM_Thread+0xb8>
        break; 
 80039de:	bf00      	nop
      }
    }
    f_closedir(&dir);
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	4618      	mov	r0, r3
 80039e6:	f013 f848 	bl	8016a7a <f_closedir>
    
    if (isJSON == 0)
 80039ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <SDM_Thread+0xcc>
    {
      Enable_Sensors();    
 80039f0:	f7ff ff7c 	bl	80038ec <Enable_Sensors>
    }
    
    if (init_SD_peripheral != 0)
 80039f4:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <SDM_Thread+0x25c>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <SDM_Thread+0xde>
    {
      SDM_SD_DeInit();
 80039fc:	f000 f9c6 	bl	8003d8c <SDM_SD_DeInit>
      init_SD_peripheral = 0;
 8003a00:	4b60      	ldr	r3, [pc, #384]	; (8003b84 <SDM_Thread+0x25c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
    }   
  }
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SDM_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SDM_DEBUG_PIN );
 8003a06:	2102      	movs	r1, #2
 8003a08:	2000      	movs	r0, #0
 8003a0a:	f015 fab1 	bl	8018f70 <vTaskSetApplicationTaskTag>
#endif
  for (;;)
  {
    BSP_LED_Off(LED1); 
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f002 f828 	bl	8005a64 <BSP_LED_Off>
    
    /* If the battery is too low close the file and turn off the system */
    if(BatteryLow == 1)
 8003a14:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <SDM_Thread+0x274>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d117      	bne.n	8003a4e <SDM_Thread+0x126>
    {
#ifdef LOG_ERROR
      batt_error();
#endif      
      SM_TIM_Stop();
 8003a1e:	f001 fa85 	bl	8004f2c <SM_TIM_Stop>
      if(SDM_CloseFiles() == 0)
 8003a22:	f000 fb8d 	bl	8004140 <SDM_CloseFiles>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <SDM_Thread+0x10a>
      {
        SD_Logging_Active = 0;
 8003a2c:	4b5c      	ldr	r3, [pc, #368]	; (8003ba0 <SDM_Thread+0x278>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
      }
      SDM_Memory_Deinit();
 8003a32:	f000 f909 	bl	8003c48 <SDM_Memory_Deinit>
      
      if (init_SD_peripheral != 0)
 8003a36:	4b53      	ldr	r3, [pc, #332]	; (8003b84 <SDM_Thread+0x25c>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <SDM_Thread+0x120>
      {
        SDM_SD_DeInit();
 8003a3e:	f000 f9a5 	bl	8003d8c <SDM_SD_DeInit>
        init_SD_peripheral = 0;
 8003a42:	4b50      	ldr	r3, [pc, #320]	; (8003b84 <SDM_Thread+0x25c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
      }
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8003a48:	2017      	movs	r0, #23
 8003a4a:	f002 f82d 	bl	8005aa8 <BSP_BC_CmdSend>
    }      
    
    evt = osMessageGet(sdThreadQueue_id, osWaitForever);  // wait for message      
 8003a4e:	4b55      	ldr	r3, [pc, #340]	; (8003ba4 <SDM_Thread+0x27c>)
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a56:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f013 fd78 	bl	8017550 <osMessageGet>
    
    if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 8003a60:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <SDM_Thread+0x280>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <SDM_Thread+0x14c>
 8003a6a:	4b4f      	ldr	r3, [pc, #316]	; (8003ba8 <SDM_Thread+0x280>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d1cc      	bne.n	8003a0e <SDM_Thread+0xe6>
    {      
      BSP_LED_On(LED1);
 8003a74:	2000      	movs	r0, #0
 8003a76:	f001 ffdb 	bl	8005a30 <BSP_LED_On>
      
      if (evt.status == osEventMessage)
 8003a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d1c6      	bne.n	8003a0e <SDM_Thread+0xe6>
      {
        if(evt.value.v == SDM_START_STOP)
 8003a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a82:	f248 0201 	movw	r2, #32769	; 0x8001
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d14b      	bne.n	8003b22 <SDM_Thread+0x1fa>
        {
          if(SD_Logging_Active == 0)
 8003a8a:	4b45      	ldr	r3, [pc, #276]	; (8003ba0 <SDM_Thread+0x278>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d12a      	bne.n	8003ae8 <SDM_Thread+0x1c0>
          {
            com_status = HS_DATALOG_SD_STARTED;            
 8003a92:	4b45      	ldr	r3, [pc, #276]	; (8003ba8 <SDM_Thread+0x280>)
 8003a94:	2202      	movs	r2, #2
 8003a96:	701a      	strb	r2, [r3, #0]
            SM_TIM_Start();
 8003a98:	f001 fa3e 	bl	8004f18 <SM_TIM_Start>
            if (BSP_SD_IsDetected())
 8003a9c:	f002 fbfe 	bl	800629c <BSP_SD_IsDetected>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01c      	beq.n	8003ae0 <SDM_Thread+0x1b8>
            {              
              if (init_SD_peripheral != 1)
 8003aa6:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <SDM_Thread+0x25c>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d004      	beq.n	8003ab8 <SDM_Thread+0x190>
              {
                SDM_SD_Init();
 8003aae:	f000 f945 	bl	8003d3c <SDM_SD_Init>
                init_SD_peripheral = 1;
 8003ab2:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <SDM_Thread+0x25c>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
              }
              SD_present = 1;
 8003ab8:	4b3c      	ldr	r3, [pc, #240]	; (8003bac <SDM_Thread+0x284>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
              if(SDM_InitFiles() == 0)
 8003abe:	f000 fa41 	bl	8003f44 <SDM_InitFiles>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <SDM_Thread+0x1ac>
              {
                SD_Logging_Active = 1;
 8003ac8:	4b35      	ldr	r3, [pc, #212]	; (8003ba0 <SDM_Thread+0x278>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
                BSP_LED_Off(LED_ORANGE);
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f001 ffc8 	bl	8005a64 <BSP_LED_Off>
              }
              testTime = HAL_GetTick();
 8003ad4:	f002 fd2a 	bl	800652c <HAL_GetTick>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4a35      	ldr	r2, [pc, #212]	; (8003bb0 <SDM_Thread+0x288>)
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e796      	b.n	8003a0e <SDM_Thread+0xe6>
            }
            else
            {
              SD_present = 0;
 8003ae0:	4b32      	ldr	r3, [pc, #200]	; (8003bac <SDM_Thread+0x284>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e792      	b.n	8003a0e <SDM_Thread+0xe6>
            }
          }
          else if (SD_Logging_Active == 1)
 8003ae8:	4b2d      	ldr	r3, [pc, #180]	; (8003ba0 <SDM_Thread+0x278>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d18e      	bne.n	8003a0e <SDM_Thread+0xe6>
          {      
            SM_TIM_Stop();
 8003af0:	f001 fa1c 	bl	8004f2c <SM_TIM_Stop>
            
            if(SDM_CloseFiles() == 0)
 8003af4:	f000 fb24 	bl	8004140 <SDM_CloseFiles>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <SDM_Thread+0x1dc>
            {
              SD_Logging_Active = 0;
 8003afe:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <SDM_Thread+0x278>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
            }
            SDM_Memory_Deinit();
 8003b04:	f000 f8a0 	bl	8003c48 <SDM_Memory_Deinit>
            
            if (init_SD_peripheral != 0)
 8003b08:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <SDM_Thread+0x25c>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <SDM_Thread+0x1f2>
            {
              SDM_SD_DeInit();
 8003b10:	f000 f93c 	bl	8003d8c <SDM_SD_DeInit>
              init_SD_peripheral = 0;
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <SDM_Thread+0x25c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
            }
            com_status = HS_DATALOG_IDLE;
 8003b1a:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <SDM_Thread+0x280>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	e775      	b.n	8003a0e <SDM_Thread+0xe6>
          }
        }
        else
        {
          if(evt.value.v & SDM_DATA_READY_MASK)
 8003b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f43f af70 	beq.w	8003a0e <SDM_Thread+0xe6>
          {
            COM_SensorStatus_t * sensor_status; 
            uint32_t buf_size;
            uint8_t sensor_id = (uint8_t)(evt.value.v & SDM_SENSOR_ID_MASK);
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b30:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            {
              oldTime[sensor_id] = HAL_GetTick();
            }
#endif          
            
            sensor_status = COM_GetSensorStatus(sensor_id);
 8003b34:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe f861 	bl	8001c00 <COM_GetSensorStatus>
 8003b3e:	6578      	str	r0, [r7, #84]	; 0x54
            buf_size = sensor_status->sdWriteBufferSize;
 8003b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	653b      	str	r3, [r7, #80]	; 0x50
            
            if(evt.value.v & SDM_DATA_FIRST_HALF_MASK) // Data available on first half of the circular buffer
 8003b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <SDM_Thread+0x240>
            {
              SDM_WriteBuffer(sensor_id, SD_WriteBuffer[sensor_id], buf_size);
 8003b50:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 8003b54:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003b58:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <SDM_Thread+0x28c>)
 8003b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b60:	4619      	mov	r1, r3
 8003b62:	f000 fbaf 	bl	80042c4 <SDM_WriteBuffer>
 8003b66:	e752      	b.n	8003a0e <SDM_Thread+0xe6>
            }
            else // Data available on second half of the circular buffer
            {
              SDM_WriteBuffer(sensor_id, (uint8_t *)(SD_WriteBuffer[sensor_id]+buf_size), buf_size);
 8003b68:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 8003b6c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003b70:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <SDM_Thread+0x28c>)
 8003b72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b78:	4413      	add	r3, r2
 8003b7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f000 fba1 	bl	80042c4 <SDM_WriteBuffer>
    BSP_LED_Off(LED1); 
 8003b82:	e744      	b.n	8003a0e <SDM_Thread+0xe6>
 8003b84:	20000756 	.word	0x20000756
 8003b88:	08022310 	.word	0x08022310
 8003b8c:	2000076c 	.word	0x2000076c
 8003b90:	20000782 	.word	0x20000782
 8003b94:	08022314 	.word	0x08022314
 8003b98:	200184a4 	.word	0x200184a4
 8003b9c:	20000760 	.word	0x20000760
 8003ba0:	20000754 	.word	0x20000754
 8003ba4:	2001849c 	.word	0x2001849c
 8003ba8:	200002d4 	.word	0x200002d4
 8003bac:	20000755 	.word	0x20000755
 8003bb0:	2000075c 	.word	0x2000075c
 8003bb4:	20018700 	.word	0x20018700

08003bb8 <HAL_PWR_PVDCallback>:
* @brief  PWR PVD interrupt callback
* @param  None 
* @retval None
*/
void HAL_PWR_PVDCallback(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  BatteryLow = 1;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_PWR_PVDCallback+0x14>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	701a      	strb	r2, [r3, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	20000760 	.word	0x20000760

08003bd0 <SDM_Memory_Init>:
*         the SD_WriteBuffer associated to each active sensor.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 8003bd6:	f7fd ffe1 	bl	8001b9c <COM_GetDeviceDescriptor>
 8003bda:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e026      	b.n	8003c30 <SDM_Memory_Init+0x60>
  {
    sensor_status = COM_GetSensorStatus(i);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe f80a 	bl	8001c00 <COM_GetSensorStatus>
 8003bec:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7b9b      	ldrb	r3, [r3, #14]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d014      	beq.n	8003c20 <SDM_Memory_Init+0x50>
    {
      SD_WriteBuffer[i] = HSD_malloc(sensor_status->sdWriteBufferSize*2);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f01a f911 	bl	801de24 <malloc>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4619      	mov	r1, r3
 8003c06:	4a0f      	ldr	r2, [pc, #60]	; (8003c44 <SDM_Memory_Init+0x74>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      if(!SD_WriteBuffer[i])
 8003c0e:	4a0d      	ldr	r2, [pc, #52]	; (8003c44 <SDM_Memory_Init+0x74>)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d107      	bne.n	8003c2a <SDM_Memory_Init+0x5a>
      {
        _Error_Handler();
 8003c1a:	f000 fe3f 	bl	800489c <_Error_Handler>
 8003c1e:	e004      	b.n	8003c2a <SDM_Memory_Init+0x5a>
      }
    }
    else
    {
      SD_WriteBuffer[i] = 0;
 8003c20:	4a08      	ldr	r2, [pc, #32]	; (8003c44 <SDM_Memory_Init+0x74>)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2100      	movs	r1, #0
 8003c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d3d3      	bcc.n	8003be2 <SDM_Memory_Init+0x12>
    }
  }
  return 1;
 8003c3a:	2301      	movs	r3, #1
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20018700 	.word	0x20018700

08003c48 <SDM_Memory_Deinit>:
* @brief  SD Card Manager memory De-initialization.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Deinit(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 8003c4e:	f7fd ffa5 	bl	8001b9c <COM_GetDeviceDescriptor>
 8003c52:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e01e      	b.n	8003c98 <SDM_Memory_Deinit+0x50>
  {
    sensor_status = COM_GetSensorStatus(i);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fd ffce 	bl	8001c00 <COM_GetSensorStatus>
 8003c64:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive && SD_WriteBuffer[i]!=0)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	7b9b      	ldrb	r3, [r3, #14]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d011      	beq.n	8003c92 <SDM_Memory_Deinit+0x4a>
 8003c6e:	4a0f      	ldr	r2, [pc, #60]	; (8003cac <SDM_Memory_Deinit+0x64>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <SDM_Memory_Deinit+0x4a>
    {
      HSD_free(SD_WriteBuffer[i]);
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <SDM_Memory_Deinit+0x64>)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f01a f8d6 	bl	801de34 <free>
      SD_WriteBuffer[i] = NULL;
 8003c88:	4a08      	ldr	r2, [pc, #32]	; (8003cac <SDM_Memory_Deinit+0x64>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3301      	adds	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d3db      	bcc.n	8003c5a <SDM_Memory_Deinit+0x12>
    }
  }
  return 1;
 8003ca2:	2301      	movs	r3, #1
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20018700 	.word	0x20018700

08003cb0 <SDM_Peripheral_Init>:


void SDM_Peripheral_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  BSP_SD_Detect_Init();   
 8003cb4:	f002 facc 	bl	8006250 <BSP_SD_Detect_Init>
}
 8003cb8:	bf00      	nop
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <SDM_OS_Init>:
* @brief  Initialize SD Card Manager thread and queue
* @param  None
* @retval None
*/
void SDM_OS_Init(void)
{
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
  sdioSem_id = osSemaphoreCreate(osSemaphore(sdioSem), 1);
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4816      	ldr	r0, [pc, #88]	; (8003d20 <SDM_OS_Init+0x64>)
 8003cc6:	f013 fa49 	bl	801715c <osSemaphoreCreate>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <SDM_OS_Init+0x68>)
 8003cce:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(sdioSem_id, osWaitForever);
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <SDM_OS_Init+0x68>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f013 fa63 	bl	80171a4 <osSemaphoreWait>
  
  sdThreadQueue_id = osMessageCreate(osMessageQ(sdThreadQueue), NULL);
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4811      	ldr	r0, [pc, #68]	; (8003d28 <SDM_OS_Init+0x6c>)
 8003ce2:	f013 fbe3 	bl	80174ac <osMessageCreate>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <SDM_OS_Init+0x70>)
 8003cea:	6013      	str	r3, [r2, #0]
  
  vQueueAddToRegistry( sdThreadQueue_id, "sdThreadQueue_id" );
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <SDM_OS_Init+0x70>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	490f      	ldr	r1, [pc, #60]	; (8003d30 <SDM_OS_Init+0x74>)
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f014 fc40 	bl	8018578 <vQueueAddToRegistry>
  
  /* Thread definition: read data */
  osThreadDef(SDM_On_Off_Thread, SDM_Thread, SD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE*4);
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <SDM_OS_Init+0x78>)
 8003cfa:	1d3c      	adds	r4, r7, #4
 8003cfc:	461d      	mov	r5, r3
 8003cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d02:	682b      	ldr	r3, [r5, #0]
 8003d04:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  SDM_Thread_Id = osThreadCreate(osThread(SDM_On_Off_Thread), NULL);
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f013 f9ff 	bl	801710e <osThreadCreate>
 8003d10:	4603      	mov	r3, r0
 8003d12:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <SDM_OS_Init+0x7c>)
 8003d14:	6013      	str	r3, [r2, #0]
}
 8003d16:	bf00      	nop
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	0802266c 	.word	0x0802266c
 8003d24:	20018728 	.word	0x20018728
 8003d28:	08022670 	.word	0x08022670
 8003d2c:	2001849c 	.word	0x2001849c
 8003d30:	0802234c 	.word	0x0802234c
 8003d34:	08022360 	.word	0x08022360
 8003d38:	200186fc 	.word	0x200186fc

08003d3c <SDM_SD_Init>:
* @brief  Initialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8003d40:	490f      	ldr	r1, [pc, #60]	; (8003d80 <SDM_SD_Init+0x44>)
 8003d42:	4810      	ldr	r0, [pc, #64]	; (8003d84 <SDM_SD_Init+0x48>)
 8003d44:	f013 f896 	bl	8016e74 <FATFS_LinkDriver>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d115      	bne.n	8003d7a <SDM_SD_Init+0x3e>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	490b      	ldr	r1, [pc, #44]	; (8003d80 <SDM_SD_Init+0x44>)
 8003d52:	480d      	ldr	r0, [pc, #52]	; (8003d88 <SDM_SD_Init+0x4c>)
 8003d54:	f012 f8be 	bl	8015ed4 <f_mount>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <SDM_SD_Init+0x3e>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f001 fe66 	bl	8005a30 <BSP_LED_On>
        HAL_Delay(500);
 8003d64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d68:	f002 fbec 	bl	8006544 <HAL_Delay>
        BSP_LED_Off(LED1);
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f001 fe79 	bl	8005a64 <BSP_LED_Off>
        HAL_Delay(100);
 8003d72:	2064      	movs	r0, #100	; 0x64
 8003d74:	f002 fbe6 	bl	8006544 <HAL_Delay>
        BSP_LED_On(LED1);
 8003d78:	e7f1      	b.n	8003d5e <SDM_SD_Init+0x22>
      }
    }
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200184a0 	.word	0x200184a0
 8003d84:	08022658 	.word	0x08022658
 8003d88:	20016828 	.word	0x20016828

08003d8c <SDM_SD_DeInit>:
* @brief  Deinitialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_DeInit(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  if(FATFS_UnLinkDriver(SDPath) == 0)
 8003d90:	480e      	ldr	r0, [pc, #56]	; (8003dcc <SDM_SD_DeInit+0x40>)
 8003d92:	f013 f8b7 	bl	8016f04 <FATFS_UnLinkDriver>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d115      	bne.n	8003dc8 <SDM_SD_DeInit+0x3c>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(NULL, (TCHAR const*)SDPath, 0) != FR_OK)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	490b      	ldr	r1, [pc, #44]	; (8003dcc <SDM_SD_DeInit+0x40>)
 8003da0:	2000      	movs	r0, #0
 8003da2:	f012 f897 	bl	8015ed4 <f_mount>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00d      	beq.n	8003dc8 <SDM_SD_DeInit+0x3c>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 8003dac:	2000      	movs	r0, #0
 8003dae:	f001 fe3f 	bl	8005a30 <BSP_LED_On>
        HAL_Delay(500);
 8003db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003db6:	f002 fbc5 	bl	8006544 <HAL_Delay>
        BSP_LED_Off(LED1);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f001 fe52 	bl	8005a64 <BSP_LED_Off>
        HAL_Delay(100);
 8003dc0:	2064      	movs	r0, #100	; 0x64
 8003dc2:	f002 fbbf 	bl	8006544 <HAL_Delay>
        BSP_LED_On(LED1);
 8003dc6:	e7f1      	b.n	8003dac <SDM_SD_DeInit+0x20>
      }
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	200184a0 	.word	0x200184a0

08003dd0 <SDM_OpenFile>:
  return 0; // OK
}


uint8_t SDM_OpenFile(uint32_t id, const char *sensorName)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b090      	sub	sp, #64	; 0x40
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  char file_name[50];
  
  sprintf(file_name, "%s%s", sensorName, ".dat");
 8003dda:	f107 000c 	add.w	r0, r7, #12
 8003dde:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <SDM_OpenFile+0x48>)
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	490e      	ldr	r1, [pc, #56]	; (8003e1c <SDM_OpenFile+0x4c>)
 8003de4:	f01a fd92 	bl	801e90c <siprintf>
  
  if(f_open(&FileHandler[id], (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <SDM_OpenFile+0x50>)
 8003df4:	4413      	add	r3, r2
 8003df6:	f107 010c 	add.w	r1, r7, #12
 8003dfa:	220a      	movs	r2, #10
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f012 f8af 	bl	8015f60 <f_open>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <SDM_OpenFile+0x3c>
  {
    return 1;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <SDM_OpenFile+0x3e>
  }
  
  return 0; // OK
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3740      	adds	r7, #64	; 0x40
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	080223a8 	.word	0x080223a8
 8003e1c:	080223b0 	.word	0x080223b0
 8003e20:	20016ebc 	.word	0x20016ebc

08003e24 <SDM_CloseFile>:


uint8_t SDM_CloseFile(uint32_t id)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  return f_close(&FileHandler[id]);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	4a05      	ldr	r2, [pc, #20]	; (8003e4c <SDM_CloseFile+0x28>)
 8003e38:	4413      	add	r3, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f012 fd80 	bl	8016940 <f_close>
 8003e40:	4603      	mov	r3, r0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20016ebc 	.word	0x20016ebc

08003e50 <SDM_GetLastDirNumber>:
* @brief  Scan SD Card file system to find the latest directory number that includes to the LOG_DIR_PREFIX
* @param  None
* @retval 
*/
uint32_t SDM_GetLastDirNumber(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0da      	sub	sp, #360	; 0x168
 8003e54:	af00      	add	r7, sp, #0
  FRESULT fr;     /* Return value */
  DIR dj;         /* Directory search object */
  FILINFO fno;    /* File information */
  int dir_n = 0, tmp;
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 8003e5c:	1d3a      	adds	r2, r7, #4
 8003e5e:	4937      	ldr	r1, [pc, #220]	; (8003f3c <SDM_GetLastDirNumber+0xec>)
 8003e60:	4613      	mov	r3, r2
 8003e62:	c903      	ldmia	r1, {r0, r1}
 8003e64:	6018      	str	r0, [r3, #0]
 8003e66:	3304      	adds	r3, #4
 8003e68:	8019      	strh	r1, [r3, #0]
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	0c09      	lsrs	r1, r1, #16
 8003e6e:	7019      	strb	r1, [r3, #0]
 8003e70:	2300      	movs	r3, #0
 8003e72:	71d3      	strb	r3, [r2, #7]
  
  dir_name[sizeof(LOG_DIR_PREFIX)-1] = '*';  /* wildcard */
 8003e74:	1d3b      	adds	r3, r7, #4
 8003e76:	222a      	movs	r2, #42	; 0x2a
 8003e78:	719a      	strb	r2, [r3, #6]
  dir_name[sizeof(LOG_DIR_PREFIX)] = 0;
 8003e7a:	1d3b      	adds	r3, r7, #4
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	71da      	strb	r2, [r3, #7]
  
  fr = f_findfirst(&dj, &fno, "", dir_name);  /* Start to search for matching directories */
 8003e80:	1d3b      	adds	r3, r7, #4
 8003e82:	f107 010c 	add.w	r1, r7, #12
 8003e86:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8003e8a:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <SDM_GetLastDirNumber+0xf0>)
 8003e8c:	f012 fe80 	bl	8016b90 <f_findfirst>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  if(fno.fname[0])
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	7d9b      	ldrb	r3, [r3, #22]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d038      	beq.n	8003f12 <SDM_GetLastDirNumber+0xc2>
  {
    tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	331d      	adds	r3, #29
 8003ea6:	220a      	movs	r2, #10
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f01b fc8a 	bl	801f7c4 <strtol>
 8003eb0:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    if(dir_n<tmp)
 8003eb4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003eb8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	da28      	bge.n	8003f12 <SDM_GetLastDirNumber+0xc2>
    {
      dir_n = tmp;
 8003ec0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ec4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    }
  }
  
  /* Repeat while an item is found */
  while (fr == FR_OK && fno.fname[0])
 8003ec8:	e023      	b.n	8003f12 <SDM_GetLastDirNumber+0xc2>
  {
    fr = f_findnext(&dj, &fno);   /* Search for next item */
 8003eca:	f107 020c 	add.w	r2, r7, #12
 8003ece:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f012 fe33 	bl	8016b40 <f_findnext>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    if(fno.fname[0])
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	7d9b      	ldrb	r3, [r3, #22]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d013      	beq.n	8003f12 <SDM_GetLastDirNumber+0xc2>
    {
      tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8003eea:	f107 030c 	add.w	r3, r7, #12
 8003eee:	331d      	adds	r3, #29
 8003ef0:	220a      	movs	r2, #10
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f01b fc65 	bl	801f7c4 <strtol>
 8003efa:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
      if(tmp > dir_n)
 8003efe:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003f02:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003f06:	429a      	cmp	r2, r3
 8003f08:	dd03      	ble.n	8003f12 <SDM_GetLastDirNumber+0xc2>
      {
        dir_n = tmp;
 8003f0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003f0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  while (fr == FR_OK && fno.fname[0])
 8003f12:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <SDM_GetLastDirNumber+0xd4>
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	7d9b      	ldrb	r3, [r3, #22]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1d2      	bne.n	8003eca <SDM_GetLastDirNumber+0x7a>
      }
    }
  }
  
  f_closedir(&dj);
 8003f24:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f012 fda6 	bl	8016a7a <f_closedir>
  return (uint32_t)dir_n;
 8003f2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	080223bc 	.word	0x080223bc
 8003f40:	080223b8 	.word	0x080223b8

08003f44 <SDM_InitFiles>:
* @brief  Open one file for each sensor to store raw data and a JSON file with the device configuration
* @param  None
* @retval None
*/
uint8_t SDM_InitFiles(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b0a4      	sub	sp, #144	; 0x90
 8003f48:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  COM_SensorDescriptor_t * sensor_descriptor; 
  
  uint32_t i = 0, dir_n = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  
  device_descriptor = COM_GetDeviceDescriptor();  
 8003f56:	f7fd fe21 	bl	8001b9c <COM_GetDeviceDescriptor>
 8003f5a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  dir_n = SDM_GetLastDirNumber();
 8003f5e:	f7ff ff77 	bl	8003e50 <SDM_GetLastDirNumber>
 8003f62:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  dir_n++;
 8003f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  
  //Open or Create new File in SD Card for Battery SOC
  char BatSocFileName [20] = "Battery_SOC";
 8003f70:	4a6b      	ldr	r2, [pc, #428]	; (8004120 <SDM_InitFiles+0x1dc>)
 8003f72:	f107 0320 	add.w	r3, r7, #32
 8003f76:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	605a      	str	r2, [r3, #4]
  char dir_n_string [4];
  itoa(dir_n,dir_n_string,10);
 8003f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f8a:	f107 011c 	add.w	r1, r7, #28
 8003f8e:	220a      	movs	r2, #10
 8003f90:	4618      	mov	r0, r3
 8003f92:	f019 fedd 	bl	801dd50 <itoa>
  strcat(BatSocFileName,dir_n_string);
 8003f96:	f107 021c 	add.w	r2, r7, #28
 8003f9a:	f107 0320 	add.w	r3, r7, #32
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f01a fd16 	bl	801e9d2 <strcat>
  strcat(BatSocFileName,".txt");
 8003fa6:	f107 0320 	add.w	r3, r7, #32
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fc f932 	bl	8000214 <strlen>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f107 0320 	add.w	r3, r7, #32
 8003fb8:	4413      	add	r3, r2
 8003fba:	4a5a      	ldr	r2, [pc, #360]	; (8004124 <SDM_InitFiles+0x1e0>)
 8003fbc:	6810      	ldr	r0, [r2, #0]
 8003fbe:	6018      	str	r0, [r3, #0]
 8003fc0:	7912      	ldrb	r2, [r2, #4]
 8003fc2:	711a      	strb	r2, [r3, #4]
  if(f_open(&BatteryFileHandler, BatSocFileName, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8003fc4:	f107 0320 	add.w	r3, r7, #32
 8003fc8:	220a      	movs	r2, #10
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4856      	ldr	r0, [pc, #344]	; (8004128 <SDM_InitFiles+0x1e4>)
 8003fce:	f011 ffc7 	bl	8015f60 <f_open>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <SDM_InitFiles+0x98>
   {
     return 1;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e09d      	b.n	8004118 <SDM_InitFiles+0x1d4>
   }

  //Write data 8 in text file
  char buffer [20] = "SOC:";
 8003fdc:	4a53      	ldr	r2, [pc, #332]	; (800412c <SDM_InitFiles+0x1e8>)
 8003fde:	f107 0308 	add.w	r3, r7, #8
 8003fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fe6:	6018      	str	r0, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	7019      	strb	r1, [r3, #0]
 8003fec:	f107 030d 	add.w	r3, r7, #13
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	f8c3 200b 	str.w	r2, [r3, #11]
  char socString[2];
  itoa(batteryLevel,socString,10);
 8003ffc:	4b4c      	ldr	r3, [pc, #304]	; (8004130 <SDM_InitFiles+0x1ec>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	1d3b      	adds	r3, r7, #4
 8004004:	220a      	movs	r2, #10
 8004006:	4619      	mov	r1, r3
 8004008:	f019 fea2 	bl	801dd50 <itoa>
  strcat(buffer,socString);
 800400c:	1d3a      	adds	r2, r7, #4
 800400e:	f107 0308 	add.w	r3, r7, #8
 8004012:	4611      	mov	r1, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f01a fcdc 	bl	801e9d2 <strcat>
  uint32_t buffSize = sizeof(buffer);
 800401a:	2314      	movs	r3, #20
 800401c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t byteswritten, bytesread; /*File write/read counts */

  if(f_write(&BatteryFileHandler, (uint8_t*) buffer, buffSize, (void *)&byteswritten) != FR_OK)
 8004020:	463b      	mov	r3, r7
 8004022:	f107 0108 	add.w	r1, r7, #8
 8004026:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800402a:	483f      	ldr	r0, [pc, #252]	; (8004128 <SDM_InitFiles+0x1e4>)
 800402c:	f012 fa95 	bl	801655a <f_write>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <SDM_InitFiles+0xf6>
  {
    return 0;
 8004036:	2300      	movs	r3, #0
 8004038:	e06e      	b.n	8004118 <SDM_InitFiles+0x1d4>
  }

  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 800403a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800403e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004042:	4a3c      	ldr	r2, [pc, #240]	; (8004134 <SDM_InitFiles+0x1f0>)
 8004044:	493c      	ldr	r1, [pc, #240]	; (8004138 <SDM_InitFiles+0x1f4>)
 8004046:	f01a fc61 	bl	801e90c <siprintf>
  
  FRESULT test = f_mkdir(dir_name);
 800404a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800404e:	4618      	mov	r0, r3
 8004050:	f012 fdbc 	bl	8016bcc <f_mkdir>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  if(test != FR_OK)
 800405a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <SDM_InitFiles+0x122>
  {
    return 1;
 8004062:	2301      	movs	r3, #1
 8004064:	e058      	b.n	8004118 <SDM_InitFiles+0x1d4>
  {
    return 1;    
  }
#endif
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004066:	2300      	movs	r3, #0
 8004068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800406c:	e02b      	b.n	80040c6 <SDM_InitFiles+0x182>
  {
    sensor_status = COM_GetSensorStatus(i);
 800406e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004072:	b2db      	uxtb	r3, r3
 8004074:	4618      	mov	r0, r3
 8004076:	f7fd fdc3 	bl	8001c00 <COM_GetSensorStatus>
 800407a:	67b8      	str	r0, [r7, #120]	; 0x78
    
    if(sensor_status->isActive)
 800407c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800407e:	7b9b      	ldrb	r3, [r3, #14]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01b      	beq.n	80040bc <SDM_InitFiles+0x178>
    {
      sensor_descriptor = COM_GetSensorDescriptor(i);
 8004084:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004088:	b2db      	uxtb	r3, r3
 800408a:	4618      	mov	r0, r3
 800408c:	f7fd fda4 	bl	8001bd8 <COM_GetSensorDescriptor>
 8004090:	6778      	str	r0, [r7, #116]	; 0x74
      sprintf(file_name, "%s/%s", dir_name, sensor_descriptor->name);
 8004092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004094:	3301      	adds	r3, #1
 8004096:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800409a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800409e:	4927      	ldr	r1, [pc, #156]	; (800413c <SDM_InitFiles+0x1f8>)
 80040a0:	f01a fc34 	bl	801e90c <siprintf>
      
      if(SDM_OpenFile(i, file_name)!=0)
 80040a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040a8:	4619      	mov	r1, r3
 80040aa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80040ae:	f7ff fe8f 	bl	8003dd0 <SDM_OpenFile>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <SDM_InitFiles+0x178>
      {
        return 1;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e02d      	b.n	8004118 <SDM_InitFiles+0x1d4>
  for(i=0;i<device_descriptor->nSensor;i++)
 80040bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c0:	3301      	adds	r3, #1
 80040c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80040c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d3cc      	bcc.n	800406e <SDM_InitFiles+0x12a>
      }
    }
  }
  
  SDM_Memory_Init();
 80040d4:	f7ff fd7c 	bl	8003bd0 <SDM_Memory_Init>
  
  for(i=0;i<device_descriptor->nSensor;i++)
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80040de:	e013      	b.n	8004108 <SDM_InitFiles+0x1c4>
  {
    sensor_status = COM_GetSensorStatus(i);
 80040e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fd fd8a 	bl	8001c00 <COM_GetSensorStatus>
 80040ec:	67b8      	str	r0, [r7, #120]	; 0x78
    
    if(sensor_status->isActive)
 80040ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f0:	7b9b      	ldrb	r3, [r3, #14]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <SDM_InitFiles+0x1ba>
    {
      SDM_StartSensorThread(i);
 80040f6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80040fa:	f000 f9dd 	bl	80044b8 <SDM_StartSensorThread>
  for(i=0;i<device_descriptor->nSensor;i++)
 80040fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004102:	3301      	adds	r3, #1
 8004104:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004112:	429a      	cmp	r2, r3
 8004114:	d3e4      	bcc.n	80040e0 <SDM_InitFiles+0x19c>
    }
  }  
  
  return 0;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3790      	adds	r7, #144	; 0x90
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	080223e4 	.word	0x080223e4
 8004124:	080223c4 	.word	0x080223c4
 8004128:	200165f8 	.word	0x200165f8
 800412c:	080223f8 	.word	0x080223f8
 8004130:	20000720 	.word	0x20000720
 8004134:	080223cc 	.word	0x080223cc
 8004138:	080223d4 	.word	0x080223d4
 800413c:	080223dc 	.word	0x080223dc

08004140 <SDM_CloseFiles>:

uint8_t SDM_CloseFiles(void)
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b09b      	sub	sp, #108	; 0x6c
 8004144:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t id = 0, dir_n = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	667b      	str	r3, [r7, #100]	; 0x64
 800414a:	2300      	movs	r3, #0
 800414c:	663b      	str	r3, [r7, #96]	; 0x60
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  char* JSON_string = NULL;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  
  device_descriptor = COM_GetDeviceDescriptor();
 8004152:	f7fd fd23 	bl	8001b9c <COM_GetDeviceDescriptor>
 8004156:	65f8      	str	r0, [r7, #92]	; 0x5c
  
  /* Put all the sensors in "SUSPENDED" mode */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004158:	2300      	movs	r3, #0
 800415a:	667b      	str	r3, [r7, #100]	; 0x64
 800415c:	e00f      	b.n	800417e <SDM_CloseFiles+0x3e>
  {
    sensor_status = COM_GetSensorStatus(id);
 800415e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004160:	b2db      	uxtb	r3, r3
 8004162:	4618      	mov	r0, r3
 8004164:	f7fd fd4c 	bl	8001c00 <COM_GetSensorStatus>
 8004168:	65b8      	str	r0, [r7, #88]	; 0x58
    
    if(sensor_status->isActive)
 800416a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800416c:	7b9b      	ldrb	r3, [r3, #14]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <SDM_CloseFiles+0x38>
    {
      SDM_StopSensorThread(id);
 8004172:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004174:	f000 fa12 	bl	800459c <SDM_StopSensorThread>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800417a:	3301      	adds	r3, #1
 800417c:	667b      	str	r3, [r7, #100]	; 0x64
 800417e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004184:	429a      	cmp	r2, r3
 8004186:	d3ea      	bcc.n	800415e <SDM_CloseFiles+0x1e>
    }
  }
  
  /* Flush remaining data and close the files  */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004188:	2300      	movs	r3, #0
 800418a:	667b      	str	r3, [r7, #100]	; 0x64
 800418c:	e017      	b.n	80041be <SDM_CloseFiles+0x7e>
  {
    sensor_status = COM_GetSensorStatus(id);
 800418e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004190:	b2db      	uxtb	r3, r3
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd fd34 	bl	8001c00 <COM_GetSensorStatus>
 8004198:	65b8      	str	r0, [r7, #88]	; 0x58
    
    if(sensor_status->isActive)
 800419a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419c:	7b9b      	ldrb	r3, [r3, #14]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <SDM_CloseFiles+0x78>
    {
      SDM_Flush_Buffer(id);
 80041a2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80041a4:	f000 f8ae 	bl	8004304 <SDM_Flush_Buffer>
      if(SDM_CloseFile(id)!=0)
 80041a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80041aa:	f7ff fe3b 	bl	8003e24 <SDM_CloseFile>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <SDM_CloseFiles+0x78>
      {
        return 1;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e058      	b.n	800426a <SDM_CloseFiles+0x12a>
  for(id=0;id<device_descriptor->nSensor;id++)
 80041b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ba:	3301      	adds	r3, #1
 80041bc:	667b      	str	r3, [r7, #100]	; 0x64
 80041be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d3e2      	bcc.n	800418e <SDM_CloseFiles+0x4e>
      }
    }
  }
  f_close(&BatteryFileHandler);
 80041c8:	482a      	ldr	r0, [pc, #168]	; (8004274 <SDM_CloseFiles+0x134>)
 80041ca:	f012 fbb9 	bl	8016940 <f_close>
  {
    return 1;
  }  
#endif
  
  dir_n = SDM_GetLastDirNumber();
 80041ce:	f7ff fe3f 	bl	8003e50 <SDM_GetLastDirNumber>
 80041d2:	6638      	str	r0, [r7, #96]	; 0x60
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 80041d4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80041d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041da:	4a27      	ldr	r2, [pc, #156]	; (8004278 <SDM_CloseFiles+0x138>)
 80041dc:	4927      	ldr	r1, [pc, #156]	; (800427c <SDM_CloseFiles+0x13c>)
 80041de:	f01a fb95 	bl	801e90c <siprintf>
  sprintf(file_name, "%s/DeviceConfig.json", dir_name);
 80041e2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80041e6:	f107 0318 	add.w	r3, r7, #24
 80041ea:	4925      	ldr	r1, [pc, #148]	; (8004280 <SDM_CloseFiles+0x140>)
 80041ec:	4618      	mov	r0, r3
 80041ee:	f01a fb8d 	bl	801e90c <siprintf>
  
  if(f_open(&FileConfigHandler, (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80041f2:	f107 0318 	add.w	r3, r7, #24
 80041f6:	220a      	movs	r2, #10
 80041f8:	4619      	mov	r1, r3
 80041fa:	4822      	ldr	r0, [pc, #136]	; (8004284 <SDM_CloseFiles+0x144>)
 80041fc:	f011 feb0 	bl	8015f60 <f_open>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <SDM_CloseFiles+0xca>
  {
    return 1;
 8004206:	2301      	movs	r3, #1
 8004208:	e02f      	b.n	800426a <SDM_CloseFiles+0x12a>
  }
  
  (void)SDM_CreateJSON(&JSON_string);
 800420a:	f107 0314 	add.w	r3, r7, #20
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fa70 	bl	80046f4 <SDM_CreateJSON>
  SDM_WriteConfigBuffer((uint8_t*)JSON_string, strlen(JSON_string));  
 8004214:	697c      	ldr	r4, [r7, #20]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	4618      	mov	r0, r3
 800421a:	f7fb fffb 	bl	8000214 <strlen>
 800421e:	4603      	mov	r3, r0
 8004220:	4619      	mov	r1, r3
 8004222:	4620      	mov	r0, r4
 8004224:	f000 f834 	bl	8004290 <SDM_WriteConfigBuffer>
  
  if (f_close(&FileConfigHandler)!= FR_OK)
 8004228:	4816      	ldr	r0, [pc, #88]	; (8004284 <SDM_CloseFiles+0x144>)
 800422a:	f012 fb89 	bl	8016940 <f_close>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <SDM_CloseFiles+0xf8>
  {
    return 1;
 8004234:	2301      	movs	r3, #1
 8004236:	e018      	b.n	800426a <SDM_CloseFiles+0x12a>
  }
  
  HSD_JSON_free(JSON_string);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4618      	mov	r0, r3
 800423c:	f7fc ff12 	bl	8001064 <HSD_JSON_free>
  JSON_string = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  
  //-------------------------If SDM_FILE closed go in standby mode------------------------------------
  //-------------------------Before entering the the standby-mode set Alarm---------------------------
  char standbyMode [] = {"Standby-Mode!!!"};
 8004244:	4b10      	ldr	r3, [pc, #64]	; (8004288 <SDM_CloseFiles+0x148>)
 8004246:	1d3c      	adds	r4, r7, #4
 8004248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800424a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart2, (uint8_t *) standbyMode, sizeof(standbyMode), HAL_MAX_DELAY);
 800424e:	1d39      	adds	r1, r7, #4
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	2210      	movs	r2, #16
 8004256:	480d      	ldr	r0, [pc, #52]	; (800428c <SDM_CloseFiles+0x14c>)
 8004258:	f00b f83e 	bl	800f2d8 <HAL_UART_Transmit>
  MX_RTC_Init();
 800425c:	f7ff f934 	bl	80034c8 <MX_RTC_Init>
  HAL_SuspendTick();
 8004260:	f002 f992 	bl	8006588 <HAL_SuspendTick>
  //HAL_PWR_EnterSTANDBYMode();
  HAL_PWREx_EnterSHUTDOWNMode();
 8004264:	f006 f808 	bl	800a278 <HAL_PWREx_EnterSHUTDOWNMode>

  return 0;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	376c      	adds	r7, #108	; 0x6c
 800426e:	46bd      	mov	sp, r7
 8004270:	bd90      	pop	{r4, r7, pc}
 8004272:	bf00      	nop
 8004274:	200165f8 	.word	0x200165f8
 8004278:	080223cc 	.word	0x080223cc
 800427c:	080223d4 	.word	0x080223d4
 8004280:	0802240c 	.word	0x0802240c
 8004284:	20016c8c 	.word	0x20016c8c
 8004288:	08022424 	.word	0x08022424
 800428c:	20016358 	.word	0x20016358

08004290 <SDM_WriteConfigBuffer>:


uint8_t SDM_WriteConfigBuffer(uint8_t *buffer, uint32_t size)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t byteswritten;
  FRESULT returnWrite;
  
  returnWrite = f_write(&FileConfigHandler, buffer, size, (void *)&byteswritten);
 800429a:	f107 0308 	add.w	r3, r7, #8
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4807      	ldr	r0, [pc, #28]	; (80042c0 <SDM_WriteConfigBuffer+0x30>)
 80042a4:	f012 f959 	bl	801655a <f_write>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]
  if(returnWrite != FR_OK)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <SDM_WriteConfigBuffer+0x26>
  {
    return 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e000      	b.n	80042b8 <SDM_WriteConfigBuffer+0x28>
  }  
  return 1;
 80042b6:	2301      	movs	r3, #1
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20016c8c 	.word	0x20016c8c

080042c4 <SDM_WriteBuffer>:


uint8_t SDM_WriteBuffer(uint32_t id, uint8_t *buffer, uint32_t size)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t byteswritten;
  
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f44f 720c 	mov.w	r2, #560	; 0x230
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	4a09      	ldr	r2, [pc, #36]	; (8004300 <SDM_WriteBuffer+0x3c>)
 80042dc:	1898      	adds	r0, r3, r2
 80042de:	f107 0314 	add.w	r3, r7, #20
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	f012 f938 	bl	801655a <f_write>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <SDM_WriteBuffer+0x30>
  {
    return 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e000      	b.n	80042f6 <SDM_WriteBuffer+0x32>
  }  
  return 1;
 80042f4:	2301      	movs	r3, #1
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20016ebc 	.word	0x20016ebc

08004304 <SDM_Flush_Buffer>:

/* Write remaining data to file */
uint8_t SDM_Flush_Buffer(uint32_t id)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint8_t ret = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]
  uint32_t buf_size;
  COM_SensorStatus_t * sensor_status;   
  
  sensor_status = COM_GetSensorStatus(id);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	4618      	mov	r0, r3
 8004316:	f7fd fc73 	bl	8001c00 <COM_GetSensorStatus>
 800431a:	6138      	str	r0, [r7, #16]
  buf_size = sensor_status->sdWriteBufferSize;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	60fb      	str	r3, [r7, #12]
  
  if(SD_WriteBufferIdx[id]>0 && SD_WriteBufferIdx[id]<(buf_size-1))
 8004322:	4a26      	ldr	r2, [pc, #152]	; (80043bc <SDM_Flush_Buffer+0xb8>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d017      	beq.n	800435e <SDM_Flush_Buffer+0x5a>
 800432e:	4a23      	ldr	r2, [pc, #140]	; (80043bc <SDM_Flush_Buffer+0xb8>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3b01      	subs	r3, #1
 800433a:	429a      	cmp	r2, r3
 800433c:	d20f      	bcs.n	800435e <SDM_Flush_Buffer+0x5a>
  {
    /* flush from the beginning */
    ret = SDM_WriteBuffer(id, SD_WriteBuffer[id], SD_WriteBufferIdx[id]+1);
 800433e:	4a20      	ldr	r2, [pc, #128]	; (80043c0 <SDM_Flush_Buffer+0xbc>)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004346:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <SDM_Flush_Buffer+0xb8>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434e:	3301      	adds	r3, #1
 8004350:	461a      	mov	r2, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff ffb6 	bl	80042c4 <SDM_WriteBuffer>
 8004358:	4603      	mov	r3, r0
 800435a:	75fb      	strb	r3, [r7, #23]
 800435c:	e023      	b.n	80043a6 <SDM_Flush_Buffer+0xa2>
  }
  else if (SD_WriteBufferIdx[id]>(buf_size-1) && SD_WriteBufferIdx[id]<(buf_size*2-1))
 800435e:	4a17      	ldr	r2, [pc, #92]	; (80043bc <SDM_Flush_Buffer+0xb8>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3b01      	subs	r3, #1
 800436a:	429a      	cmp	r2, r3
 800436c:	d91b      	bls.n	80043a6 <SDM_Flush_Buffer+0xa2>
 800436e:	4a13      	ldr	r2, [pc, #76]	; (80043bc <SDM_Flush_Buffer+0xb8>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	3b01      	subs	r3, #1
 800437c:	429a      	cmp	r2, r3
 800437e:	d212      	bcs.n	80043a6 <SDM_Flush_Buffer+0xa2>
  {
    /* flush from half buffer */
    ret =  SDM_WriteBuffer(id, (uint8_t *)(SD_WriteBuffer[id]+buf_size), SD_WriteBufferIdx[id]+1-buf_size);
 8004380:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <SDM_Flush_Buffer+0xbc>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	18d1      	adds	r1, r2, r3
 800438c:	4a0b      	ldr	r2, [pc, #44]	; (80043bc <SDM_Flush_Buffer+0xb8>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	3301      	adds	r3, #1
 800439a:	461a      	mov	r2, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff ff91 	bl	80042c4 <SDM_WriteBuffer>
 80043a2:	4603      	mov	r3, r0
 80043a4:	75fb      	strb	r3, [r7, #23]
  }
  
  SD_WriteBufferIdx[id] = 0;
 80043a6:	4a05      	ldr	r2, [pc, #20]	; (80043bc <SDM_Flush_Buffer+0xb8>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2100      	movs	r1, #0
 80043ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  return ret;
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	2000072c 	.word	0x2000072c
 80043c0:	20018700 	.word	0x20018700

080043c4 <SDM_Fill_Buffer>:

/* Fill SD buffer with new data */
uint8_t SDM_Fill_Buffer(uint8_t id, uint8_t *src, uint16_t srcSize)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	71fb      	strb	r3, [r7, #7]
 80043d0:	4613      	mov	r3, r2
 80043d2:	80bb      	strh	r3, [r7, #4]
  uint8_t *dst;
  uint32_t dstP, srcP=0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
  COM_SensorStatus_t * sensor_status; 
  uint32_t dstSize, sdBufSize;
  
  
  sensor_status = COM_GetSensorStatus(id);
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd fc10 	bl	8001c00 <COM_GetSensorStatus>
 80043e0:	6178      	str	r0, [r7, #20]
  dst = SD_WriteBuffer[id];
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	4a31      	ldr	r2, [pc, #196]	; (80044ac <SDM_Fill_Buffer+0xe8>)
 80043e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ea:	613b      	str	r3, [r7, #16]
  dstP = SD_WriteBufferIdx[id];
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	4a30      	ldr	r2, [pc, #192]	; (80044b0 <SDM_Fill_Buffer+0xec>)
 80043f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f4:	61fb      	str	r3, [r7, #28]
  sdBufSize = sensor_status->sdWriteBufferSize;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	60fb      	str	r3, [r7, #12]
  dstSize = sdBufSize*2;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	60bb      	str	r3, [r7, #8]
  
  /* byte per byte copy */
  while(srcP < srcSize)
 8004402:	e013      	b.n	800442c <SDM_Fill_Buffer+0x68>
  {
    dst[dstP] = src[srcP];
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	441a      	add	r2, r3
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	440b      	add	r3, r1
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	701a      	strb	r2, [r3, #0]
    dstP++;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	3301      	adds	r3, #1
 8004418:	61fb      	str	r3, [r7, #28]
    srcP++;
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	3301      	adds	r3, #1
 800441e:	61bb      	str	r3, [r7, #24]
    if(dstP>=dstSize)
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	429a      	cmp	r2, r3
 8004426:	d301      	bcc.n	800442c <SDM_Fill_Buffer+0x68>
    {
      dstP=0;
 8004428:	2300      	movs	r3, #0
 800442a:	61fb      	str	r3, [r7, #28]
  while(srcP < srcSize)
 800442c:	88bb      	ldrh	r3, [r7, #4]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	429a      	cmp	r2, r3
 8004432:	d3e7      	bcc.n	8004404 <SDM_Fill_Buffer+0x40>
    }
  }
  
  if(SD_WriteBufferIdx[id]<(dstSize/2) && dstP>=(dstSize/2)) // first half full
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <SDM_Fill_Buffer+0xec>)
 8004438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	429a      	cmp	r2, r3
 8004442:	d213      	bcs.n	800446c <SDM_Fill_Buffer+0xa8>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	429a      	cmp	r2, r3
 800444c:	d30e      	bcc.n	800446c <SDM_Fill_Buffer+0xa8>
  {           
    // unlock write task
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 800444e:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <SDM_Fill_Buffer+0xf0>)
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8004458:	2200      	movs	r2, #0
 800445a:	4619      	mov	r1, r3
 800445c:	f013 f838 	bl	80174d0 <osMessagePut>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d017      	beq.n	8004496 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004466:	f000 fa19 	bl	800489c <_Error_Handler>
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 800446a:	e014      	b.n	8004496 <SDM_Fill_Buffer+0xd2>
    }
    
    // check for buffer consistency
  }
  else if(dstP<SD_WriteBufferIdx[id])  // second half full
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <SDM_Fill_Buffer+0xec>)
 8004470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	429a      	cmp	r2, r3
 8004478:	d20d      	bcs.n	8004496 <SDM_Fill_Buffer+0xd2>
  {
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_SECOND_HALF_MASK, 0) != osOK)
 800447a:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <SDM_Fill_Buffer+0xf0>)
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004484:	2200      	movs	r2, #0
 8004486:	4619      	mov	r1, r3
 8004488:	f013 f822 	bl	80174d0 <osMessagePut>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004492:	f000 fa03 	bl	800489c <_Error_Handler>
    }
  }
  SD_WriteBufferIdx[id] = dstP;
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	4905      	ldr	r1, [pc, #20]	; (80044b0 <SDM_Fill_Buffer+0xec>)
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  return 0;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20018700 	.word	0x20018700
 80044b0:	2000072c 	.word	0x2000072c
 80044b4:	2001849c 	.word	0x2001849c

080044b8 <SDM_StartSensorThread>:
* @brief  Start sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StartSensorThread(uint32_t id)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 80044c0:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <SDM_StartSensorThread+0xbc>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d102      	bne.n	80044d2 <SDM_StartSensorThread+0x1a>
  {
    IIS3DWB_Start();
 80044cc:	f7fe fa9a 	bl	8002a04 <IIS3DWB_Start>
 80044d0:	e046      	b.n	8004560 <SDM_StartSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 80044d2:	4b29      	ldr	r3, [pc, #164]	; (8004578 <SDM_StartSensorThread+0xc0>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4293      	cmp	r3, r2
 80044dc:	d102      	bne.n	80044e4 <SDM_StartSensorThread+0x2c>
  {
    HTS221_Start();
 80044de:	f7fd ff8b 	bl	80023f8 <HTS221_Start>
 80044e2:	e03d      	b.n	8004560 <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <SDM_StartSensorThread+0xc4>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d102      	bne.n	80044f6 <SDM_StartSensorThread+0x3e>
  {
    IIS2DH_Start();
 80044f0:	f7fd ffa8 	bl	8002444 <IIS2DH_Start>
 80044f4:	e034      	b.n	8004560 <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 80044f6:	4b22      	ldr	r3, [pc, #136]	; (8004580 <SDM_StartSensorThread+0xc8>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4293      	cmp	r3, r2
 8004500:	d102      	bne.n	8004508 <SDM_StartSensorThread+0x50>
  {
    IIS2MDC_Start();
 8004502:	f7fd ffc5 	bl	8002490 <IIS2MDC_Start>
 8004506:	e02b      	b.n	8004560 <SDM_StartSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 8004508:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <SDM_StartSensorThread+0xcc>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4293      	cmp	r3, r2
 8004512:	d102      	bne.n	800451a <SDM_StartSensorThread+0x62>
  {
    IMP34DT05_Start();
 8004514:	f7fe fa9c 	bl	8002a50 <IMP34DT05_Start>
 8004518:	e022      	b.n	8004560 <SDM_StartSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <SDM_StartSensorThread+0xd0>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4293      	cmp	r3, r2
 8004524:	d102      	bne.n	800452c <SDM_StartSensorThread+0x74>
  {
    MP23ABS1_Start();
 8004526:	f7fe ffb9 	bl	800349c <MP23ABS1_Start>
 800452a:	e019      	b.n	8004560 <SDM_StartSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 800452c:	4b17      	ldr	r3, [pc, #92]	; (800458c <SDM_StartSensorThread+0xd4>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4293      	cmp	r3, r2
 8004536:	d102      	bne.n	800453e <SDM_StartSensorThread+0x86>
  {
    ISM330DHCX_Start();
 8004538:	f7fe fab0 	bl	8002a9c <ISM330DHCX_Start>
 800453c:	e010      	b.n	8004560 <SDM_StartSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <SDM_StartSensorThread+0xd8>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4293      	cmp	r3, r2
 8004548:	d102      	bne.n	8004550 <SDM_StartSensorThread+0x98>
  {
    LPS22HH_Start();
 800454a:	f7fe facd 	bl	8002ae8 <LPS22HH_Start>
 800454e:	e007      	b.n	8004560 <SDM_StartSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 8004550:	4b10      	ldr	r3, [pc, #64]	; (8004594 <SDM_StartSensorThread+0xdc>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <SDM_StartSensorThread+0xa8>
  {
    STTS751_Start();
 800455c:	f000 fd86 	bl	800506c <STTS751_Start>
  }
  sensor_first_dataReady[id] = 1;
 8004560:	4a0d      	ldr	r2, [pc, #52]	; (8004598 <SDM_StartSensorThread+0xe0>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4413      	add	r3, r2
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]
  
  return 0;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20016040 	.word	0x20016040
 8004578:	20016354 	.word	0x20016354
 800457c:	200163f0 	.word	0x200163f0
 8004580:	20016315 	.word	0x20016315
 8004584:	200163e8 	.word	0x200163e8
 8004588:	20016314 	.word	0x20016314
 800458c:	20016355 	.word	0x20016355
 8004590:	200163f9 	.word	0x200163f9
 8004594:	200163f8 	.word	0x200163f8
 8004598:	20000028 	.word	0x20000028

0800459c <SDM_StopSensorThread>:
* @brief  Stop sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StopSensorThread(uint32_t id)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 80045a4:	4b2c      	ldr	r3, [pc, #176]	; (8004658 <SDM_StopSensorThread+0xbc>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d102      	bne.n	80045b6 <SDM_StopSensorThread+0x1a>
  {
    IIS3DWB_Stop();
 80045b0:	f7fe fa36 	bl	8002a20 <IIS3DWB_Stop>
 80045b4:	e046      	b.n	8004644 <SDM_StopSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 80045b6:	4b29      	ldr	r3, [pc, #164]	; (800465c <SDM_StopSensorThread+0xc0>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4293      	cmp	r3, r2
 80045c0:	d102      	bne.n	80045c8 <SDM_StopSensorThread+0x2c>
  {
    HTS221_Stop();
 80045c2:	f7fd ff27 	bl	8002414 <HTS221_Stop>
 80045c6:	e03d      	b.n	8004644 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 80045c8:	4b25      	ldr	r3, [pc, #148]	; (8004660 <SDM_StopSensorThread+0xc4>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d102      	bne.n	80045da <SDM_StopSensorThread+0x3e>
  {
    IIS2DH_Stop();
 80045d4:	f7fd ff44 	bl	8002460 <IIS2DH_Stop>
 80045d8:	e034      	b.n	8004644 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 80045da:	4b22      	ldr	r3, [pc, #136]	; (8004664 <SDM_StopSensorThread+0xc8>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d102      	bne.n	80045ec <SDM_StopSensorThread+0x50>
  {
    IIS2MDC_Stop();
 80045e6:	f7fd ff61 	bl	80024ac <IIS2MDC_Stop>
 80045ea:	e02b      	b.n	8004644 <SDM_StopSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 80045ec:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <SDM_StopSensorThread+0xcc>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d102      	bne.n	80045fe <SDM_StopSensorThread+0x62>
  {
    IMP34DT05_Stop();
 80045f8:	f7fe fa38 	bl	8002a6c <IMP34DT05_Stop>
 80045fc:	e022      	b.n	8004644 <SDM_StopSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 80045fe:	4b1b      	ldr	r3, [pc, #108]	; (800466c <SDM_StopSensorThread+0xd0>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4293      	cmp	r3, r2
 8004608:	d102      	bne.n	8004610 <SDM_StopSensorThread+0x74>
  {
    MP23ABS1_Stop();
 800460a:	f7fe ff55 	bl	80034b8 <MP23ABS1_Stop>
 800460e:	e019      	b.n	8004644 <SDM_StopSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <SDM_StopSensorThread+0xd4>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4293      	cmp	r3, r2
 800461a:	d102      	bne.n	8004622 <SDM_StopSensorThread+0x86>
  {
    ISM330DHCX_Stop();
 800461c:	f7fe fa4c 	bl	8002ab8 <ISM330DHCX_Stop>
 8004620:	e010      	b.n	8004644 <SDM_StopSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <SDM_StopSensorThread+0xd8>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4293      	cmp	r3, r2
 800462c:	d102      	bne.n	8004634 <SDM_StopSensorThread+0x98>
  {
    LPS22HH_Stop();
 800462e:	f7fe fa69 	bl	8002b04 <LPS22HH_Stop>
 8004632:	e007      	b.n	8004644 <SDM_StopSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 8004634:	4b10      	ldr	r3, [pc, #64]	; (8004678 <SDM_StopSensorThread+0xdc>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <SDM_StopSensorThread+0xa8>
  {
    STTS751_Stop();
 8004640:	f000 fd22 	bl	8005088 <STTS751_Stop>
  }
  sensor_first_dataReady[id] = 0;
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <SDM_StopSensorThread+0xe0>)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4413      	add	r3, r2
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
  return 0;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20016040 	.word	0x20016040
 800465c:	20016354 	.word	0x20016354
 8004660:	200163f0 	.word	0x200163f0
 8004664:	20016315 	.word	0x20016315
 8004668:	200163e8 	.word	0x200163e8
 800466c:	20016314 	.word	0x20016314
 8004670:	20016355 	.word	0x20016355
 8004674:	200163f9 	.word	0x200163f9
 8004678:	200163f8 	.word	0x200163f8
 800467c:	20000028 	.word	0x20000028

08004680 <SDM_ReadJSON>:



uint32_t SDM_ReadJSON(char *serialized_string)
{  
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  static COM_Device_t JSON_device; 
  COM_Device_t *local_device; 
  uint8_t ii;
  uint32_t size;
  
  local_device = COM_GetDevice();  
 8004688:	f7fd fa7e 	bl	8001b88 <COM_GetDevice>
 800468c:	6138      	str	r0, [r7, #16]
  size = sizeof(COM_Device_t);
 800468e:	2354      	movs	r3, #84	; 0x54
 8004690:	60fb      	str	r3, [r7, #12]
  
  memcpy(&JSON_device, local_device, size);       
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	6939      	ldr	r1, [r7, #16]
 8004696:	4816      	ldr	r0, [pc, #88]	; (80046f0 <SDM_ReadJSON+0x70>)
 8004698:	f019 fbd4 	bl	801de44 <memcpy>
  HSD_JSON_parse_Device(serialized_string, &JSON_device);      
 800469c:	4914      	ldr	r1, [pc, #80]	; (80046f0 <SDM_ReadJSON+0x70>)
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc fd02 	bl	80010a8 <HSD_JSON_parse_Device>
  
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	75fb      	strb	r3, [r7, #23]
 80046a8:	e016      	b.n	80046d8 <SDM_ReadJSON+0x58>
  {
    update_sensorStatus(&local_device->sensors[ii]->sensorStatus, &JSON_device.sensors[ii]->sensorStatus, ii);
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	330a      	adds	r3, #10
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <SDM_ReadJSON+0x70>)
 80046be:	330a      	adds	r3, #10
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80046ca:	7dfa      	ldrb	r2, [r7, #23]
 80046cc:	4619      	mov	r1, r3
 80046ce:	f7fd fc6f 	bl	8001fb0 <update_sensorStatus>
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	3301      	adds	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
 80046d8:	7dfa      	ldrb	r2, [r7, #23]
 80046da:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <SDM_ReadJSON+0x70>)
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	429a      	cmp	r2, r3
 80046e0:	d3e3      	bcc.n	80046aa <SDM_ReadJSON+0x2a>
  }
  
  update_sensors_config();  
 80046e2:	f7fd fd73 	bl	80021cc <update_sensors_config>
  
  return 0;  
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000884 	.word	0x20000884

080046f4 <SDM_CreateJSON>:

uint32_t SDM_CreateJSON(char **serialized_string)
{  
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  COM_Device_t *device; 
  uint32_t size;
  
  device = COM_GetDevice();  
 80046fc:	f7fd fa44 	bl	8001b88 <COM_GetDevice>
 8004700:	60f8      	str	r0, [r7, #12]
  size = HSD_JSON_serialize_Device(device, serialized_string, PRETTY_JSON);
 8004702:	2201      	movs	r2, #1
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7fc fcbc 	bl	8001084 <HSD_JSON_serialize_Device>
 800470c:	4603      	mov	r3, r0
 800470e:	60bb      	str	r3, [r7, #8]
  
  return size;
 8004710:	68bb      	ldr	r3, [r7, #8]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <userButtonCallback>:



void userButtonCallback(uint16_t GPIO_Pin)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	4603      	mov	r3, r0
 8004722:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <userButtonCallback+0x14>
  {
  case USER_BUTTON_PIN:
	  SDM_StartMeasurements();
 800472a:	f000 f805 	bl	8004738 <SDM_StartMeasurements>
  default:
    break;
 800472e:	bf00      	nop
  }
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <SDM_StartMeasurements>:

void SDM_StartMeasurements(void)
{
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
    if( HAL_GetTick() - t_start > 1000 )
 800473e:	f001 fef5 	bl	800652c <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	4b25      	ldr	r3, [pc, #148]	; (80047dc <SDM_StartMeasurements+0xa4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800474e:	d940      	bls.n	80047d2 <SDM_StartMeasurements+0x9a>
    {
      if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 8004750:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <SDM_StartMeasurements+0xa8>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <SDM_StartMeasurements+0x2c>
 800475a:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <SDM_StartMeasurements+0xa8>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d136      	bne.n	80047d2 <SDM_StartMeasurements+0x9a>
      {
    	 char startMeasurements [] = {"StartMeasurements!!!"};
 8004764:	4b1f      	ldr	r3, [pc, #124]	; (80047e4 <SDM_StartMeasurements+0xac>)
 8004766:	463c      	mov	r4, r7
 8004768:	461d      	mov	r5, r3
 800476a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800476c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800476e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004772:	6020      	str	r0, [r4, #0]
 8004774:	3404      	adds	r4, #4
 8004776:	7021      	strb	r1, [r4, #0]
    	 HAL_UART_Transmit(&huart2, (uint8_t *) startMeasurements, sizeof(startMeasurements), HAL_MAX_DELAY);
 8004778:	4639      	mov	r1, r7
 800477a:	f04f 33ff 	mov.w	r3, #4294967295
 800477e:	2215      	movs	r2, #21
 8004780:	4819      	ldr	r0, [pc, #100]	; (80047e8 <SDM_StartMeasurements+0xb0>)
 8004782:	f00a fda9 	bl	800f2d8 <HAL_UART_Transmit>

        // Cannot wait since we are in an ISR
        if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8004786:	4b19      	ldr	r3, [pc, #100]	; (80047ec <SDM_StartMeasurements+0xb4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	f248 0101 	movw	r1, #32769	; 0x8001
 8004790:	4618      	mov	r0, r3
 8004792:	f012 fe9d 	bl	80174d0 <osMessagePut>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <SDM_StartMeasurements+0x68>
        {
          _Error_Handler();
 800479c:	f000 f87e 	bl	800489c <_Error_Handler>
        }

        t_start = HAL_GetTick();
 80047a0:	f001 fec4 	bl	800652c <HAL_GetTick>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <SDM_StartMeasurements+0xa4>)
 80047a8:	6013      	str	r3, [r2, #0]

#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
        t_start = SD_Logging_Time_Start = HAL_GetTick();
 80047aa:	f001 febf 	bl	800652c <HAL_GetTick>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4a0f      	ldr	r2, [pc, #60]	; (80047f0 <SDM_StartMeasurements+0xb8>)
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <SDM_StartMeasurements+0xb8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a08      	ldr	r2, [pc, #32]	; (80047dc <SDM_StartMeasurements+0xa4>)
 80047ba:	6013      	str	r3, [r2, #0]

        if (SD_Logging_Enabled == 1)
 80047bc:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <SDM_StartMeasurements+0xbc>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d103      	bne.n	80047cc <SDM_StartMeasurements+0x94>
          SD_Logging_Enabled = 0;
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <SDM_StartMeasurements+0xbc>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
          SD_Logging_Enabled = 1;
#endif
      }
    }

}
 80047ca:	e002      	b.n	80047d2 <SDM_StartMeasurements+0x9a>
          SD_Logging_Enabled = 1;
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <SDM_StartMeasurements+0xbc>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bdb0      	pop	{r4, r5, r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000758 	.word	0x20000758
 80047e0:	200002d4 	.word	0x200002d4
 80047e4:	08022434 	.word	0x08022434
 80047e8:	20016358 	.word	0x20016358
 80047ec:	2001849c 	.word	0x2001849c
 80047f0:	20000764 	.word	0x20000764
 80047f4:	20000768 	.word	0x20000768

080047f8 <SDM_AutosaveFile>:

#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
void SDM_AutosaveFile(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  if (SD_Logging_Active)
 80047fc:	4b23      	ldr	r3, [pc, #140]	; (800488c <SDM_AutosaveFile+0x94>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <SDM_AutosaveFile+0x4e>
  {
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_ACTIVE*1000 )
 8004804:	f001 fe92 	bl	800652c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	4b21      	ldr	r3, [pc, #132]	; (8004890 <SDM_AutosaveFile+0x98>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004814:	4293      	cmp	r3, r2
 8004816:	d936      	bls.n	8004886 <SDM_AutosaveFile+0x8e>
    {
      // Cannot wait since we are in an ISR
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <SDM_AutosaveFile+0x9c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2200      	movs	r2, #0
 800481e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004822:	4618      	mov	r0, r3
 8004824:	f012 fe54 	bl	80174d0 <osMessagePut>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <SDM_AutosaveFile+0x3a>
      {
        _Error_Handler();
 800482e:	f000 f835 	bl	800489c <_Error_Handler>
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 8004832:	f001 fe7b 	bl	800652c <HAL_GetTick>
 8004836:	4603      	mov	r3, r0
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <SDM_AutosaveFile+0x98>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	4b14      	ldr	r3, [pc, #80]	; (8004890 <SDM_AutosaveFile+0x98>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a15      	ldr	r2, [pc, #84]	; (8004898 <SDM_AutosaveFile+0xa0>)
 8004842:	6013      	str	r3, [r2, #0]
        _Error_Handler();
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
    }
  }
}
 8004844:	e01f      	b.n	8004886 <SDM_AutosaveFile+0x8e>
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_IDLE*1000 )
 8004846:	f001 fe71 	bl	800652c <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	4b10      	ldr	r3, [pc, #64]	; (8004890 <SDM_AutosaveFile+0x98>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f242 7210 	movw	r2, #10000	; 0x2710
 8004856:	4293      	cmp	r3, r2
 8004858:	d915      	bls.n	8004886 <SDM_AutosaveFile+0x8e>
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 800485a:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <SDM_AutosaveFile+0x9c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	f248 0101 	movw	r1, #32769	; 0x8001
 8004864:	4618      	mov	r0, r3
 8004866:	f012 fe33 	bl	80174d0 <osMessagePut>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <SDM_AutosaveFile+0x7c>
        _Error_Handler();
 8004870:	f000 f814 	bl	800489c <_Error_Handler>
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 8004874:	f001 fe5a 	bl	800652c <HAL_GetTick>
 8004878:	4603      	mov	r3, r0
 800487a:	4a05      	ldr	r2, [pc, #20]	; (8004890 <SDM_AutosaveFile+0x98>)
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <SDM_AutosaveFile+0x98>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a05      	ldr	r2, [pc, #20]	; (8004898 <SDM_AutosaveFile+0xa0>)
 8004884:	6013      	str	r3, [r2, #0]
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000754 	.word	0x20000754
 8004890:	20000764 	.word	0x20000764
 8004894:	2001849c 	.word	0x2001849c
 8004898:	20000758 	.word	0x20000758

0800489c <_Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  while (1)
 80048a0:	e7fe      	b.n	80048a0 <_Error_Handler+0x4>
	...

080048a4 <SM_SPI_Init>:
* @param None
* @retval None
* @note callbacks to the MSP
*/
static void SM_SPI_Init(void)
{  
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* SPI3 parameter configuration*/
  hsm_spi.Instance = SM_SPI_x;
 80048a8:	4b20      	ldr	r3, [pc, #128]	; (800492c <SM_SPI_Init+0x88>)
 80048aa:	4a21      	ldr	r2, [pc, #132]	; (8004930 <SM_SPI_Init+0x8c>)
 80048ac:	601a      	str	r2, [r3, #0]
  hsm_spi.Init.Mode = SPI_MODE_MASTER;
 80048ae:	4b1f      	ldr	r3, [pc, #124]	; (800492c <SM_SPI_Init+0x88>)
 80048b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048b4:	605a      	str	r2, [r3, #4]
  hsm_spi.Init.Direction = SPI_DIRECTION_2LINES;
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <SM_SPI_Init+0x88>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	609a      	str	r2, [r3, #8]
  hsm_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 80048bc:	4b1b      	ldr	r3, [pc, #108]	; (800492c <SM_SPI_Init+0x88>)
 80048be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048c2:	60da      	str	r2, [r3, #12]
  hsm_spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80048c4:	4b19      	ldr	r3, [pc, #100]	; (800492c <SM_SPI_Init+0x88>)
 80048c6:	2202      	movs	r2, #2
 80048c8:	611a      	str	r2, [r3, #16]
  hsm_spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <SM_SPI_Init+0x88>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	615a      	str	r2, [r3, #20]
  hsm_spi.Init.NSS = SPI_NSS_SOFT;
 80048d0:	4b16      	ldr	r3, [pc, #88]	; (800492c <SM_SPI_Init+0x88>)
 80048d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d6:	619a      	str	r2, [r3, #24]
//  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /*SPI running @ 10 MHz */ /*stwin*/
  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /*SPI running @ 10 MHz */ /*stwin*/
 80048d8:	4b14      	ldr	r3, [pc, #80]	; (800492c <SM_SPI_Init+0x88>)
 80048da:	2210      	movs	r2, #16
 80048dc:	61da      	str	r2, [r3, #28]
  hsm_spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <SM_SPI_Init+0x88>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	621a      	str	r2, [r3, #32]
  hsm_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 80048e4:	4b11      	ldr	r3, [pc, #68]	; (800492c <SM_SPI_Init+0x88>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24
  hsm_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ea:	4b10      	ldr	r3, [pc, #64]	; (800492c <SM_SPI_Init+0x88>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
  hsm_spi.Init.CRCPolynomial = 7;
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <SM_SPI_Init+0x88>)
 80048f2:	2207      	movs	r2, #7
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsm_spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <SM_SPI_Init+0x88>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
  hsm_spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <SM_SPI_Init+0x88>)
 80048fe:	2200      	movs	r2, #0
 8004900:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Register MSP Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_MSPINIT_CB_ID, SM_SPI_MspInit);
 8004902:	4a0c      	ldr	r2, [pc, #48]	; (8004934 <SM_SPI_Init+0x90>)
 8004904:	2108      	movs	r1, #8
 8004906:	4809      	ldr	r0, [pc, #36]	; (800492c <SM_SPI_Init+0x88>)
 8004908:	f009 fb0e 	bl	800df28 <HAL_SPI_RegisterCallback>
  
  if (HAL_SPI_Init(&hsm_spi) != HAL_OK)
 800490c:	4807      	ldr	r0, [pc, #28]	; (800492c <SM_SPI_Init+0x88>)
 800490e:	f009 fa41 	bl	800dd94 <HAL_SPI_Init>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <SM_SPI_Init+0x78>
  {
    SM_Error_Handler();
 8004918:	f000 f810 	bl	800493c <SM_Error_Handler>
  }
  
  /* Register SPI DMA complete Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_TX_RX_COMPLETE_CB_ID, SM_SPI_TxRxCpltCallback);
 800491c:	4a06      	ldr	r2, [pc, #24]	; (8004938 <SM_SPI_Init+0x94>)
 800491e:	2102      	movs	r1, #2
 8004920:	4802      	ldr	r0, [pc, #8]	; (800492c <SM_SPI_Init+0x88>)
 8004922:	f009 fb01 	bl	800df28 <HAL_SPI_RegisterCallback>
}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	2001883c 	.word	0x2001883c
 8004930:	40003800 	.word	0x40003800
 8004934:	08004c35 	.word	0x08004c35
 8004938:	08004b9d 	.word	0x08004b9d

0800493c <SM_Error_Handler>:

void SM_Error_Handler( void )
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  while (1)
 8004940:	e7fe      	b.n	8004940 <SM_Error_Handler+0x4>
	...

08004944 <SM_OS_Init>:
*        read requests and a semaphore used to wait for DMA transfer complete
* @param None
* @retval None
*/
void SM_OS_Init(void)
{
 8004944:	b5b0      	push	{r4, r5, r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
  /* Bus read semaphores */
  spiThreadSem_id = osSemaphoreCreate(osSemaphore(spiThreadSem), 1);
 800494a:	2101      	movs	r1, #1
 800494c:	4819      	ldr	r0, [pc, #100]	; (80049b4 <SM_OS_Init+0x70>)
 800494e:	f012 fc05 	bl	801715c <osSemaphoreCreate>
 8004952:	4603      	mov	r3, r0
 8004954:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <SM_OS_Init+0x74>)
 8004956:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(spiThreadSem_id,osWaitForever);
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <SM_OS_Init+0x74>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f04f 31ff 	mov.w	r1, #4294967295
 8004960:	4618      	mov	r0, r3
 8004962:	f012 fc1f 	bl	80171a4 <osSemaphoreWait>
#if 0
  i2cThreadSem_id = osSemaphoreCreate(osSemaphore(i2cThreadSem), 1);
  osSemaphoreWait(i2cThreadSem_id,osWaitForever);    
#endif
  /* Bus read functions memory pools */  
  spiPool_id = osPoolCreate(osPool(spiPool));
 8004966:	4815      	ldr	r0, [pc, #84]	; (80049bc <SM_OS_Init+0x78>)
 8004968:	f012 fca0 	bl	80172ac <osPoolCreate>
 800496c:	4603      	mov	r3, r0
 800496e:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <SM_OS_Init+0x7c>)
 8004970:	6013      	str	r3, [r2, #0]
#if 0
  i2cPool_id = osPoolCreate(osPool(i2cPool));    
#endif
  /* Bus read queues */
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 8004972:	2100      	movs	r1, #0
 8004974:	4813      	ldr	r0, [pc, #76]	; (80049c4 <SM_OS_Init+0x80>)
 8004976:	f012 fd99 	bl	80174ac <osMessageCreate>
 800497a:	4603      	mov	r3, r0
 800497c:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <SM_OS_Init+0x84>)
 800497e:	6013      	str	r3, [r2, #0]
#if 0
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
#endif
  vQueueAddToRegistry( spiReqQueue_id, "spiReqQueue_id" );
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <SM_OS_Init+0x84>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4911      	ldr	r1, [pc, #68]	; (80049cc <SM_OS_Init+0x88>)
 8004986:	4618      	mov	r0, r3
 8004988:	f013 fdf6 	bl	8018578 <vQueueAddToRegistry>
  
  /* SPI read Thread*/
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <SM_OS_Init+0x8c>)
 800498e:	1d3c      	adds	r4, r7, #4
 8004990:	461d      	mov	r5, r3
 8004992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	6023      	str	r3, [r4, #0]
#if 0
  /* I2C read Thread*/
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
#endif
  /* Start SPI read Thread */
  spiThreadId = osThreadCreate(osThread(SPI_THREAD), NULL);
 800499a:	1d3b      	adds	r3, r7, #4
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f012 fbb5 	bl	801710e <osThreadCreate>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4a0b      	ldr	r2, [pc, #44]	; (80049d4 <SM_OS_Init+0x90>)
 80049a8:	6013      	str	r3, [r2, #0]
#if 0
  /* Start I2C read Thread */
  i2cThreadId = osThreadCreate(osThread(I2C_THREAD), NULL);
#endif
}
 80049aa:	bf00      	nop
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bdb0      	pop	{r4, r5, r7, pc}
 80049b2:	bf00      	nop
 80049b4:	08022678 	.word	0x08022678
 80049b8:	20018738 	.word	0x20018738
 80049bc:	08022684 	.word	0x08022684
 80049c0:	20018730 	.word	0x20018730
 80049c4:	0802267c 	.word	0x0802267c
 80049c8:	2001872c 	.word	0x2001872c
 80049cc:	08022458 	.word	0x08022458
 80049d0:	08022468 	.word	0x08022468
 80049d4:	20018734 	.word	0x20018734

080049d8 <SM_SPI_Read_Os>:
* @note when the function is used and linked to the sensor context, all the calls made by the PID driver will result in a
*       call to this function. If this is the case, be sure to make all the calls to the PID driver functions from a freeRTOS thread
* @retval None
*/
int32_t SM_SPI_Read_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	461a      	mov	r2, r3
 80049e4:	460b      	mov	r3, r1
 80049e6:	72fb      	strb	r3, [r7, #11]
 80049e8:	4613      	mov	r3, r2
 80049ea:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 80049ec:	2300      	movs	r3, #0
 80049ee:	75fb      	strb	r3, [r7, #23]
  SM_Message_t * msg;
  
  msg = osPoolAlloc(spiPool_id);
 80049f0:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <SM_SPI_Read_Os+0x84>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f012 fcb6 	bl	8017366 <osPoolAlloc>
 80049fa:	6138      	str	r0, [r7, #16]
  
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b33      	cmp	r3, #51	; 0x33
 8004a02:	d104      	bne.n	8004a0e <SM_SPI_Read_Os+0x36>
 8004a04:	893b      	ldrh	r3, [r7, #8]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d901      	bls.n	8004a0e <SM_SPI_Read_Os+0x36>
  {
    autoInc = 0x40;
 8004a0a:	2340      	movs	r3, #64	; 0x40
 8004a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  msg->sensorHandler = handle;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg | 0x80 | autoInc;
 8004a14:	7afa      	ldrb	r2, [r7, #11]
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	893a      	ldrh	r2, [r7, #8]
 8004a2a:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 8004a32:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <SM_SPI_Read_Os+0x88>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6939      	ldr	r1, [r7, #16]
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f012 fd47 	bl	80174d0 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f04f 31ff 	mov.w	r1, #4294967295
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f012 fba9 	bl	80171a4 <osSemaphoreWait>
  
  return 0;  
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20018730 	.word	0x20018730
 8004a60:	2001872c 	.word	0x2001872c

08004a64 <SM_SPI_Write_Os>:

int32_t SM_SPI_Write_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	460b      	mov	r3, r1
 8004a72:	72fb      	strb	r3, [r7, #11]
 8004a74:	4613      	mov	r3, r2
 8004a76:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	75fb      	strb	r3, [r7, #23]

  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b33      	cmp	r3, #51	; 0x33
 8004a82:	d104      	bne.n	8004a8e <SM_SPI_Write_Os+0x2a>
 8004a84:	893b      	ldrh	r3, [r7, #8]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d901      	bls.n	8004a8e <SM_SPI_Write_Os+0x2a>
  {
    autoInc = 0x40;
 8004a8a:	2340      	movs	r3, #64	; 0x40
 8004a8c:	75fb      	strb	r3, [r7, #23]
  }
  
  SM_Message_t * msg;  
  msg = osPoolAlloc(spiPool_id);
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <SM_SPI_Write_Os+0x80>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f012 fc67 	bl	8017366 <osPoolAlloc>
 8004a98:	6138      	str	r0, [r7, #16]
  msg->sensorHandler = handle;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg|autoInc ;
 8004aa0:	7afa      	ldrb	r2, [r7, #11]
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	893a      	ldrh	r2, [r7, #8]
 8004ab0:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <SM_SPI_Write_Os+0x84>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6939      	ldr	r1, [r7, #16]
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f012 fd04 	bl	80174d0 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f012 fb66 	bl	80171a4 <osSemaphoreWait>
  
  return 0;  
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20018730 	.word	0x20018730
 8004ae8:	2001872c 	.word	0x2001872c

08004aec <spi_Thread>:
*         the thread which made the request at the end of the read.
* @param  argument not used
* @retval None
*/
static void spi_Thread(void const *argument)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  (void)argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SM_SPI_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_SPI_DEBUG_PIN );
 8004af4:	210a      	movs	r1, #10
 8004af6:	2000      	movs	r0, #0
 8004af8:	f014 fa3a 	bl	8018f70 <vTaskSetApplicationTaskTag>
#endif

  osEvent evt;
  for (;;)
  {    
    evt = osMessageGet(spiReqQueue_id, osWaitForever); 
 8004afc:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <spi_Thread+0xa0>)
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	f107 030c 	add.w	r3, r7, #12
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f012 fd21 	bl	8017550 <osMessageGet>

    SM_Message_t * msg = evt.value.p;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_RESET);
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6858      	ldr	r0, [r3, #4]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	891b      	ldrh	r3, [r3, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	4619      	mov	r1, r3
 8004b22:	f003 febf 	bl	80088a4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hsm_spi, &msg->regAddr, 1, 1000);
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f103 010c 	add.w	r1, r3, #12
 8004b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b30:	2201      	movs	r2, #1
 8004b32:	4817      	ldr	r0, [pc, #92]	; (8004b90 <spi_Thread+0xa4>)
 8004b34:	f009 fa9e 	bl	800e074 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive_DMA(&hsm_spi, msg->dataPtr, msg->dataPtr, msg->readSize);
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	6899      	ldr	r1, [r3, #8]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	89db      	ldrh	r3, [r3, #14]
 8004b44:	4812      	ldr	r0, [pc, #72]	; (8004b90 <spi_Thread+0xa4>)
 8004b46:	f009 fbfb 	bl	800e340 <HAL_SPI_TransmitReceive_DMA>
    
    osSemaphoreWait(spiThreadSem_id, osWaitForever);
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <spi_Thread+0xa8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8004b52:	4618      	mov	r0, r3
 8004b54:	f012 fb26 	bl	80171a4 <osSemaphoreWait>
    
    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_SET); 
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6858      	ldr	r0, [r3, #4]
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	891b      	ldrh	r3, [r3, #8]
 8004b64:	2201      	movs	r2, #1
 8004b66:	4619      	mov	r1, r3
 8004b68:	f003 fe9c 	bl	80088a4 <HAL_GPIO_WritePin>

    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	61bb      	str	r3, [r7, #24]
    osPoolFree(spiPool_id, msg);
 8004b74:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <spi_Thread+0xac>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69f9      	ldr	r1, [r7, #28]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f012 fc55 	bl	801742a <osPoolFree>
    osSemaphoreRelease(*sem);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f012 fb5b 	bl	8017240 <osSemaphoreRelease>
  {    
 8004b8a:	e7b7      	b.n	8004afc <spi_Thread+0x10>
 8004b8c:	2001872c 	.word	0x2001872c
 8004b90:	2001883c 	.word	0x2001883c
 8004b94:	20018738 	.word	0x20018738
 8004b98:	20018730 	.word	0x20018730

08004b9c <SM_SPI_TxRxCpltCallback>:
  }
}

static void SM_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(spiThreadSem_id);    
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <SM_SPI_TxRxCpltCallback+0x1c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f012 fb49 	bl	8017240 <osSemaphoreRelease>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20018738 	.word	0x20018738

08004bbc <SM_Peripheral_Init>:
{
  errors++;
}

void SM_Peripheral_Init(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  SM_DMA_Init();
 8004bc0:	f000 f806 	bl	8004bd0 <SM_DMA_Init>
//  SM_I2C_Init();
  SM_SPI_Init();
 8004bc4:	f7ff fe6e 	bl	80048a4 <SM_SPI_Init>
  SM_TIM_Init();
 8004bc8:	f000 f976 	bl	8004eb8 <SM_TIM_Init>
}
 8004bcc:	bf00      	nop
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <SM_DMA_Init>:

/** 
* Enable DMA controller clock
*/
static void SM_DMA_Init(void) 
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004bd6:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <SM_DMA_Init+0x60>)
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bda:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <SM_DMA_Init+0x60>)
 8004bdc:	f043 0304 	orr.w	r3, r3, #4
 8004be0:	6493      	str	r3, [r2, #72]	; 0x48
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <SM_DMA_Init+0x60>)
 8004be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
  SM_SPIx_DMA_CLK_ENABLE();
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <SM_DMA_Init+0x60>)
 8004bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf2:	4a0f      	ldr	r2, [pc, #60]	; (8004c30 <SM_DMA_Init+0x60>)
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	6493      	str	r3, [r2, #72]	; 0x48
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <SM_DMA_Init+0x60>)
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_I2C_RX_DMA_IRQn, 3, 0);
  HAL_NVIC_EnableIRQ(SM_I2C_RX_DMA_IRQn);
#endif
  /* SM_SPI_RX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_RX_DMA_IRQn, 3, 0);
 8004c06:	2200      	movs	r2, #0
 8004c08:	2103      	movs	r1, #3
 8004c0a:	200b      	movs	r0, #11
 8004c0c:	f003 f9e9 	bl	8007fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_RX_DMA_IRQn);
 8004c10:	200b      	movs	r0, #11
 8004c12:	f003 fa02 	bl	800801a <HAL_NVIC_EnableIRQ>
  
  /* SM_SPI_TX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_TX_DMA_IRQn, 3, 0);
 8004c16:	2200      	movs	r2, #0
 8004c18:	2103      	movs	r1, #3
 8004c1a:	200c      	movs	r0, #12
 8004c1c:	f003 f9e1 	bl	8007fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_TX_DMA_IRQn);
 8004c20:	200c      	movs	r0, #12
 8004c22:	f003 f9fa 	bl	800801a <HAL_NVIC_EnableIRQ>
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000

08004c34 <SM_SPI_MspInit>:

static void SM_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	; 0x38
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	611a      	str	r2, [r3, #16]
  
//  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);

  SM_SPI_CLK_PIN_CLK_ENABLE(); 
 8004c4c:	4b8f      	ldr	r3, [pc, #572]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c50:	4a8e      	ldr	r2, [pc, #568]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c52:	f043 0308 	orr.w	r3, r3, #8
 8004c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c58:	4b8c      	ldr	r3, [pc, #560]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	623b      	str	r3, [r7, #32]
 8004c62:	6a3b      	ldr	r3, [r7, #32]
  SM_SPI_MISO_PIN_CLK_ENABLE(); 
 8004c64:	4b89      	ldr	r3, [pc, #548]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c68:	4a88      	ldr	r2, [pc, #544]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c6a:	f043 0308 	orr.w	r3, r3, #8
 8004c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c70:	4b86      	ldr	r3, [pc, #536]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
  SM_SPI_MOSI_PIN_CLK_ENABLE(); 
 8004c7c:	4b83      	ldr	r3, [pc, #524]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c80:	4a82      	ldr	r2, [pc, #520]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c82:	f043 0304 	orr.w	r3, r3, #4
 8004c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c88:	4b80      	ldr	r3, [pc, #512]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();		//SPI2_CS
 8004c94:	4b7d      	ldr	r3, [pc, #500]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c98:	4a7c      	ldr	r2, [pc, #496]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004c9a:	f043 0302 	orr.w	r3, r3, #2
 8004c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ca0:	4b7a      	ldr	r3, [pc, #488]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();		//SEL_3_4
 8004cac:	4b77      	ldr	r3, [pc, #476]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb0:	4a76      	ldr	r2, [pc, #472]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004cb2:	f043 0320 	orr.w	r3, r3, #32
 8004cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cb8:	4b74      	ldr	r3, [pc, #464]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();		//SEL_1_2
 8004cc4:	4b71      	ldr	r3, [pc, #452]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	4a70      	ldr	r2, [pc, #448]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cd0:	4b6e      	ldr	r3, [pc, #440]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ce2:	486b      	ldr	r0, [pc, #428]	; (8004e90 <SM_SPI_MspInit+0x25c>)
 8004ce4:	f003 fdde 	bl	80088a4 <HAL_GPIO_WritePin>

  //Configure GPIO pin Output Level of 1_2_SEL and 3_4_SEL
  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2101      	movs	r1, #1
 8004cec:	4869      	ldr	r0, [pc, #420]	; (8004e94 <SM_SPI_MspInit+0x260>)
 8004cee:	f003 fdd9 	bl	80088a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cf8:	4867      	ldr	r0, [pc, #412]	; (8004e98 <SM_SPI_MspInit+0x264>)
 8004cfa:	f003 fdd3 	bl	80088a4 <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d06:	2303      	movs	r3, #3
 8004d08:	633b      	str	r3, [r7, #48]	; 0x30
  
  GPIO_InitStruct.Alternate = SM_SPI_CLK_AF;
 8004d0a:	2305      	movs	r3, #5
 8004d0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_SPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d16:	4619      	mov	r1, r3
 8004d18:	4860      	ldr	r0, [pc, #384]	; (8004e9c <SM_SPI_MspInit+0x268>)
 8004d1a:	f003 fc19 	bl	8008550 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MISO_AF;
 8004d1e:	2305      	movs	r3, #5
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pin = SM_SPI_MISO_PIN;
 8004d22:	2308      	movs	r3, #8
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	485b      	ldr	r0, [pc, #364]	; (8004e9c <SM_SPI_MspInit+0x268>)
 8004d2e:	f003 fc0f 	bl	8008550 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MOSI_AF;
 8004d32:	2305      	movs	r3, #5
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pin = SM_SPI_MOSI_PIN;
 8004d36:	2308      	movs	r3, #8
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4857      	ldr	r0, [pc, #348]	; (8004ea0 <SM_SPI_MspInit+0x26c>)
 8004d42:	f003 fc05 	bl	8008550 <HAL_GPIO_Init>
  
  //Add changed---
  /*Configure GPIO pin : IIS3DWB_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 8004d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d54:	2302      	movs	r3, #2
 8004d56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8004d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	484c      	ldr	r0, [pc, #304]	; (8004e90 <SM_SPI_MspInit+0x25c>)
 8004d60:	f003 fbf6 	bl	8008550 <HAL_GPIO_Init>

  /*Configure GPIO pins : STTS751_INT_Pin IIS3DWB_INT1_Pin */
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 8004d64:	2320      	movs	r3, #32
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d68:	4b4e      	ldr	r3, [pc, #312]	; (8004ea4 <SM_SPI_MspInit+0x270>)
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IIS3DWB_INT1_GPIO_Port, &GPIO_InitStruct);
 8004d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d74:	4619      	mov	r1, r3
 8004d76:	484a      	ldr	r0, [pc, #296]	; (8004ea0 <SM_SPI_MspInit+0x26c>)
 8004d78:	f003 fbea 	bl	8008550 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_2_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_1_2_SEL_Pin;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d80:	2301      	movs	r3, #1
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IIS3DWB_1_2_SEL_GPIO_Port, &GPIO_InitStruct);
 8004d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d90:	4619      	mov	r1, r3
 8004d92:	4840      	ldr	r0, [pc, #256]	; (8004e94 <SM_SPI_MspInit+0x260>)
 8004d94:	f003 fbdc 	bl	8008550 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_3_4_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_3_4_SEL_Pin;
 8004d98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da6:	2300      	movs	r3, #0
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IIS3DWB_3_4_SEL_GPIO_Port, &GPIO_InitStruct);
 8004daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dae:	4619      	mov	r1, r3
 8004db0:	4839      	ldr	r0, [pc, #228]	; (8004e98 <SM_SPI_MspInit+0x264>)
 8004db2:	f003 fbcd 	bl	8008550 <HAL_GPIO_Init>
  //---

  SM_SPIx_CLK_ENABLE();
 8004db6:	4b35      	ldr	r3, [pc, #212]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	4a34      	ldr	r2, [pc, #208]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc2:	4b32      	ldr	r3, [pc, #200]	; (8004e8c <SM_SPI_MspInit+0x258>)
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
    
  /* SPI DMA Init */
  /* SPI_RX Init */
  hdma_sm_spi_rx.Instance = SM_SPI_RX_DMA_CHANNEL;
 8004dce:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004dd0:	4a36      	ldr	r2, [pc, #216]	; (8004eac <SM_SPI_MspInit+0x278>)
 8004dd2:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_rx.Init.Request = SM_SPI_RX_DMA_REQUEST;
 8004dd4:	4b34      	ldr	r3, [pc, #208]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004dd6:	220c      	movs	r2, #12
 8004dd8:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dda:	4b33      	ldr	r3, [pc, #204]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004de0:	4b31      	ldr	r3, [pc, #196]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004de6:	4b30      	ldr	r3, [pc, #192]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004de8:	2280      	movs	r2, #128	; 0x80
 8004dea:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dec:	4b2e      	ldr	r3, [pc, #184]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004df2:	4b2d      	ldr	r3, [pc, #180]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_rx.Init.Mode = DMA_NORMAL;
 8004df8:	4b2b      	ldr	r3, [pc, #172]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004dfe:	4b2a      	ldr	r3, [pc, #168]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_rx) != HAL_OK)
 8004e04:	4828      	ldr	r0, [pc, #160]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004e06:	f003 f923 	bl	8008050 <HAL_DMA_Init>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <SM_SPI_MspInit+0x1e0>
  {
    SM_Error_Handler();
 8004e10:	f7ff fd94 	bl	800493c <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmarx,hdma_sm_spi_rx);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004e18:	659a      	str	r2, [r3, #88]	; 0x58
 8004e1a:	4a23      	ldr	r2, [pc, #140]	; (8004ea8 <SM_SPI_MspInit+0x274>)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6293      	str	r3, [r2, #40]	; 0x28
  
  /* SPI_TX Init */
  hdma_sm_spi_tx.Instance = SM_SPI_TX_DMA_CHANNEL;
 8004e20:	4b23      	ldr	r3, [pc, #140]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e22:	4a24      	ldr	r2, [pc, #144]	; (8004eb4 <SM_SPI_MspInit+0x280>)
 8004e24:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_tx.Init.Request = SM_SPI_TX_DMA_REQUEST;
 8004e26:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e28:	220d      	movs	r2, #13
 8004e2a:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e2c:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e2e:	2210      	movs	r2, #16
 8004e30:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e32:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e38:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e3a:	2280      	movs	r2, #128	; 0x80
 8004e3c:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e3e:	4b1c      	ldr	r3, [pc, #112]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e44:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_tx.Init.Mode = DMA_NORMAL;
 8004e4a:	4b19      	ldr	r3, [pc, #100]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e50:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_tx) != HAL_OK)
 8004e56:	4816      	ldr	r0, [pc, #88]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e58:	f003 f8fa 	bl	8008050 <HAL_DMA_Init>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <SM_SPI_MspInit+0x232>
  {
    SM_Error_Handler();
 8004e62:	f7ff fd6b 	bl	800493c <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmatx,hdma_sm_spi_tx);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a11      	ldr	r2, [pc, #68]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54
 8004e6c:	4a10      	ldr	r2, [pc, #64]	; (8004eb0 <SM_SPI_MspInit+0x27c>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6293      	str	r3, [r2, #40]	; 0x28

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004e72:	2200      	movs	r2, #0
 8004e74:	2105      	movs	r1, #5
 8004e76:	2017      	movs	r0, #23
 8004e78:	f003 f8b3 	bl	8007fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004e7c:	2017      	movs	r0, #23
 8004e7e:	f003 f8cc 	bl	800801a <HAL_NVIC_EnableIRQ>
}
 8004e82:	bf00      	nop
 8004e84:	3738      	adds	r7, #56	; 0x38
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	48000400 	.word	0x48000400
 8004e94:	48001800 	.word	0x48001800
 8004e98:	48001400 	.word	0x48001400
 8004e9c:	48000c00 	.word	0x48000c00
 8004ea0:	48000800 	.word	0x48000800
 8004ea4:	10110000 	.word	0x10110000
 8004ea8:	2001873c 	.word	0x2001873c
 8004eac:	40020008 	.word	0x40020008
 8004eb0:	200189b0 	.word	0x200189b0
 8004eb4:	4002001c 	.word	0x4002001c

08004eb8 <SM_TIM_Init>:
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 4, 0);
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);  
}

void SM_TIM_Init(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
  SM_TIMx_CLK_ENABLE();
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <SM_TIM_Init+0x54>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <SM_TIM_Init+0x54>)
 8004ec4:	f043 0308 	orr.w	r3, r3, #8
 8004ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8004eca:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <SM_TIM_Init+0x54>)
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
  /* Set TIMx instance */
  hsm_tim.Instance = SM_TIMx;
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <SM_TIM_Init+0x58>)
 8004ed8:	4a0e      	ldr	r2, [pc, #56]	; (8004f14 <SM_TIM_Init+0x5c>)
 8004eda:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = (SystemCoreClock/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  hsm_tim.Init.Period            = 0xFFFFFFFF;
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <SM_TIM_Init+0x58>)
 8004ede:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee2:	60da      	str	r2, [r3, #12]
  hsm_tim.Init.Prescaler         = 0;
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <SM_TIM_Init+0x58>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	605a      	str	r2, [r3, #4]
  hsm_tim.Init.ClockDivision     = 0;
 8004eea:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <SM_TIM_Init+0x58>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	611a      	str	r2, [r3, #16]
  hsm_tim.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004ef0:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <SM_TIM_Init+0x58>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	609a      	str	r2, [r3, #8]
  hsm_tim.Init.RepetitionCounter = 0;
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <SM_TIM_Init+0x58>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&hsm_tim) != HAL_OK)
 8004efc:	4804      	ldr	r0, [pc, #16]	; (8004f10 <SM_TIM_Init+0x58>)
 8004efe:	f009 fe3d 	bl	800eb7c <HAL_TIM_Base_Init>
  {
    /* Initialization Error */
//    Error_Handler();
  }
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	200187fc 	.word	0x200187fc
 8004f14:	40000c00 	.word	0x40000c00

08004f18 <SM_TIM_Start>:

void SM_TIM_Start(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Start(&hsm_tim) != HAL_OK)
 8004f1c:	4802      	ldr	r0, [pc, #8]	; (8004f28 <SM_TIM_Start+0x10>)
 8004f1e:	f009 fe63 	bl	800ebe8 <HAL_TIM_Base_Start>
  {
    /* Starting Error */
//    Error_Handler();
  }
}
 8004f22:	bf00      	nop
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	200187fc 	.word	0x200187fc

08004f2c <SM_TIM_Stop>:

void SM_TIM_Stop(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Stop(&hsm_tim) != HAL_OK)
 8004f30:	4804      	ldr	r0, [pc, #16]	; (8004f44 <SM_TIM_Stop+0x18>)
 8004f32:	f009 fe83 	bl	800ec3c <HAL_TIM_Base_Stop>
  {
    /* Starting Error */
//    Error_Handler();
  }
  hsm_tim.Instance->CNT = 0;
 8004f36:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <SM_TIM_Stop+0x18>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	200187fc 	.word	0x200187fc

08004f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f4c:	bf00      	nop
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f56:	b480      	push	{r7}
 8004f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f5a:	e7fe      	b.n	8004f5a <HardFault_Handler+0x4>

08004f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f60:	e7fe      	b.n	8004f60 <MemManage_Handler+0x4>

08004f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f62:	b480      	push	{r7}
 8004f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f66:	e7fe      	b.n	8004f66 <BusFault_Handler+0x4>

08004f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f6c:	e7fe      	b.n	8004f6c <UsageFault_Handler+0x4>

08004f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	af00      	add	r7, sp, #0

}
 8004f72:	bf00      	nop
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
 HAL_IncTick();
 8004f80:	f001 fac2 	bl	8006508 <HAL_IncTick>
 osSystickHandler();
 8004f84:	f012 fb58 	bl	8017638 <osSystickHandler>
}
 8004f88:	bf00      	nop
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <PVD_PVM_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/
void PVD_PVM_IRQHandler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  HAL_PWREx_PVD_PVM_IRQHandler();
 8004f90:	f005 f98c 	bl	800a2ac <HAL_PWREx_PVD_PVM_IRQHandler>
}
 8004f94:	bf00      	nop
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line[0] interrupts.
  */
void EXTI0_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	f003 fcb3 	bl	8008908 <HAL_GPIO_EXTI_IRQHandler>
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
   HAL_EXTI_IRQHandler(&hts221_exti);  
 8004fac:	4806      	ldr	r0, [pc, #24]	; (8004fc8 <EXTI9_5_IRQHandler+0x20>)
 8004fae:	f003 fa9f 	bl	80084f0 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&ism330dhcx_exti);  
 8004fb2:	4806      	ldr	r0, [pc, #24]	; (8004fcc <EXTI9_5_IRQHandler+0x24>)
 8004fb4:	f003 fa9c 	bl	80084f0 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&iis2mdc_exti);
 8004fb8:	4805      	ldr	r0, [pc, #20]	; (8004fd0 <EXTI9_5_IRQHandler+0x28>)
 8004fba:	f003 fa99 	bl	80084f0 <HAL_EXTI_IRQHandler>
   HAL_GPIO_EXTI_IRQHandler(IIS3DWB_INT1_Pin);
 8004fbe:	2020      	movs	r0, #32
 8004fc0:	f003 fca2 	bl	8008908 <HAL_GPIO_EXTI_IRQHandler>
}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	2000fe90 	.word	0x2000fe90
 8004fcc:	20015e78 	.word	0x20015e78
 8004fd0:	2000fef8 	.word	0x2000fef8

08004fd4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hsm_i2c);
 8004fd8:	4802      	ldr	r0, [pc, #8]	; (8004fe4 <I2C2_EV_IRQHandler+0x10>)
 8004fda:	f003 fcad 	bl	8008938 <HAL_I2C_EV_IRQHandler>
}
 8004fde:	bf00      	nop
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200188cc 	.word	0x200188cc

08004fe8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hsm_i2c);
 8004fec:	4802      	ldr	r0, [pc, #8]	; (8004ff8 <I2C2_ER_IRQHandler+0x10>)
 8004fee:	f003 fcbd 	bl	800896c <HAL_I2C_ER_IRQHandler>
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200188cc 	.word	0x200188cc

08004ffc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
//  HAL_EXTI_IRQHandler(&iis3dwb_exti);
  HAL_EXTI_IRQHandler(&BC_exti);
 8005000:	4802      	ldr	r0, [pc, #8]	; (800500c <EXTI15_10_IRQHandler+0x10>)
 8005002:	f003 fa75 	bl	80084f0 <HAL_EXTI_IRQHandler>
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20016318 	.word	0x20016318

08005010 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI2_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&iis2dh_exti);
 8005014:	4802      	ldr	r0, [pc, #8]	; (8005020 <EXTI2_IRQHandler+0x10>)
 8005016:	f003 fa6b 	bl	80084f0 <HAL_EXTI_IRQHandler>
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	2000fed4 	.word	0x2000fed4

08005024 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005028:	4802      	ldr	r0, [pc, #8]	; (8005034 <OTG_FS_IRQHandler+0x10>)
 800502a:	f004 f966 	bl	80092fa <HAL_PCD_IRQHandler>
}
 800502e:	bf00      	nop
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20018a38 	.word	0x20018a38

08005038 <SDMMC1_IRQHandler>:

void SDMMC1_IRQHandler(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd1);
 800503c:	4802      	ldr	r0, [pc, #8]	; (8005048 <SDMMC1_IRQHandler+0x10>)
 800503e:	f007 fc91 	bl	800c964 <HAL_SD_IRQHandler>
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20015fc0 	.word	0x20015fc0

0800504c <STTS751_Set_State>:
    }      
  }
}

void STTS751_Set_State(SM_Sensor_State_t newState)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
  STTS751_Sensor_State = newState;
 8005056:	4a04      	ldr	r2, [pc, #16]	; (8005068 <STTS751_Set_State+0x1c>)
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	7013      	strb	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	20000035 	.word	0x20000035

0800506c <STTS751_Start>:
  STTS751_Init_Param.FS[0] = newFS1;
  STTS751_Init_Param.FS[0] = newFS2;
}

void STTS751_Start(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8005070:	2003      	movs	r0, #3
 8005072:	f7ff ffeb 	bl	800504c <STTS751_Set_State>
  osThreadResume(STTS751_Thread_Id);
 8005076:	4b03      	ldr	r3, [pc, #12]	; (8005084 <STTS751_Start+0x18>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f012 faf4 	bl	8017668 <osThreadResume>
}
 8005080:	bf00      	nop
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20018a34 	.word	0x20018a34

08005088 <STTS751_Stop>:

void STTS751_Stop(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_SUSPENDING);
 800508c:	2001      	movs	r0, #1
 800508e:	f7ff ffdd 	bl	800504c <STTS751_Set_State>
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <SystemInit>:
#define VECTOR_TABLE 0x08000000
#endif


void SystemInit(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800509c:	4b17      	ldr	r3, [pc, #92]	; (80050fc <SystemInit+0x64>)
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a2:	4a16      	ldr	r2, [pc, #88]	; (80050fc <SystemInit+0x64>)
 80050a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80050ac:	4b14      	ldr	r3, [pc, #80]	; (8005100 <SystemInit+0x68>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a13      	ldr	r2, [pc, #76]	; (8005100 <SystemInit+0x68>)
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80050b8:	4b11      	ldr	r3, [pc, #68]	; (8005100 <SystemInit+0x68>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80050be:	4b10      	ldr	r3, [pc, #64]	; (8005100 <SystemInit+0x68>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a0f      	ldr	r2, [pc, #60]	; (8005100 <SystemInit+0x68>)
 80050c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80050c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80050cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80050ce:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <SystemInit+0x68>)
 80050d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80050d6:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <SystemInit+0x68>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a09      	ldr	r2, [pc, #36]	; (8005100 <SystemInit+0x68>)
 80050dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <SystemInit+0x68>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <SystemInit+0x64>)
 80050ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050ee:	609a      	str	r2, [r3, #8]
#endif
}
 80050f0:	bf00      	nop
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	e000ed00 	.word	0xe000ed00
 8005100:	40021000 	.word	0x40021000

08005104 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f00d fb3d 	bl	801279a <USBD_LL_SetupStage>
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800513a:	78fa      	ldrb	r2, [r7, #3]
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	440b      	add	r3, r1
 8005148:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	4619      	mov	r1, r3
 8005152:	f00d fb6f 	bl	8012834 <USBD_LL_DataOutStage>
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	460b      	mov	r3, r1
 8005168:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005170:	78fa      	ldrb	r2, [r7, #3]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	3348      	adds	r3, #72	; 0x48
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	4619      	mov	r1, r3
 8005186:	f00d fbc6 	bl	8012916 <USBD_LL_DataInStage>
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80051a0:	4618      	mov	r0, r3
 80051a2:	f00d fcd9 	bl	8012b58 <USBD_LL_SOF>
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80051bc:	4618      	mov	r0, r3
 80051be:	f00d fc4f 	bl	8012a60 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80051c8:	2101      	movs	r1, #1
 80051ca:	4618      	mov	r0, r3
 80051cc:	f00d fc89 	bl	8012ae2 <USBD_LL_SetSpeed>
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80051e6:	4618      	mov	r0, r3
 80051e8:	f00d fc8b 	bl	8012b02 <USBD_LL_Suspend>
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005202:	4618      	mov	r0, r3
 8005204:	f00d fc92 	bl	8012b2c <USBD_LL_Resume>
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005222:	78fa      	ldrb	r2, [r7, #3]
 8005224:	4611      	mov	r1, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f00d fcbd 	bl	8012ba6 <USBD_LL_IsoOUTIncomplete>
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005246:	78fa      	ldrb	r2, [r7, #3]
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f00d fc9e 	bl	8012b8c <USBD_LL_IsoINIncomplete>
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005266:	4618      	mov	r0, r3
 8005268:	f00d fcaa 	bl	8012bc0 <USBD_LL_DevConnected>
}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005282:	4618      	mov	r0, r3
 8005284:	f00d fca7 	bl	8012bd6 <USBD_LL_DevDisconnected>
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	4608      	mov	r0, r1
 800529a:	4611      	mov	r1, r2
 800529c:	461a      	mov	r2, r3
 800529e:	4603      	mov	r3, r0
 80052a0:	70fb      	strb	r3, [r7, #3]
 80052a2:	460b      	mov	r3, r1
 80052a4:	70bb      	strb	r3, [r7, #2]
 80052a6:	4613      	mov	r3, r2
 80052a8:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80052b0:	78bb      	ldrb	r3, [r7, #2]
 80052b2:	883a      	ldrh	r2, [r7, #0]
 80052b4:	78f9      	ldrb	r1, [r7, #3]
 80052b6:	f004 fbe9 	bl	8009a8c <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052d6:	78fa      	ldrb	r2, [r7, #3]
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f004 fcb9 	bl	8009c52 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052fc:	78fa      	ldrb	r2, [r7, #3]
 80052fe:	4611      	mov	r1, r2
 8005300:	4618      	mov	r0, r3
 8005302:	f004 fd08 	bl	8009d16 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005322:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005328:	2b00      	cmp	r3, #0
 800532a:	da0b      	bge.n	8005344 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	333e      	adds	r3, #62	; 0x3e
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	e00b      	b.n	800535c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800535a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	4611      	mov	r1, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f004 fb5f 	bl	8009a42 <HAL_PCD_SetAddress>
  return USBD_OK; 
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	461a      	mov	r2, r3
 800539a:	460b      	mov	r3, r1
 800539c:	72fb      	strb	r3, [r7, #11]
 800539e:	4613      	mov	r3, r2
 80053a0:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80053a8:	893b      	ldrh	r3, [r7, #8]
 80053aa:	7af9      	ldrb	r1, [r7, #11]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	f004 fc13 	bl	8009bd8 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	461a      	mov	r2, r3
 80053c8:	460b      	mov	r3, r1
 80053ca:	72fb      	strb	r3, [r7, #11]
 80053cc:	4613      	mov	r3, r2
 80053ce:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80053d6:	893b      	ldrh	r3, [r7, #8]
 80053d8:	7af9      	ldrb	r1, [r7, #11]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	f004 fbbe 	bl	8009b5c <HAL_PCD_EP_Receive>
  return USBD_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 80053ea:	b590      	push	{r4, r7, lr}
 80053ec:	b087      	sub	sp, #28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	461a      	mov	r2, r3
 80053f6:	460b      	mov	r3, r1
 80053f8:	72fb      	strb	r3, [r7, #11]
 80053fa:	4613      	mov	r3, r2
 80053fc:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685c      	ldr	r4, [r3, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6898      	ldr	r0, [r3, #8]
 8005406:	893b      	ldrh	r3, [r7, #8]
 8005408:	7af9      	ldrb	r1, [r7, #11]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	47a0      	blx	r4
 800540e:	6178      	str	r0, [r7, #20]
  return ret;
 8005410:	697b      	ldr	r3, [r7, #20]
}
 8005412:	4618      	mov	r0, r3
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	bd90      	pop	{r4, r7, pc}

0800541a <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 800541a:	b590      	push	{r4, r7, lr}
 800541c:	b087      	sub	sp, #28
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	461a      	mov	r2, r3
 8005426:	460b      	mov	r3, r1
 8005428:	72fb      	strb	r3, [r7, #11]
 800542a:	4613      	mov	r3, r2
 800542c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681c      	ldr	r4, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6898      	ldr	r0, [r3, #8]
 8005436:	893b      	ldrh	r3, [r7, #8]
 8005438:	7af9      	ldrb	r1, [r7, #11]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	47a0      	blx	r4
 800543e:	6178      	str	r0, [r7, #20]
  return ret;
 8005440:	697b      	ldr	r3, [r7, #20]
}
 8005442:	4618      	mov	r0, r3
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	bd90      	pop	{r4, r7, pc}

0800544a <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005456:	f107 0208 	add.w	r2, r7, #8
 800545a:	2301      	movs	r3, #1
 800545c:	2110      	movs	r1, #16
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff ffc3 	bl	80053ea <iis3dwb_read_reg>
 8005464:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10f      	bne.n	800548c <iis3dwb_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	b2da      	uxtb	r2, r3
 8005474:	7a3b      	ldrb	r3, [r7, #8]
 8005476:	f362 0383 	bfi	r3, r2, #2, #2
 800547a:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 800547c:	f107 0208 	add.w	r2, r7, #8
 8005480:	2301      	movs	r3, #1
 8005482:	2110      	movs	r1, #16
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff ffc8 	bl	800541a <iis3dwb_write_reg>
 800548a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 800548c:	68fb      	ldr	r3, [r7, #12]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 80054a2:	f107 0208 	add.w	r2, r7, #8
 80054a6:	2301      	movs	r3, #1
 80054a8:	210b      	movs	r1, #11
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff ff9d 	bl	80053ea <iis3dwb_read_reg>
 80054b0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10f      	bne.n	80054d8 <iis3dwb_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	7a3b      	ldrb	r3, [r7, #8]
 80054c2:	f362 13c7 	bfi	r3, r2, #7, #1
 80054c6:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 80054c8:	f107 0208 	add.w	r2, r7, #8
 80054cc:	2301      	movs	r3, #1
 80054ce:	210b      	movs	r1, #11
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff ffa2 	bl	800541a <iis3dwb_write_reg>
 80054d6:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
 80054d8:	68fb      	ldr	r3, [r7, #12]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 80054ec:	2301      	movs	r3, #1
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	210f      	movs	r1, #15
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff ff79 	bl	80053ea <iis3dwb_read_reg>
 80054f8:	60f8      	str	r0, [r7, #12]
  return ret;
 80054fa:	68fb      	ldr	r3, [r7, #12]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005510:	f107 0208 	add.w	r2, r7, #8
 8005514:	2301      	movs	r3, #1
 8005516:	2112      	movs	r1, #18
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ff66 	bl	80053ea <iis3dwb_read_reg>
 800551e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10f      	bne.n	8005546 <iis3dwb_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	b2da      	uxtb	r2, r3
 800552e:	7a3b      	ldrb	r3, [r7, #8]
 8005530:	f362 0300 	bfi	r3, r2, #0, #1
 8005534:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005536:	f107 0208 	add.w	r2, r7, #8
 800553a:	2301      	movs	r3, #1
 800553c:	2112      	movs	r1, #18
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff ff6b 	bl	800541a <iis3dwb_write_reg>
 8005544:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005546:	68fb      	ldr	r3, [r7, #12]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800555c:	f107 0210 	add.w	r2, r7, #16
 8005560:	2301      	movs	r3, #1
 8005562:	2110      	movs	r1, #16
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff ff40 	bl	80053ea <iis3dwb_read_reg>
 800556a:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d111      	bne.n	8005596 <iis3dwb_xl_hp_path_on_out_set+0x46>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	09db      	lsrs	r3, r3, #7
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	b2da      	uxtb	r2, r3
 800557e:	7c3b      	ldrb	r3, [r7, #16]
 8005580:	f362 0341 	bfi	r3, r2, #1, #1
 8005584:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005586:	f107 0210 	add.w	r2, r7, #16
 800558a:	2301      	movs	r3, #1
 800558c:	2110      	movs	r1, #16
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff ff43 	bl	800541a <iis3dwb_write_reg>
 8005594:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d107      	bne.n	80055ac <iis3dwb_xl_hp_path_on_out_set+0x5c>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800559c:	f107 020c 	add.w	r2, r7, #12
 80055a0:	2301      	movs	r3, #1
 80055a2:	2117      	movs	r1, #23
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ff20 	bl	80053ea <iis3dwb_read_reg>
 80055aa:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d121      	bne.n	80055f6 <iis3dwb_xl_hp_path_on_out_set+0xa6>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	7b3b      	ldrb	r3, [r7, #12]
 80055be:	f362 0382 	bfi	r3, r2, #2, #1
 80055c2:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	7b3b      	ldrb	r3, [r7, #12]
 80055d0:	f362 1304 	bfi	r3, r2, #4, #1
 80055d4:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	7b3b      	ldrb	r3, [r7, #12]
 80055e0:	f362 1347 	bfi	r3, r2, #5, #3
 80055e4:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 80055e6:	f107 020c 	add.w	r2, r7, #12
 80055ea:	2301      	movs	r3, #1
 80055ec:	2117      	movs	r1, #23
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff ff13 	bl	800541a <iis3dwb_write_reg>
 80055f4:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80055f6:	697b      	ldr	r3, [r7, #20]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800560c:	f107 0208 	add.w	r2, r7, #8
 8005610:	2301      	movs	r3, #1
 8005612:	2113      	movs	r1, #19
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff fee8 	bl	80053ea <iis3dwb_read_reg>
 800561a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10f      	bne.n	8005642 <iis3dwb_i2c_interface_set+0x42>
    ctrl4_c.i2c_disable= (uint8_t)val;
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	b2da      	uxtb	r2, r3
 800562a:	7a3b      	ldrb	r3, [r7, #8]
 800562c:	f362 0382 	bfi	r3, r2, #2, #1
 8005630:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8005632:	f107 0208 	add.w	r2, r7, #8
 8005636:	2301      	movs	r3, #1
 8005638:	2113      	movs	r1, #19
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff feed 	bl	800541a <iis3dwb_write_reg>
 8005640:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005642:	68fb      	ldr	r3, [r7, #12]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
 8005656:	683a      	ldr	r2, [r7, #0]
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
 8005658:	2301      	movs	r3, #1
 800565a:	210d      	movs	r1, #13
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff fedc 	bl	800541a <iis3dwb_write_reg>
 8005662:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d107      	bne.n	800567a <iis3dwb_pin_int1_route_set+0x2e>
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	1c5a      	adds	r2, r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
 800566e:	2301      	movs	r3, #1
 8005670:	215e      	movs	r1, #94	; 0x5e
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fed1 	bl	800541a <iis3dwb_write_reg>
 8005678:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800567a:	68fb      	ldr	r3, [r7, #12]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8005690:	f107 020c 	add.w	r2, r7, #12
 8005694:	2301      	movs	r3, #1
 8005696:	2108      	movs	r1, #8
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fea6 	bl	80053ea <iis3dwb_read_reg>
 800569e:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <iis3dwb_fifo_watermark_set+0x38>
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 80056a6:	887b      	ldrh	r3, [r7, #2]
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 80056ac:	f107 0210 	add.w	r2, r7, #16
 80056b0:	2301      	movs	r3, #1
 80056b2:	2107      	movs	r1, #7
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff feb0 	bl	800541a <iis3dwb_write_reg>
 80056ba:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d111      	bne.n	80056e6 <iis3dwb_fifo_watermark_set+0x62>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 80056c2:	887b      	ldrh	r3, [r7, #2]
 80056c4:	0a1b      	lsrs	r3, r3, #8
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	7b3b      	ldrb	r3, [r7, #12]
 80056d0:	f362 0300 	bfi	r3, r2, #0, #1
 80056d4:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 80056d6:	f107 020c 	add.w	r2, r7, #12
 80056da:	2301      	movs	r3, #1
 80056dc:	2108      	movs	r1, #8
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fe9b 	bl	800541a <iis3dwb_write_reg>
 80056e4:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
 80056e6:	697b      	ldr	r3, [r7, #20]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 80056fc:	f107 0208 	add.w	r2, r7, #8
 8005700:	2301      	movs	r3, #1
 8005702:	2109      	movs	r1, #9
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fe70 	bl	80053ea <iis3dwb_read_reg>
 800570a:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10f      	bne.n	8005732 <iis3dwb_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	b2da      	uxtb	r2, r3
 800571a:	7a3b      	ldrb	r3, [r7, #8]
 800571c:	f362 0303 	bfi	r3, r2, #0, #4
 8005720:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8005722:	f107 0208 	add.w	r2, r7, #8
 8005726:	2301      	movs	r3, #1
 8005728:	2109      	movs	r1, #9
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff fe75 	bl	800541a <iis3dwb_write_reg>
 8005730:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8005748:	f107 0208 	add.w	r2, r7, #8
 800574c:	2301      	movs	r3, #1
 800574e:	210a      	movs	r1, #10
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff fe4a 	bl	80053ea <iis3dwb_read_reg>
 8005756:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10f      	bne.n	800577e <iis3dwb_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	b2da      	uxtb	r2, r3
 8005766:	7a3b      	ldrb	r3, [r7, #8]
 8005768:	f362 0302 	bfi	r3, r2, #0, #3
 800576c:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 800576e:	f107 0208 	add.w	r2, r7, #8
 8005772:	2301      	movs	r3, #1
 8005774:	210a      	movs	r1, #10
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fe4f 	bl	800541a <iis3dwb_write_reg>
 800577c:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 800577e:	68fb      	ldr	r3, [r7, #12]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 8005792:	4b31      	ldr	r3, [pc, #196]	; (8005858 <BSP_ADC1_Initialization+0xd0>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d152      	bne.n	8005840 <BSP_ADC1_Initialization+0xb8>
   
    /**Common config */
    ADC1_Handle.Instance = ADC1;
 800579a:	4b30      	ldr	r3, [pc, #192]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 800579c:	4a30      	ldr	r2, [pc, #192]	; (8005860 <BSP_ADC1_Initialization+0xd8>)
 800579e:	601a      	str	r2, [r3, #0]
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80057a0:	4b2e      	ldr	r3, [pc, #184]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	605a      	str	r2, [r3, #4]
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 80057a6:	4b2d      	ldr	r3, [pc, #180]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80057ac:	4b2b      	ldr	r3, [pc, #172]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	60da      	str	r2, [r3, #12]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 80057b2:	4b2a      	ldr	r3, [pc, #168]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	611a      	str	r2, [r3, #16]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80057b8:	4b28      	ldr	r3, [pc, #160]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057ba:	2204      	movs	r2, #4
 80057bc:	615a      	str	r2, [r3, #20]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 80057be:	4b27      	ldr	r3, [pc, #156]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	761a      	strb	r2, [r3, #24]
    ADC1_Handle.Init.ContinuousConvMode = ENABLE;
 80057c4:	4b25      	ldr	r3, [pc, #148]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	765a      	strb	r2, [r3, #25]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 80057ca:	4b24      	ldr	r3, [pc, #144]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	61da      	str	r2, [r3, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 80057d0:	4b22      	ldr	r3, [pc, #136]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 80057d6:	4b21      	ldr	r3, [pc, #132]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2020 	strb.w	r2, [r3, #32]
    ADC1_Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80057de:	4b1f      	ldr	r3, [pc, #124]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80057e4:	4b1d      	ldr	r3, [pc, #116]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 80057ea:	4b1c      	ldr	r3, [pc, #112]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80057f2:	4b1a      	ldr	r3, [pc, #104]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057f8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Oversampling enabled */
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 80057fa:	4b18      	ldr	r3, [pc, #96]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    
    ADC1_Handle.Init.Oversampling.RightBitShift         = ADC_RIGHTBITSHIFT_NONE;         /* Right shift of the oversampled summation */
 8005802:	4b16      	ldr	r3, [pc, #88]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 8005804:	2200      	movs	r2, #0
 8005806:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 8005808:	4b14      	ldr	r3, [pc, #80]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 800580a:	2200      	movs	r2, #0
 800580c:	645a      	str	r2, [r3, #68]	; 0x44
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 800580e:	4b13      	ldr	r3, [pc, #76]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 8005810:	2201      	movs	r2, #1
 8005812:	649a      	str	r2, [r3, #72]	; 0x48
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8005814:	4b11      	ldr	r3, [pc, #68]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 8005816:	2204      	movs	r2, #4
 8005818:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 800581a:	4810      	ldr	r0, [pc, #64]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 800581c:	f000 ffd6 	bl	80067cc <HAL_ADC_Init>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <BSP_ADC1_Initialization+0xa4>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8005826:	f06f 0303 	mvn.w	r3, #3
 800582a:	e011      	b.n	8005850 <BSP_ADC1_Initialization+0xc8>
    }

    /* ### Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 800582c:	217f      	movs	r1, #127	; 0x7f
 800582e:	480b      	ldr	r0, [pc, #44]	; (800585c <BSP_ADC1_Initialization+0xd4>)
 8005830:	f001 fd00 	bl	8007234 <HAL_ADCEx_Calibration_Start>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <BSP_ADC1_Initialization+0xb8>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800583a:	f06f 0303 	mvn.w	r3, #3
 800583e:	e007      	b.n	8005850 <BSP_ADC1_Initialization+0xc8>
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <BSP_ADC1_Initialization+0xd0>)
 8005842:	781a      	ldrb	r2, [r3, #0]
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	4313      	orrs	r3, r2
 8005848:	b2da      	uxtb	r2, r3
 800584a:	4b03      	ldr	r3, [pc, #12]	; (8005858 <BSP_ADC1_Initialization+0xd0>)
 800584c:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	200008d8 	.word	0x200008d8
 800585c:	20018e40 	.word	0x20018e40
 8005860:	50040000 	.word	0x50040000

08005864 <HAL_ADC_MspInit>:
* @brief  Initialize the ADC MSP.
* @param  hDfsdmFilter ADC handle
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 800586c:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <HAL_ADC_MspInit+0x40>)
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <HAL_ADC_MspInit+0x40>)
 8005872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <HAL_ADC_MspInit+0x40>)
 800587a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <HAL_ADC_MspInit+0x40>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800588e:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <HAL_ADC_MspInit+0x40>)
 8005890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8005898:	bf00      	nop
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40021000 	.word	0x40021000

080058a8 <BSP_PB_PWR_Init>:
* @brief  Initialize the Power button PWR.
* @param  None
* @retval None
*/
void BSP_PB_PWR_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <BSP_PB_PWR_Init+0x54>)
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	4a12      	ldr	r2, [pc, #72]	; (80058fc <BSP_PB_PWR_Init+0x54>)
 80058b4:	f043 0308 	orr.w	r3, r3, #8
 80058b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <BSP_PB_PWR_Init+0x54>)
 80058bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	683b      	ldr	r3, [r7, #0]
  
  /* Configure Button pin as input with External interrupt */
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 80058c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80058cc:	2302      	movs	r3, #2
 80058ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058d0:	2302      	movs	r3, #2
 80058d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058d4:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <BSP_PB_PWR_Init+0x58>)
 80058d6:	60bb      	str	r3, [r7, #8]
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4809      	ldr	r0, [pc, #36]	; (8005904 <BSP_PB_PWR_Init+0x5c>)
 80058de:	f002 fe37 	bl	8008550 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 80058e2:	2200      	movs	r2, #0
 80058e4:	210f      	movs	r1, #15
 80058e6:	2028      	movs	r0, #40	; 0x28
 80058e8:	f002 fb7b 	bl	8007fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 80058ec:	2028      	movs	r0, #40	; 0x28
 80058ee:	f002 fb94 	bl	800801a <HAL_NVIC_EnableIRQ>
  
}
 80058f2:	bf00      	nop
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40021000 	.word	0x40021000
 8005900:	10110000 	.word	0x10110000
 8005904:	48000c00 	.word	0x48000c00

08005908 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	460a      	mov	r2, r1
 8005912:	71fb      	strb	r3, [r7, #7]
 8005914:	4613      	mov	r3, r2
 8005916:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005918:	4b21      	ldr	r3, [pc, #132]	; (80059a0 <BSP_PB_Init+0x98>)
 800591a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591c:	4a20      	ldr	r2, [pc, #128]	; (80059a0 <BSP_PB_Init+0x98>)
 800591e:	f043 0310 	orr.w	r3, r3, #16
 8005922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005924:	4b1e      	ldr	r3, [pc, #120]	; (80059a0 <BSP_PB_Init+0x98>)
 8005926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005930:	79bb      	ldrb	r3, [r7, #6]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d112      	bne.n	800595c <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005936:	2301      	movs	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800593e:	2302      	movs	r3, #2
 8005940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005942:	2302      	movs	r3, #2
 8005944:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	4a16      	ldr	r2, [pc, #88]	; (80059a4 <BSP_PB_Init+0x9c>)
 800594a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594e:	f107 020c 	add.w	r2, r7, #12
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f002 fdfb 	bl	8008550 <HAL_GPIO_Init>
 800595a:	e01b      	b.n	8005994 <BSP_PB_Init+0x8c>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800595c:	2301      	movs	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005964:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <BSP_PB_Init+0xa0>)
 8005966:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	4a0e      	ldr	r2, [pc, #56]	; (80059a4 <BSP_PB_Init+0x9c>)
 800596c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005970:	f107 020c 	add.w	r2, r7, #12
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f002 fdea 	bl	8008550 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800597c:	2306      	movs	r3, #6
 800597e:	b25b      	sxtb	r3, r3
 8005980:	2200      	movs	r2, #0
 8005982:	210f      	movs	r1, #15
 8005984:	4618      	mov	r0, r3
 8005986:	f002 fb2c 	bl	8007fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800598a:	2306      	movs	r3, #6
 800598c:	b25b      	sxtb	r3, r3
 800598e:	4618      	mov	r0, r3
 8005990:	f002 fb43 	bl	800801a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;  
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40021000 	.word	0x40021000
 80059a4:	2000003c 	.word	0x2000003c
 80059a8:	10210000 	.word	0x10210000

080059ac <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10c      	bne.n	80059d6 <BSP_LED_Init+0x2a>
 80059bc:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <BSP_LED_Init+0x78>)
 80059be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c0:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <BSP_LED_Init+0x78>)
 80059c2:	f043 0310 	orr.w	r3, r3, #16
 80059c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059c8:	4b16      	ldr	r3, [pc, #88]	; (8005a24 <BSP_LED_Init+0x78>)
 80059ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	e00b      	b.n	80059ee <BSP_LED_Init+0x42>
 80059d6:	4b13      	ldr	r3, [pc, #76]	; (8005a24 <BSP_LED_Init+0x78>)
 80059d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059da:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <BSP_LED_Init+0x78>)
 80059dc:	f043 0308 	orr.w	r3, r3, #8
 80059e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059e2:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <BSP_LED_Init+0x78>)
 80059e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	4a0d      	ldr	r2, [pc, #52]	; (8005a28 <BSP_LED_Init+0x7c>)
 80059f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059f8:	2301      	movs	r3, #1
 80059fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005a00:	2302      	movs	r3, #2
 8005a02:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <BSP_LED_Init+0x80>)
 8005a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0c:	f107 0214 	add.w	r2, r7, #20
 8005a10:	4611      	mov	r1, r2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f002 fd9c 	bl	8008550 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3728      	adds	r7, #40	; 0x28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40021000 	.word	0x40021000
 8005a28:	080226d8 	.word	0x080226d8
 8005a2c:	20000040 	.word	0x20000040

08005a30 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <BSP_LED_On+0x2c>)
 8005a3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	4a06      	ldr	r2, [pc, #24]	; (8005a60 <BSP_LED_On+0x30>)
 8005a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f002 ff29 	bl	80088a4 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000040 	.word	0x20000040
 8005a60:	080226d8 	.word	0x080226d8

08005a64 <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	4a07      	ldr	r2, [pc, #28]	; (8005a90 <BSP_LED_Off+0x2c>)
 8005a72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	4a06      	ldr	r2, [pc, #24]	; (8005a94 <BSP_LED_Off+0x30>)
 8005a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4619      	mov	r1, r3
 8005a82:	f002 ff0f 	bl	80088a4 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000040 	.word	0x20000040
 8005a94:	080226d8 	.word	0x080226d8

08005a98 <BSP_BC_Init>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BSP_BC_Init(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  BC_InitCommon();
 8005a9c:	f000 f908 	bl	8005cb0 <BC_InitCommon>
  /* Init the related GPIOs */
  BC_IO_Init();
 8005aa0:	f000 f90c 	bl	8005cbc <BC_IO_Init>
}
 8005aa4:	bf00      	nop
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <BSP_BC_CmdSend>:
  * @param stbc02_SwCmd The command to be sent
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t tk = STBC02_GetTick();
 8005ab2:	f000 fd3b 	bl	800652c <HAL_GetTick>
 8005ab6:	60f8      	str	r0, [r7, #12]
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 8005ab8:	4a0f      	ldr	r2, [pc, #60]	; (8005af8 <BSP_BC_CmdSend+0x50>)
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	7013      	strb	r3, [r2, #0]
  stbc02_SwState = start;
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <BSP_BC_CmdSend+0x54>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	701a      	strb	r2, [r3, #0]
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8005ac4:	480e      	ldr	r0, [pc, #56]	; (8005b00 <BSP_BC_CmdSend+0x58>)
 8005ac6:	f009 f8e5 	bl	800ec94 <HAL_TIM_Base_Start_IT>
    
  while(stbc02_SwState != idle)
 8005aca:	e008      	b.n	8005ade <BSP_BC_CmdSend+0x36>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 8005acc:	f000 fd2e 	bl	800652c <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b0a      	cmp	r3, #10
 8005ad8:	d901      	bls.n	8005ade <BSP_BC_CmdSend+0x36>
    {
      return 1;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e007      	b.n	8005aee <BSP_BC_CmdSend+0x46>
  while(stbc02_SwState != idle)
 8005ade:	4b07      	ldr	r3, [pc, #28]	; (8005afc <BSP_BC_CmdSend+0x54>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f2      	bne.n	8005acc <BSP_BC_CmdSend+0x24>
    }
  }
    /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 8005ae6:	4806      	ldr	r0, [pc, #24]	; (8005b00 <BSP_BC_CmdSend+0x58>)
 8005ae8:	f009 f8fe 	bl	800ece8 <HAL_TIM_Base_Stop_IT>
  
  return 0;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200008e0 	.word	0x200008e0
 8005afc:	200008e1 	.word	0x200008e1
 8005b00:	20018ed4 	.word	0x20018ed4

08005b04 <BSP_BC_ChgPinHasToggled>:
  * @brief Call the function for measuring the toggling frequency of the charging pin of the STBC02
  * @note Must be called when the charging pin of the STBC02 has toggled
  * @retval None
  */
void BSP_BC_ChgPinHasToggled(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  BC_ChgPinFreqGet();
 8005b08:	f000 f9c6 	bl	8005e98 <BC_ChgPinFreqGet>
  stbc02_ChgPinToggledTime = STBC02_GetTick();
 8005b0c:	f000 fd0e 	bl	800652c <HAL_GetTick>
 8005b10:	4603      	mov	r3, r0
 8005b12:	4a02      	ldr	r2, [pc, #8]	; (8005b1c <BSP_BC_ChgPinHasToggled+0x18>)
 8005b14:	6013      	str	r3, [r2, #0]
}
 8005b16:	bf00      	nop
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200008e4 	.word	0x200008e4

08005b20 <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
   /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8005b24:	2002      	movs	r0, #2
 8005b26:	f7ff fe2f 	bl	8005788 <BSP_ADC1_Initialization>
  /* Configure the Injection Channel for Voltage ADC convertion */
  (void)Channel_ADC1_Init();
 8005b2a:	f000 faab 	bl	8006084 <Channel_ADC1_Init>
  return 0;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <BSP_BC_GetVoltage>:
* @param  mV pointer to destination variable
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_GetVoltage(uint32_t *mV)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t Voltage;
  
  if (HAL_ADCEx_InjectedStart(&ADC1_Handle) != HAL_OK)
 8005b3c:	4820      	ldr	r0, [pc, #128]	; (8005bc0 <BSP_BC_GetVoltage+0x8c>)
 8005b3e:	f001 fbd9 	bl	80072f4 <HAL_ADCEx_InjectedStart>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <BSP_BC_GetVoltage+0x1a>
  {
    /* Start Conversation Error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8005b48:	f06f 0304 	mvn.w	r3, #4
 8005b4c:	e034      	b.n	8005bb8 <BSP_BC_GetVoltage+0x84>
  }
  
  if (HAL_ADCEx_InjectedPollForConversion(&ADC1_Handle, 10) != HAL_OK)
 8005b4e:	210a      	movs	r1, #10
 8005b50:	481b      	ldr	r0, [pc, #108]	; (8005bc0 <BSP_BC_GetVoltage+0x8c>)
 8005b52:	f001 fc41 	bl	80073d8 <HAL_ADCEx_InjectedPollForConversion>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <BSP_BC_GetVoltage+0x2e>
  {
    /* End Of Conversion flag not set on time */
    return BSP_ERROR_CLOCK_FAILURE;
 8005b5c:	f06f 0308 	mvn.w	r3, #8
 8005b60:	e02a      	b.n	8005bb8 <BSP_BC_GetVoltage+0x84>
  }
  
  /* Check if the continuous conversion of regular channel is finished */
  if ((HAL_ADC_GetState(&ADC1_Handle) & HAL_ADC_STATE_INJ_EOC) == HAL_ADC_STATE_INJ_EOC)
 8005b62:	4817      	ldr	r0, [pc, #92]	; (8005bc0 <BSP_BC_GetVoltage+0x8c>)
 8005b64:	f001 f876 	bl	8006c54 <HAL_ADC_GetState>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b72:	d106      	bne.n	8005b82 <BSP_BC_GetVoltage+0x4e>
  {
    /*##-5- Get the converted value of regular channel  ########################*/
    uhADCxConvertedValue = HAL_ADCEx_InjectedGetValue(&ADC1_Handle,ADC_INJECTED_RANK_1);
 8005b74:	2108      	movs	r1, #8
 8005b76:	4812      	ldr	r0, [pc, #72]	; (8005bc0 <BSP_BC_GetVoltage+0x8c>)
 8005b78:	f001 fcbc 	bl	80074f4 <HAL_ADCEx_InjectedGetValue>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	4a11      	ldr	r2, [pc, #68]	; (8005bc4 <BSP_BC_GetVoltage+0x90>)
 8005b80:	6013      	str	r3, [r2, #0]
  }
  
  Voltage = (2700U * (uint32_t)uhADCxConvertedValue) / (4095U);  // [0-2.7V]
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <BSP_BC_GetVoltage+0x90>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f640 228c 	movw	r2, #2700	; 0xa8c
 8005b8a:	fb02 f203 	mul.w	r2, r2, r3
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <BSP_BC_GetVoltage+0x94>)
 8005b90:	fba3 1302 	umull	r1, r3, r3, r2
 8005b94:	1ad2      	subs	r2, r2, r3
 8005b96:	0852      	lsrs	r2, r2, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	0adb      	lsrs	r3, r3, #11
 8005b9c:	60fb      	str	r3, [r7, #12]
  Voltage = ((56U+100U)*Voltage)/100U;   // [0-4.2V]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	229c      	movs	r2, #156	; 0x9c
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <BSP_BC_GetVoltage+0x98>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	60fb      	str	r3, [r7, #12]
  
  *mV= Voltage;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	601a      	str	r2, [r3, #0]
  return BSP_ERROR_NONE;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20018e40 	.word	0x20018e40
 8005bc4:	200008dc 	.word	0x200008dc
 8005bc8:	00100101 	.word	0x00100101
 8005bcc:	51eb851f 	.word	0x51eb851f

08005bd0 <BSP_BC_GetVoltageAndLevel>:
* @param  uint32_t *Volt battery Voltage Value
* @param  uint32_t *BatteryLevel Battery % Level
* @retval BSP status
*/
int32_t BSP_BC_GetVoltageAndLevel(uint32_t *mV, uint32_t *BatteryLevel)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t Voltage = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60bb      	str	r3, [r7, #8]
  static int32_t VoltageWindowInit=0;
  static uint32_t WindowVoltage[WINDOW_VOLTAGE_DIM];
  static int32_t WindowPostion =0;
  
  (void)BSP_BC_GetVoltage(&Voltage);
 8005bde:	f107 0308 	add.w	r3, r7, #8
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff ffa6 	bl	8005b34 <BSP_BC_GetVoltage>
  
  /* We Filter the Voltage for understanding the Battery % Level */
  
  /* Insert the new Value */
  WindowVoltage[WindowPostion]= Voltage;
 8005be8:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <BSP_BC_GetVoltageAndLevel+0xd0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	492d      	ldr	r1, [pc, #180]	; (8005ca4 <BSP_BC_GetVoltageAndLevel+0xd4>)
 8005bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  WindowPostion++;  
 8005bf4:	4b2a      	ldr	r3, [pc, #168]	; (8005ca0 <BSP_BC_GetVoltageAndLevel+0xd0>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <BSP_BC_GetVoltageAndLevel+0xd0>)
 8005bfc:	6013      	str	r3, [r2, #0]
  
  /* Control if we have reached the end */    
  if(WindowPostion==WINDOW_VOLTAGE_DIM)
 8005bfe:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <BSP_BC_GetVoltageAndLevel+0xd0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d109      	bne.n	8005c1a <BSP_BC_GetVoltageAndLevel+0x4a>
  {
    if(VoltageWindowInit==0)
 8005c06:	4b28      	ldr	r3, [pc, #160]	; (8005ca8 <BSP_BC_GetVoltageAndLevel+0xd8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <BSP_BC_GetVoltageAndLevel+0x44>
    {
      VoltageWindowInit =1;
 8005c0e:	4b26      	ldr	r3, [pc, #152]	; (8005ca8 <BSP_BC_GetVoltageAndLevel+0xd8>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
    }
    WindowPostion     =0;
 8005c14:	4b22      	ldr	r3, [pc, #136]	; (8005ca0 <BSP_BC_GetVoltageAndLevel+0xd0>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
  }
  
  /* Make the mean of latest voltage values */
  if(VoltageWindowInit == 1)
 8005c1a:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <BSP_BC_GetVoltageAndLevel+0xd8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d114      	bne.n	8005c4c <BSP_BC_GetVoltageAndLevel+0x7c>
  {    
    int32_t Counter;   
    Voltage =0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60bb      	str	r3, [r7, #8]
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e009      	b.n	8005c40 <BSP_BC_GetVoltageAndLevel+0x70>
    {
      Voltage+=WindowVoltage[Counter];
 8005c2c:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <BSP_BC_GetVoltageAndLevel+0xd4>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4413      	add	r3, r2
 8005c38:	60bb      	str	r3, [r7, #8]
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b0f      	cmp	r3, #15
 8005c44:	ddf2      	ble.n	8005c2c <BSP_BC_GetVoltageAndLevel+0x5c>
    }
    Voltage>>=4;    
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	091b      	lsrs	r3, r3, #4
 8005c4a:	60bb      	str	r3, [r7, #8]
  }
  
  /* Limits check */
  if(Voltage > (uint32_t)MAX_VOLTAGE) 
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f241 0281 	movw	r2, #4225	; 0x1081
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d902      	bls.n	8005c5c <BSP_BC_GetVoltageAndLevel+0x8c>
  {
    Voltage= MAX_VOLTAGE;
 8005c56:	f241 0381 	movw	r3, #4225	; 0x1081
 8005c5a:	60bb      	str	r3, [r7, #8]
  }   
  if(Voltage < (uint32_t)MIN_VOLTAGE) 
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f640 42b1 	movw	r2, #3249	; 0xcb1
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d802      	bhi.n	8005c6c <BSP_BC_GetVoltageAndLevel+0x9c>
  {
    Voltage= MIN_VOLTAGE;
 8005c66:	f640 43b2 	movw	r3, #3250	; 0xcb2
 8005c6a:	60bb      	str	r3, [r7, #8]
  }
  
  *BatteryLevel= (((Voltage - (uint32_t)MIN_VOLTAGE) * 100U)/(uint32_t)(MAX_VOLTAGE - MIN_VOLTAGE));
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2264      	movs	r2, #100	; 0x64
 8005c70:	fb02 f303 	mul.w	r3, r2, r3
 8005c74:	f5a3 239e 	sub.w	r3, r3, #323584	; 0x4f000
 8005c78:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8005c7c:	4a0b      	ldr	r2, [pc, #44]	; (8005cac <BSP_BC_GetVoltageAndLevel+0xdc>)
 8005c7e:	fba2 1203 	umull	r1, r2, r2, r3
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	4413      	add	r3, r2
 8005c88:	0a5a      	lsrs	r2, r3, #9
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	601a      	str	r2, [r3, #0]
  *mV = Voltage;
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	601a      	str	r2, [r3, #0]
  
  return BSP_ERROR_NONE;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	2000093c 	.word	0x2000093c
 8005ca4:	20000940 	.word	0x20000940
 8005ca8:	20000980 	.word	0x20000980
 8005cac:	0cdd9aa7 	.word	0x0cdd9aa7

08005cb0 <BC_InitCommon>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BC_InitCommon(void)
{  
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* Init the time base */
  BC_TIMx_Init();
 8005cb4:	f000 f938 	bl	8005f28 <BC_TIMx_Init>
}
 8005cb8:	bf00      	nop
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <BC_IO_Init>:
/**
  * @brief  Initializes the GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_Init(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  BC_IO_SW_SEL_Init();
 8005cc0:	f000 f802 	bl	8005cc8 <BC_IO_SW_SEL_Init>
}
 8005cc4:	bf00      	nop
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <BC_IO_SW_SEL_Init>:
/**
  * @brief  Initializes the SW_SEL GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_SW_SEL_Init(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005cce:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <BC_IO_SW_SEL_Init+0x4c>)
 8005cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd2:	4a10      	ldr	r2, [pc, #64]	; (8005d14 <BC_IO_SW_SEL_Init+0x4c>)
 8005cd4:	f043 0320 	orr.w	r3, r3, #32
 8005cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cda:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <BC_IO_SW_SEL_Init+0x4c>)
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 8005ce6:	2340      	movs	r3, #64	; 0x40
 8005ce8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cea:	2301      	movs	r3, #1
 8005cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	613b      	str	r3, [r7, #16]

  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2140      	movs	r1, #64	; 0x40
 8005cfa:	4807      	ldr	r0, [pc, #28]	; (8005d18 <BC_IO_SW_SEL_Init+0x50>)
 8005cfc:	f002 fdd2 	bl	80088a4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	4804      	ldr	r0, [pc, #16]	; (8005d18 <BC_IO_SW_SEL_Init+0x50>)
 8005d06:	f002 fc23 	bl	8008550 <HAL_GPIO_Init>
}
 8005d0a:	bf00      	nop
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40021000 	.word	0x40021000
 8005d18:	48001400 	.word	0x48001400

08005d1c <BC_CmdMng>:
  * @brief Single wire command manager for the STBC02
  * @note This function have to be called every 5 us
  * @retval None
  */
void BC_CmdMng(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  static uint16_t TIMx_Pulse = 0;                           //! Actual timer pulse number
  static uint16_t TIMx_PulseTCS = 0;                        //! Timer pulse number to change state
  static stbc02_SwState_TypeDef stbc02_sw_state_prv = idle; //! Previous state
  static uint8_t CmdPulse = 0;                              //! Cmd pulse number

  TIMx_Pulse++;
 8005d20:	4b56      	ldr	r3, [pc, #344]	; (8005e7c <BC_CmdMng+0x160>)
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	4b54      	ldr	r3, [pc, #336]	; (8005e7c <BC_CmdMng+0x160>)
 8005d2a:	801a      	strh	r2, [r3, #0]
  switch (stbc02_SwState)
 8005d2c:	4b54      	ldr	r3, [pc, #336]	; (8005e80 <BC_CmdMng+0x164>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b06      	cmp	r3, #6
 8005d32:	f200 809e 	bhi.w	8005e72 <BC_CmdMng+0x156>
 8005d36:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <BC_CmdMng+0x20>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005e73 	.word	0x08005e73
 8005d40:	08005d59 	.word	0x08005d59
 8005d44:	08005d7d 	.word	0x08005d7d
 8005d48:	08005da1 	.word	0x08005da1
 8005d4c:	08005dc5 	.word	0x08005dc5
 8005d50:	08005de9 	.word	0x08005de9
 8005d54:	08005e0d 	.word	0x08005e0d
  {
  case idle:
    break;
  case start:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005d58:	2140      	movs	r1, #64	; 0x40
 8005d5a:	484a      	ldr	r0, [pc, #296]	; (8005e84 <BC_CmdMng+0x168>)
 8005d5c:	f002 fdba 	bl	80088d4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005d60:	4b46      	ldr	r3, [pc, #280]	; (8005e7c <BC_CmdMng+0x160>)
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	3346      	adds	r3, #70	; 0x46
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	4b47      	ldr	r3, [pc, #284]	; (8005e88 <BC_CmdMng+0x16c>)
 8005d6a:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005d6c:	4b44      	ldr	r3, [pc, #272]	; (8005e80 <BC_CmdMng+0x164>)
 8005d6e:	781a      	ldrb	r2, [r3, #0]
 8005d70:	4b46      	ldr	r3, [pc, #280]	; (8005e8c <BC_CmdMng+0x170>)
 8005d72:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005d74:	4b42      	ldr	r3, [pc, #264]	; (8005e80 <BC_CmdMng+0x164>)
 8005d76:	2206      	movs	r2, #6
 8005d78:	701a      	strb	r2, [r3, #0]
    break;
 8005d7a:	e07d      	b.n	8005e78 <BC_CmdMng+0x15c>
  case pulse_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005d7c:	2140      	movs	r1, #64	; 0x40
 8005d7e:	4841      	ldr	r0, [pc, #260]	; (8005e84 <BC_CmdMng+0x168>)
 8005d80:	f002 fda8 	bl	80088d4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005d84:	4b3d      	ldr	r3, [pc, #244]	; (8005e7c <BC_CmdMng+0x160>)
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	4b3e      	ldr	r3, [pc, #248]	; (8005e88 <BC_CmdMng+0x16c>)
 8005d8e:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005d90:	4b3b      	ldr	r3, [pc, #236]	; (8005e80 <BC_CmdMng+0x164>)
 8005d92:	781a      	ldrb	r2, [r3, #0]
 8005d94:	4b3d      	ldr	r3, [pc, #244]	; (8005e8c <BC_CmdMng+0x170>)
 8005d96:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005d98:	4b39      	ldr	r3, [pc, #228]	; (8005e80 <BC_CmdMng+0x164>)
 8005d9a:	2206      	movs	r2, #6
 8005d9c:	701a      	strb	r2, [r3, #0]
    break;
 8005d9e:	e06b      	b.n	8005e78 <BC_CmdMng+0x15c>
  case pulse_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005da0:	2140      	movs	r1, #64	; 0x40
 8005da2:	4838      	ldr	r0, [pc, #224]	; (8005e84 <BC_CmdMng+0x168>)
 8005da4:	f002 fd96 	bl	80088d4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005da8:	4b34      	ldr	r3, [pc, #208]	; (8005e7c <BC_CmdMng+0x160>)
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	3314      	adds	r3, #20
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	4b35      	ldr	r3, [pc, #212]	; (8005e88 <BC_CmdMng+0x16c>)
 8005db2:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005db4:	4b32      	ldr	r3, [pc, #200]	; (8005e80 <BC_CmdMng+0x164>)
 8005db6:	781a      	ldrb	r2, [r3, #0]
 8005db8:	4b34      	ldr	r3, [pc, #208]	; (8005e8c <BC_CmdMng+0x170>)
 8005dba:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005dbc:	4b30      	ldr	r3, [pc, #192]	; (8005e80 <BC_CmdMng+0x164>)
 8005dbe:	2206      	movs	r2, #6
 8005dc0:	701a      	strb	r2, [r3, #0]
    break;
 8005dc2:	e059      	b.n	8005e78 <BC_CmdMng+0x15c>
  case stop_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005dc4:	2140      	movs	r1, #64	; 0x40
 8005dc6:	482f      	ldr	r0, [pc, #188]	; (8005e84 <BC_CmdMng+0x168>)
 8005dc8:	f002 fd84 	bl	80088d4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005dcc:	4b2b      	ldr	r3, [pc, #172]	; (8005e7c <BC_CmdMng+0x160>)
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	3314      	adds	r3, #20
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <BC_CmdMng+0x16c>)
 8005dd6:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005dd8:	4b29      	ldr	r3, [pc, #164]	; (8005e80 <BC_CmdMng+0x164>)
 8005dda:	781a      	ldrb	r2, [r3, #0]
 8005ddc:	4b2b      	ldr	r3, [pc, #172]	; (8005e8c <BC_CmdMng+0x170>)
 8005dde:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005de0:	4b27      	ldr	r3, [pc, #156]	; (8005e80 <BC_CmdMng+0x164>)
 8005de2:	2206      	movs	r2, #6
 8005de4:	701a      	strb	r2, [r3, #0]
    break;
 8005de6:	e047      	b.n	8005e78 <BC_CmdMng+0x15c>
  case stop_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005de8:	2140      	movs	r1, #64	; 0x40
 8005dea:	4826      	ldr	r0, [pc, #152]	; (8005e84 <BC_CmdMng+0x168>)
 8005dec:	f002 fd72 	bl	80088d4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005df0:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <BC_CmdMng+0x160>)
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	3364      	adds	r3, #100	; 0x64
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	4b23      	ldr	r3, [pc, #140]	; (8005e88 <BC_CmdMng+0x16c>)
 8005dfa:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005dfc:	4b20      	ldr	r3, [pc, #128]	; (8005e80 <BC_CmdMng+0x164>)
 8005dfe:	781a      	ldrb	r2, [r3, #0]
 8005e00:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <BC_CmdMng+0x170>)
 8005e02:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005e04:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <BC_CmdMng+0x164>)
 8005e06:	2206      	movs	r2, #6
 8005e08:	701a      	strb	r2, [r3, #0]
    break;
 8005e0a:	e035      	b.n	8005e78 <BC_CmdMng+0x15c>
  case wait:
    if ( TIMx_Pulse > TIMx_PulseTCS )
 8005e0c:	4b1b      	ldr	r3, [pc, #108]	; (8005e7c <BC_CmdMng+0x160>)
 8005e0e:	881a      	ldrh	r2, [r3, #0]
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <BC_CmdMng+0x16c>)
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d92e      	bls.n	8005e76 <BC_CmdMng+0x15a>
    {
      if ( stbc02_sw_state_prv == stop_h )
 8005e18:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <BC_CmdMng+0x170>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b05      	cmp	r3, #5
 8005e1e:	d10b      	bne.n	8005e38 <BC_CmdMng+0x11c>
      {
        CmdPulse = 0;
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <BC_CmdMng+0x174>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
        stbc02_SwState = idle;
 8005e26:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <BC_CmdMng+0x164>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2140      	movs	r1, #64	; 0x40
 8005e30:	4814      	ldr	r0, [pc, #80]	; (8005e84 <BC_CmdMng+0x168>)
 8005e32:	f002 fd37 	bl	80088a4 <HAL_GPIO_WritePin>
        }
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
        __NOP();
      }
    }
    break;
 8005e36:	e01e      	b.n	8005e76 <BC_CmdMng+0x15a>
        if ( stbc02_sw_state_prv == pulse_h )
 8005e38:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <BC_CmdMng+0x170>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d110      	bne.n	8005e62 <BC_CmdMng+0x146>
          CmdPulse++;
 8005e40:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <BC_CmdMng+0x174>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <BC_CmdMng+0x174>)
 8005e4a:	701a      	strb	r2, [r3, #0]
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005e4c:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <BC_CmdMng+0x174>)
 8005e4e:	781a      	ldrb	r2, [r3, #0]
 8005e50:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <BC_CmdMng+0x178>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d203      	bcs.n	8005e60 <BC_CmdMng+0x144>
            stbc02_sw_state_prv = start;
 8005e58:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <BC_CmdMng+0x170>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e000      	b.n	8005e62 <BC_CmdMng+0x146>
            __NOP();
 8005e60:	bf00      	nop
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
 8005e62:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <BC_CmdMng+0x170>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <BC_CmdMng+0x164>)
 8005e6c:	701a      	strb	r2, [r3, #0]
        __NOP();
 8005e6e:	bf00      	nop
    break;
 8005e70:	e001      	b.n	8005e76 <BC_CmdMng+0x15a>
  default:
    break;
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <BC_CmdMng+0x15c>
    break;
 8005e76:	bf00      	nop
  }
}
 8005e78:	bf00      	nop
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000984 	.word	0x20000984
 8005e80:	200008e1 	.word	0x200008e1
 8005e84:	48001400 	.word	0x48001400
 8005e88:	20000986 	.word	0x20000986
 8005e8c:	20000988 	.word	0x20000988
 8005e90:	20000989 	.word	0x20000989
 8005e94:	200008e0 	.word	0x200008e0

08005e98 <BC_ChgPinFreqGet>:
* @brief Measure the toggling frequency of the charging pin of the STBC02
* @note This function works with 1 ms as time base
* @retval None
*/
void BC_ChgPinFreqGet(void)
{  
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  if(uhCaptureIndex == 0U)
 8005e9c:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <BC_ChgPinFreqGet+0x7c>)
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d107      	bne.n	8005eb4 <BC_ChgPinFreqGet+0x1c>
  {
    /* Get the 1st Input Capture value */
    uwIC2Value1 = HAL_GetTick();
 8005ea4:	f000 fb42 	bl	800652c <HAL_GetTick>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <BC_ChgPinFreqGet+0x80>)
 8005eac:	6013      	str	r3, [r2, #0]
    uhCaptureIndex = 1;
 8005eae:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <BC_ChgPinFreqGet+0x7c>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	801a      	strh	r2, [r3, #0]
  }
   if(uhCaptureIndex == 1U)
 8005eb4:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <BC_ChgPinFreqGet+0x7c>)
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d128      	bne.n	8005f0e <BC_ChgPinFreqGet+0x76>
  {
    /* Get the 2nd Input Capture value */
    uwIC2Value2 = HAL_GetTick();
 8005ebc:	f000 fb36 	bl	800652c <HAL_GetTick>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	4a16      	ldr	r2, [pc, #88]	; (8005f1c <BC_ChgPinFreqGet+0x84>)
 8005ec4:	6013      	str	r3, [r2, #0]
    
    /* Capture computation */
    if (uwIC2Value2 > uwIC2Value1)
 8005ec6:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <BC_ChgPinFreqGet+0x84>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <BC_ChgPinFreqGet+0x80>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d907      	bls.n	8005ee2 <BC_ChgPinFreqGet+0x4a>
    {
      uwDiffCapture = (uwIC2Value2 - uwIC2Value1); 
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <BC_ChgPinFreqGet+0x84>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <BC_ChgPinFreqGet+0x80>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <BC_ChgPinFreqGet+0x88>)
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	e006      	b.n	8005ef0 <BC_ChgPinFreqGet+0x58>
    }
    else
    {
      uwDiffCapture = ((0xFFFFFFFF - uwIC2Value1) + uwIC2Value2) + 1U;
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <BC_ChgPinFreqGet+0x84>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <BC_ChgPinFreqGet+0x80>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	4a0c      	ldr	r2, [pc, #48]	; (8005f20 <BC_ChgPinFreqGet+0x88>)
 8005eee:	6013      	str	r3, [r2, #0]
    }
    
    if (uwDiffCapture != 0U)
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <BC_ChgPinFreqGet+0x88>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <BC_ChgPinFreqGet+0x76>
    {
      /* Frequency computation */      
      uwFrequency = 10000U / uwDiffCapture;
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <BC_ChgPinFreqGet+0x88>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f04:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <BC_ChgPinFreqGet+0x8c>)
 8005f06:	6013      	str	r3, [r2, #0]
      uhCaptureIndex = 0U;
 8005f08:	4b02      	ldr	r3, [pc, #8]	; (8005f14 <BC_ChgPinFreqGet+0x7c>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8005f0e:	bf00      	nop
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000934 	.word	0x20000934
 8005f18:	20000928 	.word	0x20000928
 8005f1c:	2000092c 	.word	0x2000092c
 8005f20:	20000930 	.word	0x20000930
 8005f24:	20000938 	.word	0x20000938

08005f28 <BC_TIMx_Init>:
/**
  * @brief  Initializes the used timer
  * @retval None
  */
void BC_TIMx_Init(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f2e:	463b      	mov	r3, r7
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	609a      	str	r2, [r3, #8]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005f38:	f004 fffa 	bl	800af30 <HAL_RCC_GetPCLK1Freq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <BC_TIMx_Init+0xb0>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <BC_TIMx_Init+0x26>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <BC_TIMx_Init+0x28>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	fb02 f303 	mul.w	r3, r2, r3
 8005f54:	613b      	str	r3, [r7, #16]
  uint32_t prescaler = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
  uint32_t period;
  
  do
  {
    prescaler++;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	617b      	str	r3, [r7, #20]
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fa faf3 	bl	8000554 <__aeabi_ui2d>
 8005f6e:	a318      	add	r3, pc, #96	; (adr r3, 8005fd0 <BC_TIMx_Init+0xa8>)
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f7fa fb68 	bl	8000648 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	4619      	mov	r1, r3
 8005f80:	f7fa fe3a 	bl	8000bf8 <__aeabi_d2uiz>
 8005f84:	4603      	mov	r3, r0
 8005f86:	60fb      	str	r3, [r7, #12]
  } while (period > 65535U);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8e:	d2e4      	bcs.n	8005f5a <BC_TIMx_Init+0x32>

  hstbc02_UsedTim.Instance = STBC02_USED_TIM;
 8005f90:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <BC_TIMx_Init+0xb4>)
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <BC_TIMx_Init+0xb8>)
 8005f94:	601a      	str	r2, [r3, #0]
  hstbc02_UsedTim.Init.Prescaler = (prescaler-1U);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	4a10      	ldr	r2, [pc, #64]	; (8005fdc <BC_TIMx_Init+0xb4>)
 8005f9c:	6053      	str	r3, [r2, #4]
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f9e:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <BC_TIMx_Init+0xb4>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	609a      	str	r2, [r3, #8]
  hstbc02_UsedTim.Init.Period = period;
 8005fa4:	4a0d      	ldr	r2, [pc, #52]	; (8005fdc <BC_TIMx_Init+0xb4>)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60d3      	str	r3, [r2, #12]
#if USE_TIM_AUTORELOAD_PRELOAD
  hstbc02_UsedTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
#endif //USE_TIM_AUTORELOAD_PRELOAD
  
  HAL_TIM_BC_MspInit(&hstbc02_UsedTim);    
 8005faa:	480c      	ldr	r0, [pc, #48]	; (8005fdc <BC_TIMx_Init+0xb4>)
 8005fac:	f000 f81a 	bl	8005fe4 <HAL_TIM_BC_MspInit>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 8005fb0:	480a      	ldr	r0, [pc, #40]	; (8005fdc <BC_TIMx_Init+0xb4>)
 8005fb2:	f008 fde3 	bl	800eb7c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60bb      	str	r3, [r7, #8]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4806      	ldr	r0, [pc, #24]	; (8005fdc <BC_TIMx_Init+0xb4>)
 8005fc4:	f009 f892 	bl	800f0ec <HAL_TIMEx_MasterConfigSynchronization>
}
 8005fc8:	bf00      	nop
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	88e368f1 	.word	0x88e368f1
 8005fd4:	3ed4f8b5 	.word	0x3ed4f8b5
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	20018ed4 	.word	0x20018ed4
 8005fe0:	40001400 	.word	0x40001400

08005fe4 <HAL_TIM_BC_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_BC_MspInit(TIM_HandleTypeDef *htim)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]

  if(htim->Instance==STBC02_USED_TIM)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a0d      	ldr	r2, [pc, #52]	; (8006028 <HAL_TIM_BC_MspInit+0x44>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d113      	bne.n	800601e <HAL_TIM_BC_MspInit+0x3a>
  {
    /* STBC02_USED_TIM clock enable */
    STBC02_USED_TIM_CLK_ENABLE();
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <HAL_TIM_BC_MspInit+0x48>)
 8005ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffa:	4a0c      	ldr	r2, [pc, #48]	; (800602c <HAL_TIM_BC_MspInit+0x48>)
 8005ffc:	f043 0320 	orr.w	r3, r3, #32
 8006000:	6593      	str	r3, [r2, #88]	; 0x58
 8006002:	4b0a      	ldr	r3, [pc, #40]	; (800602c <HAL_TIM_BC_MspInit+0x48>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]

    /* STBC02_USED_TIM interrupt Init */
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 800600e:	2200      	movs	r2, #0
 8006010:	2103      	movs	r1, #3
 8006012:	2037      	movs	r0, #55	; 0x37
 8006014:	f001 ffe5 	bl	8007fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 8006018:	2037      	movs	r0, #55	; 0x37
 800601a:	f001 fffe 	bl	800801a <HAL_NVIC_EnableIRQ>
  }
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40001400 	.word	0x40001400
 800602c:	40021000 	.word	0x40021000

08006030 <HAL_ADC_BC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param BC_AdcHandle ADC handle
  * @retval None
  */
void HAL_ADC_BC_MspInit()
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	609a      	str	r2, [r3, #8]
 8006040:	60da      	str	r2, [r3, #12]
 8006042:	611a      	str	r2, [r3, #16]
  
  /* STBC02_USED_ADC GPIO Configuration */
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8006044:	4b0d      	ldr	r3, [pc, #52]	; (800607c <HAL_ADC_BC_MspInit+0x4c>)
 8006046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006048:	4a0c      	ldr	r2, [pc, #48]	; (800607c <HAL_ADC_BC_MspInit+0x4c>)
 800604a:	f043 0304 	orr.w	r3, r3, #4
 800604e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <HAL_ADC_BC_MspInit+0x4c>)
 8006052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	603b      	str	r3, [r7, #0]
 800605a:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 800605c:	2310      	movs	r3, #16
 800605e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8006060:	230b      	movs	r3, #11
 8006062:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8006068:	1d3b      	adds	r3, r7, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4804      	ldr	r0, [pc, #16]	; (8006080 <HAL_ADC_BC_MspInit+0x50>)
 800606e:	f002 fa6f 	bl	8008550 <HAL_GPIO_Init>
  
}
 8006072:	bf00      	nop
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40021000 	.word	0x40021000
 8006080:	48000800 	.word	0x48000800

08006084 <Channel_ADC1_Init>:
  * @brief  Initializes the used ADC
  * @retval 0 in case of success
  * @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08e      	sub	sp, #56	; 0x38
 8006088:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800608a:	463b      	mov	r3, r7
 800608c:	2234      	movs	r2, #52	; 0x34
 800608e:	2100      	movs	r1, #0
 8006090:	4618      	mov	r0, r3
 8006092:	f017 feff 	bl	801de94 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 8006096:	481e      	ldr	r0, [pc, #120]	; (8006110 <Channel_ADC1_Init+0x8c>)
 8006098:	f000 fddc 	bl	8006c54 <HAL_ADC_GetState>
 800609c:	6378      	str	r0, [r7, #52]	; 0x34
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <Channel_ADC1_Init+0x30>
  {
    (void)HAL_ADC_Stop(&ADC1_Handle);
 80060a8:	4819      	ldr	r0, [pc, #100]	; (8006110 <Channel_ADC1_Init+0x8c>)
 80060aa:	f000 fd78 	bl	8006b9e <HAL_ADC_Stop>
    ADC_stopped=1;
 80060ae:	4b19      	ldr	r3, [pc, #100]	; (8006114 <Channel_ADC1_Init+0x90>)
 80060b0:	2201      	movs	r2, #1
 80060b2:	701a      	strb	r2, [r3, #0]
  }

    
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80060b4:	4b18      	ldr	r3, [pc, #96]	; (8006118 <Channel_ADC1_Init+0x94>)
 80060b6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80060b8:	2308      	movs	r3, #8
 80060ba:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80060bc:	2307      	movs	r3, #7
 80060be:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80060c0:	237f      	movs	r3, #127	; 0x7f
 80060c2:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80060c4:	2304      	movs	r3, #4
 80060c6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80060cc:	2301      	movs	r3, #1
 80060ce:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	773b      	strb	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	777b      	strb	r3, [r7, #29]
  sConfigInjected.QueueInjectedContext = DISABLE;
 80060d8:	2300      	movs	r3, #0
 80060da:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80060dc:	2300      	movs	r3, #0
 80060de:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 80060e4:	2300      	movs	r3, #0
 80060e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  
  HAL_ADC_BC_MspInit();
 80060ea:	f7ff ffa1 	bl	8006030 <HAL_ADC_BC_MspInit>
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 80060ee:	463b      	mov	r3, r7
 80060f0:	4619      	mov	r1, r3
 80060f2:	4807      	ldr	r0, [pc, #28]	; (8006110 <Channel_ADC1_Init+0x8c>)
 80060f4:	f001 fa68 	bl	80075c8 <HAL_ADCEx_InjectedConfigChannel>
    
  if (ADC_stopped == 1U)
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <Channel_ADC1_Init+0x90>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d102      	bne.n	8006106 <Channel_ADC1_Init+0x82>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 8006100:	4803      	ldr	r0, [pc, #12]	; (8006110 <Channel_ADC1_Init+0x8c>)
 8006102:	f000 fce9 	bl	8006ad8 <HAL_ADC_Start>
  }
  
  return 0;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3738      	adds	r7, #56	; 0x38
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20018e40 	.word	0x20018e40
 8006114:	2000098a 	.word	0x2000098a
 8006118:	36902000 	.word	0x36902000

0800611c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  if (htim->Instance == STBC02_USED_TIM)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a04      	ldr	r2, [pc, #16]	; (800613c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    BC_CmdMng();
 800612e:	f7ff fdf5 	bl	8005d1c <BC_CmdMng>
  }
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40001400 	.word	0x40001400

08006140 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  htim : hadc handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	7f1b      	ldrb	r3, [r3, #28]
 800614c:	2b04      	cmp	r3, #4
 800614e:	d101      	bne.n	8006154 <HAL_TIM_IC_CaptureCallback+0x14>
  {
    BSP_BC_ChgPinHasToggled();
 8006150:	f7ff fcd8 	bl	8005b04 <BSP_BC_ChgPinHasToggled>
  }
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <TIM7_IRQHandler>:
 */
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 8006160:	4802      	ldr	r0, [pc, #8]	; (800616c <TIM7_IRQHandler+0x10>)
 8006162:	f008 fdec 	bl	800ed3e <HAL_TIM_IRQHandler>
}
 8006166:	bf00      	nop
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20018ed4 	.word	0x20018ed4

08006170 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimBCHandle);
 8006174:	4802      	ldr	r0, [pc, #8]	; (8006180 <TIM3_IRQHandler+0x10>)
 8006176:	f008 fde2 	bl	800ed3e <HAL_TIM_IRQHandler>
}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200008e8 	.word	0x200008e8

08006184 <BSP_DEBUG_PIN_On>:
  HAL_GPIO_DeInit(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin]);
  DEBUG_PINx_GPIO_CLK_DISABLE(Pin);
}

void BSP_DEBUG_PIN_On(Debug_Pin_TypeDef Pin)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_SET);
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	4a07      	ldr	r2, [pc, #28]	; (80061b0 <BSP_DEBUG_PIN_On+0x2c>)
 8006192:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006196:	79fb      	ldrb	r3, [r7, #7]
 8006198:	4a06      	ldr	r2, [pc, #24]	; (80061b4 <BSP_DEBUG_PIN_On+0x30>)
 800619a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800619e:	2201      	movs	r2, #1
 80061a0:	4619      	mov	r1, r3
 80061a2:	f002 fb7f 	bl	80088a4 <HAL_GPIO_WritePin>
}
 80061a6:	bf00      	nop
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000048 	.word	0x20000048
 80061b4:	080226dc 	.word	0x080226dc

080061b8 <BSP_DEBUG_PIN_Off>:

void BSP_DEBUG_PIN_Off(Debug_Pin_TypeDef Pin)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	4a07      	ldr	r2, [pc, #28]	; (80061e4 <BSP_DEBUG_PIN_Off+0x2c>)
 80061c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	4a06      	ldr	r2, [pc, #24]	; (80061e8 <BSP_DEBUG_PIN_Off+0x30>)
 80061ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d2:	2200      	movs	r2, #0
 80061d4:	4619      	mov	r1, r3
 80061d6:	f002 fb65 	bl	80088a4 <HAL_GPIO_WritePin>
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000048 	.word	0x20000048
 80061e8:	080226dc 	.word	0x080226dc

080061ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
  uint8_t sd_state;
  /* Check if the SD card is plugged in the slot */
  
  /* Initialize all configured peripherals */

  hsd1.Instance = SDMMC1;
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <BSP_SD_Init+0x5c>)
 80061f4:	4a15      	ldr	r2, [pc, #84]	; (800624c <BSP_SD_Init+0x60>)
 80061f6:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80061f8:	4b13      	ldr	r3, [pc, #76]	; (8006248 <BSP_SD_Init+0x5c>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80061fe:	4b12      	ldr	r3, [pc, #72]	; (8006248 <BSP_SD_Init+0x5c>)
 8006200:	2200      	movs	r2, #0
 8006202:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8006204:	4b10      	ldr	r3, [pc, #64]	; (8006248 <BSP_SD_Init+0x5c>)
 8006206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800620a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800620c:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <BSP_SD_Init+0x5c>)
 800620e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006212:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <BSP_SD_Init+0x5c>)
 8006216:	2201      	movs	r2, #1
 8006218:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <BSP_SD_Init+0x5c>)
 800621c:	2200      	movs	r2, #0
 800621e:	619a      	str	r2, [r3, #24]
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&hsd1);
 8006220:	4809      	ldr	r0, [pc, #36]	; (8006248 <BSP_SD_Init+0x5c>)
 8006222:	f000 f889 	bl	8006338 <BSP_SD_MspInit>
  
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006226:	f000 f839 	bl	800629c <BSP_SD_IsDetected>
 800622a:	4603      	mov	r3, r0
 800622c:	2b01      	cmp	r3, #1
 800622e:	d001      	beq.n	8006234 <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006230:	2302      	movs	r3, #2
 8006232:	e005      	b.n	8006240 <BSP_SD_Init+0x54>
  }
  /* HAL SD initialization */
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 8006234:	4804      	ldr	r0, [pc, #16]	; (8006248 <BSP_SD_Init+0x5c>)
 8006236:	f006 f92f 	bl	800c498 <HAL_SD_Init>
 800623a:	4603      	mov	r3, r0
 800623c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800623e:	79fb      	ldrb	r3, [r7, #7]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20015fc0 	.word	0x20015fc0
 800624c:	50062400 	.word	0x50062400

08006250 <BSP_SD_Detect_Init>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
void BSP_SD_Detect_Init(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 8006256:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <BSP_SD_Detect_Init+0x44>)
 8006258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625a:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <BSP_SD_Detect_Init+0x44>)
 800625c:	f043 0302 	orr.w	r3, r3, #2
 8006260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006262:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <BSP_SD_Detect_Init+0x44>)
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	683b      	ldr	r3, [r7, #0]

  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 800626e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006272:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8006274:	2301      	movs	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
 800627c:	2300      	movs	r3, #0
 800627e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4804      	ldr	r0, [pc, #16]	; (8006298 <BSP_SD_Detect_Init+0x48>)
 8006286:	f002 f963 	bl	8008550 <HAL_GPIO_Init>
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	40021000 	.word	0x40021000
 8006298:	48000400 	.word	0x48000400

0800629c <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 80062a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062a4:	4808      	ldr	r0, [pc, #32]	; (80062c8 <BSP_SD_IsDetected+0x2c>)
 80062a6:	f002 fae5 	bl	8008874 <HAL_GPIO_ReadPin>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <BSP_SD_IsDetected+0x1c>
  {
    SD_Status = SD_NOT_PRESENT;
 80062b0:	4b06      	ldr	r3, [pc, #24]	; (80062cc <BSP_SD_IsDetected+0x30>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e002      	b.n	80062be <BSP_SD_IsDetected+0x22>
  }
  else
  {
    SD_Status = SD_PRESENT;
 80062b8:	4b04      	ldr	r3, [pc, #16]	; (80062cc <BSP_SD_IsDetected+0x30>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]
  }
  
  return SD_Status;
 80062be:	4b03      	ldr	r3, [pc, #12]	; (80062cc <BSP_SD_IsDetected+0x30>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	b2db      	uxtb	r3, r3
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	48000400 	.word	0x48000400
 80062cc:	2000098b 	.word	0x2000098b

080062d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	68f9      	ldr	r1, [r7, #12]
 80062e6:	4806      	ldr	r0, [pc, #24]	; (8006300 <BSP_SD_ReadBlocks_DMA+0x30>)
 80062e8:	f006 f9ec 	bl	800c6c4 <HAL_SD_ReadBlocks_DMA>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20015fc0 	.word	0x20015fc0

08006304 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	68f9      	ldr	r1, [r7, #12]
 800631a:	4806      	ldr	r0, [pc, #24]	; (8006334 <BSP_SD_WriteBlocks_DMA+0x30>)
 800631c:	f006 fa7a 	bl	800c814 <HAL_SD_WriteBlocks_DMA>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800632a:	7dfb      	ldrb	r3, [r7, #23]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20015fc0 	.word	0x20015fc0

08006338 <BSP_SD_MspInit>:

  return sd_state; 
}

void BSP_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	; 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	605a      	str	r2, [r3, #4]
 800634a:	609a      	str	r2, [r3, #8]
 800634c:	60da      	str	r2, [r3, #12]
 800634e:	611a      	str	r2, [r3, #16]
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006350:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <BSP_SD_MspInit+0xac>)
 8006352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006354:	4a23      	ldr	r2, [pc, #140]	; (80063e4 <BSP_SD_MspInit+0xac>)
 8006356:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800635a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800635c:	4b21      	ldr	r3, [pc, #132]	; (80063e4 <BSP_SD_MspInit+0xac>)
 800635e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006368:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <BSP_SD_MspInit+0xac>)
 800636a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636c:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <BSP_SD_MspInit+0xac>)
 800636e:	f043 0304 	orr.w	r3, r3, #4
 8006372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006374:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <BSP_SD_MspInit+0xac>)
 8006376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006380:	4b18      	ldr	r3, [pc, #96]	; (80063e4 <BSP_SD_MspInit+0xac>)
 8006382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006384:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <BSP_SD_MspInit+0xac>)
 8006386:	f043 0308 	orr.w	r3, r3, #8
 800638a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800638c:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <BSP_SD_MspInit+0xac>)
 800638e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 8006398:	2302      	movs	r3, #2
 800639a:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull      = GPIO_PULLUP;
 800639c:	2301      	movs	r3, #1
 800639e:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80063a0:	2303      	movs	r3, #3
 80063a2:	623b      	str	r3, [r7, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 80063a4:	230c      	movs	r3, #12
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80063a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80063ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80063ae:	f107 0314 	add.w	r3, r7, #20
 80063b2:	4619      	mov	r1, r3
 80063b4:	480c      	ldr	r0, [pc, #48]	; (80063e8 <BSP_SD_MspInit+0xb0>)
 80063b6:	f002 f8cb 	bl	8008550 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 80063ba:	2304      	movs	r3, #4
 80063bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80063be:	f107 0314 	add.w	r3, r7, #20
 80063c2:	4619      	mov	r1, r3
 80063c4:	4809      	ldr	r0, [pc, #36]	; (80063ec <BSP_SD_MspInit+0xb4>)
 80063c6:	f002 f8c3 	bl	8008550 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 80063ca:	2200      	movs	r2, #0
 80063cc:	2105      	movs	r1, #5
 80063ce:	2031      	movs	r0, #49	; 0x31
 80063d0:	f001 fe07 	bl	8007fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 80063d4:	2031      	movs	r0, #49	; 0x31
 80063d6:	f001 fe20 	bl	800801a <HAL_NVIC_EnableIRQ>


}
 80063da:	bf00      	nop
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40021000 	.word	0x40021000
 80063e8:	48000800 	.word	0x48000800
 80063ec:	48000c00 	.word	0x48000c00

080063f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80063f4:	4805      	ldr	r0, [pc, #20]	; (800640c <BSP_SD_GetCardState+0x1c>)
 80063f6:	f006 ffa5 	bl	800d344 <HAL_SD_GetCardState>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
}
 8006406:	4618      	mov	r0, r3
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20015fc0 	.word	0x20015fc0

08006410 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4803      	ldr	r0, [pc, #12]	; (8006428 <BSP_SD_GetCardInfo+0x18>)
 800641c:	f006 febc 	bl	800d198 <HAL_SD_GetCardInfo>
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20015fc0 	.word	0x20015fc0

0800642c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 8006434:	f7fd fa3e 	bl	80038b4 <BSP_SD_WriteCpltCallback>
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8006448:	f7fd fa44 	bl	80038d4 <BSP_SD_ReadCpltCallback>
}
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800645e:	2003      	movs	r0, #3
 8006460:	f001 fdb4 	bl	8007fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006464:	2000      	movs	r0, #0
 8006466:	f000 f815 	bl	8006494 <HAL_InitTick>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	71fb      	strb	r3, [r7, #7]
 8006474:	e001      	b.n	800647a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006476:	f000 f805 	bl	8006484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800647a:	79fb      	ldrb	r3, [r7, #7]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80064a0:	4b16      	ldr	r3, [pc, #88]	; (80064fc <HAL_InitTick+0x68>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d022      	beq.n	80064ee <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80064a8:	4b15      	ldr	r3, [pc, #84]	; (8006500 <HAL_InitTick+0x6c>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	4b13      	ldr	r3, [pc, #76]	; (80064fc <HAL_InitTick+0x68>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80064b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80064b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 fdba 	bl	8008036 <HAL_SYSTICK_Config>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10f      	bne.n	80064e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b0f      	cmp	r3, #15
 80064cc:	d809      	bhi.n	80064e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064ce:	2200      	movs	r2, #0
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	f04f 30ff 	mov.w	r0, #4294967295
 80064d6:	f001 fd84 	bl	8007fe2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80064da:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <HAL_InitTick+0x70>)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	e007      	b.n	80064f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	73fb      	strb	r3, [r7, #15]
 80064e6:	e004      	b.n	80064f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e001      	b.n	80064f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	2000007c 	.word	0x2000007c
 8006500:	20000038 	.word	0x20000038
 8006504:	20000078 	.word	0x20000078

08006508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <HAL_IncTick+0x1c>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_IncTick+0x20>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4413      	add	r3, r2
 8006516:	4a03      	ldr	r2, [pc, #12]	; (8006524 <HAL_IncTick+0x1c>)
 8006518:	6013      	str	r3, [r2, #0]
}
 800651a:	bf00      	nop
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	20018f14 	.word	0x20018f14
 8006528:	2000007c 	.word	0x2000007c

0800652c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  return uwTick;
 8006530:	4b03      	ldr	r3, [pc, #12]	; (8006540 <HAL_GetTick+0x14>)
 8006532:	681b      	ldr	r3, [r3, #0]
}
 8006534:	4618      	mov	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20018f14 	.word	0x20018f14

08006544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800654c:	f7ff ffee 	bl	800652c <HAL_GetTick>
 8006550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d004      	beq.n	8006568 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <HAL_Delay+0x40>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4413      	add	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006568:	bf00      	nop
 800656a:	f7ff ffdf 	bl	800652c <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	429a      	cmp	r2, r3
 8006578:	d8f7      	bhi.n	800656a <HAL_Delay+0x26>
  {
  }
}
 800657a:	bf00      	nop
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	2000007c 	.word	0x2000007c

08006588 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <HAL_SuspendTick+0x1c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a04      	ldr	r2, [pc, #16]	; (80065a4 <HAL_SuspendTick+0x1c>)
 8006592:	f023 0302 	bic.w	r3, r3, #2
 8006596:	6013      	str	r3, [r2, #0]
}
 8006598:	bf00      	nop
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	e000e010 	.word	0xe000e010

080065a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	609a      	str	r2, [r3, #8]
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80065de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6093      	str	r3, [r2, #8]
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006606:	d101      	bne.n	800660c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800662a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800662e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006656:	d101      	bne.n	800665c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800667a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800667e:	f043 0201 	orr.w	r2, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066a6:	f043 0202 	orr.w	r2, r3, #2
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <LL_ADC_IsEnabled+0x18>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <LL_ADC_IsEnabled+0x1a>
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d101      	bne.n	80066f8 <LL_ADC_IsDisableOngoing+0x18>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <LL_ADC_IsDisableOngoing+0x1a>
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006716:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800673e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006742:	f043 0210 	orr.w	r2, r3, #16
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b04      	cmp	r3, #4
 8006768:	d101      	bne.n	800676e <LL_ADC_REG_IsConversionOngoing+0x18>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800678c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006790:	f043 0220 	orr.w	r2, r3, #32
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d101      	bne.n	80067bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80067d8:	2300      	movs	r3, #0
 80067da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e174      	b.n	8006ad0 <HAL_ADC_Init+0x304>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d132      	bne.n	800685a <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a9a      	ldr	r2, [pc, #616]	; (8006a60 <HAL_ADC_Init+0x294>)
 80067f8:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a99      	ldr	r2, [pc, #612]	; (8006a64 <HAL_ADC_Init+0x298>)
 80067fe:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a99      	ldr	r2, [pc, #612]	; (8006a68 <HAL_ADC_Init+0x29c>)
 8006804:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a98      	ldr	r2, [pc, #608]	; (8006a6c <HAL_ADC_Init+0x2a0>)
 800680a:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a98      	ldr	r2, [pc, #608]	; (8006a70 <HAL_ADC_Init+0x2a4>)
 8006810:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a97      	ldr	r2, [pc, #604]	; (8006a74 <HAL_ADC_Init+0x2a8>)
 8006816:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a97      	ldr	r2, [pc, #604]	; (8006a78 <HAL_ADC_Init+0x2ac>)
 800681c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a96      	ldr	r2, [pc, #600]	; (8006a7c <HAL_ADC_Init+0x2b0>)
 8006824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a95      	ldr	r2, [pc, #596]	; (8006a80 <HAL_ADC_Init+0x2b4>)
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d103      	bne.n	8006842 <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a91      	ldr	r2, [pc, #580]	; (8006a84 <HAL_ADC_Init+0x2b8>)
 800683e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff fec7 	bl	80065f2 <LL_ADC_IsDeepPowerDownEnabled>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fead 	bl	80065ce <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fee2 	bl	8006642 <LL_ADC_IsInternalRegulatorEnabled>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d113      	bne.n	80068ac <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff fec6 	bl	800661a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800688e:	4b7e      	ldr	r3, [pc, #504]	; (8006a88 <HAL_ADC_Init+0x2bc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	099b      	lsrs	r3, r3, #6
 8006894:	4a7d      	ldr	r2, [pc, #500]	; (8006a8c <HAL_ADC_Init+0x2c0>)
 8006896:	fba2 2303 	umull	r2, r3, r2, r3
 800689a:	099b      	lsrs	r3, r3, #6
 800689c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800689e:	e002      	b.n	80068a6 <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1f9      	bne.n	80068a0 <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fec6 	bl	8006642 <LL_ADC_IsInternalRegulatorEnabled>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10d      	bne.n	80068d8 <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c0:	f043 0210 	orr.w	r2, r3, #16
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068cc:	f043 0201 	orr.w	r2, r3, #1
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff ff3a 	bl	8006756 <LL_ADC_REG_IsConversionOngoing>
 80068e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 80e6 	bne.w	8006abe <HAL_ADC_Init+0x2f2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 80e2 	bne.w	8006abe <HAL_ADC_Init+0x2f2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006902:	f043 0202 	orr.w	r2, r3, #2
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff fed3 	bl	80066ba <LL_ADC_IsEnabled>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10b      	bne.n	8006932 <HAL_ADC_Init+0x166>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800691a:	485d      	ldr	r0, [pc, #372]	; (8006a90 <HAL_ADC_Init+0x2c4>)
 800691c:	f7ff fecd 	bl	80066ba <LL_ADC_IsEnabled>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d105      	bne.n	8006932 <HAL_ADC_Init+0x166>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	4619      	mov	r1, r3
 800692c:	4859      	ldr	r0, [pc, #356]	; (8006a94 <HAL_ADC_Init+0x2c8>)
 800692e:	f7ff fe3b 	bl	80065a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	7e5b      	ldrb	r3, [r3, #25]
 8006936:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800693c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006942:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006948:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006950:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006952:	4313      	orrs	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d106      	bne.n	800696e <HAL_ADC_Init+0x1a2>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	3b01      	subs	r3, #1
 8006966:	045b      	lsls	r3, r3, #17
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	4313      	orrs	r3, r2
 800696c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <HAL_ADC_Init+0x1be>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006982:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	4313      	orrs	r3, r2
 8006988:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	4b41      	ldr	r3, [pc, #260]	; (8006a98 <HAL_ADC_Init+0x2cc>)
 8006992:	4013      	ands	r3, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6812      	ldr	r2, [r2, #0]
 8006998:	69b9      	ldr	r1, [r7, #24]
 800699a:	430b      	orrs	r3, r1
 800699c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fed7 	bl	8006756 <LL_ADC_REG_IsConversionOngoing>
 80069a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff fef8 	bl	80067a4 <LL_ADC_INJ_IsConversionOngoing>
 80069b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d140      	bne.n	8006a3e <HAL_ADC_Init+0x272>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d13d      	bne.n	8006a3e <HAL_ADC_Init+0x272>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	7e1b      	ldrb	r3, [r3, #24]
 80069ca:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80069cc:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80069d6:	4313      	orrs	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069e4:	f023 0306 	bic.w	r3, r3, #6
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	69b9      	ldr	r1, [r7, #24]
 80069ee:	430b      	orrs	r3, r1
 80069f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d118      	bne.n	8006a2e <HAL_ADC_Init+0x262>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a06:	f023 0304 	bic.w	r3, r3, #4
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a12:	4311      	orrs	r1, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a18:	4311      	orrs	r1, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	611a      	str	r2, [r3, #16]
 8006a2c:	e007      	b.n	8006a3e <HAL_ADC_Init+0x272>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0201 	bic.w	r2, r2, #1
 8006a3c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d12a      	bne.n	8006a9c <HAL_ADC_Init+0x2d0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	f023 010f 	bic.w	r1, r3, #15
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	1e5a      	subs	r2, r3, #1
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a5e:	e025      	b.n	8006aac <HAL_ADC_Init+0x2e0>
 8006a60:	08006c05 	.word	0x08006c05
 8006a64:	08006c19 	.word	0x08006c19
 8006a68:	08006c2d 	.word	0x08006c2d
 8006a6c:	08006c41 	.word	0x08006c41
 8006a70:	08007563 	.word	0x08007563
 8006a74:	08007577 	.word	0x08007577
 8006a78:	0800758b 	.word	0x0800758b
 8006a7c:	0800759f 	.word	0x0800759f
 8006a80:	080075b3 	.word	0x080075b3
 8006a84:	08005865 	.word	0x08005865
 8006a88:	20000038 	.word	0x20000038
 8006a8c:	053e2d63 	.word	0x053e2d63
 8006a90:	50040000 	.word	0x50040000
 8006a94:	50040300 	.word	0x50040300
 8006a98:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 020f 	bic.w	r2, r2, #15
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab0:	f023 0303 	bic.w	r3, r3, #3
 8006ab4:	f043 0201 	orr.w	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	659a      	str	r2, [r3, #88]	; 0x58
 8006abc:	e007      	b.n	8006ace <HAL_ADC_Init+0x302>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac2:	f043 0210 	orr.w	r2, r3, #16
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fe36 	bl	8006756 <LL_ADC_REG_IsConversionOngoing>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d14f      	bne.n	8006b90 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_ADC_Start+0x26>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e04b      	b.n	8006b96 <HAL_ADC_Start+0xbe>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f964 	bl	8006dd4 <ADC_Enable>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d137      	bne.n	8006b86 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b1e:	f023 0301 	bic.w	r3, r3, #1
 8006b22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b36:	d106      	bne.n	8006b46 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3c:	f023 0206 	bic.w	r2, r3, #6
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b44:	e002      	b.n	8006b4c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	221c      	movs	r2, #28
 8006b52:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d007      	beq.n	8006b7a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff fdc1 	bl	8006706 <LL_ADC_REG_StartConversion>
 8006b84:	e006      	b.n	8006b94 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006b8e:	e001      	b.n	8006b94 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006b90:	2302      	movs	r3, #2
 8006b92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <HAL_ADC_Stop+0x16>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e023      	b.n	8006bfc <HAL_ADC_Stop+0x5e>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006bbc:	2103      	movs	r1, #3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f854 	bl	8006c6c <ADC_ConversionStop>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d111      	bne.n	8006bf2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f95a 	bl	8006e88 <ADC_Disable>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006be6:	f023 0301 	bic.w	r3, r3, #1
 8006bea:	f043 0201 	orr.w	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff fd67 	bl	8006756 <LL_ADC_REG_IsConversionOngoing>
 8006c88:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fd88 	bl	80067a4 <LL_ADC_INJ_IsConversionOngoing>
 8006c94:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d103      	bne.n	8006ca4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8091 	beq.w	8006dc6 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d02a      	beq.n	8006d08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	7e5b      	ldrb	r3, [r3, #25]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d126      	bne.n	8006d08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	7e1b      	ldrb	r3, [r3, #24]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d122      	bne.n	8006d08 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006cc6:	e014      	b.n	8006cf2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	4a41      	ldr	r2, [pc, #260]	; (8006dd0 <ADC_ConversionStop+0x164>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d90d      	bls.n	8006cec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	f043 0210 	orr.w	r2, r3, #16
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce0:	f043 0201 	orr.w	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e06d      	b.n	8006dc8 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b40      	cmp	r3, #64	; 0x40
 8006cfe:	d1e3      	bne.n	8006cc8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2240      	movs	r2, #64	; 0x40
 8006d06:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d014      	beq.n	8006d38 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff fd1f 	bl	8006756 <LL_ADC_REG_IsConversionOngoing>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00c      	beq.n	8006d38 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff fcdc 	bl	80066e0 <LL_ADC_IsDisableOngoing>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fcfb 	bl	800672e <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d014      	beq.n	8006d68 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fd2e 	bl	80067a4 <LL_ADC_INJ_IsConversionOngoing>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fcc4 	bl	80066e0 <LL_ADC_IsDisableOngoing>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d104      	bne.n	8006d68 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff fd0a 	bl	800677c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d005      	beq.n	8006d7a <ADC_ConversionStop+0x10e>
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d105      	bne.n	8006d80 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006d74:	230c      	movs	r3, #12
 8006d76:	617b      	str	r3, [r7, #20]
        break;
 8006d78:	e005      	b.n	8006d86 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	617b      	str	r3, [r7, #20]
        break;
 8006d7e:	e002      	b.n	8006d86 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006d80:	2304      	movs	r3, #4
 8006d82:	617b      	str	r3, [r7, #20]
        break;
 8006d84:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006d86:	f7ff fbd1 	bl	800652c <HAL_GetTick>
 8006d8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006d8c:	e014      	b.n	8006db8 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006d8e:	f7ff fbcd 	bl	800652c <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b05      	cmp	r3, #5
 8006d9a:	d90d      	bls.n	8006db8 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da0:	f043 0210 	orr.w	r2, r3, #16
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dac:	f043 0201 	orr.w	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e007      	b.n	8006dc8 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e3      	bne.n	8006d8e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3720      	adds	r7, #32
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	a33fffff 	.word	0xa33fffff

08006dd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fc6a 	bl	80066ba <LL_ADC_IsEnabled>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d146      	bne.n	8006e7a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689a      	ldr	r2, [r3, #8]
 8006df2:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <ADC_Enable+0xb0>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfe:	f043 0210 	orr.w	r2, r3, #16
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0a:	f043 0201 	orr.w	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e032      	b.n	8006e7c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fc25 	bl	800666a <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006e20:	f7ff fb84 	bl	800652c <HAL_GetTick>
 8006e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e26:	e021      	b.n	8006e6c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7ff fc44 	bl	80066ba <LL_ADC_IsEnabled>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d104      	bne.n	8006e42 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fc14 	bl	800666a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006e42:	f7ff fb73 	bl	800652c <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d90d      	bls.n	8006e6c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e54:	f043 0210 	orr.w	r2, r3, #16
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e60:	f043 0201 	orr.w	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e007      	b.n	8006e7c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d1d6      	bne.n	8006e28 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	8000003f 	.word	0x8000003f

08006e88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff fc23 	bl	80066e0 <LL_ADC_IsDisableOngoing>
 8006e9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff fc0a 	bl	80066ba <LL_ADC_IsEnabled>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d040      	beq.n	8006f2e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d13d      	bne.n	8006f2e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 030d 	and.w	r3, r3, #13
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d10c      	bne.n	8006eda <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7ff fbe4 	bl	8006692 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2203      	movs	r2, #3
 8006ed0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ed2:	f7ff fb2b 	bl	800652c <HAL_GetTick>
 8006ed6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ed8:	e022      	b.n	8006f20 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ede:	f043 0210 	orr.w	r2, r3, #16
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eea:	f043 0201 	orr.w	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e01c      	b.n	8006f30 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006ef6:	f7ff fb19 	bl	800652c <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d90d      	bls.n	8006f20 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f08:	f043 0210 	orr.w	r2, r3, #16
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f14:	f043 0201 	orr.w	r2, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e007      	b.n	8006f30 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e3      	bne.n	8006ef6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <LL_ADC_SetCommonPathInternalCh>:
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	609a      	str	r2, [r3, #8]
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <LL_ADC_GetCommonPathInternalCh>:
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <LL_ADC_SetOffset>:
{
 8006f7c:	b490      	push	{r4, r7}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3360      	adds	r3, #96	; 0x60
 8006f8e:	461a      	mov	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <LL_ADC_SetOffset+0x40>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fae:	6023      	str	r3, [r4, #0]
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc90      	pop	{r4, r7}
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	03fff000 	.word	0x03fff000

08006fc0 <LL_ADC_GetOffsetChannel>:
{
 8006fc0:	b490      	push	{r4, r7}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3360      	adds	r3, #96	; 0x60
 8006fce:	461a      	mov	r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc90      	pop	{r4, r7}
 8006fe6:	4770      	bx	lr

08006fe8 <LL_ADC_SetOffsetState>:
{
 8006fe8:	b490      	push	{r4, r7}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3360      	adds	r3, #96	; 0x60
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4313      	orrs	r3, r2
 800700c:	6023      	str	r3, [r4, #0]
}
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bc90      	pop	{r4, r7}
 8007016:	4770      	bx	lr

08007018 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	615a      	str	r2, [r3, #20]
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007070:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <LL_ADC_INJ_GetTrigAuto>:
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <LL_ADC_SetChannelSamplingTime>:
{
 80070a6:	b490      	push	{r4, r7}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3314      	adds	r3, #20
 80070b6:	461a      	mov	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	0e5b      	lsrs	r3, r3, #25
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	4413      	add	r3, r2
 80070c4:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	0d1b      	lsrs	r3, r3, #20
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	2107      	movs	r1, #7
 80070d2:	fa01 f303 	lsl.w	r3, r1, r3
 80070d6:	43db      	mvns	r3, r3
 80070d8:	401a      	ands	r2, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	0d1b      	lsrs	r3, r3, #20
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	fa01 f303 	lsl.w	r3, r1, r3
 80070e8:	4313      	orrs	r3, r2
 80070ea:	6023      	str	r3, [r4, #0]
}
 80070ec:	bf00      	nop
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bc90      	pop	{r4, r7}
 80070f4:	4770      	bx	lr
	...

080070f8 <LL_ADC_SetChannelSingleDiff>:
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007110:	43db      	mvns	r3, r3
 8007112:	401a      	ands	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f003 0318 	and.w	r3, r3, #24
 800711a:	4908      	ldr	r1, [pc, #32]	; (800713c <LL_ADC_SetChannelSingleDiff+0x44>)
 800711c:	40d9      	lsrs	r1, r3
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	400b      	ands	r3, r1
 8007122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007126:	431a      	orrs	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	0007ffff 	.word	0x0007ffff

08007140 <LL_ADC_IsEnabled>:
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b01      	cmp	r3, #1
 8007152:	d101      	bne.n	8007158 <LL_ADC_IsEnabled+0x18>
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <LL_ADC_IsEnabled+0x1a>
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <LL_ADC_StartCalibration>:
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007178:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007182:	4313      	orrs	r3, r2
 8007184:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	609a      	str	r2, [r3, #8]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <LL_ADC_IsCalibrationOnGoing>:
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ac:	d101      	bne.n	80071b2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <LL_ADC_REG_IsConversionOngoing>:
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d101      	bne.n	80071d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e000      	b.n	80071da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <LL_ADC_INJ_StartConversion>:
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80071fa:	f043 0208 	orr.w	r2, r3, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	609a      	str	r2, [r3, #8]
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <LL_ADC_INJ_IsConversionOngoing>:
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f003 0308 	and.w	r3, r3, #8
 800721e:	2b08      	cmp	r3, #8
 8007220:	d101      	bne.n	8007226 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800723e:	2300      	movs	r3, #0
 8007240:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_ADCEx_Calibration_Start+0x1c>
 800724c:	2302      	movs	r3, #2
 800724e:	e04d      	b.n	80072ec <HAL_ADCEx_Calibration_Start+0xb8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fe15 	bl	8006e88 <ADC_Disable>
 800725e:	4603      	mov	r3, r0
 8007260:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d136      	bne.n	80072d6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007270:	f023 0302 	bic.w	r3, r3, #2
 8007274:	f043 0202 	orr.w	r2, r3, #2
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff ff6f 	bl	8007166 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007288:	e014      	b.n	80072b4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	3301      	adds	r3, #1
 800728e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8007296:	d30d      	bcc.n	80072b4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729c:	f023 0312 	bic.w	r3, r3, #18
 80072a0:	f043 0210 	orr.w	r2, r3, #16
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e01b      	b.n	80072ec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff ff6d 	bl	8007198 <LL_ADC_IsCalibrationOnGoing>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e2      	bne.n	800728a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c8:	f023 0303 	bic.w	r3, r3, #3
 80072cc:	f043 0201 	orr.w	r2, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	659a      	str	r2, [r3, #88]	; 0x58
 80072d4:	e005      	b.n	80072e2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072da:	f043 0210 	orr.w	r2, r3, #16
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff ff84 	bl	800720e <LL_ADC_INJ_IsConversionOngoing>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_ADCEx_InjectedStart+0x1c>
  {
    return HAL_BUSY;
 800730c:	2302      	movs	r3, #2
 800730e:	e05f      	b.n	80073d0 <HAL_ADCEx_InjectedStart+0xdc>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800731a:	60fb      	str	r3, [r7, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007322:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <HAL_ADCEx_InjectedStart+0x4c>
        && (tmp_config_injected_queue == 0UL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d107      	bne.n	8007340 <HAL_ADCEx_InjectedStart+0x4c>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007334:	f043 0220 	orr.w	r2, r3, #32
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e047      	b.n	80073d0 <HAL_ADCEx_InjectedStart+0xdc>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_ADCEx_InjectedStart+0x5a>
 800734a:	2302      	movs	r3, #2
 800734c:	e040      	b.n	80073d0 <HAL_ADCEx_InjectedStart+0xdc>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff fd3c 	bl	8006dd4 <ADC_Enable>
 800735c:	4603      	mov	r3, r0
 800735e:	72fb      	strb	r3, [r7, #11]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d12f      	bne.n	80073c6 <HAL_ADCEx_InjectedStart+0xd2>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736e:	2b00      	cmp	r3, #0
 8007370:	d006      	beq.n	8007380 <HAL_ADCEx_InjectedStart+0x8c>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007376:	f023 0208 	bic.w	r2, r3, #8
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	65da      	str	r2, [r3, #92]	; 0x5c
 800737e:	e002      	b.n	8007386 <HAL_ADCEx_InjectedStart+0x92>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800738e:	f023 0301 	bic.w	r3, r3, #1
 8007392:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2260      	movs	r2, #96	; 0x60
 80073a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      }
#else
      if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff fe6b 	bl	800708a <LL_ADC_INJ_GetTrigAuto>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d109      	bne.n	80073ce <HAL_ADCEx_InjectedStart+0xda>
      {
        /* Start ADC group injected conversion */
        LL_ADC_INJ_StartConversion(hadc->Instance);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff ff11 	bl	80071e6 <LL_ADC_INJ_StartConversion>
 80073c4:	e003      	b.n	80073ce <HAL_ADCEx_InjectedStart+0xda>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
 80073ce:	7afb      	ldrb	r3, [r7, #11]
  }
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_ADCEx_InjectedPollForConversion>:
  * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
  *         checked and cleared depending on AUTDLY bit status.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of sequence selected */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d102      	bne.n	80073f0 <HAL_ADCEx_InjectedPollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_JEOS;
 80073ea:	2340      	movs	r3, #64	; 0x40
 80073ec:	61fb      	str	r3, [r7, #28]
 80073ee:	e001      	b.n	80073f4 <HAL_ADCEx_InjectedPollForConversion+0x1c>
  }
  else /* end of conversion selected */
  {
    tmp_Flag_End = ADC_FLAG_JEOC;
 80073f0:	2320      	movs	r3, #32
 80073f2:	61fb      	str	r3, [r7, #28]
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80073f4:	f7ff f89a 	bl	800652c <HAL_GetTick>
 80073f8:	61b8      	str	r0, [r7, #24]

  /* Wait until End of Conversion or Sequence flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80073fa:	e01a      	b.n	8007432 <HAL_ADCEx_InjectedPollForConversion+0x5a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007402:	d016      	beq.n	8007432 <HAL_ADCEx_InjectedPollForConversion+0x5a>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8007404:	f7ff f892 	bl	800652c <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d302      	bcc.n	800741a <HAL_ADCEx_InjectedPollForConversion+0x42>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <HAL_ADCEx_InjectedPollForConversion+0x5a>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741e:	f043 0204 	orr.w	r2, r3, #4
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e05c      	b.n	80074ec <HAL_ADCEx_InjectedPollForConversion+0x114>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	4013      	ands	r3, r2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0dd      	beq.n	80073fc <HAL_ADCEx_InjectedPollForConversion+0x24>
      }
    }
  }

  /* Retrieve ADC configuration */
  tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fe0d 	bl	8007064 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800744a:	6178      	str	r0, [r7, #20]
  tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fdf4 	bl	800703e <LL_ADC_REG_IsTriggerSourceSWStart>
 8007456:	6138      	str	r0, [r7, #16]
  {
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	60fb      	str	r3, [r7, #12]
#endif

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007464:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10c      	bne.n	800748c <HAL_ADCEx_InjectedPollForConversion+0xb4>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8007478:	2b00      	cmp	r3, #0
 800747a:	d125      	bne.n	80074c8 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d022      	beq.n	80074c8 <HAL_ADCEx_InjectedPollForConversion+0xf0>
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
        (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8007488:	2b00      	cmp	r3, #0
 800748a:	d11d      	bne.n	80074c8 <HAL_ADCEx_InjectedPollForConversion+0xf0>
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007496:	2b40      	cmp	r3, #64	; 0x40
 8007498:	d116      	bne.n	80074c8 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      /* when the last context has been fully processed, JSQR is reset      */
      /* by the hardware. Even if no injected conversion is planned to come */
      /* (queue empty, triggers are ignored), it can start again            */
      /* immediately after setting a new context (JADSTART is still set).   */
      /* Therefore, state of HAL ADC injected group is kept to busy.        */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d111      	bne.n	80074c8 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	659a      	str	r2, [r3, #88]	; 0x58

        if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <HAL_ADCEx_InjectedPollForConversion+0xf0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c0:	f043 0201 	orr.w	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_JEOS)
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d109      	bne.n	80074e2 <HAL_ADCEx_InjectedPollForConversion+0x10a>
  {
    /* Clear end of sequence JEOS flag of injected group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature.   */
    /* For injected groups, no new conversion will start before JEOS is       */
    /* cleared.                                                               */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d108      	bne.n	80074ea <HAL_ADCEx_InjectedPollForConversion+0x112>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2260      	movs	r2, #96	; 0x60
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	e003      	b.n	80074ea <HAL_ADCEx_InjectedPollForConversion+0x112>
    }
  }
  else
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2220      	movs	r2, #32
 80074e8:	601a      	str	r2, [r3, #0]
  }

  /* Return API HAL status */
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3720      	adds	r7, #32
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	f240 321a 	movw	r2, #794	; 0x31a
 8007504:	4293      	cmp	r3, r2
 8007506:	d00d      	beq.n	8007524 <HAL_ADCEx_InjectedGetValue+0x30>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	f240 321a 	movw	r2, #794	; 0x31a
 800750e:	4293      	cmp	r3, r2
 8007510:	d81a      	bhi.n	8007548 <HAL_ADCEx_InjectedGetValue+0x54>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007518:	d010      	beq.n	800753c <HAL_ADCEx_InjectedGetValue+0x48>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	f5b3 7f05 	cmp.w	r3, #532	; 0x214
 8007520:	d006      	beq.n	8007530 <HAL_ADCEx_InjectedGetValue+0x3c>
 8007522:	e011      	b.n	8007548 <HAL_ADCEx_InjectedGetValue+0x54>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800752c:	60fb      	str	r3, [r7, #12]
      break;
 800752e:	e011      	b.n	8007554 <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007538:	60fb      	str	r3, [r7, #12]
      break;
 800753a:	e00b      	b.n	8007554 <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007544:	60fb      	str	r3, [r7, #12]
      break;
 8007546:	e005      	b.n	8007554 <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007550:	60fb      	str	r3, [r7, #12]
      break;
 8007552:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8007554:	68fb      	ldr	r3, [r7, #12]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b0a8      	sub	sp, #160	; 0xa0
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d102      	bne.n	80075f2 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80075ec:	2302      	movs	r3, #2
 80075ee:	f000 bc13 	b.w	8007e18 <HAL_ADCEx_InjectedConfigChannel+0x850>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007606:	2b01      	cmp	r3, #1
 8007608:	d130      	bne.n	800766c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b08      	cmp	r3, #8
 8007610:	d179      	bne.n	8007706 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d010      	beq.n	800763c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	0e9b      	lsrs	r3, r3, #26
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800762e:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007634:	4313      	orrs	r3, r2
 8007636:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800763a:	e007      	b.n	800764c <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	0e9b      	lsrs	r3, r3, #26
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8007648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007652:	4ba1      	ldr	r3, [pc, #644]	; (80078d8 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 8007654:	4013      	ands	r3, r2
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800765e:	430b      	orrs	r3, r1
 8007660:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007668:	661a      	str	r2, [r3, #96]	; 0x60
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800766a:	e04c      	b.n	8007706 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007670:	2b00      	cmp	r3, #0
 8007672:	d11d      	bne.n	80076b0 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	699a      	ldr	r2, [r3, #24]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	665a      	str	r2, [r3, #100]	; 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	661a      	str	r2, [r3, #96]	; 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007698:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800769e:	4313      	orrs	r3, r2
 80076a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076a4:	e004      	b.n	80076b0 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	0e9b      	lsrs	r3, r3, #26
 80076b6:	f003 021f 	and.w	r2, r3, #31
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f003 031f 	and.w	r3, r3, #31
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d4:	1e5a      	subs	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	665a      	str	r2, [r3, #100]	; 0x64

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80076de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10a      	bne.n	8007706 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076f6:	4b78      	ldr	r3, [pc, #480]	; (80078d8 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	6812      	ldr	r2, [r2, #0]
 8007702:	430b      	orrs	r3, r1
 8007704:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff fd7f 	bl	800720e <LL_ADC_INJ_IsConversionOngoing>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d120      	bne.n	8007758 <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	7f5b      	ldrb	r3, [r3, #29]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d110      	bne.n	8007740 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	7f9b      	ldrb	r3, [r3, #30]
 800772c:	055a      	lsls	r2, r3, #21
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	7f1b      	ldrb	r3, [r3, #28]
 8007732:	051b      	lsls	r3, r3, #20
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	60da      	str	r2, [r3, #12]
 800773e:	e00b      	b.n	8007758 <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	7f9b      	ldrb	r3, [r3, #30]
 800774e:	055a      	lsls	r2, r3, #21
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff fd2f 	bl	80071c0 <LL_ADC_REG_IsConversionOngoing>
 8007762:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fd4f 	bl	800720e <LL_ADC_INJ_IsConversionOngoing>
 8007770:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007774:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007778:	2b00      	cmp	r3, #0
 800777a:	f040 81b9 	bne.w	8007af0 <HAL_ADCEx_InjectedConfigChannel+0x528>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800777e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007782:	2b00      	cmp	r3, #0
 8007784:	f040 81b4 	bne.w	8007af0 <HAL_ADCEx_InjectedConfigChannel+0x528>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d115      	bne.n	80077c4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	7f5b      	ldrb	r3, [r3, #29]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d108      	bne.n	80077b2 <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80077ae:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80077b0:	e01e      	b.n	80077f0 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80077c0:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80077c2:	e015      	b.n	80077f0 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	7f5b      	ldrb	r3, [r3, #29]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d109      	bne.n	80077e0 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d0:	f043 0220 	orr.w	r2, r3, #32
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	659a      	str	r2, [r3, #88]	; 0x58

        tmp_hal_status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80077de:	e007      	b.n	80077f0 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80077ee:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d110      	bne.n	800781c <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	430b      	orrs	r3, r1
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0202 	orr.w	r2, r2, #2
 8007818:	611a      	str	r2, [r3, #16]
 800781a:	e007      	b.n	800782c <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691a      	ldr	r2, [r3, #16]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0202 	bic.w	r2, r2, #2
 800782a:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007834:	d10f      	bne.n	8007856 <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2200      	movs	r2, #0
 8007840:	4619      	mov	r1, r3
 8007842:	f7ff fc30 	bl	80070a6 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff fbe2 	bl	8007018 <LL_ADC_SetSamplingTimeCommonConfig>
 8007854:	e00e      	b.n	8007874 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	6819      	ldr	r1, [r3, #0]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	461a      	mov	r2, r3
 8007864:	f7ff fc1f 	bl	80070a6 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2100      	movs	r1, #0
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff fbd2 	bl	8007018 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	695a      	ldr	r2, [r3, #20]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	08db      	lsrs	r3, r3, #3
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b04      	cmp	r3, #4
 8007894:	d00a      	beq.n	80078ac <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6919      	ldr	r1, [r3, #16]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078a6:	f7ff fb69 	bl	8006f7c <LL_ADC_SetOffset>
 80078aa:	e121      	b.n	8007af0 <HAL_ADCEx_InjectedConfigChannel+0x528>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2100      	movs	r1, #0
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff fb84 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 80078b8:	4603      	mov	r3, r0
 80078ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10c      	bne.n	80078dc <HAL_ADCEx_InjectedConfigChannel+0x314>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff fb79 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 80078ce:	4603      	mov	r3, r0
 80078d0:	0e9b      	lsrs	r3, r3, #26
 80078d2:	f003 021f 	and.w	r2, r3, #31
 80078d6:	e016      	b.n	8007906 <HAL_ADCEx_InjectedConfigChannel+0x33e>
 80078d8:	82082000 	.word	0x82082000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2100      	movs	r1, #0
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7ff fb6c 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078f2:	fa93 f3a3 	rbit	r3, r3
 80078f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80078fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078fe:	fab3 f383 	clz	r3, r3
 8007902:	b2db      	uxtb	r3, r3
 8007904:	461a      	mov	r2, r3
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800790e:	2b00      	cmp	r3, #0
 8007910:	d105      	bne.n	800791e <HAL_ADCEx_InjectedConfigChannel+0x356>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	0e9b      	lsrs	r3, r3, #26
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	e00a      	b.n	8007934 <HAL_ADCEx_InjectedConfigChannel+0x36c>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007926:	fa93 f3a3 	rbit	r3, r3
 800792a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800792c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800792e:	fab3 f383 	clz	r3, r3
 8007932:	b2db      	uxtb	r3, r3
 8007934:	429a      	cmp	r2, r3
 8007936:	d106      	bne.n	8007946 <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2200      	movs	r2, #0
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff fb51 	bl	8006fe8 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2101      	movs	r1, #1
 800794c:	4618      	mov	r0, r3
 800794e:	f7ff fb37 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 8007952:	4603      	mov	r3, r0
 8007954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2101      	movs	r1, #1
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fb2c 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 8007968:	4603      	mov	r3, r0
 800796a:	0e9b      	lsrs	r3, r3, #26
 800796c:	f003 021f 	and.w	r2, r3, #31
 8007970:	e010      	b.n	8007994 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2101      	movs	r1, #1
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fb21 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 800797e:	4603      	mov	r3, r0
 8007980:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007984:	fa93 f3a3 	rbit	r3, r3
 8007988:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800798a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800798c:	fab3 f383 	clz	r3, r3
 8007990:	b2db      	uxtb	r3, r3
 8007992:	461a      	mov	r2, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800799c:	2b00      	cmp	r3, #0
 800799e:	d105      	bne.n	80079ac <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	0e9b      	lsrs	r3, r3, #26
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	e00a      	b.n	80079c2 <HAL_ADCEx_InjectedConfigChannel+0x3fa>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b4:	fa93 f3a3 	rbit	r3, r3
 80079b8:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 80079ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079bc:	fab3 f383 	clz	r3, r3
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d106      	bne.n	80079d4 <HAL_ADCEx_InjectedConfigChannel+0x40c>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2200      	movs	r2, #0
 80079cc:	2101      	movs	r1, #1
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff fb0a 	bl	8006fe8 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2102      	movs	r1, #2
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff faf0 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10a      	bne.n	8007a00 <HAL_ADCEx_InjectedConfigChannel+0x438>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2102      	movs	r1, #2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff fae5 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 80079f6:	4603      	mov	r3, r0
 80079f8:	0e9b      	lsrs	r3, r3, #26
 80079fa:	f003 021f 	and.w	r2, r3, #31
 80079fe:	e010      	b.n	8007a22 <HAL_ADCEx_InjectedConfigChannel+0x45a>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2102      	movs	r1, #2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fada 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a12:	fa93 f3a3 	rbit	r3, r3
 8007a16:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8007a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a1a:	fab3 f383 	clz	r3, r3
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <HAL_ADCEx_InjectedConfigChannel+0x472>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	0e9b      	lsrs	r3, r3, #26
 8007a34:	f003 031f 	and.w	r3, r3, #31
 8007a38:	e00a      	b.n	8007a50 <HAL_ADCEx_InjectedConfigChannel+0x488>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a42:	fa93 f3a3 	rbit	r3, r3
 8007a46:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a4a:	fab3 f383 	clz	r3, r3
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d106      	bne.n	8007a62 <HAL_ADCEx_InjectedConfigChannel+0x49a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2102      	movs	r1, #2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff fac3 	bl	8006fe8 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2103      	movs	r1, #3
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff faa9 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2103      	movs	r1, #3
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff fa9e 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 8007a84:	4603      	mov	r3, r0
 8007a86:	0e9b      	lsrs	r3, r3, #26
 8007a88:	f003 021f 	and.w	r2, r3, #31
 8007a8c:	e010      	b.n	8007ab0 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2103      	movs	r1, #3
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff fa93 	bl	8006fc0 <LL_ADC_GetOffsetChannel>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa0:	fa93 f3a3 	rbit	r3, r3
 8007aa4:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8007aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa8:	fab3 f383 	clz	r3, r3
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d105      	bne.n	8007ac8 <HAL_ADCEx_InjectedConfigChannel+0x500>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	0e9b      	lsrs	r3, r3, #26
 8007ac2:	f003 031f 	and.w	r3, r3, #31
 8007ac6:	e00a      	b.n	8007ade <HAL_ADCEx_InjectedConfigChannel+0x516>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad0:	fa93 f3a3 	rbit	r3, r3
 8007ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad8:	fab3 f383 	clz	r3, r3
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d106      	bne.n	8007af0 <HAL_ADCEx_InjectedConfigChannel+0x528>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2103      	movs	r1, #3
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fa7c 	bl	8006fe8 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fb23 	bl	8007140 <LL_ADC_IsEnabled>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f040 810c 	bne.w	8007d1a <HAL_ADCEx_InjectedConfigChannel+0x752>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	6819      	ldr	r1, [r3, #0]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f7ff faf2 	bl	80070f8 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4aa8      	ldr	r2, [pc, #672]	; (8007dbc <HAL_ADCEx_InjectedConfigChannel+0x7f4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	f040 80fd 	bne.w	8007d1a <HAL_ADCEx_InjectedConfigChannel+0x752>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10b      	bne.n	8007b48 <HAL_ADCEx_InjectedConfigChannel+0x580>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	0e9b      	lsrs	r3, r3, #26
 8007b36:	3301      	adds	r3, #1
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2b09      	cmp	r3, #9
 8007b3e:	bf94      	ite	ls
 8007b40:	2301      	movls	r3, #1
 8007b42:	2300      	movhi	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	e012      	b.n	8007b6e <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b50:	fa93 f3a3 	rbit	r3, r3
 8007b54:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b58:	fab3 f383 	clz	r3, r3
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	3301      	adds	r3, #1
 8007b60:	f003 031f 	and.w	r3, r3, #31
 8007b64:	2b09      	cmp	r3, #9
 8007b66:	bf94      	ite	ls
 8007b68:	2301      	movls	r3, #1
 8007b6a:	2300      	movhi	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d064      	beq.n	8007c3c <HAL_ADCEx_InjectedConfigChannel+0x674>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d107      	bne.n	8007b8e <HAL_ADCEx_InjectedConfigChannel+0x5c6>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	0e9b      	lsrs	r3, r3, #26
 8007b84:	3301      	adds	r3, #1
 8007b86:	069b      	lsls	r3, r3, #26
 8007b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007b8c:	e00e      	b.n	8007bac <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b96:	fa93 f3a3 	rbit	r3, r3
 8007b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	fab3 f383 	clz	r3, r3
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	069b      	lsls	r3, r3, #26
 8007ba8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <HAL_ADCEx_InjectedConfigChannel+0x604>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	0e9b      	lsrs	r3, r3, #26
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	f003 031f 	and.w	r3, r3, #31
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bca:	e010      	b.n	8007bee <HAL_ADCEx_InjectedConfigChannel+0x626>
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd4:	fa93 f3a3 	rbit	r3, r3
 8007bd8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	fab3 f383 	clz	r3, r3
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	3301      	adds	r3, #1
 8007be4:	f003 031f 	and.w	r3, r3, #31
 8007be8:	2101      	movs	r1, #1
 8007bea:	fa01 f303 	lsl.w	r3, r1, r3
 8007bee:	ea42 0103 	orr.w	r1, r2, r3
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <HAL_ADCEx_InjectedConfigChannel+0x64c>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	0e9b      	lsrs	r3, r3, #26
 8007c04:	3301      	adds	r3, #1
 8007c06:	f003 021f 	and.w	r2, r3, #31
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	4413      	add	r3, r2
 8007c10:	051b      	lsls	r3, r3, #20
 8007c12:	e011      	b.n	8007c38 <HAL_ADCEx_InjectedConfigChannel+0x670>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	fa93 f3a3 	rbit	r3, r3
 8007c20:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	fab3 f383 	clz	r3, r3
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	f003 021f 	and.w	r2, r3, #31
 8007c30:	4613      	mov	r3, r2
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	4413      	add	r3, r2
 8007c36:	051b      	lsls	r3, r3, #20
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	e069      	b.n	8007d10 <HAL_ADCEx_InjectedConfigChannel+0x748>
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d107      	bne.n	8007c58 <HAL_ADCEx_InjectedConfigChannel+0x690>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	0e9b      	lsrs	r3, r3, #26
 8007c4e:	3301      	adds	r3, #1
 8007c50:	069b      	lsls	r3, r3, #26
 8007c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c56:	e00e      	b.n	8007c76 <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	fa93 f3a3 	rbit	r3, r3
 8007c64:	623b      	str	r3, [r7, #32]
  return result;
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	fab3 f383 	clz	r3, r3
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	3301      	adds	r3, #1
 8007c70:	069b      	lsls	r3, r3, #26
 8007c72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	0e9b      	lsrs	r3, r3, #26
 8007c88:	3301      	adds	r3, #1
 8007c8a:	f003 031f 	and.w	r3, r3, #31
 8007c8e:	2101      	movs	r1, #1
 8007c90:	fa01 f303 	lsl.w	r3, r1, r3
 8007c94:	e010      	b.n	8007cb8 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	fa93 f3a3 	rbit	r3, r3
 8007ca2:	61bb      	str	r3, [r7, #24]
  return result;
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	fab3 f383 	clz	r3, r3
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	3301      	adds	r3, #1
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb8:	ea42 0103 	orr.w	r1, r2, r3
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10d      	bne.n	8007ce4 <HAL_ADCEx_InjectedConfigChannel+0x71c>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	0e9b      	lsrs	r3, r3, #26
 8007cce:	3301      	adds	r3, #1
 8007cd0:	f003 021f 	and.w	r2, r3, #31
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	4413      	add	r3, r2
 8007cda:	3b1e      	subs	r3, #30
 8007cdc:	051b      	lsls	r3, r3, #20
 8007cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ce2:	e014      	b.n	8007d0e <HAL_ADCEx_InjectedConfigChannel+0x746>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	fa93 f3a3 	rbit	r3, r3
 8007cf0:	613b      	str	r3, [r7, #16]
  return result;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	fab3 f383 	clz	r3, r3
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	f003 021f 	and.w	r2, r3, #31
 8007d00:	4613      	mov	r3, r2
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	4413      	add	r3, r2
 8007d06:	3b1e      	subs	r3, #30
 8007d08:	051b      	lsls	r3, r3, #20
 8007d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	6892      	ldr	r2, [r2, #8]
 8007d14:	4619      	mov	r1, r3
 8007d16:	f7ff f9c6 	bl	80070a6 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4b28      	ldr	r3, [pc, #160]	; (8007dc0 <HAL_ADCEx_InjectedConfigChannel+0x7f8>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d072      	beq.n	8007e0c <HAL_ADCEx_InjectedConfigChannel+0x844>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d26:	4827      	ldr	r0, [pc, #156]	; (8007dc4 <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8007d28:	f7ff f919 	bl	8006f5e <LL_ADC_GetCommonPathInternalCh>
 8007d2c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a24      	ldr	r2, [pc, #144]	; (8007dc8 <HAL_ADCEx_InjectedConfigChannel+0x800>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d126      	bne.n	8007d88 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007d3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d120      	bne.n	8007d88 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a20      	ldr	r2, [pc, #128]	; (8007dcc <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d15d      	bne.n	8007e0c <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d58:	4619      	mov	r1, r3
 8007d5a:	481a      	ldr	r0, [pc, #104]	; (8007dc4 <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8007d5c:	f7ff f8ec 	bl	8006f38 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007d60:	4b1b      	ldr	r3, [pc, #108]	; (8007dd0 <HAL_ADCEx_InjectedConfigChannel+0x808>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	099b      	lsrs	r3, r3, #6
 8007d66:	4a1b      	ldr	r2, [pc, #108]	; (8007dd4 <HAL_ADCEx_InjectedConfigChannel+0x80c>)
 8007d68:	fba2 2303 	umull	r2, r3, r2, r3
 8007d6c:	099a      	lsrs	r2, r3, #6
 8007d6e:	4613      	mov	r3, r2
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8007d78:	e002      	b.n	8007d80 <HAL_ADCEx_InjectedConfigChannel+0x7b8>
        {
          wait_loop_index--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1f9      	bne.n	8007d7a <HAL_ADCEx_InjectedConfigChannel+0x7b2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007d86:	e041      	b.n	8007e0c <HAL_ADCEx_InjectedConfigChannel+0x844>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a12      	ldr	r2, [pc, #72]	; (8007dd8 <HAL_ADCEx_InjectedConfigChannel+0x810>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d124      	bne.n	8007ddc <HAL_ADCEx_InjectedConfigChannel+0x814>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d11e      	bne.n	8007ddc <HAL_ADCEx_InjectedConfigChannel+0x814>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d131      	bne.n	8007e0c <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007db0:	4619      	mov	r1, r3
 8007db2:	4804      	ldr	r0, [pc, #16]	; (8007dc4 <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8007db4:	f7ff f8c0 	bl	8006f38 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007db8:	e028      	b.n	8007e0c <HAL_ADCEx_InjectedConfigChannel+0x844>
 8007dba:	bf00      	nop
 8007dbc:	407f0000 	.word	0x407f0000
 8007dc0:	80080000 	.word	0x80080000
 8007dc4:	50040300 	.word	0x50040300
 8007dc8:	c7520000 	.word	0xc7520000
 8007dcc:	50040000 	.word	0x50040000
 8007dd0:	20000038 	.word	0x20000038
 8007dd4:	053e2d63 	.word	0x053e2d63
 8007dd8:	cb840000 	.word	0xcb840000
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a0f      	ldr	r2, [pc, #60]	; (8007e20 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d112      	bne.n	8007e0c <HAL_ADCEx_InjectedConfigChannel+0x844>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10c      	bne.n	8007e0c <HAL_ADCEx_InjectedConfigChannel+0x844>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a0b      	ldr	r2, [pc, #44]	; (8007e24 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d107      	bne.n	8007e0c <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e04:	4619      	mov	r1, r3
 8007e06:	4808      	ldr	r0, [pc, #32]	; (8007e28 <HAL_ADCEx_InjectedConfigChannel+0x860>)
 8007e08:	f7ff f896 	bl	8006f38 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007e14:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	37a0      	adds	r7, #160	; 0xa0
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	80000001 	.word	0x80000001
 8007e24:	50040000 	.word	0x50040000
 8007e28:	50040300 	.word	0x50040300

08007e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e3c:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <__NVIC_SetPriorityGrouping+0x44>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e48:	4013      	ands	r3, r2
 8007e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e5e:	4a04      	ldr	r2, [pc, #16]	; (8007e70 <__NVIC_SetPriorityGrouping+0x44>)
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	60d3      	str	r3, [r2, #12]
}
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	e000ed00 	.word	0xe000ed00

08007e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e78:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <__NVIC_GetPriorityGrouping+0x18>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	f003 0307 	and.w	r3, r3, #7
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	db0b      	blt.n	8007eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	f003 021f 	and.w	r2, r3, #31
 8007ea8:	4907      	ldr	r1, [pc, #28]	; (8007ec8 <__NVIC_EnableIRQ+0x38>)
 8007eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eae:	095b      	lsrs	r3, r3, #5
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8007eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	e000e100 	.word	0xe000e100

08007ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	db0a      	blt.n	8007ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	490c      	ldr	r1, [pc, #48]	; (8007f18 <__NVIC_SetPriority+0x4c>)
 8007ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eea:	0112      	lsls	r2, r2, #4
 8007eec:	b2d2      	uxtb	r2, r2
 8007eee:	440b      	add	r3, r1
 8007ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ef4:	e00a      	b.n	8007f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	4908      	ldr	r1, [pc, #32]	; (8007f1c <__NVIC_SetPriority+0x50>)
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	3b04      	subs	r3, #4
 8007f04:	0112      	lsls	r2, r2, #4
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	440b      	add	r3, r1
 8007f0a:	761a      	strb	r2, [r3, #24]
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	e000e100 	.word	0xe000e100
 8007f1c:	e000ed00 	.word	0xe000ed00

08007f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b089      	sub	sp, #36	; 0x24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f1c3 0307 	rsb	r3, r3, #7
 8007f3a:	2b04      	cmp	r3, #4
 8007f3c:	bf28      	it	cs
 8007f3e:	2304      	movcs	r3, #4
 8007f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	3304      	adds	r3, #4
 8007f46:	2b06      	cmp	r3, #6
 8007f48:	d902      	bls.n	8007f50 <NVIC_EncodePriority+0x30>
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	3b03      	subs	r3, #3
 8007f4e:	e000      	b.n	8007f52 <NVIC_EncodePriority+0x32>
 8007f50:	2300      	movs	r3, #0
 8007f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	43da      	mvns	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	401a      	ands	r2, r3
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f68:	f04f 31ff 	mov.w	r1, #4294967295
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f72:	43d9      	mvns	r1, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f78:	4313      	orrs	r3, r2
         );
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3724      	adds	r7, #36	; 0x24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
	...

08007f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f98:	d301      	bcc.n	8007f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e00f      	b.n	8007fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f9e:	4a0a      	ldr	r2, [pc, #40]	; (8007fc8 <SysTick_Config+0x40>)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fa6:	210f      	movs	r1, #15
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	f7ff ff8e 	bl	8007ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fb0:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <SysTick_Config+0x40>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fb6:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <SysTick_Config+0x40>)
 8007fb8:	2207      	movs	r2, #7
 8007fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	e000e010 	.word	0xe000e010

08007fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff ff29 	bl	8007e2c <__NVIC_SetPriorityGrouping>
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	4603      	mov	r3, r0
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
 8007fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ff4:	f7ff ff3e 	bl	8007e74 <__NVIC_GetPriorityGrouping>
 8007ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	6978      	ldr	r0, [r7, #20]
 8008000:	f7ff ff8e 	bl	8007f20 <NVIC_EncodePriority>
 8008004:	4602      	mov	r2, r0
 8008006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800800a:	4611      	mov	r1, r2
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff ff5d 	bl	8007ecc <__NVIC_SetPriority>
}
 8008012:	bf00      	nop
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	4603      	mov	r3, r0
 8008022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff ff31 	bl	8007e90 <__NVIC_EnableIRQ>
}
 800802e:	bf00      	nop
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff ffa2 	bl	8007f88 <SysTick_Config>
 8008044:	4603      	mov	r3, r0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e08d      	b.n	800817e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	4b47      	ldr	r3, [pc, #284]	; (8008188 <HAL_DMA_Init+0x138>)
 800806a:	429a      	cmp	r2, r3
 800806c:	d80f      	bhi.n	800808e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	4b45      	ldr	r3, [pc, #276]	; (800818c <HAL_DMA_Init+0x13c>)
 8008076:	4413      	add	r3, r2
 8008078:	4a45      	ldr	r2, [pc, #276]	; (8008190 <HAL_DMA_Init+0x140>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	091b      	lsrs	r3, r3, #4
 8008080:	009a      	lsls	r2, r3, #2
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a42      	ldr	r2, [pc, #264]	; (8008194 <HAL_DMA_Init+0x144>)
 800808a:	641a      	str	r2, [r3, #64]	; 0x40
 800808c:	e00e      	b.n	80080ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	4b40      	ldr	r3, [pc, #256]	; (8008198 <HAL_DMA_Init+0x148>)
 8008096:	4413      	add	r3, r2
 8008098:	4a3d      	ldr	r2, [pc, #244]	; (8008190 <HAL_DMA_Init+0x140>)
 800809a:	fba2 2303 	umull	r2, r3, r2, r3
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	009a      	lsls	r2, r3, #2
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a3c      	ldr	r2, [pc, #240]	; (800819c <HAL_DMA_Init+0x14c>)
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80080c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80080d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f966 	bl	80083d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800810c:	d102      	bne.n	8008114 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008128:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d010      	beq.n	8008154 <HAL_DMA_Init+0x104>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	2b04      	cmp	r3, #4
 8008138:	d80c      	bhi.n	8008154 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f986 	bl	800844c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008150:	605a      	str	r2, [r3, #4]
 8008152:	e008      	b.n	8008166 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40020407 	.word	0x40020407
 800818c:	bffdfff8 	.word	0xbffdfff8
 8008190:	cccccccd 	.word	0xcccccccd
 8008194:	40020000 	.word	0x40020000
 8008198:	bffdfbf8 	.word	0xbffdfbf8
 800819c:	40020400 	.word	0x40020400

080081a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d101      	bne.n	80081c0 <HAL_DMA_Start_IT+0x20>
 80081bc:	2302      	movs	r3, #2
 80081be:	e066      	b.n	800828e <HAL_DMA_Start_IT+0xee>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d155      	bne.n	8008280 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0201 	bic.w	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f8ab 	bl	8008354 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	2b00      	cmp	r3, #0
 8008204:	d008      	beq.n	8008218 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f042 020e 	orr.w	r2, r2, #14
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	e00f      	b.n	8008238 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0204 	bic.w	r2, r2, #4
 8008226:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 020a 	orr.w	r2, r2, #10
 8008236:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008254:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800826c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0201 	orr.w	r2, r2, #1
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e005      	b.n	800828c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008288:	2302      	movs	r3, #2
 800828a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800828c:	7dfb      	ldrb	r3, [r7, #23]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3718      	adds	r7, #24
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d005      	beq.n	80082ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2204      	movs	r2, #4
 80082b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	73fb      	strb	r3, [r7, #15]
 80082b8:	e047      	b.n	800834a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 020e 	bic.w	r2, r2, #14
 80082c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ee:	f003 021c 	and.w	r2, r3, #28
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	2101      	movs	r1, #1
 80082f8:	fa01 f202 	lsl.w	r2, r1, r2
 80082fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008306:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00c      	beq.n	800832a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800831e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008328:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
    }
  }
  return status;
 800834a:	7bfb      	ldrb	r3, [r7, #15]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800836a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008370:	2b00      	cmp	r3, #0
 8008372:	d004      	beq.n	800837e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800837c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008382:	f003 021c 	and.w	r2, r3, #28
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	2101      	movs	r1, #1
 800838c:	fa01 f202 	lsl.w	r2, r1, r2
 8008390:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b10      	cmp	r3, #16
 80083a0:	d108      	bne.n	80083b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80083b2:	e007      	b.n	80083c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	60da      	str	r2, [r3, #12]
}
 80083c4:	bf00      	nop
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	4b17      	ldr	r3, [pc, #92]	; (800843c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d80a      	bhi.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e8:	089b      	lsrs	r3, r3, #2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083f0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6493      	str	r3, [r2, #72]	; 0x48
 80083f8:	e007      	b.n	800840a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fe:	089b      	lsrs	r3, r3, #2
 8008400:	009a      	lsls	r2, r3, #2
 8008402:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008404:	4413      	add	r3, r2
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	b2db      	uxtb	r3, r3
 8008410:	3b08      	subs	r3, #8
 8008412:	4a0c      	ldr	r2, [pc, #48]	; (8008444 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008414:	fba2 2303 	umull	r2, r3, r2, r3
 8008418:	091b      	lsrs	r3, r3, #4
 800841a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a0a      	ldr	r2, [pc, #40]	; (8008448 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008420:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f003 031f 	and.w	r3, r3, #31
 8008428:	2201      	movs	r2, #1
 800842a:	409a      	lsls	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008430:	bf00      	nop
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	40020407 	.word	0x40020407
 8008440:	4002081c 	.word	0x4002081c
 8008444:	cccccccd 	.word	0xcccccccd
 8008448:	40020880 	.word	0x40020880

0800844c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	4b0b      	ldr	r3, [pc, #44]	; (800848c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	461a      	mov	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a08      	ldr	r2, [pc, #32]	; (8008490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800846e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3b01      	subs	r3, #1
 8008474:	f003 0303 	and.w	r3, r3, #3
 8008478:	2201      	movs	r2, #1
 800847a:	409a      	lsls	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008480:	bf00      	nop
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	1000823f 	.word	0x1000823f
 8008490:	40020940 	.word	0x40020940

08008494 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	460b      	mov	r3, r1
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80084a6:	7afb      	ldrb	r3, [r7, #11]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d103      	bne.n	80084b4 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	605a      	str	r2, [r3, #4]
      break;
 80084b2:	e002      	b.n	80084ba <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	75fb      	strb	r3, [r7, #23]
      break;
 80084b8:	bf00      	nop
  }

  return status;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e003      	b.n	80084e4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80084e2:	2300      	movs	r3, #0
  }
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	0c1b      	lsrs	r3, r3, #16
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 031f 	and.w	r3, r3, #31
 800850c:	2201      	movs	r2, #1
 800850e:	fa02 f303 	lsl.w	r3, r2, r3
 8008512:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	4b0c      	ldr	r3, [pc, #48]	; (800854c <HAL_EXTI_IRQHandler+0x5c>)
 800851a:	4413      	add	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	4013      	ands	r3, r2
 8008526:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d009      	beq.n	8008542 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	4798      	blx	r3
    }
  }
}
 8008542:	bf00      	nop
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40010414 	.word	0x40010414

08008550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800855e:	e166      	b.n	800882e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	2101      	movs	r1, #1
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	fa01 f303 	lsl.w	r3, r1, r3
 800856c:	4013      	ands	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 8158 	beq.w	8008828 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d003      	beq.n	8008588 <HAL_GPIO_Init+0x38>
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	2b12      	cmp	r3, #18
 8008586:	d123      	bne.n	80085d0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	08da      	lsrs	r2, r3, #3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3208      	adds	r2, #8
 8008590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008594:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	220f      	movs	r2, #15
 80085a0:	fa02 f303 	lsl.w	r3, r2, r3
 80085a4:	43db      	mvns	r3, r3
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4013      	ands	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	691a      	ldr	r2, [r3, #16]
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	fa02 f303 	lsl.w	r3, r2, r3
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	08da      	lsrs	r2, r3, #3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3208      	adds	r2, #8
 80085ca:	6939      	ldr	r1, [r7, #16]
 80085cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	2203      	movs	r2, #3
 80085dc:	fa02 f303 	lsl.w	r3, r2, r3
 80085e0:	43db      	mvns	r3, r3
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	4013      	ands	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f003 0203 	and.w	r2, r3, #3
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	fa02 f303 	lsl.w	r3, r2, r3
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d00b      	beq.n	8008624 <HAL_GPIO_Init+0xd4>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b02      	cmp	r3, #2
 8008612:	d007      	beq.n	8008624 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008618:	2b11      	cmp	r3, #17
 800861a:	d003      	beq.n	8008624 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	2b12      	cmp	r3, #18
 8008622:	d130      	bne.n	8008686 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	2203      	movs	r2, #3
 8008630:	fa02 f303 	lsl.w	r3, r2, r3
 8008634:	43db      	mvns	r3, r3
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	4013      	ands	r3, r2
 800863a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	fa02 f303 	lsl.w	r3, r2, r3
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	4313      	orrs	r3, r2
 800864c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800865a:	2201      	movs	r2, #1
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	fa02 f303 	lsl.w	r3, r2, r3
 8008662:	43db      	mvns	r3, r3
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4013      	ands	r3, r2
 8008668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	091b      	lsrs	r3, r3, #4
 8008670:	f003 0201 	and.w	r2, r3, #1
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	fa02 f303 	lsl.w	r3, r2, r3
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	4313      	orrs	r3, r2
 800867e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	2203      	movs	r2, #3
 8008692:	fa02 f303 	lsl.w	r3, r2, r3
 8008696:	43db      	mvns	r3, r3
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	4013      	ands	r3, r2
 800869c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	689a      	ldr	r2, [r3, #8]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	fa02 f303 	lsl.w	r3, r2, r3
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 80b2 	beq.w	8008828 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086c4:	4b61      	ldr	r3, [pc, #388]	; (800884c <HAL_GPIO_Init+0x2fc>)
 80086c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086c8:	4a60      	ldr	r2, [pc, #384]	; (800884c <HAL_GPIO_Init+0x2fc>)
 80086ca:	f043 0301 	orr.w	r3, r3, #1
 80086ce:	6613      	str	r3, [r2, #96]	; 0x60
 80086d0:	4b5e      	ldr	r3, [pc, #376]	; (800884c <HAL_GPIO_Init+0x2fc>)
 80086d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	60bb      	str	r3, [r7, #8]
 80086da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80086dc:	4a5c      	ldr	r2, [pc, #368]	; (8008850 <HAL_GPIO_Init+0x300>)
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	089b      	lsrs	r3, r3, #2
 80086e2:	3302      	adds	r3, #2
 80086e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f003 0303 	and.w	r3, r3, #3
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	220f      	movs	r2, #15
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	43db      	mvns	r3, r3
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4013      	ands	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008706:	d02b      	beq.n	8008760 <HAL_GPIO_Init+0x210>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a52      	ldr	r2, [pc, #328]	; (8008854 <HAL_GPIO_Init+0x304>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d025      	beq.n	800875c <HAL_GPIO_Init+0x20c>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a51      	ldr	r2, [pc, #324]	; (8008858 <HAL_GPIO_Init+0x308>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d01f      	beq.n	8008758 <HAL_GPIO_Init+0x208>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a50      	ldr	r2, [pc, #320]	; (800885c <HAL_GPIO_Init+0x30c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d019      	beq.n	8008754 <HAL_GPIO_Init+0x204>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a4f      	ldr	r2, [pc, #316]	; (8008860 <HAL_GPIO_Init+0x310>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d013      	beq.n	8008750 <HAL_GPIO_Init+0x200>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a4e      	ldr	r2, [pc, #312]	; (8008864 <HAL_GPIO_Init+0x314>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d00d      	beq.n	800874c <HAL_GPIO_Init+0x1fc>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a4d      	ldr	r2, [pc, #308]	; (8008868 <HAL_GPIO_Init+0x318>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d007      	beq.n	8008748 <HAL_GPIO_Init+0x1f8>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a4c      	ldr	r2, [pc, #304]	; (800886c <HAL_GPIO_Init+0x31c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d101      	bne.n	8008744 <HAL_GPIO_Init+0x1f4>
 8008740:	2307      	movs	r3, #7
 8008742:	e00e      	b.n	8008762 <HAL_GPIO_Init+0x212>
 8008744:	2308      	movs	r3, #8
 8008746:	e00c      	b.n	8008762 <HAL_GPIO_Init+0x212>
 8008748:	2306      	movs	r3, #6
 800874a:	e00a      	b.n	8008762 <HAL_GPIO_Init+0x212>
 800874c:	2305      	movs	r3, #5
 800874e:	e008      	b.n	8008762 <HAL_GPIO_Init+0x212>
 8008750:	2304      	movs	r3, #4
 8008752:	e006      	b.n	8008762 <HAL_GPIO_Init+0x212>
 8008754:	2303      	movs	r3, #3
 8008756:	e004      	b.n	8008762 <HAL_GPIO_Init+0x212>
 8008758:	2302      	movs	r3, #2
 800875a:	e002      	b.n	8008762 <HAL_GPIO_Init+0x212>
 800875c:	2301      	movs	r3, #1
 800875e:	e000      	b.n	8008762 <HAL_GPIO_Init+0x212>
 8008760:	2300      	movs	r3, #0
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	f002 0203 	and.w	r2, r2, #3
 8008768:	0092      	lsls	r2, r2, #2
 800876a:	4093      	lsls	r3, r2
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008772:	4937      	ldr	r1, [pc, #220]	; (8008850 <HAL_GPIO_Init+0x300>)
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	089b      	lsrs	r3, r3, #2
 8008778:	3302      	adds	r3, #2
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008780:	4b3b      	ldr	r3, [pc, #236]	; (8008870 <HAL_GPIO_Init+0x320>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	43db      	mvns	r3, r3
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4013      	ands	r3, r2
 800878e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80087a4:	4a32      	ldr	r2, [pc, #200]	; (8008870 <HAL_GPIO_Init+0x320>)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80087aa:	4b31      	ldr	r3, [pc, #196]	; (8008870 <HAL_GPIO_Init+0x320>)
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	43db      	mvns	r3, r3
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	4013      	ands	r3, r2
 80087b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80087ce:	4a28      	ldr	r2, [pc, #160]	; (8008870 <HAL_GPIO_Init+0x320>)
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087d4:	4b26      	ldr	r3, [pc, #152]	; (8008870 <HAL_GPIO_Init+0x320>)
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	43db      	mvns	r3, r3
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	4013      	ands	r3, r2
 80087e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80087f8:	4a1d      	ldr	r2, [pc, #116]	; (8008870 <HAL_GPIO_Init+0x320>)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80087fe:	4b1c      	ldr	r3, [pc, #112]	; (8008870 <HAL_GPIO_Init+0x320>)
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	43db      	mvns	r3, r3
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4013      	ands	r3, r2
 800880c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008822:	4a13      	ldr	r2, [pc, #76]	; (8008870 <HAL_GPIO_Init+0x320>)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	3301      	adds	r3, #1
 800882c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	fa22 f303 	lsr.w	r3, r2, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	f47f ae91 	bne.w	8008560 <HAL_GPIO_Init+0x10>
  }
}
 800883e:	bf00      	nop
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	40021000 	.word	0x40021000
 8008850:	40010000 	.word	0x40010000
 8008854:	48000400 	.word	0x48000400
 8008858:	48000800 	.word	0x48000800
 800885c:	48000c00 	.word	0x48000c00
 8008860:	48001000 	.word	0x48001000
 8008864:	48001400 	.word	0x48001400
 8008868:	48001800 	.word	0x48001800
 800886c:	48001c00 	.word	0x48001c00
 8008870:	40010400 	.word	0x40010400

08008874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	887b      	ldrh	r3, [r7, #2]
 8008886:	4013      	ands	r3, r2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800888c:	2301      	movs	r3, #1
 800888e:	73fb      	strb	r3, [r7, #15]
 8008890:	e001      	b.n	8008896 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	807b      	strh	r3, [r7, #2]
 80088b0:	4613      	mov	r3, r2
 80088b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088b4:	787b      	ldrb	r3, [r7, #1]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80088ba:	887a      	ldrh	r2, [r7, #2]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80088c0:	e002      	b.n	80088c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80088c2:	887a      	ldrh	r2, [r7, #2]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	695a      	ldr	r2, [r3, #20]
 80088e4:	887b      	ldrh	r3, [r7, #2]
 80088e6:	4013      	ands	r3, r2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80088ec:	887a      	ldrh	r2, [r7, #2]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80088f2:	e002      	b.n	80088fa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80088f4:	887a      	ldrh	r2, [r7, #2]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	619a      	str	r2, [r3, #24]
}
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
	...

08008908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008912:	4b08      	ldr	r3, [pc, #32]	; (8008934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008914:	695a      	ldr	r2, [r3, #20]
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	4013      	ands	r3, r2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d006      	beq.n	800892c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800891e:	4a05      	ldr	r2, [pc, #20]	; (8008934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008920:	88fb      	ldrh	r3, [r7, #6]
 8008922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008924:	88fb      	ldrh	r3, [r7, #6]
 8008926:	4618      	mov	r0, r3
 8008928:	f7fa fd8e 	bl	8003448 <HAL_GPIO_EXTI_Callback>
  }
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	40010400 	.word	0x40010400

08008938 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008954:	2b00      	cmp	r3, #0
 8008956:	d005      	beq.n	8008964 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	4798      	blx	r3
  }
}
 8008964:	bf00      	nop
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	0a1b      	lsrs	r3, r3, #8
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d010      	beq.n	80089b2 <HAL_I2C_ER_IRQHandler+0x46>
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	09db      	lsrs	r3, r3, #7
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a0:	f043 0201 	orr.w	r2, r3, #1
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	0a9b      	lsrs	r3, r3, #10
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d010      	beq.n	80089e0 <HAL_I2C_ER_IRQHandler+0x74>
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	09db      	lsrs	r3, r3, #7
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ce:	f043 0208 	orr.w	r2, r3, #8
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	0a5b      	lsrs	r3, r3, #9
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d010      	beq.n	8008a0e <HAL_I2C_ER_IRQHandler+0xa2>
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	09db      	lsrs	r3, r3, #7
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00a      	beq.n	8008a0e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fc:	f043 0202 	orr.w	r2, r3, #2
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a0c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f003 030b 	and.w	r3, r3, #11
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008a1e:	68f9      	ldr	r1, [r7, #12]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 faf9 	bl	8009018 <I2C_ITError>
  }
}
 8008a26:	bf00      	nop
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b086      	sub	sp, #24
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <I2C_Slave_ISR_IT+0x24>
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e0ec      	b.n	8008c2c <I2C_Slave_ISR_IT+0x1fe>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	095b      	lsrs	r3, r3, #5
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <I2C_Slave_ISR_IT+0x4c>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	095b      	lsrs	r3, r3, #5
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008a72:	6939      	ldr	r1, [r7, #16]
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 f99f 	bl	8008db8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	091b      	lsrs	r3, r3, #4
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d04d      	beq.n	8008b22 <I2C_Slave_ISR_IT+0xf4>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	091b      	lsrs	r3, r3, #4
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d047      	beq.n	8008b22 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d128      	bne.n	8008aee <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b28      	cmp	r3, #40	; 0x28
 8008aa6:	d108      	bne.n	8008aba <I2C_Slave_ISR_IT+0x8c>
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aae:	d104      	bne.n	8008aba <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ab0:	6939      	ldr	r1, [r7, #16]
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 fa5a 	bl	8008f6c <I2C_ITListenCplt>
 8008ab8:	e032      	b.n	8008b20 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b29      	cmp	r3, #41	; 0x29
 8008ac4:	d10e      	bne.n	8008ae4 <I2C_Slave_ISR_IT+0xb6>
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008acc:	d00a      	beq.n	8008ae4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2210      	movs	r2, #16
 8008ad4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fb60 	bl	800919c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 f92b 	bl	8008d38 <I2C_ITSlaveSeqCplt>
 8008ae2:	e01d      	b.n	8008b20 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2210      	movs	r2, #16
 8008aea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008aec:	e096      	b.n	8008c1c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2210      	movs	r2, #16
 8008af4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afa:	f043 0204 	orr.w	r2, r3, #4
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d004      	beq.n	8008b12 <I2C_Slave_ISR_IT+0xe4>
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b0e:	f040 8085 	bne.w	8008c1c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b16:	4619      	mov	r1, r3
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 fa7d 	bl	8009018 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008b1e:	e07d      	b.n	8008c1c <I2C_Slave_ISR_IT+0x1ee>
 8008b20:	e07c      	b.n	8008c1c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	089b      	lsrs	r3, r3, #2
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d030      	beq.n	8008b90 <I2C_Slave_ISR_IT+0x162>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	089b      	lsrs	r3, r3, #2
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d02a      	beq.n	8008b90 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d018      	beq.n	8008b76 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b60:	3b01      	subs	r3, #1
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d14f      	bne.n	8008c20 <I2C_Slave_ISR_IT+0x1f2>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b86:	d04b      	beq.n	8008c20 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f8d5 	bl	8008d38 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008b8e:	e047      	b.n	8008c20 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	08db      	lsrs	r3, r3, #3
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <I2C_Slave_ISR_IT+0x184>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	08db      	lsrs	r3, r3, #3
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d004      	beq.n	8008bb2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008ba8:	6939      	ldr	r1, [r7, #16]
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f842 	bl	8008c34 <I2C_ITAddrCplt>
 8008bb0:	e037      	b.n	8008c22 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d031      	beq.n	8008c22 <I2C_Slave_ISR_IT+0x1f4>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	085b      	lsrs	r3, r3, #1
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d02b      	beq.n	8008c22 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d018      	beq.n	8008c06 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	781a      	ldrb	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	851a      	strh	r2, [r3, #40]	; 0x28
 8008c04:	e00d      	b.n	8008c22 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c0c:	d002      	beq.n	8008c14 <I2C_Slave_ISR_IT+0x1e6>
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d106      	bne.n	8008c22 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 f88f 	bl	8008d38 <I2C_ITSlaveSeqCplt>
 8008c1a:	e002      	b.n	8008c22 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008c1c:	bf00      	nop
 8008c1e:	e000      	b.n	8008c22 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008c20:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c4a:	2b28      	cmp	r3, #40	; 0x28
 8008c4c:	d168      	bne.n	8008d20 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	0c1b      	lsrs	r3, r3, #16
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	0c1b      	lsrs	r3, r3, #16
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008c6c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c7a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008c88:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d137      	bne.n	8008d02 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008c92:	897b      	ldrh	r3, [r7, #10]
 8008c94:	09db      	lsrs	r3, r3, #7
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	89bb      	ldrh	r3, [r7, #12]
 8008c9a:	4053      	eors	r3, r2
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f003 0306 	and.w	r3, r3, #6
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d11c      	bne.n	8008ce0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008ca6:	897b      	ldrh	r3, [r7, #10]
 8008ca8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d139      	bne.n	8008d30 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2208      	movs	r2, #8
 8008cc8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd6:	89ba      	ldrh	r2, [r7, #12]
 8008cd8:	7bf9      	ldrb	r1, [r7, #15]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008cde:	e027      	b.n	8008d30 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8008ce0:	893b      	ldrh	r3, [r7, #8]
 8008ce2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008ce4:	2104      	movs	r1, #4
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 faa2 	bl	8009230 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf8:	89ba      	ldrh	r2, [r7, #12]
 8008cfa:	7bf9      	ldrb	r1, [r7, #15]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
}
 8008d00:	e016      	b.n	8008d30 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d02:	2104      	movs	r1, #4
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fa93 	bl	8009230 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d16:	89ba      	ldrh	r2, [r7, #12]
 8008d18:	7bf9      	ldrb	r1, [r7, #15]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	4798      	blx	r3
}
 8008d1e:	e007      	b.n	8008d30 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2208      	movs	r2, #8
 8008d26:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008d30:	bf00      	nop
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b29      	cmp	r3, #41	; 0x29
 8008d52:	d113      	bne.n	8008d7c <I2C_ITSlaveSeqCplt+0x44>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2228      	movs	r2, #40	; 0x28
 8008d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2221      	movs	r2, #33	; 0x21
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008d62:	2101      	movs	r1, #1
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fa63 	bl	8009230 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8008d7a:	e018      	b.n	8008dae <I2C_ITSlaveSeqCplt+0x76>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b2a      	cmp	r3, #42	; 0x2a
 8008d86:	d112      	bne.n	8008dae <I2C_ITSlaveSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2228      	movs	r2, #40	; 0x28
 8008d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2222      	movs	r2, #34	; 0x22
 8008d94:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008d96:	2102      	movs	r1, #2
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fa49 	bl	8009230 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	4798      	blx	r3
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008dd6:	2107      	movs	r1, #7
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fa29 	bl	8009230 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6859      	ldr	r1, [r3, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	4b5a      	ldr	r3, [pc, #360]	; (8008f64 <I2C_ITSlaveCplt+0x1ac>)
 8008dfa:	400b      	ands	r3, r1
 8008dfc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f9cc 	bl	800919c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	0b9b      	lsrs	r3, r3, #14
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d018      	beq.n	8008e4a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e26:	e010      	b.n	8008e4a <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	0bdb      	lsrs	r3, r3, #15
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00a      	beq.n	8008e4a <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d006      	beq.n	8008e4a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	089b      	lsrs	r3, r3, #2
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d020      	beq.n	8008e98 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f023 0304 	bic.w	r3, r3, #4
 8008e5c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00c      	beq.n	8008e98 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea6:	f043 0204 	orr.w	r2, r3, #4
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d010      	beq.n	8008eec <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f8a1 	bl	8009018 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b28      	cmp	r3, #40	; 0x28
 8008ee0:	d13b      	bne.n	8008f5a <I2C_ITSlaveCplt+0x1a2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f841 	bl	8008f6c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008eea:	e036      	b.n	8008f5a <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ef4:	d012      	beq.n	8008f1c <I2C_ITSlaveCplt+0x164>
    I2C_ITSlaveSeqCplt(hi2c);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff ff1e 	bl	8008d38 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a1a      	ldr	r2, [pc, #104]	; (8008f68 <I2C_ITSlaveCplt+0x1b0>)
 8008f00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2220      	movs	r2, #32
 8008f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	4798      	blx	r3
}
 8008f1a:	e01e      	b.n	8008f5a <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b22      	cmp	r3, #34	; 0x22
 8008f26:	d10c      	bne.n	8008f42 <I2C_ITSlaveCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	4798      	blx	r3
}
 8008f40:	e00b      	b.n	8008f5a <I2C_ITSlaveCplt+0x1a2>
    hi2c->State = HAL_I2C_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
}
 8008f5a:	bf00      	nop
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	fe00e800 	.word	0xfe00e800
 8008f68:	ffff0000 	.word	0xffff0000

08008f6c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a26      	ldr	r2, [pc, #152]	; (8009014 <I2C_ITListenCplt+0xa8>)
 8008f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	089b      	lsrs	r3, r3, #2
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d022      	beq.n	8008fea <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d012      	beq.n	8008fea <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	f043 0204 	orr.w	r2, r3, #4
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008fea:	2107      	movs	r1, #7
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f91f 	bl	8009230 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2210      	movs	r2, #16
 8008ff8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800900a:	bf00      	nop
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	ffff0000 	.word	0xffff0000

08009018 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009028:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a56      	ldr	r2, [pc, #344]	; (8009190 <I2C_ITError+0x178>)
 8009036:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	2b28      	cmp	r3, #40	; 0x28
 800904e:	d005      	beq.n	800905c <I2C_ITError+0x44>
 8009050:	7bfb      	ldrb	r3, [r7, #15]
 8009052:	2b29      	cmp	r3, #41	; 0x29
 8009054:	d002      	beq.n	800905c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	2b2a      	cmp	r3, #42	; 0x2a
 800905a:	d10e      	bne.n	800907a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800905c:	2103      	movs	r1, #3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f8e6 	bl	8009230 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2228      	movs	r2, #40	; 0x28
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a47      	ldr	r2, [pc, #284]	; (8009194 <I2C_ITError+0x17c>)
 8009076:	635a      	str	r2, [r3, #52]	; 0x34
 8009078:	e013      	b.n	80090a2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800907a:	2107      	movs	r1, #7
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f8d7 	bl	8009230 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b60      	cmp	r3, #96	; 0x60
 800908c:	d003      	beq.n	8009096 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2220      	movs	r2, #32
 8009092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090b0:	d123      	bne.n	80090fa <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d05e      	beq.n	8009188 <I2C_ITError+0x170>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	4a32      	ldr	r2, [pc, #200]	; (8009198 <I2C_ITError+0x180>)
 80090d0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff f8d9 	bl	8008296 <HAL_DMA_Abort_IT>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d04e      	beq.n	8009188 <I2C_ITError+0x170>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090f4:	4610      	mov	r0, r2
 80090f6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80090f8:	e046      	b.n	8009188 <I2C_ITError+0x170>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009108:	d123      	bne.n	8009152 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009118:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800911e:	2b00      	cmp	r3, #0
 8009120:	d032      	beq.n	8009188 <I2C_ITError+0x170>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009126:	4a1c      	ldr	r2, [pc, #112]	; (8009198 <I2C_ITError+0x180>)
 8009128:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009136:	4618      	mov	r0, r3
 8009138:	f7ff f8ad 	bl	8008296 <HAL_DMA_Abort_IT>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d022      	beq.n	8009188 <I2C_ITError+0x170>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800914c:	4610      	mov	r0, r2
 800914e:	4798      	blx	r3
}
 8009150:	e01a      	b.n	8009188 <I2C_ITError+0x170>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b60      	cmp	r3, #96	; 0x60
 800915c:	d10c      	bne.n	8009178 <I2C_ITError+0x160>
    hi2c->State = HAL_I2C_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->AbortCpltCallback(hi2c);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
}
 8009176:	e007      	b.n	8009188 <I2C_ITError+0x170>
    __HAL_UNLOCK(hi2c);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
}
 8009188:	bf00      	nop
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	ffff0000 	.word	0xffff0000
 8009194:	08008a2f 	.word	0x08008a2f
 8009198:	080091e5 	.word	0x080091e5

0800919c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d103      	bne.n	80091ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2200      	movs	r2, #0
 80091b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d007      	beq.n	80091d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699a      	ldr	r2, [r3, #24]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f042 0201 	orr.w	r2, r2, #1
 80091d6:	619a      	str	r2, [r3, #24]
  }
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f6:	2200      	movs	r2, #0
 80091f8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fe:	2200      	movs	r2, #0
 8009200:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b60      	cmp	r3, #96	; 0x60
 800920c:	d108      	bne.n	8009220 <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2220      	movs	r2, #32
 8009212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800921e:	e003      	b.n	8009228 <I2C_DMAAbort+0x44>
    hi2c->ErrorCallback(hi2c);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	4798      	blx	r3
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800923c:	2300      	movs	r3, #0
 800923e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009240:	887b      	ldrh	r3, [r7, #2]
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00f      	beq.n	800926a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009250:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009258:	b2db      	uxtb	r3, r3
 800925a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800925e:	2b28      	cmp	r3, #40	; 0x28
 8009260:	d003      	beq.n	800926a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009268:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800926a:	887b      	ldrh	r3, [r7, #2]
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00f      	beq.n	8009294 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800927a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009282:	b2db      	uxtb	r3, r3
 8009284:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009288:	2b28      	cmp	r3, #40	; 0x28
 800928a:	d003      	beq.n	8009294 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009292:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009294:	887b      	ldrh	r3, [r7, #2]
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80092a4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80092a6:	887b      	ldrh	r3, [r7, #2]
 80092a8:	f003 0311 	and.w	r3, r3, #17
 80092ac:	2b11      	cmp	r3, #17
 80092ae:	d103      	bne.n	80092b8 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80092b6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80092b8:	887b      	ldrh	r3, [r7, #2]
 80092ba:	f003 0312 	and.w	r3, r3, #18
 80092be:	2b12      	cmp	r3, #18
 80092c0:	d103      	bne.n	80092ca <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f043 0320 	orr.w	r3, r3, #32
 80092c8:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80092ca:	887b      	ldrh	r3, [r7, #2]
 80092cc:	f003 0312 	and.w	r3, r3, #18
 80092d0:	2b12      	cmp	r3, #18
 80092d2:	d103      	bne.n	80092dc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092da:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6819      	ldr	r1, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	43da      	mvns	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	400a      	ands	r2, r1
 80092ec:	601a      	str	r2, [r3, #0]
}
 80092ee:	bf00      	nop
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80092fa:	b590      	push	{r4, r7, lr}
 80092fc:	b08d      	sub	sp, #52	; 0x34
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4618      	mov	r0, r3
 8009312:	f009 f8dc 	bl	80124ce <USB_GetMode>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	f040 838f 	bne.w	8009a3c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f009 f840 	bl	80123a8 <USB_ReadInterrupts>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 8385 	beq.w	8009a3a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4618      	mov	r0, r3
 8009336:	f009 f837 	bl	80123a8 <USB_ReadInterrupts>
 800933a:	4603      	mov	r3, r0
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b02      	cmp	r3, #2
 8009342:	d107      	bne.n	8009354 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	695a      	ldr	r2, [r3, #20]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f002 0202 	and.w	r2, r2, #2
 8009352:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4618      	mov	r0, r3
 800935a:	f009 f825 	bl	80123a8 <USB_ReadInterrupts>
 800935e:	4603      	mov	r3, r0
 8009360:	f003 0310 	and.w	r3, r3, #16
 8009364:	2b10      	cmp	r3, #16
 8009366:	d161      	bne.n	800942c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 0210 	bic.w	r2, r2, #16
 8009376:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	f003 020f 	and.w	r2, r3, #15
 8009384:	4613      	mov	r3, r2
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	4413      	add	r3, r2
 8009394:	3304      	adds	r3, #4
 8009396:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	0c5b      	lsrs	r3, r3, #17
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d124      	bne.n	80093ee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80093aa:	4013      	ands	r3, r2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d035      	beq.n	800941c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	091b      	lsrs	r3, r3, #4
 80093b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80093ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093be:	b29b      	uxth	r3, r3
 80093c0:	461a      	mov	r2, r3
 80093c2:	6a38      	ldr	r0, [r7, #32]
 80093c4:	f008 fecd 	bl	8012162 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	091b      	lsrs	r3, r3, #4
 80093d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093d4:	441a      	add	r2, r3
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	091b      	lsrs	r3, r3, #4
 80093e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093e6:	441a      	add	r2, r3
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	619a      	str	r2, [r3, #24]
 80093ec:	e016      	b.n	800941c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	0c5b      	lsrs	r3, r3, #17
 80093f2:	f003 030f 	and.w	r3, r3, #15
 80093f6:	2b06      	cmp	r3, #6
 80093f8:	d110      	bne.n	800941c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009400:	2208      	movs	r2, #8
 8009402:	4619      	mov	r1, r3
 8009404:	6a38      	ldr	r0, [r7, #32]
 8009406:	f008 feac 	bl	8012162 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	699a      	ldr	r2, [r3, #24]
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	091b      	lsrs	r3, r3, #4
 8009412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009416:	441a      	add	r2, r3
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0210 	orr.w	r2, r2, #16
 800942a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4618      	mov	r0, r3
 8009432:	f008 ffb9 	bl	80123a8 <USB_ReadInterrupts>
 8009436:	4603      	mov	r3, r0
 8009438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800943c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009440:	d16e      	bne.n	8009520 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f008 ffbf 	bl	80123ce <USB_ReadDevAllOutEpInterrupt>
 8009450:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009452:	e062      	b.n	800951a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	2b00      	cmp	r3, #0
 800945c:	d057      	beq.n	800950e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009464:	b2d2      	uxtb	r2, r2
 8009466:	4611      	mov	r1, r2
 8009468:	4618      	mov	r0, r3
 800946a:	f008 ffe4 	bl	8012436 <USB_ReadDevOutEPInterrupt>
 800946e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00c      	beq.n	8009494 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009486:	461a      	mov	r2, r3
 8009488:	2301      	movs	r3, #1
 800948a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800948c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fd20 	bl	8009ed4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f003 0308 	and.w	r3, r3, #8
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00c      	beq.n	80094b8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094aa:	461a      	mov	r2, r3
 80094ac:	2308      	movs	r3, #8
 80094ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80094b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fd5c 	bl	8009f70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	f003 0310 	and.w	r3, r3, #16
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d008      	beq.n	80094d4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ce:	461a      	mov	r2, r3
 80094d0:	2310      	movs	r3, #16
 80094d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f003 0320 	and.w	r3, r3, #32
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d008      	beq.n	80094f0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ea:	461a      	mov	r2, r3
 80094ec:	2320      	movs	r3, #32
 80094ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d009      	beq.n	800950e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	015a      	lsls	r2, r3, #5
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	4413      	add	r3, r2
 8009502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009506:	461a      	mov	r2, r3
 8009508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800950c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	3301      	adds	r3, #1
 8009512:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	2b00      	cmp	r3, #0
 800951e:	d199      	bne.n	8009454 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	f008 ff3f 	bl	80123a8 <USB_ReadInterrupts>
 800952a:	4603      	mov	r3, r0
 800952c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009530:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009534:	f040 8087 	bne.w	8009646 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4618      	mov	r0, r3
 800953e:	f008 ff60 	bl	8012402 <USB_ReadDevAllInEpInterrupt>
 8009542:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009548:	e07a      	b.n	8009640 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d06f      	beq.n	8009634 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	4611      	mov	r1, r2
 800955e:	4618      	mov	r0, r3
 8009560:	f008 ff87 	bl	8012472 <USB_ReadDevInEPInterrupt>
 8009564:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	2b00      	cmp	r3, #0
 800956e:	d020      	beq.n	80095b2 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	2201      	movs	r2, #1
 8009578:	fa02 f303 	lsl.w	r3, r2, r3
 800957c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	43db      	mvns	r3, r3
 800958a:	69f9      	ldr	r1, [r7, #28]
 800958c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009590:	4013      	ands	r3, r2
 8009592:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	4413      	add	r3, r2
 800959c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a0:	461a      	mov	r2, r3
 80095a2:	2301      	movs	r3, #1
 80095a4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7fb fdd6 	bl	800515e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d008      	beq.n	80095ce <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c8:	461a      	mov	r2, r3
 80095ca:	2308      	movs	r3, #8
 80095cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f003 0310 	and.w	r3, r3, #16
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d008      	beq.n	80095ea <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	015a      	lsls	r2, r3, #5
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	4413      	add	r3, r2
 80095e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e4:	461a      	mov	r2, r3
 80095e6:	2310      	movs	r3, #16
 80095e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d008      	beq.n	8009606 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009600:	461a      	mov	r2, r3
 8009602:	2340      	movs	r3, #64	; 0x40
 8009604:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f003 0302 	and.w	r3, r3, #2
 800960c:	2b00      	cmp	r3, #0
 800960e:	d008      	beq.n	8009622 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961c:	461a      	mov	r2, r3
 800961e:	2302      	movs	r3, #2
 8009620:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800962c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fbc7 	bl	8009dc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	3301      	adds	r3, #1
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	085b      	lsrs	r3, r3, #1
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2b00      	cmp	r3, #0
 8009644:	d181      	bne.n	800954a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4618      	mov	r0, r3
 800964c:	f008 feac 	bl	80123a8 <USB_ReadInterrupts>
 8009650:	4603      	mov	r3, r0
 8009652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800965a:	d122      	bne.n	80096a2 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	69fa      	ldr	r2, [r7, #28]
 8009666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800966a:	f023 0301 	bic.w	r3, r3, #1
 800966e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009676:	2b01      	cmp	r3, #1
 8009678:	d108      	bne.n	800968c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009682:	2100      	movs	r1, #0
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fca7 	bl	8009fd8 <HAL_PCDEx_LPM_Callback>
 800968a:	e002      	b.n	8009692 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7fb fdb1 	bl	80051f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	695a      	ldr	r2, [r3, #20]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80096a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f008 fe7e 	bl	80123a8 <USB_ReadInterrupts>
 80096ac:	4603      	mov	r3, r0
 80096ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b6:	d112      	bne.n	80096de <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d102      	bne.n	80096ce <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7fb fd85 	bl	80051d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	695a      	ldr	r2, [r3, #20]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80096dc:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f008 fe60 	bl	80123a8 <USB_ReadInterrupts>
 80096e8:	4603      	mov	r3, r0
 80096ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096f2:	d121      	bne.n	8009738 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	695a      	ldr	r2, [r3, #20]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009702:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800970a:	2b00      	cmp	r3, #0
 800970c:	d111      	bne.n	8009732 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971c:	089b      	lsrs	r3, r3, #2
 800971e:	f003 020f 	and.w	r2, r3, #15
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009728:	2101      	movs	r1, #1
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fc54 	bl	8009fd8 <HAL_PCDEx_LPM_Callback>
 8009730:	e002      	b.n	8009738 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7fb fd50 	bl	80051d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4618      	mov	r0, r3
 800973e:	f008 fe33 	bl	80123a8 <USB_ReadInterrupts>
 8009742:	4603      	mov	r3, r0
 8009744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800974c:	f040 80c5 	bne.w	80098da <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	69fa      	ldr	r2, [r7, #28]
 800975a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800975e:	f023 0301 	bic.w	r3, r3, #1
 8009762:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2110      	movs	r1, #16
 800976a:	4618      	mov	r0, r3
 800976c:	f008 f902 	bl	8011974 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009770:	2300      	movs	r3, #0
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009774:	e056      	b.n	8009824 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009782:	461a      	mov	r2, r3
 8009784:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009788:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	015a      	lsls	r2, r3, #5
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	4413      	add	r3, r2
 8009792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800979a:	0151      	lsls	r1, r2, #5
 800979c:	69fa      	ldr	r2, [r7, #28]
 800979e:	440a      	add	r2, r1
 80097a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80097aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ac:	015a      	lsls	r2, r3, #5
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ba:	0151      	lsls	r1, r2, #5
 80097bc:	69fa      	ldr	r2, [r7, #28]
 80097be:	440a      	add	r2, r1
 80097c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d6:	461a      	mov	r2, r3
 80097d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ee:	0151      	lsls	r1, r2, #5
 80097f0:	69fa      	ldr	r2, [r7, #28]
 80097f2:	440a      	add	r2, r1
 80097f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800980e:	0151      	lsls	r1, r2, #5
 8009810:	69fa      	ldr	r2, [r7, #28]
 8009812:	440a      	add	r2, r1
 8009814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009818:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800981c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	3301      	adds	r3, #1
 8009822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800982a:	429a      	cmp	r2, r3
 800982c:	d3a3      	bcc.n	8009776 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800983c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009840:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009846:	2b00      	cmp	r3, #0
 8009848:	d016      	beq.n	8009878 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009854:	69fa      	ldr	r2, [r7, #28]
 8009856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800985a:	f043 030b 	orr.w	r3, r3, #11
 800985e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009870:	f043 030b 	orr.w	r3, r3, #11
 8009874:	6453      	str	r3, [r2, #68]	; 0x44
 8009876:	e015      	b.n	80098a4 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	69fa      	ldr	r2, [r7, #28]
 8009882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009886:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800988a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800988e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	69fa      	ldr	r2, [r7, #28]
 800989a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800989e:	f043 030b 	orr.w	r3, r3, #11
 80098a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80098b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80098c2:	4619      	mov	r1, r3
 80098c4:	4610      	mov	r0, r2
 80098c6:	f008 fe33 	bl	8012530 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	695a      	ldr	r2, [r3, #20]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80098d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f008 fd62 	bl	80123a8 <USB_ReadInterrupts>
 80098e4:	4603      	mov	r3, r0
 80098e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ee:	d124      	bne.n	800993a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f008 fdf8 	bl	80124ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4618      	mov	r0, r3
 8009900:	f008 f85e 	bl	80119c0 <USB_GetDevSpeed>
 8009904:	4603      	mov	r3, r0
 8009906:	461a      	mov	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681c      	ldr	r4, [r3, #0]
 8009910:	f001 fb02 	bl	800af18 <HAL_RCC_GetHCLKFreq>
 8009914:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800991a:	b2db      	uxtb	r3, r3
 800991c:	461a      	mov	r2, r3
 800991e:	4620      	mov	r0, r4
 8009920:	f007 ff8c 	bl	801183c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7fb fc42 	bl	80051ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	695a      	ldr	r2, [r3, #20]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009938:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4618      	mov	r0, r3
 8009940:	f008 fd32 	bl	80123a8 <USB_ReadInterrupts>
 8009944:	4603      	mov	r3, r0
 8009946:	f003 0308 	and.w	r3, r3, #8
 800994a:	2b08      	cmp	r3, #8
 800994c:	d10a      	bne.n	8009964 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7fb fc1f 	bl	8005192 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	695a      	ldr	r2, [r3, #20]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f002 0208 	and.w	r2, r2, #8
 8009962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4618      	mov	r0, r3
 800996a:	f008 fd1d 	bl	80123a8 <USB_ReadInterrupts>
 800996e:	4603      	mov	r3, r0
 8009970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009978:	d10f      	bne.n	800999a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	b2db      	uxtb	r3, r3
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fb fc55 	bl	8005234 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	695a      	ldr	r2, [r3, #20]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4618      	mov	r0, r3
 80099a0:	f008 fd02 	bl	80123a8 <USB_ReadInterrupts>
 80099a4:	4603      	mov	r3, r0
 80099a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099ae:	d10f      	bne.n	80099d0 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7fb fc28 	bl	8005210 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	695a      	ldr	r2, [r3, #20]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80099ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f008 fce7 	bl	80123a8 <USB_ReadInterrupts>
 80099da:	4603      	mov	r3, r0
 80099dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e4:	d10a      	bne.n	80099fc <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7fb fc36 	bl	8005258 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	695a      	ldr	r2, [r3, #20]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80099fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f008 fcd1 	bl	80123a8 <USB_ReadInterrupts>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d115      	bne.n	8009a3c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	f003 0304 	and.w	r3, r3, #4
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7fb fc26 	bl	8005274 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6859      	ldr	r1, [r3, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	430a      	orrs	r2, r1
 8009a36:	605a      	str	r2, [r3, #4]
 8009a38:	e000      	b.n	8009a3c <HAL_PCD_IRQHandler+0x742>
      return;
 8009a3a:	bf00      	nop
    }
  }
}
 8009a3c:	3734      	adds	r7, #52	; 0x34
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd90      	pop	{r4, r7, pc}

08009a42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d101      	bne.n	8009a5c <HAL_PCD_SetAddress+0x1a>
 8009a58:	2302      	movs	r3, #2
 8009a5a:	e013      	b.n	8009a84 <HAL_PCD_SetAddress+0x42>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	78fa      	ldrb	r2, [r7, #3]
 8009a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	78fa      	ldrb	r2, [r7, #3]
 8009a72:	4611      	mov	r1, r2
 8009a74:	4618      	mov	r0, r3
 8009a76:	f008 fc71 	bl	801235c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	4608      	mov	r0, r1
 8009a96:	4611      	mov	r1, r2
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	70fb      	strb	r3, [r7, #3]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	803b      	strh	r3, [r7, #0]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	da0f      	bge.n	8009ad2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ab2:	78fb      	ldrb	r3, [r7, #3]
 8009ab4:	f003 020f 	and.w	r2, r3, #15
 8009ab8:	4613      	mov	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	1a9b      	subs	r3, r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	3338      	adds	r3, #56	; 0x38
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	705a      	strb	r2, [r3, #1]
 8009ad0:	e00f      	b.n	8009af2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ad2:	78fb      	ldrb	r3, [r7, #3]
 8009ad4:	f003 020f 	and.w	r2, r3, #15
 8009ad8:	4613      	mov	r3, r2
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	1a9b      	subs	r3, r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	3304      	adds	r3, #4
 8009aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009af2:	78fb      	ldrb	r3, [r7, #3]
 8009af4:	f003 030f 	and.w	r3, r3, #15
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009afe:	883a      	ldrh	r2, [r7, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	78ba      	ldrb	r2, [r7, #2]
 8009b08:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	785b      	ldrb	r3, [r3, #1]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d004      	beq.n	8009b1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009b1c:	78bb      	ldrb	r3, [r7, #2]
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d102      	bne.n	8009b28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d101      	bne.n	8009b36 <HAL_PCD_EP_Open+0xaa>
 8009b32:	2302      	movs	r3, #2
 8009b34:	e00e      	b.n	8009b54 <HAL_PCD_EP_Open+0xc8>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f007 ff5a 	bl	80119fe <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009b52:	7afb      	ldrb	r3, [r7, #11]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b6c:	7afb      	ldrb	r3, [r7, #11]
 8009b6e:	f003 020f 	and.w	r2, r3, #15
 8009b72:	4613      	mov	r3, r2
 8009b74:	00db      	lsls	r3, r3, #3
 8009b76:	1a9b      	subs	r3, r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	4413      	add	r3, r2
 8009b82:	3304      	adds	r3, #4
 8009b84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2200      	movs	r2, #0
 8009b96:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b9e:	7afb      	ldrb	r3, [r7, #11]
 8009ba0:	f003 030f 	and.w	r3, r3, #15
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	f003 030f 	and.w	r3, r3, #15
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d106      	bne.n	8009bc2 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6979      	ldr	r1, [r7, #20]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f008 f982 	bl	8011ec4 <USB_EP0StartXfer>
 8009bc0:	e005      	b.n	8009bce <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6979      	ldr	r1, [r7, #20]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f007 ff9f 	bl	8011b0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	607a      	str	r2, [r7, #4]
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	460b      	mov	r3, r1
 8009be6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009be8:	7afb      	ldrb	r3, [r7, #11]
 8009bea:	f003 020f 	and.w	r2, r3, #15
 8009bee:	4613      	mov	r3, r2
 8009bf0:	00db      	lsls	r3, r3, #3
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	3338      	adds	r3, #56	; 0x38
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2201      	movs	r2, #1
 8009c16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c18:	7afb      	ldrb	r3, [r7, #11]
 8009c1a:	f003 030f 	and.w	r3, r3, #15
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009c24:	7afb      	ldrb	r3, [r7, #11]
 8009c26:	f003 030f 	and.w	r3, r3, #15
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d106      	bne.n	8009c3c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6979      	ldr	r1, [r7, #20]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f008 f945 	bl	8011ec4 <USB_EP0StartXfer>
 8009c3a:	e005      	b.n	8009c48 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6979      	ldr	r1, [r7, #20]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f007 ff62 	bl	8011b0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009c5e:	78fb      	ldrb	r3, [r7, #3]
 8009c60:	f003 020f 	and.w	r2, r3, #15
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d901      	bls.n	8009c70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e04e      	b.n	8009d0e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	da0f      	bge.n	8009c98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	f003 020f 	and.w	r2, r3, #15
 8009c7e:	4613      	mov	r3, r2
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	1a9b      	subs	r3, r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	3338      	adds	r3, #56	; 0x38
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2201      	movs	r2, #1
 8009c94:	705a      	strb	r2, [r3, #1]
 8009c96:	e00d      	b.n	8009cb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009c98:	78fa      	ldrb	r2, [r7, #3]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	1a9b      	subs	r3, r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	3304      	adds	r3, #4
 8009cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cba:	78fb      	ldrb	r3, [r7, #3]
 8009cbc:	f003 030f 	and.w	r3, r3, #15
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d101      	bne.n	8009cd4 <HAL_PCD_EP_SetStall+0x82>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	e01c      	b.n	8009d0e <HAL_PCD_EP_SetStall+0xbc>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68f9      	ldr	r1, [r7, #12]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f008 fa66 	bl	80121b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009ce8:	78fb      	ldrb	r3, [r7, #3]
 8009cea:	f003 030f 	and.w	r3, r3, #15
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d108      	bne.n	8009d04 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4610      	mov	r0, r2
 8009d00:	f008 fc16 	bl	8012530 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	f003 020f 	and.w	r2, r3, #15
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d901      	bls.n	8009d34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e042      	b.n	8009dba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	da0f      	bge.n	8009d5c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d3c:	78fb      	ldrb	r3, [r7, #3]
 8009d3e:	f003 020f 	and.w	r2, r3, #15
 8009d42:	4613      	mov	r3, r2
 8009d44:	00db      	lsls	r3, r3, #3
 8009d46:	1a9b      	subs	r3, r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	3338      	adds	r3, #56	; 0x38
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	4413      	add	r3, r2
 8009d50:	3304      	adds	r3, #4
 8009d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	705a      	strb	r2, [r3, #1]
 8009d5a:	e00f      	b.n	8009d7c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d5c:	78fb      	ldrb	r3, [r7, #3]
 8009d5e:	f003 020f 	and.w	r2, r3, #15
 8009d62:	4613      	mov	r3, r2
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	4413      	add	r3, r2
 8009d72:	3304      	adds	r3, #4
 8009d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d82:	78fb      	ldrb	r3, [r7, #3]
 8009d84:	f003 030f 	and.w	r3, r3, #15
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d101      	bne.n	8009d9c <HAL_PCD_EP_ClrStall+0x86>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e00e      	b.n	8009dba <HAL_PCD_EP_ClrStall+0xa4>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68f9      	ldr	r1, [r7, #12]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f008 fa70 	bl	8012290 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b088      	sub	sp, #32
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	1a9b      	subs	r3, r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	3338      	adds	r3, #56	; 0x38
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	3304      	adds	r3, #4
 8009de8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	699a      	ldr	r2, [r3, #24]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d901      	bls.n	8009dfa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e067      	b.n	8009eca <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	695a      	ldr	r2, [r3, #20]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	69fa      	ldr	r2, [r7, #28]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d902      	bls.n	8009e16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	3303      	adds	r3, #3
 8009e1a:	089b      	lsrs	r3, r3, #2
 8009e1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e1e:	e026      	b.n	8009e6e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	695a      	ldr	r2, [r3, #20]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	69fa      	ldr	r2, [r7, #28]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d902      	bls.n	8009e3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	3303      	adds	r3, #3
 8009e40:	089b      	lsrs	r3, r3, #2
 8009e42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	68d9      	ldr	r1, [r3, #12]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	6978      	ldr	r0, [r7, #20]
 8009e52:	f008 f955 	bl	8012100 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	441a      	add	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	699a      	ldr	r2, [r3, #24]
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	441a      	add	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d809      	bhi.n	8009e98 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	699a      	ldr	r2, [r3, #24]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d203      	bcs.n	8009e98 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1c3      	bne.n	8009e20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	695a      	ldr	r2, [r3, #20]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d811      	bhi.n	8009ec8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	f003 030f 	and.w	r3, r3, #15
 8009eaa:	2201      	movs	r2, #1
 8009eac:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	43db      	mvns	r3, r3
 8009ebe:	6939      	ldr	r1, [r7, #16]
 8009ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3720      	adds	r7, #32
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
	...

08009ed4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	333c      	adds	r3, #60	; 0x3c
 8009eec:	3304      	adds	r3, #4
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4a19      	ldr	r2, [pc, #100]	; (8009f6c <PCD_EP_OutXfrComplete_int+0x98>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d124      	bne.n	8009f54 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00a      	beq.n	8009f2a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f20:	461a      	mov	r2, r3
 8009f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f26:	6093      	str	r3, [r2, #8]
 8009f28:	e01a      	b.n	8009f60 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f003 0320 	and.w	r3, r3, #32
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d008      	beq.n	8009f46 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f40:	461a      	mov	r2, r3
 8009f42:	2320      	movs	r3, #32
 8009f44:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7fb f8eb 	bl	8005128 <HAL_PCD_DataOutStageCallback>
 8009f52:	e005      	b.n	8009f60 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7fb f8e4 	bl	8005128 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3718      	adds	r7, #24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	4f54310a 	.word	0x4f54310a

08009f70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	333c      	adds	r3, #60	; 0x3c
 8009f88:	3304      	adds	r3, #4
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4a0c      	ldr	r2, [pc, #48]	; (8009fd4 <PCD_EP_OutSetupPacket_int+0x64>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d90e      	bls.n	8009fc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d009      	beq.n	8009fc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	015a      	lsls	r2, r3, #5
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f7fb f89d 	bl	8005104 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	4f54300a 	.word	0x4f54300a

08009fd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ff4:	4b05      	ldr	r3, [pc, #20]	; (800a00c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a04      	ldr	r2, [pc, #16]	; (800a00c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ffe:	6013      	str	r3, [r2, #0]
}
 800a000:	bf00      	nop
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	40007000 	.word	0x40007000

0800a010 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800a018:	4b2b      	ldr	r3, [pc, #172]	; (800a0c8 <HAL_PWR_ConfigPVD+0xb8>)
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	f023 020e 	bic.w	r2, r3, #14
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4928      	ldr	r1, [pc, #160]	; (800a0c8 <HAL_PWR_ConfigPVD+0xb8>)
 800a026:	4313      	orrs	r3, r2
 800a028:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800a02a:	4b28      	ldr	r3, [pc, #160]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	4a27      	ldr	r2, [pc, #156]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a034:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800a036:	4b25      	ldr	r3, [pc, #148]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a24      	ldr	r2, [pc, #144]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a03c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a040:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800a042:	4b22      	ldr	r3, [pc, #136]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	4a21      	ldr	r2, [pc, #132]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a04c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800a04e:	4b1f      	ldr	r3, [pc, #124]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	4a1e      	ldr	r2, [pc, #120]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a058:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d005      	beq.n	800a072 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800a066:	4b19      	ldr	r3, [pc, #100]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a18      	ldr	r2, [pc, #96]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a06c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a070:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d005      	beq.n	800a08a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800a07e:	4b13      	ldr	r3, [pc, #76]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	4a12      	ldr	r2, [pc, #72]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a088:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	2b00      	cmp	r3, #0
 800a094:	d005      	beq.n	800a0a2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800a096:	4b0d      	ldr	r3, [pc, #52]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	4a0c      	ldr	r2, [pc, #48]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a09c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0a0:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f003 0302 	and.w	r3, r3, #2
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d005      	beq.n	800a0ba <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800a0ae:	4b07      	ldr	r3, [pc, #28]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	4a06      	ldr	r2, [pc, #24]	; (800a0cc <HAL_PWR_ConfigPVD+0xbc>)
 800a0b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0b8:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	40007000 	.word	0x40007000
 800a0cc:	40010400 	.word	0x40010400

0800a0d0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800a0d4:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <HAL_PWR_EnablePVD+0x1c>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	4a04      	ldr	r2, [pc, #16]	; (800a0ec <HAL_PWR_EnablePVD+0x1c>)
 800a0da:	f043 0301 	orr.w	r3, r3, #1
 800a0de:	6053      	str	r3, [r2, #4]
}
 800a0e0:	bf00      	nop
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	40007000 	.word	0x40007000

0800a0f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a0f4:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <HAL_PWREx_GetVoltageRange+0x3c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a0fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a100:	d102      	bne.n	800a108 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800a102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a106:	e00b      	b.n	800a120 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800a108:	4b08      	ldr	r3, [pc, #32]	; (800a12c <HAL_PWREx_GetVoltageRange+0x3c>)
 800a10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a10e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a116:	d102      	bne.n	800a11e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800a118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a11c:	e000      	b.n	800a120 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800a11e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800a120:	4618      	mov	r0, r3
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	40007000 	.word	0x40007000

0800a130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d141      	bne.n	800a1c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a13e:	4b4b      	ldr	r3, [pc, #300]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a14a:	d131      	bne.n	800a1b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a14c:	4b47      	ldr	r3, [pc, #284]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a152:	4a46      	ldr	r2, [pc, #280]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a15c:	4b43      	ldr	r3, [pc, #268]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a164:	4a41      	ldr	r2, [pc, #260]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a16a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a16c:	4b40      	ldr	r3, [pc, #256]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2232      	movs	r2, #50	; 0x32
 800a172:	fb02 f303 	mul.w	r3, r2, r3
 800a176:	4a3f      	ldr	r2, [pc, #252]	; (800a274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a178:	fba2 2303 	umull	r2, r3, r2, r3
 800a17c:	0c9b      	lsrs	r3, r3, #18
 800a17e:	3301      	adds	r3, #1
 800a180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a182:	e002      	b.n	800a18a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	3b01      	subs	r3, #1
 800a188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a18a:	4b38      	ldr	r3, [pc, #224]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a196:	d102      	bne.n	800a19e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1f2      	bne.n	800a184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a19e:	4b33      	ldr	r3, [pc, #204]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1aa:	d158      	bne.n	800a25e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e057      	b.n	800a260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a1b0:	4b2e      	ldr	r3, [pc, #184]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1b6:	4a2d      	ldr	r2, [pc, #180]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a1c0:	e04d      	b.n	800a25e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1c8:	d141      	bne.n	800a24e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a1ca:	4b28      	ldr	r3, [pc, #160]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a1d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d6:	d131      	bne.n	800a23c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a1d8:	4b24      	ldr	r3, [pc, #144]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1de:	4a23      	ldr	r2, [pc, #140]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a1e8:	4b20      	ldr	r3, [pc, #128]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a1f0:	4a1e      	ldr	r2, [pc, #120]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a1f8:	4b1d      	ldr	r3, [pc, #116]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2232      	movs	r2, #50	; 0x32
 800a1fe:	fb02 f303 	mul.w	r3, r2, r3
 800a202:	4a1c      	ldr	r2, [pc, #112]	; (800a274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a204:	fba2 2303 	umull	r2, r3, r2, r3
 800a208:	0c9b      	lsrs	r3, r3, #18
 800a20a:	3301      	adds	r3, #1
 800a20c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a20e:	e002      	b.n	800a216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3b01      	subs	r3, #1
 800a214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a216:	4b15      	ldr	r3, [pc, #84]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a21e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a222:	d102      	bne.n	800a22a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1f2      	bne.n	800a210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a22a:	4b10      	ldr	r3, [pc, #64]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a236:	d112      	bne.n	800a25e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e011      	b.n	800a260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a23c:	4b0b      	ldr	r3, [pc, #44]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a242:	4a0a      	ldr	r2, [pc, #40]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a24c:	e007      	b.n	800a25e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a24e:	4b07      	ldr	r3, [pc, #28]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a256:	4a05      	ldr	r2, [pc, #20]	; (800a26c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a25c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	40007000 	.word	0x40007000
 800a270:	20000038 	.word	0x20000038
 800a274:	431bde83 	.word	0x431bde83

0800a278 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 800a278:	b480      	push	{r7}
 800a27a:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 800a27c:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f023 0307 	bic.w	r3, r3, #7
 800a284:	4a07      	ldr	r2, [pc, #28]	; (800a2a4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800a286:	f043 0304 	orr.w	r3, r3, #4
 800a28a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	4a05      	ldr	r2, [pc, #20]	; (800a2a8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800a292:	f043 0304 	orr.w	r3, r3, #4
 800a296:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800a298:	bf30      	wfi
}
 800a29a:	bf00      	nop
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	40007000 	.word	0x40007000
 800a2a8:	e000ed00 	.word	0xe000ed00

0800a2ac <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 800a2b0:	4b1c      	ldr	r3, [pc, #112]	; (800a324 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a2b2:	695b      	ldr	r3, [r3, #20]
 800a2b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d005      	beq.n	800a2c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800a2bc:	f7f9 fc7c 	bl	8003bb8 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800a2c0:	4b18      	ldr	r3, [pc, #96]	; (800a324 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a2c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a2c6:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 800a2c8:	4b16      	ldr	r3, [pc, #88]	; (800a324 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2cc:	f003 0308 	and.w	r3, r3, #8
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d004      	beq.n	800a2de <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800a2d4:	f000 f828 	bl	800a328 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800a2d8:	4b12      	ldr	r3, [pc, #72]	; (800a324 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a2da:	2208      	movs	r2, #8
 800a2dc:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800a2de:	4b11      	ldr	r3, [pc, #68]	; (800a324 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e2:	f003 0310 	and.w	r3, r3, #16
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800a2ea:	f000 f824 	bl	800a336 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a2f0:	2210      	movs	r2, #16
 800a2f2:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800a2f4:	4b0b      	ldr	r3, [pc, #44]	; (800a324 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f8:	f003 0320 	and.w	r3, r3, #32
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d004      	beq.n	800a30a <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800a300:	f000 f820 	bl	800a344 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800a304:	4b07      	ldr	r3, [pc, #28]	; (800a324 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a306:	2220      	movs	r2, #32
 800a308:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800a30a:	4b06      	ldr	r3, [pc, #24]	; (800a324 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a312:	2b00      	cmp	r3, #0
 800a314:	d004      	beq.n	800a320 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800a316:	f000 f81c 	bl	800a352 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800a31a:	4b02      	ldr	r3, [pc, #8]	; (800a324 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a31c:	2240      	movs	r2, #64	; 0x40
 800a31e:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800a320:	bf00      	nop
 800a322:	bd80      	pop	{r7, pc}
 800a324:	40010400 	.word	0x40010400

0800a328 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800a328:	b480      	push	{r7}
 800a32a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800a336:	b480      	push	{r7}
 800a338:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800a33a:	bf00      	nop
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800a344:	b480      	push	{r7}
 800a346:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800a348:	bf00      	nop
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800a352:	b480      	push	{r7}
 800a354:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800a356:	bf00      	nop
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d102      	bne.n	800a374 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	f000 bc16 	b.w	800aba0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a374:	4ba0      	ldr	r3, [pc, #640]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f003 030c 	and.w	r3, r3, #12
 800a37c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a37e:	4b9e      	ldr	r3, [pc, #632]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	f003 0303 	and.w	r3, r3, #3
 800a386:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0310 	and.w	r3, r3, #16
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 80e4 	beq.w	800a55e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d007      	beq.n	800a3ac <HAL_RCC_OscConfig+0x4c>
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	2b0c      	cmp	r3, #12
 800a3a0:	f040 808b 	bne.w	800a4ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	f040 8087 	bne.w	800a4ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a3ac:	4b92      	ldr	r3, [pc, #584]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 0302 	and.w	r3, r3, #2
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d005      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x64>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e3ed      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a1a      	ldr	r2, [r3, #32]
 800a3c8:	4b8b      	ldr	r3, [pc, #556]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 0308 	and.w	r3, r3, #8
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d004      	beq.n	800a3de <HAL_RCC_OscConfig+0x7e>
 800a3d4:	4b88      	ldr	r3, [pc, #544]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3dc:	e005      	b.n	800a3ea <HAL_RCC_OscConfig+0x8a>
 800a3de:	4b86      	ldr	r3, [pc, #536]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a3e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3e4:	091b      	lsrs	r3, r3, #4
 800a3e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d223      	bcs.n	800a436 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fdc8 	bl	800af88 <RCC_SetFlashLatencyFromMSIRange>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e3ce      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a402:	4b7d      	ldr	r3, [pc, #500]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a7c      	ldr	r2, [pc, #496]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a408:	f043 0308 	orr.w	r3, r3, #8
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	4b7a      	ldr	r3, [pc, #488]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	4977      	ldr	r1, [pc, #476]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a420:	4b75      	ldr	r3, [pc, #468]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	4972      	ldr	r1, [pc, #456]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a430:	4313      	orrs	r3, r2
 800a432:	604b      	str	r3, [r1, #4]
 800a434:	e025      	b.n	800a482 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a436:	4b70      	ldr	r3, [pc, #448]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a6f      	ldr	r2, [pc, #444]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a43c:	f043 0308 	orr.w	r3, r3, #8
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	4b6d      	ldr	r3, [pc, #436]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	496a      	ldr	r1, [pc, #424]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a450:	4313      	orrs	r3, r2
 800a452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a454:	4b68      	ldr	r3, [pc, #416]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	4965      	ldr	r1, [pc, #404]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a464:	4313      	orrs	r3, r2
 800a466:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d109      	bne.n	800a482 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	4618      	mov	r0, r3
 800a474:	f000 fd88 	bl	800af88 <RCC_SetFlashLatencyFromMSIRange>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e38e      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a482:	f000 fcbf 	bl	800ae04 <HAL_RCC_GetSysClockFreq>
 800a486:	4602      	mov	r2, r0
 800a488:	4b5b      	ldr	r3, [pc, #364]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	091b      	lsrs	r3, r3, #4
 800a48e:	f003 030f 	and.w	r3, r3, #15
 800a492:	495a      	ldr	r1, [pc, #360]	; (800a5fc <HAL_RCC_OscConfig+0x29c>)
 800a494:	5ccb      	ldrb	r3, [r1, r3]
 800a496:	f003 031f 	and.w	r3, r3, #31
 800a49a:	fa22 f303 	lsr.w	r3, r2, r3
 800a49e:	4a58      	ldr	r2, [pc, #352]	; (800a600 <HAL_RCC_OscConfig+0x2a0>)
 800a4a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a4a2:	4b58      	ldr	r3, [pc, #352]	; (800a604 <HAL_RCC_OscConfig+0x2a4>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fb fff4 	bl	8006494 <HAL_InitTick>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d052      	beq.n	800a55c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	e372      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d032      	beq.n	800a528 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a4c2:	4b4d      	ldr	r3, [pc, #308]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a4c      	ldr	r2, [pc, #304]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a4c8:	f043 0301 	orr.w	r3, r3, #1
 800a4cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a4ce:	f7fc f82d 	bl	800652c <HAL_GetTick>
 800a4d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a4d4:	e008      	b.n	800a4e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a4d6:	f7fc f829 	bl	800652c <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d901      	bls.n	800a4e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e35b      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a4e8:	4b43      	ldr	r3, [pc, #268]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0f0      	beq.n	800a4d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4f4:	4b40      	ldr	r3, [pc, #256]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a3f      	ldr	r2, [pc, #252]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a4fa:	f043 0308 	orr.w	r3, r3, #8
 800a4fe:	6013      	str	r3, [r2, #0]
 800a500:	4b3d      	ldr	r3, [pc, #244]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	493a      	ldr	r1, [pc, #232]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a512:	4b39      	ldr	r3, [pc, #228]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	021b      	lsls	r3, r3, #8
 800a520:	4935      	ldr	r1, [pc, #212]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a522:	4313      	orrs	r3, r2
 800a524:	604b      	str	r3, [r1, #4]
 800a526:	e01a      	b.n	800a55e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a528:	4b33      	ldr	r3, [pc, #204]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a32      	ldr	r2, [pc, #200]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a52e:	f023 0301 	bic.w	r3, r3, #1
 800a532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a534:	f7fb fffa 	bl	800652c <HAL_GetTick>
 800a538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a53a:	e008      	b.n	800a54e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a53c:	f7fb fff6 	bl	800652c <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	2b02      	cmp	r3, #2
 800a548:	d901      	bls.n	800a54e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e328      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a54e:	4b2a      	ldr	r3, [pc, #168]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1f0      	bne.n	800a53c <HAL_RCC_OscConfig+0x1dc>
 800a55a:	e000      	b.n	800a55e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a55c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 0301 	and.w	r3, r3, #1
 800a566:	2b00      	cmp	r3, #0
 800a568:	d073      	beq.n	800a652 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b08      	cmp	r3, #8
 800a56e:	d005      	beq.n	800a57c <HAL_RCC_OscConfig+0x21c>
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	2b0c      	cmp	r3, #12
 800a574:	d10e      	bne.n	800a594 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d10b      	bne.n	800a594 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a57c:	4b1e      	ldr	r3, [pc, #120]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a584:	2b00      	cmp	r3, #0
 800a586:	d063      	beq.n	800a650 <HAL_RCC_OscConfig+0x2f0>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d15f      	bne.n	800a650 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	e305      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a59c:	d106      	bne.n	800a5ac <HAL_RCC_OscConfig+0x24c>
 800a59e:	4b16      	ldr	r3, [pc, #88]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a15      	ldr	r2, [pc, #84]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a5a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	e01d      	b.n	800a5e8 <HAL_RCC_OscConfig+0x288>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5b4:	d10c      	bne.n	800a5d0 <HAL_RCC_OscConfig+0x270>
 800a5b6:	4b10      	ldr	r3, [pc, #64]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a0f      	ldr	r2, [pc, #60]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a5bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5c0:	6013      	str	r3, [r2, #0]
 800a5c2:	4b0d      	ldr	r3, [pc, #52]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a0c      	ldr	r2, [pc, #48]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a5c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5cc:	6013      	str	r3, [r2, #0]
 800a5ce:	e00b      	b.n	800a5e8 <HAL_RCC_OscConfig+0x288>
 800a5d0:	4b09      	ldr	r3, [pc, #36]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a08      	ldr	r2, [pc, #32]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a5d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	4b06      	ldr	r3, [pc, #24]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a05      	ldr	r2, [pc, #20]	; (800a5f8 <HAL_RCC_OscConfig+0x298>)
 800a5e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01b      	beq.n	800a628 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5f0:	f7fb ff9c 	bl	800652c <HAL_GetTick>
 800a5f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5f6:	e010      	b.n	800a61a <HAL_RCC_OscConfig+0x2ba>
 800a5f8:	40021000 	.word	0x40021000
 800a5fc:	08022690 	.word	0x08022690
 800a600:	20000038 	.word	0x20000038
 800a604:	20000078 	.word	0x20000078
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a608:	f7fb ff90 	bl	800652c <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b64      	cmp	r3, #100	; 0x64
 800a614:	d901      	bls.n	800a61a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e2c2      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a61a:	4baf      	ldr	r3, [pc, #700]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d0f0      	beq.n	800a608 <HAL_RCC_OscConfig+0x2a8>
 800a626:	e014      	b.n	800a652 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a628:	f7fb ff80 	bl	800652c <HAL_GetTick>
 800a62c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a62e:	e008      	b.n	800a642 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a630:	f7fb ff7c 	bl	800652c <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	2b64      	cmp	r3, #100	; 0x64
 800a63c:	d901      	bls.n	800a642 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e2ae      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a642:	4ba5      	ldr	r3, [pc, #660]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1f0      	bne.n	800a630 <HAL_RCC_OscConfig+0x2d0>
 800a64e:	e000      	b.n	800a652 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d060      	beq.n	800a720 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2b04      	cmp	r3, #4
 800a662:	d005      	beq.n	800a670 <HAL_RCC_OscConfig+0x310>
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	2b0c      	cmp	r3, #12
 800a668:	d119      	bne.n	800a69e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d116      	bne.n	800a69e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a670:	4b99      	ldr	r3, [pc, #612]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d005      	beq.n	800a688 <HAL_RCC_OscConfig+0x328>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d101      	bne.n	800a688 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e28b      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a688:	4b93      	ldr	r3, [pc, #588]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	061b      	lsls	r3, r3, #24
 800a696:	4990      	ldr	r1, [pc, #576]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a698:	4313      	orrs	r3, r2
 800a69a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a69c:	e040      	b.n	800a720 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d023      	beq.n	800a6ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a6a6:	4b8c      	ldr	r3, [pc, #560]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a8b      	ldr	r2, [pc, #556]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a6ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b2:	f7fb ff3b 	bl	800652c <HAL_GetTick>
 800a6b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a6b8:	e008      	b.n	800a6cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6ba:	f7fb ff37 	bl	800652c <HAL_GetTick>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d901      	bls.n	800a6cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	e269      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a6cc:	4b82      	ldr	r3, [pc, #520]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0f0      	beq.n	800a6ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6d8:	4b7f      	ldr	r3, [pc, #508]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	061b      	lsls	r3, r3, #24
 800a6e6:	497c      	ldr	r1, [pc, #496]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	604b      	str	r3, [r1, #4]
 800a6ec:	e018      	b.n	800a720 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6ee:	4b7a      	ldr	r3, [pc, #488]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a79      	ldr	r2, [pc, #484]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a6f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6fa:	f7fb ff17 	bl	800652c <HAL_GetTick>
 800a6fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a700:	e008      	b.n	800a714 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a702:	f7fb ff13 	bl	800652c <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d901      	bls.n	800a714 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e245      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a714:	4b70      	ldr	r3, [pc, #448]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1f0      	bne.n	800a702 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0308 	and.w	r3, r3, #8
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d03c      	beq.n	800a7a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d01c      	beq.n	800a76e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a734:	4b68      	ldr	r3, [pc, #416]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a73a:	4a67      	ldr	r2, [pc, #412]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a73c:	f043 0301 	orr.w	r3, r3, #1
 800a740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a744:	f7fb fef2 	bl	800652c <HAL_GetTick>
 800a748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a74a:	e008      	b.n	800a75e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a74c:	f7fb feee 	bl	800652c <HAL_GetTick>
 800a750:	4602      	mov	r2, r0
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	2b02      	cmp	r3, #2
 800a758:	d901      	bls.n	800a75e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e220      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a75e:	4b5e      	ldr	r3, [pc, #376]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0ef      	beq.n	800a74c <HAL_RCC_OscConfig+0x3ec>
 800a76c:	e01b      	b.n	800a7a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a76e:	4b5a      	ldr	r3, [pc, #360]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a774:	4a58      	ldr	r2, [pc, #352]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a776:	f023 0301 	bic.w	r3, r3, #1
 800a77a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a77e:	f7fb fed5 	bl	800652c <HAL_GetTick>
 800a782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a784:	e008      	b.n	800a798 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a786:	f7fb fed1 	bl	800652c <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	2b02      	cmp	r3, #2
 800a792:	d901      	bls.n	800a798 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	e203      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a798:	4b4f      	ldr	r3, [pc, #316]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a79a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1ef      	bne.n	800a786 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0304 	and.w	r3, r3, #4
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 80a6 	beq.w	800a900 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a7b8:	4b47      	ldr	r3, [pc, #284]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10d      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7c4:	4b44      	ldr	r3, [pc, #272]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a7c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c8:	4a43      	ldr	r2, [pc, #268]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a7ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ce:	6593      	str	r3, [r2, #88]	; 0x58
 800a7d0:	4b41      	ldr	r3, [pc, #260]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7d8:	60bb      	str	r3, [r7, #8]
 800a7da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7e0:	4b3e      	ldr	r3, [pc, #248]	; (800a8dc <HAL_RCC_OscConfig+0x57c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d118      	bne.n	800a81e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7ec:	4b3b      	ldr	r3, [pc, #236]	; (800a8dc <HAL_RCC_OscConfig+0x57c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a3a      	ldr	r2, [pc, #232]	; (800a8dc <HAL_RCC_OscConfig+0x57c>)
 800a7f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7f8:	f7fb fe98 	bl	800652c <HAL_GetTick>
 800a7fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7fe:	e008      	b.n	800a812 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a800:	f7fb fe94 	bl	800652c <HAL_GetTick>
 800a804:	4602      	mov	r2, r0
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d901      	bls.n	800a812 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a80e:	2303      	movs	r3, #3
 800a810:	e1c6      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a812:	4b32      	ldr	r3, [pc, #200]	; (800a8dc <HAL_RCC_OscConfig+0x57c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0f0      	beq.n	800a800 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d108      	bne.n	800a838 <HAL_RCC_OscConfig+0x4d8>
 800a826:	4b2c      	ldr	r3, [pc, #176]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a82c:	4a2a      	ldr	r2, [pc, #168]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a82e:	f043 0301 	orr.w	r3, r3, #1
 800a832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a836:	e024      	b.n	800a882 <HAL_RCC_OscConfig+0x522>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	2b05      	cmp	r3, #5
 800a83e:	d110      	bne.n	800a862 <HAL_RCC_OscConfig+0x502>
 800a840:	4b25      	ldr	r3, [pc, #148]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a846:	4a24      	ldr	r2, [pc, #144]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a848:	f043 0304 	orr.w	r3, r3, #4
 800a84c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a850:	4b21      	ldr	r3, [pc, #132]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a856:	4a20      	ldr	r2, [pc, #128]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a858:	f043 0301 	orr.w	r3, r3, #1
 800a85c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a860:	e00f      	b.n	800a882 <HAL_RCC_OscConfig+0x522>
 800a862:	4b1d      	ldr	r3, [pc, #116]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a868:	4a1b      	ldr	r2, [pc, #108]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a86a:	f023 0301 	bic.w	r3, r3, #1
 800a86e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a872:	4b19      	ldr	r3, [pc, #100]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a878:	4a17      	ldr	r2, [pc, #92]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a87a:	f023 0304 	bic.w	r3, r3, #4
 800a87e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d016      	beq.n	800a8b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a88a:	f7fb fe4f 	bl	800652c <HAL_GetTick>
 800a88e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a890:	e00a      	b.n	800a8a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a892:	f7fb fe4b 	bl	800652c <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d901      	bls.n	800a8a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e17b      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8a8:	4b0b      	ldr	r3, [pc, #44]	; (800a8d8 <HAL_RCC_OscConfig+0x578>)
 800a8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0ed      	beq.n	800a892 <HAL_RCC_OscConfig+0x532>
 800a8b6:	e01a      	b.n	800a8ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8b8:	f7fb fe38 	bl	800652c <HAL_GetTick>
 800a8bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a8be:	e00f      	b.n	800a8e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8c0:	f7fb fe34 	bl	800652c <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d906      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e164      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
 800a8d6:	bf00      	nop
 800a8d8:	40021000 	.word	0x40021000
 800a8dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a8e0:	4ba8      	ldr	r3, [pc, #672]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800a8e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e6:	f003 0302 	and.w	r3, r3, #2
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e8      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a8ee:	7ffb      	ldrb	r3, [r7, #31]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d105      	bne.n	800a900 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8f4:	4ba3      	ldr	r3, [pc, #652]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800a8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f8:	4aa2      	ldr	r2, [pc, #648]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800a8fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0320 	and.w	r3, r3, #32
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d03c      	beq.n	800a986 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a910:	2b00      	cmp	r3, #0
 800a912:	d01c      	beq.n	800a94e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a914:	4b9b      	ldr	r3, [pc, #620]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800a916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a91a:	4a9a      	ldr	r2, [pc, #616]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800a91c:	f043 0301 	orr.w	r3, r3, #1
 800a920:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a924:	f7fb fe02 	bl	800652c <HAL_GetTick>
 800a928:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a92a:	e008      	b.n	800a93e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a92c:	f7fb fdfe 	bl	800652c <HAL_GetTick>
 800a930:	4602      	mov	r2, r0
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	2b02      	cmp	r3, #2
 800a938:	d901      	bls.n	800a93e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e130      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a93e:	4b91      	ldr	r3, [pc, #580]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800a940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d0ef      	beq.n	800a92c <HAL_RCC_OscConfig+0x5cc>
 800a94c:	e01b      	b.n	800a986 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a94e:	4b8d      	ldr	r3, [pc, #564]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800a950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a954:	4a8b      	ldr	r2, [pc, #556]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800a956:	f023 0301 	bic.w	r3, r3, #1
 800a95a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a95e:	f7fb fde5 	bl	800652c <HAL_GetTick>
 800a962:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a964:	e008      	b.n	800a978 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a966:	f7fb fde1 	bl	800652c <HAL_GetTick>
 800a96a:	4602      	mov	r2, r0
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	2b02      	cmp	r3, #2
 800a972:	d901      	bls.n	800a978 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a974:	2303      	movs	r3, #3
 800a976:	e113      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a978:	4b82      	ldr	r3, [pc, #520]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800a97a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1ef      	bne.n	800a966 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 8107 	beq.w	800ab9e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a994:	2b02      	cmp	r3, #2
 800a996:	f040 80cb 	bne.w	800ab30 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a99a:	4b7a      	ldr	r3, [pc, #488]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	f003 0203 	and.w	r2, r3, #3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d12c      	bne.n	800aa08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d123      	bne.n	800aa08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d11b      	bne.n	800aa08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d113      	bne.n	800aa08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ea:	085b      	lsrs	r3, r3, #1
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d109      	bne.n	800aa08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fe:	085b      	lsrs	r3, r3, #1
 800aa00:	3b01      	subs	r3, #1
 800aa02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d06d      	beq.n	800aae4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	2b0c      	cmp	r3, #12
 800aa0c:	d068      	beq.n	800aae0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800aa0e:	4b5d      	ldr	r3, [pc, #372]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d105      	bne.n	800aa26 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800aa1a:	4b5a      	ldr	r3, [pc, #360]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e0ba      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800aa2a:	4b56      	ldr	r3, [pc, #344]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a55      	ldr	r2, [pc, #340]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aa30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aa36:	f7fb fd79 	bl	800652c <HAL_GetTick>
 800aa3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa3c:	e008      	b.n	800aa50 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa3e:	f7fb fd75 	bl	800652c <HAL_GetTick>
 800aa42:	4602      	mov	r2, r0
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d901      	bls.n	800aa50 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e0a7      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa50:	4b4c      	ldr	r3, [pc, #304]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1f0      	bne.n	800aa3e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa5c:	4b49      	ldr	r3, [pc, #292]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aa5e:	68da      	ldr	r2, [r3, #12]
 800aa60:	4b49      	ldr	r3, [pc, #292]	; (800ab88 <HAL_RCC_OscConfig+0x828>)
 800aa62:	4013      	ands	r3, r2
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aa6c:	3a01      	subs	r2, #1
 800aa6e:	0112      	lsls	r2, r2, #4
 800aa70:	4311      	orrs	r1, r2
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa76:	0212      	lsls	r2, r2, #8
 800aa78:	4311      	orrs	r1, r2
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aa7e:	0852      	lsrs	r2, r2, #1
 800aa80:	3a01      	subs	r2, #1
 800aa82:	0552      	lsls	r2, r2, #21
 800aa84:	4311      	orrs	r1, r2
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aa8a:	0852      	lsrs	r2, r2, #1
 800aa8c:	3a01      	subs	r2, #1
 800aa8e:	0652      	lsls	r2, r2, #25
 800aa90:	4311      	orrs	r1, r2
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aa96:	06d2      	lsls	r2, r2, #27
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	493a      	ldr	r1, [pc, #232]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800aaa0:	4b38      	ldr	r3, [pc, #224]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a37      	ldr	r2, [pc, #220]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aaa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aaaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aaac:	4b35      	ldr	r3, [pc, #212]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	4a34      	ldr	r2, [pc, #208]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aab8:	f7fb fd38 	bl	800652c <HAL_GetTick>
 800aabc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aabe:	e008      	b.n	800aad2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aac0:	f7fb fd34 	bl	800652c <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d901      	bls.n	800aad2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e066      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aad2:	4b2c      	ldr	r3, [pc, #176]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0f0      	beq.n	800aac0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aade:	e05e      	b.n	800ab9e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	e05d      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aae4:	4b27      	ldr	r3, [pc, #156]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d156      	bne.n	800ab9e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800aaf0:	4b24      	ldr	r3, [pc, #144]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a23      	ldr	r2, [pc, #140]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aaf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aafa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aafc:	4b21      	ldr	r3, [pc, #132]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	4a20      	ldr	r2, [pc, #128]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800ab02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ab08:	f7fb fd10 	bl	800652c <HAL_GetTick>
 800ab0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab0e:	e008      	b.n	800ab22 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab10:	f7fb fd0c 	bl	800652c <HAL_GetTick>
 800ab14:	4602      	mov	r2, r0
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d901      	bls.n	800ab22 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e03e      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab22:	4b18      	ldr	r3, [pc, #96]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d0f0      	beq.n	800ab10 <HAL_RCC_OscConfig+0x7b0>
 800ab2e:	e036      	b.n	800ab9e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	2b0c      	cmp	r3, #12
 800ab34:	d031      	beq.n	800ab9a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab36:	4b13      	ldr	r3, [pc, #76]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a12      	ldr	r2, [pc, #72]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800ab3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab40:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800ab42:	4b10      	ldr	r3, [pc, #64]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d105      	bne.n	800ab5a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ab4e:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	4a0c      	ldr	r2, [pc, #48]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800ab54:	f023 0303 	bic.w	r3, r3, #3
 800ab58:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ab5a:	4b0a      	ldr	r3, [pc, #40]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	4a09      	ldr	r2, [pc, #36]	; (800ab84 <HAL_RCC_OscConfig+0x824>)
 800ab60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ab64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab6a:	f7fb fcdf 	bl	800652c <HAL_GetTick>
 800ab6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab70:	e00c      	b.n	800ab8c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab72:	f7fb fcdb 	bl	800652c <HAL_GetTick>
 800ab76:	4602      	mov	r2, r0
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d905      	bls.n	800ab8c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800ab80:	2303      	movs	r3, #3
 800ab82:	e00d      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
 800ab84:	40021000 	.word	0x40021000
 800ab88:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab8c:	4b06      	ldr	r3, [pc, #24]	; (800aba8 <HAL_RCC_OscConfig+0x848>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1ec      	bne.n	800ab72 <HAL_RCC_OscConfig+0x812>
 800ab98:	e001      	b.n	800ab9e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3720      	adds	r7, #32
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	40021000 	.word	0x40021000

0800abac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e10f      	b.n	800ade4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800abc4:	4b89      	ldr	r3, [pc, #548]	; (800adec <HAL_RCC_ClockConfig+0x240>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 030f 	and.w	r3, r3, #15
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d910      	bls.n	800abf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abd2:	4b86      	ldr	r3, [pc, #536]	; (800adec <HAL_RCC_ClockConfig+0x240>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f023 020f 	bic.w	r2, r3, #15
 800abda:	4984      	ldr	r1, [pc, #528]	; (800adec <HAL_RCC_ClockConfig+0x240>)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	4313      	orrs	r3, r2
 800abe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800abe2:	4b82      	ldr	r3, [pc, #520]	; (800adec <HAL_RCC_ClockConfig+0x240>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 030f 	and.w	r3, r3, #15
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d001      	beq.n	800abf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e0f7      	b.n	800ade4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 8089 	beq.w	800ad14 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d133      	bne.n	800ac72 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac0a:	4b79      	ldr	r3, [pc, #484]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d101      	bne.n	800ac1a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e0e4      	b.n	800ade4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800ac1a:	f000 fa0f 	bl	800b03c <RCC_GetSysClockFreqFromPLLSource>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4a74      	ldr	r2, [pc, #464]	; (800adf4 <HAL_RCC_ClockConfig+0x248>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d955      	bls.n	800acd2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800ac26:	4b72      	ldr	r3, [pc, #456]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ac32:	4b6f      	ldr	r3, [pc, #444]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac3a:	4a6d      	ldr	r2, [pc, #436]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ac3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ac42:	2380      	movs	r3, #128	; 0x80
 800ac44:	617b      	str	r3, [r7, #20]
 800ac46:	e044      	b.n	800acd2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0302 	and.w	r3, r3, #2
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d03e      	beq.n	800acd2 <HAL_RCC_ClockConfig+0x126>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d13a      	bne.n	800acd2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ac5c:	4b64      	ldr	r3, [pc, #400]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac64:	4a62      	ldr	r2, [pc, #392]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ac66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ac6c:	2380      	movs	r3, #128	; 0x80
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	e02f      	b.n	800acd2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d107      	bne.n	800ac8a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac7a:	4b5d      	ldr	r3, [pc, #372]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d115      	bne.n	800acb2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e0ac      	b.n	800ade4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d107      	bne.n	800aca2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ac92:	4b57      	ldr	r3, [pc, #348]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0302 	and.w	r3, r3, #2
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d109      	bne.n	800acb2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e0a0      	b.n	800ade4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aca2:	4b53      	ldr	r3, [pc, #332]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d101      	bne.n	800acb2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e098      	b.n	800ade4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800acb2:	f000 f8a7 	bl	800ae04 <HAL_RCC_GetSysClockFreq>
 800acb6:	4603      	mov	r3, r0
 800acb8:	4a4e      	ldr	r2, [pc, #312]	; (800adf4 <HAL_RCC_ClockConfig+0x248>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d909      	bls.n	800acd2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800acbe:	4b4c      	ldr	r3, [pc, #304]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acc6:	4a4a      	ldr	r2, [pc, #296]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800acc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800accc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800acce:	2380      	movs	r3, #128	; 0x80
 800acd0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800acd2:	4b47      	ldr	r3, [pc, #284]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f023 0203 	bic.w	r2, r3, #3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	4944      	ldr	r1, [pc, #272]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ace0:	4313      	orrs	r3, r2
 800ace2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ace4:	f7fb fc22 	bl	800652c <HAL_GetTick>
 800ace8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acea:	e00a      	b.n	800ad02 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acec:	f7fb fc1e 	bl	800652c <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d901      	bls.n	800ad02 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e070      	b.n	800ade4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad02:	4b3b      	ldr	r3, [pc, #236]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f003 020c 	and.w	r2, r3, #12
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d1eb      	bne.n	800acec <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d009      	beq.n	800ad34 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad20:	4b33      	ldr	r3, [pc, #204]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	4930      	ldr	r1, [pc, #192]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	608b      	str	r3, [r1, #8]
 800ad32:	e008      	b.n	800ad46 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2b80      	cmp	r3, #128	; 0x80
 800ad38:	d105      	bne.n	800ad46 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ad3a:	4b2d      	ldr	r3, [pc, #180]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	4a2c      	ldr	r2, [pc, #176]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ad40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad44:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ad46:	4b29      	ldr	r3, [pc, #164]	; (800adec <HAL_RCC_ClockConfig+0x240>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 030f 	and.w	r3, r3, #15
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d210      	bcs.n	800ad76 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad54:	4b25      	ldr	r3, [pc, #148]	; (800adec <HAL_RCC_ClockConfig+0x240>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f023 020f 	bic.w	r2, r3, #15
 800ad5c:	4923      	ldr	r1, [pc, #140]	; (800adec <HAL_RCC_ClockConfig+0x240>)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad64:	4b21      	ldr	r3, [pc, #132]	; (800adec <HAL_RCC_ClockConfig+0x240>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 030f 	and.w	r3, r3, #15
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d001      	beq.n	800ad76 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e036      	b.n	800ade4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d008      	beq.n	800ad94 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad82:	4b1b      	ldr	r3, [pc, #108]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	4918      	ldr	r1, [pc, #96]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0308 	and.w	r3, r3, #8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d009      	beq.n	800adb4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ada0:	4b13      	ldr	r3, [pc, #76]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	00db      	lsls	r3, r3, #3
 800adae:	4910      	ldr	r1, [pc, #64]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800adb4:	f000 f826 	bl	800ae04 <HAL_RCC_GetSysClockFreq>
 800adb8:	4602      	mov	r2, r0
 800adba:	4b0d      	ldr	r3, [pc, #52]	; (800adf0 <HAL_RCC_ClockConfig+0x244>)
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	091b      	lsrs	r3, r3, #4
 800adc0:	f003 030f 	and.w	r3, r3, #15
 800adc4:	490c      	ldr	r1, [pc, #48]	; (800adf8 <HAL_RCC_ClockConfig+0x24c>)
 800adc6:	5ccb      	ldrb	r3, [r1, r3]
 800adc8:	f003 031f 	and.w	r3, r3, #31
 800adcc:	fa22 f303 	lsr.w	r3, r2, r3
 800add0:	4a0a      	ldr	r2, [pc, #40]	; (800adfc <HAL_RCC_ClockConfig+0x250>)
 800add2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800add4:	4b0a      	ldr	r3, [pc, #40]	; (800ae00 <HAL_RCC_ClockConfig+0x254>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4618      	mov	r0, r3
 800adda:	f7fb fb5b 	bl	8006494 <HAL_InitTick>
 800adde:	4603      	mov	r3, r0
 800ade0:	73fb      	strb	r3, [r7, #15]

  return status;
 800ade2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	40022000 	.word	0x40022000
 800adf0:	40021000 	.word	0x40021000
 800adf4:	04c4b400 	.word	0x04c4b400
 800adf8:	08022690 	.word	0x08022690
 800adfc:	20000038 	.word	0x20000038
 800ae00:	20000078 	.word	0x20000078

0800ae04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b089      	sub	sp, #36	; 0x24
 800ae08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	61fb      	str	r3, [r7, #28]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae12:	4b3e      	ldr	r3, [pc, #248]	; (800af0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	f003 030c 	and.w	r3, r3, #12
 800ae1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae1c:	4b3b      	ldr	r3, [pc, #236]	; (800af0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f003 0303 	and.w	r3, r3, #3
 800ae24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d005      	beq.n	800ae38 <HAL_RCC_GetSysClockFreq+0x34>
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	2b0c      	cmp	r3, #12
 800ae30:	d121      	bne.n	800ae76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d11e      	bne.n	800ae76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ae38:	4b34      	ldr	r3, [pc, #208]	; (800af0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 0308 	and.w	r3, r3, #8
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d107      	bne.n	800ae54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ae44:	4b31      	ldr	r3, [pc, #196]	; (800af0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ae46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae4a:	0a1b      	lsrs	r3, r3, #8
 800ae4c:	f003 030f 	and.w	r3, r3, #15
 800ae50:	61fb      	str	r3, [r7, #28]
 800ae52:	e005      	b.n	800ae60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ae54:	4b2d      	ldr	r3, [pc, #180]	; (800af0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	091b      	lsrs	r3, r3, #4
 800ae5a:	f003 030f 	and.w	r3, r3, #15
 800ae5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ae60:	4a2b      	ldr	r2, [pc, #172]	; (800af10 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10d      	bne.n	800ae8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ae74:	e00a      	b.n	800ae8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	2b04      	cmp	r3, #4
 800ae7a:	d102      	bne.n	800ae82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ae7c:	4b25      	ldr	r3, [pc, #148]	; (800af14 <HAL_RCC_GetSysClockFreq+0x110>)
 800ae7e:	61bb      	str	r3, [r7, #24]
 800ae80:	e004      	b.n	800ae8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	d101      	bne.n	800ae8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ae88:	4b22      	ldr	r3, [pc, #136]	; (800af14 <HAL_RCC_GetSysClockFreq+0x110>)
 800ae8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	2b0c      	cmp	r3, #12
 800ae90:	d134      	bne.n	800aefc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ae92:	4b1e      	ldr	r3, [pc, #120]	; (800af0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d003      	beq.n	800aeaa <HAL_RCC_GetSysClockFreq+0xa6>
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2b03      	cmp	r3, #3
 800aea6:	d003      	beq.n	800aeb0 <HAL_RCC_GetSysClockFreq+0xac>
 800aea8:	e005      	b.n	800aeb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800aeaa:	4b1a      	ldr	r3, [pc, #104]	; (800af14 <HAL_RCC_GetSysClockFreq+0x110>)
 800aeac:	617b      	str	r3, [r7, #20]
      break;
 800aeae:	e005      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800aeb0:	4b18      	ldr	r3, [pc, #96]	; (800af14 <HAL_RCC_GetSysClockFreq+0x110>)
 800aeb2:	617b      	str	r3, [r7, #20]
      break;
 800aeb4:	e002      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	617b      	str	r3, [r7, #20]
      break;
 800aeba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aebc:	4b13      	ldr	r3, [pc, #76]	; (800af0c <HAL_RCC_GetSysClockFreq+0x108>)
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	091b      	lsrs	r3, r3, #4
 800aec2:	f003 030f 	and.w	r3, r3, #15
 800aec6:	3301      	adds	r3, #1
 800aec8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800aeca:	4b10      	ldr	r3, [pc, #64]	; (800af0c <HAL_RCC_GetSysClockFreq+0x108>)
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	0a1b      	lsrs	r3, r3, #8
 800aed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	fb02 f203 	mul.w	r2, r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aee2:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <HAL_RCC_GetSysClockFreq+0x108>)
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	0e5b      	lsrs	r3, r3, #25
 800aee8:	f003 0303 	and.w	r3, r3, #3
 800aeec:	3301      	adds	r3, #1
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aefa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800aefc:	69bb      	ldr	r3, [r7, #24]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3724      	adds	r7, #36	; 0x24
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	40021000 	.word	0x40021000
 800af10:	080226a8 	.word	0x080226a8
 800af14:	00f42400 	.word	0x00f42400

0800af18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af18:	b480      	push	{r7}
 800af1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af1c:	4b03      	ldr	r3, [pc, #12]	; (800af2c <HAL_RCC_GetHCLKFreq+0x14>)
 800af1e:	681b      	ldr	r3, [r3, #0]
}
 800af20:	4618      	mov	r0, r3
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	20000038 	.word	0x20000038

0800af30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800af34:	f7ff fff0 	bl	800af18 <HAL_RCC_GetHCLKFreq>
 800af38:	4602      	mov	r2, r0
 800af3a:	4b06      	ldr	r3, [pc, #24]	; (800af54 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	0a1b      	lsrs	r3, r3, #8
 800af40:	f003 0307 	and.w	r3, r3, #7
 800af44:	4904      	ldr	r1, [pc, #16]	; (800af58 <HAL_RCC_GetPCLK1Freq+0x28>)
 800af46:	5ccb      	ldrb	r3, [r1, r3]
 800af48:	f003 031f 	and.w	r3, r3, #31
 800af4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af50:	4618      	mov	r0, r3
 800af52:	bd80      	pop	{r7, pc}
 800af54:	40021000 	.word	0x40021000
 800af58:	080226a0 	.word	0x080226a0

0800af5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800af60:	f7ff ffda 	bl	800af18 <HAL_RCC_GetHCLKFreq>
 800af64:	4602      	mov	r2, r0
 800af66:	4b06      	ldr	r3, [pc, #24]	; (800af80 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	0adb      	lsrs	r3, r3, #11
 800af6c:	f003 0307 	and.w	r3, r3, #7
 800af70:	4904      	ldr	r1, [pc, #16]	; (800af84 <HAL_RCC_GetPCLK2Freq+0x28>)
 800af72:	5ccb      	ldrb	r3, [r1, r3]
 800af74:	f003 031f 	and.w	r3, r3, #31
 800af78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	40021000 	.word	0x40021000
 800af84:	080226a0 	.word	0x080226a0

0800af88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800af90:	2300      	movs	r3, #0
 800af92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800af94:	4b27      	ldr	r3, [pc, #156]	; (800b034 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800af96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800afa0:	f7ff f8a6 	bl	800a0f0 <HAL_PWREx_GetVoltageRange>
 800afa4:	6178      	str	r0, [r7, #20]
 800afa6:	e014      	b.n	800afd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800afa8:	4b22      	ldr	r3, [pc, #136]	; (800b034 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800afaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afac:	4a21      	ldr	r2, [pc, #132]	; (800b034 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800afae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afb2:	6593      	str	r3, [r2, #88]	; 0x58
 800afb4:	4b1f      	ldr	r3, [pc, #124]	; (800b034 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800afb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afbc:	60fb      	str	r3, [r7, #12]
 800afbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800afc0:	f7ff f896 	bl	800a0f0 <HAL_PWREx_GetVoltageRange>
 800afc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800afc6:	4b1b      	ldr	r3, [pc, #108]	; (800b034 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800afc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afca:	4a1a      	ldr	r2, [pc, #104]	; (800b034 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800afcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afd8:	d10b      	bne.n	800aff2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b80      	cmp	r3, #128	; 0x80
 800afde:	d913      	bls.n	800b008 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2ba0      	cmp	r3, #160	; 0xa0
 800afe4:	d902      	bls.n	800afec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800afe6:	2302      	movs	r3, #2
 800afe8:	613b      	str	r3, [r7, #16]
 800afea:	e00d      	b.n	800b008 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800afec:	2301      	movs	r3, #1
 800afee:	613b      	str	r3, [r7, #16]
 800aff0:	e00a      	b.n	800b008 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b7f      	cmp	r3, #127	; 0x7f
 800aff6:	d902      	bls.n	800affe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800aff8:	2302      	movs	r3, #2
 800affa:	613b      	str	r3, [r7, #16]
 800affc:	e004      	b.n	800b008 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b70      	cmp	r3, #112	; 0x70
 800b002:	d101      	bne.n	800b008 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b004:	2301      	movs	r3, #1
 800b006:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b008:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f023 020f 	bic.w	r2, r3, #15
 800b010:	4909      	ldr	r1, [pc, #36]	; (800b038 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	4313      	orrs	r3, r2
 800b016:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b018:	4b07      	ldr	r3, [pc, #28]	; (800b038 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 030f 	and.w	r3, r3, #15
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	429a      	cmp	r2, r3
 800b024:	d001      	beq.n	800b02a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	e000      	b.n	800b02c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	40021000 	.word	0x40021000
 800b038:	40022000 	.word	0x40022000

0800b03c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b087      	sub	sp, #28
 800b040:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b042:	2300      	movs	r3, #0
 800b044:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800b046:	4b2d      	ldr	r3, [pc, #180]	; (800b0fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f003 0303 	and.w	r3, r3, #3
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d118      	bne.n	800b084 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b052:	4b2a      	ldr	r3, [pc, #168]	; (800b0fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0308 	and.w	r3, r3, #8
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d107      	bne.n	800b06e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b05e:	4b27      	ldr	r3, [pc, #156]	; (800b0fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b064:	0a1b      	lsrs	r3, r3, #8
 800b066:	f003 030f 	and.w	r3, r3, #15
 800b06a:	617b      	str	r3, [r7, #20]
 800b06c:	e005      	b.n	800b07a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b06e:	4b23      	ldr	r3, [pc, #140]	; (800b0fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	091b      	lsrs	r3, r3, #4
 800b074:	f003 030f 	and.w	r3, r3, #15
 800b078:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b07a:	4a21      	ldr	r2, [pc, #132]	; (800b100 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b082:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b084:	4b1d      	ldr	r3, [pc, #116]	; (800b0fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	f003 0303 	and.w	r3, r3, #3
 800b08c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b02      	cmp	r3, #2
 800b092:	d003      	beq.n	800b09c <RCC_GetSysClockFreqFromPLLSource+0x60>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2b03      	cmp	r3, #3
 800b098:	d003      	beq.n	800b0a2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800b09a:	e005      	b.n	800b0a8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800b09c:	4b19      	ldr	r3, [pc, #100]	; (800b104 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800b09e:	613b      	str	r3, [r7, #16]
    break;
 800b0a0:	e005      	b.n	800b0ae <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800b0a2:	4b18      	ldr	r3, [pc, #96]	; (800b104 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800b0a4:	613b      	str	r3, [r7, #16]
    break;
 800b0a6:	e002      	b.n	800b0ae <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	613b      	str	r3, [r7, #16]
    break;
 800b0ac:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b0ae:	4b13      	ldr	r3, [pc, #76]	; (800b0fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	091b      	lsrs	r3, r3, #4
 800b0b4:	f003 030f 	and.w	r3, r3, #15
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b0bc:	4b0f      	ldr	r3, [pc, #60]	; (800b0fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	0a1b      	lsrs	r3, r3, #8
 800b0c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	fb02 f203 	mul.w	r2, r2, r3
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b0d4:	4b09      	ldr	r3, [pc, #36]	; (800b0fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	0e5b      	lsrs	r3, r3, #25
 800b0da:	f003 0303 	and.w	r3, r3, #3
 800b0de:	3301      	adds	r3, #1
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ec:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800b0ee:	683b      	ldr	r3, [r7, #0]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	371c      	adds	r7, #28
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr
 800b0fc:	40021000 	.word	0x40021000
 800b100:	080226a8 	.word	0x080226a8
 800b104:	00f42400 	.word	0x00f42400

0800b108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b110:	2300      	movs	r3, #0
 800b112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b114:	2300      	movs	r3, #0
 800b116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b120:	2b00      	cmp	r3, #0
 800b122:	d040      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b128:	2b80      	cmp	r3, #128	; 0x80
 800b12a:	d02a      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b12c:	2b80      	cmp	r3, #128	; 0x80
 800b12e:	d825      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b130:	2b60      	cmp	r3, #96	; 0x60
 800b132:	d026      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b134:	2b60      	cmp	r3, #96	; 0x60
 800b136:	d821      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b138:	2b40      	cmp	r3, #64	; 0x40
 800b13a:	d006      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800b13c:	2b40      	cmp	r3, #64	; 0x40
 800b13e:	d81d      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b140:	2b00      	cmp	r3, #0
 800b142:	d009      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800b144:	2b20      	cmp	r3, #32
 800b146:	d010      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800b148:	e018      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b14a:	4b89      	ldr	r3, [pc, #548]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	4a88      	ldr	r2, [pc, #544]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b154:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b156:	e015      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	3304      	adds	r3, #4
 800b15c:	2100      	movs	r1, #0
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 fb62 	bl	800b828 <RCCEx_PLLSAI1_Config>
 800b164:	4603      	mov	r3, r0
 800b166:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b168:	e00c      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3320      	adds	r3, #32
 800b16e:	2100      	movs	r1, #0
 800b170:	4618      	mov	r0, r3
 800b172:	f000 fc4d 	bl	800ba10 <RCCEx_PLLSAI2_Config>
 800b176:	4603      	mov	r3, r0
 800b178:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b17a:	e003      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	74fb      	strb	r3, [r7, #19]
      break;
 800b180:	e000      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800b182:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b184:	7cfb      	ldrb	r3, [r7, #19]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10b      	bne.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b18a:	4b79      	ldr	r3, [pc, #484]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b18c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b190:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b198:	4975      	ldr	r1, [pc, #468]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b19a:	4313      	orrs	r3, r2
 800b19c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800b1a0:	e001      	b.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1a2:	7cfb      	ldrb	r3, [r7, #19]
 800b1a4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d047      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1ba:	d030      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b1bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1c0:	d82a      	bhi.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b1c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1c6:	d02a      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b1c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1cc:	d824      	bhi.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b1ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1d2:	d008      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800b1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1d8:	d81e      	bhi.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00a      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800b1de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1e2:	d010      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b1e4:	e018      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b1e6:	4b62      	ldr	r3, [pc, #392]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	4a61      	ldr	r2, [pc, #388]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b1ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1f0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b1f2:	e015      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 fb14 	bl	800b828 <RCCEx_PLLSAI1_Config>
 800b200:	4603      	mov	r3, r0
 800b202:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b204:	e00c      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3320      	adds	r3, #32
 800b20a:	2100      	movs	r1, #0
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 fbff 	bl	800ba10 <RCCEx_PLLSAI2_Config>
 800b212:	4603      	mov	r3, r0
 800b214:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b216:	e003      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	74fb      	strb	r3, [r7, #19]
      break;
 800b21c:	e000      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800b21e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b220:	7cfb      	ldrb	r3, [r7, #19]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10b      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b226:	4b52      	ldr	r3, [pc, #328]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b228:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b22c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b234:	494e      	ldr	r1, [pc, #312]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b236:	4313      	orrs	r3, r2
 800b238:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800b23c:	e001      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b23e:	7cfb      	ldrb	r3, [r7, #19]
 800b240:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 809f 	beq.w	800b38e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b250:	2300      	movs	r3, #0
 800b252:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b254:	4b46      	ldr	r3, [pc, #280]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d101      	bne.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800b260:	2301      	movs	r3, #1
 800b262:	e000      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800b264:	2300      	movs	r3, #0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00d      	beq.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b26a:	4b41      	ldr	r3, [pc, #260]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b26c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26e:	4a40      	ldr	r2, [pc, #256]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b274:	6593      	str	r3, [r2, #88]	; 0x58
 800b276:	4b3e      	ldr	r3, [pc, #248]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b27a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b27e:	60bb      	str	r3, [r7, #8]
 800b280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b282:	2301      	movs	r3, #1
 800b284:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b286:	4b3b      	ldr	r3, [pc, #236]	; (800b374 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a3a      	ldr	r2, [pc, #232]	; (800b374 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b28c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b290:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b292:	f7fb f94b 	bl	800652c <HAL_GetTick>
 800b296:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b298:	e009      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b29a:	f7fb f947 	bl	800652c <HAL_GetTick>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d902      	bls.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	74fb      	strb	r3, [r7, #19]
        break;
 800b2ac:	e005      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b2ae:	4b31      	ldr	r3, [pc, #196]	; (800b374 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d0ef      	beq.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800b2ba:	7cfb      	ldrb	r3, [r7, #19]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d15b      	bne.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b2c0:	4b2b      	ldr	r3, [pc, #172]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2ca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d01f      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d019      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b2de:	4b24      	ldr	r3, [pc, #144]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2ea:	4b21      	ldr	r3, [pc, #132]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2f0:	4a1f      	ldr	r2, [pc, #124]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b2f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b2fa:	4b1d      	ldr	r3, [pc, #116]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b2fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b300:	4a1b      	ldr	r2, [pc, #108]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b30a:	4a19      	ldr	r2, [pc, #100]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f003 0301 	and.w	r3, r3, #1
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d016      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b31c:	f7fb f906 	bl	800652c <HAL_GetTick>
 800b320:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b322:	e00b      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b324:	f7fb f902 	bl	800652c <HAL_GetTick>
 800b328:	4602      	mov	r2, r0
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b332:	4293      	cmp	r3, r2
 800b334:	d902      	bls.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800b336:	2303      	movs	r3, #3
 800b338:	74fb      	strb	r3, [r7, #19]
            break;
 800b33a:	e006      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b33c:	4b0c      	ldr	r3, [pc, #48]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b342:	f003 0302 	and.w	r3, r3, #2
 800b346:	2b00      	cmp	r3, #0
 800b348:	d0ec      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800b34a:	7cfb      	ldrb	r3, [r7, #19]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10c      	bne.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b350:	4b07      	ldr	r3, [pc, #28]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b360:	4903      	ldr	r1, [pc, #12]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b362:	4313      	orrs	r3, r2
 800b364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b368:	e008      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b36a:	7cfb      	ldrb	r3, [r7, #19]
 800b36c:	74bb      	strb	r3, [r7, #18]
 800b36e:	e005      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x274>
 800b370:	40021000 	.word	0x40021000
 800b374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b378:	7cfb      	ldrb	r3, [r7, #19]
 800b37a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b37c:	7c7b      	ldrb	r3, [r7, #17]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d105      	bne.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b382:	4ba0      	ldr	r3, [pc, #640]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b386:	4a9f      	ldr	r2, [pc, #636]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b38c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b39a:	4b9a      	ldr	r3, [pc, #616]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3a0:	f023 0203 	bic.w	r2, r3, #3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a8:	4996      	ldr	r1, [pc, #600]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0302 	and.w	r3, r3, #2
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00a      	beq.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b3bc:	4b91      	ldr	r3, [pc, #580]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c2:	f023 020c 	bic.w	r2, r3, #12
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ca:	498e      	ldr	r1, [pc, #568]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 0304 	and.w	r3, r3, #4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00a      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b3de:	4b89      	ldr	r3, [pc, #548]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ec:	4985      	ldr	r1, [pc, #532]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0308 	and.w	r3, r3, #8
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00a      	beq.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b400:	4b80      	ldr	r3, [pc, #512]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b406:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b40e:	497d      	ldr	r1, [pc, #500]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b410:	4313      	orrs	r3, r2
 800b412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0310 	and.w	r3, r3, #16
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b422:	4b78      	ldr	r3, [pc, #480]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b430:	4974      	ldr	r1, [pc, #464]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b432:	4313      	orrs	r3, r2
 800b434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 0320 	and.w	r3, r3, #32
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00a      	beq.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b444:	4b6f      	ldr	r3, [pc, #444]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b44a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b452:	496c      	ldr	r1, [pc, #432]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b454:	4313      	orrs	r3, r2
 800b456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00a      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b466:	4b67      	ldr	r3, [pc, #412]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b46c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b474:	4963      	ldr	r1, [pc, #396]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b476:	4313      	orrs	r3, r2
 800b478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00a      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b488:	4b5e      	ldr	r3, [pc, #376]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b48a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b48e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b496:	495b      	ldr	r1, [pc, #364]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b498:	4313      	orrs	r3, r2
 800b49a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b4aa:	4b56      	ldr	r3, [pc, #344]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4b8:	4952      	ldr	r1, [pc, #328]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00a      	beq.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b4cc:	4b4d      	ldr	r3, [pc, #308]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4da:	494a      	ldr	r1, [pc, #296]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b4ee:	4b45      	ldr	r3, [pc, #276]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4fc:	4941      	ldr	r1, [pc, #260]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00a      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b510:	4b3c      	ldr	r3, [pc, #240]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b516:	f023 0203 	bic.w	r2, r3, #3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b51e:	4939      	ldr	r1, [pc, #228]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b520:	4313      	orrs	r3, r2
 800b522:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d028      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b532:	4b34      	ldr	r3, [pc, #208]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b538:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b540:	4930      	ldr	r1, [pc, #192]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b542:	4313      	orrs	r3, r2
 800b544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b54c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b550:	d106      	bne.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b552:	4b2c      	ldr	r3, [pc, #176]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	4a2b      	ldr	r2, [pc, #172]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b55c:	60d3      	str	r3, [r2, #12]
 800b55e:	e011      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b568:	d10c      	bne.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	3304      	adds	r3, #4
 800b56e:	2101      	movs	r1, #1
 800b570:	4618      	mov	r0, r3
 800b572:	f000 f959 	bl	800b828 <RCCEx_PLLSAI1_Config>
 800b576:	4603      	mov	r3, r0
 800b578:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b57a:	7cfb      	ldrb	r3, [r7, #19]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800b580:	7cfb      	ldrb	r3, [r7, #19]
 800b582:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d04d      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b598:	d108      	bne.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800b59a:	4b1a      	ldr	r3, [pc, #104]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b59c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5a0:	4a18      	ldr	r2, [pc, #96]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b5a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b5aa:	e012      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800b5ac:	4b15      	ldr	r3, [pc, #84]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5b2:	4a14      	ldr	r2, [pc, #80]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b5bc:	4b11      	ldr	r3, [pc, #68]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5ca:	490e      	ldr	r1, [pc, #56]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5da:	d106      	bne.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b5dc:	4b09      	ldr	r3, [pc, #36]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	4a08      	ldr	r2, [pc, #32]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5e6:	60d3      	str	r3, [r2, #12]
 800b5e8:	e020      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5f2:	d109      	bne.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b5f4:	4b03      	ldr	r3, [pc, #12]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	4a02      	ldr	r2, [pc, #8]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5fe:	60d3      	str	r3, [r2, #12]
 800b600:	e014      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b602:	bf00      	nop
 800b604:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b60c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b610:	d10c      	bne.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3304      	adds	r3, #4
 800b616:	2101      	movs	r1, #1
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 f905 	bl	800b828 <RCCEx_PLLSAI1_Config>
 800b61e:	4603      	mov	r3, r0
 800b620:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b622:	7cfb      	ldrb	r3, [r7, #19]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800b628:	7cfb      	ldrb	r3, [r7, #19]
 800b62a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d028      	beq.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b638:	4b7a      	ldr	r3, [pc, #488]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b63e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b646:	4977      	ldr	r1, [pc, #476]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b648:	4313      	orrs	r3, r2
 800b64a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b656:	d106      	bne.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b658:	4b72      	ldr	r3, [pc, #456]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	4a71      	ldr	r2, [pc, #452]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b65e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b662:	60d3      	str	r3, [r2, #12]
 800b664:	e011      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b66a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b66e:	d10c      	bne.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3304      	adds	r3, #4
 800b674:	2101      	movs	r1, #1
 800b676:	4618      	mov	r0, r3
 800b678:	f000 f8d6 	bl	800b828 <RCCEx_PLLSAI1_Config>
 800b67c:	4603      	mov	r3, r0
 800b67e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b680:	7cfb      	ldrb	r3, [r7, #19]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800b686:	7cfb      	ldrb	r3, [r7, #19]
 800b688:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d01e      	beq.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b696:	4b63      	ldr	r3, [pc, #396]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b69c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6a6:	495f      	ldr	r1, [pc, #380]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6b8:	d10c      	bne.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3304      	adds	r3, #4
 800b6be:	2102      	movs	r1, #2
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 f8b1 	bl	800b828 <RCCEx_PLLSAI1_Config>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b6ca:	7cfb      	ldrb	r3, [r7, #19]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800b6d0:	7cfb      	ldrb	r3, [r7, #19]
 800b6d2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00b      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b6e0:	4b50      	ldr	r3, [pc, #320]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b6e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6e6:	f023 0204 	bic.w	r2, r3, #4
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6f0:	494c      	ldr	r1, [pc, #304]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00b      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b704:	4b47      	ldr	r3, [pc, #284]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b70a:	f023 0218 	bic.w	r2, r3, #24
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b714:	4943      	ldr	r1, [pc, #268]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b716:	4313      	orrs	r3, r2
 800b718:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d035      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b728:	4b3e      	ldr	r3, [pc, #248]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a3d      	ldr	r2, [pc, #244]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b72e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b734:	f7fa fefa 	bl	800652c <HAL_GetTick>
 800b738:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b73a:	e009      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b73c:	f7fa fef6 	bl	800652c <HAL_GetTick>
 800b740:	4602      	mov	r2, r0
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	2b02      	cmp	r3, #2
 800b748:	d902      	bls.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	74fb      	strb	r3, [r7, #19]
        break;
 800b74e:	e005      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b750:	4b34      	ldr	r3, [pc, #208]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1ef      	bne.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800b75c:	7cfb      	ldrb	r3, [r7, #19]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d113      	bne.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800b762:	4b30      	ldr	r3, [pc, #192]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b764:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b772:	492c      	ldr	r1, [pc, #176]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b774:	4313      	orrs	r3, r2
 800b776:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3320      	adds	r3, #32
 800b77e:	2102      	movs	r1, #2
 800b780:	4618      	mov	r0, r3
 800b782:	f000 f945 	bl	800ba10 <RCCEx_PLLSAI2_Config>
 800b786:	4603      	mov	r3, r0
 800b788:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800b78a:	7cfb      	ldrb	r3, [r7, #19]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d001      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800b790:	7cfb      	ldrb	r3, [r7, #19]
 800b792:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d01e      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800b7a0:	4b20      	ldr	r3, [pc, #128]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b7a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7b0:	491c      	ldr	r1, [pc, #112]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7c2:	d10c      	bne.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	3320      	adds	r3, #32
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 f920 	bl	800ba10 <RCCEx_PLLSAI2_Config>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b7d4:	7cfb      	ldrb	r3, [r7, #19]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800b7da:	7cfb      	ldrb	r3, [r7, #19]
 800b7dc:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d017      	beq.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b7ea:	4b0e      	ldr	r3, [pc, #56]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b7ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7fa:	490a      	ldr	r1, [pc, #40]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b80c:	d105      	bne.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b80e:	4b05      	ldr	r3, [pc, #20]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	4a04      	ldr	r2, [pc, #16]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b818:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b81a:	7cbb      	ldrb	r3, [r7, #18]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	40021000 	.word	0x40021000

0800b828 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b836:	4b72      	ldr	r3, [pc, #456]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	f003 0303 	and.w	r3, r3, #3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00e      	beq.n	800b860 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b842:	4b6f      	ldr	r3, [pc, #444]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	f003 0203 	and.w	r2, r3, #3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d103      	bne.n	800b85a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
       ||
 800b856:	2b00      	cmp	r3, #0
 800b858:	d142      	bne.n	800b8e0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	73fb      	strb	r3, [r7, #15]
 800b85e:	e03f      	b.n	800b8e0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b03      	cmp	r3, #3
 800b866:	d018      	beq.n	800b89a <RCCEx_PLLSAI1_Config+0x72>
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d825      	bhi.n	800b8b8 <RCCEx_PLLSAI1_Config+0x90>
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d002      	beq.n	800b876 <RCCEx_PLLSAI1_Config+0x4e>
 800b870:	2b02      	cmp	r3, #2
 800b872:	d009      	beq.n	800b888 <RCCEx_PLLSAI1_Config+0x60>
 800b874:	e020      	b.n	800b8b8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b876:	4b62      	ldr	r3, [pc, #392]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 0302 	and.w	r3, r3, #2
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d11d      	bne.n	800b8be <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b886:	e01a      	b.n	800b8be <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b888:	4b5d      	ldr	r3, [pc, #372]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b890:	2b00      	cmp	r3, #0
 800b892:	d116      	bne.n	800b8c2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b898:	e013      	b.n	800b8c2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b89a:	4b59      	ldr	r3, [pc, #356]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10f      	bne.n	800b8c6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b8a6:	4b56      	ldr	r3, [pc, #344]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d109      	bne.n	800b8c6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b8b6:	e006      	b.n	800b8c6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b8bc:	e004      	b.n	800b8c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b8be:	bf00      	nop
 800b8c0:	e002      	b.n	800b8c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b8c2:	bf00      	nop
 800b8c4:	e000      	b.n	800b8c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b8c6:	bf00      	nop
    }

    if(status == HAL_OK)
 800b8c8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d108      	bne.n	800b8e0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b8ce:	4b4c      	ldr	r3, [pc, #304]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	f023 0203 	bic.w	r2, r3, #3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4949      	ldr	r1, [pc, #292]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f040 8086 	bne.w	800b9f4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b8e8:	4b45      	ldr	r3, [pc, #276]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a44      	ldr	r2, [pc, #272]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b8ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b8f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8f4:	f7fa fe1a 	bl	800652c <HAL_GetTick>
 800b8f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b8fa:	e009      	b.n	800b910 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b8fc:	f7fa fe16 	bl	800652c <HAL_GetTick>
 800b900:	4602      	mov	r2, r0
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	2b02      	cmp	r3, #2
 800b908:	d902      	bls.n	800b910 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b90a:	2303      	movs	r3, #3
 800b90c:	73fb      	strb	r3, [r7, #15]
        break;
 800b90e:	e005      	b.n	800b91c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b910:	4b3b      	ldr	r3, [pc, #236]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1ef      	bne.n	800b8fc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d168      	bne.n	800b9f4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d113      	bne.n	800b950 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b928:	4b35      	ldr	r3, [pc, #212]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b92a:	691a      	ldr	r2, [r3, #16]
 800b92c:	4b35      	ldr	r3, [pc, #212]	; (800ba04 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b92e:	4013      	ands	r3, r2
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	6892      	ldr	r2, [r2, #8]
 800b934:	0211      	lsls	r1, r2, #8
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	68d2      	ldr	r2, [r2, #12]
 800b93a:	06d2      	lsls	r2, r2, #27
 800b93c:	4311      	orrs	r1, r2
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	6852      	ldr	r2, [r2, #4]
 800b942:	3a01      	subs	r2, #1
 800b944:	0112      	lsls	r2, r2, #4
 800b946:	430a      	orrs	r2, r1
 800b948:	492d      	ldr	r1, [pc, #180]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b94a:	4313      	orrs	r3, r2
 800b94c:	610b      	str	r3, [r1, #16]
 800b94e:	e02d      	b.n	800b9ac <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d115      	bne.n	800b982 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b956:	4b2a      	ldr	r3, [pc, #168]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b958:	691a      	ldr	r2, [r3, #16]
 800b95a:	4b2b      	ldr	r3, [pc, #172]	; (800ba08 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b95c:	4013      	ands	r3, r2
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	6892      	ldr	r2, [r2, #8]
 800b962:	0211      	lsls	r1, r2, #8
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	6912      	ldr	r2, [r2, #16]
 800b968:	0852      	lsrs	r2, r2, #1
 800b96a:	3a01      	subs	r2, #1
 800b96c:	0552      	lsls	r2, r2, #21
 800b96e:	4311      	orrs	r1, r2
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	6852      	ldr	r2, [r2, #4]
 800b974:	3a01      	subs	r2, #1
 800b976:	0112      	lsls	r2, r2, #4
 800b978:	430a      	orrs	r2, r1
 800b97a:	4921      	ldr	r1, [pc, #132]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b97c:	4313      	orrs	r3, r2
 800b97e:	610b      	str	r3, [r1, #16]
 800b980:	e014      	b.n	800b9ac <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b982:	4b1f      	ldr	r3, [pc, #124]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b984:	691a      	ldr	r2, [r3, #16]
 800b986:	4b21      	ldr	r3, [pc, #132]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800b988:	4013      	ands	r3, r2
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	6892      	ldr	r2, [r2, #8]
 800b98e:	0211      	lsls	r1, r2, #8
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	6952      	ldr	r2, [r2, #20]
 800b994:	0852      	lsrs	r2, r2, #1
 800b996:	3a01      	subs	r2, #1
 800b998:	0652      	lsls	r2, r2, #25
 800b99a:	4311      	orrs	r1, r2
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	6852      	ldr	r2, [r2, #4]
 800b9a0:	3a01      	subs	r2, #1
 800b9a2:	0112      	lsls	r2, r2, #4
 800b9a4:	430a      	orrs	r2, r1
 800b9a6:	4916      	ldr	r1, [pc, #88]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b9ac:	4b14      	ldr	r3, [pc, #80]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a13      	ldr	r2, [pc, #76]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9b8:	f7fa fdb8 	bl	800652c <HAL_GetTick>
 800b9bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b9be:	e009      	b.n	800b9d4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b9c0:	f7fa fdb4 	bl	800652c <HAL_GetTick>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d902      	bls.n	800b9d4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	73fb      	strb	r3, [r7, #15]
          break;
 800b9d2:	e005      	b.n	800b9e0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d0ef      	beq.n	800b9c0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d106      	bne.n	800b9f4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b9e6:	4b06      	ldr	r3, [pc, #24]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9e8:	691a      	ldr	r2, [r3, #16]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	4904      	ldr	r1, [pc, #16]	; (800ba00 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	40021000 	.word	0x40021000
 800ba04:	07ff800f 	.word	0x07ff800f
 800ba08:	ff9f800f 	.word	0xff9f800f
 800ba0c:	f9ff800f 	.word	0xf9ff800f

0800ba10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ba1e:	4b72      	ldr	r3, [pc, #456]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f003 0303 	and.w	r3, r3, #3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00e      	beq.n	800ba48 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ba2a:	4b6f      	ldr	r3, [pc, #444]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	f003 0203 	and.w	r2, r3, #3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d103      	bne.n	800ba42 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
       ||
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d142      	bne.n	800bac8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	73fb      	strb	r3, [r7, #15]
 800ba46:	e03f      	b.n	800bac8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b03      	cmp	r3, #3
 800ba4e:	d018      	beq.n	800ba82 <RCCEx_PLLSAI2_Config+0x72>
 800ba50:	2b03      	cmp	r3, #3
 800ba52:	d825      	bhi.n	800baa0 <RCCEx_PLLSAI2_Config+0x90>
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d002      	beq.n	800ba5e <RCCEx_PLLSAI2_Config+0x4e>
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d009      	beq.n	800ba70 <RCCEx_PLLSAI2_Config+0x60>
 800ba5c:	e020      	b.n	800baa0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ba5e:	4b62      	ldr	r3, [pc, #392]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0302 	and.w	r3, r3, #2
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d11d      	bne.n	800baa6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba6e:	e01a      	b.n	800baa6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ba70:	4b5d      	ldr	r3, [pc, #372]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d116      	bne.n	800baaa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba80:	e013      	b.n	800baaa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ba82:	4b59      	ldr	r3, [pc, #356]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10f      	bne.n	800baae <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ba8e:	4b56      	ldr	r3, [pc, #344]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d109      	bne.n	800baae <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba9e:	e006      	b.n	800baae <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	73fb      	strb	r3, [r7, #15]
      break;
 800baa4:	e004      	b.n	800bab0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800baa6:	bf00      	nop
 800baa8:	e002      	b.n	800bab0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800baaa:	bf00      	nop
 800baac:	e000      	b.n	800bab0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800baae:	bf00      	nop
    }

    if(status == HAL_OK)
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d108      	bne.n	800bac8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800bab6:	4b4c      	ldr	r3, [pc, #304]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	f023 0203 	bic.w	r2, r3, #3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4949      	ldr	r1, [pc, #292]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bac4:	4313      	orrs	r3, r2
 800bac6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f040 8086 	bne.w	800bbdc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800bad0:	4b45      	ldr	r3, [pc, #276]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a44      	ldr	r2, [pc, #272]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800badc:	f7fa fd26 	bl	800652c <HAL_GetTick>
 800bae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bae2:	e009      	b.n	800baf8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bae4:	f7fa fd22 	bl	800652c <HAL_GetTick>
 800bae8:	4602      	mov	r2, r0
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d902      	bls.n	800baf8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	73fb      	strb	r3, [r7, #15]
        break;
 800baf6:	e005      	b.n	800bb04 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800baf8:	4b3b      	ldr	r3, [pc, #236]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1ef      	bne.n	800bae4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d168      	bne.n	800bbdc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d113      	bne.n	800bb38 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bb10:	4b35      	ldr	r3, [pc, #212]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb12:	695a      	ldr	r2, [r3, #20]
 800bb14:	4b35      	ldr	r3, [pc, #212]	; (800bbec <RCCEx_PLLSAI2_Config+0x1dc>)
 800bb16:	4013      	ands	r3, r2
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	6892      	ldr	r2, [r2, #8]
 800bb1c:	0211      	lsls	r1, r2, #8
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	68d2      	ldr	r2, [r2, #12]
 800bb22:	06d2      	lsls	r2, r2, #27
 800bb24:	4311      	orrs	r1, r2
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	6852      	ldr	r2, [r2, #4]
 800bb2a:	3a01      	subs	r2, #1
 800bb2c:	0112      	lsls	r2, r2, #4
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	492d      	ldr	r1, [pc, #180]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb32:	4313      	orrs	r3, r2
 800bb34:	614b      	str	r3, [r1, #20]
 800bb36:	e02d      	b.n	800bb94 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d115      	bne.n	800bb6a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bb3e:	4b2a      	ldr	r3, [pc, #168]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb40:	695a      	ldr	r2, [r3, #20]
 800bb42:	4b2b      	ldr	r3, [pc, #172]	; (800bbf0 <RCCEx_PLLSAI2_Config+0x1e0>)
 800bb44:	4013      	ands	r3, r2
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	6892      	ldr	r2, [r2, #8]
 800bb4a:	0211      	lsls	r1, r2, #8
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	6912      	ldr	r2, [r2, #16]
 800bb50:	0852      	lsrs	r2, r2, #1
 800bb52:	3a01      	subs	r2, #1
 800bb54:	0552      	lsls	r2, r2, #21
 800bb56:	4311      	orrs	r1, r2
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	6852      	ldr	r2, [r2, #4]
 800bb5c:	3a01      	subs	r2, #1
 800bb5e:	0112      	lsls	r2, r2, #4
 800bb60:	430a      	orrs	r2, r1
 800bb62:	4921      	ldr	r1, [pc, #132]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb64:	4313      	orrs	r3, r2
 800bb66:	614b      	str	r3, [r1, #20]
 800bb68:	e014      	b.n	800bb94 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bb6a:	4b1f      	ldr	r3, [pc, #124]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb6c:	695a      	ldr	r2, [r3, #20]
 800bb6e:	4b21      	ldr	r3, [pc, #132]	; (800bbf4 <RCCEx_PLLSAI2_Config+0x1e4>)
 800bb70:	4013      	ands	r3, r2
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	6892      	ldr	r2, [r2, #8]
 800bb76:	0211      	lsls	r1, r2, #8
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	6952      	ldr	r2, [r2, #20]
 800bb7c:	0852      	lsrs	r2, r2, #1
 800bb7e:	3a01      	subs	r2, #1
 800bb80:	0652      	lsls	r2, r2, #25
 800bb82:	4311      	orrs	r1, r2
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	6852      	ldr	r2, [r2, #4]
 800bb88:	3a01      	subs	r2, #1
 800bb8a:	0112      	lsls	r2, r2, #4
 800bb8c:	430a      	orrs	r2, r1
 800bb8e:	4916      	ldr	r1, [pc, #88]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb90:	4313      	orrs	r3, r2
 800bb92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800bb94:	4b14      	ldr	r3, [pc, #80]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a13      	ldr	r2, [pc, #76]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bba0:	f7fa fcc4 	bl	800652c <HAL_GetTick>
 800bba4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bba6:	e009      	b.n	800bbbc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bba8:	f7fa fcc0 	bl	800652c <HAL_GetTick>
 800bbac:	4602      	mov	r2, r0
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d902      	bls.n	800bbbc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	73fb      	strb	r3, [r7, #15]
          break;
 800bbba:	e005      	b.n	800bbc8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d0ef      	beq.n	800bba8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d106      	bne.n	800bbdc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800bbce:	4b06      	ldr	r3, [pc, #24]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bbd0:	695a      	ldr	r2, [r3, #20]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	4904      	ldr	r1, [pc, #16]	; (800bbe8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	40021000 	.word	0x40021000
 800bbec:	07ff800f 	.word	0x07ff800f
 800bbf0:	ff9f800f 	.word	0xff9f800f
 800bbf4:	f9ff800f 	.word	0xf9ff800f

0800bbf8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d06c      	beq.n	800bce4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7f7 fcf0 	bl	8003604 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2202      	movs	r2, #2
 800bc28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	22ca      	movs	r2, #202	; 0xca
 800bc32:	625a      	str	r2, [r3, #36]	; 0x24
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2253      	movs	r2, #83	; 0x53
 800bc3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fadd 	bl	800c1fc <RTC_EnterInitMode>
 800bc42:	4603      	mov	r3, r0
 800bc44:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800bc46:	7bfb      	ldrb	r3, [r7, #15]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d14b      	bne.n	800bce4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	6812      	ldr	r2, [r2, #0]
 800bc56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bc5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc5e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6899      	ldr	r1, [r3, #8]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	431a      	orrs	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	431a      	orrs	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	430a      	orrs	r2, r1
 800bc7c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	68d2      	ldr	r2, [r2, #12]
 800bc86:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6919      	ldr	r1, [r3, #16]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	041a      	lsls	r2, r3, #16
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fae1 	bl	800c264 <RTC_ExitInitMode>
 800bca2:	4603      	mov	r3, r0
 800bca4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d11b      	bne.n	800bce4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f022 0203 	bic.w	r2, r2, #3
 800bcba:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	69da      	ldr	r2, [r3, #28]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	431a      	orrs	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	430a      	orrs	r2, r1
 800bcd2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	22ff      	movs	r2, #255	; 0xff
 800bcda:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bcee:	b590      	push	{r4, r7, lr}
 800bcf0:	b087      	sub	sp, #28
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	60f8      	str	r0, [r7, #12]
 800bcf6:	60b9      	str	r1, [r7, #8]
 800bcf8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d101      	bne.n	800bd08 <HAL_RTC_SetTime+0x1a>
 800bd04:	2302      	movs	r3, #2
 800bd06:	e08b      	b.n	800be20 <HAL_RTC_SetTime+0x132>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2202      	movs	r2, #2
 800bd14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	22ca      	movs	r2, #202	; 0xca
 800bd1e:	625a      	str	r2, [r3, #36]	; 0x24
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2253      	movs	r2, #83	; 0x53
 800bd26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 fa67 	bl	800c1fc <RTC_EnterInitMode>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bd32:	7cfb      	ldrb	r3, [r7, #19]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d163      	bne.n	800be00 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d126      	bne.n	800bd8c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d102      	bne.n	800bd52 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 fac2 	bl	800c2e0 <RTC_ByteToBcd2>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	785b      	ldrb	r3, [r3, #1]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 fabb 	bl	800c2e0 <RTC_ByteToBcd2>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd6e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	789b      	ldrb	r3, [r3, #2]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 fab3 	bl	800c2e0 <RTC_ByteToBcd2>
 800bd7a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd7c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	78db      	ldrb	r3, [r3, #3]
 800bd84:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd86:	4313      	orrs	r3, r2
 800bd88:	617b      	str	r3, [r7, #20]
 800bd8a:	e018      	b.n	800bdbe <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d102      	bne.n	800bda0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	785b      	ldrb	r3, [r3, #1]
 800bdaa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bdac:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bdb2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	78db      	ldrb	r3, [r3, #3]
 800bdb8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bdc8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bdcc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bddc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	6899      	ldr	r1, [r3, #8]
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	68da      	ldr	r2, [r3, #12]
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	431a      	orrs	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	430a      	orrs	r2, r1
 800bdf4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f000 fa34 	bl	800c264 <RTC_ExitInitMode>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	22ff      	movs	r2, #255	; 0xff
 800be06:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800be08:	7cfb      	ldrb	r3, [r7, #19]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d103      	bne.n	800be16 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2201      	movs	r2, #1
 800be12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800be1e:	7cfb      	ldrb	r3, [r7, #19]
}
 800be20:	4618      	mov	r0, r3
 800be22:	371c      	adds	r7, #28
 800be24:	46bd      	mov	sp, r7
 800be26:	bd90      	pop	{r4, r7, pc}

0800be28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800be28:	b590      	push	{r4, r7, lr}
 800be2a:	b087      	sub	sp, #28
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d101      	bne.n	800be42 <HAL_RTC_SetDate+0x1a>
 800be3e:	2302      	movs	r3, #2
 800be40:	e075      	b.n	800bf2e <HAL_RTC_SetDate+0x106>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2202      	movs	r2, #2
 800be4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10e      	bne.n	800be76 <HAL_RTC_SetDate+0x4e>
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	785b      	ldrb	r3, [r3, #1]
 800be5c:	f003 0310 	and.w	r3, r3, #16
 800be60:	2b00      	cmp	r3, #0
 800be62:	d008      	beq.n	800be76 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	785b      	ldrb	r3, [r3, #1]
 800be68:	f023 0310 	bic.w	r3, r3, #16
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	330a      	adds	r3, #10
 800be70:	b2da      	uxtb	r2, r3
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d11c      	bne.n	800beb6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	78db      	ldrb	r3, [r3, #3]
 800be80:	4618      	mov	r0, r3
 800be82:	f000 fa2d 	bl	800c2e0 <RTC_ByteToBcd2>
 800be86:	4603      	mov	r3, r0
 800be88:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	785b      	ldrb	r3, [r3, #1]
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 fa26 	bl	800c2e0 <RTC_ByteToBcd2>
 800be94:	4603      	mov	r3, r0
 800be96:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800be98:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	789b      	ldrb	r3, [r3, #2]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 fa1e 	bl	800c2e0 <RTC_ByteToBcd2>
 800bea4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bea6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800beb0:	4313      	orrs	r3, r2
 800beb2:	617b      	str	r3, [r7, #20]
 800beb4:	e00e      	b.n	800bed4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	78db      	ldrb	r3, [r3, #3]
 800beba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	785b      	ldrb	r3, [r3, #1]
 800bec0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bec2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800bec4:	68ba      	ldr	r2, [r7, #8]
 800bec6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bec8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bed0:	4313      	orrs	r3, r2
 800bed2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	22ca      	movs	r2, #202	; 0xca
 800beda:	625a      	str	r2, [r3, #36]	; 0x24
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2253      	movs	r2, #83	; 0x53
 800bee2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f000 f989 	bl	800c1fc <RTC_EnterInitMode>
 800beea:	4603      	mov	r3, r0
 800beec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800beee:	7cfb      	ldrb	r3, [r7, #19]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10c      	bne.n	800bf0e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800befe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bf02:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 f9ad 	bl	800c264 <RTC_ExitInitMode>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	22ff      	movs	r2, #255	; 0xff
 800bf14:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800bf16:	7cfb      	ldrb	r3, [r7, #19]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d103      	bne.n	800bf24 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800bf2c:	7cfb      	ldrb	r3, [r7, #19]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	371c      	adds	r7, #28
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd90      	pop	{r4, r7, pc}
	...

0800bf38 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800bf38:	b590      	push	{r4, r7, lr}
 800bf3a:	b089      	sub	sp, #36	; 0x24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d101      	bne.n	800bf52 <HAL_RTC_SetAlarm_IT+0x1a>
 800bf4e:	2302      	movs	r3, #2
 800bf50:	e127      	b.n	800c1a2 <HAL_RTC_SetAlarm_IT+0x26a>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2202      	movs	r2, #2
 800bf5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d137      	bne.n	800bfd8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d102      	bne.n	800bf7c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 f9ad 	bl	800c2e0 <RTC_ByteToBcd2>
 800bf86:	4603      	mov	r3, r0
 800bf88:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	785b      	ldrb	r3, [r3, #1]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 f9a6 	bl	800c2e0 <RTC_ByteToBcd2>
 800bf94:	4603      	mov	r3, r0
 800bf96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800bf98:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	789b      	ldrb	r3, [r3, #2]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 f99e 	bl	800c2e0 <RTC_ByteToBcd2>
 800bfa4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bfa6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	78db      	ldrb	r3, [r3, #3]
 800bfae:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800bfb0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f000 f990 	bl	800c2e0 <RTC_ByteToBcd2>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800bfc4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800bfcc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	61fb      	str	r3, [r7, #28]
 800bfd6:	e023      	b.n	800c020 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d102      	bne.n	800bfec <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	785b      	ldrb	r3, [r3, #1]
 800bff6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800bff8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bffe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	78db      	ldrb	r3, [r3, #3]
 800c004:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800c006:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c00e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800c010:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800c016:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c01c:	4313      	orrs	r3, r2
 800c01e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	685a      	ldr	r2, [r3, #4]
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	4313      	orrs	r3, r2
 800c02a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	22ca      	movs	r2, #202	; 0xca
 800c032:	625a      	str	r2, [r3, #36]	; 0x24
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2253      	movs	r2, #83	; 0x53
 800c03a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c044:	d14a      	bne.n	800c0dc <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	689a      	ldr	r2, [r3, #8]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c054:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c066:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800c068:	f7fa fa60 	bl	800652c <HAL_GetTick>
 800c06c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c06e:	e015      	b.n	800c09c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c070:	f7fa fa5c 	bl	800652c <HAL_GetTick>
 800c074:	4602      	mov	r2, r0
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c07e:	d90d      	bls.n	800c09c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	22ff      	movs	r2, #255	; 0xff
 800c086:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2203      	movs	r2, #3
 800c08c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c098:	2303      	movs	r3, #3
 800c09a:	e082      	b.n	800c1a2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d0e2      	beq.n	800c070 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	69fa      	ldr	r2, [r7, #28]
 800c0b0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	69ba      	ldr	r2, [r7, #24]
 800c0b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	689a      	ldr	r2, [r3, #8]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0c8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	689a      	ldr	r2, [r3, #8]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c0d8:	609a      	str	r2, [r3, #8]
 800c0da:	e049      	b.n	800c170 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689a      	ldr	r2, [r3, #8]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c0ea:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c0fc:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800c0fe:	f7fa fa15 	bl	800652c <HAL_GetTick>
 800c102:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c104:	e015      	b.n	800c132 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c106:	f7fa fa11 	bl	800652c <HAL_GetTick>
 800c10a:	4602      	mov	r2, r0
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c114:	d90d      	bls.n	800c132 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	22ff      	movs	r2, #255	; 0xff
 800c11c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2203      	movs	r2, #3
 800c122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e037      	b.n	800c1a2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	f003 0302 	and.w	r3, r3, #2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d0e2      	beq.n	800c106 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	69fa      	ldr	r2, [r7, #28]
 800c146:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	69ba      	ldr	r2, [r7, #24]
 800c14e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	689a      	ldr	r2, [r3, #8]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c15e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689a      	ldr	r2, [r3, #8]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c16e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c170:	4b0e      	ldr	r3, [pc, #56]	; (800c1ac <HAL_RTC_SetAlarm_IT+0x274>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a0d      	ldr	r2, [pc, #52]	; (800c1ac <HAL_RTC_SetAlarm_IT+0x274>)
 800c176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c17a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800c17c:	4b0b      	ldr	r3, [pc, #44]	; (800c1ac <HAL_RTC_SetAlarm_IT+0x274>)
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	4a0a      	ldr	r2, [pc, #40]	; (800c1ac <HAL_RTC_SetAlarm_IT+0x274>)
 800c182:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c186:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	22ff      	movs	r2, #255	; 0xff
 800c18e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3724      	adds	r7, #36	; 0x24
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd90      	pop	{r4, r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	40010400 	.word	0x40010400

0800c1b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68da      	ldr	r2, [r3, #12]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c1c6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800c1c8:	f7fa f9b0 	bl	800652c <HAL_GetTick>
 800c1cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c1ce:	e009      	b.n	800c1e4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c1d0:	f7fa f9ac 	bl	800652c <HAL_GetTick>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1de:	d901      	bls.n	800c1e4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	e007      	b.n	800c1f4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	f003 0320 	and.w	r3, r3, #32
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d0ee      	beq.n	800c1d0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c204:	2300      	movs	r3, #0
 800c206:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c212:	2b00      	cmp	r3, #0
 800c214:	d120      	bne.n	800c258 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f04f 32ff 	mov.w	r2, #4294967295
 800c21e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c220:	f7fa f984 	bl	800652c <HAL_GetTick>
 800c224:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c226:	e00d      	b.n	800c244 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c228:	f7fa f980 	bl	800652c <HAL_GetTick>
 800c22c:	4602      	mov	r2, r0
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c236:	d905      	bls.n	800c244 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2203      	movs	r2, #3
 800c240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d102      	bne.n	800c258 <RTC_EnterInitMode+0x5c>
 800c252:	7bfb      	ldrb	r3, [r7, #15]
 800c254:	2b03      	cmp	r3, #3
 800c256:	d1e7      	bne.n	800c228 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800c258:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c270:	4b1a      	ldr	r3, [pc, #104]	; (800c2dc <RTC_ExitInitMode+0x78>)
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	4a19      	ldr	r2, [pc, #100]	; (800c2dc <RTC_ExitInitMode+0x78>)
 800c276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c27a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c27c:	4b17      	ldr	r3, [pc, #92]	; (800c2dc <RTC_ExitInitMode+0x78>)
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f003 0320 	and.w	r3, r3, #32
 800c284:	2b00      	cmp	r3, #0
 800c286:	d10c      	bne.n	800c2a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7ff ff91 	bl	800c1b0 <HAL_RTC_WaitForSynchro>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01e      	beq.n	800c2d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2203      	movs	r2, #3
 800c298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	73fb      	strb	r3, [r7, #15]
 800c2a0:	e017      	b.n	800c2d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c2a2:	4b0e      	ldr	r3, [pc, #56]	; (800c2dc <RTC_ExitInitMode+0x78>)
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	4a0d      	ldr	r2, [pc, #52]	; (800c2dc <RTC_ExitInitMode+0x78>)
 800c2a8:	f023 0320 	bic.w	r3, r3, #32
 800c2ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff ff7e 	bl	800c1b0 <HAL_RTC_WaitForSynchro>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d005      	beq.n	800c2c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2203      	movs	r2, #3
 800c2be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c2c6:	4b05      	ldr	r3, [pc, #20]	; (800c2dc <RTC_ExitInitMode+0x78>)
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	4a04      	ldr	r2, [pc, #16]	; (800c2dc <RTC_ExitInitMode+0x78>)
 800c2cc:	f043 0320 	orr.w	r3, r3, #32
 800c2d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	40002800 	.word	0x40002800

0800c2e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800c2ee:	79fb      	ldrb	r3, [r7, #7]
 800c2f0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800c2f2:	e005      	b.n	800c300 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800c2fa:	7afb      	ldrb	r3, [r7, #11]
 800c2fc:	3b0a      	subs	r3, #10
 800c2fe:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800c300:	7afb      	ldrb	r3, [r7, #11]
 800c302:	2b09      	cmp	r3, #9
 800c304:	d8f6      	bhi.n	800c2f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	011b      	lsls	r3, r3, #4
 800c30c:	b2da      	uxtb	r2, r3
 800c30e:	7afb      	ldrb	r3, [r7, #11]
 800c310:	4313      	orrs	r3, r2
 800c312:	b2db      	uxtb	r3, r3
}
 800c314:	4618      	mov	r0, r3
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d101      	bne.n	800c338 <HAL_RTCEx_SetTamper+0x18>
 800c334:	2302      	movs	r3, #2
 800c336:	e0a9      	b.n	800c48c <HAL_RTCEx_SetTamper+0x16c>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2202      	movs	r2, #2
 800c344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Read register */
  tmpreg = hrtc->Instance->TAMPCR;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34e:	60fb      	str	r3, [r7, #12]

#if defined(RTC_TAMPER1_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_1) != 0)
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 0301 	and.w	r3, r3, #1
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d021      	beq.n	800c3a0 <HAL_RTCEx_SetTamper+0x80>
  {
    MODIFY_REG(tmpreg,
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f023 1207 	bic.w	r2, r3, #458759	; 0x70007
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	6839      	ldr	r1, [r7, #0]
 800c368:	6889      	ldr	r1, [r1, #8]
 800c36a:	2900      	cmp	r1, #0
 800c36c:	d101      	bne.n	800c372 <HAL_RTCEx_SetTamper+0x52>
 800c36e:	2100      	movs	r1, #0
 800c370:	e000      	b.n	800c374 <HAL_RTCEx_SetTamper+0x54>
 800c372:	2102      	movs	r1, #2
 800c374:	430b      	orrs	r3, r1
 800c376:	6839      	ldr	r1, [r7, #0]
 800c378:	68c9      	ldr	r1, [r1, #12]
 800c37a:	2900      	cmp	r1, #0
 800c37c:	d101      	bne.n	800c382 <HAL_RTCEx_SetTamper+0x62>
 800c37e:	2100      	movs	r1, #0
 800c380:	e001      	b.n	800c386 <HAL_RTCEx_SetTamper+0x66>
 800c382:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800c386:	430b      	orrs	r3, r1
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6909      	ldr	r1, [r1, #16]
 800c38c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800c390:	d102      	bne.n	800c398 <HAL_RTCEx_SetTamper+0x78>
 800c392:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c396:	e000      	b.n	800c39a <HAL_RTCEx_SetTamper+0x7a>
 800c398:	2100      	movs	r1, #0
 800c39a:	430b      	orrs	r3, r1
 800c39c:	4313      	orrs	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER1_SUPPORT */

#if defined(RTC_TAMPER2_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_2) != 0)
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 0308 	and.w	r3, r3, #8
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d023      	beq.n	800c3f4 <HAL_RTCEx_SetTamper+0xd4>
  {
    MODIFY_REG(tmpreg,
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800c3b2:	f023 031c 	bic.w	r3, r3, #28
 800c3b6:	683a      	ldr	r2, [r7, #0]
 800c3b8:	6812      	ldr	r2, [r2, #0]
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6889      	ldr	r1, [r1, #8]
 800c3be:	2900      	cmp	r1, #0
 800c3c0:	d101      	bne.n	800c3c6 <HAL_RTCEx_SetTamper+0xa6>
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	e000      	b.n	800c3c8 <HAL_RTCEx_SetTamper+0xa8>
 800c3c6:	2110      	movs	r1, #16
 800c3c8:	430a      	orrs	r2, r1
 800c3ca:	6839      	ldr	r1, [r7, #0]
 800c3cc:	68c9      	ldr	r1, [r1, #12]
 800c3ce:	2900      	cmp	r1, #0
 800c3d0:	d101      	bne.n	800c3d6 <HAL_RTCEx_SetTamper+0xb6>
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	e001      	b.n	800c3da <HAL_RTCEx_SetTamper+0xba>
 800c3d6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800c3da:	430a      	orrs	r2, r1
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6909      	ldr	r1, [r1, #16]
 800c3e0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800c3e4:	d102      	bne.n	800c3ec <HAL_RTCEx_SetTamper+0xcc>
 800c3e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3ea:	e000      	b.n	800c3ee <HAL_RTCEx_SetTamper+0xce>
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	430a      	orrs	r2, r1
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER2_SUPPORT */

#if defined(RTC_TAMPER3_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_3) != 0)
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 0320 	and.w	r3, r3, #32
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d023      	beq.n	800c448 <HAL_RTCEx_SetTamper+0x128>
  {
    MODIFY_REG(tmpreg,
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800c406:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	6812      	ldr	r2, [r2, #0]
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	6889      	ldr	r1, [r1, #8]
 800c412:	2900      	cmp	r1, #0
 800c414:	d101      	bne.n	800c41a <HAL_RTCEx_SetTamper+0xfa>
 800c416:	2100      	movs	r1, #0
 800c418:	e000      	b.n	800c41c <HAL_RTCEx_SetTamper+0xfc>
 800c41a:	2140      	movs	r1, #64	; 0x40
 800c41c:	430a      	orrs	r2, r1
 800c41e:	6839      	ldr	r1, [r7, #0]
 800c420:	68c9      	ldr	r1, [r1, #12]
 800c422:	2900      	cmp	r1, #0
 800c424:	d101      	bne.n	800c42a <HAL_RTCEx_SetTamper+0x10a>
 800c426:	2100      	movs	r1, #0
 800c428:	e001      	b.n	800c42e <HAL_RTCEx_SetTamper+0x10e>
 800c42a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800c42e:	430a      	orrs	r2, r1
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6909      	ldr	r1, [r1, #16]
 800c434:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800c438:	d102      	bne.n	800c440 <HAL_RTCEx_SetTamper+0x120>
 800c43a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c43e:	e000      	b.n	800c442 <HAL_RTCEx_SetTamper+0x122>
 800c440:	2100      	movs	r1, #0
 800c442:	430a      	orrs	r2, r1
 800c444:	4313      	orrs	r3, r2
 800c446:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Update common parameters */
  MODIFY_REG(tmpreg,
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c44e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	6951      	ldr	r1, [r2, #20]
 800c456:	683a      	ldr	r2, [r7, #0]
 800c458:	6992      	ldr	r2, [r2, #24]
 800c45a:	4311      	orrs	r1, r2
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	69d2      	ldr	r2, [r2, #28]
 800c460:	4311      	orrs	r1, r2
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	6a12      	ldr	r2, [r2, #32]
 800c466:	4311      	orrs	r1, r2
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c46c:	430a      	orrs	r2, r1
 800c46e:	4313      	orrs	r3, r2
 800c470:	60fb      	str	r3, [r7, #12]
             sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | sTamper->TamperPullUp | \
             sTamper->TimeStampOnTamperDetection \
             );

  /* Set register */
  WRITE_REG (hrtc->Instance->TAMPCR, tmpreg);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3714      	adds	r7, #20
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08a      	sub	sp, #40	; 0x28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d101      	bne.n	800c4aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e075      	b.n	800c596 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d105      	bne.n	800c4c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f8f7 	bl	800c6b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2203      	movs	r2, #3
 800c4c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f868 	bl	800c5a0 <HAL_SD_InitCard>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e05d      	b.n	800c596 <HAL_SD_Init+0xfe>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c4da:	f107 0308 	add.w	r3, r7, #8
 800c4de:	4619      	mov	r1, r3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fda3 	bl	800d02c <HAL_SD_GetCardStatus>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d001      	beq.n	800c4f0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e052      	b.n	800c596 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c4f0:	7e3b      	ldrb	r3, [r7, #24]
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c4f6:	7e7b      	ldrb	r3, [r7, #25]
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c500:	2b01      	cmp	r3, #1
 800c502:	d10a      	bne.n	800c51a <HAL_SD_Init+0x82>
 800c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c506:	2b00      	cmp	r3, #0
 800c508:	d102      	bne.n	800c510 <HAL_SD_Init+0x78>
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d004      	beq.n	800c51a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c516:	65da      	str	r2, [r3, #92]	; 0x5c
 800c518:	e00b      	b.n	800c532 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d104      	bne.n	800c52c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c528:	65da      	str	r2, [r3, #92]	; 0x5c
 800c52a:	e002      	b.n	800c532 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	4619      	mov	r1, r3
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 fe59 	bl	800d1f0 <HAL_SD_ConfigWideBusOperation>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d001      	beq.n	800c548 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	e026      	b.n	800c596 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c548:	f7f9 fff0 	bl	800652c <HAL_GetTick>
 800c54c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c54e:	e011      	b.n	800c574 <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800c550:	f7f9 ffec 	bl	800652c <HAL_GetTick>
 800c554:	4602      	mov	r2, r0
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55e:	d109      	bne.n	800c574 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c566:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2201      	movs	r2, #1
 800c56c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800c570:	2303      	movs	r3, #3
 800c572:	e010      	b.n	800c596 <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fee5 	bl	800d344 <HAL_SD_GetCardState>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b04      	cmp	r3, #4
 800c57e:	d1e7      	bne.n	800c550 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3728      	adds	r7, #40	; 0x28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
	...

0800c5a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c5a0:	b5b0      	push	{r4, r5, r7, lr}
 800c5a2:	b08e      	sub	sp, #56	; 0x38
 800c5a4:	af04      	add	r7, sp, #16
 800c5a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c5b8:	238a      	movs	r3, #138	; 0x8a
 800c5ba:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d107      	bne.n	800c5d4 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f042 0210 	orr.w	r2, r2, #16
 800c5d2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681d      	ldr	r5, [r3, #0]
 800c5d8:	466c      	mov	r4, sp
 800c5da:	f107 0314 	add.w	r3, r7, #20
 800c5de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c5e6:	f107 0308 	add.w	r3, r7, #8
 800c5ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	f004 fb4f 	bl	8010c90 <SDMMC_Init>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d001      	beq.n	800c604 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	e04f      	b.n	800c6a4 <HAL_SD_InitCard+0x104>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4618      	mov	r0, r3
 800c60a:	f004 fb89 	bl	8010d20 <SDMMC_PowerState_ON>
 800c60e:	4603      	mov	r3, r0
 800c610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d001      	beq.n	800c620 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e041      	b.n	800c6a4 <HAL_SD_InitCard+0x104>
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 ff6d 	bl	800d500 <SD_PowerON>
 800c626:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00b      	beq.n	800c646 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c63a:	6a3b      	ldr	r3, [r7, #32]
 800c63c:	431a      	orrs	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	e02e      	b.n	800c6a4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 fe9c 	bl	800d384 <SD_InitCard>
 800c64c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c64e:	6a3b      	ldr	r3, [r7, #32]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00b      	beq.n	800c66c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c660:	6a3b      	ldr	r3, [r7, #32]
 800c662:	431a      	orrs	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	e01b      	b.n	800c6a4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c674:	4618      	mov	r0, r3
 800c676:	f004 fbe9 	bl	8010e4c <SDMMC_CmdBlockLength>
 800c67a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c67c:	6a3b      	ldr	r3, [r7, #32]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00f      	beq.n	800c6a2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a09      	ldr	r2, [pc, #36]	; (800c6ac <HAL_SD_InitCard+0x10c>)
 800c688:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c68e:	6a3b      	ldr	r3, [r7, #32]
 800c690:	431a      	orrs	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2201      	movs	r2, #1
 800c69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e000      	b.n	800c6a4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3728      	adds	r7, #40	; 0x28
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bdb0      	pop	{r4, r5, r7, pc}
 800c6ac:	1fe00fff 	.word	0x1fe00fff

0800c6b0 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b08c      	sub	sp, #48	; 0x30
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
 800c6d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d107      	bne.n	800c6ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e08d      	b.n	800c808 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	f040 8086 	bne.w	800c806 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	441a      	add	r2, r3
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d907      	bls.n	800c71e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c712:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e074      	b.n	800c808 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2203      	movs	r2, #3
 800c722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2200      	movs	r2, #0
 800c72c:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	025a      	lsls	r2, r3, #9
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c740:	2b01      	cmp	r3, #1
 800c742:	d002      	beq.n	800c74a <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	025b      	lsls	r3, r3, #9
 800c748:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c74a:	f04f 33ff 	mov.w	r3, #4294967295
 800c74e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	025b      	lsls	r3, r3, #9
 800c754:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c756:	2390      	movs	r3, #144	; 0x90
 800c758:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c75a:	2302      	movs	r3, #2
 800c75c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c75e:	2300      	movs	r3, #0
 800c760:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800c762:	2300      	movs	r3, #0
 800c764:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f107 0210 	add.w	r2, r7, #16
 800c76e:	4611      	mov	r1, r2
 800c770:	4618      	mov	r0, r3
 800c772:	f004 fb3f 	bl	8010df4 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68da      	ldr	r2, [r3, #12]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c784:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2201      	movs	r2, #1
 800c794:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d90a      	bls.n	800c7b2 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2282      	movs	r2, #130	; 0x82
 800c7a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f004 fb95 	bl	8010ed8 <SDMMC_CmdReadMultiBlock>
 800c7ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c7b0:	e009      	b.n	800c7c6 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2281      	movs	r2, #129	; 0x81
 800c7b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f004 fb67 	bl	8010e92 <SDMMC_CmdReadSingleBlock>
 800c7c4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d012      	beq.n	800c7f2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a0f      	ldr	r2, [pc, #60]	; (800c810 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c7d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7da:	431a      	orrs	r2, r3
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e00a      	b.n	800c808 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c800:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	e000      	b.n	800c808 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800c806:	2302      	movs	r3, #2
  }
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3730      	adds	r7, #48	; 0x30
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	1fe00fff 	.word	0x1fe00fff

0800c814 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b08c      	sub	sp, #48	; 0x30
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
 800c820:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d107      	bne.n	800c83c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c830:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c838:	2301      	movs	r3, #1
 800c83a:	e08d      	b.n	800c958 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c842:	b2db      	uxtb	r3, r3
 800c844:	2b01      	cmp	r3, #1
 800c846:	f040 8086 	bne.w	800c956 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	441a      	add	r2, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d907      	bls.n	800c86e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c862:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e074      	b.n	800c958 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2203      	movs	r2, #3
 800c872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2200      	movs	r2, #0
 800c87c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	025a      	lsls	r2, r3, #9
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c890:	2b01      	cmp	r3, #1
 800c892:	d002      	beq.n	800c89a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	025b      	lsls	r3, r3, #9
 800c898:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c89a:	f04f 33ff 	mov.w	r3, #4294967295
 800c89e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	025b      	lsls	r3, r3, #9
 800c8a4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c8a6:	2390      	movs	r3, #144	; 0x90
 800c8a8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f107 0210 	add.w	r2, r7, #16
 800c8be:	4611      	mov	r1, r2
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f004 fa97 	bl	8010df4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	68da      	ldr	r2, [r3, #12]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8d4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d90a      	bls.n	800c902 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	22a0      	movs	r2, #160	; 0xa0
 800c8f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f004 fb33 	bl	8010f64 <SDMMC_CmdWriteMultiBlock>
 800c8fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c900:	e009      	b.n	800c916 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2290      	movs	r2, #144	; 0x90
 800c906:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c90e:	4618      	mov	r0, r3
 800c910:	f004 fb05 	bl	8010f1e <SDMMC_CmdWriteSingleBlock>
 800c914:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d012      	beq.n	800c942 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a0f      	ldr	r2, [pc, #60]	; (800c960 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c922:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	431a      	orrs	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e00a      	b.n	800c958 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c950:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800c952:	2300      	movs	r3, #0
 800c954:	e000      	b.n	800c958 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800c956:	2302      	movs	r3, #2
  }
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3730      	adds	r7, #48	; 0x30
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	1fe00fff 	.word	0x1fe00fff

0800c964 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c970:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d008      	beq.n	800c992 <HAL_SD_IRQHandler+0x2e>
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f003 0308 	and.w	r3, r3, #8
 800c986:	2b00      	cmp	r3, #0
 800c988:	d003      	beq.n	800c992 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f001 f928 	bl	800dbe0 <SD_Read_IT>
 800c990:	e199      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f000 80ae 	beq.w	800cafe <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9aa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	6812      	ldr	r2, [r2, #0]
 800c9b6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800c9ba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c9be:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c9ce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68da      	ldr	r2, [r3, #12]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9de:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f003 0308 	and.w	r3, r3, #8
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d038      	beq.n	800ca5c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f003 0302 	and.w	r3, r3, #2
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d104      	bne.n	800c9fe <HAL_SD_IRQHandler+0x9a>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f003 0320 	and.w	r3, r3, #32
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d011      	beq.n	800ca22 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f004 fad2 	bl	8010fac <SDMMC_CmdStopTransfer>
 800ca08:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d008      	beq.n	800ca22 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	431a      	orrs	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 f957 	bl	800ccd0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4aa0      	ldr	r2, [pc, #640]	; (800cca8 <HAL_SD_IRQHandler+0x344>)
 800ca28:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d104      	bne.n	800ca4c <HAL_SD_IRQHandler+0xe8>
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f003 0302 	and.w	r3, r3, #2
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d003      	beq.n	800ca54 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f7f9 fcf7 	bl	8006440 <HAL_SD_RxCpltCallback>
 800ca52:	e138      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f7f9 fce9 	bl	800642c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800ca5a:	e134      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 812f 	beq.w	800ccc6 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2200      	movs	r2, #0
 800ca76:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f003 0302 	and.w	r3, r3, #2
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d104      	bne.n	800ca94 <HAL_SD_IRQHandler+0x130>
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f003 0320 	and.w	r3, r3, #32
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d011      	beq.n	800cab8 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f004 fa87 	bl	8010fac <SDMMC_CmdStopTransfer>
 800ca9e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d008      	beq.n	800cab8 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	431a      	orrs	r2, r3
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f90c 	bl	800ccd0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f003 0310 	and.w	r3, r3, #16
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d104      	bne.n	800cada <HAL_SD_IRQHandler+0x176>
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f003 0320 	and.w	r3, r3, #32
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d002      	beq.n	800cae0 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f7f9 fca6 	bl	800642c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f003 0301 	and.w	r3, r3, #1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d105      	bne.n	800caf6 <HAL_SD_IRQHandler+0x192>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f003 0302 	and.w	r3, r3, #2
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f000 80e8 	beq.w	800ccc6 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7f9 fca2 	bl	8006440 <HAL_SD_RxCpltCallback>
}
 800cafc:	e0e3      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d008      	beq.n	800cb1e <HAL_SD_IRQHandler+0x1ba>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f003 0308 	and.w	r3, r3, #8
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d003      	beq.n	800cb1e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 f8b3 	bl	800dc82 <SD_Write_IT>
 800cb1c:	e0d3      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb24:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f000 809d 	beq.w	800cc68 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb34:	f003 0302 	and.w	r3, r3, #2
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d005      	beq.n	800cb48 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb40:	f043 0202 	orr.w	r2, r3, #2
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4e:	f003 0308 	and.w	r3, r3, #8
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d005      	beq.n	800cb62 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5a:	f043 0208 	orr.w	r2, r3, #8
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb68:	f003 0320 	and.w	r3, r3, #32
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d005      	beq.n	800cb7c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb74:	f043 0220 	orr.w	r2, r3, #32
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb82:	f003 0310 	and.w	r3, r3, #16
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d005      	beq.n	800cb96 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb8e:	f043 0210 	orr.w	r2, r3, #16
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a43      	ldr	r2, [pc, #268]	; (800cca8 <HAL_SD_IRQHandler+0x344>)
 800cb9c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cbac:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68da      	ldr	r2, [r3, #12]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbbc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbcc:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	68da      	ldr	r2, [r3, #12]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cbdc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f004 f9e2 	bl	8010fac <SDMMC_CmdStopTransfer>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbee:	431a      	orrs	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68da      	ldr	r2, [r3, #12]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc02:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc0c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f003 0308 	and.w	r3, r3, #8
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00a      	beq.n	800cc2e <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f852 	bl	800ccd0 <HAL_SD_ErrorCallback>
}
 800cc2c:	e04b      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d046      	beq.n	800ccc6 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d042      	beq.n	800ccc6 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cc4e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2200      	movs	r2, #0
 800cc56:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 f835 	bl	800ccd0 <HAL_SD_ErrorCallback>
}
 800cc66:	e02e      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d027      	beq.n	800ccc6 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc86:	f003 0304 	and.w	r3, r3, #4
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10e      	bne.n	800ccac <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f003 0320 	and.w	r3, r3, #32
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d003      	beq.n	800cca0 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f001 f870 	bl	800dd7e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800cc9e:	e012      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f001 f858 	bl	800dd56 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800cca6:	e00e      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
 800cca8:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f003 0320 	and.w	r3, r3, #32
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f001 f857 	bl	800dd6a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800ccbc:	e003      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f001 f83f 	bl	800dd42 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800ccc4:	e7ff      	b.n	800ccc6 <HAL_SD_IRQHandler+0x362>
 800ccc6:	bf00      	nop
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop

0800ccd0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccf2:	0f9b      	lsrs	r3, r3, #30
 800ccf4:	b2da      	uxtb	r2, r3
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccfe:	0e9b      	lsrs	r3, r3, #26
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	f003 030f 	and.w	r3, r3, #15
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd10:	0e1b      	lsrs	r3, r3, #24
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	f003 0303 	and.w	r3, r3, #3
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd22:	0c1b      	lsrs	r3, r3, #16
 800cd24:	b2da      	uxtb	r2, r3
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd2e:	0a1b      	lsrs	r3, r3, #8
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd3a:	b2da      	uxtb	r2, r3
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd44:	0d1b      	lsrs	r3, r3, #20
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd50:	0c1b      	lsrs	r3, r3, #16
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	f003 030f 	and.w	r3, r3, #15
 800cd58:	b2da      	uxtb	r2, r3
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd62:	0bdb      	lsrs	r3, r3, #15
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	f003 0301 	and.w	r3, r3, #1
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd74:	0b9b      	lsrs	r3, r3, #14
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	f003 0301 	and.w	r3, r3, #1
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd86:	0b5b      	lsrs	r3, r3, #13
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	f003 0301 	and.w	r3, r3, #1
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd98:	0b1b      	lsrs	r3, r3, #12
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	f003 0301 	and.w	r3, r3, #1
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d163      	bne.n	800ce7c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdb8:	009a      	lsls	r2, r3, #2
 800cdba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cdbe:	4013      	ands	r3, r2
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cdc4:	0f92      	lsrs	r2, r2, #30
 800cdc6:	431a      	orrs	r2, r3
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cdd0:	0edb      	lsrs	r3, r3, #27
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	f003 0307 	and.w	r3, r3, #7
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cde2:	0e1b      	lsrs	r3, r3, #24
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	f003 0307 	and.w	r3, r3, #7
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cdf4:	0d5b      	lsrs	r3, r3, #21
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	f003 0307 	and.w	r3, r3, #7
 800cdfc:	b2da      	uxtb	r2, r3
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce06:	0c9b      	lsrs	r3, r3, #18
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	f003 0307 	and.w	r3, r3, #7
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce18:	0bdb      	lsrs	r3, r3, #15
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	f003 0307 	and.w	r3, r3, #7
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	1c5a      	adds	r2, r3, #1
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	7e1b      	ldrb	r3, [r3, #24]
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	f003 0307 	and.w	r3, r3, #7
 800ce3a:	3302      	adds	r3, #2
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ce46:	fb02 f203 	mul.w	r2, r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	7a1b      	ldrb	r3, [r3, #8]
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	f003 030f 	and.w	r3, r3, #15
 800ce58:	2201      	movs	r2, #1
 800ce5a:	409a      	lsls	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ce68:	0a52      	lsrs	r2, r2, #9
 800ce6a:	fb02 f203 	mul.w	r2, r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce78:	659a      	str	r2, [r3, #88]	; 0x58
 800ce7a:	e031      	b.n	800cee0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d11d      	bne.n	800cec0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce88:	041b      	lsls	r3, r3, #16
 800ce8a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce92:	0c1b      	lsrs	r3, r3, #16
 800ce94:	431a      	orrs	r2, r3
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	029a      	lsls	r2, r3, #10
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ceb4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	659a      	str	r2, [r3, #88]	; 0x58
 800cebe:	e00f      	b.n	800cee0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a58      	ldr	r2, [pc, #352]	; (800d028 <HAL_SD_GetCardCSD+0x344>)
 800cec6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cecc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cedc:	2301      	movs	r3, #1
 800cede:	e09d      	b.n	800d01c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cee4:	0b9b      	lsrs	r3, r3, #14
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	f003 0301 	and.w	r3, r3, #1
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cef6:	09db      	lsrs	r3, r3, #7
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf18:	0fdb      	lsrs	r3, r3, #31
 800cf1a:	b2da      	uxtb	r2, r3
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf24:	0f5b      	lsrs	r3, r3, #29
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	f003 0303 	and.w	r3, r3, #3
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf36:	0e9b      	lsrs	r3, r3, #26
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	f003 0307 	and.w	r3, r3, #7
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf48:	0d9b      	lsrs	r3, r3, #22
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	f003 030f 	and.w	r3, r3, #15
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf5a:	0d5b      	lsrs	r3, r3, #21
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	b2da      	uxtb	r2, r3
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf76:	0c1b      	lsrs	r3, r3, #16
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	f003 0301 	and.w	r3, r3, #1
 800cf7e:	b2da      	uxtb	r2, r3
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf8a:	0bdb      	lsrs	r3, r3, #15
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	f003 0301 	and.w	r3, r3, #1
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf9e:	0b9b      	lsrs	r3, r3, #14
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	f003 0301 	and.w	r3, r3, #1
 800cfa6:	b2da      	uxtb	r2, r3
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfb2:	0b5b      	lsrs	r3, r3, #13
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfc6:	0b1b      	lsrs	r3, r3, #12
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	b2da      	uxtb	r2, r3
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfda:	0a9b      	lsrs	r3, r3, #10
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	f003 0303 	and.w	r3, r3, #3
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfee:	0a1b      	lsrs	r3, r3, #8
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	f003 0303 	and.w	r3, r3, #3
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d002:	085b      	lsrs	r3, r3, #1
 800d004:	b2db      	uxtb	r3, r3
 800d006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d00a:	b2da      	uxtb	r2, r3
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2201      	movs	r2, #1
 800d016:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	1fe00fff 	.word	0x1fe00fff

0800d02c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b094      	sub	sp, #80	; 0x50
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d036:	2300      	movs	r3, #0
 800d038:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d03c:	f107 0308 	add.w	r3, r7, #8
 800d040:	4619      	mov	r1, r3
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fb6e 	bl	800d724 <SD_SendSDStatus>
 800d048:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800d04a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d011      	beq.n	800d074 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a4f      	ldr	r2, [pc, #316]	; (800d194 <HAL_SD_GetCardStatus+0x168>)
 800d056:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d05c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d05e:	431a      	orrs	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d06c:	2301      	movs	r3, #1
 800d06e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d072:	e070      	b.n	800d156 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	099b      	lsrs	r3, r3, #6
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	f003 0303 	and.w	r3, r3, #3
 800d07e:	b2da      	uxtb	r2, r3
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	095b      	lsrs	r3, r3, #5
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	b2da      	uxtb	r2, r3
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	0a1b      	lsrs	r3, r3, #8
 800d098:	b29b      	uxth	r3, r3
 800d09a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	0e1b      	lsrs	r3, r3, #24
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	061a      	lsls	r2, r3, #24
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	021b      	lsls	r3, r3, #8
 800d0b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0ba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	0a1b      	lsrs	r3, r3, #8
 800d0c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d0c4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	0e1b      	lsrs	r3, r3, #24
 800d0ca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	0a1b      	lsrs	r3, r3, #8
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	0d1b      	lsrs	r3, r3, #20
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	f003 030f 	and.w	r3, r3, #15
 800d0ec:	b2da      	uxtb	r2, r3
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	0c1b      	lsrs	r3, r3, #16
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	b29b      	uxth	r3, r3
 800d102:	b2db      	uxtb	r3, r3
 800d104:	b29b      	uxth	r3, r3
 800d106:	4313      	orrs	r3, r2
 800d108:	b29a      	uxth	r2, r3
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	0a9b      	lsrs	r3, r3, #10
 800d112:	b2db      	uxtb	r3, r3
 800d114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d118:	b2da      	uxtb	r2, r3
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	0a1b      	lsrs	r3, r3, #8
 800d122:	b2db      	uxtb	r3, r3
 800d124:	f003 0303 	and.w	r3, r3, #3
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	091b      	lsrs	r3, r3, #4
 800d132:	b2db      	uxtb	r3, r3
 800d134:	f003 030f 	and.w	r3, r3, #15
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	b2db      	uxtb	r3, r3
 800d142:	f003 030f 	and.w	r3, r3, #15
 800d146:	b2da      	uxtb	r2, r3
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	0e1b      	lsrs	r3, r3, #24
 800d150:	b2da      	uxtb	r2, r3
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d15e:	4618      	mov	r0, r3
 800d160:	f003 fe74 	bl	8010e4c <SDMMC_CmdBlockLength>
 800d164:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800d166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00d      	beq.n	800d188 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a08      	ldr	r2, [pc, #32]	; (800d194 <HAL_SD_GetCardStatus+0x168>)
 800d172:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d178:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2201      	movs	r2, #1
 800d17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800d188:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3750      	adds	r7, #80	; 0x50
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	1fe00fff 	.word	0x1fe00fff

0800d198 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d1e2:	2300      	movs	r3, #0
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d1f0:	b5b0      	push	{r4, r5, r7, lr}
 800d1f2:	b08e      	sub	sp, #56	; 0x38
 800d1f4:	af04      	add	r7, sp, #16
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2203      	movs	r2, #3
 800d204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d20c:	2b03      	cmp	r3, #3
 800d20e:	d02e      	beq.n	800d26e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d216:	d106      	bne.n	800d226 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d21c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	639a      	str	r2, [r3, #56]	; 0x38
 800d224:	e029      	b.n	800d27a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d22c:	d10a      	bne.n	800d244 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 fb70 	bl	800d914 <SD_WideBus_Enable>
 800d234:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	431a      	orrs	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	639a      	str	r2, [r3, #56]	; 0x38
 800d242:	e01a      	b.n	800d27a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10a      	bne.n	800d260 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fbad 	bl	800d9aa <SD_WideBus_Disable>
 800d250:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	431a      	orrs	r2, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	639a      	str	r2, [r3, #56]	; 0x38
 800d25e:	e00c      	b.n	800d27a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d264:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	639a      	str	r2, [r3, #56]	; 0x38
 800d26c:	e005      	b.n	800d27a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d272:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d007      	beq.n	800d292 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a2e      	ldr	r2, [pc, #184]	; (800d340 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d288:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d290:	e034      	b.n	800d2fc <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	691b      	ldr	r3, [r3, #16]
 800d2a6:	617b      	str	r3, [r7, #20]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	695b      	ldr	r3, [r3, #20]
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d903      	bls.n	800d2b8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	695b      	ldr	r3, [r3, #20]
 800d2b4:	61bb      	str	r3, [r7, #24]
 800d2b6:	e012      	b.n	800d2de <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2c0:	d103      	bne.n	800d2ca <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	695b      	ldr	r3, [r3, #20]
 800d2c6:	61bb      	str	r3, [r7, #24]
 800d2c8:	e009      	b.n	800d2de <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2d2:	d102      	bne.n	800d2da <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800d2d4:	2302      	movs	r3, #2
 800d2d6:	61bb      	str	r3, [r7, #24]
 800d2d8:	e001      	b.n	800d2de <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	61bb      	str	r3, [r7, #24]
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681d      	ldr	r5, [r3, #0]
 800d2e2:	466c      	mov	r4, sp
 800d2e4:	f107 0314 	add.w	r3, r7, #20
 800d2e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d2ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d2f0:	f107 0308 	add.w	r3, r7, #8
 800d2f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	f003 fcca 	bl	8010c90 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d304:	4618      	mov	r0, r3
 800d306:	f003 fda1 	bl	8010e4c <SDMMC_CmdBlockLength>
 800d30a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d30c:	6a3b      	ldr	r3, [r7, #32]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00c      	beq.n	800d32c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a0a      	ldr	r2, [pc, #40]	; (800d340 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d318:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d31e:	6a3b      	ldr	r3, [r7, #32]
 800d320:	431a      	orrs	r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3728      	adds	r7, #40	; 0x28
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bdb0      	pop	{r4, r5, r7, pc}
 800d340:	1fe00fff 	.word	0x1fe00fff

0800d344 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b086      	sub	sp, #24
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d34c:	2300      	movs	r3, #0
 800d34e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d350:	f107 030c 	add.w	r3, r7, #12
 800d354:	4619      	mov	r1, r3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 fab4 	bl	800d8c4 <SD_SendStatus>
 800d35c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d005      	beq.n	800d370 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	431a      	orrs	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	0a5b      	lsrs	r3, r3, #9
 800d374:	f003 030f 	and.w	r3, r3, #15
 800d378:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d37a:	693b      	ldr	r3, [r7, #16]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3718      	adds	r7, #24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b090      	sub	sp, #64	; 0x40
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d38c:	2301      	movs	r3, #1
 800d38e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4618      	mov	r0, r3
 800d396:	f003 fcd5 	bl	8010d44 <SDMMC_GetPowerState>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d102      	bne.n	800d3a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d3a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d3a4:	e0a7      	b.n	800d4f6 <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3aa:	2b03      	cmp	r3, #3
 800d3ac:	d02e      	beq.n	800d40c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f003 ff1a 	bl	80111ec <SDMMC_CmdSendCID>
 800d3b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d001      	beq.n	800d3c4 <SD_InitCard+0x40>
    {
      return errorstate;
 800d3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3c2:	e098      	b.n	800d4f6 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f003 fcff 	bl	8010dce <SDMMC_GetResponse>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2104      	movs	r1, #4
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f003 fcf6 	bl	8010dce <SDMMC_GetResponse>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2108      	movs	r1, #8
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f003 fced 	bl	8010dce <SDMMC_GetResponse>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	210c      	movs	r1, #12
 800d400:	4618      	mov	r0, r3
 800d402:	f003 fce4 	bl	8010dce <SDMMC_GetResponse>
 800d406:	4602      	mov	r2, r0
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d410:	2b03      	cmp	r3, #3
 800d412:	d00d      	beq.n	800d430 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f107 020e 	add.w	r2, r7, #14
 800d41c:	4611      	mov	r1, r2
 800d41e:	4618      	mov	r0, r3
 800d420:	f003 ff23 	bl	801126a <SDMMC_CmdSetRelAdd>
 800d424:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d001      	beq.n	800d430 <SD_InitCard+0xac>
    {
      return errorstate;
 800d42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42e:	e062      	b.n	800d4f6 <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d434:	2b03      	cmp	r3, #3
 800d436:	d036      	beq.n	800d4a6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d438:	89fb      	ldrh	r3, [r7, #14]
 800d43a:	461a      	mov	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d448:	041b      	lsls	r3, r3, #16
 800d44a:	4619      	mov	r1, r3
 800d44c:	4610      	mov	r0, r2
 800d44e:	f003 feec 	bl	801122a <SDMMC_CmdSendCSD>
 800d452:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <SD_InitCard+0xda>
    {
      return errorstate;
 800d45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45c:	e04b      	b.n	800d4f6 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2100      	movs	r1, #0
 800d464:	4618      	mov	r0, r3
 800d466:	f003 fcb2 	bl	8010dce <SDMMC_GetResponse>
 800d46a:	4602      	mov	r2, r0
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2104      	movs	r1, #4
 800d476:	4618      	mov	r0, r3
 800d478:	f003 fca9 	bl	8010dce <SDMMC_GetResponse>
 800d47c:	4602      	mov	r2, r0
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2108      	movs	r1, #8
 800d488:	4618      	mov	r0, r3
 800d48a:	f003 fca0 	bl	8010dce <SDMMC_GetResponse>
 800d48e:	4602      	mov	r2, r0
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	210c      	movs	r1, #12
 800d49a:	4618      	mov	r0, r3
 800d49c:	f003 fc97 	bl	8010dce <SDMMC_GetResponse>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2104      	movs	r1, #4
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f003 fc8e 	bl	8010dce <SDMMC_GetResponse>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	0d1a      	lsrs	r2, r3, #20
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d4ba:	f107 0310 	add.w	r3, r7, #16
 800d4be:	4619      	mov	r1, r3
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f7ff fc0f 	bl	800cce4 <HAL_SD_GetCardCSD>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d4d0:	e011      	b.n	800d4f6 <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6819      	ldr	r1, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4da:	041b      	lsls	r3, r3, #16
 800d4dc:	461a      	mov	r2, r3
 800d4de:	f04f 0300 	mov.w	r3, #0
 800d4e2:	4608      	mov	r0, r1
 800d4e4:	f003 fd98 	bl	8011018 <SDMMC_CmdSelDesel>
 800d4e8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d001      	beq.n	800d4f4 <SD_InitCard+0x170>
  {
    return errorstate;
 800d4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4f2:	e000      	b.n	800d4f6 <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3740      	adds	r7, #64	; 0x40
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
	...

0800d500 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b088      	sub	sp, #32
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d508:	2300      	movs	r3, #0
 800d50a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800d50c:	2300      	movs	r3, #0
 800d50e:	61fb      	str	r3, [r7, #28]
 800d510:	2300      	movs	r3, #0
 800d512:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800d514:	f7f9 f80a 	bl	800652c <HAL_GetTick>
 800d518:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4618      	mov	r0, r3
 800d520:	f003 fd9e 	bl	8011060 <SDMMC_CmdGoIdleState>
 800d524:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d001      	beq.n	800d530 <SD_PowerON+0x30>
  {
    return errorstate;
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	e0f2      	b.n	800d716 <SD_PowerON+0x216>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4618      	mov	r0, r3
 800d536:	f003 fdb1 	bl	801109c <SDMMC_CmdOperCond>
 800d53a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00d      	beq.n	800d55e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f003 fd87 	bl	8011060 <SDMMC_CmdGoIdleState>
 800d552:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d004      	beq.n	800d564 <SD_PowerON+0x64>
    {
      return errorstate;
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	e0db      	b.n	800d716 <SD_PowerON+0x216>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2201      	movs	r2, #1
 800d562:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d137      	bne.n	800d5dc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2100      	movs	r1, #0
 800d572:	4618      	mov	r0, r3
 800d574:	f003 fdb2 	bl	80110dc <SDMMC_CmdAppCommand>
 800d578:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d02d      	beq.n	800d5dc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d584:	e0c7      	b.n	800d716 <SD_PowerON+0x216>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2100      	movs	r1, #0
 800d58c:	4618      	mov	r0, r3
 800d58e:	f003 fda5 	bl	80110dc <SDMMC_CmdAppCommand>
 800d592:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <SD_PowerON+0x9e>
    {
      return errorstate;
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	e0bb      	b.n	800d716 <SD_PowerON+0x216>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	495f      	ldr	r1, [pc, #380]	; (800d720 <SD_PowerON+0x220>)
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f003 fdbc 	bl	8011122 <SDMMC_CmdAppOperCommand>
 800d5aa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d002      	beq.n	800d5b8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d5b6:	e0ae      	b.n	800d716 <SD_PowerON+0x216>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2100      	movs	r1, #0
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f003 fc05 	bl	8010dce <SDMMC_GetResponse>
 800d5c4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	0fdb      	lsrs	r3, r3, #31
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d101      	bne.n	800d5d2 <SD_PowerON+0xd2>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e000      	b.n	800d5d4 <SD_PowerON+0xd4>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	61bb      	str	r3, [r7, #24]

    count++;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d802      	bhi.n	800d5ec <SD_PowerON+0xec>
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d0cc      	beq.n	800d586 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d902      	bls.n	800d5fc <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d5f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d5fa:	e08c      	b.n	800d716 <SD_PowerON+0x216>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d602:	2b00      	cmp	r3, #0
 800d604:	f000 8083 	beq.w	800d70e <SD_PowerON+0x20e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	699b      	ldr	r3, [r3, #24]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d17e      	bne.n	800d714 <SD_PowerON+0x214>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d079      	beq.n	800d714 <SD_PowerON+0x214>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d626:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f042 0208 	orr.w	r2, r2, #8
 800d636:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f003 fe7b 	bl	8011338 <SDMMC_CmdVoltageSwitch>
 800d642:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00c      	beq.n	800d664 <SD_PowerON+0x164>
        {
          return errorstate;
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	e063      	b.n	800d716 <SD_PowerON+0x216>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d64e:	f7f8 ff6d 	bl	800652c <HAL_GetTick>
 800d652:	4602      	mov	r2, r0
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65c:	d102      	bne.n	800d664 <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800d65e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d662:	e058      	b.n	800d716 <SD_PowerON+0x216>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d66e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d672:	d1ec      	bne.n	800d64e <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d67c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d68c:	d002      	beq.n	800d694 <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800d68e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d692:	e040      	b.n	800d716 <SD_PowerON+0x216>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800d694:	2001      	movs	r0, #1
 800d696:	f000 fb49 	bl	800dd2c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f042 0204 	orr.w	r2, r2, #4
 800d6a8:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d6aa:	e00a      	b.n	800d6c2 <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d6ac:	f7f8 ff3e 	bl	800652c <HAL_GetTick>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ba:	d102      	bne.n	800d6c2 <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800d6bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6c0:	e029      	b.n	800d716 <SD_PowerON+0x216>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d6d0:	d1ec      	bne.n	800d6ac <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d6da:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d6e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6ea:	d102      	bne.n	800d6f2 <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d6ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d6f0:	e011      	b.n	800d716 <SD_PowerON+0x216>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2213      	movs	r2, #19
 800d6f8:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d702:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d70a:	65da      	str	r2, [r3, #92]	; 0x5c
 800d70c:	e002      	b.n	800d714 <SD_PowerON+0x214>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3720      	adds	r7, #32
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	c1100000 	.word	0xc1100000

0800d724 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b08c      	sub	sp, #48	; 0x30
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d72e:	f7f8 fefd 	bl	800652c <HAL_GetTick>
 800d732:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2100      	movs	r1, #0
 800d73e:	4618      	mov	r0, r3
 800d740:	f003 fb45 	bl	8010dce <SDMMC_GetResponse>
 800d744:	4603      	mov	r3, r0
 800d746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d74a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d74e:	d102      	bne.n	800d756 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d754:	e0b0      	b.n	800d8b8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2140      	movs	r1, #64	; 0x40
 800d75c:	4618      	mov	r0, r3
 800d75e:	f003 fb75 	bl	8010e4c <SDMMC_CmdBlockLength>
 800d762:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d005      	beq.n	800d776 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	e0a0      	b.n	800d8b8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d77e:	041b      	lsls	r3, r3, #16
 800d780:	4619      	mov	r1, r3
 800d782:	4610      	mov	r0, r2
 800d784:	f003 fcaa 	bl	80110dc <SDMMC_CmdAppCommand>
 800d788:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d005      	beq.n	800d79c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d798:	6a3b      	ldr	r3, [r7, #32]
 800d79a:	e08d      	b.n	800d8b8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d79c:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d7a2:	2340      	movs	r3, #64	; 0x40
 800d7a4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d7a6:	2360      	movs	r3, #96	; 0x60
 800d7a8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d7aa:	2302      	movs	r3, #2
 800d7ac:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f107 0208 	add.w	r2, r7, #8
 800d7be:	4611      	mov	r1, r2
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f003 fb17 	bl	8010df4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f003 fd92 	bl	80112f4 <SDMMC_CmdStatusRegister>
 800d7d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7d2:	6a3b      	ldr	r3, [r7, #32]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d02b      	beq.n	800d830 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d7e0:	6a3b      	ldr	r3, [r7, #32]
 800d7e2:	e069      	b.n	800d8b8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d013      	beq.n	800d81a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7f6:	e00d      	b.n	800d814 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f003 fa71 	bl	8010ce4 <SDMMC_ReadFIFO>
 800d802:	4602      	mov	r2, r0
 800d804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d806:	601a      	str	r2, [r3, #0]
        pData++;
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	3304      	adds	r3, #4
 800d80c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800d80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d810:	3301      	adds	r3, #1
 800d812:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	2b07      	cmp	r3, #7
 800d818:	d9ee      	bls.n	800d7f8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d81a:	f7f8 fe87 	bl	800652c <HAL_GetTick>
 800d81e:	4602      	mov	r2, r0
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d828:	d102      	bne.n	800d830 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d82a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d82e:	e043      	b.n	800d8b8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d836:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d0d2      	beq.n	800d7e4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d844:	f003 0308 	and.w	r3, r3, #8
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d001      	beq.n	800d850 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d84c:	2308      	movs	r3, #8
 800d84e:	e033      	b.n	800d8b8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d856:	f003 0302 	and.w	r3, r3, #2
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d001      	beq.n	800d862 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d85e:	2302      	movs	r3, #2
 800d860:	e02a      	b.n	800d8b8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d868:	f003 0320 	and.w	r3, r3, #32
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d017      	beq.n	800d8a0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d870:	2320      	movs	r3, #32
 800d872:	e021      	b.n	800d8b8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4618      	mov	r0, r3
 800d87a:	f003 fa33 	bl	8010ce4 <SDMMC_ReadFIFO>
 800d87e:	4602      	mov	r2, r0
 800d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d882:	601a      	str	r2, [r3, #0]
    pData++;
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	3304      	adds	r3, #4
 800d888:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d88a:	f7f8 fe4f 	bl	800652c <HAL_GetTick>
 800d88e:	4602      	mov	r2, r0
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d898:	d102      	bne.n	800d8a0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d89a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d89e:	e00b      	b.n	800d8b8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1e2      	bne.n	800d874 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a03      	ldr	r2, [pc, #12]	; (800d8c0 <SD_SendSDStatus+0x19c>)
 800d8b4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3730      	adds	r7, #48	; 0x30
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	18000f3a 	.word	0x18000f3a

0800d8c4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d102      	bne.n	800d8da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d8d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d8d8:	e018      	b.n	800d90c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8e2:	041b      	lsls	r3, r3, #16
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	f003 fce1 	bl	80112ae <SDMMC_CmdSendStatus>
 800d8ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	e009      	b.n	800d90c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	4618      	mov	r0, r3
 800d900:	f003 fa65 	bl	8010dce <SDMMC_GetResponse>
 800d904:	4602      	mov	r2, r0
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3710      	adds	r7, #16
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b086      	sub	sp, #24
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d91c:	2300      	movs	r3, #0
 800d91e:	60fb      	str	r3, [r7, #12]
 800d920:	2300      	movs	r3, #0
 800d922:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2100      	movs	r1, #0
 800d92a:	4618      	mov	r0, r3
 800d92c:	f003 fa4f 	bl	8010dce <SDMMC_GetResponse>
 800d930:	4603      	mov	r3, r0
 800d932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d93a:	d102      	bne.n	800d942 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d93c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d940:	e02f      	b.n	800d9a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d942:	f107 030c 	add.w	r3, r7, #12
 800d946:	4619      	mov	r1, r3
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 f879 	bl	800da40 <SD_FindSCR>
 800d94e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d001      	beq.n	800d95a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	e023      	b.n	800d9a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d960:	2b00      	cmp	r3, #0
 800d962:	d01c      	beq.n	800d99e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d96c:	041b      	lsls	r3, r3, #16
 800d96e:	4619      	mov	r1, r3
 800d970:	4610      	mov	r0, r2
 800d972:	f003 fbb3 	bl	80110dc <SDMMC_CmdAppCommand>
 800d976:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d001      	beq.n	800d982 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	e00f      	b.n	800d9a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	2102      	movs	r1, #2
 800d988:	4618      	mov	r0, r3
 800d98a:	f003 fbea 	bl	8011162 <SDMMC_CmdBusWidth>
 800d98e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d001      	beq.n	800d99a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	e003      	b.n	800d9a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d99a:	2300      	movs	r3, #0
 800d99c:	e001      	b.n	800d9a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d99e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3718      	adds	r7, #24
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b086      	sub	sp, #24
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	60fb      	str	r3, [r7, #12]
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2100      	movs	r1, #0
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f003 fa04 	bl	8010dce <SDMMC_GetResponse>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d9d0:	d102      	bne.n	800d9d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d9d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d9d6:	e02f      	b.n	800da38 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d9d8:	f107 030c 	add.w	r3, r7, #12
 800d9dc:	4619      	mov	r1, r3
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 f82e 	bl	800da40 <SD_FindSCR>
 800d9e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d001      	beq.n	800d9f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	e023      	b.n	800da38 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d01c      	beq.n	800da34 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da02:	041b      	lsls	r3, r3, #16
 800da04:	4619      	mov	r1, r3
 800da06:	4610      	mov	r0, r2
 800da08:	f003 fb68 	bl	80110dc <SDMMC_CmdAppCommand>
 800da0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d001      	beq.n	800da18 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	e00f      	b.n	800da38 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2100      	movs	r1, #0
 800da1e:	4618      	mov	r0, r3
 800da20:	f003 fb9f 	bl	8011162 <SDMMC_CmdBusWidth>
 800da24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d001      	beq.n	800da30 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	e003      	b.n	800da38 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da30:	2300      	movs	r3, #0
 800da32:	e001      	b.n	800da38 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08e      	sub	sp, #56	; 0x38
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800da4a:	f7f8 fd6f 	bl	800652c <HAL_GetTick>
 800da4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800da50:	2300      	movs	r3, #0
 800da52:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800da54:	2300      	movs	r3, #0
 800da56:	60bb      	str	r3, [r7, #8]
 800da58:	2300      	movs	r3, #0
 800da5a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2108      	movs	r1, #8
 800da66:	4618      	mov	r0, r3
 800da68:	f003 f9f0 	bl	8010e4c <SDMMC_CmdBlockLength>
 800da6c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <SD_FindSCR+0x38>
  {
    return errorstate;
 800da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da76:	e0ad      	b.n	800dbd4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da80:	041b      	lsls	r3, r3, #16
 800da82:	4619      	mov	r1, r3
 800da84:	4610      	mov	r0, r2
 800da86:	f003 fb29 	bl	80110dc <SDMMC_CmdAppCommand>
 800da8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800da8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <SD_FindSCR+0x56>
  {
    return errorstate;
 800da92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da94:	e09e      	b.n	800dbd4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da96:	f04f 33ff 	mov.w	r3, #4294967295
 800da9a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800da9c:	2308      	movs	r3, #8
 800da9e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800daa0:	2330      	movs	r3, #48	; 0x30
 800daa2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800daa4:	2302      	movs	r3, #2
 800daa6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800daac:	2301      	movs	r3, #1
 800daae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f107 0210 	add.w	r2, r7, #16
 800dab8:	4611      	mov	r1, r2
 800daba:	4618      	mov	r0, r3
 800dabc:	f003 f99a 	bl	8010df4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4618      	mov	r0, r3
 800dac6:	f003 fb6f 	bl	80111a8 <SDMMC_CmdSendSCR>
 800daca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d027      	beq.n	800db22 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800dad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad4:	e07e      	b.n	800dbd4 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dadc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d113      	bne.n	800db0c <SD_FindSCR+0xcc>
 800dae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d110      	bne.n	800db0c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4618      	mov	r0, r3
 800daf0:	f003 f8f8 	bl	8010ce4 <SDMMC_ReadFIFO>
 800daf4:	4603      	mov	r3, r0
 800daf6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4618      	mov	r0, r3
 800dafe:	f003 f8f1 	bl	8010ce4 <SDMMC_ReadFIFO>
 800db02:	4603      	mov	r3, r0
 800db04:	60fb      	str	r3, [r7, #12]
      index++;
 800db06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db08:	3301      	adds	r3, #1
 800db0a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800db0c:	f7f8 fd0e 	bl	800652c <HAL_GetTick>
 800db10:	4602      	mov	r2, r0
 800db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db14:	1ad3      	subs	r3, r2, r3
 800db16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1a:	d102      	bne.n	800db22 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800db1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db20:	e058      	b.n	800dbd4 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db28:	f240 532a 	movw	r3, #1322	; 0x52a
 800db2c:	4013      	ands	r3, r2
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d0d1      	beq.n	800dad6 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db38:	f003 0308 	and.w	r3, r3, #8
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d005      	beq.n	800db4c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2208      	movs	r2, #8
 800db46:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800db48:	2308      	movs	r3, #8
 800db4a:	e043      	b.n	800dbd4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db52:	f003 0302 	and.w	r3, r3, #2
 800db56:	2b00      	cmp	r3, #0
 800db58:	d005      	beq.n	800db66 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2202      	movs	r2, #2
 800db60:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800db62:	2302      	movs	r3, #2
 800db64:	e036      	b.n	800dbd4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db6c:	f003 0320 	and.w	r3, r3, #32
 800db70:	2b00      	cmp	r3, #0
 800db72:	d005      	beq.n	800db80 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2220      	movs	r2, #32
 800db7a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800db7c:	2320      	movs	r3, #32
 800db7e:	e029      	b.n	800dbd4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a15      	ldr	r2, [pc, #84]	; (800dbdc <SD_FindSCR+0x19c>)
 800db86:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	061a      	lsls	r2, r3, #24
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	021b      	lsls	r3, r3, #8
 800db90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db94:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	0a1b      	lsrs	r3, r3, #8
 800db9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800db9e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	0e1b      	lsrs	r3, r3, #24
 800dba4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba8:	601a      	str	r2, [r3, #0]
    scr++;
 800dbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbac:	3304      	adds	r3, #4
 800dbae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	061a      	lsls	r2, r3, #24
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	021b      	lsls	r3, r3, #8
 800dbb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dbbc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	0a1b      	lsrs	r3, r3, #8
 800dbc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dbc6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	0e1b      	lsrs	r3, r3, #24
 800dbcc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dbd2:	2300      	movs	r3, #0
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3738      	adds	r7, #56	; 0x38
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	18000f3a 	.word	0x18000f3a

0800dbe0 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d03f      	beq.n	800dc7a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	617b      	str	r3, [r7, #20]
 800dbfe:	e033      	b.n	800dc68 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f003 f86d 	bl	8010ce4 <SDMMC_ReadFIFO>
 800dc0a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	b2da      	uxtb	r2, r3
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	3301      	adds	r3, #1
 800dc18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	0a1b      	lsrs	r3, r3, #8
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	3b01      	subs	r3, #1
 800dc34:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	0c1b      	lsrs	r3, r3, #16
 800dc3a:	b2da      	uxtb	r2, r3
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	3301      	adds	r3, #1
 800dc44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	0e1b      	lsrs	r3, r3, #24
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	3301      	adds	r3, #1
 800dc66:	617b      	str	r3, [r7, #20]
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	2b07      	cmp	r3, #7
 800dc6c:	d9c8      	bls.n	800dc00 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800dc7a:	bf00      	nop
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b086      	sub	sp, #24
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc94:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d043      	beq.n	800dd24 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	617b      	str	r3, [r7, #20]
 800dca0:	e037      	b.n	800dd12 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	021a      	lsls	r2, r3, #8
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	041a      	lsls	r2, r3, #16
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	3b01      	subs	r3, #1
 800dce2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	061a      	lsls	r2, r3, #24
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	4313      	orrs	r3, r2
 800dcee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f107 0208 	add.w	r2, r7, #8
 800dd04:	4611      	mov	r1, r2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f002 fff9 	bl	8010cfe <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	617b      	str	r3, [r7, #20]
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	2b07      	cmp	r3, #7
 800dd16:	d9c4      	bls.n	800dca2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	693a      	ldr	r2, [r7, #16]
 800dd22:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800dd24:	bf00      	nop
 800dd26:	3718      	adds	r7, #24
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	4603      	mov	r3, r0
 800dd34:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800dd36:	bf00      	nop
 800dd38:	370c      	adds	r7, #12
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr

0800dd42 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dd42:	b480      	push	{r7}
 800dd44:	b083      	sub	sp, #12
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800dd4a:	bf00      	nop
 800dd4c:	370c      	adds	r7, #12
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b083      	sub	sp, #12
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800dd5e:	bf00      	nop
 800dd60:	370c      	adds	r7, #12
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr

0800dd6a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dd6a:	b480      	push	{r7}
 800dd6c:	b083      	sub	sp, #12
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800dd72:	bf00      	nop
 800dd74:	370c      	adds	r7, #12
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr

0800dd7e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dd7e:	b480      	push	{r7}
 800dd80:	b083      	sub	sp, #12
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800dd86:	bf00      	nop
 800dd88:	370c      	adds	r7, #12
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
	...

0800dd94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b084      	sub	sp, #16
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d101      	bne.n	800dda6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e0a0      	b.n	800dee8 <HAL_SPI_Init+0x154>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d12a      	bne.n	800de0e <HAL_SPI_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	4a4b      	ldr	r2, [pc, #300]	; (800def0 <HAL_SPI_Init+0x15c>)
 800ddc4:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	4a4a      	ldr	r2, [pc, #296]	; (800def4 <HAL_SPI_Init+0x160>)
 800ddca:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a4a      	ldr	r2, [pc, #296]	; (800def8 <HAL_SPI_Init+0x164>)
 800ddd0:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4a49      	ldr	r2, [pc, #292]	; (800defc <HAL_SPI_Init+0x168>)
 800ddd6:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	4a49      	ldr	r2, [pc, #292]	; (800df00 <HAL_SPI_Init+0x16c>)
 800dddc:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	4a48      	ldr	r2, [pc, #288]	; (800df04 <HAL_SPI_Init+0x170>)
 800dde2:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a48      	ldr	r2, [pc, #288]	; (800df08 <HAL_SPI_Init+0x174>)
 800dde8:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4a47      	ldr	r2, [pc, #284]	; (800df0c <HAL_SPI_Init+0x178>)
 800ddee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d103      	bne.n	800de04 <HAL_SPI_Init+0x70>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a44      	ldr	r2, [pc, #272]	; (800df10 <HAL_SPI_Init+0x17c>)
 800de00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2202      	movs	r2, #2
 800de12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de24:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de2e:	d902      	bls.n	800de36 <HAL_SPI_Init+0xa2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800de30:	2300      	movs	r3, #0
 800de32:	60fb      	str	r3, [r7, #12]
 800de34:	e002      	b.n	800de3c <HAL_SPI_Init+0xa8>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800de36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de3a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800de44:	d007      	beq.n	800de56 <HAL_SPI_Init+0xc2>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de4e:	d002      	beq.n	800de56 <HAL_SPI_Init+0xc2>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2200      	movs	r2, #0
 800de54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d10b      	bne.n	800de76 <HAL_SPI_Init+0xe2>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de66:	d903      	bls.n	800de70 <HAL_SPI_Init+0xdc>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2202      	movs	r2, #2
 800de6c:	631a      	str	r2, [r3, #48]	; 0x30
 800de6e:	e002      	b.n	800de76 <HAL_SPI_Init+0xe2>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2201      	movs	r2, #1
 800de74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	685a      	ldr	r2, [r3, #4]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	431a      	orrs	r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	691b      	ldr	r3, [r3, #16]
 800de84:	431a      	orrs	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	431a      	orrs	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	699b      	ldr	r3, [r3, #24]
 800de90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de94:	431a      	orrs	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	69db      	ldr	r3, [r3, #28]
 800de9a:	431a      	orrs	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a1b      	ldr	r3, [r3, #32]
 800dea0:	ea42 0103 	orr.w	r1, r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	430a      	orrs	r2, r1
 800deae:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	0c1b      	lsrs	r3, r3, #16
 800deb6:	f003 0204 	and.w	r2, r3, #4
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800debe:	431a      	orrs	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dec4:	431a      	orrs	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	ea42 0103 	orr.w	r1, r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	430a      	orrs	r2, r1
 800ded6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2201      	movs	r2, #1
 800dee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	0800e659 	.word	0x0800e659
 800def4:	0800e66d 	.word	0x0800e66d
 800def8:	0800e681 	.word	0x0800e681
 800defc:	0800e695 	.word	0x0800e695
 800df00:	0800e6a9 	.word	0x0800e6a9
 800df04:	0800e6bd 	.word	0x0800e6bd
 800df08:	0800e6d1 	.word	0x0800e6d1
 800df0c:	0800e6e5 	.word	0x0800e6e5
 800df10:	0800df15 	.word	0x0800df15

0800df14 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <HAL_SPI_RegisterCallback>:
  * @param  CallbackID ID of the callback to be registered
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID, pSPI_CallbackTypeDef pCallback)
{
 800df28:	b480      	push	{r7}
 800df2a:	b087      	sub	sp, #28
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	460b      	mov	r3, r1
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800df36:	2300      	movs	r3, #0
 800df38:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d107      	bne.n	800df50 <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e08b      	b.n	800e068 <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800df56:	2b01      	cmp	r3, #1
 800df58:	d101      	bne.n	800df5e <HAL_SPI_RegisterCallback+0x36>
 800df5a:	2302      	movs	r3, #2
 800df5c:	e084      	b.n	800e068 <HAL_SPI_RegisterCallback+0x140>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2201      	movs	r2, #1
 800df62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d14e      	bne.n	800e010 <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 800df72:	7afb      	ldrb	r3, [r7, #11]
 800df74:	2b09      	cmp	r3, #9
 800df76:	d842      	bhi.n	800dffe <HAL_SPI_RegisterCallback+0xd6>
 800df78:	a201      	add	r2, pc, #4	; (adr r2, 800df80 <HAL_SPI_RegisterCallback+0x58>)
 800df7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7e:	bf00      	nop
 800df80:	0800dfa9 	.word	0x0800dfa9
 800df84:	0800dfb1 	.word	0x0800dfb1
 800df88:	0800dfb9 	.word	0x0800dfb9
 800df8c:	0800dfc1 	.word	0x0800dfc1
 800df90:	0800dfc9 	.word	0x0800dfc9
 800df94:	0800dfd1 	.word	0x0800dfd1
 800df98:	0800dfd9 	.word	0x0800dfd9
 800df9c:	0800dfe1 	.word	0x0800dfe1
 800dfa0:	0800dfeb 	.word	0x0800dfeb
 800dfa4:	0800dff5 	.word	0x0800dff5
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800dfae:	e056      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800dfb6:	e052      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800dfbe:	e04e      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800dfc6:	e04a      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800dfce:	e046      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800dfd6:	e042      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800dfde:	e03e      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800dfe8:	e039      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800dff2:	e034      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800dffc:	e02f      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e002:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	75fb      	strb	r3, [r7, #23]
        break;
 800e00e:	e026      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e016:	b2db      	uxtb	r3, r3
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d118      	bne.n	800e04e <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 800e01c:	7afb      	ldrb	r3, [r7, #11]
 800e01e:	2b08      	cmp	r3, #8
 800e020:	d002      	beq.n	800e028 <HAL_SPI_RegisterCallback+0x100>
 800e022:	2b09      	cmp	r3, #9
 800e024:	d005      	beq.n	800e032 <HAL_SPI_RegisterCallback+0x10a>
 800e026:	e009      	b.n	800e03c <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800e030:	e015      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800e03a:	e010      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e040:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800e048:	2301      	movs	r3, #1
 800e04a:	75fb      	strb	r3, [r7, #23]
        break;
 800e04c:	e007      	b.n	800e05e <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e052:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2200      	movs	r2, #0
 800e062:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 800e066:	7dfb      	ldrb	r3, [r7, #23]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	371c      	adds	r7, #28
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b088      	sub	sp, #32
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	603b      	str	r3, [r7, #0]
 800e080:	4613      	mov	r3, r2
 800e082:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e084:	2300      	movs	r3, #0
 800e086:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d101      	bne.n	800e096 <HAL_SPI_Transmit+0x22>
 800e092:	2302      	movs	r3, #2
 800e094:	e150      	b.n	800e338 <HAL_SPI_Transmit+0x2c4>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2201      	movs	r2, #1
 800e09a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e09e:	f7f8 fa45 	bl	800652c <HAL_GetTick>
 800e0a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e0a4:	88fb      	ldrh	r3, [r7, #6]
 800e0a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d002      	beq.n	800e0ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e0b8:	e135      	b.n	800e326 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <HAL_SPI_Transmit+0x52>
 800e0c0:	88fb      	ldrh	r3, [r7, #6]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d102      	bne.n	800e0cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e0ca:	e12c      	b.n	800e326 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2203      	movs	r2, #3
 800e0d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	68ba      	ldr	r2, [r7, #8]
 800e0de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	88fa      	ldrh	r2, [r7, #6]
 800e0e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	88fa      	ldrh	r2, [r7, #6]
 800e0ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2200      	movs	r2, #0
 800e10c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e116:	d107      	bne.n	800e128 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e126:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e132:	2b40      	cmp	r3, #64	; 0x40
 800e134:	d007      	beq.n	800e146 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e144:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e14e:	d94b      	bls.n	800e1e8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <HAL_SPI_Transmit+0xea>
 800e158:	8afb      	ldrh	r3, [r7, #22]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d13e      	bne.n	800e1dc <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e162:	881a      	ldrh	r2, [r3, #0]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16e:	1c9a      	adds	r2, r3, #2
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e178:	b29b      	uxth	r3, r3
 800e17a:	3b01      	subs	r3, #1
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e182:	e02b      	b.n	800e1dc <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	f003 0302 	and.w	r3, r3, #2
 800e18e:	2b02      	cmp	r3, #2
 800e190:	d112      	bne.n	800e1b8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e196:	881a      	ldrh	r2, [r3, #0]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a2:	1c9a      	adds	r2, r3, #2
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e1b6:	e011      	b.n	800e1dc <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1b8:	f7f8 f9b8 	bl	800652c <HAL_GetTick>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	683a      	ldr	r2, [r7, #0]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d803      	bhi.n	800e1d0 <HAL_SPI_Transmit+0x15c>
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ce:	d102      	bne.n	800e1d6 <HAL_SPI_Transmit+0x162>
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d102      	bne.n	800e1dc <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e1da:	e0a4      	b.n	800e326 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1ce      	bne.n	800e184 <HAL_SPI_Transmit+0x110>
 800e1e6:	e07c      	b.n	800e2e2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <HAL_SPI_Transmit+0x182>
 800e1f0:	8afb      	ldrh	r3, [r7, #22]
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d170      	bne.n	800e2d8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d912      	bls.n	800e226 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e204:	881a      	ldrh	r2, [r3, #0]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e210:	1c9a      	adds	r2, r3, #2
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	3b02      	subs	r3, #2
 800e21e:	b29a      	uxth	r2, r3
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e224:	e058      	b.n	800e2d8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	330c      	adds	r3, #12
 800e230:	7812      	ldrb	r2, [r2, #0]
 800e232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e242:	b29b      	uxth	r3, r3
 800e244:	3b01      	subs	r3, #1
 800e246:	b29a      	uxth	r2, r3
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e24c:	e044      	b.n	800e2d8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	f003 0302 	and.w	r3, r3, #2
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d12b      	bne.n	800e2b4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e260:	b29b      	uxth	r3, r3
 800e262:	2b01      	cmp	r3, #1
 800e264:	d912      	bls.n	800e28c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26a:	881a      	ldrh	r2, [r3, #0]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e276:	1c9a      	adds	r2, r3, #2
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e280:	b29b      	uxth	r3, r3
 800e282:	3b02      	subs	r3, #2
 800e284:	b29a      	uxth	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e28a:	e025      	b.n	800e2d8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	330c      	adds	r3, #12
 800e296:	7812      	ldrb	r2, [r2, #0]
 800e298:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29e:	1c5a      	adds	r2, r3, #1
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e2b2:	e011      	b.n	800e2d8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2b4:	f7f8 f93a 	bl	800652c <HAL_GetTick>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	683a      	ldr	r2, [r7, #0]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d803      	bhi.n	800e2cc <HAL_SPI_Transmit+0x258>
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ca:	d102      	bne.n	800e2d2 <HAL_SPI_Transmit+0x25e>
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d102      	bne.n	800e2d8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e2d6:	e026      	b.n	800e326 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1b5      	bne.n	800e24e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e2e2:	69ba      	ldr	r2, [r7, #24]
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f000 fc02 	bl	800eaf0 <SPI_EndRxTxTransaction>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d002      	beq.n	800e2f8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2220      	movs	r2, #32
 800e2f6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10a      	bne.n	800e316 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e300:	2300      	movs	r3, #0
 800e302:	613b      	str	r3, [r7, #16]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	613b      	str	r3, [r7, #16]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	613b      	str	r3, [r7, #16]
 800e314:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	77fb      	strb	r3, [r7, #31]
 800e322:	e000      	b.n	800e326 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800e324:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2201      	movs	r2, #1
 800e32a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e336:	7ffb      	ldrb	r3, [r7, #31]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3720      	adds	r7, #32
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
 800e34c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e34e:	2300      	movs	r3, #0
 800e350:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d101      	bne.n	800e360 <HAL_SPI_TransmitReceive_DMA+0x20>
 800e35c:	2302      	movs	r3, #2
 800e35e:	e16c      	b.n	800e63a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2201      	movs	r2, #1
 800e364:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e36e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800e376:	7dbb      	ldrb	r3, [r7, #22]
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d00d      	beq.n	800e398 <HAL_SPI_TransmitReceive_DMA+0x58>
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e382:	d106      	bne.n	800e392 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d102      	bne.n	800e392 <HAL_SPI_TransmitReceive_DMA+0x52>
 800e38c:	7dbb      	ldrb	r3, [r7, #22]
 800e38e:	2b04      	cmp	r3, #4
 800e390:	d002      	beq.n	800e398 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800e392:	2302      	movs	r3, #2
 800e394:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e396:	e14b      	b.n	800e630 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d005      	beq.n	800e3aa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e3a4:	887b      	ldrh	r3, [r7, #2]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d102      	bne.n	800e3b0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e3ae:	e13f      	b.n	800e630 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	2b04      	cmp	r3, #4
 800e3ba:	d003      	beq.n	800e3c4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2205      	movs	r2, #5
 800e3c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	68ba      	ldr	r2, [r7, #8]
 800e3ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	887a      	ldrh	r2, [r7, #2]
 800e3d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	887a      	ldrh	r2, [r7, #2]
 800e3da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	887a      	ldrh	r2, [r7, #2]
 800e3e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	887a      	ldrh	r2, [r7, #2]
 800e3ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	685a      	ldr	r2, [r3, #4]
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800e40c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e416:	d908      	bls.n	800e42a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e426:	605a      	str	r2, [r3, #4]
 800e428:	e06f      	b.n	800e50a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	685a      	ldr	r2, [r3, #4]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e438:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e43e:	699b      	ldr	r3, [r3, #24]
 800e440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e444:	d126      	bne.n	800e494 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e44a:	f003 0301 	and.w	r3, r3, #1
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10f      	bne.n	800e472 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	685a      	ldr	r2, [r3, #4]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e460:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e466:	b29b      	uxth	r3, r3
 800e468:	085b      	lsrs	r3, r3, #1
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e470:	e010      	b.n	800e494 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	685a      	ldr	r2, [r3, #4]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e480:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e486:	b29b      	uxth	r3, r3
 800e488:	085b      	lsrs	r3, r3, #1
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	3301      	adds	r3, #1
 800e48e:	b29a      	uxth	r2, r3
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e498:	699b      	ldr	r3, [r3, #24]
 800e49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e49e:	d134      	bne.n	800e50a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	685a      	ldr	r2, [r3, #4]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e4ae:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	f003 0301 	and.w	r3, r3, #1
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d111      	bne.n	800e4e4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	685a      	ldr	r2, [r3, #4]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e4ce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	085b      	lsrs	r3, r3, #1
 800e4da:	b29a      	uxth	r2, r3
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e4e2:	e012      	b.n	800e50a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	685a      	ldr	r2, [r3, #4]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e4f2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	085b      	lsrs	r3, r3, #1
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	3301      	adds	r3, #1
 800e502:	b29a      	uxth	r2, r3
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e510:	b2db      	uxtb	r3, r3
 800e512:	2b04      	cmp	r3, #4
 800e514:	d108      	bne.n	800e528 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e51a:	4a4a      	ldr	r2, [pc, #296]	; (800e644 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800e51c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e522:	4a49      	ldr	r2, [pc, #292]	; (800e648 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800e524:	62da      	str	r2, [r3, #44]	; 0x2c
 800e526:	e007      	b.n	800e538 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e52c:	4a47      	ldr	r2, [pc, #284]	; (800e64c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800e52e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e534:	4a46      	ldr	r2, [pc, #280]	; (800e650 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800e536:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53c:	4a45      	ldr	r2, [pc, #276]	; (800e654 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800e53e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e544:	2200      	movs	r2, #0
 800e546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	330c      	adds	r3, #12
 800e552:	4619      	mov	r1, r3
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e558:	461a      	mov	r2, r3
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e560:	b29b      	uxth	r3, r3
 800e562:	f7f9 fe1d 	bl	80081a0 <HAL_DMA_Start_IT>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00c      	beq.n	800e586 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e570:	f043 0210 	orr.w	r2, r3, #16
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e584:	e054      	b.n	800e630 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f042 0201 	orr.w	r2, r2, #1
 800e594:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e59a:	2200      	movs	r2, #0
 800e59c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5be:	4619      	mov	r1, r3
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	330c      	adds	r3, #12
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	f7f9 fde7 	bl	80081a0 <HAL_DMA_Start_IT>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00c      	beq.n	800e5f2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5dc:	f043 0210 	orr.w	r2, r3, #16
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e5f0:	e01e      	b.n	800e630 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5fc:	2b40      	cmp	r3, #64	; 0x40
 800e5fe:	d007      	beq.n	800e610 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e60e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	685a      	ldr	r2, [r3, #4]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f042 0220 	orr.w	r2, r2, #32
 800e61e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	685a      	ldr	r2, [r3, #4]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f042 0202 	orr.w	r2, r2, #2
 800e62e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2200      	movs	r2, #0
 800e634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e638:	7dfb      	ldrb	r3, [r7, #23]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3718      	adds	r7, #24
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	0800e815 	.word	0x0800e815
 800e648:	0800e6f9 	.word	0x0800e6f9
 800e64c:	0800e833 	.word	0x0800e833
 800e650:	0800e781 	.word	0x0800e781
 800e654:	0800e851 	.word	0x0800e851

0800e658 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e674:	bf00      	nop
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e688:	bf00      	nop
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e6b0:	bf00      	nop
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e6c4:	bf00      	nop
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e6d8:	bf00      	nop
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800e6ec:	bf00      	nop
 800e6ee:	370c      	adds	r7, #12
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr

0800e6f8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e704:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e706:	f7f7 ff11 	bl	800652c <HAL_GetTick>
 800e70a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f003 0320 	and.w	r3, r3, #32
 800e716:	2b20      	cmp	r3, #32
 800e718:	d02b      	beq.n	800e772 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	685a      	ldr	r2, [r3, #4]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f022 0220 	bic.w	r2, r2, #32
 800e728:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	685a      	ldr	r2, [r3, #4]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f022 0203 	bic.w	r2, r2, #3
 800e738:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	2164      	movs	r1, #100	; 0x64
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	f000 f97e 	bl	800ea40 <SPI_EndRxTransaction>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d002      	beq.n	800e750 <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2220      	movs	r2, #32
 800e74e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2200      	movs	r2, #0
 800e754:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e764:	2b00      	cmp	r3, #0
 800e766:	d004      	beq.n	800e772 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e770:	e003      	b.n	800e77a <SPI_DMAReceiveCplt+0x82>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e78c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e78e:	f7f7 fecd 	bl	800652c <HAL_GetTick>
 800e792:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f003 0320 	and.w	r3, r3, #32
 800e79e:	2b20      	cmp	r3, #32
 800e7a0:	d031      	beq.n	800e806 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	685a      	ldr	r2, [r3, #4]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f022 0220 	bic.w	r2, r2, #32
 800e7b0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	2164      	movs	r1, #100	; 0x64
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f000 f99a 	bl	800eaf0 <SPI_EndRxTxTransaction>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d005      	beq.n	800e7ce <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7c6:	f043 0220 	orr.w	r2, r3, #32
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	685a      	ldr	r2, [r3, #4]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f022 0203 	bic.w	r2, r2, #3
 800e7dc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d004      	beq.n	800e806 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e804:	e003      	b.n	800e80e <SPI_DMATransmitReceiveCplt+0x8e>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e80a:	68f8      	ldr	r0, [r7, #12]
 800e80c:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e820:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e82a:	bf00      	nop
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b084      	sub	sp, #16
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e83e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e848:	bf00      	nop
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e85c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	685a      	ldr	r2, [r3, #4]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f022 0203 	bic.w	r2, r2, #3
 800e86c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e872:	f043 0210 	orr.w	r2, r3, #16
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2201      	movs	r2, #1
 800e87e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e88a:	bf00      	nop
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b084      	sub	sp, #16
 800e896:	af00      	add	r7, sp, #0
 800e898:	60f8      	str	r0, [r7, #12]
 800e89a:	60b9      	str	r1, [r7, #8]
 800e89c:	603b      	str	r3, [r7, #0]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e8a2:	e04c      	b.n	800e93e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8aa:	d048      	beq.n	800e93e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e8ac:	f7f7 fe3e 	bl	800652c <HAL_GetTick>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	683a      	ldr	r2, [r7, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d902      	bls.n	800e8c2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d13d      	bne.n	800e93e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	685a      	ldr	r2, [r3, #4]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e8d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8da:	d111      	bne.n	800e900 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	689b      	ldr	r3, [r3, #8]
 800e8e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8e4:	d004      	beq.n	800e8f0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8ee:	d107      	bne.n	800e900 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e908:	d10f      	bne.n	800e92a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e918:	601a      	str	r2, [r3, #0]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e928:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2200      	movs	r2, #0
 800e936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e93a:	2303      	movs	r3, #3
 800e93c:	e00f      	b.n	800e95e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	689a      	ldr	r2, [r3, #8]
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	4013      	ands	r3, r2
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	bf0c      	ite	eq
 800e94e:	2301      	moveq	r3, #1
 800e950:	2300      	movne	r3, #0
 800e952:	b2db      	uxtb	r3, r3
 800e954:	461a      	mov	r2, r3
 800e956:	79fb      	ldrb	r3, [r7, #7]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d1a3      	bne.n	800e8a4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e95c:	2300      	movs	r3, #0
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b084      	sub	sp, #16
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	60f8      	str	r0, [r7, #12]
 800e96e:	60b9      	str	r1, [r7, #8]
 800e970:	607a      	str	r2, [r7, #4]
 800e972:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800e974:	e057      	b.n	800ea26 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e97c:	d106      	bne.n	800e98c <SPI_WaitFifoStateUntilTimeout+0x26>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d103      	bne.n	800e98c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	330c      	adds	r3, #12
 800e98a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e992:	d048      	beq.n	800ea26 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e994:	f7f7 fdca 	bl	800652c <HAL_GetTick>
 800e998:	4602      	mov	r2, r0
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	683a      	ldr	r2, [r7, #0]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d902      	bls.n	800e9aa <SPI_WaitFifoStateUntilTimeout+0x44>
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d13d      	bne.n	800ea26 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	685a      	ldr	r2, [r3, #4]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e9b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9c2:	d111      	bne.n	800e9e8 <SPI_WaitFifoStateUntilTimeout+0x82>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9cc:	d004      	beq.n	800e9d8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9d6:	d107      	bne.n	800e9e8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9f0:	d10f      	bne.n	800ea12 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea00:	601a      	str	r2, [r3, #0]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ea22:	2303      	movs	r3, #3
 800ea24:	e008      	b.n	800ea38 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	689a      	ldr	r2, [r3, #8]
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	4013      	ands	r3, r2
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d19f      	bne.n	800e976 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800ea36:	2300      	movs	r3, #0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3710      	adds	r7, #16
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af02      	add	r7, sp, #8
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea54:	d111      	bne.n	800ea7a <SPI_EndRxTransaction+0x3a>
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea5e:	d004      	beq.n	800ea6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	689b      	ldr	r3, [r3, #8]
 800ea64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea68:	d107      	bne.n	800ea7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea78:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	9300      	str	r3, [sp, #0]
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2200      	movs	r2, #0
 800ea82:	2180      	movs	r1, #128	; 0x80
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f7ff ff04 	bl	800e892 <SPI_WaitFlagStateUntilTimeout>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d007      	beq.n	800eaa0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea94:	f043 0220 	orr.w	r2, r3, #32
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea9c:	2303      	movs	r3, #3
 800ea9e:	e023      	b.n	800eae8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eaa8:	d11d      	bne.n	800eae6 <SPI_EndRxTransaction+0xa6>
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eab2:	d004      	beq.n	800eabe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	689b      	ldr	r3, [r3, #8]
 800eab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eabc:	d113      	bne.n	800eae6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f7ff ff4b 	bl	800e966 <SPI_WaitFifoStateUntilTimeout>
 800ead0:	4603      	mov	r3, r0
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d007      	beq.n	800eae6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eada:	f043 0220 	orr.w	r2, r3, #32
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800eae2:	2303      	movs	r3, #3
 800eae4:	e000      	b.n	800eae8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af02      	add	r7, sp, #8
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	2200      	movs	r2, #0
 800eb04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800eb08:	68f8      	ldr	r0, [r7, #12]
 800eb0a:	f7ff ff2c 	bl	800e966 <SPI_WaitFifoStateUntilTimeout>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d007      	beq.n	800eb24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb18:	f043 0220 	orr.w	r2, r3, #32
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eb20:	2303      	movs	r3, #3
 800eb22:	e027      	b.n	800eb74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	9300      	str	r3, [sp, #0]
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	2180      	movs	r1, #128	; 0x80
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f7ff feaf 	bl	800e892 <SPI_WaitFlagStateUntilTimeout>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d007      	beq.n	800eb4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb3e:	f043 0220 	orr.w	r2, r3, #32
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eb46:	2303      	movs	r3, #3
 800eb48:	e014      	b.n	800eb74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	9300      	str	r3, [sp, #0]
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f7ff ff05 	bl	800e966 <SPI_WaitFifoStateUntilTimeout>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d007      	beq.n	800eb72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb66:	f043 0220 	orr.w	r2, r3, #32
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eb6e:	2303      	movs	r3, #3
 800eb70:	e000      	b.n	800eb74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eb72:	2300      	movs	r3, #0
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d101      	bne.n	800eb8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e01d      	b.n	800ebca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d106      	bne.n	800eba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 f815 	bl	800ebd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2202      	movs	r2, #2
 800ebac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	3304      	adds	r3, #4
 800ebb8:	4619      	mov	r1, r3
 800ebba:	4610      	mov	r0, r2
 800ebbc:	f000 f9fc 	bl	800efb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ebd2:	b480      	push	{r7}
 800ebd4:	b083      	sub	sp, #12
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ebda:	bf00      	nop
 800ebdc:	370c      	adds	r7, #12
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr
	...

0800ebe8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2202      	movs	r2, #2
 800ebf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	689a      	ldr	r2, [r3, #8]
 800ebfe:	4b0e      	ldr	r3, [pc, #56]	; (800ec38 <HAL_TIM_Base_Start+0x50>)
 800ec00:	4013      	ands	r3, r2
 800ec02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2b06      	cmp	r3, #6
 800ec08:	d00b      	beq.n	800ec22 <HAL_TIM_Base_Start+0x3a>
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec10:	d007      	beq.n	800ec22 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f042 0201 	orr.w	r2, r2, #1
 800ec20:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2201      	movs	r2, #1
 800ec26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ec2a:	2300      	movs	r3, #0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3714      	adds	r7, #20
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	00010007 	.word	0x00010007

0800ec3c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2202      	movs	r2, #2
 800ec48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	6a1a      	ldr	r2, [r3, #32]
 800ec52:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec56:	4013      	ands	r3, r2
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10f      	bne.n	800ec7c <HAL_TIM_Base_Stop+0x40>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6a1a      	ldr	r2, [r3, #32]
 800ec62:	f240 4344 	movw	r3, #1092	; 0x444
 800ec66:	4013      	ands	r3, r2
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d107      	bne.n	800ec7c <HAL_TIM_Base_Stop+0x40>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f022 0201 	bic.w	r2, r2, #1
 800ec7a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	370c      	adds	r7, #12
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
	...

0800ec94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68da      	ldr	r2, [r3, #12]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f042 0201 	orr.w	r2, r2, #1
 800ecaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	689a      	ldr	r2, [r3, #8]
 800ecb2:	4b0c      	ldr	r3, [pc, #48]	; (800ece4 <HAL_TIM_Base_Start_IT+0x50>)
 800ecb4:	4013      	ands	r3, r2
 800ecb6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2b06      	cmp	r3, #6
 800ecbc:	d00b      	beq.n	800ecd6 <HAL_TIM_Base_Start_IT+0x42>
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecc4:	d007      	beq.n	800ecd6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f042 0201 	orr.w	r2, r2, #1
 800ecd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ecd6:	2300      	movs	r3, #0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3714      	adds	r7, #20
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr
 800ece4:	00010007 	.word	0x00010007

0800ece8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	68da      	ldr	r2, [r3, #12]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f022 0201 	bic.w	r2, r2, #1
 800ecfe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	6a1a      	ldr	r2, [r3, #32]
 800ed06:	f241 1311 	movw	r3, #4369	; 0x1111
 800ed0a:	4013      	ands	r3, r2
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10f      	bne.n	800ed30 <HAL_TIM_Base_Stop_IT+0x48>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	6a1a      	ldr	r2, [r3, #32]
 800ed16:	f240 4344 	movw	r3, #1092	; 0x444
 800ed1a:	4013      	ands	r3, r2
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d107      	bne.n	800ed30 <HAL_TIM_Base_Stop_IT+0x48>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f022 0201 	bic.w	r2, r2, #1
 800ed2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	370c      	adds	r7, #12
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr

0800ed3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b082      	sub	sp, #8
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	691b      	ldr	r3, [r3, #16]
 800ed4c:	f003 0302 	and.w	r3, r3, #2
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	d122      	bne.n	800ed9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	f003 0302 	and.w	r3, r3, #2
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	d11b      	bne.n	800ed9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f06f 0202 	mvn.w	r2, #2
 800ed6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2201      	movs	r2, #1
 800ed70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	699b      	ldr	r3, [r3, #24]
 800ed78:	f003 0303 	and.w	r3, r3, #3
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d003      	beq.n	800ed88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7f7 f9dd 	bl	8006140 <HAL_TIM_IC_CaptureCallback>
 800ed86:	e005      	b.n	800ed94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 f8f7 	bl	800ef7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f8fe 	bl	800ef90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	691b      	ldr	r3, [r3, #16]
 800eda0:	f003 0304 	and.w	r3, r3, #4
 800eda4:	2b04      	cmp	r3, #4
 800eda6:	d122      	bne.n	800edee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	f003 0304 	and.w	r3, r3, #4
 800edb2:	2b04      	cmp	r3, #4
 800edb4:	d11b      	bne.n	800edee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f06f 0204 	mvn.w	r2, #4
 800edbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2202      	movs	r2, #2
 800edc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	699b      	ldr	r3, [r3, #24]
 800edcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d003      	beq.n	800eddc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f7f7 f9b3 	bl	8006140 <HAL_TIM_IC_CaptureCallback>
 800edda:	e005      	b.n	800ede8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 f8cd 	bl	800ef7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f000 f8d4 	bl	800ef90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	691b      	ldr	r3, [r3, #16]
 800edf4:	f003 0308 	and.w	r3, r3, #8
 800edf8:	2b08      	cmp	r3, #8
 800edfa:	d122      	bne.n	800ee42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	f003 0308 	and.w	r3, r3, #8
 800ee06:	2b08      	cmp	r3, #8
 800ee08:	d11b      	bne.n	800ee42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f06f 0208 	mvn.w	r2, #8
 800ee12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2204      	movs	r2, #4
 800ee18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	69db      	ldr	r3, [r3, #28]
 800ee20:	f003 0303 	and.w	r3, r3, #3
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d003      	beq.n	800ee30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7f7 f989 	bl	8006140 <HAL_TIM_IC_CaptureCallback>
 800ee2e:	e005      	b.n	800ee3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 f8a3 	bl	800ef7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 f8aa 	bl	800ef90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	691b      	ldr	r3, [r3, #16]
 800ee48:	f003 0310 	and.w	r3, r3, #16
 800ee4c:	2b10      	cmp	r3, #16
 800ee4e:	d122      	bne.n	800ee96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	f003 0310 	and.w	r3, r3, #16
 800ee5a:	2b10      	cmp	r3, #16
 800ee5c:	d11b      	bne.n	800ee96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f06f 0210 	mvn.w	r2, #16
 800ee66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2208      	movs	r2, #8
 800ee6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	69db      	ldr	r3, [r3, #28]
 800ee74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d003      	beq.n	800ee84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f7f7 f95f 	bl	8006140 <HAL_TIM_IC_CaptureCallback>
 800ee82:	e005      	b.n	800ee90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f000 f879 	bl	800ef7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 f880 	bl	800ef90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	691b      	ldr	r3, [r3, #16]
 800ee9c:	f003 0301 	and.w	r3, r3, #1
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d10e      	bne.n	800eec2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	68db      	ldr	r3, [r3, #12]
 800eeaa:	f003 0301 	and.w	r3, r3, #1
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d107      	bne.n	800eec2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f06f 0201 	mvn.w	r2, #1
 800eeba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7f7 f92d 	bl	800611c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	691b      	ldr	r3, [r3, #16]
 800eec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eecc:	2b80      	cmp	r3, #128	; 0x80
 800eece:	d10e      	bne.n	800eeee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eeda:	2b80      	cmp	r3, #128	; 0x80
 800eedc:	d107      	bne.n	800eeee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f991 	bl	800f210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	691b      	ldr	r3, [r3, #16]
 800eef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eefc:	d10e      	bne.n	800ef1c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef08:	2b80      	cmp	r3, #128	; 0x80
 800ef0a:	d107      	bne.n	800ef1c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ef14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 f984 	bl	800f224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef26:	2b40      	cmp	r3, #64	; 0x40
 800ef28:	d10e      	bne.n	800ef48 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef34:	2b40      	cmp	r3, #64	; 0x40
 800ef36:	d107      	bne.n	800ef48 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 f82e 	bl	800efa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	691b      	ldr	r3, [r3, #16]
 800ef4e:	f003 0320 	and.w	r3, r3, #32
 800ef52:	2b20      	cmp	r3, #32
 800ef54:	d10e      	bne.n	800ef74 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	f003 0320 	and.w	r3, r3, #32
 800ef60:	2b20      	cmp	r3, #32
 800ef62:	d107      	bne.n	800ef74 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f06f 0220 	mvn.w	r2, #32
 800ef6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f944 	bl	800f1fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef74:	bf00      	nop
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b083      	sub	sp, #12
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ef84:	bf00      	nop
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ef98:	bf00      	nop
 800ef9a:	370c      	adds	r7, #12
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efac:	bf00      	nop
 800efae:	370c      	adds	r7, #12
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr

0800efb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800efb8:	b480      	push	{r7}
 800efba:	b085      	sub	sp, #20
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4a40      	ldr	r2, [pc, #256]	; (800f0cc <TIM_Base_SetConfig+0x114>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d013      	beq.n	800eff8 <TIM_Base_SetConfig+0x40>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efd6:	d00f      	beq.n	800eff8 <TIM_Base_SetConfig+0x40>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4a3d      	ldr	r2, [pc, #244]	; (800f0d0 <TIM_Base_SetConfig+0x118>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d00b      	beq.n	800eff8 <TIM_Base_SetConfig+0x40>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	4a3c      	ldr	r2, [pc, #240]	; (800f0d4 <TIM_Base_SetConfig+0x11c>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d007      	beq.n	800eff8 <TIM_Base_SetConfig+0x40>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a3b      	ldr	r2, [pc, #236]	; (800f0d8 <TIM_Base_SetConfig+0x120>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d003      	beq.n	800eff8 <TIM_Base_SetConfig+0x40>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4a3a      	ldr	r2, [pc, #232]	; (800f0dc <TIM_Base_SetConfig+0x124>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d108      	bne.n	800f00a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800effe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	4313      	orrs	r3, r2
 800f008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4a2f      	ldr	r2, [pc, #188]	; (800f0cc <TIM_Base_SetConfig+0x114>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d01f      	beq.n	800f052 <TIM_Base_SetConfig+0x9a>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f018:	d01b      	beq.n	800f052 <TIM_Base_SetConfig+0x9a>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4a2c      	ldr	r2, [pc, #176]	; (800f0d0 <TIM_Base_SetConfig+0x118>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d017      	beq.n	800f052 <TIM_Base_SetConfig+0x9a>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	4a2b      	ldr	r2, [pc, #172]	; (800f0d4 <TIM_Base_SetConfig+0x11c>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d013      	beq.n	800f052 <TIM_Base_SetConfig+0x9a>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4a2a      	ldr	r2, [pc, #168]	; (800f0d8 <TIM_Base_SetConfig+0x120>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d00f      	beq.n	800f052 <TIM_Base_SetConfig+0x9a>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	4a29      	ldr	r2, [pc, #164]	; (800f0dc <TIM_Base_SetConfig+0x124>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d00b      	beq.n	800f052 <TIM_Base_SetConfig+0x9a>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4a28      	ldr	r2, [pc, #160]	; (800f0e0 <TIM_Base_SetConfig+0x128>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d007      	beq.n	800f052 <TIM_Base_SetConfig+0x9a>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4a27      	ldr	r2, [pc, #156]	; (800f0e4 <TIM_Base_SetConfig+0x12c>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d003      	beq.n	800f052 <TIM_Base_SetConfig+0x9a>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4a26      	ldr	r2, [pc, #152]	; (800f0e8 <TIM_Base_SetConfig+0x130>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d108      	bne.n	800f064 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	68fa      	ldr	r2, [r7, #12]
 800f060:	4313      	orrs	r3, r2
 800f062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	695b      	ldr	r3, [r3, #20]
 800f06e:	4313      	orrs	r3, r2
 800f070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	689a      	ldr	r2, [r3, #8]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a10      	ldr	r2, [pc, #64]	; (800f0cc <TIM_Base_SetConfig+0x114>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d00f      	beq.n	800f0b0 <TIM_Base_SetConfig+0xf8>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4a12      	ldr	r2, [pc, #72]	; (800f0dc <TIM_Base_SetConfig+0x124>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d00b      	beq.n	800f0b0 <TIM_Base_SetConfig+0xf8>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	4a11      	ldr	r2, [pc, #68]	; (800f0e0 <TIM_Base_SetConfig+0x128>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d007      	beq.n	800f0b0 <TIM_Base_SetConfig+0xf8>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4a10      	ldr	r2, [pc, #64]	; (800f0e4 <TIM_Base_SetConfig+0x12c>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d003      	beq.n	800f0b0 <TIM_Base_SetConfig+0xf8>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4a0f      	ldr	r2, [pc, #60]	; (800f0e8 <TIM_Base_SetConfig+0x130>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d103      	bne.n	800f0b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	691a      	ldr	r2, [r3, #16]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	615a      	str	r2, [r3, #20]
}
 800f0be:	bf00      	nop
 800f0c0:	3714      	adds	r7, #20
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	40012c00 	.word	0x40012c00
 800f0d0:	40000400 	.word	0x40000400
 800f0d4:	40000800 	.word	0x40000800
 800f0d8:	40000c00 	.word	0x40000c00
 800f0dc:	40013400 	.word	0x40013400
 800f0e0:	40014000 	.word	0x40014000
 800f0e4:	40014400 	.word	0x40014400
 800f0e8:	40014800 	.word	0x40014800

0800f0ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d101      	bne.n	800f104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f100:	2302      	movs	r3, #2
 800f102:	e068      	b.n	800f1d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2202      	movs	r2, #2
 800f110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a2e      	ldr	r2, [pc, #184]	; (800f1e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d004      	beq.n	800f138 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	4a2d      	ldr	r2, [pc, #180]	; (800f1e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f134:	4293      	cmp	r3, r2
 800f136:	d108      	bne.n	800f14a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f13e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	68fa      	ldr	r2, [r7, #12]
 800f146:	4313      	orrs	r3, r2
 800f148:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	4313      	orrs	r3, r2
 800f15a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	4a1e      	ldr	r2, [pc, #120]	; (800f1e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d01d      	beq.n	800f1aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f176:	d018      	beq.n	800f1aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a1b      	ldr	r2, [pc, #108]	; (800f1ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d013      	beq.n	800f1aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4a1a      	ldr	r2, [pc, #104]	; (800f1f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d00e      	beq.n	800f1aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a18      	ldr	r2, [pc, #96]	; (800f1f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d009      	beq.n	800f1aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	4a13      	ldr	r2, [pc, #76]	; (800f1e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d004      	beq.n	800f1aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4a14      	ldr	r2, [pc, #80]	; (800f1f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d10c      	bne.n	800f1c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	68ba      	ldr	r2, [r7, #8]
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	68ba      	ldr	r2, [r7, #8]
 800f1c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3714      	adds	r7, #20
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
 800f1e2:	bf00      	nop
 800f1e4:	40012c00 	.word	0x40012c00
 800f1e8:	40013400 	.word	0x40013400
 800f1ec:	40000400 	.word	0x40000400
 800f1f0:	40000800 	.word	0x40000800
 800f1f4:	40000c00 	.word	0x40000c00
 800f1f8:	40014000 	.word	0x40014000

0800f1fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b083      	sub	sp, #12
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f204:	bf00      	nop
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f218:	bf00      	nop
 800f21a:	370c      	adds	r7, #12
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f22c:	bf00      	nop
 800f22e:	370c      	adds	r7, #12
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr

0800f238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f246:	2301      	movs	r3, #1
 800f248:	e042      	b.n	800f2d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f250:	2b00      	cmp	r3, #0
 800f252:	d106      	bne.n	800f262 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7f3 fd5b 	bl	8002d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2224      	movs	r2, #36	; 0x24
 800f266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f022 0201 	bic.w	r2, r2, #1
 800f278:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 f8c4 	bl	800f408 <UART_SetConfig>
 800f280:	4603      	mov	r3, r0
 800f282:	2b01      	cmp	r3, #1
 800f284:	d101      	bne.n	800f28a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f286:	2301      	movs	r3, #1
 800f288:	e022      	b.n	800f2d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d002      	beq.n	800f298 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f001 fa74 	bl	8010780 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	685a      	ldr	r2, [r3, #4]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f2a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	689a      	ldr	r2, [r3, #8]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f2b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f042 0201 	orr.w	r2, r2, #1
 800f2c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f001 fafb 	bl	80108c4 <UART_CheckIdleState>
 800f2ce:	4603      	mov	r3, r0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08a      	sub	sp, #40	; 0x28
 800f2dc:	af02      	add	r7, sp, #8
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	603b      	str	r3, [r7, #0]
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2ee:	2b20      	cmp	r3, #32
 800f2f0:	f040 8084 	bne.w	800f3fc <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d002      	beq.n	800f300 <HAL_UART_Transmit+0x28>
 800f2fa:	88fb      	ldrh	r3, [r7, #6]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d101      	bne.n	800f304 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f300:	2301      	movs	r3, #1
 800f302:	e07c      	b.n	800f3fe <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d101      	bne.n	800f312 <HAL_UART_Transmit+0x3a>
 800f30e:	2302      	movs	r3, #2
 800f310:	e075      	b.n	800f3fe <HAL_UART_Transmit+0x126>
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2201      	movs	r2, #1
 800f316:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2200      	movs	r2, #0
 800f31e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2221      	movs	r2, #33	; 0x21
 800f326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f32a:	f7f7 f8ff 	bl	800652c <HAL_GetTick>
 800f32e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	88fa      	ldrh	r2, [r7, #6]
 800f334:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	88fa      	ldrh	r2, [r7, #6]
 800f33c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f348:	d108      	bne.n	800f35c <HAL_UART_Transmit+0x84>
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	691b      	ldr	r3, [r3, #16]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d104      	bne.n	800f35c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f352:	2300      	movs	r3, #0
 800f354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	61bb      	str	r3, [r7, #24]
 800f35a:	e003      	b.n	800f364 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f360:	2300      	movs	r3, #0
 800f362:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2200      	movs	r2, #0
 800f368:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800f36c:	e02d      	b.n	800f3ca <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	2200      	movs	r2, #0
 800f376:	2180      	movs	r1, #128	; 0x80
 800f378:	68f8      	ldr	r0, [r7, #12]
 800f37a:	f001 faeb 	bl	8010954 <UART_WaitOnFlagUntilTimeout>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f384:	2303      	movs	r3, #3
 800f386:	e03a      	b.n	800f3fe <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d10b      	bne.n	800f3a6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	881a      	ldrh	r2, [r3, #0]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f39a:	b292      	uxth	r2, r2
 800f39c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f39e:	69bb      	ldr	r3, [r7, #24]
 800f3a0:	3302      	adds	r3, #2
 800f3a2:	61bb      	str	r3, [r7, #24]
 800f3a4:	e008      	b.n	800f3b8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	781a      	ldrb	r2, [r3, #0]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	b292      	uxth	r2, r2
 800f3b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1cb      	bne.n	800f36e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	2140      	movs	r1, #64	; 0x40
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	f001 fab7 	bl	8010954 <UART_WaitOnFlagUntilTimeout>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d001      	beq.n	800f3f0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800f3ec:	2303      	movs	r3, #3
 800f3ee:	e006      	b.n	800f3fe <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2220      	movs	r2, #32
 800f3f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	e000      	b.n	800f3fe <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800f3fc:	2302      	movs	r3, #2
  }
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3720      	adds	r7, #32
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
	...

0800f408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f40c:	b08c      	sub	sp, #48	; 0x30
 800f40e:	af00      	add	r7, sp, #0
 800f410:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f412:	2300      	movs	r3, #0
 800f414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 800f416:	2300      	movs	r3, #0
 800f418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800f41c:	2300      	movs	r3, #0
 800f41e:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	689a      	ldr	r2, [r3, #8]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	431a      	orrs	r2, r3
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	695b      	ldr	r3, [r3, #20]
 800f42e:	431a      	orrs	r2, r3
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	69db      	ldr	r3, [r3, #28]
 800f434:	4313      	orrs	r3, r2
 800f436:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f43c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f43e:	4313      	orrs	r3, r2
 800f440:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	4baa      	ldr	r3, [pc, #680]	; (800f6f4 <UART_SetConfig+0x2ec>)
 800f44a:	4013      	ands	r3, r2
 800f44c:	68fa      	ldr	r2, [r7, #12]
 800f44e:	6812      	ldr	r2, [r2, #0]
 800f450:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f452:	430b      	orrs	r3, r1
 800f454:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	68da      	ldr	r2, [r3, #12]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	430a      	orrs	r2, r1
 800f46a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	699b      	ldr	r3, [r3, #24]
 800f470:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4aa0      	ldr	r2, [pc, #640]	; (800f6f8 <UART_SetConfig+0x2f0>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d004      	beq.n	800f486 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6a1b      	ldr	r3, [r3, #32]
 800f480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f482:	4313      	orrs	r3, r2
 800f484:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f490:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f494:	68fa      	ldr	r2, [r7, #12]
 800f496:	6812      	ldr	r2, [r2, #0]
 800f498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f49a:	430b      	orrs	r3, r1
 800f49c:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a4:	f023 010f 	bic.w	r1, r3, #15
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	430a      	orrs	r2, r1
 800f4b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4a90      	ldr	r2, [pc, #576]	; (800f6fc <UART_SetConfig+0x2f4>)
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d126      	bne.n	800f50c <UART_SetConfig+0x104>
 800f4be:	4b90      	ldr	r3, [pc, #576]	; (800f700 <UART_SetConfig+0x2f8>)
 800f4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4c4:	f003 0303 	and.w	r3, r3, #3
 800f4c8:	2b03      	cmp	r3, #3
 800f4ca:	d81b      	bhi.n	800f504 <UART_SetConfig+0xfc>
 800f4cc:	a201      	add	r2, pc, #4	; (adr r2, 800f4d4 <UART_SetConfig+0xcc>)
 800f4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d2:	bf00      	nop
 800f4d4:	0800f4e5 	.word	0x0800f4e5
 800f4d8:	0800f4f5 	.word	0x0800f4f5
 800f4dc:	0800f4ed 	.word	0x0800f4ed
 800f4e0:	0800f4fd 	.word	0x0800f4fd
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4ea:	e116      	b.n	800f71a <UART_SetConfig+0x312>
 800f4ec:	2302      	movs	r3, #2
 800f4ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4f2:	e112      	b.n	800f71a <UART_SetConfig+0x312>
 800f4f4:	2304      	movs	r3, #4
 800f4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4fa:	e10e      	b.n	800f71a <UART_SetConfig+0x312>
 800f4fc:	2308      	movs	r3, #8
 800f4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f502:	e10a      	b.n	800f71a <UART_SetConfig+0x312>
 800f504:	2310      	movs	r3, #16
 800f506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f50a:	e106      	b.n	800f71a <UART_SetConfig+0x312>
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4a7c      	ldr	r2, [pc, #496]	; (800f704 <UART_SetConfig+0x2fc>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d138      	bne.n	800f588 <UART_SetConfig+0x180>
 800f516:	4b7a      	ldr	r3, [pc, #488]	; (800f700 <UART_SetConfig+0x2f8>)
 800f518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f51c:	f003 030c 	and.w	r3, r3, #12
 800f520:	2b0c      	cmp	r3, #12
 800f522:	d82d      	bhi.n	800f580 <UART_SetConfig+0x178>
 800f524:	a201      	add	r2, pc, #4	; (adr r2, 800f52c <UART_SetConfig+0x124>)
 800f526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f52a:	bf00      	nop
 800f52c:	0800f561 	.word	0x0800f561
 800f530:	0800f581 	.word	0x0800f581
 800f534:	0800f581 	.word	0x0800f581
 800f538:	0800f581 	.word	0x0800f581
 800f53c:	0800f571 	.word	0x0800f571
 800f540:	0800f581 	.word	0x0800f581
 800f544:	0800f581 	.word	0x0800f581
 800f548:	0800f581 	.word	0x0800f581
 800f54c:	0800f569 	.word	0x0800f569
 800f550:	0800f581 	.word	0x0800f581
 800f554:	0800f581 	.word	0x0800f581
 800f558:	0800f581 	.word	0x0800f581
 800f55c:	0800f579 	.word	0x0800f579
 800f560:	2300      	movs	r3, #0
 800f562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f566:	e0d8      	b.n	800f71a <UART_SetConfig+0x312>
 800f568:	2302      	movs	r3, #2
 800f56a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f56e:	e0d4      	b.n	800f71a <UART_SetConfig+0x312>
 800f570:	2304      	movs	r3, #4
 800f572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f576:	e0d0      	b.n	800f71a <UART_SetConfig+0x312>
 800f578:	2308      	movs	r3, #8
 800f57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f57e:	e0cc      	b.n	800f71a <UART_SetConfig+0x312>
 800f580:	2310      	movs	r3, #16
 800f582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f586:	e0c8      	b.n	800f71a <UART_SetConfig+0x312>
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a5e      	ldr	r2, [pc, #376]	; (800f708 <UART_SetConfig+0x300>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d125      	bne.n	800f5de <UART_SetConfig+0x1d6>
 800f592:	4b5b      	ldr	r3, [pc, #364]	; (800f700 <UART_SetConfig+0x2f8>)
 800f594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f598:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f59c:	2b30      	cmp	r3, #48	; 0x30
 800f59e:	d016      	beq.n	800f5ce <UART_SetConfig+0x1c6>
 800f5a0:	2b30      	cmp	r3, #48	; 0x30
 800f5a2:	d818      	bhi.n	800f5d6 <UART_SetConfig+0x1ce>
 800f5a4:	2b20      	cmp	r3, #32
 800f5a6:	d00a      	beq.n	800f5be <UART_SetConfig+0x1b6>
 800f5a8:	2b20      	cmp	r3, #32
 800f5aa:	d814      	bhi.n	800f5d6 <UART_SetConfig+0x1ce>
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d002      	beq.n	800f5b6 <UART_SetConfig+0x1ae>
 800f5b0:	2b10      	cmp	r3, #16
 800f5b2:	d008      	beq.n	800f5c6 <UART_SetConfig+0x1be>
 800f5b4:	e00f      	b.n	800f5d6 <UART_SetConfig+0x1ce>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5bc:	e0ad      	b.n	800f71a <UART_SetConfig+0x312>
 800f5be:	2302      	movs	r3, #2
 800f5c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5c4:	e0a9      	b.n	800f71a <UART_SetConfig+0x312>
 800f5c6:	2304      	movs	r3, #4
 800f5c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5cc:	e0a5      	b.n	800f71a <UART_SetConfig+0x312>
 800f5ce:	2308      	movs	r3, #8
 800f5d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5d4:	e0a1      	b.n	800f71a <UART_SetConfig+0x312>
 800f5d6:	2310      	movs	r3, #16
 800f5d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5dc:	e09d      	b.n	800f71a <UART_SetConfig+0x312>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4a4a      	ldr	r2, [pc, #296]	; (800f70c <UART_SetConfig+0x304>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d125      	bne.n	800f634 <UART_SetConfig+0x22c>
 800f5e8:	4b45      	ldr	r3, [pc, #276]	; (800f700 <UART_SetConfig+0x2f8>)
 800f5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f5f2:	2bc0      	cmp	r3, #192	; 0xc0
 800f5f4:	d016      	beq.n	800f624 <UART_SetConfig+0x21c>
 800f5f6:	2bc0      	cmp	r3, #192	; 0xc0
 800f5f8:	d818      	bhi.n	800f62c <UART_SetConfig+0x224>
 800f5fa:	2b80      	cmp	r3, #128	; 0x80
 800f5fc:	d00a      	beq.n	800f614 <UART_SetConfig+0x20c>
 800f5fe:	2b80      	cmp	r3, #128	; 0x80
 800f600:	d814      	bhi.n	800f62c <UART_SetConfig+0x224>
 800f602:	2b00      	cmp	r3, #0
 800f604:	d002      	beq.n	800f60c <UART_SetConfig+0x204>
 800f606:	2b40      	cmp	r3, #64	; 0x40
 800f608:	d008      	beq.n	800f61c <UART_SetConfig+0x214>
 800f60a:	e00f      	b.n	800f62c <UART_SetConfig+0x224>
 800f60c:	2300      	movs	r3, #0
 800f60e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f612:	e082      	b.n	800f71a <UART_SetConfig+0x312>
 800f614:	2302      	movs	r3, #2
 800f616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f61a:	e07e      	b.n	800f71a <UART_SetConfig+0x312>
 800f61c:	2304      	movs	r3, #4
 800f61e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f622:	e07a      	b.n	800f71a <UART_SetConfig+0x312>
 800f624:	2308      	movs	r3, #8
 800f626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f62a:	e076      	b.n	800f71a <UART_SetConfig+0x312>
 800f62c:	2310      	movs	r3, #16
 800f62e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f632:	e072      	b.n	800f71a <UART_SetConfig+0x312>
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a35      	ldr	r2, [pc, #212]	; (800f710 <UART_SetConfig+0x308>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d12a      	bne.n	800f694 <UART_SetConfig+0x28c>
 800f63e:	4b30      	ldr	r3, [pc, #192]	; (800f700 <UART_SetConfig+0x2f8>)
 800f640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f64c:	d01a      	beq.n	800f684 <UART_SetConfig+0x27c>
 800f64e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f652:	d81b      	bhi.n	800f68c <UART_SetConfig+0x284>
 800f654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f658:	d00c      	beq.n	800f674 <UART_SetConfig+0x26c>
 800f65a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f65e:	d815      	bhi.n	800f68c <UART_SetConfig+0x284>
 800f660:	2b00      	cmp	r3, #0
 800f662:	d003      	beq.n	800f66c <UART_SetConfig+0x264>
 800f664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f668:	d008      	beq.n	800f67c <UART_SetConfig+0x274>
 800f66a:	e00f      	b.n	800f68c <UART_SetConfig+0x284>
 800f66c:	2300      	movs	r3, #0
 800f66e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f672:	e052      	b.n	800f71a <UART_SetConfig+0x312>
 800f674:	2302      	movs	r3, #2
 800f676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f67a:	e04e      	b.n	800f71a <UART_SetConfig+0x312>
 800f67c:	2304      	movs	r3, #4
 800f67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f682:	e04a      	b.n	800f71a <UART_SetConfig+0x312>
 800f684:	2308      	movs	r3, #8
 800f686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f68a:	e046      	b.n	800f71a <UART_SetConfig+0x312>
 800f68c:	2310      	movs	r3, #16
 800f68e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f692:	e042      	b.n	800f71a <UART_SetConfig+0x312>
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a17      	ldr	r2, [pc, #92]	; (800f6f8 <UART_SetConfig+0x2f0>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d13a      	bne.n	800f714 <UART_SetConfig+0x30c>
 800f69e:	4b18      	ldr	r3, [pc, #96]	; (800f700 <UART_SetConfig+0x2f8>)
 800f6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f6a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f6ac:	d01a      	beq.n	800f6e4 <UART_SetConfig+0x2dc>
 800f6ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f6b2:	d81b      	bhi.n	800f6ec <UART_SetConfig+0x2e4>
 800f6b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6b8:	d00c      	beq.n	800f6d4 <UART_SetConfig+0x2cc>
 800f6ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6be:	d815      	bhi.n	800f6ec <UART_SetConfig+0x2e4>
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d003      	beq.n	800f6cc <UART_SetConfig+0x2c4>
 800f6c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6c8:	d008      	beq.n	800f6dc <UART_SetConfig+0x2d4>
 800f6ca:	e00f      	b.n	800f6ec <UART_SetConfig+0x2e4>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6d2:	e022      	b.n	800f71a <UART_SetConfig+0x312>
 800f6d4:	2302      	movs	r3, #2
 800f6d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6da:	e01e      	b.n	800f71a <UART_SetConfig+0x312>
 800f6dc:	2304      	movs	r3, #4
 800f6de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6e2:	e01a      	b.n	800f71a <UART_SetConfig+0x312>
 800f6e4:	2308      	movs	r3, #8
 800f6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6ea:	e016      	b.n	800f71a <UART_SetConfig+0x312>
 800f6ec:	2310      	movs	r3, #16
 800f6ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6f2:	e012      	b.n	800f71a <UART_SetConfig+0x312>
 800f6f4:	cfff69f3 	.word	0xcfff69f3
 800f6f8:	40008000 	.word	0x40008000
 800f6fc:	40013800 	.word	0x40013800
 800f700:	40021000 	.word	0x40021000
 800f704:	40004400 	.word	0x40004400
 800f708:	40004800 	.word	0x40004800
 800f70c:	40004c00 	.word	0x40004c00
 800f710:	40005000 	.word	0x40005000
 800f714:	2310      	movs	r3, #16
 800f716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	4a88      	ldr	r2, [pc, #544]	; (800f940 <UART_SetConfig+0x538>)
 800f720:	4293      	cmp	r3, r2
 800f722:	f040 841b 	bne.w	800ff5c <UART_SetConfig+0xb54>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f72a:	2b08      	cmp	r3, #8
 800f72c:	f200 815c 	bhi.w	800f9e8 <UART_SetConfig+0x5e0>
 800f730:	a201      	add	r2, pc, #4	; (adr r2, 800f738 <UART_SetConfig+0x330>)
 800f732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f736:	bf00      	nop
 800f738:	0800f75d 	.word	0x0800f75d
 800f73c:	0800f9e9 	.word	0x0800f9e9
 800f740:	0800f7ff 	.word	0x0800f7ff
 800f744:	0800f9e9 	.word	0x0800f9e9
 800f748:	0800f89d 	.word	0x0800f89d
 800f74c:	0800f9e9 	.word	0x0800f9e9
 800f750:	0800f9e9 	.word	0x0800f9e9
 800f754:	0800f9e9 	.word	0x0800f9e9
 800f758:	0800f949 	.word	0x0800f949
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800f75c:	f7fb fbe8 	bl	800af30 <HAL_RCC_GetPCLK1Freq>
 800f760:	4602      	mov	r2, r0
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f766:	2b00      	cmp	r3, #0
 800f768:	d044      	beq.n	800f7f4 <UART_SetConfig+0x3ec>
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d03e      	beq.n	800f7f0 <UART_SetConfig+0x3e8>
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f776:	2b02      	cmp	r3, #2
 800f778:	d038      	beq.n	800f7ec <UART_SetConfig+0x3e4>
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77e:	2b03      	cmp	r3, #3
 800f780:	d032      	beq.n	800f7e8 <UART_SetConfig+0x3e0>
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f786:	2b04      	cmp	r3, #4
 800f788:	d02c      	beq.n	800f7e4 <UART_SetConfig+0x3dc>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f78e:	2b05      	cmp	r3, #5
 800f790:	d026      	beq.n	800f7e0 <UART_SetConfig+0x3d8>
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f796:	2b06      	cmp	r3, #6
 800f798:	d020      	beq.n	800f7dc <UART_SetConfig+0x3d4>
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79e:	2b07      	cmp	r3, #7
 800f7a0:	d01a      	beq.n	800f7d8 <UART_SetConfig+0x3d0>
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a6:	2b08      	cmp	r3, #8
 800f7a8:	d014      	beq.n	800f7d4 <UART_SetConfig+0x3cc>
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ae:	2b09      	cmp	r3, #9
 800f7b0:	d00e      	beq.n	800f7d0 <UART_SetConfig+0x3c8>
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b6:	2b0a      	cmp	r3, #10
 800f7b8:	d008      	beq.n	800f7cc <UART_SetConfig+0x3c4>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7be:	2b0b      	cmp	r3, #11
 800f7c0:	d102      	bne.n	800f7c8 <UART_SetConfig+0x3c0>
 800f7c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f7c6:	e016      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	e014      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7cc:	2380      	movs	r3, #128	; 0x80
 800f7ce:	e012      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7d0:	2340      	movs	r3, #64	; 0x40
 800f7d2:	e010      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7d4:	2320      	movs	r3, #32
 800f7d6:	e00e      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7d8:	2310      	movs	r3, #16
 800f7da:	e00c      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7dc:	230c      	movs	r3, #12
 800f7de:	e00a      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7e0:	230a      	movs	r3, #10
 800f7e2:	e008      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7e4:	2308      	movs	r3, #8
 800f7e6:	e006      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7e8:	2306      	movs	r3, #6
 800f7ea:	e004      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7ec:	2304      	movs	r3, #4
 800f7ee:	e002      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	e000      	b.n	800f7f6 <UART_SetConfig+0x3ee>
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7fa:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800f7fc:	e0f8      	b.n	800f9f0 <UART_SetConfig+0x5e8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f802:	2b00      	cmp	r3, #0
 800f804:	d044      	beq.n	800f890 <UART_SetConfig+0x488>
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	d03e      	beq.n	800f88c <UART_SetConfig+0x484>
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f812:	2b02      	cmp	r3, #2
 800f814:	d038      	beq.n	800f888 <UART_SetConfig+0x480>
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81a:	2b03      	cmp	r3, #3
 800f81c:	d032      	beq.n	800f884 <UART_SetConfig+0x47c>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f822:	2b04      	cmp	r3, #4
 800f824:	d02c      	beq.n	800f880 <UART_SetConfig+0x478>
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f82a:	2b05      	cmp	r3, #5
 800f82c:	d026      	beq.n	800f87c <UART_SetConfig+0x474>
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f832:	2b06      	cmp	r3, #6
 800f834:	d020      	beq.n	800f878 <UART_SetConfig+0x470>
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83a:	2b07      	cmp	r3, #7
 800f83c:	d01a      	beq.n	800f874 <UART_SetConfig+0x46c>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f842:	2b08      	cmp	r3, #8
 800f844:	d014      	beq.n	800f870 <UART_SetConfig+0x468>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84a:	2b09      	cmp	r3, #9
 800f84c:	d00e      	beq.n	800f86c <UART_SetConfig+0x464>
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f852:	2b0a      	cmp	r3, #10
 800f854:	d008      	beq.n	800f868 <UART_SetConfig+0x460>
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85a:	2b0b      	cmp	r3, #11
 800f85c:	d102      	bne.n	800f864 <UART_SetConfig+0x45c>
 800f85e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f862:	e016      	b.n	800f892 <UART_SetConfig+0x48a>
 800f864:	2301      	movs	r3, #1
 800f866:	e014      	b.n	800f892 <UART_SetConfig+0x48a>
 800f868:	2380      	movs	r3, #128	; 0x80
 800f86a:	e012      	b.n	800f892 <UART_SetConfig+0x48a>
 800f86c:	2340      	movs	r3, #64	; 0x40
 800f86e:	e010      	b.n	800f892 <UART_SetConfig+0x48a>
 800f870:	2320      	movs	r3, #32
 800f872:	e00e      	b.n	800f892 <UART_SetConfig+0x48a>
 800f874:	2310      	movs	r3, #16
 800f876:	e00c      	b.n	800f892 <UART_SetConfig+0x48a>
 800f878:	230c      	movs	r3, #12
 800f87a:	e00a      	b.n	800f892 <UART_SetConfig+0x48a>
 800f87c:	230a      	movs	r3, #10
 800f87e:	e008      	b.n	800f892 <UART_SetConfig+0x48a>
 800f880:	2308      	movs	r3, #8
 800f882:	e006      	b.n	800f892 <UART_SetConfig+0x48a>
 800f884:	2306      	movs	r3, #6
 800f886:	e004      	b.n	800f892 <UART_SetConfig+0x48a>
 800f888:	2304      	movs	r3, #4
 800f88a:	e002      	b.n	800f892 <UART_SetConfig+0x48a>
 800f88c:	2302      	movs	r3, #2
 800f88e:	e000      	b.n	800f892 <UART_SetConfig+0x48a>
 800f890:	2301      	movs	r3, #1
 800f892:	4a2c      	ldr	r2, [pc, #176]	; (800f944 <UART_SetConfig+0x53c>)
 800f894:	fbb2 f3f3 	udiv	r3, r2, r3
 800f898:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 800f89a:	e0a9      	b.n	800f9f0 <UART_SetConfig+0x5e8>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800f89c:	f7fb fab2 	bl	800ae04 <HAL_RCC_GetSysClockFreq>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d044      	beq.n	800f934 <UART_SetConfig+0x52c>
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d03e      	beq.n	800f930 <UART_SetConfig+0x528>
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b6:	2b02      	cmp	r3, #2
 800f8b8:	d038      	beq.n	800f92c <UART_SetConfig+0x524>
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8be:	2b03      	cmp	r3, #3
 800f8c0:	d032      	beq.n	800f928 <UART_SetConfig+0x520>
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c6:	2b04      	cmp	r3, #4
 800f8c8:	d02c      	beq.n	800f924 <UART_SetConfig+0x51c>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ce:	2b05      	cmp	r3, #5
 800f8d0:	d026      	beq.n	800f920 <UART_SetConfig+0x518>
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d6:	2b06      	cmp	r3, #6
 800f8d8:	d020      	beq.n	800f91c <UART_SetConfig+0x514>
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8de:	2b07      	cmp	r3, #7
 800f8e0:	d01a      	beq.n	800f918 <UART_SetConfig+0x510>
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e6:	2b08      	cmp	r3, #8
 800f8e8:	d014      	beq.n	800f914 <UART_SetConfig+0x50c>
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ee:	2b09      	cmp	r3, #9
 800f8f0:	d00e      	beq.n	800f910 <UART_SetConfig+0x508>
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f6:	2b0a      	cmp	r3, #10
 800f8f8:	d008      	beq.n	800f90c <UART_SetConfig+0x504>
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8fe:	2b0b      	cmp	r3, #11
 800f900:	d102      	bne.n	800f908 <UART_SetConfig+0x500>
 800f902:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f906:	e016      	b.n	800f936 <UART_SetConfig+0x52e>
 800f908:	2301      	movs	r3, #1
 800f90a:	e014      	b.n	800f936 <UART_SetConfig+0x52e>
 800f90c:	2380      	movs	r3, #128	; 0x80
 800f90e:	e012      	b.n	800f936 <UART_SetConfig+0x52e>
 800f910:	2340      	movs	r3, #64	; 0x40
 800f912:	e010      	b.n	800f936 <UART_SetConfig+0x52e>
 800f914:	2320      	movs	r3, #32
 800f916:	e00e      	b.n	800f936 <UART_SetConfig+0x52e>
 800f918:	2310      	movs	r3, #16
 800f91a:	e00c      	b.n	800f936 <UART_SetConfig+0x52e>
 800f91c:	230c      	movs	r3, #12
 800f91e:	e00a      	b.n	800f936 <UART_SetConfig+0x52e>
 800f920:	230a      	movs	r3, #10
 800f922:	e008      	b.n	800f936 <UART_SetConfig+0x52e>
 800f924:	2308      	movs	r3, #8
 800f926:	e006      	b.n	800f936 <UART_SetConfig+0x52e>
 800f928:	2306      	movs	r3, #6
 800f92a:	e004      	b.n	800f936 <UART_SetConfig+0x52e>
 800f92c:	2304      	movs	r3, #4
 800f92e:	e002      	b.n	800f936 <UART_SetConfig+0x52e>
 800f930:	2302      	movs	r3, #2
 800f932:	e000      	b.n	800f936 <UART_SetConfig+0x52e>
 800f934:	2301      	movs	r3, #1
 800f936:	fbb2 f3f3 	udiv	r3, r2, r3
 800f93a:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800f93c:	e058      	b.n	800f9f0 <UART_SetConfig+0x5e8>
 800f93e:	bf00      	nop
 800f940:	40008000 	.word	0x40008000
 800f944:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d044      	beq.n	800f9da <UART_SetConfig+0x5d2>
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f954:	2b01      	cmp	r3, #1
 800f956:	d03e      	beq.n	800f9d6 <UART_SetConfig+0x5ce>
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	d038      	beq.n	800f9d2 <UART_SetConfig+0x5ca>
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f964:	2b03      	cmp	r3, #3
 800f966:	d032      	beq.n	800f9ce <UART_SetConfig+0x5c6>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96c:	2b04      	cmp	r3, #4
 800f96e:	d02c      	beq.n	800f9ca <UART_SetConfig+0x5c2>
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f974:	2b05      	cmp	r3, #5
 800f976:	d026      	beq.n	800f9c6 <UART_SetConfig+0x5be>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f97c:	2b06      	cmp	r3, #6
 800f97e:	d020      	beq.n	800f9c2 <UART_SetConfig+0x5ba>
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f984:	2b07      	cmp	r3, #7
 800f986:	d01a      	beq.n	800f9be <UART_SetConfig+0x5b6>
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98c:	2b08      	cmp	r3, #8
 800f98e:	d014      	beq.n	800f9ba <UART_SetConfig+0x5b2>
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f994:	2b09      	cmp	r3, #9
 800f996:	d00e      	beq.n	800f9b6 <UART_SetConfig+0x5ae>
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99c:	2b0a      	cmp	r3, #10
 800f99e:	d008      	beq.n	800f9b2 <UART_SetConfig+0x5aa>
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a4:	2b0b      	cmp	r3, #11
 800f9a6:	d102      	bne.n	800f9ae <UART_SetConfig+0x5a6>
 800f9a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f9ac:	e016      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e014      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9b2:	2380      	movs	r3, #128	; 0x80
 800f9b4:	e012      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9b6:	2340      	movs	r3, #64	; 0x40
 800f9b8:	e010      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9ba:	2320      	movs	r3, #32
 800f9bc:	e00e      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9be:	2310      	movs	r3, #16
 800f9c0:	e00c      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9c2:	230c      	movs	r3, #12
 800f9c4:	e00a      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9c6:	230a      	movs	r3, #10
 800f9c8:	e008      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9ca:	2308      	movs	r3, #8
 800f9cc:	e006      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9ce:	2306      	movs	r3, #6
 800f9d0:	e004      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9d2:	2304      	movs	r3, #4
 800f9d4:	e002      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9d6:	2302      	movs	r3, #2
 800f9d8:	e000      	b.n	800f9dc <UART_SetConfig+0x5d4>
 800f9da:	2301      	movs	r3, #1
 800f9dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f9e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9e4:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 800f9e6:	e003      	b.n	800f9f0 <UART_SetConfig+0x5e8>
      default:
        ret = HAL_ERROR;
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800f9ee:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800f9f0:	69fb      	ldr	r3, [r7, #28]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	f000 86ad 	beq.w	8010752 <UART_SetConfig+0x134a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	685a      	ldr	r2, [r3, #4]
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	005b      	lsls	r3, r3, #1
 800fa00:	4413      	add	r3, r2
 800fa02:	69fa      	ldr	r2, [r7, #28]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d305      	bcc.n	800fa14 <UART_SetConfig+0x60c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa0e:	69fa      	ldr	r2, [r7, #28]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d904      	bls.n	800fa1e <UART_SetConfig+0x616>
      {
        ret = HAL_ERROR;
 800fa14:	2301      	movs	r3, #1
 800fa16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fa1a:	f000 be9a 	b.w	8010752 <UART_SetConfig+0x134a>
      }
      else
      {
        switch (clocksource)
 800fa1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fa22:	2b08      	cmp	r3, #8
 800fa24:	f200 8282 	bhi.w	800ff2c <UART_SetConfig+0xb24>
 800fa28:	a201      	add	r2, pc, #4	; (adr r2, 800fa30 <UART_SetConfig+0x628>)
 800fa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2e:	bf00      	nop
 800fa30:	0800fa55 	.word	0x0800fa55
 800fa34:	0800ff2d 	.word	0x0800ff2d
 800fa38:	0800fb8f 	.word	0x0800fb8f
 800fa3c:	0800ff2d 	.word	0x0800ff2d
 800fa40:	0800fcc1 	.word	0x0800fcc1
 800fa44:	0800ff2d 	.word	0x0800ff2d
 800fa48:	0800ff2d 	.word	0x0800ff2d
 800fa4c:	0800ff2d 	.word	0x0800ff2d
 800fa50:	0800fdfb 	.word	0x0800fdfb
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800fa54:	f7fb fa6c 	bl	800af30 <HAL_RCC_GetPCLK1Freq>
 800fa58:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f04f 0100 	mov.w	r1, #0
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d067      	beq.n	800fb3a <UART_SetConfig+0x732>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d05e      	beq.n	800fb30 <UART_SetConfig+0x728>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	d055      	beq.n	800fb26 <UART_SetConfig+0x71e>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7e:	2b03      	cmp	r3, #3
 800fa80:	d04c      	beq.n	800fb1c <UART_SetConfig+0x714>
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa86:	2b04      	cmp	r3, #4
 800fa88:	d043      	beq.n	800fb12 <UART_SetConfig+0x70a>
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8e:	2b05      	cmp	r3, #5
 800fa90:	d03a      	beq.n	800fb08 <UART_SetConfig+0x700>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa96:	2b06      	cmp	r3, #6
 800fa98:	d031      	beq.n	800fafe <UART_SetConfig+0x6f6>
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa9e:	2b07      	cmp	r3, #7
 800faa0:	d028      	beq.n	800faf4 <UART_SetConfig+0x6ec>
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa6:	2b08      	cmp	r3, #8
 800faa8:	d01f      	beq.n	800faea <UART_SetConfig+0x6e2>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faae:	2b09      	cmp	r3, #9
 800fab0:	d016      	beq.n	800fae0 <UART_SetConfig+0x6d8>
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab6:	2b0a      	cmp	r3, #10
 800fab8:	d00d      	beq.n	800fad6 <UART_SetConfig+0x6ce>
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabe:	2b0b      	cmp	r3, #11
 800fac0:	d104      	bne.n	800facc <UART_SetConfig+0x6c4>
 800fac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fac6:	f04f 0300 	mov.w	r3, #0
 800faca:	e03a      	b.n	800fb42 <UART_SetConfig+0x73a>
 800facc:	f04f 0201 	mov.w	r2, #1
 800fad0:	f04f 0300 	mov.w	r3, #0
 800fad4:	e035      	b.n	800fb42 <UART_SetConfig+0x73a>
 800fad6:	f04f 0280 	mov.w	r2, #128	; 0x80
 800fada:	f04f 0300 	mov.w	r3, #0
 800fade:	e030      	b.n	800fb42 <UART_SetConfig+0x73a>
 800fae0:	f04f 0240 	mov.w	r2, #64	; 0x40
 800fae4:	f04f 0300 	mov.w	r3, #0
 800fae8:	e02b      	b.n	800fb42 <UART_SetConfig+0x73a>
 800faea:	f04f 0220 	mov.w	r2, #32
 800faee:	f04f 0300 	mov.w	r3, #0
 800faf2:	e026      	b.n	800fb42 <UART_SetConfig+0x73a>
 800faf4:	f04f 0210 	mov.w	r2, #16
 800faf8:	f04f 0300 	mov.w	r3, #0
 800fafc:	e021      	b.n	800fb42 <UART_SetConfig+0x73a>
 800fafe:	f04f 020c 	mov.w	r2, #12
 800fb02:	f04f 0300 	mov.w	r3, #0
 800fb06:	e01c      	b.n	800fb42 <UART_SetConfig+0x73a>
 800fb08:	f04f 020a 	mov.w	r2, #10
 800fb0c:	f04f 0300 	mov.w	r3, #0
 800fb10:	e017      	b.n	800fb42 <UART_SetConfig+0x73a>
 800fb12:	f04f 0208 	mov.w	r2, #8
 800fb16:	f04f 0300 	mov.w	r3, #0
 800fb1a:	e012      	b.n	800fb42 <UART_SetConfig+0x73a>
 800fb1c:	f04f 0206 	mov.w	r2, #6
 800fb20:	f04f 0300 	mov.w	r3, #0
 800fb24:	e00d      	b.n	800fb42 <UART_SetConfig+0x73a>
 800fb26:	f04f 0204 	mov.w	r2, #4
 800fb2a:	f04f 0300 	mov.w	r3, #0
 800fb2e:	e008      	b.n	800fb42 <UART_SetConfig+0x73a>
 800fb30:	f04f 0202 	mov.w	r2, #2
 800fb34:	f04f 0300 	mov.w	r3, #0
 800fb38:	e003      	b.n	800fb42 <UART_SetConfig+0x73a>
 800fb3a:	f04f 0201 	mov.w	r2, #1
 800fb3e:	f04f 0300 	mov.w	r3, #0
 800fb42:	f7f1 f8c9 	bl	8000cd8 <__aeabi_uldivmod>
 800fb46:	4602      	mov	r2, r0
 800fb48:	460b      	mov	r3, r1
 800fb4a:	4610      	mov	r0, r2
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	f04f 0200 	mov.w	r2, #0
 800fb52:	f04f 0300 	mov.w	r3, #0
 800fb56:	020b      	lsls	r3, r1, #8
 800fb58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fb5c:	0202      	lsls	r2, r0, #8
 800fb5e:	68f9      	ldr	r1, [r7, #12]
 800fb60:	6849      	ldr	r1, [r1, #4]
 800fb62:	0849      	lsrs	r1, r1, #1
 800fb64:	4608      	mov	r0, r1
 800fb66:	f04f 0100 	mov.w	r1, #0
 800fb6a:	1814      	adds	r4, r2, r0
 800fb6c:	603c      	str	r4, [r7, #0]
 800fb6e:	414b      	adcs	r3, r1
 800fb70:	607b      	str	r3, [r7, #4]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	461a      	mov	r2, r3
 800fb78:	f04f 0300 	mov.w	r3, #0
 800fb7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fb80:	f7f1 f8aa 	bl	8000cd8 <__aeabi_uldivmod>
 800fb84:	4602      	mov	r2, r0
 800fb86:	460b      	mov	r3, r1
 800fb88:	4613      	mov	r3, r2
 800fb8a:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800fb8c:	e1d2      	b.n	800ff34 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d067      	beq.n	800fc66 <UART_SetConfig+0x85e>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d05e      	beq.n	800fc5c <UART_SetConfig+0x854>
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba2:	2b02      	cmp	r3, #2
 800fba4:	d055      	beq.n	800fc52 <UART_SetConfig+0x84a>
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbaa:	2b03      	cmp	r3, #3
 800fbac:	d04c      	beq.n	800fc48 <UART_SetConfig+0x840>
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb2:	2b04      	cmp	r3, #4
 800fbb4:	d043      	beq.n	800fc3e <UART_SetConfig+0x836>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbba:	2b05      	cmp	r3, #5
 800fbbc:	d03a      	beq.n	800fc34 <UART_SetConfig+0x82c>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc2:	2b06      	cmp	r3, #6
 800fbc4:	d031      	beq.n	800fc2a <UART_SetConfig+0x822>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbca:	2b07      	cmp	r3, #7
 800fbcc:	d028      	beq.n	800fc20 <UART_SetConfig+0x818>
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd2:	2b08      	cmp	r3, #8
 800fbd4:	d01f      	beq.n	800fc16 <UART_SetConfig+0x80e>
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbda:	2b09      	cmp	r3, #9
 800fbdc:	d016      	beq.n	800fc0c <UART_SetConfig+0x804>
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe2:	2b0a      	cmp	r3, #10
 800fbe4:	d00d      	beq.n	800fc02 <UART_SetConfig+0x7fa>
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbea:	2b0b      	cmp	r3, #11
 800fbec:	d104      	bne.n	800fbf8 <UART_SetConfig+0x7f0>
 800fbee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbf2:	f04f 0300 	mov.w	r3, #0
 800fbf6:	e03a      	b.n	800fc6e <UART_SetConfig+0x866>
 800fbf8:	f04f 0201 	mov.w	r2, #1
 800fbfc:	f04f 0300 	mov.w	r3, #0
 800fc00:	e035      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc02:	f04f 0280 	mov.w	r2, #128	; 0x80
 800fc06:	f04f 0300 	mov.w	r3, #0
 800fc0a:	e030      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc0c:	f04f 0240 	mov.w	r2, #64	; 0x40
 800fc10:	f04f 0300 	mov.w	r3, #0
 800fc14:	e02b      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc16:	f04f 0220 	mov.w	r2, #32
 800fc1a:	f04f 0300 	mov.w	r3, #0
 800fc1e:	e026      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc20:	f04f 0210 	mov.w	r2, #16
 800fc24:	f04f 0300 	mov.w	r3, #0
 800fc28:	e021      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc2a:	f04f 020c 	mov.w	r2, #12
 800fc2e:	f04f 0300 	mov.w	r3, #0
 800fc32:	e01c      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc34:	f04f 020a 	mov.w	r2, #10
 800fc38:	f04f 0300 	mov.w	r3, #0
 800fc3c:	e017      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc3e:	f04f 0208 	mov.w	r2, #8
 800fc42:	f04f 0300 	mov.w	r3, #0
 800fc46:	e012      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc48:	f04f 0206 	mov.w	r2, #6
 800fc4c:	f04f 0300 	mov.w	r3, #0
 800fc50:	e00d      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc52:	f04f 0204 	mov.w	r2, #4
 800fc56:	f04f 0300 	mov.w	r3, #0
 800fc5a:	e008      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc5c:	f04f 0202 	mov.w	r2, #2
 800fc60:	f04f 0300 	mov.w	r3, #0
 800fc64:	e003      	b.n	800fc6e <UART_SetConfig+0x866>
 800fc66:	f04f 0201 	mov.w	r2, #1
 800fc6a:	f04f 0300 	mov.w	r3, #0
 800fc6e:	48ba      	ldr	r0, [pc, #744]	; (800ff58 <UART_SetConfig+0xb50>)
 800fc70:	f04f 0100 	mov.w	r1, #0
 800fc74:	f7f1 f830 	bl	8000cd8 <__aeabi_uldivmod>
 800fc78:	4602      	mov	r2, r0
 800fc7a:	460b      	mov	r3, r1
 800fc7c:	4610      	mov	r0, r2
 800fc7e:	4619      	mov	r1, r3
 800fc80:	f04f 0200 	mov.w	r2, #0
 800fc84:	f04f 0300 	mov.w	r3, #0
 800fc88:	020b      	lsls	r3, r1, #8
 800fc8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc8e:	0202      	lsls	r2, r0, #8
 800fc90:	68f9      	ldr	r1, [r7, #12]
 800fc92:	6849      	ldr	r1, [r1, #4]
 800fc94:	0849      	lsrs	r1, r1, #1
 800fc96:	4608      	mov	r0, r1
 800fc98:	f04f 0100 	mov.w	r1, #0
 800fc9c:	eb12 0a00 	adds.w	sl, r2, r0
 800fca0:	eb43 0b01 	adc.w	fp, r3, r1
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	461a      	mov	r2, r3
 800fcaa:	f04f 0300 	mov.w	r3, #0
 800fcae:	4650      	mov	r0, sl
 800fcb0:	4659      	mov	r1, fp
 800fcb2:	f7f1 f811 	bl	8000cd8 <__aeabi_uldivmod>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	460b      	mov	r3, r1
 800fcba:	4613      	mov	r3, r2
 800fcbc:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800fcbe:	e139      	b.n	800ff34 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800fcc0:	f7fb f8a0 	bl	800ae04 <HAL_RCC_GetSysClockFreq>
 800fcc4:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fcc6:	69bb      	ldr	r3, [r7, #24]
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f04f 0100 	mov.w	r1, #0
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d067      	beq.n	800fda6 <UART_SetConfig+0x99e>
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d05e      	beq.n	800fd9c <UART_SetConfig+0x994>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce2:	2b02      	cmp	r3, #2
 800fce4:	d055      	beq.n	800fd92 <UART_SetConfig+0x98a>
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcea:	2b03      	cmp	r3, #3
 800fcec:	d04c      	beq.n	800fd88 <UART_SetConfig+0x980>
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf2:	2b04      	cmp	r3, #4
 800fcf4:	d043      	beq.n	800fd7e <UART_SetConfig+0x976>
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcfa:	2b05      	cmp	r3, #5
 800fcfc:	d03a      	beq.n	800fd74 <UART_SetConfig+0x96c>
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd02:	2b06      	cmp	r3, #6
 800fd04:	d031      	beq.n	800fd6a <UART_SetConfig+0x962>
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0a:	2b07      	cmp	r3, #7
 800fd0c:	d028      	beq.n	800fd60 <UART_SetConfig+0x958>
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd12:	2b08      	cmp	r3, #8
 800fd14:	d01f      	beq.n	800fd56 <UART_SetConfig+0x94e>
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd1a:	2b09      	cmp	r3, #9
 800fd1c:	d016      	beq.n	800fd4c <UART_SetConfig+0x944>
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd22:	2b0a      	cmp	r3, #10
 800fd24:	d00d      	beq.n	800fd42 <UART_SetConfig+0x93a>
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2a:	2b0b      	cmp	r3, #11
 800fd2c:	d104      	bne.n	800fd38 <UART_SetConfig+0x930>
 800fd2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd32:	f04f 0300 	mov.w	r3, #0
 800fd36:	e03a      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd38:	f04f 0201 	mov.w	r2, #1
 800fd3c:	f04f 0300 	mov.w	r3, #0
 800fd40:	e035      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd42:	f04f 0280 	mov.w	r2, #128	; 0x80
 800fd46:	f04f 0300 	mov.w	r3, #0
 800fd4a:	e030      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd4c:	f04f 0240 	mov.w	r2, #64	; 0x40
 800fd50:	f04f 0300 	mov.w	r3, #0
 800fd54:	e02b      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd56:	f04f 0220 	mov.w	r2, #32
 800fd5a:	f04f 0300 	mov.w	r3, #0
 800fd5e:	e026      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd60:	f04f 0210 	mov.w	r2, #16
 800fd64:	f04f 0300 	mov.w	r3, #0
 800fd68:	e021      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd6a:	f04f 020c 	mov.w	r2, #12
 800fd6e:	f04f 0300 	mov.w	r3, #0
 800fd72:	e01c      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd74:	f04f 020a 	mov.w	r2, #10
 800fd78:	f04f 0300 	mov.w	r3, #0
 800fd7c:	e017      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd7e:	f04f 0208 	mov.w	r2, #8
 800fd82:	f04f 0300 	mov.w	r3, #0
 800fd86:	e012      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd88:	f04f 0206 	mov.w	r2, #6
 800fd8c:	f04f 0300 	mov.w	r3, #0
 800fd90:	e00d      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd92:	f04f 0204 	mov.w	r2, #4
 800fd96:	f04f 0300 	mov.w	r3, #0
 800fd9a:	e008      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fd9c:	f04f 0202 	mov.w	r2, #2
 800fda0:	f04f 0300 	mov.w	r3, #0
 800fda4:	e003      	b.n	800fdae <UART_SetConfig+0x9a6>
 800fda6:	f04f 0201 	mov.w	r2, #1
 800fdaa:	f04f 0300 	mov.w	r3, #0
 800fdae:	f7f0 ff93 	bl	8000cd8 <__aeabi_uldivmod>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	4610      	mov	r0, r2
 800fdb8:	4619      	mov	r1, r3
 800fdba:	f04f 0200 	mov.w	r2, #0
 800fdbe:	f04f 0300 	mov.w	r3, #0
 800fdc2:	020b      	lsls	r3, r1, #8
 800fdc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fdc8:	0202      	lsls	r2, r0, #8
 800fdca:	68f9      	ldr	r1, [r7, #12]
 800fdcc:	6849      	ldr	r1, [r1, #4]
 800fdce:	0849      	lsrs	r1, r1, #1
 800fdd0:	4608      	mov	r0, r1
 800fdd2:	f04f 0100 	mov.w	r1, #0
 800fdd6:	eb12 0800 	adds.w	r8, r2, r0
 800fdda:	eb43 0901 	adc.w	r9, r3, r1
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	461a      	mov	r2, r3
 800fde4:	f04f 0300 	mov.w	r3, #0
 800fde8:	4640      	mov	r0, r8
 800fdea:	4649      	mov	r1, r9
 800fdec:	f7f0 ff74 	bl	8000cd8 <__aeabi_uldivmod>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800fdf8:	e09c      	b.n	800ff34 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d067      	beq.n	800fed2 <UART_SetConfig+0xaca>
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d05e      	beq.n	800fec8 <UART_SetConfig+0xac0>
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	d055      	beq.n	800febe <UART_SetConfig+0xab6>
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe16:	2b03      	cmp	r3, #3
 800fe18:	d04c      	beq.n	800feb4 <UART_SetConfig+0xaac>
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe1e:	2b04      	cmp	r3, #4
 800fe20:	d043      	beq.n	800feaa <UART_SetConfig+0xaa2>
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe26:	2b05      	cmp	r3, #5
 800fe28:	d03a      	beq.n	800fea0 <UART_SetConfig+0xa98>
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe2e:	2b06      	cmp	r3, #6
 800fe30:	d031      	beq.n	800fe96 <UART_SetConfig+0xa8e>
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe36:	2b07      	cmp	r3, #7
 800fe38:	d028      	beq.n	800fe8c <UART_SetConfig+0xa84>
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe3e:	2b08      	cmp	r3, #8
 800fe40:	d01f      	beq.n	800fe82 <UART_SetConfig+0xa7a>
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe46:	2b09      	cmp	r3, #9
 800fe48:	d016      	beq.n	800fe78 <UART_SetConfig+0xa70>
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe4e:	2b0a      	cmp	r3, #10
 800fe50:	d00d      	beq.n	800fe6e <UART_SetConfig+0xa66>
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe56:	2b0b      	cmp	r3, #11
 800fe58:	d104      	bne.n	800fe64 <UART_SetConfig+0xa5c>
 800fe5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe5e:	f04f 0300 	mov.w	r3, #0
 800fe62:	e03a      	b.n	800feda <UART_SetConfig+0xad2>
 800fe64:	f04f 0201 	mov.w	r2, #1
 800fe68:	f04f 0300 	mov.w	r3, #0
 800fe6c:	e035      	b.n	800feda <UART_SetConfig+0xad2>
 800fe6e:	f04f 0280 	mov.w	r2, #128	; 0x80
 800fe72:	f04f 0300 	mov.w	r3, #0
 800fe76:	e030      	b.n	800feda <UART_SetConfig+0xad2>
 800fe78:	f04f 0240 	mov.w	r2, #64	; 0x40
 800fe7c:	f04f 0300 	mov.w	r3, #0
 800fe80:	e02b      	b.n	800feda <UART_SetConfig+0xad2>
 800fe82:	f04f 0220 	mov.w	r2, #32
 800fe86:	f04f 0300 	mov.w	r3, #0
 800fe8a:	e026      	b.n	800feda <UART_SetConfig+0xad2>
 800fe8c:	f04f 0210 	mov.w	r2, #16
 800fe90:	f04f 0300 	mov.w	r3, #0
 800fe94:	e021      	b.n	800feda <UART_SetConfig+0xad2>
 800fe96:	f04f 020c 	mov.w	r2, #12
 800fe9a:	f04f 0300 	mov.w	r3, #0
 800fe9e:	e01c      	b.n	800feda <UART_SetConfig+0xad2>
 800fea0:	f04f 020a 	mov.w	r2, #10
 800fea4:	f04f 0300 	mov.w	r3, #0
 800fea8:	e017      	b.n	800feda <UART_SetConfig+0xad2>
 800feaa:	f04f 0208 	mov.w	r2, #8
 800feae:	f04f 0300 	mov.w	r3, #0
 800feb2:	e012      	b.n	800feda <UART_SetConfig+0xad2>
 800feb4:	f04f 0206 	mov.w	r2, #6
 800feb8:	f04f 0300 	mov.w	r3, #0
 800febc:	e00d      	b.n	800feda <UART_SetConfig+0xad2>
 800febe:	f04f 0204 	mov.w	r2, #4
 800fec2:	f04f 0300 	mov.w	r3, #0
 800fec6:	e008      	b.n	800feda <UART_SetConfig+0xad2>
 800fec8:	f04f 0202 	mov.w	r2, #2
 800fecc:	f04f 0300 	mov.w	r3, #0
 800fed0:	e003      	b.n	800feda <UART_SetConfig+0xad2>
 800fed2:	f04f 0201 	mov.w	r2, #1
 800fed6:	f04f 0300 	mov.w	r3, #0
 800feda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fede:	f04f 0100 	mov.w	r1, #0
 800fee2:	f7f0 fef9 	bl	8000cd8 <__aeabi_uldivmod>
 800fee6:	4602      	mov	r2, r0
 800fee8:	460b      	mov	r3, r1
 800feea:	4610      	mov	r0, r2
 800feec:	4619      	mov	r1, r3
 800feee:	f04f 0200 	mov.w	r2, #0
 800fef2:	f04f 0300 	mov.w	r3, #0
 800fef6:	020b      	lsls	r3, r1, #8
 800fef8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fefc:	0202      	lsls	r2, r0, #8
 800fefe:	68f9      	ldr	r1, [r7, #12]
 800ff00:	6849      	ldr	r1, [r1, #4]
 800ff02:	0849      	lsrs	r1, r1, #1
 800ff04:	4608      	mov	r0, r1
 800ff06:	f04f 0100 	mov.w	r1, #0
 800ff0a:	1814      	adds	r4, r2, r0
 800ff0c:	eb43 0501 	adc.w	r5, r3, r1
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	461a      	mov	r2, r3
 800ff16:	f04f 0300 	mov.w	r3, #0
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	f7f0 fedb 	bl	8000cd8 <__aeabi_uldivmod>
 800ff22:	4602      	mov	r2, r0
 800ff24:	460b      	mov	r3, r1
 800ff26:	4613      	mov	r3, r2
 800ff28:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800ff2a:	e003      	b.n	800ff34 <UART_SetConfig+0xb2c>
          default:
            ret = HAL_ERROR;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 800ff32:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ff34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ff3a:	d309      	bcc.n	800ff50 <UART_SetConfig+0xb48>
 800ff3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff42:	d205      	bcs.n	800ff50 <UART_SetConfig+0xb48>
        {
          huart->Instance->BRR = usartdiv;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff4a:	60da      	str	r2, [r3, #12]
 800ff4c:	f000 bc01 	b.w	8010752 <UART_SetConfig+0x134a>
        }
        else
        {
          ret = HAL_ERROR;
 800ff50:	2301      	movs	r3, #1
 800ff52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ff56:	e3fc      	b.n	8010752 <UART_SetConfig+0x134a>
 800ff58:	00f42400 	.word	0x00f42400
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	69db      	ldr	r3, [r3, #28]
 800ff60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff64:	f040 8203 	bne.w	801036e <UART_SetConfig+0xf66>
  {
    switch (clocksource)
 800ff68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff6c:	2b08      	cmp	r3, #8
 800ff6e:	f200 81dc 	bhi.w	801032a <UART_SetConfig+0xf22>
 800ff72:	a201      	add	r2, pc, #4	; (adr r2, 800ff78 <UART_SetConfig+0xb70>)
 800ff74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff78:	0800ff9d 	.word	0x0800ff9d
 800ff7c:	08010055 	.word	0x08010055
 800ff80:	0801010d 	.word	0x0801010d
 800ff84:	0801032b 	.word	0x0801032b
 800ff88:	080101bf 	.word	0x080101bf
 800ff8c:	0801032b 	.word	0x0801032b
 800ff90:	0801032b 	.word	0x0801032b
 800ff94:	0801032b 	.word	0x0801032b
 800ff98:	08010277 	.word	0x08010277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff9c:	f7fa ffc8 	bl	800af30 <HAL_RCC_GetPCLK1Freq>
 800ffa0:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d044      	beq.n	8010034 <UART_SetConfig+0xc2c>
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d03e      	beq.n	8010030 <UART_SetConfig+0xc28>
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb6:	2b02      	cmp	r3, #2
 800ffb8:	d038      	beq.n	801002c <UART_SetConfig+0xc24>
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffbe:	2b03      	cmp	r3, #3
 800ffc0:	d032      	beq.n	8010028 <UART_SetConfig+0xc20>
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc6:	2b04      	cmp	r3, #4
 800ffc8:	d02c      	beq.n	8010024 <UART_SetConfig+0xc1c>
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffce:	2b05      	cmp	r3, #5
 800ffd0:	d026      	beq.n	8010020 <UART_SetConfig+0xc18>
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd6:	2b06      	cmp	r3, #6
 800ffd8:	d020      	beq.n	801001c <UART_SetConfig+0xc14>
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffde:	2b07      	cmp	r3, #7
 800ffe0:	d01a      	beq.n	8010018 <UART_SetConfig+0xc10>
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe6:	2b08      	cmp	r3, #8
 800ffe8:	d014      	beq.n	8010014 <UART_SetConfig+0xc0c>
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffee:	2b09      	cmp	r3, #9
 800fff0:	d00e      	beq.n	8010010 <UART_SetConfig+0xc08>
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff6:	2b0a      	cmp	r3, #10
 800fff8:	d008      	beq.n	801000c <UART_SetConfig+0xc04>
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fffe:	2b0b      	cmp	r3, #11
 8010000:	d102      	bne.n	8010008 <UART_SetConfig+0xc00>
 8010002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010006:	e016      	b.n	8010036 <UART_SetConfig+0xc2e>
 8010008:	2301      	movs	r3, #1
 801000a:	e014      	b.n	8010036 <UART_SetConfig+0xc2e>
 801000c:	2380      	movs	r3, #128	; 0x80
 801000e:	e012      	b.n	8010036 <UART_SetConfig+0xc2e>
 8010010:	2340      	movs	r3, #64	; 0x40
 8010012:	e010      	b.n	8010036 <UART_SetConfig+0xc2e>
 8010014:	2320      	movs	r3, #32
 8010016:	e00e      	b.n	8010036 <UART_SetConfig+0xc2e>
 8010018:	2310      	movs	r3, #16
 801001a:	e00c      	b.n	8010036 <UART_SetConfig+0xc2e>
 801001c:	230c      	movs	r3, #12
 801001e:	e00a      	b.n	8010036 <UART_SetConfig+0xc2e>
 8010020:	230a      	movs	r3, #10
 8010022:	e008      	b.n	8010036 <UART_SetConfig+0xc2e>
 8010024:	2308      	movs	r3, #8
 8010026:	e006      	b.n	8010036 <UART_SetConfig+0xc2e>
 8010028:	2306      	movs	r3, #6
 801002a:	e004      	b.n	8010036 <UART_SetConfig+0xc2e>
 801002c:	2304      	movs	r3, #4
 801002e:	e002      	b.n	8010036 <UART_SetConfig+0xc2e>
 8010030:	2302      	movs	r3, #2
 8010032:	e000      	b.n	8010036 <UART_SetConfig+0xc2e>
 8010034:	2301      	movs	r3, #1
 8010036:	69ba      	ldr	r2, [r7, #24]
 8010038:	fbb2 f3f3 	udiv	r3, r2, r3
 801003c:	005a      	lsls	r2, r3, #1
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	085b      	lsrs	r3, r3, #1
 8010044:	441a      	add	r2, r3
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	fbb2 f3f3 	udiv	r3, r2, r3
 801004e:	b29b      	uxth	r3, r3
 8010050:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010052:	e16e      	b.n	8010332 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010054:	f7fa ff82 	bl	800af5c <HAL_RCC_GetPCLK2Freq>
 8010058:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801005e:	2b00      	cmp	r3, #0
 8010060:	d044      	beq.n	80100ec <UART_SetConfig+0xce4>
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010066:	2b01      	cmp	r3, #1
 8010068:	d03e      	beq.n	80100e8 <UART_SetConfig+0xce0>
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006e:	2b02      	cmp	r3, #2
 8010070:	d038      	beq.n	80100e4 <UART_SetConfig+0xcdc>
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010076:	2b03      	cmp	r3, #3
 8010078:	d032      	beq.n	80100e0 <UART_SetConfig+0xcd8>
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801007e:	2b04      	cmp	r3, #4
 8010080:	d02c      	beq.n	80100dc <UART_SetConfig+0xcd4>
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010086:	2b05      	cmp	r3, #5
 8010088:	d026      	beq.n	80100d8 <UART_SetConfig+0xcd0>
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008e:	2b06      	cmp	r3, #6
 8010090:	d020      	beq.n	80100d4 <UART_SetConfig+0xccc>
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010096:	2b07      	cmp	r3, #7
 8010098:	d01a      	beq.n	80100d0 <UART_SetConfig+0xcc8>
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801009e:	2b08      	cmp	r3, #8
 80100a0:	d014      	beq.n	80100cc <UART_SetConfig+0xcc4>
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a6:	2b09      	cmp	r3, #9
 80100a8:	d00e      	beq.n	80100c8 <UART_SetConfig+0xcc0>
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ae:	2b0a      	cmp	r3, #10
 80100b0:	d008      	beq.n	80100c4 <UART_SetConfig+0xcbc>
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b6:	2b0b      	cmp	r3, #11
 80100b8:	d102      	bne.n	80100c0 <UART_SetConfig+0xcb8>
 80100ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80100be:	e016      	b.n	80100ee <UART_SetConfig+0xce6>
 80100c0:	2301      	movs	r3, #1
 80100c2:	e014      	b.n	80100ee <UART_SetConfig+0xce6>
 80100c4:	2380      	movs	r3, #128	; 0x80
 80100c6:	e012      	b.n	80100ee <UART_SetConfig+0xce6>
 80100c8:	2340      	movs	r3, #64	; 0x40
 80100ca:	e010      	b.n	80100ee <UART_SetConfig+0xce6>
 80100cc:	2320      	movs	r3, #32
 80100ce:	e00e      	b.n	80100ee <UART_SetConfig+0xce6>
 80100d0:	2310      	movs	r3, #16
 80100d2:	e00c      	b.n	80100ee <UART_SetConfig+0xce6>
 80100d4:	230c      	movs	r3, #12
 80100d6:	e00a      	b.n	80100ee <UART_SetConfig+0xce6>
 80100d8:	230a      	movs	r3, #10
 80100da:	e008      	b.n	80100ee <UART_SetConfig+0xce6>
 80100dc:	2308      	movs	r3, #8
 80100de:	e006      	b.n	80100ee <UART_SetConfig+0xce6>
 80100e0:	2306      	movs	r3, #6
 80100e2:	e004      	b.n	80100ee <UART_SetConfig+0xce6>
 80100e4:	2304      	movs	r3, #4
 80100e6:	e002      	b.n	80100ee <UART_SetConfig+0xce6>
 80100e8:	2302      	movs	r3, #2
 80100ea:	e000      	b.n	80100ee <UART_SetConfig+0xce6>
 80100ec:	2301      	movs	r3, #1
 80100ee:	69ba      	ldr	r2, [r7, #24]
 80100f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80100f4:	005a      	lsls	r2, r3, #1
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	085b      	lsrs	r3, r3, #1
 80100fc:	441a      	add	r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	fbb2 f3f3 	udiv	r3, r2, r3
 8010106:	b29b      	uxth	r3, r3
 8010108:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 801010a:	e112      	b.n	8010332 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010110:	2b00      	cmp	r3, #0
 8010112:	d044      	beq.n	801019e <UART_SetConfig+0xd96>
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010118:	2b01      	cmp	r3, #1
 801011a:	d03e      	beq.n	801019a <UART_SetConfig+0xd92>
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010120:	2b02      	cmp	r3, #2
 8010122:	d038      	beq.n	8010196 <UART_SetConfig+0xd8e>
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010128:	2b03      	cmp	r3, #3
 801012a:	d032      	beq.n	8010192 <UART_SetConfig+0xd8a>
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010130:	2b04      	cmp	r3, #4
 8010132:	d02c      	beq.n	801018e <UART_SetConfig+0xd86>
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010138:	2b05      	cmp	r3, #5
 801013a:	d026      	beq.n	801018a <UART_SetConfig+0xd82>
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010140:	2b06      	cmp	r3, #6
 8010142:	d020      	beq.n	8010186 <UART_SetConfig+0xd7e>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010148:	2b07      	cmp	r3, #7
 801014a:	d01a      	beq.n	8010182 <UART_SetConfig+0xd7a>
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010150:	2b08      	cmp	r3, #8
 8010152:	d014      	beq.n	801017e <UART_SetConfig+0xd76>
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010158:	2b09      	cmp	r3, #9
 801015a:	d00e      	beq.n	801017a <UART_SetConfig+0xd72>
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010160:	2b0a      	cmp	r3, #10
 8010162:	d008      	beq.n	8010176 <UART_SetConfig+0xd6e>
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010168:	2b0b      	cmp	r3, #11
 801016a:	d102      	bne.n	8010172 <UART_SetConfig+0xd6a>
 801016c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010170:	e016      	b.n	80101a0 <UART_SetConfig+0xd98>
 8010172:	2301      	movs	r3, #1
 8010174:	e014      	b.n	80101a0 <UART_SetConfig+0xd98>
 8010176:	2380      	movs	r3, #128	; 0x80
 8010178:	e012      	b.n	80101a0 <UART_SetConfig+0xd98>
 801017a:	2340      	movs	r3, #64	; 0x40
 801017c:	e010      	b.n	80101a0 <UART_SetConfig+0xd98>
 801017e:	2320      	movs	r3, #32
 8010180:	e00e      	b.n	80101a0 <UART_SetConfig+0xd98>
 8010182:	2310      	movs	r3, #16
 8010184:	e00c      	b.n	80101a0 <UART_SetConfig+0xd98>
 8010186:	230c      	movs	r3, #12
 8010188:	e00a      	b.n	80101a0 <UART_SetConfig+0xd98>
 801018a:	230a      	movs	r3, #10
 801018c:	e008      	b.n	80101a0 <UART_SetConfig+0xd98>
 801018e:	2308      	movs	r3, #8
 8010190:	e006      	b.n	80101a0 <UART_SetConfig+0xd98>
 8010192:	2306      	movs	r3, #6
 8010194:	e004      	b.n	80101a0 <UART_SetConfig+0xd98>
 8010196:	2304      	movs	r3, #4
 8010198:	e002      	b.n	80101a0 <UART_SetConfig+0xd98>
 801019a:	2302      	movs	r3, #2
 801019c:	e000      	b.n	80101a0 <UART_SetConfig+0xd98>
 801019e:	2301      	movs	r3, #1
 80101a0:	4aa1      	ldr	r2, [pc, #644]	; (8010428 <UART_SetConfig+0x1020>)
 80101a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80101a6:	005a      	lsls	r2, r3, #1
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	085b      	lsrs	r3, r3, #1
 80101ae:	441a      	add	r2, r3
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80101bc:	e0b9      	b.n	8010332 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80101be:	f7fa fe21 	bl	800ae04 <HAL_RCC_GetSysClockFreq>
 80101c2:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d044      	beq.n	8010256 <UART_SetConfig+0xe4e>
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d03e      	beq.n	8010252 <UART_SetConfig+0xe4a>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d8:	2b02      	cmp	r3, #2
 80101da:	d038      	beq.n	801024e <UART_SetConfig+0xe46>
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e0:	2b03      	cmp	r3, #3
 80101e2:	d032      	beq.n	801024a <UART_SetConfig+0xe42>
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e8:	2b04      	cmp	r3, #4
 80101ea:	d02c      	beq.n	8010246 <UART_SetConfig+0xe3e>
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f0:	2b05      	cmp	r3, #5
 80101f2:	d026      	beq.n	8010242 <UART_SetConfig+0xe3a>
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f8:	2b06      	cmp	r3, #6
 80101fa:	d020      	beq.n	801023e <UART_SetConfig+0xe36>
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010200:	2b07      	cmp	r3, #7
 8010202:	d01a      	beq.n	801023a <UART_SetConfig+0xe32>
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010208:	2b08      	cmp	r3, #8
 801020a:	d014      	beq.n	8010236 <UART_SetConfig+0xe2e>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010210:	2b09      	cmp	r3, #9
 8010212:	d00e      	beq.n	8010232 <UART_SetConfig+0xe2a>
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010218:	2b0a      	cmp	r3, #10
 801021a:	d008      	beq.n	801022e <UART_SetConfig+0xe26>
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010220:	2b0b      	cmp	r3, #11
 8010222:	d102      	bne.n	801022a <UART_SetConfig+0xe22>
 8010224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010228:	e016      	b.n	8010258 <UART_SetConfig+0xe50>
 801022a:	2301      	movs	r3, #1
 801022c:	e014      	b.n	8010258 <UART_SetConfig+0xe50>
 801022e:	2380      	movs	r3, #128	; 0x80
 8010230:	e012      	b.n	8010258 <UART_SetConfig+0xe50>
 8010232:	2340      	movs	r3, #64	; 0x40
 8010234:	e010      	b.n	8010258 <UART_SetConfig+0xe50>
 8010236:	2320      	movs	r3, #32
 8010238:	e00e      	b.n	8010258 <UART_SetConfig+0xe50>
 801023a:	2310      	movs	r3, #16
 801023c:	e00c      	b.n	8010258 <UART_SetConfig+0xe50>
 801023e:	230c      	movs	r3, #12
 8010240:	e00a      	b.n	8010258 <UART_SetConfig+0xe50>
 8010242:	230a      	movs	r3, #10
 8010244:	e008      	b.n	8010258 <UART_SetConfig+0xe50>
 8010246:	2308      	movs	r3, #8
 8010248:	e006      	b.n	8010258 <UART_SetConfig+0xe50>
 801024a:	2306      	movs	r3, #6
 801024c:	e004      	b.n	8010258 <UART_SetConfig+0xe50>
 801024e:	2304      	movs	r3, #4
 8010250:	e002      	b.n	8010258 <UART_SetConfig+0xe50>
 8010252:	2302      	movs	r3, #2
 8010254:	e000      	b.n	8010258 <UART_SetConfig+0xe50>
 8010256:	2301      	movs	r3, #1
 8010258:	69ba      	ldr	r2, [r7, #24]
 801025a:	fbb2 f3f3 	udiv	r3, r2, r3
 801025e:	005a      	lsls	r2, r3, #1
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	085b      	lsrs	r3, r3, #1
 8010266:	441a      	add	r2, r3
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010270:	b29b      	uxth	r3, r3
 8010272:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010274:	e05d      	b.n	8010332 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801027a:	2b00      	cmp	r3, #0
 801027c:	d044      	beq.n	8010308 <UART_SetConfig+0xf00>
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010282:	2b01      	cmp	r3, #1
 8010284:	d03e      	beq.n	8010304 <UART_SetConfig+0xefc>
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801028a:	2b02      	cmp	r3, #2
 801028c:	d038      	beq.n	8010300 <UART_SetConfig+0xef8>
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010292:	2b03      	cmp	r3, #3
 8010294:	d032      	beq.n	80102fc <UART_SetConfig+0xef4>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029a:	2b04      	cmp	r3, #4
 801029c:	d02c      	beq.n	80102f8 <UART_SetConfig+0xef0>
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a2:	2b05      	cmp	r3, #5
 80102a4:	d026      	beq.n	80102f4 <UART_SetConfig+0xeec>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102aa:	2b06      	cmp	r3, #6
 80102ac:	d020      	beq.n	80102f0 <UART_SetConfig+0xee8>
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102b2:	2b07      	cmp	r3, #7
 80102b4:	d01a      	beq.n	80102ec <UART_SetConfig+0xee4>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ba:	2b08      	cmp	r3, #8
 80102bc:	d014      	beq.n	80102e8 <UART_SetConfig+0xee0>
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c2:	2b09      	cmp	r3, #9
 80102c4:	d00e      	beq.n	80102e4 <UART_SetConfig+0xedc>
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ca:	2b0a      	cmp	r3, #10
 80102cc:	d008      	beq.n	80102e0 <UART_SetConfig+0xed8>
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d2:	2b0b      	cmp	r3, #11
 80102d4:	d102      	bne.n	80102dc <UART_SetConfig+0xed4>
 80102d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102da:	e016      	b.n	801030a <UART_SetConfig+0xf02>
 80102dc:	2301      	movs	r3, #1
 80102de:	e014      	b.n	801030a <UART_SetConfig+0xf02>
 80102e0:	2380      	movs	r3, #128	; 0x80
 80102e2:	e012      	b.n	801030a <UART_SetConfig+0xf02>
 80102e4:	2340      	movs	r3, #64	; 0x40
 80102e6:	e010      	b.n	801030a <UART_SetConfig+0xf02>
 80102e8:	2320      	movs	r3, #32
 80102ea:	e00e      	b.n	801030a <UART_SetConfig+0xf02>
 80102ec:	2310      	movs	r3, #16
 80102ee:	e00c      	b.n	801030a <UART_SetConfig+0xf02>
 80102f0:	230c      	movs	r3, #12
 80102f2:	e00a      	b.n	801030a <UART_SetConfig+0xf02>
 80102f4:	230a      	movs	r3, #10
 80102f6:	e008      	b.n	801030a <UART_SetConfig+0xf02>
 80102f8:	2308      	movs	r3, #8
 80102fa:	e006      	b.n	801030a <UART_SetConfig+0xf02>
 80102fc:	2306      	movs	r3, #6
 80102fe:	e004      	b.n	801030a <UART_SetConfig+0xf02>
 8010300:	2304      	movs	r3, #4
 8010302:	e002      	b.n	801030a <UART_SetConfig+0xf02>
 8010304:	2302      	movs	r3, #2
 8010306:	e000      	b.n	801030a <UART_SetConfig+0xf02>
 8010308:	2301      	movs	r3, #1
 801030a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801030e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010312:	005a      	lsls	r2, r3, #1
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	085b      	lsrs	r3, r3, #1
 801031a:	441a      	add	r2, r3
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	fbb2 f3f3 	udiv	r3, r2, r3
 8010324:	b29b      	uxth	r3, r3
 8010326:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010328:	e003      	b.n	8010332 <UART_SetConfig+0xf2a>
      default:
        ret = HAL_ERROR;
 801032a:	2301      	movs	r3, #1
 801032c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8010330:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010334:	2b0f      	cmp	r3, #15
 8010336:	d916      	bls.n	8010366 <UART_SetConfig+0xf5e>
 8010338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801033e:	d212      	bcs.n	8010366 <UART_SetConfig+0xf5e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010342:	b29b      	uxth	r3, r3
 8010344:	f023 030f 	bic.w	r3, r3, #15
 8010348:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801034a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034c:	085b      	lsrs	r3, r3, #1
 801034e:	b29b      	uxth	r3, r3
 8010350:	f003 0307 	and.w	r3, r3, #7
 8010354:	b29a      	uxth	r2, r3
 8010356:	8afb      	ldrh	r3, [r7, #22]
 8010358:	4313      	orrs	r3, r2
 801035a:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	8afa      	ldrh	r2, [r7, #22]
 8010362:	60da      	str	r2, [r3, #12]
 8010364:	e1f5      	b.n	8010752 <UART_SetConfig+0x134a>
    }
    else
    {
      ret = HAL_ERROR;
 8010366:	2301      	movs	r3, #1
 8010368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801036c:	e1f1      	b.n	8010752 <UART_SetConfig+0x134a>
    }
  }
  else
  {
    switch (clocksource)
 801036e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010372:	2b08      	cmp	r3, #8
 8010374:	f200 81da 	bhi.w	801072c <UART_SetConfig+0x1324>
 8010378:	a201      	add	r2, pc, #4	; (adr r2, 8010380 <UART_SetConfig+0xf78>)
 801037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801037e:	bf00      	nop
 8010380:	080103a5 	.word	0x080103a5
 8010384:	0801045f 	.word	0x0801045f
 8010388:	08010515 	.word	0x08010515
 801038c:	0801072d 	.word	0x0801072d
 8010390:	080105c5 	.word	0x080105c5
 8010394:	0801072d 	.word	0x0801072d
 8010398:	0801072d 	.word	0x0801072d
 801039c:	0801072d 	.word	0x0801072d
 80103a0:	0801067b 	.word	0x0801067b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103a4:	f7fa fdc4 	bl	800af30 <HAL_RCC_GetPCLK1Freq>
 80103a8:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d046      	beq.n	8010440 <UART_SetConfig+0x1038>
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	d040      	beq.n	801043c <UART_SetConfig+0x1034>
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103be:	2b02      	cmp	r3, #2
 80103c0:	d03a      	beq.n	8010438 <UART_SetConfig+0x1030>
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103c6:	2b03      	cmp	r3, #3
 80103c8:	d034      	beq.n	8010434 <UART_SetConfig+0x102c>
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ce:	2b04      	cmp	r3, #4
 80103d0:	d02e      	beq.n	8010430 <UART_SetConfig+0x1028>
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103d6:	2b05      	cmp	r3, #5
 80103d8:	d028      	beq.n	801042c <UART_SetConfig+0x1024>
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103de:	2b06      	cmp	r3, #6
 80103e0:	d020      	beq.n	8010424 <UART_SetConfig+0x101c>
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103e6:	2b07      	cmp	r3, #7
 80103e8:	d01a      	beq.n	8010420 <UART_SetConfig+0x1018>
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ee:	2b08      	cmp	r3, #8
 80103f0:	d014      	beq.n	801041c <UART_SetConfig+0x1014>
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f6:	2b09      	cmp	r3, #9
 80103f8:	d00e      	beq.n	8010418 <UART_SetConfig+0x1010>
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103fe:	2b0a      	cmp	r3, #10
 8010400:	d008      	beq.n	8010414 <UART_SetConfig+0x100c>
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010406:	2b0b      	cmp	r3, #11
 8010408:	d102      	bne.n	8010410 <UART_SetConfig+0x1008>
 801040a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801040e:	e018      	b.n	8010442 <UART_SetConfig+0x103a>
 8010410:	2301      	movs	r3, #1
 8010412:	e016      	b.n	8010442 <UART_SetConfig+0x103a>
 8010414:	2380      	movs	r3, #128	; 0x80
 8010416:	e014      	b.n	8010442 <UART_SetConfig+0x103a>
 8010418:	2340      	movs	r3, #64	; 0x40
 801041a:	e012      	b.n	8010442 <UART_SetConfig+0x103a>
 801041c:	2320      	movs	r3, #32
 801041e:	e010      	b.n	8010442 <UART_SetConfig+0x103a>
 8010420:	2310      	movs	r3, #16
 8010422:	e00e      	b.n	8010442 <UART_SetConfig+0x103a>
 8010424:	230c      	movs	r3, #12
 8010426:	e00c      	b.n	8010442 <UART_SetConfig+0x103a>
 8010428:	00f42400 	.word	0x00f42400
 801042c:	230a      	movs	r3, #10
 801042e:	e008      	b.n	8010442 <UART_SetConfig+0x103a>
 8010430:	2308      	movs	r3, #8
 8010432:	e006      	b.n	8010442 <UART_SetConfig+0x103a>
 8010434:	2306      	movs	r3, #6
 8010436:	e004      	b.n	8010442 <UART_SetConfig+0x103a>
 8010438:	2304      	movs	r3, #4
 801043a:	e002      	b.n	8010442 <UART_SetConfig+0x103a>
 801043c:	2302      	movs	r3, #2
 801043e:	e000      	b.n	8010442 <UART_SetConfig+0x103a>
 8010440:	2301      	movs	r3, #1
 8010442:	69ba      	ldr	r2, [r7, #24]
 8010444:	fbb2 f2f3 	udiv	r2, r2, r3
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	085b      	lsrs	r3, r3, #1
 801044e:	441a      	add	r2, r3
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	fbb2 f3f3 	udiv	r3, r2, r3
 8010458:	b29b      	uxth	r3, r3
 801045a:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 801045c:	e16a      	b.n	8010734 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801045e:	f7fa fd7d 	bl	800af5c <HAL_RCC_GetPCLK2Freq>
 8010462:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010468:	2b00      	cmp	r3, #0
 801046a:	d044      	beq.n	80104f6 <UART_SetConfig+0x10ee>
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010470:	2b01      	cmp	r3, #1
 8010472:	d03e      	beq.n	80104f2 <UART_SetConfig+0x10ea>
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010478:	2b02      	cmp	r3, #2
 801047a:	d038      	beq.n	80104ee <UART_SetConfig+0x10e6>
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010480:	2b03      	cmp	r3, #3
 8010482:	d032      	beq.n	80104ea <UART_SetConfig+0x10e2>
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010488:	2b04      	cmp	r3, #4
 801048a:	d02c      	beq.n	80104e6 <UART_SetConfig+0x10de>
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010490:	2b05      	cmp	r3, #5
 8010492:	d026      	beq.n	80104e2 <UART_SetConfig+0x10da>
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010498:	2b06      	cmp	r3, #6
 801049a:	d020      	beq.n	80104de <UART_SetConfig+0x10d6>
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a0:	2b07      	cmp	r3, #7
 80104a2:	d01a      	beq.n	80104da <UART_SetConfig+0x10d2>
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a8:	2b08      	cmp	r3, #8
 80104aa:	d014      	beq.n	80104d6 <UART_SetConfig+0x10ce>
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b0:	2b09      	cmp	r3, #9
 80104b2:	d00e      	beq.n	80104d2 <UART_SetConfig+0x10ca>
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b8:	2b0a      	cmp	r3, #10
 80104ba:	d008      	beq.n	80104ce <UART_SetConfig+0x10c6>
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c0:	2b0b      	cmp	r3, #11
 80104c2:	d102      	bne.n	80104ca <UART_SetConfig+0x10c2>
 80104c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104c8:	e016      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104ca:	2301      	movs	r3, #1
 80104cc:	e014      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104ce:	2380      	movs	r3, #128	; 0x80
 80104d0:	e012      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104d2:	2340      	movs	r3, #64	; 0x40
 80104d4:	e010      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104d6:	2320      	movs	r3, #32
 80104d8:	e00e      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104da:	2310      	movs	r3, #16
 80104dc:	e00c      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104de:	230c      	movs	r3, #12
 80104e0:	e00a      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104e2:	230a      	movs	r3, #10
 80104e4:	e008      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104e6:	2308      	movs	r3, #8
 80104e8:	e006      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104ea:	2306      	movs	r3, #6
 80104ec:	e004      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104ee:	2304      	movs	r3, #4
 80104f0:	e002      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104f2:	2302      	movs	r3, #2
 80104f4:	e000      	b.n	80104f8 <UART_SetConfig+0x10f0>
 80104f6:	2301      	movs	r3, #1
 80104f8:	69ba      	ldr	r2, [r7, #24]
 80104fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	085b      	lsrs	r3, r3, #1
 8010504:	441a      	add	r2, r3
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	fbb2 f3f3 	udiv	r3, r2, r3
 801050e:	b29b      	uxth	r3, r3
 8010510:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010512:	e10f      	b.n	8010734 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010518:	2b00      	cmp	r3, #0
 801051a:	d044      	beq.n	80105a6 <UART_SetConfig+0x119e>
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010520:	2b01      	cmp	r3, #1
 8010522:	d03e      	beq.n	80105a2 <UART_SetConfig+0x119a>
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010528:	2b02      	cmp	r3, #2
 801052a:	d038      	beq.n	801059e <UART_SetConfig+0x1196>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010530:	2b03      	cmp	r3, #3
 8010532:	d032      	beq.n	801059a <UART_SetConfig+0x1192>
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010538:	2b04      	cmp	r3, #4
 801053a:	d02c      	beq.n	8010596 <UART_SetConfig+0x118e>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010540:	2b05      	cmp	r3, #5
 8010542:	d026      	beq.n	8010592 <UART_SetConfig+0x118a>
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010548:	2b06      	cmp	r3, #6
 801054a:	d020      	beq.n	801058e <UART_SetConfig+0x1186>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010550:	2b07      	cmp	r3, #7
 8010552:	d01a      	beq.n	801058a <UART_SetConfig+0x1182>
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010558:	2b08      	cmp	r3, #8
 801055a:	d014      	beq.n	8010586 <UART_SetConfig+0x117e>
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010560:	2b09      	cmp	r3, #9
 8010562:	d00e      	beq.n	8010582 <UART_SetConfig+0x117a>
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010568:	2b0a      	cmp	r3, #10
 801056a:	d008      	beq.n	801057e <UART_SetConfig+0x1176>
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010570:	2b0b      	cmp	r3, #11
 8010572:	d102      	bne.n	801057a <UART_SetConfig+0x1172>
 8010574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010578:	e016      	b.n	80105a8 <UART_SetConfig+0x11a0>
 801057a:	2301      	movs	r3, #1
 801057c:	e014      	b.n	80105a8 <UART_SetConfig+0x11a0>
 801057e:	2380      	movs	r3, #128	; 0x80
 8010580:	e012      	b.n	80105a8 <UART_SetConfig+0x11a0>
 8010582:	2340      	movs	r3, #64	; 0x40
 8010584:	e010      	b.n	80105a8 <UART_SetConfig+0x11a0>
 8010586:	2320      	movs	r3, #32
 8010588:	e00e      	b.n	80105a8 <UART_SetConfig+0x11a0>
 801058a:	2310      	movs	r3, #16
 801058c:	e00c      	b.n	80105a8 <UART_SetConfig+0x11a0>
 801058e:	230c      	movs	r3, #12
 8010590:	e00a      	b.n	80105a8 <UART_SetConfig+0x11a0>
 8010592:	230a      	movs	r3, #10
 8010594:	e008      	b.n	80105a8 <UART_SetConfig+0x11a0>
 8010596:	2308      	movs	r3, #8
 8010598:	e006      	b.n	80105a8 <UART_SetConfig+0x11a0>
 801059a:	2306      	movs	r3, #6
 801059c:	e004      	b.n	80105a8 <UART_SetConfig+0x11a0>
 801059e:	2304      	movs	r3, #4
 80105a0:	e002      	b.n	80105a8 <UART_SetConfig+0x11a0>
 80105a2:	2302      	movs	r3, #2
 80105a4:	e000      	b.n	80105a8 <UART_SetConfig+0x11a0>
 80105a6:	2301      	movs	r3, #1
 80105a8:	4a74      	ldr	r2, [pc, #464]	; (801077c <UART_SetConfig+0x1374>)
 80105aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	085b      	lsrs	r3, r3, #1
 80105b4:	441a      	add	r2, r3
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80105be:	b29b      	uxth	r3, r3
 80105c0:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80105c2:	e0b7      	b.n	8010734 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80105c4:	f7fa fc1e 	bl	800ae04 <HAL_RCC_GetSysClockFreq>
 80105c8:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d044      	beq.n	801065c <UART_SetConfig+0x1254>
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d03e      	beq.n	8010658 <UART_SetConfig+0x1250>
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105de:	2b02      	cmp	r3, #2
 80105e0:	d038      	beq.n	8010654 <UART_SetConfig+0x124c>
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e6:	2b03      	cmp	r3, #3
 80105e8:	d032      	beq.n	8010650 <UART_SetConfig+0x1248>
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ee:	2b04      	cmp	r3, #4
 80105f0:	d02c      	beq.n	801064c <UART_SetConfig+0x1244>
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f6:	2b05      	cmp	r3, #5
 80105f8:	d026      	beq.n	8010648 <UART_SetConfig+0x1240>
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105fe:	2b06      	cmp	r3, #6
 8010600:	d020      	beq.n	8010644 <UART_SetConfig+0x123c>
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010606:	2b07      	cmp	r3, #7
 8010608:	d01a      	beq.n	8010640 <UART_SetConfig+0x1238>
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801060e:	2b08      	cmp	r3, #8
 8010610:	d014      	beq.n	801063c <UART_SetConfig+0x1234>
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010616:	2b09      	cmp	r3, #9
 8010618:	d00e      	beq.n	8010638 <UART_SetConfig+0x1230>
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801061e:	2b0a      	cmp	r3, #10
 8010620:	d008      	beq.n	8010634 <UART_SetConfig+0x122c>
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010626:	2b0b      	cmp	r3, #11
 8010628:	d102      	bne.n	8010630 <UART_SetConfig+0x1228>
 801062a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801062e:	e016      	b.n	801065e <UART_SetConfig+0x1256>
 8010630:	2301      	movs	r3, #1
 8010632:	e014      	b.n	801065e <UART_SetConfig+0x1256>
 8010634:	2380      	movs	r3, #128	; 0x80
 8010636:	e012      	b.n	801065e <UART_SetConfig+0x1256>
 8010638:	2340      	movs	r3, #64	; 0x40
 801063a:	e010      	b.n	801065e <UART_SetConfig+0x1256>
 801063c:	2320      	movs	r3, #32
 801063e:	e00e      	b.n	801065e <UART_SetConfig+0x1256>
 8010640:	2310      	movs	r3, #16
 8010642:	e00c      	b.n	801065e <UART_SetConfig+0x1256>
 8010644:	230c      	movs	r3, #12
 8010646:	e00a      	b.n	801065e <UART_SetConfig+0x1256>
 8010648:	230a      	movs	r3, #10
 801064a:	e008      	b.n	801065e <UART_SetConfig+0x1256>
 801064c:	2308      	movs	r3, #8
 801064e:	e006      	b.n	801065e <UART_SetConfig+0x1256>
 8010650:	2306      	movs	r3, #6
 8010652:	e004      	b.n	801065e <UART_SetConfig+0x1256>
 8010654:	2304      	movs	r3, #4
 8010656:	e002      	b.n	801065e <UART_SetConfig+0x1256>
 8010658:	2302      	movs	r3, #2
 801065a:	e000      	b.n	801065e <UART_SetConfig+0x1256>
 801065c:	2301      	movs	r3, #1
 801065e:	69ba      	ldr	r2, [r7, #24]
 8010660:	fbb2 f2f3 	udiv	r2, r2, r3
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	085b      	lsrs	r3, r3, #1
 801066a:	441a      	add	r2, r3
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	fbb2 f3f3 	udiv	r3, r2, r3
 8010674:	b29b      	uxth	r3, r3
 8010676:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010678:	e05c      	b.n	8010734 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801067e:	2b00      	cmp	r3, #0
 8010680:	d044      	beq.n	801070c <UART_SetConfig+0x1304>
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010686:	2b01      	cmp	r3, #1
 8010688:	d03e      	beq.n	8010708 <UART_SetConfig+0x1300>
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801068e:	2b02      	cmp	r3, #2
 8010690:	d038      	beq.n	8010704 <UART_SetConfig+0x12fc>
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010696:	2b03      	cmp	r3, #3
 8010698:	d032      	beq.n	8010700 <UART_SetConfig+0x12f8>
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801069e:	2b04      	cmp	r3, #4
 80106a0:	d02c      	beq.n	80106fc <UART_SetConfig+0x12f4>
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a6:	2b05      	cmp	r3, #5
 80106a8:	d026      	beq.n	80106f8 <UART_SetConfig+0x12f0>
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ae:	2b06      	cmp	r3, #6
 80106b0:	d020      	beq.n	80106f4 <UART_SetConfig+0x12ec>
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b6:	2b07      	cmp	r3, #7
 80106b8:	d01a      	beq.n	80106f0 <UART_SetConfig+0x12e8>
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106be:	2b08      	cmp	r3, #8
 80106c0:	d014      	beq.n	80106ec <UART_SetConfig+0x12e4>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c6:	2b09      	cmp	r3, #9
 80106c8:	d00e      	beq.n	80106e8 <UART_SetConfig+0x12e0>
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ce:	2b0a      	cmp	r3, #10
 80106d0:	d008      	beq.n	80106e4 <UART_SetConfig+0x12dc>
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d6:	2b0b      	cmp	r3, #11
 80106d8:	d102      	bne.n	80106e0 <UART_SetConfig+0x12d8>
 80106da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106de:	e016      	b.n	801070e <UART_SetConfig+0x1306>
 80106e0:	2301      	movs	r3, #1
 80106e2:	e014      	b.n	801070e <UART_SetConfig+0x1306>
 80106e4:	2380      	movs	r3, #128	; 0x80
 80106e6:	e012      	b.n	801070e <UART_SetConfig+0x1306>
 80106e8:	2340      	movs	r3, #64	; 0x40
 80106ea:	e010      	b.n	801070e <UART_SetConfig+0x1306>
 80106ec:	2320      	movs	r3, #32
 80106ee:	e00e      	b.n	801070e <UART_SetConfig+0x1306>
 80106f0:	2310      	movs	r3, #16
 80106f2:	e00c      	b.n	801070e <UART_SetConfig+0x1306>
 80106f4:	230c      	movs	r3, #12
 80106f6:	e00a      	b.n	801070e <UART_SetConfig+0x1306>
 80106f8:	230a      	movs	r3, #10
 80106fa:	e008      	b.n	801070e <UART_SetConfig+0x1306>
 80106fc:	2308      	movs	r3, #8
 80106fe:	e006      	b.n	801070e <UART_SetConfig+0x1306>
 8010700:	2306      	movs	r3, #6
 8010702:	e004      	b.n	801070e <UART_SetConfig+0x1306>
 8010704:	2304      	movs	r3, #4
 8010706:	e002      	b.n	801070e <UART_SetConfig+0x1306>
 8010708:	2302      	movs	r3, #2
 801070a:	e000      	b.n	801070e <UART_SetConfig+0x1306>
 801070c:	2301      	movs	r3, #1
 801070e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010712:	fbb2 f2f3 	udiv	r2, r2, r3
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	085b      	lsrs	r3, r3, #1
 801071c:	441a      	add	r2, r3
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	fbb2 f3f3 	udiv	r3, r2, r3
 8010726:	b29b      	uxth	r3, r3
 8010728:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 801072a:	e003      	b.n	8010734 <UART_SetConfig+0x132c>
      default:
        ret = HAL_ERROR;
 801072c:	2301      	movs	r3, #1
 801072e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8010732:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010736:	2b0f      	cmp	r3, #15
 8010738:	d908      	bls.n	801074c <UART_SetConfig+0x1344>
 801073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010740:	d204      	bcs.n	801074c <UART_SetConfig+0x1344>
    {
      huart->Instance->BRR = usartdiv;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010748:	60da      	str	r2, [r3, #12]
 801074a:	e002      	b.n	8010752 <UART_SetConfig+0x134a>
    }
    else
    {
      ret = HAL_ERROR;
 801074c:	2301      	movs	r3, #1
 801074e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	2201      	movs	r2, #1
 8010756:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2201      	movs	r2, #1
 801075e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2200      	movs	r2, #0
 8010766:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2200      	movs	r2, #0
 801076c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801076e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8010772:	4618      	mov	r0, r3
 8010774:	3730      	adds	r7, #48	; 0x30
 8010776:	46bd      	mov	sp, r7
 8010778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801077c:	00f42400 	.word	0x00f42400

08010780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801078c:	f003 0301 	and.w	r3, r3, #1
 8010790:	2b00      	cmp	r3, #0
 8010792:	d00a      	beq.n	80107aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	430a      	orrs	r2, r1
 80107a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ae:	f003 0302 	and.w	r3, r3, #2
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d00a      	beq.n	80107cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	430a      	orrs	r2, r1
 80107ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107d0:	f003 0304 	and.w	r3, r3, #4
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d00a      	beq.n	80107ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	430a      	orrs	r2, r1
 80107ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107f2:	f003 0308 	and.w	r3, r3, #8
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d00a      	beq.n	8010810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	430a      	orrs	r2, r1
 801080e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010814:	f003 0310 	and.w	r3, r3, #16
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00a      	beq.n	8010832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	689b      	ldr	r3, [r3, #8]
 8010822:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	430a      	orrs	r2, r1
 8010830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010836:	f003 0320 	and.w	r3, r3, #32
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00a      	beq.n	8010854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	689b      	ldr	r3, [r3, #8]
 8010844:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	430a      	orrs	r2, r1
 8010852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801085c:	2b00      	cmp	r3, #0
 801085e:	d01a      	beq.n	8010896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	430a      	orrs	r2, r1
 8010874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801087a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801087e:	d10a      	bne.n	8010896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	430a      	orrs	r2, r1
 8010894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00a      	beq.n	80108b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	430a      	orrs	r2, r1
 80108b6:	605a      	str	r2, [r3, #4]
  }
}
 80108b8:	bf00      	nop
 80108ba:	370c      	adds	r7, #12
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr

080108c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b086      	sub	sp, #24
 80108c8:	af02      	add	r7, sp, #8
 80108ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80108d4:	f7f5 fe2a 	bl	800652c <HAL_GetTick>
 80108d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f003 0308 	and.w	r3, r3, #8
 80108e4:	2b08      	cmp	r3, #8
 80108e6:	d10e      	bne.n	8010906 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80108e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80108ec:	9300      	str	r3, [sp, #0]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2200      	movs	r2, #0
 80108f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 f82c 	bl	8010954 <UART_WaitOnFlagUntilTimeout>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d001      	beq.n	8010906 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010902:	2303      	movs	r3, #3
 8010904:	e022      	b.n	801094c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f003 0304 	and.w	r3, r3, #4
 8010910:	2b04      	cmp	r3, #4
 8010912:	d10e      	bne.n	8010932 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010914:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010918:	9300      	str	r3, [sp, #0]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2200      	movs	r2, #0
 801091e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f000 f816 	bl	8010954 <UART_WaitOnFlagUntilTimeout>
 8010928:	4603      	mov	r3, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	d001      	beq.n	8010932 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801092e:	2303      	movs	r3, #3
 8010930:	e00c      	b.n	801094c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2220      	movs	r2, #32
 8010936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2220      	movs	r2, #32
 801093e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2200      	movs	r2, #0
 8010946:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801094a:	2300      	movs	r3, #0
}
 801094c:	4618      	mov	r0, r3
 801094e:	3710      	adds	r7, #16
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}

08010954 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	603b      	str	r3, [r7, #0]
 8010960:	4613      	mov	r3, r2
 8010962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010964:	e062      	b.n	8010a2c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	f1b3 3fff 	cmp.w	r3, #4294967295
 801096c:	d05e      	beq.n	8010a2c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801096e:	f7f5 fddd 	bl	800652c <HAL_GetTick>
 8010972:	4602      	mov	r2, r0
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	69ba      	ldr	r2, [r7, #24]
 801097a:	429a      	cmp	r2, r3
 801097c:	d302      	bcc.n	8010984 <UART_WaitOnFlagUntilTimeout+0x30>
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d11d      	bne.n	80109c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010992:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	689a      	ldr	r2, [r3, #8]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f022 0201 	bic.w	r2, r2, #1
 80109a2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2220      	movs	r2, #32
 80109a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2220      	movs	r2, #32
 80109b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	2200      	movs	r2, #0
 80109b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80109bc:	2303      	movs	r3, #3
 80109be:	e045      	b.n	8010a4c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	f003 0304 	and.w	r3, r3, #4
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d02e      	beq.n	8010a2c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	69db      	ldr	r3, [r3, #28]
 80109d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80109d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80109dc:	d126      	bne.n	8010a2c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80109e6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80109f6:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	689a      	ldr	r2, [r3, #8]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f022 0201 	bic.w	r2, r2, #1
 8010a06:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2220      	movs	r2, #32
 8010a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	2220      	movs	r2, #32
 8010a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	2220      	movs	r2, #32
 8010a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	2200      	movs	r2, #0
 8010a24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8010a28:	2303      	movs	r3, #3
 8010a2a:	e00f      	b.n	8010a4c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	69da      	ldr	r2, [r3, #28]
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	4013      	ands	r3, r2
 8010a36:	68ba      	ldr	r2, [r7, #8]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	bf0c      	ite	eq
 8010a3c:	2301      	moveq	r3, #1
 8010a3e:	2300      	movne	r3, #0
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	461a      	mov	r2, r3
 8010a44:	79fb      	ldrb	r3, [r7, #7]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d08d      	beq.n	8010966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010a4a:	2300      	movs	r3, #0
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3710      	adds	r7, #16
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b085      	sub	sp, #20
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	d101      	bne.n	8010a6a <HAL_UARTEx_DisableFifoMode+0x16>
 8010a66:	2302      	movs	r3, #2
 8010a68:	e027      	b.n	8010aba <HAL_UARTEx_DisableFifoMode+0x66>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2224      	movs	r2, #36	; 0x24
 8010a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f022 0201 	bic.w	r2, r2, #1
 8010a90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010a98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2220      	movs	r2, #32
 8010aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010ab8:	2300      	movs	r3, #0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3714      	adds	r7, #20
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr

08010ac6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b084      	sub	sp, #16
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d101      	bne.n	8010ade <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010ada:	2302      	movs	r3, #2
 8010adc:	e02d      	b.n	8010b3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2224      	movs	r2, #36	; 0x24
 8010aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f022 0201 	bic.w	r2, r2, #1
 8010b04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	689b      	ldr	r3, [r3, #8]
 8010b0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	683a      	ldr	r2, [r7, #0]
 8010b16:	430a      	orrs	r2, r1
 8010b18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 f850 	bl	8010bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	68fa      	ldr	r2, [r7, #12]
 8010b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2220      	movs	r2, #32
 8010b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3710      	adds	r7, #16
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b084      	sub	sp, #16
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
 8010b4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	d101      	bne.n	8010b5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b56:	2302      	movs	r3, #2
 8010b58:	e02d      	b.n	8010bb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2224      	movs	r2, #36	; 0x24
 8010b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f022 0201 	bic.w	r2, r2, #1
 8010b80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	683a      	ldr	r2, [r7, #0]
 8010b92:	430a      	orrs	r2, r1
 8010b94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f000 f812 	bl	8010bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	68fa      	ldr	r2, [r7, #12]
 8010ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2220      	movs	r2, #32
 8010ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010bb4:	2300      	movs	r3, #0
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
	...

08010bc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b089      	sub	sp, #36	; 0x24
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010bc8:	4a2f      	ldr	r2, [pc, #188]	; (8010c88 <UARTEx_SetNbDataToProcess+0xc8>)
 8010bca:	f107 0314 	add.w	r3, r7, #20
 8010bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bd2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010bd6:	4a2d      	ldr	r2, [pc, #180]	; (8010c8c <UARTEx_SetNbDataToProcess+0xcc>)
 8010bd8:	f107 030c 	add.w	r3, r7, #12
 8010bdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010be0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d108      	bne.n	8010bfe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2201      	movs	r2, #1
 8010bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010bfc:	e03d      	b.n	8010c7a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010bfe:	2308      	movs	r3, #8
 8010c00:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010c02:	2308      	movs	r3, #8
 8010c04:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	689b      	ldr	r3, [r3, #8]
 8010c0c:	0e5b      	lsrs	r3, r3, #25
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	f003 0307 	and.w	r3, r3, #7
 8010c14:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	689b      	ldr	r3, [r3, #8]
 8010c1c:	0f5b      	lsrs	r3, r3, #29
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	f003 0307 	and.w	r3, r3, #7
 8010c24:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8010c26:	7fbb      	ldrb	r3, [r7, #30]
 8010c28:	7f3a      	ldrb	r2, [r7, #28]
 8010c2a:	f107 0120 	add.w	r1, r7, #32
 8010c2e:	440a      	add	r2, r1
 8010c30:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010c34:	fb02 f303 	mul.w	r3, r2, r3
 8010c38:	7f3a      	ldrb	r2, [r7, #28]
 8010c3a:	f107 0120 	add.w	r1, r7, #32
 8010c3e:	440a      	add	r2, r1
 8010c40:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010c44:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c48:	b29a      	uxth	r2, r3
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010c50:	7ffb      	ldrb	r3, [r7, #31]
 8010c52:	7f7a      	ldrb	r2, [r7, #29]
 8010c54:	f107 0120 	add.w	r1, r7, #32
 8010c58:	440a      	add	r2, r1
 8010c5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010c5e:	fb02 f303 	mul.w	r3, r2, r3
 8010c62:	7f7a      	ldrb	r2, [r7, #29]
 8010c64:	f107 0120 	add.w	r1, r7, #32
 8010c68:	440a      	add	r2, r1
 8010c6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010c6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010c7a:	bf00      	nop
 8010c7c:	3724      	adds	r7, #36	; 0x24
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	0802247c 	.word	0x0802247c
 8010c8c:	08022484 	.word	0x08022484

08010c90 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010c90:	b084      	sub	sp, #16
 8010c92:	b480      	push	{r7}
 8010c94:	b085      	sub	sp, #20
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
 8010c9a:	f107 001c 	add.w	r0, r7, #28
 8010c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8010ca6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010ca8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010caa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8010cae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8010cb2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8010cb6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	4313      	orrs	r3, r2
 8010cbc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	685a      	ldr	r2, [r3, #4]
 8010cc2:	4b07      	ldr	r3, [pc, #28]	; (8010ce0 <SDMMC_Init+0x50>)
 8010cc4:	4013      	ands	r3, r2
 8010cc6:	68fa      	ldr	r2, [r7, #12]
 8010cc8:	431a      	orrs	r2, r3
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010cce:	2300      	movs	r3, #0
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3714      	adds	r7, #20
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	b004      	add	sp, #16
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop
 8010ce0:	ffc02c00 	.word	0xffc02c00

08010ce4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	370c      	adds	r7, #12
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfc:	4770      	bx	lr

08010cfe <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010cfe:	b480      	push	{r7}
 8010d00:	b083      	sub	sp, #12
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	6078      	str	r0, [r7, #4]
 8010d06:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010d12:	2300      	movs	r3, #0
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	370c      	adds	r7, #12
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f043 0203 	orr.w	r2, r3, #3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010d34:	2002      	movs	r0, #2
 8010d36:	f7f5 fc05 	bl	8006544 <HAL_Delay>

  return HAL_OK;
 8010d3a:	2300      	movs	r3, #0
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3708      	adds	r7, #8
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f003 0303 	and.w	r3, r3, #3
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr

08010d60 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010d60:	b480      	push	{r7}
 8010d62:	b085      	sub	sp, #20
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010d7e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010d84:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010d8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010d8c:	68fa      	ldr	r2, [r7, #12]
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	68da      	ldr	r2, [r3, #12]
 8010d96:	4b06      	ldr	r3, [pc, #24]	; (8010db0 <SDMMC_SendCommand+0x50>)
 8010d98:	4013      	ands	r3, r2
 8010d9a:	68fa      	ldr	r2, [r7, #12]
 8010d9c:	431a      	orrs	r2, r3
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010da2:	2300      	movs	r3, #0
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3714      	adds	r7, #20
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr
 8010db0:	fffee0c0 	.word	0xfffee0c0

08010db4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	691b      	ldr	r3, [r3, #16]
 8010dc0:	b2db      	uxtb	r3, r3
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010dce:	b480      	push	{r7}
 8010dd0:	b085      	sub	sp, #20
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	6078      	str	r0, [r7, #4]
 8010dd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	3314      	adds	r3, #20
 8010ddc:	461a      	mov	r2, r3
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	4413      	add	r3, r2
 8010de2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	681b      	ldr	r3, [r3, #0]
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3714      	adds	r7, #20
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr

08010df4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b085      	sub	sp, #20
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	685a      	ldr	r2, [r3, #4]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010e1a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010e20:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010e26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010e28:	68fa      	ldr	r2, [r7, #12]
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	431a      	orrs	r2, r3
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010e3e:	2300      	movs	r3, #0

}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3714      	adds	r7, #20
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr

08010e4c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b088      	sub	sp, #32
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010e5a:	2310      	movs	r3, #16
 8010e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e64:	2300      	movs	r3, #0
 8010e66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e6e:	f107 0308 	add.w	r3, r7, #8
 8010e72:	4619      	mov	r1, r3
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f7ff ff73 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e7e:	2110      	movs	r1, #16
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f000 faa5 	bl	80113d0 <SDMMC_GetCmdResp1>
 8010e86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e88:	69fb      	ldr	r3, [r7, #28]
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3720      	adds	r7, #32
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}

08010e92 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010e92:	b580      	push	{r7, lr}
 8010e94:	b088      	sub	sp, #32
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	6078      	str	r0, [r7, #4]
 8010e9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010ea0:	2311      	movs	r3, #17
 8010ea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010eb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010eb4:	f107 0308 	add.w	r3, r7, #8
 8010eb8:	4619      	mov	r1, r3
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f7ff ff50 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ec4:	2111      	movs	r1, #17
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f000 fa82 	bl	80113d0 <SDMMC_GetCmdResp1>
 8010ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ece:	69fb      	ldr	r3, [r7, #28]
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3720      	adds	r7, #32
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b088      	sub	sp, #32
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010ee6:	2312      	movs	r3, #18
 8010ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010efa:	f107 0308 	add.w	r3, r7, #8
 8010efe:	4619      	mov	r1, r3
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7ff ff2d 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f0a:	2112      	movs	r1, #18
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fa5f 	bl	80113d0 <SDMMC_GetCmdResp1>
 8010f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f14:	69fb      	ldr	r3, [r7, #28]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3720      	adds	r7, #32
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b088      	sub	sp, #32
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
 8010f26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010f2c:	2318      	movs	r3, #24
 8010f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f36:	2300      	movs	r3, #0
 8010f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f40:	f107 0308 	add.w	r3, r7, #8
 8010f44:	4619      	mov	r1, r3
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7ff ff0a 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f50:	2118      	movs	r1, #24
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 fa3c 	bl	80113d0 <SDMMC_GetCmdResp1>
 8010f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f5a:	69fb      	ldr	r3, [r7, #28]
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3720      	adds	r7, #32
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}

08010f64 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b088      	sub	sp, #32
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
 8010f6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010f72:	2319      	movs	r3, #25
 8010f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f86:	f107 0308 	add.w	r3, r7, #8
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f7ff fee7 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f96:	2119      	movs	r1, #25
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 fa19 	bl	80113d0 <SDMMC_GetCmdResp1>
 8010f9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fa0:	69fb      	ldr	r3, [r7, #28]
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3720      	adds	r7, #32
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
	...

08010fac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b088      	sub	sp, #32
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010fb8:	230c      	movs	r3, #12
 8010fba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010fc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010fca:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	68db      	ldr	r3, [r3, #12]
 8010fd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fe4:	f107 0308 	add.w	r3, r7, #8
 8010fe8:	4619      	mov	r1, r3
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7ff feb8 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010ff0:	4a08      	ldr	r2, [pc, #32]	; (8011014 <SDMMC_CmdStopTransfer+0x68>)
 8010ff2:	210c      	movs	r1, #12
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 f9eb 	bl	80113d0 <SDMMC_GetCmdResp1>
 8010ffa:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8011008:	69fb      	ldr	r3, [r7, #28]
}
 801100a:	4618      	mov	r0, r3
 801100c:	3720      	adds	r7, #32
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
 8011012:	bf00      	nop
 8011014:	05f5e100 	.word	0x05f5e100

08011018 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b08a      	sub	sp, #40	; 0x28
 801101c:	af00      	add	r7, sp, #0
 801101e:	60f8      	str	r0, [r7, #12]
 8011020:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011028:	2307      	movs	r3, #7
 801102a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801102c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011030:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011032:	2300      	movs	r3, #0
 8011034:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801103a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801103c:	f107 0310 	add.w	r3, r7, #16
 8011040:	4619      	mov	r1, r3
 8011042:	68f8      	ldr	r0, [r7, #12]
 8011044:	f7ff fe8c 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011048:	f241 3288 	movw	r2, #5000	; 0x1388
 801104c:	2107      	movs	r1, #7
 801104e:	68f8      	ldr	r0, [r7, #12]
 8011050:	f000 f9be 	bl	80113d0 <SDMMC_GetCmdResp1>
 8011054:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011058:	4618      	mov	r0, r3
 801105a:	3728      	adds	r7, #40	; 0x28
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b088      	sub	sp, #32
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011068:	2300      	movs	r3, #0
 801106a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801106c:	2300      	movs	r3, #0
 801106e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011070:	2300      	movs	r3, #0
 8011072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011074:	2300      	movs	r3, #0
 8011076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801107c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801107e:	f107 0308 	add.w	r3, r7, #8
 8011082:	4619      	mov	r1, r3
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7ff fe6b 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 f976 	bl	801137c <SDMMC_GetCmdError>
 8011090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011092:	69fb      	ldr	r3, [r7, #28]
}
 8011094:	4618      	mov	r0, r3
 8011096:	3720      	adds	r7, #32
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b088      	sub	sp, #32
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80110a4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80110a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80110aa:	2308      	movs	r3, #8
 80110ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110b4:	2300      	movs	r3, #0
 80110b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110be:	f107 0308 	add.w	r3, r7, #8
 80110c2:	4619      	mov	r1, r3
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f7ff fe4b 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 fb6a 	bl	80117a4 <SDMMC_GetCmdResp7>
 80110d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110d2:	69fb      	ldr	r3, [r7, #28]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3720      	adds	r7, #32
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b088      	sub	sp, #32
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80110ea:	2337      	movs	r3, #55	; 0x37
 80110ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110f4:	2300      	movs	r3, #0
 80110f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110fe:	f107 0308 	add.w	r3, r7, #8
 8011102:	4619      	mov	r1, r3
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7ff fe2b 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801110a:	f241 3288 	movw	r2, #5000	; 0x1388
 801110e:	2137      	movs	r1, #55	; 0x37
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f000 f95d 	bl	80113d0 <SDMMC_GetCmdResp1>
 8011116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011118:	69fb      	ldr	r3, [r7, #28]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3720      	adds	r7, #32
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b088      	sub	sp, #32
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011130:	2329      	movs	r3, #41	; 0x29
 8011132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801113a:	2300      	movs	r3, #0
 801113c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011142:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011144:	f107 0308 	add.w	r3, r7, #8
 8011148:	4619      	mov	r1, r3
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f7ff fe08 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f000 fa75 	bl	8011640 <SDMMC_GetCmdResp3>
 8011156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011158:	69fb      	ldr	r3, [r7, #28]
}
 801115a:	4618      	mov	r0, r3
 801115c:	3720      	adds	r7, #32
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}

08011162 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011162:	b580      	push	{r7, lr}
 8011164:	b088      	sub	sp, #32
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
 801116a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011170:	2306      	movs	r3, #6
 8011172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801117a:	2300      	movs	r3, #0
 801117c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011182:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011184:	f107 0308 	add.w	r3, r7, #8
 8011188:	4619      	mov	r1, r3
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7ff fde8 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011190:	f241 3288 	movw	r2, #5000	; 0x1388
 8011194:	2106      	movs	r1, #6
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 f91a 	bl	80113d0 <SDMMC_GetCmdResp1>
 801119c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801119e:	69fb      	ldr	r3, [r7, #28]
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3720      	adds	r7, #32
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b088      	sub	sp, #32
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80111b0:	2300      	movs	r3, #0
 80111b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80111b4:	2333      	movs	r3, #51	; 0x33
 80111b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111be:	2300      	movs	r3, #0
 80111c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111c8:	f107 0308 	add.w	r3, r7, #8
 80111cc:	4619      	mov	r1, r3
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f7ff fdc6 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80111d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80111d8:	2133      	movs	r1, #51	; 0x33
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f000 f8f8 	bl	80113d0 <SDMMC_GetCmdResp1>
 80111e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111e2:	69fb      	ldr	r3, [r7, #28]
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3720      	adds	r7, #32
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b088      	sub	sp, #32
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80111f4:	2300      	movs	r3, #0
 80111f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80111f8:	2302      	movs	r3, #2
 80111fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80111fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011202:	2300      	movs	r3, #0
 8011204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801120a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801120c:	f107 0308 	add.w	r3, r7, #8
 8011210:	4619      	mov	r1, r3
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f7ff fda4 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f000 f9c9 	bl	80115b0 <SDMMC_GetCmdResp2>
 801121e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011220:	69fb      	ldr	r3, [r7, #28]
}
 8011222:	4618      	mov	r0, r3
 8011224:	3720      	adds	r7, #32
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}

0801122a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801122a:	b580      	push	{r7, lr}
 801122c:	b088      	sub	sp, #32
 801122e:	af00      	add	r7, sp, #0
 8011230:	6078      	str	r0, [r7, #4]
 8011232:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011238:	2309      	movs	r3, #9
 801123a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801123c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011242:	2300      	movs	r3, #0
 8011244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801124a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801124c:	f107 0308 	add.w	r3, r7, #8
 8011250:	4619      	mov	r1, r3
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f7ff fd84 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f000 f9a9 	bl	80115b0 <SDMMC_GetCmdResp2>
 801125e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011260:	69fb      	ldr	r3, [r7, #28]
}
 8011262:	4618      	mov	r0, r3
 8011264:	3720      	adds	r7, #32
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}

0801126a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801126a:	b580      	push	{r7, lr}
 801126c:	b088      	sub	sp, #32
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
 8011272:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011274:	2300      	movs	r3, #0
 8011276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011278:	2303      	movs	r3, #3
 801127a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801127c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011282:	2300      	movs	r3, #0
 8011284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801128a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801128c:	f107 0308 	add.w	r3, r7, #8
 8011290:	4619      	mov	r1, r3
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f7ff fd64 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011298:	683a      	ldr	r2, [r7, #0]
 801129a:	2103      	movs	r1, #3
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f000 fa0b 	bl	80116b8 <SDMMC_GetCmdResp6>
 80112a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112a4:	69fb      	ldr	r3, [r7, #28]
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3720      	adds	r7, #32
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}

080112ae <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80112ae:	b580      	push	{r7, lr}
 80112b0:	b088      	sub	sp, #32
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	6078      	str	r0, [r7, #4]
 80112b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80112bc:	230d      	movs	r3, #13
 80112be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112c6:	2300      	movs	r3, #0
 80112c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112d0:	f107 0308 	add.w	r3, r7, #8
 80112d4:	4619      	mov	r1, r3
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f7ff fd42 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80112dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80112e0:	210d      	movs	r1, #13
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f000 f874 	bl	80113d0 <SDMMC_GetCmdResp1>
 80112e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112ea:	69fb      	ldr	r3, [r7, #28]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3720      	adds	r7, #32
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b088      	sub	sp, #32
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80112fc:	2300      	movs	r3, #0
 80112fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011300:	230d      	movs	r3, #13
 8011302:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801130a:	2300      	movs	r3, #0
 801130c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801130e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011312:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011314:	f107 0308 	add.w	r3, r7, #8
 8011318:	4619      	mov	r1, r3
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f7ff fd20 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011320:	f241 3288 	movw	r2, #5000	; 0x1388
 8011324:	210d      	movs	r1, #13
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 f852 	bl	80113d0 <SDMMC_GetCmdResp1>
 801132c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801132e:	69fb      	ldr	r3, [r7, #28]
}
 8011330:	4618      	mov	r0, r3
 8011332:	3720      	adds	r7, #32
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b088      	sub	sp, #32
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8011340:	2300      	movs	r3, #0
 8011342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8011344:	230b      	movs	r3, #11
 8011346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011348:	f44f 7380 	mov.w	r3, #256	; 0x100
 801134c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801134e:	2300      	movs	r3, #0
 8011350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011356:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011358:	f107 0308 	add.w	r3, r7, #8
 801135c:	4619      	mov	r1, r3
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f7ff fcfe 	bl	8010d60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8011364:	f241 3288 	movw	r2, #5000	; 0x1388
 8011368:	210b      	movs	r1, #11
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f000 f830 	bl	80113d0 <SDMMC_GetCmdResp1>
 8011370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011372:	69fb      	ldr	r3, [r7, #28]
}
 8011374:	4618      	mov	r0, r3
 8011376:	3720      	adds	r7, #32
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801137c:	b490      	push	{r4, r7}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011384:	4b0f      	ldr	r3, [pc, #60]	; (80113c4 <SDMMC_GetCmdError+0x48>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	4a0f      	ldr	r2, [pc, #60]	; (80113c8 <SDMMC_GetCmdError+0x4c>)
 801138a:	fba2 2303 	umull	r2, r3, r2, r3
 801138e:	0a5b      	lsrs	r3, r3, #9
 8011390:	f241 3288 	movw	r2, #5000	; 0x1388
 8011394:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011398:	4623      	mov	r3, r4
 801139a:	1e5c      	subs	r4, r3, #1
 801139c:	2b00      	cmp	r3, #0
 801139e:	d102      	bne.n	80113a6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80113a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80113a4:	e009      	b.n	80113ba <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d0f2      	beq.n	8011398 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	4a05      	ldr	r2, [pc, #20]	; (80113cc <SDMMC_GetCmdError+0x50>)
 80113b6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80113b8:	2300      	movs	r3, #0
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3708      	adds	r7, #8
 80113be:	46bd      	mov	sp, r7
 80113c0:	bc90      	pop	{r4, r7}
 80113c2:	4770      	bx	lr
 80113c4:	20000038 	.word	0x20000038
 80113c8:	10624dd3 	.word	0x10624dd3
 80113cc:	002000c5 	.word	0x002000c5

080113d0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80113d0:	b590      	push	{r4, r7, lr}
 80113d2:	b087      	sub	sp, #28
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	460b      	mov	r3, r1
 80113da:	607a      	str	r2, [r7, #4]
 80113dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80113de:	4b6f      	ldr	r3, [pc, #444]	; (801159c <SDMMC_GetCmdResp1+0x1cc>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	4a6f      	ldr	r2, [pc, #444]	; (80115a0 <SDMMC_GetCmdResp1+0x1d0>)
 80113e4:	fba2 2303 	umull	r2, r3, r2, r3
 80113e8:	0a5b      	lsrs	r3, r3, #9
 80113ea:	687a      	ldr	r2, [r7, #4]
 80113ec:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80113f0:	4623      	mov	r3, r4
 80113f2:	1e5c      	subs	r4, r3, #1
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d102      	bne.n	80113fe <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80113f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80113fc:	e0c9      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011402:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011404:	697a      	ldr	r2, [r7, #20]
 8011406:	4b67      	ldr	r3, [pc, #412]	; (80115a4 <SDMMC_GetCmdResp1+0x1d4>)
 8011408:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801140a:	2b00      	cmp	r3, #0
 801140c:	d0f0      	beq.n	80113f0 <SDMMC_GetCmdResp1+0x20>
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011414:	2b00      	cmp	r3, #0
 8011416:	d1eb      	bne.n	80113f0 <SDMMC_GetCmdResp1+0x20>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801141c:	f003 0304 	and.w	r3, r3, #4
 8011420:	2b00      	cmp	r3, #0
 8011422:	d004      	beq.n	801142e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2204      	movs	r2, #4
 8011428:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801142a:	2304      	movs	r3, #4
 801142c:	e0b1      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011432:	f003 0301 	and.w	r3, r3, #1
 8011436:	2b00      	cmp	r3, #0
 8011438:	d004      	beq.n	8011444 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2201      	movs	r2, #1
 801143e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011440:	2301      	movs	r3, #1
 8011442:	e0a6      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	4a58      	ldr	r2, [pc, #352]	; (80115a8 <SDMMC_GetCmdResp1+0x1d8>)
 8011448:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f7ff fcb2 	bl	8010db4 <SDMMC_GetCommandResponse>
 8011450:	4603      	mov	r3, r0
 8011452:	461a      	mov	r2, r3
 8011454:	7afb      	ldrb	r3, [r7, #11]
 8011456:	4293      	cmp	r3, r2
 8011458:	d001      	beq.n	801145e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801145a:	2301      	movs	r3, #1
 801145c:	e099      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801145e:	2100      	movs	r1, #0
 8011460:	68f8      	ldr	r0, [r7, #12]
 8011462:	f7ff fcb4 	bl	8010dce <SDMMC_GetResponse>
 8011466:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011468:	693a      	ldr	r2, [r7, #16]
 801146a:	4b50      	ldr	r3, [pc, #320]	; (80115ac <SDMMC_GetCmdResp1+0x1dc>)
 801146c:	4013      	ands	r3, r2
 801146e:	2b00      	cmp	r3, #0
 8011470:	d101      	bne.n	8011476 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8011472:	2300      	movs	r3, #0
 8011474:	e08d      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	2b00      	cmp	r3, #0
 801147a:	da02      	bge.n	8011482 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801147c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011480:	e087      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011482:	693b      	ldr	r3, [r7, #16]
 8011484:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011488:	2b00      	cmp	r3, #0
 801148a:	d001      	beq.n	8011490 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801148c:	2340      	movs	r3, #64	; 0x40
 801148e:	e080      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011496:	2b00      	cmp	r3, #0
 8011498:	d001      	beq.n	801149e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801149a:	2380      	movs	r3, #128	; 0x80
 801149c:	e079      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d002      	beq.n	80114ae <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80114a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114ac:	e071      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d002      	beq.n	80114be <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80114b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114bc:	e069      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d002      	beq.n	80114ce <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80114c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114cc:	e061      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d002      	beq.n	80114de <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80114d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80114dc:	e059      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d002      	beq.n	80114ee <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80114e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114ec:	e051      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d002      	beq.n	80114fe <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80114f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80114fc:	e049      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011504:	2b00      	cmp	r3, #0
 8011506:	d002      	beq.n	801150e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011508:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801150c:	e041      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011514:	2b00      	cmp	r3, #0
 8011516:	d002      	beq.n	801151e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8011518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801151c:	e039      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011524:	2b00      	cmp	r3, #0
 8011526:	d002      	beq.n	801152e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801152c:	e031      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011534:	2b00      	cmp	r3, #0
 8011536:	d002      	beq.n	801153e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011538:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801153c:	e029      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011544:	2b00      	cmp	r3, #0
 8011546:	d002      	beq.n	801154e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011548:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801154c:	e021      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011554:	2b00      	cmp	r3, #0
 8011556:	d002      	beq.n	801155e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011558:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801155c:	e019      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011564:	2b00      	cmp	r3, #0
 8011566:	d002      	beq.n	801156e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011568:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801156c:	e011      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011574:	2b00      	cmp	r3, #0
 8011576:	d002      	beq.n	801157e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801157c:	e009      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	f003 0308 	and.w	r3, r3, #8
 8011584:	2b00      	cmp	r3, #0
 8011586:	d002      	beq.n	801158e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011588:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801158c:	e001      	b.n	8011592 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801158e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011592:	4618      	mov	r0, r3
 8011594:	371c      	adds	r7, #28
 8011596:	46bd      	mov	sp, r7
 8011598:	bd90      	pop	{r4, r7, pc}
 801159a:	bf00      	nop
 801159c:	20000038 	.word	0x20000038
 80115a0:	10624dd3 	.word	0x10624dd3
 80115a4:	00200045 	.word	0x00200045
 80115a8:	002000c5 	.word	0x002000c5
 80115ac:	fdffe008 	.word	0xfdffe008

080115b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80115b0:	b490      	push	{r4, r7}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80115b8:	4b1e      	ldr	r3, [pc, #120]	; (8011634 <SDMMC_GetCmdResp2+0x84>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	4a1e      	ldr	r2, [pc, #120]	; (8011638 <SDMMC_GetCmdResp2+0x88>)
 80115be:	fba2 2303 	umull	r2, r3, r2, r3
 80115c2:	0a5b      	lsrs	r3, r3, #9
 80115c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80115c8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80115cc:	4623      	mov	r3, r4
 80115ce:	1e5c      	subs	r4, r3, #1
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d102      	bne.n	80115da <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80115d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80115d8:	e026      	b.n	8011628 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d0f0      	beq.n	80115cc <SDMMC_GetCmdResp2+0x1c>
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d1eb      	bne.n	80115cc <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115f8:	f003 0304 	and.w	r3, r3, #4
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d004      	beq.n	801160a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2204      	movs	r2, #4
 8011604:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011606:	2304      	movs	r3, #4
 8011608:	e00e      	b.n	8011628 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801160e:	f003 0301 	and.w	r3, r3, #1
 8011612:	2b00      	cmp	r3, #0
 8011614:	d004      	beq.n	8011620 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2201      	movs	r2, #1
 801161a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801161c:	2301      	movs	r3, #1
 801161e:	e003      	b.n	8011628 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4a06      	ldr	r2, [pc, #24]	; (801163c <SDMMC_GetCmdResp2+0x8c>)
 8011624:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011626:	2300      	movs	r3, #0
}
 8011628:	4618      	mov	r0, r3
 801162a:	3710      	adds	r7, #16
 801162c:	46bd      	mov	sp, r7
 801162e:	bc90      	pop	{r4, r7}
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop
 8011634:	20000038 	.word	0x20000038
 8011638:	10624dd3 	.word	0x10624dd3
 801163c:	002000c5 	.word	0x002000c5

08011640 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011640:	b490      	push	{r4, r7}
 8011642:	b084      	sub	sp, #16
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011648:	4b18      	ldr	r3, [pc, #96]	; (80116ac <SDMMC_GetCmdResp3+0x6c>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	4a18      	ldr	r2, [pc, #96]	; (80116b0 <SDMMC_GetCmdResp3+0x70>)
 801164e:	fba2 2303 	umull	r2, r3, r2, r3
 8011652:	0a5b      	lsrs	r3, r3, #9
 8011654:	f241 3288 	movw	r2, #5000	; 0x1388
 8011658:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 801165c:	4623      	mov	r3, r4
 801165e:	1e5c      	subs	r4, r3, #1
 8011660:	2b00      	cmp	r3, #0
 8011662:	d102      	bne.n	801166a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011664:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011668:	e01b      	b.n	80116a2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801166e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011676:	2b00      	cmp	r3, #0
 8011678:	d0f0      	beq.n	801165c <SDMMC_GetCmdResp3+0x1c>
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1eb      	bne.n	801165c <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011688:	f003 0304 	and.w	r3, r3, #4
 801168c:	2b00      	cmp	r3, #0
 801168e:	d004      	beq.n	801169a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2204      	movs	r2, #4
 8011694:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011696:	2304      	movs	r3, #4
 8011698:	e003      	b.n	80116a2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4a05      	ldr	r2, [pc, #20]	; (80116b4 <SDMMC_GetCmdResp3+0x74>)
 801169e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80116a0:	2300      	movs	r3, #0
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bc90      	pop	{r4, r7}
 80116aa:	4770      	bx	lr
 80116ac:	20000038 	.word	0x20000038
 80116b0:	10624dd3 	.word	0x10624dd3
 80116b4:	002000c5 	.word	0x002000c5

080116b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80116b8:	b590      	push	{r4, r7, lr}
 80116ba:	b087      	sub	sp, #28
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	460b      	mov	r3, r1
 80116c2:	607a      	str	r2, [r7, #4]
 80116c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116c6:	4b34      	ldr	r3, [pc, #208]	; (8011798 <SDMMC_GetCmdResp6+0xe0>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	4a34      	ldr	r2, [pc, #208]	; (801179c <SDMMC_GetCmdResp6+0xe4>)
 80116cc:	fba2 2303 	umull	r2, r3, r2, r3
 80116d0:	0a5b      	lsrs	r3, r3, #9
 80116d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80116d6:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80116da:	4623      	mov	r3, r4
 80116dc:	1e5c      	subs	r4, r3, #1
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d102      	bne.n	80116e8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80116e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80116e6:	e052      	b.n	801178e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116ec:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d0f0      	beq.n	80116da <SDMMC_GetCmdResp6+0x22>
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d1eb      	bne.n	80116da <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011706:	f003 0304 	and.w	r3, r3, #4
 801170a:	2b00      	cmp	r3, #0
 801170c:	d004      	beq.n	8011718 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2204      	movs	r2, #4
 8011712:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011714:	2304      	movs	r3, #4
 8011716:	e03a      	b.n	801178e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801171c:	f003 0301 	and.w	r3, r3, #1
 8011720:	2b00      	cmp	r3, #0
 8011722:	d004      	beq.n	801172e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2201      	movs	r2, #1
 8011728:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801172a:	2301      	movs	r3, #1
 801172c:	e02f      	b.n	801178e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801172e:	68f8      	ldr	r0, [r7, #12]
 8011730:	f7ff fb40 	bl	8010db4 <SDMMC_GetCommandResponse>
 8011734:	4603      	mov	r3, r0
 8011736:	461a      	mov	r2, r3
 8011738:	7afb      	ldrb	r3, [r7, #11]
 801173a:	4293      	cmp	r3, r2
 801173c:	d001      	beq.n	8011742 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801173e:	2301      	movs	r3, #1
 8011740:	e025      	b.n	801178e <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	4a16      	ldr	r2, [pc, #88]	; (80117a0 <SDMMC_GetCmdResp6+0xe8>)
 8011746:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011748:	2100      	movs	r1, #0
 801174a:	68f8      	ldr	r0, [r7, #12]
 801174c:	f7ff fb3f 	bl	8010dce <SDMMC_GetResponse>
 8011750:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011758:	2b00      	cmp	r3, #0
 801175a:	d106      	bne.n	801176a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	0c1b      	lsrs	r3, r3, #16
 8011760:	b29a      	uxth	r2, r3
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011766:	2300      	movs	r3, #0
 8011768:	e011      	b.n	801178e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011770:	2b00      	cmp	r3, #0
 8011772:	d002      	beq.n	801177a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011778:	e009      	b.n	801178e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011780:	2b00      	cmp	r3, #0
 8011782:	d002      	beq.n	801178a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011788:	e001      	b.n	801178e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801178a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801178e:	4618      	mov	r0, r3
 8011790:	371c      	adds	r7, #28
 8011792:	46bd      	mov	sp, r7
 8011794:	bd90      	pop	{r4, r7, pc}
 8011796:	bf00      	nop
 8011798:	20000038 	.word	0x20000038
 801179c:	10624dd3 	.word	0x10624dd3
 80117a0:	002000c5 	.word	0x002000c5

080117a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80117a4:	b490      	push	{r4, r7}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80117ac:	4b21      	ldr	r3, [pc, #132]	; (8011834 <SDMMC_GetCmdResp7+0x90>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	4a21      	ldr	r2, [pc, #132]	; (8011838 <SDMMC_GetCmdResp7+0x94>)
 80117b2:	fba2 2303 	umull	r2, r3, r2, r3
 80117b6:	0a5b      	lsrs	r3, r3, #9
 80117b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80117bc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80117c0:	4623      	mov	r3, r4
 80117c2:	1e5c      	subs	r4, r3, #1
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d102      	bne.n	80117ce <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80117c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80117cc:	e02c      	b.n	8011828 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d0f0      	beq.n	80117c0 <SDMMC_GetCmdResp7+0x1c>
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d1eb      	bne.n	80117c0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117ec:	f003 0304 	and.w	r3, r3, #4
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d004      	beq.n	80117fe <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2204      	movs	r2, #4
 80117f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80117fa:	2304      	movs	r3, #4
 80117fc:	e014      	b.n	8011828 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011802:	f003 0301 	and.w	r3, r3, #1
 8011806:	2b00      	cmp	r3, #0
 8011808:	d004      	beq.n	8011814 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2201      	movs	r2, #1
 801180e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011810:	2301      	movs	r3, #1
 8011812:	e009      	b.n	8011828 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801181c:	2b00      	cmp	r3, #0
 801181e:	d002      	beq.n	8011826 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2240      	movs	r2, #64	; 0x40
 8011824:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011826:	2300      	movs	r3, #0

}
 8011828:	4618      	mov	r0, r3
 801182a:	3710      	adds	r7, #16
 801182c:	46bd      	mov	sp, r7
 801182e:	bc90      	pop	{r4, r7}
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop
 8011834:	20000038 	.word	0x20000038
 8011838:	10624dd3 	.word	0x10624dd3

0801183c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801183c:	b480      	push	{r7}
 801183e:	b087      	sub	sp, #28
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	4613      	mov	r3, r2
 8011848:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801184a:	79fb      	ldrb	r3, [r7, #7]
 801184c:	2b02      	cmp	r3, #2
 801184e:	d165      	bne.n	801191c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	4a3e      	ldr	r2, [pc, #248]	; (801194c <USB_SetTurnaroundTime+0x110>)
 8011854:	4293      	cmp	r3, r2
 8011856:	d906      	bls.n	8011866 <USB_SetTurnaroundTime+0x2a>
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	4a3d      	ldr	r2, [pc, #244]	; (8011950 <USB_SetTurnaroundTime+0x114>)
 801185c:	4293      	cmp	r3, r2
 801185e:	d202      	bcs.n	8011866 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011860:	230f      	movs	r3, #15
 8011862:	617b      	str	r3, [r7, #20]
 8011864:	e05c      	b.n	8011920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	4a39      	ldr	r2, [pc, #228]	; (8011950 <USB_SetTurnaroundTime+0x114>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d306      	bcc.n	801187c <USB_SetTurnaroundTime+0x40>
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	4a38      	ldr	r2, [pc, #224]	; (8011954 <USB_SetTurnaroundTime+0x118>)
 8011872:	4293      	cmp	r3, r2
 8011874:	d202      	bcs.n	801187c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011876:	230e      	movs	r3, #14
 8011878:	617b      	str	r3, [r7, #20]
 801187a:	e051      	b.n	8011920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	4a35      	ldr	r2, [pc, #212]	; (8011954 <USB_SetTurnaroundTime+0x118>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d306      	bcc.n	8011892 <USB_SetTurnaroundTime+0x56>
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	4a34      	ldr	r2, [pc, #208]	; (8011958 <USB_SetTurnaroundTime+0x11c>)
 8011888:	4293      	cmp	r3, r2
 801188a:	d202      	bcs.n	8011892 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801188c:	230d      	movs	r3, #13
 801188e:	617b      	str	r3, [r7, #20]
 8011890:	e046      	b.n	8011920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	4a30      	ldr	r2, [pc, #192]	; (8011958 <USB_SetTurnaroundTime+0x11c>)
 8011896:	4293      	cmp	r3, r2
 8011898:	d306      	bcc.n	80118a8 <USB_SetTurnaroundTime+0x6c>
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	4a2f      	ldr	r2, [pc, #188]	; (801195c <USB_SetTurnaroundTime+0x120>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d802      	bhi.n	80118a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80118a2:	230c      	movs	r3, #12
 80118a4:	617b      	str	r3, [r7, #20]
 80118a6:	e03b      	b.n	8011920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	4a2c      	ldr	r2, [pc, #176]	; (801195c <USB_SetTurnaroundTime+0x120>)
 80118ac:	4293      	cmp	r3, r2
 80118ae:	d906      	bls.n	80118be <USB_SetTurnaroundTime+0x82>
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	4a2b      	ldr	r2, [pc, #172]	; (8011960 <USB_SetTurnaroundTime+0x124>)
 80118b4:	4293      	cmp	r3, r2
 80118b6:	d802      	bhi.n	80118be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80118b8:	230b      	movs	r3, #11
 80118ba:	617b      	str	r3, [r7, #20]
 80118bc:	e030      	b.n	8011920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	4a27      	ldr	r2, [pc, #156]	; (8011960 <USB_SetTurnaroundTime+0x124>)
 80118c2:	4293      	cmp	r3, r2
 80118c4:	d906      	bls.n	80118d4 <USB_SetTurnaroundTime+0x98>
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	4a26      	ldr	r2, [pc, #152]	; (8011964 <USB_SetTurnaroundTime+0x128>)
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d802      	bhi.n	80118d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80118ce:	230a      	movs	r3, #10
 80118d0:	617b      	str	r3, [r7, #20]
 80118d2:	e025      	b.n	8011920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	4a23      	ldr	r2, [pc, #140]	; (8011964 <USB_SetTurnaroundTime+0x128>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	d906      	bls.n	80118ea <USB_SetTurnaroundTime+0xae>
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	4a22      	ldr	r2, [pc, #136]	; (8011968 <USB_SetTurnaroundTime+0x12c>)
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d202      	bcs.n	80118ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80118e4:	2309      	movs	r3, #9
 80118e6:	617b      	str	r3, [r7, #20]
 80118e8:	e01a      	b.n	8011920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	4a1e      	ldr	r2, [pc, #120]	; (8011968 <USB_SetTurnaroundTime+0x12c>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d306      	bcc.n	8011900 <USB_SetTurnaroundTime+0xc4>
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	4a1d      	ldr	r2, [pc, #116]	; (801196c <USB_SetTurnaroundTime+0x130>)
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d802      	bhi.n	8011900 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80118fa:	2308      	movs	r3, #8
 80118fc:	617b      	str	r3, [r7, #20]
 80118fe:	e00f      	b.n	8011920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	4a1a      	ldr	r2, [pc, #104]	; (801196c <USB_SetTurnaroundTime+0x130>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d906      	bls.n	8011916 <USB_SetTurnaroundTime+0xda>
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	4a19      	ldr	r2, [pc, #100]	; (8011970 <USB_SetTurnaroundTime+0x134>)
 801190c:	4293      	cmp	r3, r2
 801190e:	d202      	bcs.n	8011916 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011910:	2307      	movs	r3, #7
 8011912:	617b      	str	r3, [r7, #20]
 8011914:	e004      	b.n	8011920 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011916:	2306      	movs	r3, #6
 8011918:	617b      	str	r3, [r7, #20]
 801191a:	e001      	b.n	8011920 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801191c:	2309      	movs	r3, #9
 801191e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	68da      	ldr	r2, [r3, #12]
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	029b      	lsls	r3, r3, #10
 8011934:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011938:	431a      	orrs	r2, r3
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801193e:	2300      	movs	r3, #0
}
 8011940:	4618      	mov	r0, r3
 8011942:	371c      	adds	r7, #28
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr
 801194c:	00d8acbf 	.word	0x00d8acbf
 8011950:	00e4e1c0 	.word	0x00e4e1c0
 8011954:	00f42400 	.word	0x00f42400
 8011958:	01067380 	.word	0x01067380
 801195c:	011a499f 	.word	0x011a499f
 8011960:	01312cff 	.word	0x01312cff
 8011964:	014ca43f 	.word	0x014ca43f
 8011968:	016e3600 	.word	0x016e3600
 801196c:	01a6ab1f 	.word	0x01a6ab1f
 8011970:	01e84800 	.word	0x01e84800

08011974 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011974:	b480      	push	{r7}
 8011976:	b085      	sub	sp, #20
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801197e:	2300      	movs	r3, #0
 8011980:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	019b      	lsls	r3, r3, #6
 8011986:	f043 0220 	orr.w	r2, r3, #32
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	3301      	adds	r3, #1
 8011992:	60fb      	str	r3, [r7, #12]
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	4a09      	ldr	r2, [pc, #36]	; (80119bc <USB_FlushTxFifo+0x48>)
 8011998:	4293      	cmp	r3, r2
 801199a:	d901      	bls.n	80119a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801199c:	2303      	movs	r3, #3
 801199e:	e006      	b.n	80119ae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	691b      	ldr	r3, [r3, #16]
 80119a4:	f003 0320 	and.w	r3, r3, #32
 80119a8:	2b20      	cmp	r3, #32
 80119aa:	d0f0      	beq.n	801198e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3714      	adds	r7, #20
 80119b2:	46bd      	mov	sp, r7
 80119b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b8:	4770      	bx	lr
 80119ba:	bf00      	nop
 80119bc:	00030d40 	.word	0x00030d40

080119c0 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80119c0:	b480      	push	{r7}
 80119c2:	b087      	sub	sp, #28
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119d2:	689b      	ldr	r3, [r3, #8]
 80119d4:	f003 0306 	and.w	r3, r3, #6
 80119d8:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2b02      	cmp	r3, #2
 80119de:	d002      	beq.n	80119e6 <USB_GetDevSpeed+0x26>
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2b06      	cmp	r3, #6
 80119e4:	d102      	bne.n	80119ec <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80119e6:	2302      	movs	r3, #2
 80119e8:	75fb      	strb	r3, [r7, #23]
 80119ea:	e001      	b.n	80119f0 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80119ec:	230f      	movs	r3, #15
 80119ee:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80119f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	371c      	adds	r7, #28
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr

080119fe <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80119fe:	b480      	push	{r7}
 8011a00:	b085      	sub	sp, #20
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
 8011a06:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	785b      	ldrb	r3, [r3, #1]
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d13a      	bne.n	8011a90 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a20:	69da      	ldr	r2, [r3, #28]
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	781b      	ldrb	r3, [r3, #0]
 8011a26:	f003 030f 	and.w	r3, r3, #15
 8011a2a:	2101      	movs	r1, #1
 8011a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	68f9      	ldr	r1, [r7, #12]
 8011a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a38:	4313      	orrs	r3, r2
 8011a3a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	015a      	lsls	r2, r3, #5
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	4413      	add	r3, r2
 8011a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d155      	bne.n	8011afe <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	015a      	lsls	r2, r3, #5
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	4413      	add	r3, r2
 8011a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a5e:	681a      	ldr	r2, [r3, #0]
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	78db      	ldrb	r3, [r3, #3]
 8011a6c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a6e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	059b      	lsls	r3, r3, #22
 8011a74:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a76:	4313      	orrs	r3, r2
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	0151      	lsls	r1, r2, #5
 8011a7c:	68fa      	ldr	r2, [r7, #12]
 8011a7e:	440a      	add	r2, r1
 8011a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a8c:	6013      	str	r3, [r2, #0]
 8011a8e:	e036      	b.n	8011afe <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a96:	69da      	ldr	r2, [r3, #28]
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	f003 030f 	and.w	r3, r3, #15
 8011aa0:	2101      	movs	r1, #1
 8011aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8011aa6:	041b      	lsls	r3, r3, #16
 8011aa8:	68f9      	ldr	r1, [r7, #12]
 8011aaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011aae:	4313      	orrs	r3, r2
 8011ab0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	015a      	lsls	r2, r3, #5
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	4413      	add	r3, r2
 8011aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d11a      	bne.n	8011afe <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	015a      	lsls	r2, r3, #5
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	4413      	add	r3, r2
 8011ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ad4:	681a      	ldr	r2, [r3, #0]
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	689b      	ldr	r3, [r3, #8]
 8011ada:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	78db      	ldrb	r3, [r3, #3]
 8011ae2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011ae4:	430b      	orrs	r3, r1
 8011ae6:	4313      	orrs	r3, r2
 8011ae8:	68ba      	ldr	r2, [r7, #8]
 8011aea:	0151      	lsls	r1, r2, #5
 8011aec:	68fa      	ldr	r2, [r7, #12]
 8011aee:	440a      	add	r2, r1
 8011af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011afc:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011afe:	2300      	movs	r3, #0
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3714      	adds	r7, #20
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr

08011b0c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b086      	sub	sp, #24
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	785b      	ldrb	r3, [r3, #1]
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	f040 810a 	bne.w	8011d3e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	695b      	ldr	r3, [r3, #20]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d132      	bne.n	8011b98 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	015a      	lsls	r2, r3, #5
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	4413      	add	r3, r2
 8011b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b3e:	691b      	ldr	r3, [r3, #16]
 8011b40:	693a      	ldr	r2, [r7, #16]
 8011b42:	0151      	lsls	r1, r2, #5
 8011b44:	697a      	ldr	r2, [r7, #20]
 8011b46:	440a      	add	r2, r1
 8011b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011b50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011b54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	015a      	lsls	r2, r3, #5
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b62:	691b      	ldr	r3, [r3, #16]
 8011b64:	693a      	ldr	r2, [r7, #16]
 8011b66:	0151      	lsls	r1, r2, #5
 8011b68:	697a      	ldr	r2, [r7, #20]
 8011b6a:	440a      	add	r2, r1
 8011b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	015a      	lsls	r2, r3, #5
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	4413      	add	r3, r2
 8011b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b82:	691b      	ldr	r3, [r3, #16]
 8011b84:	693a      	ldr	r2, [r7, #16]
 8011b86:	0151      	lsls	r1, r2, #5
 8011b88:	697a      	ldr	r2, [r7, #20]
 8011b8a:	440a      	add	r2, r1
 8011b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b90:	0cdb      	lsrs	r3, r3, #19
 8011b92:	04db      	lsls	r3, r3, #19
 8011b94:	6113      	str	r3, [r2, #16]
 8011b96:	e074      	b.n	8011c82 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	015a      	lsls	r2, r3, #5
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	4413      	add	r3, r2
 8011ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ba4:	691b      	ldr	r3, [r3, #16]
 8011ba6:	693a      	ldr	r2, [r7, #16]
 8011ba8:	0151      	lsls	r1, r2, #5
 8011baa:	697a      	ldr	r2, [r7, #20]
 8011bac:	440a      	add	r2, r1
 8011bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bb2:	0cdb      	lsrs	r3, r3, #19
 8011bb4:	04db      	lsls	r3, r3, #19
 8011bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	015a      	lsls	r2, r3, #5
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bc4:	691b      	ldr	r3, [r3, #16]
 8011bc6:	693a      	ldr	r2, [r7, #16]
 8011bc8:	0151      	lsls	r1, r2, #5
 8011bca:	697a      	ldr	r2, [r7, #20]
 8011bcc:	440a      	add	r2, r1
 8011bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011bd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011bda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	015a      	lsls	r2, r3, #5
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	4413      	add	r3, r2
 8011be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011be8:	691a      	ldr	r2, [r3, #16]
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	6959      	ldr	r1, [r3, #20]
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	689b      	ldr	r3, [r3, #8]
 8011bf2:	440b      	add	r3, r1
 8011bf4:	1e59      	subs	r1, r3, #1
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	689b      	ldr	r3, [r3, #8]
 8011bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8011bfe:	04d9      	lsls	r1, r3, #19
 8011c00:	4baf      	ldr	r3, [pc, #700]	; (8011ec0 <USB_EPStartXfer+0x3b4>)
 8011c02:	400b      	ands	r3, r1
 8011c04:	6939      	ldr	r1, [r7, #16]
 8011c06:	0148      	lsls	r0, r1, #5
 8011c08:	6979      	ldr	r1, [r7, #20]
 8011c0a:	4401      	add	r1, r0
 8011c0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011c10:	4313      	orrs	r3, r2
 8011c12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	015a      	lsls	r2, r3, #5
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c20:	691a      	ldr	r2, [r3, #16]
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	695b      	ldr	r3, [r3, #20]
 8011c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011c2a:	6939      	ldr	r1, [r7, #16]
 8011c2c:	0148      	lsls	r0, r1, #5
 8011c2e:	6979      	ldr	r1, [r7, #20]
 8011c30:	4401      	add	r1, r0
 8011c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011c36:	4313      	orrs	r3, r2
 8011c38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	78db      	ldrb	r3, [r3, #3]
 8011c3e:	2b01      	cmp	r3, #1
 8011c40:	d11f      	bne.n	8011c82 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	015a      	lsls	r2, r3, #5
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	4413      	add	r3, r2
 8011c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c4e:	691b      	ldr	r3, [r3, #16]
 8011c50:	693a      	ldr	r2, [r7, #16]
 8011c52:	0151      	lsls	r1, r2, #5
 8011c54:	697a      	ldr	r2, [r7, #20]
 8011c56:	440a      	add	r2, r1
 8011c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011c60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	015a      	lsls	r2, r3, #5
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	4413      	add	r3, r2
 8011c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c6e:	691b      	ldr	r3, [r3, #16]
 8011c70:	693a      	ldr	r2, [r7, #16]
 8011c72:	0151      	lsls	r1, r2, #5
 8011c74:	697a      	ldr	r2, [r7, #20]
 8011c76:	440a      	add	r2, r1
 8011c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011c80:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	015a      	lsls	r2, r3, #5
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	4413      	add	r3, r2
 8011c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	693a      	ldr	r2, [r7, #16]
 8011c92:	0151      	lsls	r1, r2, #5
 8011c94:	697a      	ldr	r2, [r7, #20]
 8011c96:	440a      	add	r2, r1
 8011c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ca0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	78db      	ldrb	r3, [r3, #3]
 8011ca6:	2b01      	cmp	r3, #1
 8011ca8:	d015      	beq.n	8011cd6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	695b      	ldr	r3, [r3, #20]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	f000 8100 	beq.w	8011eb4 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	f003 030f 	and.w	r3, r3, #15
 8011cc4:	2101      	movs	r1, #1
 8011cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8011cca:	6979      	ldr	r1, [r7, #20]
 8011ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011cd0:	4313      	orrs	r3, r2
 8011cd2:	634b      	str	r3, [r1, #52]	; 0x34
 8011cd4:	e0ee      	b.n	8011eb4 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cdc:	689b      	ldr	r3, [r3, #8]
 8011cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d110      	bne.n	8011d08 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	015a      	lsls	r2, r3, #5
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	4413      	add	r3, r2
 8011cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	693a      	ldr	r2, [r7, #16]
 8011cf6:	0151      	lsls	r1, r2, #5
 8011cf8:	697a      	ldr	r2, [r7, #20]
 8011cfa:	440a      	add	r2, r1
 8011cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011d04:	6013      	str	r3, [r2, #0]
 8011d06:	e00f      	b.n	8011d28 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	015a      	lsls	r2, r3, #5
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	4413      	add	r3, r2
 8011d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	693a      	ldr	r2, [r7, #16]
 8011d18:	0151      	lsls	r1, r2, #5
 8011d1a:	697a      	ldr	r2, [r7, #20]
 8011d1c:	440a      	add	r2, r1
 8011d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d26:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	68d9      	ldr	r1, [r3, #12]
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	781a      	ldrb	r2, [r3, #0]
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	695b      	ldr	r3, [r3, #20]
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 f9e2 	bl	8012100 <USB_WritePacket>
 8011d3c:	e0ba      	b.n	8011eb4 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	015a      	lsls	r2, r3, #5
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	4413      	add	r3, r2
 8011d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d4a:	691b      	ldr	r3, [r3, #16]
 8011d4c:	693a      	ldr	r2, [r7, #16]
 8011d4e:	0151      	lsls	r1, r2, #5
 8011d50:	697a      	ldr	r2, [r7, #20]
 8011d52:	440a      	add	r2, r1
 8011d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d58:	0cdb      	lsrs	r3, r3, #19
 8011d5a:	04db      	lsls	r3, r3, #19
 8011d5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	015a      	lsls	r2, r3, #5
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	4413      	add	r3, r2
 8011d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d6a:	691b      	ldr	r3, [r3, #16]
 8011d6c:	693a      	ldr	r2, [r7, #16]
 8011d6e:	0151      	lsls	r1, r2, #5
 8011d70:	697a      	ldr	r2, [r7, #20]
 8011d72:	440a      	add	r2, r1
 8011d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011d7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011d80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	695b      	ldr	r3, [r3, #20]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d123      	bne.n	8011dd2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	015a      	lsls	r2, r3, #5
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	4413      	add	r3, r2
 8011d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d96:	691a      	ldr	r2, [r3, #16]
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	689b      	ldr	r3, [r3, #8]
 8011d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011da0:	6939      	ldr	r1, [r7, #16]
 8011da2:	0148      	lsls	r0, r1, #5
 8011da4:	6979      	ldr	r1, [r7, #20]
 8011da6:	4401      	add	r1, r0
 8011da8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011dac:	4313      	orrs	r3, r2
 8011dae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	015a      	lsls	r2, r3, #5
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	4413      	add	r3, r2
 8011db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dbc:	691b      	ldr	r3, [r3, #16]
 8011dbe:	693a      	ldr	r2, [r7, #16]
 8011dc0:	0151      	lsls	r1, r2, #5
 8011dc2:	697a      	ldr	r2, [r7, #20]
 8011dc4:	440a      	add	r2, r1
 8011dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011dca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011dce:	6113      	str	r3, [r2, #16]
 8011dd0:	e033      	b.n	8011e3a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	695a      	ldr	r2, [r3, #20]
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	689b      	ldr	r3, [r3, #8]
 8011dda:	4413      	add	r3, r2
 8011ddc:	1e5a      	subs	r2, r3, #1
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	689b      	ldr	r3, [r3, #8]
 8011de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011de6:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	015a      	lsls	r2, r3, #5
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	4413      	add	r3, r2
 8011df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011df4:	691a      	ldr	r2, [r3, #16]
 8011df6:	89fb      	ldrh	r3, [r7, #14]
 8011df8:	04d9      	lsls	r1, r3, #19
 8011dfa:	4b31      	ldr	r3, [pc, #196]	; (8011ec0 <USB_EPStartXfer+0x3b4>)
 8011dfc:	400b      	ands	r3, r1
 8011dfe:	6939      	ldr	r1, [r7, #16]
 8011e00:	0148      	lsls	r0, r1, #5
 8011e02:	6979      	ldr	r1, [r7, #20]
 8011e04:	4401      	add	r1, r0
 8011e06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011e0a:	4313      	orrs	r3, r2
 8011e0c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	015a      	lsls	r2, r3, #5
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	4413      	add	r3, r2
 8011e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e1a:	691a      	ldr	r2, [r3, #16]
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	689b      	ldr	r3, [r3, #8]
 8011e20:	89f9      	ldrh	r1, [r7, #14]
 8011e22:	fb01 f303 	mul.w	r3, r1, r3
 8011e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e2a:	6939      	ldr	r1, [r7, #16]
 8011e2c:	0148      	lsls	r0, r1, #5
 8011e2e:	6979      	ldr	r1, [r7, #20]
 8011e30:	4401      	add	r1, r0
 8011e32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011e36:	4313      	orrs	r3, r2
 8011e38:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	78db      	ldrb	r3, [r3, #3]
 8011e3e:	2b01      	cmp	r3, #1
 8011e40:	d128      	bne.n	8011e94 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e48:	689b      	ldr	r3, [r3, #8]
 8011e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d110      	bne.n	8011e74 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	015a      	lsls	r2, r3, #5
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	4413      	add	r3, r2
 8011e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	693a      	ldr	r2, [r7, #16]
 8011e62:	0151      	lsls	r1, r2, #5
 8011e64:	697a      	ldr	r2, [r7, #20]
 8011e66:	440a      	add	r2, r1
 8011e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011e70:	6013      	str	r3, [r2, #0]
 8011e72:	e00f      	b.n	8011e94 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	015a      	lsls	r2, r3, #5
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	4413      	add	r3, r2
 8011e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	693a      	ldr	r2, [r7, #16]
 8011e84:	0151      	lsls	r1, r2, #5
 8011e86:	697a      	ldr	r2, [r7, #20]
 8011e88:	440a      	add	r2, r1
 8011e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	015a      	lsls	r2, r3, #5
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	693a      	ldr	r2, [r7, #16]
 8011ea4:	0151      	lsls	r1, r2, #5
 8011ea6:	697a      	ldr	r2, [r7, #20]
 8011ea8:	440a      	add	r2, r1
 8011eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011eae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011eb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3718      	adds	r7, #24
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	1ff80000 	.word	0x1ff80000

08011ec4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b085      	sub	sp, #20
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	781b      	ldrb	r3, [r3, #0]
 8011ed6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	785b      	ldrb	r3, [r3, #1]
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	f040 80ab 	bne.w	8012038 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	695b      	ldr	r3, [r3, #20]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d132      	bne.n	8011f50 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	015a      	lsls	r2, r3, #5
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	4413      	add	r3, r2
 8011ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ef6:	691b      	ldr	r3, [r3, #16]
 8011ef8:	68ba      	ldr	r2, [r7, #8]
 8011efa:	0151      	lsls	r1, r2, #5
 8011efc:	68fa      	ldr	r2, [r7, #12]
 8011efe:	440a      	add	r2, r1
 8011f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011f08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011f0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	015a      	lsls	r2, r3, #5
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	4413      	add	r3, r2
 8011f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f1a:	691b      	ldr	r3, [r3, #16]
 8011f1c:	68ba      	ldr	r2, [r7, #8]
 8011f1e:	0151      	lsls	r1, r2, #5
 8011f20:	68fa      	ldr	r2, [r7, #12]
 8011f22:	440a      	add	r2, r1
 8011f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011f2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	015a      	lsls	r2, r3, #5
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	4413      	add	r3, r2
 8011f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f3a:	691b      	ldr	r3, [r3, #16]
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	0151      	lsls	r1, r2, #5
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	440a      	add	r2, r1
 8011f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f48:	0cdb      	lsrs	r3, r3, #19
 8011f4a:	04db      	lsls	r3, r3, #19
 8011f4c:	6113      	str	r3, [r2, #16]
 8011f4e:	e04e      	b.n	8011fee <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	015a      	lsls	r2, r3, #5
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	4413      	add	r3, r2
 8011f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f5c:	691b      	ldr	r3, [r3, #16]
 8011f5e:	68ba      	ldr	r2, [r7, #8]
 8011f60:	0151      	lsls	r1, r2, #5
 8011f62:	68fa      	ldr	r2, [r7, #12]
 8011f64:	440a      	add	r2, r1
 8011f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f6a:	0cdb      	lsrs	r3, r3, #19
 8011f6c:	04db      	lsls	r3, r3, #19
 8011f6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	015a      	lsls	r2, r3, #5
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	4413      	add	r3, r2
 8011f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f7c:	691b      	ldr	r3, [r3, #16]
 8011f7e:	68ba      	ldr	r2, [r7, #8]
 8011f80:	0151      	lsls	r1, r2, #5
 8011f82:	68fa      	ldr	r2, [r7, #12]
 8011f84:	440a      	add	r2, r1
 8011f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011f8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011f92:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	695a      	ldr	r2, [r3, #20]
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d903      	bls.n	8011fa8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	689a      	ldr	r2, [r3, #8]
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	015a      	lsls	r2, r3, #5
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	4413      	add	r3, r2
 8011fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	68ba      	ldr	r2, [r7, #8]
 8011fb8:	0151      	lsls	r1, r2, #5
 8011fba:	68fa      	ldr	r2, [r7, #12]
 8011fbc:	440a      	add	r2, r1
 8011fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011fc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011fc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	015a      	lsls	r2, r3, #5
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	4413      	add	r3, r2
 8011fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fd4:	691a      	ldr	r2, [r3, #16]
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	695b      	ldr	r3, [r3, #20]
 8011fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011fde:	68b9      	ldr	r1, [r7, #8]
 8011fe0:	0148      	lsls	r0, r1, #5
 8011fe2:	68f9      	ldr	r1, [r7, #12]
 8011fe4:	4401      	add	r1, r0
 8011fe6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011fea:	4313      	orrs	r3, r2
 8011fec:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	015a      	lsls	r2, r3, #5
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	68ba      	ldr	r2, [r7, #8]
 8011ffe:	0151      	lsls	r1, r2, #5
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	440a      	add	r2, r1
 8012004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012008:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801200c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	695b      	ldr	r3, [r3, #20]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d06d      	beq.n	80120f2 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801201c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	f003 030f 	and.w	r3, r3, #15
 8012026:	2101      	movs	r1, #1
 8012028:	fa01 f303 	lsl.w	r3, r1, r3
 801202c:	68f9      	ldr	r1, [r7, #12]
 801202e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012032:	4313      	orrs	r3, r2
 8012034:	634b      	str	r3, [r1, #52]	; 0x34
 8012036:	e05c      	b.n	80120f2 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	015a      	lsls	r2, r3, #5
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	4413      	add	r3, r2
 8012040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012044:	691b      	ldr	r3, [r3, #16]
 8012046:	68ba      	ldr	r2, [r7, #8]
 8012048:	0151      	lsls	r1, r2, #5
 801204a:	68fa      	ldr	r2, [r7, #12]
 801204c:	440a      	add	r2, r1
 801204e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012052:	0cdb      	lsrs	r3, r3, #19
 8012054:	04db      	lsls	r3, r3, #19
 8012056:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	015a      	lsls	r2, r3, #5
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	4413      	add	r3, r2
 8012060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012064:	691b      	ldr	r3, [r3, #16]
 8012066:	68ba      	ldr	r2, [r7, #8]
 8012068:	0151      	lsls	r1, r2, #5
 801206a:	68fa      	ldr	r2, [r7, #12]
 801206c:	440a      	add	r2, r1
 801206e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801207a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	695b      	ldr	r3, [r3, #20]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d003      	beq.n	801208c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	689a      	ldr	r2, [r3, #8]
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	015a      	lsls	r2, r3, #5
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	4413      	add	r3, r2
 8012094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012098:	691b      	ldr	r3, [r3, #16]
 801209a:	68ba      	ldr	r2, [r7, #8]
 801209c:	0151      	lsls	r1, r2, #5
 801209e:	68fa      	ldr	r2, [r7, #12]
 80120a0:	440a      	add	r2, r1
 80120a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80120aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	015a      	lsls	r2, r3, #5
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	4413      	add	r3, r2
 80120b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120b8:	691a      	ldr	r2, [r3, #16]
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	689b      	ldr	r3, [r3, #8]
 80120be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80120c2:	68b9      	ldr	r1, [r7, #8]
 80120c4:	0148      	lsls	r0, r1, #5
 80120c6:	68f9      	ldr	r1, [r7, #12]
 80120c8:	4401      	add	r1, r0
 80120ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80120ce:	4313      	orrs	r3, r2
 80120d0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	015a      	lsls	r2, r3, #5
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	4413      	add	r3, r2
 80120da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	68ba      	ldr	r2, [r7, #8]
 80120e2:	0151      	lsls	r1, r2, #5
 80120e4:	68fa      	ldr	r2, [r7, #12]
 80120e6:	440a      	add	r2, r1
 80120e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80120f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80120f2:	2300      	movs	r3, #0
}
 80120f4:	4618      	mov	r0, r3
 80120f6:	3714      	adds	r7, #20
 80120f8:	46bd      	mov	sp, r7
 80120fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fe:	4770      	bx	lr

08012100 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8012100:	b480      	push	{r7}
 8012102:	b089      	sub	sp, #36	; 0x24
 8012104:	af00      	add	r7, sp, #0
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	4611      	mov	r1, r2
 801210c:	461a      	mov	r2, r3
 801210e:	460b      	mov	r3, r1
 8012110:	71fb      	strb	r3, [r7, #7]
 8012112:	4613      	mov	r3, r2
 8012114:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 801211e:	88bb      	ldrh	r3, [r7, #4]
 8012120:	3303      	adds	r3, #3
 8012122:	089b      	lsrs	r3, r3, #2
 8012124:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8012126:	2300      	movs	r3, #0
 8012128:	61bb      	str	r3, [r7, #24]
 801212a:	e00f      	b.n	801214c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801212c:	79fb      	ldrb	r3, [r7, #7]
 801212e:	031a      	lsls	r2, r3, #12
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	4413      	add	r3, r2
 8012134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012138:	461a      	mov	r2, r3
 801213a:	69fb      	ldr	r3, [r7, #28]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	3304      	adds	r3, #4
 8012144:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	3301      	adds	r3, #1
 801214a:	61bb      	str	r3, [r7, #24]
 801214c:	69ba      	ldr	r2, [r7, #24]
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	429a      	cmp	r2, r3
 8012152:	d3eb      	bcc.n	801212c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8012154:	2300      	movs	r3, #0
}
 8012156:	4618      	mov	r0, r3
 8012158:	3724      	adds	r7, #36	; 0x24
 801215a:	46bd      	mov	sp, r7
 801215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012160:	4770      	bx	lr

08012162 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012162:	b480      	push	{r7}
 8012164:	b089      	sub	sp, #36	; 0x24
 8012166:	af00      	add	r7, sp, #0
 8012168:	60f8      	str	r0, [r7, #12]
 801216a:	60b9      	str	r1, [r7, #8]
 801216c:	4613      	mov	r3, r2
 801216e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012178:	88fb      	ldrh	r3, [r7, #6]
 801217a:	3303      	adds	r3, #3
 801217c:	089b      	lsrs	r3, r3, #2
 801217e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012180:	2300      	movs	r3, #0
 8012182:	61bb      	str	r3, [r7, #24]
 8012184:	e00b      	b.n	801219e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801218c:	681a      	ldr	r2, [r3, #0]
 801218e:	69fb      	ldr	r3, [r7, #28]
 8012190:	601a      	str	r2, [r3, #0]
    pDest++;
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	3304      	adds	r3, #4
 8012196:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012198:	69bb      	ldr	r3, [r7, #24]
 801219a:	3301      	adds	r3, #1
 801219c:	61bb      	str	r3, [r7, #24]
 801219e:	69ba      	ldr	r2, [r7, #24]
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d3ef      	bcc.n	8012186 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80121a6:	69fb      	ldr	r3, [r7, #28]
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3724      	adds	r7, #36	; 0x24
 80121ac:	46bd      	mov	sp, r7
 80121ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b2:	4770      	bx	lr

080121b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80121b4:	b480      	push	{r7}
 80121b6:	b085      	sub	sp, #20
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
 80121bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	785b      	ldrb	r3, [r3, #1]
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	d12c      	bne.n	801222a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	015a      	lsls	r2, r3, #5
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	4413      	add	r3, r2
 80121d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	db12      	blt.n	8012208 <USB_EPSetStall+0x54>
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d00f      	beq.n	8012208 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	015a      	lsls	r2, r3, #5
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	4413      	add	r3, r2
 80121f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	68ba      	ldr	r2, [r7, #8]
 80121f8:	0151      	lsls	r1, r2, #5
 80121fa:	68fa      	ldr	r2, [r7, #12]
 80121fc:	440a      	add	r2, r1
 80121fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012202:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012206:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	015a      	lsls	r2, r3, #5
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	4413      	add	r3, r2
 8012210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	68ba      	ldr	r2, [r7, #8]
 8012218:	0151      	lsls	r1, r2, #5
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	440a      	add	r2, r1
 801221e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012222:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012226:	6013      	str	r3, [r2, #0]
 8012228:	e02b      	b.n	8012282 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	015a      	lsls	r2, r3, #5
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	4413      	add	r3, r2
 8012232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	db12      	blt.n	8012262 <USB_EPSetStall+0xae>
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d00f      	beq.n	8012262 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	015a      	lsls	r2, r3, #5
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	4413      	add	r3, r2
 801224a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	68ba      	ldr	r2, [r7, #8]
 8012252:	0151      	lsls	r1, r2, #5
 8012254:	68fa      	ldr	r2, [r7, #12]
 8012256:	440a      	add	r2, r1
 8012258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801225c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012260:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	015a      	lsls	r2, r3, #5
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	4413      	add	r3, r2
 801226a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	68ba      	ldr	r2, [r7, #8]
 8012272:	0151      	lsls	r1, r2, #5
 8012274:	68fa      	ldr	r2, [r7, #12]
 8012276:	440a      	add	r2, r1
 8012278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801227c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012280:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012282:	2300      	movs	r3, #0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3714      	adds	r7, #20
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr

08012290 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012290:	b480      	push	{r7}
 8012292:	b085      	sub	sp, #20
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	781b      	ldrb	r3, [r3, #0]
 80122a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	785b      	ldrb	r3, [r3, #1]
 80122a8:	2b01      	cmp	r3, #1
 80122aa:	d128      	bne.n	80122fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	015a      	lsls	r2, r3, #5
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	4413      	add	r3, r2
 80122b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	68ba      	ldr	r2, [r7, #8]
 80122bc:	0151      	lsls	r1, r2, #5
 80122be:	68fa      	ldr	r2, [r7, #12]
 80122c0:	440a      	add	r2, r1
 80122c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80122c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80122ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	78db      	ldrb	r3, [r3, #3]
 80122d0:	2b03      	cmp	r3, #3
 80122d2:	d003      	beq.n	80122dc <USB_EPClearStall+0x4c>
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	78db      	ldrb	r3, [r3, #3]
 80122d8:	2b02      	cmp	r3, #2
 80122da:	d138      	bne.n	801234e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	015a      	lsls	r2, r3, #5
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	4413      	add	r3, r2
 80122e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	68ba      	ldr	r2, [r7, #8]
 80122ec:	0151      	lsls	r1, r2, #5
 80122ee:	68fa      	ldr	r2, [r7, #12]
 80122f0:	440a      	add	r2, r1
 80122f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80122f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80122fa:	6013      	str	r3, [r2, #0]
 80122fc:	e027      	b.n	801234e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	015a      	lsls	r2, r3, #5
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	4413      	add	r3, r2
 8012306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	68ba      	ldr	r2, [r7, #8]
 801230e:	0151      	lsls	r1, r2, #5
 8012310:	68fa      	ldr	r2, [r7, #12]
 8012312:	440a      	add	r2, r1
 8012314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012318:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801231c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	78db      	ldrb	r3, [r3, #3]
 8012322:	2b03      	cmp	r3, #3
 8012324:	d003      	beq.n	801232e <USB_EPClearStall+0x9e>
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	78db      	ldrb	r3, [r3, #3]
 801232a:	2b02      	cmp	r3, #2
 801232c:	d10f      	bne.n	801234e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	015a      	lsls	r2, r3, #5
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	4413      	add	r3, r2
 8012336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	68ba      	ldr	r2, [r7, #8]
 801233e:	0151      	lsls	r1, r2, #5
 8012340:	68fa      	ldr	r2, [r7, #12]
 8012342:	440a      	add	r2, r1
 8012344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801234c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3714      	adds	r7, #20
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr

0801235c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801235c:	b480      	push	{r7}
 801235e:	b085      	sub	sp, #20
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	460b      	mov	r3, r1
 8012366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	68fa      	ldr	r2, [r7, #12]
 8012376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801237a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801237e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	78fb      	ldrb	r3, [r7, #3]
 801238a:	011b      	lsls	r3, r3, #4
 801238c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012390:	68f9      	ldr	r1, [r7, #12]
 8012392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012396:	4313      	orrs	r3, r2
 8012398:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801239a:	2300      	movs	r3, #0
}
 801239c:	4618      	mov	r0, r3
 801239e:	3714      	adds	r7, #20
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr

080123a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80123a8:	b480      	push	{r7}
 80123aa:	b085      	sub	sp, #20
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	695b      	ldr	r3, [r3, #20]
 80123b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	699b      	ldr	r3, [r3, #24]
 80123ba:	68fa      	ldr	r2, [r7, #12]
 80123bc:	4013      	ands	r3, r2
 80123be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80123c0:	68fb      	ldr	r3, [r7, #12]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3714      	adds	r7, #20
 80123c6:	46bd      	mov	sp, r7
 80123c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123cc:	4770      	bx	lr

080123ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80123ce:	b480      	push	{r7}
 80123d0:	b085      	sub	sp, #20
 80123d2:	af00      	add	r7, sp, #0
 80123d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123e0:	699b      	ldr	r3, [r3, #24]
 80123e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123ea:	69db      	ldr	r3, [r3, #28]
 80123ec:	68ba      	ldr	r2, [r7, #8]
 80123ee:	4013      	ands	r3, r2
 80123f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	0c1b      	lsrs	r3, r3, #16
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3714      	adds	r7, #20
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr

08012402 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012402:	b480      	push	{r7}
 8012404:	b085      	sub	sp, #20
 8012406:	af00      	add	r7, sp, #0
 8012408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012414:	699b      	ldr	r3, [r3, #24]
 8012416:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801241e:	69db      	ldr	r3, [r3, #28]
 8012420:	68ba      	ldr	r2, [r7, #8]
 8012422:	4013      	ands	r3, r2
 8012424:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	b29b      	uxth	r3, r3
}
 801242a:	4618      	mov	r0, r3
 801242c:	3714      	adds	r7, #20
 801242e:	46bd      	mov	sp, r7
 8012430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012434:	4770      	bx	lr

08012436 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012436:	b480      	push	{r7}
 8012438:	b085      	sub	sp, #20
 801243a:	af00      	add	r7, sp, #0
 801243c:	6078      	str	r0, [r7, #4]
 801243e:	460b      	mov	r3, r1
 8012440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012446:	78fb      	ldrb	r3, [r7, #3]
 8012448:	015a      	lsls	r2, r3, #5
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	4413      	add	r3, r2
 801244e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012452:	689b      	ldr	r3, [r3, #8]
 8012454:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801245c:	695b      	ldr	r3, [r3, #20]
 801245e:	68ba      	ldr	r2, [r7, #8]
 8012460:	4013      	ands	r3, r2
 8012462:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012464:	68bb      	ldr	r3, [r7, #8]
}
 8012466:	4618      	mov	r0, r3
 8012468:	3714      	adds	r7, #20
 801246a:	46bd      	mov	sp, r7
 801246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012470:	4770      	bx	lr

08012472 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012472:	b480      	push	{r7}
 8012474:	b087      	sub	sp, #28
 8012476:	af00      	add	r7, sp, #0
 8012478:	6078      	str	r0, [r7, #4]
 801247a:	460b      	mov	r3, r1
 801247c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012488:	691b      	ldr	r3, [r3, #16]
 801248a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012494:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012496:	78fb      	ldrb	r3, [r7, #3]
 8012498:	f003 030f 	and.w	r3, r3, #15
 801249c:	68fa      	ldr	r2, [r7, #12]
 801249e:	fa22 f303 	lsr.w	r3, r2, r3
 80124a2:	01db      	lsls	r3, r3, #7
 80124a4:	b2db      	uxtb	r3, r3
 80124a6:	693a      	ldr	r2, [r7, #16]
 80124a8:	4313      	orrs	r3, r2
 80124aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80124ac:	78fb      	ldrb	r3, [r7, #3]
 80124ae:	015a      	lsls	r2, r3, #5
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	4413      	add	r3, r2
 80124b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124b8:	689b      	ldr	r3, [r3, #8]
 80124ba:	693a      	ldr	r2, [r7, #16]
 80124bc:	4013      	ands	r3, r2
 80124be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80124c0:	68bb      	ldr	r3, [r7, #8]
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	371c      	adds	r7, #28
 80124c6:	46bd      	mov	sp, r7
 80124c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124cc:	4770      	bx	lr

080124ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80124ce:	b480      	push	{r7}
 80124d0:	b083      	sub	sp, #12
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	695b      	ldr	r3, [r3, #20]
 80124da:	f003 0301 	and.w	r3, r3, #1
}
 80124de:	4618      	mov	r0, r3
 80124e0:	370c      	adds	r7, #12
 80124e2:	46bd      	mov	sp, r7
 80124e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e8:	4770      	bx	lr

080124ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80124ea:	b480      	push	{r7}
 80124ec:	b085      	sub	sp, #20
 80124ee:	af00      	add	r7, sp, #0
 80124f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012504:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012508:	f023 0307 	bic.w	r3, r3, #7
 801250c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	68fa      	ldr	r2, [r7, #12]
 8012518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012520:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012522:	2300      	movs	r3, #0
}
 8012524:	4618      	mov	r0, r3
 8012526:	3714      	adds	r7, #20
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr

08012530 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8012530:	b480      	push	{r7}
 8012532:	b085      	sub	sp, #20
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	333c      	adds	r3, #60	; 0x3c
 8012542:	3304      	adds	r3, #4
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	4a1c      	ldr	r2, [pc, #112]	; (80125bc <USB_EP0_OutStart+0x8c>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d90a      	bls.n	8012566 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801255c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012560:	d101      	bne.n	8012566 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8012562:	2300      	movs	r3, #0
 8012564:	e024      	b.n	80125b0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801256c:	461a      	mov	r2, r3
 801256e:	2300      	movs	r3, #0
 8012570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012578:	691b      	ldr	r3, [r3, #16]
 801257a:	68fa      	ldr	r2, [r7, #12]
 801257c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801258c:	691b      	ldr	r3, [r3, #16]
 801258e:	68fa      	ldr	r2, [r7, #12]
 8012590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012594:	f043 0318 	orr.w	r3, r3, #24
 8012598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125a0:	691b      	ldr	r3, [r3, #16]
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80125ac:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80125ae:	2300      	movs	r3, #0
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3714      	adds	r7, #20
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr
 80125bc:	4f54300a 	.word	0x4f54300a

080125c0 <USBD_WCID_STREAMING_FillTxDataBuffer>:
* @param  size: length of data in bytes
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_FillTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t* buf, uint32_t size)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b08f      	sub	sp, #60	; 0x3c
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	607a      	str	r2, [r7, #4]
 80125ca:	603b      	str	r3, [r7, #0]
 80125cc:	460b      	mov	r3, r1
 80125ce:	72fb      	strb	r3, [r7, #11]
    USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125d6:	62fb      	str	r3, [r7, #44]	; 0x2c

   uint8_t ** TxBuffer = hwcid->TxBuffer;
 80125d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80125de:	62bb      	str	r3, [r7, #40]	; 0x28
   __IO uint8_t * TxBuffStatus = hwcid->TxBuffStatus;
 80125e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80125e6:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 80125e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ea:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80125ee:	623b      	str	r3, [r7, #32]
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 80125f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f2:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 80125f6:	61fb      	str	r3, [r7, #28]
   __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 80125f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fa:	f203 1365 	addw	r3, r3, #357	; 0x165
 80125fe:	61bb      	str	r3, [r7, #24]
   
  uint32_t i;   
  uint8_t * txBuffptr = (uint8_t*)TxBuffer[ch_number];  
 8012600:	7afb      	ldrb	r3, [r7, #11]
 8012602:	009b      	lsls	r3, r3, #2
 8012604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012606:	4413      	add	r3, r2
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	617b      	str	r3, [r7, #20]
  
  if(TxBuffReset[ch_number] == 1)
 801260c:	7afb      	ldrb	r3, [r7, #11]
 801260e:	69ba      	ldr	r2, [r7, #24]
 8012610:	4413      	add	r3, r2
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	b2db      	uxtb	r3, r3
 8012616:	2b01      	cmp	r3, #1
 8012618:	d121      	bne.n	801265e <USBD_WCID_STREAMING_FillTxDataBuffer+0x9e>
  {
    if(ch_number >= (N_IN_ENDPOINTS-1))
 801261a:	7afb      	ldrb	r3, [r7, #11]
 801261c:	2b03      	cmp	r3, #3
 801261e:	d90e      	bls.n	801263e <USBD_WCID_STREAMING_FillTxDataBuffer+0x7e>
    {
      txBuffptr[0] = ch_number;
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	7afa      	ldrb	r2, [r7, #11]
 8012624:	701a      	strb	r2, [r3, #0]
      TxBuffIdx[ch_number] = 1;
 8012626:	7afb      	ldrb	r3, [r7, #11]
 8012628:	009b      	lsls	r3, r3, #2
 801262a:	6a3a      	ldr	r2, [r7, #32]
 801262c:	4413      	add	r3, r2
 801262e:	2201      	movs	r2, #1
 8012630:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 8012632:	7afb      	ldrb	r3, [r7, #11]
 8012634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012636:	4413      	add	r3, r2
 8012638:	2200      	movs	r2, #0
 801263a:	701a      	strb	r2, [r3, #0]
 801263c:	e00a      	b.n	8012654 <USBD_WCID_STREAMING_FillTxDataBuffer+0x94>
    }
    else
    {
      TxBuffIdx[ch_number] = 0;
 801263e:	7afb      	ldrb	r3, [r7, #11]
 8012640:	009b      	lsls	r3, r3, #2
 8012642:	6a3a      	ldr	r2, [r7, #32]
 8012644:	4413      	add	r3, r2
 8012646:	2200      	movs	r2, #0
 8012648:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 801264a:	7afb      	ldrb	r3, [r7, #11]
 801264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801264e:	4413      	add	r3, r2
 8012650:	2200      	movs	r2, #0
 8012652:	701a      	strb	r2, [r3, #0]
      
    }
    TxBuffReset[ch_number] = 0;
 8012654:	7afb      	ldrb	r3, [r7, #11]
 8012656:	69ba      	ldr	r2, [r7, #24]
 8012658:	4413      	add	r3, r2
 801265a:	2200      	movs	r2, #0
 801265c:	701a      	strb	r2, [r3, #0]
  }
  
  uint32_t txBuffIdx = TxBuffIdx[ch_number];  
 801265e:	7afb      	ldrb	r3, [r7, #11]
 8012660:	009b      	lsls	r3, r3, #2
 8012662:	6a3a      	ldr	r2, [r7, #32]
 8012664:	4413      	add	r3, r2
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	633b      	str	r3, [r7, #48]	; 0x30
  
  for (i = 0; i < size; i++)
 801266a:	2300      	movs	r3, #0
 801266c:	637b      	str	r3, [r7, #52]	; 0x34
 801266e:	e046      	b.n	80126fe <USBD_WCID_STREAMING_FillTxDataBuffer+0x13e>
  {
    txBuffptr[txBuffIdx] = buf[i];    
 8012670:	687a      	ldr	r2, [r7, #4]
 8012672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012674:	441a      	add	r2, r3
 8012676:	6979      	ldr	r1, [r7, #20]
 8012678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267a:	440b      	add	r3, r1
 801267c:	7812      	ldrb	r2, [r2, #0]
 801267e:	701a      	strb	r2, [r3, #0]
    txBuffIdx = (txBuffIdx + 1) %  (USB_DataSizePerEp[ch_number]);
 8012680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012682:	3301      	adds	r3, #1
 8012684:	7afa      	ldrb	r2, [r7, #11]
 8012686:	0052      	lsls	r2, r2, #1
 8012688:	69f9      	ldr	r1, [r7, #28]
 801268a:	440a      	add	r2, r1
 801268c:	8812      	ldrh	r2, [r2, #0]
 801268e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012692:	fb02 f201 	mul.w	r2, r2, r1
 8012696:	1a9b      	subs	r3, r3, r2
 8012698:	633b      	str	r3, [r7, #48]	; 0x30
    
    if(txBuffIdx == (USB_DataSizePerEp[ch_number]/2))
 801269a:	7afb      	ldrb	r3, [r7, #11]
 801269c:	005b      	lsls	r3, r3, #1
 801269e:	69fa      	ldr	r2, [r7, #28]
 80126a0:	4413      	add	r3, r2
 80126a2:	881b      	ldrh	r3, [r3, #0]
 80126a4:	085b      	lsrs	r3, r3, #1
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	461a      	mov	r2, r3
 80126aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d110      	bne.n	80126d2 <USBD_WCID_STREAMING_FillTxDataBuffer+0x112>
    {
      TxBuffStatus[ch_number] = 1;
 80126b0:	7afb      	ldrb	r3, [r7, #11]
 80126b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126b4:	4413      	add	r3, r2
 80126b6:	2201      	movs	r2, #1
 80126b8:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 80126ba:	7afb      	ldrb	r3, [r7, #11]
 80126bc:	2b03      	cmp	r3, #3
 80126be:	d91b      	bls.n	80126f8 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 80126c0:	697a      	ldr	r2, [r7, #20]
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	4413      	add	r3, r2
 80126c6:	7afa      	ldrb	r2, [r7, #11]
 80126c8:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 80126ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126cc:	3301      	adds	r3, #1
 80126ce:	633b      	str	r3, [r7, #48]	; 0x30
 80126d0:	e012      	b.n	80126f8 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      }
    }
    else if (txBuffIdx == 0)
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d10f      	bne.n	80126f8 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
    {
      TxBuffStatus[ch_number] = 2;
 80126d8:	7afb      	ldrb	r3, [r7, #11]
 80126da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126dc:	4413      	add	r3, r2
 80126de:	2202      	movs	r2, #2
 80126e0:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 80126e2:	7afb      	ldrb	r3, [r7, #11]
 80126e4:	2b03      	cmp	r3, #3
 80126e6:	d907      	bls.n	80126f8 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 80126e8:	697a      	ldr	r2, [r7, #20]
 80126ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ec:	4413      	add	r3, r2
 80126ee:	7afa      	ldrb	r2, [r7, #11]
 80126f0:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 80126f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f4:	3301      	adds	r3, #1
 80126f6:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < size; i++)
 80126f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126fa:	3301      	adds	r3, #1
 80126fc:	637b      	str	r3, [r7, #52]	; 0x34
 80126fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	429a      	cmp	r2, r3
 8012704:	d3b4      	bcc.n	8012670 <USBD_WCID_STREAMING_FillTxDataBuffer+0xb0>
      }
    }
  }  
  TxBuffIdx[ch_number] = txBuffIdx;  
 8012706:	7afb      	ldrb	r3, [r7, #11]
 8012708:	009b      	lsls	r3, r3, #2
 801270a:	6a3a      	ldr	r2, [r7, #32]
 801270c:	4413      	add	r3, r2
 801270e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012710:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 8012712:	2300      	movs	r3, #0
}
 8012714:	4618      	mov	r0, r3
 8012716:	373c      	adds	r7, #60	; 0x3c
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr

08012720 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012728:	2300      	movs	r3, #0
}
 801272a:	4618      	mov	r0, r3
 801272c:	370c      	adds	r7, #12
 801272e:	46bd      	mov	sp, r7
 8012730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012734:	4770      	bx	lr

08012736 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012736:	b580      	push	{r7, lr}
 8012738:	b084      	sub	sp, #16
 801273a:	af00      	add	r7, sp, #0
 801273c:	6078      	str	r0, [r7, #4]
 801273e:	460b      	mov	r3, r1
 8012740:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012742:	2302      	movs	r3, #2
 8012744:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801274c:	2b00      	cmp	r3, #0
 801274e:	d00c      	beq.n	801276a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	78fa      	ldrb	r2, [r7, #3]
 801275a:	4611      	mov	r1, r2
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	4798      	blx	r3
 8012760:	4603      	mov	r3, r0
 8012762:	2b00      	cmp	r3, #0
 8012764:	d101      	bne.n	801276a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8012766:	2300      	movs	r3, #0
 8012768:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801276a:	7bfb      	ldrb	r3, [r7, #15]
}
 801276c:	4618      	mov	r0, r3
 801276e:	3710      	adds	r7, #16
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	460b      	mov	r3, r1
 801277e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	78fa      	ldrb	r2, [r7, #3]
 801278a:	4611      	mov	r1, r2
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	4798      	blx	r3

  return USBD_OK;
 8012790:	2300      	movs	r3, #0
}
 8012792:	4618      	mov	r0, r3
 8012794:	3708      	adds	r7, #8
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}

0801279a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801279a:	b580      	push	{r7, lr}
 801279c:	b082      	sub	sp, #8
 801279e:	af00      	add	r7, sp, #0
 80127a0:	6078      	str	r0, [r7, #4]
 80127a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80127aa:	6839      	ldr	r1, [r7, #0]
 80127ac:	4618      	mov	r0, r3
 80127ae:	f000 ff28 	bl	8013602 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2201      	movs	r2, #1
 80127b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80127c0:	461a      	mov	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80127ce:	f003 031f 	and.w	r3, r3, #31
 80127d2:	2b02      	cmp	r3, #2
 80127d4:	d016      	beq.n	8012804 <USBD_LL_SetupStage+0x6a>
 80127d6:	2b02      	cmp	r3, #2
 80127d8:	d81c      	bhi.n	8012814 <USBD_LL_SetupStage+0x7a>
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d002      	beq.n	80127e4 <USBD_LL_SetupStage+0x4a>
 80127de:	2b01      	cmp	r3, #1
 80127e0:	d008      	beq.n	80127f4 <USBD_LL_SetupStage+0x5a>
 80127e2:	e017      	b.n	8012814 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80127ea:	4619      	mov	r1, r3
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f000 fa09 	bl	8012c04 <USBD_StdDevReq>
      break;
 80127f2:	e01a      	b.n	801282a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80127fa:	4619      	mov	r1, r3
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 fa6b 	bl	8012cd8 <USBD_StdItfReq>
      break;
 8012802:	e012      	b.n	801282a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801280a:	4619      	mov	r1, r3
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f000 faab 	bl	8012d68 <USBD_StdEPReq>
      break;
 8012812:	e00a      	b.n	801282a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801281a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801281e:	b2db      	uxtb	r3, r3
 8012820:	4619      	mov	r1, r3
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7f2 fd4e 	bl	80052c4 <USBD_LL_StallEP>
      break;
 8012828:	bf00      	nop
  }

  return USBD_OK;
 801282a:	2300      	movs	r3, #0
}
 801282c:	4618      	mov	r0, r3
 801282e:	3708      	adds	r7, #8
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}

08012834 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b086      	sub	sp, #24
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	460b      	mov	r3, r1
 801283e:	607a      	str	r2, [r7, #4]
 8012840:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012842:	7afb      	ldrb	r3, [r7, #11]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d14b      	bne.n	80128e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801284e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012856:	2b03      	cmp	r3, #3
 8012858:	d134      	bne.n	80128c4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	68da      	ldr	r2, [r3, #12]
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	691b      	ldr	r3, [r3, #16]
 8012862:	429a      	cmp	r2, r3
 8012864:	d919      	bls.n	801289a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	68da      	ldr	r2, [r3, #12]
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	691b      	ldr	r3, [r3, #16]
 801286e:	1ad2      	subs	r2, r2, r3
 8012870:	697b      	ldr	r3, [r7, #20]
 8012872:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	68da      	ldr	r2, [r3, #12]
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801287c:	429a      	cmp	r2, r3
 801287e:	d203      	bcs.n	8012888 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8012884:	b29b      	uxth	r3, r3
 8012886:	e002      	b.n	801288e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801288c:	b29b      	uxth	r3, r3
 801288e:	461a      	mov	r2, r3
 8012890:	6879      	ldr	r1, [r7, #4]
 8012892:	68f8      	ldr	r0, [r7, #12]
 8012894:	f000 ff31 	bl	80136fa <USBD_CtlContinueRx>
 8012898:	e038      	b.n	801290c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128a0:	691b      	ldr	r3, [r3, #16]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d00a      	beq.n	80128bc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80128ac:	2b03      	cmp	r3, #3
 80128ae:	d105      	bne.n	80128bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128b6:	691b      	ldr	r3, [r3, #16]
 80128b8:	68f8      	ldr	r0, [r7, #12]
 80128ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80128bc:	68f8      	ldr	r0, [r7, #12]
 80128be:	f000 ff2e 	bl	801371e <USBD_CtlSendStatus>
 80128c2:	e023      	b.n	801290c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80128ca:	2b05      	cmp	r3, #5
 80128cc:	d11e      	bne.n	801290c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2200      	movs	r2, #0
 80128d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80128d6:	2100      	movs	r1, #0
 80128d8:	68f8      	ldr	r0, [r7, #12]
 80128da:	f7f2 fcf3 	bl	80052c4 <USBD_LL_StallEP>
 80128de:	e015      	b.n	801290c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128e6:	699b      	ldr	r3, [r3, #24]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d00d      	beq.n	8012908 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80128f2:	2b03      	cmp	r3, #3
 80128f4:	d108      	bne.n	8012908 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128fc:	699b      	ldr	r3, [r3, #24]
 80128fe:	7afa      	ldrb	r2, [r7, #11]
 8012900:	4611      	mov	r1, r2
 8012902:	68f8      	ldr	r0, [r7, #12]
 8012904:	4798      	blx	r3
 8012906:	e001      	b.n	801290c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012908:	2302      	movs	r3, #2
 801290a:	e000      	b.n	801290e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801290c:	2300      	movs	r3, #0
}
 801290e:	4618      	mov	r0, r3
 8012910:	3718      	adds	r7, #24
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}

08012916 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012916:	b580      	push	{r7, lr}
 8012918:	b086      	sub	sp, #24
 801291a:	af00      	add	r7, sp, #0
 801291c:	60f8      	str	r0, [r7, #12]
 801291e:	460b      	mov	r3, r1
 8012920:	607a      	str	r2, [r7, #4]
 8012922:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012924:	7afb      	ldrb	r3, [r7, #11]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d17f      	bne.n	8012a2a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	3314      	adds	r3, #20
 801292e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012936:	2b02      	cmp	r3, #2
 8012938:	d15c      	bne.n	80129f4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	68da      	ldr	r2, [r3, #12]
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	691b      	ldr	r3, [r3, #16]
 8012942:	429a      	cmp	r2, r3
 8012944:	d915      	bls.n	8012972 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	68da      	ldr	r2, [r3, #12]
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	691b      	ldr	r3, [r3, #16]
 801294e:	1ad2      	subs	r2, r2, r3
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8012954:	697b      	ldr	r3, [r7, #20]
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	b29b      	uxth	r3, r3
 801295a:	461a      	mov	r2, r3
 801295c:	6879      	ldr	r1, [r7, #4]
 801295e:	68f8      	ldr	r0, [r7, #12]
 8012960:	f000 feb9 	bl	80136d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012964:	2300      	movs	r3, #0
 8012966:	2200      	movs	r2, #0
 8012968:	2100      	movs	r1, #0
 801296a:	68f8      	ldr	r0, [r7, #12]
 801296c:	f7f2 fd26 	bl	80053bc <USBD_LL_PrepareReceive>
 8012970:	e04e      	b.n	8012a10 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	689b      	ldr	r3, [r3, #8]
 8012976:	697a      	ldr	r2, [r7, #20]
 8012978:	6912      	ldr	r2, [r2, #16]
 801297a:	fbb3 f1f2 	udiv	r1, r3, r2
 801297e:	fb02 f201 	mul.w	r2, r2, r1
 8012982:	1a9b      	subs	r3, r3, r2
 8012984:	2b00      	cmp	r3, #0
 8012986:	d11c      	bne.n	80129c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	689a      	ldr	r2, [r3, #8]
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012990:	429a      	cmp	r2, r3
 8012992:	d316      	bcc.n	80129c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	689a      	ldr	r2, [r3, #8]
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801299e:	429a      	cmp	r2, r3
 80129a0:	d20f      	bcs.n	80129c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80129a2:	2200      	movs	r2, #0
 80129a4:	2100      	movs	r1, #0
 80129a6:	68f8      	ldr	r0, [r7, #12]
 80129a8:	f000 fe95 	bl	80136d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	2200      	movs	r2, #0
 80129b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80129b4:	2300      	movs	r3, #0
 80129b6:	2200      	movs	r2, #0
 80129b8:	2100      	movs	r1, #0
 80129ba:	68f8      	ldr	r0, [r7, #12]
 80129bc:	f7f2 fcfe 	bl	80053bc <USBD_LL_PrepareReceive>
 80129c0:	e026      	b.n	8012a10 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129c8:	68db      	ldr	r3, [r3, #12]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d00a      	beq.n	80129e4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80129d4:	2b03      	cmp	r3, #3
 80129d6:	d105      	bne.n	80129e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	68f8      	ldr	r0, [r7, #12]
 80129e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80129e4:	2180      	movs	r1, #128	; 0x80
 80129e6:	68f8      	ldr	r0, [r7, #12]
 80129e8:	f7f2 fc6c 	bl	80052c4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80129ec:	68f8      	ldr	r0, [r7, #12]
 80129ee:	f000 fea9 	bl	8013744 <USBD_CtlReceiveStatus>
 80129f2:	e00d      	b.n	8012a10 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80129fa:	2b04      	cmp	r3, #4
 80129fc:	d004      	beq.n	8012a08 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d103      	bne.n	8012a10 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8012a08:	2180      	movs	r1, #128	; 0x80
 8012a0a:	68f8      	ldr	r0, [r7, #12]
 8012a0c:	f7f2 fc5a 	bl	80052c4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012a16:	2b01      	cmp	r3, #1
 8012a18:	d11d      	bne.n	8012a56 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8012a1a:	68f8      	ldr	r0, [r7, #12]
 8012a1c:	f7ff fe80 	bl	8012720 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2200      	movs	r2, #0
 8012a24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012a28:	e015      	b.n	8012a56 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a30:	695b      	ldr	r3, [r3, #20]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d00d      	beq.n	8012a52 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8012a3c:	2b03      	cmp	r3, #3
 8012a3e:	d108      	bne.n	8012a52 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a46:	695b      	ldr	r3, [r3, #20]
 8012a48:	7afa      	ldrb	r2, [r7, #11]
 8012a4a:	4611      	mov	r1, r2
 8012a4c:	68f8      	ldr	r0, [r7, #12]
 8012a4e:	4798      	blx	r3
 8012a50:	e001      	b.n	8012a56 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012a52:	2302      	movs	r3, #2
 8012a54:	e000      	b.n	8012a58 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8012a56:	2300      	movs	r3, #0
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3718      	adds	r7, #24
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012a68:	2340      	movs	r3, #64	; 0x40
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	2100      	movs	r1, #0
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7f2 fc0e 	bl	8005290 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2201      	movs	r2, #1
 8012a78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2240      	movs	r2, #64	; 0x40
 8012a80:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012a84:	2340      	movs	r3, #64	; 0x40
 8012a86:	2200      	movs	r2, #0
 8012a88:	2180      	movs	r1, #128	; 0x80
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f7f2 fc00 	bl	8005290 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2201      	movs	r2, #1
 8012a94:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2240      	movs	r2, #64	; 0x40
 8012a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2201      	movs	r2, #1
 8012aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d009      	beq.n	8012ad8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	6852      	ldr	r2, [r2, #4]
 8012ad0:	b2d2      	uxtb	r2, r2
 8012ad2:	4611      	mov	r1, r2
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	4798      	blx	r3
  }

  return USBD_OK;
 8012ad8:	2300      	movs	r3, #0
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3708      	adds	r7, #8
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}

08012ae2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012ae2:	b480      	push	{r7}
 8012ae4:	b083      	sub	sp, #12
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	6078      	str	r0, [r7, #4]
 8012aea:	460b      	mov	r3, r1
 8012aec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	78fa      	ldrb	r2, [r7, #3]
 8012af2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012af4:	2300      	movs	r3, #0
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	370c      	adds	r7, #12
 8012afa:	46bd      	mov	sp, r7
 8012afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b00:	4770      	bx	lr

08012b02 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012b02:	b480      	push	{r7}
 8012b04:	b083      	sub	sp, #12
 8012b06:	af00      	add	r7, sp, #0
 8012b08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2204      	movs	r2, #4
 8012b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012b1e:	2300      	movs	r3, #0
}
 8012b20:	4618      	mov	r0, r3
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr

08012b2c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b3a:	2b04      	cmp	r3, #4
 8012b3c:	d105      	bne.n	8012b4a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012b4a:	2300      	movs	r3, #0
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr

08012b58 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b66:	2b03      	cmp	r3, #3
 8012b68:	d10b      	bne.n	8012b82 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b70:	69db      	ldr	r3, [r3, #28]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d005      	beq.n	8012b82 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b7c:	69db      	ldr	r3, [r3, #28]
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012b82:	2300      	movs	r3, #0
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3708      	adds	r7, #8
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	460b      	mov	r3, r1
 8012b96:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012b98:	2300      	movs	r3, #0
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	370c      	adds	r7, #12
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba4:	4770      	bx	lr

08012ba6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012ba6:	b480      	push	{r7}
 8012ba8:	b083      	sub	sp, #12
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
 8012bae:	460b      	mov	r3, r1
 8012bb0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012bb2:	2300      	movs	r3, #0
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr

08012bc0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012bc8:	2300      	movs	r3, #0
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	370c      	adds	r7, #12
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd4:	4770      	bx	lr

08012bd6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b082      	sub	sp, #8
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2201      	movs	r2, #1
 8012be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	6852      	ldr	r2, [r2, #4]
 8012bf2:	b2d2      	uxtb	r2, r2
 8012bf4:	4611      	mov	r1, r2
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	4798      	blx	r3

  return USBD_OK;
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3708      	adds	r7, #8
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012c1a:	2b40      	cmp	r3, #64	; 0x40
 8012c1c:	d005      	beq.n	8012c2a <USBD_StdDevReq+0x26>
 8012c1e:	2b40      	cmp	r3, #64	; 0x40
 8012c20:	d84f      	bhi.n	8012cc2 <USBD_StdDevReq+0xbe>
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d009      	beq.n	8012c3a <USBD_StdDevReq+0x36>
 8012c26:	2b20      	cmp	r3, #32
 8012c28:	d14b      	bne.n	8012cc2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c30:	689b      	ldr	r3, [r3, #8]
 8012c32:	6839      	ldr	r1, [r7, #0]
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	4798      	blx	r3
      break;
 8012c38:	e048      	b.n	8012ccc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	785b      	ldrb	r3, [r3, #1]
 8012c3e:	2b09      	cmp	r3, #9
 8012c40:	d839      	bhi.n	8012cb6 <USBD_StdDevReq+0xb2>
 8012c42:	a201      	add	r2, pc, #4	; (adr r2, 8012c48 <USBD_StdDevReq+0x44>)
 8012c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c48:	08012c99 	.word	0x08012c99
 8012c4c:	08012cad 	.word	0x08012cad
 8012c50:	08012cb7 	.word	0x08012cb7
 8012c54:	08012ca3 	.word	0x08012ca3
 8012c58:	08012cb7 	.word	0x08012cb7
 8012c5c:	08012c7b 	.word	0x08012c7b
 8012c60:	08012c71 	.word	0x08012c71
 8012c64:	08012cb7 	.word	0x08012cb7
 8012c68:	08012c8f 	.word	0x08012c8f
 8012c6c:	08012c85 	.word	0x08012c85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012c70:	6839      	ldr	r1, [r7, #0]
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f000 f9dc 	bl	8013030 <USBD_GetDescriptor>
          break;
 8012c78:	e022      	b.n	8012cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012c7a:	6839      	ldr	r1, [r7, #0]
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f000 fb51 	bl	8013324 <USBD_SetAddress>
          break;
 8012c82:	e01d      	b.n	8012cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012c84:	6839      	ldr	r1, [r7, #0]
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f000 fb90 	bl	80133ac <USBD_SetConfig>
          break;
 8012c8c:	e018      	b.n	8012cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012c8e:	6839      	ldr	r1, [r7, #0]
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f000 fc19 	bl	80134c8 <USBD_GetConfig>
          break;
 8012c96:	e013      	b.n	8012cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012c98:	6839      	ldr	r1, [r7, #0]
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f000 fc49 	bl	8013532 <USBD_GetStatus>
          break;
 8012ca0:	e00e      	b.n	8012cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012ca2:	6839      	ldr	r1, [r7, #0]
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f000 fc77 	bl	8013598 <USBD_SetFeature>
          break;
 8012caa:	e009      	b.n	8012cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012cac:	6839      	ldr	r1, [r7, #0]
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f000 fc86 	bl	80135c0 <USBD_ClrFeature>
          break;
 8012cb4:	e004      	b.n	8012cc0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8012cb6:	6839      	ldr	r1, [r7, #0]
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f000 fcdf 	bl	801367c <USBD_CtlError>
          break;
 8012cbe:	bf00      	nop
      }
      break;
 8012cc0:	e004      	b.n	8012ccc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8012cc2:	6839      	ldr	r1, [r7, #0]
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f000 fcd9 	bl	801367c <USBD_CtlError>
      break;
 8012cca:	bf00      	nop
  }

  return ret;
 8012ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3710      	adds	r7, #16
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop

08012cd8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b084      	sub	sp, #16
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012cee:	2b40      	cmp	r3, #64	; 0x40
 8012cf0:	d005      	beq.n	8012cfe <USBD_StdItfReq+0x26>
 8012cf2:	2b40      	cmp	r3, #64	; 0x40
 8012cf4:	d82e      	bhi.n	8012d54 <USBD_StdItfReq+0x7c>
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d001      	beq.n	8012cfe <USBD_StdItfReq+0x26>
 8012cfa:	2b20      	cmp	r3, #32
 8012cfc:	d12a      	bne.n	8012d54 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d04:	3b01      	subs	r3, #1
 8012d06:	2b02      	cmp	r3, #2
 8012d08:	d81d      	bhi.n	8012d46 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	889b      	ldrh	r3, [r3, #4]
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	2b01      	cmp	r3, #1
 8012d12:	d813      	bhi.n	8012d3c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d1a:	689b      	ldr	r3, [r3, #8]
 8012d1c:	6839      	ldr	r1, [r7, #0]
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	4798      	blx	r3
 8012d22:	4603      	mov	r3, r0
 8012d24:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	88db      	ldrh	r3, [r3, #6]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d110      	bne.n	8012d50 <USBD_StdItfReq+0x78>
 8012d2e:	7bfb      	ldrb	r3, [r7, #15]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d10d      	bne.n	8012d50 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f000 fcf2 	bl	801371e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012d3a:	e009      	b.n	8012d50 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8012d3c:	6839      	ldr	r1, [r7, #0]
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f000 fc9c 	bl	801367c <USBD_CtlError>
          break;
 8012d44:	e004      	b.n	8012d50 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8012d46:	6839      	ldr	r1, [r7, #0]
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f000 fc97 	bl	801367c <USBD_CtlError>
          break;
 8012d4e:	e000      	b.n	8012d52 <USBD_StdItfReq+0x7a>
          break;
 8012d50:	bf00      	nop
      }
      break;
 8012d52:	e004      	b.n	8012d5e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8012d54:	6839      	ldr	r1, [r7, #0]
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f000 fc90 	bl	801367c <USBD_CtlError>
      break;
 8012d5c:	bf00      	nop
  }

  return USBD_OK;
 8012d5e:	2300      	movs	r3, #0
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	3710      	adds	r7, #16
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}

08012d68 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012d72:	2300      	movs	r3, #0
 8012d74:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	889b      	ldrh	r3, [r3, #4]
 8012d7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012d84:	2b40      	cmp	r3, #64	; 0x40
 8012d86:	d007      	beq.n	8012d98 <USBD_StdEPReq+0x30>
 8012d88:	2b40      	cmp	r3, #64	; 0x40
 8012d8a:	f200 8146 	bhi.w	801301a <USBD_StdEPReq+0x2b2>
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d00a      	beq.n	8012da8 <USBD_StdEPReq+0x40>
 8012d92:	2b20      	cmp	r3, #32
 8012d94:	f040 8141 	bne.w	801301a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d9e:	689b      	ldr	r3, [r3, #8]
 8012da0:	6839      	ldr	r1, [r7, #0]
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	4798      	blx	r3
      break;
 8012da6:	e13d      	b.n	8013024 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012db0:	2b20      	cmp	r3, #32
 8012db2:	d10a      	bne.n	8012dca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012dba:	689b      	ldr	r3, [r3, #8]
 8012dbc:	6839      	ldr	r1, [r7, #0]
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	4798      	blx	r3
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8012dc6:	7bfb      	ldrb	r3, [r7, #15]
 8012dc8:	e12d      	b.n	8013026 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	785b      	ldrb	r3, [r3, #1]
 8012dce:	2b03      	cmp	r3, #3
 8012dd0:	d007      	beq.n	8012de2 <USBD_StdEPReq+0x7a>
 8012dd2:	2b03      	cmp	r3, #3
 8012dd4:	f300 811b 	bgt.w	801300e <USBD_StdEPReq+0x2a6>
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d072      	beq.n	8012ec2 <USBD_StdEPReq+0x15a>
 8012ddc:	2b01      	cmp	r3, #1
 8012dde:	d03a      	beq.n	8012e56 <USBD_StdEPReq+0xee>
 8012de0:	e115      	b.n	801300e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012de8:	2b02      	cmp	r3, #2
 8012dea:	d002      	beq.n	8012df2 <USBD_StdEPReq+0x8a>
 8012dec:	2b03      	cmp	r3, #3
 8012dee:	d015      	beq.n	8012e1c <USBD_StdEPReq+0xb4>
 8012df0:	e02b      	b.n	8012e4a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012df2:	7bbb      	ldrb	r3, [r7, #14]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d00c      	beq.n	8012e12 <USBD_StdEPReq+0xaa>
 8012df8:	7bbb      	ldrb	r3, [r7, #14]
 8012dfa:	2b80      	cmp	r3, #128	; 0x80
 8012dfc:	d009      	beq.n	8012e12 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012dfe:	7bbb      	ldrb	r3, [r7, #14]
 8012e00:	4619      	mov	r1, r3
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f7f2 fa5e 	bl	80052c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012e08:	2180      	movs	r1, #128	; 0x80
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f7f2 fa5a 	bl	80052c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012e10:	e020      	b.n	8012e54 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8012e12:	6839      	ldr	r1, [r7, #0]
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f000 fc31 	bl	801367c <USBD_CtlError>
              break;
 8012e1a:	e01b      	b.n	8012e54 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	885b      	ldrh	r3, [r3, #2]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d10e      	bne.n	8012e42 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8012e24:	7bbb      	ldrb	r3, [r7, #14]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d00b      	beq.n	8012e42 <USBD_StdEPReq+0xda>
 8012e2a:	7bbb      	ldrb	r3, [r7, #14]
 8012e2c:	2b80      	cmp	r3, #128	; 0x80
 8012e2e:	d008      	beq.n	8012e42 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	88db      	ldrh	r3, [r3, #6]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d104      	bne.n	8012e42 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8012e38:	7bbb      	ldrb	r3, [r7, #14]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f7f2 fa41 	bl	80052c4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f000 fc6b 	bl	801371e <USBD_CtlSendStatus>

              break;
 8012e48:	e004      	b.n	8012e54 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8012e4a:	6839      	ldr	r1, [r7, #0]
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f000 fc15 	bl	801367c <USBD_CtlError>
              break;
 8012e52:	bf00      	nop
          }
          break;
 8012e54:	e0e0      	b.n	8013018 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e5c:	2b02      	cmp	r3, #2
 8012e5e:	d002      	beq.n	8012e66 <USBD_StdEPReq+0xfe>
 8012e60:	2b03      	cmp	r3, #3
 8012e62:	d015      	beq.n	8012e90 <USBD_StdEPReq+0x128>
 8012e64:	e026      	b.n	8012eb4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012e66:	7bbb      	ldrb	r3, [r7, #14]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d00c      	beq.n	8012e86 <USBD_StdEPReq+0x11e>
 8012e6c:	7bbb      	ldrb	r3, [r7, #14]
 8012e6e:	2b80      	cmp	r3, #128	; 0x80
 8012e70:	d009      	beq.n	8012e86 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012e72:	7bbb      	ldrb	r3, [r7, #14]
 8012e74:	4619      	mov	r1, r3
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f7f2 fa24 	bl	80052c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012e7c:	2180      	movs	r1, #128	; 0x80
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f7f2 fa20 	bl	80052c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012e84:	e01c      	b.n	8012ec0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8012e86:	6839      	ldr	r1, [r7, #0]
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f000 fbf7 	bl	801367c <USBD_CtlError>
              break;
 8012e8e:	e017      	b.n	8012ec0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	885b      	ldrh	r3, [r3, #2]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d112      	bne.n	8012ebe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012e98:	7bbb      	ldrb	r3, [r7, #14]
 8012e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d004      	beq.n	8012eac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8012ea2:	7bbb      	ldrb	r3, [r7, #14]
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f7f2 fa1f 	bl	80052ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f000 fc36 	bl	801371e <USBD_CtlSendStatus>
              }
              break;
 8012eb2:	e004      	b.n	8012ebe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8012eb4:	6839      	ldr	r1, [r7, #0]
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 fbe0 	bl	801367c <USBD_CtlError>
              break;
 8012ebc:	e000      	b.n	8012ec0 <USBD_StdEPReq+0x158>
              break;
 8012ebe:	bf00      	nop
          }
          break;
 8012ec0:	e0aa      	b.n	8013018 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ec8:	2b02      	cmp	r3, #2
 8012eca:	d002      	beq.n	8012ed2 <USBD_StdEPReq+0x16a>
 8012ecc:	2b03      	cmp	r3, #3
 8012ece:	d032      	beq.n	8012f36 <USBD_StdEPReq+0x1ce>
 8012ed0:	e097      	b.n	8013002 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012ed2:	7bbb      	ldrb	r3, [r7, #14]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d007      	beq.n	8012ee8 <USBD_StdEPReq+0x180>
 8012ed8:	7bbb      	ldrb	r3, [r7, #14]
 8012eda:	2b80      	cmp	r3, #128	; 0x80
 8012edc:	d004      	beq.n	8012ee8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8012ede:	6839      	ldr	r1, [r7, #0]
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f000 fbcb 	bl	801367c <USBD_CtlError>
                break;
 8012ee6:	e091      	b.n	801300c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	da0b      	bge.n	8012f08 <USBD_StdEPReq+0x1a0>
 8012ef0:	7bbb      	ldrb	r3, [r7, #14]
 8012ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012ef6:	4613      	mov	r3, r2
 8012ef8:	009b      	lsls	r3, r3, #2
 8012efa:	4413      	add	r3, r2
 8012efc:	009b      	lsls	r3, r3, #2
 8012efe:	3310      	adds	r3, #16
 8012f00:	687a      	ldr	r2, [r7, #4]
 8012f02:	4413      	add	r3, r2
 8012f04:	3304      	adds	r3, #4
 8012f06:	e00b      	b.n	8012f20 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012f08:	7bbb      	ldrb	r3, [r7, #14]
 8012f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012f0e:	4613      	mov	r3, r2
 8012f10:	009b      	lsls	r3, r3, #2
 8012f12:	4413      	add	r3, r2
 8012f14:	009b      	lsls	r3, r3, #2
 8012f16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	3304      	adds	r3, #4
 8012f20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	2200      	movs	r2, #0
 8012f26:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	2202      	movs	r2, #2
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f000 fbb5 	bl	801369e <USBD_CtlSendData>
              break;
 8012f34:	e06a      	b.n	801300c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	da11      	bge.n	8012f62 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012f3e:	7bbb      	ldrb	r3, [r7, #14]
 8012f40:	f003 020f 	and.w	r2, r3, #15
 8012f44:	6879      	ldr	r1, [r7, #4]
 8012f46:	4613      	mov	r3, r2
 8012f48:	009b      	lsls	r3, r3, #2
 8012f4a:	4413      	add	r3, r2
 8012f4c:	009b      	lsls	r3, r3, #2
 8012f4e:	440b      	add	r3, r1
 8012f50:	3318      	adds	r3, #24
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d117      	bne.n	8012f88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8012f58:	6839      	ldr	r1, [r7, #0]
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f000 fb8e 	bl	801367c <USBD_CtlError>
                  break;
 8012f60:	e054      	b.n	801300c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012f62:	7bbb      	ldrb	r3, [r7, #14]
 8012f64:	f003 020f 	and.w	r2, r3, #15
 8012f68:	6879      	ldr	r1, [r7, #4]
 8012f6a:	4613      	mov	r3, r2
 8012f6c:	009b      	lsls	r3, r3, #2
 8012f6e:	4413      	add	r3, r2
 8012f70:	009b      	lsls	r3, r3, #2
 8012f72:	440b      	add	r3, r1
 8012f74:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d104      	bne.n	8012f88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8012f7e:	6839      	ldr	r1, [r7, #0]
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f000 fb7b 	bl	801367c <USBD_CtlError>
                  break;
 8012f86:	e041      	b.n	801300c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	da0b      	bge.n	8012fa8 <USBD_StdEPReq+0x240>
 8012f90:	7bbb      	ldrb	r3, [r7, #14]
 8012f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012f96:	4613      	mov	r3, r2
 8012f98:	009b      	lsls	r3, r3, #2
 8012f9a:	4413      	add	r3, r2
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	3310      	adds	r3, #16
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	4413      	add	r3, r2
 8012fa4:	3304      	adds	r3, #4
 8012fa6:	e00b      	b.n	8012fc0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012fa8:	7bbb      	ldrb	r3, [r7, #14]
 8012faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012fae:	4613      	mov	r3, r2
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	4413      	add	r3, r2
 8012fb4:	009b      	lsls	r3, r3, #2
 8012fb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	4413      	add	r3, r2
 8012fbe:	3304      	adds	r3, #4
 8012fc0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012fc2:	7bbb      	ldrb	r3, [r7, #14]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d002      	beq.n	8012fce <USBD_StdEPReq+0x266>
 8012fc8:	7bbb      	ldrb	r3, [r7, #14]
 8012fca:	2b80      	cmp	r3, #128	; 0x80
 8012fcc:	d103      	bne.n	8012fd6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	601a      	str	r2, [r3, #0]
 8012fd4:	e00e      	b.n	8012ff4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8012fd6:	7bbb      	ldrb	r3, [r7, #14]
 8012fd8:	4619      	mov	r1, r3
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f7f2 f998 	bl	8005310 <USBD_LL_IsStallEP>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d003      	beq.n	8012fee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	2201      	movs	r2, #1
 8012fea:	601a      	str	r2, [r3, #0]
 8012fec:	e002      	b.n	8012ff4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	2202      	movs	r2, #2
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f000 fb4f 	bl	801369e <USBD_CtlSendData>
              break;
 8013000:	e004      	b.n	801300c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8013002:	6839      	ldr	r1, [r7, #0]
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f000 fb39 	bl	801367c <USBD_CtlError>
              break;
 801300a:	bf00      	nop
          }
          break;
 801300c:	e004      	b.n	8013018 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 801300e:	6839      	ldr	r1, [r7, #0]
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f000 fb33 	bl	801367c <USBD_CtlError>
          break;
 8013016:	bf00      	nop
      }
      break;
 8013018:	e004      	b.n	8013024 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 801301a:	6839      	ldr	r1, [r7, #0]
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f000 fb2d 	bl	801367c <USBD_CtlError>
      break;
 8013022:	bf00      	nop
  }

  return ret;
 8013024:	7bfb      	ldrb	r3, [r7, #15]
}
 8013026:	4618      	mov	r0, r3
 8013028:	3710      	adds	r7, #16
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
	...

08013030 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801303a:	2300      	movs	r3, #0
 801303c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801303e:	2300      	movs	r3, #0
 8013040:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013042:	2300      	movs	r3, #0
 8013044:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	885b      	ldrh	r3, [r3, #2]
 801304a:	0a1b      	lsrs	r3, r3, #8
 801304c:	b29b      	uxth	r3, r3
 801304e:	3b01      	subs	r3, #1
 8013050:	2b06      	cmp	r3, #6
 8013052:	f200 813b 	bhi.w	80132cc <USBD_GetDescriptor+0x29c>
 8013056:	a201      	add	r2, pc, #4	; (adr r2, 801305c <USBD_GetDescriptor+0x2c>)
 8013058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801305c:	08013079 	.word	0x08013079
 8013060:	08013091 	.word	0x08013091
 8013064:	080130d1 	.word	0x080130d1
 8013068:	080132cd 	.word	0x080132cd
 801306c:	080132cd 	.word	0x080132cd
 8013070:	0801326d 	.word	0x0801326d
 8013074:	08013299 	.word	0x08013299
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	7c12      	ldrb	r2, [r2, #16]
 8013084:	f107 0108 	add.w	r1, r7, #8
 8013088:	4610      	mov	r0, r2
 801308a:	4798      	blx	r3
 801308c:	60f8      	str	r0, [r7, #12]
      break;
 801308e:	e125      	b.n	80132dc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	7c1b      	ldrb	r3, [r3, #16]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d10d      	bne.n	80130b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130a0:	f107 0208 	add.w	r2, r7, #8
 80130a4:	4610      	mov	r0, r2
 80130a6:	4798      	blx	r3
 80130a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	3301      	adds	r3, #1
 80130ae:	2202      	movs	r2, #2
 80130b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80130b2:	e113      	b.n	80132dc <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80130ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130bc:	f107 0208 	add.w	r2, r7, #8
 80130c0:	4610      	mov	r0, r2
 80130c2:	4798      	blx	r3
 80130c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	3301      	adds	r3, #1
 80130ca:	2202      	movs	r2, #2
 80130cc:	701a      	strb	r2, [r3, #0]
      break;
 80130ce:	e105      	b.n	80132dc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	885b      	ldrh	r3, [r3, #2]
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	2b05      	cmp	r3, #5
 80130d8:	f200 80ac 	bhi.w	8013234 <USBD_GetDescriptor+0x204>
 80130dc:	a201      	add	r2, pc, #4	; (adr r2, 80130e4 <USBD_GetDescriptor+0xb4>)
 80130de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130e2:	bf00      	nop
 80130e4:	080130fd 	.word	0x080130fd
 80130e8:	08013131 	.word	0x08013131
 80130ec:	08013165 	.word	0x08013165
 80130f0:	08013199 	.word	0x08013199
 80130f4:	080131cd 	.word	0x080131cd
 80130f8:	08013201 	.word	0x08013201
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d00b      	beq.n	8013120 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	687a      	ldr	r2, [r7, #4]
 8013112:	7c12      	ldrb	r2, [r2, #16]
 8013114:	f107 0108 	add.w	r1, r7, #8
 8013118:	4610      	mov	r0, r2
 801311a:	4798      	blx	r3
 801311c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801311e:	e0a4      	b.n	801326a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013120:	6839      	ldr	r1, [r7, #0]
 8013122:	6878      	ldr	r0, [r7, #4]
 8013124:	f000 faaa 	bl	801367c <USBD_CtlError>
            err++;
 8013128:	7afb      	ldrb	r3, [r7, #11]
 801312a:	3301      	adds	r3, #1
 801312c:	72fb      	strb	r3, [r7, #11]
          break;
 801312e:	e09c      	b.n	801326a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013136:	689b      	ldr	r3, [r3, #8]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d00b      	beq.n	8013154 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013142:	689b      	ldr	r3, [r3, #8]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	7c12      	ldrb	r2, [r2, #16]
 8013148:	f107 0108 	add.w	r1, r7, #8
 801314c:	4610      	mov	r0, r2
 801314e:	4798      	blx	r3
 8013150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013152:	e08a      	b.n	801326a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013154:	6839      	ldr	r1, [r7, #0]
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	f000 fa90 	bl	801367c <USBD_CtlError>
            err++;
 801315c:	7afb      	ldrb	r3, [r7, #11]
 801315e:	3301      	adds	r3, #1
 8013160:	72fb      	strb	r3, [r7, #11]
          break;
 8013162:	e082      	b.n	801326a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801316a:	68db      	ldr	r3, [r3, #12]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d00b      	beq.n	8013188 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013176:	68db      	ldr	r3, [r3, #12]
 8013178:	687a      	ldr	r2, [r7, #4]
 801317a:	7c12      	ldrb	r2, [r2, #16]
 801317c:	f107 0108 	add.w	r1, r7, #8
 8013180:	4610      	mov	r0, r2
 8013182:	4798      	blx	r3
 8013184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013186:	e070      	b.n	801326a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013188:	6839      	ldr	r1, [r7, #0]
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f000 fa76 	bl	801367c <USBD_CtlError>
            err++;
 8013190:	7afb      	ldrb	r3, [r7, #11]
 8013192:	3301      	adds	r3, #1
 8013194:	72fb      	strb	r3, [r7, #11]
          break;
 8013196:	e068      	b.n	801326a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801319e:	691b      	ldr	r3, [r3, #16]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d00b      	beq.n	80131bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80131aa:	691b      	ldr	r3, [r3, #16]
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	7c12      	ldrb	r2, [r2, #16]
 80131b0:	f107 0108 	add.w	r1, r7, #8
 80131b4:	4610      	mov	r0, r2
 80131b6:	4798      	blx	r3
 80131b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80131ba:	e056      	b.n	801326a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80131bc:	6839      	ldr	r1, [r7, #0]
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	f000 fa5c 	bl	801367c <USBD_CtlError>
            err++;
 80131c4:	7afb      	ldrb	r3, [r7, #11]
 80131c6:	3301      	adds	r3, #1
 80131c8:	72fb      	strb	r3, [r7, #11]
          break;
 80131ca:	e04e      	b.n	801326a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80131d2:	695b      	ldr	r3, [r3, #20]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d00b      	beq.n	80131f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80131de:	695b      	ldr	r3, [r3, #20]
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	7c12      	ldrb	r2, [r2, #16]
 80131e4:	f107 0108 	add.w	r1, r7, #8
 80131e8:	4610      	mov	r0, r2
 80131ea:	4798      	blx	r3
 80131ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80131ee:	e03c      	b.n	801326a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80131f0:	6839      	ldr	r1, [r7, #0]
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f000 fa42 	bl	801367c <USBD_CtlError>
            err++;
 80131f8:	7afb      	ldrb	r3, [r7, #11]
 80131fa:	3301      	adds	r3, #1
 80131fc:	72fb      	strb	r3, [r7, #11]
          break;
 80131fe:	e034      	b.n	801326a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013206:	699b      	ldr	r3, [r3, #24]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00b      	beq.n	8013224 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013212:	699b      	ldr	r3, [r3, #24]
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	7c12      	ldrb	r2, [r2, #16]
 8013218:	f107 0108 	add.w	r1, r7, #8
 801321c:	4610      	mov	r0, r2
 801321e:	4798      	blx	r3
 8013220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013222:	e022      	b.n	801326a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013224:	6839      	ldr	r1, [r7, #0]
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f000 fa28 	bl	801367c <USBD_CtlError>
            err++;
 801322c:	7afb      	ldrb	r3, [r7, #11]
 801322e:	3301      	adds	r3, #1
 8013230:	72fb      	strb	r3, [r7, #11]
          break;
 8013232:	e01a      	b.n	801326a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801323c:	2b00      	cmp	r3, #0
 801323e:	d00c      	beq.n	801325a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013248:	683a      	ldr	r2, [r7, #0]
 801324a:	8852      	ldrh	r2, [r2, #2]
 801324c:	b2d1      	uxtb	r1, r2
 801324e:	f107 0208 	add.w	r2, r7, #8
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	4798      	blx	r3
 8013256:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013258:	e006      	b.n	8013268 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 801325a:	6839      	ldr	r1, [r7, #0]
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f000 fa0d 	bl	801367c <USBD_CtlError>
            err++;
 8013262:	7afb      	ldrb	r3, [r7, #11]
 8013264:	3301      	adds	r3, #1
 8013266:	72fb      	strb	r3, [r7, #11]
          break;
 8013268:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 801326a:	e037      	b.n	80132dc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	7c1b      	ldrb	r3, [r3, #16]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d109      	bne.n	8013288 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801327c:	f107 0208 	add.w	r2, r7, #8
 8013280:	4610      	mov	r0, r2
 8013282:	4798      	blx	r3
 8013284:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013286:	e029      	b.n	80132dc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8013288:	6839      	ldr	r1, [r7, #0]
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f000 f9f6 	bl	801367c <USBD_CtlError>
        err++;
 8013290:	7afb      	ldrb	r3, [r7, #11]
 8013292:	3301      	adds	r3, #1
 8013294:	72fb      	strb	r3, [r7, #11]
      break;
 8013296:	e021      	b.n	80132dc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	7c1b      	ldrb	r3, [r3, #16]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d10d      	bne.n	80132bc <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132a8:	f107 0208 	add.w	r2, r7, #8
 80132ac:	4610      	mov	r0, r2
 80132ae:	4798      	blx	r3
 80132b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	3301      	adds	r3, #1
 80132b6:	2207      	movs	r2, #7
 80132b8:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80132ba:	e00f      	b.n	80132dc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80132bc:	6839      	ldr	r1, [r7, #0]
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f000 f9dc 	bl	801367c <USBD_CtlError>
        err++;
 80132c4:	7afb      	ldrb	r3, [r7, #11]
 80132c6:	3301      	adds	r3, #1
 80132c8:	72fb      	strb	r3, [r7, #11]
      break;
 80132ca:	e007      	b.n	80132dc <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80132cc:	6839      	ldr	r1, [r7, #0]
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f000 f9d4 	bl	801367c <USBD_CtlError>
      err++;
 80132d4:	7afb      	ldrb	r3, [r7, #11]
 80132d6:	3301      	adds	r3, #1
 80132d8:	72fb      	strb	r3, [r7, #11]
      break;
 80132da:	bf00      	nop
  }

  if (err != 0U)
 80132dc:	7afb      	ldrb	r3, [r7, #11]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d11c      	bne.n	801331c <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80132e2:	893b      	ldrh	r3, [r7, #8]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d011      	beq.n	801330c <USBD_GetDescriptor+0x2dc>
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	88db      	ldrh	r3, [r3, #6]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d00d      	beq.n	801330c <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	88da      	ldrh	r2, [r3, #6]
 80132f4:	893b      	ldrh	r3, [r7, #8]
 80132f6:	4293      	cmp	r3, r2
 80132f8:	bf28      	it	cs
 80132fa:	4613      	movcs	r3, r2
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013300:	893b      	ldrh	r3, [r7, #8]
 8013302:	461a      	mov	r2, r3
 8013304:	68f9      	ldr	r1, [r7, #12]
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f000 f9c9 	bl	801369e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	88db      	ldrh	r3, [r3, #6]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d104      	bne.n	801331e <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f000 fa02 	bl	801371e <USBD_CtlSendStatus>
 801331a:	e000      	b.n	801331e <USBD_GetDescriptor+0x2ee>
    return;
 801331c:	bf00      	nop
    }
  }
}
 801331e:	3710      	adds	r7, #16
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}

08013324 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	889b      	ldrh	r3, [r3, #4]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d130      	bne.n	8013398 <USBD_SetAddress+0x74>
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	88db      	ldrh	r3, [r3, #6]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d12c      	bne.n	8013398 <USBD_SetAddress+0x74>
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	885b      	ldrh	r3, [r3, #2]
 8013342:	2b7f      	cmp	r3, #127	; 0x7f
 8013344:	d828      	bhi.n	8013398 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	885b      	ldrh	r3, [r3, #2]
 801334a:	b2db      	uxtb	r3, r3
 801334c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013350:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013358:	2b03      	cmp	r3, #3
 801335a:	d104      	bne.n	8013366 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801335c:	6839      	ldr	r1, [r7, #0]
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f000 f98c 	bl	801367c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013364:	e01d      	b.n	80133a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	7bfa      	ldrb	r2, [r7, #15]
 801336a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801336e:	7bfb      	ldrb	r3, [r7, #15]
 8013370:	4619      	mov	r1, r3
 8013372:	6878      	ldr	r0, [r7, #4]
 8013374:	f7f1 fff8 	bl	8005368 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f000 f9d0 	bl	801371e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801337e:	7bfb      	ldrb	r3, [r7, #15]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d004      	beq.n	801338e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2202      	movs	r2, #2
 8013388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801338c:	e009      	b.n	80133a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2201      	movs	r2, #1
 8013392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013396:	e004      	b.n	80133a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013398:	6839      	ldr	r1, [r7, #0]
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f000 f96e 	bl	801367c <USBD_CtlError>
  }
}
 80133a0:	bf00      	nop
 80133a2:	bf00      	nop
 80133a4:	3710      	adds	r7, #16
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
	...

080133ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	885b      	ldrh	r3, [r3, #2]
 80133ba:	b2da      	uxtb	r2, r3
 80133bc:	4b41      	ldr	r3, [pc, #260]	; (80134c4 <USBD_SetConfig+0x118>)
 80133be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80133c0:	4b40      	ldr	r3, [pc, #256]	; (80134c4 <USBD_SetConfig+0x118>)
 80133c2:	781b      	ldrb	r3, [r3, #0]
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	d904      	bls.n	80133d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80133c8:	6839      	ldr	r1, [r7, #0]
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f000 f956 	bl	801367c <USBD_CtlError>
 80133d0:	e075      	b.n	80134be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80133d8:	2b02      	cmp	r3, #2
 80133da:	d002      	beq.n	80133e2 <USBD_SetConfig+0x36>
 80133dc:	2b03      	cmp	r3, #3
 80133de:	d023      	beq.n	8013428 <USBD_SetConfig+0x7c>
 80133e0:	e062      	b.n	80134a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80133e2:	4b38      	ldr	r3, [pc, #224]	; (80134c4 <USBD_SetConfig+0x118>)
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d01a      	beq.n	8013420 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80133ea:	4b36      	ldr	r3, [pc, #216]	; (80134c4 <USBD_SetConfig+0x118>)
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	461a      	mov	r2, r3
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2203      	movs	r2, #3
 80133f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80133fc:	4b31      	ldr	r3, [pc, #196]	; (80134c4 <USBD_SetConfig+0x118>)
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	4619      	mov	r1, r3
 8013402:	6878      	ldr	r0, [r7, #4]
 8013404:	f7ff f997 	bl	8012736 <USBD_SetClassConfig>
 8013408:	4603      	mov	r3, r0
 801340a:	2b02      	cmp	r3, #2
 801340c:	d104      	bne.n	8013418 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801340e:	6839      	ldr	r1, [r7, #0]
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f000 f933 	bl	801367c <USBD_CtlError>
            return;
 8013416:	e052      	b.n	80134be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f000 f980 	bl	801371e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801341e:	e04e      	b.n	80134be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f000 f97c 	bl	801371e <USBD_CtlSendStatus>
        break;
 8013426:	e04a      	b.n	80134be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8013428:	4b26      	ldr	r3, [pc, #152]	; (80134c4 <USBD_SetConfig+0x118>)
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d112      	bne.n	8013456 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2202      	movs	r2, #2
 8013434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8013438:	4b22      	ldr	r3, [pc, #136]	; (80134c4 <USBD_SetConfig+0x118>)
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	461a      	mov	r2, r3
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8013442:	4b20      	ldr	r3, [pc, #128]	; (80134c4 <USBD_SetConfig+0x118>)
 8013444:	781b      	ldrb	r3, [r3, #0]
 8013446:	4619      	mov	r1, r3
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f7ff f993 	bl	8012774 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f000 f965 	bl	801371e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013454:	e033      	b.n	80134be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8013456:	4b1b      	ldr	r3, [pc, #108]	; (80134c4 <USBD_SetConfig+0x118>)
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	461a      	mov	r2, r3
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	429a      	cmp	r2, r3
 8013462:	d01d      	beq.n	80134a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	685b      	ldr	r3, [r3, #4]
 8013468:	b2db      	uxtb	r3, r3
 801346a:	4619      	mov	r1, r3
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f7ff f981 	bl	8012774 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8013472:	4b14      	ldr	r3, [pc, #80]	; (80134c4 <USBD_SetConfig+0x118>)
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	461a      	mov	r2, r3
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801347c:	4b11      	ldr	r3, [pc, #68]	; (80134c4 <USBD_SetConfig+0x118>)
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	4619      	mov	r1, r3
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f7ff f957 	bl	8012736 <USBD_SetClassConfig>
 8013488:	4603      	mov	r3, r0
 801348a:	2b02      	cmp	r3, #2
 801348c:	d104      	bne.n	8013498 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801348e:	6839      	ldr	r1, [r7, #0]
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f000 f8f3 	bl	801367c <USBD_CtlError>
            return;
 8013496:	e012      	b.n	80134be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f000 f940 	bl	801371e <USBD_CtlSendStatus>
        break;
 801349e:	e00e      	b.n	80134be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f000 f93c 	bl	801371e <USBD_CtlSendStatus>
        break;
 80134a6:	e00a      	b.n	80134be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80134a8:	6839      	ldr	r1, [r7, #0]
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f000 f8e6 	bl	801367c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80134b0:	4b04      	ldr	r3, [pc, #16]	; (80134c4 <USBD_SetConfig+0x118>)
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	4619      	mov	r1, r3
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f7ff f95c 	bl	8012774 <USBD_ClrClassConfig>
        break;
 80134bc:	bf00      	nop
    }
  }
}
 80134be:	3708      	adds	r7, #8
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	2000098c 	.word	0x2000098c

080134c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b082      	sub	sp, #8
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	88db      	ldrh	r3, [r3, #6]
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	d004      	beq.n	80134e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80134da:	6839      	ldr	r1, [r7, #0]
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f000 f8cd 	bl	801367c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80134e2:	e022      	b.n	801352a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134ea:	2b02      	cmp	r3, #2
 80134ec:	dc02      	bgt.n	80134f4 <USBD_GetConfig+0x2c>
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	dc03      	bgt.n	80134fa <USBD_GetConfig+0x32>
 80134f2:	e015      	b.n	8013520 <USBD_GetConfig+0x58>
 80134f4:	2b03      	cmp	r3, #3
 80134f6:	d00b      	beq.n	8013510 <USBD_GetConfig+0x48>
 80134f8:	e012      	b.n	8013520 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2200      	movs	r2, #0
 80134fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	3308      	adds	r3, #8
 8013504:	2201      	movs	r2, #1
 8013506:	4619      	mov	r1, r3
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f000 f8c8 	bl	801369e <USBD_CtlSendData>
        break;
 801350e:	e00c      	b.n	801352a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	3304      	adds	r3, #4
 8013514:	2201      	movs	r2, #1
 8013516:	4619      	mov	r1, r3
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f000 f8c0 	bl	801369e <USBD_CtlSendData>
        break;
 801351e:	e004      	b.n	801352a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8013520:	6839      	ldr	r1, [r7, #0]
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f000 f8aa 	bl	801367c <USBD_CtlError>
        break;
 8013528:	bf00      	nop
}
 801352a:	bf00      	nop
 801352c:	3708      	adds	r7, #8
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}

08013532 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013532:	b580      	push	{r7, lr}
 8013534:	b082      	sub	sp, #8
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
 801353a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013542:	3b01      	subs	r3, #1
 8013544:	2b02      	cmp	r3, #2
 8013546:	d81e      	bhi.n	8013586 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	88db      	ldrh	r3, [r3, #6]
 801354c:	2b02      	cmp	r3, #2
 801354e:	d004      	beq.n	801355a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8013550:	6839      	ldr	r1, [r7, #0]
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f000 f892 	bl	801367c <USBD_CtlError>
        break;
 8013558:	e01a      	b.n	8013590 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2201      	movs	r2, #1
 801355e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013566:	2b00      	cmp	r3, #0
 8013568:	d005      	beq.n	8013576 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	68db      	ldr	r3, [r3, #12]
 801356e:	f043 0202 	orr.w	r2, r3, #2
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	330c      	adds	r3, #12
 801357a:	2202      	movs	r2, #2
 801357c:	4619      	mov	r1, r3
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f000 f88d 	bl	801369e <USBD_CtlSendData>
      break;
 8013584:	e004      	b.n	8013590 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8013586:	6839      	ldr	r1, [r7, #0]
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f000 f877 	bl	801367c <USBD_CtlError>
      break;
 801358e:	bf00      	nop
  }
}
 8013590:	bf00      	nop
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	885b      	ldrh	r3, [r3, #2]
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d106      	bne.n	80135b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2201      	movs	r2, #1
 80135ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f000 f8b3 	bl	801371e <USBD_CtlSendStatus>
  }
}
 80135b8:	bf00      	nop
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135d0:	3b01      	subs	r3, #1
 80135d2:	2b02      	cmp	r3, #2
 80135d4:	d80b      	bhi.n	80135ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	885b      	ldrh	r3, [r3, #2]
 80135da:	2b01      	cmp	r3, #1
 80135dc:	d10c      	bne.n	80135f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2200      	movs	r2, #0
 80135e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f000 f899 	bl	801371e <USBD_CtlSendStatus>
      }
      break;
 80135ec:	e004      	b.n	80135f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80135ee:	6839      	ldr	r1, [r7, #0]
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	f000 f843 	bl	801367c <USBD_CtlError>
      break;
 80135f6:	e000      	b.n	80135fa <USBD_ClrFeature+0x3a>
      break;
 80135f8:	bf00      	nop
  }
}
 80135fa:	bf00      	nop
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}

08013602 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013602:	b480      	push	{r7}
 8013604:	b083      	sub	sp, #12
 8013606:	af00      	add	r7, sp, #0
 8013608:	6078      	str	r0, [r7, #4]
 801360a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	781a      	ldrb	r2, [r3, #0]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	785a      	ldrb	r2, [r3, #1]
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	3302      	adds	r3, #2
 8013620:	781b      	ldrb	r3, [r3, #0]
 8013622:	b29a      	uxth	r2, r3
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	3303      	adds	r3, #3
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	b29b      	uxth	r3, r3
 801362c:	021b      	lsls	r3, r3, #8
 801362e:	b29b      	uxth	r3, r3
 8013630:	4413      	add	r3, r2
 8013632:	b29a      	uxth	r2, r3
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	3304      	adds	r3, #4
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	b29a      	uxth	r2, r3
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	3305      	adds	r3, #5
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	b29b      	uxth	r3, r3
 8013648:	021b      	lsls	r3, r3, #8
 801364a:	b29b      	uxth	r3, r3
 801364c:	4413      	add	r3, r2
 801364e:	b29a      	uxth	r2, r3
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	3306      	adds	r3, #6
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	b29a      	uxth	r2, r3
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	3307      	adds	r3, #7
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	b29b      	uxth	r3, r3
 8013664:	021b      	lsls	r3, r3, #8
 8013666:	b29b      	uxth	r3, r3
 8013668:	4413      	add	r3, r2
 801366a:	b29a      	uxth	r2, r3
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	80da      	strh	r2, [r3, #6]

}
 8013670:	bf00      	nop
 8013672:	370c      	adds	r7, #12
 8013674:	46bd      	mov	sp, r7
 8013676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367a:	4770      	bx	lr

0801367c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b082      	sub	sp, #8
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8013686:	2180      	movs	r1, #128	; 0x80
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f7f1 fe1b 	bl	80052c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801368e:	2100      	movs	r1, #0
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f7f1 fe17 	bl	80052c4 <USBD_LL_StallEP>
}
 8013696:	bf00      	nop
 8013698:	3708      	adds	r7, #8
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}

0801369e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801369e:	b580      	push	{r7, lr}
 80136a0:	b084      	sub	sp, #16
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	60f8      	str	r0, [r7, #12]
 80136a6:	60b9      	str	r1, [r7, #8]
 80136a8:	4613      	mov	r3, r2
 80136aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	2202      	movs	r2, #2
 80136b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80136b4:	88fa      	ldrh	r2, [r7, #6]
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80136ba:	88fa      	ldrh	r2, [r7, #6]
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80136c0:	88fb      	ldrh	r3, [r7, #6]
 80136c2:	68ba      	ldr	r2, [r7, #8]
 80136c4:	2100      	movs	r1, #0
 80136c6:	68f8      	ldr	r0, [r7, #12]
 80136c8:	f7f1 fe61 	bl	800538e <USBD_LL_Transmit>

  return USBD_OK;
 80136cc:	2300      	movs	r3, #0
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3710      	adds	r7, #16
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}

080136d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80136d6:	b580      	push	{r7, lr}
 80136d8:	b084      	sub	sp, #16
 80136da:	af00      	add	r7, sp, #0
 80136dc:	60f8      	str	r0, [r7, #12]
 80136de:	60b9      	str	r1, [r7, #8]
 80136e0:	4613      	mov	r3, r2
 80136e2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80136e4:	88fb      	ldrh	r3, [r7, #6]
 80136e6:	68ba      	ldr	r2, [r7, #8]
 80136e8:	2100      	movs	r1, #0
 80136ea:	68f8      	ldr	r0, [r7, #12]
 80136ec:	f7f1 fe4f 	bl	800538e <USBD_LL_Transmit>

  return USBD_OK;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3710      	adds	r7, #16
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}

080136fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80136fa:	b580      	push	{r7, lr}
 80136fc:	b084      	sub	sp, #16
 80136fe:	af00      	add	r7, sp, #0
 8013700:	60f8      	str	r0, [r7, #12]
 8013702:	60b9      	str	r1, [r7, #8]
 8013704:	4613      	mov	r3, r2
 8013706:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013708:	88fb      	ldrh	r3, [r7, #6]
 801370a:	68ba      	ldr	r2, [r7, #8]
 801370c:	2100      	movs	r1, #0
 801370e:	68f8      	ldr	r0, [r7, #12]
 8013710:	f7f1 fe54 	bl	80053bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013714:	2300      	movs	r3, #0
}
 8013716:	4618      	mov	r0, r3
 8013718:	3710      	adds	r7, #16
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}

0801371e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801371e:	b580      	push	{r7, lr}
 8013720:	b082      	sub	sp, #8
 8013722:	af00      	add	r7, sp, #0
 8013724:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2204      	movs	r2, #4
 801372a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801372e:	2300      	movs	r3, #0
 8013730:	2200      	movs	r2, #0
 8013732:	2100      	movs	r1, #0
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f7f1 fe2a 	bl	800538e <USBD_LL_Transmit>

  return USBD_OK;
 801373a:	2300      	movs	r3, #0
}
 801373c:	4618      	mov	r0, r3
 801373e:	3708      	adds	r7, #8
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}

08013744 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2205      	movs	r2, #5
 8013750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013754:	2300      	movs	r3, #0
 8013756:	2200      	movs	r2, #0
 8013758:	2100      	movs	r1, #0
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f7f1 fe2e 	bl	80053bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013760:	2300      	movs	r3, #0
}
 8013762:	4618      	mov	r0, r3
 8013764:	3708      	adds	r7, #8
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
	...

0801376c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b084      	sub	sp, #16
 8013770:	af00      	add	r7, sp, #0
 8013772:	4603      	mov	r3, r0
 8013774:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013776:	79fb      	ldrb	r3, [r7, #7]
 8013778:	4a08      	ldr	r2, [pc, #32]	; (801379c <disk_status+0x30>)
 801377a:	009b      	lsls	r3, r3, #2
 801377c:	4413      	add	r3, r2
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	79fa      	ldrb	r2, [r7, #7]
 8013784:	4905      	ldr	r1, [pc, #20]	; (801379c <disk_status+0x30>)
 8013786:	440a      	add	r2, r1
 8013788:	7a12      	ldrb	r2, [r2, #8]
 801378a:	4610      	mov	r0, r2
 801378c:	4798      	blx	r3
 801378e:	4603      	mov	r3, r0
 8013790:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013792:	7bfb      	ldrb	r3, [r7, #15]
}
 8013794:	4618      	mov	r0, r3
 8013796:	3710      	adds	r7, #16
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	20000cd8 	.word	0x20000cd8

080137a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b084      	sub	sp, #16
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	4603      	mov	r3, r0
 80137a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80137aa:	2300      	movs	r3, #0
 80137ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80137ae:	79fb      	ldrb	r3, [r7, #7]
 80137b0:	4a0d      	ldr	r2, [pc, #52]	; (80137e8 <disk_initialize+0x48>)
 80137b2:	5cd3      	ldrb	r3, [r2, r3]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d111      	bne.n	80137dc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80137b8:	79fb      	ldrb	r3, [r7, #7]
 80137ba:	4a0b      	ldr	r2, [pc, #44]	; (80137e8 <disk_initialize+0x48>)
 80137bc:	2101      	movs	r1, #1
 80137be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80137c0:	79fb      	ldrb	r3, [r7, #7]
 80137c2:	4a09      	ldr	r2, [pc, #36]	; (80137e8 <disk_initialize+0x48>)
 80137c4:	009b      	lsls	r3, r3, #2
 80137c6:	4413      	add	r3, r2
 80137c8:	685b      	ldr	r3, [r3, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	79fa      	ldrb	r2, [r7, #7]
 80137ce:	4906      	ldr	r1, [pc, #24]	; (80137e8 <disk_initialize+0x48>)
 80137d0:	440a      	add	r2, r1
 80137d2:	7a12      	ldrb	r2, [r2, #8]
 80137d4:	4610      	mov	r0, r2
 80137d6:	4798      	blx	r3
 80137d8:	4603      	mov	r3, r0
 80137da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80137dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3710      	adds	r7, #16
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	bf00      	nop
 80137e8:	20000cd8 	.word	0x20000cd8

080137ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80137ec:	b590      	push	{r4, r7, lr}
 80137ee:	b087      	sub	sp, #28
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	60b9      	str	r1, [r7, #8]
 80137f4:	607a      	str	r2, [r7, #4]
 80137f6:	603b      	str	r3, [r7, #0]
 80137f8:	4603      	mov	r3, r0
 80137fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80137fc:	7bfb      	ldrb	r3, [r7, #15]
 80137fe:	4a0a      	ldr	r2, [pc, #40]	; (8013828 <disk_read+0x3c>)
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4413      	add	r3, r2
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	689c      	ldr	r4, [r3, #8]
 8013808:	7bfb      	ldrb	r3, [r7, #15]
 801380a:	4a07      	ldr	r2, [pc, #28]	; (8013828 <disk_read+0x3c>)
 801380c:	4413      	add	r3, r2
 801380e:	7a18      	ldrb	r0, [r3, #8]
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	68b9      	ldr	r1, [r7, #8]
 8013816:	47a0      	blx	r4
 8013818:	4603      	mov	r3, r0
 801381a:	75fb      	strb	r3, [r7, #23]
  return res;
 801381c:	7dfb      	ldrb	r3, [r7, #23]
}
 801381e:	4618      	mov	r0, r3
 8013820:	371c      	adds	r7, #28
 8013822:	46bd      	mov	sp, r7
 8013824:	bd90      	pop	{r4, r7, pc}
 8013826:	bf00      	nop
 8013828:	20000cd8 	.word	0x20000cd8

0801382c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801382c:	b590      	push	{r4, r7, lr}
 801382e:	b087      	sub	sp, #28
 8013830:	af00      	add	r7, sp, #0
 8013832:	60b9      	str	r1, [r7, #8]
 8013834:	607a      	str	r2, [r7, #4]
 8013836:	603b      	str	r3, [r7, #0]
 8013838:	4603      	mov	r3, r0
 801383a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801383c:	7bfb      	ldrb	r3, [r7, #15]
 801383e:	4a0a      	ldr	r2, [pc, #40]	; (8013868 <disk_write+0x3c>)
 8013840:	009b      	lsls	r3, r3, #2
 8013842:	4413      	add	r3, r2
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	68dc      	ldr	r4, [r3, #12]
 8013848:	7bfb      	ldrb	r3, [r7, #15]
 801384a:	4a07      	ldr	r2, [pc, #28]	; (8013868 <disk_write+0x3c>)
 801384c:	4413      	add	r3, r2
 801384e:	7a18      	ldrb	r0, [r3, #8]
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	68b9      	ldr	r1, [r7, #8]
 8013856:	47a0      	blx	r4
 8013858:	4603      	mov	r3, r0
 801385a:	75fb      	strb	r3, [r7, #23]
  return res;
 801385c:	7dfb      	ldrb	r3, [r7, #23]
}
 801385e:	4618      	mov	r0, r3
 8013860:	371c      	adds	r7, #28
 8013862:	46bd      	mov	sp, r7
 8013864:	bd90      	pop	{r4, r7, pc}
 8013866:	bf00      	nop
 8013868:	20000cd8 	.word	0x20000cd8

0801386c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b084      	sub	sp, #16
 8013870:	af00      	add	r7, sp, #0
 8013872:	4603      	mov	r3, r0
 8013874:	603a      	str	r2, [r7, #0]
 8013876:	71fb      	strb	r3, [r7, #7]
 8013878:	460b      	mov	r3, r1
 801387a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801387c:	79fb      	ldrb	r3, [r7, #7]
 801387e:	4a09      	ldr	r2, [pc, #36]	; (80138a4 <disk_ioctl+0x38>)
 8013880:	009b      	lsls	r3, r3, #2
 8013882:	4413      	add	r3, r2
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	691b      	ldr	r3, [r3, #16]
 8013888:	79fa      	ldrb	r2, [r7, #7]
 801388a:	4906      	ldr	r1, [pc, #24]	; (80138a4 <disk_ioctl+0x38>)
 801388c:	440a      	add	r2, r1
 801388e:	7a10      	ldrb	r0, [r2, #8]
 8013890:	79b9      	ldrb	r1, [r7, #6]
 8013892:	683a      	ldr	r2, [r7, #0]
 8013894:	4798      	blx	r3
 8013896:	4603      	mov	r3, r0
 8013898:	73fb      	strb	r3, [r7, #15]
  return res;
 801389a:	7bfb      	ldrb	r3, [r7, #15]
}
 801389c:	4618      	mov	r0, r3
 801389e:	3710      	adds	r7, #16
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	20000cd8 	.word	0x20000cd8

080138a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 80138a8:	b480      	push	{r7}
 80138aa:	af00      	add	r7, sp, #0
  return 0;
 80138ac:	2300      	movs	r3, #0
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	46bd      	mov	sp, r7
 80138b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b6:	4770      	bx	lr

080138b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80138b8:	b480      	push	{r7}
 80138ba:	b085      	sub	sp, #20
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	3301      	adds	r3, #1
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80138c8:	89fb      	ldrh	r3, [r7, #14]
 80138ca:	021b      	lsls	r3, r3, #8
 80138cc:	b21a      	sxth	r2, r3
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	b21b      	sxth	r3, r3
 80138d4:	4313      	orrs	r3, r2
 80138d6:	b21b      	sxth	r3, r3
 80138d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80138da:	89fb      	ldrh	r3, [r7, #14]
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3714      	adds	r7, #20
 80138e0:	46bd      	mov	sp, r7
 80138e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e6:	4770      	bx	lr

080138e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80138e8:	b480      	push	{r7}
 80138ea:	b085      	sub	sp, #20
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	3303      	adds	r3, #3
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	021b      	lsls	r3, r3, #8
 80138fc:	687a      	ldr	r2, [r7, #4]
 80138fe:	3202      	adds	r2, #2
 8013900:	7812      	ldrb	r2, [r2, #0]
 8013902:	4313      	orrs	r3, r2
 8013904:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	021b      	lsls	r3, r3, #8
 801390a:	687a      	ldr	r2, [r7, #4]
 801390c:	3201      	adds	r2, #1
 801390e:	7812      	ldrb	r2, [r2, #0]
 8013910:	4313      	orrs	r3, r2
 8013912:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	021b      	lsls	r3, r3, #8
 8013918:	687a      	ldr	r2, [r7, #4]
 801391a:	7812      	ldrb	r2, [r2, #0]
 801391c:	4313      	orrs	r3, r2
 801391e:	60fb      	str	r3, [r7, #12]
	return rv;
 8013920:	68fb      	ldr	r3, [r7, #12]
}
 8013922:	4618      	mov	r0, r3
 8013924:	3714      	adds	r7, #20
 8013926:	46bd      	mov	sp, r7
 8013928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392c:	4770      	bx	lr

0801392e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801392e:	b480      	push	{r7}
 8013930:	b083      	sub	sp, #12
 8013932:	af00      	add	r7, sp, #0
 8013934:	6078      	str	r0, [r7, #4]
 8013936:	460b      	mov	r3, r1
 8013938:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	1c5a      	adds	r2, r3, #1
 801393e:	607a      	str	r2, [r7, #4]
 8013940:	887a      	ldrh	r2, [r7, #2]
 8013942:	b2d2      	uxtb	r2, r2
 8013944:	701a      	strb	r2, [r3, #0]
 8013946:	887b      	ldrh	r3, [r7, #2]
 8013948:	0a1b      	lsrs	r3, r3, #8
 801394a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	1c5a      	adds	r2, r3, #1
 8013950:	607a      	str	r2, [r7, #4]
 8013952:	887a      	ldrh	r2, [r7, #2]
 8013954:	b2d2      	uxtb	r2, r2
 8013956:	701a      	strb	r2, [r3, #0]
}
 8013958:	bf00      	nop
 801395a:	370c      	adds	r7, #12
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr

08013964 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013964:	b480      	push	{r7}
 8013966:	b083      	sub	sp, #12
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	1c5a      	adds	r2, r3, #1
 8013972:	607a      	str	r2, [r7, #4]
 8013974:	683a      	ldr	r2, [r7, #0]
 8013976:	b2d2      	uxtb	r2, r2
 8013978:	701a      	strb	r2, [r3, #0]
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	0a1b      	lsrs	r3, r3, #8
 801397e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	1c5a      	adds	r2, r3, #1
 8013984:	607a      	str	r2, [r7, #4]
 8013986:	683a      	ldr	r2, [r7, #0]
 8013988:	b2d2      	uxtb	r2, r2
 801398a:	701a      	strb	r2, [r3, #0]
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	0a1b      	lsrs	r3, r3, #8
 8013990:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	1c5a      	adds	r2, r3, #1
 8013996:	607a      	str	r2, [r7, #4]
 8013998:	683a      	ldr	r2, [r7, #0]
 801399a:	b2d2      	uxtb	r2, r2
 801399c:	701a      	strb	r2, [r3, #0]
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	0a1b      	lsrs	r3, r3, #8
 80139a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	1c5a      	adds	r2, r3, #1
 80139a8:	607a      	str	r2, [r7, #4]
 80139aa:	683a      	ldr	r2, [r7, #0]
 80139ac:	b2d2      	uxtb	r2, r2
 80139ae:	701a      	strb	r2, [r3, #0]
}
 80139b0:	bf00      	nop
 80139b2:	370c      	adds	r7, #12
 80139b4:	46bd      	mov	sp, r7
 80139b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ba:	4770      	bx	lr

080139bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80139bc:	b480      	push	{r7}
 80139be:	b087      	sub	sp, #28
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d00d      	beq.n	80139f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80139d6:	693a      	ldr	r2, [r7, #16]
 80139d8:	1c53      	adds	r3, r2, #1
 80139da:	613b      	str	r3, [r7, #16]
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	1c59      	adds	r1, r3, #1
 80139e0:	6179      	str	r1, [r7, #20]
 80139e2:	7812      	ldrb	r2, [r2, #0]
 80139e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	3b01      	subs	r3, #1
 80139ea:	607b      	str	r3, [r7, #4]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d1f1      	bne.n	80139d6 <mem_cpy+0x1a>
	}
}
 80139f2:	bf00      	nop
 80139f4:	371c      	adds	r7, #28
 80139f6:	46bd      	mov	sp, r7
 80139f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fc:	4770      	bx	lr

080139fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80139fe:	b480      	push	{r7}
 8013a00:	b087      	sub	sp, #28
 8013a02:	af00      	add	r7, sp, #0
 8013a04:	60f8      	str	r0, [r7, #12]
 8013a06:	60b9      	str	r1, [r7, #8]
 8013a08:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	1c5a      	adds	r2, r3, #1
 8013a12:	617a      	str	r2, [r7, #20]
 8013a14:	68ba      	ldr	r2, [r7, #8]
 8013a16:	b2d2      	uxtb	r2, r2
 8013a18:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	3b01      	subs	r3, #1
 8013a1e:	607b      	str	r3, [r7, #4]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d1f3      	bne.n	8013a0e <mem_set+0x10>
}
 8013a26:	bf00      	nop
 8013a28:	bf00      	nop
 8013a2a:	371c      	adds	r7, #28
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr

08013a34 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013a34:	b480      	push	{r7}
 8013a36:	b089      	sub	sp, #36	; 0x24
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	60f8      	str	r0, [r7, #12]
 8013a3c:	60b9      	str	r1, [r7, #8]
 8013a3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	61fb      	str	r3, [r7, #28]
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8013a4c:	69fb      	ldr	r3, [r7, #28]
 8013a4e:	1c5a      	adds	r2, r3, #1
 8013a50:	61fa      	str	r2, [r7, #28]
 8013a52:	781b      	ldrb	r3, [r3, #0]
 8013a54:	4619      	mov	r1, r3
 8013a56:	69bb      	ldr	r3, [r7, #24]
 8013a58:	1c5a      	adds	r2, r3, #1
 8013a5a:	61ba      	str	r2, [r7, #24]
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	1acb      	subs	r3, r1, r3
 8013a60:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	3b01      	subs	r3, #1
 8013a66:	607b      	str	r3, [r7, #4]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d002      	beq.n	8013a74 <mem_cmp+0x40>
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d0eb      	beq.n	8013a4c <mem_cmp+0x18>

	return r;
 8013a74:	697b      	ldr	r3, [r7, #20]
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3724      	adds	r7, #36	; 0x24
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8013a82:	b480      	push	{r7}
 8013a84:	b083      	sub	sp, #12
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
 8013a8a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8013a8c:	e002      	b.n	8013a94 <chk_chr+0x12>
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	3301      	adds	r3, #1
 8013a92:	607b      	str	r3, [r7, #4]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	781b      	ldrb	r3, [r3, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d005      	beq.n	8013aa8 <chk_chr+0x26>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	781b      	ldrb	r3, [r3, #0]
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	4293      	cmp	r3, r2
 8013aa6:	d1f2      	bne.n	8013a8e <chk_chr+0xc>
	return *str;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	781b      	ldrb	r3, [r3, #0]
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	370c      	adds	r7, #12
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab6:	4770      	bx	lr

08013ab8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013ab8:	b480      	push	{r7}
 8013aba:	b085      	sub	sp, #20
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
 8013ac0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	60bb      	str	r3, [r7, #8]
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	60fb      	str	r3, [r7, #12]
 8013aca:	e029      	b.n	8013b20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013acc:	4a27      	ldr	r2, [pc, #156]	; (8013b6c <chk_lock+0xb4>)
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	011b      	lsls	r3, r3, #4
 8013ad2:	4413      	add	r3, r2
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d01d      	beq.n	8013b16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013ada:	4a24      	ldr	r2, [pc, #144]	; (8013b6c <chk_lock+0xb4>)
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	011b      	lsls	r3, r3, #4
 8013ae0:	4413      	add	r3, r2
 8013ae2:	681a      	ldr	r2, [r3, #0]
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d116      	bne.n	8013b1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013aec:	4a1f      	ldr	r2, [pc, #124]	; (8013b6c <chk_lock+0xb4>)
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	011b      	lsls	r3, r3, #4
 8013af2:	4413      	add	r3, r2
 8013af4:	3304      	adds	r3, #4
 8013af6:	681a      	ldr	r2, [r3, #0]
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d10c      	bne.n	8013b1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013b00:	4a1a      	ldr	r2, [pc, #104]	; (8013b6c <chk_lock+0xb4>)
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	011b      	lsls	r3, r3, #4
 8013b06:	4413      	add	r3, r2
 8013b08:	3308      	adds	r3, #8
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d102      	bne.n	8013b1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013b14:	e007      	b.n	8013b26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013b16:	2301      	movs	r3, #1
 8013b18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	3301      	adds	r3, #1
 8013b1e:	60fb      	str	r3, [r7, #12]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2b13      	cmp	r3, #19
 8013b24:	d9d2      	bls.n	8013acc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2b14      	cmp	r3, #20
 8013b2a:	d109      	bne.n	8013b40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013b2c:	68bb      	ldr	r3, [r7, #8]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d102      	bne.n	8013b38 <chk_lock+0x80>
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	2b02      	cmp	r3, #2
 8013b36:	d101      	bne.n	8013b3c <chk_lock+0x84>
 8013b38:	2300      	movs	r3, #0
 8013b3a:	e010      	b.n	8013b5e <chk_lock+0xa6>
 8013b3c:	2312      	movs	r3, #18
 8013b3e:	e00e      	b.n	8013b5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d108      	bne.n	8013b58 <chk_lock+0xa0>
 8013b46:	4a09      	ldr	r2, [pc, #36]	; (8013b6c <chk_lock+0xb4>)
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	011b      	lsls	r3, r3, #4
 8013b4c:	4413      	add	r3, r2
 8013b4e:	330c      	adds	r3, #12
 8013b50:	881b      	ldrh	r3, [r3, #0]
 8013b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b56:	d101      	bne.n	8013b5c <chk_lock+0xa4>
 8013b58:	2310      	movs	r3, #16
 8013b5a:	e000      	b.n	8013b5e <chk_lock+0xa6>
 8013b5c:	2300      	movs	r3, #0
}
 8013b5e:	4618      	mov	r0, r3
 8013b60:	3714      	adds	r7, #20
 8013b62:	46bd      	mov	sp, r7
 8013b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b68:	4770      	bx	lr
 8013b6a:	bf00      	nop
 8013b6c:	20000998 	.word	0x20000998

08013b70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013b70:	b480      	push	{r7}
 8013b72:	b083      	sub	sp, #12
 8013b74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013b76:	2300      	movs	r3, #0
 8013b78:	607b      	str	r3, [r7, #4]
 8013b7a:	e002      	b.n	8013b82 <enq_lock+0x12>
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	3301      	adds	r3, #1
 8013b80:	607b      	str	r3, [r7, #4]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2b13      	cmp	r3, #19
 8013b86:	d806      	bhi.n	8013b96 <enq_lock+0x26>
 8013b88:	4a09      	ldr	r2, [pc, #36]	; (8013bb0 <enq_lock+0x40>)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	011b      	lsls	r3, r3, #4
 8013b8e:	4413      	add	r3, r2
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d1f2      	bne.n	8013b7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	2b14      	cmp	r3, #20
 8013b9a:	bf14      	ite	ne
 8013b9c:	2301      	movne	r3, #1
 8013b9e:	2300      	moveq	r3, #0
 8013ba0:	b2db      	uxtb	r3, r3
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	370c      	adds	r7, #12
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bac:	4770      	bx	lr
 8013bae:	bf00      	nop
 8013bb0:	20000998 	.word	0x20000998

08013bb4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b085      	sub	sp, #20
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	60fb      	str	r3, [r7, #12]
 8013bc2:	e01f      	b.n	8013c04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013bc4:	4a41      	ldr	r2, [pc, #260]	; (8013ccc <inc_lock+0x118>)
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	011b      	lsls	r3, r3, #4
 8013bca:	4413      	add	r3, r2
 8013bcc:	681a      	ldr	r2, [r3, #0]
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d113      	bne.n	8013bfe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013bd6:	4a3d      	ldr	r2, [pc, #244]	; (8013ccc <inc_lock+0x118>)
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	011b      	lsls	r3, r3, #4
 8013bdc:	4413      	add	r3, r2
 8013bde:	3304      	adds	r3, #4
 8013be0:	681a      	ldr	r2, [r3, #0]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d109      	bne.n	8013bfe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013bea:	4a38      	ldr	r2, [pc, #224]	; (8013ccc <inc_lock+0x118>)
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	011b      	lsls	r3, r3, #4
 8013bf0:	4413      	add	r3, r2
 8013bf2:	3308      	adds	r3, #8
 8013bf4:	681a      	ldr	r2, [r3, #0]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d006      	beq.n	8013c0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	3301      	adds	r3, #1
 8013c02:	60fb      	str	r3, [r7, #12]
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	2b13      	cmp	r3, #19
 8013c08:	d9dc      	bls.n	8013bc4 <inc_lock+0x10>
 8013c0a:	e000      	b.n	8013c0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013c0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	2b14      	cmp	r3, #20
 8013c12:	d132      	bne.n	8013c7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013c14:	2300      	movs	r3, #0
 8013c16:	60fb      	str	r3, [r7, #12]
 8013c18:	e002      	b.n	8013c20 <inc_lock+0x6c>
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	60fb      	str	r3, [r7, #12]
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	2b13      	cmp	r3, #19
 8013c24:	d806      	bhi.n	8013c34 <inc_lock+0x80>
 8013c26:	4a29      	ldr	r2, [pc, #164]	; (8013ccc <inc_lock+0x118>)
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	011b      	lsls	r3, r3, #4
 8013c2c:	4413      	add	r3, r2
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d1f2      	bne.n	8013c1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2b14      	cmp	r3, #20
 8013c38:	d101      	bne.n	8013c3e <inc_lock+0x8a>
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	e040      	b.n	8013cc0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	681a      	ldr	r2, [r3, #0]
 8013c42:	4922      	ldr	r1, [pc, #136]	; (8013ccc <inc_lock+0x118>)
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	011b      	lsls	r3, r3, #4
 8013c48:	440b      	add	r3, r1
 8013c4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	689a      	ldr	r2, [r3, #8]
 8013c50:	491e      	ldr	r1, [pc, #120]	; (8013ccc <inc_lock+0x118>)
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	011b      	lsls	r3, r3, #4
 8013c56:	440b      	add	r3, r1
 8013c58:	3304      	adds	r3, #4
 8013c5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	695a      	ldr	r2, [r3, #20]
 8013c60:	491a      	ldr	r1, [pc, #104]	; (8013ccc <inc_lock+0x118>)
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	011b      	lsls	r3, r3, #4
 8013c66:	440b      	add	r3, r1
 8013c68:	3308      	adds	r3, #8
 8013c6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013c6c:	4a17      	ldr	r2, [pc, #92]	; (8013ccc <inc_lock+0x118>)
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	011b      	lsls	r3, r3, #4
 8013c72:	4413      	add	r3, r2
 8013c74:	330c      	adds	r3, #12
 8013c76:	2200      	movs	r2, #0
 8013c78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d009      	beq.n	8013c94 <inc_lock+0xe0>
 8013c80:	4a12      	ldr	r2, [pc, #72]	; (8013ccc <inc_lock+0x118>)
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	011b      	lsls	r3, r3, #4
 8013c86:	4413      	add	r3, r2
 8013c88:	330c      	adds	r3, #12
 8013c8a:	881b      	ldrh	r3, [r3, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d001      	beq.n	8013c94 <inc_lock+0xe0>
 8013c90:	2300      	movs	r3, #0
 8013c92:	e015      	b.n	8013cc0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d108      	bne.n	8013cac <inc_lock+0xf8>
 8013c9a:	4a0c      	ldr	r2, [pc, #48]	; (8013ccc <inc_lock+0x118>)
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	011b      	lsls	r3, r3, #4
 8013ca0:	4413      	add	r3, r2
 8013ca2:	330c      	adds	r3, #12
 8013ca4:	881b      	ldrh	r3, [r3, #0]
 8013ca6:	3301      	adds	r3, #1
 8013ca8:	b29a      	uxth	r2, r3
 8013caa:	e001      	b.n	8013cb0 <inc_lock+0xfc>
 8013cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013cb0:	4906      	ldr	r1, [pc, #24]	; (8013ccc <inc_lock+0x118>)
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	011b      	lsls	r3, r3, #4
 8013cb6:	440b      	add	r3, r1
 8013cb8:	330c      	adds	r3, #12
 8013cba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	3301      	adds	r3, #1
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3714      	adds	r7, #20
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr
 8013ccc:	20000998 	.word	0x20000998

08013cd0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013cd0:	b480      	push	{r7}
 8013cd2:	b085      	sub	sp, #20
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	3b01      	subs	r3, #1
 8013cdc:	607b      	str	r3, [r7, #4]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2b13      	cmp	r3, #19
 8013ce2:	d825      	bhi.n	8013d30 <dec_lock+0x60>
		n = Files[i].ctr;
 8013ce4:	4a17      	ldr	r2, [pc, #92]	; (8013d44 <dec_lock+0x74>)
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	011b      	lsls	r3, r3, #4
 8013cea:	4413      	add	r3, r2
 8013cec:	330c      	adds	r3, #12
 8013cee:	881b      	ldrh	r3, [r3, #0]
 8013cf0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013cf2:	89fb      	ldrh	r3, [r7, #14]
 8013cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013cf8:	d101      	bne.n	8013cfe <dec_lock+0x2e>
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013cfe:	89fb      	ldrh	r3, [r7, #14]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d002      	beq.n	8013d0a <dec_lock+0x3a>
 8013d04:	89fb      	ldrh	r3, [r7, #14]
 8013d06:	3b01      	subs	r3, #1
 8013d08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013d0a:	4a0e      	ldr	r2, [pc, #56]	; (8013d44 <dec_lock+0x74>)
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	011b      	lsls	r3, r3, #4
 8013d10:	4413      	add	r3, r2
 8013d12:	330c      	adds	r3, #12
 8013d14:	89fa      	ldrh	r2, [r7, #14]
 8013d16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013d18:	89fb      	ldrh	r3, [r7, #14]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d105      	bne.n	8013d2a <dec_lock+0x5a>
 8013d1e:	4a09      	ldr	r2, [pc, #36]	; (8013d44 <dec_lock+0x74>)
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	011b      	lsls	r3, r3, #4
 8013d24:	4413      	add	r3, r2
 8013d26:	2200      	movs	r2, #0
 8013d28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	737b      	strb	r3, [r7, #13]
 8013d2e:	e001      	b.n	8013d34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013d30:	2302      	movs	r3, #2
 8013d32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013d34:	7b7b      	ldrb	r3, [r7, #13]
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	3714      	adds	r7, #20
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d40:	4770      	bx	lr
 8013d42:	bf00      	nop
 8013d44:	20000998 	.word	0x20000998

08013d48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b085      	sub	sp, #20
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013d50:	2300      	movs	r3, #0
 8013d52:	60fb      	str	r3, [r7, #12]
 8013d54:	e010      	b.n	8013d78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013d56:	4a0d      	ldr	r2, [pc, #52]	; (8013d8c <clear_lock+0x44>)
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	011b      	lsls	r3, r3, #4
 8013d5c:	4413      	add	r3, r2
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d105      	bne.n	8013d72 <clear_lock+0x2a>
 8013d66:	4a09      	ldr	r2, [pc, #36]	; (8013d8c <clear_lock+0x44>)
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	011b      	lsls	r3, r3, #4
 8013d6c:	4413      	add	r3, r2
 8013d6e:	2200      	movs	r2, #0
 8013d70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	3301      	adds	r3, #1
 8013d76:	60fb      	str	r3, [r7, #12]
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2b13      	cmp	r3, #19
 8013d7c:	d9eb      	bls.n	8013d56 <clear_lock+0xe>
	}
}
 8013d7e:	bf00      	nop
 8013d80:	bf00      	nop
 8013d82:	3714      	adds	r7, #20
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr
 8013d8c:	20000998 	.word	0x20000998

08013d90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b086      	sub	sp, #24
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	78db      	ldrb	r3, [r3, #3]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d034      	beq.n	8013e0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013da8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	7858      	ldrb	r0, [r3, #1]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013db4:	2301      	movs	r3, #1
 8013db6:	697a      	ldr	r2, [r7, #20]
 8013db8:	f7ff fd38 	bl	801382c <disk_write>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d002      	beq.n	8013dc8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	73fb      	strb	r3, [r7, #15]
 8013dc6:	e022      	b.n	8013e0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dd2:	697a      	ldr	r2, [r7, #20]
 8013dd4:	1ad2      	subs	r2, r2, r3
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	69db      	ldr	r3, [r3, #28]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d217      	bcs.n	8013e0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	789b      	ldrb	r3, [r3, #2]
 8013de2:	613b      	str	r3, [r7, #16]
 8013de4:	e010      	b.n	8013e08 <sync_window+0x78>
					wsect += fs->fsize;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	69db      	ldr	r3, [r3, #28]
 8013dea:	697a      	ldr	r2, [r7, #20]
 8013dec:	4413      	add	r3, r2
 8013dee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	7858      	ldrb	r0, [r3, #1]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	697a      	ldr	r2, [r7, #20]
 8013dfe:	f7ff fd15 	bl	801382c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	3b01      	subs	r3, #1
 8013e06:	613b      	str	r3, [r7, #16]
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	2b01      	cmp	r3, #1
 8013e0c:	d8eb      	bhi.n	8013de6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3718      	adds	r7, #24
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b084      	sub	sp, #16
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
 8013e20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013e22:	2300      	movs	r3, #0
 8013e24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e2a:	683a      	ldr	r2, [r7, #0]
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d01b      	beq.n	8013e68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f7ff ffad 	bl	8013d90 <sync_window>
 8013e36:	4603      	mov	r3, r0
 8013e38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013e3a:	7bfb      	ldrb	r3, [r7, #15]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d113      	bne.n	8013e68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	7858      	ldrb	r0, [r3, #1]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	683a      	ldr	r2, [r7, #0]
 8013e4e:	f7ff fccd 	bl	80137ec <disk_read>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d004      	beq.n	8013e62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013e58:	f04f 33ff 	mov.w	r3, #4294967295
 8013e5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013e5e:	2301      	movs	r3, #1
 8013e60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	683a      	ldr	r2, [r7, #0]
 8013e66:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8013e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3710      	adds	r7, #16
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}
	...

08013e74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f7ff ff87 	bl	8013d90 <sync_window>
 8013e82:	4603      	mov	r3, r0
 8013e84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013e86:	7bfb      	ldrb	r3, [r7, #15]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d158      	bne.n	8013f3e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	2b03      	cmp	r3, #3
 8013e92:	d148      	bne.n	8013f26 <sync_fs+0xb2>
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	791b      	ldrb	r3, [r3, #4]
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d144      	bne.n	8013f26 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	3334      	adds	r3, #52	; 0x34
 8013ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013ea4:	2100      	movs	r1, #0
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7ff fda9 	bl	80139fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	3334      	adds	r3, #52	; 0x34
 8013eb0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013eb4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7ff fd38 	bl	801392e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	3334      	adds	r3, #52	; 0x34
 8013ec2:	4921      	ldr	r1, [pc, #132]	; (8013f48 <sync_fs+0xd4>)
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7ff fd4d 	bl	8013964 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	3334      	adds	r3, #52	; 0x34
 8013ece:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013ed2:	491e      	ldr	r1, [pc, #120]	; (8013f4c <sync_fs+0xd8>)
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7ff fd45 	bl	8013964 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	3334      	adds	r3, #52	; 0x34
 8013ede:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	695b      	ldr	r3, [r3, #20]
 8013ee6:	4619      	mov	r1, r3
 8013ee8:	4610      	mov	r0, r2
 8013eea:	f7ff fd3b 	bl	8013964 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	3334      	adds	r3, #52	; 0x34
 8013ef2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	691b      	ldr	r3, [r3, #16]
 8013efa:	4619      	mov	r1, r3
 8013efc:	4610      	mov	r0, r2
 8013efe:	f7ff fd31 	bl	8013964 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6a1b      	ldr	r3, [r3, #32]
 8013f06:	1c5a      	adds	r2, r3, #1
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	7858      	ldrb	r0, [r3, #1]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	f7ff fc86 	bl	801382c <disk_write>
			fs->fsi_flag = 0;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2200      	movs	r2, #0
 8013f24:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	785b      	ldrb	r3, [r3, #1]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	2100      	movs	r1, #0
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7ff fc9c 	bl	801386c <disk_ioctl>
 8013f34:	4603      	mov	r3, r0
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d001      	beq.n	8013f3e <sync_fs+0xca>
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3710      	adds	r7, #16
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}
 8013f48:	41615252 	.word	0x41615252
 8013f4c:	61417272 	.word	0x61417272

08013f50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013f50:	b480      	push	{r7}
 8013f52:	b083      	sub	sp, #12
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	3b02      	subs	r3, #2
 8013f5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	699b      	ldr	r3, [r3, #24]
 8013f64:	3b02      	subs	r3, #2
 8013f66:	683a      	ldr	r2, [r7, #0]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d301      	bcc.n	8013f70 <clust2sect+0x20>
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	e008      	b.n	8013f82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	895b      	ldrh	r3, [r3, #10]
 8013f74:	461a      	mov	r2, r3
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	fb03 f202 	mul.w	r2, r3, r2
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f80:	4413      	add	r3, r2
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	370c      	adds	r7, #12
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013f8e:	b580      	push	{r7, lr}
 8013f90:	b086      	sub	sp, #24
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
 8013f96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	2b01      	cmp	r3, #1
 8013fa2:	d904      	bls.n	8013fae <get_fat+0x20>
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	699b      	ldr	r3, [r3, #24]
 8013fa8:	683a      	ldr	r2, [r7, #0]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d302      	bcc.n	8013fb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013fae:	2301      	movs	r3, #1
 8013fb0:	617b      	str	r3, [r7, #20]
 8013fb2:	e08f      	b.n	80140d4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8013fb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	2b03      	cmp	r3, #3
 8013fc0:	d062      	beq.n	8014088 <get_fat+0xfa>
 8013fc2:	2b03      	cmp	r3, #3
 8013fc4:	dc7c      	bgt.n	80140c0 <get_fat+0x132>
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	d002      	beq.n	8013fd0 <get_fat+0x42>
 8013fca:	2b02      	cmp	r3, #2
 8013fcc:	d042      	beq.n	8014054 <get_fat+0xc6>
 8013fce:	e077      	b.n	80140c0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	60fb      	str	r3, [r7, #12]
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	085b      	lsrs	r3, r3, #1
 8013fd8:	68fa      	ldr	r2, [r7, #12]
 8013fda:	4413      	add	r3, r2
 8013fdc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	0a5b      	lsrs	r3, r3, #9
 8013fe6:	4413      	add	r3, r2
 8013fe8:	4619      	mov	r1, r3
 8013fea:	6938      	ldr	r0, [r7, #16]
 8013fec:	f7ff ff14 	bl	8013e18 <move_window>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d167      	bne.n	80140c6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	1c5a      	adds	r2, r3, #1
 8013ffa:	60fa      	str	r2, [r7, #12]
 8013ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014000:	693a      	ldr	r2, [r7, #16]
 8014002:	4413      	add	r3, r2
 8014004:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014008:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	0a5b      	lsrs	r3, r3, #9
 8014012:	4413      	add	r3, r2
 8014014:	4619      	mov	r1, r3
 8014016:	6938      	ldr	r0, [r7, #16]
 8014018:	f7ff fefe 	bl	8013e18 <move_window>
 801401c:	4603      	mov	r3, r0
 801401e:	2b00      	cmp	r3, #0
 8014020:	d153      	bne.n	80140ca <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014028:	693a      	ldr	r2, [r7, #16]
 801402a:	4413      	add	r3, r2
 801402c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014030:	021b      	lsls	r3, r3, #8
 8014032:	461a      	mov	r2, r3
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	4313      	orrs	r3, r2
 8014038:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	f003 0301 	and.w	r3, r3, #1
 8014040:	2b00      	cmp	r3, #0
 8014042:	d002      	beq.n	801404a <get_fat+0xbc>
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	091b      	lsrs	r3, r3, #4
 8014048:	e002      	b.n	8014050 <get_fat+0xc2>
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014050:	617b      	str	r3, [r7, #20]
			break;
 8014052:	e03f      	b.n	80140d4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014054:	693b      	ldr	r3, [r7, #16]
 8014056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	0a1b      	lsrs	r3, r3, #8
 801405c:	4413      	add	r3, r2
 801405e:	4619      	mov	r1, r3
 8014060:	6938      	ldr	r0, [r7, #16]
 8014062:	f7ff fed9 	bl	8013e18 <move_window>
 8014066:	4603      	mov	r3, r0
 8014068:	2b00      	cmp	r3, #0
 801406a:	d130      	bne.n	80140ce <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	005b      	lsls	r3, r3, #1
 8014076:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801407a:	4413      	add	r3, r2
 801407c:	4618      	mov	r0, r3
 801407e:	f7ff fc1b 	bl	80138b8 <ld_word>
 8014082:	4603      	mov	r3, r0
 8014084:	617b      	str	r3, [r7, #20]
			break;
 8014086:	e025      	b.n	80140d4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	09db      	lsrs	r3, r3, #7
 8014090:	4413      	add	r3, r2
 8014092:	4619      	mov	r1, r3
 8014094:	6938      	ldr	r0, [r7, #16]
 8014096:	f7ff febf 	bl	8013e18 <move_window>
 801409a:	4603      	mov	r3, r0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d118      	bne.n	80140d2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	009b      	lsls	r3, r3, #2
 80140aa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80140ae:	4413      	add	r3, r2
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7ff fc19 	bl	80138e8 <ld_dword>
 80140b6:	4603      	mov	r3, r0
 80140b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80140bc:	617b      	str	r3, [r7, #20]
			break;
 80140be:	e009      	b.n	80140d4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80140c0:	2301      	movs	r3, #1
 80140c2:	617b      	str	r3, [r7, #20]
 80140c4:	e006      	b.n	80140d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80140c6:	bf00      	nop
 80140c8:	e004      	b.n	80140d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80140ca:	bf00      	nop
 80140cc:	e002      	b.n	80140d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80140ce:	bf00      	nop
 80140d0:	e000      	b.n	80140d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80140d2:	bf00      	nop
		}
	}

	return val;
 80140d4:	697b      	ldr	r3, [r7, #20]
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3718      	adds	r7, #24
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}

080140de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80140de:	b590      	push	{r4, r7, lr}
 80140e0:	b089      	sub	sp, #36	; 0x24
 80140e2:	af00      	add	r7, sp, #0
 80140e4:	60f8      	str	r0, [r7, #12]
 80140e6:	60b9      	str	r1, [r7, #8]
 80140e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80140ea:	2302      	movs	r3, #2
 80140ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	f240 80d2 	bls.w	801429a <put_fat+0x1bc>
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	699b      	ldr	r3, [r3, #24]
 80140fa:	68ba      	ldr	r2, [r7, #8]
 80140fc:	429a      	cmp	r2, r3
 80140fe:	f080 80cc 	bcs.w	801429a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	2b03      	cmp	r3, #3
 8014108:	f000 8096 	beq.w	8014238 <put_fat+0x15a>
 801410c:	2b03      	cmp	r3, #3
 801410e:	f300 80cd 	bgt.w	80142ac <put_fat+0x1ce>
 8014112:	2b01      	cmp	r3, #1
 8014114:	d002      	beq.n	801411c <put_fat+0x3e>
 8014116:	2b02      	cmp	r3, #2
 8014118:	d06e      	beq.n	80141f8 <put_fat+0x11a>
 801411a:	e0c7      	b.n	80142ac <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	61bb      	str	r3, [r7, #24]
 8014120:	69bb      	ldr	r3, [r7, #24]
 8014122:	085b      	lsrs	r3, r3, #1
 8014124:	69ba      	ldr	r2, [r7, #24]
 8014126:	4413      	add	r3, r2
 8014128:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801412e:	69bb      	ldr	r3, [r7, #24]
 8014130:	0a5b      	lsrs	r3, r3, #9
 8014132:	4413      	add	r3, r2
 8014134:	4619      	mov	r1, r3
 8014136:	68f8      	ldr	r0, [r7, #12]
 8014138:	f7ff fe6e 	bl	8013e18 <move_window>
 801413c:	4603      	mov	r3, r0
 801413e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014140:	7ffb      	ldrb	r3, [r7, #31]
 8014142:	2b00      	cmp	r3, #0
 8014144:	f040 80ab 	bne.w	801429e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	1c59      	adds	r1, r3, #1
 8014152:	61b9      	str	r1, [r7, #24]
 8014154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014158:	4413      	add	r3, r2
 801415a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	f003 0301 	and.w	r3, r3, #1
 8014162:	2b00      	cmp	r3, #0
 8014164:	d00d      	beq.n	8014182 <put_fat+0xa4>
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	b25b      	sxtb	r3, r3
 801416c:	f003 030f 	and.w	r3, r3, #15
 8014170:	b25a      	sxtb	r2, r3
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	b2db      	uxtb	r3, r3
 8014176:	011b      	lsls	r3, r3, #4
 8014178:	b25b      	sxtb	r3, r3
 801417a:	4313      	orrs	r3, r2
 801417c:	b25b      	sxtb	r3, r3
 801417e:	b2db      	uxtb	r3, r3
 8014180:	e001      	b.n	8014186 <put_fat+0xa8>
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	b2db      	uxtb	r3, r3
 8014186:	697a      	ldr	r2, [r7, #20]
 8014188:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2201      	movs	r2, #1
 801418e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014194:	69bb      	ldr	r3, [r7, #24]
 8014196:	0a5b      	lsrs	r3, r3, #9
 8014198:	4413      	add	r3, r2
 801419a:	4619      	mov	r1, r3
 801419c:	68f8      	ldr	r0, [r7, #12]
 801419e:	f7ff fe3b 	bl	8013e18 <move_window>
 80141a2:	4603      	mov	r3, r0
 80141a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80141a6:	7ffb      	ldrb	r3, [r7, #31]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d17a      	bne.n	80142a2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80141b2:	69bb      	ldr	r3, [r7, #24]
 80141b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141b8:	4413      	add	r3, r2
 80141ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	f003 0301 	and.w	r3, r3, #1
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d003      	beq.n	80141ce <put_fat+0xf0>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	091b      	lsrs	r3, r3, #4
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	e00e      	b.n	80141ec <put_fat+0x10e>
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	781b      	ldrb	r3, [r3, #0]
 80141d2:	b25b      	sxtb	r3, r3
 80141d4:	f023 030f 	bic.w	r3, r3, #15
 80141d8:	b25a      	sxtb	r2, r3
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	0a1b      	lsrs	r3, r3, #8
 80141de:	b25b      	sxtb	r3, r3
 80141e0:	f003 030f 	and.w	r3, r3, #15
 80141e4:	b25b      	sxtb	r3, r3
 80141e6:	4313      	orrs	r3, r2
 80141e8:	b25b      	sxtb	r3, r3
 80141ea:	b2db      	uxtb	r3, r3
 80141ec:	697a      	ldr	r2, [r7, #20]
 80141ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	2201      	movs	r2, #1
 80141f4:	70da      	strb	r2, [r3, #3]
			break;
 80141f6:	e059      	b.n	80142ac <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	0a1b      	lsrs	r3, r3, #8
 8014200:	4413      	add	r3, r2
 8014202:	4619      	mov	r1, r3
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f7ff fe07 	bl	8013e18 <move_window>
 801420a:	4603      	mov	r3, r0
 801420c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801420e:	7ffb      	ldrb	r3, [r7, #31]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d148      	bne.n	80142a6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	005b      	lsls	r3, r3, #1
 801421e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014222:	4413      	add	r3, r2
 8014224:	687a      	ldr	r2, [r7, #4]
 8014226:	b292      	uxth	r2, r2
 8014228:	4611      	mov	r1, r2
 801422a:	4618      	mov	r0, r3
 801422c:	f7ff fb7f 	bl	801392e <st_word>
			fs->wflag = 1;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	2201      	movs	r2, #1
 8014234:	70da      	strb	r2, [r3, #3]
			break;
 8014236:	e039      	b.n	80142ac <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	09db      	lsrs	r3, r3, #7
 8014240:	4413      	add	r3, r2
 8014242:	4619      	mov	r1, r3
 8014244:	68f8      	ldr	r0, [r7, #12]
 8014246:	f7ff fde7 	bl	8013e18 <move_window>
 801424a:	4603      	mov	r3, r0
 801424c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801424e:	7ffb      	ldrb	r3, [r7, #31]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d12a      	bne.n	80142aa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	009b      	lsls	r3, r3, #2
 8014264:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014268:	4413      	add	r3, r2
 801426a:	4618      	mov	r0, r3
 801426c:	f7ff fb3c 	bl	80138e8 <ld_dword>
 8014270:	4603      	mov	r3, r0
 8014272:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014276:	4323      	orrs	r3, r4
 8014278:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	009b      	lsls	r3, r3, #2
 8014284:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014288:	4413      	add	r3, r2
 801428a:	6879      	ldr	r1, [r7, #4]
 801428c:	4618      	mov	r0, r3
 801428e:	f7ff fb69 	bl	8013964 <st_dword>
			fs->wflag = 1;
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	2201      	movs	r2, #1
 8014296:	70da      	strb	r2, [r3, #3]
			break;
 8014298:	e008      	b.n	80142ac <put_fat+0x1ce>
		}
	}
 801429a:	bf00      	nop
 801429c:	e006      	b.n	80142ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 801429e:	bf00      	nop
 80142a0:	e004      	b.n	80142ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 80142a2:	bf00      	nop
 80142a4:	e002      	b.n	80142ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 80142a6:	bf00      	nop
 80142a8:	e000      	b.n	80142ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 80142aa:	bf00      	nop
	return res;
 80142ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3724      	adds	r7, #36	; 0x24
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd90      	pop	{r4, r7, pc}

080142b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80142b6:	b580      	push	{r7, lr}
 80142b8:	b088      	sub	sp, #32
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	60f8      	str	r0, [r7, #12]
 80142be:	60b9      	str	r1, [r7, #8]
 80142c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80142c2:	2300      	movs	r3, #0
 80142c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	2b01      	cmp	r3, #1
 80142d0:	d904      	bls.n	80142dc <remove_chain+0x26>
 80142d2:	69bb      	ldr	r3, [r7, #24]
 80142d4:	699b      	ldr	r3, [r3, #24]
 80142d6:	68ba      	ldr	r2, [r7, #8]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d301      	bcc.n	80142e0 <remove_chain+0x2a>
 80142dc:	2302      	movs	r3, #2
 80142de:	e04b      	b.n	8014378 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d00c      	beq.n	8014300 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80142e6:	f04f 32ff 	mov.w	r2, #4294967295
 80142ea:	6879      	ldr	r1, [r7, #4]
 80142ec:	69b8      	ldr	r0, [r7, #24]
 80142ee:	f7ff fef6 	bl	80140de <put_fat>
 80142f2:	4603      	mov	r3, r0
 80142f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80142f6:	7ffb      	ldrb	r3, [r7, #31]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d001      	beq.n	8014300 <remove_chain+0x4a>
 80142fc:	7ffb      	ldrb	r3, [r7, #31]
 80142fe:	e03b      	b.n	8014378 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014300:	68b9      	ldr	r1, [r7, #8]
 8014302:	68f8      	ldr	r0, [r7, #12]
 8014304:	f7ff fe43 	bl	8013f8e <get_fat>
 8014308:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d031      	beq.n	8014374 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	2b01      	cmp	r3, #1
 8014314:	d101      	bne.n	801431a <remove_chain+0x64>
 8014316:	2302      	movs	r3, #2
 8014318:	e02e      	b.n	8014378 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014320:	d101      	bne.n	8014326 <remove_chain+0x70>
 8014322:	2301      	movs	r3, #1
 8014324:	e028      	b.n	8014378 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014326:	2200      	movs	r2, #0
 8014328:	68b9      	ldr	r1, [r7, #8]
 801432a:	69b8      	ldr	r0, [r7, #24]
 801432c:	f7ff fed7 	bl	80140de <put_fat>
 8014330:	4603      	mov	r3, r0
 8014332:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014334:	7ffb      	ldrb	r3, [r7, #31]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d001      	beq.n	801433e <remove_chain+0x88>
 801433a:	7ffb      	ldrb	r3, [r7, #31]
 801433c:	e01c      	b.n	8014378 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801433e:	69bb      	ldr	r3, [r7, #24]
 8014340:	695a      	ldr	r2, [r3, #20]
 8014342:	69bb      	ldr	r3, [r7, #24]
 8014344:	699b      	ldr	r3, [r3, #24]
 8014346:	3b02      	subs	r3, #2
 8014348:	429a      	cmp	r2, r3
 801434a:	d20b      	bcs.n	8014364 <remove_chain+0xae>
			fs->free_clst++;
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	695b      	ldr	r3, [r3, #20]
 8014350:	1c5a      	adds	r2, r3, #1
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	791b      	ldrb	r3, [r3, #4]
 801435a:	f043 0301 	orr.w	r3, r3, #1
 801435e:	b2da      	uxtb	r2, r3
 8014360:	69bb      	ldr	r3, [r7, #24]
 8014362:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	699b      	ldr	r3, [r3, #24]
 801436c:	68ba      	ldr	r2, [r7, #8]
 801436e:	429a      	cmp	r2, r3
 8014370:	d3c6      	bcc.n	8014300 <remove_chain+0x4a>
 8014372:	e000      	b.n	8014376 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014374:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014376:	2300      	movs	r3, #0
}
 8014378:	4618      	mov	r0, r3
 801437a:	3720      	adds	r7, #32
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}

08014380 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b088      	sub	sp, #32
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d10d      	bne.n	80143b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	691b      	ldr	r3, [r3, #16]
 801439a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801439c:	69bb      	ldr	r3, [r7, #24]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d004      	beq.n	80143ac <create_chain+0x2c>
 80143a2:	693b      	ldr	r3, [r7, #16]
 80143a4:	699b      	ldr	r3, [r3, #24]
 80143a6:	69ba      	ldr	r2, [r7, #24]
 80143a8:	429a      	cmp	r2, r3
 80143aa:	d31b      	bcc.n	80143e4 <create_chain+0x64>
 80143ac:	2301      	movs	r3, #1
 80143ae:	61bb      	str	r3, [r7, #24]
 80143b0:	e018      	b.n	80143e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80143b2:	6839      	ldr	r1, [r7, #0]
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f7ff fdea 	bl	8013f8e <get_fat>
 80143ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	2b01      	cmp	r3, #1
 80143c0:	d801      	bhi.n	80143c6 <create_chain+0x46>
 80143c2:	2301      	movs	r3, #1
 80143c4:	e070      	b.n	80144a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143cc:	d101      	bne.n	80143d2 <create_chain+0x52>
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	e06a      	b.n	80144a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80143d2:	693b      	ldr	r3, [r7, #16]
 80143d4:	699b      	ldr	r3, [r3, #24]
 80143d6:	68fa      	ldr	r2, [r7, #12]
 80143d8:	429a      	cmp	r2, r3
 80143da:	d201      	bcs.n	80143e0 <create_chain+0x60>
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	e063      	b.n	80144a8 <create_chain+0x128>
		scl = clst;
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80143e4:	69bb      	ldr	r3, [r7, #24]
 80143e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80143e8:	69fb      	ldr	r3, [r7, #28]
 80143ea:	3301      	adds	r3, #1
 80143ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80143ee:	693b      	ldr	r3, [r7, #16]
 80143f0:	699b      	ldr	r3, [r3, #24]
 80143f2:	69fa      	ldr	r2, [r7, #28]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d307      	bcc.n	8014408 <create_chain+0x88>
				ncl = 2;
 80143f8:	2302      	movs	r3, #2
 80143fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80143fc:	69fa      	ldr	r2, [r7, #28]
 80143fe:	69bb      	ldr	r3, [r7, #24]
 8014400:	429a      	cmp	r2, r3
 8014402:	d901      	bls.n	8014408 <create_chain+0x88>
 8014404:	2300      	movs	r3, #0
 8014406:	e04f      	b.n	80144a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014408:	69f9      	ldr	r1, [r7, #28]
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f7ff fdbf 	bl	8013f8e <get_fat>
 8014410:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d00e      	beq.n	8014436 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	2b01      	cmp	r3, #1
 801441c:	d003      	beq.n	8014426 <create_chain+0xa6>
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014424:	d101      	bne.n	801442a <create_chain+0xaa>
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	e03e      	b.n	80144a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801442a:	69fa      	ldr	r2, [r7, #28]
 801442c:	69bb      	ldr	r3, [r7, #24]
 801442e:	429a      	cmp	r2, r3
 8014430:	d1da      	bne.n	80143e8 <create_chain+0x68>
 8014432:	2300      	movs	r3, #0
 8014434:	e038      	b.n	80144a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014436:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014438:	f04f 32ff 	mov.w	r2, #4294967295
 801443c:	69f9      	ldr	r1, [r7, #28]
 801443e:	6938      	ldr	r0, [r7, #16]
 8014440:	f7ff fe4d 	bl	80140de <put_fat>
 8014444:	4603      	mov	r3, r0
 8014446:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014448:	7dfb      	ldrb	r3, [r7, #23]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d109      	bne.n	8014462 <create_chain+0xe2>
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d006      	beq.n	8014462 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014454:	69fa      	ldr	r2, [r7, #28]
 8014456:	6839      	ldr	r1, [r7, #0]
 8014458:	6938      	ldr	r0, [r7, #16]
 801445a:	f7ff fe40 	bl	80140de <put_fat>
 801445e:	4603      	mov	r3, r0
 8014460:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014462:	7dfb      	ldrb	r3, [r7, #23]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d116      	bne.n	8014496 <create_chain+0x116>
		fs->last_clst = ncl;
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	69fa      	ldr	r2, [r7, #28]
 801446c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	695a      	ldr	r2, [r3, #20]
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	699b      	ldr	r3, [r3, #24]
 8014476:	3b02      	subs	r3, #2
 8014478:	429a      	cmp	r2, r3
 801447a:	d804      	bhi.n	8014486 <create_chain+0x106>
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	695b      	ldr	r3, [r3, #20]
 8014480:	1e5a      	subs	r2, r3, #1
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	791b      	ldrb	r3, [r3, #4]
 801448a:	f043 0301 	orr.w	r3, r3, #1
 801448e:	b2da      	uxtb	r2, r3
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	711a      	strb	r2, [r3, #4]
 8014494:	e007      	b.n	80144a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014496:	7dfb      	ldrb	r3, [r7, #23]
 8014498:	2b01      	cmp	r3, #1
 801449a:	d102      	bne.n	80144a2 <create_chain+0x122>
 801449c:	f04f 33ff 	mov.w	r3, #4294967295
 80144a0:	e000      	b.n	80144a4 <create_chain+0x124>
 80144a2:	2301      	movs	r3, #1
 80144a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80144a6:	69fb      	ldr	r3, [r7, #28]
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3720      	adds	r7, #32
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}

080144b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80144b0:	b480      	push	{r7}
 80144b2:	b087      	sub	sp, #28
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
 80144b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144c4:	3304      	adds	r3, #4
 80144c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	0a5b      	lsrs	r3, r3, #9
 80144cc:	68fa      	ldr	r2, [r7, #12]
 80144ce:	8952      	ldrh	r2, [r2, #10]
 80144d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80144d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	1d1a      	adds	r2, r3, #4
 80144da:	613a      	str	r2, [r7, #16]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d101      	bne.n	80144ea <clmt_clust+0x3a>
 80144e6:	2300      	movs	r3, #0
 80144e8:	e010      	b.n	801450c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80144ea:	697a      	ldr	r2, [r7, #20]
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d307      	bcc.n	8014502 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80144f2:	697a      	ldr	r2, [r7, #20]
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	1ad3      	subs	r3, r2, r3
 80144f8:	617b      	str	r3, [r7, #20]
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	3304      	adds	r3, #4
 80144fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014500:	e7e9      	b.n	80144d6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014502:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	681a      	ldr	r2, [r3, #0]
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	4413      	add	r3, r2
}
 801450c:	4618      	mov	r0, r3
 801450e:	371c      	adds	r7, #28
 8014510:	46bd      	mov	sp, r7
 8014512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014516:	4770      	bx	lr

08014518 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b086      	sub	sp, #24
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801452e:	d204      	bcs.n	801453a <dir_sdi+0x22>
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	f003 031f 	and.w	r3, r3, #31
 8014536:	2b00      	cmp	r3, #0
 8014538:	d001      	beq.n	801453e <dir_sdi+0x26>
		return FR_INT_ERR;
 801453a:	2302      	movs	r3, #2
 801453c:	e063      	b.n	8014606 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	683a      	ldr	r2, [r7, #0]
 8014542:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	689b      	ldr	r3, [r3, #8]
 8014548:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d106      	bne.n	801455e <dir_sdi+0x46>
 8014550:	693b      	ldr	r3, [r7, #16]
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	2b02      	cmp	r3, #2
 8014556:	d902      	bls.n	801455e <dir_sdi+0x46>
		clst = fs->dirbase;
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801455c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d10c      	bne.n	801457e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	095b      	lsrs	r3, r3, #5
 8014568:	693a      	ldr	r2, [r7, #16]
 801456a:	8912      	ldrh	r2, [r2, #8]
 801456c:	4293      	cmp	r3, r2
 801456e:	d301      	bcc.n	8014574 <dir_sdi+0x5c>
 8014570:	2302      	movs	r3, #2
 8014572:	e048      	b.n	8014606 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	61da      	str	r2, [r3, #28]
 801457c:	e029      	b.n	80145d2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	895b      	ldrh	r3, [r3, #10]
 8014582:	025b      	lsls	r3, r3, #9
 8014584:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014586:	e019      	b.n	80145bc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6979      	ldr	r1, [r7, #20]
 801458c:	4618      	mov	r0, r3
 801458e:	f7ff fcfe 	bl	8013f8e <get_fat>
 8014592:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014594:	697b      	ldr	r3, [r7, #20]
 8014596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801459a:	d101      	bne.n	80145a0 <dir_sdi+0x88>
 801459c:	2301      	movs	r3, #1
 801459e:	e032      	b.n	8014606 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80145a0:	697b      	ldr	r3, [r7, #20]
 80145a2:	2b01      	cmp	r3, #1
 80145a4:	d904      	bls.n	80145b0 <dir_sdi+0x98>
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	699b      	ldr	r3, [r3, #24]
 80145aa:	697a      	ldr	r2, [r7, #20]
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d301      	bcc.n	80145b4 <dir_sdi+0x9c>
 80145b0:	2302      	movs	r3, #2
 80145b2:	e028      	b.n	8014606 <dir_sdi+0xee>
			ofs -= csz;
 80145b4:	683a      	ldr	r2, [r7, #0]
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	1ad3      	subs	r3, r2, r3
 80145ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80145bc:	683a      	ldr	r2, [r7, #0]
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	d2e1      	bcs.n	8014588 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80145c4:	6979      	ldr	r1, [r7, #20]
 80145c6:	6938      	ldr	r0, [r7, #16]
 80145c8:	f7ff fcc2 	bl	8013f50 <clust2sect>
 80145cc:	4602      	mov	r2, r0
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	697a      	ldr	r2, [r7, #20]
 80145d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	69db      	ldr	r3, [r3, #28]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d101      	bne.n	80145e4 <dir_sdi+0xcc>
 80145e0:	2302      	movs	r3, #2
 80145e2:	e010      	b.n	8014606 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	69da      	ldr	r2, [r3, #28]
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	0a5b      	lsrs	r3, r3, #9
 80145ec:	441a      	add	r2, r3
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80145f2:	693b      	ldr	r3, [r7, #16]
 80145f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145fe:	441a      	add	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014604:	2300      	movs	r3, #0
}
 8014606:	4618      	mov	r0, r3
 8014608:	3718      	adds	r7, #24
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}

0801460e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801460e:	b580      	push	{r7, lr}
 8014610:	b086      	sub	sp, #24
 8014612:	af00      	add	r7, sp, #0
 8014614:	6078      	str	r0, [r7, #4]
 8014616:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	695b      	ldr	r3, [r3, #20]
 8014622:	3320      	adds	r3, #32
 8014624:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	69db      	ldr	r3, [r3, #28]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d003      	beq.n	8014636 <dir_next+0x28>
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014634:	d301      	bcc.n	801463a <dir_next+0x2c>
 8014636:	2304      	movs	r3, #4
 8014638:	e0aa      	b.n	8014790 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014640:	2b00      	cmp	r3, #0
 8014642:	f040 8098 	bne.w	8014776 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	69db      	ldr	r3, [r3, #28]
 801464a:	1c5a      	adds	r2, r3, #1
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	699b      	ldr	r3, [r3, #24]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d10b      	bne.n	8014670 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	095b      	lsrs	r3, r3, #5
 801465c:	68fa      	ldr	r2, [r7, #12]
 801465e:	8912      	ldrh	r2, [r2, #8]
 8014660:	4293      	cmp	r3, r2
 8014662:	f0c0 8088 	bcc.w	8014776 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2200      	movs	r2, #0
 801466a:	61da      	str	r2, [r3, #28]
 801466c:	2304      	movs	r3, #4
 801466e:	e08f      	b.n	8014790 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	0a5b      	lsrs	r3, r3, #9
 8014674:	68fa      	ldr	r2, [r7, #12]
 8014676:	8952      	ldrh	r2, [r2, #10]
 8014678:	3a01      	subs	r2, #1
 801467a:	4013      	ands	r3, r2
 801467c:	2b00      	cmp	r3, #0
 801467e:	d17a      	bne.n	8014776 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	699b      	ldr	r3, [r3, #24]
 8014686:	4619      	mov	r1, r3
 8014688:	4610      	mov	r0, r2
 801468a:	f7ff fc80 	bl	8013f8e <get_fat>
 801468e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	2b01      	cmp	r3, #1
 8014694:	d801      	bhi.n	801469a <dir_next+0x8c>
 8014696:	2302      	movs	r3, #2
 8014698:	e07a      	b.n	8014790 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801469a:	697b      	ldr	r3, [r7, #20]
 801469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146a0:	d101      	bne.n	80146a6 <dir_next+0x98>
 80146a2:	2301      	movs	r3, #1
 80146a4:	e074      	b.n	8014790 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	699b      	ldr	r3, [r3, #24]
 80146aa:	697a      	ldr	r2, [r7, #20]
 80146ac:	429a      	cmp	r2, r3
 80146ae:	d358      	bcc.n	8014762 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d104      	bne.n	80146c0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2200      	movs	r2, #0
 80146ba:	61da      	str	r2, [r3, #28]
 80146bc:	2304      	movs	r3, #4
 80146be:	e067      	b.n	8014790 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80146c0:	687a      	ldr	r2, [r7, #4]
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	699b      	ldr	r3, [r3, #24]
 80146c6:	4619      	mov	r1, r3
 80146c8:	4610      	mov	r0, r2
 80146ca:	f7ff fe59 	bl	8014380 <create_chain>
 80146ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d101      	bne.n	80146da <dir_next+0xcc>
 80146d6:	2307      	movs	r3, #7
 80146d8:	e05a      	b.n	8014790 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	2b01      	cmp	r3, #1
 80146de:	d101      	bne.n	80146e4 <dir_next+0xd6>
 80146e0:	2302      	movs	r3, #2
 80146e2:	e055      	b.n	8014790 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146ea:	d101      	bne.n	80146f0 <dir_next+0xe2>
 80146ec:	2301      	movs	r3, #1
 80146ee:	e04f      	b.n	8014790 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80146f0:	68f8      	ldr	r0, [r7, #12]
 80146f2:	f7ff fb4d 	bl	8013d90 <sync_window>
 80146f6:	4603      	mov	r3, r0
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d001      	beq.n	8014700 <dir_next+0xf2>
 80146fc:	2301      	movs	r3, #1
 80146fe:	e047      	b.n	8014790 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	3334      	adds	r3, #52	; 0x34
 8014704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014708:	2100      	movs	r1, #0
 801470a:	4618      	mov	r0, r3
 801470c:	f7ff f977 	bl	80139fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014710:	2300      	movs	r3, #0
 8014712:	613b      	str	r3, [r7, #16]
 8014714:	6979      	ldr	r1, [r7, #20]
 8014716:	68f8      	ldr	r0, [r7, #12]
 8014718:	f7ff fc1a 	bl	8013f50 <clust2sect>
 801471c:	4602      	mov	r2, r0
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	631a      	str	r2, [r3, #48]	; 0x30
 8014722:	e012      	b.n	801474a <dir_next+0x13c>
						fs->wflag = 1;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2201      	movs	r2, #1
 8014728:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801472a:	68f8      	ldr	r0, [r7, #12]
 801472c:	f7ff fb30 	bl	8013d90 <sync_window>
 8014730:	4603      	mov	r3, r0
 8014732:	2b00      	cmp	r3, #0
 8014734:	d001      	beq.n	801473a <dir_next+0x12c>
 8014736:	2301      	movs	r3, #1
 8014738:	e02a      	b.n	8014790 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	3301      	adds	r3, #1
 801473e:	613b      	str	r3, [r7, #16]
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014744:	1c5a      	adds	r2, r3, #1
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	631a      	str	r2, [r3, #48]	; 0x30
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	895b      	ldrh	r3, [r3, #10]
 801474e:	461a      	mov	r2, r3
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	4293      	cmp	r3, r2
 8014754:	d3e6      	bcc.n	8014724 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	1ad2      	subs	r2, r2, r3
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	697a      	ldr	r2, [r7, #20]
 8014766:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8014768:	6979      	ldr	r1, [r7, #20]
 801476a:	68f8      	ldr	r0, [r7, #12]
 801476c:	f7ff fbf0 	bl	8013f50 <clust2sect>
 8014770:	4602      	mov	r2, r0
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	68ba      	ldr	r2, [r7, #8]
 801477a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014788:	441a      	add	r2, r3
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801478e:	2300      	movs	r3, #0
}
 8014790:	4618      	mov	r0, r3
 8014792:	3718      	adds	r7, #24
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}

08014798 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b086      	sub	sp, #24
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80147a8:	2100      	movs	r1, #0
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f7ff feb4 	bl	8014518 <dir_sdi>
 80147b0:	4603      	mov	r3, r0
 80147b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80147b4:	7dfb      	ldrb	r3, [r7, #23]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d12b      	bne.n	8014812 <dir_alloc+0x7a>
		n = 0;
 80147ba:	2300      	movs	r3, #0
 80147bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	69db      	ldr	r3, [r3, #28]
 80147c2:	4619      	mov	r1, r3
 80147c4:	68f8      	ldr	r0, [r7, #12]
 80147c6:	f7ff fb27 	bl	8013e18 <move_window>
 80147ca:	4603      	mov	r3, r0
 80147cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80147ce:	7dfb      	ldrb	r3, [r7, #23]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d11d      	bne.n	8014810 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6a1b      	ldr	r3, [r3, #32]
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	2be5      	cmp	r3, #229	; 0xe5
 80147dc:	d004      	beq.n	80147e8 <dir_alloc+0x50>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6a1b      	ldr	r3, [r3, #32]
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d107      	bne.n	80147f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	3301      	adds	r3, #1
 80147ec:	613b      	str	r3, [r7, #16]
 80147ee:	693a      	ldr	r2, [r7, #16]
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d102      	bne.n	80147fc <dir_alloc+0x64>
 80147f6:	e00c      	b.n	8014812 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80147f8:	2300      	movs	r3, #0
 80147fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80147fc:	2101      	movs	r1, #1
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f7ff ff05 	bl	801460e <dir_next>
 8014804:	4603      	mov	r3, r0
 8014806:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014808:	7dfb      	ldrb	r3, [r7, #23]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d0d7      	beq.n	80147be <dir_alloc+0x26>
 801480e:	e000      	b.n	8014812 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014810:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014812:	7dfb      	ldrb	r3, [r7, #23]
 8014814:	2b04      	cmp	r3, #4
 8014816:	d101      	bne.n	801481c <dir_alloc+0x84>
 8014818:	2307      	movs	r3, #7
 801481a:	75fb      	strb	r3, [r7, #23]
	return res;
 801481c:	7dfb      	ldrb	r3, [r7, #23]
}
 801481e:	4618      	mov	r0, r3
 8014820:	3718      	adds	r7, #24
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}

08014826 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014826:	b580      	push	{r7, lr}
 8014828:	b084      	sub	sp, #16
 801482a:	af00      	add	r7, sp, #0
 801482c:	6078      	str	r0, [r7, #4]
 801482e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	331a      	adds	r3, #26
 8014834:	4618      	mov	r0, r3
 8014836:	f7ff f83f 	bl	80138b8 <ld_word>
 801483a:	4603      	mov	r3, r0
 801483c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	2b03      	cmp	r3, #3
 8014844:	d109      	bne.n	801485a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	3314      	adds	r3, #20
 801484a:	4618      	mov	r0, r3
 801484c:	f7ff f834 	bl	80138b8 <ld_word>
 8014850:	4603      	mov	r3, r0
 8014852:	041b      	lsls	r3, r3, #16
 8014854:	68fa      	ldr	r2, [r7, #12]
 8014856:	4313      	orrs	r3, r2
 8014858:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801485a:	68fb      	ldr	r3, [r7, #12]
}
 801485c:	4618      	mov	r0, r3
 801485e:	3710      	adds	r7, #16
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b084      	sub	sp, #16
 8014868:	af00      	add	r7, sp, #0
 801486a:	60f8      	str	r0, [r7, #12]
 801486c:	60b9      	str	r1, [r7, #8]
 801486e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	331a      	adds	r3, #26
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	b292      	uxth	r2, r2
 8014878:	4611      	mov	r1, r2
 801487a:	4618      	mov	r0, r3
 801487c:	f7ff f857 	bl	801392e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	2b03      	cmp	r3, #3
 8014886:	d109      	bne.n	801489c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	f103 0214 	add.w	r2, r3, #20
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	0c1b      	lsrs	r3, r3, #16
 8014892:	b29b      	uxth	r3, r3
 8014894:	4619      	mov	r1, r3
 8014896:	4610      	mov	r0, r2
 8014898:	f7ff f849 	bl	801392e <st_word>
	}
}
 801489c:	bf00      	nop
 801489e:	3710      	adds	r7, #16
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bd80      	pop	{r7, pc}

080148a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80148a4:	b590      	push	{r4, r7, lr}
 80148a6:	b087      	sub	sp, #28
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
 80148ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	331a      	adds	r3, #26
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7ff f800 	bl	80138b8 <ld_word>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d001      	beq.n	80148c2 <cmp_lfn+0x1e>
 80148be:	2300      	movs	r3, #0
 80148c0:	e059      	b.n	8014976 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	781b      	ldrb	r3, [r3, #0]
 80148c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80148ca:	1e5a      	subs	r2, r3, #1
 80148cc:	4613      	mov	r3, r2
 80148ce:	005b      	lsls	r3, r3, #1
 80148d0:	4413      	add	r3, r2
 80148d2:	009b      	lsls	r3, r3, #2
 80148d4:	4413      	add	r3, r2
 80148d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80148d8:	2301      	movs	r3, #1
 80148da:	81fb      	strh	r3, [r7, #14]
 80148dc:	2300      	movs	r3, #0
 80148de:	613b      	str	r3, [r7, #16]
 80148e0:	e033      	b.n	801494a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80148e2:	4a27      	ldr	r2, [pc, #156]	; (8014980 <cmp_lfn+0xdc>)
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	4413      	add	r3, r2
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	461a      	mov	r2, r3
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	4413      	add	r3, r2
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7fe ffe1 	bl	80138b8 <ld_word>
 80148f6:	4603      	mov	r3, r0
 80148f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80148fa:	89fb      	ldrh	r3, [r7, #14]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d01a      	beq.n	8014936 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	2bfe      	cmp	r3, #254	; 0xfe
 8014904:	d812      	bhi.n	801492c <cmp_lfn+0x88>
 8014906:	89bb      	ldrh	r3, [r7, #12]
 8014908:	4618      	mov	r0, r3
 801490a:	f002 fb45 	bl	8016f98 <ff_wtoupper>
 801490e:	4603      	mov	r3, r0
 8014910:	461c      	mov	r4, r3
 8014912:	697b      	ldr	r3, [r7, #20]
 8014914:	1c5a      	adds	r2, r3, #1
 8014916:	617a      	str	r2, [r7, #20]
 8014918:	005b      	lsls	r3, r3, #1
 801491a:	687a      	ldr	r2, [r7, #4]
 801491c:	4413      	add	r3, r2
 801491e:	881b      	ldrh	r3, [r3, #0]
 8014920:	4618      	mov	r0, r3
 8014922:	f002 fb39 	bl	8016f98 <ff_wtoupper>
 8014926:	4603      	mov	r3, r0
 8014928:	429c      	cmp	r4, r3
 801492a:	d001      	beq.n	8014930 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801492c:	2300      	movs	r3, #0
 801492e:	e022      	b.n	8014976 <cmp_lfn+0xd2>
			}
			wc = uc;
 8014930:	89bb      	ldrh	r3, [r7, #12]
 8014932:	81fb      	strh	r3, [r7, #14]
 8014934:	e006      	b.n	8014944 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014936:	89bb      	ldrh	r3, [r7, #12]
 8014938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801493c:	4293      	cmp	r3, r2
 801493e:	d001      	beq.n	8014944 <cmp_lfn+0xa0>
 8014940:	2300      	movs	r3, #0
 8014942:	e018      	b.n	8014976 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	3301      	adds	r3, #1
 8014948:	613b      	str	r3, [r7, #16]
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	2b0c      	cmp	r3, #12
 801494e:	d9c8      	bls.n	80148e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014958:	2b00      	cmp	r3, #0
 801495a:	d00b      	beq.n	8014974 <cmp_lfn+0xd0>
 801495c:	89fb      	ldrh	r3, [r7, #14]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d008      	beq.n	8014974 <cmp_lfn+0xd0>
 8014962:	697b      	ldr	r3, [r7, #20]
 8014964:	005b      	lsls	r3, r3, #1
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	4413      	add	r3, r2
 801496a:	881b      	ldrh	r3, [r3, #0]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d001      	beq.n	8014974 <cmp_lfn+0xd0>
 8014970:	2300      	movs	r3, #0
 8014972:	e000      	b.n	8014976 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8014974:	2301      	movs	r3, #1
}
 8014976:	4618      	mov	r0, r3
 8014978:	371c      	adds	r7, #28
 801497a:	46bd      	mov	sp, r7
 801497c:	bd90      	pop	{r4, r7, pc}
 801497e:	bf00      	nop
 8014980:	08022774 	.word	0x08022774

08014984 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b086      	sub	sp, #24
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	331a      	adds	r3, #26
 8014992:	4618      	mov	r0, r3
 8014994:	f7fe ff90 	bl	80138b8 <ld_word>
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d001      	beq.n	80149a2 <pick_lfn+0x1e>
 801499e:	2300      	movs	r3, #0
 80149a0:	e04d      	b.n	8014a3e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80149a2:	683b      	ldr	r3, [r7, #0]
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80149aa:	1e5a      	subs	r2, r3, #1
 80149ac:	4613      	mov	r3, r2
 80149ae:	005b      	lsls	r3, r3, #1
 80149b0:	4413      	add	r3, r2
 80149b2:	009b      	lsls	r3, r3, #2
 80149b4:	4413      	add	r3, r2
 80149b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80149b8:	2301      	movs	r3, #1
 80149ba:	81fb      	strh	r3, [r7, #14]
 80149bc:	2300      	movs	r3, #0
 80149be:	613b      	str	r3, [r7, #16]
 80149c0:	e028      	b.n	8014a14 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80149c2:	4a21      	ldr	r2, [pc, #132]	; (8014a48 <pick_lfn+0xc4>)
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	4413      	add	r3, r2
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	461a      	mov	r2, r3
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	4413      	add	r3, r2
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7fe ff71 	bl	80138b8 <ld_word>
 80149d6:	4603      	mov	r3, r0
 80149d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80149da:	89fb      	ldrh	r3, [r7, #14]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d00f      	beq.n	8014a00 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	2bfe      	cmp	r3, #254	; 0xfe
 80149e4:	d901      	bls.n	80149ea <pick_lfn+0x66>
 80149e6:	2300      	movs	r3, #0
 80149e8:	e029      	b.n	8014a3e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80149ea:	89bb      	ldrh	r3, [r7, #12]
 80149ec:	81fb      	strh	r3, [r7, #14]
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	1c5a      	adds	r2, r3, #1
 80149f2:	617a      	str	r2, [r7, #20]
 80149f4:	005b      	lsls	r3, r3, #1
 80149f6:	687a      	ldr	r2, [r7, #4]
 80149f8:	4413      	add	r3, r2
 80149fa:	89fa      	ldrh	r2, [r7, #14]
 80149fc:	801a      	strh	r2, [r3, #0]
 80149fe:	e006      	b.n	8014a0e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014a00:	89bb      	ldrh	r3, [r7, #12]
 8014a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a06:	4293      	cmp	r3, r2
 8014a08:	d001      	beq.n	8014a0e <pick_lfn+0x8a>
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	e017      	b.n	8014a3e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014a0e:	693b      	ldr	r3, [r7, #16]
 8014a10:	3301      	adds	r3, #1
 8014a12:	613b      	str	r3, [r7, #16]
 8014a14:	693b      	ldr	r3, [r7, #16]
 8014a16:	2b0c      	cmp	r3, #12
 8014a18:	d9d3      	bls.n	80149c2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d00a      	beq.n	8014a3c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	2bfe      	cmp	r3, #254	; 0xfe
 8014a2a:	d901      	bls.n	8014a30 <pick_lfn+0xac>
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	e006      	b.n	8014a3e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	005b      	lsls	r3, r3, #1
 8014a34:	687a      	ldr	r2, [r7, #4]
 8014a36:	4413      	add	r3, r2
 8014a38:	2200      	movs	r2, #0
 8014a3a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8014a3c:	2301      	movs	r3, #1
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3718      	adds	r7, #24
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	08022774 	.word	0x08022774

08014a4c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b088      	sub	sp, #32
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	4611      	mov	r1, r2
 8014a58:	461a      	mov	r2, r3
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	71fb      	strb	r3, [r7, #7]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	330d      	adds	r3, #13
 8014a66:	79ba      	ldrb	r2, [r7, #6]
 8014a68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	330b      	adds	r3, #11
 8014a6e:	220f      	movs	r2, #15
 8014a70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	330c      	adds	r3, #12
 8014a76:	2200      	movs	r2, #0
 8014a78:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	331a      	adds	r3, #26
 8014a7e:	2100      	movs	r1, #0
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7fe ff54 	bl	801392e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8014a86:	79fb      	ldrb	r3, [r7, #7]
 8014a88:	1e5a      	subs	r2, r3, #1
 8014a8a:	4613      	mov	r3, r2
 8014a8c:	005b      	lsls	r3, r3, #1
 8014a8e:	4413      	add	r3, r2
 8014a90:	009b      	lsls	r3, r3, #2
 8014a92:	4413      	add	r3, r2
 8014a94:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8014a96:	2300      	movs	r3, #0
 8014a98:	82fb      	strh	r3, [r7, #22]
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014a9e:	8afb      	ldrh	r3, [r7, #22]
 8014aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014aa4:	4293      	cmp	r3, r2
 8014aa6:	d007      	beq.n	8014ab8 <put_lfn+0x6c>
 8014aa8:	69fb      	ldr	r3, [r7, #28]
 8014aaa:	1c5a      	adds	r2, r3, #1
 8014aac:	61fa      	str	r2, [r7, #28]
 8014aae:	005b      	lsls	r3, r3, #1
 8014ab0:	68fa      	ldr	r2, [r7, #12]
 8014ab2:	4413      	add	r3, r2
 8014ab4:	881b      	ldrh	r3, [r3, #0]
 8014ab6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8014ab8:	4a17      	ldr	r2, [pc, #92]	; (8014b18 <put_lfn+0xcc>)
 8014aba:	69bb      	ldr	r3, [r7, #24]
 8014abc:	4413      	add	r3, r2
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	4413      	add	r3, r2
 8014ac6:	8afa      	ldrh	r2, [r7, #22]
 8014ac8:	4611      	mov	r1, r2
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7fe ff2f 	bl	801392e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8014ad0:	8afb      	ldrh	r3, [r7, #22]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d102      	bne.n	8014adc <put_lfn+0x90>
 8014ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ada:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8014adc:	69bb      	ldr	r3, [r7, #24]
 8014ade:	3301      	adds	r3, #1
 8014ae0:	61bb      	str	r3, [r7, #24]
 8014ae2:	69bb      	ldr	r3, [r7, #24]
 8014ae4:	2b0c      	cmp	r3, #12
 8014ae6:	d9da      	bls.n	8014a9e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8014ae8:	8afb      	ldrh	r3, [r7, #22]
 8014aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014aee:	4293      	cmp	r3, r2
 8014af0:	d006      	beq.n	8014b00 <put_lfn+0xb4>
 8014af2:	69fb      	ldr	r3, [r7, #28]
 8014af4:	005b      	lsls	r3, r3, #1
 8014af6:	68fa      	ldr	r2, [r7, #12]
 8014af8:	4413      	add	r3, r2
 8014afa:	881b      	ldrh	r3, [r3, #0]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d103      	bne.n	8014b08 <put_lfn+0xbc>
 8014b00:	79fb      	ldrb	r3, [r7, #7]
 8014b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b06:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	79fa      	ldrb	r2, [r7, #7]
 8014b0c:	701a      	strb	r2, [r3, #0]
}
 8014b0e:	bf00      	nop
 8014b10:	3720      	adds	r7, #32
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
 8014b16:	bf00      	nop
 8014b18:	08022774 	.word	0x08022774

08014b1c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b08c      	sub	sp, #48	; 0x30
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	60f8      	str	r0, [r7, #12]
 8014b24:	60b9      	str	r1, [r7, #8]
 8014b26:	607a      	str	r2, [r7, #4]
 8014b28:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8014b2a:	220b      	movs	r2, #11
 8014b2c:	68b9      	ldr	r1, [r7, #8]
 8014b2e:	68f8      	ldr	r0, [r7, #12]
 8014b30:	f7fe ff44 	bl	80139bc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	2b05      	cmp	r3, #5
 8014b38:	d92b      	bls.n	8014b92 <gen_numname+0x76>
		sr = seq;
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8014b3e:	e022      	b.n	8014b86 <gen_numname+0x6a>
			wc = *lfn++;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	1c9a      	adds	r2, r3, #2
 8014b44:	607a      	str	r2, [r7, #4]
 8014b46:	881b      	ldrh	r3, [r3, #0]
 8014b48:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014b4e:	e017      	b.n	8014b80 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8014b50:	69fb      	ldr	r3, [r7, #28]
 8014b52:	005a      	lsls	r2, r3, #1
 8014b54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b56:	f003 0301 	and.w	r3, r3, #1
 8014b5a:	4413      	add	r3, r2
 8014b5c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8014b5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b60:	085b      	lsrs	r3, r3, #1
 8014b62:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8014b64:	69fb      	ldr	r3, [r7, #28]
 8014b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d005      	beq.n	8014b7a <gen_numname+0x5e>
 8014b6e:	69fb      	ldr	r3, [r7, #28]
 8014b70:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8014b74:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8014b78:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8014b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b82:	2b0f      	cmp	r3, #15
 8014b84:	d9e4      	bls.n	8014b50 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	881b      	ldrh	r3, [r3, #0]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d1d8      	bne.n	8014b40 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8014b92:	2307      	movs	r3, #7
 8014b94:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	f003 030f 	and.w	r3, r3, #15
 8014b9e:	b2db      	uxtb	r3, r3
 8014ba0:	3330      	adds	r3, #48	; 0x30
 8014ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8014ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014baa:	2b39      	cmp	r3, #57	; 0x39
 8014bac:	d904      	bls.n	8014bb8 <gen_numname+0x9c>
 8014bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014bb2:	3307      	adds	r3, #7
 8014bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8014bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bba:	1e5a      	subs	r2, r3, #1
 8014bbc:	62ba      	str	r2, [r7, #40]	; 0x28
 8014bbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014bc2:	4413      	add	r3, r2
 8014bc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014bc8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	091b      	lsrs	r3, r3, #4
 8014bd0:	603b      	str	r3, [r7, #0]
	} while (seq);
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d1de      	bne.n	8014b96 <gen_numname+0x7a>
	ns[i] = '~';
 8014bd8:	f107 0214 	add.w	r2, r7, #20
 8014bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bde:	4413      	add	r3, r2
 8014be0:	227e      	movs	r2, #126	; 0x7e
 8014be2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014be4:	2300      	movs	r3, #0
 8014be6:	627b      	str	r3, [r7, #36]	; 0x24
 8014be8:	e002      	b.n	8014bf0 <gen_numname+0xd4>
 8014bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bec:	3301      	adds	r3, #1
 8014bee:	627b      	str	r3, [r7, #36]	; 0x24
 8014bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d205      	bcs.n	8014c04 <gen_numname+0xe8>
 8014bf8:	68fa      	ldr	r2, [r7, #12]
 8014bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bfc:	4413      	add	r3, r2
 8014bfe:	781b      	ldrb	r3, [r3, #0]
 8014c00:	2b20      	cmp	r3, #32
 8014c02:	d1f2      	bne.n	8014bea <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c06:	2b07      	cmp	r3, #7
 8014c08:	d808      	bhi.n	8014c1c <gen_numname+0x100>
 8014c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c0c:	1c5a      	adds	r2, r3, #1
 8014c0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8014c10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014c14:	4413      	add	r3, r2
 8014c16:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8014c1a:	e000      	b.n	8014c1e <gen_numname+0x102>
 8014c1c:	2120      	movs	r1, #32
 8014c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c20:	1c5a      	adds	r2, r3, #1
 8014c22:	627a      	str	r2, [r7, #36]	; 0x24
 8014c24:	68fa      	ldr	r2, [r7, #12]
 8014c26:	4413      	add	r3, r2
 8014c28:	460a      	mov	r2, r1
 8014c2a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8014c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2e:	2b07      	cmp	r3, #7
 8014c30:	d9e8      	bls.n	8014c04 <gen_numname+0xe8>
}
 8014c32:	bf00      	nop
 8014c34:	bf00      	nop
 8014c36:	3730      	adds	r7, #48	; 0x30
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}

08014c3c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014c3c:	b480      	push	{r7}
 8014c3e:	b085      	sub	sp, #20
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8014c44:	2300      	movs	r3, #0
 8014c46:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8014c48:	230b      	movs	r3, #11
 8014c4a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014c4c:	7bfb      	ldrb	r3, [r7, #15]
 8014c4e:	b2da      	uxtb	r2, r3
 8014c50:	0852      	lsrs	r2, r2, #1
 8014c52:	01db      	lsls	r3, r3, #7
 8014c54:	4313      	orrs	r3, r2
 8014c56:	b2da      	uxtb	r2, r3
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	1c59      	adds	r1, r3, #1
 8014c5c:	6079      	str	r1, [r7, #4]
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	4413      	add	r3, r2
 8014c62:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8014c64:	68bb      	ldr	r3, [r7, #8]
 8014c66:	3b01      	subs	r3, #1
 8014c68:	60bb      	str	r3, [r7, #8]
 8014c6a:	68bb      	ldr	r3, [r7, #8]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d1ed      	bne.n	8014c4c <sum_sfn+0x10>
	return sum;
 8014c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3714      	adds	r7, #20
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr

08014c7e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b086      	sub	sp, #24
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
 8014c86:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8014c88:	2304      	movs	r3, #4
 8014c8a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8014c92:	23ff      	movs	r3, #255	; 0xff
 8014c94:	757b      	strb	r3, [r7, #21]
 8014c96:	23ff      	movs	r3, #255	; 0xff
 8014c98:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8014c9a:	e081      	b.n	8014da0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	69db      	ldr	r3, [r3, #28]
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	6938      	ldr	r0, [r7, #16]
 8014ca4:	f7ff f8b8 	bl	8013e18 <move_window>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014cac:	7dfb      	ldrb	r3, [r7, #23]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d17c      	bne.n	8014dac <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	6a1b      	ldr	r3, [r3, #32]
 8014cb6:	781b      	ldrb	r3, [r3, #0]
 8014cb8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8014cba:	7dbb      	ldrb	r3, [r7, #22]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d102      	bne.n	8014cc6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8014cc0:	2304      	movs	r3, #4
 8014cc2:	75fb      	strb	r3, [r7, #23]
 8014cc4:	e077      	b.n	8014db6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	6a1b      	ldr	r3, [r3, #32]
 8014cca:	330b      	adds	r3, #11
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014cd2:	73fb      	strb	r3, [r7, #15]
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	7bfa      	ldrb	r2, [r7, #15]
 8014cd8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8014cda:	7dbb      	ldrb	r3, [r7, #22]
 8014cdc:	2be5      	cmp	r3, #229	; 0xe5
 8014cde:	d00e      	beq.n	8014cfe <dir_read+0x80>
 8014ce0:	7dbb      	ldrb	r3, [r7, #22]
 8014ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8014ce4:	d00b      	beq.n	8014cfe <dir_read+0x80>
 8014ce6:	7bfb      	ldrb	r3, [r7, #15]
 8014ce8:	f023 0320 	bic.w	r3, r3, #32
 8014cec:	2b08      	cmp	r3, #8
 8014cee:	bf0c      	ite	eq
 8014cf0:	2301      	moveq	r3, #1
 8014cf2:	2300      	movne	r3, #0
 8014cf4:	b2db      	uxtb	r3, r3
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	4293      	cmp	r3, r2
 8014cfc:	d002      	beq.n	8014d04 <dir_read+0x86>
				ord = 0xFF;
 8014cfe:	23ff      	movs	r3, #255	; 0xff
 8014d00:	757b      	strb	r3, [r7, #21]
 8014d02:	e044      	b.n	8014d8e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8014d04:	7bfb      	ldrb	r3, [r7, #15]
 8014d06:	2b0f      	cmp	r3, #15
 8014d08:	d12f      	bne.n	8014d6a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8014d0a:	7dbb      	ldrb	r3, [r7, #22]
 8014d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d00d      	beq.n	8014d30 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	6a1b      	ldr	r3, [r3, #32]
 8014d18:	7b5b      	ldrb	r3, [r3, #13]
 8014d1a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8014d1c:	7dbb      	ldrb	r3, [r7, #22]
 8014d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014d22:	75bb      	strb	r3, [r7, #22]
 8014d24:	7dbb      	ldrb	r3, [r7, #22]
 8014d26:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	695a      	ldr	r2, [r3, #20]
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014d30:	7dba      	ldrb	r2, [r7, #22]
 8014d32:	7d7b      	ldrb	r3, [r7, #21]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d115      	bne.n	8014d64 <dir_read+0xe6>
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6a1b      	ldr	r3, [r3, #32]
 8014d3c:	330d      	adds	r3, #13
 8014d3e:	781b      	ldrb	r3, [r3, #0]
 8014d40:	7d3a      	ldrb	r2, [r7, #20]
 8014d42:	429a      	cmp	r2, r3
 8014d44:	d10e      	bne.n	8014d64 <dir_read+0xe6>
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	68da      	ldr	r2, [r3, #12]
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	6a1b      	ldr	r3, [r3, #32]
 8014d4e:	4619      	mov	r1, r3
 8014d50:	4610      	mov	r0, r2
 8014d52:	f7ff fe17 	bl	8014984 <pick_lfn>
 8014d56:	4603      	mov	r3, r0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d003      	beq.n	8014d64 <dir_read+0xe6>
 8014d5c:	7d7b      	ldrb	r3, [r7, #21]
 8014d5e:	3b01      	subs	r3, #1
 8014d60:	b2db      	uxtb	r3, r3
 8014d62:	e000      	b.n	8014d66 <dir_read+0xe8>
 8014d64:	23ff      	movs	r3, #255	; 0xff
 8014d66:	757b      	strb	r3, [r7, #21]
 8014d68:	e011      	b.n	8014d8e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8014d6a:	7d7b      	ldrb	r3, [r7, #21]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d109      	bne.n	8014d84 <dir_read+0x106>
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	6a1b      	ldr	r3, [r3, #32]
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7ff ff61 	bl	8014c3c <sum_sfn>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	7d3b      	ldrb	r3, [r7, #20]
 8014d80:	4293      	cmp	r3, r2
 8014d82:	d015      	beq.n	8014db0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f04f 32ff 	mov.w	r2, #4294967295
 8014d8a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8014d8c:	e010      	b.n	8014db0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8014d8e:	2100      	movs	r1, #0
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f7ff fc3c 	bl	801460e <dir_next>
 8014d96:	4603      	mov	r3, r0
 8014d98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014d9a:	7dfb      	ldrb	r3, [r7, #23]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d109      	bne.n	8014db4 <dir_read+0x136>
	while (dp->sect) {
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	69db      	ldr	r3, [r3, #28]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	f47f af79 	bne.w	8014c9c <dir_read+0x1e>
 8014daa:	e004      	b.n	8014db6 <dir_read+0x138>
		if (res != FR_OK) break;
 8014dac:	bf00      	nop
 8014dae:	e002      	b.n	8014db6 <dir_read+0x138>
					break;
 8014db0:	bf00      	nop
 8014db2:	e000      	b.n	8014db6 <dir_read+0x138>
		if (res != FR_OK) break;
 8014db4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014db6:	7dfb      	ldrb	r3, [r7, #23]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d002      	beq.n	8014dc2 <dir_read+0x144>
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	61da      	str	r2, [r3, #28]
	return res;
 8014dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3718      	adds	r7, #24
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b086      	sub	sp, #24
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014dda:	2100      	movs	r1, #0
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f7ff fb9b 	bl	8014518 <dir_sdi>
 8014de2:	4603      	mov	r3, r0
 8014de4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014de6:	7dfb      	ldrb	r3, [r7, #23]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d001      	beq.n	8014df0 <dir_find+0x24>
 8014dec:	7dfb      	ldrb	r3, [r7, #23]
 8014dee:	e0a9      	b.n	8014f44 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014df0:	23ff      	movs	r3, #255	; 0xff
 8014df2:	753b      	strb	r3, [r7, #20]
 8014df4:	7d3b      	ldrb	r3, [r7, #20]
 8014df6:	757b      	strb	r3, [r7, #21]
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8014dfe:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	69db      	ldr	r3, [r3, #28]
 8014e04:	4619      	mov	r1, r3
 8014e06:	6938      	ldr	r0, [r7, #16]
 8014e08:	f7ff f806 	bl	8013e18 <move_window>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014e10:	7dfb      	ldrb	r3, [r7, #23]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	f040 8090 	bne.w	8014f38 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	6a1b      	ldr	r3, [r3, #32]
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014e20:	7dbb      	ldrb	r3, [r7, #22]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d102      	bne.n	8014e2c <dir_find+0x60>
 8014e26:	2304      	movs	r3, #4
 8014e28:	75fb      	strb	r3, [r7, #23]
 8014e2a:	e08a      	b.n	8014f42 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6a1b      	ldr	r3, [r3, #32]
 8014e30:	330b      	adds	r3, #11
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014e38:	73fb      	strb	r3, [r7, #15]
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	7bfa      	ldrb	r2, [r7, #15]
 8014e3e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014e40:	7dbb      	ldrb	r3, [r7, #22]
 8014e42:	2be5      	cmp	r3, #229	; 0xe5
 8014e44:	d007      	beq.n	8014e56 <dir_find+0x8a>
 8014e46:	7bfb      	ldrb	r3, [r7, #15]
 8014e48:	f003 0308 	and.w	r3, r3, #8
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d009      	beq.n	8014e64 <dir_find+0x98>
 8014e50:	7bfb      	ldrb	r3, [r7, #15]
 8014e52:	2b0f      	cmp	r3, #15
 8014e54:	d006      	beq.n	8014e64 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014e56:	23ff      	movs	r3, #255	; 0xff
 8014e58:	757b      	strb	r3, [r7, #21]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8014e60:	631a      	str	r2, [r3, #48]	; 0x30
 8014e62:	e05e      	b.n	8014f22 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8014e64:	7bfb      	ldrb	r3, [r7, #15]
 8014e66:	2b0f      	cmp	r3, #15
 8014e68:	d136      	bne.n	8014ed8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d154      	bne.n	8014f22 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8014e78:	7dbb      	ldrb	r3, [r7, #22]
 8014e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d00d      	beq.n	8014e9e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	6a1b      	ldr	r3, [r3, #32]
 8014e86:	7b5b      	ldrb	r3, [r3, #13]
 8014e88:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8014e8a:	7dbb      	ldrb	r3, [r7, #22]
 8014e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014e90:	75bb      	strb	r3, [r7, #22]
 8014e92:	7dbb      	ldrb	r3, [r7, #22]
 8014e94:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	695a      	ldr	r2, [r3, #20]
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014e9e:	7dba      	ldrb	r2, [r7, #22]
 8014ea0:	7d7b      	ldrb	r3, [r7, #21]
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	d115      	bne.n	8014ed2 <dir_find+0x106>
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6a1b      	ldr	r3, [r3, #32]
 8014eaa:	330d      	adds	r3, #13
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	7d3a      	ldrb	r2, [r7, #20]
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d10e      	bne.n	8014ed2 <dir_find+0x106>
 8014eb4:	693b      	ldr	r3, [r7, #16]
 8014eb6:	68da      	ldr	r2, [r3, #12]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6a1b      	ldr	r3, [r3, #32]
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	4610      	mov	r0, r2
 8014ec0:	f7ff fcf0 	bl	80148a4 <cmp_lfn>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d003      	beq.n	8014ed2 <dir_find+0x106>
 8014eca:	7d7b      	ldrb	r3, [r7, #21]
 8014ecc:	3b01      	subs	r3, #1
 8014ece:	b2db      	uxtb	r3, r3
 8014ed0:	e000      	b.n	8014ed4 <dir_find+0x108>
 8014ed2:	23ff      	movs	r3, #255	; 0xff
 8014ed4:	757b      	strb	r3, [r7, #21]
 8014ed6:	e024      	b.n	8014f22 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014ed8:	7d7b      	ldrb	r3, [r7, #21]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d109      	bne.n	8014ef2 <dir_find+0x126>
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6a1b      	ldr	r3, [r3, #32]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7ff feaa 	bl	8014c3c <sum_sfn>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	461a      	mov	r2, r3
 8014eec:	7d3b      	ldrb	r3, [r7, #20]
 8014eee:	4293      	cmp	r3, r2
 8014ef0:	d024      	beq.n	8014f3c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014ef8:	f003 0301 	and.w	r3, r3, #1
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d10a      	bne.n	8014f16 <dir_find+0x14a>
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6a18      	ldr	r0, [r3, #32]
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	3324      	adds	r3, #36	; 0x24
 8014f08:	220b      	movs	r2, #11
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	f7fe fd92 	bl	8013a34 <mem_cmp>
 8014f10:	4603      	mov	r3, r0
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d014      	beq.n	8014f40 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014f16:	23ff      	movs	r3, #255	; 0xff
 8014f18:	757b      	strb	r3, [r7, #21]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8014f20:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014f22:	2100      	movs	r1, #0
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f7ff fb72 	bl	801460e <dir_next>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014f2e:	7dfb      	ldrb	r3, [r7, #23]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	f43f af65 	beq.w	8014e00 <dir_find+0x34>
 8014f36:	e004      	b.n	8014f42 <dir_find+0x176>
		if (res != FR_OK) break;
 8014f38:	bf00      	nop
 8014f3a:	e002      	b.n	8014f42 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014f3c:	bf00      	nop
 8014f3e:	e000      	b.n	8014f42 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014f40:	bf00      	nop

	return res;
 8014f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3718      	adds	r7, #24
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b08c      	sub	sp, #48	; 0x30
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014f60:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d001      	beq.n	8014f6c <dir_register+0x20>
 8014f68:	2306      	movs	r3, #6
 8014f6a:	e0e0      	b.n	801512e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8014f70:	e002      	b.n	8014f78 <dir_register+0x2c>
 8014f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f74:	3301      	adds	r3, #1
 8014f76:	627b      	str	r3, [r7, #36]	; 0x24
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	68da      	ldr	r2, [r3, #12]
 8014f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f7e:	005b      	lsls	r3, r3, #1
 8014f80:	4413      	add	r3, r2
 8014f82:	881b      	ldrh	r3, [r3, #0]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d1f4      	bne.n	8014f72 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8014f8e:	f107 030c 	add.w	r3, r7, #12
 8014f92:	220c      	movs	r2, #12
 8014f94:	4618      	mov	r0, r3
 8014f96:	f7fe fd11 	bl	80139bc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8014f9a:	7dfb      	ldrb	r3, [r7, #23]
 8014f9c:	f003 0301 	and.w	r3, r3, #1
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d032      	beq.n	801500a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2240      	movs	r2, #64	; 0x40
 8014fa8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8014fac:	2301      	movs	r3, #1
 8014fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8014fb0:	e016      	b.n	8014fe0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8014fb8:	69fb      	ldr	r3, [r7, #28]
 8014fba:	68da      	ldr	r2, [r3, #12]
 8014fbc:	f107 010c 	add.w	r1, r7, #12
 8014fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc2:	f7ff fdab 	bl	8014b1c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8014fc6:	6878      	ldr	r0, [r7, #4]
 8014fc8:	f7ff ff00 	bl	8014dcc <dir_find>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8014fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d106      	bne.n	8014fe8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8014fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fdc:	3301      	adds	r3, #1
 8014fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8014fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe2:	2b63      	cmp	r3, #99	; 0x63
 8014fe4:	d9e5      	bls.n	8014fb2 <dir_register+0x66>
 8014fe6:	e000      	b.n	8014fea <dir_register+0x9e>
			if (res != FR_OK) break;
 8014fe8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8014fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fec:	2b64      	cmp	r3, #100	; 0x64
 8014fee:	d101      	bne.n	8014ff4 <dir_register+0xa8>
 8014ff0:	2307      	movs	r3, #7
 8014ff2:	e09c      	b.n	801512e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8014ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ff8:	2b04      	cmp	r3, #4
 8014ffa:	d002      	beq.n	8015002 <dir_register+0xb6>
 8014ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015000:	e095      	b.n	801512e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015002:	7dfa      	ldrb	r2, [r7, #23]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801500a:	7dfb      	ldrb	r3, [r7, #23]
 801500c:	f003 0302 	and.w	r3, r3, #2
 8015010:	2b00      	cmp	r3, #0
 8015012:	d007      	beq.n	8015024 <dir_register+0xd8>
 8015014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015016:	330c      	adds	r3, #12
 8015018:	4a47      	ldr	r2, [pc, #284]	; (8015138 <dir_register+0x1ec>)
 801501a:	fba2 2303 	umull	r2, r3, r2, r3
 801501e:	089b      	lsrs	r3, r3, #2
 8015020:	3301      	adds	r3, #1
 8015022:	e000      	b.n	8015026 <dir_register+0xda>
 8015024:	2301      	movs	r3, #1
 8015026:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015028:	6a39      	ldr	r1, [r7, #32]
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f7ff fbb4 	bl	8014798 <dir_alloc>
 8015030:	4603      	mov	r3, r0
 8015032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801503a:	2b00      	cmp	r3, #0
 801503c:	d148      	bne.n	80150d0 <dir_register+0x184>
 801503e:	6a3b      	ldr	r3, [r7, #32]
 8015040:	3b01      	subs	r3, #1
 8015042:	623b      	str	r3, [r7, #32]
 8015044:	6a3b      	ldr	r3, [r7, #32]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d042      	beq.n	80150d0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	695a      	ldr	r2, [r3, #20]
 801504e:	6a3b      	ldr	r3, [r7, #32]
 8015050:	015b      	lsls	r3, r3, #5
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	4619      	mov	r1, r3
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f7ff fa5e 	bl	8014518 <dir_sdi>
 801505c:	4603      	mov	r3, r0
 801505e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015066:	2b00      	cmp	r3, #0
 8015068:	d132      	bne.n	80150d0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	3324      	adds	r3, #36	; 0x24
 801506e:	4618      	mov	r0, r3
 8015070:	f7ff fde4 	bl	8014c3c <sum_sfn>
 8015074:	4603      	mov	r3, r0
 8015076:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	69db      	ldr	r3, [r3, #28]
 801507c:	4619      	mov	r1, r3
 801507e:	69f8      	ldr	r0, [r7, #28]
 8015080:	f7fe feca 	bl	8013e18 <move_window>
 8015084:	4603      	mov	r3, r0
 8015086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801508a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801508e:	2b00      	cmp	r3, #0
 8015090:	d11d      	bne.n	80150ce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015092:	69fb      	ldr	r3, [r7, #28]
 8015094:	68d8      	ldr	r0, [r3, #12]
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6a19      	ldr	r1, [r3, #32]
 801509a:	6a3b      	ldr	r3, [r7, #32]
 801509c:	b2da      	uxtb	r2, r3
 801509e:	7efb      	ldrb	r3, [r7, #27]
 80150a0:	f7ff fcd4 	bl	8014a4c <put_lfn>
				fs->wflag = 1;
 80150a4:	69fb      	ldr	r3, [r7, #28]
 80150a6:	2201      	movs	r2, #1
 80150a8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80150aa:	2100      	movs	r1, #0
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f7ff faae 	bl	801460e <dir_next>
 80150b2:	4603      	mov	r3, r0
 80150b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80150b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d107      	bne.n	80150d0 <dir_register+0x184>
 80150c0:	6a3b      	ldr	r3, [r7, #32]
 80150c2:	3b01      	subs	r3, #1
 80150c4:	623b      	str	r3, [r7, #32]
 80150c6:	6a3b      	ldr	r3, [r7, #32]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d1d5      	bne.n	8015078 <dir_register+0x12c>
 80150cc:	e000      	b.n	80150d0 <dir_register+0x184>
				if (res != FR_OK) break;
 80150ce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80150d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d128      	bne.n	801512a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	69db      	ldr	r3, [r3, #28]
 80150dc:	4619      	mov	r1, r3
 80150de:	69f8      	ldr	r0, [r7, #28]
 80150e0:	f7fe fe9a 	bl	8013e18 <move_window>
 80150e4:	4603      	mov	r3, r0
 80150e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80150ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d11b      	bne.n	801512a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6a1b      	ldr	r3, [r3, #32]
 80150f6:	2220      	movs	r2, #32
 80150f8:	2100      	movs	r1, #0
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7fe fc7f 	bl	80139fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6a18      	ldr	r0, [r3, #32]
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	3324      	adds	r3, #36	; 0x24
 8015108:	220b      	movs	r2, #11
 801510a:	4619      	mov	r1, r3
 801510c:	f7fe fc56 	bl	80139bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6a1b      	ldr	r3, [r3, #32]
 801511a:	330c      	adds	r3, #12
 801511c:	f002 0218 	and.w	r2, r2, #24
 8015120:	b2d2      	uxtb	r2, r2
 8015122:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015124:	69fb      	ldr	r3, [r7, #28]
 8015126:	2201      	movs	r2, #1
 8015128:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801512a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801512e:	4618      	mov	r0, r3
 8015130:	3730      	adds	r7, #48	; 0x30
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}
 8015136:	bf00      	nop
 8015138:	4ec4ec4f 	.word	0x4ec4ec4f

0801513c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b088      	sub	sp, #32
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801514c:	683b      	ldr	r3, [r7, #0]
 801514e:	2200      	movs	r2, #0
 8015150:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	69db      	ldr	r3, [r3, #28]
 8015156:	2b00      	cmp	r3, #0
 8015158:	f000 80c9 	beq.w	80152ee <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015164:	d032      	beq.n	80151cc <get_fileinfo+0x90>
			i = j = 0;
 8015166:	2300      	movs	r3, #0
 8015168:	61bb      	str	r3, [r7, #24]
 801516a:	69bb      	ldr	r3, [r7, #24]
 801516c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801516e:	e01b      	b.n	80151a8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8015170:	89fb      	ldrh	r3, [r7, #14]
 8015172:	2100      	movs	r1, #0
 8015174:	4618      	mov	r0, r3
 8015176:	f001 fed3 	bl	8016f20 <ff_convert>
 801517a:	4603      	mov	r3, r0
 801517c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801517e:	89fb      	ldrh	r3, [r7, #14]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d102      	bne.n	801518a <get_fileinfo+0x4e>
 8015184:	2300      	movs	r3, #0
 8015186:	61fb      	str	r3, [r7, #28]
 8015188:	e01a      	b.n	80151c0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801518a:	69fb      	ldr	r3, [r7, #28]
 801518c:	2bfe      	cmp	r3, #254	; 0xfe
 801518e:	d902      	bls.n	8015196 <get_fileinfo+0x5a>
 8015190:	2300      	movs	r3, #0
 8015192:	61fb      	str	r3, [r7, #28]
 8015194:	e014      	b.n	80151c0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8015196:	69fb      	ldr	r3, [r7, #28]
 8015198:	1c5a      	adds	r2, r3, #1
 801519a:	61fa      	str	r2, [r7, #28]
 801519c:	89fa      	ldrh	r2, [r7, #14]
 801519e:	b2d1      	uxtb	r1, r2
 80151a0:	683a      	ldr	r2, [r7, #0]
 80151a2:	4413      	add	r3, r2
 80151a4:	460a      	mov	r2, r1
 80151a6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	68da      	ldr	r2, [r3, #12]
 80151ac:	69bb      	ldr	r3, [r7, #24]
 80151ae:	1c59      	adds	r1, r3, #1
 80151b0:	61b9      	str	r1, [r7, #24]
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	4413      	add	r3, r2
 80151b6:	881b      	ldrh	r3, [r3, #0]
 80151b8:	81fb      	strh	r3, [r7, #14]
 80151ba:	89fb      	ldrh	r3, [r7, #14]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d1d7      	bne.n	8015170 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80151c0:	683a      	ldr	r2, [r7, #0]
 80151c2:	69fb      	ldr	r3, [r7, #28]
 80151c4:	4413      	add	r3, r2
 80151c6:	3316      	adds	r3, #22
 80151c8:	2200      	movs	r2, #0
 80151ca:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80151cc:	2300      	movs	r3, #0
 80151ce:	61bb      	str	r3, [r7, #24]
 80151d0:	69bb      	ldr	r3, [r7, #24]
 80151d2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80151d4:	683a      	ldr	r2, [r7, #0]
 80151d6:	69fb      	ldr	r3, [r7, #28]
 80151d8:	4413      	add	r3, r2
 80151da:	3316      	adds	r3, #22
 80151dc:	781b      	ldrb	r3, [r3, #0]
 80151de:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80151e0:	e04c      	b.n	801527c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6a1a      	ldr	r2, [r3, #32]
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	1c59      	adds	r1, r3, #1
 80151ea:	61f9      	str	r1, [r7, #28]
 80151ec:	4413      	add	r3, r2
 80151ee:	781b      	ldrb	r3, [r3, #0]
 80151f0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80151f2:	7dfb      	ldrb	r3, [r7, #23]
 80151f4:	2b20      	cmp	r3, #32
 80151f6:	d100      	bne.n	80151fa <get_fileinfo+0xbe>
 80151f8:	e040      	b.n	801527c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80151fa:	7dfb      	ldrb	r3, [r7, #23]
 80151fc:	2b05      	cmp	r3, #5
 80151fe:	d101      	bne.n	8015204 <get_fileinfo+0xc8>
 8015200:	23e5      	movs	r3, #229	; 0xe5
 8015202:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8015204:	69fb      	ldr	r3, [r7, #28]
 8015206:	2b09      	cmp	r3, #9
 8015208:	d10f      	bne.n	801522a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801520a:	89bb      	ldrh	r3, [r7, #12]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d105      	bne.n	801521c <get_fileinfo+0xe0>
 8015210:	683a      	ldr	r2, [r7, #0]
 8015212:	69bb      	ldr	r3, [r7, #24]
 8015214:	4413      	add	r3, r2
 8015216:	3316      	adds	r3, #22
 8015218:	222e      	movs	r2, #46	; 0x2e
 801521a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	1c5a      	adds	r2, r3, #1
 8015220:	61ba      	str	r2, [r7, #24]
 8015222:	683a      	ldr	r2, [r7, #0]
 8015224:	4413      	add	r3, r2
 8015226:	222e      	movs	r2, #46	; 0x2e
 8015228:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801522a:	683a      	ldr	r2, [r7, #0]
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	4413      	add	r3, r2
 8015230:	3309      	adds	r3, #9
 8015232:	7dfa      	ldrb	r2, [r7, #23]
 8015234:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8015236:	89bb      	ldrh	r3, [r7, #12]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d11c      	bne.n	8015276 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801523c:	7dfb      	ldrb	r3, [r7, #23]
 801523e:	2b40      	cmp	r3, #64	; 0x40
 8015240:	d913      	bls.n	801526a <get_fileinfo+0x12e>
 8015242:	7dfb      	ldrb	r3, [r7, #23]
 8015244:	2b5a      	cmp	r3, #90	; 0x5a
 8015246:	d810      	bhi.n	801526a <get_fileinfo+0x12e>
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	6a1b      	ldr	r3, [r3, #32]
 801524c:	330c      	adds	r3, #12
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	461a      	mov	r2, r3
 8015252:	69fb      	ldr	r3, [r7, #28]
 8015254:	2b08      	cmp	r3, #8
 8015256:	d901      	bls.n	801525c <get_fileinfo+0x120>
 8015258:	2310      	movs	r3, #16
 801525a:	e000      	b.n	801525e <get_fileinfo+0x122>
 801525c:	2308      	movs	r3, #8
 801525e:	4013      	ands	r3, r2
 8015260:	2b00      	cmp	r3, #0
 8015262:	d002      	beq.n	801526a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8015264:	7dfb      	ldrb	r3, [r7, #23]
 8015266:	3320      	adds	r3, #32
 8015268:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801526a:	683a      	ldr	r2, [r7, #0]
 801526c:	69bb      	ldr	r3, [r7, #24]
 801526e:	4413      	add	r3, r2
 8015270:	3316      	adds	r3, #22
 8015272:	7dfa      	ldrb	r2, [r7, #23]
 8015274:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8015276:	69bb      	ldr	r3, [r7, #24]
 8015278:	3301      	adds	r3, #1
 801527a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 801527c:	69fb      	ldr	r3, [r7, #28]
 801527e:	2b0a      	cmp	r3, #10
 8015280:	d9af      	bls.n	80151e2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8015282:	89bb      	ldrh	r3, [r7, #12]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d10d      	bne.n	80152a4 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8015288:	683a      	ldr	r2, [r7, #0]
 801528a:	69bb      	ldr	r3, [r7, #24]
 801528c:	4413      	add	r3, r2
 801528e:	3316      	adds	r3, #22
 8015290:	2200      	movs	r2, #0
 8015292:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	6a1b      	ldr	r3, [r3, #32]
 8015298:	330c      	adds	r3, #12
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d101      	bne.n	80152a4 <get_fileinfo+0x168>
 80152a0:	2300      	movs	r3, #0
 80152a2:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80152a4:	683a      	ldr	r2, [r7, #0]
 80152a6:	69bb      	ldr	r3, [r7, #24]
 80152a8:	4413      	add	r3, r2
 80152aa:	3309      	adds	r3, #9
 80152ac:	2200      	movs	r2, #0
 80152ae:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6a1b      	ldr	r3, [r3, #32]
 80152b4:	7ada      	ldrb	r2, [r3, #11]
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	6a1b      	ldr	r3, [r3, #32]
 80152be:	331c      	adds	r3, #28
 80152c0:	4618      	mov	r0, r3
 80152c2:	f7fe fb11 	bl	80138e8 <ld_dword>
 80152c6:	4602      	mov	r2, r0
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6a1b      	ldr	r3, [r3, #32]
 80152d0:	3316      	adds	r3, #22
 80152d2:	4618      	mov	r0, r3
 80152d4:	f7fe fb08 	bl	80138e8 <ld_dword>
 80152d8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	b29a      	uxth	r2, r3
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	80da      	strh	r2, [r3, #6]
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	0c1b      	lsrs	r3, r3, #16
 80152e6:	b29a      	uxth	r2, r3
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	809a      	strh	r2, [r3, #4]
 80152ec:	e000      	b.n	80152f0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80152ee:	bf00      	nop
}
 80152f0:	3720      	adds	r7, #32
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}
	...

080152f8 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80152f8:	b480      	push	{r7}
 80152fa:	b085      	sub	sp, #20
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	1c59      	adds	r1, r3, #1
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	6011      	str	r1, [r2, #0]
 801530a:	781b      	ldrb	r3, [r3, #0]
 801530c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801530e:	89fb      	ldrh	r3, [r7, #14]
 8015310:	2b60      	cmp	r3, #96	; 0x60
 8015312:	d905      	bls.n	8015320 <get_achar+0x28>
 8015314:	89fb      	ldrh	r3, [r7, #14]
 8015316:	2b7a      	cmp	r3, #122	; 0x7a
 8015318:	d802      	bhi.n	8015320 <get_achar+0x28>
 801531a:	89fb      	ldrh	r3, [r7, #14]
 801531c:	3b20      	subs	r3, #32
 801531e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8015320:	89fb      	ldrh	r3, [r7, #14]
 8015322:	2b7f      	cmp	r3, #127	; 0x7f
 8015324:	d904      	bls.n	8015330 <get_achar+0x38>
 8015326:	89fb      	ldrh	r3, [r7, #14]
 8015328:	3b80      	subs	r3, #128	; 0x80
 801532a:	4a05      	ldr	r2, [pc, #20]	; (8015340 <get_achar+0x48>)
 801532c:	5cd3      	ldrb	r3, [r2, r3]
 801532e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8015330:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8015332:	4618      	mov	r0, r3
 8015334:	3714      	adds	r7, #20
 8015336:	46bd      	mov	sp, r7
 8015338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533c:	4770      	bx	lr
 801533e:	bf00      	nop
 8015340:	080226f4 	.word	0x080226f4

08015344 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b08a      	sub	sp, #40	; 0x28
 8015348:	af00      	add	r7, sp, #0
 801534a:	60f8      	str	r0, [r7, #12]
 801534c:	60b9      	str	r1, [r7, #8]
 801534e:	607a      	str	r2, [r7, #4]
 8015350:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8015352:	e009      	b.n	8015368 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8015354:	f107 0308 	add.w	r3, r7, #8
 8015358:	4618      	mov	r0, r3
 801535a:	f7ff ffcd 	bl	80152f8 <get_achar>
 801535e:	4603      	mov	r3, r0
 8015360:	2b00      	cmp	r3, #0
 8015362:	d101      	bne.n	8015368 <pattern_matching+0x24>
 8015364:	2300      	movs	r3, #0
 8015366:	e064      	b.n	8015432 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	1e5a      	subs	r2, r3, #1
 801536c:	607a      	str	r2, [r7, #4]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d1f0      	bne.n	8015354 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	781b      	ldrb	r3, [r3, #0]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d104      	bne.n	8015384 <pattern_matching+0x40>
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d001      	beq.n	8015384 <pattern_matching+0x40>
 8015380:	2301      	movs	r3, #1
 8015382:	e056      	b.n	8015432 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	617b      	str	r3, [r7, #20]
 8015388:	68bb      	ldr	r3, [r7, #8]
 801538a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 801538c:	697b      	ldr	r3, [r7, #20]
 801538e:	781b      	ldrb	r3, [r3, #0]
 8015390:	2b3f      	cmp	r3, #63	; 0x3f
 8015392:	d003      	beq.n	801539c <pattern_matching+0x58>
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	2b2a      	cmp	r3, #42	; 0x2a
 801539a:	d126      	bne.n	80153ea <pattern_matching+0xa6>
				nm = nx = 0;
 801539c:	2300      	movs	r3, #0
 801539e:	61fb      	str	r3, [r7, #28]
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	1c5a      	adds	r2, r3, #1
 80153a8:	617a      	str	r2, [r7, #20]
 80153aa:	781b      	ldrb	r3, [r3, #0]
 80153ac:	2b3f      	cmp	r3, #63	; 0x3f
 80153ae:	d103      	bne.n	80153b8 <pattern_matching+0x74>
 80153b0:	6a3b      	ldr	r3, [r7, #32]
 80153b2:	3301      	adds	r3, #1
 80153b4:	623b      	str	r3, [r7, #32]
 80153b6:	e001      	b.n	80153bc <pattern_matching+0x78>
 80153b8:	2301      	movs	r3, #1
 80153ba:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 80153bc:	697b      	ldr	r3, [r7, #20]
 80153be:	781b      	ldrb	r3, [r3, #0]
 80153c0:	2b3f      	cmp	r3, #63	; 0x3f
 80153c2:	d0ef      	beq.n	80153a4 <pattern_matching+0x60>
 80153c4:	697b      	ldr	r3, [r7, #20]
 80153c6:	781b      	ldrb	r3, [r3, #0]
 80153c8:	2b2a      	cmp	r3, #42	; 0x2a
 80153ca:	d0eb      	beq.n	80153a4 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80153cc:	6978      	ldr	r0, [r7, #20]
 80153ce:	6939      	ldr	r1, [r7, #16]
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	6a3a      	ldr	r2, [r7, #32]
 80153d4:	f7ff ffb6 	bl	8015344 <pattern_matching>
 80153d8:	4603      	mov	r3, r0
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d001      	beq.n	80153e2 <pattern_matching+0x9e>
 80153de:	2301      	movs	r3, #1
 80153e0:	e027      	b.n	8015432 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80153e2:	693b      	ldr	r3, [r7, #16]
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80153e8:	e017      	b.n	801541a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80153ea:	f107 0314 	add.w	r3, r7, #20
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7ff ff82 	bl	80152f8 <get_achar>
 80153f4:	4603      	mov	r3, r0
 80153f6:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80153f8:	f107 0310 	add.w	r3, r7, #16
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7ff ff7b 	bl	80152f8 <get_achar>
 8015402:	4603      	mov	r3, r0
 8015404:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8015406:	8b7a      	ldrh	r2, [r7, #26]
 8015408:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801540a:	429a      	cmp	r2, r3
 801540c:	d104      	bne.n	8015418 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 801540e:	8b7b      	ldrh	r3, [r7, #26]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d1bb      	bne.n	801538c <pattern_matching+0x48>
 8015414:	2301      	movs	r3, #1
 8015416:	e00c      	b.n	8015432 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8015418:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801541a:	f107 0308 	add.w	r3, r7, #8
 801541e:	4618      	mov	r0, r3
 8015420:	f7ff ff6a 	bl	80152f8 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d002      	beq.n	8015430 <pattern_matching+0xec>
 801542a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801542c:	2b00      	cmp	r3, #0
 801542e:	d1a9      	bne.n	8015384 <pattern_matching+0x40>

	return 0;
 8015430:	2300      	movs	r3, #0
}
 8015432:	4618      	mov	r0, r3
 8015434:	3728      	adds	r7, #40	; 0x28
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
	...

0801543c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b08a      	sub	sp, #40	; 0x28
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	613b      	str	r3, [r7, #16]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	68db      	ldr	r3, [r3, #12]
 8015452:	60fb      	str	r3, [r7, #12]
 8015454:	2300      	movs	r3, #0
 8015456:	617b      	str	r3, [r7, #20]
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801545c:	69bb      	ldr	r3, [r7, #24]
 801545e:	1c5a      	adds	r2, r3, #1
 8015460:	61ba      	str	r2, [r7, #24]
 8015462:	693a      	ldr	r2, [r7, #16]
 8015464:	4413      	add	r3, r2
 8015466:	781b      	ldrb	r3, [r3, #0]
 8015468:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801546a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801546c:	2b1f      	cmp	r3, #31
 801546e:	d940      	bls.n	80154f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015472:	2b2f      	cmp	r3, #47	; 0x2f
 8015474:	d006      	beq.n	8015484 <create_name+0x48>
 8015476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015478:	2b5c      	cmp	r3, #92	; 0x5c
 801547a:	d110      	bne.n	801549e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801547c:	e002      	b.n	8015484 <create_name+0x48>
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	3301      	adds	r3, #1
 8015482:	61bb      	str	r3, [r7, #24]
 8015484:	693a      	ldr	r2, [r7, #16]
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	4413      	add	r3, r2
 801548a:	781b      	ldrb	r3, [r3, #0]
 801548c:	2b2f      	cmp	r3, #47	; 0x2f
 801548e:	d0f6      	beq.n	801547e <create_name+0x42>
 8015490:	693a      	ldr	r2, [r7, #16]
 8015492:	69bb      	ldr	r3, [r7, #24]
 8015494:	4413      	add	r3, r2
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	2b5c      	cmp	r3, #92	; 0x5c
 801549a:	d0f0      	beq.n	801547e <create_name+0x42>
			break;
 801549c:	e02a      	b.n	80154f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	2bfe      	cmp	r3, #254	; 0xfe
 80154a2:	d901      	bls.n	80154a8 <create_name+0x6c>
 80154a4:	2306      	movs	r3, #6
 80154a6:	e177      	b.n	8015798 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80154a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154aa:	b2db      	uxtb	r3, r3
 80154ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80154ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154b0:	2101      	movs	r1, #1
 80154b2:	4618      	mov	r0, r3
 80154b4:	f001 fd34 	bl	8016f20 <ff_convert>
 80154b8:	4603      	mov	r3, r0
 80154ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80154bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d101      	bne.n	80154c6 <create_name+0x8a>
 80154c2:	2306      	movs	r3, #6
 80154c4:	e168      	b.n	8015798 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80154c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154c8:	2b7f      	cmp	r3, #127	; 0x7f
 80154ca:	d809      	bhi.n	80154e0 <create_name+0xa4>
 80154cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154ce:	4619      	mov	r1, r3
 80154d0:	48b3      	ldr	r0, [pc, #716]	; (80157a0 <create_name+0x364>)
 80154d2:	f7fe fad6 	bl	8013a82 <chk_chr>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d001      	beq.n	80154e0 <create_name+0xa4>
 80154dc:	2306      	movs	r3, #6
 80154de:	e15b      	b.n	8015798 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	1c5a      	adds	r2, r3, #1
 80154e4:	617a      	str	r2, [r7, #20]
 80154e6:	005b      	lsls	r3, r3, #1
 80154e8:	68fa      	ldr	r2, [r7, #12]
 80154ea:	4413      	add	r3, r2
 80154ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80154ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80154f0:	e7b4      	b.n	801545c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80154f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80154f4:	693a      	ldr	r2, [r7, #16]
 80154f6:	69bb      	ldr	r3, [r7, #24]
 80154f8:	441a      	add	r2, r3
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80154fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015500:	2b1f      	cmp	r3, #31
 8015502:	d801      	bhi.n	8015508 <create_name+0xcc>
 8015504:	2304      	movs	r3, #4
 8015506:	e000      	b.n	801550a <create_name+0xce>
 8015508:	2300      	movs	r3, #0
 801550a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801550e:	e011      	b.n	8015534 <create_name+0xf8>
		w = lfn[di - 1];
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015516:	3b01      	subs	r3, #1
 8015518:	005b      	lsls	r3, r3, #1
 801551a:	68fa      	ldr	r2, [r7, #12]
 801551c:	4413      	add	r3, r2
 801551e:	881b      	ldrh	r3, [r3, #0]
 8015520:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8015522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015524:	2b20      	cmp	r3, #32
 8015526:	d002      	beq.n	801552e <create_name+0xf2>
 8015528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801552a:	2b2e      	cmp	r3, #46	; 0x2e
 801552c:	d106      	bne.n	801553c <create_name+0x100>
		di--;
 801552e:	697b      	ldr	r3, [r7, #20]
 8015530:	3b01      	subs	r3, #1
 8015532:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d1ea      	bne.n	8015510 <create_name+0xd4>
 801553a:	e000      	b.n	801553e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801553c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	005b      	lsls	r3, r3, #1
 8015542:	68fa      	ldr	r2, [r7, #12]
 8015544:	4413      	add	r3, r2
 8015546:	2200      	movs	r2, #0
 8015548:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d101      	bne.n	8015554 <create_name+0x118>
 8015550:	2306      	movs	r3, #6
 8015552:	e121      	b.n	8015798 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	3324      	adds	r3, #36	; 0x24
 8015558:	220b      	movs	r2, #11
 801555a:	2120      	movs	r1, #32
 801555c:	4618      	mov	r0, r3
 801555e:	f7fe fa4e 	bl	80139fe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015562:	2300      	movs	r3, #0
 8015564:	61bb      	str	r3, [r7, #24]
 8015566:	e002      	b.n	801556e <create_name+0x132>
 8015568:	69bb      	ldr	r3, [r7, #24]
 801556a:	3301      	adds	r3, #1
 801556c:	61bb      	str	r3, [r7, #24]
 801556e:	69bb      	ldr	r3, [r7, #24]
 8015570:	005b      	lsls	r3, r3, #1
 8015572:	68fa      	ldr	r2, [r7, #12]
 8015574:	4413      	add	r3, r2
 8015576:	881b      	ldrh	r3, [r3, #0]
 8015578:	2b20      	cmp	r3, #32
 801557a:	d0f5      	beq.n	8015568 <create_name+0x12c>
 801557c:	69bb      	ldr	r3, [r7, #24]
 801557e:	005b      	lsls	r3, r3, #1
 8015580:	68fa      	ldr	r2, [r7, #12]
 8015582:	4413      	add	r3, r2
 8015584:	881b      	ldrh	r3, [r3, #0]
 8015586:	2b2e      	cmp	r3, #46	; 0x2e
 8015588:	d0ee      	beq.n	8015568 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d009      	beq.n	80155a4 <create_name+0x168>
 8015590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015594:	f043 0303 	orr.w	r3, r3, #3
 8015598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801559c:	e002      	b.n	80155a4 <create_name+0x168>
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	3b01      	subs	r3, #1
 80155a2:	617b      	str	r3, [r7, #20]
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d009      	beq.n	80155be <create_name+0x182>
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80155b0:	3b01      	subs	r3, #1
 80155b2:	005b      	lsls	r3, r3, #1
 80155b4:	68fa      	ldr	r2, [r7, #12]
 80155b6:	4413      	add	r3, r2
 80155b8:	881b      	ldrh	r3, [r3, #0]
 80155ba:	2b2e      	cmp	r3, #46	; 0x2e
 80155bc:	d1ef      	bne.n	801559e <create_name+0x162>

	i = b = 0; ni = 8;
 80155be:	2300      	movs	r3, #0
 80155c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80155c4:	2300      	movs	r3, #0
 80155c6:	623b      	str	r3, [r7, #32]
 80155c8:	2308      	movs	r3, #8
 80155ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80155cc:	69bb      	ldr	r3, [r7, #24]
 80155ce:	1c5a      	adds	r2, r3, #1
 80155d0:	61ba      	str	r2, [r7, #24]
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	68fa      	ldr	r2, [r7, #12]
 80155d6:	4413      	add	r3, r2
 80155d8:	881b      	ldrh	r3, [r3, #0]
 80155da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80155dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155de:	2b00      	cmp	r3, #0
 80155e0:	f000 8090 	beq.w	8015704 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80155e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155e6:	2b20      	cmp	r3, #32
 80155e8:	d006      	beq.n	80155f8 <create_name+0x1bc>
 80155ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155ec:	2b2e      	cmp	r3, #46	; 0x2e
 80155ee:	d10a      	bne.n	8015606 <create_name+0x1ca>
 80155f0:	69ba      	ldr	r2, [r7, #24]
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d006      	beq.n	8015606 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80155f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155fc:	f043 0303 	orr.w	r3, r3, #3
 8015600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015604:	e07d      	b.n	8015702 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8015606:	6a3a      	ldr	r2, [r7, #32]
 8015608:	69fb      	ldr	r3, [r7, #28]
 801560a:	429a      	cmp	r2, r3
 801560c:	d203      	bcs.n	8015616 <create_name+0x1da>
 801560e:	69ba      	ldr	r2, [r7, #24]
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	429a      	cmp	r2, r3
 8015614:	d123      	bne.n	801565e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	2b0b      	cmp	r3, #11
 801561a:	d106      	bne.n	801562a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801561c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015620:	f043 0303 	orr.w	r3, r3, #3
 8015624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015628:	e06f      	b.n	801570a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801562a:	69ba      	ldr	r2, [r7, #24]
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	429a      	cmp	r2, r3
 8015630:	d005      	beq.n	801563e <create_name+0x202>
 8015632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015636:	f043 0303 	orr.w	r3, r3, #3
 801563a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801563e:	69ba      	ldr	r2, [r7, #24]
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	429a      	cmp	r2, r3
 8015644:	d860      	bhi.n	8015708 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	61bb      	str	r3, [r7, #24]
 801564a:	2308      	movs	r3, #8
 801564c:	623b      	str	r3, [r7, #32]
 801564e:	230b      	movs	r3, #11
 8015650:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8015652:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015656:	009b      	lsls	r3, r3, #2
 8015658:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801565c:	e051      	b.n	8015702 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801565e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015660:	2b7f      	cmp	r3, #127	; 0x7f
 8015662:	d914      	bls.n	801568e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8015664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015666:	2100      	movs	r1, #0
 8015668:	4618      	mov	r0, r3
 801566a:	f001 fc59 	bl	8016f20 <ff_convert>
 801566e:	4603      	mov	r3, r0
 8015670:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015674:	2b00      	cmp	r3, #0
 8015676:	d004      	beq.n	8015682 <create_name+0x246>
 8015678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801567a:	3b80      	subs	r3, #128	; 0x80
 801567c:	4a49      	ldr	r2, [pc, #292]	; (80157a4 <create_name+0x368>)
 801567e:	5cd3      	ldrb	r3, [r2, r3]
 8015680:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8015682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015686:	f043 0302 	orr.w	r3, r3, #2
 801568a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801568e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015690:	2b00      	cmp	r3, #0
 8015692:	d007      	beq.n	80156a4 <create_name+0x268>
 8015694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015696:	4619      	mov	r1, r3
 8015698:	4843      	ldr	r0, [pc, #268]	; (80157a8 <create_name+0x36c>)
 801569a:	f7fe f9f2 	bl	8013a82 <chk_chr>
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d008      	beq.n	80156b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80156a4:	235f      	movs	r3, #95	; 0x5f
 80156a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80156a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156ac:	f043 0303 	orr.w	r3, r3, #3
 80156b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156b4:	e01b      	b.n	80156ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80156b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156b8:	2b40      	cmp	r3, #64	; 0x40
 80156ba:	d909      	bls.n	80156d0 <create_name+0x294>
 80156bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156be:	2b5a      	cmp	r3, #90	; 0x5a
 80156c0:	d806      	bhi.n	80156d0 <create_name+0x294>
					b |= 2;
 80156c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156c6:	f043 0302 	orr.w	r3, r3, #2
 80156ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156ce:	e00e      	b.n	80156ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80156d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156d2:	2b60      	cmp	r3, #96	; 0x60
 80156d4:	d90b      	bls.n	80156ee <create_name+0x2b2>
 80156d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156d8:	2b7a      	cmp	r3, #122	; 0x7a
 80156da:	d808      	bhi.n	80156ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80156dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156e0:	f043 0301 	orr.w	r3, r3, #1
 80156e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156ea:	3b20      	subs	r3, #32
 80156ec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80156ee:	6a3b      	ldr	r3, [r7, #32]
 80156f0:	1c5a      	adds	r2, r3, #1
 80156f2:	623a      	str	r2, [r7, #32]
 80156f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80156f6:	b2d1      	uxtb	r1, r2
 80156f8:	687a      	ldr	r2, [r7, #4]
 80156fa:	4413      	add	r3, r2
 80156fc:	460a      	mov	r2, r1
 80156fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8015702:	e763      	b.n	80155cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8015704:	bf00      	nop
 8015706:	e000      	b.n	801570a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8015708:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015710:	2be5      	cmp	r3, #229	; 0xe5
 8015712:	d103      	bne.n	801571c <create_name+0x2e0>
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2205      	movs	r2, #5
 8015718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801571c:	69fb      	ldr	r3, [r7, #28]
 801571e:	2b08      	cmp	r3, #8
 8015720:	d104      	bne.n	801572c <create_name+0x2f0>
 8015722:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015726:	009b      	lsls	r3, r3, #2
 8015728:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801572c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015730:	f003 030c 	and.w	r3, r3, #12
 8015734:	2b0c      	cmp	r3, #12
 8015736:	d005      	beq.n	8015744 <create_name+0x308>
 8015738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801573c:	f003 0303 	and.w	r3, r3, #3
 8015740:	2b03      	cmp	r3, #3
 8015742:	d105      	bne.n	8015750 <create_name+0x314>
 8015744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015748:	f043 0302 	orr.w	r3, r3, #2
 801574c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015754:	f003 0302 	and.w	r3, r3, #2
 8015758:	2b00      	cmp	r3, #0
 801575a:	d117      	bne.n	801578c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801575c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015760:	f003 0303 	and.w	r3, r3, #3
 8015764:	2b01      	cmp	r3, #1
 8015766:	d105      	bne.n	8015774 <create_name+0x338>
 8015768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801576c:	f043 0310 	orr.w	r3, r3, #16
 8015770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8015774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015778:	f003 030c 	and.w	r3, r3, #12
 801577c:	2b04      	cmp	r3, #4
 801577e:	d105      	bne.n	801578c <create_name+0x350>
 8015780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015784:	f043 0308 	orr.w	r3, r3, #8
 8015788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015792:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8015796:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8015798:	4618      	mov	r0, r3
 801579a:	3728      	adds	r7, #40	; 0x28
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	0802248c 	.word	0x0802248c
 80157a4:	080226f4 	.word	0x080226f4
 80157a8:	08022498 	.word	0x08022498

080157ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b086      	sub	sp, #24
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
 80157b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80157c0:	e002      	b.n	80157c8 <follow_path+0x1c>
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	3301      	adds	r3, #1
 80157c6:	603b      	str	r3, [r7, #0]
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	2b2f      	cmp	r3, #47	; 0x2f
 80157ce:	d0f8      	beq.n	80157c2 <follow_path+0x16>
 80157d0:	683b      	ldr	r3, [r7, #0]
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	2b5c      	cmp	r3, #92	; 0x5c
 80157d6:	d0f4      	beq.n	80157c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	2200      	movs	r2, #0
 80157dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	781b      	ldrb	r3, [r3, #0]
 80157e2:	2b1f      	cmp	r3, #31
 80157e4:	d80a      	bhi.n	80157fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	2280      	movs	r2, #128	; 0x80
 80157ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80157ee:	2100      	movs	r1, #0
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f7fe fe91 	bl	8014518 <dir_sdi>
 80157f6:	4603      	mov	r3, r0
 80157f8:	75fb      	strb	r3, [r7, #23]
 80157fa:	e043      	b.n	8015884 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80157fc:	463b      	mov	r3, r7
 80157fe:	4619      	mov	r1, r3
 8015800:	6878      	ldr	r0, [r7, #4]
 8015802:	f7ff fe1b 	bl	801543c <create_name>
 8015806:	4603      	mov	r3, r0
 8015808:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801580a:	7dfb      	ldrb	r3, [r7, #23]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d134      	bne.n	801587a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015810:	6878      	ldr	r0, [r7, #4]
 8015812:	f7ff fadb 	bl	8014dcc <dir_find>
 8015816:	4603      	mov	r3, r0
 8015818:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015820:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015822:	7dfb      	ldrb	r3, [r7, #23]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d00a      	beq.n	801583e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015828:	7dfb      	ldrb	r3, [r7, #23]
 801582a:	2b04      	cmp	r3, #4
 801582c:	d127      	bne.n	801587e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801582e:	7afb      	ldrb	r3, [r7, #11]
 8015830:	f003 0304 	and.w	r3, r3, #4
 8015834:	2b00      	cmp	r3, #0
 8015836:	d122      	bne.n	801587e <follow_path+0xd2>
 8015838:	2305      	movs	r3, #5
 801583a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801583c:	e01f      	b.n	801587e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801583e:	7afb      	ldrb	r3, [r7, #11]
 8015840:	f003 0304 	and.w	r3, r3, #4
 8015844:	2b00      	cmp	r3, #0
 8015846:	d11c      	bne.n	8015882 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015848:	693b      	ldr	r3, [r7, #16]
 801584a:	799b      	ldrb	r3, [r3, #6]
 801584c:	f003 0310 	and.w	r3, r3, #16
 8015850:	2b00      	cmp	r3, #0
 8015852:	d102      	bne.n	801585a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015854:	2305      	movs	r3, #5
 8015856:	75fb      	strb	r3, [r7, #23]
 8015858:	e014      	b.n	8015884 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	695b      	ldr	r3, [r3, #20]
 8015864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015868:	4413      	add	r3, r2
 801586a:	4619      	mov	r1, r3
 801586c:	68f8      	ldr	r0, [r7, #12]
 801586e:	f7fe ffda 	bl	8014826 <ld_clust>
 8015872:	4602      	mov	r2, r0
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015878:	e7c0      	b.n	80157fc <follow_path+0x50>
			if (res != FR_OK) break;
 801587a:	bf00      	nop
 801587c:	e002      	b.n	8015884 <follow_path+0xd8>
				break;
 801587e:	bf00      	nop
 8015880:	e000      	b.n	8015884 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015882:	bf00      	nop
			}
		}
	}

	return res;
 8015884:	7dfb      	ldrb	r3, [r7, #23]
}
 8015886:	4618      	mov	r0, r3
 8015888:	3718      	adds	r7, #24
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}

0801588e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801588e:	b480      	push	{r7}
 8015890:	b087      	sub	sp, #28
 8015892:	af00      	add	r7, sp, #0
 8015894:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015896:	f04f 33ff 	mov.w	r3, #4294967295
 801589a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d031      	beq.n	8015908 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	617b      	str	r3, [r7, #20]
 80158aa:	e002      	b.n	80158b2 <get_ldnumber+0x24>
 80158ac:	697b      	ldr	r3, [r7, #20]
 80158ae:	3301      	adds	r3, #1
 80158b0:	617b      	str	r3, [r7, #20]
 80158b2:	697b      	ldr	r3, [r7, #20]
 80158b4:	781b      	ldrb	r3, [r3, #0]
 80158b6:	2b1f      	cmp	r3, #31
 80158b8:	d903      	bls.n	80158c2 <get_ldnumber+0x34>
 80158ba:	697b      	ldr	r3, [r7, #20]
 80158bc:	781b      	ldrb	r3, [r3, #0]
 80158be:	2b3a      	cmp	r3, #58	; 0x3a
 80158c0:	d1f4      	bne.n	80158ac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	2b3a      	cmp	r3, #58	; 0x3a
 80158c8:	d11c      	bne.n	8015904 <get_ldnumber+0x76>
			tp = *path;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	1c5a      	adds	r2, r3, #1
 80158d4:	60fa      	str	r2, [r7, #12]
 80158d6:	781b      	ldrb	r3, [r3, #0]
 80158d8:	3b30      	subs	r3, #48	; 0x30
 80158da:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80158dc:	68bb      	ldr	r3, [r7, #8]
 80158de:	2b09      	cmp	r3, #9
 80158e0:	d80e      	bhi.n	8015900 <get_ldnumber+0x72>
 80158e2:	68fa      	ldr	r2, [r7, #12]
 80158e4:	697b      	ldr	r3, [r7, #20]
 80158e6:	429a      	cmp	r2, r3
 80158e8:	d10a      	bne.n	8015900 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80158ea:	68bb      	ldr	r3, [r7, #8]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d107      	bne.n	8015900 <get_ldnumber+0x72>
					vol = (int)i;
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80158f4:	697b      	ldr	r3, [r7, #20]
 80158f6:	3301      	adds	r3, #1
 80158f8:	617b      	str	r3, [r7, #20]
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	697a      	ldr	r2, [r7, #20]
 80158fe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	e002      	b.n	801590a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015904:	2300      	movs	r3, #0
 8015906:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015908:	693b      	ldr	r3, [r7, #16]
}
 801590a:	4618      	mov	r0, r3
 801590c:	371c      	adds	r7, #28
 801590e:	46bd      	mov	sp, r7
 8015910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015914:	4770      	bx	lr
	...

08015918 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
 8015920:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2200      	movs	r2, #0
 8015926:	70da      	strb	r2, [r3, #3]
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	f04f 32ff 	mov.w	r2, #4294967295
 801592e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015930:	6839      	ldr	r1, [r7, #0]
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f7fe fa70 	bl	8013e18 <move_window>
 8015938:	4603      	mov	r3, r0
 801593a:	2b00      	cmp	r3, #0
 801593c:	d001      	beq.n	8015942 <check_fs+0x2a>
 801593e:	2304      	movs	r3, #4
 8015940:	e038      	b.n	80159b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	3334      	adds	r3, #52	; 0x34
 8015946:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801594a:	4618      	mov	r0, r3
 801594c:	f7fd ffb4 	bl	80138b8 <ld_word>
 8015950:	4603      	mov	r3, r0
 8015952:	461a      	mov	r2, r3
 8015954:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015958:	429a      	cmp	r2, r3
 801595a:	d001      	beq.n	8015960 <check_fs+0x48>
 801595c:	2303      	movs	r3, #3
 801595e:	e029      	b.n	80159b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015966:	2be9      	cmp	r3, #233	; 0xe9
 8015968:	d009      	beq.n	801597e <check_fs+0x66>
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015970:	2beb      	cmp	r3, #235	; 0xeb
 8015972:	d11e      	bne.n	80159b2 <check_fs+0x9a>
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801597a:	2b90      	cmp	r3, #144	; 0x90
 801597c:	d119      	bne.n	80159b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	3334      	adds	r3, #52	; 0x34
 8015982:	3336      	adds	r3, #54	; 0x36
 8015984:	4618      	mov	r0, r3
 8015986:	f7fd ffaf 	bl	80138e8 <ld_dword>
 801598a:	4603      	mov	r3, r0
 801598c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015990:	4a0a      	ldr	r2, [pc, #40]	; (80159bc <check_fs+0xa4>)
 8015992:	4293      	cmp	r3, r2
 8015994:	d101      	bne.n	801599a <check_fs+0x82>
 8015996:	2300      	movs	r3, #0
 8015998:	e00c      	b.n	80159b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	3334      	adds	r3, #52	; 0x34
 801599e:	3352      	adds	r3, #82	; 0x52
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7fd ffa1 	bl	80138e8 <ld_dword>
 80159a6:	4603      	mov	r3, r0
 80159a8:	4a05      	ldr	r2, [pc, #20]	; (80159c0 <check_fs+0xa8>)
 80159aa:	4293      	cmp	r3, r2
 80159ac:	d101      	bne.n	80159b2 <check_fs+0x9a>
 80159ae:	2300      	movs	r3, #0
 80159b0:	e000      	b.n	80159b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80159b2:	2302      	movs	r3, #2
}
 80159b4:	4618      	mov	r0, r3
 80159b6:	3708      	adds	r7, #8
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}
 80159bc:	00544146 	.word	0x00544146
 80159c0:	33544146 	.word	0x33544146

080159c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b096      	sub	sp, #88	; 0x58
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	60f8      	str	r0, [r7, #12]
 80159cc:	60b9      	str	r1, [r7, #8]
 80159ce:	4613      	mov	r3, r2
 80159d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	2200      	movs	r2, #0
 80159d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80159d8:	68f8      	ldr	r0, [r7, #12]
 80159da:	f7ff ff58 	bl	801588e <get_ldnumber>
 80159de:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80159e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	da01      	bge.n	80159ea <find_volume+0x26>
 80159e6:	230b      	movs	r3, #11
 80159e8:	e231      	b.n	8015e4e <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80159ea:	4aa8      	ldr	r2, [pc, #672]	; (8015c8c <find_volume+0x2c8>)
 80159ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80159f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d101      	bne.n	80159fe <find_volume+0x3a>
 80159fa:	230c      	movs	r3, #12
 80159fc:	e227      	b.n	8015e4e <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80159fe:	68bb      	ldr	r3, [r7, #8]
 8015a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a02:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015a04:	79fb      	ldrb	r3, [r7, #7]
 8015a06:	f023 0301 	bic.w	r3, r3, #1
 8015a0a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a0e:	781b      	ldrb	r3, [r3, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d01a      	beq.n	8015a4a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8015a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a16:	785b      	ldrb	r3, [r3, #1]
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7fd fea7 	bl	801376c <disk_status>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015a24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a28:	f003 0301 	and.w	r3, r3, #1
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d10c      	bne.n	8015a4a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015a30:	79fb      	ldrb	r3, [r7, #7]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d007      	beq.n	8015a46 <find_volume+0x82>
 8015a36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a3a:	f003 0304 	and.w	r3, r3, #4
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d001      	beq.n	8015a46 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8015a42:	230a      	movs	r3, #10
 8015a44:	e203      	b.n	8015e4e <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8015a46:	2300      	movs	r3, #0
 8015a48:	e201      	b.n	8015e4e <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a52:	b2da      	uxtb	r2, r3
 8015a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a56:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a5a:	785b      	ldrb	r3, [r3, #1]
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7fd fe9f 	bl	80137a0 <disk_initialize>
 8015a62:	4603      	mov	r3, r0
 8015a64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015a68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a6c:	f003 0301 	and.w	r3, r3, #1
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d001      	beq.n	8015a78 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015a74:	2303      	movs	r3, #3
 8015a76:	e1ea      	b.n	8015e4e <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8015a78:	79fb      	ldrb	r3, [r7, #7]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d007      	beq.n	8015a8e <find_volume+0xca>
 8015a7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a82:	f003 0304 	and.w	r3, r3, #4
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d001      	beq.n	8015a8e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8015a8a:	230a      	movs	r3, #10
 8015a8c:	e1df      	b.n	8015e4e <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8015a92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015a94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015a96:	f7ff ff3f 	bl	8015918 <check_fs>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8015aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015aa4:	2b02      	cmp	r3, #2
 8015aa6:	d14b      	bne.n	8015b40 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8015aac:	e01f      	b.n	8015aee <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8015aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ab0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ab6:	011b      	lsls	r3, r3, #4
 8015ab8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015abc:	4413      	add	r3, r2
 8015abe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ac2:	3304      	adds	r3, #4
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d006      	beq.n	8015ad8 <find_volume+0x114>
 8015aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015acc:	3308      	adds	r3, #8
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7fd ff0a 	bl	80138e8 <ld_dword>
 8015ad4:	4602      	mov	r2, r0
 8015ad6:	e000      	b.n	8015ada <find_volume+0x116>
 8015ad8:	2200      	movs	r2, #0
 8015ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8015ae2:	440b      	add	r3, r1
 8015ae4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015aea:	3301      	adds	r3, #1
 8015aec:	643b      	str	r3, [r7, #64]	; 0x40
 8015aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015af0:	2b03      	cmp	r3, #3
 8015af2:	d9dc      	bls.n	8015aae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015af4:	2300      	movs	r3, #0
 8015af6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8015af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d002      	beq.n	8015b04 <find_volume+0x140>
 8015afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b00:	3b01      	subs	r3, #1
 8015b02:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b06:	009b      	lsls	r3, r3, #2
 8015b08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015b0c:	4413      	add	r3, r2
 8015b0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015b12:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d005      	beq.n	8015b26 <find_volume+0x162>
 8015b1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015b1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015b1e:	f7ff fefb 	bl	8015918 <check_fs>
 8015b22:	4603      	mov	r3, r0
 8015b24:	e000      	b.n	8015b28 <find_volume+0x164>
 8015b26:	2303      	movs	r3, #3
 8015b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015b30:	2b01      	cmp	r3, #1
 8015b32:	d905      	bls.n	8015b40 <find_volume+0x17c>
 8015b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b36:	3301      	adds	r3, #1
 8015b38:	643b      	str	r3, [r7, #64]	; 0x40
 8015b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b3c:	2b03      	cmp	r3, #3
 8015b3e:	d9e1      	bls.n	8015b04 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015b40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015b44:	2b04      	cmp	r3, #4
 8015b46:	d101      	bne.n	8015b4c <find_volume+0x188>
 8015b48:	2301      	movs	r3, #1
 8015b4a:	e180      	b.n	8015e4e <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015b4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015b50:	2b01      	cmp	r3, #1
 8015b52:	d901      	bls.n	8015b58 <find_volume+0x194>
 8015b54:	230d      	movs	r3, #13
 8015b56:	e17a      	b.n	8015e4e <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b5a:	3334      	adds	r3, #52	; 0x34
 8015b5c:	330b      	adds	r3, #11
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7fd feaa 	bl	80138b8 <ld_word>
 8015b64:	4603      	mov	r3, r0
 8015b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b6a:	d001      	beq.n	8015b70 <find_volume+0x1ac>
 8015b6c:	230d      	movs	r3, #13
 8015b6e:	e16e      	b.n	8015e4e <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b72:	3334      	adds	r3, #52	; 0x34
 8015b74:	3316      	adds	r3, #22
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7fd fe9e 	bl	80138b8 <ld_word>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d106      	bne.n	8015b94 <find_volume+0x1d0>
 8015b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b88:	3334      	adds	r3, #52	; 0x34
 8015b8a:	3324      	adds	r3, #36	; 0x24
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7fd feab 	bl	80138e8 <ld_dword>
 8015b92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8015b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b98:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8015b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b9c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8015ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ba2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ba6:	789b      	ldrb	r3, [r3, #2]
 8015ba8:	2b01      	cmp	r3, #1
 8015baa:	d005      	beq.n	8015bb8 <find_volume+0x1f4>
 8015bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bae:	789b      	ldrb	r3, [r3, #2]
 8015bb0:	2b02      	cmp	r3, #2
 8015bb2:	d001      	beq.n	8015bb8 <find_volume+0x1f4>
 8015bb4:	230d      	movs	r3, #13
 8015bb6:	e14a      	b.n	8015e4e <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bba:	789b      	ldrb	r3, [r3, #2]
 8015bbc:	461a      	mov	r2, r3
 8015bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bc0:	fb02 f303 	mul.w	r3, r2, r3
 8015bc4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015bcc:	b29a      	uxth	r2, r3
 8015bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bd0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bd4:	895b      	ldrh	r3, [r3, #10]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d008      	beq.n	8015bec <find_volume+0x228>
 8015bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bdc:	895b      	ldrh	r3, [r3, #10]
 8015bde:	461a      	mov	r2, r3
 8015be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015be2:	895b      	ldrh	r3, [r3, #10]
 8015be4:	3b01      	subs	r3, #1
 8015be6:	4013      	ands	r3, r2
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d001      	beq.n	8015bf0 <find_volume+0x22c>
 8015bec:	230d      	movs	r3, #13
 8015bee:	e12e      	b.n	8015e4e <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bf2:	3334      	adds	r3, #52	; 0x34
 8015bf4:	3311      	adds	r3, #17
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f7fd fe5e 	bl	80138b8 <ld_word>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	461a      	mov	r2, r3
 8015c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c06:	891b      	ldrh	r3, [r3, #8]
 8015c08:	f003 030f 	and.w	r3, r3, #15
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d001      	beq.n	8015c16 <find_volume+0x252>
 8015c12:	230d      	movs	r3, #13
 8015c14:	e11b      	b.n	8015e4e <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c18:	3334      	adds	r3, #52	; 0x34
 8015c1a:	3313      	adds	r3, #19
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7fd fe4b 	bl	80138b8 <ld_word>
 8015c22:	4603      	mov	r3, r0
 8015c24:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d106      	bne.n	8015c3a <find_volume+0x276>
 8015c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c2e:	3334      	adds	r3, #52	; 0x34
 8015c30:	3320      	adds	r3, #32
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7fd fe58 	bl	80138e8 <ld_dword>
 8015c38:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c3c:	3334      	adds	r3, #52	; 0x34
 8015c3e:	330e      	adds	r3, #14
 8015c40:	4618      	mov	r0, r3
 8015c42:	f7fd fe39 	bl	80138b8 <ld_word>
 8015c46:	4603      	mov	r3, r0
 8015c48:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015c4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d101      	bne.n	8015c54 <find_volume+0x290>
 8015c50:	230d      	movs	r3, #13
 8015c52:	e0fc      	b.n	8015e4e <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015c54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c58:	4413      	add	r3, r2
 8015c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c5c:	8912      	ldrh	r2, [r2, #8]
 8015c5e:	0912      	lsrs	r2, r2, #4
 8015c60:	b292      	uxth	r2, r2
 8015c62:	4413      	add	r3, r2
 8015c64:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8015c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d201      	bcs.n	8015c72 <find_volume+0x2ae>
 8015c6e:	230d      	movs	r3, #13
 8015c70:	e0ed      	b.n	8015e4e <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c76:	1ad3      	subs	r3, r2, r3
 8015c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c7a:	8952      	ldrh	r2, [r2, #10]
 8015c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015c80:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d103      	bne.n	8015c90 <find_volume+0x2cc>
 8015c88:	230d      	movs	r3, #13
 8015c8a:	e0e0      	b.n	8015e4e <find_volume+0x48a>
 8015c8c:	20000990 	.word	0x20000990
		fmt = FS_FAT32;
 8015c90:	2303      	movs	r3, #3
 8015c92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015c9c:	4293      	cmp	r3, r2
 8015c9e:	d802      	bhi.n	8015ca6 <find_volume+0x2e2>
 8015ca0:	2302      	movs	r3, #2
 8015ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015cac:	4293      	cmp	r3, r2
 8015cae:	d802      	bhi.n	8015cb6 <find_volume+0x2f2>
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb8:	1c9a      	adds	r2, r3, #2
 8015cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cbc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8015cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015cc2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015cc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cc8:	441a      	add	r2, r3
 8015cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ccc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8015cce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd2:	441a      	add	r2, r3
 8015cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cd6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8015cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015cdc:	2b03      	cmp	r3, #3
 8015cde:	d11e      	bne.n	8015d1e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ce2:	3334      	adds	r3, #52	; 0x34
 8015ce4:	332a      	adds	r3, #42	; 0x2a
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7fd fde6 	bl	80138b8 <ld_word>
 8015cec:	4603      	mov	r3, r0
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d001      	beq.n	8015cf6 <find_volume+0x332>
 8015cf2:	230d      	movs	r3, #13
 8015cf4:	e0ab      	b.n	8015e4e <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cf8:	891b      	ldrh	r3, [r3, #8]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d001      	beq.n	8015d02 <find_volume+0x33e>
 8015cfe:	230d      	movs	r3, #13
 8015d00:	e0a5      	b.n	8015e4e <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d04:	3334      	adds	r3, #52	; 0x34
 8015d06:	332c      	adds	r3, #44	; 0x2c
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7fd fded 	bl	80138e8 <ld_dword>
 8015d0e:	4602      	mov	r2, r0
 8015d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d12:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d16:	699b      	ldr	r3, [r3, #24]
 8015d18:	009b      	lsls	r3, r3, #2
 8015d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8015d1c:	e01f      	b.n	8015d5e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d20:	891b      	ldrh	r3, [r3, #8]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d101      	bne.n	8015d2a <find_volume+0x366>
 8015d26:	230d      	movs	r3, #13
 8015d28:	e091      	b.n	8015e4e <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d30:	441a      	add	r2, r3
 8015d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d34:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015d36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d3a:	2b02      	cmp	r3, #2
 8015d3c:	d103      	bne.n	8015d46 <find_volume+0x382>
 8015d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d40:	699b      	ldr	r3, [r3, #24]
 8015d42:	005b      	lsls	r3, r3, #1
 8015d44:	e00a      	b.n	8015d5c <find_volume+0x398>
 8015d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d48:	699a      	ldr	r2, [r3, #24]
 8015d4a:	4613      	mov	r3, r2
 8015d4c:	005b      	lsls	r3, r3, #1
 8015d4e:	4413      	add	r3, r2
 8015d50:	085a      	lsrs	r2, r3, #1
 8015d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d54:	699b      	ldr	r3, [r3, #24]
 8015d56:	f003 0301 	and.w	r3, r3, #1
 8015d5a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015d5c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d60:	69da      	ldr	r2, [r3, #28]
 8015d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d64:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8015d68:	0a5b      	lsrs	r3, r3, #9
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d201      	bcs.n	8015d72 <find_volume+0x3ae>
 8015d6e:	230d      	movs	r3, #13
 8015d70:	e06d      	b.n	8015e4e <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d74:	f04f 32ff 	mov.w	r2, #4294967295
 8015d78:	615a      	str	r2, [r3, #20]
 8015d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d7c:	695a      	ldr	r2, [r3, #20]
 8015d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d80:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8015d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d84:	2280      	movs	r2, #128	; 0x80
 8015d86:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8015d88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d8c:	2b03      	cmp	r3, #3
 8015d8e:	d149      	bne.n	8015e24 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d92:	3334      	adds	r3, #52	; 0x34
 8015d94:	3330      	adds	r3, #48	; 0x30
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7fd fd8e 	bl	80138b8 <ld_word>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d140      	bne.n	8015e24 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015da4:	3301      	adds	r3, #1
 8015da6:	4619      	mov	r1, r3
 8015da8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015daa:	f7fe f835 	bl	8013e18 <move_window>
 8015dae:	4603      	mov	r3, r0
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d137      	bne.n	8015e24 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8015db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015db6:	2200      	movs	r2, #0
 8015db8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dbc:	3334      	adds	r3, #52	; 0x34
 8015dbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7fd fd78 	bl	80138b8 <ld_word>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	461a      	mov	r2, r3
 8015dcc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d127      	bne.n	8015e24 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dd6:	3334      	adds	r3, #52	; 0x34
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f7fd fd85 	bl	80138e8 <ld_dword>
 8015dde:	4603      	mov	r3, r0
 8015de0:	4a1d      	ldr	r2, [pc, #116]	; (8015e58 <find_volume+0x494>)
 8015de2:	4293      	cmp	r3, r2
 8015de4:	d11e      	bne.n	8015e24 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015de8:	3334      	adds	r3, #52	; 0x34
 8015dea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7fd fd7a 	bl	80138e8 <ld_dword>
 8015df4:	4603      	mov	r3, r0
 8015df6:	4a19      	ldr	r2, [pc, #100]	; (8015e5c <find_volume+0x498>)
 8015df8:	4293      	cmp	r3, r2
 8015dfa:	d113      	bne.n	8015e24 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8015dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dfe:	3334      	adds	r3, #52	; 0x34
 8015e00:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7fd fd6f 	bl	80138e8 <ld_dword>
 8015e0a:	4602      	mov	r2, r0
 8015e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e0e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e12:	3334      	adds	r3, #52	; 0x34
 8015e14:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7fd fd65 	bl	80138e8 <ld_dword>
 8015e1e:	4602      	mov	r2, r0
 8015e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e22:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e26:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8015e2a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015e2c:	4b0c      	ldr	r3, [pc, #48]	; (8015e60 <find_volume+0x49c>)
 8015e2e:	881b      	ldrh	r3, [r3, #0]
 8015e30:	3301      	adds	r3, #1
 8015e32:	b29a      	uxth	r2, r3
 8015e34:	4b0a      	ldr	r3, [pc, #40]	; (8015e60 <find_volume+0x49c>)
 8015e36:	801a      	strh	r2, [r3, #0]
 8015e38:	4b09      	ldr	r3, [pc, #36]	; (8015e60 <find_volume+0x49c>)
 8015e3a:	881a      	ldrh	r2, [r3, #0]
 8015e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e3e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8015e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e42:	4a08      	ldr	r2, [pc, #32]	; (8015e64 <find_volume+0x4a0>)
 8015e44:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8015e46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015e48:	f7fd ff7e 	bl	8013d48 <clear_lock>
#endif
	return FR_OK;
 8015e4c:	2300      	movs	r3, #0
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	3758      	adds	r7, #88	; 0x58
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}
 8015e56:	bf00      	nop
 8015e58:	41615252 	.word	0x41615252
 8015e5c:	61417272 	.word	0x61417272
 8015e60:	20000994 	.word	0x20000994
 8015e64:	20000ad8 	.word	0x20000ad8

08015e68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b084      	sub	sp, #16
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015e72:	2309      	movs	r3, #9
 8015e74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d01c      	beq.n	8015eb6 <validate+0x4e>
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d018      	beq.n	8015eb6 <validate+0x4e>
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d013      	beq.n	8015eb6 <validate+0x4e>
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	889a      	ldrh	r2, [r3, #4]
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	88db      	ldrh	r3, [r3, #6]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d10c      	bne.n	8015eb6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	785b      	ldrb	r3, [r3, #1]
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	f7fd fc62 	bl	801376c <disk_status>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	f003 0301 	and.w	r3, r3, #1
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d101      	bne.n	8015eb6 <validate+0x4e>
			res = FR_OK;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015eb6:	7bfb      	ldrb	r3, [r7, #15]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d102      	bne.n	8015ec2 <validate+0x5a>
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	e000      	b.n	8015ec4 <validate+0x5c>
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	683a      	ldr	r2, [r7, #0]
 8015ec6:	6013      	str	r3, [r2, #0]
	return res;
 8015ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eca:	4618      	mov	r0, r3
 8015ecc:	3710      	adds	r7, #16
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}
	...

08015ed4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b088      	sub	sp, #32
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	60f8      	str	r0, [r7, #12]
 8015edc:	60b9      	str	r1, [r7, #8]
 8015ede:	4613      	mov	r3, r2
 8015ee0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015ee6:	f107 0310 	add.w	r3, r7, #16
 8015eea:	4618      	mov	r0, r3
 8015eec:	f7ff fccf 	bl	801588e <get_ldnumber>
 8015ef0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8015ef2:	69fb      	ldr	r3, [r7, #28]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	da01      	bge.n	8015efc <f_mount+0x28>
 8015ef8:	230b      	movs	r3, #11
 8015efa:	e02b      	b.n	8015f54 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015efc:	4a17      	ldr	r2, [pc, #92]	; (8015f5c <f_mount+0x88>)
 8015efe:	69fb      	ldr	r3, [r7, #28]
 8015f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8015f06:	69bb      	ldr	r3, [r7, #24]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d005      	beq.n	8015f18 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8015f0c:	69b8      	ldr	r0, [r7, #24]
 8015f0e:	f7fd ff1b 	bl	8013d48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015f12:	69bb      	ldr	r3, [r7, #24]
 8015f14:	2200      	movs	r2, #0
 8015f16:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d002      	beq.n	8015f24 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	2200      	movs	r2, #0
 8015f22:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8015f24:	68fa      	ldr	r2, [r7, #12]
 8015f26:	490d      	ldr	r1, [pc, #52]	; (8015f5c <f_mount+0x88>)
 8015f28:	69fb      	ldr	r3, [r7, #28]
 8015f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d002      	beq.n	8015f3a <f_mount+0x66>
 8015f34:	79fb      	ldrb	r3, [r7, #7]
 8015f36:	2b01      	cmp	r3, #1
 8015f38:	d001      	beq.n	8015f3e <f_mount+0x6a>
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	e00a      	b.n	8015f54 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015f3e:	f107 010c 	add.w	r1, r7, #12
 8015f42:	f107 0308 	add.w	r3, r7, #8
 8015f46:	2200      	movs	r2, #0
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f7ff fd3b 	bl	80159c4 <find_volume>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	3720      	adds	r7, #32
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}
 8015f5c:	20000990 	.word	0x20000990

08015f60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b09a      	sub	sp, #104	; 0x68
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	60f8      	str	r0, [r7, #12]
 8015f68:	60b9      	str	r1, [r7, #8]
 8015f6a:	4613      	mov	r3, r2
 8015f6c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d101      	bne.n	8015f78 <f_open+0x18>
 8015f74:	2309      	movs	r3, #9
 8015f76:	e1ad      	b.n	80162d4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015f78:	79fb      	ldrb	r3, [r7, #7]
 8015f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015f7e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015f80:	79fa      	ldrb	r2, [r7, #7]
 8015f82:	f107 0110 	add.w	r1, r7, #16
 8015f86:	f107 0308 	add.w	r3, r7, #8
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7ff fd1a 	bl	80159c4 <find_volume>
 8015f90:	4603      	mov	r3, r0
 8015f92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8015f96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	f040 8191 	bne.w	80162c2 <f_open+0x362>
		dj.obj.fs = fs;
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015fa4:	68ba      	ldr	r2, [r7, #8]
 8015fa6:	f107 0314 	add.w	r3, r7, #20
 8015faa:	4611      	mov	r1, r2
 8015fac:	4618      	mov	r0, r3
 8015fae:	f7ff fbfd 	bl	80157ac <follow_path>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015fb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d11a      	bne.n	8015ff6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015fc0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015fc4:	b25b      	sxtb	r3, r3
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	da03      	bge.n	8015fd2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8015fca:	2306      	movs	r3, #6
 8015fcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8015fd0:	e011      	b.n	8015ff6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015fd2:	79fb      	ldrb	r3, [r7, #7]
 8015fd4:	f023 0301 	bic.w	r3, r3, #1
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	bf14      	ite	ne
 8015fdc:	2301      	movne	r3, #1
 8015fde:	2300      	moveq	r3, #0
 8015fe0:	b2db      	uxtb	r3, r3
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	f107 0314 	add.w	r3, r7, #20
 8015fe8:	4611      	mov	r1, r2
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7fd fd64 	bl	8013ab8 <chk_lock>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015ff6:	79fb      	ldrb	r3, [r7, #7]
 8015ff8:	f003 031c 	and.w	r3, r3, #28
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d07f      	beq.n	8016100 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016000:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016004:	2b00      	cmp	r3, #0
 8016006:	d017      	beq.n	8016038 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016008:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801600c:	2b04      	cmp	r3, #4
 801600e:	d10e      	bne.n	801602e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016010:	f7fd fdae 	bl	8013b70 <enq_lock>
 8016014:	4603      	mov	r3, r0
 8016016:	2b00      	cmp	r3, #0
 8016018:	d006      	beq.n	8016028 <f_open+0xc8>
 801601a:	f107 0314 	add.w	r3, r7, #20
 801601e:	4618      	mov	r0, r3
 8016020:	f7fe ff94 	bl	8014f4c <dir_register>
 8016024:	4603      	mov	r3, r0
 8016026:	e000      	b.n	801602a <f_open+0xca>
 8016028:	2312      	movs	r3, #18
 801602a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801602e:	79fb      	ldrb	r3, [r7, #7]
 8016030:	f043 0308 	orr.w	r3, r3, #8
 8016034:	71fb      	strb	r3, [r7, #7]
 8016036:	e010      	b.n	801605a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016038:	7ebb      	ldrb	r3, [r7, #26]
 801603a:	f003 0311 	and.w	r3, r3, #17
 801603e:	2b00      	cmp	r3, #0
 8016040:	d003      	beq.n	801604a <f_open+0xea>
					res = FR_DENIED;
 8016042:	2307      	movs	r3, #7
 8016044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016048:	e007      	b.n	801605a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801604a:	79fb      	ldrb	r3, [r7, #7]
 801604c:	f003 0304 	and.w	r3, r3, #4
 8016050:	2b00      	cmp	r3, #0
 8016052:	d002      	beq.n	801605a <f_open+0xfa>
 8016054:	2308      	movs	r3, #8
 8016056:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801605a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801605e:	2b00      	cmp	r3, #0
 8016060:	d168      	bne.n	8016134 <f_open+0x1d4>
 8016062:	79fb      	ldrb	r3, [r7, #7]
 8016064:	f003 0308 	and.w	r3, r3, #8
 8016068:	2b00      	cmp	r3, #0
 801606a:	d063      	beq.n	8016134 <f_open+0x1d4>
				dw = GET_FATTIME();
 801606c:	f7fd fc1c 	bl	80138a8 <get_fattime>
 8016070:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016074:	330e      	adds	r3, #14
 8016076:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016078:	4618      	mov	r0, r3
 801607a:	f7fd fc73 	bl	8013964 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016080:	3316      	adds	r3, #22
 8016082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016084:	4618      	mov	r0, r3
 8016086:	f7fd fc6d 	bl	8013964 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801608c:	330b      	adds	r3, #11
 801608e:	2220      	movs	r2, #32
 8016090:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016096:	4611      	mov	r1, r2
 8016098:	4618      	mov	r0, r3
 801609a:	f7fe fbc4 	bl	8014826 <ld_clust>
 801609e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80160a4:	2200      	movs	r2, #0
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7fe fbdc 	bl	8014864 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80160ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ae:	331c      	adds	r3, #28
 80160b0:	2100      	movs	r1, #0
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7fd fc56 	bl	8013964 <st_dword>
					fs->wflag = 1;
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	2201      	movs	r2, #1
 80160bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80160be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d037      	beq.n	8016134 <f_open+0x1d4>
						dw = fs->winsect;
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80160ca:	f107 0314 	add.w	r3, r7, #20
 80160ce:	2200      	movs	r2, #0
 80160d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7fe f8ef 	bl	80142b6 <remove_chain>
 80160d8:	4603      	mov	r3, r0
 80160da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80160de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d126      	bne.n	8016134 <f_open+0x1d4>
							res = move_window(fs, dw);
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7fd fe94 	bl	8013e18 <move_window>
 80160f0:	4603      	mov	r3, r0
 80160f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80160f6:	693b      	ldr	r3, [r7, #16]
 80160f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80160fa:	3a01      	subs	r2, #1
 80160fc:	611a      	str	r2, [r3, #16]
 80160fe:	e019      	b.n	8016134 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016100:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016104:	2b00      	cmp	r3, #0
 8016106:	d115      	bne.n	8016134 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016108:	7ebb      	ldrb	r3, [r7, #26]
 801610a:	f003 0310 	and.w	r3, r3, #16
 801610e:	2b00      	cmp	r3, #0
 8016110:	d003      	beq.n	801611a <f_open+0x1ba>
					res = FR_NO_FILE;
 8016112:	2304      	movs	r3, #4
 8016114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016118:	e00c      	b.n	8016134 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801611a:	79fb      	ldrb	r3, [r7, #7]
 801611c:	f003 0302 	and.w	r3, r3, #2
 8016120:	2b00      	cmp	r3, #0
 8016122:	d007      	beq.n	8016134 <f_open+0x1d4>
 8016124:	7ebb      	ldrb	r3, [r7, #26]
 8016126:	f003 0301 	and.w	r3, r3, #1
 801612a:	2b00      	cmp	r3, #0
 801612c:	d002      	beq.n	8016134 <f_open+0x1d4>
						res = FR_DENIED;
 801612e:	2307      	movs	r3, #7
 8016130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8016134:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016138:	2b00      	cmp	r3, #0
 801613a:	d128      	bne.n	801618e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801613c:	79fb      	ldrb	r3, [r7, #7]
 801613e:	f003 0308 	and.w	r3, r3, #8
 8016142:	2b00      	cmp	r3, #0
 8016144:	d003      	beq.n	801614e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8016146:	79fb      	ldrb	r3, [r7, #7]
 8016148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801614c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801614e:	693b      	ldr	r3, [r7, #16]
 8016150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801615c:	79fb      	ldrb	r3, [r7, #7]
 801615e:	f023 0301 	bic.w	r3, r3, #1
 8016162:	2b00      	cmp	r3, #0
 8016164:	bf14      	ite	ne
 8016166:	2301      	movne	r3, #1
 8016168:	2300      	moveq	r3, #0
 801616a:	b2db      	uxtb	r3, r3
 801616c:	461a      	mov	r2, r3
 801616e:	f107 0314 	add.w	r3, r7, #20
 8016172:	4611      	mov	r1, r2
 8016174:	4618      	mov	r0, r3
 8016176:	f7fd fd1d 	bl	8013bb4 <inc_lock>
 801617a:	4602      	mov	r2, r0
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	691b      	ldr	r3, [r3, #16]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d102      	bne.n	801618e <f_open+0x22e>
 8016188:	2302      	movs	r3, #2
 801618a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801618e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016192:	2b00      	cmp	r3, #0
 8016194:	f040 8095 	bne.w	80162c2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801619c:	4611      	mov	r1, r2
 801619e:	4618      	mov	r0, r3
 80161a0:	f7fe fb41 	bl	8014826 <ld_clust>
 80161a4:	4602      	mov	r2, r0
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80161aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ac:	331c      	adds	r3, #28
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7fd fb9a 	bl	80138e8 <ld_dword>
 80161b4:	4602      	mov	r2, r0
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	2200      	movs	r2, #0
 80161be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80161c0:	693a      	ldr	r2, [r7, #16]
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80161c6:	693b      	ldr	r3, [r7, #16]
 80161c8:	88da      	ldrh	r2, [r3, #6]
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	79fa      	ldrb	r2, [r7, #7]
 80161d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	2200      	movs	r2, #0
 80161d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	2200      	movs	r2, #0
 80161de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	2200      	movs	r2, #0
 80161e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	3330      	adds	r3, #48	; 0x30
 80161ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80161ee:	2100      	movs	r1, #0
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7fd fc04 	bl	80139fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80161f6:	79fb      	ldrb	r3, [r7, #7]
 80161f8:	f003 0320 	and.w	r3, r3, #32
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d060      	beq.n	80162c2 <f_open+0x362>
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	68db      	ldr	r3, [r3, #12]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d05c      	beq.n	80162c2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	68da      	ldr	r2, [r3, #12]
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016210:	693b      	ldr	r3, [r7, #16]
 8016212:	895b      	ldrh	r3, [r3, #10]
 8016214:	025b      	lsls	r3, r3, #9
 8016216:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	689b      	ldr	r3, [r3, #8]
 801621c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	68db      	ldr	r3, [r3, #12]
 8016222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016224:	e016      	b.n	8016254 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801622a:	4618      	mov	r0, r3
 801622c:	f7fd feaf 	bl	8013f8e <get_fat>
 8016230:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8016232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016234:	2b01      	cmp	r3, #1
 8016236:	d802      	bhi.n	801623e <f_open+0x2de>
 8016238:	2302      	movs	r3, #2
 801623a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801623e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016244:	d102      	bne.n	801624c <f_open+0x2ec>
 8016246:	2301      	movs	r3, #1
 8016248:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801624c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801624e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016250:	1ad3      	subs	r3, r2, r3
 8016252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016254:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016258:	2b00      	cmp	r3, #0
 801625a:	d103      	bne.n	8016264 <f_open+0x304>
 801625c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801625e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016260:	429a      	cmp	r2, r3
 8016262:	d8e0      	bhi.n	8016226 <f_open+0x2c6>
				}
				fp->clust = clst;
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016268:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801626a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801626e:	2b00      	cmp	r3, #0
 8016270:	d127      	bne.n	80162c2 <f_open+0x362>
 8016272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016278:	2b00      	cmp	r3, #0
 801627a:	d022      	beq.n	80162c2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801627c:	693b      	ldr	r3, [r7, #16]
 801627e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016280:	4618      	mov	r0, r3
 8016282:	f7fd fe65 	bl	8013f50 <clust2sect>
 8016286:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801628a:	2b00      	cmp	r3, #0
 801628c:	d103      	bne.n	8016296 <f_open+0x336>
						res = FR_INT_ERR;
 801628e:	2302      	movs	r3, #2
 8016290:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016294:	e015      	b.n	80162c2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016298:	0a5a      	lsrs	r2, r3, #9
 801629a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801629c:	441a      	add	r2, r3
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	7858      	ldrb	r0, [r3, #1]
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	6a1a      	ldr	r2, [r3, #32]
 80162b0:	2301      	movs	r3, #1
 80162b2:	f7fd fa9b 	bl	80137ec <disk_read>
 80162b6:	4603      	mov	r3, r0
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d002      	beq.n	80162c2 <f_open+0x362>
 80162bc:	2301      	movs	r3, #1
 80162be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80162c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d002      	beq.n	80162d0 <f_open+0x370>
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	2200      	movs	r2, #0
 80162ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80162d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80162d4:	4618      	mov	r0, r3
 80162d6:	3768      	adds	r7, #104	; 0x68
 80162d8:	46bd      	mov	sp, r7
 80162da:	bd80      	pop	{r7, pc}

080162dc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b08e      	sub	sp, #56	; 0x38
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	60f8      	str	r0, [r7, #12]
 80162e4:	60b9      	str	r1, [r7, #8]
 80162e6:	607a      	str	r2, [r7, #4]
 80162e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80162ea:	68bb      	ldr	r3, [r7, #8]
 80162ec:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	2200      	movs	r2, #0
 80162f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	f107 0214 	add.w	r2, r7, #20
 80162fa:	4611      	mov	r1, r2
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7ff fdb3 	bl	8015e68 <validate>
 8016302:	4603      	mov	r3, r0
 8016304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801630c:	2b00      	cmp	r3, #0
 801630e:	d107      	bne.n	8016320 <f_read+0x44>
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	7d5b      	ldrb	r3, [r3, #21]
 8016314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801631c:	2b00      	cmp	r3, #0
 801631e:	d002      	beq.n	8016326 <f_read+0x4a>
 8016320:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016324:	e115      	b.n	8016552 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	7d1b      	ldrb	r3, [r3, #20]
 801632a:	f003 0301 	and.w	r3, r3, #1
 801632e:	2b00      	cmp	r3, #0
 8016330:	d101      	bne.n	8016336 <f_read+0x5a>
 8016332:	2307      	movs	r3, #7
 8016334:	e10d      	b.n	8016552 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	68da      	ldr	r2, [r3, #12]
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	699b      	ldr	r3, [r3, #24]
 801633e:	1ad3      	subs	r3, r2, r3
 8016340:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8016342:	687a      	ldr	r2, [r7, #4]
 8016344:	6a3b      	ldr	r3, [r7, #32]
 8016346:	429a      	cmp	r2, r3
 8016348:	f240 80fe 	bls.w	8016548 <f_read+0x26c>
 801634c:	6a3b      	ldr	r3, [r7, #32]
 801634e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8016350:	e0fa      	b.n	8016548 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	699b      	ldr	r3, [r3, #24]
 8016356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801635a:	2b00      	cmp	r3, #0
 801635c:	f040 80c6 	bne.w	80164ec <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	699b      	ldr	r3, [r3, #24]
 8016364:	0a5b      	lsrs	r3, r3, #9
 8016366:	697a      	ldr	r2, [r7, #20]
 8016368:	8952      	ldrh	r2, [r2, #10]
 801636a:	3a01      	subs	r2, #1
 801636c:	4013      	ands	r3, r2
 801636e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8016370:	69fb      	ldr	r3, [r7, #28]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d12f      	bne.n	80163d6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	699b      	ldr	r3, [r3, #24]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d103      	bne.n	8016386 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	689b      	ldr	r3, [r3, #8]
 8016382:	633b      	str	r3, [r7, #48]	; 0x30
 8016384:	e013      	b.n	80163ae <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801638a:	2b00      	cmp	r3, #0
 801638c:	d007      	beq.n	801639e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	699b      	ldr	r3, [r3, #24]
 8016392:	4619      	mov	r1, r3
 8016394:	68f8      	ldr	r0, [r7, #12]
 8016396:	f7fe f88b 	bl	80144b0 <clmt_clust>
 801639a:	6338      	str	r0, [r7, #48]	; 0x30
 801639c:	e007      	b.n	80163ae <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801639e:	68fa      	ldr	r2, [r7, #12]
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	69db      	ldr	r3, [r3, #28]
 80163a4:	4619      	mov	r1, r3
 80163a6:	4610      	mov	r0, r2
 80163a8:	f7fd fdf1 	bl	8013f8e <get_fat>
 80163ac:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80163ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b0:	2b01      	cmp	r3, #1
 80163b2:	d804      	bhi.n	80163be <f_read+0xe2>
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	2202      	movs	r2, #2
 80163b8:	755a      	strb	r2, [r3, #21]
 80163ba:	2302      	movs	r3, #2
 80163bc:	e0c9      	b.n	8016552 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80163be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163c4:	d104      	bne.n	80163d0 <f_read+0xf4>
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	2201      	movs	r2, #1
 80163ca:	755a      	strb	r2, [r3, #21]
 80163cc:	2301      	movs	r3, #1
 80163ce:	e0c0      	b.n	8016552 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163d4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80163d6:	697a      	ldr	r2, [r7, #20]
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	69db      	ldr	r3, [r3, #28]
 80163dc:	4619      	mov	r1, r3
 80163de:	4610      	mov	r0, r2
 80163e0:	f7fd fdb6 	bl	8013f50 <clust2sect>
 80163e4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80163e6:	69bb      	ldr	r3, [r7, #24]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d104      	bne.n	80163f6 <f_read+0x11a>
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	2202      	movs	r2, #2
 80163f0:	755a      	strb	r2, [r3, #21]
 80163f2:	2302      	movs	r3, #2
 80163f4:	e0ad      	b.n	8016552 <f_read+0x276>
			sect += csect;
 80163f6:	69ba      	ldr	r2, [r7, #24]
 80163f8:	69fb      	ldr	r3, [r7, #28]
 80163fa:	4413      	add	r3, r2
 80163fc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	0a5b      	lsrs	r3, r3, #9
 8016402:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8016404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016406:	2b00      	cmp	r3, #0
 8016408:	d039      	beq.n	801647e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801640a:	69fa      	ldr	r2, [r7, #28]
 801640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801640e:	4413      	add	r3, r2
 8016410:	697a      	ldr	r2, [r7, #20]
 8016412:	8952      	ldrh	r2, [r2, #10]
 8016414:	4293      	cmp	r3, r2
 8016416:	d905      	bls.n	8016424 <f_read+0x148>
					cc = fs->csize - csect;
 8016418:	697b      	ldr	r3, [r7, #20]
 801641a:	895b      	ldrh	r3, [r3, #10]
 801641c:	461a      	mov	r2, r3
 801641e:	69fb      	ldr	r3, [r7, #28]
 8016420:	1ad3      	subs	r3, r2, r3
 8016422:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	7858      	ldrb	r0, [r3, #1]
 8016428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801642a:	69ba      	ldr	r2, [r7, #24]
 801642c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801642e:	f7fd f9dd 	bl	80137ec <disk_read>
 8016432:	4603      	mov	r3, r0
 8016434:	2b00      	cmp	r3, #0
 8016436:	d004      	beq.n	8016442 <f_read+0x166>
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	2201      	movs	r2, #1
 801643c:	755a      	strb	r2, [r3, #21]
 801643e:	2301      	movs	r3, #1
 8016440:	e087      	b.n	8016552 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	7d1b      	ldrb	r3, [r3, #20]
 8016446:	b25b      	sxtb	r3, r3
 8016448:	2b00      	cmp	r3, #0
 801644a:	da14      	bge.n	8016476 <f_read+0x19a>
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	6a1a      	ldr	r2, [r3, #32]
 8016450:	69bb      	ldr	r3, [r7, #24]
 8016452:	1ad3      	subs	r3, r2, r3
 8016454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016456:	429a      	cmp	r2, r3
 8016458:	d90d      	bls.n	8016476 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	6a1a      	ldr	r2, [r3, #32]
 801645e:	69bb      	ldr	r3, [r7, #24]
 8016460:	1ad3      	subs	r3, r2, r3
 8016462:	025b      	lsls	r3, r3, #9
 8016464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016466:	18d0      	adds	r0, r2, r3
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	3330      	adds	r3, #48	; 0x30
 801646c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016470:	4619      	mov	r1, r3
 8016472:	f7fd faa3 	bl	80139bc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8016476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016478:	025b      	lsls	r3, r3, #9
 801647a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801647c:	e050      	b.n	8016520 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	6a1b      	ldr	r3, [r3, #32]
 8016482:	69ba      	ldr	r2, [r7, #24]
 8016484:	429a      	cmp	r2, r3
 8016486:	d02e      	beq.n	80164e6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	7d1b      	ldrb	r3, [r3, #20]
 801648c:	b25b      	sxtb	r3, r3
 801648e:	2b00      	cmp	r3, #0
 8016490:	da18      	bge.n	80164c4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016492:	697b      	ldr	r3, [r7, #20]
 8016494:	7858      	ldrb	r0, [r3, #1]
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	6a1a      	ldr	r2, [r3, #32]
 80164a0:	2301      	movs	r3, #1
 80164a2:	f7fd f9c3 	bl	801382c <disk_write>
 80164a6:	4603      	mov	r3, r0
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d004      	beq.n	80164b6 <f_read+0x1da>
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	2201      	movs	r2, #1
 80164b0:	755a      	strb	r2, [r3, #21]
 80164b2:	2301      	movs	r3, #1
 80164b4:	e04d      	b.n	8016552 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	7d1b      	ldrb	r3, [r3, #20]
 80164ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80164be:	b2da      	uxtb	r2, r3
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80164c4:	697b      	ldr	r3, [r7, #20]
 80164c6:	7858      	ldrb	r0, [r3, #1]
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80164ce:	2301      	movs	r3, #1
 80164d0:	69ba      	ldr	r2, [r7, #24]
 80164d2:	f7fd f98b 	bl	80137ec <disk_read>
 80164d6:	4603      	mov	r3, r0
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d004      	beq.n	80164e6 <f_read+0x20a>
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	2201      	movs	r2, #1
 80164e0:	755a      	strb	r2, [r3, #21]
 80164e2:	2301      	movs	r3, #1
 80164e4:	e035      	b.n	8016552 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	69ba      	ldr	r2, [r7, #24]
 80164ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	699b      	ldr	r3, [r3, #24]
 80164f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80164f4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80164f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80164fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	429a      	cmp	r2, r3
 8016500:	d901      	bls.n	8016506 <f_read+0x22a>
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	699b      	ldr	r3, [r3, #24]
 8016510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016514:	4413      	add	r3, r2
 8016516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016518:	4619      	mov	r1, r3
 801651a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801651c:	f7fd fa4e 	bl	80139bc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8016520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016524:	4413      	add	r3, r2
 8016526:	627b      	str	r3, [r7, #36]	; 0x24
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	699a      	ldr	r2, [r3, #24]
 801652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801652e:	441a      	add	r2, r3
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	619a      	str	r2, [r3, #24]
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	681a      	ldr	r2, [r3, #0]
 8016538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801653a:	441a      	add	r2, r3
 801653c:	683b      	ldr	r3, [r7, #0]
 801653e:	601a      	str	r2, [r3, #0]
 8016540:	687a      	ldr	r2, [r7, #4]
 8016542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016544:	1ad3      	subs	r3, r2, r3
 8016546:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2b00      	cmp	r3, #0
 801654c:	f47f af01 	bne.w	8016352 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8016550:	2300      	movs	r3, #0
}
 8016552:	4618      	mov	r0, r3
 8016554:	3738      	adds	r7, #56	; 0x38
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}

0801655a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801655a:	b580      	push	{r7, lr}
 801655c:	b08c      	sub	sp, #48	; 0x30
 801655e:	af00      	add	r7, sp, #0
 8016560:	60f8      	str	r0, [r7, #12]
 8016562:	60b9      	str	r1, [r7, #8]
 8016564:	607a      	str	r2, [r7, #4]
 8016566:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	2200      	movs	r2, #0
 8016570:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	f107 0210 	add.w	r2, r7, #16
 8016578:	4611      	mov	r1, r2
 801657a:	4618      	mov	r0, r3
 801657c:	f7ff fc74 	bl	8015e68 <validate>
 8016580:	4603      	mov	r3, r0
 8016582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801658a:	2b00      	cmp	r3, #0
 801658c:	d107      	bne.n	801659e <f_write+0x44>
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	7d5b      	ldrb	r3, [r3, #21]
 8016592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801659a:	2b00      	cmp	r3, #0
 801659c:	d002      	beq.n	80165a4 <f_write+0x4a>
 801659e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80165a2:	e14b      	b.n	801683c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	7d1b      	ldrb	r3, [r3, #20]
 80165a8:	f003 0302 	and.w	r3, r3, #2
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d101      	bne.n	80165b4 <f_write+0x5a>
 80165b0:	2307      	movs	r3, #7
 80165b2:	e143      	b.n	801683c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	699a      	ldr	r2, [r3, #24]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	441a      	add	r2, r3
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	699b      	ldr	r3, [r3, #24]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	f080 812d 	bcs.w	8016820 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	699b      	ldr	r3, [r3, #24]
 80165ca:	43db      	mvns	r3, r3
 80165cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80165ce:	e127      	b.n	8016820 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	699b      	ldr	r3, [r3, #24]
 80165d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80165d8:	2b00      	cmp	r3, #0
 80165da:	f040 80e3 	bne.w	80167a4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	699b      	ldr	r3, [r3, #24]
 80165e2:	0a5b      	lsrs	r3, r3, #9
 80165e4:	693a      	ldr	r2, [r7, #16]
 80165e6:	8952      	ldrh	r2, [r2, #10]
 80165e8:	3a01      	subs	r2, #1
 80165ea:	4013      	ands	r3, r2
 80165ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80165ee:	69bb      	ldr	r3, [r7, #24]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d143      	bne.n	801667c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	699b      	ldr	r3, [r3, #24]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d10c      	bne.n	8016616 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	689b      	ldr	r3, [r3, #8]
 8016600:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016604:	2b00      	cmp	r3, #0
 8016606:	d11a      	bne.n	801663e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	2100      	movs	r1, #0
 801660c:	4618      	mov	r0, r3
 801660e:	f7fd feb7 	bl	8014380 <create_chain>
 8016612:	62b8      	str	r0, [r7, #40]	; 0x28
 8016614:	e013      	b.n	801663e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801661a:	2b00      	cmp	r3, #0
 801661c:	d007      	beq.n	801662e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	699b      	ldr	r3, [r3, #24]
 8016622:	4619      	mov	r1, r3
 8016624:	68f8      	ldr	r0, [r7, #12]
 8016626:	f7fd ff43 	bl	80144b0 <clmt_clust>
 801662a:	62b8      	str	r0, [r7, #40]	; 0x28
 801662c:	e007      	b.n	801663e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801662e:	68fa      	ldr	r2, [r7, #12]
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	69db      	ldr	r3, [r3, #28]
 8016634:	4619      	mov	r1, r3
 8016636:	4610      	mov	r0, r2
 8016638:	f7fd fea2 	bl	8014380 <create_chain>
 801663c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016640:	2b00      	cmp	r3, #0
 8016642:	f000 80f2 	beq.w	801682a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016648:	2b01      	cmp	r3, #1
 801664a:	d104      	bne.n	8016656 <f_write+0xfc>
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	2202      	movs	r2, #2
 8016650:	755a      	strb	r2, [r3, #21]
 8016652:	2302      	movs	r3, #2
 8016654:	e0f2      	b.n	801683c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801665c:	d104      	bne.n	8016668 <f_write+0x10e>
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	2201      	movs	r2, #1
 8016662:	755a      	strb	r2, [r3, #21]
 8016664:	2301      	movs	r3, #1
 8016666:	e0e9      	b.n	801683c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801666c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	689b      	ldr	r3, [r3, #8]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d102      	bne.n	801667c <f_write+0x122>
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801667a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	7d1b      	ldrb	r3, [r3, #20]
 8016680:	b25b      	sxtb	r3, r3
 8016682:	2b00      	cmp	r3, #0
 8016684:	da18      	bge.n	80166b8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016686:	693b      	ldr	r3, [r7, #16]
 8016688:	7858      	ldrb	r0, [r3, #1]
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	6a1a      	ldr	r2, [r3, #32]
 8016694:	2301      	movs	r3, #1
 8016696:	f7fd f8c9 	bl	801382c <disk_write>
 801669a:	4603      	mov	r3, r0
 801669c:	2b00      	cmp	r3, #0
 801669e:	d004      	beq.n	80166aa <f_write+0x150>
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	2201      	movs	r2, #1
 80166a4:	755a      	strb	r2, [r3, #21]
 80166a6:	2301      	movs	r3, #1
 80166a8:	e0c8      	b.n	801683c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	7d1b      	ldrb	r3, [r3, #20]
 80166ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80166b2:	b2da      	uxtb	r2, r3
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80166b8:	693a      	ldr	r2, [r7, #16]
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	69db      	ldr	r3, [r3, #28]
 80166be:	4619      	mov	r1, r3
 80166c0:	4610      	mov	r0, r2
 80166c2:	f7fd fc45 	bl	8013f50 <clust2sect>
 80166c6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d104      	bne.n	80166d8 <f_write+0x17e>
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	2202      	movs	r2, #2
 80166d2:	755a      	strb	r2, [r3, #21]
 80166d4:	2302      	movs	r3, #2
 80166d6:	e0b1      	b.n	801683c <f_write+0x2e2>
			sect += csect;
 80166d8:	697a      	ldr	r2, [r7, #20]
 80166da:	69bb      	ldr	r3, [r7, #24]
 80166dc:	4413      	add	r3, r2
 80166de:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	0a5b      	lsrs	r3, r3, #9
 80166e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80166e6:	6a3b      	ldr	r3, [r7, #32]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d03c      	beq.n	8016766 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80166ec:	69ba      	ldr	r2, [r7, #24]
 80166ee:	6a3b      	ldr	r3, [r7, #32]
 80166f0:	4413      	add	r3, r2
 80166f2:	693a      	ldr	r2, [r7, #16]
 80166f4:	8952      	ldrh	r2, [r2, #10]
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d905      	bls.n	8016706 <f_write+0x1ac>
					cc = fs->csize - csect;
 80166fa:	693b      	ldr	r3, [r7, #16]
 80166fc:	895b      	ldrh	r3, [r3, #10]
 80166fe:	461a      	mov	r2, r3
 8016700:	69bb      	ldr	r3, [r7, #24]
 8016702:	1ad3      	subs	r3, r2, r3
 8016704:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016706:	693b      	ldr	r3, [r7, #16]
 8016708:	7858      	ldrb	r0, [r3, #1]
 801670a:	6a3b      	ldr	r3, [r7, #32]
 801670c:	697a      	ldr	r2, [r7, #20]
 801670e:	69f9      	ldr	r1, [r7, #28]
 8016710:	f7fd f88c 	bl	801382c <disk_write>
 8016714:	4603      	mov	r3, r0
 8016716:	2b00      	cmp	r3, #0
 8016718:	d004      	beq.n	8016724 <f_write+0x1ca>
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	2201      	movs	r2, #1
 801671e:	755a      	strb	r2, [r3, #21]
 8016720:	2301      	movs	r3, #1
 8016722:	e08b      	b.n	801683c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	6a1a      	ldr	r2, [r3, #32]
 8016728:	697b      	ldr	r3, [r7, #20]
 801672a:	1ad3      	subs	r3, r2, r3
 801672c:	6a3a      	ldr	r2, [r7, #32]
 801672e:	429a      	cmp	r2, r3
 8016730:	d915      	bls.n	801675e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	6a1a      	ldr	r2, [r3, #32]
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	1ad3      	subs	r3, r2, r3
 8016740:	025b      	lsls	r3, r3, #9
 8016742:	69fa      	ldr	r2, [r7, #28]
 8016744:	4413      	add	r3, r2
 8016746:	f44f 7200 	mov.w	r2, #512	; 0x200
 801674a:	4619      	mov	r1, r3
 801674c:	f7fd f936 	bl	80139bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	7d1b      	ldrb	r3, [r3, #20]
 8016754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016758:	b2da      	uxtb	r2, r3
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801675e:	6a3b      	ldr	r3, [r7, #32]
 8016760:	025b      	lsls	r3, r3, #9
 8016762:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016764:	e03f      	b.n	80167e6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	6a1b      	ldr	r3, [r3, #32]
 801676a:	697a      	ldr	r2, [r7, #20]
 801676c:	429a      	cmp	r2, r3
 801676e:	d016      	beq.n	801679e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	699a      	ldr	r2, [r3, #24]
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016778:	429a      	cmp	r2, r3
 801677a:	d210      	bcs.n	801679e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	7858      	ldrb	r0, [r3, #1]
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016786:	2301      	movs	r3, #1
 8016788:	697a      	ldr	r2, [r7, #20]
 801678a:	f7fd f82f 	bl	80137ec <disk_read>
 801678e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016790:	2b00      	cmp	r3, #0
 8016792:	d004      	beq.n	801679e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	2201      	movs	r2, #1
 8016798:	755a      	strb	r2, [r3, #21]
 801679a:	2301      	movs	r3, #1
 801679c:	e04e      	b.n	801683c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	697a      	ldr	r2, [r7, #20]
 80167a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	699b      	ldr	r3, [r3, #24]
 80167a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80167ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80167b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80167b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d901      	bls.n	80167be <f_write+0x264>
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	699b      	ldr	r3, [r3, #24]
 80167c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80167cc:	4413      	add	r3, r2
 80167ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167d0:	69f9      	ldr	r1, [r7, #28]
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7fd f8f2 	bl	80139bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	7d1b      	ldrb	r3, [r3, #20]
 80167dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80167e0:	b2da      	uxtb	r2, r3
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80167e6:	69fa      	ldr	r2, [r7, #28]
 80167e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ea:	4413      	add	r3, r2
 80167ec:	61fb      	str	r3, [r7, #28]
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	699a      	ldr	r2, [r3, #24]
 80167f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f4:	441a      	add	r2, r3
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	619a      	str	r2, [r3, #24]
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	68da      	ldr	r2, [r3, #12]
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	699b      	ldr	r3, [r3, #24]
 8016802:	429a      	cmp	r2, r3
 8016804:	bf38      	it	cc
 8016806:	461a      	movcc	r2, r3
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	60da      	str	r2, [r3, #12]
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	681a      	ldr	r2, [r3, #0]
 8016810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016812:	441a      	add	r2, r3
 8016814:	683b      	ldr	r3, [r7, #0]
 8016816:	601a      	str	r2, [r3, #0]
 8016818:	687a      	ldr	r2, [r7, #4]
 801681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801681c:	1ad3      	subs	r3, r2, r3
 801681e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2b00      	cmp	r3, #0
 8016824:	f47f aed4 	bne.w	80165d0 <f_write+0x76>
 8016828:	e000      	b.n	801682c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801682a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	7d1b      	ldrb	r3, [r3, #20]
 8016830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016834:	b2da      	uxtb	r2, r3
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801683a:	2300      	movs	r3, #0
}
 801683c:	4618      	mov	r0, r3
 801683e:	3730      	adds	r7, #48	; 0x30
 8016840:	46bd      	mov	sp, r7
 8016842:	bd80      	pop	{r7, pc}

08016844 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b086      	sub	sp, #24
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	f107 0208 	add.w	r2, r7, #8
 8016852:	4611      	mov	r1, r2
 8016854:	4618      	mov	r0, r3
 8016856:	f7ff fb07 	bl	8015e68 <validate>
 801685a:	4603      	mov	r3, r0
 801685c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801685e:	7dfb      	ldrb	r3, [r7, #23]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d168      	bne.n	8016936 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	7d1b      	ldrb	r3, [r3, #20]
 8016868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801686c:	2b00      	cmp	r3, #0
 801686e:	d062      	beq.n	8016936 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	7d1b      	ldrb	r3, [r3, #20]
 8016874:	b25b      	sxtb	r3, r3
 8016876:	2b00      	cmp	r3, #0
 8016878:	da15      	bge.n	80168a6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	7858      	ldrb	r0, [r3, #1]
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	6a1a      	ldr	r2, [r3, #32]
 8016888:	2301      	movs	r3, #1
 801688a:	f7fc ffcf 	bl	801382c <disk_write>
 801688e:	4603      	mov	r3, r0
 8016890:	2b00      	cmp	r3, #0
 8016892:	d001      	beq.n	8016898 <f_sync+0x54>
 8016894:	2301      	movs	r3, #1
 8016896:	e04f      	b.n	8016938 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	7d1b      	ldrb	r3, [r3, #20]
 801689c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168a0:	b2da      	uxtb	r2, r3
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80168a6:	f7fc ffff 	bl	80138a8 <get_fattime>
 80168aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80168ac:	68ba      	ldr	r2, [r7, #8]
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168b2:	4619      	mov	r1, r3
 80168b4:	4610      	mov	r0, r2
 80168b6:	f7fd faaf 	bl	8013e18 <move_window>
 80168ba:	4603      	mov	r3, r0
 80168bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80168be:	7dfb      	ldrb	r3, [r7, #23]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d138      	bne.n	8016936 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	330b      	adds	r3, #11
 80168ce:	781a      	ldrb	r2, [r3, #0]
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	330b      	adds	r3, #11
 80168d4:	f042 0220 	orr.w	r2, r2, #32
 80168d8:	b2d2      	uxtb	r2, r2
 80168da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	6818      	ldr	r0, [r3, #0]
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	689b      	ldr	r3, [r3, #8]
 80168e4:	461a      	mov	r2, r3
 80168e6:	68f9      	ldr	r1, [r7, #12]
 80168e8:	f7fd ffbc 	bl	8014864 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	f103 021c 	add.w	r2, r3, #28
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	68db      	ldr	r3, [r3, #12]
 80168f6:	4619      	mov	r1, r3
 80168f8:	4610      	mov	r0, r2
 80168fa:	f7fd f833 	bl	8013964 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	3316      	adds	r3, #22
 8016902:	6939      	ldr	r1, [r7, #16]
 8016904:	4618      	mov	r0, r3
 8016906:	f7fd f82d 	bl	8013964 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	3312      	adds	r3, #18
 801690e:	2100      	movs	r1, #0
 8016910:	4618      	mov	r0, r3
 8016912:	f7fd f80c 	bl	801392e <st_word>
					fs->wflag = 1;
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	2201      	movs	r2, #1
 801691a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801691c:	68bb      	ldr	r3, [r7, #8]
 801691e:	4618      	mov	r0, r3
 8016920:	f7fd faa8 	bl	8013e74 <sync_fs>
 8016924:	4603      	mov	r3, r0
 8016926:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	7d1b      	ldrb	r3, [r3, #20]
 801692c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016930:	b2da      	uxtb	r2, r3
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8016936:	7dfb      	ldrb	r3, [r7, #23]
}
 8016938:	4618      	mov	r0, r3
 801693a:	3718      	adds	r7, #24
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}

08016940 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b084      	sub	sp, #16
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016948:	6878      	ldr	r0, [r7, #4]
 801694a:	f7ff ff7b 	bl	8016844 <f_sync>
 801694e:	4603      	mov	r3, r0
 8016950:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8016952:	7bfb      	ldrb	r3, [r7, #15]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d118      	bne.n	801698a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	f107 0208 	add.w	r2, r7, #8
 801695e:	4611      	mov	r1, r2
 8016960:	4618      	mov	r0, r3
 8016962:	f7ff fa81 	bl	8015e68 <validate>
 8016966:	4603      	mov	r3, r0
 8016968:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801696a:	7bfb      	ldrb	r3, [r7, #15]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d10c      	bne.n	801698a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	691b      	ldr	r3, [r3, #16]
 8016974:	4618      	mov	r0, r3
 8016976:	f7fd f9ab 	bl	8013cd0 <dec_lock>
 801697a:	4603      	mov	r3, r0
 801697c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801697e:	7bfb      	ldrb	r3, [r7, #15]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d102      	bne.n	801698a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2200      	movs	r2, #0
 8016988:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801698a:	7bfb      	ldrb	r3, [r7, #15]
}
 801698c:	4618      	mov	r0, r3
 801698e:	3710      	adds	r7, #16
 8016990:	46bd      	mov	sp, r7
 8016992:	bd80      	pop	{r7, pc}

08016994 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b086      	sub	sp, #24
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
 801699c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d101      	bne.n	80169a8 <f_opendir+0x14>
 80169a4:	2309      	movs	r3, #9
 80169a6:	e064      	b.n	8016a72 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80169ac:	f107 010c 	add.w	r1, r7, #12
 80169b0:	463b      	mov	r3, r7
 80169b2:	2200      	movs	r2, #0
 80169b4:	4618      	mov	r0, r3
 80169b6:	f7ff f805 	bl	80159c4 <find_volume>
 80169ba:	4603      	mov	r3, r0
 80169bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80169be:	7dfb      	ldrb	r3, [r7, #23]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d14f      	bne.n	8016a64 <f_opendir+0xd0>
		obj->fs = fs;
 80169c4:	68fa      	ldr	r2, [r7, #12]
 80169c6:	693b      	ldr	r3, [r7, #16]
 80169c8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	4619      	mov	r1, r3
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f7fe feec 	bl	80157ac <follow_path>
 80169d4:	4603      	mov	r3, r0
 80169d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80169d8:	7dfb      	ldrb	r3, [r7, #23]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d13d      	bne.n	8016a5a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80169e4:	b25b      	sxtb	r3, r3
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	db12      	blt.n	8016a10 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80169ea:	693b      	ldr	r3, [r7, #16]
 80169ec:	799b      	ldrb	r3, [r3, #6]
 80169ee:	f003 0310 	and.w	r3, r3, #16
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d00a      	beq.n	8016a0c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80169f6:	68fa      	ldr	r2, [r7, #12]
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	6a1b      	ldr	r3, [r3, #32]
 80169fc:	4619      	mov	r1, r3
 80169fe:	4610      	mov	r0, r2
 8016a00:	f7fd ff11 	bl	8014826 <ld_clust>
 8016a04:	4602      	mov	r2, r0
 8016a06:	693b      	ldr	r3, [r7, #16]
 8016a08:	609a      	str	r2, [r3, #8]
 8016a0a:	e001      	b.n	8016a10 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8016a0c:	2305      	movs	r3, #5
 8016a0e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8016a10:	7dfb      	ldrb	r3, [r7, #23]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d121      	bne.n	8016a5a <f_opendir+0xc6>
				obj->id = fs->id;
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	88da      	ldrh	r2, [r3, #6]
 8016a1a:	693b      	ldr	r3, [r7, #16]
 8016a1c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016a1e:	2100      	movs	r1, #0
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f7fd fd79 	bl	8014518 <dir_sdi>
 8016a26:	4603      	mov	r3, r0
 8016a28:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8016a2a:	7dfb      	ldrb	r3, [r7, #23]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d114      	bne.n	8016a5a <f_opendir+0xc6>
					if (obj->sclust) {
 8016a30:	693b      	ldr	r3, [r7, #16]
 8016a32:	689b      	ldr	r3, [r3, #8]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d00d      	beq.n	8016a54 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8016a38:	2100      	movs	r1, #0
 8016a3a:	6878      	ldr	r0, [r7, #4]
 8016a3c:	f7fd f8ba 	bl	8013bb4 <inc_lock>
 8016a40:	4602      	mov	r2, r0
 8016a42:	693b      	ldr	r3, [r7, #16]
 8016a44:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8016a46:	693b      	ldr	r3, [r7, #16]
 8016a48:	691b      	ldr	r3, [r3, #16]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d105      	bne.n	8016a5a <f_opendir+0xc6>
 8016a4e:	2312      	movs	r3, #18
 8016a50:	75fb      	strb	r3, [r7, #23]
 8016a52:	e002      	b.n	8016a5a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8016a54:	693b      	ldr	r3, [r7, #16]
 8016a56:	2200      	movs	r2, #0
 8016a58:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016a5a:	7dfb      	ldrb	r3, [r7, #23]
 8016a5c:	2b04      	cmp	r3, #4
 8016a5e:	d101      	bne.n	8016a64 <f_opendir+0xd0>
 8016a60:	2305      	movs	r3, #5
 8016a62:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016a64:	7dfb      	ldrb	r3, [r7, #23]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d002      	beq.n	8016a70 <f_opendir+0xdc>
 8016a6a:	693b      	ldr	r3, [r7, #16]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	3718      	adds	r7, #24
 8016a76:	46bd      	mov	sp, r7
 8016a78:	bd80      	pop	{r7, pc}

08016a7a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8016a7a:	b580      	push	{r7, lr}
 8016a7c:	b084      	sub	sp, #16
 8016a7e:	af00      	add	r7, sp, #0
 8016a80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	f107 0208 	add.w	r2, r7, #8
 8016a88:	4611      	mov	r1, r2
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	f7ff f9ec 	bl	8015e68 <validate>
 8016a90:	4603      	mov	r3, r0
 8016a92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016a94:	7bfb      	ldrb	r3, [r7, #15]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d110      	bne.n	8016abc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	691b      	ldr	r3, [r3, #16]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d006      	beq.n	8016ab0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	691b      	ldr	r3, [r3, #16]
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f7fd f912 	bl	8013cd0 <dec_lock>
 8016aac:	4603      	mov	r3, r0
 8016aae:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8016ab0:	7bfb      	ldrb	r3, [r7, #15]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d102      	bne.n	8016abc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	2200      	movs	r2, #0
 8016aba:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8016abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3710      	adds	r7, #16
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}

08016ac6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8016ac6:	b580      	push	{r7, lr}
 8016ac8:	b084      	sub	sp, #16
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	6078      	str	r0, [r7, #4]
 8016ace:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	f107 0208 	add.w	r2, r7, #8
 8016ad6:	4611      	mov	r1, r2
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7ff f9c5 	bl	8015e68 <validate>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016ae2:	7bfb      	ldrb	r3, [r7, #15]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d126      	bne.n	8016b36 <f_readdir+0x70>
		if (!fno) {
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d106      	bne.n	8016afc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8016aee:	2100      	movs	r1, #0
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f7fd fd11 	bl	8014518 <dir_sdi>
 8016af6:	4603      	mov	r3, r0
 8016af8:	73fb      	strb	r3, [r7, #15]
 8016afa:	e01c      	b.n	8016b36 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8016afc:	2100      	movs	r1, #0
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	f7fe f8bd 	bl	8014c7e <dir_read>
 8016b04:	4603      	mov	r3, r0
 8016b06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8016b08:	7bfb      	ldrb	r3, [r7, #15]
 8016b0a:	2b04      	cmp	r3, #4
 8016b0c:	d101      	bne.n	8016b12 <f_readdir+0x4c>
 8016b0e:	2300      	movs	r3, #0
 8016b10:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8016b12:	7bfb      	ldrb	r3, [r7, #15]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d10e      	bne.n	8016b36 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8016b18:	6839      	ldr	r1, [r7, #0]
 8016b1a:	6878      	ldr	r0, [r7, #4]
 8016b1c:	f7fe fb0e 	bl	801513c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8016b20:	2100      	movs	r1, #0
 8016b22:	6878      	ldr	r0, [r7, #4]
 8016b24:	f7fd fd73 	bl	801460e <dir_next>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8016b2c:	7bfb      	ldrb	r3, [r7, #15]
 8016b2e:	2b04      	cmp	r3, #4
 8016b30:	d101      	bne.n	8016b36 <f_readdir+0x70>
 8016b32:	2300      	movs	r3, #0
 8016b34:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8016b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b38:	4618      	mov	r0, r3
 8016b3a:	3710      	adds	r7, #16
 8016b3c:	46bd      	mov	sp, r7
 8016b3e:	bd80      	pop	{r7, pc}

08016b40 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b084      	sub	sp, #16
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
 8016b48:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8016b4a:	6839      	ldr	r1, [r7, #0]
 8016b4c:	6878      	ldr	r0, [r7, #4]
 8016b4e:	f7ff ffba 	bl	8016ac6 <f_readdir>
 8016b52:	4603      	mov	r3, r0
 8016b54:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8016b56:	7bfb      	ldrb	r3, [r7, #15]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d114      	bne.n	8016b86 <f_findnext+0x46>
 8016b5c:	683b      	ldr	r3, [r7, #0]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d011      	beq.n	8016b86 <f_findnext+0x46>
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	7d9b      	ldrb	r3, [r3, #22]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d00d      	beq.n	8016b86 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	f103 0116 	add.w	r1, r3, #22
 8016b74:	2300      	movs	r3, #0
 8016b76:	2200      	movs	r2, #0
 8016b78:	f7fe fbe4 	bl	8015344 <pattern_matching>
 8016b7c:	4603      	mov	r3, r0
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d100      	bne.n	8016b84 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8016b82:	e7e2      	b.n	8016b4a <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8016b84:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8016b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b88:	4618      	mov	r0, r3
 8016b8a:	3710      	adds	r7, #16
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}

08016b90 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b086      	sub	sp, #24
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	60b9      	str	r1, [r7, #8]
 8016b9a:	607a      	str	r2, [r7, #4]
 8016b9c:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	683a      	ldr	r2, [r7, #0]
 8016ba2:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8016ba4:	6879      	ldr	r1, [r7, #4]
 8016ba6:	68f8      	ldr	r0, [r7, #12]
 8016ba8:	f7ff fef4 	bl	8016994 <f_opendir>
 8016bac:	4603      	mov	r3, r0
 8016bae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016bb0:	7dfb      	ldrb	r3, [r7, #23]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d105      	bne.n	8016bc2 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8016bb6:	68b9      	ldr	r1, [r7, #8]
 8016bb8:	68f8      	ldr	r0, [r7, #12]
 8016bba:	f7ff ffc1 	bl	8016b40 <f_findnext>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8016bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	3718      	adds	r7, #24
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}

08016bcc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b098      	sub	sp, #96	; 0x60
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8016bd4:	f107 0108 	add.w	r1, r7, #8
 8016bd8:	1d3b      	adds	r3, r7, #4
 8016bda:	2202      	movs	r2, #2
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f7fe fef1 	bl	80159c4 <find_volume>
 8016be2:	4603      	mov	r3, r0
 8016be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8016bec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	f040 80ec 	bne.w	8016dce <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8016bf6:	687a      	ldr	r2, [r7, #4]
 8016bf8:	f107 030c 	add.w	r3, r7, #12
 8016bfc:	4611      	mov	r1, r2
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7fe fdd4 	bl	80157ac <follow_path>
 8016c04:	4603      	mov	r3, r0
 8016c06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8016c0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d102      	bne.n	8016c18 <f_mkdir+0x4c>
 8016c12:	2308      	movs	r3, #8
 8016c14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8016c18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c1c:	2b04      	cmp	r3, #4
 8016c1e:	f040 80d6 	bne.w	8016dce <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016c22:	f107 030c 	add.w	r3, r7, #12
 8016c26:	2100      	movs	r1, #0
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f7fd fba9 	bl	8014380 <create_chain>
 8016c2e:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	895b      	ldrh	r3, [r3, #10]
 8016c34:	025b      	lsls	r3, r3, #9
 8016c36:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8016c38:	2300      	movs	r3, #0
 8016c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8016c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d102      	bne.n	8016c4a <f_mkdir+0x7e>
 8016c44:	2307      	movs	r3, #7
 8016c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8016c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c4c:	2b01      	cmp	r3, #1
 8016c4e:	d102      	bne.n	8016c56 <f_mkdir+0x8a>
 8016c50:	2302      	movs	r3, #2
 8016c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c5c:	d102      	bne.n	8016c64 <f_mkdir+0x98>
 8016c5e:	2301      	movs	r3, #1
 8016c60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8016c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d106      	bne.n	8016c7a <f_mkdir+0xae>
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7fd f88e 	bl	8013d90 <sync_window>
 8016c74:	4603      	mov	r3, r0
 8016c76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8016c7a:	f7fc fe15 	bl	80138a8 <get_fattime>
 8016c7e:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8016c80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d16a      	bne.n	8016d5e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8016c88:	68bb      	ldr	r3, [r7, #8]
 8016c8a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f7fd f95f 	bl	8013f50 <clust2sect>
 8016c92:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8016c94:	68bb      	ldr	r3, [r7, #8]
 8016c96:	3334      	adds	r3, #52	; 0x34
 8016c98:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8016c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016c9e:	2100      	movs	r1, #0
 8016ca0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016ca2:	f7fc feac 	bl	80139fe <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8016ca6:	220b      	movs	r2, #11
 8016ca8:	2120      	movs	r1, #32
 8016caa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016cac:	f7fc fea7 	bl	80139fe <mem_set>
					dir[DIR_Name] = '.';
 8016cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cb2:	222e      	movs	r2, #46	; 0x2e
 8016cb4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8016cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cb8:	330b      	adds	r3, #11
 8016cba:	2210      	movs	r2, #16
 8016cbc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8016cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cc0:	3316      	adds	r3, #22
 8016cc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7fc fe4d 	bl	8013964 <st_dword>
					st_clust(fs, dir, dcl);
 8016cca:	68bb      	ldr	r3, [r7, #8]
 8016ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016cce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7fd fdc7 	bl	8014864 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8016cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cd8:	3320      	adds	r3, #32
 8016cda:	2220      	movs	r2, #32
 8016cdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7fc fe6c 	bl	80139bc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ce6:	3321      	adds	r3, #33	; 0x21
 8016ce8:	222e      	movs	r2, #46	; 0x2e
 8016cea:	701a      	strb	r2, [r3, #0]
 8016cec:	697b      	ldr	r3, [r7, #20]
 8016cee:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	2b03      	cmp	r3, #3
 8016cf6:	d106      	bne.n	8016d06 <f_mkdir+0x13a>
 8016cf8:	68bb      	ldr	r3, [r7, #8]
 8016cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d101      	bne.n	8016d06 <f_mkdir+0x13a>
 8016d02:	2300      	movs	r3, #0
 8016d04:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8016d06:	68b8      	ldr	r0, [r7, #8]
 8016d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d0a:	3320      	adds	r3, #32
 8016d0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016d0e:	4619      	mov	r1, r3
 8016d10:	f7fd fda8 	bl	8014864 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	895b      	ldrh	r3, [r3, #10]
 8016d18:	65bb      	str	r3, [r7, #88]	; 0x58
 8016d1a:	e01b      	b.n	8016d54 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8016d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d1e:	1c5a      	adds	r2, r3, #1
 8016d20:	657a      	str	r2, [r7, #84]	; 0x54
 8016d22:	68ba      	ldr	r2, [r7, #8]
 8016d24:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	2201      	movs	r2, #1
 8016d2a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8016d2c:	68bb      	ldr	r3, [r7, #8]
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7fd f82e 	bl	8013d90 <sync_window>
 8016d34:	4603      	mov	r3, r0
 8016d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8016d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d10c      	bne.n	8016d5c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8016d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d46:	2100      	movs	r1, #0
 8016d48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016d4a:	f7fc fe58 	bl	80139fe <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016d50:	3b01      	subs	r3, #1
 8016d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8016d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d1e0      	bne.n	8016d1c <f_mkdir+0x150>
 8016d5a:	e000      	b.n	8016d5e <f_mkdir+0x192>
					if (res != FR_OK) break;
 8016d5c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8016d5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d107      	bne.n	8016d76 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8016d66:	f107 030c 	add.w	r3, r7, #12
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7fe f8ee 	bl	8014f4c <dir_register>
 8016d70:	4603      	mov	r3, r0
 8016d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8016d76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d120      	bne.n	8016dc0 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8016d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d80:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8016d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d84:	3316      	adds	r3, #22
 8016d86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f7fc fdeb 	bl	8013964 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7fd fd65 	bl	8014864 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8016d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d9c:	330b      	adds	r3, #11
 8016d9e:	2210      	movs	r2, #16
 8016da0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	2201      	movs	r2, #1
 8016da6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8016da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d10e      	bne.n	8016dce <f_mkdir+0x202>
					res = sync_fs(fs);
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	4618      	mov	r0, r3
 8016db4:	f7fd f85e 	bl	8013e74 <sync_fs>
 8016db8:	4603      	mov	r3, r0
 8016dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016dbe:	e006      	b.n	8016dce <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8016dc0:	f107 030c 	add.w	r3, r7, #12
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7fd fa74 	bl	80142b6 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8016dce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	3760      	adds	r7, #96	; 0x60
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}
	...

08016ddc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016ddc:	b480      	push	{r7}
 8016dde:	b087      	sub	sp, #28
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	60f8      	str	r0, [r7, #12]
 8016de4:	60b9      	str	r1, [r7, #8]
 8016de6:	4613      	mov	r3, r2
 8016de8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016dea:	2301      	movs	r3, #1
 8016dec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016dee:	2300      	movs	r3, #0
 8016df0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016df2:	4b1f      	ldr	r3, [pc, #124]	; (8016e70 <FATFS_LinkDriverEx+0x94>)
 8016df4:	7a5b      	ldrb	r3, [r3, #9]
 8016df6:	b2db      	uxtb	r3, r3
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d131      	bne.n	8016e60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016dfc:	4b1c      	ldr	r3, [pc, #112]	; (8016e70 <FATFS_LinkDriverEx+0x94>)
 8016dfe:	7a5b      	ldrb	r3, [r3, #9]
 8016e00:	b2db      	uxtb	r3, r3
 8016e02:	461a      	mov	r2, r3
 8016e04:	4b1a      	ldr	r3, [pc, #104]	; (8016e70 <FATFS_LinkDriverEx+0x94>)
 8016e06:	2100      	movs	r1, #0
 8016e08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016e0a:	4b19      	ldr	r3, [pc, #100]	; (8016e70 <FATFS_LinkDriverEx+0x94>)
 8016e0c:	7a5b      	ldrb	r3, [r3, #9]
 8016e0e:	b2db      	uxtb	r3, r3
 8016e10:	4a17      	ldr	r2, [pc, #92]	; (8016e70 <FATFS_LinkDriverEx+0x94>)
 8016e12:	009b      	lsls	r3, r3, #2
 8016e14:	4413      	add	r3, r2
 8016e16:	68fa      	ldr	r2, [r7, #12]
 8016e18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016e1a:	4b15      	ldr	r3, [pc, #84]	; (8016e70 <FATFS_LinkDriverEx+0x94>)
 8016e1c:	7a5b      	ldrb	r3, [r3, #9]
 8016e1e:	b2db      	uxtb	r3, r3
 8016e20:	461a      	mov	r2, r3
 8016e22:	4b13      	ldr	r3, [pc, #76]	; (8016e70 <FATFS_LinkDriverEx+0x94>)
 8016e24:	4413      	add	r3, r2
 8016e26:	79fa      	ldrb	r2, [r7, #7]
 8016e28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016e2a:	4b11      	ldr	r3, [pc, #68]	; (8016e70 <FATFS_LinkDriverEx+0x94>)
 8016e2c:	7a5b      	ldrb	r3, [r3, #9]
 8016e2e:	b2db      	uxtb	r3, r3
 8016e30:	1c5a      	adds	r2, r3, #1
 8016e32:	b2d1      	uxtb	r1, r2
 8016e34:	4a0e      	ldr	r2, [pc, #56]	; (8016e70 <FATFS_LinkDriverEx+0x94>)
 8016e36:	7251      	strb	r1, [r2, #9]
 8016e38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016e3a:	7dbb      	ldrb	r3, [r7, #22]
 8016e3c:	3330      	adds	r3, #48	; 0x30
 8016e3e:	b2da      	uxtb	r2, r3
 8016e40:	68bb      	ldr	r3, [r7, #8]
 8016e42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	3301      	adds	r3, #1
 8016e48:	223a      	movs	r2, #58	; 0x3a
 8016e4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	3302      	adds	r3, #2
 8016e50:	222f      	movs	r2, #47	; 0x2f
 8016e52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016e54:	68bb      	ldr	r3, [r7, #8]
 8016e56:	3303      	adds	r3, #3
 8016e58:	2200      	movs	r2, #0
 8016e5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	371c      	adds	r7, #28
 8016e66:	46bd      	mov	sp, r7
 8016e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6c:	4770      	bx	lr
 8016e6e:	bf00      	nop
 8016e70:	20000cd8 	.word	0x20000cd8

08016e74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016e7e:	2200      	movs	r2, #0
 8016e80:	6839      	ldr	r1, [r7, #0]
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f7ff ffaa 	bl	8016ddc <FATFS_LinkDriverEx>
 8016e88:	4603      	mov	r3, r0
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	3708      	adds	r7, #8
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd80      	pop	{r7, pc}
	...

08016e94 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8016e94:	b480      	push	{r7}
 8016e96:	b085      	sub	sp, #20
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	460b      	mov	r3, r1
 8016e9e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8016ea8:	4b15      	ldr	r3, [pc, #84]	; (8016f00 <FATFS_UnLinkDriverEx+0x6c>)
 8016eaa:	7a5b      	ldrb	r3, [r3, #9]
 8016eac:	b2db      	uxtb	r3, r3
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d01e      	beq.n	8016ef0 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	781b      	ldrb	r3, [r3, #0]
 8016eb6:	3b30      	subs	r3, #48	; 0x30
 8016eb8:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8016eba:	7bbb      	ldrb	r3, [r7, #14]
 8016ebc:	4a10      	ldr	r2, [pc, #64]	; (8016f00 <FATFS_UnLinkDriverEx+0x6c>)
 8016ebe:	009b      	lsls	r3, r3, #2
 8016ec0:	4413      	add	r3, r2
 8016ec2:	685b      	ldr	r3, [r3, #4]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d013      	beq.n	8016ef0 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8016ec8:	7bbb      	ldrb	r3, [r7, #14]
 8016eca:	4a0d      	ldr	r2, [pc, #52]	; (8016f00 <FATFS_UnLinkDriverEx+0x6c>)
 8016ecc:	009b      	lsls	r3, r3, #2
 8016ece:	4413      	add	r3, r2
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8016ed4:	7bbb      	ldrb	r3, [r7, #14]
 8016ed6:	4a0a      	ldr	r2, [pc, #40]	; (8016f00 <FATFS_UnLinkDriverEx+0x6c>)
 8016ed8:	4413      	add	r3, r2
 8016eda:	2200      	movs	r2, #0
 8016edc:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8016ede:	4b08      	ldr	r3, [pc, #32]	; (8016f00 <FATFS_UnLinkDriverEx+0x6c>)
 8016ee0:	7a5b      	ldrb	r3, [r3, #9]
 8016ee2:	b2db      	uxtb	r3, r3
 8016ee4:	3b01      	subs	r3, #1
 8016ee6:	b2da      	uxtb	r2, r3
 8016ee8:	4b05      	ldr	r3, [pc, #20]	; (8016f00 <FATFS_UnLinkDriverEx+0x6c>)
 8016eea:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8016eec:	2300      	movs	r3, #0
 8016eee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8016ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	3714      	adds	r7, #20
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efc:	4770      	bx	lr
 8016efe:	bf00      	nop
 8016f00:	20000cd8 	.word	0x20000cd8

08016f04 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b082      	sub	sp, #8
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8016f0c:	2100      	movs	r1, #0
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f7ff ffc0 	bl	8016e94 <FATFS_UnLinkDriverEx>
 8016f14:	4603      	mov	r3, r0
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3708      	adds	r7, #8
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}
	...

08016f20 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016f20:	b480      	push	{r7}
 8016f22:	b085      	sub	sp, #20
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	4603      	mov	r3, r0
 8016f28:	6039      	str	r1, [r7, #0]
 8016f2a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016f2c:	88fb      	ldrh	r3, [r7, #6]
 8016f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8016f30:	d802      	bhi.n	8016f38 <ff_convert+0x18>
		c = chr;
 8016f32:	88fb      	ldrh	r3, [r7, #6]
 8016f34:	81fb      	strh	r3, [r7, #14]
 8016f36:	e025      	b.n	8016f84 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8016f38:	683b      	ldr	r3, [r7, #0]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d00b      	beq.n	8016f56 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016f3e:	88fb      	ldrh	r3, [r7, #6]
 8016f40:	2bff      	cmp	r3, #255	; 0xff
 8016f42:	d805      	bhi.n	8016f50 <ff_convert+0x30>
 8016f44:	88fb      	ldrh	r3, [r7, #6]
 8016f46:	3b80      	subs	r3, #128	; 0x80
 8016f48:	4a12      	ldr	r2, [pc, #72]	; (8016f94 <ff_convert+0x74>)
 8016f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016f4e:	e000      	b.n	8016f52 <ff_convert+0x32>
 8016f50:	2300      	movs	r3, #0
 8016f52:	81fb      	strh	r3, [r7, #14]
 8016f54:	e016      	b.n	8016f84 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8016f56:	2300      	movs	r3, #0
 8016f58:	81fb      	strh	r3, [r7, #14]
 8016f5a:	e009      	b.n	8016f70 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016f5c:	89fb      	ldrh	r3, [r7, #14]
 8016f5e:	4a0d      	ldr	r2, [pc, #52]	; (8016f94 <ff_convert+0x74>)
 8016f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016f64:	88fa      	ldrh	r2, [r7, #6]
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d006      	beq.n	8016f78 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016f6a:	89fb      	ldrh	r3, [r7, #14]
 8016f6c:	3301      	adds	r3, #1
 8016f6e:	81fb      	strh	r3, [r7, #14]
 8016f70:	89fb      	ldrh	r3, [r7, #14]
 8016f72:	2b7f      	cmp	r3, #127	; 0x7f
 8016f74:	d9f2      	bls.n	8016f5c <ff_convert+0x3c>
 8016f76:	e000      	b.n	8016f7a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016f78:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016f7a:	89fb      	ldrh	r3, [r7, #14]
 8016f7c:	3380      	adds	r3, #128	; 0x80
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	b2db      	uxtb	r3, r3
 8016f82:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016f84:	89fb      	ldrh	r3, [r7, #14]
}
 8016f86:	4618      	mov	r0, r3
 8016f88:	3714      	adds	r7, #20
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f90:	4770      	bx	lr
 8016f92:	bf00      	nop
 8016f94:	08022784 	.word	0x08022784

08016f98 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8016f98:	b480      	push	{r7}
 8016f9a:	b087      	sub	sp, #28
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8016fa2:	88fb      	ldrh	r3, [r7, #6]
 8016fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016fa8:	d201      	bcs.n	8016fae <ff_wtoupper+0x16>
 8016faa:	4b3e      	ldr	r3, [pc, #248]	; (80170a4 <ff_wtoupper+0x10c>)
 8016fac:	e000      	b.n	8016fb0 <ff_wtoupper+0x18>
 8016fae:	4b3e      	ldr	r3, [pc, #248]	; (80170a8 <ff_wtoupper+0x110>)
 8016fb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8016fb2:	697b      	ldr	r3, [r7, #20]
 8016fb4:	1c9a      	adds	r2, r3, #2
 8016fb6:	617a      	str	r2, [r7, #20]
 8016fb8:	881b      	ldrh	r3, [r3, #0]
 8016fba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8016fbc:	8a7b      	ldrh	r3, [r7, #18]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d068      	beq.n	8017094 <ff_wtoupper+0xfc>
 8016fc2:	88fa      	ldrh	r2, [r7, #6]
 8016fc4:	8a7b      	ldrh	r3, [r7, #18]
 8016fc6:	429a      	cmp	r2, r3
 8016fc8:	d364      	bcc.n	8017094 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8016fca:	697b      	ldr	r3, [r7, #20]
 8016fcc:	1c9a      	adds	r2, r3, #2
 8016fce:	617a      	str	r2, [r7, #20]
 8016fd0:	881b      	ldrh	r3, [r3, #0]
 8016fd2:	823b      	strh	r3, [r7, #16]
 8016fd4:	8a3b      	ldrh	r3, [r7, #16]
 8016fd6:	0a1b      	lsrs	r3, r3, #8
 8016fd8:	81fb      	strh	r3, [r7, #14]
 8016fda:	8a3b      	ldrh	r3, [r7, #16]
 8016fdc:	b2db      	uxtb	r3, r3
 8016fde:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8016fe0:	88fa      	ldrh	r2, [r7, #6]
 8016fe2:	8a79      	ldrh	r1, [r7, #18]
 8016fe4:	8a3b      	ldrh	r3, [r7, #16]
 8016fe6:	440b      	add	r3, r1
 8016fe8:	429a      	cmp	r2, r3
 8016fea:	da49      	bge.n	8017080 <ff_wtoupper+0xe8>
			switch (cmd) {
 8016fec:	89fb      	ldrh	r3, [r7, #14]
 8016fee:	2b08      	cmp	r3, #8
 8016ff0:	d84f      	bhi.n	8017092 <ff_wtoupper+0xfa>
 8016ff2:	a201      	add	r2, pc, #4	; (adr r2, 8016ff8 <ff_wtoupper+0x60>)
 8016ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ff8:	0801701d 	.word	0x0801701d
 8016ffc:	0801702f 	.word	0x0801702f
 8017000:	08017045 	.word	0x08017045
 8017004:	0801704d 	.word	0x0801704d
 8017008:	08017055 	.word	0x08017055
 801700c:	0801705d 	.word	0x0801705d
 8017010:	08017065 	.word	0x08017065
 8017014:	0801706d 	.word	0x0801706d
 8017018:	08017075 	.word	0x08017075
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801701c:	88fa      	ldrh	r2, [r7, #6]
 801701e:	8a7b      	ldrh	r3, [r7, #18]
 8017020:	1ad3      	subs	r3, r2, r3
 8017022:	005b      	lsls	r3, r3, #1
 8017024:	697a      	ldr	r2, [r7, #20]
 8017026:	4413      	add	r3, r2
 8017028:	881b      	ldrh	r3, [r3, #0]
 801702a:	80fb      	strh	r3, [r7, #6]
 801702c:	e027      	b.n	801707e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801702e:	88fa      	ldrh	r2, [r7, #6]
 8017030:	8a7b      	ldrh	r3, [r7, #18]
 8017032:	1ad3      	subs	r3, r2, r3
 8017034:	b29b      	uxth	r3, r3
 8017036:	f003 0301 	and.w	r3, r3, #1
 801703a:	b29b      	uxth	r3, r3
 801703c:	88fa      	ldrh	r2, [r7, #6]
 801703e:	1ad3      	subs	r3, r2, r3
 8017040:	80fb      	strh	r3, [r7, #6]
 8017042:	e01c      	b.n	801707e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017044:	88fb      	ldrh	r3, [r7, #6]
 8017046:	3b10      	subs	r3, #16
 8017048:	80fb      	strh	r3, [r7, #6]
 801704a:	e018      	b.n	801707e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801704c:	88fb      	ldrh	r3, [r7, #6]
 801704e:	3b20      	subs	r3, #32
 8017050:	80fb      	strh	r3, [r7, #6]
 8017052:	e014      	b.n	801707e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017054:	88fb      	ldrh	r3, [r7, #6]
 8017056:	3b30      	subs	r3, #48	; 0x30
 8017058:	80fb      	strh	r3, [r7, #6]
 801705a:	e010      	b.n	801707e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801705c:	88fb      	ldrh	r3, [r7, #6]
 801705e:	3b1a      	subs	r3, #26
 8017060:	80fb      	strh	r3, [r7, #6]
 8017062:	e00c      	b.n	801707e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8017064:	88fb      	ldrh	r3, [r7, #6]
 8017066:	3308      	adds	r3, #8
 8017068:	80fb      	strh	r3, [r7, #6]
 801706a:	e008      	b.n	801707e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801706c:	88fb      	ldrh	r3, [r7, #6]
 801706e:	3b50      	subs	r3, #80	; 0x50
 8017070:	80fb      	strh	r3, [r7, #6]
 8017072:	e004      	b.n	801707e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8017074:	88fb      	ldrh	r3, [r7, #6]
 8017076:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801707a:	80fb      	strh	r3, [r7, #6]
 801707c:	bf00      	nop
			}
			break;
 801707e:	e008      	b.n	8017092 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8017080:	89fb      	ldrh	r3, [r7, #14]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d195      	bne.n	8016fb2 <ff_wtoupper+0x1a>
 8017086:	8a3b      	ldrh	r3, [r7, #16]
 8017088:	005b      	lsls	r3, r3, #1
 801708a:	697a      	ldr	r2, [r7, #20]
 801708c:	4413      	add	r3, r2
 801708e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8017090:	e78f      	b.n	8016fb2 <ff_wtoupper+0x1a>
			break;
 8017092:	bf00      	nop
	}

	return chr;
 8017094:	88fb      	ldrh	r3, [r7, #6]
}
 8017096:	4618      	mov	r0, r3
 8017098:	371c      	adds	r7, #28
 801709a:	46bd      	mov	sp, r7
 801709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a0:	4770      	bx	lr
 80170a2:	bf00      	nop
 80170a4:	08022884 	.word	0x08022884
 80170a8:	08022a78 	.word	0x08022a78

080170ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80170ac:	b480      	push	{r7}
 80170ae:	b085      	sub	sp, #20
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	4603      	mov	r3, r0
 80170b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80170b6:	2300      	movs	r3, #0
 80170b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80170ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80170be:	2b84      	cmp	r3, #132	; 0x84
 80170c0:	d005      	beq.n	80170ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80170c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	4413      	add	r3, r2
 80170ca:	3303      	adds	r3, #3
 80170cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80170ce:	68fb      	ldr	r3, [r7, #12]
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	3714      	adds	r7, #20
 80170d4:	46bd      	mov	sp, r7
 80170d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170da:	4770      	bx	lr

080170dc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80170dc:	b480      	push	{r7}
 80170de:	b083      	sub	sp, #12
 80170e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170e2:	f3ef 8305 	mrs	r3, IPSR
 80170e6:	607b      	str	r3, [r7, #4]
  return(result);
 80170e8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	bf14      	ite	ne
 80170ee:	2301      	movne	r3, #1
 80170f0:	2300      	moveq	r3, #0
 80170f2:	b2db      	uxtb	r3, r3
}
 80170f4:	4618      	mov	r0, r3
 80170f6:	370c      	adds	r7, #12
 80170f8:	46bd      	mov	sp, r7
 80170fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fe:	4770      	bx	lr

08017100 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8017104:	f001 fd6c 	bl	8018be0 <vTaskStartScheduler>
  
  return osOK;
 8017108:	2300      	movs	r3, #0
}
 801710a:	4618      	mov	r0, r3
 801710c:	bd80      	pop	{r7, pc}

0801710e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801710e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017110:	b087      	sub	sp, #28
 8017112:	af02      	add	r7, sp, #8
 8017114:	6078      	str	r0, [r7, #4]
 8017116:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	685c      	ldr	r4, [r3, #4]
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017124:	b29e      	uxth	r6, r3
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801712c:	4618      	mov	r0, r3
 801712e:	f7ff ffbd 	bl	80170ac <makeFreeRtosPriority>
 8017132:	4602      	mov	r2, r0
 8017134:	f107 030c 	add.w	r3, r7, #12
 8017138:	9301      	str	r3, [sp, #4]
 801713a:	9200      	str	r2, [sp, #0]
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	4632      	mov	r2, r6
 8017140:	4629      	mov	r1, r5
 8017142:	4620      	mov	r0, r4
 8017144:	f001 fa76 	bl	8018634 <xTaskCreate>
 8017148:	4603      	mov	r3, r0
 801714a:	2b01      	cmp	r3, #1
 801714c:	d001      	beq.n	8017152 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 801714e:	2300      	movs	r3, #0
 8017150:	e000      	b.n	8017154 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8017152:	68fb      	ldr	r3, [r7, #12]
}
 8017154:	4618      	mov	r0, r3
 8017156:	3714      	adds	r7, #20
 8017158:	46bd      	mov	sp, r7
 801715a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801715c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801715c:	b580      	push	{r7, lr}
 801715e:	b084      	sub	sp, #16
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
 8017164:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8017166:	683b      	ldr	r3, [r7, #0]
 8017168:	2b01      	cmp	r3, #1
 801716a:	d110      	bne.n	801718e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 801716c:	2203      	movs	r2, #3
 801716e:	2100      	movs	r1, #0
 8017170:	2001      	movs	r0, #1
 8017172:	f000 fbb7 	bl	80178e4 <xQueueGenericCreate>
 8017176:	60f8      	str	r0, [r7, #12]
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d005      	beq.n	801718a <osSemaphoreCreate+0x2e>
 801717e:	2300      	movs	r3, #0
 8017180:	2200      	movs	r2, #0
 8017182:	2100      	movs	r1, #0
 8017184:	68f8      	ldr	r0, [r7, #12]
 8017186:	f000 fc3f 	bl	8017a08 <xQueueGenericSend>
    return sema;
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	e006      	b.n	801719c <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	683a      	ldr	r2, [r7, #0]
 8017192:	4611      	mov	r1, r2
 8017194:	4618      	mov	r0, r3
 8017196:	f000 fc04 	bl	80179a2 <xQueueCreateCountingSemaphore>
 801719a:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 801719c:	4618      	mov	r0, r3
 801719e:	3710      	adds	r7, #16
 80171a0:	46bd      	mov	sp, r7
 80171a2:	bd80      	pop	{r7, pc}

080171a4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b084      	sub	sp, #16
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80171ae:	2300      	movs	r3, #0
 80171b0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d101      	bne.n	80171bc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80171b8:	2380      	movs	r3, #128	; 0x80
 80171ba:	e03a      	b.n	8017232 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80171bc:	2300      	movs	r3, #0
 80171be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171c6:	d103      	bne.n	80171d0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80171c8:	f04f 33ff 	mov.w	r3, #4294967295
 80171cc:	60fb      	str	r3, [r7, #12]
 80171ce:	e009      	b.n	80171e4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d006      	beq.n	80171e4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d101      	bne.n	80171e4 <osSemaphoreWait+0x40>
      ticks = 1;
 80171e0:	2301      	movs	r3, #1
 80171e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80171e4:	f7ff ff7a 	bl	80170dc <inHandlerMode>
 80171e8:	4603      	mov	r3, r0
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d017      	beq.n	801721e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80171ee:	f107 0308 	add.w	r3, r7, #8
 80171f2:	461a      	mov	r2, r3
 80171f4:	2100      	movs	r1, #0
 80171f6:	6878      	ldr	r0, [r7, #4]
 80171f8:	f001 f816 	bl	8018228 <xQueueReceiveFromISR>
 80171fc:	4603      	mov	r3, r0
 80171fe:	2b01      	cmp	r3, #1
 8017200:	d001      	beq.n	8017206 <osSemaphoreWait+0x62>
      return osErrorOS;
 8017202:	23ff      	movs	r3, #255	; 0xff
 8017204:	e015      	b.n	8017232 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8017206:	68bb      	ldr	r3, [r7, #8]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d011      	beq.n	8017230 <osSemaphoreWait+0x8c>
 801720c:	4b0b      	ldr	r3, [pc, #44]	; (801723c <osSemaphoreWait+0x98>)
 801720e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017212:	601a      	str	r2, [r3, #0]
 8017214:	f3bf 8f4f 	dsb	sy
 8017218:	f3bf 8f6f 	isb	sy
 801721c:	e008      	b.n	8017230 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801721e:	68f9      	ldr	r1, [r7, #12]
 8017220:	6878      	ldr	r0, [r7, #4]
 8017222:	f000 fef5 	bl	8018010 <xQueueSemaphoreTake>
 8017226:	4603      	mov	r3, r0
 8017228:	2b01      	cmp	r3, #1
 801722a:	d001      	beq.n	8017230 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801722c:	23ff      	movs	r3, #255	; 0xff
 801722e:	e000      	b.n	8017232 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8017230:	2300      	movs	r3, #0
}
 8017232:	4618      	mov	r0, r3
 8017234:	3710      	adds	r7, #16
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
 801723a:	bf00      	nop
 801723c:	e000ed04 	.word	0xe000ed04

08017240 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b084      	sub	sp, #16
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8017248:	2300      	movs	r3, #0
 801724a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801724c:	2300      	movs	r3, #0
 801724e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8017250:	f7ff ff44 	bl	80170dc <inHandlerMode>
 8017254:	4603      	mov	r3, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d016      	beq.n	8017288 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801725a:	f107 0308 	add.w	r3, r7, #8
 801725e:	4619      	mov	r1, r3
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	f000 fd67 	bl	8017d34 <xQueueGiveFromISR>
 8017266:	4603      	mov	r3, r0
 8017268:	2b01      	cmp	r3, #1
 801726a:	d001      	beq.n	8017270 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801726c:	23ff      	movs	r3, #255	; 0xff
 801726e:	e017      	b.n	80172a0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017270:	68bb      	ldr	r3, [r7, #8]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d013      	beq.n	801729e <osSemaphoreRelease+0x5e>
 8017276:	4b0c      	ldr	r3, [pc, #48]	; (80172a8 <osSemaphoreRelease+0x68>)
 8017278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801727c:	601a      	str	r2, [r3, #0]
 801727e:	f3bf 8f4f 	dsb	sy
 8017282:	f3bf 8f6f 	isb	sy
 8017286:	e00a      	b.n	801729e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8017288:	2300      	movs	r3, #0
 801728a:	2200      	movs	r2, #0
 801728c:	2100      	movs	r1, #0
 801728e:	6878      	ldr	r0, [r7, #4]
 8017290:	f000 fbba 	bl	8017a08 <xQueueGenericSend>
 8017294:	4603      	mov	r3, r0
 8017296:	2b01      	cmp	r3, #1
 8017298:	d001      	beq.n	801729e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801729a:	23ff      	movs	r3, #255	; 0xff
 801729c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801729e:	68fb      	ldr	r3, [r7, #12]
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3710      	adds	r7, #16
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}
 80172a8:	e000ed04 	.word	0xe000ed04

080172ac <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b086      	sub	sp, #24
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	685b      	ldr	r3, [r3, #4]
 80172b8:	3303      	adds	r3, #3
 80172ba:	f023 0303 	bic.w	r3, r3, #3
 80172be:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80172c0:	2014      	movs	r0, #20
 80172c2:	f003 f861 	bl	801a388 <pvPortMalloc>
 80172c6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80172c8:	697b      	ldr	r3, [r7, #20]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d046      	beq.n	801735c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	681a      	ldr	r2, [r3, #0]
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80172d6:	68fa      	ldr	r2, [r7, #12]
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	2200      	movs	r2, #0
 80172e0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	4618      	mov	r0, r3
 80172e8:	f003 f84e 	bl	801a388 <pvPortMalloc>
 80172ec:	4602      	mov	r2, r0
 80172ee:	697b      	ldr	r3, [r7, #20]
 80172f0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	685b      	ldr	r3, [r3, #4]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d02b      	beq.n	8017352 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	68fa      	ldr	r2, [r7, #12]
 8017300:	fb02 f303 	mul.w	r3, r2, r3
 8017304:	4618      	mov	r0, r3
 8017306:	f003 f83f 	bl	801a388 <pvPortMalloc>
 801730a:	4602      	mov	r2, r0
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8017310:	697b      	ldr	r3, [r7, #20]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d011      	beq.n	801733c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8017318:	2300      	movs	r3, #0
 801731a:	613b      	str	r3, [r7, #16]
 801731c:	e008      	b.n	8017330 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 801731e:	697b      	ldr	r3, [r7, #20]
 8017320:	685a      	ldr	r2, [r3, #4]
 8017322:	693b      	ldr	r3, [r7, #16]
 8017324:	4413      	add	r3, r2
 8017326:	2200      	movs	r2, #0
 8017328:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801732a:	693b      	ldr	r3, [r7, #16]
 801732c:	3301      	adds	r3, #1
 801732e:	613b      	str	r3, [r7, #16]
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	693a      	ldr	r2, [r7, #16]
 8017336:	429a      	cmp	r2, r3
 8017338:	d3f1      	bcc.n	801731e <osPoolCreate+0x72>
 801733a:	e00f      	b.n	801735c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 801733c:	697b      	ldr	r3, [r7, #20]
 801733e:	685b      	ldr	r3, [r3, #4]
 8017340:	4618      	mov	r0, r3
 8017342:	f003 f8e5 	bl	801a510 <vPortFree>
        vPortFree(thePool);
 8017346:	6978      	ldr	r0, [r7, #20]
 8017348:	f003 f8e2 	bl	801a510 <vPortFree>
        thePool = NULL;
 801734c:	2300      	movs	r3, #0
 801734e:	617b      	str	r3, [r7, #20]
 8017350:	e004      	b.n	801735c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8017352:	6978      	ldr	r0, [r7, #20]
 8017354:	f003 f8dc 	bl	801a510 <vPortFree>
      thePool = NULL;
 8017358:	2300      	movs	r3, #0
 801735a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 801735c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 801735e:	4618      	mov	r0, r3
 8017360:	3718      	adds	r7, #24
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}

08017366 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8017366:	b580      	push	{r7, lr}
 8017368:	b08a      	sub	sp, #40	; 0x28
 801736a:	af00      	add	r7, sp, #0
 801736c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 801736e:	2300      	movs	r3, #0
 8017370:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8017372:	2300      	movs	r3, #0
 8017374:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8017376:	f7ff feb1 	bl	80170dc <inHandlerMode>
 801737a:	4603      	mov	r3, r0
 801737c:	2b00      	cmp	r3, #0
 801737e:	d00e      	beq.n	801739e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017380:	f3ef 8211 	mrs	r2, BASEPRI
 8017384:	f04f 0320 	mov.w	r3, #32
 8017388:	f383 8811 	msr	BASEPRI, r3
 801738c:	f3bf 8f6f 	isb	sy
 8017390:	f3bf 8f4f 	dsb	sy
 8017394:	617a      	str	r2, [r7, #20]
 8017396:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017398:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 801739a:	627b      	str	r3, [r7, #36]	; 0x24
 801739c:	e001      	b.n	80173a2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 801739e:	f002 fed1 	bl	801a144 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80173a2:	2300      	movs	r3, #0
 80173a4:	61fb      	str	r3, [r7, #28]
 80173a6:	e029      	b.n	80173fc <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	691a      	ldr	r2, [r3, #16]
 80173ac:	69fb      	ldr	r3, [r7, #28]
 80173ae:	4413      	add	r3, r2
 80173b0:	687a      	ldr	r2, [r7, #4]
 80173b2:	6892      	ldr	r2, [r2, #8]
 80173b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80173b8:	fb02 f201 	mul.w	r2, r2, r1
 80173bc:	1a9b      	subs	r3, r3, r2
 80173be:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	685a      	ldr	r2, [r3, #4]
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	4413      	add	r3, r2
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d113      	bne.n	80173f6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	685a      	ldr	r2, [r3, #4]
 80173d2:	69bb      	ldr	r3, [r7, #24]
 80173d4:	4413      	add	r3, r2
 80173d6:	2201      	movs	r2, #1
 80173d8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	4619      	mov	r1, r3
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	68db      	ldr	r3, [r3, #12]
 80173e4:	69ba      	ldr	r2, [r7, #24]
 80173e6:	fb02 f303 	mul.w	r3, r2, r3
 80173ea:	440b      	add	r3, r1
 80173ec:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	69ba      	ldr	r2, [r7, #24]
 80173f2:	611a      	str	r2, [r3, #16]
      break;
 80173f4:	e007      	b.n	8017406 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80173f6:	69fb      	ldr	r3, [r7, #28]
 80173f8:	3301      	adds	r3, #1
 80173fa:	61fb      	str	r3, [r7, #28]
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	689b      	ldr	r3, [r3, #8]
 8017400:	69fa      	ldr	r2, [r7, #28]
 8017402:	429a      	cmp	r2, r3
 8017404:	d3d0      	bcc.n	80173a8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8017406:	f7ff fe69 	bl	80170dc <inHandlerMode>
 801740a:	4603      	mov	r3, r0
 801740c:	2b00      	cmp	r3, #0
 801740e:	d005      	beq.n	801741c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8017410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017412:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801741a:	e001      	b.n	8017420 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 801741c:	f002 fec2 	bl	801a1a4 <vPortExitCritical>
  }
  
  return p;
 8017420:	6a3b      	ldr	r3, [r7, #32]
}
 8017422:	4618      	mov	r0, r3
 8017424:	3728      	adds	r7, #40	; 0x28
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}

0801742a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801742a:	b480      	push	{r7}
 801742c:	b085      	sub	sp, #20
 801742e:	af00      	add	r7, sp, #0
 8017430:	6078      	str	r0, [r7, #4]
 8017432:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d101      	bne.n	801743e <osPoolFree+0x14>
    return osErrorParameter;
 801743a:	2380      	movs	r3, #128	; 0x80
 801743c:	e030      	b.n	80174a0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801743e:	683b      	ldr	r3, [r7, #0]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d101      	bne.n	8017448 <osPoolFree+0x1e>
    return osErrorParameter;
 8017444:	2380      	movs	r3, #128	; 0x80
 8017446:	e02b      	b.n	80174a0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	683a      	ldr	r2, [r7, #0]
 801744e:	429a      	cmp	r2, r3
 8017450:	d201      	bcs.n	8017456 <osPoolFree+0x2c>
    return osErrorParameter;
 8017452:	2380      	movs	r3, #128	; 0x80
 8017454:	e024      	b.n	80174a0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	687a      	ldr	r2, [r7, #4]
 801745a:	6812      	ldr	r2, [r2, #0]
 801745c:	1a9b      	subs	r3, r3, r2
 801745e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	68da      	ldr	r2, [r3, #12]
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	fbb3 f1f2 	udiv	r1, r3, r2
 801746a:	fb02 f201 	mul.w	r2, r2, r1
 801746e:	1a9b      	subs	r3, r3, r2
 8017470:	2b00      	cmp	r3, #0
 8017472:	d001      	beq.n	8017478 <osPoolFree+0x4e>
    return osErrorParameter;
 8017474:	2380      	movs	r3, #128	; 0x80
 8017476:	e013      	b.n	80174a0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	68db      	ldr	r3, [r3, #12]
 801747c:	68fa      	ldr	r2, [r7, #12]
 801747e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017482:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	689b      	ldr	r3, [r3, #8]
 8017488:	68fa      	ldr	r2, [r7, #12]
 801748a:	429a      	cmp	r2, r3
 801748c:	d301      	bcc.n	8017492 <osPoolFree+0x68>
    return osErrorParameter;
 801748e:	2380      	movs	r3, #128	; 0x80
 8017490:	e006      	b.n	80174a0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	685a      	ldr	r2, [r3, #4]
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	4413      	add	r3, r2
 801749a:	2200      	movs	r2, #0
 801749c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 801749e:	2300      	movs	r3, #0
}
 80174a0:	4618      	mov	r0, r3
 80174a2:	3714      	adds	r7, #20
 80174a4:	46bd      	mov	sp, r7
 80174a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174aa:	4770      	bx	lr

080174ac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b082      	sub	sp, #8
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6818      	ldr	r0, [r3, #0]
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	685b      	ldr	r3, [r3, #4]
 80174be:	2200      	movs	r2, #0
 80174c0:	4619      	mov	r1, r3
 80174c2:	f000 fa0f 	bl	80178e4 <xQueueGenericCreate>
 80174c6:	4603      	mov	r3, r0
#endif
}
 80174c8:	4618      	mov	r0, r3
 80174ca:	3708      	adds	r7, #8
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}

080174d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b086      	sub	sp, #24
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	60f8      	str	r0, [r7, #12]
 80174d8:	60b9      	str	r1, [r7, #8]
 80174da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80174dc:	2300      	movs	r3, #0
 80174de:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80174e4:	697b      	ldr	r3, [r7, #20]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d101      	bne.n	80174ee <osMessagePut+0x1e>
    ticks = 1;
 80174ea:	2301      	movs	r3, #1
 80174ec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80174ee:	f7ff fdf5 	bl	80170dc <inHandlerMode>
 80174f2:	4603      	mov	r3, r0
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d018      	beq.n	801752a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80174f8:	f107 0210 	add.w	r2, r7, #16
 80174fc:	f107 0108 	add.w	r1, r7, #8
 8017500:	2300      	movs	r3, #0
 8017502:	68f8      	ldr	r0, [r7, #12]
 8017504:	f000 fb7e 	bl	8017c04 <xQueueGenericSendFromISR>
 8017508:	4603      	mov	r3, r0
 801750a:	2b01      	cmp	r3, #1
 801750c:	d001      	beq.n	8017512 <osMessagePut+0x42>
      return osErrorOS;
 801750e:	23ff      	movs	r3, #255	; 0xff
 8017510:	e018      	b.n	8017544 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d014      	beq.n	8017542 <osMessagePut+0x72>
 8017518:	4b0c      	ldr	r3, [pc, #48]	; (801754c <osMessagePut+0x7c>)
 801751a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801751e:	601a      	str	r2, [r3, #0]
 8017520:	f3bf 8f4f 	dsb	sy
 8017524:	f3bf 8f6f 	isb	sy
 8017528:	e00b      	b.n	8017542 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801752a:	f107 0108 	add.w	r1, r7, #8
 801752e:	2300      	movs	r3, #0
 8017530:	697a      	ldr	r2, [r7, #20]
 8017532:	68f8      	ldr	r0, [r7, #12]
 8017534:	f000 fa68 	bl	8017a08 <xQueueGenericSend>
 8017538:	4603      	mov	r3, r0
 801753a:	2b01      	cmp	r3, #1
 801753c:	d001      	beq.n	8017542 <osMessagePut+0x72>
      return osErrorOS;
 801753e:	23ff      	movs	r3, #255	; 0xff
 8017540:	e000      	b.n	8017544 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8017542:	2300      	movs	r3, #0
}
 8017544:	4618      	mov	r0, r3
 8017546:	3718      	adds	r7, #24
 8017548:	46bd      	mov	sp, r7
 801754a:	bd80      	pop	{r7, pc}
 801754c:	e000ed04 	.word	0xe000ed04

08017550 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8017550:	b590      	push	{r4, r7, lr}
 8017552:	b08b      	sub	sp, #44	; 0x2c
 8017554:	af00      	add	r7, sp, #0
 8017556:	60f8      	str	r0, [r7, #12]
 8017558:	60b9      	str	r1, [r7, #8]
 801755a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8017560:	2300      	movs	r3, #0
 8017562:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d10a      	bne.n	8017580 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801756a:	2380      	movs	r3, #128	; 0x80
 801756c:	617b      	str	r3, [r7, #20]
    return event;
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	461c      	mov	r4, r3
 8017572:	f107 0314 	add.w	r3, r7, #20
 8017576:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801757a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801757e:	e054      	b.n	801762a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8017580:	2300      	movs	r3, #0
 8017582:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8017584:	2300      	movs	r3, #0
 8017586:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801758e:	d103      	bne.n	8017598 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8017590:	f04f 33ff 	mov.w	r3, #4294967295
 8017594:	627b      	str	r3, [r7, #36]	; 0x24
 8017596:	e009      	b.n	80175ac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	2b00      	cmp	r3, #0
 801759c:	d006      	beq.n	80175ac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80175a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d101      	bne.n	80175ac <osMessageGet+0x5c>
      ticks = 1;
 80175a8:	2301      	movs	r3, #1
 80175aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80175ac:	f7ff fd96 	bl	80170dc <inHandlerMode>
 80175b0:	4603      	mov	r3, r0
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d01c      	beq.n	80175f0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80175b6:	f107 0220 	add.w	r2, r7, #32
 80175ba:	f107 0314 	add.w	r3, r7, #20
 80175be:	3304      	adds	r3, #4
 80175c0:	4619      	mov	r1, r3
 80175c2:	68b8      	ldr	r0, [r7, #8]
 80175c4:	f000 fe30 	bl	8018228 <xQueueReceiveFromISR>
 80175c8:	4603      	mov	r3, r0
 80175ca:	2b01      	cmp	r3, #1
 80175cc:	d102      	bne.n	80175d4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80175ce:	2310      	movs	r3, #16
 80175d0:	617b      	str	r3, [r7, #20]
 80175d2:	e001      	b.n	80175d8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80175d4:	2300      	movs	r3, #0
 80175d6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80175d8:	6a3b      	ldr	r3, [r7, #32]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d01d      	beq.n	801761a <osMessageGet+0xca>
 80175de:	4b15      	ldr	r3, [pc, #84]	; (8017634 <osMessageGet+0xe4>)
 80175e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175e4:	601a      	str	r2, [r3, #0]
 80175e6:	f3bf 8f4f 	dsb	sy
 80175ea:	f3bf 8f6f 	isb	sy
 80175ee:	e014      	b.n	801761a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80175f0:	f107 0314 	add.w	r3, r7, #20
 80175f4:	3304      	adds	r3, #4
 80175f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175f8:	4619      	mov	r1, r3
 80175fa:	68b8      	ldr	r0, [r7, #8]
 80175fc:	f000 fc28 	bl	8017e50 <xQueueReceive>
 8017600:	4603      	mov	r3, r0
 8017602:	2b01      	cmp	r3, #1
 8017604:	d102      	bne.n	801760c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8017606:	2310      	movs	r3, #16
 8017608:	617b      	str	r3, [r7, #20]
 801760a:	e006      	b.n	801761a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801760e:	2b00      	cmp	r3, #0
 8017610:	d101      	bne.n	8017616 <osMessageGet+0xc6>
 8017612:	2300      	movs	r3, #0
 8017614:	e000      	b.n	8017618 <osMessageGet+0xc8>
 8017616:	2340      	movs	r3, #64	; 0x40
 8017618:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	461c      	mov	r4, r3
 801761e:	f107 0314 	add.w	r3, r7, #20
 8017622:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017626:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801762a:	68f8      	ldr	r0, [r7, #12]
 801762c:	372c      	adds	r7, #44	; 0x2c
 801762e:	46bd      	mov	sp, r7
 8017630:	bd90      	pop	{r4, r7, pc}
 8017632:	bf00      	nop
 8017634:	e000ed04 	.word	0xe000ed04

08017638 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 801763c:	f001 ff08 	bl	8019450 <xTaskGetSchedulerState>
 8017640:	4603      	mov	r3, r0
 8017642:	2b01      	cmp	r3, #1
 8017644:	d001      	beq.n	801764a <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8017646:	f002 fe0f 	bl	801a268 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 801764a:	bf00      	nop
 801764c:	bd80      	pop	{r7, pc}

0801764e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 801764e:	b580      	push	{r7, lr}
 8017650:	b082      	sub	sp, #8
 8017652:	af00      	add	r7, sp, #0
 8017654:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8017656:	6878      	ldr	r0, [r7, #4]
 8017658:	f001 f92e 	bl	80188b8 <vTaskSuspend>
  
  return osOK;
 801765c:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 801765e:	4618      	mov	r0, r3
 8017660:	3708      	adds	r7, #8
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}
	...

08017668 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b082      	sub	sp, #8
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8017670:	f7ff fd34 	bl	80170dc <inHandlerMode>
 8017674:	4603      	mov	r3, r0
 8017676:	2b00      	cmp	r3, #0
 8017678:	d00e      	beq.n	8017698 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 801767a:	6878      	ldr	r0, [r7, #4]
 801767c:	f001 fa3e 	bl	8018afc <xTaskResumeFromISR>
 8017680:	4603      	mov	r3, r0
 8017682:	2b01      	cmp	r3, #1
 8017684:	d10b      	bne.n	801769e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8017686:	4b08      	ldr	r3, [pc, #32]	; (80176a8 <osThreadResume+0x40>)
 8017688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801768c:	601a      	str	r2, [r3, #0]
 801768e:	f3bf 8f4f 	dsb	sy
 8017692:	f3bf 8f6f 	isb	sy
 8017696:	e002      	b.n	801769e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8017698:	6878      	ldr	r0, [r7, #4]
 801769a:	f001 f9d1 	bl	8018a40 <vTaskResume>
  }
  return osOK;
 801769e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80176a0:	4618      	mov	r0, r3
 80176a2:	3708      	adds	r7, #8
 80176a4:	46bd      	mov	sp, r7
 80176a6:	bd80      	pop	{r7, pc}
 80176a8:	e000ed04 	.word	0xe000ed04

080176ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80176ac:	b480      	push	{r7}
 80176ae:	b083      	sub	sp, #12
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	f103 0208 	add.w	r2, r3, #8
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	f04f 32ff 	mov.w	r2, #4294967295
 80176c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	f103 0208 	add.w	r2, r3, #8
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	f103 0208 	add.w	r2, r3, #8
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	2200      	movs	r2, #0
 80176de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80176e0:	bf00      	nop
 80176e2:	370c      	adds	r7, #12
 80176e4:	46bd      	mov	sp, r7
 80176e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ea:	4770      	bx	lr

080176ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80176ec:	b480      	push	{r7}
 80176ee:	b083      	sub	sp, #12
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	2200      	movs	r2, #0
 80176f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80176fa:	bf00      	nop
 80176fc:	370c      	adds	r7, #12
 80176fe:	46bd      	mov	sp, r7
 8017700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017704:	4770      	bx	lr

08017706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017706:	b480      	push	{r7}
 8017708:	b085      	sub	sp, #20
 801770a:	af00      	add	r7, sp, #0
 801770c:	6078      	str	r0, [r7, #4]
 801770e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	685b      	ldr	r3, [r3, #4]
 8017714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017716:	683b      	ldr	r3, [r7, #0]
 8017718:	68fa      	ldr	r2, [r7, #12]
 801771a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	689a      	ldr	r2, [r3, #8]
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	689b      	ldr	r3, [r3, #8]
 8017728:	683a      	ldr	r2, [r7, #0]
 801772a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	683a      	ldr	r2, [r7, #0]
 8017730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017732:	683b      	ldr	r3, [r7, #0]
 8017734:	687a      	ldr	r2, [r7, #4]
 8017736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	1c5a      	adds	r2, r3, #1
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	601a      	str	r2, [r3, #0]
}
 8017742:	bf00      	nop
 8017744:	3714      	adds	r7, #20
 8017746:	46bd      	mov	sp, r7
 8017748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774c:	4770      	bx	lr

0801774e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801774e:	b480      	push	{r7}
 8017750:	b085      	sub	sp, #20
 8017752:	af00      	add	r7, sp, #0
 8017754:	6078      	str	r0, [r7, #4]
 8017756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801775e:	68bb      	ldr	r3, [r7, #8]
 8017760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017764:	d103      	bne.n	801776e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	691b      	ldr	r3, [r3, #16]
 801776a:	60fb      	str	r3, [r7, #12]
 801776c:	e00c      	b.n	8017788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	3308      	adds	r3, #8
 8017772:	60fb      	str	r3, [r7, #12]
 8017774:	e002      	b.n	801777c <vListInsert+0x2e>
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	685b      	ldr	r3, [r3, #4]
 801777a:	60fb      	str	r3, [r7, #12]
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	685b      	ldr	r3, [r3, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	68ba      	ldr	r2, [r7, #8]
 8017784:	429a      	cmp	r2, r3
 8017786:	d2f6      	bcs.n	8017776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	685a      	ldr	r2, [r3, #4]
 801778c:	683b      	ldr	r3, [r7, #0]
 801778e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017790:	683b      	ldr	r3, [r7, #0]
 8017792:	685b      	ldr	r3, [r3, #4]
 8017794:	683a      	ldr	r2, [r7, #0]
 8017796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017798:	683b      	ldr	r3, [r7, #0]
 801779a:	68fa      	ldr	r2, [r7, #12]
 801779c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	683a      	ldr	r2, [r7, #0]
 80177a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	687a      	ldr	r2, [r7, #4]
 80177a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	1c5a      	adds	r2, r3, #1
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	601a      	str	r2, [r3, #0]
}
 80177b4:	bf00      	nop
 80177b6:	3714      	adds	r7, #20
 80177b8:	46bd      	mov	sp, r7
 80177ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177be:	4770      	bx	lr

080177c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80177c0:	b480      	push	{r7}
 80177c2:	b085      	sub	sp, #20
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	691b      	ldr	r3, [r3, #16]
 80177cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	685b      	ldr	r3, [r3, #4]
 80177d2:	687a      	ldr	r2, [r7, #4]
 80177d4:	6892      	ldr	r2, [r2, #8]
 80177d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	689b      	ldr	r3, [r3, #8]
 80177dc:	687a      	ldr	r2, [r7, #4]
 80177de:	6852      	ldr	r2, [r2, #4]
 80177e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	685b      	ldr	r3, [r3, #4]
 80177e6:	687a      	ldr	r2, [r7, #4]
 80177e8:	429a      	cmp	r2, r3
 80177ea:	d103      	bne.n	80177f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	689a      	ldr	r2, [r3, #8]
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	2200      	movs	r2, #0
 80177f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	1e5a      	subs	r2, r3, #1
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	681b      	ldr	r3, [r3, #0]
}
 8017808:	4618      	mov	r0, r3
 801780a:	3714      	adds	r7, #20
 801780c:	46bd      	mov	sp, r7
 801780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017812:	4770      	bx	lr

08017814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b084      	sub	sp, #16
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
 801781c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d10a      	bne.n	801783e <xQueueGenericReset+0x2a>
	__asm volatile
 8017828:	f04f 0320 	mov.w	r3, #32
 801782c:	f383 8811 	msr	BASEPRI, r3
 8017830:	f3bf 8f6f 	isb	sy
 8017834:	f3bf 8f4f 	dsb	sy
 8017838:	60bb      	str	r3, [r7, #8]
}
 801783a:	bf00      	nop
 801783c:	e7fe      	b.n	801783c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801783e:	f002 fc81 	bl	801a144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801784a:	68f9      	ldr	r1, [r7, #12]
 801784c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801784e:	fb01 f303 	mul.w	r3, r1, r3
 8017852:	441a      	add	r2, r3
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	2200      	movs	r2, #0
 801785c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	681a      	ldr	r2, [r3, #0]
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	681a      	ldr	r2, [r3, #0]
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801786e:	3b01      	subs	r3, #1
 8017870:	68f9      	ldr	r1, [r7, #12]
 8017872:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017874:	fb01 f303 	mul.w	r3, r1, r3
 8017878:	441a      	add	r2, r3
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	22ff      	movs	r2, #255	; 0xff
 8017882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	22ff      	movs	r2, #255	; 0xff
 801788a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d114      	bne.n	80178be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	691b      	ldr	r3, [r3, #16]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d01a      	beq.n	80178d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	3310      	adds	r3, #16
 80178a0:	4618      	mov	r0, r3
 80178a2:	f001 fc37 	bl	8019114 <xTaskRemoveFromEventList>
 80178a6:	4603      	mov	r3, r0
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d012      	beq.n	80178d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80178ac:	4b0c      	ldr	r3, [pc, #48]	; (80178e0 <xQueueGenericReset+0xcc>)
 80178ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178b2:	601a      	str	r2, [r3, #0]
 80178b4:	f3bf 8f4f 	dsb	sy
 80178b8:	f3bf 8f6f 	isb	sy
 80178bc:	e009      	b.n	80178d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	3310      	adds	r3, #16
 80178c2:	4618      	mov	r0, r3
 80178c4:	f7ff fef2 	bl	80176ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	3324      	adds	r3, #36	; 0x24
 80178cc:	4618      	mov	r0, r3
 80178ce:	f7ff feed 	bl	80176ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80178d2:	f002 fc67 	bl	801a1a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80178d6:	2301      	movs	r3, #1
}
 80178d8:	4618      	mov	r0, r3
 80178da:	3710      	adds	r7, #16
 80178dc:	46bd      	mov	sp, r7
 80178de:	bd80      	pop	{r7, pc}
 80178e0:	e000ed04 	.word	0xe000ed04

080178e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b08a      	sub	sp, #40	; 0x28
 80178e8:	af02      	add	r7, sp, #8
 80178ea:	60f8      	str	r0, [r7, #12]
 80178ec:	60b9      	str	r1, [r7, #8]
 80178ee:	4613      	mov	r3, r2
 80178f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d10a      	bne.n	801790e <xQueueGenericCreate+0x2a>
	__asm volatile
 80178f8:	f04f 0320 	mov.w	r3, #32
 80178fc:	f383 8811 	msr	BASEPRI, r3
 8017900:	f3bf 8f6f 	isb	sy
 8017904:	f3bf 8f4f 	dsb	sy
 8017908:	613b      	str	r3, [r7, #16]
}
 801790a:	bf00      	nop
 801790c:	e7fe      	b.n	801790c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801790e:	68bb      	ldr	r3, [r7, #8]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d102      	bne.n	801791a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8017914:	2300      	movs	r3, #0
 8017916:	61fb      	str	r3, [r7, #28]
 8017918:	e004      	b.n	8017924 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	68ba      	ldr	r2, [r7, #8]
 801791e:	fb02 f303 	mul.w	r3, r2, r3
 8017922:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017924:	69fb      	ldr	r3, [r7, #28]
 8017926:	3350      	adds	r3, #80	; 0x50
 8017928:	4618      	mov	r0, r3
 801792a:	f002 fd2d 	bl	801a388 <pvPortMalloc>
 801792e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017930:	69bb      	ldr	r3, [r7, #24]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d00d      	beq.n	8017952 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017936:	69bb      	ldr	r3, [r7, #24]
 8017938:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801793a:	697b      	ldr	r3, [r7, #20]
 801793c:	3350      	adds	r3, #80	; 0x50
 801793e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017940:	79fa      	ldrb	r2, [r7, #7]
 8017942:	69bb      	ldr	r3, [r7, #24]
 8017944:	9300      	str	r3, [sp, #0]
 8017946:	4613      	mov	r3, r2
 8017948:	697a      	ldr	r2, [r7, #20]
 801794a:	68b9      	ldr	r1, [r7, #8]
 801794c:	68f8      	ldr	r0, [r7, #12]
 801794e:	f000 f805 	bl	801795c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017952:	69bb      	ldr	r3, [r7, #24]
	}
 8017954:	4618      	mov	r0, r3
 8017956:	3720      	adds	r7, #32
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}

0801795c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b084      	sub	sp, #16
 8017960:	af00      	add	r7, sp, #0
 8017962:	60f8      	str	r0, [r7, #12]
 8017964:	60b9      	str	r1, [r7, #8]
 8017966:	607a      	str	r2, [r7, #4]
 8017968:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801796a:	68bb      	ldr	r3, [r7, #8]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d103      	bne.n	8017978 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017970:	69bb      	ldr	r3, [r7, #24]
 8017972:	69ba      	ldr	r2, [r7, #24]
 8017974:	601a      	str	r2, [r3, #0]
 8017976:	e002      	b.n	801797e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017978:	69bb      	ldr	r3, [r7, #24]
 801797a:	687a      	ldr	r2, [r7, #4]
 801797c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801797e:	69bb      	ldr	r3, [r7, #24]
 8017980:	68fa      	ldr	r2, [r7, #12]
 8017982:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017984:	69bb      	ldr	r3, [r7, #24]
 8017986:	68ba      	ldr	r2, [r7, #8]
 8017988:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801798a:	2101      	movs	r1, #1
 801798c:	69b8      	ldr	r0, [r7, #24]
 801798e:	f7ff ff41 	bl	8017814 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017992:	69bb      	ldr	r3, [r7, #24]
 8017994:	78fa      	ldrb	r2, [r7, #3]
 8017996:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801799a:	bf00      	nop
 801799c:	3710      	adds	r7, #16
 801799e:	46bd      	mov	sp, r7
 80179a0:	bd80      	pop	{r7, pc}

080179a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80179a2:	b580      	push	{r7, lr}
 80179a4:	b086      	sub	sp, #24
 80179a6:	af00      	add	r7, sp, #0
 80179a8:	6078      	str	r0, [r7, #4]
 80179aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d10a      	bne.n	80179c8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80179b2:	f04f 0320 	mov.w	r3, #32
 80179b6:	f383 8811 	msr	BASEPRI, r3
 80179ba:	f3bf 8f6f 	isb	sy
 80179be:	f3bf 8f4f 	dsb	sy
 80179c2:	613b      	str	r3, [r7, #16]
}
 80179c4:	bf00      	nop
 80179c6:	e7fe      	b.n	80179c6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80179c8:	683a      	ldr	r2, [r7, #0]
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	429a      	cmp	r2, r3
 80179ce:	d90a      	bls.n	80179e6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80179d0:	f04f 0320 	mov.w	r3, #32
 80179d4:	f383 8811 	msr	BASEPRI, r3
 80179d8:	f3bf 8f6f 	isb	sy
 80179dc:	f3bf 8f4f 	dsb	sy
 80179e0:	60fb      	str	r3, [r7, #12]
}
 80179e2:	bf00      	nop
 80179e4:	e7fe      	b.n	80179e4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80179e6:	2202      	movs	r2, #2
 80179e8:	2100      	movs	r1, #0
 80179ea:	6878      	ldr	r0, [r7, #4]
 80179ec:	f7ff ff7a 	bl	80178e4 <xQueueGenericCreate>
 80179f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80179f2:	697b      	ldr	r3, [r7, #20]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d002      	beq.n	80179fe <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	683a      	ldr	r2, [r7, #0]
 80179fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80179fe:	697b      	ldr	r3, [r7, #20]
	}
 8017a00:	4618      	mov	r0, r3
 8017a02:	3718      	adds	r7, #24
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}

08017a08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b08e      	sub	sp, #56	; 0x38
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	60f8      	str	r0, [r7, #12]
 8017a10:	60b9      	str	r1, [r7, #8]
 8017a12:	607a      	str	r2, [r7, #4]
 8017a14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017a16:	2300      	movs	r3, #0
 8017a18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d10a      	bne.n	8017a3a <xQueueGenericSend+0x32>
	__asm volatile
 8017a24:	f04f 0320 	mov.w	r3, #32
 8017a28:	f383 8811 	msr	BASEPRI, r3
 8017a2c:	f3bf 8f6f 	isb	sy
 8017a30:	f3bf 8f4f 	dsb	sy
 8017a34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017a36:	bf00      	nop
 8017a38:	e7fe      	b.n	8017a38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017a3a:	68bb      	ldr	r3, [r7, #8]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d103      	bne.n	8017a48 <xQueueGenericSend+0x40>
 8017a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d101      	bne.n	8017a4c <xQueueGenericSend+0x44>
 8017a48:	2301      	movs	r3, #1
 8017a4a:	e000      	b.n	8017a4e <xQueueGenericSend+0x46>
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d10a      	bne.n	8017a68 <xQueueGenericSend+0x60>
	__asm volatile
 8017a52:	f04f 0320 	mov.w	r3, #32
 8017a56:	f383 8811 	msr	BASEPRI, r3
 8017a5a:	f3bf 8f6f 	isb	sy
 8017a5e:	f3bf 8f4f 	dsb	sy
 8017a62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017a64:	bf00      	nop
 8017a66:	e7fe      	b.n	8017a66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017a68:	683b      	ldr	r3, [r7, #0]
 8017a6a:	2b02      	cmp	r3, #2
 8017a6c:	d103      	bne.n	8017a76 <xQueueGenericSend+0x6e>
 8017a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a72:	2b01      	cmp	r3, #1
 8017a74:	d101      	bne.n	8017a7a <xQueueGenericSend+0x72>
 8017a76:	2301      	movs	r3, #1
 8017a78:	e000      	b.n	8017a7c <xQueueGenericSend+0x74>
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d10a      	bne.n	8017a96 <xQueueGenericSend+0x8e>
	__asm volatile
 8017a80:	f04f 0320 	mov.w	r3, #32
 8017a84:	f383 8811 	msr	BASEPRI, r3
 8017a88:	f3bf 8f6f 	isb	sy
 8017a8c:	f3bf 8f4f 	dsb	sy
 8017a90:	623b      	str	r3, [r7, #32]
}
 8017a92:	bf00      	nop
 8017a94:	e7fe      	b.n	8017a94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017a96:	f001 fcdb 	bl	8019450 <xTaskGetSchedulerState>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d102      	bne.n	8017aa6 <xQueueGenericSend+0x9e>
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d101      	bne.n	8017aaa <xQueueGenericSend+0xa2>
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	e000      	b.n	8017aac <xQueueGenericSend+0xa4>
 8017aaa:	2300      	movs	r3, #0
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d10a      	bne.n	8017ac6 <xQueueGenericSend+0xbe>
	__asm volatile
 8017ab0:	f04f 0320 	mov.w	r3, #32
 8017ab4:	f383 8811 	msr	BASEPRI, r3
 8017ab8:	f3bf 8f6f 	isb	sy
 8017abc:	f3bf 8f4f 	dsb	sy
 8017ac0:	61fb      	str	r3, [r7, #28]
}
 8017ac2:	bf00      	nop
 8017ac4:	e7fe      	b.n	8017ac4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017ac6:	f002 fb3d 	bl	801a144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d302      	bcc.n	8017adc <xQueueGenericSend+0xd4>
 8017ad6:	683b      	ldr	r3, [r7, #0]
 8017ad8:	2b02      	cmp	r3, #2
 8017ada:	d129      	bne.n	8017b30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017adc:	683a      	ldr	r2, [r7, #0]
 8017ade:	68b9      	ldr	r1, [r7, #8]
 8017ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ae2:	f000 fc39 	bl	8018358 <prvCopyDataToQueue>
 8017ae6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d010      	beq.n	8017b12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af2:	3324      	adds	r3, #36	; 0x24
 8017af4:	4618      	mov	r0, r3
 8017af6:	f001 fb0d 	bl	8019114 <xTaskRemoveFromEventList>
 8017afa:	4603      	mov	r3, r0
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d013      	beq.n	8017b28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017b00:	4b3f      	ldr	r3, [pc, #252]	; (8017c00 <xQueueGenericSend+0x1f8>)
 8017b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b06:	601a      	str	r2, [r3, #0]
 8017b08:	f3bf 8f4f 	dsb	sy
 8017b0c:	f3bf 8f6f 	isb	sy
 8017b10:	e00a      	b.n	8017b28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d007      	beq.n	8017b28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017b18:	4b39      	ldr	r3, [pc, #228]	; (8017c00 <xQueueGenericSend+0x1f8>)
 8017b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b1e:	601a      	str	r2, [r3, #0]
 8017b20:	f3bf 8f4f 	dsb	sy
 8017b24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017b28:	f002 fb3c 	bl	801a1a4 <vPortExitCritical>
				return pdPASS;
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	e063      	b.n	8017bf8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d103      	bne.n	8017b3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017b36:	f002 fb35 	bl	801a1a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	e05c      	b.n	8017bf8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d106      	bne.n	8017b52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017b44:	f107 0314 	add.w	r3, r7, #20
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f001 fb45 	bl	80191d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017b4e:	2301      	movs	r3, #1
 8017b50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017b52:	f002 fb27 	bl	801a1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017b56:	f001 f899 	bl	8018c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017b5a:	f002 faf3 	bl	801a144 <vPortEnterCritical>
 8017b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017b64:	b25b      	sxtb	r3, r3
 8017b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b6a:	d103      	bne.n	8017b74 <xQueueGenericSend+0x16c>
 8017b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b6e:	2200      	movs	r2, #0
 8017b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b7a:	b25b      	sxtb	r3, r3
 8017b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b80:	d103      	bne.n	8017b8a <xQueueGenericSend+0x182>
 8017b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b84:	2200      	movs	r2, #0
 8017b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017b8a:	f002 fb0b 	bl	801a1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017b8e:	1d3a      	adds	r2, r7, #4
 8017b90:	f107 0314 	add.w	r3, r7, #20
 8017b94:	4611      	mov	r1, r2
 8017b96:	4618      	mov	r0, r3
 8017b98:	f001 fb34 	bl	8019204 <xTaskCheckForTimeOut>
 8017b9c:	4603      	mov	r3, r0
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d124      	bne.n	8017bec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017ba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ba4:	f000 fcd0 	bl	8018548 <prvIsQueueFull>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d018      	beq.n	8017be0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bb0:	3310      	adds	r3, #16
 8017bb2:	687a      	ldr	r2, [r7, #4]
 8017bb4:	4611      	mov	r1, r2
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f001 fa5c 	bl	8019074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bbe:	f000 fc5b 	bl	8018478 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017bc2:	f001 f871 	bl	8018ca8 <xTaskResumeAll>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	f47f af7c 	bne.w	8017ac6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017bce:	4b0c      	ldr	r3, [pc, #48]	; (8017c00 <xQueueGenericSend+0x1f8>)
 8017bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017bd4:	601a      	str	r2, [r3, #0]
 8017bd6:	f3bf 8f4f 	dsb	sy
 8017bda:	f3bf 8f6f 	isb	sy
 8017bde:	e772      	b.n	8017ac6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017be2:	f000 fc49 	bl	8018478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017be6:	f001 f85f 	bl	8018ca8 <xTaskResumeAll>
 8017bea:	e76c      	b.n	8017ac6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bee:	f000 fc43 	bl	8018478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017bf2:	f001 f859 	bl	8018ca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017bf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	3738      	adds	r7, #56	; 0x38
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}
 8017c00:	e000ed04 	.word	0xe000ed04

08017c04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b08e      	sub	sp, #56	; 0x38
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	60f8      	str	r0, [r7, #12]
 8017c0c:	60b9      	str	r1, [r7, #8]
 8017c0e:	607a      	str	r2, [r7, #4]
 8017c10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d10a      	bne.n	8017c32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017c1c:	f04f 0320 	mov.w	r3, #32
 8017c20:	f383 8811 	msr	BASEPRI, r3
 8017c24:	f3bf 8f6f 	isb	sy
 8017c28:	f3bf 8f4f 	dsb	sy
 8017c2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017c2e:	bf00      	nop
 8017c30:	e7fe      	b.n	8017c30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017c32:	68bb      	ldr	r3, [r7, #8]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d103      	bne.n	8017c40 <xQueueGenericSendFromISR+0x3c>
 8017c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d101      	bne.n	8017c44 <xQueueGenericSendFromISR+0x40>
 8017c40:	2301      	movs	r3, #1
 8017c42:	e000      	b.n	8017c46 <xQueueGenericSendFromISR+0x42>
 8017c44:	2300      	movs	r3, #0
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d10a      	bne.n	8017c60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017c4a:	f04f 0320 	mov.w	r3, #32
 8017c4e:	f383 8811 	msr	BASEPRI, r3
 8017c52:	f3bf 8f6f 	isb	sy
 8017c56:	f3bf 8f4f 	dsb	sy
 8017c5a:	623b      	str	r3, [r7, #32]
}
 8017c5c:	bf00      	nop
 8017c5e:	e7fe      	b.n	8017c5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017c60:	683b      	ldr	r3, [r7, #0]
 8017c62:	2b02      	cmp	r3, #2
 8017c64:	d103      	bne.n	8017c6e <xQueueGenericSendFromISR+0x6a>
 8017c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c6a:	2b01      	cmp	r3, #1
 8017c6c:	d101      	bne.n	8017c72 <xQueueGenericSendFromISR+0x6e>
 8017c6e:	2301      	movs	r3, #1
 8017c70:	e000      	b.n	8017c74 <xQueueGenericSendFromISR+0x70>
 8017c72:	2300      	movs	r3, #0
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d10a      	bne.n	8017c8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017c78:	f04f 0320 	mov.w	r3, #32
 8017c7c:	f383 8811 	msr	BASEPRI, r3
 8017c80:	f3bf 8f6f 	isb	sy
 8017c84:	f3bf 8f4f 	dsb	sy
 8017c88:	61fb      	str	r3, [r7, #28]
}
 8017c8a:	bf00      	nop
 8017c8c:	e7fe      	b.n	8017c8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017c8e:	f002 fb3b 	bl	801a308 <vPortValidateInterruptPriority>
	__asm volatile
 8017c92:	f3ef 8211 	mrs	r2, BASEPRI
 8017c96:	f04f 0320 	mov.w	r3, #32
 8017c9a:	f383 8811 	msr	BASEPRI, r3
 8017c9e:	f3bf 8f6f 	isb	sy
 8017ca2:	f3bf 8f4f 	dsb	sy
 8017ca6:	61ba      	str	r2, [r7, #24]
 8017ca8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017caa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017cac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d302      	bcc.n	8017cc0 <xQueueGenericSendFromISR+0xbc>
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	2b02      	cmp	r3, #2
 8017cbe:	d12c      	bne.n	8017d1a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017cca:	683a      	ldr	r2, [r7, #0]
 8017ccc:	68b9      	ldr	r1, [r7, #8]
 8017cce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cd0:	f000 fb42 	bl	8018358 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017cd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cdc:	d112      	bne.n	8017d04 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d016      	beq.n	8017d14 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce8:	3324      	adds	r3, #36	; 0x24
 8017cea:	4618      	mov	r0, r3
 8017cec:	f001 fa12 	bl	8019114 <xTaskRemoveFromEventList>
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d00e      	beq.n	8017d14 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d00b      	beq.n	8017d14 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	2201      	movs	r2, #1
 8017d00:	601a      	str	r2, [r3, #0]
 8017d02:	e007      	b.n	8017d14 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017d04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017d08:	3301      	adds	r3, #1
 8017d0a:	b2db      	uxtb	r3, r3
 8017d0c:	b25a      	sxtb	r2, r3
 8017d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017d14:	2301      	movs	r3, #1
 8017d16:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8017d18:	e001      	b.n	8017d1e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8017d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017d22:	693b      	ldr	r3, [r7, #16]
 8017d24:	f383 8811 	msr	BASEPRI, r3
}
 8017d28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	3738      	adds	r7, #56	; 0x38
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}

08017d34 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b08e      	sub	sp, #56	; 0x38
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
 8017d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d10a      	bne.n	8017d5e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8017d48:	f04f 0320 	mov.w	r3, #32
 8017d4c:	f383 8811 	msr	BASEPRI, r3
 8017d50:	f3bf 8f6f 	isb	sy
 8017d54:	f3bf 8f4f 	dsb	sy
 8017d58:	623b      	str	r3, [r7, #32]
}
 8017d5a:	bf00      	nop
 8017d5c:	e7fe      	b.n	8017d5c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d00a      	beq.n	8017d7c <xQueueGiveFromISR+0x48>
	__asm volatile
 8017d66:	f04f 0320 	mov.w	r3, #32
 8017d6a:	f383 8811 	msr	BASEPRI, r3
 8017d6e:	f3bf 8f6f 	isb	sy
 8017d72:	f3bf 8f4f 	dsb	sy
 8017d76:	61fb      	str	r3, [r7, #28]
}
 8017d78:	bf00      	nop
 8017d7a:	e7fe      	b.n	8017d7a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d103      	bne.n	8017d8c <xQueueGiveFromISR+0x58>
 8017d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d86:	689b      	ldr	r3, [r3, #8]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d101      	bne.n	8017d90 <xQueueGiveFromISR+0x5c>
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	e000      	b.n	8017d92 <xQueueGiveFromISR+0x5e>
 8017d90:	2300      	movs	r3, #0
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d10a      	bne.n	8017dac <xQueueGiveFromISR+0x78>
	__asm volatile
 8017d96:	f04f 0320 	mov.w	r3, #32
 8017d9a:	f383 8811 	msr	BASEPRI, r3
 8017d9e:	f3bf 8f6f 	isb	sy
 8017da2:	f3bf 8f4f 	dsb	sy
 8017da6:	61bb      	str	r3, [r7, #24]
}
 8017da8:	bf00      	nop
 8017daa:	e7fe      	b.n	8017daa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017dac:	f002 faac 	bl	801a308 <vPortValidateInterruptPriority>
	__asm volatile
 8017db0:	f3ef 8211 	mrs	r2, BASEPRI
 8017db4:	f04f 0320 	mov.w	r3, #32
 8017db8:	f383 8811 	msr	BASEPRI, r3
 8017dbc:	f3bf 8f6f 	isb	sy
 8017dc0:	f3bf 8f4f 	dsb	sy
 8017dc4:	617a      	str	r2, [r7, #20]
 8017dc6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017dc8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017dca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dd0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017dd8:	429a      	cmp	r2, r3
 8017dda:	d22b      	bcs.n	8017e34 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de8:	1c5a      	adds	r2, r3, #1
 8017dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017dee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017df6:	d112      	bne.n	8017e1e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d016      	beq.n	8017e2e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e02:	3324      	adds	r3, #36	; 0x24
 8017e04:	4618      	mov	r0, r3
 8017e06:	f001 f985 	bl	8019114 <xTaskRemoveFromEventList>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d00e      	beq.n	8017e2e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017e10:	683b      	ldr	r3, [r7, #0]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d00b      	beq.n	8017e2e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017e16:	683b      	ldr	r3, [r7, #0]
 8017e18:	2201      	movs	r2, #1
 8017e1a:	601a      	str	r2, [r3, #0]
 8017e1c:	e007      	b.n	8017e2e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e22:	3301      	adds	r3, #1
 8017e24:	b2db      	uxtb	r3, r3
 8017e26:	b25a      	sxtb	r2, r3
 8017e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017e2e:	2301      	movs	r3, #1
 8017e30:	637b      	str	r3, [r7, #52]	; 0x34
 8017e32:	e001      	b.n	8017e38 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017e34:	2300      	movs	r3, #0
 8017e36:	637b      	str	r3, [r7, #52]	; 0x34
 8017e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e3a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	f383 8811 	msr	BASEPRI, r3
}
 8017e42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017e46:	4618      	mov	r0, r3
 8017e48:	3738      	adds	r7, #56	; 0x38
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}
	...

08017e50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b08c      	sub	sp, #48	; 0x30
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	60f8      	str	r0, [r7, #12]
 8017e58:	60b9      	str	r1, [r7, #8]
 8017e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d10a      	bne.n	8017e80 <xQueueReceive+0x30>
	__asm volatile
 8017e6a:	f04f 0320 	mov.w	r3, #32
 8017e6e:	f383 8811 	msr	BASEPRI, r3
 8017e72:	f3bf 8f6f 	isb	sy
 8017e76:	f3bf 8f4f 	dsb	sy
 8017e7a:	623b      	str	r3, [r7, #32]
}
 8017e7c:	bf00      	nop
 8017e7e:	e7fe      	b.n	8017e7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d103      	bne.n	8017e8e <xQueueReceive+0x3e>
 8017e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d101      	bne.n	8017e92 <xQueueReceive+0x42>
 8017e8e:	2301      	movs	r3, #1
 8017e90:	e000      	b.n	8017e94 <xQueueReceive+0x44>
 8017e92:	2300      	movs	r3, #0
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d10a      	bne.n	8017eae <xQueueReceive+0x5e>
	__asm volatile
 8017e98:	f04f 0320 	mov.w	r3, #32
 8017e9c:	f383 8811 	msr	BASEPRI, r3
 8017ea0:	f3bf 8f6f 	isb	sy
 8017ea4:	f3bf 8f4f 	dsb	sy
 8017ea8:	61fb      	str	r3, [r7, #28]
}
 8017eaa:	bf00      	nop
 8017eac:	e7fe      	b.n	8017eac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017eae:	f001 facf 	bl	8019450 <xTaskGetSchedulerState>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d102      	bne.n	8017ebe <xQueueReceive+0x6e>
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d101      	bne.n	8017ec2 <xQueueReceive+0x72>
 8017ebe:	2301      	movs	r3, #1
 8017ec0:	e000      	b.n	8017ec4 <xQueueReceive+0x74>
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d10a      	bne.n	8017ede <xQueueReceive+0x8e>
	__asm volatile
 8017ec8:	f04f 0320 	mov.w	r3, #32
 8017ecc:	f383 8811 	msr	BASEPRI, r3
 8017ed0:	f3bf 8f6f 	isb	sy
 8017ed4:	f3bf 8f4f 	dsb	sy
 8017ed8:	61bb      	str	r3, [r7, #24]
}
 8017eda:	bf00      	nop
 8017edc:	e7fe      	b.n	8017edc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017ede:	f002 f931 	bl	801a144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ee6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d01f      	beq.n	8017f2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017eee:	68b9      	ldr	r1, [r7, #8]
 8017ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ef2:	f000 fa9b 	bl	801842c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef8:	1e5a      	subs	r2, r3, #1
 8017efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017efc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f00:	691b      	ldr	r3, [r3, #16]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d00f      	beq.n	8017f26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f08:	3310      	adds	r3, #16
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f001 f902 	bl	8019114 <xTaskRemoveFromEventList>
 8017f10:	4603      	mov	r3, r0
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d007      	beq.n	8017f26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017f16:	4b3d      	ldr	r3, [pc, #244]	; (801800c <xQueueReceive+0x1bc>)
 8017f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f1c:	601a      	str	r2, [r3, #0]
 8017f1e:	f3bf 8f4f 	dsb	sy
 8017f22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017f26:	f002 f93d 	bl	801a1a4 <vPortExitCritical>
				return pdPASS;
 8017f2a:	2301      	movs	r3, #1
 8017f2c:	e069      	b.n	8018002 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d103      	bne.n	8017f3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017f34:	f002 f936 	bl	801a1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	e062      	b.n	8018002 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d106      	bne.n	8017f50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017f42:	f107 0310 	add.w	r3, r7, #16
 8017f46:	4618      	mov	r0, r3
 8017f48:	f001 f946 	bl	80191d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017f4c:	2301      	movs	r3, #1
 8017f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017f50:	f002 f928 	bl	801a1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017f54:	f000 fe9a 	bl	8018c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017f58:	f002 f8f4 	bl	801a144 <vPortEnterCritical>
 8017f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f62:	b25b      	sxtb	r3, r3
 8017f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f68:	d103      	bne.n	8017f72 <xQueueReceive+0x122>
 8017f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f6c:	2200      	movs	r2, #0
 8017f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017f78:	b25b      	sxtb	r3, r3
 8017f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f7e:	d103      	bne.n	8017f88 <xQueueReceive+0x138>
 8017f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f82:	2200      	movs	r2, #0
 8017f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017f88:	f002 f90c 	bl	801a1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017f8c:	1d3a      	adds	r2, r7, #4
 8017f8e:	f107 0310 	add.w	r3, r7, #16
 8017f92:	4611      	mov	r1, r2
 8017f94:	4618      	mov	r0, r3
 8017f96:	f001 f935 	bl	8019204 <xTaskCheckForTimeOut>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d123      	bne.n	8017fe8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fa2:	f000 fabb 	bl	801851c <prvIsQueueEmpty>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d017      	beq.n	8017fdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fae:	3324      	adds	r3, #36	; 0x24
 8017fb0:	687a      	ldr	r2, [r7, #4]
 8017fb2:	4611      	mov	r1, r2
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f001 f85d 	bl	8019074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fbc:	f000 fa5c 	bl	8018478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017fc0:	f000 fe72 	bl	8018ca8 <xTaskResumeAll>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d189      	bne.n	8017ede <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017fca:	4b10      	ldr	r3, [pc, #64]	; (801800c <xQueueReceive+0x1bc>)
 8017fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017fd0:	601a      	str	r2, [r3, #0]
 8017fd2:	f3bf 8f4f 	dsb	sy
 8017fd6:	f3bf 8f6f 	isb	sy
 8017fda:	e780      	b.n	8017ede <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fde:	f000 fa4b 	bl	8018478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017fe2:	f000 fe61 	bl	8018ca8 <xTaskResumeAll>
 8017fe6:	e77a      	b.n	8017ede <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fea:	f000 fa45 	bl	8018478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017fee:	f000 fe5b 	bl	8018ca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ff4:	f000 fa92 	bl	801851c <prvIsQueueEmpty>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	f43f af6f 	beq.w	8017ede <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018002:	4618      	mov	r0, r3
 8018004:	3730      	adds	r7, #48	; 0x30
 8018006:	46bd      	mov	sp, r7
 8018008:	bd80      	pop	{r7, pc}
 801800a:	bf00      	nop
 801800c:	e000ed04 	.word	0xe000ed04

08018010 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b08e      	sub	sp, #56	; 0x38
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
 8018018:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801801a:	2300      	movs	r3, #0
 801801c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018022:	2300      	movs	r3, #0
 8018024:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018028:	2b00      	cmp	r3, #0
 801802a:	d10a      	bne.n	8018042 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801802c:	f04f 0320 	mov.w	r3, #32
 8018030:	f383 8811 	msr	BASEPRI, r3
 8018034:	f3bf 8f6f 	isb	sy
 8018038:	f3bf 8f4f 	dsb	sy
 801803c:	623b      	str	r3, [r7, #32]
}
 801803e:	bf00      	nop
 8018040:	e7fe      	b.n	8018040 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018046:	2b00      	cmp	r3, #0
 8018048:	d00a      	beq.n	8018060 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801804a:	f04f 0320 	mov.w	r3, #32
 801804e:	f383 8811 	msr	BASEPRI, r3
 8018052:	f3bf 8f6f 	isb	sy
 8018056:	f3bf 8f4f 	dsb	sy
 801805a:	61fb      	str	r3, [r7, #28]
}
 801805c:	bf00      	nop
 801805e:	e7fe      	b.n	801805e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018060:	f001 f9f6 	bl	8019450 <xTaskGetSchedulerState>
 8018064:	4603      	mov	r3, r0
 8018066:	2b00      	cmp	r3, #0
 8018068:	d102      	bne.n	8018070 <xQueueSemaphoreTake+0x60>
 801806a:	683b      	ldr	r3, [r7, #0]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d101      	bne.n	8018074 <xQueueSemaphoreTake+0x64>
 8018070:	2301      	movs	r3, #1
 8018072:	e000      	b.n	8018076 <xQueueSemaphoreTake+0x66>
 8018074:	2300      	movs	r3, #0
 8018076:	2b00      	cmp	r3, #0
 8018078:	d10a      	bne.n	8018090 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801807a:	f04f 0320 	mov.w	r3, #32
 801807e:	f383 8811 	msr	BASEPRI, r3
 8018082:	f3bf 8f6f 	isb	sy
 8018086:	f3bf 8f4f 	dsb	sy
 801808a:	61bb      	str	r3, [r7, #24]
}
 801808c:	bf00      	nop
 801808e:	e7fe      	b.n	801808e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018090:	f002 f858 	bl	801a144 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018098:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801809c:	2b00      	cmp	r3, #0
 801809e:	d024      	beq.n	80180ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80180a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a2:	1e5a      	subs	r2, r3, #1
 80180a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80180a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d104      	bne.n	80180ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80180b0:	f001 fb8c 	bl	80197cc <pvTaskIncrementMutexHeldCount>
 80180b4:	4602      	mov	r2, r0
 80180b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80180ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180bc:	691b      	ldr	r3, [r3, #16]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d00f      	beq.n	80180e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80180c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180c4:	3310      	adds	r3, #16
 80180c6:	4618      	mov	r0, r3
 80180c8:	f001 f824 	bl	8019114 <xTaskRemoveFromEventList>
 80180cc:	4603      	mov	r3, r0
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d007      	beq.n	80180e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80180d2:	4b54      	ldr	r3, [pc, #336]	; (8018224 <xQueueSemaphoreTake+0x214>)
 80180d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180d8:	601a      	str	r2, [r3, #0]
 80180da:	f3bf 8f4f 	dsb	sy
 80180de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80180e2:	f002 f85f 	bl	801a1a4 <vPortExitCritical>
				return pdPASS;
 80180e6:	2301      	movs	r3, #1
 80180e8:	e097      	b.n	801821a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80180ea:	683b      	ldr	r3, [r7, #0]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d111      	bne.n	8018114 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80180f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d00a      	beq.n	801810c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80180f6:	f04f 0320 	mov.w	r3, #32
 80180fa:	f383 8811 	msr	BASEPRI, r3
 80180fe:	f3bf 8f6f 	isb	sy
 8018102:	f3bf 8f4f 	dsb	sy
 8018106:	617b      	str	r3, [r7, #20]
}
 8018108:	bf00      	nop
 801810a:	e7fe      	b.n	801810a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801810c:	f002 f84a 	bl	801a1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018110:	2300      	movs	r3, #0
 8018112:	e082      	b.n	801821a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018116:	2b00      	cmp	r3, #0
 8018118:	d106      	bne.n	8018128 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801811a:	f107 030c 	add.w	r3, r7, #12
 801811e:	4618      	mov	r0, r3
 8018120:	f001 f85a 	bl	80191d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018124:	2301      	movs	r3, #1
 8018126:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018128:	f002 f83c 	bl	801a1a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801812c:	f000 fdae 	bl	8018c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018130:	f002 f808 	bl	801a144 <vPortEnterCritical>
 8018134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801813a:	b25b      	sxtb	r3, r3
 801813c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018140:	d103      	bne.n	801814a <xQueueSemaphoreTake+0x13a>
 8018142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018144:	2200      	movs	r2, #0
 8018146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801814c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018150:	b25b      	sxtb	r3, r3
 8018152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018156:	d103      	bne.n	8018160 <xQueueSemaphoreTake+0x150>
 8018158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801815a:	2200      	movs	r2, #0
 801815c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018160:	f002 f820 	bl	801a1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018164:	463a      	mov	r2, r7
 8018166:	f107 030c 	add.w	r3, r7, #12
 801816a:	4611      	mov	r1, r2
 801816c:	4618      	mov	r0, r3
 801816e:	f001 f849 	bl	8019204 <xTaskCheckForTimeOut>
 8018172:	4603      	mov	r3, r0
 8018174:	2b00      	cmp	r3, #0
 8018176:	d132      	bne.n	80181de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801817a:	f000 f9cf 	bl	801851c <prvIsQueueEmpty>
 801817e:	4603      	mov	r3, r0
 8018180:	2b00      	cmp	r3, #0
 8018182:	d026      	beq.n	80181d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d109      	bne.n	80181a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801818c:	f001 ffda 	bl	801a144 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018192:	689b      	ldr	r3, [r3, #8]
 8018194:	4618      	mov	r0, r3
 8018196:	f001 f979 	bl	801948c <xTaskPriorityInherit>
 801819a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801819c:	f002 f802 	bl	801a1a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80181a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181a2:	3324      	adds	r3, #36	; 0x24
 80181a4:	683a      	ldr	r2, [r7, #0]
 80181a6:	4611      	mov	r1, r2
 80181a8:	4618      	mov	r0, r3
 80181aa:	f000 ff63 	bl	8019074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80181ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181b0:	f000 f962 	bl	8018478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80181b4:	f000 fd78 	bl	8018ca8 <xTaskResumeAll>
 80181b8:	4603      	mov	r3, r0
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	f47f af68 	bne.w	8018090 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80181c0:	4b18      	ldr	r3, [pc, #96]	; (8018224 <xQueueSemaphoreTake+0x214>)
 80181c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181c6:	601a      	str	r2, [r3, #0]
 80181c8:	f3bf 8f4f 	dsb	sy
 80181cc:	f3bf 8f6f 	isb	sy
 80181d0:	e75e      	b.n	8018090 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80181d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181d4:	f000 f950 	bl	8018478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80181d8:	f000 fd66 	bl	8018ca8 <xTaskResumeAll>
 80181dc:	e758      	b.n	8018090 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80181de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181e0:	f000 f94a 	bl	8018478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80181e4:	f000 fd60 	bl	8018ca8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80181e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181ea:	f000 f997 	bl	801851c <prvIsQueueEmpty>
 80181ee:	4603      	mov	r3, r0
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	f43f af4d 	beq.w	8018090 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80181f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d00d      	beq.n	8018218 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80181fc:	f001 ffa2 	bl	801a144 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018202:	f000 f891 	bl	8018328 <prvGetDisinheritPriorityAfterTimeout>
 8018206:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8018208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801820a:	689b      	ldr	r3, [r3, #8]
 801820c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801820e:	4618      	mov	r0, r3
 8018210:	f001 fa42 	bl	8019698 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8018214:	f001 ffc6 	bl	801a1a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801821a:	4618      	mov	r0, r3
 801821c:	3738      	adds	r7, #56	; 0x38
 801821e:	46bd      	mov	sp, r7
 8018220:	bd80      	pop	{r7, pc}
 8018222:	bf00      	nop
 8018224:	e000ed04 	.word	0xe000ed04

08018228 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b08e      	sub	sp, #56	; 0x38
 801822c:	af00      	add	r7, sp, #0
 801822e:	60f8      	str	r0, [r7, #12]
 8018230:	60b9      	str	r1, [r7, #8]
 8018232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801823a:	2b00      	cmp	r3, #0
 801823c:	d10a      	bne.n	8018254 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801823e:	f04f 0320 	mov.w	r3, #32
 8018242:	f383 8811 	msr	BASEPRI, r3
 8018246:	f3bf 8f6f 	isb	sy
 801824a:	f3bf 8f4f 	dsb	sy
 801824e:	623b      	str	r3, [r7, #32]
}
 8018250:	bf00      	nop
 8018252:	e7fe      	b.n	8018252 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d103      	bne.n	8018262 <xQueueReceiveFromISR+0x3a>
 801825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801825e:	2b00      	cmp	r3, #0
 8018260:	d101      	bne.n	8018266 <xQueueReceiveFromISR+0x3e>
 8018262:	2301      	movs	r3, #1
 8018264:	e000      	b.n	8018268 <xQueueReceiveFromISR+0x40>
 8018266:	2300      	movs	r3, #0
 8018268:	2b00      	cmp	r3, #0
 801826a:	d10a      	bne.n	8018282 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801826c:	f04f 0320 	mov.w	r3, #32
 8018270:	f383 8811 	msr	BASEPRI, r3
 8018274:	f3bf 8f6f 	isb	sy
 8018278:	f3bf 8f4f 	dsb	sy
 801827c:	61fb      	str	r3, [r7, #28]
}
 801827e:	bf00      	nop
 8018280:	e7fe      	b.n	8018280 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018282:	f002 f841 	bl	801a308 <vPortValidateInterruptPriority>
	__asm volatile
 8018286:	f3ef 8211 	mrs	r2, BASEPRI
 801828a:	f04f 0320 	mov.w	r3, #32
 801828e:	f383 8811 	msr	BASEPRI, r3
 8018292:	f3bf 8f6f 	isb	sy
 8018296:	f3bf 8f4f 	dsb	sy
 801829a:	61ba      	str	r2, [r7, #24]
 801829c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801829e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80182a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80182a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80182a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d02f      	beq.n	801830e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80182ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80182b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80182b8:	68b9      	ldr	r1, [r7, #8]
 80182ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80182bc:	f000 f8b6 	bl	801842c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80182c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c2:	1e5a      	subs	r2, r3, #1
 80182c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80182c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80182cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182d0:	d112      	bne.n	80182f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80182d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d4:	691b      	ldr	r3, [r3, #16]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d016      	beq.n	8018308 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80182da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182dc:	3310      	adds	r3, #16
 80182de:	4618      	mov	r0, r3
 80182e0:	f000 ff18 	bl	8019114 <xTaskRemoveFromEventList>
 80182e4:	4603      	mov	r3, r0
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d00e      	beq.n	8018308 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d00b      	beq.n	8018308 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	2201      	movs	r2, #1
 80182f4:	601a      	str	r2, [r3, #0]
 80182f6:	e007      	b.n	8018308 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80182f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80182fc:	3301      	adds	r3, #1
 80182fe:	b2db      	uxtb	r3, r3
 8018300:	b25a      	sxtb	r2, r3
 8018302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8018308:	2301      	movs	r3, #1
 801830a:	637b      	str	r3, [r7, #52]	; 0x34
 801830c:	e001      	b.n	8018312 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801830e:	2300      	movs	r3, #0
 8018310:	637b      	str	r3, [r7, #52]	; 0x34
 8018312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018314:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018316:	693b      	ldr	r3, [r7, #16]
 8018318:	f383 8811 	msr	BASEPRI, r3
}
 801831c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018320:	4618      	mov	r0, r3
 8018322:	3738      	adds	r7, #56	; 0x38
 8018324:	46bd      	mov	sp, r7
 8018326:	bd80      	pop	{r7, pc}

08018328 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018328:	b480      	push	{r7}
 801832a:	b085      	sub	sp, #20
 801832c:	af00      	add	r7, sp, #0
 801832e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018334:	2b00      	cmp	r3, #0
 8018336:	d006      	beq.n	8018346 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	f1c3 0307 	rsb	r3, r3, #7
 8018342:	60fb      	str	r3, [r7, #12]
 8018344:	e001      	b.n	801834a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018346:	2300      	movs	r3, #0
 8018348:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801834a:	68fb      	ldr	r3, [r7, #12]
	}
 801834c:	4618      	mov	r0, r3
 801834e:	3714      	adds	r7, #20
 8018350:	46bd      	mov	sp, r7
 8018352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018356:	4770      	bx	lr

08018358 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b086      	sub	sp, #24
 801835c:	af00      	add	r7, sp, #0
 801835e:	60f8      	str	r0, [r7, #12]
 8018360:	60b9      	str	r1, [r7, #8]
 8018362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018364:	2300      	movs	r3, #0
 8018366:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801836c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018372:	2b00      	cmp	r3, #0
 8018374:	d10d      	bne.n	8018392 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d14d      	bne.n	801841a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	689b      	ldr	r3, [r3, #8]
 8018382:	4618      	mov	r0, r3
 8018384:	f001 f902 	bl	801958c <xTaskPriorityDisinherit>
 8018388:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	2200      	movs	r2, #0
 801838e:	609a      	str	r2, [r3, #8]
 8018390:	e043      	b.n	801841a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	2b00      	cmp	r3, #0
 8018396:	d119      	bne.n	80183cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	6858      	ldr	r0, [r3, #4]
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183a0:	461a      	mov	r2, r3
 80183a2:	68b9      	ldr	r1, [r7, #8]
 80183a4:	f005 fd4e 	bl	801de44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	685a      	ldr	r2, [r3, #4]
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183b0:	441a      	add	r2, r3
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	685a      	ldr	r2, [r3, #4]
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	689b      	ldr	r3, [r3, #8]
 80183be:	429a      	cmp	r2, r3
 80183c0:	d32b      	bcc.n	801841a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	681a      	ldr	r2, [r3, #0]
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	605a      	str	r2, [r3, #4]
 80183ca:	e026      	b.n	801841a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	68d8      	ldr	r0, [r3, #12]
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183d4:	461a      	mov	r2, r3
 80183d6:	68b9      	ldr	r1, [r7, #8]
 80183d8:	f005 fd34 	bl	801de44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	68da      	ldr	r2, [r3, #12]
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183e4:	425b      	negs	r3, r3
 80183e6:	441a      	add	r2, r3
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	68da      	ldr	r2, [r3, #12]
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	429a      	cmp	r2, r3
 80183f6:	d207      	bcs.n	8018408 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	689a      	ldr	r2, [r3, #8]
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018400:	425b      	negs	r3, r3
 8018402:	441a      	add	r2, r3
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2b02      	cmp	r3, #2
 801840c:	d105      	bne.n	801841a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801840e:	693b      	ldr	r3, [r7, #16]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d002      	beq.n	801841a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018414:	693b      	ldr	r3, [r7, #16]
 8018416:	3b01      	subs	r3, #1
 8018418:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801841a:	693b      	ldr	r3, [r7, #16]
 801841c:	1c5a      	adds	r2, r3, #1
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018422:	697b      	ldr	r3, [r7, #20]
}
 8018424:	4618      	mov	r0, r3
 8018426:	3718      	adds	r7, #24
 8018428:	46bd      	mov	sp, r7
 801842a:	bd80      	pop	{r7, pc}

0801842c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b082      	sub	sp, #8
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
 8018434:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801843a:	2b00      	cmp	r3, #0
 801843c:	d018      	beq.n	8018470 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	68da      	ldr	r2, [r3, #12]
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018446:	441a      	add	r2, r3
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	68da      	ldr	r2, [r3, #12]
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	689b      	ldr	r3, [r3, #8]
 8018454:	429a      	cmp	r2, r3
 8018456:	d303      	bcc.n	8018460 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681a      	ldr	r2, [r3, #0]
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	68d9      	ldr	r1, [r3, #12]
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018468:	461a      	mov	r2, r3
 801846a:	6838      	ldr	r0, [r7, #0]
 801846c:	f005 fcea 	bl	801de44 <memcpy>
	}
}
 8018470:	bf00      	nop
 8018472:	3708      	adds	r7, #8
 8018474:	46bd      	mov	sp, r7
 8018476:	bd80      	pop	{r7, pc}

08018478 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b084      	sub	sp, #16
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018480:	f001 fe60 	bl	801a144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801848a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801848c:	e011      	b.n	80184b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018492:	2b00      	cmp	r3, #0
 8018494:	d012      	beq.n	80184bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	3324      	adds	r3, #36	; 0x24
 801849a:	4618      	mov	r0, r3
 801849c:	f000 fe3a 	bl	8019114 <xTaskRemoveFromEventList>
 80184a0:	4603      	mov	r3, r0
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d001      	beq.n	80184aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80184a6:	f000 ff0f 	bl	80192c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80184aa:	7bfb      	ldrb	r3, [r7, #15]
 80184ac:	3b01      	subs	r3, #1
 80184ae:	b2db      	uxtb	r3, r3
 80184b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80184b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	dce9      	bgt.n	801848e <prvUnlockQueue+0x16>
 80184ba:	e000      	b.n	80184be <prvUnlockQueue+0x46>
					break;
 80184bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	22ff      	movs	r2, #255	; 0xff
 80184c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80184c6:	f001 fe6d 	bl	801a1a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80184ca:	f001 fe3b 	bl	801a144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80184d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80184d6:	e011      	b.n	80184fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	691b      	ldr	r3, [r3, #16]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d012      	beq.n	8018506 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	3310      	adds	r3, #16
 80184e4:	4618      	mov	r0, r3
 80184e6:	f000 fe15 	bl	8019114 <xTaskRemoveFromEventList>
 80184ea:	4603      	mov	r3, r0
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d001      	beq.n	80184f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80184f0:	f000 feea 	bl	80192c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80184f4:	7bbb      	ldrb	r3, [r7, #14]
 80184f6:	3b01      	subs	r3, #1
 80184f8:	b2db      	uxtb	r3, r3
 80184fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80184fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018500:	2b00      	cmp	r3, #0
 8018502:	dce9      	bgt.n	80184d8 <prvUnlockQueue+0x60>
 8018504:	e000      	b.n	8018508 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018506:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	22ff      	movs	r2, #255	; 0xff
 801850c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018510:	f001 fe48 	bl	801a1a4 <vPortExitCritical>
}
 8018514:	bf00      	nop
 8018516:	3710      	adds	r7, #16
 8018518:	46bd      	mov	sp, r7
 801851a:	bd80      	pop	{r7, pc}

0801851c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801851c:	b580      	push	{r7, lr}
 801851e:	b084      	sub	sp, #16
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018524:	f001 fe0e 	bl	801a144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801852c:	2b00      	cmp	r3, #0
 801852e:	d102      	bne.n	8018536 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018530:	2301      	movs	r3, #1
 8018532:	60fb      	str	r3, [r7, #12]
 8018534:	e001      	b.n	801853a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018536:	2300      	movs	r3, #0
 8018538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801853a:	f001 fe33 	bl	801a1a4 <vPortExitCritical>

	return xReturn;
 801853e:	68fb      	ldr	r3, [r7, #12]
}
 8018540:	4618      	mov	r0, r3
 8018542:	3710      	adds	r7, #16
 8018544:	46bd      	mov	sp, r7
 8018546:	bd80      	pop	{r7, pc}

08018548 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b084      	sub	sp, #16
 801854c:	af00      	add	r7, sp, #0
 801854e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018550:	f001 fdf8 	bl	801a144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801855c:	429a      	cmp	r2, r3
 801855e:	d102      	bne.n	8018566 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018560:	2301      	movs	r3, #1
 8018562:	60fb      	str	r3, [r7, #12]
 8018564:	e001      	b.n	801856a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018566:	2300      	movs	r3, #0
 8018568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801856a:	f001 fe1b 	bl	801a1a4 <vPortExitCritical>

	return xReturn;
 801856e:	68fb      	ldr	r3, [r7, #12]
}
 8018570:	4618      	mov	r0, r3
 8018572:	3710      	adds	r7, #16
 8018574:	46bd      	mov	sp, r7
 8018576:	bd80      	pop	{r7, pc}

08018578 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018578:	b480      	push	{r7}
 801857a:	b085      	sub	sp, #20
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
 8018580:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018582:	2300      	movs	r3, #0
 8018584:	60fb      	str	r3, [r7, #12]
 8018586:	e014      	b.n	80185b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018588:	4a0f      	ldr	r2, [pc, #60]	; (80185c8 <vQueueAddToRegistry+0x50>)
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d10b      	bne.n	80185ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018594:	490c      	ldr	r1, [pc, #48]	; (80185c8 <vQueueAddToRegistry+0x50>)
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	683a      	ldr	r2, [r7, #0]
 801859a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801859e:	4a0a      	ldr	r2, [pc, #40]	; (80185c8 <vQueueAddToRegistry+0x50>)
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	00db      	lsls	r3, r3, #3
 80185a4:	4413      	add	r3, r2
 80185a6:	687a      	ldr	r2, [r7, #4]
 80185a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80185aa:	e006      	b.n	80185ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	3301      	adds	r3, #1
 80185b0:	60fb      	str	r3, [r7, #12]
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	2b63      	cmp	r3, #99	; 0x63
 80185b6:	d9e7      	bls.n	8018588 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80185b8:	bf00      	nop
 80185ba:	bf00      	nop
 80185bc:	3714      	adds	r7, #20
 80185be:	46bd      	mov	sp, r7
 80185c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c4:	4770      	bx	lr
 80185c6:	bf00      	nop
 80185c8:	20018f18 	.word	0x20018f18

080185cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b086      	sub	sp, #24
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	60f8      	str	r0, [r7, #12]
 80185d4:	60b9      	str	r1, [r7, #8]
 80185d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80185dc:	f001 fdb2 	bl	801a144 <vPortEnterCritical>
 80185e0:	697b      	ldr	r3, [r7, #20]
 80185e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80185e6:	b25b      	sxtb	r3, r3
 80185e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185ec:	d103      	bne.n	80185f6 <vQueueWaitForMessageRestricted+0x2a>
 80185ee:	697b      	ldr	r3, [r7, #20]
 80185f0:	2200      	movs	r2, #0
 80185f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80185f6:	697b      	ldr	r3, [r7, #20]
 80185f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80185fc:	b25b      	sxtb	r3, r3
 80185fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018602:	d103      	bne.n	801860c <vQueueWaitForMessageRestricted+0x40>
 8018604:	697b      	ldr	r3, [r7, #20]
 8018606:	2200      	movs	r2, #0
 8018608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801860c:	f001 fdca 	bl	801a1a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018610:	697b      	ldr	r3, [r7, #20]
 8018612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018614:	2b00      	cmp	r3, #0
 8018616:	d106      	bne.n	8018626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018618:	697b      	ldr	r3, [r7, #20]
 801861a:	3324      	adds	r3, #36	; 0x24
 801861c:	687a      	ldr	r2, [r7, #4]
 801861e:	68b9      	ldr	r1, [r7, #8]
 8018620:	4618      	mov	r0, r3
 8018622:	f000 fd4b 	bl	80190bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018626:	6978      	ldr	r0, [r7, #20]
 8018628:	f7ff ff26 	bl	8018478 <prvUnlockQueue>
	}
 801862c:	bf00      	nop
 801862e:	3718      	adds	r7, #24
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}

08018634 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018634:	b580      	push	{r7, lr}
 8018636:	b08c      	sub	sp, #48	; 0x30
 8018638:	af04      	add	r7, sp, #16
 801863a:	60f8      	str	r0, [r7, #12]
 801863c:	60b9      	str	r1, [r7, #8]
 801863e:	603b      	str	r3, [r7, #0]
 8018640:	4613      	mov	r3, r2
 8018642:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018644:	88fb      	ldrh	r3, [r7, #6]
 8018646:	009b      	lsls	r3, r3, #2
 8018648:	4618      	mov	r0, r3
 801864a:	f001 fe9d 	bl	801a388 <pvPortMalloc>
 801864e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d00e      	beq.n	8018674 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018656:	2060      	movs	r0, #96	; 0x60
 8018658:	f001 fe96 	bl	801a388 <pvPortMalloc>
 801865c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801865e:	69fb      	ldr	r3, [r7, #28]
 8018660:	2b00      	cmp	r3, #0
 8018662:	d003      	beq.n	801866c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018664:	69fb      	ldr	r3, [r7, #28]
 8018666:	697a      	ldr	r2, [r7, #20]
 8018668:	631a      	str	r2, [r3, #48]	; 0x30
 801866a:	e005      	b.n	8018678 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801866c:	6978      	ldr	r0, [r7, #20]
 801866e:	f001 ff4f 	bl	801a510 <vPortFree>
 8018672:	e001      	b.n	8018678 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018674:	2300      	movs	r3, #0
 8018676:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018678:	69fb      	ldr	r3, [r7, #28]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d013      	beq.n	80186a6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801867e:	88fa      	ldrh	r2, [r7, #6]
 8018680:	2300      	movs	r3, #0
 8018682:	9303      	str	r3, [sp, #12]
 8018684:	69fb      	ldr	r3, [r7, #28]
 8018686:	9302      	str	r3, [sp, #8]
 8018688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801868a:	9301      	str	r3, [sp, #4]
 801868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801868e:	9300      	str	r3, [sp, #0]
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	68b9      	ldr	r1, [r7, #8]
 8018694:	68f8      	ldr	r0, [r7, #12]
 8018696:	f000 f80e 	bl	80186b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801869a:	69f8      	ldr	r0, [r7, #28]
 801869c:	f000 f89e 	bl	80187dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80186a0:	2301      	movs	r3, #1
 80186a2:	61bb      	str	r3, [r7, #24]
 80186a4:	e002      	b.n	80186ac <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80186a6:	f04f 33ff 	mov.w	r3, #4294967295
 80186aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80186ac:	69bb      	ldr	r3, [r7, #24]
	}
 80186ae:	4618      	mov	r0, r3
 80186b0:	3720      	adds	r7, #32
 80186b2:	46bd      	mov	sp, r7
 80186b4:	bd80      	pop	{r7, pc}

080186b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80186b6:	b580      	push	{r7, lr}
 80186b8:	b088      	sub	sp, #32
 80186ba:	af00      	add	r7, sp, #0
 80186bc:	60f8      	str	r0, [r7, #12]
 80186be:	60b9      	str	r1, [r7, #8]
 80186c0:	607a      	str	r2, [r7, #4]
 80186c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80186c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	009b      	lsls	r3, r3, #2
 80186cc:	461a      	mov	r2, r3
 80186ce:	21a5      	movs	r1, #165	; 0xa5
 80186d0:	f005 fbe0 	bl	801de94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80186d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80186de:	3b01      	subs	r3, #1
 80186e0:	009b      	lsls	r3, r3, #2
 80186e2:	4413      	add	r3, r2
 80186e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80186e6:	69bb      	ldr	r3, [r7, #24]
 80186e8:	f023 0307 	bic.w	r3, r3, #7
 80186ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80186ee:	69bb      	ldr	r3, [r7, #24]
 80186f0:	f003 0307 	and.w	r3, r3, #7
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d00a      	beq.n	801870e <prvInitialiseNewTask+0x58>
	__asm volatile
 80186f8:	f04f 0320 	mov.w	r3, #32
 80186fc:	f383 8811 	msr	BASEPRI, r3
 8018700:	f3bf 8f6f 	isb	sy
 8018704:	f3bf 8f4f 	dsb	sy
 8018708:	617b      	str	r3, [r7, #20]
}
 801870a:	bf00      	nop
 801870c:	e7fe      	b.n	801870c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801870e:	68bb      	ldr	r3, [r7, #8]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d01f      	beq.n	8018754 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018714:	2300      	movs	r3, #0
 8018716:	61fb      	str	r3, [r7, #28]
 8018718:	e012      	b.n	8018740 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801871a:	68ba      	ldr	r2, [r7, #8]
 801871c:	69fb      	ldr	r3, [r7, #28]
 801871e:	4413      	add	r3, r2
 8018720:	7819      	ldrb	r1, [r3, #0]
 8018722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018724:	69fb      	ldr	r3, [r7, #28]
 8018726:	4413      	add	r3, r2
 8018728:	3334      	adds	r3, #52	; 0x34
 801872a:	460a      	mov	r2, r1
 801872c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801872e:	68ba      	ldr	r2, [r7, #8]
 8018730:	69fb      	ldr	r3, [r7, #28]
 8018732:	4413      	add	r3, r2
 8018734:	781b      	ldrb	r3, [r3, #0]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d006      	beq.n	8018748 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801873a:	69fb      	ldr	r3, [r7, #28]
 801873c:	3301      	adds	r3, #1
 801873e:	61fb      	str	r3, [r7, #28]
 8018740:	69fb      	ldr	r3, [r7, #28]
 8018742:	2b0f      	cmp	r3, #15
 8018744:	d9e9      	bls.n	801871a <prvInitialiseNewTask+0x64>
 8018746:	e000      	b.n	801874a <prvInitialiseNewTask+0x94>
			{
				break;
 8018748:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801874c:	2200      	movs	r2, #0
 801874e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018752:	e003      	b.n	801875c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018756:	2200      	movs	r2, #0
 8018758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801875e:	2b06      	cmp	r3, #6
 8018760:	d901      	bls.n	8018766 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018762:	2306      	movs	r3, #6
 8018764:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801876a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801876e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018770:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018774:	2200      	movs	r2, #0
 8018776:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801877a:	3304      	adds	r3, #4
 801877c:	4618      	mov	r0, r3
 801877e:	f7fe ffb5 	bl	80176ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018784:	3318      	adds	r3, #24
 8018786:	4618      	mov	r0, r3
 8018788:	f7fe ffb0 	bl	80176ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801878e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018790:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018794:	f1c3 0207 	rsb	r2, r3, #7
 8018798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801879a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801879e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80187a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187a4:	2200      	movs	r2, #0
 80187a6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80187a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187aa:	2200      	movs	r2, #0
 80187ac:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80187ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b0:	2200      	movs	r2, #0
 80187b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80187b6:	683a      	ldr	r2, [r7, #0]
 80187b8:	68f9      	ldr	r1, [r7, #12]
 80187ba:	69b8      	ldr	r0, [r7, #24]
 80187bc:	f001 fb92 	bl	8019ee4 <pxPortInitialiseStack>
 80187c0:	4602      	mov	r2, r0
 80187c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80187c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d002      	beq.n	80187d2 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80187cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80187d2:	bf00      	nop
 80187d4:	3720      	adds	r7, #32
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}
	...

080187dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b082      	sub	sp, #8
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80187e4:	f001 fcae 	bl	801a144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80187e8:	4b2c      	ldr	r3, [pc, #176]	; (801889c <prvAddNewTaskToReadyList+0xc0>)
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	3301      	adds	r3, #1
 80187ee:	4a2b      	ldr	r2, [pc, #172]	; (801889c <prvAddNewTaskToReadyList+0xc0>)
 80187f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80187f2:	4b2b      	ldr	r3, [pc, #172]	; (80188a0 <prvAddNewTaskToReadyList+0xc4>)
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d109      	bne.n	801880e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80187fa:	4a29      	ldr	r2, [pc, #164]	; (80188a0 <prvAddNewTaskToReadyList+0xc4>)
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018800:	4b26      	ldr	r3, [pc, #152]	; (801889c <prvAddNewTaskToReadyList+0xc0>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	2b01      	cmp	r3, #1
 8018806:	d110      	bne.n	801882a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018808:	f000 fd84 	bl	8019314 <prvInitialiseTaskLists>
 801880c:	e00d      	b.n	801882a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801880e:	4b25      	ldr	r3, [pc, #148]	; (80188a4 <prvAddNewTaskToReadyList+0xc8>)
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d109      	bne.n	801882a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018816:	4b22      	ldr	r3, [pc, #136]	; (80188a0 <prvAddNewTaskToReadyList+0xc4>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018820:	429a      	cmp	r2, r3
 8018822:	d802      	bhi.n	801882a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018824:	4a1e      	ldr	r2, [pc, #120]	; (80188a0 <prvAddNewTaskToReadyList+0xc4>)
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801882a:	4b1f      	ldr	r3, [pc, #124]	; (80188a8 <prvAddNewTaskToReadyList+0xcc>)
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	3301      	adds	r3, #1
 8018830:	4a1d      	ldr	r2, [pc, #116]	; (80188a8 <prvAddNewTaskToReadyList+0xcc>)
 8018832:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018834:	4b1c      	ldr	r3, [pc, #112]	; (80188a8 <prvAddNewTaskToReadyList+0xcc>)
 8018836:	681a      	ldr	r2, [r3, #0]
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018840:	2201      	movs	r2, #1
 8018842:	409a      	lsls	r2, r3
 8018844:	4b19      	ldr	r3, [pc, #100]	; (80188ac <prvAddNewTaskToReadyList+0xd0>)
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	4313      	orrs	r3, r2
 801884a:	4a18      	ldr	r2, [pc, #96]	; (80188ac <prvAddNewTaskToReadyList+0xd0>)
 801884c:	6013      	str	r3, [r2, #0]
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018852:	4613      	mov	r3, r2
 8018854:	009b      	lsls	r3, r3, #2
 8018856:	4413      	add	r3, r2
 8018858:	009b      	lsls	r3, r3, #2
 801885a:	4a15      	ldr	r2, [pc, #84]	; (80188b0 <prvAddNewTaskToReadyList+0xd4>)
 801885c:	441a      	add	r2, r3
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	3304      	adds	r3, #4
 8018862:	4619      	mov	r1, r3
 8018864:	4610      	mov	r0, r2
 8018866:	f7fe ff4e 	bl	8017706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801886a:	f001 fc9b 	bl	801a1a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801886e:	4b0d      	ldr	r3, [pc, #52]	; (80188a4 <prvAddNewTaskToReadyList+0xc8>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d00e      	beq.n	8018894 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018876:	4b0a      	ldr	r3, [pc, #40]	; (80188a0 <prvAddNewTaskToReadyList+0xc4>)
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018880:	429a      	cmp	r2, r3
 8018882:	d207      	bcs.n	8018894 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018884:	4b0b      	ldr	r3, [pc, #44]	; (80188b4 <prvAddNewTaskToReadyList+0xd8>)
 8018886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801888a:	601a      	str	r2, [r3, #0]
 801888c:	f3bf 8f4f 	dsb	sy
 8018890:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018894:	bf00      	nop
 8018896:	3708      	adds	r7, #8
 8018898:	46bd      	mov	sp, r7
 801889a:	bd80      	pop	{r7, pc}
 801889c:	20000de4 	.word	0x20000de4
 80188a0:	20000ce4 	.word	0x20000ce4
 80188a4:	20000df0 	.word	0x20000df0
 80188a8:	20000e00 	.word	0x20000e00
 80188ac:	20000dec 	.word	0x20000dec
 80188b0:	20000ce8 	.word	0x20000ce8
 80188b4:	e000ed04 	.word	0xe000ed04

080188b8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b084      	sub	sp, #16
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80188c0:	f001 fc40 	bl	801a144 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d102      	bne.n	80188d0 <vTaskSuspend+0x18>
 80188ca:	4b3c      	ldr	r3, [pc, #240]	; (80189bc <vTaskSuspend+0x104>)
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	e000      	b.n	80188d2 <vTaskSuspend+0x1a>
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	3304      	adds	r3, #4
 80188d8:	4618      	mov	r0, r3
 80188da:	f7fe ff71 	bl	80177c0 <uxListRemove>
 80188de:	4603      	mov	r3, r0
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d115      	bne.n	8018910 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188e8:	4935      	ldr	r1, [pc, #212]	; (80189c0 <vTaskSuspend+0x108>)
 80188ea:	4613      	mov	r3, r2
 80188ec:	009b      	lsls	r3, r3, #2
 80188ee:	4413      	add	r3, r2
 80188f0:	009b      	lsls	r3, r3, #2
 80188f2:	440b      	add	r3, r1
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d10a      	bne.n	8018910 <vTaskSuspend+0x58>
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188fe:	2201      	movs	r2, #1
 8018900:	fa02 f303 	lsl.w	r3, r2, r3
 8018904:	43da      	mvns	r2, r3
 8018906:	4b2f      	ldr	r3, [pc, #188]	; (80189c4 <vTaskSuspend+0x10c>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	4013      	ands	r3, r2
 801890c:	4a2d      	ldr	r2, [pc, #180]	; (80189c4 <vTaskSuspend+0x10c>)
 801890e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018914:	2b00      	cmp	r3, #0
 8018916:	d004      	beq.n	8018922 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	3318      	adds	r3, #24
 801891c:	4618      	mov	r0, r3
 801891e:	f7fe ff4f 	bl	80177c0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	3304      	adds	r3, #4
 8018926:	4619      	mov	r1, r3
 8018928:	4827      	ldr	r0, [pc, #156]	; (80189c8 <vTaskSuspend+0x110>)
 801892a:	f7fe feec 	bl	8017706 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018934:	b2db      	uxtb	r3, r3
 8018936:	2b01      	cmp	r3, #1
 8018938:	d103      	bne.n	8018942 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	2200      	movs	r2, #0
 801893e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8018942:	f001 fc2f 	bl	801a1a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8018946:	4b21      	ldr	r3, [pc, #132]	; (80189cc <vTaskSuspend+0x114>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d005      	beq.n	801895a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801894e:	f001 fbf9 	bl	801a144 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018952:	f000 fd5d 	bl	8019410 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8018956:	f001 fc25 	bl	801a1a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801895a:	4b18      	ldr	r3, [pc, #96]	; (80189bc <vTaskSuspend+0x104>)
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	68fa      	ldr	r2, [r7, #12]
 8018960:	429a      	cmp	r2, r3
 8018962:	d127      	bne.n	80189b4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8018964:	4b19      	ldr	r3, [pc, #100]	; (80189cc <vTaskSuspend+0x114>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d017      	beq.n	801899c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801896c:	4b18      	ldr	r3, [pc, #96]	; (80189d0 <vTaskSuspend+0x118>)
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d00a      	beq.n	801898a <vTaskSuspend+0xd2>
	__asm volatile
 8018974:	f04f 0320 	mov.w	r3, #32
 8018978:	f383 8811 	msr	BASEPRI, r3
 801897c:	f3bf 8f6f 	isb	sy
 8018980:	f3bf 8f4f 	dsb	sy
 8018984:	60bb      	str	r3, [r7, #8]
}
 8018986:	bf00      	nop
 8018988:	e7fe      	b.n	8018988 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801898a:	4b12      	ldr	r3, [pc, #72]	; (80189d4 <vTaskSuspend+0x11c>)
 801898c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018990:	601a      	str	r2, [r3, #0]
 8018992:	f3bf 8f4f 	dsb	sy
 8018996:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801899a:	e00b      	b.n	80189b4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801899c:	4b0a      	ldr	r3, [pc, #40]	; (80189c8 <vTaskSuspend+0x110>)
 801899e:	681a      	ldr	r2, [r3, #0]
 80189a0:	4b0d      	ldr	r3, [pc, #52]	; (80189d8 <vTaskSuspend+0x120>)
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	429a      	cmp	r2, r3
 80189a6:	d103      	bne.n	80189b0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80189a8:	4b04      	ldr	r3, [pc, #16]	; (80189bc <vTaskSuspend+0x104>)
 80189aa:	2200      	movs	r2, #0
 80189ac:	601a      	str	r2, [r3, #0]
	}
 80189ae:	e001      	b.n	80189b4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80189b0:	f000 fafa 	bl	8018fa8 <vTaskSwitchContext>
	}
 80189b4:	bf00      	nop
 80189b6:	3710      	adds	r7, #16
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}
 80189bc:	20000ce4 	.word	0x20000ce4
 80189c0:	20000ce8 	.word	0x20000ce8
 80189c4:	20000dec 	.word	0x20000dec
 80189c8:	20000dd0 	.word	0x20000dd0
 80189cc:	20000df0 	.word	0x20000df0
 80189d0:	20000e0c 	.word	0x20000e0c
 80189d4:	e000ed04 	.word	0xe000ed04
 80189d8:	20000de4 	.word	0x20000de4

080189dc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80189dc:	b480      	push	{r7}
 80189de:	b087      	sub	sp, #28
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80189e4:	2300      	movs	r3, #0
 80189e6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d10a      	bne.n	8018a08 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80189f2:	f04f 0320 	mov.w	r3, #32
 80189f6:	f383 8811 	msr	BASEPRI, r3
 80189fa:	f3bf 8f6f 	isb	sy
 80189fe:	f3bf 8f4f 	dsb	sy
 8018a02:	60fb      	str	r3, [r7, #12]
}
 8018a04:	bf00      	nop
 8018a06:	e7fe      	b.n	8018a06 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018a08:	693b      	ldr	r3, [r7, #16]
 8018a0a:	695b      	ldr	r3, [r3, #20]
 8018a0c:	4a0a      	ldr	r2, [pc, #40]	; (8018a38 <prvTaskIsTaskSuspended+0x5c>)
 8018a0e:	4293      	cmp	r3, r2
 8018a10:	d10a      	bne.n	8018a28 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018a12:	693b      	ldr	r3, [r7, #16]
 8018a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a16:	4a09      	ldr	r2, [pc, #36]	; (8018a3c <prvTaskIsTaskSuspended+0x60>)
 8018a18:	4293      	cmp	r3, r2
 8018a1a:	d005      	beq.n	8018a28 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018a1c:	693b      	ldr	r3, [r7, #16]
 8018a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d101      	bne.n	8018a28 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8018a24:	2301      	movs	r3, #1
 8018a26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018a28:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	371c      	adds	r7, #28
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a34:	4770      	bx	lr
 8018a36:	bf00      	nop
 8018a38:	20000dd0 	.word	0x20000dd0
 8018a3c:	20000da4 	.word	0x20000da4

08018a40 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b084      	sub	sp, #16
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d10a      	bne.n	8018a68 <vTaskResume+0x28>
	__asm volatile
 8018a52:	f04f 0320 	mov.w	r3, #32
 8018a56:	f383 8811 	msr	BASEPRI, r3
 8018a5a:	f3bf 8f6f 	isb	sy
 8018a5e:	f3bf 8f4f 	dsb	sy
 8018a62:	60bb      	str	r3, [r7, #8]
}
 8018a64:	bf00      	nop
 8018a66:	e7fe      	b.n	8018a66 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018a68:	4b20      	ldr	r3, [pc, #128]	; (8018aec <vTaskResume+0xac>)
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	68fa      	ldr	r2, [r7, #12]
 8018a6e:	429a      	cmp	r2, r3
 8018a70:	d037      	beq.n	8018ae2 <vTaskResume+0xa2>
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d034      	beq.n	8018ae2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8018a78:	f001 fb64 	bl	801a144 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018a7c:	68f8      	ldr	r0, [r7, #12]
 8018a7e:	f7ff ffad 	bl	80189dc <prvTaskIsTaskSuspended>
 8018a82:	4603      	mov	r3, r0
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d02a      	beq.n	8018ade <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	3304      	adds	r3, #4
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f7fe fe97 	bl	80177c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a96:	2201      	movs	r2, #1
 8018a98:	409a      	lsls	r2, r3
 8018a9a:	4b15      	ldr	r3, [pc, #84]	; (8018af0 <vTaskResume+0xb0>)
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	4313      	orrs	r3, r2
 8018aa0:	4a13      	ldr	r2, [pc, #76]	; (8018af0 <vTaskResume+0xb0>)
 8018aa2:	6013      	str	r3, [r2, #0]
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018aa8:	4613      	mov	r3, r2
 8018aaa:	009b      	lsls	r3, r3, #2
 8018aac:	4413      	add	r3, r2
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	4a10      	ldr	r2, [pc, #64]	; (8018af4 <vTaskResume+0xb4>)
 8018ab2:	441a      	add	r2, r3
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	3304      	adds	r3, #4
 8018ab8:	4619      	mov	r1, r3
 8018aba:	4610      	mov	r0, r2
 8018abc:	f7fe fe23 	bl	8017706 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ac4:	4b09      	ldr	r3, [pc, #36]	; (8018aec <vTaskResume+0xac>)
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aca:	429a      	cmp	r2, r3
 8018acc:	d307      	bcc.n	8018ade <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018ace:	4b0a      	ldr	r3, [pc, #40]	; (8018af8 <vTaskResume+0xb8>)
 8018ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ad4:	601a      	str	r2, [r3, #0]
 8018ad6:	f3bf 8f4f 	dsb	sy
 8018ada:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018ade:	f001 fb61 	bl	801a1a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018ae2:	bf00      	nop
 8018ae4:	3710      	adds	r7, #16
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	bd80      	pop	{r7, pc}
 8018aea:	bf00      	nop
 8018aec:	20000ce4 	.word	0x20000ce4
 8018af0:	20000dec 	.word	0x20000dec
 8018af4:	20000ce8 	.word	0x20000ce8
 8018af8:	e000ed04 	.word	0xe000ed04

08018afc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b08a      	sub	sp, #40	; 0x28
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8018b04:	2300      	movs	r3, #0
 8018b06:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d10a      	bne.n	8018b28 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8018b12:	f04f 0320 	mov.w	r3, #32
 8018b16:	f383 8811 	msr	BASEPRI, r3
 8018b1a:	f3bf 8f6f 	isb	sy
 8018b1e:	f3bf 8f4f 	dsb	sy
 8018b22:	61bb      	str	r3, [r7, #24]
}
 8018b24:	bf00      	nop
 8018b26:	e7fe      	b.n	8018b26 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018b28:	f001 fbee 	bl	801a308 <vPortValidateInterruptPriority>
	__asm volatile
 8018b2c:	f3ef 8211 	mrs	r2, BASEPRI
 8018b30:	f04f 0320 	mov.w	r3, #32
 8018b34:	f383 8811 	msr	BASEPRI, r3
 8018b38:	f3bf 8f6f 	isb	sy
 8018b3c:	f3bf 8f4f 	dsb	sy
 8018b40:	617a      	str	r2, [r7, #20]
 8018b42:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018b44:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018b46:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018b48:	6a38      	ldr	r0, [r7, #32]
 8018b4a:	f7ff ff47 	bl	80189dc <prvTaskIsTaskSuspended>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d02f      	beq.n	8018bb4 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b54:	4b1d      	ldr	r3, [pc, #116]	; (8018bcc <xTaskResumeFromISR+0xd0>)
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d125      	bne.n	8018ba8 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018b5c:	6a3b      	ldr	r3, [r7, #32]
 8018b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b60:	4b1b      	ldr	r3, [pc, #108]	; (8018bd0 <xTaskResumeFromISR+0xd4>)
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b66:	429a      	cmp	r2, r3
 8018b68:	d301      	bcc.n	8018b6e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8018b6a:	2301      	movs	r3, #1
 8018b6c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018b6e:	6a3b      	ldr	r3, [r7, #32]
 8018b70:	3304      	adds	r3, #4
 8018b72:	4618      	mov	r0, r3
 8018b74:	f7fe fe24 	bl	80177c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018b78:	6a3b      	ldr	r3, [r7, #32]
 8018b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	409a      	lsls	r2, r3
 8018b80:	4b14      	ldr	r3, [pc, #80]	; (8018bd4 <xTaskResumeFromISR+0xd8>)
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	4313      	orrs	r3, r2
 8018b86:	4a13      	ldr	r2, [pc, #76]	; (8018bd4 <xTaskResumeFromISR+0xd8>)
 8018b88:	6013      	str	r3, [r2, #0]
 8018b8a:	6a3b      	ldr	r3, [r7, #32]
 8018b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b8e:	4613      	mov	r3, r2
 8018b90:	009b      	lsls	r3, r3, #2
 8018b92:	4413      	add	r3, r2
 8018b94:	009b      	lsls	r3, r3, #2
 8018b96:	4a10      	ldr	r2, [pc, #64]	; (8018bd8 <xTaskResumeFromISR+0xdc>)
 8018b98:	441a      	add	r2, r3
 8018b9a:	6a3b      	ldr	r3, [r7, #32]
 8018b9c:	3304      	adds	r3, #4
 8018b9e:	4619      	mov	r1, r3
 8018ba0:	4610      	mov	r0, r2
 8018ba2:	f7fe fdb0 	bl	8017706 <vListInsertEnd>
 8018ba6:	e005      	b.n	8018bb4 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018ba8:	6a3b      	ldr	r3, [r7, #32]
 8018baa:	3318      	adds	r3, #24
 8018bac:	4619      	mov	r1, r3
 8018bae:	480b      	ldr	r0, [pc, #44]	; (8018bdc <xTaskResumeFromISR+0xe0>)
 8018bb0:	f7fe fda9 	bl	8017706 <vListInsertEnd>
 8018bb4:	69fb      	ldr	r3, [r7, #28]
 8018bb6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	f383 8811 	msr	BASEPRI, r3
}
 8018bbe:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8018bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	3728      	adds	r7, #40	; 0x28
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd80      	pop	{r7, pc}
 8018bca:	bf00      	nop
 8018bcc:	20000e0c 	.word	0x20000e0c
 8018bd0:	20000ce4 	.word	0x20000ce4
 8018bd4:	20000dec 	.word	0x20000dec
 8018bd8:	20000ce8 	.word	0x20000ce8
 8018bdc:	20000da4 	.word	0x20000da4

08018be0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b086      	sub	sp, #24
 8018be4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8018be6:	4b22      	ldr	r3, [pc, #136]	; (8018c70 <vTaskStartScheduler+0x90>)
 8018be8:	9301      	str	r3, [sp, #4]
 8018bea:	2300      	movs	r3, #0
 8018bec:	9300      	str	r3, [sp, #0]
 8018bee:	2300      	movs	r3, #0
 8018bf0:	2280      	movs	r2, #128	; 0x80
 8018bf2:	4920      	ldr	r1, [pc, #128]	; (8018c74 <vTaskStartScheduler+0x94>)
 8018bf4:	4820      	ldr	r0, [pc, #128]	; (8018c78 <vTaskStartScheduler+0x98>)
 8018bf6:	f7ff fd1d 	bl	8018634 <xTaskCreate>
 8018bfa:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	2b01      	cmp	r3, #1
 8018c00:	d102      	bne.n	8018c08 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8018c02:	f000 fe5d 	bl	80198c0 <xTimerCreateTimerTask>
 8018c06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	2b01      	cmp	r3, #1
 8018c0c:	d11c      	bne.n	8018c48 <vTaskStartScheduler+0x68>
	__asm volatile
 8018c0e:	f04f 0320 	mov.w	r3, #32
 8018c12:	f383 8811 	msr	BASEPRI, r3
 8018c16:	f3bf 8f6f 	isb	sy
 8018c1a:	f3bf 8f4f 	dsb	sy
 8018c1e:	60bb      	str	r3, [r7, #8]
}
 8018c20:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018c22:	4b16      	ldr	r3, [pc, #88]	; (8018c7c <vTaskStartScheduler+0x9c>)
 8018c24:	f04f 32ff 	mov.w	r2, #4294967295
 8018c28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018c2a:	4b15      	ldr	r3, [pc, #84]	; (8018c80 <vTaskStartScheduler+0xa0>)
 8018c2c:	2201      	movs	r2, #1
 8018c2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018c30:	4b14      	ldr	r3, [pc, #80]	; (8018c84 <vTaskStartScheduler+0xa4>)
 8018c32:	2200      	movs	r2, #0
 8018c34:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8018c36:	4b14      	ldr	r3, [pc, #80]	; (8018c88 <vTaskStartScheduler+0xa8>)
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f7ed faa1 	bl	8006184 <BSP_DEBUG_PIN_On>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018c42:	f001 f9dd 	bl	801a000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018c46:	e00e      	b.n	8018c66 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c4e:	d10a      	bne.n	8018c66 <vTaskStartScheduler+0x86>
	__asm volatile
 8018c50:	f04f 0320 	mov.w	r3, #32
 8018c54:	f383 8811 	msr	BASEPRI, r3
 8018c58:	f3bf 8f6f 	isb	sy
 8018c5c:	f3bf 8f4f 	dsb	sy
 8018c60:	607b      	str	r3, [r7, #4]
}
 8018c62:	bf00      	nop
 8018c64:	e7fe      	b.n	8018c64 <vTaskStartScheduler+0x84>
}
 8018c66:	bf00      	nop
 8018c68:	3710      	adds	r7, #16
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	bd80      	pop	{r7, pc}
 8018c6e:	bf00      	nop
 8018c70:	20000e08 	.word	0x20000e08
 8018c74:	080224d4 	.word	0x080224d4
 8018c78:	080192e1 	.word	0x080192e1
 8018c7c:	20000e04 	.word	0x20000e04
 8018c80:	20000df0 	.word	0x20000df0
 8018c84:	20000de8 	.word	0x20000de8
 8018c88:	20000ce4 	.word	0x20000ce4

08018c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018c8c:	b480      	push	{r7}
 8018c8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8018c90:	4b04      	ldr	r3, [pc, #16]	; (8018ca4 <vTaskSuspendAll+0x18>)
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	3301      	adds	r3, #1
 8018c96:	4a03      	ldr	r2, [pc, #12]	; (8018ca4 <vTaskSuspendAll+0x18>)
 8018c98:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8018c9a:	bf00      	nop
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca2:	4770      	bx	lr
 8018ca4:	20000e0c 	.word	0x20000e0c

08018ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b084      	sub	sp, #16
 8018cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018cae:	2300      	movs	r3, #0
 8018cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018cb6:	4b41      	ldr	r3, [pc, #260]	; (8018dbc <xTaskResumeAll+0x114>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d10a      	bne.n	8018cd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8018cbe:	f04f 0320 	mov.w	r3, #32
 8018cc2:	f383 8811 	msr	BASEPRI, r3
 8018cc6:	f3bf 8f6f 	isb	sy
 8018cca:	f3bf 8f4f 	dsb	sy
 8018cce:	603b      	str	r3, [r7, #0]
}
 8018cd0:	bf00      	nop
 8018cd2:	e7fe      	b.n	8018cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018cd4:	f001 fa36 	bl	801a144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018cd8:	4b38      	ldr	r3, [pc, #224]	; (8018dbc <xTaskResumeAll+0x114>)
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	3b01      	subs	r3, #1
 8018cde:	4a37      	ldr	r2, [pc, #220]	; (8018dbc <xTaskResumeAll+0x114>)
 8018ce0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018ce2:	4b36      	ldr	r3, [pc, #216]	; (8018dbc <xTaskResumeAll+0x114>)
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d161      	bne.n	8018dae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018cea:	4b35      	ldr	r3, [pc, #212]	; (8018dc0 <xTaskResumeAll+0x118>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d05d      	beq.n	8018dae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018cf2:	e02e      	b.n	8018d52 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018cf4:	4b33      	ldr	r3, [pc, #204]	; (8018dc4 <xTaskResumeAll+0x11c>)
 8018cf6:	68db      	ldr	r3, [r3, #12]
 8018cf8:	68db      	ldr	r3, [r3, #12]
 8018cfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	3318      	adds	r3, #24
 8018d00:	4618      	mov	r0, r3
 8018d02:	f7fe fd5d 	bl	80177c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	3304      	adds	r3, #4
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7fe fd58 	bl	80177c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d14:	2201      	movs	r2, #1
 8018d16:	409a      	lsls	r2, r3
 8018d18:	4b2b      	ldr	r3, [pc, #172]	; (8018dc8 <xTaskResumeAll+0x120>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	4313      	orrs	r3, r2
 8018d1e:	4a2a      	ldr	r2, [pc, #168]	; (8018dc8 <xTaskResumeAll+0x120>)
 8018d20:	6013      	str	r3, [r2, #0]
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d26:	4613      	mov	r3, r2
 8018d28:	009b      	lsls	r3, r3, #2
 8018d2a:	4413      	add	r3, r2
 8018d2c:	009b      	lsls	r3, r3, #2
 8018d2e:	4a27      	ldr	r2, [pc, #156]	; (8018dcc <xTaskResumeAll+0x124>)
 8018d30:	441a      	add	r2, r3
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	3304      	adds	r3, #4
 8018d36:	4619      	mov	r1, r3
 8018d38:	4610      	mov	r0, r2
 8018d3a:	f7fe fce4 	bl	8017706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d42:	4b23      	ldr	r3, [pc, #140]	; (8018dd0 <xTaskResumeAll+0x128>)
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d48:	429a      	cmp	r2, r3
 8018d4a:	d302      	bcc.n	8018d52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8018d4c:	4b21      	ldr	r3, [pc, #132]	; (8018dd4 <xTaskResumeAll+0x12c>)
 8018d4e:	2201      	movs	r2, #1
 8018d50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018d52:	4b1c      	ldr	r3, [pc, #112]	; (8018dc4 <xTaskResumeAll+0x11c>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d1cc      	bne.n	8018cf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d001      	beq.n	8018d64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018d60:	f000 fb56 	bl	8019410 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8018d64:	4b1c      	ldr	r3, [pc, #112]	; (8018dd8 <xTaskResumeAll+0x130>)
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d010      	beq.n	8018d92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018d70:	f000 f846 	bl	8018e00 <xTaskIncrementTick>
 8018d74:	4603      	mov	r3, r0
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d002      	beq.n	8018d80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8018d7a:	4b16      	ldr	r3, [pc, #88]	; (8018dd4 <xTaskResumeAll+0x12c>)
 8018d7c:	2201      	movs	r2, #1
 8018d7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	3b01      	subs	r3, #1
 8018d84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d1f1      	bne.n	8018d70 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8018d8c:	4b12      	ldr	r3, [pc, #72]	; (8018dd8 <xTaskResumeAll+0x130>)
 8018d8e:	2200      	movs	r2, #0
 8018d90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018d92:	4b10      	ldr	r3, [pc, #64]	; (8018dd4 <xTaskResumeAll+0x12c>)
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d009      	beq.n	8018dae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018d9a:	2301      	movs	r3, #1
 8018d9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018d9e:	4b0f      	ldr	r3, [pc, #60]	; (8018ddc <xTaskResumeAll+0x134>)
 8018da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018da4:	601a      	str	r2, [r3, #0]
 8018da6:	f3bf 8f4f 	dsb	sy
 8018daa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018dae:	f001 f9f9 	bl	801a1a4 <vPortExitCritical>

	return xAlreadyYielded;
 8018db2:	68bb      	ldr	r3, [r7, #8]
}
 8018db4:	4618      	mov	r0, r3
 8018db6:	3710      	adds	r7, #16
 8018db8:	46bd      	mov	sp, r7
 8018dba:	bd80      	pop	{r7, pc}
 8018dbc:	20000e0c 	.word	0x20000e0c
 8018dc0:	20000de4 	.word	0x20000de4
 8018dc4:	20000da4 	.word	0x20000da4
 8018dc8:	20000dec 	.word	0x20000dec
 8018dcc:	20000ce8 	.word	0x20000ce8
 8018dd0:	20000ce4 	.word	0x20000ce4
 8018dd4:	20000df8 	.word	0x20000df8
 8018dd8:	20000df4 	.word	0x20000df4
 8018ddc:	e000ed04 	.word	0xe000ed04

08018de0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018de0:	b480      	push	{r7}
 8018de2:	b083      	sub	sp, #12
 8018de4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018de6:	4b05      	ldr	r3, [pc, #20]	; (8018dfc <xTaskGetTickCount+0x1c>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018dec:	687b      	ldr	r3, [r7, #4]
}
 8018dee:	4618      	mov	r0, r3
 8018df0:	370c      	adds	r7, #12
 8018df2:	46bd      	mov	sp, r7
 8018df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df8:	4770      	bx	lr
 8018dfa:	bf00      	nop
 8018dfc:	20000de8 	.word	0x20000de8

08018e00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b086      	sub	sp, #24
 8018e04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018e06:	2300      	movs	r3, #0
 8018e08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018e0a:	4b4e      	ldr	r3, [pc, #312]	; (8018f44 <xTaskIncrementTick+0x144>)
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	f040 8088 	bne.w	8018f24 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018e14:	4b4c      	ldr	r3, [pc, #304]	; (8018f48 <xTaskIncrementTick+0x148>)
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	3301      	adds	r3, #1
 8018e1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018e1c:	4a4a      	ldr	r2, [pc, #296]	; (8018f48 <xTaskIncrementTick+0x148>)
 8018e1e:	693b      	ldr	r3, [r7, #16]
 8018e20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018e22:	693b      	ldr	r3, [r7, #16]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d120      	bne.n	8018e6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018e28:	4b48      	ldr	r3, [pc, #288]	; (8018f4c <xTaskIncrementTick+0x14c>)
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d00a      	beq.n	8018e48 <xTaskIncrementTick+0x48>
	__asm volatile
 8018e32:	f04f 0320 	mov.w	r3, #32
 8018e36:	f383 8811 	msr	BASEPRI, r3
 8018e3a:	f3bf 8f6f 	isb	sy
 8018e3e:	f3bf 8f4f 	dsb	sy
 8018e42:	603b      	str	r3, [r7, #0]
}
 8018e44:	bf00      	nop
 8018e46:	e7fe      	b.n	8018e46 <xTaskIncrementTick+0x46>
 8018e48:	4b40      	ldr	r3, [pc, #256]	; (8018f4c <xTaskIncrementTick+0x14c>)
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	60fb      	str	r3, [r7, #12]
 8018e4e:	4b40      	ldr	r3, [pc, #256]	; (8018f50 <xTaskIncrementTick+0x150>)
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	4a3e      	ldr	r2, [pc, #248]	; (8018f4c <xTaskIncrementTick+0x14c>)
 8018e54:	6013      	str	r3, [r2, #0]
 8018e56:	4a3e      	ldr	r2, [pc, #248]	; (8018f50 <xTaskIncrementTick+0x150>)
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	6013      	str	r3, [r2, #0]
 8018e5c:	4b3d      	ldr	r3, [pc, #244]	; (8018f54 <xTaskIncrementTick+0x154>)
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	3301      	adds	r3, #1
 8018e62:	4a3c      	ldr	r2, [pc, #240]	; (8018f54 <xTaskIncrementTick+0x154>)
 8018e64:	6013      	str	r3, [r2, #0]
 8018e66:	f000 fad3 	bl	8019410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018e6a:	4b3b      	ldr	r3, [pc, #236]	; (8018f58 <xTaskIncrementTick+0x158>)
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	693a      	ldr	r2, [r7, #16]
 8018e70:	429a      	cmp	r2, r3
 8018e72:	d348      	bcc.n	8018f06 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018e74:	4b35      	ldr	r3, [pc, #212]	; (8018f4c <xTaskIncrementTick+0x14c>)
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d104      	bne.n	8018e88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e7e:	4b36      	ldr	r3, [pc, #216]	; (8018f58 <xTaskIncrementTick+0x158>)
 8018e80:	f04f 32ff 	mov.w	r2, #4294967295
 8018e84:	601a      	str	r2, [r3, #0]
					break;
 8018e86:	e03e      	b.n	8018f06 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e88:	4b30      	ldr	r3, [pc, #192]	; (8018f4c <xTaskIncrementTick+0x14c>)
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	68db      	ldr	r3, [r3, #12]
 8018e8e:	68db      	ldr	r3, [r3, #12]
 8018e90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018e92:	68bb      	ldr	r3, [r7, #8]
 8018e94:	685b      	ldr	r3, [r3, #4]
 8018e96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018e98:	693a      	ldr	r2, [r7, #16]
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	429a      	cmp	r2, r3
 8018e9e:	d203      	bcs.n	8018ea8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018ea0:	4a2d      	ldr	r2, [pc, #180]	; (8018f58 <xTaskIncrementTick+0x158>)
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018ea6:	e02e      	b.n	8018f06 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	3304      	adds	r3, #4
 8018eac:	4618      	mov	r0, r3
 8018eae:	f7fe fc87 	bl	80177c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018eb2:	68bb      	ldr	r3, [r7, #8]
 8018eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d004      	beq.n	8018ec4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018eba:	68bb      	ldr	r3, [r7, #8]
 8018ebc:	3318      	adds	r3, #24
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7fe fc7e 	bl	80177c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018ec4:	68bb      	ldr	r3, [r7, #8]
 8018ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ec8:	2201      	movs	r2, #1
 8018eca:	409a      	lsls	r2, r3
 8018ecc:	4b23      	ldr	r3, [pc, #140]	; (8018f5c <xTaskIncrementTick+0x15c>)
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	4313      	orrs	r3, r2
 8018ed2:	4a22      	ldr	r2, [pc, #136]	; (8018f5c <xTaskIncrementTick+0x15c>)
 8018ed4:	6013      	str	r3, [r2, #0]
 8018ed6:	68bb      	ldr	r3, [r7, #8]
 8018ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eda:	4613      	mov	r3, r2
 8018edc:	009b      	lsls	r3, r3, #2
 8018ede:	4413      	add	r3, r2
 8018ee0:	009b      	lsls	r3, r3, #2
 8018ee2:	4a1f      	ldr	r2, [pc, #124]	; (8018f60 <xTaskIncrementTick+0x160>)
 8018ee4:	441a      	add	r2, r3
 8018ee6:	68bb      	ldr	r3, [r7, #8]
 8018ee8:	3304      	adds	r3, #4
 8018eea:	4619      	mov	r1, r3
 8018eec:	4610      	mov	r0, r2
 8018eee:	f7fe fc0a 	bl	8017706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ef2:	68bb      	ldr	r3, [r7, #8]
 8018ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ef6:	4b1b      	ldr	r3, [pc, #108]	; (8018f64 <xTaskIncrementTick+0x164>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018efc:	429a      	cmp	r2, r3
 8018efe:	d3b9      	bcc.n	8018e74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018f00:	2301      	movs	r3, #1
 8018f02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018f04:	e7b6      	b.n	8018e74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018f06:	4b17      	ldr	r3, [pc, #92]	; (8018f64 <xTaskIncrementTick+0x164>)
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f0c:	4914      	ldr	r1, [pc, #80]	; (8018f60 <xTaskIncrementTick+0x160>)
 8018f0e:	4613      	mov	r3, r2
 8018f10:	009b      	lsls	r3, r3, #2
 8018f12:	4413      	add	r3, r2
 8018f14:	009b      	lsls	r3, r3, #2
 8018f16:	440b      	add	r3, r1
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	2b01      	cmp	r3, #1
 8018f1c:	d907      	bls.n	8018f2e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8018f1e:	2301      	movs	r3, #1
 8018f20:	617b      	str	r3, [r7, #20]
 8018f22:	e004      	b.n	8018f2e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8018f24:	4b10      	ldr	r3, [pc, #64]	; (8018f68 <xTaskIncrementTick+0x168>)
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	3301      	adds	r3, #1
 8018f2a:	4a0f      	ldr	r2, [pc, #60]	; (8018f68 <xTaskIncrementTick+0x168>)
 8018f2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8018f2e:	4b0f      	ldr	r3, [pc, #60]	; (8018f6c <xTaskIncrementTick+0x16c>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d001      	beq.n	8018f3a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8018f36:	2301      	movs	r3, #1
 8018f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8018f3a:	697b      	ldr	r3, [r7, #20]
}
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	3718      	adds	r7, #24
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bd80      	pop	{r7, pc}
 8018f44:	20000e0c 	.word	0x20000e0c
 8018f48:	20000de8 	.word	0x20000de8
 8018f4c:	20000d9c 	.word	0x20000d9c
 8018f50:	20000da0 	.word	0x20000da0
 8018f54:	20000dfc 	.word	0x20000dfc
 8018f58:	20000e04 	.word	0x20000e04
 8018f5c:	20000dec 	.word	0x20000dec
 8018f60:	20000ce8 	.word	0x20000ce8
 8018f64:	20000ce4 	.word	0x20000ce4
 8018f68:	20000df4 	.word	0x20000df4
 8018f6c:	20000df8 	.word	0x20000df8

08018f70 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b084      	sub	sp, #16
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
 8018f78:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d103      	bne.n	8018f88 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8018f80:	4b08      	ldr	r3, [pc, #32]	; (8018fa4 <vTaskSetApplicationTaskTag+0x34>)
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	60fb      	str	r3, [r7, #12]
 8018f86:	e001      	b.n	8018f8c <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8018f8c:	f001 f8da 	bl	801a144 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	683a      	ldr	r2, [r7, #0]
 8018f94:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8018f96:	f001 f905 	bl	801a1a4 <vPortExitCritical>
	}
 8018f9a:	bf00      	nop
 8018f9c:	3710      	adds	r7, #16
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	bd80      	pop	{r7, pc}
 8018fa2:	bf00      	nop
 8018fa4:	20000ce4 	.word	0x20000ce4

08018fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b086      	sub	sp, #24
 8018fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018fae:	4b2c      	ldr	r3, [pc, #176]	; (8019060 <vTaskSwitchContext+0xb8>)
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d003      	beq.n	8018fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018fb6:	4b2b      	ldr	r3, [pc, #172]	; (8019064 <vTaskSwitchContext+0xbc>)
 8018fb8:	2201      	movs	r2, #1
 8018fba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018fbc:	e04b      	b.n	8019056 <vTaskSwitchContext+0xae>
		xYieldPending = pdFALSE;
 8018fbe:	4b29      	ldr	r3, [pc, #164]	; (8019064 <vTaskSwitchContext+0xbc>)
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8018fc4:	4b28      	ldr	r3, [pc, #160]	; (8019068 <vTaskSwitchContext+0xc0>)
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018fca:	4618      	mov	r0, r3
 8018fcc:	f7ed f8f4 	bl	80061b8 <BSP_DEBUG_PIN_Off>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018fd0:	4b26      	ldr	r3, [pc, #152]	; (801906c <vTaskSwitchContext+0xc4>)
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	fab3 f383 	clz	r3, r3
 8018fdc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018fde:	7afb      	ldrb	r3, [r7, #11]
 8018fe0:	f1c3 031f 	rsb	r3, r3, #31
 8018fe4:	617b      	str	r3, [r7, #20]
 8018fe6:	4922      	ldr	r1, [pc, #136]	; (8019070 <vTaskSwitchContext+0xc8>)
 8018fe8:	697a      	ldr	r2, [r7, #20]
 8018fea:	4613      	mov	r3, r2
 8018fec:	009b      	lsls	r3, r3, #2
 8018fee:	4413      	add	r3, r2
 8018ff0:	009b      	lsls	r3, r3, #2
 8018ff2:	440b      	add	r3, r1
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d10a      	bne.n	8019010 <vTaskSwitchContext+0x68>
	__asm volatile
 8018ffa:	f04f 0320 	mov.w	r3, #32
 8018ffe:	f383 8811 	msr	BASEPRI, r3
 8019002:	f3bf 8f6f 	isb	sy
 8019006:	f3bf 8f4f 	dsb	sy
 801900a:	607b      	str	r3, [r7, #4]
}
 801900c:	bf00      	nop
 801900e:	e7fe      	b.n	801900e <vTaskSwitchContext+0x66>
 8019010:	697a      	ldr	r2, [r7, #20]
 8019012:	4613      	mov	r3, r2
 8019014:	009b      	lsls	r3, r3, #2
 8019016:	4413      	add	r3, r2
 8019018:	009b      	lsls	r3, r3, #2
 801901a:	4a15      	ldr	r2, [pc, #84]	; (8019070 <vTaskSwitchContext+0xc8>)
 801901c:	4413      	add	r3, r2
 801901e:	613b      	str	r3, [r7, #16]
 8019020:	693b      	ldr	r3, [r7, #16]
 8019022:	685b      	ldr	r3, [r3, #4]
 8019024:	685a      	ldr	r2, [r3, #4]
 8019026:	693b      	ldr	r3, [r7, #16]
 8019028:	605a      	str	r2, [r3, #4]
 801902a:	693b      	ldr	r3, [r7, #16]
 801902c:	685a      	ldr	r2, [r3, #4]
 801902e:	693b      	ldr	r3, [r7, #16]
 8019030:	3308      	adds	r3, #8
 8019032:	429a      	cmp	r2, r3
 8019034:	d104      	bne.n	8019040 <vTaskSwitchContext+0x98>
 8019036:	693b      	ldr	r3, [r7, #16]
 8019038:	685b      	ldr	r3, [r3, #4]
 801903a:	685a      	ldr	r2, [r3, #4]
 801903c:	693b      	ldr	r3, [r7, #16]
 801903e:	605a      	str	r2, [r3, #4]
 8019040:	693b      	ldr	r3, [r7, #16]
 8019042:	685b      	ldr	r3, [r3, #4]
 8019044:	68db      	ldr	r3, [r3, #12]
 8019046:	4a08      	ldr	r2, [pc, #32]	; (8019068 <vTaskSwitchContext+0xc0>)
 8019048:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801904a:	4b07      	ldr	r3, [pc, #28]	; (8019068 <vTaskSwitchContext+0xc0>)
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019050:	4618      	mov	r0, r3
 8019052:	f7ed f897 	bl	8006184 <BSP_DEBUG_PIN_On>
}
 8019056:	bf00      	nop
 8019058:	3718      	adds	r7, #24
 801905a:	46bd      	mov	sp, r7
 801905c:	bd80      	pop	{r7, pc}
 801905e:	bf00      	nop
 8019060:	20000e0c 	.word	0x20000e0c
 8019064:	20000df8 	.word	0x20000df8
 8019068:	20000ce4 	.word	0x20000ce4
 801906c:	20000dec 	.word	0x20000dec
 8019070:	20000ce8 	.word	0x20000ce8

08019074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019074:	b580      	push	{r7, lr}
 8019076:	b084      	sub	sp, #16
 8019078:	af00      	add	r7, sp, #0
 801907a:	6078      	str	r0, [r7, #4]
 801907c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d10a      	bne.n	801909a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8019084:	f04f 0320 	mov.w	r3, #32
 8019088:	f383 8811 	msr	BASEPRI, r3
 801908c:	f3bf 8f6f 	isb	sy
 8019090:	f3bf 8f4f 	dsb	sy
 8019094:	60fb      	str	r3, [r7, #12]
}
 8019096:	bf00      	nop
 8019098:	e7fe      	b.n	8019098 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801909a:	4b07      	ldr	r3, [pc, #28]	; (80190b8 <vTaskPlaceOnEventList+0x44>)
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	3318      	adds	r3, #24
 80190a0:	4619      	mov	r1, r3
 80190a2:	6878      	ldr	r0, [r7, #4]
 80190a4:	f7fe fb53 	bl	801774e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80190a8:	2101      	movs	r1, #1
 80190aa:	6838      	ldr	r0, [r7, #0]
 80190ac:	f000 fba2 	bl	80197f4 <prvAddCurrentTaskToDelayedList>
}
 80190b0:	bf00      	nop
 80190b2:	3710      	adds	r7, #16
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}
 80190b8:	20000ce4 	.word	0x20000ce4

080190bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b086      	sub	sp, #24
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	60f8      	str	r0, [r7, #12]
 80190c4:	60b9      	str	r1, [r7, #8]
 80190c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d10a      	bne.n	80190e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80190ce:	f04f 0320 	mov.w	r3, #32
 80190d2:	f383 8811 	msr	BASEPRI, r3
 80190d6:	f3bf 8f6f 	isb	sy
 80190da:	f3bf 8f4f 	dsb	sy
 80190de:	617b      	str	r3, [r7, #20]
}
 80190e0:	bf00      	nop
 80190e2:	e7fe      	b.n	80190e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80190e4:	4b0a      	ldr	r3, [pc, #40]	; (8019110 <vTaskPlaceOnEventListRestricted+0x54>)
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	3318      	adds	r3, #24
 80190ea:	4619      	mov	r1, r3
 80190ec:	68f8      	ldr	r0, [r7, #12]
 80190ee:	f7fe fb0a 	bl	8017706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d002      	beq.n	80190fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80190f8:	f04f 33ff 	mov.w	r3, #4294967295
 80190fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80190fe:	6879      	ldr	r1, [r7, #4]
 8019100:	68b8      	ldr	r0, [r7, #8]
 8019102:	f000 fb77 	bl	80197f4 <prvAddCurrentTaskToDelayedList>
	}
 8019106:	bf00      	nop
 8019108:	3718      	adds	r7, #24
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}
 801910e:	bf00      	nop
 8019110:	20000ce4 	.word	0x20000ce4

08019114 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b086      	sub	sp, #24
 8019118:	af00      	add	r7, sp, #0
 801911a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	68db      	ldr	r3, [r3, #12]
 8019120:	68db      	ldr	r3, [r3, #12]
 8019122:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019124:	693b      	ldr	r3, [r7, #16]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d10a      	bne.n	8019140 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801912a:	f04f 0320 	mov.w	r3, #32
 801912e:	f383 8811 	msr	BASEPRI, r3
 8019132:	f3bf 8f6f 	isb	sy
 8019136:	f3bf 8f4f 	dsb	sy
 801913a:	60fb      	str	r3, [r7, #12]
}
 801913c:	bf00      	nop
 801913e:	e7fe      	b.n	801913e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	3318      	adds	r3, #24
 8019144:	4618      	mov	r0, r3
 8019146:	f7fe fb3b 	bl	80177c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801914a:	4b1d      	ldr	r3, [pc, #116]	; (80191c0 <xTaskRemoveFromEventList+0xac>)
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d11c      	bne.n	801918c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019152:	693b      	ldr	r3, [r7, #16]
 8019154:	3304      	adds	r3, #4
 8019156:	4618      	mov	r0, r3
 8019158:	f7fe fb32 	bl	80177c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801915c:	693b      	ldr	r3, [r7, #16]
 801915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019160:	2201      	movs	r2, #1
 8019162:	409a      	lsls	r2, r3
 8019164:	4b17      	ldr	r3, [pc, #92]	; (80191c4 <xTaskRemoveFromEventList+0xb0>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	4313      	orrs	r3, r2
 801916a:	4a16      	ldr	r2, [pc, #88]	; (80191c4 <xTaskRemoveFromEventList+0xb0>)
 801916c:	6013      	str	r3, [r2, #0]
 801916e:	693b      	ldr	r3, [r7, #16]
 8019170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019172:	4613      	mov	r3, r2
 8019174:	009b      	lsls	r3, r3, #2
 8019176:	4413      	add	r3, r2
 8019178:	009b      	lsls	r3, r3, #2
 801917a:	4a13      	ldr	r2, [pc, #76]	; (80191c8 <xTaskRemoveFromEventList+0xb4>)
 801917c:	441a      	add	r2, r3
 801917e:	693b      	ldr	r3, [r7, #16]
 8019180:	3304      	adds	r3, #4
 8019182:	4619      	mov	r1, r3
 8019184:	4610      	mov	r0, r2
 8019186:	f7fe fabe 	bl	8017706 <vListInsertEnd>
 801918a:	e005      	b.n	8019198 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801918c:	693b      	ldr	r3, [r7, #16]
 801918e:	3318      	adds	r3, #24
 8019190:	4619      	mov	r1, r3
 8019192:	480e      	ldr	r0, [pc, #56]	; (80191cc <xTaskRemoveFromEventList+0xb8>)
 8019194:	f7fe fab7 	bl	8017706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019198:	693b      	ldr	r3, [r7, #16]
 801919a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801919c:	4b0c      	ldr	r3, [pc, #48]	; (80191d0 <xTaskRemoveFromEventList+0xbc>)
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191a2:	429a      	cmp	r2, r3
 80191a4:	d905      	bls.n	80191b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80191a6:	2301      	movs	r3, #1
 80191a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80191aa:	4b0a      	ldr	r3, [pc, #40]	; (80191d4 <xTaskRemoveFromEventList+0xc0>)
 80191ac:	2201      	movs	r2, #1
 80191ae:	601a      	str	r2, [r3, #0]
 80191b0:	e001      	b.n	80191b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80191b2:	2300      	movs	r3, #0
 80191b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80191b6:	697b      	ldr	r3, [r7, #20]
}
 80191b8:	4618      	mov	r0, r3
 80191ba:	3718      	adds	r7, #24
 80191bc:	46bd      	mov	sp, r7
 80191be:	bd80      	pop	{r7, pc}
 80191c0:	20000e0c 	.word	0x20000e0c
 80191c4:	20000dec 	.word	0x20000dec
 80191c8:	20000ce8 	.word	0x20000ce8
 80191cc:	20000da4 	.word	0x20000da4
 80191d0:	20000ce4 	.word	0x20000ce4
 80191d4:	20000df8 	.word	0x20000df8

080191d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80191d8:	b480      	push	{r7}
 80191da:	b083      	sub	sp, #12
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80191e0:	4b06      	ldr	r3, [pc, #24]	; (80191fc <vTaskInternalSetTimeOutState+0x24>)
 80191e2:	681a      	ldr	r2, [r3, #0]
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80191e8:	4b05      	ldr	r3, [pc, #20]	; (8019200 <vTaskInternalSetTimeOutState+0x28>)
 80191ea:	681a      	ldr	r2, [r3, #0]
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	605a      	str	r2, [r3, #4]
}
 80191f0:	bf00      	nop
 80191f2:	370c      	adds	r7, #12
 80191f4:	46bd      	mov	sp, r7
 80191f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fa:	4770      	bx	lr
 80191fc:	20000dfc 	.word	0x20000dfc
 8019200:	20000de8 	.word	0x20000de8

08019204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019204:	b580      	push	{r7, lr}
 8019206:	b088      	sub	sp, #32
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
 801920c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d10a      	bne.n	801922a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8019214:	f04f 0320 	mov.w	r3, #32
 8019218:	f383 8811 	msr	BASEPRI, r3
 801921c:	f3bf 8f6f 	isb	sy
 8019220:	f3bf 8f4f 	dsb	sy
 8019224:	613b      	str	r3, [r7, #16]
}
 8019226:	bf00      	nop
 8019228:	e7fe      	b.n	8019228 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801922a:	683b      	ldr	r3, [r7, #0]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d10a      	bne.n	8019246 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019230:	f04f 0320 	mov.w	r3, #32
 8019234:	f383 8811 	msr	BASEPRI, r3
 8019238:	f3bf 8f6f 	isb	sy
 801923c:	f3bf 8f4f 	dsb	sy
 8019240:	60fb      	str	r3, [r7, #12]
}
 8019242:	bf00      	nop
 8019244:	e7fe      	b.n	8019244 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8019246:	f000 ff7d 	bl	801a144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801924a:	4b1d      	ldr	r3, [pc, #116]	; (80192c0 <xTaskCheckForTimeOut+0xbc>)
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	685b      	ldr	r3, [r3, #4]
 8019254:	69ba      	ldr	r2, [r7, #24]
 8019256:	1ad3      	subs	r3, r2, r3
 8019258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019262:	d102      	bne.n	801926a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019264:	2300      	movs	r3, #0
 8019266:	61fb      	str	r3, [r7, #28]
 8019268:	e023      	b.n	80192b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	681a      	ldr	r2, [r3, #0]
 801926e:	4b15      	ldr	r3, [pc, #84]	; (80192c4 <xTaskCheckForTimeOut+0xc0>)
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	429a      	cmp	r2, r3
 8019274:	d007      	beq.n	8019286 <xTaskCheckForTimeOut+0x82>
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	685b      	ldr	r3, [r3, #4]
 801927a:	69ba      	ldr	r2, [r7, #24]
 801927c:	429a      	cmp	r2, r3
 801927e:	d302      	bcc.n	8019286 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019280:	2301      	movs	r3, #1
 8019282:	61fb      	str	r3, [r7, #28]
 8019284:	e015      	b.n	80192b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019286:	683b      	ldr	r3, [r7, #0]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	697a      	ldr	r2, [r7, #20]
 801928c:	429a      	cmp	r2, r3
 801928e:	d20b      	bcs.n	80192a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019290:	683b      	ldr	r3, [r7, #0]
 8019292:	681a      	ldr	r2, [r3, #0]
 8019294:	697b      	ldr	r3, [r7, #20]
 8019296:	1ad2      	subs	r2, r2, r3
 8019298:	683b      	ldr	r3, [r7, #0]
 801929a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801929c:	6878      	ldr	r0, [r7, #4]
 801929e:	f7ff ff9b 	bl	80191d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80192a2:	2300      	movs	r3, #0
 80192a4:	61fb      	str	r3, [r7, #28]
 80192a6:	e004      	b.n	80192b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	2200      	movs	r2, #0
 80192ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80192ae:	2301      	movs	r3, #1
 80192b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80192b2:	f000 ff77 	bl	801a1a4 <vPortExitCritical>

	return xReturn;
 80192b6:	69fb      	ldr	r3, [r7, #28]
}
 80192b8:	4618      	mov	r0, r3
 80192ba:	3720      	adds	r7, #32
 80192bc:	46bd      	mov	sp, r7
 80192be:	bd80      	pop	{r7, pc}
 80192c0:	20000de8 	.word	0x20000de8
 80192c4:	20000dfc 	.word	0x20000dfc

080192c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80192c8:	b480      	push	{r7}
 80192ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80192cc:	4b03      	ldr	r3, [pc, #12]	; (80192dc <vTaskMissedYield+0x14>)
 80192ce:	2201      	movs	r2, #1
 80192d0:	601a      	str	r2, [r3, #0]
}
 80192d2:	bf00      	nop
 80192d4:	46bd      	mov	sp, r7
 80192d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192da:	4770      	bx	lr
 80192dc:	20000df8 	.word	0x20000df8

080192e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b082      	sub	sp, #8
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80192e8:	f000 f854 	bl	8019394 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80192ec:	4b07      	ldr	r3, [pc, #28]	; (801930c <prvIdleTask+0x2c>)
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	2b01      	cmp	r3, #1
 80192f2:	d907      	bls.n	8019304 <prvIdleTask+0x24>
			{
				taskYIELD();
 80192f4:	4b06      	ldr	r3, [pc, #24]	; (8019310 <prvIdleTask+0x30>)
 80192f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80192fa:	601a      	str	r2, [r3, #0]
 80192fc:	f3bf 8f4f 	dsb	sy
 8019300:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8019304:	f7e9 fe38 	bl	8002f78 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8019308:	e7ee      	b.n	80192e8 <prvIdleTask+0x8>
 801930a:	bf00      	nop
 801930c:	20000ce8 	.word	0x20000ce8
 8019310:	e000ed04 	.word	0xe000ed04

08019314 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b082      	sub	sp, #8
 8019318:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801931a:	2300      	movs	r3, #0
 801931c:	607b      	str	r3, [r7, #4]
 801931e:	e00c      	b.n	801933a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019320:	687a      	ldr	r2, [r7, #4]
 8019322:	4613      	mov	r3, r2
 8019324:	009b      	lsls	r3, r3, #2
 8019326:	4413      	add	r3, r2
 8019328:	009b      	lsls	r3, r3, #2
 801932a:	4a12      	ldr	r2, [pc, #72]	; (8019374 <prvInitialiseTaskLists+0x60>)
 801932c:	4413      	add	r3, r2
 801932e:	4618      	mov	r0, r3
 8019330:	f7fe f9bc 	bl	80176ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	3301      	adds	r3, #1
 8019338:	607b      	str	r3, [r7, #4]
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	2b06      	cmp	r3, #6
 801933e:	d9ef      	bls.n	8019320 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019340:	480d      	ldr	r0, [pc, #52]	; (8019378 <prvInitialiseTaskLists+0x64>)
 8019342:	f7fe f9b3 	bl	80176ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019346:	480d      	ldr	r0, [pc, #52]	; (801937c <prvInitialiseTaskLists+0x68>)
 8019348:	f7fe f9b0 	bl	80176ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801934c:	480c      	ldr	r0, [pc, #48]	; (8019380 <prvInitialiseTaskLists+0x6c>)
 801934e:	f7fe f9ad 	bl	80176ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019352:	480c      	ldr	r0, [pc, #48]	; (8019384 <prvInitialiseTaskLists+0x70>)
 8019354:	f7fe f9aa 	bl	80176ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019358:	480b      	ldr	r0, [pc, #44]	; (8019388 <prvInitialiseTaskLists+0x74>)
 801935a:	f7fe f9a7 	bl	80176ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801935e:	4b0b      	ldr	r3, [pc, #44]	; (801938c <prvInitialiseTaskLists+0x78>)
 8019360:	4a05      	ldr	r2, [pc, #20]	; (8019378 <prvInitialiseTaskLists+0x64>)
 8019362:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019364:	4b0a      	ldr	r3, [pc, #40]	; (8019390 <prvInitialiseTaskLists+0x7c>)
 8019366:	4a05      	ldr	r2, [pc, #20]	; (801937c <prvInitialiseTaskLists+0x68>)
 8019368:	601a      	str	r2, [r3, #0]
}
 801936a:	bf00      	nop
 801936c:	3708      	adds	r7, #8
 801936e:	46bd      	mov	sp, r7
 8019370:	bd80      	pop	{r7, pc}
 8019372:	bf00      	nop
 8019374:	20000ce8 	.word	0x20000ce8
 8019378:	20000d74 	.word	0x20000d74
 801937c:	20000d88 	.word	0x20000d88
 8019380:	20000da4 	.word	0x20000da4
 8019384:	20000db8 	.word	0x20000db8
 8019388:	20000dd0 	.word	0x20000dd0
 801938c:	20000d9c 	.word	0x20000d9c
 8019390:	20000da0 	.word	0x20000da0

08019394 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b082      	sub	sp, #8
 8019398:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801939a:	e019      	b.n	80193d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801939c:	f000 fed2 	bl	801a144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80193a0:	4b10      	ldr	r3, [pc, #64]	; (80193e4 <prvCheckTasksWaitingTermination+0x50>)
 80193a2:	68db      	ldr	r3, [r3, #12]
 80193a4:	68db      	ldr	r3, [r3, #12]
 80193a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	3304      	adds	r3, #4
 80193ac:	4618      	mov	r0, r3
 80193ae:	f7fe fa07 	bl	80177c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80193b2:	4b0d      	ldr	r3, [pc, #52]	; (80193e8 <prvCheckTasksWaitingTermination+0x54>)
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	3b01      	subs	r3, #1
 80193b8:	4a0b      	ldr	r2, [pc, #44]	; (80193e8 <prvCheckTasksWaitingTermination+0x54>)
 80193ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80193bc:	4b0b      	ldr	r3, [pc, #44]	; (80193ec <prvCheckTasksWaitingTermination+0x58>)
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	3b01      	subs	r3, #1
 80193c2:	4a0a      	ldr	r2, [pc, #40]	; (80193ec <prvCheckTasksWaitingTermination+0x58>)
 80193c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80193c6:	f000 feed 	bl	801a1a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80193ca:	6878      	ldr	r0, [r7, #4]
 80193cc:	f000 f810 	bl	80193f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80193d0:	4b06      	ldr	r3, [pc, #24]	; (80193ec <prvCheckTasksWaitingTermination+0x58>)
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d1e1      	bne.n	801939c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80193d8:	bf00      	nop
 80193da:	bf00      	nop
 80193dc:	3708      	adds	r7, #8
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}
 80193e2:	bf00      	nop
 80193e4:	20000db8 	.word	0x20000db8
 80193e8:	20000de4 	.word	0x20000de4
 80193ec:	20000dcc 	.word	0x20000dcc

080193f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b082      	sub	sp, #8
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193fc:	4618      	mov	r0, r3
 80193fe:	f001 f887 	bl	801a510 <vPortFree>
			vPortFree( pxTCB );
 8019402:	6878      	ldr	r0, [r7, #4]
 8019404:	f001 f884 	bl	801a510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019408:	bf00      	nop
 801940a:	3708      	adds	r7, #8
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}

08019410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019410:	b480      	push	{r7}
 8019412:	b083      	sub	sp, #12
 8019414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019416:	4b0c      	ldr	r3, [pc, #48]	; (8019448 <prvResetNextTaskUnblockTime+0x38>)
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d104      	bne.n	801942a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019420:	4b0a      	ldr	r3, [pc, #40]	; (801944c <prvResetNextTaskUnblockTime+0x3c>)
 8019422:	f04f 32ff 	mov.w	r2, #4294967295
 8019426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019428:	e008      	b.n	801943c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801942a:	4b07      	ldr	r3, [pc, #28]	; (8019448 <prvResetNextTaskUnblockTime+0x38>)
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	68db      	ldr	r3, [r3, #12]
 8019430:	68db      	ldr	r3, [r3, #12]
 8019432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	685b      	ldr	r3, [r3, #4]
 8019438:	4a04      	ldr	r2, [pc, #16]	; (801944c <prvResetNextTaskUnblockTime+0x3c>)
 801943a:	6013      	str	r3, [r2, #0]
}
 801943c:	bf00      	nop
 801943e:	370c      	adds	r7, #12
 8019440:	46bd      	mov	sp, r7
 8019442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019446:	4770      	bx	lr
 8019448:	20000d9c 	.word	0x20000d9c
 801944c:	20000e04 	.word	0x20000e04

08019450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019450:	b480      	push	{r7}
 8019452:	b083      	sub	sp, #12
 8019454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8019456:	4b0b      	ldr	r3, [pc, #44]	; (8019484 <xTaskGetSchedulerState+0x34>)
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d102      	bne.n	8019464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801945e:	2301      	movs	r3, #1
 8019460:	607b      	str	r3, [r7, #4]
 8019462:	e008      	b.n	8019476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019464:	4b08      	ldr	r3, [pc, #32]	; (8019488 <xTaskGetSchedulerState+0x38>)
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d102      	bne.n	8019472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801946c:	2302      	movs	r3, #2
 801946e:	607b      	str	r3, [r7, #4]
 8019470:	e001      	b.n	8019476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019472:	2300      	movs	r3, #0
 8019474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8019476:	687b      	ldr	r3, [r7, #4]
	}
 8019478:	4618      	mov	r0, r3
 801947a:	370c      	adds	r7, #12
 801947c:	46bd      	mov	sp, r7
 801947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019482:	4770      	bx	lr
 8019484:	20000df0 	.word	0x20000df0
 8019488:	20000e0c 	.word	0x20000e0c

0801948c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801948c:	b580      	push	{r7, lr}
 801948e:	b084      	sub	sp, #16
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8019498:	2300      	movs	r3, #0
 801949a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d069      	beq.n	8019576 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80194a2:	68bb      	ldr	r3, [r7, #8]
 80194a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194a6:	4b36      	ldr	r3, [pc, #216]	; (8019580 <xTaskPriorityInherit+0xf4>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194ac:	429a      	cmp	r2, r3
 80194ae:	d259      	bcs.n	8019564 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80194b0:	68bb      	ldr	r3, [r7, #8]
 80194b2:	699b      	ldr	r3, [r3, #24]
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	db06      	blt.n	80194c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80194b8:	4b31      	ldr	r3, [pc, #196]	; (8019580 <xTaskPriorityInherit+0xf4>)
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194be:	f1c3 0207 	rsb	r2, r3, #7
 80194c2:	68bb      	ldr	r3, [r7, #8]
 80194c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80194c6:	68bb      	ldr	r3, [r7, #8]
 80194c8:	6959      	ldr	r1, [r3, #20]
 80194ca:	68bb      	ldr	r3, [r7, #8]
 80194cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194ce:	4613      	mov	r3, r2
 80194d0:	009b      	lsls	r3, r3, #2
 80194d2:	4413      	add	r3, r2
 80194d4:	009b      	lsls	r3, r3, #2
 80194d6:	4a2b      	ldr	r2, [pc, #172]	; (8019584 <xTaskPriorityInherit+0xf8>)
 80194d8:	4413      	add	r3, r2
 80194da:	4299      	cmp	r1, r3
 80194dc:	d13a      	bne.n	8019554 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80194de:	68bb      	ldr	r3, [r7, #8]
 80194e0:	3304      	adds	r3, #4
 80194e2:	4618      	mov	r0, r3
 80194e4:	f7fe f96c 	bl	80177c0 <uxListRemove>
 80194e8:	4603      	mov	r3, r0
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d115      	bne.n	801951a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80194ee:	68bb      	ldr	r3, [r7, #8]
 80194f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194f2:	4924      	ldr	r1, [pc, #144]	; (8019584 <xTaskPriorityInherit+0xf8>)
 80194f4:	4613      	mov	r3, r2
 80194f6:	009b      	lsls	r3, r3, #2
 80194f8:	4413      	add	r3, r2
 80194fa:	009b      	lsls	r3, r3, #2
 80194fc:	440b      	add	r3, r1
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d10a      	bne.n	801951a <xTaskPriorityInherit+0x8e>
 8019504:	68bb      	ldr	r3, [r7, #8]
 8019506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019508:	2201      	movs	r2, #1
 801950a:	fa02 f303 	lsl.w	r3, r2, r3
 801950e:	43da      	mvns	r2, r3
 8019510:	4b1d      	ldr	r3, [pc, #116]	; (8019588 <xTaskPriorityInherit+0xfc>)
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	4013      	ands	r3, r2
 8019516:	4a1c      	ldr	r2, [pc, #112]	; (8019588 <xTaskPriorityInherit+0xfc>)
 8019518:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801951a:	4b19      	ldr	r3, [pc, #100]	; (8019580 <xTaskPriorityInherit+0xf4>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019520:	68bb      	ldr	r3, [r7, #8]
 8019522:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019524:	68bb      	ldr	r3, [r7, #8]
 8019526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019528:	2201      	movs	r2, #1
 801952a:	409a      	lsls	r2, r3
 801952c:	4b16      	ldr	r3, [pc, #88]	; (8019588 <xTaskPriorityInherit+0xfc>)
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	4313      	orrs	r3, r2
 8019532:	4a15      	ldr	r2, [pc, #84]	; (8019588 <xTaskPriorityInherit+0xfc>)
 8019534:	6013      	str	r3, [r2, #0]
 8019536:	68bb      	ldr	r3, [r7, #8]
 8019538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801953a:	4613      	mov	r3, r2
 801953c:	009b      	lsls	r3, r3, #2
 801953e:	4413      	add	r3, r2
 8019540:	009b      	lsls	r3, r3, #2
 8019542:	4a10      	ldr	r2, [pc, #64]	; (8019584 <xTaskPriorityInherit+0xf8>)
 8019544:	441a      	add	r2, r3
 8019546:	68bb      	ldr	r3, [r7, #8]
 8019548:	3304      	adds	r3, #4
 801954a:	4619      	mov	r1, r3
 801954c:	4610      	mov	r0, r2
 801954e:	f7fe f8da 	bl	8017706 <vListInsertEnd>
 8019552:	e004      	b.n	801955e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019554:	4b0a      	ldr	r3, [pc, #40]	; (8019580 <xTaskPriorityInherit+0xf4>)
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801955a:	68bb      	ldr	r3, [r7, #8]
 801955c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801955e:	2301      	movs	r3, #1
 8019560:	60fb      	str	r3, [r7, #12]
 8019562:	e008      	b.n	8019576 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019564:	68bb      	ldr	r3, [r7, #8]
 8019566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019568:	4b05      	ldr	r3, [pc, #20]	; (8019580 <xTaskPriorityInherit+0xf4>)
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801956e:	429a      	cmp	r2, r3
 8019570:	d201      	bcs.n	8019576 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8019572:	2301      	movs	r3, #1
 8019574:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019576:	68fb      	ldr	r3, [r7, #12]
	}
 8019578:	4618      	mov	r0, r3
 801957a:	3710      	adds	r7, #16
 801957c:	46bd      	mov	sp, r7
 801957e:	bd80      	pop	{r7, pc}
 8019580:	20000ce4 	.word	0x20000ce4
 8019584:	20000ce8 	.word	0x20000ce8
 8019588:	20000dec 	.word	0x20000dec

0801958c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801958c:	b580      	push	{r7, lr}
 801958e:	b086      	sub	sp, #24
 8019590:	af00      	add	r7, sp, #0
 8019592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8019598:	2300      	movs	r3, #0
 801959a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d06e      	beq.n	8019680 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80195a2:	4b3a      	ldr	r3, [pc, #232]	; (801968c <xTaskPriorityDisinherit+0x100>)
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	693a      	ldr	r2, [r7, #16]
 80195a8:	429a      	cmp	r2, r3
 80195aa:	d00a      	beq.n	80195c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80195ac:	f04f 0320 	mov.w	r3, #32
 80195b0:	f383 8811 	msr	BASEPRI, r3
 80195b4:	f3bf 8f6f 	isb	sy
 80195b8:	f3bf 8f4f 	dsb	sy
 80195bc:	60fb      	str	r3, [r7, #12]
}
 80195be:	bf00      	nop
 80195c0:	e7fe      	b.n	80195c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80195c2:	693b      	ldr	r3, [r7, #16]
 80195c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d10a      	bne.n	80195e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80195ca:	f04f 0320 	mov.w	r3, #32
 80195ce:	f383 8811 	msr	BASEPRI, r3
 80195d2:	f3bf 8f6f 	isb	sy
 80195d6:	f3bf 8f4f 	dsb	sy
 80195da:	60bb      	str	r3, [r7, #8]
}
 80195dc:	bf00      	nop
 80195de:	e7fe      	b.n	80195de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80195e0:	693b      	ldr	r3, [r7, #16]
 80195e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195e4:	1e5a      	subs	r2, r3, #1
 80195e6:	693b      	ldr	r3, [r7, #16]
 80195e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80195ea:	693b      	ldr	r3, [r7, #16]
 80195ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80195f2:	429a      	cmp	r2, r3
 80195f4:	d044      	beq.n	8019680 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80195f6:	693b      	ldr	r3, [r7, #16]
 80195f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d140      	bne.n	8019680 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80195fe:	693b      	ldr	r3, [r7, #16]
 8019600:	3304      	adds	r3, #4
 8019602:	4618      	mov	r0, r3
 8019604:	f7fe f8dc 	bl	80177c0 <uxListRemove>
 8019608:	4603      	mov	r3, r0
 801960a:	2b00      	cmp	r3, #0
 801960c:	d115      	bne.n	801963a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801960e:	693b      	ldr	r3, [r7, #16]
 8019610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019612:	491f      	ldr	r1, [pc, #124]	; (8019690 <xTaskPriorityDisinherit+0x104>)
 8019614:	4613      	mov	r3, r2
 8019616:	009b      	lsls	r3, r3, #2
 8019618:	4413      	add	r3, r2
 801961a:	009b      	lsls	r3, r3, #2
 801961c:	440b      	add	r3, r1
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d10a      	bne.n	801963a <xTaskPriorityDisinherit+0xae>
 8019624:	693b      	ldr	r3, [r7, #16]
 8019626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019628:	2201      	movs	r2, #1
 801962a:	fa02 f303 	lsl.w	r3, r2, r3
 801962e:	43da      	mvns	r2, r3
 8019630:	4b18      	ldr	r3, [pc, #96]	; (8019694 <xTaskPriorityDisinherit+0x108>)
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	4013      	ands	r3, r2
 8019636:	4a17      	ldr	r2, [pc, #92]	; (8019694 <xTaskPriorityDisinherit+0x108>)
 8019638:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801963a:	693b      	ldr	r3, [r7, #16]
 801963c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801963e:	693b      	ldr	r3, [r7, #16]
 8019640:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019642:	693b      	ldr	r3, [r7, #16]
 8019644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019646:	f1c3 0207 	rsb	r2, r3, #7
 801964a:	693b      	ldr	r3, [r7, #16]
 801964c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801964e:	693b      	ldr	r3, [r7, #16]
 8019650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019652:	2201      	movs	r2, #1
 8019654:	409a      	lsls	r2, r3
 8019656:	4b0f      	ldr	r3, [pc, #60]	; (8019694 <xTaskPriorityDisinherit+0x108>)
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	4313      	orrs	r3, r2
 801965c:	4a0d      	ldr	r2, [pc, #52]	; (8019694 <xTaskPriorityDisinherit+0x108>)
 801965e:	6013      	str	r3, [r2, #0]
 8019660:	693b      	ldr	r3, [r7, #16]
 8019662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019664:	4613      	mov	r3, r2
 8019666:	009b      	lsls	r3, r3, #2
 8019668:	4413      	add	r3, r2
 801966a:	009b      	lsls	r3, r3, #2
 801966c:	4a08      	ldr	r2, [pc, #32]	; (8019690 <xTaskPriorityDisinherit+0x104>)
 801966e:	441a      	add	r2, r3
 8019670:	693b      	ldr	r3, [r7, #16]
 8019672:	3304      	adds	r3, #4
 8019674:	4619      	mov	r1, r3
 8019676:	4610      	mov	r0, r2
 8019678:	f7fe f845 	bl	8017706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801967c:	2301      	movs	r3, #1
 801967e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019680:	697b      	ldr	r3, [r7, #20]
	}
 8019682:	4618      	mov	r0, r3
 8019684:	3718      	adds	r7, #24
 8019686:	46bd      	mov	sp, r7
 8019688:	bd80      	pop	{r7, pc}
 801968a:	bf00      	nop
 801968c:	20000ce4 	.word	0x20000ce4
 8019690:	20000ce8 	.word	0x20000ce8
 8019694:	20000dec 	.word	0x20000dec

08019698 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8019698:	b580      	push	{r7, lr}
 801969a:	b088      	sub	sp, #32
 801969c:	af00      	add	r7, sp, #0
 801969e:	6078      	str	r0, [r7, #4]
 80196a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80196a6:	2301      	movs	r3, #1
 80196a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	f000 8083 	beq.w	80197b8 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80196b2:	69bb      	ldr	r3, [r7, #24]
 80196b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d10a      	bne.n	80196d0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80196ba:	f04f 0320 	mov.w	r3, #32
 80196be:	f383 8811 	msr	BASEPRI, r3
 80196c2:	f3bf 8f6f 	isb	sy
 80196c6:	f3bf 8f4f 	dsb	sy
 80196ca:	60fb      	str	r3, [r7, #12]
}
 80196cc:	bf00      	nop
 80196ce:	e7fe      	b.n	80196ce <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80196d0:	69bb      	ldr	r3, [r7, #24]
 80196d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196d4:	683a      	ldr	r2, [r7, #0]
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d902      	bls.n	80196e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	61fb      	str	r3, [r7, #28]
 80196de:	e002      	b.n	80196e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80196e0:	69bb      	ldr	r3, [r7, #24]
 80196e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80196e6:	69bb      	ldr	r3, [r7, #24]
 80196e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196ea:	69fa      	ldr	r2, [r7, #28]
 80196ec:	429a      	cmp	r2, r3
 80196ee:	d063      	beq.n	80197b8 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80196f0:	69bb      	ldr	r3, [r7, #24]
 80196f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80196f4:	697a      	ldr	r2, [r7, #20]
 80196f6:	429a      	cmp	r2, r3
 80196f8:	d15e      	bne.n	80197b8 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80196fa:	4b31      	ldr	r3, [pc, #196]	; (80197c0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	69ba      	ldr	r2, [r7, #24]
 8019700:	429a      	cmp	r2, r3
 8019702:	d10a      	bne.n	801971a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8019704:	f04f 0320 	mov.w	r3, #32
 8019708:	f383 8811 	msr	BASEPRI, r3
 801970c:	f3bf 8f6f 	isb	sy
 8019710:	f3bf 8f4f 	dsb	sy
 8019714:	60bb      	str	r3, [r7, #8]
}
 8019716:	bf00      	nop
 8019718:	e7fe      	b.n	8019718 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801971a:	69bb      	ldr	r3, [r7, #24]
 801971c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801971e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8019720:	69bb      	ldr	r3, [r7, #24]
 8019722:	69fa      	ldr	r2, [r7, #28]
 8019724:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019726:	69bb      	ldr	r3, [r7, #24]
 8019728:	699b      	ldr	r3, [r3, #24]
 801972a:	2b00      	cmp	r3, #0
 801972c:	db04      	blt.n	8019738 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801972e:	69fb      	ldr	r3, [r7, #28]
 8019730:	f1c3 0207 	rsb	r2, r3, #7
 8019734:	69bb      	ldr	r3, [r7, #24]
 8019736:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019738:	69bb      	ldr	r3, [r7, #24]
 801973a:	6959      	ldr	r1, [r3, #20]
 801973c:	693a      	ldr	r2, [r7, #16]
 801973e:	4613      	mov	r3, r2
 8019740:	009b      	lsls	r3, r3, #2
 8019742:	4413      	add	r3, r2
 8019744:	009b      	lsls	r3, r3, #2
 8019746:	4a1f      	ldr	r2, [pc, #124]	; (80197c4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8019748:	4413      	add	r3, r2
 801974a:	4299      	cmp	r1, r3
 801974c:	d134      	bne.n	80197b8 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801974e:	69bb      	ldr	r3, [r7, #24]
 8019750:	3304      	adds	r3, #4
 8019752:	4618      	mov	r0, r3
 8019754:	f7fe f834 	bl	80177c0 <uxListRemove>
 8019758:	4603      	mov	r3, r0
 801975a:	2b00      	cmp	r3, #0
 801975c:	d115      	bne.n	801978a <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801975e:	69bb      	ldr	r3, [r7, #24]
 8019760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019762:	4918      	ldr	r1, [pc, #96]	; (80197c4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8019764:	4613      	mov	r3, r2
 8019766:	009b      	lsls	r3, r3, #2
 8019768:	4413      	add	r3, r2
 801976a:	009b      	lsls	r3, r3, #2
 801976c:	440b      	add	r3, r1
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d10a      	bne.n	801978a <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8019774:	69bb      	ldr	r3, [r7, #24]
 8019776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019778:	2201      	movs	r2, #1
 801977a:	fa02 f303 	lsl.w	r3, r2, r3
 801977e:	43da      	mvns	r2, r3
 8019780:	4b11      	ldr	r3, [pc, #68]	; (80197c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	4013      	ands	r3, r2
 8019786:	4a10      	ldr	r2, [pc, #64]	; (80197c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8019788:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801978a:	69bb      	ldr	r3, [r7, #24]
 801978c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801978e:	2201      	movs	r2, #1
 8019790:	409a      	lsls	r2, r3
 8019792:	4b0d      	ldr	r3, [pc, #52]	; (80197c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	4313      	orrs	r3, r2
 8019798:	4a0b      	ldr	r2, [pc, #44]	; (80197c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801979a:	6013      	str	r3, [r2, #0]
 801979c:	69bb      	ldr	r3, [r7, #24]
 801979e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80197a0:	4613      	mov	r3, r2
 80197a2:	009b      	lsls	r3, r3, #2
 80197a4:	4413      	add	r3, r2
 80197a6:	009b      	lsls	r3, r3, #2
 80197a8:	4a06      	ldr	r2, [pc, #24]	; (80197c4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80197aa:	441a      	add	r2, r3
 80197ac:	69bb      	ldr	r3, [r7, #24]
 80197ae:	3304      	adds	r3, #4
 80197b0:	4619      	mov	r1, r3
 80197b2:	4610      	mov	r0, r2
 80197b4:	f7fd ffa7 	bl	8017706 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80197b8:	bf00      	nop
 80197ba:	3720      	adds	r7, #32
 80197bc:	46bd      	mov	sp, r7
 80197be:	bd80      	pop	{r7, pc}
 80197c0:	20000ce4 	.word	0x20000ce4
 80197c4:	20000ce8 	.word	0x20000ce8
 80197c8:	20000dec 	.word	0x20000dec

080197cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80197cc:	b480      	push	{r7}
 80197ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80197d0:	4b07      	ldr	r3, [pc, #28]	; (80197f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d004      	beq.n	80197e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80197d8:	4b05      	ldr	r3, [pc, #20]	; (80197f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80197de:	3201      	adds	r2, #1
 80197e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80197e2:	4b03      	ldr	r3, [pc, #12]	; (80197f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80197e4:	681b      	ldr	r3, [r3, #0]
	}
 80197e6:	4618      	mov	r0, r3
 80197e8:	46bd      	mov	sp, r7
 80197ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ee:	4770      	bx	lr
 80197f0:	20000ce4 	.word	0x20000ce4

080197f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b084      	sub	sp, #16
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
 80197fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80197fe:	4b29      	ldr	r3, [pc, #164]	; (80198a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019804:	4b28      	ldr	r3, [pc, #160]	; (80198a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	3304      	adds	r3, #4
 801980a:	4618      	mov	r0, r3
 801980c:	f7fd ffd8 	bl	80177c0 <uxListRemove>
 8019810:	4603      	mov	r3, r0
 8019812:	2b00      	cmp	r3, #0
 8019814:	d10b      	bne.n	801982e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8019816:	4b24      	ldr	r3, [pc, #144]	; (80198a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801981c:	2201      	movs	r2, #1
 801981e:	fa02 f303 	lsl.w	r3, r2, r3
 8019822:	43da      	mvns	r2, r3
 8019824:	4b21      	ldr	r3, [pc, #132]	; (80198ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	4013      	ands	r3, r2
 801982a:	4a20      	ldr	r2, [pc, #128]	; (80198ac <prvAddCurrentTaskToDelayedList+0xb8>)
 801982c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019834:	d10a      	bne.n	801984c <prvAddCurrentTaskToDelayedList+0x58>
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d007      	beq.n	801984c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801983c:	4b1a      	ldr	r3, [pc, #104]	; (80198a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	3304      	adds	r3, #4
 8019842:	4619      	mov	r1, r3
 8019844:	481a      	ldr	r0, [pc, #104]	; (80198b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8019846:	f7fd ff5e 	bl	8017706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801984a:	e026      	b.n	801989a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801984c:	68fa      	ldr	r2, [r7, #12]
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	4413      	add	r3, r2
 8019852:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019854:	4b14      	ldr	r3, [pc, #80]	; (80198a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	68ba      	ldr	r2, [r7, #8]
 801985a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801985c:	68ba      	ldr	r2, [r7, #8]
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	429a      	cmp	r2, r3
 8019862:	d209      	bcs.n	8019878 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019864:	4b13      	ldr	r3, [pc, #76]	; (80198b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8019866:	681a      	ldr	r2, [r3, #0]
 8019868:	4b0f      	ldr	r3, [pc, #60]	; (80198a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	3304      	adds	r3, #4
 801986e:	4619      	mov	r1, r3
 8019870:	4610      	mov	r0, r2
 8019872:	f7fd ff6c 	bl	801774e <vListInsert>
}
 8019876:	e010      	b.n	801989a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019878:	4b0f      	ldr	r3, [pc, #60]	; (80198b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801987a:	681a      	ldr	r2, [r3, #0]
 801987c:	4b0a      	ldr	r3, [pc, #40]	; (80198a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	3304      	adds	r3, #4
 8019882:	4619      	mov	r1, r3
 8019884:	4610      	mov	r0, r2
 8019886:	f7fd ff62 	bl	801774e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801988a:	4b0c      	ldr	r3, [pc, #48]	; (80198bc <prvAddCurrentTaskToDelayedList+0xc8>)
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	68ba      	ldr	r2, [r7, #8]
 8019890:	429a      	cmp	r2, r3
 8019892:	d202      	bcs.n	801989a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8019894:	4a09      	ldr	r2, [pc, #36]	; (80198bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	6013      	str	r3, [r2, #0]
}
 801989a:	bf00      	nop
 801989c:	3710      	adds	r7, #16
 801989e:	46bd      	mov	sp, r7
 80198a0:	bd80      	pop	{r7, pc}
 80198a2:	bf00      	nop
 80198a4:	20000de8 	.word	0x20000de8
 80198a8:	20000ce4 	.word	0x20000ce4
 80198ac:	20000dec 	.word	0x20000dec
 80198b0:	20000dd0 	.word	0x20000dd0
 80198b4:	20000da0 	.word	0x20000da0
 80198b8:	20000d9c 	.word	0x20000d9c
 80198bc:	20000e04 	.word	0x20000e04

080198c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b084      	sub	sp, #16
 80198c4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80198c6:	2300      	movs	r3, #0
 80198c8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80198ca:	f000 fad5 	bl	8019e78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80198ce:	4b11      	ldr	r3, [pc, #68]	; (8019914 <xTimerCreateTimerTask+0x54>)
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d00b      	beq.n	80198ee <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80198d6:	4b10      	ldr	r3, [pc, #64]	; (8019918 <xTimerCreateTimerTask+0x58>)
 80198d8:	9301      	str	r3, [sp, #4]
 80198da:	2306      	movs	r3, #6
 80198dc:	9300      	str	r3, [sp, #0]
 80198de:	2300      	movs	r3, #0
 80198e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80198e4:	490d      	ldr	r1, [pc, #52]	; (801991c <xTimerCreateTimerTask+0x5c>)
 80198e6:	480e      	ldr	r0, [pc, #56]	; (8019920 <xTimerCreateTimerTask+0x60>)
 80198e8:	f7fe fea4 	bl	8018634 <xTaskCreate>
 80198ec:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d10a      	bne.n	801990a <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80198f4:	f04f 0320 	mov.w	r3, #32
 80198f8:	f383 8811 	msr	BASEPRI, r3
 80198fc:	f3bf 8f6f 	isb	sy
 8019900:	f3bf 8f4f 	dsb	sy
 8019904:	603b      	str	r3, [r7, #0]
}
 8019906:	bf00      	nop
 8019908:	e7fe      	b.n	8019908 <xTimerCreateTimerTask+0x48>
	return xReturn;
 801990a:	687b      	ldr	r3, [r7, #4]
}
 801990c:	4618      	mov	r0, r3
 801990e:	3708      	adds	r7, #8
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}
 8019914:	20000e40 	.word	0x20000e40
 8019918:	20000e44 	.word	0x20000e44
 801991c:	080224dc 	.word	0x080224dc
 8019920:	08019a59 	.word	0x08019a59

08019924 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b08a      	sub	sp, #40	; 0x28
 8019928:	af00      	add	r7, sp, #0
 801992a:	60f8      	str	r0, [r7, #12]
 801992c:	60b9      	str	r1, [r7, #8]
 801992e:	607a      	str	r2, [r7, #4]
 8019930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019932:	2300      	movs	r3, #0
 8019934:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	2b00      	cmp	r3, #0
 801993a:	d10a      	bne.n	8019952 <xTimerGenericCommand+0x2e>
	__asm volatile
 801993c:	f04f 0320 	mov.w	r3, #32
 8019940:	f383 8811 	msr	BASEPRI, r3
 8019944:	f3bf 8f6f 	isb	sy
 8019948:	f3bf 8f4f 	dsb	sy
 801994c:	623b      	str	r3, [r7, #32]
}
 801994e:	bf00      	nop
 8019950:	e7fe      	b.n	8019950 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019952:	4b1a      	ldr	r3, [pc, #104]	; (80199bc <xTimerGenericCommand+0x98>)
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	2b00      	cmp	r3, #0
 8019958:	d02a      	beq.n	80199b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801995a:	68bb      	ldr	r3, [r7, #8]
 801995c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	2b05      	cmp	r3, #5
 801996a:	dc18      	bgt.n	801999e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801996c:	f7ff fd70 	bl	8019450 <xTaskGetSchedulerState>
 8019970:	4603      	mov	r3, r0
 8019972:	2b02      	cmp	r3, #2
 8019974:	d109      	bne.n	801998a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019976:	4b11      	ldr	r3, [pc, #68]	; (80199bc <xTimerGenericCommand+0x98>)
 8019978:	6818      	ldr	r0, [r3, #0]
 801997a:	f107 0114 	add.w	r1, r7, #20
 801997e:	2300      	movs	r3, #0
 8019980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019982:	f7fe f841 	bl	8017a08 <xQueueGenericSend>
 8019986:	6278      	str	r0, [r7, #36]	; 0x24
 8019988:	e012      	b.n	80199b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801998a:	4b0c      	ldr	r3, [pc, #48]	; (80199bc <xTimerGenericCommand+0x98>)
 801998c:	6818      	ldr	r0, [r3, #0]
 801998e:	f107 0114 	add.w	r1, r7, #20
 8019992:	2300      	movs	r3, #0
 8019994:	2200      	movs	r2, #0
 8019996:	f7fe f837 	bl	8017a08 <xQueueGenericSend>
 801999a:	6278      	str	r0, [r7, #36]	; 0x24
 801999c:	e008      	b.n	80199b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801999e:	4b07      	ldr	r3, [pc, #28]	; (80199bc <xTimerGenericCommand+0x98>)
 80199a0:	6818      	ldr	r0, [r3, #0]
 80199a2:	f107 0114 	add.w	r1, r7, #20
 80199a6:	2300      	movs	r3, #0
 80199a8:	683a      	ldr	r2, [r7, #0]
 80199aa:	f7fe f92b 	bl	8017c04 <xQueueGenericSendFromISR>
 80199ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80199b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80199b2:	4618      	mov	r0, r3
 80199b4:	3728      	adds	r7, #40	; 0x28
 80199b6:	46bd      	mov	sp, r7
 80199b8:	bd80      	pop	{r7, pc}
 80199ba:	bf00      	nop
 80199bc:	20000e40 	.word	0x20000e40

080199c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b088      	sub	sp, #32
 80199c4:	af02      	add	r7, sp, #8
 80199c6:	6078      	str	r0, [r7, #4]
 80199c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80199ca:	4b22      	ldr	r3, [pc, #136]	; (8019a54 <prvProcessExpiredTimer+0x94>)
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	68db      	ldr	r3, [r3, #12]
 80199d0:	68db      	ldr	r3, [r3, #12]
 80199d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	3304      	adds	r3, #4
 80199d8:	4618      	mov	r0, r3
 80199da:	f7fd fef1 	bl	80177c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80199de:	697b      	ldr	r3, [r7, #20]
 80199e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80199e4:	f003 0304 	and.w	r3, r3, #4
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d022      	beq.n	8019a32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80199ec:	697b      	ldr	r3, [r7, #20]
 80199ee:	699a      	ldr	r2, [r3, #24]
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	18d1      	adds	r1, r2, r3
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	683a      	ldr	r2, [r7, #0]
 80199f8:	6978      	ldr	r0, [r7, #20]
 80199fa:	f000 f8d1 	bl	8019ba0 <prvInsertTimerInActiveList>
 80199fe:	4603      	mov	r3, r0
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d01f      	beq.n	8019a44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019a04:	2300      	movs	r3, #0
 8019a06:	9300      	str	r3, [sp, #0]
 8019a08:	2300      	movs	r3, #0
 8019a0a:	687a      	ldr	r2, [r7, #4]
 8019a0c:	2100      	movs	r1, #0
 8019a0e:	6978      	ldr	r0, [r7, #20]
 8019a10:	f7ff ff88 	bl	8019924 <xTimerGenericCommand>
 8019a14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019a16:	693b      	ldr	r3, [r7, #16]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d113      	bne.n	8019a44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019a1c:	f04f 0320 	mov.w	r3, #32
 8019a20:	f383 8811 	msr	BASEPRI, r3
 8019a24:	f3bf 8f6f 	isb	sy
 8019a28:	f3bf 8f4f 	dsb	sy
 8019a2c:	60fb      	str	r3, [r7, #12]
}
 8019a2e:	bf00      	nop
 8019a30:	e7fe      	b.n	8019a30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019a32:	697b      	ldr	r3, [r7, #20]
 8019a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019a38:	f023 0301 	bic.w	r3, r3, #1
 8019a3c:	b2da      	uxtb	r2, r3
 8019a3e:	697b      	ldr	r3, [r7, #20]
 8019a40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019a44:	697b      	ldr	r3, [r7, #20]
 8019a46:	6a1b      	ldr	r3, [r3, #32]
 8019a48:	6978      	ldr	r0, [r7, #20]
 8019a4a:	4798      	blx	r3
}
 8019a4c:	bf00      	nop
 8019a4e:	3718      	adds	r7, #24
 8019a50:	46bd      	mov	sp, r7
 8019a52:	bd80      	pop	{r7, pc}
 8019a54:	20000e38 	.word	0x20000e38

08019a58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	b084      	sub	sp, #16
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019a60:	f107 0308 	add.w	r3, r7, #8
 8019a64:	4618      	mov	r0, r3
 8019a66:	f000 f857 	bl	8019b18 <prvGetNextExpireTime>
 8019a6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019a6c:	68bb      	ldr	r3, [r7, #8]
 8019a6e:	4619      	mov	r1, r3
 8019a70:	68f8      	ldr	r0, [r7, #12]
 8019a72:	f000 f803 	bl	8019a7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019a76:	f000 f8d5 	bl	8019c24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019a7a:	e7f1      	b.n	8019a60 <prvTimerTask+0x8>

08019a7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b084      	sub	sp, #16
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]
 8019a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019a86:	f7ff f901 	bl	8018c8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019a8a:	f107 0308 	add.w	r3, r7, #8
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f000 f866 	bl	8019b60 <prvSampleTimeNow>
 8019a94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019a96:	68bb      	ldr	r3, [r7, #8]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d130      	bne.n	8019afe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019a9c:	683b      	ldr	r3, [r7, #0]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d10a      	bne.n	8019ab8 <prvProcessTimerOrBlockTask+0x3c>
 8019aa2:	687a      	ldr	r2, [r7, #4]
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	429a      	cmp	r2, r3
 8019aa8:	d806      	bhi.n	8019ab8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019aaa:	f7ff f8fd 	bl	8018ca8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019aae:	68f9      	ldr	r1, [r7, #12]
 8019ab0:	6878      	ldr	r0, [r7, #4]
 8019ab2:	f7ff ff85 	bl	80199c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019ab6:	e024      	b.n	8019b02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019ab8:	683b      	ldr	r3, [r7, #0]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d008      	beq.n	8019ad0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019abe:	4b13      	ldr	r3, [pc, #76]	; (8019b0c <prvProcessTimerOrBlockTask+0x90>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d101      	bne.n	8019acc <prvProcessTimerOrBlockTask+0x50>
 8019ac8:	2301      	movs	r3, #1
 8019aca:	e000      	b.n	8019ace <prvProcessTimerOrBlockTask+0x52>
 8019acc:	2300      	movs	r3, #0
 8019ace:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019ad0:	4b0f      	ldr	r3, [pc, #60]	; (8019b10 <prvProcessTimerOrBlockTask+0x94>)
 8019ad2:	6818      	ldr	r0, [r3, #0]
 8019ad4:	687a      	ldr	r2, [r7, #4]
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	1ad3      	subs	r3, r2, r3
 8019ada:	683a      	ldr	r2, [r7, #0]
 8019adc:	4619      	mov	r1, r3
 8019ade:	f7fe fd75 	bl	80185cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019ae2:	f7ff f8e1 	bl	8018ca8 <xTaskResumeAll>
 8019ae6:	4603      	mov	r3, r0
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d10a      	bne.n	8019b02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019aec:	4b09      	ldr	r3, [pc, #36]	; (8019b14 <prvProcessTimerOrBlockTask+0x98>)
 8019aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019af2:	601a      	str	r2, [r3, #0]
 8019af4:	f3bf 8f4f 	dsb	sy
 8019af8:	f3bf 8f6f 	isb	sy
}
 8019afc:	e001      	b.n	8019b02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019afe:	f7ff f8d3 	bl	8018ca8 <xTaskResumeAll>
}
 8019b02:	bf00      	nop
 8019b04:	3710      	adds	r7, #16
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bd80      	pop	{r7, pc}
 8019b0a:	bf00      	nop
 8019b0c:	20000e3c 	.word	0x20000e3c
 8019b10:	20000e40 	.word	0x20000e40
 8019b14:	e000ed04 	.word	0xe000ed04

08019b18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019b18:	b480      	push	{r7}
 8019b1a:	b085      	sub	sp, #20
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019b20:	4b0e      	ldr	r3, [pc, #56]	; (8019b5c <prvGetNextExpireTime+0x44>)
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d101      	bne.n	8019b2e <prvGetNextExpireTime+0x16>
 8019b2a:	2201      	movs	r2, #1
 8019b2c:	e000      	b.n	8019b30 <prvGetNextExpireTime+0x18>
 8019b2e:	2200      	movs	r2, #0
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d105      	bne.n	8019b48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019b3c:	4b07      	ldr	r3, [pc, #28]	; (8019b5c <prvGetNextExpireTime+0x44>)
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	68db      	ldr	r3, [r3, #12]
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	60fb      	str	r3, [r7, #12]
 8019b46:	e001      	b.n	8019b4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019b48:	2300      	movs	r3, #0
 8019b4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
}
 8019b4e:	4618      	mov	r0, r3
 8019b50:	3714      	adds	r7, #20
 8019b52:	46bd      	mov	sp, r7
 8019b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b58:	4770      	bx	lr
 8019b5a:	bf00      	nop
 8019b5c:	20000e38 	.word	0x20000e38

08019b60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b084      	sub	sp, #16
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019b68:	f7ff f93a 	bl	8018de0 <xTaskGetTickCount>
 8019b6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019b6e:	4b0b      	ldr	r3, [pc, #44]	; (8019b9c <prvSampleTimeNow+0x3c>)
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	68fa      	ldr	r2, [r7, #12]
 8019b74:	429a      	cmp	r2, r3
 8019b76:	d205      	bcs.n	8019b84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019b78:	f000 f91a 	bl	8019db0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	2201      	movs	r2, #1
 8019b80:	601a      	str	r2, [r3, #0]
 8019b82:	e002      	b.n	8019b8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	2200      	movs	r2, #0
 8019b88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019b8a:	4a04      	ldr	r2, [pc, #16]	; (8019b9c <prvSampleTimeNow+0x3c>)
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019b90:	68fb      	ldr	r3, [r7, #12]
}
 8019b92:	4618      	mov	r0, r3
 8019b94:	3710      	adds	r7, #16
 8019b96:	46bd      	mov	sp, r7
 8019b98:	bd80      	pop	{r7, pc}
 8019b9a:	bf00      	nop
 8019b9c:	20000e48 	.word	0x20000e48

08019ba0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019ba0:	b580      	push	{r7, lr}
 8019ba2:	b086      	sub	sp, #24
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	60f8      	str	r0, [r7, #12]
 8019ba8:	60b9      	str	r1, [r7, #8]
 8019baa:	607a      	str	r2, [r7, #4]
 8019bac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019bae:	2300      	movs	r3, #0
 8019bb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	68ba      	ldr	r2, [r7, #8]
 8019bb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	68fa      	ldr	r2, [r7, #12]
 8019bbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019bbe:	68ba      	ldr	r2, [r7, #8]
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	d812      	bhi.n	8019bec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019bc6:	687a      	ldr	r2, [r7, #4]
 8019bc8:	683b      	ldr	r3, [r7, #0]
 8019bca:	1ad2      	subs	r2, r2, r3
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	699b      	ldr	r3, [r3, #24]
 8019bd0:	429a      	cmp	r2, r3
 8019bd2:	d302      	bcc.n	8019bda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019bd4:	2301      	movs	r3, #1
 8019bd6:	617b      	str	r3, [r7, #20]
 8019bd8:	e01b      	b.n	8019c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019bda:	4b10      	ldr	r3, [pc, #64]	; (8019c1c <prvInsertTimerInActiveList+0x7c>)
 8019bdc:	681a      	ldr	r2, [r3, #0]
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	3304      	adds	r3, #4
 8019be2:	4619      	mov	r1, r3
 8019be4:	4610      	mov	r0, r2
 8019be6:	f7fd fdb2 	bl	801774e <vListInsert>
 8019bea:	e012      	b.n	8019c12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019bec:	687a      	ldr	r2, [r7, #4]
 8019bee:	683b      	ldr	r3, [r7, #0]
 8019bf0:	429a      	cmp	r2, r3
 8019bf2:	d206      	bcs.n	8019c02 <prvInsertTimerInActiveList+0x62>
 8019bf4:	68ba      	ldr	r2, [r7, #8]
 8019bf6:	683b      	ldr	r3, [r7, #0]
 8019bf8:	429a      	cmp	r2, r3
 8019bfa:	d302      	bcc.n	8019c02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	617b      	str	r3, [r7, #20]
 8019c00:	e007      	b.n	8019c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019c02:	4b07      	ldr	r3, [pc, #28]	; (8019c20 <prvInsertTimerInActiveList+0x80>)
 8019c04:	681a      	ldr	r2, [r3, #0]
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	3304      	adds	r3, #4
 8019c0a:	4619      	mov	r1, r3
 8019c0c:	4610      	mov	r0, r2
 8019c0e:	f7fd fd9e 	bl	801774e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019c12:	697b      	ldr	r3, [r7, #20]
}
 8019c14:	4618      	mov	r0, r3
 8019c16:	3718      	adds	r7, #24
 8019c18:	46bd      	mov	sp, r7
 8019c1a:	bd80      	pop	{r7, pc}
 8019c1c:	20000e3c 	.word	0x20000e3c
 8019c20:	20000e38 	.word	0x20000e38

08019c24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b08c      	sub	sp, #48	; 0x30
 8019c28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019c2a:	e0ae      	b.n	8019d8a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019c2c:	68bb      	ldr	r3, [r7, #8]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	f2c0 80aa 	blt.w	8019d88 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019c34:	693b      	ldr	r3, [r7, #16]
 8019c36:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3a:	695b      	ldr	r3, [r3, #20]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d004      	beq.n	8019c4a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c42:	3304      	adds	r3, #4
 8019c44:	4618      	mov	r0, r3
 8019c46:	f7fd fdbb 	bl	80177c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019c4a:	1d3b      	adds	r3, r7, #4
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f7ff ff87 	bl	8019b60 <prvSampleTimeNow>
 8019c52:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8019c54:	68bb      	ldr	r3, [r7, #8]
 8019c56:	2b09      	cmp	r3, #9
 8019c58:	f200 8097 	bhi.w	8019d8a <prvProcessReceivedCommands+0x166>
 8019c5c:	a201      	add	r2, pc, #4	; (adr r2, 8019c64 <prvProcessReceivedCommands+0x40>)
 8019c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c62:	bf00      	nop
 8019c64:	08019c8d 	.word	0x08019c8d
 8019c68:	08019c8d 	.word	0x08019c8d
 8019c6c:	08019c8d 	.word	0x08019c8d
 8019c70:	08019d01 	.word	0x08019d01
 8019c74:	08019d15 	.word	0x08019d15
 8019c78:	08019d5f 	.word	0x08019d5f
 8019c7c:	08019c8d 	.word	0x08019c8d
 8019c80:	08019c8d 	.word	0x08019c8d
 8019c84:	08019d01 	.word	0x08019d01
 8019c88:	08019d15 	.word	0x08019d15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c92:	f043 0301 	orr.w	r3, r3, #1
 8019c96:	b2da      	uxtb	r2, r3
 8019c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019c9e:	68fa      	ldr	r2, [r7, #12]
 8019ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca2:	699b      	ldr	r3, [r3, #24]
 8019ca4:	18d1      	adds	r1, r2, r3
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	6a3a      	ldr	r2, [r7, #32]
 8019caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019cac:	f7ff ff78 	bl	8019ba0 <prvInsertTimerInActiveList>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d069      	beq.n	8019d8a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cb8:	6a1b      	ldr	r3, [r3, #32]
 8019cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019cbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019cc4:	f003 0304 	and.w	r3, r3, #4
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d05e      	beq.n	8019d8a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019ccc:	68fa      	ldr	r2, [r7, #12]
 8019cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cd0:	699b      	ldr	r3, [r3, #24]
 8019cd2:	441a      	add	r2, r3
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	9300      	str	r3, [sp, #0]
 8019cd8:	2300      	movs	r3, #0
 8019cda:	2100      	movs	r1, #0
 8019cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019cde:	f7ff fe21 	bl	8019924 <xTimerGenericCommand>
 8019ce2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8019ce4:	69fb      	ldr	r3, [r7, #28]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d14f      	bne.n	8019d8a <prvProcessReceivedCommands+0x166>
	__asm volatile
 8019cea:	f04f 0320 	mov.w	r3, #32
 8019cee:	f383 8811 	msr	BASEPRI, r3
 8019cf2:	f3bf 8f6f 	isb	sy
 8019cf6:	f3bf 8f4f 	dsb	sy
 8019cfa:	61bb      	str	r3, [r7, #24]
}
 8019cfc:	bf00      	nop
 8019cfe:	e7fe      	b.n	8019cfe <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d06:	f023 0301 	bic.w	r3, r3, #1
 8019d0a:	b2da      	uxtb	r2, r3
 8019d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019d12:	e03a      	b.n	8019d8a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d1a:	f043 0301 	orr.w	r3, r3, #1
 8019d1e:	b2da      	uxtb	r2, r3
 8019d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019d26:	68fa      	ldr	r2, [r7, #12]
 8019d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2e:	699b      	ldr	r3, [r3, #24]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d10a      	bne.n	8019d4a <prvProcessReceivedCommands+0x126>
	__asm volatile
 8019d34:	f04f 0320 	mov.w	r3, #32
 8019d38:	f383 8811 	msr	BASEPRI, r3
 8019d3c:	f3bf 8f6f 	isb	sy
 8019d40:	f3bf 8f4f 	dsb	sy
 8019d44:	617b      	str	r3, [r7, #20]
}
 8019d46:	bf00      	nop
 8019d48:	e7fe      	b.n	8019d48 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d4c:	699a      	ldr	r2, [r3, #24]
 8019d4e:	6a3b      	ldr	r3, [r7, #32]
 8019d50:	18d1      	adds	r1, r2, r3
 8019d52:	6a3b      	ldr	r3, [r7, #32]
 8019d54:	6a3a      	ldr	r2, [r7, #32]
 8019d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d58:	f7ff ff22 	bl	8019ba0 <prvInsertTimerInActiveList>
					break;
 8019d5c:	e015      	b.n	8019d8a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d64:	f003 0302 	and.w	r3, r3, #2
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d103      	bne.n	8019d74 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8019d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d6e:	f000 fbcf 	bl	801a510 <vPortFree>
 8019d72:	e00a      	b.n	8019d8a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d7a:	f023 0301 	bic.w	r3, r3, #1
 8019d7e:	b2da      	uxtb	r2, r3
 8019d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019d86:	e000      	b.n	8019d8a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019d88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019d8a:	4b08      	ldr	r3, [pc, #32]	; (8019dac <prvProcessReceivedCommands+0x188>)
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	f107 0108 	add.w	r1, r7, #8
 8019d92:	2200      	movs	r2, #0
 8019d94:	4618      	mov	r0, r3
 8019d96:	f7fe f85b 	bl	8017e50 <xQueueReceive>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	f47f af45 	bne.w	8019c2c <prvProcessReceivedCommands+0x8>
	}
}
 8019da2:	bf00      	nop
 8019da4:	bf00      	nop
 8019da6:	3728      	adds	r7, #40	; 0x28
 8019da8:	46bd      	mov	sp, r7
 8019daa:	bd80      	pop	{r7, pc}
 8019dac:	20000e40 	.word	0x20000e40

08019db0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b088      	sub	sp, #32
 8019db4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019db6:	e048      	b.n	8019e4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019db8:	4b2d      	ldr	r3, [pc, #180]	; (8019e70 <prvSwitchTimerLists+0xc0>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	68db      	ldr	r3, [r3, #12]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019dc2:	4b2b      	ldr	r3, [pc, #172]	; (8019e70 <prvSwitchTimerLists+0xc0>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	68db      	ldr	r3, [r3, #12]
 8019dc8:	68db      	ldr	r3, [r3, #12]
 8019dca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019dcc:	68fb      	ldr	r3, [r7, #12]
 8019dce:	3304      	adds	r3, #4
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	f7fd fcf5 	bl	80177c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	6a1b      	ldr	r3, [r3, #32]
 8019dda:	68f8      	ldr	r0, [r7, #12]
 8019ddc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019de4:	f003 0304 	and.w	r3, r3, #4
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d02e      	beq.n	8019e4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	699b      	ldr	r3, [r3, #24]
 8019df0:	693a      	ldr	r2, [r7, #16]
 8019df2:	4413      	add	r3, r2
 8019df4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019df6:	68ba      	ldr	r2, [r7, #8]
 8019df8:	693b      	ldr	r3, [r7, #16]
 8019dfa:	429a      	cmp	r2, r3
 8019dfc:	d90e      	bls.n	8019e1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	68ba      	ldr	r2, [r7, #8]
 8019e02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	68fa      	ldr	r2, [r7, #12]
 8019e08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019e0a:	4b19      	ldr	r3, [pc, #100]	; (8019e70 <prvSwitchTimerLists+0xc0>)
 8019e0c:	681a      	ldr	r2, [r3, #0]
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	3304      	adds	r3, #4
 8019e12:	4619      	mov	r1, r3
 8019e14:	4610      	mov	r0, r2
 8019e16:	f7fd fc9a 	bl	801774e <vListInsert>
 8019e1a:	e016      	b.n	8019e4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	9300      	str	r3, [sp, #0]
 8019e20:	2300      	movs	r3, #0
 8019e22:	693a      	ldr	r2, [r7, #16]
 8019e24:	2100      	movs	r1, #0
 8019e26:	68f8      	ldr	r0, [r7, #12]
 8019e28:	f7ff fd7c 	bl	8019924 <xTimerGenericCommand>
 8019e2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d10a      	bne.n	8019e4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019e34:	f04f 0320 	mov.w	r3, #32
 8019e38:	f383 8811 	msr	BASEPRI, r3
 8019e3c:	f3bf 8f6f 	isb	sy
 8019e40:	f3bf 8f4f 	dsb	sy
 8019e44:	603b      	str	r3, [r7, #0]
}
 8019e46:	bf00      	nop
 8019e48:	e7fe      	b.n	8019e48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019e4a:	4b09      	ldr	r3, [pc, #36]	; (8019e70 <prvSwitchTimerLists+0xc0>)
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d1b1      	bne.n	8019db8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019e54:	4b06      	ldr	r3, [pc, #24]	; (8019e70 <prvSwitchTimerLists+0xc0>)
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019e5a:	4b06      	ldr	r3, [pc, #24]	; (8019e74 <prvSwitchTimerLists+0xc4>)
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	4a04      	ldr	r2, [pc, #16]	; (8019e70 <prvSwitchTimerLists+0xc0>)
 8019e60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019e62:	4a04      	ldr	r2, [pc, #16]	; (8019e74 <prvSwitchTimerLists+0xc4>)
 8019e64:	697b      	ldr	r3, [r7, #20]
 8019e66:	6013      	str	r3, [r2, #0]
}
 8019e68:	bf00      	nop
 8019e6a:	3718      	adds	r7, #24
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}
 8019e70:	20000e38 	.word	0x20000e38
 8019e74:	20000e3c 	.word	0x20000e3c

08019e78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019e7c:	f000 f962 	bl	801a144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019e80:	4b12      	ldr	r3, [pc, #72]	; (8019ecc <prvCheckForValidListAndQueue+0x54>)
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d11d      	bne.n	8019ec4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8019e88:	4811      	ldr	r0, [pc, #68]	; (8019ed0 <prvCheckForValidListAndQueue+0x58>)
 8019e8a:	f7fd fc0f 	bl	80176ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019e8e:	4811      	ldr	r0, [pc, #68]	; (8019ed4 <prvCheckForValidListAndQueue+0x5c>)
 8019e90:	f7fd fc0c 	bl	80176ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019e94:	4b10      	ldr	r3, [pc, #64]	; (8019ed8 <prvCheckForValidListAndQueue+0x60>)
 8019e96:	4a0e      	ldr	r2, [pc, #56]	; (8019ed0 <prvCheckForValidListAndQueue+0x58>)
 8019e98:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019e9a:	4b10      	ldr	r3, [pc, #64]	; (8019edc <prvCheckForValidListAndQueue+0x64>)
 8019e9c:	4a0d      	ldr	r2, [pc, #52]	; (8019ed4 <prvCheckForValidListAndQueue+0x5c>)
 8019e9e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	210c      	movs	r1, #12
 8019ea4:	2064      	movs	r0, #100	; 0x64
 8019ea6:	f7fd fd1d 	bl	80178e4 <xQueueGenericCreate>
 8019eaa:	4603      	mov	r3, r0
 8019eac:	4a07      	ldr	r2, [pc, #28]	; (8019ecc <prvCheckForValidListAndQueue+0x54>)
 8019eae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019eb0:	4b06      	ldr	r3, [pc, #24]	; (8019ecc <prvCheckForValidListAndQueue+0x54>)
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d005      	beq.n	8019ec4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019eb8:	4b04      	ldr	r3, [pc, #16]	; (8019ecc <prvCheckForValidListAndQueue+0x54>)
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	4908      	ldr	r1, [pc, #32]	; (8019ee0 <prvCheckForValidListAndQueue+0x68>)
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	f7fe fb5a 	bl	8018578 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019ec4:	f000 f96e 	bl	801a1a4 <vPortExitCritical>
}
 8019ec8:	bf00      	nop
 8019eca:	bd80      	pop	{r7, pc}
 8019ecc:	20000e40 	.word	0x20000e40
 8019ed0:	20000e10 	.word	0x20000e10
 8019ed4:	20000e24 	.word	0x20000e24
 8019ed8:	20000e38 	.word	0x20000e38
 8019edc:	20000e3c 	.word	0x20000e3c
 8019ee0:	080224e4 	.word	0x080224e4

08019ee4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019ee4:	b480      	push	{r7}
 8019ee6:	b085      	sub	sp, #20
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	60f8      	str	r0, [r7, #12]
 8019eec:	60b9      	str	r1, [r7, #8]
 8019eee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	3b04      	subs	r3, #4
 8019ef4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	3b04      	subs	r3, #4
 8019f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	f023 0201 	bic.w	r2, r3, #1
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	3b04      	subs	r3, #4
 8019f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019f14:	4a0c      	ldr	r2, [pc, #48]	; (8019f48 <pxPortInitialiseStack+0x64>)
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	3b14      	subs	r3, #20
 8019f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019f20:	687a      	ldr	r2, [r7, #4]
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	3b04      	subs	r3, #4
 8019f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	f06f 0202 	mvn.w	r2, #2
 8019f32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	3b20      	subs	r3, #32
 8019f38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019f3a:	68fb      	ldr	r3, [r7, #12]
}
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	3714      	adds	r7, #20
 8019f40:	46bd      	mov	sp, r7
 8019f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f46:	4770      	bx	lr
 8019f48:	08019f4d 	.word	0x08019f4d

08019f4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019f4c:	b480      	push	{r7}
 8019f4e:	b085      	sub	sp, #20
 8019f50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019f52:	2300      	movs	r3, #0
 8019f54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019f56:	4b12      	ldr	r3, [pc, #72]	; (8019fa0 <prvTaskExitError+0x54>)
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f5e:	d00a      	beq.n	8019f76 <prvTaskExitError+0x2a>
	__asm volatile
 8019f60:	f04f 0320 	mov.w	r3, #32
 8019f64:	f383 8811 	msr	BASEPRI, r3
 8019f68:	f3bf 8f6f 	isb	sy
 8019f6c:	f3bf 8f4f 	dsb	sy
 8019f70:	60fb      	str	r3, [r7, #12]
}
 8019f72:	bf00      	nop
 8019f74:	e7fe      	b.n	8019f74 <prvTaskExitError+0x28>
	__asm volatile
 8019f76:	f04f 0320 	mov.w	r3, #32
 8019f7a:	f383 8811 	msr	BASEPRI, r3
 8019f7e:	f3bf 8f6f 	isb	sy
 8019f82:	f3bf 8f4f 	dsb	sy
 8019f86:	60bb      	str	r3, [r7, #8]
}
 8019f88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019f8a:	bf00      	nop
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d0fc      	beq.n	8019f8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019f92:	bf00      	nop
 8019f94:	bf00      	nop
 8019f96:	3714      	adds	r7, #20
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f9e:	4770      	bx	lr
 8019fa0:	20000080 	.word	0x20000080
	...

08019fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019fb0:	4b07      	ldr	r3, [pc, #28]	; (8019fd0 <pxCurrentTCBConst2>)
 8019fb2:	6819      	ldr	r1, [r3, #0]
 8019fb4:	6808      	ldr	r0, [r1, #0]
 8019fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fba:	f380 8809 	msr	PSP, r0
 8019fbe:	f3bf 8f6f 	isb	sy
 8019fc2:	f04f 0000 	mov.w	r0, #0
 8019fc6:	f380 8811 	msr	BASEPRI, r0
 8019fca:	4770      	bx	lr
 8019fcc:	f3af 8000 	nop.w

08019fd0 <pxCurrentTCBConst2>:
 8019fd0:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019fd4:	bf00      	nop
 8019fd6:	bf00      	nop

08019fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019fd8:	4808      	ldr	r0, [pc, #32]	; (8019ffc <prvPortStartFirstTask+0x24>)
 8019fda:	6800      	ldr	r0, [r0, #0]
 8019fdc:	6800      	ldr	r0, [r0, #0]
 8019fde:	f380 8808 	msr	MSP, r0
 8019fe2:	f04f 0000 	mov.w	r0, #0
 8019fe6:	f380 8814 	msr	CONTROL, r0
 8019fea:	b662      	cpsie	i
 8019fec:	b661      	cpsie	f
 8019fee:	f3bf 8f4f 	dsb	sy
 8019ff2:	f3bf 8f6f 	isb	sy
 8019ff6:	df00      	svc	0
 8019ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019ffa:	bf00      	nop
 8019ffc:	e000ed08 	.word	0xe000ed08

0801a000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a000:	b580      	push	{r7, lr}
 801a002:	b086      	sub	sp, #24
 801a004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a006:	4b46      	ldr	r3, [pc, #280]	; (801a120 <xPortStartScheduler+0x120>)
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	4a46      	ldr	r2, [pc, #280]	; (801a124 <xPortStartScheduler+0x124>)
 801a00c:	4293      	cmp	r3, r2
 801a00e:	d10a      	bne.n	801a026 <xPortStartScheduler+0x26>
	__asm volatile
 801a010:	f04f 0320 	mov.w	r3, #32
 801a014:	f383 8811 	msr	BASEPRI, r3
 801a018:	f3bf 8f6f 	isb	sy
 801a01c:	f3bf 8f4f 	dsb	sy
 801a020:	613b      	str	r3, [r7, #16]
}
 801a022:	bf00      	nop
 801a024:	e7fe      	b.n	801a024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a026:	4b3e      	ldr	r3, [pc, #248]	; (801a120 <xPortStartScheduler+0x120>)
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	4a3f      	ldr	r2, [pc, #252]	; (801a128 <xPortStartScheduler+0x128>)
 801a02c:	4293      	cmp	r3, r2
 801a02e:	d10a      	bne.n	801a046 <xPortStartScheduler+0x46>
	__asm volatile
 801a030:	f04f 0320 	mov.w	r3, #32
 801a034:	f383 8811 	msr	BASEPRI, r3
 801a038:	f3bf 8f6f 	isb	sy
 801a03c:	f3bf 8f4f 	dsb	sy
 801a040:	60fb      	str	r3, [r7, #12]
}
 801a042:	bf00      	nop
 801a044:	e7fe      	b.n	801a044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a046:	4b39      	ldr	r3, [pc, #228]	; (801a12c <xPortStartScheduler+0x12c>)
 801a048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a04a:	697b      	ldr	r3, [r7, #20]
 801a04c:	781b      	ldrb	r3, [r3, #0]
 801a04e:	b2db      	uxtb	r3, r3
 801a050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a052:	697b      	ldr	r3, [r7, #20]
 801a054:	22ff      	movs	r2, #255	; 0xff
 801a056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a058:	697b      	ldr	r3, [r7, #20]
 801a05a:	781b      	ldrb	r3, [r3, #0]
 801a05c:	b2db      	uxtb	r3, r3
 801a05e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a060:	78fb      	ldrb	r3, [r7, #3]
 801a062:	b2db      	uxtb	r3, r3
 801a064:	f003 0320 	and.w	r3, r3, #32
 801a068:	b2da      	uxtb	r2, r3
 801a06a:	4b31      	ldr	r3, [pc, #196]	; (801a130 <xPortStartScheduler+0x130>)
 801a06c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a06e:	4b31      	ldr	r3, [pc, #196]	; (801a134 <xPortStartScheduler+0x134>)
 801a070:	2207      	movs	r2, #7
 801a072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a074:	e009      	b.n	801a08a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801a076:	4b2f      	ldr	r3, [pc, #188]	; (801a134 <xPortStartScheduler+0x134>)
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	3b01      	subs	r3, #1
 801a07c:	4a2d      	ldr	r2, [pc, #180]	; (801a134 <xPortStartScheduler+0x134>)
 801a07e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a080:	78fb      	ldrb	r3, [r7, #3]
 801a082:	b2db      	uxtb	r3, r3
 801a084:	005b      	lsls	r3, r3, #1
 801a086:	b2db      	uxtb	r3, r3
 801a088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a08a:	78fb      	ldrb	r3, [r7, #3]
 801a08c:	b2db      	uxtb	r3, r3
 801a08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a092:	2b80      	cmp	r3, #128	; 0x80
 801a094:	d0ef      	beq.n	801a076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a096:	4b27      	ldr	r3, [pc, #156]	; (801a134 <xPortStartScheduler+0x134>)
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	f1c3 0307 	rsb	r3, r3, #7
 801a09e:	2b04      	cmp	r3, #4
 801a0a0:	d00a      	beq.n	801a0b8 <xPortStartScheduler+0xb8>
	__asm volatile
 801a0a2:	f04f 0320 	mov.w	r3, #32
 801a0a6:	f383 8811 	msr	BASEPRI, r3
 801a0aa:	f3bf 8f6f 	isb	sy
 801a0ae:	f3bf 8f4f 	dsb	sy
 801a0b2:	60bb      	str	r3, [r7, #8]
}
 801a0b4:	bf00      	nop
 801a0b6:	e7fe      	b.n	801a0b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a0b8:	4b1e      	ldr	r3, [pc, #120]	; (801a134 <xPortStartScheduler+0x134>)
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	021b      	lsls	r3, r3, #8
 801a0be:	4a1d      	ldr	r2, [pc, #116]	; (801a134 <xPortStartScheduler+0x134>)
 801a0c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a0c2:	4b1c      	ldr	r3, [pc, #112]	; (801a134 <xPortStartScheduler+0x134>)
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a0ca:	4a1a      	ldr	r2, [pc, #104]	; (801a134 <xPortStartScheduler+0x134>)
 801a0cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	b2da      	uxtb	r2, r3
 801a0d2:	697b      	ldr	r3, [r7, #20]
 801a0d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a0d6:	4b18      	ldr	r3, [pc, #96]	; (801a138 <xPortStartScheduler+0x138>)
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	4a17      	ldr	r2, [pc, #92]	; (801a138 <xPortStartScheduler+0x138>)
 801a0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a0e2:	4b15      	ldr	r3, [pc, #84]	; (801a138 <xPortStartScheduler+0x138>)
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	4a14      	ldr	r2, [pc, #80]	; (801a138 <xPortStartScheduler+0x138>)
 801a0e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a0ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a0ee:	f000 f8dd 	bl	801a2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a0f2:	4b12      	ldr	r3, [pc, #72]	; (801a13c <xPortStartScheduler+0x13c>)
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a0f8:	f000 f8fc 	bl	801a2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a0fc:	4b10      	ldr	r3, [pc, #64]	; (801a140 <xPortStartScheduler+0x140>)
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	4a0f      	ldr	r2, [pc, #60]	; (801a140 <xPortStartScheduler+0x140>)
 801a102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a108:	f7ff ff66 	bl	8019fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a10c:	f7fe ff4c 	bl	8018fa8 <vTaskSwitchContext>
	prvTaskExitError();
 801a110:	f7ff ff1c 	bl	8019f4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a114:	2300      	movs	r3, #0
}
 801a116:	4618      	mov	r0, r3
 801a118:	3718      	adds	r7, #24
 801a11a:	46bd      	mov	sp, r7
 801a11c:	bd80      	pop	{r7, pc}
 801a11e:	bf00      	nop
 801a120:	e000ed00 	.word	0xe000ed00
 801a124:	410fc271 	.word	0x410fc271
 801a128:	410fc270 	.word	0x410fc270
 801a12c:	e000e400 	.word	0xe000e400
 801a130:	20000e4c 	.word	0x20000e4c
 801a134:	20000e50 	.word	0x20000e50
 801a138:	e000ed20 	.word	0xe000ed20
 801a13c:	20000080 	.word	0x20000080
 801a140:	e000ef34 	.word	0xe000ef34

0801a144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a144:	b480      	push	{r7}
 801a146:	b083      	sub	sp, #12
 801a148:	af00      	add	r7, sp, #0
	__asm volatile
 801a14a:	f04f 0320 	mov.w	r3, #32
 801a14e:	f383 8811 	msr	BASEPRI, r3
 801a152:	f3bf 8f6f 	isb	sy
 801a156:	f3bf 8f4f 	dsb	sy
 801a15a:	607b      	str	r3, [r7, #4]
}
 801a15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a15e:	4b0f      	ldr	r3, [pc, #60]	; (801a19c <vPortEnterCritical+0x58>)
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	3301      	adds	r3, #1
 801a164:	4a0d      	ldr	r2, [pc, #52]	; (801a19c <vPortEnterCritical+0x58>)
 801a166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a168:	4b0c      	ldr	r3, [pc, #48]	; (801a19c <vPortEnterCritical+0x58>)
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	2b01      	cmp	r3, #1
 801a16e:	d10f      	bne.n	801a190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a170:	4b0b      	ldr	r3, [pc, #44]	; (801a1a0 <vPortEnterCritical+0x5c>)
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	b2db      	uxtb	r3, r3
 801a176:	2b00      	cmp	r3, #0
 801a178:	d00a      	beq.n	801a190 <vPortEnterCritical+0x4c>
	__asm volatile
 801a17a:	f04f 0320 	mov.w	r3, #32
 801a17e:	f383 8811 	msr	BASEPRI, r3
 801a182:	f3bf 8f6f 	isb	sy
 801a186:	f3bf 8f4f 	dsb	sy
 801a18a:	603b      	str	r3, [r7, #0]
}
 801a18c:	bf00      	nop
 801a18e:	e7fe      	b.n	801a18e <vPortEnterCritical+0x4a>
	}
}
 801a190:	bf00      	nop
 801a192:	370c      	adds	r7, #12
 801a194:	46bd      	mov	sp, r7
 801a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a19a:	4770      	bx	lr
 801a19c:	20000080 	.word	0x20000080
 801a1a0:	e000ed04 	.word	0xe000ed04

0801a1a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a1a4:	b480      	push	{r7}
 801a1a6:	b083      	sub	sp, #12
 801a1a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a1aa:	4b12      	ldr	r3, [pc, #72]	; (801a1f4 <vPortExitCritical+0x50>)
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d10a      	bne.n	801a1c8 <vPortExitCritical+0x24>
	__asm volatile
 801a1b2:	f04f 0320 	mov.w	r3, #32
 801a1b6:	f383 8811 	msr	BASEPRI, r3
 801a1ba:	f3bf 8f6f 	isb	sy
 801a1be:	f3bf 8f4f 	dsb	sy
 801a1c2:	607b      	str	r3, [r7, #4]
}
 801a1c4:	bf00      	nop
 801a1c6:	e7fe      	b.n	801a1c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a1c8:	4b0a      	ldr	r3, [pc, #40]	; (801a1f4 <vPortExitCritical+0x50>)
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	3b01      	subs	r3, #1
 801a1ce:	4a09      	ldr	r2, [pc, #36]	; (801a1f4 <vPortExitCritical+0x50>)
 801a1d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a1d2:	4b08      	ldr	r3, [pc, #32]	; (801a1f4 <vPortExitCritical+0x50>)
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d105      	bne.n	801a1e6 <vPortExitCritical+0x42>
 801a1da:	2300      	movs	r3, #0
 801a1dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a1de:	683b      	ldr	r3, [r7, #0]
 801a1e0:	f383 8811 	msr	BASEPRI, r3
}
 801a1e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a1e6:	bf00      	nop
 801a1e8:	370c      	adds	r7, #12
 801a1ea:	46bd      	mov	sp, r7
 801a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f0:	4770      	bx	lr
 801a1f2:	bf00      	nop
 801a1f4:	20000080 	.word	0x20000080
	...

0801a200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a200:	f3ef 8009 	mrs	r0, PSP
 801a204:	f3bf 8f6f 	isb	sy
 801a208:	4b15      	ldr	r3, [pc, #84]	; (801a260 <pxCurrentTCBConst>)
 801a20a:	681a      	ldr	r2, [r3, #0]
 801a20c:	f01e 0f10 	tst.w	lr, #16
 801a210:	bf08      	it	eq
 801a212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a21a:	6010      	str	r0, [r2, #0]
 801a21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a220:	f04f 0020 	mov.w	r0, #32
 801a224:	f380 8811 	msr	BASEPRI, r0
 801a228:	f3bf 8f4f 	dsb	sy
 801a22c:	f3bf 8f6f 	isb	sy
 801a230:	f7fe feba 	bl	8018fa8 <vTaskSwitchContext>
 801a234:	f04f 0000 	mov.w	r0, #0
 801a238:	f380 8811 	msr	BASEPRI, r0
 801a23c:	bc09      	pop	{r0, r3}
 801a23e:	6819      	ldr	r1, [r3, #0]
 801a240:	6808      	ldr	r0, [r1, #0]
 801a242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a246:	f01e 0f10 	tst.w	lr, #16
 801a24a:	bf08      	it	eq
 801a24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a250:	f380 8809 	msr	PSP, r0
 801a254:	f3bf 8f6f 	isb	sy
 801a258:	4770      	bx	lr
 801a25a:	bf00      	nop
 801a25c:	f3af 8000 	nop.w

0801a260 <pxCurrentTCBConst>:
 801a260:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a264:	bf00      	nop
 801a266:	bf00      	nop

0801a268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a268:	b580      	push	{r7, lr}
 801a26a:	b082      	sub	sp, #8
 801a26c:	af00      	add	r7, sp, #0
	__asm volatile
 801a26e:	f04f 0320 	mov.w	r3, #32
 801a272:	f383 8811 	msr	BASEPRI, r3
 801a276:	f3bf 8f6f 	isb	sy
 801a27a:	f3bf 8f4f 	dsb	sy
 801a27e:	607b      	str	r3, [r7, #4]
}
 801a280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a282:	f7fe fdbd 	bl	8018e00 <xTaskIncrementTick>
 801a286:	4603      	mov	r3, r0
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d003      	beq.n	801a294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a28c:	4b06      	ldr	r3, [pc, #24]	; (801a2a8 <xPortSysTickHandler+0x40>)
 801a28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a292:	601a      	str	r2, [r3, #0]
 801a294:	2300      	movs	r3, #0
 801a296:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	f383 8811 	msr	BASEPRI, r3
}
 801a29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a2a0:	bf00      	nop
 801a2a2:	3708      	adds	r7, #8
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}
 801a2a8:	e000ed04 	.word	0xe000ed04

0801a2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a2ac:	b480      	push	{r7}
 801a2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a2b0:	4b0b      	ldr	r3, [pc, #44]	; (801a2e0 <vPortSetupTimerInterrupt+0x34>)
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a2b6:	4b0b      	ldr	r3, [pc, #44]	; (801a2e4 <vPortSetupTimerInterrupt+0x38>)
 801a2b8:	2200      	movs	r2, #0
 801a2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a2bc:	4b0a      	ldr	r3, [pc, #40]	; (801a2e8 <vPortSetupTimerInterrupt+0x3c>)
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	4a0a      	ldr	r2, [pc, #40]	; (801a2ec <vPortSetupTimerInterrupt+0x40>)
 801a2c2:	fba2 2303 	umull	r2, r3, r2, r3
 801a2c6:	099b      	lsrs	r3, r3, #6
 801a2c8:	4a09      	ldr	r2, [pc, #36]	; (801a2f0 <vPortSetupTimerInterrupt+0x44>)
 801a2ca:	3b01      	subs	r3, #1
 801a2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a2ce:	4b04      	ldr	r3, [pc, #16]	; (801a2e0 <vPortSetupTimerInterrupt+0x34>)
 801a2d0:	2207      	movs	r2, #7
 801a2d2:	601a      	str	r2, [r3, #0]
}
 801a2d4:	bf00      	nop
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2dc:	4770      	bx	lr
 801a2de:	bf00      	nop
 801a2e0:	e000e010 	.word	0xe000e010
 801a2e4:	e000e018 	.word	0xe000e018
 801a2e8:	20000038 	.word	0x20000038
 801a2ec:	10624dd3 	.word	0x10624dd3
 801a2f0:	e000e014 	.word	0xe000e014

0801a2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a304 <vPortEnableVFP+0x10>
 801a2f8:	6801      	ldr	r1, [r0, #0]
 801a2fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a2fe:	6001      	str	r1, [r0, #0]
 801a300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a302:	bf00      	nop
 801a304:	e000ed88 	.word	0xe000ed88

0801a308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a308:	b480      	push	{r7}
 801a30a:	b085      	sub	sp, #20
 801a30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a30e:	f3ef 8305 	mrs	r3, IPSR
 801a312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	2b0f      	cmp	r3, #15
 801a318:	d914      	bls.n	801a344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a31a:	4a17      	ldr	r2, [pc, #92]	; (801a378 <vPortValidateInterruptPriority+0x70>)
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	4413      	add	r3, r2
 801a320:	781b      	ldrb	r3, [r3, #0]
 801a322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a324:	4b15      	ldr	r3, [pc, #84]	; (801a37c <vPortValidateInterruptPriority+0x74>)
 801a326:	781b      	ldrb	r3, [r3, #0]
 801a328:	7afa      	ldrb	r2, [r7, #11]
 801a32a:	429a      	cmp	r2, r3
 801a32c:	d20a      	bcs.n	801a344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a32e:	f04f 0320 	mov.w	r3, #32
 801a332:	f383 8811 	msr	BASEPRI, r3
 801a336:	f3bf 8f6f 	isb	sy
 801a33a:	f3bf 8f4f 	dsb	sy
 801a33e:	607b      	str	r3, [r7, #4]
}
 801a340:	bf00      	nop
 801a342:	e7fe      	b.n	801a342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a344:	4b0e      	ldr	r3, [pc, #56]	; (801a380 <vPortValidateInterruptPriority+0x78>)
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a34c:	4b0d      	ldr	r3, [pc, #52]	; (801a384 <vPortValidateInterruptPriority+0x7c>)
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	429a      	cmp	r2, r3
 801a352:	d90a      	bls.n	801a36a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a354:	f04f 0320 	mov.w	r3, #32
 801a358:	f383 8811 	msr	BASEPRI, r3
 801a35c:	f3bf 8f6f 	isb	sy
 801a360:	f3bf 8f4f 	dsb	sy
 801a364:	603b      	str	r3, [r7, #0]
}
 801a366:	bf00      	nop
 801a368:	e7fe      	b.n	801a368 <vPortValidateInterruptPriority+0x60>
	}
 801a36a:	bf00      	nop
 801a36c:	3714      	adds	r7, #20
 801a36e:	46bd      	mov	sp, r7
 801a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a374:	4770      	bx	lr
 801a376:	bf00      	nop
 801a378:	e000e3f0 	.word	0xe000e3f0
 801a37c:	20000e4c 	.word	0x20000e4c
 801a380:	e000ed0c 	.word	0xe000ed0c
 801a384:	20000e50 	.word	0x20000e50

0801a388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b08a      	sub	sp, #40	; 0x28
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a390:	2300      	movs	r3, #0
 801a392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a394:	f7fe fc7a 	bl	8018c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a398:	4b58      	ldr	r3, [pc, #352]	; (801a4fc <pvPortMalloc+0x174>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d101      	bne.n	801a3a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a3a0:	f000 f910 	bl	801a5c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a3a4:	4b56      	ldr	r3, [pc, #344]	; (801a500 <pvPortMalloc+0x178>)
 801a3a6:	681a      	ldr	r2, [r3, #0]
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	4013      	ands	r3, r2
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	f040 808e 	bne.w	801a4ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d01d      	beq.n	801a3f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a3b8:	2208      	movs	r2, #8
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	4413      	add	r3, r2
 801a3be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	f003 0307 	and.w	r3, r3, #7
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d014      	beq.n	801a3f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	f023 0307 	bic.w	r3, r3, #7
 801a3d0:	3308      	adds	r3, #8
 801a3d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	f003 0307 	and.w	r3, r3, #7
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d00a      	beq.n	801a3f4 <pvPortMalloc+0x6c>
	__asm volatile
 801a3de:	f04f 0320 	mov.w	r3, #32
 801a3e2:	f383 8811 	msr	BASEPRI, r3
 801a3e6:	f3bf 8f6f 	isb	sy
 801a3ea:	f3bf 8f4f 	dsb	sy
 801a3ee:	617b      	str	r3, [r7, #20]
}
 801a3f0:	bf00      	nop
 801a3f2:	e7fe      	b.n	801a3f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d069      	beq.n	801a4ce <pvPortMalloc+0x146>
 801a3fa:	4b42      	ldr	r3, [pc, #264]	; (801a504 <pvPortMalloc+0x17c>)
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	687a      	ldr	r2, [r7, #4]
 801a400:	429a      	cmp	r2, r3
 801a402:	d864      	bhi.n	801a4ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a404:	4b40      	ldr	r3, [pc, #256]	; (801a508 <pvPortMalloc+0x180>)
 801a406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a408:	4b3f      	ldr	r3, [pc, #252]	; (801a508 <pvPortMalloc+0x180>)
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a40e:	e004      	b.n	801a41a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a41c:	685b      	ldr	r3, [r3, #4]
 801a41e:	687a      	ldr	r2, [r7, #4]
 801a420:	429a      	cmp	r2, r3
 801a422:	d903      	bls.n	801a42c <pvPortMalloc+0xa4>
 801a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d1f1      	bne.n	801a410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a42c:	4b33      	ldr	r3, [pc, #204]	; (801a4fc <pvPortMalloc+0x174>)
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a432:	429a      	cmp	r2, r3
 801a434:	d04b      	beq.n	801a4ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a436:	6a3b      	ldr	r3, [r7, #32]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2208      	movs	r2, #8
 801a43c:	4413      	add	r3, r2
 801a43e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a442:	681a      	ldr	r2, [r3, #0]
 801a444:	6a3b      	ldr	r3, [r7, #32]
 801a446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a44a:	685a      	ldr	r2, [r3, #4]
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	1ad2      	subs	r2, r2, r3
 801a450:	2308      	movs	r3, #8
 801a452:	005b      	lsls	r3, r3, #1
 801a454:	429a      	cmp	r2, r3
 801a456:	d91f      	bls.n	801a498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	4413      	add	r3, r2
 801a45e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a460:	69bb      	ldr	r3, [r7, #24]
 801a462:	f003 0307 	and.w	r3, r3, #7
 801a466:	2b00      	cmp	r3, #0
 801a468:	d00a      	beq.n	801a480 <pvPortMalloc+0xf8>
	__asm volatile
 801a46a:	f04f 0320 	mov.w	r3, #32
 801a46e:	f383 8811 	msr	BASEPRI, r3
 801a472:	f3bf 8f6f 	isb	sy
 801a476:	f3bf 8f4f 	dsb	sy
 801a47a:	613b      	str	r3, [r7, #16]
}
 801a47c:	bf00      	nop
 801a47e:	e7fe      	b.n	801a47e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a482:	685a      	ldr	r2, [r3, #4]
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	1ad2      	subs	r2, r2, r3
 801a488:	69bb      	ldr	r3, [r7, #24]
 801a48a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a48e:	687a      	ldr	r2, [r7, #4]
 801a490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a492:	69b8      	ldr	r0, [r7, #24]
 801a494:	f000 f8f8 	bl	801a688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a498:	4b1a      	ldr	r3, [pc, #104]	; (801a504 <pvPortMalloc+0x17c>)
 801a49a:	681a      	ldr	r2, [r3, #0]
 801a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a49e:	685b      	ldr	r3, [r3, #4]
 801a4a0:	1ad3      	subs	r3, r2, r3
 801a4a2:	4a18      	ldr	r2, [pc, #96]	; (801a504 <pvPortMalloc+0x17c>)
 801a4a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a4a6:	4b17      	ldr	r3, [pc, #92]	; (801a504 <pvPortMalloc+0x17c>)
 801a4a8:	681a      	ldr	r2, [r3, #0]
 801a4aa:	4b18      	ldr	r3, [pc, #96]	; (801a50c <pvPortMalloc+0x184>)
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	429a      	cmp	r2, r3
 801a4b0:	d203      	bcs.n	801a4ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a4b2:	4b14      	ldr	r3, [pc, #80]	; (801a504 <pvPortMalloc+0x17c>)
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	4a15      	ldr	r2, [pc, #84]	; (801a50c <pvPortMalloc+0x184>)
 801a4b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4bc:	685a      	ldr	r2, [r3, #4]
 801a4be:	4b10      	ldr	r3, [pc, #64]	; (801a500 <pvPortMalloc+0x178>)
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	431a      	orrs	r2, r3
 801a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a4ce:	f7fe fbeb 	bl	8018ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a4d2:	69fb      	ldr	r3, [r7, #28]
 801a4d4:	f003 0307 	and.w	r3, r3, #7
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d00a      	beq.n	801a4f2 <pvPortMalloc+0x16a>
	__asm volatile
 801a4dc:	f04f 0320 	mov.w	r3, #32
 801a4e0:	f383 8811 	msr	BASEPRI, r3
 801a4e4:	f3bf 8f6f 	isb	sy
 801a4e8:	f3bf 8f4f 	dsb	sy
 801a4ec:	60fb      	str	r3, [r7, #12]
}
 801a4ee:	bf00      	nop
 801a4f0:	e7fe      	b.n	801a4f0 <pvPortMalloc+0x168>
	return pvReturn;
 801a4f2:	69fb      	ldr	r3, [r7, #28]
}
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	3728      	adds	r7, #40	; 0x28
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	bd80      	pop	{r7, pc}
 801a4fc:	2000fe5c 	.word	0x2000fe5c
 801a500:	2000fe68 	.word	0x2000fe68
 801a504:	2000fe60 	.word	0x2000fe60
 801a508:	2000fe54 	.word	0x2000fe54
 801a50c:	2000fe64 	.word	0x2000fe64

0801a510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a510:	b580      	push	{r7, lr}
 801a512:	b086      	sub	sp, #24
 801a514:	af00      	add	r7, sp, #0
 801a516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d048      	beq.n	801a5b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a522:	2308      	movs	r3, #8
 801a524:	425b      	negs	r3, r3
 801a526:	697a      	ldr	r2, [r7, #20]
 801a528:	4413      	add	r3, r2
 801a52a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a52c:	697b      	ldr	r3, [r7, #20]
 801a52e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a530:	693b      	ldr	r3, [r7, #16]
 801a532:	685a      	ldr	r2, [r3, #4]
 801a534:	4b21      	ldr	r3, [pc, #132]	; (801a5bc <vPortFree+0xac>)
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	4013      	ands	r3, r2
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d10a      	bne.n	801a554 <vPortFree+0x44>
	__asm volatile
 801a53e:	f04f 0320 	mov.w	r3, #32
 801a542:	f383 8811 	msr	BASEPRI, r3
 801a546:	f3bf 8f6f 	isb	sy
 801a54a:	f3bf 8f4f 	dsb	sy
 801a54e:	60fb      	str	r3, [r7, #12]
}
 801a550:	bf00      	nop
 801a552:	e7fe      	b.n	801a552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a554:	693b      	ldr	r3, [r7, #16]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d00a      	beq.n	801a572 <vPortFree+0x62>
	__asm volatile
 801a55c:	f04f 0320 	mov.w	r3, #32
 801a560:	f383 8811 	msr	BASEPRI, r3
 801a564:	f3bf 8f6f 	isb	sy
 801a568:	f3bf 8f4f 	dsb	sy
 801a56c:	60bb      	str	r3, [r7, #8]
}
 801a56e:	bf00      	nop
 801a570:	e7fe      	b.n	801a570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a572:	693b      	ldr	r3, [r7, #16]
 801a574:	685a      	ldr	r2, [r3, #4]
 801a576:	4b11      	ldr	r3, [pc, #68]	; (801a5bc <vPortFree+0xac>)
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	4013      	ands	r3, r2
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d019      	beq.n	801a5b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a580:	693b      	ldr	r3, [r7, #16]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d115      	bne.n	801a5b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a588:	693b      	ldr	r3, [r7, #16]
 801a58a:	685a      	ldr	r2, [r3, #4]
 801a58c:	4b0b      	ldr	r3, [pc, #44]	; (801a5bc <vPortFree+0xac>)
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	43db      	mvns	r3, r3
 801a592:	401a      	ands	r2, r3
 801a594:	693b      	ldr	r3, [r7, #16]
 801a596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a598:	f7fe fb78 	bl	8018c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a59c:	693b      	ldr	r3, [r7, #16]
 801a59e:	685a      	ldr	r2, [r3, #4]
 801a5a0:	4b07      	ldr	r3, [pc, #28]	; (801a5c0 <vPortFree+0xb0>)
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	4413      	add	r3, r2
 801a5a6:	4a06      	ldr	r2, [pc, #24]	; (801a5c0 <vPortFree+0xb0>)
 801a5a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a5aa:	6938      	ldr	r0, [r7, #16]
 801a5ac:	f000 f86c 	bl	801a688 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801a5b0:	f7fe fb7a 	bl	8018ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a5b4:	bf00      	nop
 801a5b6:	3718      	adds	r7, #24
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	bd80      	pop	{r7, pc}
 801a5bc:	2000fe68 	.word	0x2000fe68
 801a5c0:	2000fe60 	.word	0x2000fe60

0801a5c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a5c4:	b480      	push	{r7}
 801a5c6:	b085      	sub	sp, #20
 801a5c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a5ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801a5ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a5d0:	4b27      	ldr	r3, [pc, #156]	; (801a670 <prvHeapInit+0xac>)
 801a5d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	f003 0307 	and.w	r3, r3, #7
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d00c      	beq.n	801a5f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	3307      	adds	r3, #7
 801a5e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	f023 0307 	bic.w	r3, r3, #7
 801a5ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a5ec:	68ba      	ldr	r2, [r7, #8]
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	1ad3      	subs	r3, r2, r3
 801a5f2:	4a1f      	ldr	r2, [pc, #124]	; (801a670 <prvHeapInit+0xac>)
 801a5f4:	4413      	add	r3, r2
 801a5f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a5fc:	4a1d      	ldr	r2, [pc, #116]	; (801a674 <prvHeapInit+0xb0>)
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a602:	4b1c      	ldr	r3, [pc, #112]	; (801a674 <prvHeapInit+0xb0>)
 801a604:	2200      	movs	r2, #0
 801a606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	68ba      	ldr	r2, [r7, #8]
 801a60c:	4413      	add	r3, r2
 801a60e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a610:	2208      	movs	r2, #8
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	1a9b      	subs	r3, r3, r2
 801a616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	f023 0307 	bic.w	r3, r3, #7
 801a61e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	4a15      	ldr	r2, [pc, #84]	; (801a678 <prvHeapInit+0xb4>)
 801a624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a626:	4b14      	ldr	r3, [pc, #80]	; (801a678 <prvHeapInit+0xb4>)
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	2200      	movs	r2, #0
 801a62c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a62e:	4b12      	ldr	r3, [pc, #72]	; (801a678 <prvHeapInit+0xb4>)
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	2200      	movs	r2, #0
 801a634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a63a:	683b      	ldr	r3, [r7, #0]
 801a63c:	68fa      	ldr	r2, [r7, #12]
 801a63e:	1ad2      	subs	r2, r2, r3
 801a640:	683b      	ldr	r3, [r7, #0]
 801a642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a644:	4b0c      	ldr	r3, [pc, #48]	; (801a678 <prvHeapInit+0xb4>)
 801a646:	681a      	ldr	r2, [r3, #0]
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a64c:	683b      	ldr	r3, [r7, #0]
 801a64e:	685b      	ldr	r3, [r3, #4]
 801a650:	4a0a      	ldr	r2, [pc, #40]	; (801a67c <prvHeapInit+0xb8>)
 801a652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a654:	683b      	ldr	r3, [r7, #0]
 801a656:	685b      	ldr	r3, [r3, #4]
 801a658:	4a09      	ldr	r2, [pc, #36]	; (801a680 <prvHeapInit+0xbc>)
 801a65a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a65c:	4b09      	ldr	r3, [pc, #36]	; (801a684 <prvHeapInit+0xc0>)
 801a65e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a662:	601a      	str	r2, [r3, #0]
}
 801a664:	bf00      	nop
 801a666:	3714      	adds	r7, #20
 801a668:	46bd      	mov	sp, r7
 801a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66e:	4770      	bx	lr
 801a670:	20000e54 	.word	0x20000e54
 801a674:	2000fe54 	.word	0x2000fe54
 801a678:	2000fe5c 	.word	0x2000fe5c
 801a67c:	2000fe64 	.word	0x2000fe64
 801a680:	2000fe60 	.word	0x2000fe60
 801a684:	2000fe68 	.word	0x2000fe68

0801a688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a688:	b480      	push	{r7}
 801a68a:	b085      	sub	sp, #20
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a690:	4b28      	ldr	r3, [pc, #160]	; (801a734 <prvInsertBlockIntoFreeList+0xac>)
 801a692:	60fb      	str	r3, [r7, #12]
 801a694:	e002      	b.n	801a69c <prvInsertBlockIntoFreeList+0x14>
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	60fb      	str	r3, [r7, #12]
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	687a      	ldr	r2, [r7, #4]
 801a6a2:	429a      	cmp	r2, r3
 801a6a4:	d8f7      	bhi.n	801a696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	685b      	ldr	r3, [r3, #4]
 801a6ae:	68ba      	ldr	r2, [r7, #8]
 801a6b0:	4413      	add	r3, r2
 801a6b2:	687a      	ldr	r2, [r7, #4]
 801a6b4:	429a      	cmp	r2, r3
 801a6b6:	d108      	bne.n	801a6ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	685a      	ldr	r2, [r3, #4]
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	685b      	ldr	r3, [r3, #4]
 801a6c0:	441a      	add	r2, r3
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	685b      	ldr	r3, [r3, #4]
 801a6d2:	68ba      	ldr	r2, [r7, #8]
 801a6d4:	441a      	add	r2, r3
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	429a      	cmp	r2, r3
 801a6dc:	d118      	bne.n	801a710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	681a      	ldr	r2, [r3, #0]
 801a6e2:	4b15      	ldr	r3, [pc, #84]	; (801a738 <prvInsertBlockIntoFreeList+0xb0>)
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	429a      	cmp	r2, r3
 801a6e8:	d00d      	beq.n	801a706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	685a      	ldr	r2, [r3, #4]
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	685b      	ldr	r3, [r3, #4]
 801a6f4:	441a      	add	r2, r3
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	681a      	ldr	r2, [r3, #0]
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	601a      	str	r2, [r3, #0]
 801a704:	e008      	b.n	801a718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a706:	4b0c      	ldr	r3, [pc, #48]	; (801a738 <prvInsertBlockIntoFreeList+0xb0>)
 801a708:	681a      	ldr	r2, [r3, #0]
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	601a      	str	r2, [r3, #0]
 801a70e:	e003      	b.n	801a718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	681a      	ldr	r2, [r3, #0]
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a718:	68fa      	ldr	r2, [r7, #12]
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	429a      	cmp	r2, r3
 801a71e:	d002      	beq.n	801a726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	687a      	ldr	r2, [r7, #4]
 801a724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a726:	bf00      	nop
 801a728:	3714      	adds	r7, #20
 801a72a:	46bd      	mov	sp, r7
 801a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a730:	4770      	bx	lr
 801a732:	bf00      	nop
 801a734:	2000fe54 	.word	0x2000fe54
 801a738:	2000fe5c 	.word	0x2000fe5c

0801a73c <parson_strndup>:
static int    json_serialize_string(const char *string, char *buf);
static int    append_indent(char *buf, int level);
static int    append_string(char *buf, const char *string);

/* Various */
static char * parson_strndup(const char *string, size_t n) {
 801a73c:	b580      	push	{r7, lr}
 801a73e:	b084      	sub	sp, #16
 801a740:	af00      	add	r7, sp, #0
 801a742:	6078      	str	r0, [r7, #4]
 801a744:	6039      	str	r1, [r7, #0]
    char *output_string = (char*)parson_malloc(n + 1);
 801a746:	4b0d      	ldr	r3, [pc, #52]	; (801a77c <parson_strndup+0x40>)
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	683a      	ldr	r2, [r7, #0]
 801a74c:	3201      	adds	r2, #1
 801a74e:	4610      	mov	r0, r2
 801a750:	4798      	blx	r3
 801a752:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 801a754:	68fb      	ldr	r3, [r7, #12]
 801a756:	2b00      	cmp	r3, #0
 801a758:	d101      	bne.n	801a75e <parson_strndup+0x22>
        return NULL;
 801a75a:	2300      	movs	r3, #0
 801a75c:	e00a      	b.n	801a774 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 801a75e:	68fa      	ldr	r2, [r7, #12]
 801a760:	683b      	ldr	r3, [r7, #0]
 801a762:	4413      	add	r3, r2
 801a764:	2200      	movs	r2, #0
 801a766:	701a      	strb	r2, [r3, #0]
    strncpy(output_string, string, n);
 801a768:	683a      	ldr	r2, [r7, #0]
 801a76a:	6879      	ldr	r1, [r7, #4]
 801a76c:	68f8      	ldr	r0, [r7, #12]
 801a76e:	f004 f95e 	bl	801ea2e <strncpy>
    return output_string;
 801a772:	68fb      	ldr	r3, [r7, #12]
}
 801a774:	4618      	mov	r0, r3
 801a776:	3710      	adds	r7, #16
 801a778:	46bd      	mov	sp, r7
 801a77a:	bd80      	pop	{r7, pc}
 801a77c:	20000084 	.word	0x20000084

0801a780 <hex_char_to_int>:

static char * parson_strdup(const char *string) {
    return parson_strndup(string, strlen(string));
}

static int hex_char_to_int(char c) {
 801a780:	b480      	push	{r7}
 801a782:	b083      	sub	sp, #12
 801a784:	af00      	add	r7, sp, #0
 801a786:	4603      	mov	r3, r0
 801a788:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 801a78a:	79fb      	ldrb	r3, [r7, #7]
 801a78c:	2b2f      	cmp	r3, #47	; 0x2f
 801a78e:	d905      	bls.n	801a79c <hex_char_to_int+0x1c>
 801a790:	79fb      	ldrb	r3, [r7, #7]
 801a792:	2b39      	cmp	r3, #57	; 0x39
 801a794:	d802      	bhi.n	801a79c <hex_char_to_int+0x1c>
        return c - '0';
 801a796:	79fb      	ldrb	r3, [r7, #7]
 801a798:	3b30      	subs	r3, #48	; 0x30
 801a79a:	e013      	b.n	801a7c4 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 801a79c:	79fb      	ldrb	r3, [r7, #7]
 801a79e:	2b60      	cmp	r3, #96	; 0x60
 801a7a0:	d905      	bls.n	801a7ae <hex_char_to_int+0x2e>
 801a7a2:	79fb      	ldrb	r3, [r7, #7]
 801a7a4:	2b66      	cmp	r3, #102	; 0x66
 801a7a6:	d802      	bhi.n	801a7ae <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 801a7a8:	79fb      	ldrb	r3, [r7, #7]
 801a7aa:	3b57      	subs	r3, #87	; 0x57
 801a7ac:	e00a      	b.n	801a7c4 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 801a7ae:	79fb      	ldrb	r3, [r7, #7]
 801a7b0:	2b40      	cmp	r3, #64	; 0x40
 801a7b2:	d905      	bls.n	801a7c0 <hex_char_to_int+0x40>
 801a7b4:	79fb      	ldrb	r3, [r7, #7]
 801a7b6:	2b46      	cmp	r3, #70	; 0x46
 801a7b8:	d802      	bhi.n	801a7c0 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 801a7ba:	79fb      	ldrb	r3, [r7, #7]
 801a7bc:	3b37      	subs	r3, #55	; 0x37
 801a7be:	e001      	b.n	801a7c4 <hex_char_to_int+0x44>
    }
    return -1;
 801a7c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	370c      	adds	r7, #12
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ce:	4770      	bx	lr

0801a7d0 <parse_utf16_hex>:

static int parse_utf16_hex(const char *s, unsigned int *result) {
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b086      	sub	sp, #24
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
 801a7d8:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	781b      	ldrb	r3, [r3, #0]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d00e      	beq.n	801a800 <parse_utf16_hex+0x30>
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	3301      	adds	r3, #1
 801a7e6:	781b      	ldrb	r3, [r3, #0]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d009      	beq.n	801a800 <parse_utf16_hex+0x30>
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	3302      	adds	r3, #2
 801a7f0:	781b      	ldrb	r3, [r3, #0]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d004      	beq.n	801a800 <parse_utf16_hex+0x30>
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	3303      	adds	r3, #3
 801a7fa:	781b      	ldrb	r3, [r3, #0]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d101      	bne.n	801a804 <parse_utf16_hex+0x34>
        return 0;
 801a800:	2300      	movs	r3, #0
 801a802:	e03a      	b.n	801a87a <parse_utf16_hex+0xaa>
    }
    x1 = hex_char_to_int(s[0]);
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	781b      	ldrb	r3, [r3, #0]
 801a808:	4618      	mov	r0, r3
 801a80a:	f7ff ffb9 	bl	801a780 <hex_char_to_int>
 801a80e:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	3301      	adds	r3, #1
 801a814:	781b      	ldrb	r3, [r3, #0]
 801a816:	4618      	mov	r0, r3
 801a818:	f7ff ffb2 	bl	801a780 <hex_char_to_int>
 801a81c:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	3302      	adds	r3, #2
 801a822:	781b      	ldrb	r3, [r3, #0]
 801a824:	4618      	mov	r0, r3
 801a826:	f7ff ffab 	bl	801a780 <hex_char_to_int>
 801a82a:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	3303      	adds	r3, #3
 801a830:	781b      	ldrb	r3, [r3, #0]
 801a832:	4618      	mov	r0, r3
 801a834:	f7ff ffa4 	bl	801a780 <hex_char_to_int>
 801a838:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 801a83a:	697b      	ldr	r3, [r7, #20]
 801a83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a840:	d00b      	beq.n	801a85a <parse_utf16_hex+0x8a>
 801a842:	693b      	ldr	r3, [r7, #16]
 801a844:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a848:	d007      	beq.n	801a85a <parse_utf16_hex+0x8a>
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a850:	d003      	beq.n	801a85a <parse_utf16_hex+0x8a>
 801a852:	68bb      	ldr	r3, [r7, #8]
 801a854:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a858:	d101      	bne.n	801a85e <parse_utf16_hex+0x8e>
        return 0;
 801a85a:	2300      	movs	r3, #0
 801a85c:	e00d      	b.n	801a87a <parse_utf16_hex+0xaa>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 801a85e:	697b      	ldr	r3, [r7, #20]
 801a860:	031a      	lsls	r2, r3, #12
 801a862:	693b      	ldr	r3, [r7, #16]
 801a864:	021b      	lsls	r3, r3, #8
 801a866:	431a      	orrs	r2, r3
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	011b      	lsls	r3, r3, #4
 801a86c:	431a      	orrs	r2, r3
 801a86e:	68bb      	ldr	r3, [r7, #8]
 801a870:	4313      	orrs	r3, r2
 801a872:	461a      	mov	r2, r3
 801a874:	683b      	ldr	r3, [r7, #0]
 801a876:	601a      	str	r2, [r3, #0]
    return 1;
 801a878:	2301      	movs	r3, #1
}
 801a87a:	4618      	mov	r0, r3
 801a87c:	3718      	adds	r7, #24
 801a87e:	46bd      	mov	sp, r7
 801a880:	bd80      	pop	{r7, pc}

0801a882 <num_bytes_in_utf8_sequence>:

static int num_bytes_in_utf8_sequence(unsigned char c) {
 801a882:	b480      	push	{r7}
 801a884:	b083      	sub	sp, #12
 801a886:	af00      	add	r7, sp, #0
 801a888:	4603      	mov	r3, r0
 801a88a:	71fb      	strb	r3, [r7, #7]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 801a88c:	79fb      	ldrb	r3, [r7, #7]
 801a88e:	2bc0      	cmp	r3, #192	; 0xc0
 801a890:	d00a      	beq.n	801a8a8 <num_bytes_in_utf8_sequence+0x26>
 801a892:	79fb      	ldrb	r3, [r7, #7]
 801a894:	2bc1      	cmp	r3, #193	; 0xc1
 801a896:	d007      	beq.n	801a8a8 <num_bytes_in_utf8_sequence+0x26>
 801a898:	79fb      	ldrb	r3, [r7, #7]
 801a89a:	2bf4      	cmp	r3, #244	; 0xf4
 801a89c:	d804      	bhi.n	801a8a8 <num_bytes_in_utf8_sequence+0x26>
 801a89e:	79fb      	ldrb	r3, [r7, #7]
 801a8a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a8a4:	2b80      	cmp	r3, #128	; 0x80
 801a8a6:	d101      	bne.n	801a8ac <num_bytes_in_utf8_sequence+0x2a>
        return 0;
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	e01b      	b.n	801a8e4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 801a8ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	db01      	blt.n	801a8b8 <num_bytes_in_utf8_sequence+0x36>
        return 1;
 801a8b4:	2301      	movs	r3, #1
 801a8b6:	e015      	b.n	801a8e4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 801a8b8:	79fb      	ldrb	r3, [r7, #7]
 801a8ba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801a8be:	2bc0      	cmp	r3, #192	; 0xc0
 801a8c0:	d101      	bne.n	801a8c6 <num_bytes_in_utf8_sequence+0x44>
        return 2;
 801a8c2:	2302      	movs	r3, #2
 801a8c4:	e00e      	b.n	801a8e4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 801a8c6:	79fb      	ldrb	r3, [r7, #7]
 801a8c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a8cc:	2be0      	cmp	r3, #224	; 0xe0
 801a8ce:	d101      	bne.n	801a8d4 <num_bytes_in_utf8_sequence+0x52>
        return 3;
 801a8d0:	2303      	movs	r3, #3
 801a8d2:	e007      	b.n	801a8e4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 801a8d4:	79fb      	ldrb	r3, [r7, #7]
 801a8d6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801a8da:	2bf0      	cmp	r3, #240	; 0xf0
 801a8dc:	d101      	bne.n	801a8e2 <num_bytes_in_utf8_sequence+0x60>
        return 4;
 801a8de:	2304      	movs	r3, #4
 801a8e0:	e000      	b.n	801a8e4 <num_bytes_in_utf8_sequence+0x62>
    }
    return 0; /* won't happen */
 801a8e2:	2300      	movs	r3, #0
}
 801a8e4:	4618      	mov	r0, r3
 801a8e6:	370c      	adds	r7, #12
 801a8e8:	46bd      	mov	sp, r7
 801a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ee:	4770      	bx	lr

0801a8f0 <verify_utf8_sequence>:

static int verify_utf8_sequence(const unsigned char *string, int *len) {
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b084      	sub	sp, #16
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
 801a8f8:	6039      	str	r1, [r7, #0]
    unsigned int cp = 0;
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	60fb      	str	r3, [r7, #12]
    *len = num_bytes_in_utf8_sequence(string[0]);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	781b      	ldrb	r3, [r3, #0]
 801a902:	4618      	mov	r0, r3
 801a904:	f7ff ffbd 	bl	801a882 <num_bytes_in_utf8_sequence>
 801a908:	4602      	mov	r2, r0
 801a90a:	683b      	ldr	r3, [r7, #0]
 801a90c:	601a      	str	r2, [r3, #0]

    if (*len == 1) {
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	2b01      	cmp	r3, #1
 801a914:	d103      	bne.n	801a91e <verify_utf8_sequence+0x2e>
        cp = string[0];
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	781b      	ldrb	r3, [r3, #0]
 801a91a:	60fb      	str	r3, [r7, #12]
 801a91c:	e07f      	b.n	801aa1e <verify_utf8_sequence+0x12e>
    } else if (*len == 2 && IS_CONT(string[1])) {
 801a91e:	683b      	ldr	r3, [r7, #0]
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	2b02      	cmp	r3, #2
 801a924:	d115      	bne.n	801a952 <verify_utf8_sequence+0x62>
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	3301      	adds	r3, #1
 801a92a:	781b      	ldrb	r3, [r3, #0]
 801a92c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a930:	2b80      	cmp	r3, #128	; 0x80
 801a932:	d10e      	bne.n	801a952 <verify_utf8_sequence+0x62>
        cp = string[0] & 0x1F;
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	781b      	ldrb	r3, [r3, #0]
 801a938:	f003 031f 	and.w	r3, r3, #31
 801a93c:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	019a      	lsls	r2, r3, #6
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	3301      	adds	r3, #1
 801a946:	781b      	ldrb	r3, [r3, #0]
 801a948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a94c:	4313      	orrs	r3, r2
 801a94e:	60fb      	str	r3, [r7, #12]
 801a950:	e065      	b.n	801aa1e <verify_utf8_sequence+0x12e>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 801a952:	683b      	ldr	r3, [r7, #0]
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	2b03      	cmp	r3, #3
 801a958:	d125      	bne.n	801a9a6 <verify_utf8_sequence+0xb6>
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	3301      	adds	r3, #1
 801a95e:	781b      	ldrb	r3, [r3, #0]
 801a960:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a964:	2b80      	cmp	r3, #128	; 0x80
 801a966:	d11e      	bne.n	801a9a6 <verify_utf8_sequence+0xb6>
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	3302      	adds	r3, #2
 801a96c:	781b      	ldrb	r3, [r3, #0]
 801a96e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a972:	2b80      	cmp	r3, #128	; 0x80
 801a974:	d117      	bne.n	801a9a6 <verify_utf8_sequence+0xb6>
        cp = ((unsigned char)string[0]) & 0xF;
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	781b      	ldrb	r3, [r3, #0]
 801a97a:	f003 030f 	and.w	r3, r3, #15
 801a97e:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801a980:	68fb      	ldr	r3, [r7, #12]
 801a982:	019a      	lsls	r2, r3, #6
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	3301      	adds	r3, #1
 801a988:	781b      	ldrb	r3, [r3, #0]
 801a98a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a98e:	4313      	orrs	r3, r2
 801a990:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	019a      	lsls	r2, r3, #6
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	3302      	adds	r3, #2
 801a99a:	781b      	ldrb	r3, [r3, #0]
 801a99c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a9a0:	4313      	orrs	r3, r2
 801a9a2:	60fb      	str	r3, [r7, #12]
 801a9a4:	e03b      	b.n	801aa1e <verify_utf8_sequence+0x12e>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 801a9a6:	683b      	ldr	r3, [r7, #0]
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	2b04      	cmp	r3, #4
 801a9ac:	d135      	bne.n	801aa1a <verify_utf8_sequence+0x12a>
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	3301      	adds	r3, #1
 801a9b2:	781b      	ldrb	r3, [r3, #0]
 801a9b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a9b8:	2b80      	cmp	r3, #128	; 0x80
 801a9ba:	d12e      	bne.n	801aa1a <verify_utf8_sequence+0x12a>
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	3302      	adds	r3, #2
 801a9c0:	781b      	ldrb	r3, [r3, #0]
 801a9c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a9c6:	2b80      	cmp	r3, #128	; 0x80
 801a9c8:	d127      	bne.n	801aa1a <verify_utf8_sequence+0x12a>
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	3303      	adds	r3, #3
 801a9ce:	781b      	ldrb	r3, [r3, #0]
 801a9d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a9d4:	2b80      	cmp	r3, #128	; 0x80
 801a9d6:	d120      	bne.n	801aa1a <verify_utf8_sequence+0x12a>
        cp = string[0] & 0x7;
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	781b      	ldrb	r3, [r3, #0]
 801a9dc:	f003 0307 	and.w	r3, r3, #7
 801a9e0:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801a9e2:	68fb      	ldr	r3, [r7, #12]
 801a9e4:	019a      	lsls	r2, r3, #6
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	3301      	adds	r3, #1
 801a9ea:	781b      	ldrb	r3, [r3, #0]
 801a9ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a9f0:	4313      	orrs	r3, r2
 801a9f2:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	019a      	lsls	r2, r3, #6
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	3302      	adds	r3, #2
 801a9fc:	781b      	ldrb	r3, [r3, #0]
 801a9fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aa02:	4313      	orrs	r3, r2
 801aa04:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[3] & 0x3F);
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	019a      	lsls	r2, r3, #6
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	3303      	adds	r3, #3
 801aa0e:	781b      	ldrb	r3, [r3, #0]
 801aa10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aa14:	4313      	orrs	r3, r2
 801aa16:	60fb      	str	r3, [r7, #12]
 801aa18:	e001      	b.n	801aa1e <verify_utf8_sequence+0x12e>
    } else {
        return 0;
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	e029      	b.n	801aa72 <verify_utf8_sequence+0x182>
    }

    /* overlong encodings */
    if ((cp < 0x80    && *len > 1) ||
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	2b7f      	cmp	r3, #127	; 0x7f
 801aa22:	d803      	bhi.n	801aa2c <verify_utf8_sequence+0x13c>
 801aa24:	683b      	ldr	r3, [r7, #0]
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	2b01      	cmp	r3, #1
 801aa2a:	dc0f      	bgt.n	801aa4c <verify_utf8_sequence+0x15c>
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801aa32:	d203      	bcs.n	801aa3c <verify_utf8_sequence+0x14c>
        (cp < 0x800   && *len > 2) ||
 801aa34:	683b      	ldr	r3, [r7, #0]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	2b02      	cmp	r3, #2
 801aa3a:	dc07      	bgt.n	801aa4c <verify_utf8_sequence+0x15c>
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801aa42:	d205      	bcs.n	801aa50 <verify_utf8_sequence+0x160>
        (cp < 0x10000 && *len > 3)) {
 801aa44:	683b      	ldr	r3, [r7, #0]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	2b03      	cmp	r3, #3
 801aa4a:	dd01      	ble.n	801aa50 <verify_utf8_sequence+0x160>
        return 0;
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	e010      	b.n	801aa72 <verify_utf8_sequence+0x182>
    }

    /* invalid unicode */
    if (cp > 0x10FFFF) {
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 801aa56:	d301      	bcc.n	801aa5c <verify_utf8_sequence+0x16c>
        return 0;
 801aa58:	2300      	movs	r3, #0
 801aa5a:	e00a      	b.n	801aa72 <verify_utf8_sequence+0x182>
    }

    /* surrogate halves */
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801aa62:	d305      	bcc.n	801aa70 <verify_utf8_sequence+0x180>
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801aa6a:	d201      	bcs.n	801aa70 <verify_utf8_sequence+0x180>
        return 0;
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	e000      	b.n	801aa72 <verify_utf8_sequence+0x182>
    }

    return 1;
 801aa70:	2301      	movs	r3, #1
}
 801aa72:	4618      	mov	r0, r3
 801aa74:	3710      	adds	r7, #16
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd80      	pop	{r7, pc}

0801aa7a <is_valid_utf8>:

static int is_valid_utf8(const char *string, size_t string_len) {
 801aa7a:	b580      	push	{r7, lr}
 801aa7c:	b084      	sub	sp, #16
 801aa7e:	af00      	add	r7, sp, #0
 801aa80:	6078      	str	r0, [r7, #4]
 801aa82:	6039      	str	r1, [r7, #0]
    int len = 0;
 801aa84:	2300      	movs	r3, #0
 801aa86:	60bb      	str	r3, [r7, #8]
    const char *string_end =  string + string_len;
 801aa88:	687a      	ldr	r2, [r7, #4]
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	4413      	add	r3, r2
 801aa8e:	60fb      	str	r3, [r7, #12]
    while (string < string_end) {
 801aa90:	e00f      	b.n	801aab2 <is_valid_utf8+0x38>
        if (!verify_utf8_sequence((const unsigned char*)string, &len)) {
 801aa92:	f107 0308 	add.w	r3, r7, #8
 801aa96:	4619      	mov	r1, r3
 801aa98:	6878      	ldr	r0, [r7, #4]
 801aa9a:	f7ff ff29 	bl	801a8f0 <verify_utf8_sequence>
 801aa9e:	4603      	mov	r3, r0
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d101      	bne.n	801aaa8 <is_valid_utf8+0x2e>
            return 0;
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	e009      	b.n	801aabc <is_valid_utf8+0x42>
        }
        string += len;
 801aaa8:	68bb      	ldr	r3, [r7, #8]
 801aaaa:	461a      	mov	r2, r3
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	4413      	add	r3, r2
 801aab0:	607b      	str	r3, [r7, #4]
    while (string < string_end) {
 801aab2:	687a      	ldr	r2, [r7, #4]
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	429a      	cmp	r2, r3
 801aab8:	d3eb      	bcc.n	801aa92 <is_valid_utf8+0x18>
    }
    return 1;
 801aaba:	2301      	movs	r3, #1
}
 801aabc:	4618      	mov	r0, r3
 801aabe:	3710      	adds	r7, #16
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd80      	pop	{r7, pc}

0801aac4 <is_decimal>:

static int is_decimal(const char *string, size_t length) {
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b082      	sub	sp, #8
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	6078      	str	r0, [r7, #4]
 801aacc:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 801aace:	683b      	ldr	r3, [r7, #0]
 801aad0:	2b01      	cmp	r3, #1
 801aad2:	d90a      	bls.n	801aaea <is_decimal+0x26>
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	781b      	ldrb	r3, [r3, #0]
 801aad8:	2b30      	cmp	r3, #48	; 0x30
 801aada:	d106      	bne.n	801aaea <is_decimal+0x26>
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	3301      	adds	r3, #1
 801aae0:	781b      	ldrb	r3, [r3, #0]
 801aae2:	2b2e      	cmp	r3, #46	; 0x2e
 801aae4:	d001      	beq.n	801aaea <is_decimal+0x26>
        return 0;
 801aae6:	2300      	movs	r3, #0
 801aae8:	e024      	b.n	801ab34 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 801aaea:	683b      	ldr	r3, [r7, #0]
 801aaec:	2b02      	cmp	r3, #2
 801aaee:	d91b      	bls.n	801ab28 <is_decimal+0x64>
 801aaf0:	2202      	movs	r2, #2
 801aaf2:	4912      	ldr	r1, [pc, #72]	; (801ab3c <is_decimal+0x78>)
 801aaf4:	6878      	ldr	r0, [r7, #4]
 801aaf6:	f003 ff88 	bl	801ea0a <strncmp>
 801aafa:	4603      	mov	r3, r0
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d113      	bne.n	801ab28 <is_decimal+0x64>
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	3302      	adds	r3, #2
 801ab04:	781b      	ldrb	r3, [r3, #0]
 801ab06:	2b2e      	cmp	r3, #46	; 0x2e
 801ab08:	d00e      	beq.n	801ab28 <is_decimal+0x64>
        return 0;
 801ab0a:	2300      	movs	r3, #0
 801ab0c:	e012      	b.n	801ab34 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 801ab0e:	687a      	ldr	r2, [r7, #4]
 801ab10:	683b      	ldr	r3, [r7, #0]
 801ab12:	4413      	add	r3, r2
 801ab14:	781b      	ldrb	r3, [r3, #0]
 801ab16:	4619      	mov	r1, r3
 801ab18:	4809      	ldr	r0, [pc, #36]	; (801ab40 <is_decimal+0x7c>)
 801ab1a:	f003 ff69 	bl	801e9f0 <strchr>
 801ab1e:	4603      	mov	r3, r0
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d001      	beq.n	801ab28 <is_decimal+0x64>
            return 0;
 801ab24:	2300      	movs	r3, #0
 801ab26:	e005      	b.n	801ab34 <is_decimal+0x70>
    while (length--) {
 801ab28:	683b      	ldr	r3, [r7, #0]
 801ab2a:	1e5a      	subs	r2, r3, #1
 801ab2c:	603a      	str	r2, [r7, #0]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d1ed      	bne.n	801ab0e <is_decimal+0x4a>
        }
    }
    return 1;
 801ab32:	2301      	movs	r3, #1
}
 801ab34:	4618      	mov	r0, r3
 801ab36:	3708      	adds	r7, #8
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	bd80      	pop	{r7, pc}
 801ab3c:	080224ec 	.word	0x080224ec
 801ab40:	080224f0 	.word	0x080224f0

0801ab44 <json_object_init>:
        string++;
    }
}

/* JSON Object */
static JSON_Object * json_object_init(JSON_Value *wrapping_value) {
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b084      	sub	sp, #16
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 801ab4c:	4b0e      	ldr	r3, [pc, #56]	; (801ab88 <json_object_init+0x44>)
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	2014      	movs	r0, #20
 801ab52:	4798      	blx	r3
 801ab54:	60f8      	str	r0, [r7, #12]
    if (new_obj == NULL) {
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d101      	bne.n	801ab60 <json_object_init+0x1c>
        return NULL;
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	e00f      	b.n	801ab80 <json_object_init+0x3c>
    }
    new_obj->wrapping_value = wrapping_value;
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	687a      	ldr	r2, [r7, #4]
 801ab64:	601a      	str	r2, [r3, #0]
    new_obj->names = (char**)NULL;
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	2200      	movs	r2, #0
 801ab6a:	605a      	str	r2, [r3, #4]
    new_obj->values = (JSON_Value**)NULL;
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	2200      	movs	r2, #0
 801ab70:	609a      	str	r2, [r3, #8]
    new_obj->capacity = 0;
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	2200      	movs	r2, #0
 801ab76:	611a      	str	r2, [r3, #16]
    new_obj->count = 0;
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	60da      	str	r2, [r3, #12]
    return new_obj;
 801ab7e:	68fb      	ldr	r3, [r7, #12]
}
 801ab80:	4618      	mov	r0, r3
 801ab82:	3710      	adds	r7, #16
 801ab84:	46bd      	mov	sp, r7
 801ab86:	bd80      	pop	{r7, pc}
 801ab88:	20000084 	.word	0x20000084

0801ab8c <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b084      	sub	sp, #16
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	60f8      	str	r0, [r7, #12]
 801ab94:	60b9      	str	r1, [r7, #8]
 801ab96:	607a      	str	r2, [r7, #4]
    if (name == NULL) {
 801ab98:	68bb      	ldr	r3, [r7, #8]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d102      	bne.n	801aba4 <json_object_add+0x18>
        return JSONFailure;
 801ab9e:	f04f 33ff 	mov.w	r3, #4294967295
 801aba2:	e009      	b.n	801abb8 <json_object_add+0x2c>
    }
    return json_object_addn(object, name, strlen(name), value);
 801aba4:	68b8      	ldr	r0, [r7, #8]
 801aba6:	f7e5 fb35 	bl	8000214 <strlen>
 801abaa:	4602      	mov	r2, r0
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	68b9      	ldr	r1, [r7, #8]
 801abb0:	68f8      	ldr	r0, [r7, #12]
 801abb2:	f000 f805 	bl	801abc0 <json_object_addn>
 801abb6:	4603      	mov	r3, r0
}
 801abb8:	4618      	mov	r0, r3
 801abba:	3710      	adds	r7, #16
 801abbc:	46bd      	mov	sp, r7
 801abbe:	bd80      	pop	{r7, pc}

0801abc0 <json_object_addn>:

static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 801abc0:	b590      	push	{r4, r7, lr}
 801abc2:	b087      	sub	sp, #28
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	60f8      	str	r0, [r7, #12]
 801abc8:	60b9      	str	r1, [r7, #8]
 801abca:	607a      	str	r2, [r7, #4]
 801abcc:	603b      	str	r3, [r7, #0]
    size_t index = 0;
 801abce:	2300      	movs	r3, #0
 801abd0:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d005      	beq.n	801abe4 <json_object_addn+0x24>
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d002      	beq.n	801abe4 <json_object_addn+0x24>
 801abde:	683b      	ldr	r3, [r7, #0]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d102      	bne.n	801abea <json_object_addn+0x2a>
        return JSONFailure;
 801abe4:	f04f 33ff 	mov.w	r3, #4294967295
 801abe8:	e04e      	b.n	801ac88 <json_object_addn+0xc8>
    }
    if (json_object_getn_value(object, name, name_len) != NULL) {
 801abea:	687a      	ldr	r2, [r7, #4]
 801abec:	68b9      	ldr	r1, [r7, #8]
 801abee:	68f8      	ldr	r0, [r7, #12]
 801abf0:	f000 f8c8 	bl	801ad84 <json_object_getn_value>
 801abf4:	4603      	mov	r3, r0
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d002      	beq.n	801ac00 <json_object_addn+0x40>
        return JSONFailure;
 801abfa:	f04f 33ff 	mov.w	r3, #4294967295
 801abfe:	e043      	b.n	801ac88 <json_object_addn+0xc8>
    }
    if (object->count >= object->capacity) {
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	68da      	ldr	r2, [r3, #12]
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	691b      	ldr	r3, [r3, #16]
 801ac08:	429a      	cmp	r2, r3
 801ac0a:	d311      	bcc.n	801ac30 <json_object_addn+0x70>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	691b      	ldr	r3, [r3, #16]
 801ac10:	005b      	lsls	r3, r3, #1
 801ac12:	2b10      	cmp	r3, #16
 801ac14:	bf38      	it	cc
 801ac16:	2310      	movcc	r3, #16
 801ac18:	613b      	str	r3, [r7, #16]
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 801ac1a:	6939      	ldr	r1, [r7, #16]
 801ac1c:	68f8      	ldr	r0, [r7, #12]
 801ac1e:	f000 f837 	bl	801ac90 <json_object_resize>
 801ac22:	4603      	mov	r3, r0
 801ac24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac28:	d102      	bne.n	801ac30 <json_object_addn+0x70>
            return JSONFailure;
 801ac2a:	f04f 33ff 	mov.w	r3, #4294967295
 801ac2e:	e02b      	b.n	801ac88 <json_object_addn+0xc8>
        }
    }
    index = object->count;
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	68db      	ldr	r3, [r3, #12]
 801ac34:	617b      	str	r3, [r7, #20]
    object->names[index] = parson_strndup(name, name_len);
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	685a      	ldr	r2, [r3, #4]
 801ac3a:	697b      	ldr	r3, [r7, #20]
 801ac3c:	009b      	lsls	r3, r3, #2
 801ac3e:	18d4      	adds	r4, r2, r3
 801ac40:	6879      	ldr	r1, [r7, #4]
 801ac42:	68b8      	ldr	r0, [r7, #8]
 801ac44:	f7ff fd7a 	bl	801a73c <parson_strndup>
 801ac48:	4603      	mov	r3, r0
 801ac4a:	6023      	str	r3, [r4, #0]
    if (object->names[index] == NULL) {
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	685a      	ldr	r2, [r3, #4]
 801ac50:	697b      	ldr	r3, [r7, #20]
 801ac52:	009b      	lsls	r3, r3, #2
 801ac54:	4413      	add	r3, r2
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d102      	bne.n	801ac62 <json_object_addn+0xa2>
        return JSONFailure;
 801ac5c:	f04f 33ff 	mov.w	r3, #4294967295
 801ac60:	e012      	b.n	801ac88 <json_object_addn+0xc8>
    }
    value->parent = json_object_get_wrapping_value(object);
 801ac62:	68f8      	ldr	r0, [r7, #12]
 801ac64:	f002 f8c2 	bl	801cdec <json_object_get_wrapping_value>
 801ac68:	4602      	mov	r2, r0
 801ac6a:	683b      	ldr	r3, [r7, #0]
 801ac6c:	601a      	str	r2, [r3, #0]
    object->values[index] = value;
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	689a      	ldr	r2, [r3, #8]
 801ac72:	697b      	ldr	r3, [r7, #20]
 801ac74:	009b      	lsls	r3, r3, #2
 801ac76:	4413      	add	r3, r2
 801ac78:	683a      	ldr	r2, [r7, #0]
 801ac7a:	601a      	str	r2, [r3, #0]
    object->count++;
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	68db      	ldr	r3, [r3, #12]
 801ac80:	1c5a      	adds	r2, r3, #1
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801ac86:	2300      	movs	r3, #0
}
 801ac88:	4618      	mov	r0, r3
 801ac8a:	371c      	adds	r7, #28
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	bd90      	pop	{r4, r7, pc}

0801ac90 <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b084      	sub	sp, #16
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
 801ac98:	6039      	str	r1, [r7, #0]
    char **temp_names = NULL;
 801ac9a:	2300      	movs	r3, #0
 801ac9c:	60fb      	str	r3, [r7, #12]
    JSON_Value **temp_values = NULL;
 801ac9e:	2300      	movs	r3, #0
 801aca0:	60bb      	str	r3, [r7, #8]

    if ((object->names == NULL && object->values != NULL) ||
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	685b      	ldr	r3, [r3, #4]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d103      	bne.n	801acb2 <json_object_resize+0x22>
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	689b      	ldr	r3, [r3, #8]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d10a      	bne.n	801acc8 <json_object_resize+0x38>
        (object->names != NULL && object->values == NULL) ||
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	685b      	ldr	r3, [r3, #4]
    if ((object->names == NULL && object->values != NULL) ||
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d003      	beq.n	801acc2 <json_object_resize+0x32>
        (object->names != NULL && object->values == NULL) ||
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	689b      	ldr	r3, [r3, #8]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d002      	beq.n	801acc8 <json_object_resize+0x38>
 801acc2:	683b      	ldr	r3, [r7, #0]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d102      	bne.n	801acce <json_object_resize+0x3e>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
 801acc8:	f04f 33ff 	mov.w	r3, #4294967295
 801accc:	e051      	b.n	801ad72 <json_object_resize+0xe2>
    }
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 801acce:	4b2b      	ldr	r3, [pc, #172]	; (801ad7c <json_object_resize+0xec>)
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	683a      	ldr	r2, [r7, #0]
 801acd4:	0092      	lsls	r2, r2, #2
 801acd6:	4610      	mov	r0, r2
 801acd8:	4798      	blx	r3
 801acda:	60f8      	str	r0, [r7, #12]
    if (temp_names == NULL) {
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d102      	bne.n	801ace8 <json_object_resize+0x58>
        return JSONFailure;
 801ace2:	f04f 33ff 	mov.w	r3, #4294967295
 801ace6:	e044      	b.n	801ad72 <json_object_resize+0xe2>
    }
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801ace8:	4b24      	ldr	r3, [pc, #144]	; (801ad7c <json_object_resize+0xec>)
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	683a      	ldr	r2, [r7, #0]
 801acee:	0092      	lsls	r2, r2, #2
 801acf0:	4610      	mov	r0, r2
 801acf2:	4798      	blx	r3
 801acf4:	60b8      	str	r0, [r7, #8]
    if (temp_values == NULL) {
 801acf6:	68bb      	ldr	r3, [r7, #8]
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d106      	bne.n	801ad0a <json_object_resize+0x7a>
        parson_free(temp_names);
 801acfc:	4b20      	ldr	r3, [pc, #128]	; (801ad80 <json_object_resize+0xf0>)
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	68f8      	ldr	r0, [r7, #12]
 801ad02:	4798      	blx	r3
        return JSONFailure;
 801ad04:	f04f 33ff 	mov.w	r3, #4294967295
 801ad08:	e033      	b.n	801ad72 <json_object_resize+0xe2>
    }
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	685b      	ldr	r3, [r3, #4]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d019      	beq.n	801ad46 <json_object_resize+0xb6>
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	689b      	ldr	r3, [r3, #8]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d015      	beq.n	801ad46 <json_object_resize+0xb6>
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	68db      	ldr	r3, [r3, #12]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d011      	beq.n	801ad46 <json_object_resize+0xb6>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	6859      	ldr	r1, [r3, #4]
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	68db      	ldr	r3, [r3, #12]
 801ad2a:	009b      	lsls	r3, r3, #2
 801ad2c:	461a      	mov	r2, r3
 801ad2e:	68f8      	ldr	r0, [r7, #12]
 801ad30:	f003 f888 	bl	801de44 <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	6899      	ldr	r1, [r3, #8]
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	68db      	ldr	r3, [r3, #12]
 801ad3c:	009b      	lsls	r3, r3, #2
 801ad3e:	461a      	mov	r2, r3
 801ad40:	68b8      	ldr	r0, [r7, #8]
 801ad42:	f003 f87f 	bl	801de44 <memcpy>
    }
    parson_free(object->names);
 801ad46:	4b0e      	ldr	r3, [pc, #56]	; (801ad80 <json_object_resize+0xf0>)
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	687a      	ldr	r2, [r7, #4]
 801ad4c:	6852      	ldr	r2, [r2, #4]
 801ad4e:	4610      	mov	r0, r2
 801ad50:	4798      	blx	r3
    parson_free(object->values);
 801ad52:	4b0b      	ldr	r3, [pc, #44]	; (801ad80 <json_object_resize+0xf0>)
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	687a      	ldr	r2, [r7, #4]
 801ad58:	6892      	ldr	r2, [r2, #8]
 801ad5a:	4610      	mov	r0, r2
 801ad5c:	4798      	blx	r3
    object->names = temp_names;
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	68fa      	ldr	r2, [r7, #12]
 801ad62:	605a      	str	r2, [r3, #4]
    object->values = temp_values;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	68ba      	ldr	r2, [r7, #8]
 801ad68:	609a      	str	r2, [r3, #8]
    object->capacity = new_capacity;
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	683a      	ldr	r2, [r7, #0]
 801ad6e:	611a      	str	r2, [r3, #16]
    return JSONSuccess;
 801ad70:	2300      	movs	r3, #0
}
 801ad72:	4618      	mov	r0, r3
 801ad74:	3710      	adds	r7, #16
 801ad76:	46bd      	mov	sp, r7
 801ad78:	bd80      	pop	{r7, pc}
 801ad7a:	bf00      	nop
 801ad7c:	20000084 	.word	0x20000084
 801ad80:	20000088 	.word	0x20000088

0801ad84 <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 801ad84:	b580      	push	{r7, lr}
 801ad86:	b086      	sub	sp, #24
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	60f8      	str	r0, [r7, #12]
 801ad8c:	60b9      	str	r1, [r7, #8]
 801ad8e:	607a      	str	r2, [r7, #4]
    size_t i, name_length;
    for (i = 0; i < json_object_get_count(object); i++) {
 801ad90:	2300      	movs	r3, #0
 801ad92:	617b      	str	r3, [r7, #20]
 801ad94:	e026      	b.n	801ade4 <json_object_getn_value+0x60>
        name_length = strlen(object->names[i]);
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	685a      	ldr	r2, [r3, #4]
 801ad9a:	697b      	ldr	r3, [r7, #20]
 801ad9c:	009b      	lsls	r3, r3, #2
 801ad9e:	4413      	add	r3, r2
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	4618      	mov	r0, r3
 801ada4:	f7e5 fa36 	bl	8000214 <strlen>
 801ada8:	6138      	str	r0, [r7, #16]
        if (name_length != name_len) {
 801adaa:	693a      	ldr	r2, [r7, #16]
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	429a      	cmp	r2, r3
 801adb0:	d114      	bne.n	801addc <json_object_getn_value+0x58>
            continue;
        }
        if (strncmp(object->names[i], name, name_len) == 0) {
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	685a      	ldr	r2, [r3, #4]
 801adb6:	697b      	ldr	r3, [r7, #20]
 801adb8:	009b      	lsls	r3, r3, #2
 801adba:	4413      	add	r3, r2
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	687a      	ldr	r2, [r7, #4]
 801adc0:	68b9      	ldr	r1, [r7, #8]
 801adc2:	4618      	mov	r0, r3
 801adc4:	f003 fe21 	bl	801ea0a <strncmp>
 801adc8:	4603      	mov	r3, r0
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d107      	bne.n	801adde <json_object_getn_value+0x5a>
            return object->values[i];
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	689a      	ldr	r2, [r3, #8]
 801add2:	697b      	ldr	r3, [r7, #20]
 801add4:	009b      	lsls	r3, r3, #2
 801add6:	4413      	add	r3, r2
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	e00b      	b.n	801adf4 <json_object_getn_value+0x70>
            continue;
 801addc:	bf00      	nop
    for (i = 0; i < json_object_get_count(object); i++) {
 801adde:	697b      	ldr	r3, [r7, #20]
 801ade0:	3301      	adds	r3, #1
 801ade2:	617b      	str	r3, [r7, #20]
 801ade4:	68f8      	ldr	r0, [r7, #12]
 801ade6:	f001 ffd5 	bl	801cd94 <json_object_get_count>
 801adea:	4602      	mov	r2, r0
 801adec:	697b      	ldr	r3, [r7, #20]
 801adee:	4293      	cmp	r3, r2
 801adf0:	d3d1      	bcc.n	801ad96 <json_object_getn_value+0x12>
        }
    }
    return NULL;
 801adf2:	2300      	movs	r3, #0
}
 801adf4:	4618      	mov	r0, r3
 801adf6:	3718      	adds	r7, #24
 801adf8:	46bd      	mov	sp, r7
 801adfa:	bd80      	pop	{r7, pc}

0801adfc <json_object_remove_internal>:

static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b086      	sub	sp, #24
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	60f8      	str	r0, [r7, #12]
 801ae04:	60b9      	str	r1, [r7, #8]
 801ae06:	607a      	str	r2, [r7, #4]
    size_t i = 0, last_item_index = 0;
 801ae08:	2300      	movs	r3, #0
 801ae0a:	617b      	str	r3, [r7, #20]
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	613b      	str	r3, [r7, #16]
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d006      	beq.n	801ae24 <json_object_remove_internal+0x28>
 801ae16:	68b9      	ldr	r1, [r7, #8]
 801ae18:	68f8      	ldr	r0, [r7, #12]
 801ae1a:	f001 ff39 	bl	801cc90 <json_object_get_value>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d102      	bne.n	801ae2a <json_object_remove_internal+0x2e>
        return JSONFailure;
 801ae24:	f04f 33ff 	mov.w	r3, #4294967295
 801ae28:	e05a      	b.n	801aee0 <json_object_remove_internal+0xe4>
    }
    last_item_index = json_object_get_count(object) - 1;
 801ae2a:	68f8      	ldr	r0, [r7, #12]
 801ae2c:	f001 ffb2 	bl	801cd94 <json_object_get_count>
 801ae30:	4603      	mov	r3, r0
 801ae32:	3b01      	subs	r3, #1
 801ae34:	613b      	str	r3, [r7, #16]
    for (i = 0; i < json_object_get_count(object); i++) {
 801ae36:	2300      	movs	r3, #0
 801ae38:	617b      	str	r3, [r7, #20]
 801ae3a:	e048      	b.n	801aece <json_object_remove_internal+0xd2>
        if (strcmp(object->names[i], name) == 0) {
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	685a      	ldr	r2, [r3, #4]
 801ae40:	697b      	ldr	r3, [r7, #20]
 801ae42:	009b      	lsls	r3, r3, #2
 801ae44:	4413      	add	r3, r2
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	68b9      	ldr	r1, [r7, #8]
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	f7e5 f9d8 	bl	8000200 <strcmp>
 801ae50:	4603      	mov	r3, r0
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d138      	bne.n	801aec8 <json_object_remove_internal+0xcc>
            parson_free(object->names[i]);
 801ae56:	4b24      	ldr	r3, [pc, #144]	; (801aee8 <json_object_remove_internal+0xec>)
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	68fa      	ldr	r2, [r7, #12]
 801ae5c:	6851      	ldr	r1, [r2, #4]
 801ae5e:	697a      	ldr	r2, [r7, #20]
 801ae60:	0092      	lsls	r2, r2, #2
 801ae62:	440a      	add	r2, r1
 801ae64:	6812      	ldr	r2, [r2, #0]
 801ae66:	4610      	mov	r0, r2
 801ae68:	4798      	blx	r3
            if (free_value) {
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d008      	beq.n	801ae82 <json_object_remove_internal+0x86>
                json_value_free(object->values[i]);
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	689a      	ldr	r2, [r3, #8]
 801ae74:	697b      	ldr	r3, [r7, #20]
 801ae76:	009b      	lsls	r3, r3, #2
 801ae78:	4413      	add	r3, r2
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	f002 f895 	bl	801cfac <json_value_free>
            }
            if (i != last_item_index) { /* Replace key value pair with one from the end */
 801ae82:	697a      	ldr	r2, [r7, #20]
 801ae84:	693b      	ldr	r3, [r7, #16]
 801ae86:	429a      	cmp	r2, r3
 801ae88:	d017      	beq.n	801aeba <json_object_remove_internal+0xbe>
                object->names[i] = object->names[last_item_index];
 801ae8a:	68fb      	ldr	r3, [r7, #12]
 801ae8c:	685a      	ldr	r2, [r3, #4]
 801ae8e:	693b      	ldr	r3, [r7, #16]
 801ae90:	009b      	lsls	r3, r3, #2
 801ae92:	441a      	add	r2, r3
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	6859      	ldr	r1, [r3, #4]
 801ae98:	697b      	ldr	r3, [r7, #20]
 801ae9a:	009b      	lsls	r3, r3, #2
 801ae9c:	440b      	add	r3, r1
 801ae9e:	6812      	ldr	r2, [r2, #0]
 801aea0:	601a      	str	r2, [r3, #0]
                object->values[i] = object->values[last_item_index];
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	689a      	ldr	r2, [r3, #8]
 801aea6:	693b      	ldr	r3, [r7, #16]
 801aea8:	009b      	lsls	r3, r3, #2
 801aeaa:	441a      	add	r2, r3
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	6899      	ldr	r1, [r3, #8]
 801aeb0:	697b      	ldr	r3, [r7, #20]
 801aeb2:	009b      	lsls	r3, r3, #2
 801aeb4:	440b      	add	r3, r1
 801aeb6:	6812      	ldr	r2, [r2, #0]
 801aeb8:	601a      	str	r2, [r3, #0]
            }
            object->count -= 1;
 801aeba:	68fb      	ldr	r3, [r7, #12]
 801aebc:	68db      	ldr	r3, [r3, #12]
 801aebe:	1e5a      	subs	r2, r3, #1
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	60da      	str	r2, [r3, #12]
            return JSONSuccess;
 801aec4:	2300      	movs	r3, #0
 801aec6:	e00b      	b.n	801aee0 <json_object_remove_internal+0xe4>
    for (i = 0; i < json_object_get_count(object); i++) {
 801aec8:	697b      	ldr	r3, [r7, #20]
 801aeca:	3301      	adds	r3, #1
 801aecc:	617b      	str	r3, [r7, #20]
 801aece:	68f8      	ldr	r0, [r7, #12]
 801aed0:	f001 ff60 	bl	801cd94 <json_object_get_count>
 801aed4:	4602      	mov	r2, r0
 801aed6:	697b      	ldr	r3, [r7, #20]
 801aed8:	4293      	cmp	r3, r2
 801aeda:	d3af      	bcc.n	801ae3c <json_object_remove_internal+0x40>
        }
    }
    return JSONFailure; /* No execution path should end here */
 801aedc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801aee0:	4618      	mov	r0, r3
 801aee2:	3718      	adds	r7, #24
 801aee4:	46bd      	mov	sp, r7
 801aee6:	bd80      	pop	{r7, pc}
 801aee8:	20000088 	.word	0x20000088

0801aeec <json_object_dotremove_internal>:

static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, int free_value) {
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b088      	sub	sp, #32
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	60f8      	str	r0, [r7, #12]
 801aef4:	60b9      	str	r1, [r7, #8]
 801aef6:	607a      	str	r2, [r7, #4]
    JSON_Value *temp_value = NULL;
 801aef8:	2300      	movs	r3, #0
 801aefa:	61fb      	str	r3, [r7, #28]
    JSON_Object *temp_object = NULL;
 801aefc:	2300      	movs	r3, #0
 801aefe:	61bb      	str	r3, [r7, #24]
    const char *dot_pos = strchr(name, '.');
 801af00:	212e      	movs	r1, #46	; 0x2e
 801af02:	68b8      	ldr	r0, [r7, #8]
 801af04:	f003 fd74 	bl	801e9f0 <strchr>
 801af08:	6178      	str	r0, [r7, #20]
    if (dot_pos == NULL) {
 801af0a:	697b      	ldr	r3, [r7, #20]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d106      	bne.n	801af1e <json_object_dotremove_internal+0x32>
        return json_object_remove_internal(object, name, free_value);
 801af10:	687a      	ldr	r2, [r7, #4]
 801af12:	68b9      	ldr	r1, [r7, #8]
 801af14:	68f8      	ldr	r0, [r7, #12]
 801af16:	f7ff ff71 	bl	801adfc <json_object_remove_internal>
 801af1a:	4603      	mov	r3, r0
 801af1c:	e01d      	b.n	801af5a <json_object_dotremove_internal+0x6e>
    }
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 801af1e:	697a      	ldr	r2, [r7, #20]
 801af20:	68bb      	ldr	r3, [r7, #8]
 801af22:	1ad3      	subs	r3, r2, r3
 801af24:	461a      	mov	r2, r3
 801af26:	68b9      	ldr	r1, [r7, #8]
 801af28:	68f8      	ldr	r0, [r7, #12]
 801af2a:	f7ff ff2b 	bl	801ad84 <json_object_getn_value>
 801af2e:	61f8      	str	r0, [r7, #28]
    if (json_value_get_type(temp_value) != JSONObject) {
 801af30:	69f8      	ldr	r0, [r7, #28]
 801af32:	f001 ffc4 	bl	801cebe <json_value_get_type>
 801af36:	4603      	mov	r3, r0
 801af38:	2b04      	cmp	r3, #4
 801af3a:	d002      	beq.n	801af42 <json_object_dotremove_internal+0x56>
        return JSONFailure;
 801af3c:	f04f 33ff 	mov.w	r3, #4294967295
 801af40:	e00b      	b.n	801af5a <json_object_dotremove_internal+0x6e>
    }
    temp_object = json_value_get_object(temp_value);
 801af42:	69f8      	ldr	r0, [r7, #28]
 801af44:	f001 ffcd 	bl	801cee2 <json_value_get_object>
 801af48:	61b8      	str	r0, [r7, #24]
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 801af4a:	697b      	ldr	r3, [r7, #20]
 801af4c:	3301      	adds	r3, #1
 801af4e:	687a      	ldr	r2, [r7, #4]
 801af50:	4619      	mov	r1, r3
 801af52:	69b8      	ldr	r0, [r7, #24]
 801af54:	f7ff ffca 	bl	801aeec <json_object_dotremove_internal>
 801af58:	4603      	mov	r3, r0
}
 801af5a:	4618      	mov	r0, r3
 801af5c:	3720      	adds	r7, #32
 801af5e:	46bd      	mov	sp, r7
 801af60:	bd80      	pop	{r7, pc}
	...

0801af64 <json_object_free>:

static void json_object_free(JSON_Object *object) {
 801af64:	b580      	push	{r7, lr}
 801af66:	b084      	sub	sp, #16
 801af68:	af00      	add	r7, sp, #0
 801af6a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < object->count; i++) {
 801af6c:	2300      	movs	r3, #0
 801af6e:	60fb      	str	r3, [r7, #12]
 801af70:	e015      	b.n	801af9e <json_object_free+0x3a>
        parson_free(object->names[i]);
 801af72:	4b17      	ldr	r3, [pc, #92]	; (801afd0 <json_object_free+0x6c>)
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	687a      	ldr	r2, [r7, #4]
 801af78:	6851      	ldr	r1, [r2, #4]
 801af7a:	68fa      	ldr	r2, [r7, #12]
 801af7c:	0092      	lsls	r2, r2, #2
 801af7e:	440a      	add	r2, r1
 801af80:	6812      	ldr	r2, [r2, #0]
 801af82:	4610      	mov	r0, r2
 801af84:	4798      	blx	r3
        json_value_free(object->values[i]);
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	689a      	ldr	r2, [r3, #8]
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	009b      	lsls	r3, r3, #2
 801af8e:	4413      	add	r3, r2
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	4618      	mov	r0, r3
 801af94:	f002 f80a 	bl	801cfac <json_value_free>
    for (i = 0; i < object->count; i++) {
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	3301      	adds	r3, #1
 801af9c:	60fb      	str	r3, [r7, #12]
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	68db      	ldr	r3, [r3, #12]
 801afa2:	68fa      	ldr	r2, [r7, #12]
 801afa4:	429a      	cmp	r2, r3
 801afa6:	d3e4      	bcc.n	801af72 <json_object_free+0xe>
    }
    parson_free(object->names);
 801afa8:	4b09      	ldr	r3, [pc, #36]	; (801afd0 <json_object_free+0x6c>)
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	687a      	ldr	r2, [r7, #4]
 801afae:	6852      	ldr	r2, [r2, #4]
 801afb0:	4610      	mov	r0, r2
 801afb2:	4798      	blx	r3
    parson_free(object->values);
 801afb4:	4b06      	ldr	r3, [pc, #24]	; (801afd0 <json_object_free+0x6c>)
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	687a      	ldr	r2, [r7, #4]
 801afba:	6892      	ldr	r2, [r2, #8]
 801afbc:	4610      	mov	r0, r2
 801afbe:	4798      	blx	r3
    parson_free(object);
 801afc0:	4b03      	ldr	r3, [pc, #12]	; (801afd0 <json_object_free+0x6c>)
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	6878      	ldr	r0, [r7, #4]
 801afc6:	4798      	blx	r3
}
 801afc8:	bf00      	nop
 801afca:	3710      	adds	r7, #16
 801afcc:	46bd      	mov	sp, r7
 801afce:	bd80      	pop	{r7, pc}
 801afd0:	20000088 	.word	0x20000088

0801afd4 <json_array_init>:

/* JSON Array */
static JSON_Array * json_array_init(JSON_Value *wrapping_value) {
 801afd4:	b580      	push	{r7, lr}
 801afd6:	b084      	sub	sp, #16
 801afd8:	af00      	add	r7, sp, #0
 801afda:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 801afdc:	4b0d      	ldr	r3, [pc, #52]	; (801b014 <json_array_init+0x40>)
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	2010      	movs	r0, #16
 801afe2:	4798      	blx	r3
 801afe4:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d101      	bne.n	801aff0 <json_array_init+0x1c>
        return NULL;
 801afec:	2300      	movs	r3, #0
 801afee:	e00c      	b.n	801b00a <json_array_init+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	687a      	ldr	r2, [r7, #4]
 801aff4:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	2200      	movs	r2, #0
 801affa:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	2200      	movs	r2, #0
 801b000:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	2200      	movs	r2, #0
 801b006:	609a      	str	r2, [r3, #8]
    return new_array;
 801b008:	68fb      	ldr	r3, [r7, #12]
}
 801b00a:	4618      	mov	r0, r3
 801b00c:	3710      	adds	r7, #16
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}
 801b012:	bf00      	nop
 801b014:	20000084 	.word	0x20000084

0801b018 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 801b018:	b580      	push	{r7, lr}
 801b01a:	b084      	sub	sp, #16
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
 801b020:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	689a      	ldr	r2, [r3, #8]
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	68db      	ldr	r3, [r3, #12]
 801b02a:	429a      	cmp	r2, r3
 801b02c:	d311      	bcc.n	801b052 <json_array_add+0x3a>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	68db      	ldr	r3, [r3, #12]
 801b032:	005b      	lsls	r3, r3, #1
 801b034:	2b10      	cmp	r3, #16
 801b036:	bf38      	it	cc
 801b038:	2310      	movcc	r3, #16
 801b03a:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) == JSONFailure) {
 801b03c:	68f9      	ldr	r1, [r7, #12]
 801b03e:	6878      	ldr	r0, [r7, #4]
 801b040:	f000 f820 	bl	801b084 <json_array_resize>
 801b044:	4603      	mov	r3, r0
 801b046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b04a:	d102      	bne.n	801b052 <json_array_add+0x3a>
            return JSONFailure;
 801b04c:	f04f 33ff 	mov.w	r3, #4294967295
 801b050:	e013      	b.n	801b07a <json_array_add+0x62>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 801b052:	6878      	ldr	r0, [r7, #4]
 801b054:	f001 ff27 	bl	801cea6 <json_array_get_wrapping_value>
 801b058:	4602      	mov	r2, r0
 801b05a:	683b      	ldr	r3, [r7, #0]
 801b05c:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	685a      	ldr	r2, [r3, #4]
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	689b      	ldr	r3, [r3, #8]
 801b066:	009b      	lsls	r3, r3, #2
 801b068:	4413      	add	r3, r2
 801b06a:	683a      	ldr	r2, [r7, #0]
 801b06c:	601a      	str	r2, [r3, #0]
    array->count++;
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	689b      	ldr	r3, [r3, #8]
 801b072:	1c5a      	adds	r2, r3, #1
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 801b078:	2300      	movs	r3, #0
}
 801b07a:	4618      	mov	r0, r3
 801b07c:	3710      	adds	r7, #16
 801b07e:	46bd      	mov	sp, r7
 801b080:	bd80      	pop	{r7, pc}
	...

0801b084 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 801b084:	b580      	push	{r7, lr}
 801b086:	b084      	sub	sp, #16
 801b088:	af00      	add	r7, sp, #0
 801b08a:	6078      	str	r0, [r7, #4]
 801b08c:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 801b08e:	2300      	movs	r3, #0
 801b090:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 801b092:	683b      	ldr	r3, [r7, #0]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d102      	bne.n	801b09e <json_array_resize+0x1a>
        return JSONFailure;
 801b098:	f04f 33ff 	mov.w	r3, #4294967295
 801b09c:	e02a      	b.n	801b0f4 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801b09e:	4b17      	ldr	r3, [pc, #92]	; (801b0fc <json_array_resize+0x78>)
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	683a      	ldr	r2, [r7, #0]
 801b0a4:	0092      	lsls	r2, r2, #2
 801b0a6:	4610      	mov	r0, r2
 801b0a8:	4798      	blx	r3
 801b0aa:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d102      	bne.n	801b0b8 <json_array_resize+0x34>
        return JSONFailure;
 801b0b2:	f04f 33ff 	mov.w	r3, #4294967295
 801b0b6:	e01d      	b.n	801b0f4 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	685b      	ldr	r3, [r3, #4]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d00c      	beq.n	801b0da <json_array_resize+0x56>
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	689b      	ldr	r3, [r3, #8]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d008      	beq.n	801b0da <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	6859      	ldr	r1, [r3, #4]
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	689b      	ldr	r3, [r3, #8]
 801b0d0:	009b      	lsls	r3, r3, #2
 801b0d2:	461a      	mov	r2, r3
 801b0d4:	68f8      	ldr	r0, [r7, #12]
 801b0d6:	f002 feb5 	bl	801de44 <memcpy>
    }
    parson_free(array->items);
 801b0da:	4b09      	ldr	r3, [pc, #36]	; (801b100 <json_array_resize+0x7c>)
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	687a      	ldr	r2, [r7, #4]
 801b0e0:	6852      	ldr	r2, [r2, #4]
 801b0e2:	4610      	mov	r0, r2
 801b0e4:	4798      	blx	r3
    array->items = new_items;
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	68fa      	ldr	r2, [r7, #12]
 801b0ea:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	683a      	ldr	r2, [r7, #0]
 801b0f0:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801b0f2:	2300      	movs	r3, #0
}
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	3710      	adds	r7, #16
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	bd80      	pop	{r7, pc}
 801b0fc:	20000084 	.word	0x20000084
 801b100:	20000088 	.word	0x20000088

0801b104 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 801b104:	b580      	push	{r7, lr}
 801b106:	b084      	sub	sp, #16
 801b108:	af00      	add	r7, sp, #0
 801b10a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 801b10c:	2300      	movs	r3, #0
 801b10e:	60fb      	str	r3, [r7, #12]
 801b110:	e00b      	b.n	801b12a <json_array_free+0x26>
        json_value_free(array->items[i]);
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	685a      	ldr	r2, [r3, #4]
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	009b      	lsls	r3, r3, #2
 801b11a:	4413      	add	r3, r2
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	4618      	mov	r0, r3
 801b120:	f001 ff44 	bl	801cfac <json_value_free>
    for (i = 0; i < array->count; i++) {
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	3301      	adds	r3, #1
 801b128:	60fb      	str	r3, [r7, #12]
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	689b      	ldr	r3, [r3, #8]
 801b12e:	68fa      	ldr	r2, [r7, #12]
 801b130:	429a      	cmp	r2, r3
 801b132:	d3ee      	bcc.n	801b112 <json_array_free+0xe>
    }
    parson_free(array->items);
 801b134:	4b06      	ldr	r3, [pc, #24]	; (801b150 <json_array_free+0x4c>)
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	687a      	ldr	r2, [r7, #4]
 801b13a:	6852      	ldr	r2, [r2, #4]
 801b13c:	4610      	mov	r0, r2
 801b13e:	4798      	blx	r3
    parson_free(array);
 801b140:	4b03      	ldr	r3, [pc, #12]	; (801b150 <json_array_free+0x4c>)
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	6878      	ldr	r0, [r7, #4]
 801b146:	4798      	blx	r3
}
 801b148:	bf00      	nop
 801b14a:	3710      	adds	r7, #16
 801b14c:	46bd      	mov	sp, r7
 801b14e:	bd80      	pop	{r7, pc}
 801b150:	20000088 	.word	0x20000088

0801b154 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
 801b154:	b580      	push	{r7, lr}
 801b156:	b084      	sub	sp, #16
 801b158:	af00      	add	r7, sp, #0
 801b15a:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801b15c:	4b0b      	ldr	r3, [pc, #44]	; (801b18c <json_value_init_string_no_copy+0x38>)
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	2010      	movs	r0, #16
 801b162:	4798      	blx	r3
 801b164:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d101      	bne.n	801b170 <json_value_init_string_no_copy+0x1c>
        return NULL;
 801b16c:	2300      	movs	r3, #0
 801b16e:	e009      	b.n	801b184 <json_value_init_string_no_copy+0x30>
    }
    new_value->parent = NULL;
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	2200      	movs	r2, #0
 801b174:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	2202      	movs	r2, #2
 801b17a:	605a      	str	r2, [r3, #4]
    new_value->value.string = string;
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	687a      	ldr	r2, [r7, #4]
 801b180:	609a      	str	r2, [r3, #8]
    return new_value;
 801b182:	68fb      	ldr	r3, [r7, #12]
}
 801b184:	4618      	mov	r0, r3
 801b186:	3710      	adds	r7, #16
 801b188:	46bd      	mov	sp, r7
 801b18a:	bd80      	pop	{r7, pc}
 801b18c:	20000084 	.word	0x20000084

0801b190 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 801b190:	b480      	push	{r7}
 801b192:	b083      	sub	sp, #12
 801b194:	af00      	add	r7, sp, #0
 801b196:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	781b      	ldrb	r3, [r3, #0]
 801b19e:	2b22      	cmp	r3, #34	; 0x22
 801b1a0:	d002      	beq.n	801b1a8 <skip_quotes+0x18>
        return JSONFailure;
 801b1a2:	f04f 33ff 	mov.w	r3, #4294967295
 801b1a6:	e02f      	b.n	801b208 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	1c5a      	adds	r2, r3, #1
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801b1b2:	e01e      	b.n	801b1f2 <skip_quotes+0x62>
        if (**string == '\0') {
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	781b      	ldrb	r3, [r3, #0]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d102      	bne.n	801b1c4 <skip_quotes+0x34>
            return JSONFailure;
 801b1be:	f04f 33ff 	mov.w	r3, #4294967295
 801b1c2:	e021      	b.n	801b208 <skip_quotes+0x78>
        } else if (**string == '\\') {
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	781b      	ldrb	r3, [r3, #0]
 801b1ca:	2b5c      	cmp	r3, #92	; 0x5c
 801b1cc:	d10c      	bne.n	801b1e8 <skip_quotes+0x58>
            SKIP_CHAR(string);
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	1c5a      	adds	r2, r3, #1
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	781b      	ldrb	r3, [r3, #0]
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d102      	bne.n	801b1e8 <skip_quotes+0x58>
                return JSONFailure;
 801b1e2:	f04f 33ff 	mov.w	r3, #4294967295
 801b1e6:	e00f      	b.n	801b208 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	1c5a      	adds	r2, r3, #1
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	781b      	ldrb	r3, [r3, #0]
 801b1f8:	2b22      	cmp	r3, #34	; 0x22
 801b1fa:	d1db      	bne.n	801b1b4 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	1c5a      	adds	r2, r3, #1
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801b206:	2300      	movs	r3, #0
}
 801b208:	4618      	mov	r0, r3
 801b20a:	370c      	adds	r7, #12
 801b20c:	46bd      	mov	sp, r7
 801b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b212:	4770      	bx	lr

0801b214 <parse_utf16>:

static int parse_utf16(const char **unprocessed, char **processed) {
 801b214:	b580      	push	{r7, lr}
 801b216:	b088      	sub	sp, #32
 801b218:	af00      	add	r7, sp, #0
 801b21a:	6078      	str	r0, [r7, #4]
 801b21c:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    int parse_succeeded = 0;
 801b21e:	2300      	movs	r3, #0
 801b220:	617b      	str	r3, [r7, #20]
    char *processed_ptr = *processed;
 801b222:	683b      	ldr	r3, [r7, #0]
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	61bb      	str	r3, [r7, #24]
    unprocessed_ptr++; /* skips u */
 801b22e:	69bb      	ldr	r3, [r7, #24]
 801b230:	3301      	adds	r3, #1
 801b232:	61bb      	str	r3, [r7, #24]
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 801b234:	f107 030c 	add.w	r3, r7, #12
 801b238:	4619      	mov	r1, r3
 801b23a:	69b8      	ldr	r0, [r7, #24]
 801b23c:	f7ff fac8 	bl	801a7d0 <parse_utf16_hex>
 801b240:	6178      	str	r0, [r7, #20]
    if (!parse_succeeded) {
 801b242:	697b      	ldr	r3, [r7, #20]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d102      	bne.n	801b24e <parse_utf16+0x3a>
        return JSONFailure;
 801b248:	f04f 33ff 	mov.w	r3, #4294967295
 801b24c:	e0ce      	b.n	801b3ec <parse_utf16+0x1d8>
    }
    if (cp < 0x80) {
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	2b7f      	cmp	r3, #127	; 0x7f
 801b252:	d804      	bhi.n	801b25e <parse_utf16+0x4a>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	b2da      	uxtb	r2, r3
 801b258:	69fb      	ldr	r3, [r7, #28]
 801b25a:	701a      	strb	r2, [r3, #0]
 801b25c:	e0bc      	b.n	801b3d8 <parse_utf16+0x1c4>
    } else if (cp < 0x800) {
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b264:	d219      	bcs.n	801b29a <parse_utf16+0x86>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	099b      	lsrs	r3, r3, #6
 801b26a:	b2db      	uxtb	r3, r3
 801b26c:	f003 031f 	and.w	r3, r3, #31
 801b270:	b2db      	uxtb	r3, r3
 801b272:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801b276:	b2da      	uxtb	r2, r3
 801b278:	69fb      	ldr	r3, [r7, #28]
 801b27a:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	b2db      	uxtb	r3, r3
 801b280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b284:	b2da      	uxtb	r2, r3
 801b286:	69fb      	ldr	r3, [r7, #28]
 801b288:	3301      	adds	r3, #1
 801b28a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b28e:	b2d2      	uxtb	r2, r2
 801b290:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 801b292:	69fb      	ldr	r3, [r7, #28]
 801b294:	3301      	adds	r3, #1
 801b296:	61fb      	str	r3, [r7, #28]
 801b298:	e09e      	b.n	801b3d8 <parse_utf16+0x1c4>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801b2a0:	d303      	bcc.n	801b2aa <parse_utf16+0x96>
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801b2a8:	d325      	bcc.n	801b2f6 <parse_utf16+0xe2>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	0b1b      	lsrs	r3, r3, #12
 801b2ae:	b2db      	uxtb	r3, r3
 801b2b0:	f003 030f 	and.w	r3, r3, #15
 801b2b4:	b2db      	uxtb	r3, r3
 801b2b6:	f063 031f 	orn	r3, r3, #31
 801b2ba:	b2da      	uxtb	r2, r3
 801b2bc:	69fb      	ldr	r3, [r7, #28]
 801b2be:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	099b      	lsrs	r3, r3, #6
 801b2c4:	b2db      	uxtb	r3, r3
 801b2c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b2ca:	b2da      	uxtb	r2, r3
 801b2cc:	69fb      	ldr	r3, [r7, #28]
 801b2ce:	3301      	adds	r3, #1
 801b2d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b2d4:	b2d2      	uxtb	r2, r2
 801b2d6:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	b2db      	uxtb	r3, r3
 801b2dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b2e0:	b2da      	uxtb	r2, r3
 801b2e2:	69fb      	ldr	r3, [r7, #28]
 801b2e4:	3302      	adds	r3, #2
 801b2e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b2ea:	b2d2      	uxtb	r2, r2
 801b2ec:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 801b2ee:	69fb      	ldr	r3, [r7, #28]
 801b2f0:	3302      	adds	r3, #2
 801b2f2:	61fb      	str	r3, [r7, #28]
 801b2f4:	e070      	b.n	801b3d8 <parse_utf16+0x1c4>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801b2fc:	d369      	bcc.n	801b3d2 <parse_utf16+0x1be>
 801b2fe:	68fb      	ldr	r3, [r7, #12]
 801b300:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801b304:	d265      	bcs.n	801b3d2 <parse_utf16+0x1be>
        lead = cp;
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 801b30a:	69bb      	ldr	r3, [r7, #24]
 801b30c:	3304      	adds	r3, #4
 801b30e:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 801b310:	69bb      	ldr	r3, [r7, #24]
 801b312:	1c5a      	adds	r2, r3, #1
 801b314:	61ba      	str	r2, [r7, #24]
 801b316:	781b      	ldrb	r3, [r3, #0]
 801b318:	2b5c      	cmp	r3, #92	; 0x5c
 801b31a:	d105      	bne.n	801b328 <parse_utf16+0x114>
 801b31c:	69bb      	ldr	r3, [r7, #24]
 801b31e:	1c5a      	adds	r2, r3, #1
 801b320:	61ba      	str	r2, [r7, #24]
 801b322:	781b      	ldrb	r3, [r3, #0]
 801b324:	2b75      	cmp	r3, #117	; 0x75
 801b326:	d002      	beq.n	801b32e <parse_utf16+0x11a>
            return JSONFailure;
 801b328:	f04f 33ff 	mov.w	r3, #4294967295
 801b32c:	e05e      	b.n	801b3ec <parse_utf16+0x1d8>
        }
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 801b32e:	f107 0308 	add.w	r3, r7, #8
 801b332:	4619      	mov	r1, r3
 801b334:	69b8      	ldr	r0, [r7, #24]
 801b336:	f7ff fa4b 	bl	801a7d0 <parse_utf16_hex>
 801b33a:	6178      	str	r0, [r7, #20]
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 801b33c:	697b      	ldr	r3, [r7, #20]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d007      	beq.n	801b352 <parse_utf16+0x13e>
 801b342:	68bb      	ldr	r3, [r7, #8]
 801b344:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801b348:	d303      	bcc.n	801b352 <parse_utf16+0x13e>
 801b34a:	68bb      	ldr	r3, [r7, #8]
 801b34c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801b350:	d302      	bcc.n	801b358 <parse_utf16+0x144>
            return JSONFailure;
 801b352:	f04f 33ff 	mov.w	r3, #4294967295
 801b356:	e049      	b.n	801b3ec <parse_utf16+0x1d8>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 801b358:	693b      	ldr	r3, [r7, #16]
 801b35a:	029a      	lsls	r2, r3, #10
 801b35c:	4b25      	ldr	r3, [pc, #148]	; (801b3f4 <parse_utf16+0x1e0>)
 801b35e:	4013      	ands	r3, r2
 801b360:	68ba      	ldr	r2, [r7, #8]
 801b362:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801b366:	4313      	orrs	r3, r2
 801b368:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801b36c:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	0c9b      	lsrs	r3, r3, #18
 801b372:	b2db      	uxtb	r3, r3
 801b374:	f003 0307 	and.w	r3, r3, #7
 801b378:	b2db      	uxtb	r3, r3
 801b37a:	f063 030f 	orn	r3, r3, #15
 801b37e:	b2da      	uxtb	r2, r3
 801b380:	69fb      	ldr	r3, [r7, #28]
 801b382:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801b384:	68fb      	ldr	r3, [r7, #12]
 801b386:	0b1b      	lsrs	r3, r3, #12
 801b388:	b2db      	uxtb	r3, r3
 801b38a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b38e:	b2da      	uxtb	r2, r3
 801b390:	69fb      	ldr	r3, [r7, #28]
 801b392:	3301      	adds	r3, #1
 801b394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b398:	b2d2      	uxtb	r2, r2
 801b39a:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	099b      	lsrs	r3, r3, #6
 801b3a0:	b2db      	uxtb	r3, r3
 801b3a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b3a6:	b2da      	uxtb	r2, r3
 801b3a8:	69fb      	ldr	r3, [r7, #28]
 801b3aa:	3302      	adds	r3, #2
 801b3ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b3b0:	b2d2      	uxtb	r2, r2
 801b3b2:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	b2db      	uxtb	r3, r3
 801b3b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b3bc:	b2da      	uxtb	r2, r3
 801b3be:	69fb      	ldr	r3, [r7, #28]
 801b3c0:	3303      	adds	r3, #3
 801b3c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b3c6:	b2d2      	uxtb	r2, r2
 801b3c8:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 801b3ca:	69fb      	ldr	r3, [r7, #28]
 801b3cc:	3303      	adds	r3, #3
 801b3ce:	61fb      	str	r3, [r7, #28]
 801b3d0:	e002      	b.n	801b3d8 <parse_utf16+0x1c4>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 801b3d2:	f04f 33ff 	mov.w	r3, #4294967295
 801b3d6:	e009      	b.n	801b3ec <parse_utf16+0x1d8>
    }
    unprocessed_ptr += 3;
 801b3d8:	69bb      	ldr	r3, [r7, #24]
 801b3da:	3303      	adds	r3, #3
 801b3dc:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 801b3de:	683b      	ldr	r3, [r7, #0]
 801b3e0:	69fa      	ldr	r2, [r7, #28]
 801b3e2:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	69ba      	ldr	r2, [r7, #24]
 801b3e8:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801b3ea:	2300      	movs	r3, #0
}
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	3720      	adds	r7, #32
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd80      	pop	{r7, pc}
 801b3f4:	000ffc00 	.word	0x000ffc00

0801b3f8 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t len) {
 801b3f8:	b580      	push	{r7, lr}
 801b3fa:	b088      	sub	sp, #32
 801b3fc:	af00      	add	r7, sp, #0
 801b3fe:	6078      	str	r0, [r7, #4]
 801b400:	6039      	str	r1, [r7, #0]
    const char *input_ptr = input;
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	60fb      	str	r3, [r7, #12]
    size_t initial_size = (len + 1) * sizeof(char);
 801b406:	683b      	ldr	r3, [r7, #0]
 801b408:	3301      	adds	r3, #1
 801b40a:	61fb      	str	r3, [r7, #28]
    size_t final_size = 0;
 801b40c:	2300      	movs	r3, #0
 801b40e:	61bb      	str	r3, [r7, #24]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 801b410:	2300      	movs	r3, #0
 801b412:	617b      	str	r3, [r7, #20]
 801b414:	2300      	movs	r3, #0
 801b416:	60bb      	str	r3, [r7, #8]
 801b418:	2300      	movs	r3, #0
 801b41a:	613b      	str	r3, [r7, #16]
    output = (char*)parson_malloc(initial_size);
 801b41c:	4b66      	ldr	r3, [pc, #408]	; (801b5b8 <process_string+0x1c0>)
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	69f8      	ldr	r0, [r7, #28]
 801b422:	4798      	blx	r3
 801b424:	6178      	str	r0, [r7, #20]
    if (output == NULL) {
 801b426:	697b      	ldr	r3, [r7, #20]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	f000 80b5 	beq.w	801b598 <process_string+0x1a0>
        goto error;
    }
    output_ptr = output;
 801b42e:	697b      	ldr	r3, [r7, #20]
 801b430:	60bb      	str	r3, [r7, #8]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801b432:	e08a      	b.n	801b54a <process_string+0x152>
        if (*input_ptr == '\\') {
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	781b      	ldrb	r3, [r3, #0]
 801b438:	2b5c      	cmp	r3, #92	; 0x5c
 801b43a:	d176      	bne.n	801b52a <process_string+0x132>
            input_ptr++;
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	3301      	adds	r3, #1
 801b440:	60fb      	str	r3, [r7, #12]
            switch (*input_ptr) {
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	781b      	ldrb	r3, [r3, #0]
 801b446:	2b75      	cmp	r3, #117	; 0x75
 801b448:	f300 80a8 	bgt.w	801b59c <process_string+0x1a4>
 801b44c:	2b5c      	cmp	r3, #92	; 0x5c
 801b44e:	da04      	bge.n	801b45a <process_string+0x62>
 801b450:	2b22      	cmp	r3, #34	; 0x22
 801b452:	d03d      	beq.n	801b4d0 <process_string+0xd8>
 801b454:	2b2f      	cmp	r3, #47	; 0x2f
 801b456:	d043      	beq.n	801b4e0 <process_string+0xe8>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 801b458:	e0a0      	b.n	801b59c <process_string+0x1a4>
 801b45a:	3b5c      	subs	r3, #92	; 0x5c
 801b45c:	2b19      	cmp	r3, #25
 801b45e:	f200 809d 	bhi.w	801b59c <process_string+0x1a4>
 801b462:	a201      	add	r2, pc, #4	; (adr r2, 801b468 <process_string+0x70>)
 801b464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b468:	0801b4d9 	.word	0x0801b4d9
 801b46c:	0801b59d 	.word	0x0801b59d
 801b470:	0801b59d 	.word	0x0801b59d
 801b474:	0801b59d 	.word	0x0801b59d
 801b478:	0801b59d 	.word	0x0801b59d
 801b47c:	0801b59d 	.word	0x0801b59d
 801b480:	0801b4e9 	.word	0x0801b4e9
 801b484:	0801b59d 	.word	0x0801b59d
 801b488:	0801b59d 	.word	0x0801b59d
 801b48c:	0801b59d 	.word	0x0801b59d
 801b490:	0801b4f1 	.word	0x0801b4f1
 801b494:	0801b59d 	.word	0x0801b59d
 801b498:	0801b59d 	.word	0x0801b59d
 801b49c:	0801b59d 	.word	0x0801b59d
 801b4a0:	0801b59d 	.word	0x0801b59d
 801b4a4:	0801b59d 	.word	0x0801b59d
 801b4a8:	0801b59d 	.word	0x0801b59d
 801b4ac:	0801b59d 	.word	0x0801b59d
 801b4b0:	0801b4f9 	.word	0x0801b4f9
 801b4b4:	0801b59d 	.word	0x0801b59d
 801b4b8:	0801b59d 	.word	0x0801b59d
 801b4bc:	0801b59d 	.word	0x0801b59d
 801b4c0:	0801b501 	.word	0x0801b501
 801b4c4:	0801b59d 	.word	0x0801b59d
 801b4c8:	0801b509 	.word	0x0801b509
 801b4cc:	0801b511 	.word	0x0801b511
                case '\"': *output_ptr = '\"'; break;
 801b4d0:	68bb      	ldr	r3, [r7, #8]
 801b4d2:	2222      	movs	r2, #34	; 0x22
 801b4d4:	701a      	strb	r2, [r3, #0]
 801b4d6:	e032      	b.n	801b53e <process_string+0x146>
                case '\\': *output_ptr = '\\'; break;
 801b4d8:	68bb      	ldr	r3, [r7, #8]
 801b4da:	225c      	movs	r2, #92	; 0x5c
 801b4dc:	701a      	strb	r2, [r3, #0]
 801b4de:	e02e      	b.n	801b53e <process_string+0x146>
                case '/':  *output_ptr = '/';  break;
 801b4e0:	68bb      	ldr	r3, [r7, #8]
 801b4e2:	222f      	movs	r2, #47	; 0x2f
 801b4e4:	701a      	strb	r2, [r3, #0]
 801b4e6:	e02a      	b.n	801b53e <process_string+0x146>
                case 'b':  *output_ptr = '\b'; break;
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	2208      	movs	r2, #8
 801b4ec:	701a      	strb	r2, [r3, #0]
 801b4ee:	e026      	b.n	801b53e <process_string+0x146>
                case 'f':  *output_ptr = '\f'; break;
 801b4f0:	68bb      	ldr	r3, [r7, #8]
 801b4f2:	220c      	movs	r2, #12
 801b4f4:	701a      	strb	r2, [r3, #0]
 801b4f6:	e022      	b.n	801b53e <process_string+0x146>
                case 'n':  *output_ptr = '\n'; break;
 801b4f8:	68bb      	ldr	r3, [r7, #8]
 801b4fa:	220a      	movs	r2, #10
 801b4fc:	701a      	strb	r2, [r3, #0]
 801b4fe:	e01e      	b.n	801b53e <process_string+0x146>
                case 'r':  *output_ptr = '\r'; break;
 801b500:	68bb      	ldr	r3, [r7, #8]
 801b502:	220d      	movs	r2, #13
 801b504:	701a      	strb	r2, [r3, #0]
 801b506:	e01a      	b.n	801b53e <process_string+0x146>
                case 't':  *output_ptr = '\t'; break;
 801b508:	68bb      	ldr	r3, [r7, #8]
 801b50a:	2209      	movs	r2, #9
 801b50c:	701a      	strb	r2, [r3, #0]
 801b50e:	e016      	b.n	801b53e <process_string+0x146>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
 801b510:	f107 0208 	add.w	r2, r7, #8
 801b514:	f107 030c 	add.w	r3, r7, #12
 801b518:	4611      	mov	r1, r2
 801b51a:	4618      	mov	r0, r3
 801b51c:	f7ff fe7a 	bl	801b214 <parse_utf16>
 801b520:	4603      	mov	r3, r0
 801b522:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b526:	d109      	bne.n	801b53c <process_string+0x144>
                        goto error;
 801b528:	e03d      	b.n	801b5a6 <process_string+0x1ae>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 801b52a:	68fb      	ldr	r3, [r7, #12]
 801b52c:	781b      	ldrb	r3, [r3, #0]
 801b52e:	2b1f      	cmp	r3, #31
 801b530:	d936      	bls.n	801b5a0 <process_string+0x1a8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 801b532:	68fa      	ldr	r2, [r7, #12]
 801b534:	68bb      	ldr	r3, [r7, #8]
 801b536:	7812      	ldrb	r2, [r2, #0]
 801b538:	701a      	strb	r2, [r3, #0]
 801b53a:	e000      	b.n	801b53e <process_string+0x146>
                    break;
 801b53c:	bf00      	nop
        }
        output_ptr++;
 801b53e:	68bb      	ldr	r3, [r7, #8]
 801b540:	3301      	adds	r3, #1
 801b542:	60bb      	str	r3, [r7, #8]
        input_ptr++;
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	3301      	adds	r3, #1
 801b548:	60fb      	str	r3, [r7, #12]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801b54a:	68fb      	ldr	r3, [r7, #12]
 801b54c:	781b      	ldrb	r3, [r3, #0]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d007      	beq.n	801b562 <process_string+0x16a>
 801b552:	68fa      	ldr	r2, [r7, #12]
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	1ad3      	subs	r3, r2, r3
 801b558:	461a      	mov	r2, r3
 801b55a:	683b      	ldr	r3, [r7, #0]
 801b55c:	4293      	cmp	r3, r2
 801b55e:	f63f af69 	bhi.w	801b434 <process_string+0x3c>
    }
    *output_ptr = '\0';
 801b562:	68bb      	ldr	r3, [r7, #8]
 801b564:	2200      	movs	r2, #0
 801b566:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 801b568:	68ba      	ldr	r2, [r7, #8]
 801b56a:	697b      	ldr	r3, [r7, #20]
 801b56c:	1ad3      	subs	r3, r2, r3
 801b56e:	3301      	adds	r3, #1
 801b570:	61bb      	str	r3, [r7, #24]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 801b572:	4b11      	ldr	r3, [pc, #68]	; (801b5b8 <process_string+0x1c0>)
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	69b8      	ldr	r0, [r7, #24]
 801b578:	4798      	blx	r3
 801b57a:	6138      	str	r0, [r7, #16]
    if (resized_output == NULL) {
 801b57c:	693b      	ldr	r3, [r7, #16]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d010      	beq.n	801b5a4 <process_string+0x1ac>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 801b582:	69ba      	ldr	r2, [r7, #24]
 801b584:	6979      	ldr	r1, [r7, #20]
 801b586:	6938      	ldr	r0, [r7, #16]
 801b588:	f002 fc5c 	bl	801de44 <memcpy>
    parson_free(output);
 801b58c:	4b0b      	ldr	r3, [pc, #44]	; (801b5bc <process_string+0x1c4>)
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	6978      	ldr	r0, [r7, #20]
 801b592:	4798      	blx	r3
    return resized_output;
 801b594:	693b      	ldr	r3, [r7, #16]
 801b596:	e00b      	b.n	801b5b0 <process_string+0x1b8>
        goto error;
 801b598:	bf00      	nop
 801b59a:	e004      	b.n	801b5a6 <process_string+0x1ae>
                    goto error;
 801b59c:	bf00      	nop
 801b59e:	e002      	b.n	801b5a6 <process_string+0x1ae>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 801b5a0:	bf00      	nop
 801b5a2:	e000      	b.n	801b5a6 <process_string+0x1ae>
        goto error;
 801b5a4:	bf00      	nop
error:
    parson_free(output);
 801b5a6:	4b05      	ldr	r3, [pc, #20]	; (801b5bc <process_string+0x1c4>)
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	6978      	ldr	r0, [r7, #20]
 801b5ac:	4798      	blx	r3
    return NULL;
 801b5ae:	2300      	movs	r3, #0
}
 801b5b0:	4618      	mov	r0, r3
 801b5b2:	3720      	adds	r7, #32
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	bd80      	pop	{r7, pc}
 801b5b8:	20000084 	.word	0x20000084
 801b5bc:	20000088 	.word	0x20000088

0801b5c0 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
 801b5c0:	b580      	push	{r7, lr}
 801b5c2:	b086      	sub	sp, #24
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
    const char *string_start = *string;
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	617b      	str	r3, [r7, #20]
    size_t string_len = 0;
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 801b5d2:	6878      	ldr	r0, [r7, #4]
 801b5d4:	f7ff fddc 	bl	801b190 <skip_quotes>
 801b5d8:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d001      	beq.n	801b5e4 <get_quoted_string+0x24>
        return NULL;
 801b5e0:	2300      	movs	r3, #0
 801b5e2:	e00c      	b.n	801b5fe <get_quoted_string+0x3e>
    }
    string_len = *string - string_start - 2; /* length without quotes */
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	681a      	ldr	r2, [r3, #0]
 801b5e8:	697b      	ldr	r3, [r7, #20]
 801b5ea:	1ad3      	subs	r3, r2, r3
 801b5ec:	3b02      	subs	r3, #2
 801b5ee:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, string_len);
 801b5f0:	697b      	ldr	r3, [r7, #20]
 801b5f2:	3301      	adds	r3, #1
 801b5f4:	6939      	ldr	r1, [r7, #16]
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7ff fefe 	bl	801b3f8 <process_string>
 801b5fc:	4603      	mov	r3, r0
}
 801b5fe:	4618      	mov	r0, r3
 801b600:	3718      	adds	r7, #24
 801b602:	46bd      	mov	sp, r7
 801b604:	bd80      	pop	{r7, pc}
	...

0801b608 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 801b608:	b580      	push	{r7, lr}
 801b60a:	b082      	sub	sp, #8
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	6078      	str	r0, [r7, #4]
 801b610:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 801b612:	683b      	ldr	r3, [r7, #0]
 801b614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b618:	d906      	bls.n	801b628 <parse_value+0x20>
        return NULL;
 801b61a:	2300      	movs	r3, #0
 801b61c:	e08d      	b.n	801b73a <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	1c5a      	adds	r2, r3, #1
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	601a      	str	r2, [r3, #0]
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	781b      	ldrb	r3, [r3, #0]
 801b62e:	3301      	adds	r3, #1
 801b630:	4a44      	ldr	r2, [pc, #272]	; (801b744 <parse_value+0x13c>)
 801b632:	4413      	add	r3, r2
 801b634:	781b      	ldrb	r3, [r3, #0]
 801b636:	f003 0308 	and.w	r3, r3, #8
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d1ef      	bne.n	801b61e <parse_value+0x16>
    switch (**string) {
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	781b      	ldrb	r3, [r3, #0]
 801b644:	2b7b      	cmp	r3, #123	; 0x7b
 801b646:	dc77      	bgt.n	801b738 <parse_value+0x130>
 801b648:	2b5b      	cmp	r3, #91	; 0x5b
 801b64a:	da08      	bge.n	801b65e <parse_value+0x56>
 801b64c:	2b39      	cmp	r3, #57	; 0x39
 801b64e:	dc73      	bgt.n	801b738 <parse_value+0x130>
 801b650:	2b30      	cmp	r3, #48	; 0x30
 801b652:	da67      	bge.n	801b724 <parse_value+0x11c>
 801b654:	2b22      	cmp	r3, #34	; 0x22
 801b656:	d05b      	beq.n	801b710 <parse_value+0x108>
 801b658:	2b2d      	cmp	r3, #45	; 0x2d
 801b65a:	d063      	beq.n	801b724 <parse_value+0x11c>
 801b65c:	e06c      	b.n	801b738 <parse_value+0x130>
 801b65e:	3b5b      	subs	r3, #91	; 0x5b
 801b660:	2b20      	cmp	r3, #32
 801b662:	d869      	bhi.n	801b738 <parse_value+0x130>
 801b664:	a201      	add	r2, pc, #4	; (adr r2, 801b66c <parse_value+0x64>)
 801b666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b66a:	bf00      	nop
 801b66c:	0801b701 	.word	0x0801b701
 801b670:	0801b739 	.word	0x0801b739
 801b674:	0801b739 	.word	0x0801b739
 801b678:	0801b739 	.word	0x0801b739
 801b67c:	0801b739 	.word	0x0801b739
 801b680:	0801b739 	.word	0x0801b739
 801b684:	0801b739 	.word	0x0801b739
 801b688:	0801b739 	.word	0x0801b739
 801b68c:	0801b739 	.word	0x0801b739
 801b690:	0801b739 	.word	0x0801b739
 801b694:	0801b739 	.word	0x0801b739
 801b698:	0801b71b 	.word	0x0801b71b
 801b69c:	0801b739 	.word	0x0801b739
 801b6a0:	0801b739 	.word	0x0801b739
 801b6a4:	0801b739 	.word	0x0801b739
 801b6a8:	0801b739 	.word	0x0801b739
 801b6ac:	0801b739 	.word	0x0801b739
 801b6b0:	0801b739 	.word	0x0801b739
 801b6b4:	0801b739 	.word	0x0801b739
 801b6b8:	0801b72f 	.word	0x0801b72f
 801b6bc:	0801b739 	.word	0x0801b739
 801b6c0:	0801b739 	.word	0x0801b739
 801b6c4:	0801b739 	.word	0x0801b739
 801b6c8:	0801b739 	.word	0x0801b739
 801b6cc:	0801b739 	.word	0x0801b739
 801b6d0:	0801b71b 	.word	0x0801b71b
 801b6d4:	0801b739 	.word	0x0801b739
 801b6d8:	0801b739 	.word	0x0801b739
 801b6dc:	0801b739 	.word	0x0801b739
 801b6e0:	0801b739 	.word	0x0801b739
 801b6e4:	0801b739 	.word	0x0801b739
 801b6e8:	0801b739 	.word	0x0801b739
 801b6ec:	0801b6f1 	.word	0x0801b6f1
        case '{':
            return parse_object_value(string, nesting + 1);
 801b6f0:	683b      	ldr	r3, [r7, #0]
 801b6f2:	3301      	adds	r3, #1
 801b6f4:	4619      	mov	r1, r3
 801b6f6:	6878      	ldr	r0, [r7, #4]
 801b6f8:	f000 f826 	bl	801b748 <parse_object_value>
 801b6fc:	4603      	mov	r3, r0
 801b6fe:	e01c      	b.n	801b73a <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	3301      	adds	r3, #1
 801b704:	4619      	mov	r1, r3
 801b706:	6878      	ldr	r0, [r7, #4]
 801b708:	f000 f926 	bl	801b958 <parse_array_value>
 801b70c:	4603      	mov	r3, r0
 801b70e:	e014      	b.n	801b73a <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 801b710:	6878      	ldr	r0, [r7, #4]
 801b712:	f000 f9e7 	bl	801bae4 <parse_string_value>
 801b716:	4603      	mov	r3, r0
 801b718:	e00f      	b.n	801b73a <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 801b71a:	6878      	ldr	r0, [r7, #4]
 801b71c:	f000 fa06 	bl	801bb2c <parse_boolean_value>
 801b720:	4603      	mov	r3, r0
 801b722:	e00a      	b.n	801b73a <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 801b724:	6878      	ldr	r0, [r7, #4]
 801b726:	f000 fa3d 	bl	801bba4 <parse_number_value>
 801b72a:	4603      	mov	r3, r0
 801b72c:	e005      	b.n	801b73a <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 801b72e:	6878      	ldr	r0, [r7, #4]
 801b730:	f000 fa72 	bl	801bc18 <parse_null_value>
 801b734:	4603      	mov	r3, r0
 801b736:	e000      	b.n	801b73a <parse_value+0x132>
        default:
            return NULL;
 801b738:	2300      	movs	r3, #0
    }
}
 801b73a:	4618      	mov	r0, r3
 801b73c:	3708      	adds	r7, #8
 801b73e:	46bd      	mov	sp, r7
 801b740:	bd80      	pop	{r7, pc}
 801b742:	bf00      	nop
 801b744:	08022b34 	.word	0x08022b34

0801b748 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 801b748:	b580      	push	{r7, lr}
 801b74a:	b086      	sub	sp, #24
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	6078      	str	r0, [r7, #4]
 801b750:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_value = NULL;
 801b752:	2300      	movs	r3, #0
 801b754:	617b      	str	r3, [r7, #20]
 801b756:	2300      	movs	r3, #0
 801b758:	613b      	str	r3, [r7, #16]
    JSON_Object *output_object = NULL;
 801b75a:	2300      	movs	r3, #0
 801b75c:	60fb      	str	r3, [r7, #12]
    char *new_key = NULL;
 801b75e:	2300      	movs	r3, #0
 801b760:	60bb      	str	r3, [r7, #8]
    output_value = json_value_init_object();
 801b762:	f001 fc51 	bl	801d008 <json_value_init_object>
 801b766:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801b768:	697b      	ldr	r3, [r7, #20]
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d101      	bne.n	801b772 <parse_object_value+0x2a>
        return NULL;
 801b76e:	2300      	movs	r3, #0
 801b770:	e0ea      	b.n	801b948 <parse_object_value+0x200>
    }
    if (**string != '{') {
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	781b      	ldrb	r3, [r3, #0]
 801b778:	2b7b      	cmp	r3, #123	; 0x7b
 801b77a:	d004      	beq.n	801b786 <parse_object_value+0x3e>
        json_value_free(output_value);
 801b77c:	6978      	ldr	r0, [r7, #20]
 801b77e:	f001 fc15 	bl	801cfac <json_value_free>
        return NULL;
 801b782:	2300      	movs	r3, #0
 801b784:	e0e0      	b.n	801b948 <parse_object_value+0x200>
    }
    output_object = json_value_get_object(output_value);
 801b786:	6978      	ldr	r0, [r7, #20]
 801b788:	f001 fbab 	bl	801cee2 <json_value_get_object>
 801b78c:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	1c5a      	adds	r2, r3, #1
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801b798:	e004      	b.n	801b7a4 <parse_object_value+0x5c>
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	1c5a      	adds	r2, r3, #1
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	601a      	str	r2, [r3, #0]
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	681b      	ldr	r3, [r3, #0]
 801b7a8:	781b      	ldrb	r3, [r3, #0]
 801b7aa:	3301      	adds	r3, #1
 801b7ac:	4a68      	ldr	r2, [pc, #416]	; (801b950 <parse_object_value+0x208>)
 801b7ae:	4413      	add	r3, r2
 801b7b0:	781b      	ldrb	r3, [r3, #0]
 801b7b2:	f003 0308 	and.w	r3, r3, #8
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d1ef      	bne.n	801b79a <parse_object_value+0x52>
    if (**string == '}') { /* empty object */
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	781b      	ldrb	r3, [r3, #0]
 801b7c0:	2b7d      	cmp	r3, #125	; 0x7d
 801b7c2:	f040 808c 	bne.w	801b8de <parse_object_value+0x196>
        SKIP_CHAR(string);
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	1c5a      	adds	r2, r3, #1
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	601a      	str	r2, [r3, #0]
        return output_value;
 801b7d0:	697b      	ldr	r3, [r7, #20]
 801b7d2:	e0b9      	b.n	801b948 <parse_object_value+0x200>
    }
    while (**string != '\0') {
        new_key = get_quoted_string(string);
 801b7d4:	6878      	ldr	r0, [r7, #4]
 801b7d6:	f7ff fef3 	bl	801b5c0 <get_quoted_string>
 801b7da:	60b8      	str	r0, [r7, #8]
        if (new_key == NULL) {
 801b7dc:	68bb      	ldr	r3, [r7, #8]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d109      	bne.n	801b7f6 <parse_object_value+0xae>
            json_value_free(output_value);
 801b7e2:	6978      	ldr	r0, [r7, #20]
 801b7e4:	f001 fbe2 	bl	801cfac <json_value_free>
            return NULL;
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	e0ad      	b.n	801b948 <parse_object_value+0x200>
        }
        SKIP_WHITESPACES(string);
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	1c5a      	adds	r2, r3, #1
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	601a      	str	r2, [r3, #0]
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	781b      	ldrb	r3, [r3, #0]
 801b7fc:	3301      	adds	r3, #1
 801b7fe:	4a54      	ldr	r2, [pc, #336]	; (801b950 <parse_object_value+0x208>)
 801b800:	4413      	add	r3, r2
 801b802:	781b      	ldrb	r3, [r3, #0]
 801b804:	f003 0308 	and.w	r3, r3, #8
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d1ef      	bne.n	801b7ec <parse_object_value+0xa4>
        if (**string != ':') {
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	681b      	ldr	r3, [r3, #0]
 801b810:	781b      	ldrb	r3, [r3, #0]
 801b812:	2b3a      	cmp	r3, #58	; 0x3a
 801b814:	d008      	beq.n	801b828 <parse_object_value+0xe0>
            parson_free(new_key);
 801b816:	4b4f      	ldr	r3, [pc, #316]	; (801b954 <parse_object_value+0x20c>)
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	68b8      	ldr	r0, [r7, #8]
 801b81c:	4798      	blx	r3
            json_value_free(output_value);
 801b81e:	6978      	ldr	r0, [r7, #20]
 801b820:	f001 fbc4 	bl	801cfac <json_value_free>
            return NULL;
 801b824:	2300      	movs	r3, #0
 801b826:	e08f      	b.n	801b948 <parse_object_value+0x200>
        }
        SKIP_CHAR(string);
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	1c5a      	adds	r2, r3, #1
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 801b832:	6839      	ldr	r1, [r7, #0]
 801b834:	6878      	ldr	r0, [r7, #4]
 801b836:	f7ff fee7 	bl	801b608 <parse_value>
 801b83a:	6138      	str	r0, [r7, #16]
        if (new_value == NULL) {
 801b83c:	693b      	ldr	r3, [r7, #16]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d108      	bne.n	801b854 <parse_object_value+0x10c>
            parson_free(new_key);
 801b842:	4b44      	ldr	r3, [pc, #272]	; (801b954 <parse_object_value+0x20c>)
 801b844:	681b      	ldr	r3, [r3, #0]
 801b846:	68b8      	ldr	r0, [r7, #8]
 801b848:	4798      	blx	r3
            json_value_free(output_value);
 801b84a:	6978      	ldr	r0, [r7, #20]
 801b84c:	f001 fbae 	bl	801cfac <json_value_free>
            return NULL;
 801b850:	2300      	movs	r3, #0
 801b852:	e079      	b.n	801b948 <parse_object_value+0x200>
        }
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 801b854:	693a      	ldr	r2, [r7, #16]
 801b856:	68b9      	ldr	r1, [r7, #8]
 801b858:	68f8      	ldr	r0, [r7, #12]
 801b85a:	f7ff f997 	bl	801ab8c <json_object_add>
 801b85e:	4603      	mov	r3, r0
 801b860:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b864:	d10b      	bne.n	801b87e <parse_object_value+0x136>
            parson_free(new_key);
 801b866:	4b3b      	ldr	r3, [pc, #236]	; (801b954 <parse_object_value+0x20c>)
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	68b8      	ldr	r0, [r7, #8]
 801b86c:	4798      	blx	r3
            json_value_free(new_value);
 801b86e:	6938      	ldr	r0, [r7, #16]
 801b870:	f001 fb9c 	bl	801cfac <json_value_free>
            json_value_free(output_value);
 801b874:	6978      	ldr	r0, [r7, #20]
 801b876:	f001 fb99 	bl	801cfac <json_value_free>
            return NULL;
 801b87a:	2300      	movs	r3, #0
 801b87c:	e064      	b.n	801b948 <parse_object_value+0x200>
        }
        parson_free(new_key);
 801b87e:	4b35      	ldr	r3, [pc, #212]	; (801b954 <parse_object_value+0x20c>)
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	68b8      	ldr	r0, [r7, #8]
 801b884:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 801b886:	e004      	b.n	801b892 <parse_object_value+0x14a>
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	1c5a      	adds	r2, r3, #1
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	601a      	str	r2, [r3, #0]
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	781b      	ldrb	r3, [r3, #0]
 801b898:	3301      	adds	r3, #1
 801b89a:	4a2d      	ldr	r2, [pc, #180]	; (801b950 <parse_object_value+0x208>)
 801b89c:	4413      	add	r3, r2
 801b89e:	781b      	ldrb	r3, [r3, #0]
 801b8a0:	f003 0308 	and.w	r3, r3, #8
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d1ef      	bne.n	801b888 <parse_object_value+0x140>
        if (**string != ',') {
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	781b      	ldrb	r3, [r3, #0]
 801b8ae:	2b2c      	cmp	r3, #44	; 0x2c
 801b8b0:	d11c      	bne.n	801b8ec <parse_object_value+0x1a4>
            break;
        }
        SKIP_CHAR(string);
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	1c5a      	adds	r2, r3, #1
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801b8bc:	e004      	b.n	801b8c8 <parse_object_value+0x180>
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	1c5a      	adds	r2, r3, #1
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	601a      	str	r2, [r3, #0]
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	781b      	ldrb	r3, [r3, #0]
 801b8ce:	3301      	adds	r3, #1
 801b8d0:	4a1f      	ldr	r2, [pc, #124]	; (801b950 <parse_object_value+0x208>)
 801b8d2:	4413      	add	r3, r2
 801b8d4:	781b      	ldrb	r3, [r3, #0]
 801b8d6:	f003 0308 	and.w	r3, r3, #8
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d1ef      	bne.n	801b8be <parse_object_value+0x176>
    while (**string != '\0') {
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	781b      	ldrb	r3, [r3, #0]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	f47f af75 	bne.w	801b7d4 <parse_object_value+0x8c>
 801b8ea:	e006      	b.n	801b8fa <parse_object_value+0x1b2>
            break;
 801b8ec:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801b8ee:	e004      	b.n	801b8fa <parse_object_value+0x1b2>
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	1c5a      	adds	r2, r3, #1
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	601a      	str	r2, [r3, #0]
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	781b      	ldrb	r3, [r3, #0]
 801b900:	3301      	adds	r3, #1
 801b902:	4a13      	ldr	r2, [pc, #76]	; (801b950 <parse_object_value+0x208>)
 801b904:	4413      	add	r3, r2
 801b906:	781b      	ldrb	r3, [r3, #0]
 801b908:	f003 0308 	and.w	r3, r3, #8
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d1ef      	bne.n	801b8f0 <parse_object_value+0x1a8>
    if (**string != '}' || /* Trim object after parsing is over */
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	781b      	ldrb	r3, [r3, #0]
 801b916:	2b7d      	cmp	r3, #125	; 0x7d
 801b918:	d10b      	bne.n	801b932 <parse_object_value+0x1ea>
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 801b91a:	68f8      	ldr	r0, [r7, #12]
 801b91c:	f001 fa3a 	bl	801cd94 <json_object_get_count>
 801b920:	4603      	mov	r3, r0
 801b922:	4619      	mov	r1, r3
 801b924:	68f8      	ldr	r0, [r7, #12]
 801b926:	f7ff f9b3 	bl	801ac90 <json_object_resize>
 801b92a:	4603      	mov	r3, r0
    if (**string != '}' || /* Trim object after parsing is over */
 801b92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b930:	d104      	bne.n	801b93c <parse_object_value+0x1f4>
            json_value_free(output_value);
 801b932:	6978      	ldr	r0, [r7, #20]
 801b934:	f001 fb3a 	bl	801cfac <json_value_free>
            return NULL;
 801b938:	2300      	movs	r3, #0
 801b93a:	e005      	b.n	801b948 <parse_object_value+0x200>
    }
    SKIP_CHAR(string);
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	1c5a      	adds	r2, r3, #1
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	601a      	str	r2, [r3, #0]
    return output_value;
 801b946:	697b      	ldr	r3, [r7, #20]
}
 801b948:	4618      	mov	r0, r3
 801b94a:	3718      	adds	r7, #24
 801b94c:	46bd      	mov	sp, r7
 801b94e:	bd80      	pop	{r7, pc}
 801b950:	08022b34 	.word	0x08022b34
 801b954:	20000088 	.word	0x20000088

0801b958 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 801b958:	b580      	push	{r7, lr}
 801b95a:	b086      	sub	sp, #24
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
 801b960:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 801b962:	2300      	movs	r3, #0
 801b964:	617b      	str	r3, [r7, #20]
 801b966:	2300      	movs	r3, #0
 801b968:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 801b96a:	2300      	movs	r3, #0
 801b96c:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 801b96e:	f001 fb77 	bl	801d060 <json_value_init_array>
 801b972:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801b974:	697b      	ldr	r3, [r7, #20]
 801b976:	2b00      	cmp	r3, #0
 801b978:	d101      	bne.n	801b97e <parse_array_value+0x26>
        return NULL;
 801b97a:	2300      	movs	r3, #0
 801b97c:	e0ab      	b.n	801bad6 <parse_array_value+0x17e>
    }
    if (**string != '[') {
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	781b      	ldrb	r3, [r3, #0]
 801b984:	2b5b      	cmp	r3, #91	; 0x5b
 801b986:	d004      	beq.n	801b992 <parse_array_value+0x3a>
        json_value_free(output_value);
 801b988:	6978      	ldr	r0, [r7, #20]
 801b98a:	f001 fb0f 	bl	801cfac <json_value_free>
        return NULL;
 801b98e:	2300      	movs	r3, #0
 801b990:	e0a1      	b.n	801bad6 <parse_array_value+0x17e>
    }
    output_array = json_value_get_array(output_value);
 801b992:	6978      	ldr	r0, [r7, #20]
 801b994:	f001 fab7 	bl	801cf06 <json_value_get_array>
 801b998:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	1c5a      	adds	r2, r3, #1
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801b9a4:	e004      	b.n	801b9b0 <parse_array_value+0x58>
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	1c5a      	adds	r2, r3, #1
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	601a      	str	r2, [r3, #0]
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	781b      	ldrb	r3, [r3, #0]
 801b9b6:	3301      	adds	r3, #1
 801b9b8:	4a49      	ldr	r2, [pc, #292]	; (801bae0 <parse_array_value+0x188>)
 801b9ba:	4413      	add	r3, r2
 801b9bc:	781b      	ldrb	r3, [r3, #0]
 801b9be:	f003 0308 	and.w	r3, r3, #8
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d1ef      	bne.n	801b9a6 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	781b      	ldrb	r3, [r3, #0]
 801b9cc:	2b5d      	cmp	r3, #93	; 0x5d
 801b9ce:	d14e      	bne.n	801ba6e <parse_array_value+0x116>
        SKIP_CHAR(string);
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	1c5a      	adds	r2, r3, #1
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	601a      	str	r2, [r3, #0]
        return output_value;
 801b9da:	697b      	ldr	r3, [r7, #20]
 801b9dc:	e07b      	b.n	801bad6 <parse_array_value+0x17e>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 801b9de:	6839      	ldr	r1, [r7, #0]
 801b9e0:	6878      	ldr	r0, [r7, #4]
 801b9e2:	f7ff fe11 	bl	801b608 <parse_value>
 801b9e6:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 801b9e8:	693b      	ldr	r3, [r7, #16]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d104      	bne.n	801b9f8 <parse_array_value+0xa0>
            json_value_free(output_value);
 801b9ee:	6978      	ldr	r0, [r7, #20]
 801b9f0:	f001 fadc 	bl	801cfac <json_value_free>
            return NULL;
 801b9f4:	2300      	movs	r3, #0
 801b9f6:	e06e      	b.n	801bad6 <parse_array_value+0x17e>
        }
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 801b9f8:	6939      	ldr	r1, [r7, #16]
 801b9fa:	68f8      	ldr	r0, [r7, #12]
 801b9fc:	f7ff fb0c 	bl	801b018 <json_array_add>
 801ba00:	4603      	mov	r3, r0
 801ba02:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba06:	d10c      	bne.n	801ba22 <parse_array_value+0xca>
            json_value_free(new_array_value);
 801ba08:	6938      	ldr	r0, [r7, #16]
 801ba0a:	f001 facf 	bl	801cfac <json_value_free>
            json_value_free(output_value);
 801ba0e:	6978      	ldr	r0, [r7, #20]
 801ba10:	f001 facc 	bl	801cfac <json_value_free>
            return NULL;
 801ba14:	2300      	movs	r3, #0
 801ba16:	e05e      	b.n	801bad6 <parse_array_value+0x17e>
        }
        SKIP_WHITESPACES(string);
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	1c5a      	adds	r2, r3, #1
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	601a      	str	r2, [r3, #0]
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	781b      	ldrb	r3, [r3, #0]
 801ba28:	3301      	adds	r3, #1
 801ba2a:	4a2d      	ldr	r2, [pc, #180]	; (801bae0 <parse_array_value+0x188>)
 801ba2c:	4413      	add	r3, r2
 801ba2e:	781b      	ldrb	r3, [r3, #0]
 801ba30:	f003 0308 	and.w	r3, r3, #8
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d1ef      	bne.n	801ba18 <parse_array_value+0xc0>
        if (**string != ',') {
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	781b      	ldrb	r3, [r3, #0]
 801ba3e:	2b2c      	cmp	r3, #44	; 0x2c
 801ba40:	d11b      	bne.n	801ba7a <parse_array_value+0x122>
            break;
        }
        SKIP_CHAR(string);
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	1c5a      	adds	r2, r3, #1
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801ba4c:	e004      	b.n	801ba58 <parse_array_value+0x100>
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	1c5a      	adds	r2, r3, #1
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	601a      	str	r2, [r3, #0]
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	781b      	ldrb	r3, [r3, #0]
 801ba5e:	3301      	adds	r3, #1
 801ba60:	4a1f      	ldr	r2, [pc, #124]	; (801bae0 <parse_array_value+0x188>)
 801ba62:	4413      	add	r3, r2
 801ba64:	781b      	ldrb	r3, [r3, #0]
 801ba66:	f003 0308 	and.w	r3, r3, #8
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d1ef      	bne.n	801ba4e <parse_array_value+0xf6>
    while (**string != '\0') {
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	781b      	ldrb	r3, [r3, #0]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d1b2      	bne.n	801b9de <parse_array_value+0x86>
 801ba78:	e006      	b.n	801ba88 <parse_array_value+0x130>
            break;
 801ba7a:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801ba7c:	e004      	b.n	801ba88 <parse_array_value+0x130>
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	1c5a      	adds	r2, r3, #1
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	601a      	str	r2, [r3, #0]
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	781b      	ldrb	r3, [r3, #0]
 801ba8e:	3301      	adds	r3, #1
 801ba90:	4a13      	ldr	r2, [pc, #76]	; (801bae0 <parse_array_value+0x188>)
 801ba92:	4413      	add	r3, r2
 801ba94:	781b      	ldrb	r3, [r3, #0]
 801ba96:	f003 0308 	and.w	r3, r3, #8
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d1ef      	bne.n	801ba7e <parse_array_value+0x126>
    if (**string != ']' || /* Trim array after parsing is over */
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	781b      	ldrb	r3, [r3, #0]
 801baa4:	2b5d      	cmp	r3, #93	; 0x5d
 801baa6:	d10b      	bne.n	801bac0 <parse_array_value+0x168>
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
 801baa8:	68f8      	ldr	r0, [r7, #12]
 801baaa:	f001 f9eb 	bl	801ce84 <json_array_get_count>
 801baae:	4603      	mov	r3, r0
 801bab0:	4619      	mov	r1, r3
 801bab2:	68f8      	ldr	r0, [r7, #12]
 801bab4:	f7ff fae6 	bl	801b084 <json_array_resize>
 801bab8:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 801baba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801babe:	d104      	bne.n	801baca <parse_array_value+0x172>
            json_value_free(output_value);
 801bac0:	6978      	ldr	r0, [r7, #20]
 801bac2:	f001 fa73 	bl	801cfac <json_value_free>
            return NULL;
 801bac6:	2300      	movs	r3, #0
 801bac8:	e005      	b.n	801bad6 <parse_array_value+0x17e>
    }
    SKIP_CHAR(string);
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	1c5a      	adds	r2, r3, #1
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	601a      	str	r2, [r3, #0]
    return output_value;
 801bad4:	697b      	ldr	r3, [r7, #20]
}
 801bad6:	4618      	mov	r0, r3
 801bad8:	3718      	adds	r7, #24
 801bada:	46bd      	mov	sp, r7
 801badc:	bd80      	pop	{r7, pc}
 801bade:	bf00      	nop
 801bae0:	08022b34 	.word	0x08022b34

0801bae4 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 801bae4:	b580      	push	{r7, lr}
 801bae6:	b084      	sub	sp, #16
 801bae8:	af00      	add	r7, sp, #0
 801baea:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 801baec:	2300      	movs	r3, #0
 801baee:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string);
 801baf0:	6878      	ldr	r0, [r7, #4]
 801baf2:	f7ff fd65 	bl	801b5c0 <get_quoted_string>
 801baf6:	60b8      	str	r0, [r7, #8]
    if (new_string == NULL) {
 801baf8:	68bb      	ldr	r3, [r7, #8]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d101      	bne.n	801bb02 <parse_string_value+0x1e>
        return NULL;
 801bafe:	2300      	movs	r3, #0
 801bb00:	e00d      	b.n	801bb1e <parse_string_value+0x3a>
    }
    value = json_value_init_string_no_copy(new_string);
 801bb02:	68b8      	ldr	r0, [r7, #8]
 801bb04:	f7ff fb26 	bl	801b154 <json_value_init_string_no_copy>
 801bb08:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d105      	bne.n	801bb1c <parse_string_value+0x38>
        parson_free(new_string);
 801bb10:	4b05      	ldr	r3, [pc, #20]	; (801bb28 <parse_string_value+0x44>)
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	68b8      	ldr	r0, [r7, #8]
 801bb16:	4798      	blx	r3
        return NULL;
 801bb18:	2300      	movs	r3, #0
 801bb1a:	e000      	b.n	801bb1e <parse_string_value+0x3a>
    }
    return value;
 801bb1c:	68fb      	ldr	r3, [r7, #12]
}
 801bb1e:	4618      	mov	r0, r3
 801bb20:	3710      	adds	r7, #16
 801bb22:	46bd      	mov	sp, r7
 801bb24:	bd80      	pop	{r7, pc}
 801bb26:	bf00      	nop
 801bb28:	20000088 	.word	0x20000088

0801bb2c <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 801bb2c:	b580      	push	{r7, lr}
 801bb2e:	b084      	sub	sp, #16
 801bb30:	af00      	add	r7, sp, #0
 801bb32:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 801bb34:	2304      	movs	r3, #4
 801bb36:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 801bb38:	2305      	movs	r3, #5
 801bb3a:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	68fa      	ldr	r2, [r7, #12]
 801bb42:	4619      	mov	r1, r3
 801bb44:	4815      	ldr	r0, [pc, #84]	; (801bb9c <parse_boolean_value+0x70>)
 801bb46:	f002 ff60 	bl	801ea0a <strncmp>
 801bb4a:	4603      	mov	r3, r0
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d10a      	bne.n	801bb66 <parse_boolean_value+0x3a>
        *string += true_token_size;
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	681a      	ldr	r2, [r3, #0]
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	441a      	add	r2, r3
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 801bb5c:	2001      	movs	r0, #1
 801bb5e:	f001 fb33 	bl	801d1c8 <json_value_init_boolean>
 801bb62:	4603      	mov	r3, r0
 801bb64:	e015      	b.n	801bb92 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	681b      	ldr	r3, [r3, #0]
 801bb6a:	68ba      	ldr	r2, [r7, #8]
 801bb6c:	4619      	mov	r1, r3
 801bb6e:	480c      	ldr	r0, [pc, #48]	; (801bba0 <parse_boolean_value+0x74>)
 801bb70:	f002 ff4b 	bl	801ea0a <strncmp>
 801bb74:	4603      	mov	r3, r0
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d10a      	bne.n	801bb90 <parse_boolean_value+0x64>
        *string += false_token_size;
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	681a      	ldr	r2, [r3, #0]
 801bb7e:	68bb      	ldr	r3, [r7, #8]
 801bb80:	441a      	add	r2, r3
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 801bb86:	2000      	movs	r0, #0
 801bb88:	f001 fb1e 	bl	801d1c8 <json_value_init_boolean>
 801bb8c:	4603      	mov	r3, r0
 801bb8e:	e000      	b.n	801bb92 <parse_boolean_value+0x66>
    }
    return NULL;
 801bb90:	2300      	movs	r3, #0
}
 801bb92:	4618      	mov	r0, r3
 801bb94:	3710      	adds	r7, #16
 801bb96:	46bd      	mov	sp, r7
 801bb98:	bd80      	pop	{r7, pc}
 801bb9a:	bf00      	nop
 801bb9c:	080224f8 	.word	0x080224f8
 801bba0:	08022500 	.word	0x08022500

0801bba4 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 801bba4:	b580      	push	{r7, lr}
 801bba6:	b086      	sub	sp, #24
 801bba8:	af00      	add	r7, sp, #0
 801bbaa:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 801bbac:	f04f 0200 	mov.w	r2, #0
 801bbb0:	f04f 0300 	mov.w	r3, #0
 801bbb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 801bbb8:	f001 fed0 	bl	801d95c <__errno>
 801bbbc:	4603      	mov	r3, r0
 801bbbe:	2200      	movs	r2, #0
 801bbc0:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	f107 020c 	add.w	r2, r7, #12
 801bbca:	4611      	mov	r1, r2
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f003 fd69 	bl	801f6a4 <strtod>
 801bbd2:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno || !is_decimal(*string, end - *string)) {
 801bbd6:	f001 fec1 	bl	801d95c <__errno>
 801bbda:	4603      	mov	r3, r0
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d10b      	bne.n	801bbfa <parse_number_value+0x56>
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	6818      	ldr	r0, [r3, #0]
 801bbe6:	68fa      	ldr	r2, [r7, #12]
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	1ad3      	subs	r3, r2, r3
 801bbee:	4619      	mov	r1, r3
 801bbf0:	f7fe ff68 	bl	801aac4 <is_decimal>
 801bbf4:	4603      	mov	r3, r0
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d101      	bne.n	801bbfe <parse_number_value+0x5a>
        return NULL;
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	e007      	b.n	801bc0e <parse_number_value+0x6a>
    }
    *string = end;
 801bbfe:	68fa      	ldr	r2, [r7, #12]
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 801bc04:	ed97 0b04 	vldr	d0, [r7, #16]
 801bc08:	f001 fa8c 	bl	801d124 <json_value_init_number>
 801bc0c:	4603      	mov	r3, r0
}
 801bc0e:	4618      	mov	r0, r3
 801bc10:	3718      	adds	r7, #24
 801bc12:	46bd      	mov	sp, r7
 801bc14:	bd80      	pop	{r7, pc}
	...

0801bc18 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	b084      	sub	sp, #16
 801bc1c:	af00      	add	r7, sp, #0
 801bc1e:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 801bc20:	2304      	movs	r3, #4
 801bc22:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	68fa      	ldr	r2, [r7, #12]
 801bc2a:	4619      	mov	r1, r3
 801bc2c:	480a      	ldr	r0, [pc, #40]	; (801bc58 <parse_null_value+0x40>)
 801bc2e:	f002 feec 	bl	801ea0a <strncmp>
 801bc32:	4603      	mov	r3, r0
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d109      	bne.n	801bc4c <parse_null_value+0x34>
        *string += token_size;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	681a      	ldr	r2, [r3, #0]
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	441a      	add	r2, r3
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 801bc44:	f001 fae4 	bl	801d210 <json_value_init_null>
 801bc48:	4603      	mov	r3, r0
 801bc4a:	e000      	b.n	801bc4e <parse_null_value+0x36>
    }
    return NULL;
 801bc4c:	2300      	movs	r3, #0
}
 801bc4e:	4618      	mov	r0, r3
 801bc50:	3710      	adds	r7, #16
 801bc52:	46bd      	mov	sp, r7
 801bc54:	bd80      	pop	{r7, pc}
 801bc56:	bf00      	nop
 801bc58:	08022508 	.word	0x08022508

0801bc5c <json_serialize_to_buffer_r>:
                                  if (written < 0) { return -1; }\
                                  if (buf != NULL) { buf += written; }\
                                  written_total += written; } while(0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)
{
 801bc5c:	b580      	push	{r7, lr}
 801bc5e:	b092      	sub	sp, #72	; 0x48
 801bc60:	af02      	add	r7, sp, #8
 801bc62:	60f8      	str	r0, [r7, #12]
 801bc64:	60b9      	str	r1, [r7, #8]
 801bc66:	607a      	str	r2, [r7, #4]
 801bc68:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	637b      	str	r3, [r7, #52]	; 0x34
 801bc6e:	2300      	movs	r3, #0
 801bc70:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Value *temp_value = NULL;
 801bc72:	2300      	movs	r3, #0
 801bc74:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Array *array = NULL;
 801bc76:	2300      	movs	r3, #0
 801bc78:	62bb      	str	r3, [r7, #40]	; 0x28
    JSON_Object *object = NULL;
 801bc7a:	2300      	movs	r3, #0
 801bc7c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i = 0, count = 0;
 801bc7e:	2300      	movs	r3, #0
 801bc80:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bc82:	2300      	movs	r3, #0
 801bc84:	623b      	str	r3, [r7, #32]
    double num = 0.0;
 801bc86:	f04f 0200 	mov.w	r2, #0
 801bc8a:	f04f 0300 	mov.w	r3, #0
 801bc8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 801bc92:	f04f 33ff 	mov.w	r3, #4294967295
 801bc96:	617b      	str	r3, [r7, #20]
 801bc98:	2300      	movs	r3, #0
 801bc9a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (json_value_get_type(value)) {
 801bc9c:	68f8      	ldr	r0, [r7, #12]
 801bc9e:	f001 f90e 	bl	801cebe <json_value_get_type>
 801bca2:	4603      	mov	r3, r0
 801bca4:	3301      	adds	r3, #1
 801bca6:	2b07      	cmp	r3, #7
 801bca8:	f200 82e4 	bhi.w	801c274 <json_serialize_to_buffer_r+0x618>
 801bcac:	a201      	add	r2, pc, #4	; (adr r2, 801bcb4 <json_serialize_to_buffer_r+0x58>)
 801bcae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcb2:	bf00      	nop
 801bcb4:	0801c26f 	.word	0x0801c26f
 801bcb8:	0801c275 	.word	0x0801c275
 801bcbc:	0801c23f 	.word	0x0801c23f
 801bcc0:	0801c129 	.word	0x0801c129
 801bcc4:	0801c1d7 	.word	0x0801c1d7
 801bcc8:	0801bea3 	.word	0x0801bea3
 801bccc:	0801bcd5 	.word	0x0801bcd5
 801bcd0:	0801c16d 	.word	0x0801c16d
        case JSONArray:
            array = json_value_get_array(value);
 801bcd4:	68f8      	ldr	r0, [r7, #12]
 801bcd6:	f001 f916 	bl	801cf06 <json_value_get_array>
 801bcda:	62b8      	str	r0, [r7, #40]	; 0x28
            count = json_array_get_count(array);
 801bcdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bcde:	f001 f8d1 	bl	801ce84 <json_array_get_count>
 801bce2:	6238      	str	r0, [r7, #32]
            APPEND_STRING("[");
 801bce4:	499b      	ldr	r1, [pc, #620]	; (801bf54 <json_serialize_to_buffer_r+0x2f8>)
 801bce6:	68b8      	ldr	r0, [r7, #8]
 801bce8:	f000 ff94 	bl	801cc14 <append_string>
 801bcec:	6178      	str	r0, [r7, #20]
 801bcee:	697b      	ldr	r3, [r7, #20]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	da02      	bge.n	801bcfa <json_serialize_to_buffer_r+0x9e>
 801bcf4:	f04f 33ff 	mov.w	r3, #4294967295
 801bcf8:	e2be      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801bcfa:	68bb      	ldr	r3, [r7, #8]
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d003      	beq.n	801bd08 <json_serialize_to_buffer_r+0xac>
 801bd00:	697b      	ldr	r3, [r7, #20]
 801bd02:	68ba      	ldr	r2, [r7, #8]
 801bd04:	4413      	add	r3, r2
 801bd06:	60bb      	str	r3, [r7, #8]
 801bd08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bd0a:	697b      	ldr	r3, [r7, #20]
 801bd0c:	4413      	add	r3, r2
 801bd0e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801bd10:	6a3b      	ldr	r3, [r7, #32]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d018      	beq.n	801bd48 <json_serialize_to_buffer_r+0xec>
 801bd16:	683b      	ldr	r3, [r7, #0]
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d015      	beq.n	801bd48 <json_serialize_to_buffer_r+0xec>
                APPEND_STRING("\n");
 801bd1c:	498e      	ldr	r1, [pc, #568]	; (801bf58 <json_serialize_to_buffer_r+0x2fc>)
 801bd1e:	68b8      	ldr	r0, [r7, #8]
 801bd20:	f000 ff78 	bl	801cc14 <append_string>
 801bd24:	6178      	str	r0, [r7, #20]
 801bd26:	697b      	ldr	r3, [r7, #20]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	da02      	bge.n	801bd32 <json_serialize_to_buffer_r+0xd6>
 801bd2c:	f04f 33ff 	mov.w	r3, #4294967295
 801bd30:	e2a2      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801bd32:	68bb      	ldr	r3, [r7, #8]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d003      	beq.n	801bd40 <json_serialize_to_buffer_r+0xe4>
 801bd38:	697b      	ldr	r3, [r7, #20]
 801bd3a:	68ba      	ldr	r2, [r7, #8]
 801bd3c:	4413      	add	r3, r2
 801bd3e:	60bb      	str	r3, [r7, #8]
 801bd40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bd42:	697b      	ldr	r3, [r7, #20]
 801bd44:	4413      	add	r3, r2
 801bd46:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801bd48:	2300      	movs	r3, #0
 801bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bd4c:	e071      	b.n	801be32 <json_serialize_to_buffer_r+0x1d6>
                if (is_pretty) {
 801bd4e:	683b      	ldr	r3, [r7, #0]
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d017      	beq.n	801bd84 <json_serialize_to_buffer_r+0x128>
                    APPEND_INDENT(level+1);
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	3301      	adds	r3, #1
 801bd58:	4619      	mov	r1, r3
 801bd5a:	68b8      	ldr	r0, [r7, #8]
 801bd5c:	f000 ff28 	bl	801cbb0 <append_indent>
 801bd60:	6178      	str	r0, [r7, #20]
 801bd62:	697b      	ldr	r3, [r7, #20]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	da02      	bge.n	801bd6e <json_serialize_to_buffer_r+0x112>
 801bd68:	f04f 33ff 	mov.w	r3, #4294967295
 801bd6c:	e284      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801bd6e:	68bb      	ldr	r3, [r7, #8]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d003      	beq.n	801bd7c <json_serialize_to_buffer_r+0x120>
 801bd74:	697b      	ldr	r3, [r7, #20]
 801bd76:	68ba      	ldr	r2, [r7, #8]
 801bd78:	4413      	add	r3, r2
 801bd7a:	60bb      	str	r3, [r7, #8]
 801bd7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bd7e:	697b      	ldr	r3, [r7, #20]
 801bd80:	4413      	add	r3, r2
 801bd82:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_array_get_value(array, i);
 801bd84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801bd86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bd88:	f001 f84f 	bl	801ce2a <json_array_get_value>
 801bd8c:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	1c5a      	adds	r2, r3, #1
 801bd92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bd94:	9300      	str	r3, [sp, #0]
 801bd96:	683b      	ldr	r3, [r7, #0]
 801bd98:	68b9      	ldr	r1, [r7, #8]
 801bd9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bd9c:	f7ff ff5e 	bl	801bc5c <json_serialize_to_buffer_r>
 801bda0:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801bda2:	697b      	ldr	r3, [r7, #20]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	da02      	bge.n	801bdae <json_serialize_to_buffer_r+0x152>
                    return -1;
 801bda8:	f04f 33ff 	mov.w	r3, #4294967295
 801bdac:	e264      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801bdae:	68bb      	ldr	r3, [r7, #8]
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	d003      	beq.n	801bdbc <json_serialize_to_buffer_r+0x160>
                    buf += written;
 801bdb4:	697b      	ldr	r3, [r7, #20]
 801bdb6:	68ba      	ldr	r2, [r7, #8]
 801bdb8:	4413      	add	r3, r2
 801bdba:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801bdbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bdbe:	697b      	ldr	r3, [r7, #20]
 801bdc0:	4413      	add	r3, r2
 801bdc2:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801bdc4:	6a3b      	ldr	r3, [r7, #32]
 801bdc6:	3b01      	subs	r3, #1
 801bdc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bdca:	429a      	cmp	r2, r3
 801bdcc:	d215      	bcs.n	801bdfa <json_serialize_to_buffer_r+0x19e>
                    APPEND_STRING(",");
 801bdce:	4963      	ldr	r1, [pc, #396]	; (801bf5c <json_serialize_to_buffer_r+0x300>)
 801bdd0:	68b8      	ldr	r0, [r7, #8]
 801bdd2:	f000 ff1f 	bl	801cc14 <append_string>
 801bdd6:	6178      	str	r0, [r7, #20]
 801bdd8:	697b      	ldr	r3, [r7, #20]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	da02      	bge.n	801bde4 <json_serialize_to_buffer_r+0x188>
 801bdde:	f04f 33ff 	mov.w	r3, #4294967295
 801bde2:	e249      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801bde4:	68bb      	ldr	r3, [r7, #8]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d003      	beq.n	801bdf2 <json_serialize_to_buffer_r+0x196>
 801bdea:	697b      	ldr	r3, [r7, #20]
 801bdec:	68ba      	ldr	r2, [r7, #8]
 801bdee:	4413      	add	r3, r2
 801bdf0:	60bb      	str	r3, [r7, #8]
 801bdf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bdf4:	697b      	ldr	r3, [r7, #20]
 801bdf6:	4413      	add	r3, r2
 801bdf8:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801bdfa:	683b      	ldr	r3, [r7, #0]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d015      	beq.n	801be2c <json_serialize_to_buffer_r+0x1d0>
                    APPEND_STRING("\n");
 801be00:	4955      	ldr	r1, [pc, #340]	; (801bf58 <json_serialize_to_buffer_r+0x2fc>)
 801be02:	68b8      	ldr	r0, [r7, #8]
 801be04:	f000 ff06 	bl	801cc14 <append_string>
 801be08:	6178      	str	r0, [r7, #20]
 801be0a:	697b      	ldr	r3, [r7, #20]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	da02      	bge.n	801be16 <json_serialize_to_buffer_r+0x1ba>
 801be10:	f04f 33ff 	mov.w	r3, #4294967295
 801be14:	e230      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801be16:	68bb      	ldr	r3, [r7, #8]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d003      	beq.n	801be24 <json_serialize_to_buffer_r+0x1c8>
 801be1c:	697b      	ldr	r3, [r7, #20]
 801be1e:	68ba      	ldr	r2, [r7, #8]
 801be20:	4413      	add	r3, r2
 801be22:	60bb      	str	r3, [r7, #8]
 801be24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be26:	697b      	ldr	r3, [r7, #20]
 801be28:	4413      	add	r3, r2
 801be2a:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801be2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be2e:	3301      	adds	r3, #1
 801be30:	63fb      	str	r3, [r7, #60]	; 0x3c
 801be32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be34:	6a3b      	ldr	r3, [r7, #32]
 801be36:	429a      	cmp	r2, r3
 801be38:	d389      	bcc.n	801bd4e <json_serialize_to_buffer_r+0xf2>
                }
            }
            if (count > 0 && is_pretty) {
 801be3a:	6a3b      	ldr	r3, [r7, #32]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d018      	beq.n	801be72 <json_serialize_to_buffer_r+0x216>
 801be40:	683b      	ldr	r3, [r7, #0]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d015      	beq.n	801be72 <json_serialize_to_buffer_r+0x216>
                APPEND_INDENT(level);
 801be46:	6879      	ldr	r1, [r7, #4]
 801be48:	68b8      	ldr	r0, [r7, #8]
 801be4a:	f000 feb1 	bl	801cbb0 <append_indent>
 801be4e:	6178      	str	r0, [r7, #20]
 801be50:	697b      	ldr	r3, [r7, #20]
 801be52:	2b00      	cmp	r3, #0
 801be54:	da02      	bge.n	801be5c <json_serialize_to_buffer_r+0x200>
 801be56:	f04f 33ff 	mov.w	r3, #4294967295
 801be5a:	e20d      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801be5c:	68bb      	ldr	r3, [r7, #8]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d003      	beq.n	801be6a <json_serialize_to_buffer_r+0x20e>
 801be62:	697b      	ldr	r3, [r7, #20]
 801be64:	68ba      	ldr	r2, [r7, #8]
 801be66:	4413      	add	r3, r2
 801be68:	60bb      	str	r3, [r7, #8]
 801be6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be6c:	697b      	ldr	r3, [r7, #20]
 801be6e:	4413      	add	r3, r2
 801be70:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("]");
 801be72:	493b      	ldr	r1, [pc, #236]	; (801bf60 <json_serialize_to_buffer_r+0x304>)
 801be74:	68b8      	ldr	r0, [r7, #8]
 801be76:	f000 fecd 	bl	801cc14 <append_string>
 801be7a:	6178      	str	r0, [r7, #20]
 801be7c:	697b      	ldr	r3, [r7, #20]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	da02      	bge.n	801be88 <json_serialize_to_buffer_r+0x22c>
 801be82:	f04f 33ff 	mov.w	r3, #4294967295
 801be86:	e1f7      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801be88:	68bb      	ldr	r3, [r7, #8]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d003      	beq.n	801be96 <json_serialize_to_buffer_r+0x23a>
 801be8e:	697b      	ldr	r3, [r7, #20]
 801be90:	68ba      	ldr	r2, [r7, #8]
 801be92:	4413      	add	r3, r2
 801be94:	60bb      	str	r3, [r7, #8]
 801be96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be98:	697b      	ldr	r3, [r7, #20]
 801be9a:	4413      	add	r3, r2
 801be9c:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801be9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bea0:	e1ea      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
        case JSONObject:
            object = json_value_get_object(value);
 801bea2:	68f8      	ldr	r0, [r7, #12]
 801bea4:	f001 f81d 	bl	801cee2 <json_value_get_object>
 801bea8:	6278      	str	r0, [r7, #36]	; 0x24
            count  = json_object_get_count(object);
 801beaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801beac:	f000 ff72 	bl	801cd94 <json_object_get_count>
 801beb0:	6238      	str	r0, [r7, #32]
            APPEND_STRING("{");
 801beb2:	492c      	ldr	r1, [pc, #176]	; (801bf64 <json_serialize_to_buffer_r+0x308>)
 801beb4:	68b8      	ldr	r0, [r7, #8]
 801beb6:	f000 fead 	bl	801cc14 <append_string>
 801beba:	6178      	str	r0, [r7, #20]
 801bebc:	697b      	ldr	r3, [r7, #20]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	da02      	bge.n	801bec8 <json_serialize_to_buffer_r+0x26c>
 801bec2:	f04f 33ff 	mov.w	r3, #4294967295
 801bec6:	e1d7      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801bec8:	68bb      	ldr	r3, [r7, #8]
 801beca:	2b00      	cmp	r3, #0
 801becc:	d003      	beq.n	801bed6 <json_serialize_to_buffer_r+0x27a>
 801bece:	697b      	ldr	r3, [r7, #20]
 801bed0:	68ba      	ldr	r2, [r7, #8]
 801bed2:	4413      	add	r3, r2
 801bed4:	60bb      	str	r3, [r7, #8]
 801bed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bed8:	697b      	ldr	r3, [r7, #20]
 801beda:	4413      	add	r3, r2
 801bedc:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801bede:	6a3b      	ldr	r3, [r7, #32]
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d018      	beq.n	801bf16 <json_serialize_to_buffer_r+0x2ba>
 801bee4:	683b      	ldr	r3, [r7, #0]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d015      	beq.n	801bf16 <json_serialize_to_buffer_r+0x2ba>
                APPEND_STRING("\n");
 801beea:	491b      	ldr	r1, [pc, #108]	; (801bf58 <json_serialize_to_buffer_r+0x2fc>)
 801beec:	68b8      	ldr	r0, [r7, #8]
 801beee:	f000 fe91 	bl	801cc14 <append_string>
 801bef2:	6178      	str	r0, [r7, #20]
 801bef4:	697b      	ldr	r3, [r7, #20]
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	da02      	bge.n	801bf00 <json_serialize_to_buffer_r+0x2a4>
 801befa:	f04f 33ff 	mov.w	r3, #4294967295
 801befe:	e1bb      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801bf00:	68bb      	ldr	r3, [r7, #8]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d003      	beq.n	801bf0e <json_serialize_to_buffer_r+0x2b2>
 801bf06:	697b      	ldr	r3, [r7, #20]
 801bf08:	68ba      	ldr	r2, [r7, #8]
 801bf0a:	4413      	add	r3, r2
 801bf0c:	60bb      	str	r3, [r7, #8]
 801bf0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf10:	697b      	ldr	r3, [r7, #20]
 801bf12:	4413      	add	r3, r2
 801bf14:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801bf16:	2300      	movs	r3, #0
 801bf18:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bf1a:	e0cc      	b.n	801c0b6 <json_serialize_to_buffer_r+0x45a>
                key = json_object_get_name(object, i);
 801bf1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801bf1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bf20:	f000 ff49 	bl	801cdb6 <json_object_get_name>
 801bf24:	6378      	str	r0, [r7, #52]	; 0x34
                if (key == NULL) {
 801bf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d102      	bne.n	801bf32 <json_serialize_to_buffer_r+0x2d6>
                    return -1;
 801bf2c:	f04f 33ff 	mov.w	r3, #4294967295
 801bf30:	e1a2      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
                }
                if (is_pretty) {
 801bf32:	683b      	ldr	r3, [r7, #0]
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d022      	beq.n	801bf7e <json_serialize_to_buffer_r+0x322>
                    APPEND_INDENT(level+1);
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	3301      	adds	r3, #1
 801bf3c:	4619      	mov	r1, r3
 801bf3e:	68b8      	ldr	r0, [r7, #8]
 801bf40:	f000 fe36 	bl	801cbb0 <append_indent>
 801bf44:	6178      	str	r0, [r7, #20]
 801bf46:	697b      	ldr	r3, [r7, #20]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	da0d      	bge.n	801bf68 <json_serialize_to_buffer_r+0x30c>
 801bf4c:	f04f 33ff 	mov.w	r3, #4294967295
 801bf50:	e192      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801bf52:	bf00      	nop
 801bf54:	08022510 	.word	0x08022510
 801bf58:	08022514 	.word	0x08022514
 801bf5c:	08022518 	.word	0x08022518
 801bf60:	0802251c 	.word	0x0802251c
 801bf64:	08022520 	.word	0x08022520
 801bf68:	68bb      	ldr	r3, [r7, #8]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d003      	beq.n	801bf76 <json_serialize_to_buffer_r+0x31a>
 801bf6e:	697b      	ldr	r3, [r7, #20]
 801bf70:	68ba      	ldr	r2, [r7, #8]
 801bf72:	4413      	add	r3, r2
 801bf74:	60bb      	str	r3, [r7, #8]
 801bf76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf78:	697b      	ldr	r3, [r7, #20]
 801bf7a:	4413      	add	r3, r2
 801bf7c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                written = json_serialize_string(key, buf);
 801bf7e:	68b9      	ldr	r1, [r7, #8]
 801bf80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bf82:	f000 f97f 	bl	801c284 <json_serialize_string>
 801bf86:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801bf88:	697b      	ldr	r3, [r7, #20]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	da02      	bge.n	801bf94 <json_serialize_to_buffer_r+0x338>
                    return -1;
 801bf8e:	f04f 33ff 	mov.w	r3, #4294967295
 801bf92:	e171      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801bf94:	68bb      	ldr	r3, [r7, #8]
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d003      	beq.n	801bfa2 <json_serialize_to_buffer_r+0x346>
                    buf += written;
 801bf9a:	697b      	ldr	r3, [r7, #20]
 801bf9c:	68ba      	ldr	r2, [r7, #8]
 801bf9e:	4413      	add	r3, r2
 801bfa0:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801bfa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bfa4:	697b      	ldr	r3, [r7, #20]
 801bfa6:	4413      	add	r3, r2
 801bfa8:	63bb      	str	r3, [r7, #56]	; 0x38
                APPEND_STRING(":");
 801bfaa:	4996      	ldr	r1, [pc, #600]	; (801c204 <json_serialize_to_buffer_r+0x5a8>)
 801bfac:	68b8      	ldr	r0, [r7, #8]
 801bfae:	f000 fe31 	bl	801cc14 <append_string>
 801bfb2:	6178      	str	r0, [r7, #20]
 801bfb4:	697b      	ldr	r3, [r7, #20]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	da02      	bge.n	801bfc0 <json_serialize_to_buffer_r+0x364>
 801bfba:	f04f 33ff 	mov.w	r3, #4294967295
 801bfbe:	e15b      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801bfc0:	68bb      	ldr	r3, [r7, #8]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d003      	beq.n	801bfce <json_serialize_to_buffer_r+0x372>
 801bfc6:	697b      	ldr	r3, [r7, #20]
 801bfc8:	68ba      	ldr	r2, [r7, #8]
 801bfca:	4413      	add	r3, r2
 801bfcc:	60bb      	str	r3, [r7, #8]
 801bfce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bfd0:	697b      	ldr	r3, [r7, #20]
 801bfd2:	4413      	add	r3, r2
 801bfd4:	63bb      	str	r3, [r7, #56]	; 0x38
                if (is_pretty) {
 801bfd6:	683b      	ldr	r3, [r7, #0]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d015      	beq.n	801c008 <json_serialize_to_buffer_r+0x3ac>
                    APPEND_STRING(" ");
 801bfdc:	498a      	ldr	r1, [pc, #552]	; (801c208 <json_serialize_to_buffer_r+0x5ac>)
 801bfde:	68b8      	ldr	r0, [r7, #8]
 801bfe0:	f000 fe18 	bl	801cc14 <append_string>
 801bfe4:	6178      	str	r0, [r7, #20]
 801bfe6:	697b      	ldr	r3, [r7, #20]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	da02      	bge.n	801bff2 <json_serialize_to_buffer_r+0x396>
 801bfec:	f04f 33ff 	mov.w	r3, #4294967295
 801bff0:	e142      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801bff2:	68bb      	ldr	r3, [r7, #8]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d003      	beq.n	801c000 <json_serialize_to_buffer_r+0x3a4>
 801bff8:	697b      	ldr	r3, [r7, #20]
 801bffa:	68ba      	ldr	r2, [r7, #8]
 801bffc:	4413      	add	r3, r2
 801bffe:	60bb      	str	r3, [r7, #8]
 801c000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c002:	697b      	ldr	r3, [r7, #20]
 801c004:	4413      	add	r3, r2
 801c006:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_object_get_value(object, key);
 801c008:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c00a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c00c:	f000 fe40 	bl	801cc90 <json_object_get_value>
 801c010:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	1c5a      	adds	r2, r3, #1
 801c016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c018:	9300      	str	r3, [sp, #0]
 801c01a:	683b      	ldr	r3, [r7, #0]
 801c01c:	68b9      	ldr	r1, [r7, #8]
 801c01e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c020:	f7ff fe1c 	bl	801bc5c <json_serialize_to_buffer_r>
 801c024:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801c026:	697b      	ldr	r3, [r7, #20]
 801c028:	2b00      	cmp	r3, #0
 801c02a:	da02      	bge.n	801c032 <json_serialize_to_buffer_r+0x3d6>
                    return -1;
 801c02c:	f04f 33ff 	mov.w	r3, #4294967295
 801c030:	e122      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801c032:	68bb      	ldr	r3, [r7, #8]
 801c034:	2b00      	cmp	r3, #0
 801c036:	d003      	beq.n	801c040 <json_serialize_to_buffer_r+0x3e4>
                    buf += written;
 801c038:	697b      	ldr	r3, [r7, #20]
 801c03a:	68ba      	ldr	r2, [r7, #8]
 801c03c:	4413      	add	r3, r2
 801c03e:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801c040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c042:	697b      	ldr	r3, [r7, #20]
 801c044:	4413      	add	r3, r2
 801c046:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801c048:	6a3b      	ldr	r3, [r7, #32]
 801c04a:	3b01      	subs	r3, #1
 801c04c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c04e:	429a      	cmp	r2, r3
 801c050:	d215      	bcs.n	801c07e <json_serialize_to_buffer_r+0x422>
                    APPEND_STRING(",");
 801c052:	496e      	ldr	r1, [pc, #440]	; (801c20c <json_serialize_to_buffer_r+0x5b0>)
 801c054:	68b8      	ldr	r0, [r7, #8]
 801c056:	f000 fddd 	bl	801cc14 <append_string>
 801c05a:	6178      	str	r0, [r7, #20]
 801c05c:	697b      	ldr	r3, [r7, #20]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	da02      	bge.n	801c068 <json_serialize_to_buffer_r+0x40c>
 801c062:	f04f 33ff 	mov.w	r3, #4294967295
 801c066:	e107      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801c068:	68bb      	ldr	r3, [r7, #8]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d003      	beq.n	801c076 <json_serialize_to_buffer_r+0x41a>
 801c06e:	697b      	ldr	r3, [r7, #20]
 801c070:	68ba      	ldr	r2, [r7, #8]
 801c072:	4413      	add	r3, r2
 801c074:	60bb      	str	r3, [r7, #8]
 801c076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c078:	697b      	ldr	r3, [r7, #20]
 801c07a:	4413      	add	r3, r2
 801c07c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801c07e:	683b      	ldr	r3, [r7, #0]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d015      	beq.n	801c0b0 <json_serialize_to_buffer_r+0x454>
                    APPEND_STRING("\n");
 801c084:	4962      	ldr	r1, [pc, #392]	; (801c210 <json_serialize_to_buffer_r+0x5b4>)
 801c086:	68b8      	ldr	r0, [r7, #8]
 801c088:	f000 fdc4 	bl	801cc14 <append_string>
 801c08c:	6178      	str	r0, [r7, #20]
 801c08e:	697b      	ldr	r3, [r7, #20]
 801c090:	2b00      	cmp	r3, #0
 801c092:	da02      	bge.n	801c09a <json_serialize_to_buffer_r+0x43e>
 801c094:	f04f 33ff 	mov.w	r3, #4294967295
 801c098:	e0ee      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801c09a:	68bb      	ldr	r3, [r7, #8]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d003      	beq.n	801c0a8 <json_serialize_to_buffer_r+0x44c>
 801c0a0:	697b      	ldr	r3, [r7, #20]
 801c0a2:	68ba      	ldr	r2, [r7, #8]
 801c0a4:	4413      	add	r3, r2
 801c0a6:	60bb      	str	r3, [r7, #8]
 801c0a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c0aa:	697b      	ldr	r3, [r7, #20]
 801c0ac:	4413      	add	r3, r2
 801c0ae:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801c0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0b2:	3301      	adds	r3, #1
 801c0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c0b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c0b8:	6a3b      	ldr	r3, [r7, #32]
 801c0ba:	429a      	cmp	r2, r3
 801c0bc:	f4ff af2e 	bcc.w	801bf1c <json_serialize_to_buffer_r+0x2c0>
                }
            }
            if (count > 0 && is_pretty) {
 801c0c0:	6a3b      	ldr	r3, [r7, #32]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d018      	beq.n	801c0f8 <json_serialize_to_buffer_r+0x49c>
 801c0c6:	683b      	ldr	r3, [r7, #0]
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d015      	beq.n	801c0f8 <json_serialize_to_buffer_r+0x49c>
                APPEND_INDENT(level);
 801c0cc:	6879      	ldr	r1, [r7, #4]
 801c0ce:	68b8      	ldr	r0, [r7, #8]
 801c0d0:	f000 fd6e 	bl	801cbb0 <append_indent>
 801c0d4:	6178      	str	r0, [r7, #20]
 801c0d6:	697b      	ldr	r3, [r7, #20]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	da02      	bge.n	801c0e2 <json_serialize_to_buffer_r+0x486>
 801c0dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c0e0:	e0ca      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801c0e2:	68bb      	ldr	r3, [r7, #8]
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d003      	beq.n	801c0f0 <json_serialize_to_buffer_r+0x494>
 801c0e8:	697b      	ldr	r3, [r7, #20]
 801c0ea:	68ba      	ldr	r2, [r7, #8]
 801c0ec:	4413      	add	r3, r2
 801c0ee:	60bb      	str	r3, [r7, #8]
 801c0f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c0f2:	697b      	ldr	r3, [r7, #20]
 801c0f4:	4413      	add	r3, r2
 801c0f6:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("}");
 801c0f8:	4946      	ldr	r1, [pc, #280]	; (801c214 <json_serialize_to_buffer_r+0x5b8>)
 801c0fa:	68b8      	ldr	r0, [r7, #8]
 801c0fc:	f000 fd8a 	bl	801cc14 <append_string>
 801c100:	6178      	str	r0, [r7, #20]
 801c102:	697b      	ldr	r3, [r7, #20]
 801c104:	2b00      	cmp	r3, #0
 801c106:	da02      	bge.n	801c10e <json_serialize_to_buffer_r+0x4b2>
 801c108:	f04f 33ff 	mov.w	r3, #4294967295
 801c10c:	e0b4      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801c10e:	68bb      	ldr	r3, [r7, #8]
 801c110:	2b00      	cmp	r3, #0
 801c112:	d003      	beq.n	801c11c <json_serialize_to_buffer_r+0x4c0>
 801c114:	697b      	ldr	r3, [r7, #20]
 801c116:	68ba      	ldr	r2, [r7, #8]
 801c118:	4413      	add	r3, r2
 801c11a:	60bb      	str	r3, [r7, #8]
 801c11c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c11e:	697b      	ldr	r3, [r7, #20]
 801c120:	4413      	add	r3, r2
 801c122:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c126:	e0a7      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
        case JSONString:
            string = json_value_get_string(value);
 801c128:	68f8      	ldr	r0, [r7, #12]
 801c12a:	f000 fefe 	bl	801cf2a <json_value_get_string>
 801c12e:	6338      	str	r0, [r7, #48]	; 0x30
            if (string == NULL) {
 801c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c132:	2b00      	cmp	r3, #0
 801c134:	d102      	bne.n	801c13c <json_serialize_to_buffer_r+0x4e0>
                return -1;
 801c136:	f04f 33ff 	mov.w	r3, #4294967295
 801c13a:	e09d      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
            }
            written = json_serialize_string(string, buf);
 801c13c:	68b9      	ldr	r1, [r7, #8]
 801c13e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c140:	f000 f8a0 	bl	801c284 <json_serialize_string>
 801c144:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801c146:	697b      	ldr	r3, [r7, #20]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	da02      	bge.n	801c152 <json_serialize_to_buffer_r+0x4f6>
                return -1;
 801c14c:	f04f 33ff 	mov.w	r3, #4294967295
 801c150:	e092      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
            }
            if (buf != NULL) {
 801c152:	68bb      	ldr	r3, [r7, #8]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d003      	beq.n	801c160 <json_serialize_to_buffer_r+0x504>
                buf += written;
 801c158:	697b      	ldr	r3, [r7, #20]
 801c15a:	68ba      	ldr	r2, [r7, #8]
 801c15c:	4413      	add	r3, r2
 801c15e:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801c160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c162:	697b      	ldr	r3, [r7, #20]
 801c164:	4413      	add	r3, r2
 801c166:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c16a:	e085      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 801c16c:	68f8      	ldr	r0, [r7, #12]
 801c16e:	f000 ff09 	bl	801cf84 <json_value_get_boolean>
 801c172:	4603      	mov	r3, r0
 801c174:	2b00      	cmp	r3, #0
 801c176:	d016      	beq.n	801c1a6 <json_serialize_to_buffer_r+0x54a>
                APPEND_STRING("true");
 801c178:	4927      	ldr	r1, [pc, #156]	; (801c218 <json_serialize_to_buffer_r+0x5bc>)
 801c17a:	68b8      	ldr	r0, [r7, #8]
 801c17c:	f000 fd4a 	bl	801cc14 <append_string>
 801c180:	6178      	str	r0, [r7, #20]
 801c182:	697b      	ldr	r3, [r7, #20]
 801c184:	2b00      	cmp	r3, #0
 801c186:	da02      	bge.n	801c18e <json_serialize_to_buffer_r+0x532>
 801c188:	f04f 33ff 	mov.w	r3, #4294967295
 801c18c:	e074      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801c18e:	68bb      	ldr	r3, [r7, #8]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d003      	beq.n	801c19c <json_serialize_to_buffer_r+0x540>
 801c194:	697b      	ldr	r3, [r7, #20]
 801c196:	68ba      	ldr	r2, [r7, #8]
 801c198:	4413      	add	r3, r2
 801c19a:	60bb      	str	r3, [r7, #8]
 801c19c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c19e:	697b      	ldr	r3, [r7, #20]
 801c1a0:	4413      	add	r3, r2
 801c1a2:	63bb      	str	r3, [r7, #56]	; 0x38
 801c1a4:	e015      	b.n	801c1d2 <json_serialize_to_buffer_r+0x576>
            } else {
                APPEND_STRING("false");
 801c1a6:	491d      	ldr	r1, [pc, #116]	; (801c21c <json_serialize_to_buffer_r+0x5c0>)
 801c1a8:	68b8      	ldr	r0, [r7, #8]
 801c1aa:	f000 fd33 	bl	801cc14 <append_string>
 801c1ae:	6178      	str	r0, [r7, #20]
 801c1b0:	697b      	ldr	r3, [r7, #20]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	da02      	bge.n	801c1bc <json_serialize_to_buffer_r+0x560>
 801c1b6:	f04f 33ff 	mov.w	r3, #4294967295
 801c1ba:	e05d      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801c1bc:	68bb      	ldr	r3, [r7, #8]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d003      	beq.n	801c1ca <json_serialize_to_buffer_r+0x56e>
 801c1c2:	697b      	ldr	r3, [r7, #20]
 801c1c4:	68ba      	ldr	r2, [r7, #8]
 801c1c6:	4413      	add	r3, r2
 801c1c8:	60bb      	str	r3, [r7, #8]
 801c1ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1cc:	697b      	ldr	r3, [r7, #20]
 801c1ce:	4413      	add	r3, r2
 801c1d0:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            return written_total;
 801c1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1d4:	e050      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
        case JSONNumber:
            num = json_value_get_number(value);
 801c1d6:	68f8      	ldr	r0, [r7, #12]
 801c1d8:	f000 feb9 	bl	801cf4e <json_value_get_number>
 801c1dc:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 801c1e0:	68bb      	ldr	r3, [r7, #8]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d001      	beq.n	801c1ea <json_serialize_to_buffer_r+0x58e>
                num_buf = buf;
 801c1e6:	68bb      	ldr	r3, [r7, #8]
 801c1e8:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 801c1ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c1ee:	490c      	ldr	r1, [pc, #48]	; (801c220 <json_serialize_to_buffer_r+0x5c4>)
 801c1f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801c1f2:	f002 fb8b 	bl	801e90c <siprintf>
 801c1f6:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801c1f8:	697b      	ldr	r3, [r7, #20]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	da12      	bge.n	801c224 <json_serialize_to_buffer_r+0x5c8>
                return -1;
 801c1fe:	f04f 33ff 	mov.w	r3, #4294967295
 801c202:	e039      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801c204:	08022524 	.word	0x08022524
 801c208:	08022528 	.word	0x08022528
 801c20c:	08022518 	.word	0x08022518
 801c210:	08022514 	.word	0x08022514
 801c214:	0802252c 	.word	0x0802252c
 801c218:	080224f8 	.word	0x080224f8
 801c21c:	08022500 	.word	0x08022500
 801c220:	08022530 	.word	0x08022530
            }
            if (buf != NULL) {
 801c224:	68bb      	ldr	r3, [r7, #8]
 801c226:	2b00      	cmp	r3, #0
 801c228:	d003      	beq.n	801c232 <json_serialize_to_buffer_r+0x5d6>
                buf += written;
 801c22a:	697b      	ldr	r3, [r7, #20]
 801c22c:	68ba      	ldr	r2, [r7, #8]
 801c22e:	4413      	add	r3, r2
 801c230:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801c232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c234:	697b      	ldr	r3, [r7, #20]
 801c236:	4413      	add	r3, r2
 801c238:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c23c:	e01c      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
        case JSONNull:
            APPEND_STRING("null");
 801c23e:	4910      	ldr	r1, [pc, #64]	; (801c280 <json_serialize_to_buffer_r+0x624>)
 801c240:	68b8      	ldr	r0, [r7, #8]
 801c242:	f000 fce7 	bl	801cc14 <append_string>
 801c246:	6178      	str	r0, [r7, #20]
 801c248:	697b      	ldr	r3, [r7, #20]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	da02      	bge.n	801c254 <json_serialize_to_buffer_r+0x5f8>
 801c24e:	f04f 33ff 	mov.w	r3, #4294967295
 801c252:	e011      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
 801c254:	68bb      	ldr	r3, [r7, #8]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d003      	beq.n	801c262 <json_serialize_to_buffer_r+0x606>
 801c25a:	697b      	ldr	r3, [r7, #20]
 801c25c:	68ba      	ldr	r2, [r7, #8]
 801c25e:	4413      	add	r3, r2
 801c260:	60bb      	str	r3, [r7, #8]
 801c262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c264:	697b      	ldr	r3, [r7, #20]
 801c266:	4413      	add	r3, r2
 801c268:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c26c:	e004      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
        case JSONError:
            return -1;
 801c26e:	f04f 33ff 	mov.w	r3, #4294967295
 801c272:	e001      	b.n	801c278 <json_serialize_to_buffer_r+0x61c>
        default:
            return -1;
 801c274:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801c278:	4618      	mov	r0, r3
 801c27a:	3740      	adds	r7, #64	; 0x40
 801c27c:	46bd      	mov	sp, r7
 801c27e:	bd80      	pop	{r7, pc}
 801c280:	08022508 	.word	0x08022508

0801c284 <json_serialize_string>:

static int json_serialize_string(const char *string, char *buf) {
 801c284:	b580      	push	{r7, lr}
 801c286:	b088      	sub	sp, #32
 801c288:	af00      	add	r7, sp, #0
 801c28a:	6078      	str	r0, [r7, #4]
 801c28c:	6039      	str	r1, [r7, #0]
    size_t i = 0, len = strlen(string);
 801c28e:	2300      	movs	r3, #0
 801c290:	61fb      	str	r3, [r7, #28]
 801c292:	6878      	ldr	r0, [r7, #4]
 801c294:	f7e3 ffbe 	bl	8000214 <strlen>
 801c298:	6178      	str	r0, [r7, #20]
    char c = '\0';
 801c29a:	2300      	movs	r3, #0
 801c29c:	74fb      	strb	r3, [r7, #19]
    int written = -1, written_total = 0;
 801c29e:	f04f 33ff 	mov.w	r3, #4294967295
 801c2a2:	60fb      	str	r3, [r7, #12]
 801c2a4:	2300      	movs	r3, #0
 801c2a6:	61bb      	str	r3, [r7, #24]
    APPEND_STRING("\"");
 801c2a8:	49bb      	ldr	r1, [pc, #748]	; (801c598 <json_serialize_string+0x314>)
 801c2aa:	6838      	ldr	r0, [r7, #0]
 801c2ac:	f000 fcb2 	bl	801cc14 <append_string>
 801c2b0:	60f8      	str	r0, [r7, #12]
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	da03      	bge.n	801c2c0 <json_serialize_string+0x3c>
 801c2b8:	f04f 33ff 	mov.w	r3, #4294967295
 801c2bc:	f000 bc6e 	b.w	801cb9c <json_serialize_string+0x918>
 801c2c0:	683b      	ldr	r3, [r7, #0]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d003      	beq.n	801c2ce <json_serialize_string+0x4a>
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	683a      	ldr	r2, [r7, #0]
 801c2ca:	4413      	add	r3, r2
 801c2cc:	603b      	str	r3, [r7, #0]
 801c2ce:	69ba      	ldr	r2, [r7, #24]
 801c2d0:	68fb      	ldr	r3, [r7, #12]
 801c2d2:	4413      	add	r3, r2
 801c2d4:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	61fb      	str	r3, [r7, #28]
 801c2da:	f000 bc43 	b.w	801cb64 <json_serialize_string+0x8e0>
        c = string[i];
 801c2de:	687a      	ldr	r2, [r7, #4]
 801c2e0:	69fb      	ldr	r3, [r7, #28]
 801c2e2:	4413      	add	r3, r2
 801c2e4:	781b      	ldrb	r3, [r3, #0]
 801c2e6:	74fb      	strb	r3, [r7, #19]
        switch (c) {
 801c2e8:	7cfb      	ldrb	r3, [r7, #19]
 801c2ea:	2b5c      	cmp	r3, #92	; 0x5c
 801c2ec:	f200 842a 	bhi.w	801cb44 <json_serialize_string+0x8c0>
 801c2f0:	a201      	add	r2, pc, #4	; (adr r2, 801c2f8 <json_serialize_string+0x74>)
 801c2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c2f6:	bf00      	nop
 801c2f8:	0801c5ff 	.word	0x0801c5ff
 801c2fc:	0801c62d 	.word	0x0801c62d
 801c300:	0801c65b 	.word	0x0801c65b
 801c304:	0801c689 	.word	0x0801c689
 801c308:	0801c6b7 	.word	0x0801c6b7
 801c30c:	0801c6e5 	.word	0x0801c6e5
 801c310:	0801c713 	.word	0x0801c713
 801c314:	0801c741 	.word	0x0801c741
 801c318:	0801c4f7 	.word	0x0801c4f7
 801c31c:	0801c5d1 	.word	0x0801c5d1
 801c320:	0801c553 	.word	0x0801c553
 801c324:	0801c76f 	.word	0x0801c76f
 801c328:	0801c525 	.word	0x0801c525
 801c32c:	0801c581 	.word	0x0801c581
 801c330:	0801c79d 	.word	0x0801c79d
 801c334:	0801c7cb 	.word	0x0801c7cb
 801c338:	0801c7f9 	.word	0x0801c7f9
 801c33c:	0801c85d 	.word	0x0801c85d
 801c340:	0801c88b 	.word	0x0801c88b
 801c344:	0801c8b9 	.word	0x0801c8b9
 801c348:	0801c8e7 	.word	0x0801c8e7
 801c34c:	0801c915 	.word	0x0801c915
 801c350:	0801c943 	.word	0x0801c943
 801c354:	0801c971 	.word	0x0801c971
 801c358:	0801c99f 	.word	0x0801c99f
 801c35c:	0801c9cd 	.word	0x0801c9cd
 801c360:	0801c9fb 	.word	0x0801c9fb
 801c364:	0801ca29 	.word	0x0801ca29
 801c368:	0801ca57 	.word	0x0801ca57
 801c36c:	0801ca85 	.word	0x0801ca85
 801c370:	0801cae9 	.word	0x0801cae9
 801c374:	0801cb17 	.word	0x0801cb17
 801c378:	0801cb45 	.word	0x0801cb45
 801c37c:	0801cb45 	.word	0x0801cb45
 801c380:	0801c46d 	.word	0x0801c46d
 801c384:	0801cb45 	.word	0x0801cb45
 801c388:	0801cb45 	.word	0x0801cb45
 801c38c:	0801cb45 	.word	0x0801cb45
 801c390:	0801cb45 	.word	0x0801cb45
 801c394:	0801cb45 	.word	0x0801cb45
 801c398:	0801cb45 	.word	0x0801cb45
 801c39c:	0801cb45 	.word	0x0801cb45
 801c3a0:	0801cb45 	.word	0x0801cb45
 801c3a4:	0801cb45 	.word	0x0801cb45
 801c3a8:	0801cb45 	.word	0x0801cb45
 801c3ac:	0801cb45 	.word	0x0801cb45
 801c3b0:	0801cb45 	.word	0x0801cb45
 801c3b4:	0801c4c9 	.word	0x0801c4c9
 801c3b8:	0801cb45 	.word	0x0801cb45
 801c3bc:	0801cb45 	.word	0x0801cb45
 801c3c0:	0801cb45 	.word	0x0801cb45
 801c3c4:	0801cb45 	.word	0x0801cb45
 801c3c8:	0801cb45 	.word	0x0801cb45
 801c3cc:	0801cb45 	.word	0x0801cb45
 801c3d0:	0801cb45 	.word	0x0801cb45
 801c3d4:	0801cb45 	.word	0x0801cb45
 801c3d8:	0801cb45 	.word	0x0801cb45
 801c3dc:	0801cb45 	.word	0x0801cb45
 801c3e0:	0801cb45 	.word	0x0801cb45
 801c3e4:	0801cb45 	.word	0x0801cb45
 801c3e8:	0801cb45 	.word	0x0801cb45
 801c3ec:	0801cb45 	.word	0x0801cb45
 801c3f0:	0801cb45 	.word	0x0801cb45
 801c3f4:	0801cb45 	.word	0x0801cb45
 801c3f8:	0801cb45 	.word	0x0801cb45
 801c3fc:	0801cb45 	.word	0x0801cb45
 801c400:	0801cb45 	.word	0x0801cb45
 801c404:	0801cb45 	.word	0x0801cb45
 801c408:	0801cb45 	.word	0x0801cb45
 801c40c:	0801cb45 	.word	0x0801cb45
 801c410:	0801cb45 	.word	0x0801cb45
 801c414:	0801cb45 	.word	0x0801cb45
 801c418:	0801cb45 	.word	0x0801cb45
 801c41c:	0801cb45 	.word	0x0801cb45
 801c420:	0801cb45 	.word	0x0801cb45
 801c424:	0801cb45 	.word	0x0801cb45
 801c428:	0801cb45 	.word	0x0801cb45
 801c42c:	0801cb45 	.word	0x0801cb45
 801c430:	0801cb45 	.word	0x0801cb45
 801c434:	0801cb45 	.word	0x0801cb45
 801c438:	0801cb45 	.word	0x0801cb45
 801c43c:	0801cb45 	.word	0x0801cb45
 801c440:	0801cb45 	.word	0x0801cb45
 801c444:	0801cb45 	.word	0x0801cb45
 801c448:	0801cb45 	.word	0x0801cb45
 801c44c:	0801cb45 	.word	0x0801cb45
 801c450:	0801cb45 	.word	0x0801cb45
 801c454:	0801cb45 	.word	0x0801cb45
 801c458:	0801cb45 	.word	0x0801cb45
 801c45c:	0801cb45 	.word	0x0801cb45
 801c460:	0801cb45 	.word	0x0801cb45
 801c464:	0801cb45 	.word	0x0801cb45
 801c468:	0801c49b 	.word	0x0801c49b
            case '\"': APPEND_STRING("\\\""); break;
 801c46c:	494b      	ldr	r1, [pc, #300]	; (801c59c <json_serialize_string+0x318>)
 801c46e:	6838      	ldr	r0, [r7, #0]
 801c470:	f000 fbd0 	bl	801cc14 <append_string>
 801c474:	60f8      	str	r0, [r7, #12]
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	da02      	bge.n	801c482 <json_serialize_string+0x1fe>
 801c47c:	f04f 33ff 	mov.w	r3, #4294967295
 801c480:	e38c      	b.n	801cb9c <json_serialize_string+0x918>
 801c482:	683b      	ldr	r3, [r7, #0]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d003      	beq.n	801c490 <json_serialize_string+0x20c>
 801c488:	68fb      	ldr	r3, [r7, #12]
 801c48a:	683a      	ldr	r2, [r7, #0]
 801c48c:	4413      	add	r3, r2
 801c48e:	603b      	str	r3, [r7, #0]
 801c490:	69ba      	ldr	r2, [r7, #24]
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	4413      	add	r3, r2
 801c496:	61bb      	str	r3, [r7, #24]
 801c498:	e361      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\\': APPEND_STRING("\\\\"); break;
 801c49a:	4941      	ldr	r1, [pc, #260]	; (801c5a0 <json_serialize_string+0x31c>)
 801c49c:	6838      	ldr	r0, [r7, #0]
 801c49e:	f000 fbb9 	bl	801cc14 <append_string>
 801c4a2:	60f8      	str	r0, [r7, #12]
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	da02      	bge.n	801c4b0 <json_serialize_string+0x22c>
 801c4aa:	f04f 33ff 	mov.w	r3, #4294967295
 801c4ae:	e375      	b.n	801cb9c <json_serialize_string+0x918>
 801c4b0:	683b      	ldr	r3, [r7, #0]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d003      	beq.n	801c4be <json_serialize_string+0x23a>
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	683a      	ldr	r2, [r7, #0]
 801c4ba:	4413      	add	r3, r2
 801c4bc:	603b      	str	r3, [r7, #0]
 801c4be:	69ba      	ldr	r2, [r7, #24]
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	4413      	add	r3, r2
 801c4c4:	61bb      	str	r3, [r7, #24]
 801c4c6:	e34a      	b.n	801cb5e <json_serialize_string+0x8da>
            case '/':  APPEND_STRING("\\/"); break; /* to make json embeddable in xml\/html */
 801c4c8:	4936      	ldr	r1, [pc, #216]	; (801c5a4 <json_serialize_string+0x320>)
 801c4ca:	6838      	ldr	r0, [r7, #0]
 801c4cc:	f000 fba2 	bl	801cc14 <append_string>
 801c4d0:	60f8      	str	r0, [r7, #12]
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	da02      	bge.n	801c4de <json_serialize_string+0x25a>
 801c4d8:	f04f 33ff 	mov.w	r3, #4294967295
 801c4dc:	e35e      	b.n	801cb9c <json_serialize_string+0x918>
 801c4de:	683b      	ldr	r3, [r7, #0]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d003      	beq.n	801c4ec <json_serialize_string+0x268>
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	683a      	ldr	r2, [r7, #0]
 801c4e8:	4413      	add	r3, r2
 801c4ea:	603b      	str	r3, [r7, #0]
 801c4ec:	69ba      	ldr	r2, [r7, #24]
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	4413      	add	r3, r2
 801c4f2:	61bb      	str	r3, [r7, #24]
 801c4f4:	e333      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\b': APPEND_STRING("\\b"); break;
 801c4f6:	492c      	ldr	r1, [pc, #176]	; (801c5a8 <json_serialize_string+0x324>)
 801c4f8:	6838      	ldr	r0, [r7, #0]
 801c4fa:	f000 fb8b 	bl	801cc14 <append_string>
 801c4fe:	60f8      	str	r0, [r7, #12]
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	2b00      	cmp	r3, #0
 801c504:	da02      	bge.n	801c50c <json_serialize_string+0x288>
 801c506:	f04f 33ff 	mov.w	r3, #4294967295
 801c50a:	e347      	b.n	801cb9c <json_serialize_string+0x918>
 801c50c:	683b      	ldr	r3, [r7, #0]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d003      	beq.n	801c51a <json_serialize_string+0x296>
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	683a      	ldr	r2, [r7, #0]
 801c516:	4413      	add	r3, r2
 801c518:	603b      	str	r3, [r7, #0]
 801c51a:	69ba      	ldr	r2, [r7, #24]
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	4413      	add	r3, r2
 801c520:	61bb      	str	r3, [r7, #24]
 801c522:	e31c      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\f': APPEND_STRING("\\f"); break;
 801c524:	4921      	ldr	r1, [pc, #132]	; (801c5ac <json_serialize_string+0x328>)
 801c526:	6838      	ldr	r0, [r7, #0]
 801c528:	f000 fb74 	bl	801cc14 <append_string>
 801c52c:	60f8      	str	r0, [r7, #12]
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	2b00      	cmp	r3, #0
 801c532:	da02      	bge.n	801c53a <json_serialize_string+0x2b6>
 801c534:	f04f 33ff 	mov.w	r3, #4294967295
 801c538:	e330      	b.n	801cb9c <json_serialize_string+0x918>
 801c53a:	683b      	ldr	r3, [r7, #0]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d003      	beq.n	801c548 <json_serialize_string+0x2c4>
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	683a      	ldr	r2, [r7, #0]
 801c544:	4413      	add	r3, r2
 801c546:	603b      	str	r3, [r7, #0]
 801c548:	69ba      	ldr	r2, [r7, #24]
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	4413      	add	r3, r2
 801c54e:	61bb      	str	r3, [r7, #24]
 801c550:	e305      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\n': APPEND_STRING("\\n"); break;
 801c552:	4917      	ldr	r1, [pc, #92]	; (801c5b0 <json_serialize_string+0x32c>)
 801c554:	6838      	ldr	r0, [r7, #0]
 801c556:	f000 fb5d 	bl	801cc14 <append_string>
 801c55a:	60f8      	str	r0, [r7, #12]
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	da02      	bge.n	801c568 <json_serialize_string+0x2e4>
 801c562:	f04f 33ff 	mov.w	r3, #4294967295
 801c566:	e319      	b.n	801cb9c <json_serialize_string+0x918>
 801c568:	683b      	ldr	r3, [r7, #0]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d003      	beq.n	801c576 <json_serialize_string+0x2f2>
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	683a      	ldr	r2, [r7, #0]
 801c572:	4413      	add	r3, r2
 801c574:	603b      	str	r3, [r7, #0]
 801c576:	69ba      	ldr	r2, [r7, #24]
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	4413      	add	r3, r2
 801c57c:	61bb      	str	r3, [r7, #24]
 801c57e:	e2ee      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\r': APPEND_STRING("\\r"); break;
 801c580:	490c      	ldr	r1, [pc, #48]	; (801c5b4 <json_serialize_string+0x330>)
 801c582:	6838      	ldr	r0, [r7, #0]
 801c584:	f000 fb46 	bl	801cc14 <append_string>
 801c588:	60f8      	str	r0, [r7, #12]
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	da13      	bge.n	801c5b8 <json_serialize_string+0x334>
 801c590:	f04f 33ff 	mov.w	r3, #4294967295
 801c594:	e302      	b.n	801cb9c <json_serialize_string+0x918>
 801c596:	bf00      	nop
 801c598:	08022538 	.word	0x08022538
 801c59c:	0802253c 	.word	0x0802253c
 801c5a0:	08022540 	.word	0x08022540
 801c5a4:	08022544 	.word	0x08022544
 801c5a8:	08022548 	.word	0x08022548
 801c5ac:	0802254c 	.word	0x0802254c
 801c5b0:	08022550 	.word	0x08022550
 801c5b4:	08022554 	.word	0x08022554
 801c5b8:	683b      	ldr	r3, [r7, #0]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d003      	beq.n	801c5c6 <json_serialize_string+0x342>
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	683a      	ldr	r2, [r7, #0]
 801c5c2:	4413      	add	r3, r2
 801c5c4:	603b      	str	r3, [r7, #0]
 801c5c6:	69ba      	ldr	r2, [r7, #24]
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	4413      	add	r3, r2
 801c5cc:	61bb      	str	r3, [r7, #24]
 801c5ce:	e2c6      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\t': APPEND_STRING("\\t"); break;
 801c5d0:	4995      	ldr	r1, [pc, #596]	; (801c828 <json_serialize_string+0x5a4>)
 801c5d2:	6838      	ldr	r0, [r7, #0]
 801c5d4:	f000 fb1e 	bl	801cc14 <append_string>
 801c5d8:	60f8      	str	r0, [r7, #12]
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	da02      	bge.n	801c5e6 <json_serialize_string+0x362>
 801c5e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c5e4:	e2da      	b.n	801cb9c <json_serialize_string+0x918>
 801c5e6:	683b      	ldr	r3, [r7, #0]
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d003      	beq.n	801c5f4 <json_serialize_string+0x370>
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	683a      	ldr	r2, [r7, #0]
 801c5f0:	4413      	add	r3, r2
 801c5f2:	603b      	str	r3, [r7, #0]
 801c5f4:	69ba      	ldr	r2, [r7, #24]
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	4413      	add	r3, r2
 801c5fa:	61bb      	str	r3, [r7, #24]
 801c5fc:	e2af      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x00': APPEND_STRING("\\u0000"); break;
 801c5fe:	498b      	ldr	r1, [pc, #556]	; (801c82c <json_serialize_string+0x5a8>)
 801c600:	6838      	ldr	r0, [r7, #0]
 801c602:	f000 fb07 	bl	801cc14 <append_string>
 801c606:	60f8      	str	r0, [r7, #12]
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	da02      	bge.n	801c614 <json_serialize_string+0x390>
 801c60e:	f04f 33ff 	mov.w	r3, #4294967295
 801c612:	e2c3      	b.n	801cb9c <json_serialize_string+0x918>
 801c614:	683b      	ldr	r3, [r7, #0]
 801c616:	2b00      	cmp	r3, #0
 801c618:	d003      	beq.n	801c622 <json_serialize_string+0x39e>
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	683a      	ldr	r2, [r7, #0]
 801c61e:	4413      	add	r3, r2
 801c620:	603b      	str	r3, [r7, #0]
 801c622:	69ba      	ldr	r2, [r7, #24]
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	4413      	add	r3, r2
 801c628:	61bb      	str	r3, [r7, #24]
 801c62a:	e298      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x01': APPEND_STRING("\\u0001"); break;
 801c62c:	4980      	ldr	r1, [pc, #512]	; (801c830 <json_serialize_string+0x5ac>)
 801c62e:	6838      	ldr	r0, [r7, #0]
 801c630:	f000 faf0 	bl	801cc14 <append_string>
 801c634:	60f8      	str	r0, [r7, #12]
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	da02      	bge.n	801c642 <json_serialize_string+0x3be>
 801c63c:	f04f 33ff 	mov.w	r3, #4294967295
 801c640:	e2ac      	b.n	801cb9c <json_serialize_string+0x918>
 801c642:	683b      	ldr	r3, [r7, #0]
 801c644:	2b00      	cmp	r3, #0
 801c646:	d003      	beq.n	801c650 <json_serialize_string+0x3cc>
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	683a      	ldr	r2, [r7, #0]
 801c64c:	4413      	add	r3, r2
 801c64e:	603b      	str	r3, [r7, #0]
 801c650:	69ba      	ldr	r2, [r7, #24]
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	4413      	add	r3, r2
 801c656:	61bb      	str	r3, [r7, #24]
 801c658:	e281      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x02': APPEND_STRING("\\u0002"); break;
 801c65a:	4976      	ldr	r1, [pc, #472]	; (801c834 <json_serialize_string+0x5b0>)
 801c65c:	6838      	ldr	r0, [r7, #0]
 801c65e:	f000 fad9 	bl	801cc14 <append_string>
 801c662:	60f8      	str	r0, [r7, #12]
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	2b00      	cmp	r3, #0
 801c668:	da02      	bge.n	801c670 <json_serialize_string+0x3ec>
 801c66a:	f04f 33ff 	mov.w	r3, #4294967295
 801c66e:	e295      	b.n	801cb9c <json_serialize_string+0x918>
 801c670:	683b      	ldr	r3, [r7, #0]
 801c672:	2b00      	cmp	r3, #0
 801c674:	d003      	beq.n	801c67e <json_serialize_string+0x3fa>
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	683a      	ldr	r2, [r7, #0]
 801c67a:	4413      	add	r3, r2
 801c67c:	603b      	str	r3, [r7, #0]
 801c67e:	69ba      	ldr	r2, [r7, #24]
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	4413      	add	r3, r2
 801c684:	61bb      	str	r3, [r7, #24]
 801c686:	e26a      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x03': APPEND_STRING("\\u0003"); break;
 801c688:	496b      	ldr	r1, [pc, #428]	; (801c838 <json_serialize_string+0x5b4>)
 801c68a:	6838      	ldr	r0, [r7, #0]
 801c68c:	f000 fac2 	bl	801cc14 <append_string>
 801c690:	60f8      	str	r0, [r7, #12]
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	2b00      	cmp	r3, #0
 801c696:	da02      	bge.n	801c69e <json_serialize_string+0x41a>
 801c698:	f04f 33ff 	mov.w	r3, #4294967295
 801c69c:	e27e      	b.n	801cb9c <json_serialize_string+0x918>
 801c69e:	683b      	ldr	r3, [r7, #0]
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d003      	beq.n	801c6ac <json_serialize_string+0x428>
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	683a      	ldr	r2, [r7, #0]
 801c6a8:	4413      	add	r3, r2
 801c6aa:	603b      	str	r3, [r7, #0]
 801c6ac:	69ba      	ldr	r2, [r7, #24]
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	4413      	add	r3, r2
 801c6b2:	61bb      	str	r3, [r7, #24]
 801c6b4:	e253      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x04': APPEND_STRING("\\u0004"); break;
 801c6b6:	4961      	ldr	r1, [pc, #388]	; (801c83c <json_serialize_string+0x5b8>)
 801c6b8:	6838      	ldr	r0, [r7, #0]
 801c6ba:	f000 faab 	bl	801cc14 <append_string>
 801c6be:	60f8      	str	r0, [r7, #12]
 801c6c0:	68fb      	ldr	r3, [r7, #12]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	da02      	bge.n	801c6cc <json_serialize_string+0x448>
 801c6c6:	f04f 33ff 	mov.w	r3, #4294967295
 801c6ca:	e267      	b.n	801cb9c <json_serialize_string+0x918>
 801c6cc:	683b      	ldr	r3, [r7, #0]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d003      	beq.n	801c6da <json_serialize_string+0x456>
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	683a      	ldr	r2, [r7, #0]
 801c6d6:	4413      	add	r3, r2
 801c6d8:	603b      	str	r3, [r7, #0]
 801c6da:	69ba      	ldr	r2, [r7, #24]
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	4413      	add	r3, r2
 801c6e0:	61bb      	str	r3, [r7, #24]
 801c6e2:	e23c      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x05': APPEND_STRING("\\u0005"); break;
 801c6e4:	4956      	ldr	r1, [pc, #344]	; (801c840 <json_serialize_string+0x5bc>)
 801c6e6:	6838      	ldr	r0, [r7, #0]
 801c6e8:	f000 fa94 	bl	801cc14 <append_string>
 801c6ec:	60f8      	str	r0, [r7, #12]
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	da02      	bge.n	801c6fa <json_serialize_string+0x476>
 801c6f4:	f04f 33ff 	mov.w	r3, #4294967295
 801c6f8:	e250      	b.n	801cb9c <json_serialize_string+0x918>
 801c6fa:	683b      	ldr	r3, [r7, #0]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d003      	beq.n	801c708 <json_serialize_string+0x484>
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	683a      	ldr	r2, [r7, #0]
 801c704:	4413      	add	r3, r2
 801c706:	603b      	str	r3, [r7, #0]
 801c708:	69ba      	ldr	r2, [r7, #24]
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	4413      	add	r3, r2
 801c70e:	61bb      	str	r3, [r7, #24]
 801c710:	e225      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x06': APPEND_STRING("\\u0006"); break;
 801c712:	494c      	ldr	r1, [pc, #304]	; (801c844 <json_serialize_string+0x5c0>)
 801c714:	6838      	ldr	r0, [r7, #0]
 801c716:	f000 fa7d 	bl	801cc14 <append_string>
 801c71a:	60f8      	str	r0, [r7, #12]
 801c71c:	68fb      	ldr	r3, [r7, #12]
 801c71e:	2b00      	cmp	r3, #0
 801c720:	da02      	bge.n	801c728 <json_serialize_string+0x4a4>
 801c722:	f04f 33ff 	mov.w	r3, #4294967295
 801c726:	e239      	b.n	801cb9c <json_serialize_string+0x918>
 801c728:	683b      	ldr	r3, [r7, #0]
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d003      	beq.n	801c736 <json_serialize_string+0x4b2>
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	683a      	ldr	r2, [r7, #0]
 801c732:	4413      	add	r3, r2
 801c734:	603b      	str	r3, [r7, #0]
 801c736:	69ba      	ldr	r2, [r7, #24]
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	4413      	add	r3, r2
 801c73c:	61bb      	str	r3, [r7, #24]
 801c73e:	e20e      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x07': APPEND_STRING("\\u0007"); break;
 801c740:	4941      	ldr	r1, [pc, #260]	; (801c848 <json_serialize_string+0x5c4>)
 801c742:	6838      	ldr	r0, [r7, #0]
 801c744:	f000 fa66 	bl	801cc14 <append_string>
 801c748:	60f8      	str	r0, [r7, #12]
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	da02      	bge.n	801c756 <json_serialize_string+0x4d2>
 801c750:	f04f 33ff 	mov.w	r3, #4294967295
 801c754:	e222      	b.n	801cb9c <json_serialize_string+0x918>
 801c756:	683b      	ldr	r3, [r7, #0]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d003      	beq.n	801c764 <json_serialize_string+0x4e0>
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	683a      	ldr	r2, [r7, #0]
 801c760:	4413      	add	r3, r2
 801c762:	603b      	str	r3, [r7, #0]
 801c764:	69ba      	ldr	r2, [r7, #24]
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	4413      	add	r3, r2
 801c76a:	61bb      	str	r3, [r7, #24]
 801c76c:	e1f7      	b.n	801cb5e <json_serialize_string+0x8da>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 801c76e:	4937      	ldr	r1, [pc, #220]	; (801c84c <json_serialize_string+0x5c8>)
 801c770:	6838      	ldr	r0, [r7, #0]
 801c772:	f000 fa4f 	bl	801cc14 <append_string>
 801c776:	60f8      	str	r0, [r7, #12]
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	da02      	bge.n	801c784 <json_serialize_string+0x500>
 801c77e:	f04f 33ff 	mov.w	r3, #4294967295
 801c782:	e20b      	b.n	801cb9c <json_serialize_string+0x918>
 801c784:	683b      	ldr	r3, [r7, #0]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d003      	beq.n	801c792 <json_serialize_string+0x50e>
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	683a      	ldr	r2, [r7, #0]
 801c78e:	4413      	add	r3, r2
 801c790:	603b      	str	r3, [r7, #0]
 801c792:	69ba      	ldr	r2, [r7, #24]
 801c794:	68fb      	ldr	r3, [r7, #12]
 801c796:	4413      	add	r3, r2
 801c798:	61bb      	str	r3, [r7, #24]
 801c79a:	e1e0      	b.n	801cb5e <json_serialize_string+0x8da>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 801c79c:	492c      	ldr	r1, [pc, #176]	; (801c850 <json_serialize_string+0x5cc>)
 801c79e:	6838      	ldr	r0, [r7, #0]
 801c7a0:	f000 fa38 	bl	801cc14 <append_string>
 801c7a4:	60f8      	str	r0, [r7, #12]
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	da02      	bge.n	801c7b2 <json_serialize_string+0x52e>
 801c7ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c7b0:	e1f4      	b.n	801cb9c <json_serialize_string+0x918>
 801c7b2:	683b      	ldr	r3, [r7, #0]
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d003      	beq.n	801c7c0 <json_serialize_string+0x53c>
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	683a      	ldr	r2, [r7, #0]
 801c7bc:	4413      	add	r3, r2
 801c7be:	603b      	str	r3, [r7, #0]
 801c7c0:	69ba      	ldr	r2, [r7, #24]
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	4413      	add	r3, r2
 801c7c6:	61bb      	str	r3, [r7, #24]
 801c7c8:	e1c9      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 801c7ca:	4922      	ldr	r1, [pc, #136]	; (801c854 <json_serialize_string+0x5d0>)
 801c7cc:	6838      	ldr	r0, [r7, #0]
 801c7ce:	f000 fa21 	bl	801cc14 <append_string>
 801c7d2:	60f8      	str	r0, [r7, #12]
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	da02      	bge.n	801c7e0 <json_serialize_string+0x55c>
 801c7da:	f04f 33ff 	mov.w	r3, #4294967295
 801c7de:	e1dd      	b.n	801cb9c <json_serialize_string+0x918>
 801c7e0:	683b      	ldr	r3, [r7, #0]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d003      	beq.n	801c7ee <json_serialize_string+0x56a>
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	683a      	ldr	r2, [r7, #0]
 801c7ea:	4413      	add	r3, r2
 801c7ec:	603b      	str	r3, [r7, #0]
 801c7ee:	69ba      	ldr	r2, [r7, #24]
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	4413      	add	r3, r2
 801c7f4:	61bb      	str	r3, [r7, #24]
 801c7f6:	e1b2      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x10': APPEND_STRING("\\u0010"); break;
 801c7f8:	4917      	ldr	r1, [pc, #92]	; (801c858 <json_serialize_string+0x5d4>)
 801c7fa:	6838      	ldr	r0, [r7, #0]
 801c7fc:	f000 fa0a 	bl	801cc14 <append_string>
 801c800:	60f8      	str	r0, [r7, #12]
 801c802:	68fb      	ldr	r3, [r7, #12]
 801c804:	2b00      	cmp	r3, #0
 801c806:	da02      	bge.n	801c80e <json_serialize_string+0x58a>
 801c808:	f04f 33ff 	mov.w	r3, #4294967295
 801c80c:	e1c6      	b.n	801cb9c <json_serialize_string+0x918>
 801c80e:	683b      	ldr	r3, [r7, #0]
 801c810:	2b00      	cmp	r3, #0
 801c812:	d003      	beq.n	801c81c <json_serialize_string+0x598>
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	683a      	ldr	r2, [r7, #0]
 801c818:	4413      	add	r3, r2
 801c81a:	603b      	str	r3, [r7, #0]
 801c81c:	69ba      	ldr	r2, [r7, #24]
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	4413      	add	r3, r2
 801c822:	61bb      	str	r3, [r7, #24]
 801c824:	e19b      	b.n	801cb5e <json_serialize_string+0x8da>
 801c826:	bf00      	nop
 801c828:	08022558 	.word	0x08022558
 801c82c:	0802255c 	.word	0x0802255c
 801c830:	08022564 	.word	0x08022564
 801c834:	0802256c 	.word	0x0802256c
 801c838:	08022574 	.word	0x08022574
 801c83c:	0802257c 	.word	0x0802257c
 801c840:	08022584 	.word	0x08022584
 801c844:	0802258c 	.word	0x0802258c
 801c848:	08022594 	.word	0x08022594
 801c84c:	0802259c 	.word	0x0802259c
 801c850:	080225a4 	.word	0x080225a4
 801c854:	080225ac 	.word	0x080225ac
 801c858:	080225b4 	.word	0x080225b4
            case '\x11': APPEND_STRING("\\u0011"); break;
 801c85c:	4995      	ldr	r1, [pc, #596]	; (801cab4 <json_serialize_string+0x830>)
 801c85e:	6838      	ldr	r0, [r7, #0]
 801c860:	f000 f9d8 	bl	801cc14 <append_string>
 801c864:	60f8      	str	r0, [r7, #12]
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	2b00      	cmp	r3, #0
 801c86a:	da02      	bge.n	801c872 <json_serialize_string+0x5ee>
 801c86c:	f04f 33ff 	mov.w	r3, #4294967295
 801c870:	e194      	b.n	801cb9c <json_serialize_string+0x918>
 801c872:	683b      	ldr	r3, [r7, #0]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d003      	beq.n	801c880 <json_serialize_string+0x5fc>
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	683a      	ldr	r2, [r7, #0]
 801c87c:	4413      	add	r3, r2
 801c87e:	603b      	str	r3, [r7, #0]
 801c880:	69ba      	ldr	r2, [r7, #24]
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	4413      	add	r3, r2
 801c886:	61bb      	str	r3, [r7, #24]
 801c888:	e169      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x12': APPEND_STRING("\\u0012"); break;
 801c88a:	498b      	ldr	r1, [pc, #556]	; (801cab8 <json_serialize_string+0x834>)
 801c88c:	6838      	ldr	r0, [r7, #0]
 801c88e:	f000 f9c1 	bl	801cc14 <append_string>
 801c892:	60f8      	str	r0, [r7, #12]
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	2b00      	cmp	r3, #0
 801c898:	da02      	bge.n	801c8a0 <json_serialize_string+0x61c>
 801c89a:	f04f 33ff 	mov.w	r3, #4294967295
 801c89e:	e17d      	b.n	801cb9c <json_serialize_string+0x918>
 801c8a0:	683b      	ldr	r3, [r7, #0]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d003      	beq.n	801c8ae <json_serialize_string+0x62a>
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	683a      	ldr	r2, [r7, #0]
 801c8aa:	4413      	add	r3, r2
 801c8ac:	603b      	str	r3, [r7, #0]
 801c8ae:	69ba      	ldr	r2, [r7, #24]
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	4413      	add	r3, r2
 801c8b4:	61bb      	str	r3, [r7, #24]
 801c8b6:	e152      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x13': APPEND_STRING("\\u0013"); break;
 801c8b8:	4980      	ldr	r1, [pc, #512]	; (801cabc <json_serialize_string+0x838>)
 801c8ba:	6838      	ldr	r0, [r7, #0]
 801c8bc:	f000 f9aa 	bl	801cc14 <append_string>
 801c8c0:	60f8      	str	r0, [r7, #12]
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	da02      	bge.n	801c8ce <json_serialize_string+0x64a>
 801c8c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c8cc:	e166      	b.n	801cb9c <json_serialize_string+0x918>
 801c8ce:	683b      	ldr	r3, [r7, #0]
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d003      	beq.n	801c8dc <json_serialize_string+0x658>
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	683a      	ldr	r2, [r7, #0]
 801c8d8:	4413      	add	r3, r2
 801c8da:	603b      	str	r3, [r7, #0]
 801c8dc:	69ba      	ldr	r2, [r7, #24]
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	4413      	add	r3, r2
 801c8e2:	61bb      	str	r3, [r7, #24]
 801c8e4:	e13b      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x14': APPEND_STRING("\\u0014"); break;
 801c8e6:	4976      	ldr	r1, [pc, #472]	; (801cac0 <json_serialize_string+0x83c>)
 801c8e8:	6838      	ldr	r0, [r7, #0]
 801c8ea:	f000 f993 	bl	801cc14 <append_string>
 801c8ee:	60f8      	str	r0, [r7, #12]
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	da02      	bge.n	801c8fc <json_serialize_string+0x678>
 801c8f6:	f04f 33ff 	mov.w	r3, #4294967295
 801c8fa:	e14f      	b.n	801cb9c <json_serialize_string+0x918>
 801c8fc:	683b      	ldr	r3, [r7, #0]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d003      	beq.n	801c90a <json_serialize_string+0x686>
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	683a      	ldr	r2, [r7, #0]
 801c906:	4413      	add	r3, r2
 801c908:	603b      	str	r3, [r7, #0]
 801c90a:	69ba      	ldr	r2, [r7, #24]
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	4413      	add	r3, r2
 801c910:	61bb      	str	r3, [r7, #24]
 801c912:	e124      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x15': APPEND_STRING("\\u0015"); break;
 801c914:	496b      	ldr	r1, [pc, #428]	; (801cac4 <json_serialize_string+0x840>)
 801c916:	6838      	ldr	r0, [r7, #0]
 801c918:	f000 f97c 	bl	801cc14 <append_string>
 801c91c:	60f8      	str	r0, [r7, #12]
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	2b00      	cmp	r3, #0
 801c922:	da02      	bge.n	801c92a <json_serialize_string+0x6a6>
 801c924:	f04f 33ff 	mov.w	r3, #4294967295
 801c928:	e138      	b.n	801cb9c <json_serialize_string+0x918>
 801c92a:	683b      	ldr	r3, [r7, #0]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d003      	beq.n	801c938 <json_serialize_string+0x6b4>
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	683a      	ldr	r2, [r7, #0]
 801c934:	4413      	add	r3, r2
 801c936:	603b      	str	r3, [r7, #0]
 801c938:	69ba      	ldr	r2, [r7, #24]
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	4413      	add	r3, r2
 801c93e:	61bb      	str	r3, [r7, #24]
 801c940:	e10d      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x16': APPEND_STRING("\\u0016"); break;
 801c942:	4961      	ldr	r1, [pc, #388]	; (801cac8 <json_serialize_string+0x844>)
 801c944:	6838      	ldr	r0, [r7, #0]
 801c946:	f000 f965 	bl	801cc14 <append_string>
 801c94a:	60f8      	str	r0, [r7, #12]
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	da02      	bge.n	801c958 <json_serialize_string+0x6d4>
 801c952:	f04f 33ff 	mov.w	r3, #4294967295
 801c956:	e121      	b.n	801cb9c <json_serialize_string+0x918>
 801c958:	683b      	ldr	r3, [r7, #0]
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d003      	beq.n	801c966 <json_serialize_string+0x6e2>
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	683a      	ldr	r2, [r7, #0]
 801c962:	4413      	add	r3, r2
 801c964:	603b      	str	r3, [r7, #0]
 801c966:	69ba      	ldr	r2, [r7, #24]
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	4413      	add	r3, r2
 801c96c:	61bb      	str	r3, [r7, #24]
 801c96e:	e0f6      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x17': APPEND_STRING("\\u0017"); break;
 801c970:	4956      	ldr	r1, [pc, #344]	; (801cacc <json_serialize_string+0x848>)
 801c972:	6838      	ldr	r0, [r7, #0]
 801c974:	f000 f94e 	bl	801cc14 <append_string>
 801c978:	60f8      	str	r0, [r7, #12]
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	da02      	bge.n	801c986 <json_serialize_string+0x702>
 801c980:	f04f 33ff 	mov.w	r3, #4294967295
 801c984:	e10a      	b.n	801cb9c <json_serialize_string+0x918>
 801c986:	683b      	ldr	r3, [r7, #0]
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d003      	beq.n	801c994 <json_serialize_string+0x710>
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	683a      	ldr	r2, [r7, #0]
 801c990:	4413      	add	r3, r2
 801c992:	603b      	str	r3, [r7, #0]
 801c994:	69ba      	ldr	r2, [r7, #24]
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	4413      	add	r3, r2
 801c99a:	61bb      	str	r3, [r7, #24]
 801c99c:	e0df      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x18': APPEND_STRING("\\u0018"); break;
 801c99e:	494c      	ldr	r1, [pc, #304]	; (801cad0 <json_serialize_string+0x84c>)
 801c9a0:	6838      	ldr	r0, [r7, #0]
 801c9a2:	f000 f937 	bl	801cc14 <append_string>
 801c9a6:	60f8      	str	r0, [r7, #12]
 801c9a8:	68fb      	ldr	r3, [r7, #12]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	da02      	bge.n	801c9b4 <json_serialize_string+0x730>
 801c9ae:	f04f 33ff 	mov.w	r3, #4294967295
 801c9b2:	e0f3      	b.n	801cb9c <json_serialize_string+0x918>
 801c9b4:	683b      	ldr	r3, [r7, #0]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d003      	beq.n	801c9c2 <json_serialize_string+0x73e>
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	683a      	ldr	r2, [r7, #0]
 801c9be:	4413      	add	r3, r2
 801c9c0:	603b      	str	r3, [r7, #0]
 801c9c2:	69ba      	ldr	r2, [r7, #24]
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	4413      	add	r3, r2
 801c9c8:	61bb      	str	r3, [r7, #24]
 801c9ca:	e0c8      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x19': APPEND_STRING("\\u0019"); break;
 801c9cc:	4941      	ldr	r1, [pc, #260]	; (801cad4 <json_serialize_string+0x850>)
 801c9ce:	6838      	ldr	r0, [r7, #0]
 801c9d0:	f000 f920 	bl	801cc14 <append_string>
 801c9d4:	60f8      	str	r0, [r7, #12]
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	da02      	bge.n	801c9e2 <json_serialize_string+0x75e>
 801c9dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c9e0:	e0dc      	b.n	801cb9c <json_serialize_string+0x918>
 801c9e2:	683b      	ldr	r3, [r7, #0]
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d003      	beq.n	801c9f0 <json_serialize_string+0x76c>
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	683a      	ldr	r2, [r7, #0]
 801c9ec:	4413      	add	r3, r2
 801c9ee:	603b      	str	r3, [r7, #0]
 801c9f0:	69ba      	ldr	r2, [r7, #24]
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	4413      	add	r3, r2
 801c9f6:	61bb      	str	r3, [r7, #24]
 801c9f8:	e0b1      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 801c9fa:	4937      	ldr	r1, [pc, #220]	; (801cad8 <json_serialize_string+0x854>)
 801c9fc:	6838      	ldr	r0, [r7, #0]
 801c9fe:	f000 f909 	bl	801cc14 <append_string>
 801ca02:	60f8      	str	r0, [r7, #12]
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	da02      	bge.n	801ca10 <json_serialize_string+0x78c>
 801ca0a:	f04f 33ff 	mov.w	r3, #4294967295
 801ca0e:	e0c5      	b.n	801cb9c <json_serialize_string+0x918>
 801ca10:	683b      	ldr	r3, [r7, #0]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d003      	beq.n	801ca1e <json_serialize_string+0x79a>
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	683a      	ldr	r2, [r7, #0]
 801ca1a:	4413      	add	r3, r2
 801ca1c:	603b      	str	r3, [r7, #0]
 801ca1e:	69ba      	ldr	r2, [r7, #24]
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	4413      	add	r3, r2
 801ca24:	61bb      	str	r3, [r7, #24]
 801ca26:	e09a      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 801ca28:	492c      	ldr	r1, [pc, #176]	; (801cadc <json_serialize_string+0x858>)
 801ca2a:	6838      	ldr	r0, [r7, #0]
 801ca2c:	f000 f8f2 	bl	801cc14 <append_string>
 801ca30:	60f8      	str	r0, [r7, #12]
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	da02      	bge.n	801ca3e <json_serialize_string+0x7ba>
 801ca38:	f04f 33ff 	mov.w	r3, #4294967295
 801ca3c:	e0ae      	b.n	801cb9c <json_serialize_string+0x918>
 801ca3e:	683b      	ldr	r3, [r7, #0]
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d003      	beq.n	801ca4c <json_serialize_string+0x7c8>
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	683a      	ldr	r2, [r7, #0]
 801ca48:	4413      	add	r3, r2
 801ca4a:	603b      	str	r3, [r7, #0]
 801ca4c:	69ba      	ldr	r2, [r7, #24]
 801ca4e:	68fb      	ldr	r3, [r7, #12]
 801ca50:	4413      	add	r3, r2
 801ca52:	61bb      	str	r3, [r7, #24]
 801ca54:	e083      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 801ca56:	4922      	ldr	r1, [pc, #136]	; (801cae0 <json_serialize_string+0x85c>)
 801ca58:	6838      	ldr	r0, [r7, #0]
 801ca5a:	f000 f8db 	bl	801cc14 <append_string>
 801ca5e:	60f8      	str	r0, [r7, #12]
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	da02      	bge.n	801ca6c <json_serialize_string+0x7e8>
 801ca66:	f04f 33ff 	mov.w	r3, #4294967295
 801ca6a:	e097      	b.n	801cb9c <json_serialize_string+0x918>
 801ca6c:	683b      	ldr	r3, [r7, #0]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d003      	beq.n	801ca7a <json_serialize_string+0x7f6>
 801ca72:	68fb      	ldr	r3, [r7, #12]
 801ca74:	683a      	ldr	r2, [r7, #0]
 801ca76:	4413      	add	r3, r2
 801ca78:	603b      	str	r3, [r7, #0]
 801ca7a:	69ba      	ldr	r2, [r7, #24]
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	4413      	add	r3, r2
 801ca80:	61bb      	str	r3, [r7, #24]
 801ca82:	e06c      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 801ca84:	4917      	ldr	r1, [pc, #92]	; (801cae4 <json_serialize_string+0x860>)
 801ca86:	6838      	ldr	r0, [r7, #0]
 801ca88:	f000 f8c4 	bl	801cc14 <append_string>
 801ca8c:	60f8      	str	r0, [r7, #12]
 801ca8e:	68fb      	ldr	r3, [r7, #12]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	da02      	bge.n	801ca9a <json_serialize_string+0x816>
 801ca94:	f04f 33ff 	mov.w	r3, #4294967295
 801ca98:	e080      	b.n	801cb9c <json_serialize_string+0x918>
 801ca9a:	683b      	ldr	r3, [r7, #0]
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d003      	beq.n	801caa8 <json_serialize_string+0x824>
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	683a      	ldr	r2, [r7, #0]
 801caa4:	4413      	add	r3, r2
 801caa6:	603b      	str	r3, [r7, #0]
 801caa8:	69ba      	ldr	r2, [r7, #24]
 801caaa:	68fb      	ldr	r3, [r7, #12]
 801caac:	4413      	add	r3, r2
 801caae:	61bb      	str	r3, [r7, #24]
 801cab0:	e055      	b.n	801cb5e <json_serialize_string+0x8da>
 801cab2:	bf00      	nop
 801cab4:	080225bc 	.word	0x080225bc
 801cab8:	080225c4 	.word	0x080225c4
 801cabc:	080225cc 	.word	0x080225cc
 801cac0:	080225d4 	.word	0x080225d4
 801cac4:	080225dc 	.word	0x080225dc
 801cac8:	080225e4 	.word	0x080225e4
 801cacc:	080225ec 	.word	0x080225ec
 801cad0:	080225f4 	.word	0x080225f4
 801cad4:	080225fc 	.word	0x080225fc
 801cad8:	08022604 	.word	0x08022604
 801cadc:	0802260c 	.word	0x0802260c
 801cae0:	08022614 	.word	0x08022614
 801cae4:	0802261c 	.word	0x0802261c
            case '\x1e': APPEND_STRING("\\u001e"); break;
 801cae8:	492e      	ldr	r1, [pc, #184]	; (801cba4 <json_serialize_string+0x920>)
 801caea:	6838      	ldr	r0, [r7, #0]
 801caec:	f000 f892 	bl	801cc14 <append_string>
 801caf0:	60f8      	str	r0, [r7, #12]
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	da02      	bge.n	801cafe <json_serialize_string+0x87a>
 801caf8:	f04f 33ff 	mov.w	r3, #4294967295
 801cafc:	e04e      	b.n	801cb9c <json_serialize_string+0x918>
 801cafe:	683b      	ldr	r3, [r7, #0]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d003      	beq.n	801cb0c <json_serialize_string+0x888>
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	683a      	ldr	r2, [r7, #0]
 801cb08:	4413      	add	r3, r2
 801cb0a:	603b      	str	r3, [r7, #0]
 801cb0c:	69ba      	ldr	r2, [r7, #24]
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	4413      	add	r3, r2
 801cb12:	61bb      	str	r3, [r7, #24]
 801cb14:	e023      	b.n	801cb5e <json_serialize_string+0x8da>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 801cb16:	4924      	ldr	r1, [pc, #144]	; (801cba8 <json_serialize_string+0x924>)
 801cb18:	6838      	ldr	r0, [r7, #0]
 801cb1a:	f000 f87b 	bl	801cc14 <append_string>
 801cb1e:	60f8      	str	r0, [r7, #12]
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	da02      	bge.n	801cb2c <json_serialize_string+0x8a8>
 801cb26:	f04f 33ff 	mov.w	r3, #4294967295
 801cb2a:	e037      	b.n	801cb9c <json_serialize_string+0x918>
 801cb2c:	683b      	ldr	r3, [r7, #0]
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d003      	beq.n	801cb3a <json_serialize_string+0x8b6>
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	683a      	ldr	r2, [r7, #0]
 801cb36:	4413      	add	r3, r2
 801cb38:	603b      	str	r3, [r7, #0]
 801cb3a:	69ba      	ldr	r2, [r7, #24]
 801cb3c:	68fb      	ldr	r3, [r7, #12]
 801cb3e:	4413      	add	r3, r2
 801cb40:	61bb      	str	r3, [r7, #24]
 801cb42:	e00c      	b.n	801cb5e <json_serialize_string+0x8da>
            default:
                if (buf != NULL) {
 801cb44:	683b      	ldr	r3, [r7, #0]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d005      	beq.n	801cb56 <json_serialize_string+0x8d2>
                    buf[0] = c;
 801cb4a:	683b      	ldr	r3, [r7, #0]
 801cb4c:	7cfa      	ldrb	r2, [r7, #19]
 801cb4e:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 801cb50:	683b      	ldr	r3, [r7, #0]
 801cb52:	3301      	adds	r3, #1
 801cb54:	603b      	str	r3, [r7, #0]
                }
                written_total += 1;
 801cb56:	69bb      	ldr	r3, [r7, #24]
 801cb58:	3301      	adds	r3, #1
 801cb5a:	61bb      	str	r3, [r7, #24]
                break;
 801cb5c:	bf00      	nop
    for (i = 0; i < len; i++) {
 801cb5e:	69fb      	ldr	r3, [r7, #28]
 801cb60:	3301      	adds	r3, #1
 801cb62:	61fb      	str	r3, [r7, #28]
 801cb64:	69fa      	ldr	r2, [r7, #28]
 801cb66:	697b      	ldr	r3, [r7, #20]
 801cb68:	429a      	cmp	r2, r3
 801cb6a:	f4ff abb8 	bcc.w	801c2de <json_serialize_string+0x5a>
        }
    }
    APPEND_STRING("\"");
 801cb6e:	490f      	ldr	r1, [pc, #60]	; (801cbac <json_serialize_string+0x928>)
 801cb70:	6838      	ldr	r0, [r7, #0]
 801cb72:	f000 f84f 	bl	801cc14 <append_string>
 801cb76:	60f8      	str	r0, [r7, #12]
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	da02      	bge.n	801cb84 <json_serialize_string+0x900>
 801cb7e:	f04f 33ff 	mov.w	r3, #4294967295
 801cb82:	e00b      	b.n	801cb9c <json_serialize_string+0x918>
 801cb84:	683b      	ldr	r3, [r7, #0]
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d003      	beq.n	801cb92 <json_serialize_string+0x90e>
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	683a      	ldr	r2, [r7, #0]
 801cb8e:	4413      	add	r3, r2
 801cb90:	603b      	str	r3, [r7, #0]
 801cb92:	69ba      	ldr	r2, [r7, #24]
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	4413      	add	r3, r2
 801cb98:	61bb      	str	r3, [r7, #24]
    return written_total;
 801cb9a:	69bb      	ldr	r3, [r7, #24]
}
 801cb9c:	4618      	mov	r0, r3
 801cb9e:	3720      	adds	r7, #32
 801cba0:	46bd      	mov	sp, r7
 801cba2:	bd80      	pop	{r7, pc}
 801cba4:	08022624 	.word	0x08022624
 801cba8:	0802262c 	.word	0x0802262c
 801cbac:	08022538 	.word	0x08022538

0801cbb0 <append_indent>:

static int append_indent(char *buf, int level) {
 801cbb0:	b580      	push	{r7, lr}
 801cbb2:	b086      	sub	sp, #24
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	6078      	str	r0, [r7, #4]
 801cbb8:	6039      	str	r1, [r7, #0]
    int i;
    int written = -1, written_total = 0;
 801cbba:	f04f 33ff 	mov.w	r3, #4294967295
 801cbbe:	60fb      	str	r3, [r7, #12]
 801cbc0:	2300      	movs	r3, #0
 801cbc2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801cbc4:	2300      	movs	r3, #0
 801cbc6:	617b      	str	r3, [r7, #20]
 801cbc8:	e018      	b.n	801cbfc <append_indent+0x4c>
        APPEND_STRING("    ");
 801cbca:	4911      	ldr	r1, [pc, #68]	; (801cc10 <append_indent+0x60>)
 801cbcc:	6878      	ldr	r0, [r7, #4]
 801cbce:	f000 f821 	bl	801cc14 <append_string>
 801cbd2:	60f8      	str	r0, [r7, #12]
 801cbd4:	68fb      	ldr	r3, [r7, #12]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	da02      	bge.n	801cbe0 <append_indent+0x30>
 801cbda:	f04f 33ff 	mov.w	r3, #4294967295
 801cbde:	e012      	b.n	801cc06 <append_indent+0x56>
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d003      	beq.n	801cbee <append_indent+0x3e>
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	687a      	ldr	r2, [r7, #4]
 801cbea:	4413      	add	r3, r2
 801cbec:	607b      	str	r3, [r7, #4]
 801cbee:	693a      	ldr	r2, [r7, #16]
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	4413      	add	r3, r2
 801cbf4:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801cbf6:	697b      	ldr	r3, [r7, #20]
 801cbf8:	3301      	adds	r3, #1
 801cbfa:	617b      	str	r3, [r7, #20]
 801cbfc:	697a      	ldr	r2, [r7, #20]
 801cbfe:	683b      	ldr	r3, [r7, #0]
 801cc00:	429a      	cmp	r2, r3
 801cc02:	dbe2      	blt.n	801cbca <append_indent+0x1a>
    }
    return written_total;
 801cc04:	693b      	ldr	r3, [r7, #16]
}
 801cc06:	4618      	mov	r0, r3
 801cc08:	3718      	adds	r7, #24
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	bd80      	pop	{r7, pc}
 801cc0e:	bf00      	nop
 801cc10:	08022634 	.word	0x08022634

0801cc14 <append_string>:

static int append_string(char *buf, const char *string) {
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b082      	sub	sp, #8
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	6078      	str	r0, [r7, #4]
 801cc1c:	6039      	str	r1, [r7, #0]
    if (buf == NULL) {
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d104      	bne.n	801cc2e <append_string+0x1a>
        return (int)strlen(string);
 801cc24:	6838      	ldr	r0, [r7, #0]
 801cc26:	f7e3 faf5 	bl	8000214 <strlen>
 801cc2a:	4603      	mov	r3, r0
 801cc2c:	e005      	b.n	801cc3a <append_string+0x26>
    }
    return sprintf(buf, "%s", string);
 801cc2e:	683a      	ldr	r2, [r7, #0]
 801cc30:	4904      	ldr	r1, [pc, #16]	; (801cc44 <append_string+0x30>)
 801cc32:	6878      	ldr	r0, [r7, #4]
 801cc34:	f001 fe6a 	bl	801e90c <siprintf>
 801cc38:	4603      	mov	r3, r0
}
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	3708      	adds	r7, #8
 801cc3e:	46bd      	mov	sp, r7
 801cc40:	bd80      	pop	{r7, pc}
 801cc42:	bf00      	nop
 801cc44:	0802263c 	.word	0x0802263c

0801cc48 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 801cc48:	b580      	push	{r7, lr}
 801cc4a:	b082      	sub	sp, #8
 801cc4c:	af00      	add	r7, sp, #0
 801cc4e:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d101      	bne.n	801cc5a <json_parse_string+0x12>
        return NULL;
 801cc56:	2300      	movs	r3, #0
 801cc58:	e016      	b.n	801cc88 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	781b      	ldrb	r3, [r3, #0]
 801cc5e:	2bef      	cmp	r3, #239	; 0xef
 801cc60:	d10c      	bne.n	801cc7c <json_parse_string+0x34>
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	3301      	adds	r3, #1
 801cc66:	781b      	ldrb	r3, [r3, #0]
 801cc68:	2bbb      	cmp	r3, #187	; 0xbb
 801cc6a:	d107      	bne.n	801cc7c <json_parse_string+0x34>
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	3302      	adds	r3, #2
 801cc70:	781b      	ldrb	r3, [r3, #0]
 801cc72:	2bbf      	cmp	r3, #191	; 0xbf
 801cc74:	d102      	bne.n	801cc7c <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	3303      	adds	r3, #3
 801cc7a:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 801cc7c:	1d3b      	adds	r3, r7, #4
 801cc7e:	2100      	movs	r1, #0
 801cc80:	4618      	mov	r0, r3
 801cc82:	f7fe fcc1 	bl	801b608 <parse_value>
 801cc86:	4603      	mov	r3, r0
}
 801cc88:	4618      	mov	r0, r3
 801cc8a:	3708      	adds	r7, #8
 801cc8c:	46bd      	mov	sp, r7
 801cc8e:	bd80      	pop	{r7, pc}

0801cc90 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b082      	sub	sp, #8
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	6078      	str	r0, [r7, #4]
 801cc98:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d002      	beq.n	801cca6 <json_object_get_value+0x16>
 801cca0:	683b      	ldr	r3, [r7, #0]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d101      	bne.n	801ccaa <json_object_get_value+0x1a>
        return NULL;
 801cca6:	2300      	movs	r3, #0
 801cca8:	e009      	b.n	801ccbe <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 801ccaa:	6838      	ldr	r0, [r7, #0]
 801ccac:	f7e3 fab2 	bl	8000214 <strlen>
 801ccb0:	4603      	mov	r3, r0
 801ccb2:	461a      	mov	r2, r3
 801ccb4:	6839      	ldr	r1, [r7, #0]
 801ccb6:	6878      	ldr	r0, [r7, #4]
 801ccb8:	f7fe f864 	bl	801ad84 <json_object_getn_value>
 801ccbc:	4603      	mov	r3, r0
}
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	3708      	adds	r7, #8
 801ccc2:	46bd      	mov	sp, r7
 801ccc4:	bd80      	pop	{r7, pc}

0801ccc6 <json_object_dotget_value>:

int json_object_get_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_get_value(object, name));
}

JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 801ccc6:	b580      	push	{r7, lr}
 801ccc8:	b084      	sub	sp, #16
 801ccca:	af00      	add	r7, sp, #0
 801cccc:	6078      	str	r0, [r7, #4]
 801ccce:	6039      	str	r1, [r7, #0]
    const char *dot_position = strchr(name, '.');
 801ccd0:	212e      	movs	r1, #46	; 0x2e
 801ccd2:	6838      	ldr	r0, [r7, #0]
 801ccd4:	f001 fe8c 	bl	801e9f0 <strchr>
 801ccd8:	60f8      	str	r0, [r7, #12]
    if (!dot_position) {
 801ccda:	68fb      	ldr	r3, [r7, #12]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d105      	bne.n	801ccec <json_object_dotget_value+0x26>
        return json_object_get_value(object, name);
 801cce0:	6839      	ldr	r1, [r7, #0]
 801cce2:	6878      	ldr	r0, [r7, #4]
 801cce4:	f7ff ffd4 	bl	801cc90 <json_object_get_value>
 801cce8:	4603      	mov	r3, r0
 801ccea:	e013      	b.n	801cd14 <json_object_dotget_value+0x4e>
    }
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 801ccec:	68fa      	ldr	r2, [r7, #12]
 801ccee:	683b      	ldr	r3, [r7, #0]
 801ccf0:	1ad3      	subs	r3, r2, r3
 801ccf2:	461a      	mov	r2, r3
 801ccf4:	6839      	ldr	r1, [r7, #0]
 801ccf6:	6878      	ldr	r0, [r7, #4]
 801ccf8:	f7fe f844 	bl	801ad84 <json_object_getn_value>
 801ccfc:	4603      	mov	r3, r0
 801ccfe:	4618      	mov	r0, r3
 801cd00:	f000 f8ef 	bl	801cee2 <json_value_get_object>
 801cd04:	6078      	str	r0, [r7, #4]
    return json_object_dotget_value(object, dot_position + 1);
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	3301      	adds	r3, #1
 801cd0a:	4619      	mov	r1, r3
 801cd0c:	6878      	ldr	r0, [r7, #4]
 801cd0e:	f7ff ffda 	bl	801ccc6 <json_object_dotget_value>
 801cd12:	4603      	mov	r3, r0
}
 801cd14:	4618      	mov	r0, r3
 801cd16:	3710      	adds	r7, #16
 801cd18:	46bd      	mov	sp, r7
 801cd1a:	bd80      	pop	{r7, pc}

0801cd1c <json_object_dotget_number>:

const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
    return json_value_get_string(json_object_dotget_value(object, name));
}

double json_object_dotget_number(const JSON_Object *object, const char *name) {
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b082      	sub	sp, #8
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	6078      	str	r0, [r7, #4]
 801cd24:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_dotget_value(object, name));
 801cd26:	6839      	ldr	r1, [r7, #0]
 801cd28:	6878      	ldr	r0, [r7, #4]
 801cd2a:	f7ff ffcc 	bl	801ccc6 <json_object_dotget_value>
 801cd2e:	4603      	mov	r3, r0
 801cd30:	4618      	mov	r0, r3
 801cd32:	f000 f90c 	bl	801cf4e <json_value_get_number>
 801cd36:	eeb0 7a40 	vmov.f32	s14, s0
 801cd3a:	eef0 7a60 	vmov.f32	s15, s1
}
 801cd3e:	eeb0 0a47 	vmov.f32	s0, s14
 801cd42:	eef0 0a67 	vmov.f32	s1, s15
 801cd46:	3708      	adds	r7, #8
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	bd80      	pop	{r7, pc}

0801cd4c <json_object_dotget_array>:

JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
    return json_value_get_object(json_object_dotget_value(object, name));
}

JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	b082      	sub	sp, #8
 801cd50:	af00      	add	r7, sp, #0
 801cd52:	6078      	str	r0, [r7, #4]
 801cd54:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_dotget_value(object, name));
 801cd56:	6839      	ldr	r1, [r7, #0]
 801cd58:	6878      	ldr	r0, [r7, #4]
 801cd5a:	f7ff ffb4 	bl	801ccc6 <json_object_dotget_value>
 801cd5e:	4603      	mov	r3, r0
 801cd60:	4618      	mov	r0, r3
 801cd62:	f000 f8d0 	bl	801cf06 <json_value_get_array>
 801cd66:	4603      	mov	r3, r0
}
 801cd68:	4618      	mov	r0, r3
 801cd6a:	3708      	adds	r7, #8
 801cd6c:	46bd      	mov	sp, r7
 801cd6e:	bd80      	pop	{r7, pc}

0801cd70 <json_object_dotget_boolean>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
 801cd70:	b580      	push	{r7, lr}
 801cd72:	b082      	sub	sp, #8
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	6078      	str	r0, [r7, #4]
 801cd78:	6039      	str	r1, [r7, #0]
    return json_value_get_boolean(json_object_dotget_value(object, name));
 801cd7a:	6839      	ldr	r1, [r7, #0]
 801cd7c:	6878      	ldr	r0, [r7, #4]
 801cd7e:	f7ff ffa2 	bl	801ccc6 <json_object_dotget_value>
 801cd82:	4603      	mov	r3, r0
 801cd84:	4618      	mov	r0, r3
 801cd86:	f000 f8fd 	bl	801cf84 <json_value_get_boolean>
 801cd8a:	4603      	mov	r3, r0
}
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	3708      	adds	r7, #8
 801cd90:	46bd      	mov	sp, r7
 801cd92:	bd80      	pop	{r7, pc}

0801cd94 <json_object_get_count>:

size_t json_object_get_count(const JSON_Object *object) {
 801cd94:	b480      	push	{r7}
 801cd96:	b083      	sub	sp, #12
 801cd98:	af00      	add	r7, sp, #0
 801cd9a:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d002      	beq.n	801cda8 <json_object_get_count+0x14>
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	68db      	ldr	r3, [r3, #12]
 801cda6:	e000      	b.n	801cdaa <json_object_get_count+0x16>
 801cda8:	2300      	movs	r3, #0
}
 801cdaa:	4618      	mov	r0, r3
 801cdac:	370c      	adds	r7, #12
 801cdae:	46bd      	mov	sp, r7
 801cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdb4:	4770      	bx	lr

0801cdb6 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 801cdb6:	b580      	push	{r7, lr}
 801cdb8:	b082      	sub	sp, #8
 801cdba:	af00      	add	r7, sp, #0
 801cdbc:	6078      	str	r0, [r7, #4]
 801cdbe:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d006      	beq.n	801cdd4 <json_object_get_name+0x1e>
 801cdc6:	6878      	ldr	r0, [r7, #4]
 801cdc8:	f7ff ffe4 	bl	801cd94 <json_object_get_count>
 801cdcc:	4602      	mov	r2, r0
 801cdce:	683b      	ldr	r3, [r7, #0]
 801cdd0:	4293      	cmp	r3, r2
 801cdd2:	d301      	bcc.n	801cdd8 <json_object_get_name+0x22>
        return NULL;
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	e005      	b.n	801cde4 <json_object_get_name+0x2e>
    }
    return object->names[index];
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	685a      	ldr	r2, [r3, #4]
 801cddc:	683b      	ldr	r3, [r7, #0]
 801cdde:	009b      	lsls	r3, r3, #2
 801cde0:	4413      	add	r3, r2
 801cde2:	681b      	ldr	r3, [r3, #0]
}
 801cde4:	4618      	mov	r0, r3
 801cde6:	3708      	adds	r7, #8
 801cde8:	46bd      	mov	sp, r7
 801cdea:	bd80      	pop	{r7, pc}

0801cdec <json_object_get_wrapping_value>:
        return NULL;
    }
    return object->values[index];
}

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 801cdec:	b480      	push	{r7}
 801cdee:	b083      	sub	sp, #12
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	6078      	str	r0, [r7, #4]
    return object->wrapping_value;
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	681b      	ldr	r3, [r3, #0]
}
 801cdf8:	4618      	mov	r0, r3
 801cdfa:	370c      	adds	r7, #12
 801cdfc:	46bd      	mov	sp, r7
 801cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce02:	4770      	bx	lr

0801ce04 <json_object_dothas_value>:
int json_object_has_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {
    JSON_Value *val = json_object_get_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

int json_object_dothas_value (const JSON_Object *object, const char *name) {
 801ce04:	b580      	push	{r7, lr}
 801ce06:	b082      	sub	sp, #8
 801ce08:	af00      	add	r7, sp, #0
 801ce0a:	6078      	str	r0, [r7, #4]
 801ce0c:	6039      	str	r1, [r7, #0]
    return json_object_dotget_value(object, name) != NULL;
 801ce0e:	6839      	ldr	r1, [r7, #0]
 801ce10:	6878      	ldr	r0, [r7, #4]
 801ce12:	f7ff ff58 	bl	801ccc6 <json_object_dotget_value>
 801ce16:	4603      	mov	r3, r0
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	bf14      	ite	ne
 801ce1c:	2301      	movne	r3, #1
 801ce1e:	2300      	moveq	r3, #0
 801ce20:	b2db      	uxtb	r3, r3
}
 801ce22:	4618      	mov	r0, r3
 801ce24:	3708      	adds	r7, #8
 801ce26:	46bd      	mov	sp, r7
 801ce28:	bd80      	pop	{r7, pc}

0801ce2a <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 801ce2a:	b580      	push	{r7, lr}
 801ce2c:	b082      	sub	sp, #8
 801ce2e:	af00      	add	r7, sp, #0
 801ce30:	6078      	str	r0, [r7, #4]
 801ce32:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d006      	beq.n	801ce48 <json_array_get_value+0x1e>
 801ce3a:	6878      	ldr	r0, [r7, #4]
 801ce3c:	f000 f822 	bl	801ce84 <json_array_get_count>
 801ce40:	4602      	mov	r2, r0
 801ce42:	683b      	ldr	r3, [r7, #0]
 801ce44:	4293      	cmp	r3, r2
 801ce46:	d301      	bcc.n	801ce4c <json_array_get_value+0x22>
        return NULL;
 801ce48:	2300      	movs	r3, #0
 801ce4a:	e005      	b.n	801ce58 <json_array_get_value+0x2e>
    }
    return array->items[index];
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	685a      	ldr	r2, [r3, #4]
 801ce50:	683b      	ldr	r3, [r7, #0]
 801ce52:	009b      	lsls	r3, r3, #2
 801ce54:	4413      	add	r3, r2
 801ce56:	681b      	ldr	r3, [r3, #0]
}
 801ce58:	4618      	mov	r0, r3
 801ce5a:	3708      	adds	r7, #8
 801ce5c:	46bd      	mov	sp, r7
 801ce5e:	bd80      	pop	{r7, pc}

0801ce60 <json_array_get_object>:

double json_array_get_number(const JSON_Array *array, size_t index) {
    return json_value_get_number(json_array_get_value(array, index));
}

JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {
 801ce60:	b580      	push	{r7, lr}
 801ce62:	b082      	sub	sp, #8
 801ce64:	af00      	add	r7, sp, #0
 801ce66:	6078      	str	r0, [r7, #4]
 801ce68:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_array_get_value(array, index));
 801ce6a:	6839      	ldr	r1, [r7, #0]
 801ce6c:	6878      	ldr	r0, [r7, #4]
 801ce6e:	f7ff ffdc 	bl	801ce2a <json_array_get_value>
 801ce72:	4603      	mov	r3, r0
 801ce74:	4618      	mov	r0, r3
 801ce76:	f000 f834 	bl	801cee2 <json_value_get_object>
 801ce7a:	4603      	mov	r3, r0
}
 801ce7c:	4618      	mov	r0, r3
 801ce7e:	3708      	adds	r7, #8
 801ce80:	46bd      	mov	sp, r7
 801ce82:	bd80      	pop	{r7, pc}

0801ce84 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 801ce84:	b480      	push	{r7}
 801ce86:	b083      	sub	sp, #12
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d002      	beq.n	801ce98 <json_array_get_count+0x14>
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	689b      	ldr	r3, [r3, #8]
 801ce96:	e000      	b.n	801ce9a <json_array_get_count+0x16>
 801ce98:	2300      	movs	r3, #0
}
 801ce9a:	4618      	mov	r0, r3
 801ce9c:	370c      	adds	r7, #12
 801ce9e:	46bd      	mov	sp, r7
 801cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cea4:	4770      	bx	lr

0801cea6 <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 801cea6:	b480      	push	{r7}
 801cea8:	b083      	sub	sp, #12
 801ceaa:	af00      	add	r7, sp, #0
 801ceac:	6078      	str	r0, [r7, #4]
    return array->wrapping_value;
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	681b      	ldr	r3, [r3, #0]
}
 801ceb2:	4618      	mov	r0, r3
 801ceb4:	370c      	adds	r7, #12
 801ceb6:	46bd      	mov	sp, r7
 801ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cebc:	4770      	bx	lr

0801cebe <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 801cebe:	b480      	push	{r7}
 801cec0:	b083      	sub	sp, #12
 801cec2:	af00      	add	r7, sp, #0
 801cec4:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d002      	beq.n	801ced2 <json_value_get_type+0x14>
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	685b      	ldr	r3, [r3, #4]
 801ced0:	e001      	b.n	801ced6 <json_value_get_type+0x18>
 801ced2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ced6:	4618      	mov	r0, r3
 801ced8:	370c      	adds	r7, #12
 801ceda:	46bd      	mov	sp, r7
 801cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cee0:	4770      	bx	lr

0801cee2 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 801cee2:	b580      	push	{r7, lr}
 801cee4:	b082      	sub	sp, #8
 801cee6:	af00      	add	r7, sp, #0
 801cee8:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801ceea:	6878      	ldr	r0, [r7, #4]
 801ceec:	f7ff ffe7 	bl	801cebe <json_value_get_type>
 801cef0:	4603      	mov	r3, r0
 801cef2:	2b04      	cmp	r3, #4
 801cef4:	d102      	bne.n	801cefc <json_value_get_object+0x1a>
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	689b      	ldr	r3, [r3, #8]
 801cefa:	e000      	b.n	801cefe <json_value_get_object+0x1c>
 801cefc:	2300      	movs	r3, #0
}
 801cefe:	4618      	mov	r0, r3
 801cf00:	3708      	adds	r7, #8
 801cf02:	46bd      	mov	sp, r7
 801cf04:	bd80      	pop	{r7, pc}

0801cf06 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 801cf06:	b580      	push	{r7, lr}
 801cf08:	b082      	sub	sp, #8
 801cf0a:	af00      	add	r7, sp, #0
 801cf0c:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 801cf0e:	6878      	ldr	r0, [r7, #4]
 801cf10:	f7ff ffd5 	bl	801cebe <json_value_get_type>
 801cf14:	4603      	mov	r3, r0
 801cf16:	2b05      	cmp	r3, #5
 801cf18:	d102      	bne.n	801cf20 <json_value_get_array+0x1a>
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	689b      	ldr	r3, [r3, #8]
 801cf1e:	e000      	b.n	801cf22 <json_value_get_array+0x1c>
 801cf20:	2300      	movs	r3, #0
}
 801cf22:	4618      	mov	r0, r3
 801cf24:	3708      	adds	r7, #8
 801cf26:	46bd      	mov	sp, r7
 801cf28:	bd80      	pop	{r7, pc}

0801cf2a <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 801cf2a:	b580      	push	{r7, lr}
 801cf2c:	b082      	sub	sp, #8
 801cf2e:	af00      	add	r7, sp, #0
 801cf30:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
 801cf32:	6878      	ldr	r0, [r7, #4]
 801cf34:	f7ff ffc3 	bl	801cebe <json_value_get_type>
 801cf38:	4603      	mov	r3, r0
 801cf3a:	2b02      	cmp	r3, #2
 801cf3c:	d102      	bne.n	801cf44 <json_value_get_string+0x1a>
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	689b      	ldr	r3, [r3, #8]
 801cf42:	e000      	b.n	801cf46 <json_value_get_string+0x1c>
 801cf44:	2300      	movs	r3, #0
}
 801cf46:	4618      	mov	r0, r3
 801cf48:	3708      	adds	r7, #8
 801cf4a:	46bd      	mov	sp, r7
 801cf4c:	bd80      	pop	{r7, pc}

0801cf4e <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 801cf4e:	b580      	push	{r7, lr}
 801cf50:	b082      	sub	sp, #8
 801cf52:	af00      	add	r7, sp, #0
 801cf54:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 801cf56:	6878      	ldr	r0, [r7, #4]
 801cf58:	f7ff ffb1 	bl	801cebe <json_value_get_type>
 801cf5c:	4603      	mov	r3, r0
 801cf5e:	2b03      	cmp	r3, #3
 801cf60:	d103      	bne.n	801cf6a <json_value_get_number+0x1c>
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801cf68:	e003      	b.n	801cf72 <json_value_get_number+0x24>
 801cf6a:	f04f 0200 	mov.w	r2, #0
 801cf6e:	f04f 0300 	mov.w	r3, #0
 801cf72:	ec43 2b17 	vmov	d7, r2, r3
}
 801cf76:	eeb0 0a47 	vmov.f32	s0, s14
 801cf7a:	eef0 0a67 	vmov.f32	s1, s15
 801cf7e:	3708      	adds	r7, #8
 801cf80:	46bd      	mov	sp, r7
 801cf82:	bd80      	pop	{r7, pc}

0801cf84 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 801cf84:	b580      	push	{r7, lr}
 801cf86:	b082      	sub	sp, #8
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 801cf8c:	6878      	ldr	r0, [r7, #4]
 801cf8e:	f7ff ff96 	bl	801cebe <json_value_get_type>
 801cf92:	4603      	mov	r3, r0
 801cf94:	2b06      	cmp	r3, #6
 801cf96:	d102      	bne.n	801cf9e <json_value_get_boolean+0x1a>
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	689b      	ldr	r3, [r3, #8]
 801cf9c:	e001      	b.n	801cfa2 <json_value_get_boolean+0x1e>
 801cf9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cfa2:	4618      	mov	r0, r3
 801cfa4:	3708      	adds	r7, #8
 801cfa6:	46bd      	mov	sp, r7
 801cfa8:	bd80      	pop	{r7, pc}
	...

0801cfac <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 801cfac:	b580      	push	{r7, lr}
 801cfae:	b082      	sub	sp, #8
 801cfb0:	af00      	add	r7, sp, #0
 801cfb2:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 801cfb4:	6878      	ldr	r0, [r7, #4]
 801cfb6:	f7ff ff82 	bl	801cebe <json_value_get_type>
 801cfba:	4603      	mov	r3, r0
 801cfbc:	2b05      	cmp	r3, #5
 801cfbe:	d012      	beq.n	801cfe6 <json_value_free+0x3a>
 801cfc0:	2b05      	cmp	r3, #5
 801cfc2:	dc16      	bgt.n	801cff2 <json_value_free+0x46>
 801cfc4:	2b02      	cmp	r3, #2
 801cfc6:	d007      	beq.n	801cfd8 <json_value_free+0x2c>
 801cfc8:	2b04      	cmp	r3, #4
 801cfca:	d112      	bne.n	801cff2 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	689b      	ldr	r3, [r3, #8]
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	f7fd ffc7 	bl	801af64 <json_object_free>
            break;
 801cfd6:	e00d      	b.n	801cff4 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string);
 801cfd8:	4b0a      	ldr	r3, [pc, #40]	; (801d004 <json_value_free+0x58>)
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	687a      	ldr	r2, [r7, #4]
 801cfde:	6892      	ldr	r2, [r2, #8]
 801cfe0:	4610      	mov	r0, r2
 801cfe2:	4798      	blx	r3
            break;
 801cfe4:	e006      	b.n	801cff4 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	689b      	ldr	r3, [r3, #8]
 801cfea:	4618      	mov	r0, r3
 801cfec:	f7fe f88a 	bl	801b104 <json_array_free>
            break;
 801cff0:	e000      	b.n	801cff4 <json_value_free+0x48>
        default:
            break;
 801cff2:	bf00      	nop
    }
    parson_free(value);
 801cff4:	4b03      	ldr	r3, [pc, #12]	; (801d004 <json_value_free+0x58>)
 801cff6:	681b      	ldr	r3, [r3, #0]
 801cff8:	6878      	ldr	r0, [r7, #4]
 801cffa:	4798      	blx	r3
}
 801cffc:	bf00      	nop
 801cffe:	3708      	adds	r7, #8
 801d000:	46bd      	mov	sp, r7
 801d002:	bd80      	pop	{r7, pc}
 801d004:	20000088 	.word	0x20000088

0801d008 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 801d008:	b580      	push	{r7, lr}
 801d00a:	b082      	sub	sp, #8
 801d00c:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d00e:	4b12      	ldr	r3, [pc, #72]	; (801d058 <json_value_init_object+0x50>)
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	2010      	movs	r0, #16
 801d014:	4798      	blx	r3
 801d016:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d101      	bne.n	801d022 <json_value_init_object+0x1a>
        return NULL;
 801d01e:	2300      	movs	r3, #0
 801d020:	e016      	b.n	801d050 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	2200      	movs	r2, #0
 801d026:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	2204      	movs	r2, #4
 801d02c:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_init(new_value);
 801d02e:	6878      	ldr	r0, [r7, #4]
 801d030:	f7fd fd88 	bl	801ab44 <json_object_init>
 801d034:	4602      	mov	r2, r0
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	689b      	ldr	r3, [r3, #8]
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d105      	bne.n	801d04e <json_value_init_object+0x46>
        parson_free(new_value);
 801d042:	4b06      	ldr	r3, [pc, #24]	; (801d05c <json_value_init_object+0x54>)
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	6878      	ldr	r0, [r7, #4]
 801d048:	4798      	blx	r3
        return NULL;
 801d04a:	2300      	movs	r3, #0
 801d04c:	e000      	b.n	801d050 <json_value_init_object+0x48>
    }
    return new_value;
 801d04e:	687b      	ldr	r3, [r7, #4]
}
 801d050:	4618      	mov	r0, r3
 801d052:	3708      	adds	r7, #8
 801d054:	46bd      	mov	sp, r7
 801d056:	bd80      	pop	{r7, pc}
 801d058:	20000084 	.word	0x20000084
 801d05c:	20000088 	.word	0x20000088

0801d060 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 801d060:	b580      	push	{r7, lr}
 801d062:	b082      	sub	sp, #8
 801d064:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d066:	4b12      	ldr	r3, [pc, #72]	; (801d0b0 <json_value_init_array+0x50>)
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	2010      	movs	r0, #16
 801d06c:	4798      	blx	r3
 801d06e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	2b00      	cmp	r3, #0
 801d074:	d101      	bne.n	801d07a <json_value_init_array+0x1a>
        return NULL;
 801d076:	2300      	movs	r3, #0
 801d078:	e016      	b.n	801d0a8 <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	2200      	movs	r2, #0
 801d07e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	2205      	movs	r2, #5
 801d084:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_init(new_value);
 801d086:	6878      	ldr	r0, [r7, #4]
 801d088:	f7fd ffa4 	bl	801afd4 <json_array_init>
 801d08c:	4602      	mov	r2, r0
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	689b      	ldr	r3, [r3, #8]
 801d096:	2b00      	cmp	r3, #0
 801d098:	d105      	bne.n	801d0a6 <json_value_init_array+0x46>
        parson_free(new_value);
 801d09a:	4b06      	ldr	r3, [pc, #24]	; (801d0b4 <json_value_init_array+0x54>)
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	6878      	ldr	r0, [r7, #4]
 801d0a0:	4798      	blx	r3
        return NULL;
 801d0a2:	2300      	movs	r3, #0
 801d0a4:	e000      	b.n	801d0a8 <json_value_init_array+0x48>
    }
    return new_value;
 801d0a6:	687b      	ldr	r3, [r7, #4]
}
 801d0a8:	4618      	mov	r0, r3
 801d0aa:	3708      	adds	r7, #8
 801d0ac:	46bd      	mov	sp, r7
 801d0ae:	bd80      	pop	{r7, pc}
 801d0b0:	20000084 	.word	0x20000084
 801d0b4:	20000088 	.word	0x20000088

0801d0b8 <json_value_init_string>:

JSON_Value * json_value_init_string(const char *string) {
 801d0b8:	b580      	push	{r7, lr}
 801d0ba:	b086      	sub	sp, #24
 801d0bc:	af00      	add	r7, sp, #0
 801d0be:	6078      	str	r0, [r7, #4]
    char *copy = NULL;
 801d0c0:	2300      	movs	r3, #0
 801d0c2:	617b      	str	r3, [r7, #20]
    JSON_Value *value;
    size_t string_len = 0;
 801d0c4:	2300      	movs	r3, #0
 801d0c6:	613b      	str	r3, [r7, #16]
    if (string == NULL) {
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d101      	bne.n	801d0d2 <json_value_init_string+0x1a>
        return NULL;
 801d0ce:	2300      	movs	r3, #0
 801d0d0:	e022      	b.n	801d118 <json_value_init_string+0x60>
    }
    string_len = strlen(string);
 801d0d2:	6878      	ldr	r0, [r7, #4]
 801d0d4:	f7e3 f89e 	bl	8000214 <strlen>
 801d0d8:	6138      	str	r0, [r7, #16]
    if (!is_valid_utf8(string, string_len)) {
 801d0da:	6939      	ldr	r1, [r7, #16]
 801d0dc:	6878      	ldr	r0, [r7, #4]
 801d0de:	f7fd fccc 	bl	801aa7a <is_valid_utf8>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d101      	bne.n	801d0ec <json_value_init_string+0x34>
        return NULL;
 801d0e8:	2300      	movs	r3, #0
 801d0ea:	e015      	b.n	801d118 <json_value_init_string+0x60>
    }
    copy = parson_strndup(string, string_len);
 801d0ec:	6939      	ldr	r1, [r7, #16]
 801d0ee:	6878      	ldr	r0, [r7, #4]
 801d0f0:	f7fd fb24 	bl	801a73c <parson_strndup>
 801d0f4:	6178      	str	r0, [r7, #20]
    if (copy == NULL) {
 801d0f6:	697b      	ldr	r3, [r7, #20]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d101      	bne.n	801d100 <json_value_init_string+0x48>
        return NULL;
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	e00b      	b.n	801d118 <json_value_init_string+0x60>
    }
    value = json_value_init_string_no_copy(copy);
 801d100:	6978      	ldr	r0, [r7, #20]
 801d102:	f7fe f827 	bl	801b154 <json_value_init_string_no_copy>
 801d106:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801d108:	68fb      	ldr	r3, [r7, #12]
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d103      	bne.n	801d116 <json_value_init_string+0x5e>
        parson_free(copy);
 801d10e:	4b04      	ldr	r3, [pc, #16]	; (801d120 <json_value_init_string+0x68>)
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	6978      	ldr	r0, [r7, #20]
 801d114:	4798      	blx	r3
    }
    return value;
 801d116:	68fb      	ldr	r3, [r7, #12]
}
 801d118:	4618      	mov	r0, r3
 801d11a:	3718      	adds	r7, #24
 801d11c:	46bd      	mov	sp, r7
 801d11e:	bd80      	pop	{r7, pc}
 801d120:	20000088 	.word	0x20000088

0801d124 <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 801d124:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d126:	b085      	sub	sp, #20
 801d128:	af00      	add	r7, sp, #0
 801d12a:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 801d12e:	2300      	movs	r3, #0
 801d130:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 801d132:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d136:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d13a:	f7e3 fd1f 	bl	8000b7c <__aeabi_dcmpun>
 801d13e:	4603      	mov	r3, r0
 801d140:	2b00      	cmp	r3, #0
 801d142:	d121      	bne.n	801d188 <json_value_init_number+0x64>
 801d144:	683c      	ldr	r4, [r7, #0]
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801d14c:	2301      	movs	r3, #1
 801d14e:	461e      	mov	r6, r3
 801d150:	f04f 32ff 	mov.w	r2, #4294967295
 801d154:	4b1a      	ldr	r3, [pc, #104]	; (801d1c0 <json_value_init_number+0x9c>)
 801d156:	4620      	mov	r0, r4
 801d158:	4629      	mov	r1, r5
 801d15a:	f7e3 fd0f 	bl	8000b7c <__aeabi_dcmpun>
 801d15e:	4603      	mov	r3, r0
 801d160:	2b00      	cmp	r3, #0
 801d162:	d10b      	bne.n	801d17c <json_value_init_number+0x58>
 801d164:	f04f 32ff 	mov.w	r2, #4294967295
 801d168:	4b15      	ldr	r3, [pc, #84]	; (801d1c0 <json_value_init_number+0x9c>)
 801d16a:	4620      	mov	r0, r4
 801d16c:	4629      	mov	r1, r5
 801d16e:	f7e3 fce7 	bl	8000b40 <__aeabi_dcmple>
 801d172:	4603      	mov	r3, r0
 801d174:	2b00      	cmp	r3, #0
 801d176:	d101      	bne.n	801d17c <json_value_init_number+0x58>
 801d178:	2300      	movs	r3, #0
 801d17a:	461e      	mov	r6, r3
 801d17c:	b2f3      	uxtb	r3, r6
 801d17e:	f083 0301 	eor.w	r3, r3, #1
 801d182:	b2db      	uxtb	r3, r3
 801d184:	2b00      	cmp	r3, #0
 801d186:	d001      	beq.n	801d18c <json_value_init_number+0x68>
        return NULL;
 801d188:	2300      	movs	r3, #0
 801d18a:	e015      	b.n	801d1b8 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d18c:	4b0d      	ldr	r3, [pc, #52]	; (801d1c4 <json_value_init_number+0xa0>)
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	2010      	movs	r0, #16
 801d192:	4798      	blx	r3
 801d194:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d101      	bne.n	801d1a0 <json_value_init_number+0x7c>
        return NULL;
 801d19c:	2300      	movs	r3, #0
 801d19e:	e00b      	b.n	801d1b8 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	2200      	movs	r2, #0
 801d1a4:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	2203      	movs	r2, #3
 801d1aa:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 801d1ac:	68f9      	ldr	r1, [r7, #12]
 801d1ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d1b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 801d1b6:	68fb      	ldr	r3, [r7, #12]
}
 801d1b8:	4618      	mov	r0, r3
 801d1ba:	3714      	adds	r7, #20
 801d1bc:	46bd      	mov	sp, r7
 801d1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1c0:	7fefffff 	.word	0x7fefffff
 801d1c4:	20000084 	.word	0x20000084

0801d1c8 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 801d1c8:	b580      	push	{r7, lr}
 801d1ca:	b084      	sub	sp, #16
 801d1cc:	af00      	add	r7, sp, #0
 801d1ce:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d1d0:	4b0e      	ldr	r3, [pc, #56]	; (801d20c <json_value_init_boolean+0x44>)
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	2010      	movs	r0, #16
 801d1d6:	4798      	blx	r3
 801d1d8:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d101      	bne.n	801d1e4 <json_value_init_boolean+0x1c>
        return NULL;
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	e00f      	b.n	801d204 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 801d1e4:	68fb      	ldr	r3, [r7, #12]
 801d1e6:	2200      	movs	r2, #0
 801d1e8:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 801d1ea:	68fb      	ldr	r3, [r7, #12]
 801d1ec:	2206      	movs	r2, #6
 801d1ee:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	bf14      	ite	ne
 801d1f6:	2301      	movne	r3, #1
 801d1f8:	2300      	moveq	r3, #0
 801d1fa:	b2db      	uxtb	r3, r3
 801d1fc:	461a      	mov	r2, r3
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	609a      	str	r2, [r3, #8]
    return new_value;
 801d202:	68fb      	ldr	r3, [r7, #12]
}
 801d204:	4618      	mov	r0, r3
 801d206:	3710      	adds	r7, #16
 801d208:	46bd      	mov	sp, r7
 801d20a:	bd80      	pop	{r7, pc}
 801d20c:	20000084 	.word	0x20000084

0801d210 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 801d210:	b580      	push	{r7, lr}
 801d212:	b082      	sub	sp, #8
 801d214:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d216:	4b0a      	ldr	r3, [pc, #40]	; (801d240 <json_value_init_null+0x30>)
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	2010      	movs	r0, #16
 801d21c:	4798      	blx	r3
 801d21e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	2b00      	cmp	r3, #0
 801d224:	d101      	bne.n	801d22a <json_value_init_null+0x1a>
        return NULL;
 801d226:	2300      	movs	r3, #0
 801d228:	e006      	b.n	801d238 <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	2200      	movs	r2, #0
 801d22e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 801d230:	687b      	ldr	r3, [r7, #4]
 801d232:	2201      	movs	r2, #1
 801d234:	605a      	str	r2, [r3, #4]
    return new_value;
 801d236:	687b      	ldr	r3, [r7, #4]
}
 801d238:	4618      	mov	r0, r3
 801d23a:	3708      	adds	r7, #8
 801d23c:	46bd      	mov	sp, r7
 801d23e:	bd80      	pop	{r7, pc}
 801d240:	20000084 	.word	0x20000084

0801d244 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 801d244:	b580      	push	{r7, lr}
 801d246:	b096      	sub	sp, #88	; 0x58
 801d248:	af02      	add	r7, sp, #8
 801d24a:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 801d24c:	f107 030c 	add.w	r3, r7, #12
 801d250:	9300      	str	r3, [sp, #0]
 801d252:	2300      	movs	r3, #0
 801d254:	2200      	movs	r2, #0
 801d256:	2100      	movs	r1, #0
 801d258:	6878      	ldr	r0, [r7, #4]
 801d25a:	f7fe fcff 	bl	801bc5c <json_serialize_to_buffer_r>
 801d25e:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801d260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d262:	2b00      	cmp	r3, #0
 801d264:	db02      	blt.n	801d26c <json_serialization_size+0x28>
 801d266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d268:	3301      	adds	r3, #1
 801d26a:	e000      	b.n	801d26e <json_serialization_size+0x2a>
 801d26c:	2300      	movs	r3, #0
}
 801d26e:	4618      	mov	r0, r3
 801d270:	3750      	adds	r7, #80	; 0x50
 801d272:	46bd      	mov	sp, r7
 801d274:	bd80      	pop	{r7, pc}

0801d276 <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801d276:	b580      	push	{r7, lr}
 801d278:	b088      	sub	sp, #32
 801d27a:	af02      	add	r7, sp, #8
 801d27c:	60f8      	str	r0, [r7, #12]
 801d27e:	60b9      	str	r1, [r7, #8]
 801d280:	607a      	str	r2, [r7, #4]
    int written = -1;
 801d282:	f04f 33ff 	mov.w	r3, #4294967295
 801d286:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 801d288:	68f8      	ldr	r0, [r7, #12]
 801d28a:	f7ff ffdb 	bl	801d244 <json_serialization_size>
 801d28e:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801d290:	693b      	ldr	r3, [r7, #16]
 801d292:	2b00      	cmp	r3, #0
 801d294:	d003      	beq.n	801d29e <json_serialize_to_buffer+0x28>
 801d296:	687a      	ldr	r2, [r7, #4]
 801d298:	693b      	ldr	r3, [r7, #16]
 801d29a:	429a      	cmp	r2, r3
 801d29c:	d202      	bcs.n	801d2a4 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 801d29e:	f04f 33ff 	mov.w	r3, #4294967295
 801d2a2:	e00f      	b.n	801d2c4 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 0, NULL);
 801d2a4:	2300      	movs	r3, #0
 801d2a6:	9300      	str	r3, [sp, #0]
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	68b9      	ldr	r1, [r7, #8]
 801d2ae:	68f8      	ldr	r0, [r7, #12]
 801d2b0:	f7fe fcd4 	bl	801bc5c <json_serialize_to_buffer_r>
 801d2b4:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801d2b6:	697b      	ldr	r3, [r7, #20]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	da02      	bge.n	801d2c2 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 801d2bc:	f04f 33ff 	mov.w	r3, #4294967295
 801d2c0:	e000      	b.n	801d2c4 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 801d2c2:	2300      	movs	r3, #0
}
 801d2c4:	4618      	mov	r0, r3
 801d2c6:	3718      	adds	r7, #24
 801d2c8:	46bd      	mov	sp, r7
 801d2ca:	bd80      	pop	{r7, pc}

0801d2cc <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 801d2cc:	b580      	push	{r7, lr}
 801d2ce:	b086      	sub	sp, #24
 801d2d0:	af00      	add	r7, sp, #0
 801d2d2:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801d2d4:	f04f 33ff 	mov.w	r3, #4294967295
 801d2d8:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 801d2da:	6878      	ldr	r0, [r7, #4]
 801d2dc:	f7ff ffb2 	bl	801d244 <json_serialization_size>
 801d2e0:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801d2e2:	2300      	movs	r3, #0
 801d2e4:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801d2e6:	693b      	ldr	r3, [r7, #16]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d101      	bne.n	801d2f0 <json_serialize_to_string+0x24>
        return NULL;
 801d2ec:	2300      	movs	r3, #0
 801d2ee:	e019      	b.n	801d324 <json_serialize_to_string+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801d2f0:	4b0e      	ldr	r3, [pc, #56]	; (801d32c <json_serialize_to_string+0x60>)
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	6938      	ldr	r0, [r7, #16]
 801d2f6:	4798      	blx	r3
 801d2f8:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d101      	bne.n	801d304 <json_serialize_to_string+0x38>
        return NULL;
 801d300:	2300      	movs	r3, #0
 801d302:	e00f      	b.n	801d324 <json_serialize_to_string+0x58>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 801d304:	693a      	ldr	r2, [r7, #16]
 801d306:	68f9      	ldr	r1, [r7, #12]
 801d308:	6878      	ldr	r0, [r7, #4]
 801d30a:	f7ff ffb4 	bl	801d276 <json_serialize_to_buffer>
 801d30e:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801d310:	697b      	ldr	r3, [r7, #20]
 801d312:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d316:	d104      	bne.n	801d322 <json_serialize_to_string+0x56>
        json_free_serialized_string(buf);
 801d318:	68f8      	ldr	r0, [r7, #12]
 801d31a:	f000 f87f 	bl	801d41c <json_free_serialized_string>
        return NULL;
 801d31e:	2300      	movs	r3, #0
 801d320:	e000      	b.n	801d324 <json_serialize_to_string+0x58>
    }
    return buf;
 801d322:	68fb      	ldr	r3, [r7, #12]
}
 801d324:	4618      	mov	r0, r3
 801d326:	3718      	adds	r7, #24
 801d328:	46bd      	mov	sp, r7
 801d32a:	bd80      	pop	{r7, pc}
 801d32c:	20000084 	.word	0x20000084

0801d330 <json_serialization_size_pretty>:

size_t json_serialization_size_pretty(const JSON_Value *value) {
 801d330:	b580      	push	{r7, lr}
 801d332:	b096      	sub	sp, #88	; 0x58
 801d334:	af02      	add	r7, sp, #8
 801d336:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 801d338:	f107 030c 	add.w	r3, r7, #12
 801d33c:	9300      	str	r3, [sp, #0]
 801d33e:	2301      	movs	r3, #1
 801d340:	2200      	movs	r2, #0
 801d342:	2100      	movs	r1, #0
 801d344:	6878      	ldr	r0, [r7, #4]
 801d346:	f7fe fc89 	bl	801bc5c <json_serialize_to_buffer_r>
 801d34a:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801d34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d34e:	2b00      	cmp	r3, #0
 801d350:	db02      	blt.n	801d358 <json_serialization_size_pretty+0x28>
 801d352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d354:	3301      	adds	r3, #1
 801d356:	e000      	b.n	801d35a <json_serialization_size_pretty+0x2a>
 801d358:	2300      	movs	r3, #0
}
 801d35a:	4618      	mov	r0, r3
 801d35c:	3750      	adds	r7, #80	; 0x50
 801d35e:	46bd      	mov	sp, r7
 801d360:	bd80      	pop	{r7, pc}

0801d362 <json_serialize_to_buffer_pretty>:

JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801d362:	b580      	push	{r7, lr}
 801d364:	b088      	sub	sp, #32
 801d366:	af02      	add	r7, sp, #8
 801d368:	60f8      	str	r0, [r7, #12]
 801d36a:	60b9      	str	r1, [r7, #8]
 801d36c:	607a      	str	r2, [r7, #4]
    int written = -1;
 801d36e:	f04f 33ff 	mov.w	r3, #4294967295
 801d372:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size_pretty(value);
 801d374:	68f8      	ldr	r0, [r7, #12]
 801d376:	f7ff ffdb 	bl	801d330 <json_serialization_size_pretty>
 801d37a:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801d37c:	693b      	ldr	r3, [r7, #16]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d003      	beq.n	801d38a <json_serialize_to_buffer_pretty+0x28>
 801d382:	687a      	ldr	r2, [r7, #4]
 801d384:	693b      	ldr	r3, [r7, #16]
 801d386:	429a      	cmp	r2, r3
 801d388:	d202      	bcs.n	801d390 <json_serialize_to_buffer_pretty+0x2e>
        return JSONFailure;
 801d38a:	f04f 33ff 	mov.w	r3, #4294967295
 801d38e:	e00f      	b.n	801d3b0 <json_serialize_to_buffer_pretty+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 1, NULL);
 801d390:	2300      	movs	r3, #0
 801d392:	9300      	str	r3, [sp, #0]
 801d394:	2301      	movs	r3, #1
 801d396:	2200      	movs	r2, #0
 801d398:	68b9      	ldr	r1, [r7, #8]
 801d39a:	68f8      	ldr	r0, [r7, #12]
 801d39c:	f7fe fc5e 	bl	801bc5c <json_serialize_to_buffer_r>
 801d3a0:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801d3a2:	697b      	ldr	r3, [r7, #20]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	da02      	bge.n	801d3ae <json_serialize_to_buffer_pretty+0x4c>
        return JSONFailure;
 801d3a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d3ac:	e000      	b.n	801d3b0 <json_serialize_to_buffer_pretty+0x4e>
    }
    return JSONSuccess;
 801d3ae:	2300      	movs	r3, #0
}
 801d3b0:	4618      	mov	r0, r3
 801d3b2:	3718      	adds	r7, #24
 801d3b4:	46bd      	mov	sp, r7
 801d3b6:	bd80      	pop	{r7, pc}

0801d3b8 <json_serialize_to_string_pretty>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string_pretty(const JSON_Value *value) {
 801d3b8:	b580      	push	{r7, lr}
 801d3ba:	b086      	sub	sp, #24
 801d3bc:	af00      	add	r7, sp, #0
 801d3be:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801d3c0:	f04f 33ff 	mov.w	r3, #4294967295
 801d3c4:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size_pretty(value);
 801d3c6:	6878      	ldr	r0, [r7, #4]
 801d3c8:	f7ff ffb2 	bl	801d330 <json_serialization_size_pretty>
 801d3cc:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801d3ce:	2300      	movs	r3, #0
 801d3d0:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801d3d2:	693b      	ldr	r3, [r7, #16]
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d101      	bne.n	801d3dc <json_serialize_to_string_pretty+0x24>
        return NULL;
 801d3d8:	2300      	movs	r3, #0
 801d3da:	e019      	b.n	801d410 <json_serialize_to_string_pretty+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801d3dc:	4b0e      	ldr	r3, [pc, #56]	; (801d418 <json_serialize_to_string_pretty+0x60>)
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	6938      	ldr	r0, [r7, #16]
 801d3e2:	4798      	blx	r3
 801d3e4:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d101      	bne.n	801d3f0 <json_serialize_to_string_pretty+0x38>
        return NULL;
 801d3ec:	2300      	movs	r3, #0
 801d3ee:	e00f      	b.n	801d410 <json_serialize_to_string_pretty+0x58>
    }
    serialization_result = json_serialize_to_buffer_pretty(value, buf, buf_size_bytes);
 801d3f0:	693a      	ldr	r2, [r7, #16]
 801d3f2:	68f9      	ldr	r1, [r7, #12]
 801d3f4:	6878      	ldr	r0, [r7, #4]
 801d3f6:	f7ff ffb4 	bl	801d362 <json_serialize_to_buffer_pretty>
 801d3fa:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801d3fc:	697b      	ldr	r3, [r7, #20]
 801d3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d402:	d104      	bne.n	801d40e <json_serialize_to_string_pretty+0x56>
        json_free_serialized_string(buf);
 801d404:	68f8      	ldr	r0, [r7, #12]
 801d406:	f000 f809 	bl	801d41c <json_free_serialized_string>
        return NULL;
 801d40a:	2300      	movs	r3, #0
 801d40c:	e000      	b.n	801d410 <json_serialize_to_string_pretty+0x58>
    }
    return buf;
 801d40e:	68fb      	ldr	r3, [r7, #12]
}
 801d410:	4618      	mov	r0, r3
 801d412:	3718      	adds	r7, #24
 801d414:	46bd      	mov	sp, r7
 801d416:	bd80      	pop	{r7, pc}
 801d418:	20000084 	.word	0x20000084

0801d41c <json_free_serialized_string>:

void json_free_serialized_string(char *string) {
 801d41c:	b580      	push	{r7, lr}
 801d41e:	b082      	sub	sp, #8
 801d420:	af00      	add	r7, sp, #0
 801d422:	6078      	str	r0, [r7, #4]
    parson_free(string);
 801d424:	4b03      	ldr	r3, [pc, #12]	; (801d434 <json_free_serialized_string+0x18>)
 801d426:	681b      	ldr	r3, [r3, #0]
 801d428:	6878      	ldr	r0, [r7, #4]
 801d42a:	4798      	blx	r3
}
 801d42c:	bf00      	nop
 801d42e:	3708      	adds	r7, #8
 801d430:	46bd      	mov	sp, r7
 801d432:	bd80      	pop	{r7, pc}
 801d434:	20000088 	.word	0x20000088

0801d438 <json_array_append_value>:
    }
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
 801d438:	b580      	push	{r7, lr}
 801d43a:	b082      	sub	sp, #8
 801d43c:	af00      	add	r7, sp, #0
 801d43e:	6078      	str	r0, [r7, #4]
 801d440:	6039      	str	r1, [r7, #0]
    if (array == NULL || value == NULL || value->parent != NULL) {
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d006      	beq.n	801d456 <json_array_append_value+0x1e>
 801d448:	683b      	ldr	r3, [r7, #0]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d003      	beq.n	801d456 <json_array_append_value+0x1e>
 801d44e:	683b      	ldr	r3, [r7, #0]
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	2b00      	cmp	r3, #0
 801d454:	d002      	beq.n	801d45c <json_array_append_value+0x24>
        return JSONFailure;
 801d456:	f04f 33ff 	mov.w	r3, #4294967295
 801d45a:	e004      	b.n	801d466 <json_array_append_value+0x2e>
    }
    return json_array_add(array, value);
 801d45c:	6839      	ldr	r1, [r7, #0]
 801d45e:	6878      	ldr	r0, [r7, #4]
 801d460:	f7fd fdda 	bl	801b018 <json_array_add>
 801d464:	4603      	mov	r3, r0
}
 801d466:	4618      	mov	r0, r3
 801d468:	3708      	adds	r7, #8
 801d46a:	46bd      	mov	sp, r7
 801d46c:	bd80      	pop	{r7, pc}

0801d46e <json_array_append_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_array_append_number(JSON_Array *array, double number) {
 801d46e:	b580      	push	{r7, lr}
 801d470:	b086      	sub	sp, #24
 801d472:	af00      	add	r7, sp, #0
 801d474:	60f8      	str	r0, [r7, #12]
 801d476:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801d47a:	ed97 0b00 	vldr	d0, [r7]
 801d47e:	f7ff fe51 	bl	801d124 <json_value_init_number>
 801d482:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d484:	697b      	ldr	r3, [r7, #20]
 801d486:	2b00      	cmp	r3, #0
 801d488:	d102      	bne.n	801d490 <json_array_append_number+0x22>
        return JSONFailure;
 801d48a:	f04f 33ff 	mov.w	r3, #4294967295
 801d48e:	e00e      	b.n	801d4ae <json_array_append_number+0x40>
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 801d490:	6979      	ldr	r1, [r7, #20]
 801d492:	68f8      	ldr	r0, [r7, #12]
 801d494:	f7ff ffd0 	bl	801d438 <json_array_append_value>
 801d498:	4603      	mov	r3, r0
 801d49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d49e:	d105      	bne.n	801d4ac <json_array_append_number+0x3e>
        json_value_free(value);
 801d4a0:	6978      	ldr	r0, [r7, #20]
 801d4a2:	f7ff fd83 	bl	801cfac <json_value_free>
        return JSONFailure;
 801d4a6:	f04f 33ff 	mov.w	r3, #4294967295
 801d4aa:	e000      	b.n	801d4ae <json_array_append_number+0x40>
    }
    return JSONSuccess;
 801d4ac:	2300      	movs	r3, #0
}
 801d4ae:	4618      	mov	r0, r3
 801d4b0:	3718      	adds	r7, #24
 801d4b2:	46bd      	mov	sp, r7
 801d4b4:	bd80      	pop	{r7, pc}

0801d4b6 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801d4b6:	b580      	push	{r7, lr}
 801d4b8:	b086      	sub	sp, #24
 801d4ba:	af00      	add	r7, sp, #0
 801d4bc:	60f8      	str	r0, [r7, #12]
 801d4be:	60b9      	str	r1, [r7, #8]
 801d4c0:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 801d4c2:	2300      	movs	r3, #0
 801d4c4:	617b      	str	r3, [r7, #20]
    JSON_Value *old_value;
    if (object == NULL || name == NULL || value == NULL || value->parent != NULL) {
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	d009      	beq.n	801d4e0 <json_object_set_value+0x2a>
 801d4cc:	68bb      	ldr	r3, [r7, #8]
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	d006      	beq.n	801d4e0 <json_object_set_value+0x2a>
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d003      	beq.n	801d4e0 <json_object_set_value+0x2a>
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d002      	beq.n	801d4e6 <json_object_set_value+0x30>
        return JSONFailure;
 801d4e0:	f04f 33ff 	mov.w	r3, #4294967295
 801d4e4:	e039      	b.n	801d55a <json_object_set_value+0xa4>
    }
    old_value = json_object_get_value(object, name);
 801d4e6:	68b9      	ldr	r1, [r7, #8]
 801d4e8:	68f8      	ldr	r0, [r7, #12]
 801d4ea:	f7ff fbd1 	bl	801cc90 <json_object_get_value>
 801d4ee:	6138      	str	r0, [r7, #16]
    if (old_value != NULL) { /* free and overwrite old value */
 801d4f0:	693b      	ldr	r3, [r7, #16]
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d02b      	beq.n	801d54e <json_object_set_value+0x98>
        json_value_free(old_value);
 801d4f6:	6938      	ldr	r0, [r7, #16]
 801d4f8:	f7ff fd58 	bl	801cfac <json_value_free>
        for (i = 0; i < json_object_get_count(object); i++) {
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	617b      	str	r3, [r7, #20]
 801d500:	e01e      	b.n	801d540 <json_object_set_value+0x8a>
            if (strcmp(object->names[i], name) == 0) {
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	685a      	ldr	r2, [r3, #4]
 801d506:	697b      	ldr	r3, [r7, #20]
 801d508:	009b      	lsls	r3, r3, #2
 801d50a:	4413      	add	r3, r2
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	68b9      	ldr	r1, [r7, #8]
 801d510:	4618      	mov	r0, r3
 801d512:	f7e2 fe75 	bl	8000200 <strcmp>
 801d516:	4603      	mov	r3, r0
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d10e      	bne.n	801d53a <json_object_set_value+0x84>
                value->parent = json_object_get_wrapping_value(object);
 801d51c:	68f8      	ldr	r0, [r7, #12]
 801d51e:	f7ff fc65 	bl	801cdec <json_object_get_wrapping_value>
 801d522:	4602      	mov	r2, r0
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	601a      	str	r2, [r3, #0]
                object->values[i] = value;
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	689a      	ldr	r2, [r3, #8]
 801d52c:	697b      	ldr	r3, [r7, #20]
 801d52e:	009b      	lsls	r3, r3, #2
 801d530:	4413      	add	r3, r2
 801d532:	687a      	ldr	r2, [r7, #4]
 801d534:	601a      	str	r2, [r3, #0]
                return JSONSuccess;
 801d536:	2300      	movs	r3, #0
 801d538:	e00f      	b.n	801d55a <json_object_set_value+0xa4>
        for (i = 0; i < json_object_get_count(object); i++) {
 801d53a:	697b      	ldr	r3, [r7, #20]
 801d53c:	3301      	adds	r3, #1
 801d53e:	617b      	str	r3, [r7, #20]
 801d540:	68f8      	ldr	r0, [r7, #12]
 801d542:	f7ff fc27 	bl	801cd94 <json_object_get_count>
 801d546:	4602      	mov	r2, r0
 801d548:	697b      	ldr	r3, [r7, #20]
 801d54a:	4293      	cmp	r3, r2
 801d54c:	d3d9      	bcc.n	801d502 <json_object_set_value+0x4c>
            }
        }
    }
    /* add new key value pair */
    return json_object_add(object, name, value);
 801d54e:	687a      	ldr	r2, [r7, #4]
 801d550:	68b9      	ldr	r1, [r7, #8]
 801d552:	68f8      	ldr	r0, [r7, #12]
 801d554:	f7fd fb1a 	bl	801ab8c <json_object_add>
 801d558:	4603      	mov	r3, r0
}
 801d55a:	4618      	mov	r0, r3
 801d55c:	3718      	adds	r7, #24
 801d55e:	46bd      	mov	sp, r7
 801d560:	bd80      	pop	{r7, pc}

0801d562 <json_object_dotset_value>:

JSON_Status json_object_set_null(JSON_Object *object, const char *name) {
    return json_object_set_value(object, name, json_value_init_null());
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801d562:	b580      	push	{r7, lr}
 801d564:	b08c      	sub	sp, #48	; 0x30
 801d566:	af00      	add	r7, sp, #0
 801d568:	60f8      	str	r0, [r7, #12]
 801d56a:	60b9      	str	r1, [r7, #8]
 801d56c:	607a      	str	r2, [r7, #4]
    const char *dot_pos = NULL;
 801d56e:	2300      	movs	r3, #0
 801d570:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Value *temp_value = NULL, *new_value = NULL;
 801d572:	2300      	movs	r3, #0
 801d574:	62bb      	str	r3, [r7, #40]	; 0x28
 801d576:	2300      	movs	r3, #0
 801d578:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Object *temp_object = NULL, *new_object = NULL;
 801d57a:	2300      	movs	r3, #0
 801d57c:	623b      	str	r3, [r7, #32]
 801d57e:	2300      	movs	r3, #0
 801d580:	61fb      	str	r3, [r7, #28]
    JSON_Status status = JSONFailure;
 801d582:	f04f 33ff 	mov.w	r3, #4294967295
 801d586:	61bb      	str	r3, [r7, #24]
    size_t name_len = 0;
 801d588:	2300      	movs	r3, #0
 801d58a:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801d58c:	68fb      	ldr	r3, [r7, #12]
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d005      	beq.n	801d59e <json_object_dotset_value+0x3c>
 801d592:	68bb      	ldr	r3, [r7, #8]
 801d594:	2b00      	cmp	r3, #0
 801d596:	d002      	beq.n	801d59e <json_object_dotset_value+0x3c>
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d102      	bne.n	801d5a4 <json_object_dotset_value+0x42>
        return JSONFailure;
 801d59e:	f04f 33ff 	mov.w	r3, #4294967295
 801d5a2:	e067      	b.n	801d674 <json_object_dotset_value+0x112>
    }
    dot_pos = strchr(name, '.');
 801d5a4:	212e      	movs	r1, #46	; 0x2e
 801d5a6:	68b8      	ldr	r0, [r7, #8]
 801d5a8:	f001 fa22 	bl	801e9f0 <strchr>
 801d5ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (dot_pos == NULL) {
 801d5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d106      	bne.n	801d5c2 <json_object_dotset_value+0x60>
        return json_object_set_value(object, name, value);
 801d5b4:	687a      	ldr	r2, [r7, #4]
 801d5b6:	68b9      	ldr	r1, [r7, #8]
 801d5b8:	68f8      	ldr	r0, [r7, #12]
 801d5ba:	f7ff ff7c 	bl	801d4b6 <json_object_set_value>
 801d5be:	4603      	mov	r3, r0
 801d5c0:	e058      	b.n	801d674 <json_object_dotset_value+0x112>
    }
    name_len = dot_pos - name;
 801d5c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d5c4:	68bb      	ldr	r3, [r7, #8]
 801d5c6:	1ad3      	subs	r3, r2, r3
 801d5c8:	617b      	str	r3, [r7, #20]
    temp_value = json_object_getn_value(object, name, name_len);
 801d5ca:	697a      	ldr	r2, [r7, #20]
 801d5cc:	68b9      	ldr	r1, [r7, #8]
 801d5ce:	68f8      	ldr	r0, [r7, #12]
 801d5d0:	f7fd fbd8 	bl	801ad84 <json_object_getn_value>
 801d5d4:	62b8      	str	r0, [r7, #40]	; 0x28
    if (temp_value) {
 801d5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d015      	beq.n	801d608 <json_object_dotset_value+0xa6>
        /* Don't overwrite existing non-object (unlike json_object_set_value, but it shouldn't be changed at this point) */
        if (json_value_get_type(temp_value) != JSONObject) {
 801d5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d5de:	f7ff fc6e 	bl	801cebe <json_value_get_type>
 801d5e2:	4603      	mov	r3, r0
 801d5e4:	2b04      	cmp	r3, #4
 801d5e6:	d002      	beq.n	801d5ee <json_object_dotset_value+0x8c>
            return JSONFailure;
 801d5e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d5ec:	e042      	b.n	801d674 <json_object_dotset_value+0x112>
        }
        temp_object = json_value_get_object(temp_value);
 801d5ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d5f0:	f7ff fc77 	bl	801cee2 <json_value_get_object>
 801d5f4:	6238      	str	r0, [r7, #32]
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 801d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5f8:	3301      	adds	r3, #1
 801d5fa:	687a      	ldr	r2, [r7, #4]
 801d5fc:	4619      	mov	r1, r3
 801d5fe:	6a38      	ldr	r0, [r7, #32]
 801d600:	f7ff ffaf 	bl	801d562 <json_object_dotset_value>
 801d604:	4603      	mov	r3, r0
 801d606:	e035      	b.n	801d674 <json_object_dotset_value+0x112>
    }
    new_value = json_value_init_object();
 801d608:	f7ff fcfe 	bl	801d008 <json_value_init_object>
 801d60c:	6278      	str	r0, [r7, #36]	; 0x24
    if (new_value == NULL) {
 801d60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d610:	2b00      	cmp	r3, #0
 801d612:	d102      	bne.n	801d61a <json_object_dotset_value+0xb8>
        return JSONFailure;
 801d614:	f04f 33ff 	mov.w	r3, #4294967295
 801d618:	e02c      	b.n	801d674 <json_object_dotset_value+0x112>
    }
    new_object = json_value_get_object(new_value);
 801d61a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d61c:	f7ff fc61 	bl	801cee2 <json_value_get_object>
 801d620:	61f8      	str	r0, [r7, #28]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 801d622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d624:	3301      	adds	r3, #1
 801d626:	687a      	ldr	r2, [r7, #4]
 801d628:	4619      	mov	r1, r3
 801d62a:	69f8      	ldr	r0, [r7, #28]
 801d62c:	f7ff ff99 	bl	801d562 <json_object_dotset_value>
 801d630:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801d632:	69bb      	ldr	r3, [r7, #24]
 801d634:	2b00      	cmp	r3, #0
 801d636:	d005      	beq.n	801d644 <json_object_dotset_value+0xe2>
        json_value_free(new_value);
 801d638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d63a:	f7ff fcb7 	bl	801cfac <json_value_free>
        return JSONFailure;
 801d63e:	f04f 33ff 	mov.w	r3, #4294967295
 801d642:	e017      	b.n	801d674 <json_object_dotset_value+0x112>
    }
    status = json_object_addn(object, name, name_len, new_value);
 801d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d646:	697a      	ldr	r2, [r7, #20]
 801d648:	68b9      	ldr	r1, [r7, #8]
 801d64a:	68f8      	ldr	r0, [r7, #12]
 801d64c:	f7fd fab8 	bl	801abc0 <json_object_addn>
 801d650:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801d652:	69bb      	ldr	r3, [r7, #24]
 801d654:	2b00      	cmp	r3, #0
 801d656:	d00c      	beq.n	801d672 <json_object_dotset_value+0x110>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 801d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d65a:	3301      	adds	r3, #1
 801d65c:	2200      	movs	r2, #0
 801d65e:	4619      	mov	r1, r3
 801d660:	69f8      	ldr	r0, [r7, #28]
 801d662:	f7fd fc43 	bl	801aeec <json_object_dotremove_internal>
        json_value_free(new_value);
 801d666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d668:	f7ff fca0 	bl	801cfac <json_value_free>
        return JSONFailure;
 801d66c:	f04f 33ff 	mov.w	r3, #4294967295
 801d670:	e000      	b.n	801d674 <json_object_dotset_value+0x112>
    }
    return JSONSuccess;
 801d672:	2300      	movs	r3, #0
}
 801d674:	4618      	mov	r0, r3
 801d676:	3730      	adds	r7, #48	; 0x30
 801d678:	46bd      	mov	sp, r7
 801d67a:	bd80      	pop	{r7, pc}

0801d67c <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801d67c:	b580      	push	{r7, lr}
 801d67e:	b086      	sub	sp, #24
 801d680:	af00      	add	r7, sp, #0
 801d682:	60f8      	str	r0, [r7, #12]
 801d684:	60b9      	str	r1, [r7, #8]
 801d686:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_string(string);
 801d688:	6878      	ldr	r0, [r7, #4]
 801d68a:	f7ff fd15 	bl	801d0b8 <json_value_init_string>
 801d68e:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d690:	697b      	ldr	r3, [r7, #20]
 801d692:	2b00      	cmp	r3, #0
 801d694:	d102      	bne.n	801d69c <json_object_dotset_string+0x20>
        return JSONFailure;
 801d696:	f04f 33ff 	mov.w	r3, #4294967295
 801d69a:	e00f      	b.n	801d6bc <json_object_dotset_string+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801d69c:	697a      	ldr	r2, [r7, #20]
 801d69e:	68b9      	ldr	r1, [r7, #8]
 801d6a0:	68f8      	ldr	r0, [r7, #12]
 801d6a2:	f7ff ff5e 	bl	801d562 <json_object_dotset_value>
 801d6a6:	4603      	mov	r3, r0
 801d6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6ac:	d105      	bne.n	801d6ba <json_object_dotset_string+0x3e>
        json_value_free(value);
 801d6ae:	6978      	ldr	r0, [r7, #20]
 801d6b0:	f7ff fc7c 	bl	801cfac <json_value_free>
        return JSONFailure;
 801d6b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d6b8:	e000      	b.n	801d6bc <json_object_dotset_string+0x40>
    }
    return JSONSuccess;
 801d6ba:	2300      	movs	r3, #0
}
 801d6bc:	4618      	mov	r0, r3
 801d6be:	3718      	adds	r7, #24
 801d6c0:	46bd      	mov	sp, r7
 801d6c2:	bd80      	pop	{r7, pc}

0801d6c4 <json_object_dotset_number>:

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 801d6c4:	b580      	push	{r7, lr}
 801d6c6:	b086      	sub	sp, #24
 801d6c8:	af00      	add	r7, sp, #0
 801d6ca:	60f8      	str	r0, [r7, #12]
 801d6cc:	60b9      	str	r1, [r7, #8]
 801d6ce:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801d6d2:	ed97 0b00 	vldr	d0, [r7]
 801d6d6:	f7ff fd25 	bl	801d124 <json_value_init_number>
 801d6da:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d6dc:	697b      	ldr	r3, [r7, #20]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d102      	bne.n	801d6e8 <json_object_dotset_number+0x24>
        return JSONFailure;
 801d6e2:	f04f 33ff 	mov.w	r3, #4294967295
 801d6e6:	e00f      	b.n	801d708 <json_object_dotset_number+0x44>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801d6e8:	697a      	ldr	r2, [r7, #20]
 801d6ea:	68b9      	ldr	r1, [r7, #8]
 801d6ec:	68f8      	ldr	r0, [r7, #12]
 801d6ee:	f7ff ff38 	bl	801d562 <json_object_dotset_value>
 801d6f2:	4603      	mov	r3, r0
 801d6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6f8:	d105      	bne.n	801d706 <json_object_dotset_number+0x42>
        json_value_free(value);
 801d6fa:	6978      	ldr	r0, [r7, #20]
 801d6fc:	f7ff fc56 	bl	801cfac <json_value_free>
        return JSONFailure;
 801d700:	f04f 33ff 	mov.w	r3, #4294967295
 801d704:	e000      	b.n	801d708 <json_object_dotset_number+0x44>
    }
    return JSONSuccess;
 801d706:	2300      	movs	r3, #0
}
 801d708:	4618      	mov	r0, r3
 801d70a:	3718      	adds	r7, #24
 801d70c:	46bd      	mov	sp, r7
 801d70e:	bd80      	pop	{r7, pc}

0801d710 <json_object_dotset_boolean>:

JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 801d710:	b580      	push	{r7, lr}
 801d712:	b086      	sub	sp, #24
 801d714:	af00      	add	r7, sp, #0
 801d716:	60f8      	str	r0, [r7, #12]
 801d718:	60b9      	str	r1, [r7, #8]
 801d71a:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_boolean(boolean);
 801d71c:	6878      	ldr	r0, [r7, #4]
 801d71e:	f7ff fd53 	bl	801d1c8 <json_value_init_boolean>
 801d722:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d724:	697b      	ldr	r3, [r7, #20]
 801d726:	2b00      	cmp	r3, #0
 801d728:	d102      	bne.n	801d730 <json_object_dotset_boolean+0x20>
        return JSONFailure;
 801d72a:	f04f 33ff 	mov.w	r3, #4294967295
 801d72e:	e00f      	b.n	801d750 <json_object_dotset_boolean+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801d730:	697a      	ldr	r2, [r7, #20]
 801d732:	68b9      	ldr	r1, [r7, #8]
 801d734:	68f8      	ldr	r0, [r7, #12]
 801d736:	f7ff ff14 	bl	801d562 <json_object_dotset_value>
 801d73a:	4603      	mov	r3, r0
 801d73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d740:	d105      	bne.n	801d74e <json_object_dotset_boolean+0x3e>
        json_value_free(value);
 801d742:	6978      	ldr	r0, [r7, #20]
 801d744:	f7ff fc32 	bl	801cfac <json_value_free>
        return JSONFailure;
 801d748:	f04f 33ff 	mov.w	r3, #4294967295
 801d74c:	e000      	b.n	801d750 <json_object_dotset_boolean+0x40>
    }
    return JSONSuccess;
 801d74e:	2300      	movs	r3, #0
}
 801d750:	4618      	mov	r0, r3
 801d752:	3718      	adds	r7, #24
 801d754:	46bd      	mov	sp, r7
 801d756:	bd80      	pop	{r7, pc}

0801d758 <json_set_allocation_functions>:

int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
 801d758:	b480      	push	{r7}
 801d75a:	b083      	sub	sp, #12
 801d75c:	af00      	add	r7, sp, #0
 801d75e:	6078      	str	r0, [r7, #4]
 801d760:	6039      	str	r1, [r7, #0]
    parson_malloc = malloc_fun;
 801d762:	4a06      	ldr	r2, [pc, #24]	; (801d77c <json_set_allocation_functions+0x24>)
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	6013      	str	r3, [r2, #0]
    parson_free = free_fun;
 801d768:	4a05      	ldr	r2, [pc, #20]	; (801d780 <json_set_allocation_functions+0x28>)
 801d76a:	683b      	ldr	r3, [r7, #0]
 801d76c:	6013      	str	r3, [r2, #0]
}
 801d76e:	bf00      	nop
 801d770:	370c      	adds	r7, #12
 801d772:	46bd      	mov	sp, r7
 801d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d778:	4770      	bx	lr
 801d77a:	bf00      	nop
 801d77c:	20000084 	.word	0x20000084
 801d780:	20000088 	.word	0x20000088

0801d784 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801d784:	480d      	ldr	r0, [pc, #52]	; (801d7bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801d786:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 801d788:	f7e7 fc86 	bl	8005098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801d78c:	480c      	ldr	r0, [pc, #48]	; (801d7c0 <LoopForever+0x6>)
  ldr r1, =_edata
 801d78e:	490d      	ldr	r1, [pc, #52]	; (801d7c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 801d790:	4a0d      	ldr	r2, [pc, #52]	; (801d7c8 <LoopForever+0xe>)
  movs r3, #0
 801d792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801d794:	e002      	b.n	801d79c <LoopCopyDataInit>

0801d796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801d796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801d798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801d79a:	3304      	adds	r3, #4

0801d79c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801d79c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801d79e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801d7a0:	d3f9      	bcc.n	801d796 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801d7a2:	4a0a      	ldr	r2, [pc, #40]	; (801d7cc <LoopForever+0x12>)
  ldr r4, =_ebss
 801d7a4:	4c0a      	ldr	r4, [pc, #40]	; (801d7d0 <LoopForever+0x16>)
  movs r3, #0
 801d7a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 801d7a8:	e001      	b.n	801d7ae <LoopFillZerobss>

0801d7aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801d7aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801d7ac:	3204      	adds	r2, #4

0801d7ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801d7ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801d7b0:	d3fb      	bcc.n	801d7aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 801d7b2:	f000 fa91 	bl	801dcd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801d7b6:	f7e5 f9ad 	bl	8002b14 <main>

0801d7ba <LoopForever>:

LoopForever:
    b LoopForever
 801d7ba:	e7fe      	b.n	801d7ba <LoopForever>
  ldr   r0, =_estack
 801d7bc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 801d7c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801d7c4:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 801d7c8:	08023014 	.word	0x08023014
  ldr r2, =_sbss
 801d7cc:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 801d7d0:	20019248 	.word	0x20019248

0801d7d4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801d7d4:	e7fe      	b.n	801d7d4 <ADC1_IRQHandler>
	...

0801d7d8 <_sbrk>:




caddr_t _sbrk(int incr)
{
 801d7d8:	b580      	push	{r7, lr}
 801d7da:	b084      	sub	sp, #16
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	6078      	str	r0, [r7, #4]
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 801d7e0:	4b15      	ldr	r3, [pc, #84]	; (801d838 <_sbrk+0x60>)
 801d7e2:	681b      	ldr	r3, [r3, #0]
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d102      	bne.n	801d7ee <_sbrk+0x16>
		heap_end = &end;
 801d7e8:	4b13      	ldr	r3, [pc, #76]	; (801d838 <_sbrk+0x60>)
 801d7ea:	4a14      	ldr	r2, [pc, #80]	; (801d83c <_sbrk+0x64>)
 801d7ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801d7ee:	4b12      	ldr	r3, [pc, #72]	; (801d838 <_sbrk+0x60>)
 801d7f0:	681b      	ldr	r3, [r3, #0]
 801d7f2:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 801d7f4:	4b12      	ldr	r3, [pc, #72]	; (801d840 <_sbrk+0x68>)
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	681b      	ldr	r3, [r3, #0]
 801d7fa:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 801d7fc:	68bb      	ldr	r3, [r7, #8]
 801d7fe:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 801d802:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 801d804:	4b0c      	ldr	r3, [pc, #48]	; (801d838 <_sbrk+0x60>)
 801d806:	681a      	ldr	r2, [r3, #0]
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	4413      	add	r3, r2
 801d80c:	68ba      	ldr	r2, [r7, #8]
 801d80e:	429a      	cmp	r2, r3
 801d810:	d207      	bcs.n	801d822 <_sbrk+0x4a>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801d812:	f000 f8a3 	bl	801d95c <__errno>
 801d816:	4603      	mov	r3, r0
 801d818:	220c      	movs	r2, #12
 801d81a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801d81c:	f04f 33ff 	mov.w	r3, #4294967295
 801d820:	e006      	b.n	801d830 <_sbrk+0x58>
	}

	heap_end += incr;
 801d822:	4b05      	ldr	r3, [pc, #20]	; (801d838 <_sbrk+0x60>)
 801d824:	681a      	ldr	r2, [r3, #0]
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	4413      	add	r3, r2
 801d82a:	4a03      	ldr	r2, [pc, #12]	; (801d838 <_sbrk+0x60>)
 801d82c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801d82e:	68fb      	ldr	r3, [r7, #12]
}
 801d830:	4618      	mov	r0, r3
 801d832:	3710      	adds	r7, #16
 801d834:	46bd      	mov	sp, r7
 801d836:	bd80      	pop	{r7, pc}
 801d838:	2000fe6c 	.word	0x2000fe6c
 801d83c:	20019248 	.word	0x20019248
 801d840:	e000ed08 	.word	0xe000ed08

0801d844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801d844:	b480      	push	{r7}
 801d846:	af00      	add	r7, sp, #0
	return 1;
 801d848:	2301      	movs	r3, #1
}
 801d84a:	4618      	mov	r0, r3
 801d84c:	46bd      	mov	sp, r7
 801d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d852:	4770      	bx	lr

0801d854 <_kill>:

int _kill(int pid, int sig)
{
 801d854:	b580      	push	{r7, lr}
 801d856:	b082      	sub	sp, #8
 801d858:	af00      	add	r7, sp, #0
 801d85a:	6078      	str	r0, [r7, #4]
 801d85c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801d85e:	f000 f87d 	bl	801d95c <__errno>
 801d862:	4603      	mov	r3, r0
 801d864:	2216      	movs	r2, #22
 801d866:	601a      	str	r2, [r3, #0]
	return -1;
 801d868:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d86c:	4618      	mov	r0, r3
 801d86e:	3708      	adds	r7, #8
 801d870:	46bd      	mov	sp, r7
 801d872:	bd80      	pop	{r7, pc}

0801d874 <_exit>:

void _exit (int status)
{
 801d874:	b580      	push	{r7, lr}
 801d876:	b082      	sub	sp, #8
 801d878:	af00      	add	r7, sp, #0
 801d87a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801d87c:	f04f 31ff 	mov.w	r1, #4294967295
 801d880:	6878      	ldr	r0, [r7, #4]
 801d882:	f7ff ffe7 	bl	801d854 <_kill>
	while (1) {}
 801d886:	e7fe      	b.n	801d886 <_exit+0x12>

0801d888 <_write>:
}

int _write(int file, char *ptr, int len)
{
 801d888:	b580      	push	{r7, lr}
 801d88a:	b086      	sub	sp, #24
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	60f8      	str	r0, [r7, #12]
 801d890:	60b9      	str	r1, [r7, #8]
 801d892:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801d894:	2300      	movs	r3, #0
 801d896:	617b      	str	r3, [r7, #20]
 801d898:	e009      	b.n	801d8ae <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 801d89a:	68bb      	ldr	r3, [r7, #8]
 801d89c:	1c5a      	adds	r2, r3, #1
 801d89e:	60ba      	str	r2, [r7, #8]
 801d8a0:	781b      	ldrb	r3, [r3, #0]
 801d8a2:	4618      	mov	r0, r3
 801d8a4:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801d8a8:	697b      	ldr	r3, [r7, #20]
 801d8aa:	3301      	adds	r3, #1
 801d8ac:	617b      	str	r3, [r7, #20]
 801d8ae:	697a      	ldr	r2, [r7, #20]
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	429a      	cmp	r2, r3
 801d8b4:	dbf1      	blt.n	801d89a <_write+0x12>
		}
	return len;
 801d8b6:	687b      	ldr	r3, [r7, #4]
}
 801d8b8:	4618      	mov	r0, r3
 801d8ba:	3718      	adds	r7, #24
 801d8bc:	46bd      	mov	sp, r7
 801d8be:	bd80      	pop	{r7, pc}

0801d8c0 <_close>:

int _close(int file)
{
 801d8c0:	b480      	push	{r7}
 801d8c2:	b083      	sub	sp, #12
 801d8c4:	af00      	add	r7, sp, #0
 801d8c6:	6078      	str	r0, [r7, #4]
	return -1;
 801d8c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d8cc:	4618      	mov	r0, r3
 801d8ce:	370c      	adds	r7, #12
 801d8d0:	46bd      	mov	sp, r7
 801d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8d6:	4770      	bx	lr

0801d8d8 <_fstat>:

int _fstat(int file, struct stat *st)
{
 801d8d8:	b480      	push	{r7}
 801d8da:	b083      	sub	sp, #12
 801d8dc:	af00      	add	r7, sp, #0
 801d8de:	6078      	str	r0, [r7, #4]
 801d8e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801d8e2:	683b      	ldr	r3, [r7, #0]
 801d8e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801d8e8:	605a      	str	r2, [r3, #4]
	return 0;
 801d8ea:	2300      	movs	r3, #0
}
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	370c      	adds	r7, #12
 801d8f0:	46bd      	mov	sp, r7
 801d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8f6:	4770      	bx	lr

0801d8f8 <_isatty>:

int _isatty(int file)
{
 801d8f8:	b480      	push	{r7}
 801d8fa:	b083      	sub	sp, #12
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
	return 1;
 801d900:	2301      	movs	r3, #1
}
 801d902:	4618      	mov	r0, r3
 801d904:	370c      	adds	r7, #12
 801d906:	46bd      	mov	sp, r7
 801d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d90c:	4770      	bx	lr

0801d90e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801d90e:	b480      	push	{r7}
 801d910:	b085      	sub	sp, #20
 801d912:	af00      	add	r7, sp, #0
 801d914:	60f8      	str	r0, [r7, #12]
 801d916:	60b9      	str	r1, [r7, #8]
 801d918:	607a      	str	r2, [r7, #4]
	return 0;
 801d91a:	2300      	movs	r3, #0
}
 801d91c:	4618      	mov	r0, r3
 801d91e:	3714      	adds	r7, #20
 801d920:	46bd      	mov	sp, r7
 801d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d926:	4770      	bx	lr

0801d928 <_read>:

int _read(int file, char *ptr, int len)
{
 801d928:	b580      	push	{r7, lr}
 801d92a:	b084      	sub	sp, #16
 801d92c:	af00      	add	r7, sp, #0
 801d92e:	60f8      	str	r0, [r7, #12]
 801d930:	60b9      	str	r1, [r7, #8]
 801d932:	607a      	str	r2, [r7, #4]
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 801d934:	f3af 8000 	nop.w
 801d938:	4603      	mov	r3, r0
 801d93a:	b2da      	uxtb	r2, r3
 801d93c:	68bb      	ldr	r3, [r7, #8]
 801d93e:	701a      	strb	r2, [r3, #0]
	return 1;
 801d940:	2301      	movs	r3, #1
}
 801d942:	4618      	mov	r0, r3
 801d944:	3710      	adds	r7, #16
 801d946:	46bd      	mov	sp, r7
 801d948:	bd80      	pop	{r7, pc}
	...

0801d94c <calloc>:
 801d94c:	4b02      	ldr	r3, [pc, #8]	; (801d958 <calloc+0xc>)
 801d94e:	460a      	mov	r2, r1
 801d950:	4601      	mov	r1, r0
 801d952:	6818      	ldr	r0, [r3, #0]
 801d954:	f000 baa6 	b.w	801dea4 <_calloc_r>
 801d958:	2000008c 	.word	0x2000008c

0801d95c <__errno>:
 801d95c:	4b01      	ldr	r3, [pc, #4]	; (801d964 <__errno+0x8>)
 801d95e:	6818      	ldr	r0, [r3, #0]
 801d960:	4770      	bx	lr
 801d962:	bf00      	nop
 801d964:	2000008c 	.word	0x2000008c

0801d968 <__sflush_r>:
 801d968:	898a      	ldrh	r2, [r1, #12]
 801d96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d96e:	4605      	mov	r5, r0
 801d970:	0710      	lsls	r0, r2, #28
 801d972:	460c      	mov	r4, r1
 801d974:	d458      	bmi.n	801da28 <__sflush_r+0xc0>
 801d976:	684b      	ldr	r3, [r1, #4]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	dc05      	bgt.n	801d988 <__sflush_r+0x20>
 801d97c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d97e:	2b00      	cmp	r3, #0
 801d980:	dc02      	bgt.n	801d988 <__sflush_r+0x20>
 801d982:	2000      	movs	r0, #0
 801d984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d98a:	2e00      	cmp	r6, #0
 801d98c:	d0f9      	beq.n	801d982 <__sflush_r+0x1a>
 801d98e:	2300      	movs	r3, #0
 801d990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d994:	682f      	ldr	r7, [r5, #0]
 801d996:	602b      	str	r3, [r5, #0]
 801d998:	d032      	beq.n	801da00 <__sflush_r+0x98>
 801d99a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d99c:	89a3      	ldrh	r3, [r4, #12]
 801d99e:	075a      	lsls	r2, r3, #29
 801d9a0:	d505      	bpl.n	801d9ae <__sflush_r+0x46>
 801d9a2:	6863      	ldr	r3, [r4, #4]
 801d9a4:	1ac0      	subs	r0, r0, r3
 801d9a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d9a8:	b10b      	cbz	r3, 801d9ae <__sflush_r+0x46>
 801d9aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d9ac:	1ac0      	subs	r0, r0, r3
 801d9ae:	2300      	movs	r3, #0
 801d9b0:	4602      	mov	r2, r0
 801d9b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d9b4:	6a21      	ldr	r1, [r4, #32]
 801d9b6:	4628      	mov	r0, r5
 801d9b8:	47b0      	blx	r6
 801d9ba:	1c43      	adds	r3, r0, #1
 801d9bc:	89a3      	ldrh	r3, [r4, #12]
 801d9be:	d106      	bne.n	801d9ce <__sflush_r+0x66>
 801d9c0:	6829      	ldr	r1, [r5, #0]
 801d9c2:	291d      	cmp	r1, #29
 801d9c4:	d82c      	bhi.n	801da20 <__sflush_r+0xb8>
 801d9c6:	4a2a      	ldr	r2, [pc, #168]	; (801da70 <__sflush_r+0x108>)
 801d9c8:	40ca      	lsrs	r2, r1
 801d9ca:	07d6      	lsls	r6, r2, #31
 801d9cc:	d528      	bpl.n	801da20 <__sflush_r+0xb8>
 801d9ce:	2200      	movs	r2, #0
 801d9d0:	6062      	str	r2, [r4, #4]
 801d9d2:	04d9      	lsls	r1, r3, #19
 801d9d4:	6922      	ldr	r2, [r4, #16]
 801d9d6:	6022      	str	r2, [r4, #0]
 801d9d8:	d504      	bpl.n	801d9e4 <__sflush_r+0x7c>
 801d9da:	1c42      	adds	r2, r0, #1
 801d9dc:	d101      	bne.n	801d9e2 <__sflush_r+0x7a>
 801d9de:	682b      	ldr	r3, [r5, #0]
 801d9e0:	b903      	cbnz	r3, 801d9e4 <__sflush_r+0x7c>
 801d9e2:	6560      	str	r0, [r4, #84]	; 0x54
 801d9e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d9e6:	602f      	str	r7, [r5, #0]
 801d9e8:	2900      	cmp	r1, #0
 801d9ea:	d0ca      	beq.n	801d982 <__sflush_r+0x1a>
 801d9ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d9f0:	4299      	cmp	r1, r3
 801d9f2:	d002      	beq.n	801d9fa <__sflush_r+0x92>
 801d9f4:	4628      	mov	r0, r5
 801d9f6:	f000 fa65 	bl	801dec4 <_free_r>
 801d9fa:	2000      	movs	r0, #0
 801d9fc:	6360      	str	r0, [r4, #52]	; 0x34
 801d9fe:	e7c1      	b.n	801d984 <__sflush_r+0x1c>
 801da00:	6a21      	ldr	r1, [r4, #32]
 801da02:	2301      	movs	r3, #1
 801da04:	4628      	mov	r0, r5
 801da06:	47b0      	blx	r6
 801da08:	1c41      	adds	r1, r0, #1
 801da0a:	d1c7      	bne.n	801d99c <__sflush_r+0x34>
 801da0c:	682b      	ldr	r3, [r5, #0]
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d0c4      	beq.n	801d99c <__sflush_r+0x34>
 801da12:	2b1d      	cmp	r3, #29
 801da14:	d001      	beq.n	801da1a <__sflush_r+0xb2>
 801da16:	2b16      	cmp	r3, #22
 801da18:	d101      	bne.n	801da1e <__sflush_r+0xb6>
 801da1a:	602f      	str	r7, [r5, #0]
 801da1c:	e7b1      	b.n	801d982 <__sflush_r+0x1a>
 801da1e:	89a3      	ldrh	r3, [r4, #12]
 801da20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da24:	81a3      	strh	r3, [r4, #12]
 801da26:	e7ad      	b.n	801d984 <__sflush_r+0x1c>
 801da28:	690f      	ldr	r7, [r1, #16]
 801da2a:	2f00      	cmp	r7, #0
 801da2c:	d0a9      	beq.n	801d982 <__sflush_r+0x1a>
 801da2e:	0793      	lsls	r3, r2, #30
 801da30:	680e      	ldr	r6, [r1, #0]
 801da32:	bf08      	it	eq
 801da34:	694b      	ldreq	r3, [r1, #20]
 801da36:	600f      	str	r7, [r1, #0]
 801da38:	bf18      	it	ne
 801da3a:	2300      	movne	r3, #0
 801da3c:	eba6 0807 	sub.w	r8, r6, r7
 801da40:	608b      	str	r3, [r1, #8]
 801da42:	f1b8 0f00 	cmp.w	r8, #0
 801da46:	dd9c      	ble.n	801d982 <__sflush_r+0x1a>
 801da48:	6a21      	ldr	r1, [r4, #32]
 801da4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801da4c:	4643      	mov	r3, r8
 801da4e:	463a      	mov	r2, r7
 801da50:	4628      	mov	r0, r5
 801da52:	47b0      	blx	r6
 801da54:	2800      	cmp	r0, #0
 801da56:	dc06      	bgt.n	801da66 <__sflush_r+0xfe>
 801da58:	89a3      	ldrh	r3, [r4, #12]
 801da5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da5e:	81a3      	strh	r3, [r4, #12]
 801da60:	f04f 30ff 	mov.w	r0, #4294967295
 801da64:	e78e      	b.n	801d984 <__sflush_r+0x1c>
 801da66:	4407      	add	r7, r0
 801da68:	eba8 0800 	sub.w	r8, r8, r0
 801da6c:	e7e9      	b.n	801da42 <__sflush_r+0xda>
 801da6e:	bf00      	nop
 801da70:	20400001 	.word	0x20400001

0801da74 <_fflush_r>:
 801da74:	b538      	push	{r3, r4, r5, lr}
 801da76:	690b      	ldr	r3, [r1, #16]
 801da78:	4605      	mov	r5, r0
 801da7a:	460c      	mov	r4, r1
 801da7c:	b913      	cbnz	r3, 801da84 <_fflush_r+0x10>
 801da7e:	2500      	movs	r5, #0
 801da80:	4628      	mov	r0, r5
 801da82:	bd38      	pop	{r3, r4, r5, pc}
 801da84:	b118      	cbz	r0, 801da8e <_fflush_r+0x1a>
 801da86:	6983      	ldr	r3, [r0, #24]
 801da88:	b90b      	cbnz	r3, 801da8e <_fflush_r+0x1a>
 801da8a:	f000 f887 	bl	801db9c <__sinit>
 801da8e:	4b14      	ldr	r3, [pc, #80]	; (801dae0 <_fflush_r+0x6c>)
 801da90:	429c      	cmp	r4, r3
 801da92:	d11b      	bne.n	801dacc <_fflush_r+0x58>
 801da94:	686c      	ldr	r4, [r5, #4]
 801da96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d0ef      	beq.n	801da7e <_fflush_r+0xa>
 801da9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801daa0:	07d0      	lsls	r0, r2, #31
 801daa2:	d404      	bmi.n	801daae <_fflush_r+0x3a>
 801daa4:	0599      	lsls	r1, r3, #22
 801daa6:	d402      	bmi.n	801daae <_fflush_r+0x3a>
 801daa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801daaa:	f000 f954 	bl	801dd56 <__retarget_lock_acquire_recursive>
 801daae:	4628      	mov	r0, r5
 801dab0:	4621      	mov	r1, r4
 801dab2:	f7ff ff59 	bl	801d968 <__sflush_r>
 801dab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dab8:	07da      	lsls	r2, r3, #31
 801daba:	4605      	mov	r5, r0
 801dabc:	d4e0      	bmi.n	801da80 <_fflush_r+0xc>
 801dabe:	89a3      	ldrh	r3, [r4, #12]
 801dac0:	059b      	lsls	r3, r3, #22
 801dac2:	d4dd      	bmi.n	801da80 <_fflush_r+0xc>
 801dac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dac6:	f000 f947 	bl	801dd58 <__retarget_lock_release_recursive>
 801daca:	e7d9      	b.n	801da80 <_fflush_r+0xc>
 801dacc:	4b05      	ldr	r3, [pc, #20]	; (801dae4 <_fflush_r+0x70>)
 801dace:	429c      	cmp	r4, r3
 801dad0:	d101      	bne.n	801dad6 <_fflush_r+0x62>
 801dad2:	68ac      	ldr	r4, [r5, #8]
 801dad4:	e7df      	b.n	801da96 <_fflush_r+0x22>
 801dad6:	4b04      	ldr	r3, [pc, #16]	; (801dae8 <_fflush_r+0x74>)
 801dad8:	429c      	cmp	r4, r3
 801dada:	bf08      	it	eq
 801dadc:	68ec      	ldreq	r4, [r5, #12]
 801dade:	e7da      	b.n	801da96 <_fflush_r+0x22>
 801dae0:	08022c58 	.word	0x08022c58
 801dae4:	08022c78 	.word	0x08022c78
 801dae8:	08022c38 	.word	0x08022c38

0801daec <std>:
 801daec:	2300      	movs	r3, #0
 801daee:	b510      	push	{r4, lr}
 801daf0:	4604      	mov	r4, r0
 801daf2:	e9c0 3300 	strd	r3, r3, [r0]
 801daf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dafa:	6083      	str	r3, [r0, #8]
 801dafc:	8181      	strh	r1, [r0, #12]
 801dafe:	6643      	str	r3, [r0, #100]	; 0x64
 801db00:	81c2      	strh	r2, [r0, #14]
 801db02:	6183      	str	r3, [r0, #24]
 801db04:	4619      	mov	r1, r3
 801db06:	2208      	movs	r2, #8
 801db08:	305c      	adds	r0, #92	; 0x5c
 801db0a:	f000 f9c3 	bl	801de94 <memset>
 801db0e:	4b05      	ldr	r3, [pc, #20]	; (801db24 <std+0x38>)
 801db10:	6263      	str	r3, [r4, #36]	; 0x24
 801db12:	4b05      	ldr	r3, [pc, #20]	; (801db28 <std+0x3c>)
 801db14:	62a3      	str	r3, [r4, #40]	; 0x28
 801db16:	4b05      	ldr	r3, [pc, #20]	; (801db2c <std+0x40>)
 801db18:	62e3      	str	r3, [r4, #44]	; 0x2c
 801db1a:	4b05      	ldr	r3, [pc, #20]	; (801db30 <std+0x44>)
 801db1c:	6224      	str	r4, [r4, #32]
 801db1e:	6323      	str	r3, [r4, #48]	; 0x30
 801db20:	bd10      	pop	{r4, pc}
 801db22:	bf00      	nop
 801db24:	0801e94d 	.word	0x0801e94d
 801db28:	0801e96f 	.word	0x0801e96f
 801db2c:	0801e9a7 	.word	0x0801e9a7
 801db30:	0801e9cb 	.word	0x0801e9cb

0801db34 <_cleanup_r>:
 801db34:	4901      	ldr	r1, [pc, #4]	; (801db3c <_cleanup_r+0x8>)
 801db36:	f000 b8af 	b.w	801dc98 <_fwalk_reent>
 801db3a:	bf00      	nop
 801db3c:	0801da75 	.word	0x0801da75

0801db40 <__sfmoreglue>:
 801db40:	b570      	push	{r4, r5, r6, lr}
 801db42:	1e4a      	subs	r2, r1, #1
 801db44:	2568      	movs	r5, #104	; 0x68
 801db46:	4355      	muls	r5, r2
 801db48:	460e      	mov	r6, r1
 801db4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801db4e:	f000 fa09 	bl	801df64 <_malloc_r>
 801db52:	4604      	mov	r4, r0
 801db54:	b140      	cbz	r0, 801db68 <__sfmoreglue+0x28>
 801db56:	2100      	movs	r1, #0
 801db58:	e9c0 1600 	strd	r1, r6, [r0]
 801db5c:	300c      	adds	r0, #12
 801db5e:	60a0      	str	r0, [r4, #8]
 801db60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801db64:	f000 f996 	bl	801de94 <memset>
 801db68:	4620      	mov	r0, r4
 801db6a:	bd70      	pop	{r4, r5, r6, pc}

0801db6c <__sfp_lock_acquire>:
 801db6c:	4801      	ldr	r0, [pc, #4]	; (801db74 <__sfp_lock_acquire+0x8>)
 801db6e:	f000 b8f2 	b.w	801dd56 <__retarget_lock_acquire_recursive>
 801db72:	bf00      	nop
 801db74:	2001923c 	.word	0x2001923c

0801db78 <__sfp_lock_release>:
 801db78:	4801      	ldr	r0, [pc, #4]	; (801db80 <__sfp_lock_release+0x8>)
 801db7a:	f000 b8ed 	b.w	801dd58 <__retarget_lock_release_recursive>
 801db7e:	bf00      	nop
 801db80:	2001923c 	.word	0x2001923c

0801db84 <__sinit_lock_acquire>:
 801db84:	4801      	ldr	r0, [pc, #4]	; (801db8c <__sinit_lock_acquire+0x8>)
 801db86:	f000 b8e6 	b.w	801dd56 <__retarget_lock_acquire_recursive>
 801db8a:	bf00      	nop
 801db8c:	2001923b 	.word	0x2001923b

0801db90 <__sinit_lock_release>:
 801db90:	4801      	ldr	r0, [pc, #4]	; (801db98 <__sinit_lock_release+0x8>)
 801db92:	f000 b8e1 	b.w	801dd58 <__retarget_lock_release_recursive>
 801db96:	bf00      	nop
 801db98:	2001923b 	.word	0x2001923b

0801db9c <__sinit>:
 801db9c:	b510      	push	{r4, lr}
 801db9e:	4604      	mov	r4, r0
 801dba0:	f7ff fff0 	bl	801db84 <__sinit_lock_acquire>
 801dba4:	69a3      	ldr	r3, [r4, #24]
 801dba6:	b11b      	cbz	r3, 801dbb0 <__sinit+0x14>
 801dba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbac:	f7ff bff0 	b.w	801db90 <__sinit_lock_release>
 801dbb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dbb4:	6523      	str	r3, [r4, #80]	; 0x50
 801dbb6:	4b13      	ldr	r3, [pc, #76]	; (801dc04 <__sinit+0x68>)
 801dbb8:	4a13      	ldr	r2, [pc, #76]	; (801dc08 <__sinit+0x6c>)
 801dbba:	681b      	ldr	r3, [r3, #0]
 801dbbc:	62a2      	str	r2, [r4, #40]	; 0x28
 801dbbe:	42a3      	cmp	r3, r4
 801dbc0:	bf04      	itt	eq
 801dbc2:	2301      	moveq	r3, #1
 801dbc4:	61a3      	streq	r3, [r4, #24]
 801dbc6:	4620      	mov	r0, r4
 801dbc8:	f000 f820 	bl	801dc0c <__sfp>
 801dbcc:	6060      	str	r0, [r4, #4]
 801dbce:	4620      	mov	r0, r4
 801dbd0:	f000 f81c 	bl	801dc0c <__sfp>
 801dbd4:	60a0      	str	r0, [r4, #8]
 801dbd6:	4620      	mov	r0, r4
 801dbd8:	f000 f818 	bl	801dc0c <__sfp>
 801dbdc:	2200      	movs	r2, #0
 801dbde:	60e0      	str	r0, [r4, #12]
 801dbe0:	2104      	movs	r1, #4
 801dbe2:	6860      	ldr	r0, [r4, #4]
 801dbe4:	f7ff ff82 	bl	801daec <std>
 801dbe8:	68a0      	ldr	r0, [r4, #8]
 801dbea:	2201      	movs	r2, #1
 801dbec:	2109      	movs	r1, #9
 801dbee:	f7ff ff7d 	bl	801daec <std>
 801dbf2:	68e0      	ldr	r0, [r4, #12]
 801dbf4:	2202      	movs	r2, #2
 801dbf6:	2112      	movs	r1, #18
 801dbf8:	f7ff ff78 	bl	801daec <std>
 801dbfc:	2301      	movs	r3, #1
 801dbfe:	61a3      	str	r3, [r4, #24]
 801dc00:	e7d2      	b.n	801dba8 <__sinit+0xc>
 801dc02:	bf00      	nop
 801dc04:	08022c98 	.word	0x08022c98
 801dc08:	0801db35 	.word	0x0801db35

0801dc0c <__sfp>:
 801dc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc0e:	4607      	mov	r7, r0
 801dc10:	f7ff ffac 	bl	801db6c <__sfp_lock_acquire>
 801dc14:	4b1e      	ldr	r3, [pc, #120]	; (801dc90 <__sfp+0x84>)
 801dc16:	681e      	ldr	r6, [r3, #0]
 801dc18:	69b3      	ldr	r3, [r6, #24]
 801dc1a:	b913      	cbnz	r3, 801dc22 <__sfp+0x16>
 801dc1c:	4630      	mov	r0, r6
 801dc1e:	f7ff ffbd 	bl	801db9c <__sinit>
 801dc22:	3648      	adds	r6, #72	; 0x48
 801dc24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dc28:	3b01      	subs	r3, #1
 801dc2a:	d503      	bpl.n	801dc34 <__sfp+0x28>
 801dc2c:	6833      	ldr	r3, [r6, #0]
 801dc2e:	b30b      	cbz	r3, 801dc74 <__sfp+0x68>
 801dc30:	6836      	ldr	r6, [r6, #0]
 801dc32:	e7f7      	b.n	801dc24 <__sfp+0x18>
 801dc34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dc38:	b9d5      	cbnz	r5, 801dc70 <__sfp+0x64>
 801dc3a:	4b16      	ldr	r3, [pc, #88]	; (801dc94 <__sfp+0x88>)
 801dc3c:	60e3      	str	r3, [r4, #12]
 801dc3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dc42:	6665      	str	r5, [r4, #100]	; 0x64
 801dc44:	f000 f886 	bl	801dd54 <__retarget_lock_init_recursive>
 801dc48:	f7ff ff96 	bl	801db78 <__sfp_lock_release>
 801dc4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dc50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dc54:	6025      	str	r5, [r4, #0]
 801dc56:	61a5      	str	r5, [r4, #24]
 801dc58:	2208      	movs	r2, #8
 801dc5a:	4629      	mov	r1, r5
 801dc5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dc60:	f000 f918 	bl	801de94 <memset>
 801dc64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dc68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dc6c:	4620      	mov	r0, r4
 801dc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc70:	3468      	adds	r4, #104	; 0x68
 801dc72:	e7d9      	b.n	801dc28 <__sfp+0x1c>
 801dc74:	2104      	movs	r1, #4
 801dc76:	4638      	mov	r0, r7
 801dc78:	f7ff ff62 	bl	801db40 <__sfmoreglue>
 801dc7c:	4604      	mov	r4, r0
 801dc7e:	6030      	str	r0, [r6, #0]
 801dc80:	2800      	cmp	r0, #0
 801dc82:	d1d5      	bne.n	801dc30 <__sfp+0x24>
 801dc84:	f7ff ff78 	bl	801db78 <__sfp_lock_release>
 801dc88:	230c      	movs	r3, #12
 801dc8a:	603b      	str	r3, [r7, #0]
 801dc8c:	e7ee      	b.n	801dc6c <__sfp+0x60>
 801dc8e:	bf00      	nop
 801dc90:	08022c98 	.word	0x08022c98
 801dc94:	ffff0001 	.word	0xffff0001

0801dc98 <_fwalk_reent>:
 801dc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc9c:	4606      	mov	r6, r0
 801dc9e:	4688      	mov	r8, r1
 801dca0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dca4:	2700      	movs	r7, #0
 801dca6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dcaa:	f1b9 0901 	subs.w	r9, r9, #1
 801dcae:	d505      	bpl.n	801dcbc <_fwalk_reent+0x24>
 801dcb0:	6824      	ldr	r4, [r4, #0]
 801dcb2:	2c00      	cmp	r4, #0
 801dcb4:	d1f7      	bne.n	801dca6 <_fwalk_reent+0xe>
 801dcb6:	4638      	mov	r0, r7
 801dcb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dcbc:	89ab      	ldrh	r3, [r5, #12]
 801dcbe:	2b01      	cmp	r3, #1
 801dcc0:	d907      	bls.n	801dcd2 <_fwalk_reent+0x3a>
 801dcc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dcc6:	3301      	adds	r3, #1
 801dcc8:	d003      	beq.n	801dcd2 <_fwalk_reent+0x3a>
 801dcca:	4629      	mov	r1, r5
 801dccc:	4630      	mov	r0, r6
 801dcce:	47c0      	blx	r8
 801dcd0:	4307      	orrs	r7, r0
 801dcd2:	3568      	adds	r5, #104	; 0x68
 801dcd4:	e7e9      	b.n	801dcaa <_fwalk_reent+0x12>
	...

0801dcd8 <__libc_init_array>:
 801dcd8:	b570      	push	{r4, r5, r6, lr}
 801dcda:	4d0d      	ldr	r5, [pc, #52]	; (801dd10 <__libc_init_array+0x38>)
 801dcdc:	4c0d      	ldr	r4, [pc, #52]	; (801dd14 <__libc_init_array+0x3c>)
 801dcde:	1b64      	subs	r4, r4, r5
 801dce0:	10a4      	asrs	r4, r4, #2
 801dce2:	2600      	movs	r6, #0
 801dce4:	42a6      	cmp	r6, r4
 801dce6:	d109      	bne.n	801dcfc <__libc_init_array+0x24>
 801dce8:	4d0b      	ldr	r5, [pc, #44]	; (801dd18 <__libc_init_array+0x40>)
 801dcea:	4c0c      	ldr	r4, [pc, #48]	; (801dd1c <__libc_init_array+0x44>)
 801dcec:	f004 f91a 	bl	8021f24 <_init>
 801dcf0:	1b64      	subs	r4, r4, r5
 801dcf2:	10a4      	asrs	r4, r4, #2
 801dcf4:	2600      	movs	r6, #0
 801dcf6:	42a6      	cmp	r6, r4
 801dcf8:	d105      	bne.n	801dd06 <__libc_init_array+0x2e>
 801dcfa:	bd70      	pop	{r4, r5, r6, pc}
 801dcfc:	f855 3b04 	ldr.w	r3, [r5], #4
 801dd00:	4798      	blx	r3
 801dd02:	3601      	adds	r6, #1
 801dd04:	e7ee      	b.n	801dce4 <__libc_init_array+0xc>
 801dd06:	f855 3b04 	ldr.w	r3, [r5], #4
 801dd0a:	4798      	blx	r3
 801dd0c:	3601      	adds	r6, #1
 801dd0e:	e7f2      	b.n	801dcf6 <__libc_init_array+0x1e>
 801dd10:	0802300c 	.word	0x0802300c
 801dd14:	0802300c 	.word	0x0802300c
 801dd18:	0802300c 	.word	0x0802300c
 801dd1c:	08023010 	.word	0x08023010

0801dd20 <__itoa>:
 801dd20:	1e93      	subs	r3, r2, #2
 801dd22:	2b22      	cmp	r3, #34	; 0x22
 801dd24:	b510      	push	{r4, lr}
 801dd26:	460c      	mov	r4, r1
 801dd28:	d904      	bls.n	801dd34 <__itoa+0x14>
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	700b      	strb	r3, [r1, #0]
 801dd2e:	461c      	mov	r4, r3
 801dd30:	4620      	mov	r0, r4
 801dd32:	bd10      	pop	{r4, pc}
 801dd34:	2a0a      	cmp	r2, #10
 801dd36:	d109      	bne.n	801dd4c <__itoa+0x2c>
 801dd38:	2800      	cmp	r0, #0
 801dd3a:	da07      	bge.n	801dd4c <__itoa+0x2c>
 801dd3c:	232d      	movs	r3, #45	; 0x2d
 801dd3e:	700b      	strb	r3, [r1, #0]
 801dd40:	4240      	negs	r0, r0
 801dd42:	2101      	movs	r1, #1
 801dd44:	4421      	add	r1, r4
 801dd46:	f001 fd47 	bl	801f7d8 <__utoa>
 801dd4a:	e7f1      	b.n	801dd30 <__itoa+0x10>
 801dd4c:	2100      	movs	r1, #0
 801dd4e:	e7f9      	b.n	801dd44 <__itoa+0x24>

0801dd50 <itoa>:
 801dd50:	f7ff bfe6 	b.w	801dd20 <__itoa>

0801dd54 <__retarget_lock_init_recursive>:
 801dd54:	4770      	bx	lr

0801dd56 <__retarget_lock_acquire_recursive>:
 801dd56:	4770      	bx	lr

0801dd58 <__retarget_lock_release_recursive>:
 801dd58:	4770      	bx	lr

0801dd5a <__swhatbuf_r>:
 801dd5a:	b570      	push	{r4, r5, r6, lr}
 801dd5c:	460e      	mov	r6, r1
 801dd5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd62:	2900      	cmp	r1, #0
 801dd64:	b096      	sub	sp, #88	; 0x58
 801dd66:	4614      	mov	r4, r2
 801dd68:	461d      	mov	r5, r3
 801dd6a:	da07      	bge.n	801dd7c <__swhatbuf_r+0x22>
 801dd6c:	2300      	movs	r3, #0
 801dd6e:	602b      	str	r3, [r5, #0]
 801dd70:	89b3      	ldrh	r3, [r6, #12]
 801dd72:	061a      	lsls	r2, r3, #24
 801dd74:	d410      	bmi.n	801dd98 <__swhatbuf_r+0x3e>
 801dd76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dd7a:	e00e      	b.n	801dd9a <__swhatbuf_r+0x40>
 801dd7c:	466a      	mov	r2, sp
 801dd7e:	f002 fcc7 	bl	8020710 <_fstat_r>
 801dd82:	2800      	cmp	r0, #0
 801dd84:	dbf2      	blt.n	801dd6c <__swhatbuf_r+0x12>
 801dd86:	9a01      	ldr	r2, [sp, #4]
 801dd88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dd8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dd90:	425a      	negs	r2, r3
 801dd92:	415a      	adcs	r2, r3
 801dd94:	602a      	str	r2, [r5, #0]
 801dd96:	e7ee      	b.n	801dd76 <__swhatbuf_r+0x1c>
 801dd98:	2340      	movs	r3, #64	; 0x40
 801dd9a:	2000      	movs	r0, #0
 801dd9c:	6023      	str	r3, [r4, #0]
 801dd9e:	b016      	add	sp, #88	; 0x58
 801dda0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dda4 <__smakebuf_r>:
 801dda4:	898b      	ldrh	r3, [r1, #12]
 801dda6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dda8:	079d      	lsls	r5, r3, #30
 801ddaa:	4606      	mov	r6, r0
 801ddac:	460c      	mov	r4, r1
 801ddae:	d507      	bpl.n	801ddc0 <__smakebuf_r+0x1c>
 801ddb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ddb4:	6023      	str	r3, [r4, #0]
 801ddb6:	6123      	str	r3, [r4, #16]
 801ddb8:	2301      	movs	r3, #1
 801ddba:	6163      	str	r3, [r4, #20]
 801ddbc:	b002      	add	sp, #8
 801ddbe:	bd70      	pop	{r4, r5, r6, pc}
 801ddc0:	ab01      	add	r3, sp, #4
 801ddc2:	466a      	mov	r2, sp
 801ddc4:	f7ff ffc9 	bl	801dd5a <__swhatbuf_r>
 801ddc8:	9900      	ldr	r1, [sp, #0]
 801ddca:	4605      	mov	r5, r0
 801ddcc:	4630      	mov	r0, r6
 801ddce:	f000 f8c9 	bl	801df64 <_malloc_r>
 801ddd2:	b948      	cbnz	r0, 801dde8 <__smakebuf_r+0x44>
 801ddd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ddd8:	059a      	lsls	r2, r3, #22
 801ddda:	d4ef      	bmi.n	801ddbc <__smakebuf_r+0x18>
 801dddc:	f023 0303 	bic.w	r3, r3, #3
 801dde0:	f043 0302 	orr.w	r3, r3, #2
 801dde4:	81a3      	strh	r3, [r4, #12]
 801dde6:	e7e3      	b.n	801ddb0 <__smakebuf_r+0xc>
 801dde8:	4b0d      	ldr	r3, [pc, #52]	; (801de20 <__smakebuf_r+0x7c>)
 801ddea:	62b3      	str	r3, [r6, #40]	; 0x28
 801ddec:	89a3      	ldrh	r3, [r4, #12]
 801ddee:	6020      	str	r0, [r4, #0]
 801ddf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ddf4:	81a3      	strh	r3, [r4, #12]
 801ddf6:	9b00      	ldr	r3, [sp, #0]
 801ddf8:	6163      	str	r3, [r4, #20]
 801ddfa:	9b01      	ldr	r3, [sp, #4]
 801ddfc:	6120      	str	r0, [r4, #16]
 801ddfe:	b15b      	cbz	r3, 801de18 <__smakebuf_r+0x74>
 801de00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de04:	4630      	mov	r0, r6
 801de06:	f003 f805 	bl	8020e14 <_isatty_r>
 801de0a:	b128      	cbz	r0, 801de18 <__smakebuf_r+0x74>
 801de0c:	89a3      	ldrh	r3, [r4, #12]
 801de0e:	f023 0303 	bic.w	r3, r3, #3
 801de12:	f043 0301 	orr.w	r3, r3, #1
 801de16:	81a3      	strh	r3, [r4, #12]
 801de18:	89a0      	ldrh	r0, [r4, #12]
 801de1a:	4305      	orrs	r5, r0
 801de1c:	81a5      	strh	r5, [r4, #12]
 801de1e:	e7cd      	b.n	801ddbc <__smakebuf_r+0x18>
 801de20:	0801db35 	.word	0x0801db35

0801de24 <malloc>:
 801de24:	4b02      	ldr	r3, [pc, #8]	; (801de30 <malloc+0xc>)
 801de26:	4601      	mov	r1, r0
 801de28:	6818      	ldr	r0, [r3, #0]
 801de2a:	f000 b89b 	b.w	801df64 <_malloc_r>
 801de2e:	bf00      	nop
 801de30:	2000008c 	.word	0x2000008c

0801de34 <free>:
 801de34:	4b02      	ldr	r3, [pc, #8]	; (801de40 <free+0xc>)
 801de36:	4601      	mov	r1, r0
 801de38:	6818      	ldr	r0, [r3, #0]
 801de3a:	f000 b843 	b.w	801dec4 <_free_r>
 801de3e:	bf00      	nop
 801de40:	2000008c 	.word	0x2000008c

0801de44 <memcpy>:
 801de44:	440a      	add	r2, r1
 801de46:	4291      	cmp	r1, r2
 801de48:	f100 33ff 	add.w	r3, r0, #4294967295
 801de4c:	d100      	bne.n	801de50 <memcpy+0xc>
 801de4e:	4770      	bx	lr
 801de50:	b510      	push	{r4, lr}
 801de52:	f811 4b01 	ldrb.w	r4, [r1], #1
 801de56:	f803 4f01 	strb.w	r4, [r3, #1]!
 801de5a:	4291      	cmp	r1, r2
 801de5c:	d1f9      	bne.n	801de52 <memcpy+0xe>
 801de5e:	bd10      	pop	{r4, pc}

0801de60 <memmove>:
 801de60:	4288      	cmp	r0, r1
 801de62:	b510      	push	{r4, lr}
 801de64:	eb01 0402 	add.w	r4, r1, r2
 801de68:	d902      	bls.n	801de70 <memmove+0x10>
 801de6a:	4284      	cmp	r4, r0
 801de6c:	4623      	mov	r3, r4
 801de6e:	d807      	bhi.n	801de80 <memmove+0x20>
 801de70:	1e43      	subs	r3, r0, #1
 801de72:	42a1      	cmp	r1, r4
 801de74:	d008      	beq.n	801de88 <memmove+0x28>
 801de76:	f811 2b01 	ldrb.w	r2, [r1], #1
 801de7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801de7e:	e7f8      	b.n	801de72 <memmove+0x12>
 801de80:	4402      	add	r2, r0
 801de82:	4601      	mov	r1, r0
 801de84:	428a      	cmp	r2, r1
 801de86:	d100      	bne.n	801de8a <memmove+0x2a>
 801de88:	bd10      	pop	{r4, pc}
 801de8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801de8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801de92:	e7f7      	b.n	801de84 <memmove+0x24>

0801de94 <memset>:
 801de94:	4402      	add	r2, r0
 801de96:	4603      	mov	r3, r0
 801de98:	4293      	cmp	r3, r2
 801de9a:	d100      	bne.n	801de9e <memset+0xa>
 801de9c:	4770      	bx	lr
 801de9e:	f803 1b01 	strb.w	r1, [r3], #1
 801dea2:	e7f9      	b.n	801de98 <memset+0x4>

0801dea4 <_calloc_r>:
 801dea4:	b513      	push	{r0, r1, r4, lr}
 801dea6:	434a      	muls	r2, r1
 801dea8:	4611      	mov	r1, r2
 801deaa:	9201      	str	r2, [sp, #4]
 801deac:	f000 f85a 	bl	801df64 <_malloc_r>
 801deb0:	4604      	mov	r4, r0
 801deb2:	b118      	cbz	r0, 801debc <_calloc_r+0x18>
 801deb4:	9a01      	ldr	r2, [sp, #4]
 801deb6:	2100      	movs	r1, #0
 801deb8:	f7ff ffec 	bl	801de94 <memset>
 801debc:	4620      	mov	r0, r4
 801debe:	b002      	add	sp, #8
 801dec0:	bd10      	pop	{r4, pc}
	...

0801dec4 <_free_r>:
 801dec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dec6:	2900      	cmp	r1, #0
 801dec8:	d048      	beq.n	801df5c <_free_r+0x98>
 801deca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dece:	9001      	str	r0, [sp, #4]
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	f1a1 0404 	sub.w	r4, r1, #4
 801ded6:	bfb8      	it	lt
 801ded8:	18e4      	addlt	r4, r4, r3
 801deda:	f002 ffd3 	bl	8020e84 <__malloc_lock>
 801dede:	4a20      	ldr	r2, [pc, #128]	; (801df60 <_free_r+0x9c>)
 801dee0:	9801      	ldr	r0, [sp, #4]
 801dee2:	6813      	ldr	r3, [r2, #0]
 801dee4:	4615      	mov	r5, r2
 801dee6:	b933      	cbnz	r3, 801def6 <_free_r+0x32>
 801dee8:	6063      	str	r3, [r4, #4]
 801deea:	6014      	str	r4, [r2, #0]
 801deec:	b003      	add	sp, #12
 801deee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801def2:	f002 bfcd 	b.w	8020e90 <__malloc_unlock>
 801def6:	42a3      	cmp	r3, r4
 801def8:	d90b      	bls.n	801df12 <_free_r+0x4e>
 801defa:	6821      	ldr	r1, [r4, #0]
 801defc:	1862      	adds	r2, r4, r1
 801defe:	4293      	cmp	r3, r2
 801df00:	bf04      	itt	eq
 801df02:	681a      	ldreq	r2, [r3, #0]
 801df04:	685b      	ldreq	r3, [r3, #4]
 801df06:	6063      	str	r3, [r4, #4]
 801df08:	bf04      	itt	eq
 801df0a:	1852      	addeq	r2, r2, r1
 801df0c:	6022      	streq	r2, [r4, #0]
 801df0e:	602c      	str	r4, [r5, #0]
 801df10:	e7ec      	b.n	801deec <_free_r+0x28>
 801df12:	461a      	mov	r2, r3
 801df14:	685b      	ldr	r3, [r3, #4]
 801df16:	b10b      	cbz	r3, 801df1c <_free_r+0x58>
 801df18:	42a3      	cmp	r3, r4
 801df1a:	d9fa      	bls.n	801df12 <_free_r+0x4e>
 801df1c:	6811      	ldr	r1, [r2, #0]
 801df1e:	1855      	adds	r5, r2, r1
 801df20:	42a5      	cmp	r5, r4
 801df22:	d10b      	bne.n	801df3c <_free_r+0x78>
 801df24:	6824      	ldr	r4, [r4, #0]
 801df26:	4421      	add	r1, r4
 801df28:	1854      	adds	r4, r2, r1
 801df2a:	42a3      	cmp	r3, r4
 801df2c:	6011      	str	r1, [r2, #0]
 801df2e:	d1dd      	bne.n	801deec <_free_r+0x28>
 801df30:	681c      	ldr	r4, [r3, #0]
 801df32:	685b      	ldr	r3, [r3, #4]
 801df34:	6053      	str	r3, [r2, #4]
 801df36:	4421      	add	r1, r4
 801df38:	6011      	str	r1, [r2, #0]
 801df3a:	e7d7      	b.n	801deec <_free_r+0x28>
 801df3c:	d902      	bls.n	801df44 <_free_r+0x80>
 801df3e:	230c      	movs	r3, #12
 801df40:	6003      	str	r3, [r0, #0]
 801df42:	e7d3      	b.n	801deec <_free_r+0x28>
 801df44:	6825      	ldr	r5, [r4, #0]
 801df46:	1961      	adds	r1, r4, r5
 801df48:	428b      	cmp	r3, r1
 801df4a:	bf04      	itt	eq
 801df4c:	6819      	ldreq	r1, [r3, #0]
 801df4e:	685b      	ldreq	r3, [r3, #4]
 801df50:	6063      	str	r3, [r4, #4]
 801df52:	bf04      	itt	eq
 801df54:	1949      	addeq	r1, r1, r5
 801df56:	6021      	streq	r1, [r4, #0]
 801df58:	6054      	str	r4, [r2, #4]
 801df5a:	e7c7      	b.n	801deec <_free_r+0x28>
 801df5c:	b003      	add	sp, #12
 801df5e:	bd30      	pop	{r4, r5, pc}
 801df60:	2000fe70 	.word	0x2000fe70

0801df64 <_malloc_r>:
 801df64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df66:	1ccd      	adds	r5, r1, #3
 801df68:	f025 0503 	bic.w	r5, r5, #3
 801df6c:	3508      	adds	r5, #8
 801df6e:	2d0c      	cmp	r5, #12
 801df70:	bf38      	it	cc
 801df72:	250c      	movcc	r5, #12
 801df74:	2d00      	cmp	r5, #0
 801df76:	4606      	mov	r6, r0
 801df78:	db01      	blt.n	801df7e <_malloc_r+0x1a>
 801df7a:	42a9      	cmp	r1, r5
 801df7c:	d903      	bls.n	801df86 <_malloc_r+0x22>
 801df7e:	230c      	movs	r3, #12
 801df80:	6033      	str	r3, [r6, #0]
 801df82:	2000      	movs	r0, #0
 801df84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df86:	f002 ff7d 	bl	8020e84 <__malloc_lock>
 801df8a:	4921      	ldr	r1, [pc, #132]	; (801e010 <_malloc_r+0xac>)
 801df8c:	680a      	ldr	r2, [r1, #0]
 801df8e:	4614      	mov	r4, r2
 801df90:	b99c      	cbnz	r4, 801dfba <_malloc_r+0x56>
 801df92:	4f20      	ldr	r7, [pc, #128]	; (801e014 <_malloc_r+0xb0>)
 801df94:	683b      	ldr	r3, [r7, #0]
 801df96:	b923      	cbnz	r3, 801dfa2 <_malloc_r+0x3e>
 801df98:	4621      	mov	r1, r4
 801df9a:	4630      	mov	r0, r6
 801df9c:	f000 fca6 	bl	801e8ec <_sbrk_r>
 801dfa0:	6038      	str	r0, [r7, #0]
 801dfa2:	4629      	mov	r1, r5
 801dfa4:	4630      	mov	r0, r6
 801dfa6:	f000 fca1 	bl	801e8ec <_sbrk_r>
 801dfaa:	1c43      	adds	r3, r0, #1
 801dfac:	d123      	bne.n	801dff6 <_malloc_r+0x92>
 801dfae:	230c      	movs	r3, #12
 801dfb0:	6033      	str	r3, [r6, #0]
 801dfb2:	4630      	mov	r0, r6
 801dfb4:	f002 ff6c 	bl	8020e90 <__malloc_unlock>
 801dfb8:	e7e3      	b.n	801df82 <_malloc_r+0x1e>
 801dfba:	6823      	ldr	r3, [r4, #0]
 801dfbc:	1b5b      	subs	r3, r3, r5
 801dfbe:	d417      	bmi.n	801dff0 <_malloc_r+0x8c>
 801dfc0:	2b0b      	cmp	r3, #11
 801dfc2:	d903      	bls.n	801dfcc <_malloc_r+0x68>
 801dfc4:	6023      	str	r3, [r4, #0]
 801dfc6:	441c      	add	r4, r3
 801dfc8:	6025      	str	r5, [r4, #0]
 801dfca:	e004      	b.n	801dfd6 <_malloc_r+0x72>
 801dfcc:	6863      	ldr	r3, [r4, #4]
 801dfce:	42a2      	cmp	r2, r4
 801dfd0:	bf0c      	ite	eq
 801dfd2:	600b      	streq	r3, [r1, #0]
 801dfd4:	6053      	strne	r3, [r2, #4]
 801dfd6:	4630      	mov	r0, r6
 801dfd8:	f002 ff5a 	bl	8020e90 <__malloc_unlock>
 801dfdc:	f104 000b 	add.w	r0, r4, #11
 801dfe0:	1d23      	adds	r3, r4, #4
 801dfe2:	f020 0007 	bic.w	r0, r0, #7
 801dfe6:	1ac2      	subs	r2, r0, r3
 801dfe8:	d0cc      	beq.n	801df84 <_malloc_r+0x20>
 801dfea:	1a1b      	subs	r3, r3, r0
 801dfec:	50a3      	str	r3, [r4, r2]
 801dfee:	e7c9      	b.n	801df84 <_malloc_r+0x20>
 801dff0:	4622      	mov	r2, r4
 801dff2:	6864      	ldr	r4, [r4, #4]
 801dff4:	e7cc      	b.n	801df90 <_malloc_r+0x2c>
 801dff6:	1cc4      	adds	r4, r0, #3
 801dff8:	f024 0403 	bic.w	r4, r4, #3
 801dffc:	42a0      	cmp	r0, r4
 801dffe:	d0e3      	beq.n	801dfc8 <_malloc_r+0x64>
 801e000:	1a21      	subs	r1, r4, r0
 801e002:	4630      	mov	r0, r6
 801e004:	f000 fc72 	bl	801e8ec <_sbrk_r>
 801e008:	3001      	adds	r0, #1
 801e00a:	d1dd      	bne.n	801dfc8 <_malloc_r+0x64>
 801e00c:	e7cf      	b.n	801dfae <_malloc_r+0x4a>
 801e00e:	bf00      	nop
 801e010:	2000fe70 	.word	0x2000fe70
 801e014:	2000fe74 	.word	0x2000fe74

0801e018 <__cvt>:
 801e018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e01c:	ec55 4b10 	vmov	r4, r5, d0
 801e020:	2d00      	cmp	r5, #0
 801e022:	460e      	mov	r6, r1
 801e024:	4619      	mov	r1, r3
 801e026:	462b      	mov	r3, r5
 801e028:	bfbb      	ittet	lt
 801e02a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e02e:	461d      	movlt	r5, r3
 801e030:	2300      	movge	r3, #0
 801e032:	232d      	movlt	r3, #45	; 0x2d
 801e034:	700b      	strb	r3, [r1, #0]
 801e036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e038:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e03c:	4691      	mov	r9, r2
 801e03e:	f023 0820 	bic.w	r8, r3, #32
 801e042:	bfbc      	itt	lt
 801e044:	4622      	movlt	r2, r4
 801e046:	4614      	movlt	r4, r2
 801e048:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e04c:	d005      	beq.n	801e05a <__cvt+0x42>
 801e04e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e052:	d100      	bne.n	801e056 <__cvt+0x3e>
 801e054:	3601      	adds	r6, #1
 801e056:	2102      	movs	r1, #2
 801e058:	e000      	b.n	801e05c <__cvt+0x44>
 801e05a:	2103      	movs	r1, #3
 801e05c:	ab03      	add	r3, sp, #12
 801e05e:	9301      	str	r3, [sp, #4]
 801e060:	ab02      	add	r3, sp, #8
 801e062:	9300      	str	r3, [sp, #0]
 801e064:	ec45 4b10 	vmov	d0, r4, r5
 801e068:	4653      	mov	r3, sl
 801e06a:	4632      	mov	r2, r6
 801e06c:	f001 fd64 	bl	801fb38 <_dtoa_r>
 801e070:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e074:	4607      	mov	r7, r0
 801e076:	d102      	bne.n	801e07e <__cvt+0x66>
 801e078:	f019 0f01 	tst.w	r9, #1
 801e07c:	d022      	beq.n	801e0c4 <__cvt+0xac>
 801e07e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e082:	eb07 0906 	add.w	r9, r7, r6
 801e086:	d110      	bne.n	801e0aa <__cvt+0x92>
 801e088:	783b      	ldrb	r3, [r7, #0]
 801e08a:	2b30      	cmp	r3, #48	; 0x30
 801e08c:	d10a      	bne.n	801e0a4 <__cvt+0x8c>
 801e08e:	2200      	movs	r2, #0
 801e090:	2300      	movs	r3, #0
 801e092:	4620      	mov	r0, r4
 801e094:	4629      	mov	r1, r5
 801e096:	f7e2 fd3f 	bl	8000b18 <__aeabi_dcmpeq>
 801e09a:	b918      	cbnz	r0, 801e0a4 <__cvt+0x8c>
 801e09c:	f1c6 0601 	rsb	r6, r6, #1
 801e0a0:	f8ca 6000 	str.w	r6, [sl]
 801e0a4:	f8da 3000 	ldr.w	r3, [sl]
 801e0a8:	4499      	add	r9, r3
 801e0aa:	2200      	movs	r2, #0
 801e0ac:	2300      	movs	r3, #0
 801e0ae:	4620      	mov	r0, r4
 801e0b0:	4629      	mov	r1, r5
 801e0b2:	f7e2 fd31 	bl	8000b18 <__aeabi_dcmpeq>
 801e0b6:	b108      	cbz	r0, 801e0bc <__cvt+0xa4>
 801e0b8:	f8cd 900c 	str.w	r9, [sp, #12]
 801e0bc:	2230      	movs	r2, #48	; 0x30
 801e0be:	9b03      	ldr	r3, [sp, #12]
 801e0c0:	454b      	cmp	r3, r9
 801e0c2:	d307      	bcc.n	801e0d4 <__cvt+0xbc>
 801e0c4:	9b03      	ldr	r3, [sp, #12]
 801e0c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e0c8:	1bdb      	subs	r3, r3, r7
 801e0ca:	4638      	mov	r0, r7
 801e0cc:	6013      	str	r3, [r2, #0]
 801e0ce:	b004      	add	sp, #16
 801e0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0d4:	1c59      	adds	r1, r3, #1
 801e0d6:	9103      	str	r1, [sp, #12]
 801e0d8:	701a      	strb	r2, [r3, #0]
 801e0da:	e7f0      	b.n	801e0be <__cvt+0xa6>

0801e0dc <__exponent>:
 801e0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e0de:	4603      	mov	r3, r0
 801e0e0:	2900      	cmp	r1, #0
 801e0e2:	bfb8      	it	lt
 801e0e4:	4249      	neglt	r1, r1
 801e0e6:	f803 2b02 	strb.w	r2, [r3], #2
 801e0ea:	bfb4      	ite	lt
 801e0ec:	222d      	movlt	r2, #45	; 0x2d
 801e0ee:	222b      	movge	r2, #43	; 0x2b
 801e0f0:	2909      	cmp	r1, #9
 801e0f2:	7042      	strb	r2, [r0, #1]
 801e0f4:	dd2a      	ble.n	801e14c <__exponent+0x70>
 801e0f6:	f10d 0407 	add.w	r4, sp, #7
 801e0fa:	46a4      	mov	ip, r4
 801e0fc:	270a      	movs	r7, #10
 801e0fe:	46a6      	mov	lr, r4
 801e100:	460a      	mov	r2, r1
 801e102:	fb91 f6f7 	sdiv	r6, r1, r7
 801e106:	fb07 1516 	mls	r5, r7, r6, r1
 801e10a:	3530      	adds	r5, #48	; 0x30
 801e10c:	2a63      	cmp	r2, #99	; 0x63
 801e10e:	f104 34ff 	add.w	r4, r4, #4294967295
 801e112:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e116:	4631      	mov	r1, r6
 801e118:	dcf1      	bgt.n	801e0fe <__exponent+0x22>
 801e11a:	3130      	adds	r1, #48	; 0x30
 801e11c:	f1ae 0502 	sub.w	r5, lr, #2
 801e120:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e124:	1c44      	adds	r4, r0, #1
 801e126:	4629      	mov	r1, r5
 801e128:	4561      	cmp	r1, ip
 801e12a:	d30a      	bcc.n	801e142 <__exponent+0x66>
 801e12c:	f10d 0209 	add.w	r2, sp, #9
 801e130:	eba2 020e 	sub.w	r2, r2, lr
 801e134:	4565      	cmp	r5, ip
 801e136:	bf88      	it	hi
 801e138:	2200      	movhi	r2, #0
 801e13a:	4413      	add	r3, r2
 801e13c:	1a18      	subs	r0, r3, r0
 801e13e:	b003      	add	sp, #12
 801e140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e142:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e146:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e14a:	e7ed      	b.n	801e128 <__exponent+0x4c>
 801e14c:	2330      	movs	r3, #48	; 0x30
 801e14e:	3130      	adds	r1, #48	; 0x30
 801e150:	7083      	strb	r3, [r0, #2]
 801e152:	70c1      	strb	r1, [r0, #3]
 801e154:	1d03      	adds	r3, r0, #4
 801e156:	e7f1      	b.n	801e13c <__exponent+0x60>

0801e158 <_printf_float>:
 801e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e15c:	ed2d 8b02 	vpush	{d8}
 801e160:	b08d      	sub	sp, #52	; 0x34
 801e162:	460c      	mov	r4, r1
 801e164:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e168:	4616      	mov	r6, r2
 801e16a:	461f      	mov	r7, r3
 801e16c:	4605      	mov	r5, r0
 801e16e:	f002 fe61 	bl	8020e34 <_localeconv_r>
 801e172:	f8d0 a000 	ldr.w	sl, [r0]
 801e176:	4650      	mov	r0, sl
 801e178:	f7e2 f84c 	bl	8000214 <strlen>
 801e17c:	2300      	movs	r3, #0
 801e17e:	930a      	str	r3, [sp, #40]	; 0x28
 801e180:	6823      	ldr	r3, [r4, #0]
 801e182:	9305      	str	r3, [sp, #20]
 801e184:	f8d8 3000 	ldr.w	r3, [r8]
 801e188:	f894 b018 	ldrb.w	fp, [r4, #24]
 801e18c:	3307      	adds	r3, #7
 801e18e:	f023 0307 	bic.w	r3, r3, #7
 801e192:	f103 0208 	add.w	r2, r3, #8
 801e196:	f8c8 2000 	str.w	r2, [r8]
 801e19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e19e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801e1a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801e1a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e1aa:	9307      	str	r3, [sp, #28]
 801e1ac:	f8cd 8018 	str.w	r8, [sp, #24]
 801e1b0:	ee08 0a10 	vmov	s16, r0
 801e1b4:	4b9f      	ldr	r3, [pc, #636]	; (801e434 <_printf_float+0x2dc>)
 801e1b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e1ba:	f04f 32ff 	mov.w	r2, #4294967295
 801e1be:	f7e2 fcdd 	bl	8000b7c <__aeabi_dcmpun>
 801e1c2:	bb88      	cbnz	r0, 801e228 <_printf_float+0xd0>
 801e1c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e1c8:	4b9a      	ldr	r3, [pc, #616]	; (801e434 <_printf_float+0x2dc>)
 801e1ca:	f04f 32ff 	mov.w	r2, #4294967295
 801e1ce:	f7e2 fcb7 	bl	8000b40 <__aeabi_dcmple>
 801e1d2:	bb48      	cbnz	r0, 801e228 <_printf_float+0xd0>
 801e1d4:	2200      	movs	r2, #0
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	4640      	mov	r0, r8
 801e1da:	4649      	mov	r1, r9
 801e1dc:	f7e2 fca6 	bl	8000b2c <__aeabi_dcmplt>
 801e1e0:	b110      	cbz	r0, 801e1e8 <_printf_float+0x90>
 801e1e2:	232d      	movs	r3, #45	; 0x2d
 801e1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e1e8:	4b93      	ldr	r3, [pc, #588]	; (801e438 <_printf_float+0x2e0>)
 801e1ea:	4894      	ldr	r0, [pc, #592]	; (801e43c <_printf_float+0x2e4>)
 801e1ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801e1f0:	bf94      	ite	ls
 801e1f2:	4698      	movls	r8, r3
 801e1f4:	4680      	movhi	r8, r0
 801e1f6:	2303      	movs	r3, #3
 801e1f8:	6123      	str	r3, [r4, #16]
 801e1fa:	9b05      	ldr	r3, [sp, #20]
 801e1fc:	f023 0204 	bic.w	r2, r3, #4
 801e200:	6022      	str	r2, [r4, #0]
 801e202:	f04f 0900 	mov.w	r9, #0
 801e206:	9700      	str	r7, [sp, #0]
 801e208:	4633      	mov	r3, r6
 801e20a:	aa0b      	add	r2, sp, #44	; 0x2c
 801e20c:	4621      	mov	r1, r4
 801e20e:	4628      	mov	r0, r5
 801e210:	f000 f9d8 	bl	801e5c4 <_printf_common>
 801e214:	3001      	adds	r0, #1
 801e216:	f040 8090 	bne.w	801e33a <_printf_float+0x1e2>
 801e21a:	f04f 30ff 	mov.w	r0, #4294967295
 801e21e:	b00d      	add	sp, #52	; 0x34
 801e220:	ecbd 8b02 	vpop	{d8}
 801e224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e228:	4642      	mov	r2, r8
 801e22a:	464b      	mov	r3, r9
 801e22c:	4640      	mov	r0, r8
 801e22e:	4649      	mov	r1, r9
 801e230:	f7e2 fca4 	bl	8000b7c <__aeabi_dcmpun>
 801e234:	b140      	cbz	r0, 801e248 <_printf_float+0xf0>
 801e236:	464b      	mov	r3, r9
 801e238:	2b00      	cmp	r3, #0
 801e23a:	bfbc      	itt	lt
 801e23c:	232d      	movlt	r3, #45	; 0x2d
 801e23e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e242:	487f      	ldr	r0, [pc, #508]	; (801e440 <_printf_float+0x2e8>)
 801e244:	4b7f      	ldr	r3, [pc, #508]	; (801e444 <_printf_float+0x2ec>)
 801e246:	e7d1      	b.n	801e1ec <_printf_float+0x94>
 801e248:	6863      	ldr	r3, [r4, #4]
 801e24a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e24e:	9206      	str	r2, [sp, #24]
 801e250:	1c5a      	adds	r2, r3, #1
 801e252:	d13f      	bne.n	801e2d4 <_printf_float+0x17c>
 801e254:	2306      	movs	r3, #6
 801e256:	6063      	str	r3, [r4, #4]
 801e258:	9b05      	ldr	r3, [sp, #20]
 801e25a:	6861      	ldr	r1, [r4, #4]
 801e25c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801e260:	2300      	movs	r3, #0
 801e262:	9303      	str	r3, [sp, #12]
 801e264:	ab0a      	add	r3, sp, #40	; 0x28
 801e266:	e9cd b301 	strd	fp, r3, [sp, #4]
 801e26a:	ab09      	add	r3, sp, #36	; 0x24
 801e26c:	ec49 8b10 	vmov	d0, r8, r9
 801e270:	9300      	str	r3, [sp, #0]
 801e272:	6022      	str	r2, [r4, #0]
 801e274:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e278:	4628      	mov	r0, r5
 801e27a:	f7ff fecd 	bl	801e018 <__cvt>
 801e27e:	9b06      	ldr	r3, [sp, #24]
 801e280:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e282:	2b47      	cmp	r3, #71	; 0x47
 801e284:	4680      	mov	r8, r0
 801e286:	d108      	bne.n	801e29a <_printf_float+0x142>
 801e288:	1cc8      	adds	r0, r1, #3
 801e28a:	db02      	blt.n	801e292 <_printf_float+0x13a>
 801e28c:	6863      	ldr	r3, [r4, #4]
 801e28e:	4299      	cmp	r1, r3
 801e290:	dd41      	ble.n	801e316 <_printf_float+0x1be>
 801e292:	f1ab 0b02 	sub.w	fp, fp, #2
 801e296:	fa5f fb8b 	uxtb.w	fp, fp
 801e29a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e29e:	d820      	bhi.n	801e2e2 <_printf_float+0x18a>
 801e2a0:	3901      	subs	r1, #1
 801e2a2:	465a      	mov	r2, fp
 801e2a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e2a8:	9109      	str	r1, [sp, #36]	; 0x24
 801e2aa:	f7ff ff17 	bl	801e0dc <__exponent>
 801e2ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e2b0:	1813      	adds	r3, r2, r0
 801e2b2:	2a01      	cmp	r2, #1
 801e2b4:	4681      	mov	r9, r0
 801e2b6:	6123      	str	r3, [r4, #16]
 801e2b8:	dc02      	bgt.n	801e2c0 <_printf_float+0x168>
 801e2ba:	6822      	ldr	r2, [r4, #0]
 801e2bc:	07d2      	lsls	r2, r2, #31
 801e2be:	d501      	bpl.n	801e2c4 <_printf_float+0x16c>
 801e2c0:	3301      	adds	r3, #1
 801e2c2:	6123      	str	r3, [r4, #16]
 801e2c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	d09c      	beq.n	801e206 <_printf_float+0xae>
 801e2cc:	232d      	movs	r3, #45	; 0x2d
 801e2ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e2d2:	e798      	b.n	801e206 <_printf_float+0xae>
 801e2d4:	9a06      	ldr	r2, [sp, #24]
 801e2d6:	2a47      	cmp	r2, #71	; 0x47
 801e2d8:	d1be      	bne.n	801e258 <_printf_float+0x100>
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d1bc      	bne.n	801e258 <_printf_float+0x100>
 801e2de:	2301      	movs	r3, #1
 801e2e0:	e7b9      	b.n	801e256 <_printf_float+0xfe>
 801e2e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801e2e6:	d118      	bne.n	801e31a <_printf_float+0x1c2>
 801e2e8:	2900      	cmp	r1, #0
 801e2ea:	6863      	ldr	r3, [r4, #4]
 801e2ec:	dd0b      	ble.n	801e306 <_printf_float+0x1ae>
 801e2ee:	6121      	str	r1, [r4, #16]
 801e2f0:	b913      	cbnz	r3, 801e2f8 <_printf_float+0x1a0>
 801e2f2:	6822      	ldr	r2, [r4, #0]
 801e2f4:	07d0      	lsls	r0, r2, #31
 801e2f6:	d502      	bpl.n	801e2fe <_printf_float+0x1a6>
 801e2f8:	3301      	adds	r3, #1
 801e2fa:	440b      	add	r3, r1
 801e2fc:	6123      	str	r3, [r4, #16]
 801e2fe:	65a1      	str	r1, [r4, #88]	; 0x58
 801e300:	f04f 0900 	mov.w	r9, #0
 801e304:	e7de      	b.n	801e2c4 <_printf_float+0x16c>
 801e306:	b913      	cbnz	r3, 801e30e <_printf_float+0x1b6>
 801e308:	6822      	ldr	r2, [r4, #0]
 801e30a:	07d2      	lsls	r2, r2, #31
 801e30c:	d501      	bpl.n	801e312 <_printf_float+0x1ba>
 801e30e:	3302      	adds	r3, #2
 801e310:	e7f4      	b.n	801e2fc <_printf_float+0x1a4>
 801e312:	2301      	movs	r3, #1
 801e314:	e7f2      	b.n	801e2fc <_printf_float+0x1a4>
 801e316:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801e31a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e31c:	4299      	cmp	r1, r3
 801e31e:	db05      	blt.n	801e32c <_printf_float+0x1d4>
 801e320:	6823      	ldr	r3, [r4, #0]
 801e322:	6121      	str	r1, [r4, #16]
 801e324:	07d8      	lsls	r0, r3, #31
 801e326:	d5ea      	bpl.n	801e2fe <_printf_float+0x1a6>
 801e328:	1c4b      	adds	r3, r1, #1
 801e32a:	e7e7      	b.n	801e2fc <_printf_float+0x1a4>
 801e32c:	2900      	cmp	r1, #0
 801e32e:	bfd4      	ite	le
 801e330:	f1c1 0202 	rsble	r2, r1, #2
 801e334:	2201      	movgt	r2, #1
 801e336:	4413      	add	r3, r2
 801e338:	e7e0      	b.n	801e2fc <_printf_float+0x1a4>
 801e33a:	6823      	ldr	r3, [r4, #0]
 801e33c:	055a      	lsls	r2, r3, #21
 801e33e:	d407      	bmi.n	801e350 <_printf_float+0x1f8>
 801e340:	6923      	ldr	r3, [r4, #16]
 801e342:	4642      	mov	r2, r8
 801e344:	4631      	mov	r1, r6
 801e346:	4628      	mov	r0, r5
 801e348:	47b8      	blx	r7
 801e34a:	3001      	adds	r0, #1
 801e34c:	d12c      	bne.n	801e3a8 <_printf_float+0x250>
 801e34e:	e764      	b.n	801e21a <_printf_float+0xc2>
 801e350:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e354:	f240 80e0 	bls.w	801e518 <_printf_float+0x3c0>
 801e358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e35c:	2200      	movs	r2, #0
 801e35e:	2300      	movs	r3, #0
 801e360:	f7e2 fbda 	bl	8000b18 <__aeabi_dcmpeq>
 801e364:	2800      	cmp	r0, #0
 801e366:	d034      	beq.n	801e3d2 <_printf_float+0x27a>
 801e368:	4a37      	ldr	r2, [pc, #220]	; (801e448 <_printf_float+0x2f0>)
 801e36a:	2301      	movs	r3, #1
 801e36c:	4631      	mov	r1, r6
 801e36e:	4628      	mov	r0, r5
 801e370:	47b8      	blx	r7
 801e372:	3001      	adds	r0, #1
 801e374:	f43f af51 	beq.w	801e21a <_printf_float+0xc2>
 801e378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e37c:	429a      	cmp	r2, r3
 801e37e:	db02      	blt.n	801e386 <_printf_float+0x22e>
 801e380:	6823      	ldr	r3, [r4, #0]
 801e382:	07d8      	lsls	r0, r3, #31
 801e384:	d510      	bpl.n	801e3a8 <_printf_float+0x250>
 801e386:	ee18 3a10 	vmov	r3, s16
 801e38a:	4652      	mov	r2, sl
 801e38c:	4631      	mov	r1, r6
 801e38e:	4628      	mov	r0, r5
 801e390:	47b8      	blx	r7
 801e392:	3001      	adds	r0, #1
 801e394:	f43f af41 	beq.w	801e21a <_printf_float+0xc2>
 801e398:	f04f 0800 	mov.w	r8, #0
 801e39c:	f104 091a 	add.w	r9, r4, #26
 801e3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e3a2:	3b01      	subs	r3, #1
 801e3a4:	4543      	cmp	r3, r8
 801e3a6:	dc09      	bgt.n	801e3bc <_printf_float+0x264>
 801e3a8:	6823      	ldr	r3, [r4, #0]
 801e3aa:	079b      	lsls	r3, r3, #30
 801e3ac:	f100 8105 	bmi.w	801e5ba <_printf_float+0x462>
 801e3b0:	68e0      	ldr	r0, [r4, #12]
 801e3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3b4:	4298      	cmp	r0, r3
 801e3b6:	bfb8      	it	lt
 801e3b8:	4618      	movlt	r0, r3
 801e3ba:	e730      	b.n	801e21e <_printf_float+0xc6>
 801e3bc:	2301      	movs	r3, #1
 801e3be:	464a      	mov	r2, r9
 801e3c0:	4631      	mov	r1, r6
 801e3c2:	4628      	mov	r0, r5
 801e3c4:	47b8      	blx	r7
 801e3c6:	3001      	adds	r0, #1
 801e3c8:	f43f af27 	beq.w	801e21a <_printf_float+0xc2>
 801e3cc:	f108 0801 	add.w	r8, r8, #1
 801e3d0:	e7e6      	b.n	801e3a0 <_printf_float+0x248>
 801e3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	dc39      	bgt.n	801e44c <_printf_float+0x2f4>
 801e3d8:	4a1b      	ldr	r2, [pc, #108]	; (801e448 <_printf_float+0x2f0>)
 801e3da:	2301      	movs	r3, #1
 801e3dc:	4631      	mov	r1, r6
 801e3de:	4628      	mov	r0, r5
 801e3e0:	47b8      	blx	r7
 801e3e2:	3001      	adds	r0, #1
 801e3e4:	f43f af19 	beq.w	801e21a <_printf_float+0xc2>
 801e3e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e3ec:	4313      	orrs	r3, r2
 801e3ee:	d102      	bne.n	801e3f6 <_printf_float+0x29e>
 801e3f0:	6823      	ldr	r3, [r4, #0]
 801e3f2:	07d9      	lsls	r1, r3, #31
 801e3f4:	d5d8      	bpl.n	801e3a8 <_printf_float+0x250>
 801e3f6:	ee18 3a10 	vmov	r3, s16
 801e3fa:	4652      	mov	r2, sl
 801e3fc:	4631      	mov	r1, r6
 801e3fe:	4628      	mov	r0, r5
 801e400:	47b8      	blx	r7
 801e402:	3001      	adds	r0, #1
 801e404:	f43f af09 	beq.w	801e21a <_printf_float+0xc2>
 801e408:	f04f 0900 	mov.w	r9, #0
 801e40c:	f104 0a1a 	add.w	sl, r4, #26
 801e410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e412:	425b      	negs	r3, r3
 801e414:	454b      	cmp	r3, r9
 801e416:	dc01      	bgt.n	801e41c <_printf_float+0x2c4>
 801e418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e41a:	e792      	b.n	801e342 <_printf_float+0x1ea>
 801e41c:	2301      	movs	r3, #1
 801e41e:	4652      	mov	r2, sl
 801e420:	4631      	mov	r1, r6
 801e422:	4628      	mov	r0, r5
 801e424:	47b8      	blx	r7
 801e426:	3001      	adds	r0, #1
 801e428:	f43f aef7 	beq.w	801e21a <_printf_float+0xc2>
 801e42c:	f109 0901 	add.w	r9, r9, #1
 801e430:	e7ee      	b.n	801e410 <_printf_float+0x2b8>
 801e432:	bf00      	nop
 801e434:	7fefffff 	.word	0x7fefffff
 801e438:	08022c9c 	.word	0x08022c9c
 801e43c:	08022ca0 	.word	0x08022ca0
 801e440:	08022ca8 	.word	0x08022ca8
 801e444:	08022ca4 	.word	0x08022ca4
 801e448:	08022cac 	.word	0x08022cac
 801e44c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e44e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e450:	429a      	cmp	r2, r3
 801e452:	bfa8      	it	ge
 801e454:	461a      	movge	r2, r3
 801e456:	2a00      	cmp	r2, #0
 801e458:	4691      	mov	r9, r2
 801e45a:	dc37      	bgt.n	801e4cc <_printf_float+0x374>
 801e45c:	f04f 0b00 	mov.w	fp, #0
 801e460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e464:	f104 021a 	add.w	r2, r4, #26
 801e468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e46a:	9305      	str	r3, [sp, #20]
 801e46c:	eba3 0309 	sub.w	r3, r3, r9
 801e470:	455b      	cmp	r3, fp
 801e472:	dc33      	bgt.n	801e4dc <_printf_float+0x384>
 801e474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e478:	429a      	cmp	r2, r3
 801e47a:	db3b      	blt.n	801e4f4 <_printf_float+0x39c>
 801e47c:	6823      	ldr	r3, [r4, #0]
 801e47e:	07da      	lsls	r2, r3, #31
 801e480:	d438      	bmi.n	801e4f4 <_printf_float+0x39c>
 801e482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e484:	9b05      	ldr	r3, [sp, #20]
 801e486:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e488:	1ad3      	subs	r3, r2, r3
 801e48a:	eba2 0901 	sub.w	r9, r2, r1
 801e48e:	4599      	cmp	r9, r3
 801e490:	bfa8      	it	ge
 801e492:	4699      	movge	r9, r3
 801e494:	f1b9 0f00 	cmp.w	r9, #0
 801e498:	dc35      	bgt.n	801e506 <_printf_float+0x3ae>
 801e49a:	f04f 0800 	mov.w	r8, #0
 801e49e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e4a2:	f104 0a1a 	add.w	sl, r4, #26
 801e4a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e4aa:	1a9b      	subs	r3, r3, r2
 801e4ac:	eba3 0309 	sub.w	r3, r3, r9
 801e4b0:	4543      	cmp	r3, r8
 801e4b2:	f77f af79 	ble.w	801e3a8 <_printf_float+0x250>
 801e4b6:	2301      	movs	r3, #1
 801e4b8:	4652      	mov	r2, sl
 801e4ba:	4631      	mov	r1, r6
 801e4bc:	4628      	mov	r0, r5
 801e4be:	47b8      	blx	r7
 801e4c0:	3001      	adds	r0, #1
 801e4c2:	f43f aeaa 	beq.w	801e21a <_printf_float+0xc2>
 801e4c6:	f108 0801 	add.w	r8, r8, #1
 801e4ca:	e7ec      	b.n	801e4a6 <_printf_float+0x34e>
 801e4cc:	4613      	mov	r3, r2
 801e4ce:	4631      	mov	r1, r6
 801e4d0:	4642      	mov	r2, r8
 801e4d2:	4628      	mov	r0, r5
 801e4d4:	47b8      	blx	r7
 801e4d6:	3001      	adds	r0, #1
 801e4d8:	d1c0      	bne.n	801e45c <_printf_float+0x304>
 801e4da:	e69e      	b.n	801e21a <_printf_float+0xc2>
 801e4dc:	2301      	movs	r3, #1
 801e4de:	4631      	mov	r1, r6
 801e4e0:	4628      	mov	r0, r5
 801e4e2:	9205      	str	r2, [sp, #20]
 801e4e4:	47b8      	blx	r7
 801e4e6:	3001      	adds	r0, #1
 801e4e8:	f43f ae97 	beq.w	801e21a <_printf_float+0xc2>
 801e4ec:	9a05      	ldr	r2, [sp, #20]
 801e4ee:	f10b 0b01 	add.w	fp, fp, #1
 801e4f2:	e7b9      	b.n	801e468 <_printf_float+0x310>
 801e4f4:	ee18 3a10 	vmov	r3, s16
 801e4f8:	4652      	mov	r2, sl
 801e4fa:	4631      	mov	r1, r6
 801e4fc:	4628      	mov	r0, r5
 801e4fe:	47b8      	blx	r7
 801e500:	3001      	adds	r0, #1
 801e502:	d1be      	bne.n	801e482 <_printf_float+0x32a>
 801e504:	e689      	b.n	801e21a <_printf_float+0xc2>
 801e506:	9a05      	ldr	r2, [sp, #20]
 801e508:	464b      	mov	r3, r9
 801e50a:	4442      	add	r2, r8
 801e50c:	4631      	mov	r1, r6
 801e50e:	4628      	mov	r0, r5
 801e510:	47b8      	blx	r7
 801e512:	3001      	adds	r0, #1
 801e514:	d1c1      	bne.n	801e49a <_printf_float+0x342>
 801e516:	e680      	b.n	801e21a <_printf_float+0xc2>
 801e518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e51a:	2a01      	cmp	r2, #1
 801e51c:	dc01      	bgt.n	801e522 <_printf_float+0x3ca>
 801e51e:	07db      	lsls	r3, r3, #31
 801e520:	d538      	bpl.n	801e594 <_printf_float+0x43c>
 801e522:	2301      	movs	r3, #1
 801e524:	4642      	mov	r2, r8
 801e526:	4631      	mov	r1, r6
 801e528:	4628      	mov	r0, r5
 801e52a:	47b8      	blx	r7
 801e52c:	3001      	adds	r0, #1
 801e52e:	f43f ae74 	beq.w	801e21a <_printf_float+0xc2>
 801e532:	ee18 3a10 	vmov	r3, s16
 801e536:	4652      	mov	r2, sl
 801e538:	4631      	mov	r1, r6
 801e53a:	4628      	mov	r0, r5
 801e53c:	47b8      	blx	r7
 801e53e:	3001      	adds	r0, #1
 801e540:	f43f ae6b 	beq.w	801e21a <_printf_float+0xc2>
 801e544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e548:	2200      	movs	r2, #0
 801e54a:	2300      	movs	r3, #0
 801e54c:	f7e2 fae4 	bl	8000b18 <__aeabi_dcmpeq>
 801e550:	b9d8      	cbnz	r0, 801e58a <_printf_float+0x432>
 801e552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e554:	f108 0201 	add.w	r2, r8, #1
 801e558:	3b01      	subs	r3, #1
 801e55a:	4631      	mov	r1, r6
 801e55c:	4628      	mov	r0, r5
 801e55e:	47b8      	blx	r7
 801e560:	3001      	adds	r0, #1
 801e562:	d10e      	bne.n	801e582 <_printf_float+0x42a>
 801e564:	e659      	b.n	801e21a <_printf_float+0xc2>
 801e566:	2301      	movs	r3, #1
 801e568:	4652      	mov	r2, sl
 801e56a:	4631      	mov	r1, r6
 801e56c:	4628      	mov	r0, r5
 801e56e:	47b8      	blx	r7
 801e570:	3001      	adds	r0, #1
 801e572:	f43f ae52 	beq.w	801e21a <_printf_float+0xc2>
 801e576:	f108 0801 	add.w	r8, r8, #1
 801e57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e57c:	3b01      	subs	r3, #1
 801e57e:	4543      	cmp	r3, r8
 801e580:	dcf1      	bgt.n	801e566 <_printf_float+0x40e>
 801e582:	464b      	mov	r3, r9
 801e584:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e588:	e6dc      	b.n	801e344 <_printf_float+0x1ec>
 801e58a:	f04f 0800 	mov.w	r8, #0
 801e58e:	f104 0a1a 	add.w	sl, r4, #26
 801e592:	e7f2      	b.n	801e57a <_printf_float+0x422>
 801e594:	2301      	movs	r3, #1
 801e596:	4642      	mov	r2, r8
 801e598:	e7df      	b.n	801e55a <_printf_float+0x402>
 801e59a:	2301      	movs	r3, #1
 801e59c:	464a      	mov	r2, r9
 801e59e:	4631      	mov	r1, r6
 801e5a0:	4628      	mov	r0, r5
 801e5a2:	47b8      	blx	r7
 801e5a4:	3001      	adds	r0, #1
 801e5a6:	f43f ae38 	beq.w	801e21a <_printf_float+0xc2>
 801e5aa:	f108 0801 	add.w	r8, r8, #1
 801e5ae:	68e3      	ldr	r3, [r4, #12]
 801e5b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e5b2:	1a5b      	subs	r3, r3, r1
 801e5b4:	4543      	cmp	r3, r8
 801e5b6:	dcf0      	bgt.n	801e59a <_printf_float+0x442>
 801e5b8:	e6fa      	b.n	801e3b0 <_printf_float+0x258>
 801e5ba:	f04f 0800 	mov.w	r8, #0
 801e5be:	f104 0919 	add.w	r9, r4, #25
 801e5c2:	e7f4      	b.n	801e5ae <_printf_float+0x456>

0801e5c4 <_printf_common>:
 801e5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5c8:	4616      	mov	r6, r2
 801e5ca:	4699      	mov	r9, r3
 801e5cc:	688a      	ldr	r2, [r1, #8]
 801e5ce:	690b      	ldr	r3, [r1, #16]
 801e5d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e5d4:	4293      	cmp	r3, r2
 801e5d6:	bfb8      	it	lt
 801e5d8:	4613      	movlt	r3, r2
 801e5da:	6033      	str	r3, [r6, #0]
 801e5dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e5e0:	4607      	mov	r7, r0
 801e5e2:	460c      	mov	r4, r1
 801e5e4:	b10a      	cbz	r2, 801e5ea <_printf_common+0x26>
 801e5e6:	3301      	adds	r3, #1
 801e5e8:	6033      	str	r3, [r6, #0]
 801e5ea:	6823      	ldr	r3, [r4, #0]
 801e5ec:	0699      	lsls	r1, r3, #26
 801e5ee:	bf42      	ittt	mi
 801e5f0:	6833      	ldrmi	r3, [r6, #0]
 801e5f2:	3302      	addmi	r3, #2
 801e5f4:	6033      	strmi	r3, [r6, #0]
 801e5f6:	6825      	ldr	r5, [r4, #0]
 801e5f8:	f015 0506 	ands.w	r5, r5, #6
 801e5fc:	d106      	bne.n	801e60c <_printf_common+0x48>
 801e5fe:	f104 0a19 	add.w	sl, r4, #25
 801e602:	68e3      	ldr	r3, [r4, #12]
 801e604:	6832      	ldr	r2, [r6, #0]
 801e606:	1a9b      	subs	r3, r3, r2
 801e608:	42ab      	cmp	r3, r5
 801e60a:	dc26      	bgt.n	801e65a <_printf_common+0x96>
 801e60c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e610:	1e13      	subs	r3, r2, #0
 801e612:	6822      	ldr	r2, [r4, #0]
 801e614:	bf18      	it	ne
 801e616:	2301      	movne	r3, #1
 801e618:	0692      	lsls	r2, r2, #26
 801e61a:	d42b      	bmi.n	801e674 <_printf_common+0xb0>
 801e61c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e620:	4649      	mov	r1, r9
 801e622:	4638      	mov	r0, r7
 801e624:	47c0      	blx	r8
 801e626:	3001      	adds	r0, #1
 801e628:	d01e      	beq.n	801e668 <_printf_common+0xa4>
 801e62a:	6823      	ldr	r3, [r4, #0]
 801e62c:	68e5      	ldr	r5, [r4, #12]
 801e62e:	6832      	ldr	r2, [r6, #0]
 801e630:	f003 0306 	and.w	r3, r3, #6
 801e634:	2b04      	cmp	r3, #4
 801e636:	bf08      	it	eq
 801e638:	1aad      	subeq	r5, r5, r2
 801e63a:	68a3      	ldr	r3, [r4, #8]
 801e63c:	6922      	ldr	r2, [r4, #16]
 801e63e:	bf0c      	ite	eq
 801e640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e644:	2500      	movne	r5, #0
 801e646:	4293      	cmp	r3, r2
 801e648:	bfc4      	itt	gt
 801e64a:	1a9b      	subgt	r3, r3, r2
 801e64c:	18ed      	addgt	r5, r5, r3
 801e64e:	2600      	movs	r6, #0
 801e650:	341a      	adds	r4, #26
 801e652:	42b5      	cmp	r5, r6
 801e654:	d11a      	bne.n	801e68c <_printf_common+0xc8>
 801e656:	2000      	movs	r0, #0
 801e658:	e008      	b.n	801e66c <_printf_common+0xa8>
 801e65a:	2301      	movs	r3, #1
 801e65c:	4652      	mov	r2, sl
 801e65e:	4649      	mov	r1, r9
 801e660:	4638      	mov	r0, r7
 801e662:	47c0      	blx	r8
 801e664:	3001      	adds	r0, #1
 801e666:	d103      	bne.n	801e670 <_printf_common+0xac>
 801e668:	f04f 30ff 	mov.w	r0, #4294967295
 801e66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e670:	3501      	adds	r5, #1
 801e672:	e7c6      	b.n	801e602 <_printf_common+0x3e>
 801e674:	18e1      	adds	r1, r4, r3
 801e676:	1c5a      	adds	r2, r3, #1
 801e678:	2030      	movs	r0, #48	; 0x30
 801e67a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e67e:	4422      	add	r2, r4
 801e680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e688:	3302      	adds	r3, #2
 801e68a:	e7c7      	b.n	801e61c <_printf_common+0x58>
 801e68c:	2301      	movs	r3, #1
 801e68e:	4622      	mov	r2, r4
 801e690:	4649      	mov	r1, r9
 801e692:	4638      	mov	r0, r7
 801e694:	47c0      	blx	r8
 801e696:	3001      	adds	r0, #1
 801e698:	d0e6      	beq.n	801e668 <_printf_common+0xa4>
 801e69a:	3601      	adds	r6, #1
 801e69c:	e7d9      	b.n	801e652 <_printf_common+0x8e>
	...

0801e6a0 <_printf_i>:
 801e6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e6a4:	460c      	mov	r4, r1
 801e6a6:	4691      	mov	r9, r2
 801e6a8:	7e27      	ldrb	r7, [r4, #24]
 801e6aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e6ac:	2f78      	cmp	r7, #120	; 0x78
 801e6ae:	4680      	mov	r8, r0
 801e6b0:	469a      	mov	sl, r3
 801e6b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e6b6:	d807      	bhi.n	801e6c8 <_printf_i+0x28>
 801e6b8:	2f62      	cmp	r7, #98	; 0x62
 801e6ba:	d80a      	bhi.n	801e6d2 <_printf_i+0x32>
 801e6bc:	2f00      	cmp	r7, #0
 801e6be:	f000 80d8 	beq.w	801e872 <_printf_i+0x1d2>
 801e6c2:	2f58      	cmp	r7, #88	; 0x58
 801e6c4:	f000 80a3 	beq.w	801e80e <_printf_i+0x16e>
 801e6c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e6cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e6d0:	e03a      	b.n	801e748 <_printf_i+0xa8>
 801e6d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e6d6:	2b15      	cmp	r3, #21
 801e6d8:	d8f6      	bhi.n	801e6c8 <_printf_i+0x28>
 801e6da:	a001      	add	r0, pc, #4	; (adr r0, 801e6e0 <_printf_i+0x40>)
 801e6dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801e6e0:	0801e739 	.word	0x0801e739
 801e6e4:	0801e74d 	.word	0x0801e74d
 801e6e8:	0801e6c9 	.word	0x0801e6c9
 801e6ec:	0801e6c9 	.word	0x0801e6c9
 801e6f0:	0801e6c9 	.word	0x0801e6c9
 801e6f4:	0801e6c9 	.word	0x0801e6c9
 801e6f8:	0801e74d 	.word	0x0801e74d
 801e6fc:	0801e6c9 	.word	0x0801e6c9
 801e700:	0801e6c9 	.word	0x0801e6c9
 801e704:	0801e6c9 	.word	0x0801e6c9
 801e708:	0801e6c9 	.word	0x0801e6c9
 801e70c:	0801e859 	.word	0x0801e859
 801e710:	0801e77d 	.word	0x0801e77d
 801e714:	0801e83b 	.word	0x0801e83b
 801e718:	0801e6c9 	.word	0x0801e6c9
 801e71c:	0801e6c9 	.word	0x0801e6c9
 801e720:	0801e87b 	.word	0x0801e87b
 801e724:	0801e6c9 	.word	0x0801e6c9
 801e728:	0801e77d 	.word	0x0801e77d
 801e72c:	0801e6c9 	.word	0x0801e6c9
 801e730:	0801e6c9 	.word	0x0801e6c9
 801e734:	0801e843 	.word	0x0801e843
 801e738:	680b      	ldr	r3, [r1, #0]
 801e73a:	1d1a      	adds	r2, r3, #4
 801e73c:	681b      	ldr	r3, [r3, #0]
 801e73e:	600a      	str	r2, [r1, #0]
 801e740:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e748:	2301      	movs	r3, #1
 801e74a:	e0a3      	b.n	801e894 <_printf_i+0x1f4>
 801e74c:	6825      	ldr	r5, [r4, #0]
 801e74e:	6808      	ldr	r0, [r1, #0]
 801e750:	062e      	lsls	r6, r5, #24
 801e752:	f100 0304 	add.w	r3, r0, #4
 801e756:	d50a      	bpl.n	801e76e <_printf_i+0xce>
 801e758:	6805      	ldr	r5, [r0, #0]
 801e75a:	600b      	str	r3, [r1, #0]
 801e75c:	2d00      	cmp	r5, #0
 801e75e:	da03      	bge.n	801e768 <_printf_i+0xc8>
 801e760:	232d      	movs	r3, #45	; 0x2d
 801e762:	426d      	negs	r5, r5
 801e764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e768:	485e      	ldr	r0, [pc, #376]	; (801e8e4 <_printf_i+0x244>)
 801e76a:	230a      	movs	r3, #10
 801e76c:	e019      	b.n	801e7a2 <_printf_i+0x102>
 801e76e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801e772:	6805      	ldr	r5, [r0, #0]
 801e774:	600b      	str	r3, [r1, #0]
 801e776:	bf18      	it	ne
 801e778:	b22d      	sxthne	r5, r5
 801e77a:	e7ef      	b.n	801e75c <_printf_i+0xbc>
 801e77c:	680b      	ldr	r3, [r1, #0]
 801e77e:	6825      	ldr	r5, [r4, #0]
 801e780:	1d18      	adds	r0, r3, #4
 801e782:	6008      	str	r0, [r1, #0]
 801e784:	0628      	lsls	r0, r5, #24
 801e786:	d501      	bpl.n	801e78c <_printf_i+0xec>
 801e788:	681d      	ldr	r5, [r3, #0]
 801e78a:	e002      	b.n	801e792 <_printf_i+0xf2>
 801e78c:	0669      	lsls	r1, r5, #25
 801e78e:	d5fb      	bpl.n	801e788 <_printf_i+0xe8>
 801e790:	881d      	ldrh	r5, [r3, #0]
 801e792:	4854      	ldr	r0, [pc, #336]	; (801e8e4 <_printf_i+0x244>)
 801e794:	2f6f      	cmp	r7, #111	; 0x6f
 801e796:	bf0c      	ite	eq
 801e798:	2308      	moveq	r3, #8
 801e79a:	230a      	movne	r3, #10
 801e79c:	2100      	movs	r1, #0
 801e79e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e7a2:	6866      	ldr	r6, [r4, #4]
 801e7a4:	60a6      	str	r6, [r4, #8]
 801e7a6:	2e00      	cmp	r6, #0
 801e7a8:	bfa2      	ittt	ge
 801e7aa:	6821      	ldrge	r1, [r4, #0]
 801e7ac:	f021 0104 	bicge.w	r1, r1, #4
 801e7b0:	6021      	strge	r1, [r4, #0]
 801e7b2:	b90d      	cbnz	r5, 801e7b8 <_printf_i+0x118>
 801e7b4:	2e00      	cmp	r6, #0
 801e7b6:	d04d      	beq.n	801e854 <_printf_i+0x1b4>
 801e7b8:	4616      	mov	r6, r2
 801e7ba:	fbb5 f1f3 	udiv	r1, r5, r3
 801e7be:	fb03 5711 	mls	r7, r3, r1, r5
 801e7c2:	5dc7      	ldrb	r7, [r0, r7]
 801e7c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e7c8:	462f      	mov	r7, r5
 801e7ca:	42bb      	cmp	r3, r7
 801e7cc:	460d      	mov	r5, r1
 801e7ce:	d9f4      	bls.n	801e7ba <_printf_i+0x11a>
 801e7d0:	2b08      	cmp	r3, #8
 801e7d2:	d10b      	bne.n	801e7ec <_printf_i+0x14c>
 801e7d4:	6823      	ldr	r3, [r4, #0]
 801e7d6:	07df      	lsls	r7, r3, #31
 801e7d8:	d508      	bpl.n	801e7ec <_printf_i+0x14c>
 801e7da:	6923      	ldr	r3, [r4, #16]
 801e7dc:	6861      	ldr	r1, [r4, #4]
 801e7de:	4299      	cmp	r1, r3
 801e7e0:	bfde      	ittt	le
 801e7e2:	2330      	movle	r3, #48	; 0x30
 801e7e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e7e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e7ec:	1b92      	subs	r2, r2, r6
 801e7ee:	6122      	str	r2, [r4, #16]
 801e7f0:	f8cd a000 	str.w	sl, [sp]
 801e7f4:	464b      	mov	r3, r9
 801e7f6:	aa03      	add	r2, sp, #12
 801e7f8:	4621      	mov	r1, r4
 801e7fa:	4640      	mov	r0, r8
 801e7fc:	f7ff fee2 	bl	801e5c4 <_printf_common>
 801e800:	3001      	adds	r0, #1
 801e802:	d14c      	bne.n	801e89e <_printf_i+0x1fe>
 801e804:	f04f 30ff 	mov.w	r0, #4294967295
 801e808:	b004      	add	sp, #16
 801e80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e80e:	4835      	ldr	r0, [pc, #212]	; (801e8e4 <_printf_i+0x244>)
 801e810:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e814:	6823      	ldr	r3, [r4, #0]
 801e816:	680e      	ldr	r6, [r1, #0]
 801e818:	061f      	lsls	r7, r3, #24
 801e81a:	f856 5b04 	ldr.w	r5, [r6], #4
 801e81e:	600e      	str	r6, [r1, #0]
 801e820:	d514      	bpl.n	801e84c <_printf_i+0x1ac>
 801e822:	07d9      	lsls	r1, r3, #31
 801e824:	bf44      	itt	mi
 801e826:	f043 0320 	orrmi.w	r3, r3, #32
 801e82a:	6023      	strmi	r3, [r4, #0]
 801e82c:	b91d      	cbnz	r5, 801e836 <_printf_i+0x196>
 801e82e:	6823      	ldr	r3, [r4, #0]
 801e830:	f023 0320 	bic.w	r3, r3, #32
 801e834:	6023      	str	r3, [r4, #0]
 801e836:	2310      	movs	r3, #16
 801e838:	e7b0      	b.n	801e79c <_printf_i+0xfc>
 801e83a:	6823      	ldr	r3, [r4, #0]
 801e83c:	f043 0320 	orr.w	r3, r3, #32
 801e840:	6023      	str	r3, [r4, #0]
 801e842:	2378      	movs	r3, #120	; 0x78
 801e844:	4828      	ldr	r0, [pc, #160]	; (801e8e8 <_printf_i+0x248>)
 801e846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e84a:	e7e3      	b.n	801e814 <_printf_i+0x174>
 801e84c:	065e      	lsls	r6, r3, #25
 801e84e:	bf48      	it	mi
 801e850:	b2ad      	uxthmi	r5, r5
 801e852:	e7e6      	b.n	801e822 <_printf_i+0x182>
 801e854:	4616      	mov	r6, r2
 801e856:	e7bb      	b.n	801e7d0 <_printf_i+0x130>
 801e858:	680b      	ldr	r3, [r1, #0]
 801e85a:	6826      	ldr	r6, [r4, #0]
 801e85c:	6960      	ldr	r0, [r4, #20]
 801e85e:	1d1d      	adds	r5, r3, #4
 801e860:	600d      	str	r5, [r1, #0]
 801e862:	0635      	lsls	r5, r6, #24
 801e864:	681b      	ldr	r3, [r3, #0]
 801e866:	d501      	bpl.n	801e86c <_printf_i+0x1cc>
 801e868:	6018      	str	r0, [r3, #0]
 801e86a:	e002      	b.n	801e872 <_printf_i+0x1d2>
 801e86c:	0671      	lsls	r1, r6, #25
 801e86e:	d5fb      	bpl.n	801e868 <_printf_i+0x1c8>
 801e870:	8018      	strh	r0, [r3, #0]
 801e872:	2300      	movs	r3, #0
 801e874:	6123      	str	r3, [r4, #16]
 801e876:	4616      	mov	r6, r2
 801e878:	e7ba      	b.n	801e7f0 <_printf_i+0x150>
 801e87a:	680b      	ldr	r3, [r1, #0]
 801e87c:	1d1a      	adds	r2, r3, #4
 801e87e:	600a      	str	r2, [r1, #0]
 801e880:	681e      	ldr	r6, [r3, #0]
 801e882:	6862      	ldr	r2, [r4, #4]
 801e884:	2100      	movs	r1, #0
 801e886:	4630      	mov	r0, r6
 801e888:	f7e1 fcd2 	bl	8000230 <memchr>
 801e88c:	b108      	cbz	r0, 801e892 <_printf_i+0x1f2>
 801e88e:	1b80      	subs	r0, r0, r6
 801e890:	6060      	str	r0, [r4, #4]
 801e892:	6863      	ldr	r3, [r4, #4]
 801e894:	6123      	str	r3, [r4, #16]
 801e896:	2300      	movs	r3, #0
 801e898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e89c:	e7a8      	b.n	801e7f0 <_printf_i+0x150>
 801e89e:	6923      	ldr	r3, [r4, #16]
 801e8a0:	4632      	mov	r2, r6
 801e8a2:	4649      	mov	r1, r9
 801e8a4:	4640      	mov	r0, r8
 801e8a6:	47d0      	blx	sl
 801e8a8:	3001      	adds	r0, #1
 801e8aa:	d0ab      	beq.n	801e804 <_printf_i+0x164>
 801e8ac:	6823      	ldr	r3, [r4, #0]
 801e8ae:	079b      	lsls	r3, r3, #30
 801e8b0:	d413      	bmi.n	801e8da <_printf_i+0x23a>
 801e8b2:	68e0      	ldr	r0, [r4, #12]
 801e8b4:	9b03      	ldr	r3, [sp, #12]
 801e8b6:	4298      	cmp	r0, r3
 801e8b8:	bfb8      	it	lt
 801e8ba:	4618      	movlt	r0, r3
 801e8bc:	e7a4      	b.n	801e808 <_printf_i+0x168>
 801e8be:	2301      	movs	r3, #1
 801e8c0:	4632      	mov	r2, r6
 801e8c2:	4649      	mov	r1, r9
 801e8c4:	4640      	mov	r0, r8
 801e8c6:	47d0      	blx	sl
 801e8c8:	3001      	adds	r0, #1
 801e8ca:	d09b      	beq.n	801e804 <_printf_i+0x164>
 801e8cc:	3501      	adds	r5, #1
 801e8ce:	68e3      	ldr	r3, [r4, #12]
 801e8d0:	9903      	ldr	r1, [sp, #12]
 801e8d2:	1a5b      	subs	r3, r3, r1
 801e8d4:	42ab      	cmp	r3, r5
 801e8d6:	dcf2      	bgt.n	801e8be <_printf_i+0x21e>
 801e8d8:	e7eb      	b.n	801e8b2 <_printf_i+0x212>
 801e8da:	2500      	movs	r5, #0
 801e8dc:	f104 0619 	add.w	r6, r4, #25
 801e8e0:	e7f5      	b.n	801e8ce <_printf_i+0x22e>
 801e8e2:	bf00      	nop
 801e8e4:	08022cae 	.word	0x08022cae
 801e8e8:	08022cbf 	.word	0x08022cbf

0801e8ec <_sbrk_r>:
 801e8ec:	b538      	push	{r3, r4, r5, lr}
 801e8ee:	4d06      	ldr	r5, [pc, #24]	; (801e908 <_sbrk_r+0x1c>)
 801e8f0:	2300      	movs	r3, #0
 801e8f2:	4604      	mov	r4, r0
 801e8f4:	4608      	mov	r0, r1
 801e8f6:	602b      	str	r3, [r5, #0]
 801e8f8:	f7fe ff6e 	bl	801d7d8 <_sbrk>
 801e8fc:	1c43      	adds	r3, r0, #1
 801e8fe:	d102      	bne.n	801e906 <_sbrk_r+0x1a>
 801e900:	682b      	ldr	r3, [r5, #0]
 801e902:	b103      	cbz	r3, 801e906 <_sbrk_r+0x1a>
 801e904:	6023      	str	r3, [r4, #0]
 801e906:	bd38      	pop	{r3, r4, r5, pc}
 801e908:	20019244 	.word	0x20019244

0801e90c <siprintf>:
 801e90c:	b40e      	push	{r1, r2, r3}
 801e90e:	b500      	push	{lr}
 801e910:	b09c      	sub	sp, #112	; 0x70
 801e912:	ab1d      	add	r3, sp, #116	; 0x74
 801e914:	9002      	str	r0, [sp, #8]
 801e916:	9006      	str	r0, [sp, #24]
 801e918:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e91c:	4809      	ldr	r0, [pc, #36]	; (801e944 <siprintf+0x38>)
 801e91e:	9107      	str	r1, [sp, #28]
 801e920:	9104      	str	r1, [sp, #16]
 801e922:	4909      	ldr	r1, [pc, #36]	; (801e948 <siprintf+0x3c>)
 801e924:	f853 2b04 	ldr.w	r2, [r3], #4
 801e928:	9105      	str	r1, [sp, #20]
 801e92a:	6800      	ldr	r0, [r0, #0]
 801e92c:	9301      	str	r3, [sp, #4]
 801e92e:	a902      	add	r1, sp, #8
 801e930:	f002 ffca 	bl	80218c8 <_svfiprintf_r>
 801e934:	9b02      	ldr	r3, [sp, #8]
 801e936:	2200      	movs	r2, #0
 801e938:	701a      	strb	r2, [r3, #0]
 801e93a:	b01c      	add	sp, #112	; 0x70
 801e93c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e940:	b003      	add	sp, #12
 801e942:	4770      	bx	lr
 801e944:	2000008c 	.word	0x2000008c
 801e948:	ffff0208 	.word	0xffff0208

0801e94c <__sread>:
 801e94c:	b510      	push	{r4, lr}
 801e94e:	460c      	mov	r4, r1
 801e950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e954:	f003 f8b8 	bl	8021ac8 <_read_r>
 801e958:	2800      	cmp	r0, #0
 801e95a:	bfab      	itete	ge
 801e95c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e95e:	89a3      	ldrhlt	r3, [r4, #12]
 801e960:	181b      	addge	r3, r3, r0
 801e962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e966:	bfac      	ite	ge
 801e968:	6563      	strge	r3, [r4, #84]	; 0x54
 801e96a:	81a3      	strhlt	r3, [r4, #12]
 801e96c:	bd10      	pop	{r4, pc}

0801e96e <__swrite>:
 801e96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e972:	461f      	mov	r7, r3
 801e974:	898b      	ldrh	r3, [r1, #12]
 801e976:	05db      	lsls	r3, r3, #23
 801e978:	4605      	mov	r5, r0
 801e97a:	460c      	mov	r4, r1
 801e97c:	4616      	mov	r6, r2
 801e97e:	d505      	bpl.n	801e98c <__swrite+0x1e>
 801e980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e984:	2302      	movs	r3, #2
 801e986:	2200      	movs	r2, #0
 801e988:	f002 fa58 	bl	8020e3c <_lseek_r>
 801e98c:	89a3      	ldrh	r3, [r4, #12]
 801e98e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e996:	81a3      	strh	r3, [r4, #12]
 801e998:	4632      	mov	r2, r6
 801e99a:	463b      	mov	r3, r7
 801e99c:	4628      	mov	r0, r5
 801e99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e9a2:	f000 bfad 	b.w	801f900 <_write_r>

0801e9a6 <__sseek>:
 801e9a6:	b510      	push	{r4, lr}
 801e9a8:	460c      	mov	r4, r1
 801e9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9ae:	f002 fa45 	bl	8020e3c <_lseek_r>
 801e9b2:	1c43      	adds	r3, r0, #1
 801e9b4:	89a3      	ldrh	r3, [r4, #12]
 801e9b6:	bf15      	itete	ne
 801e9b8:	6560      	strne	r0, [r4, #84]	; 0x54
 801e9ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e9be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e9c2:	81a3      	strheq	r3, [r4, #12]
 801e9c4:	bf18      	it	ne
 801e9c6:	81a3      	strhne	r3, [r4, #12]
 801e9c8:	bd10      	pop	{r4, pc}

0801e9ca <__sclose>:
 801e9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9ce:	f001 b817 	b.w	801fa00 <_close_r>

0801e9d2 <strcat>:
 801e9d2:	b510      	push	{r4, lr}
 801e9d4:	4602      	mov	r2, r0
 801e9d6:	7814      	ldrb	r4, [r2, #0]
 801e9d8:	4613      	mov	r3, r2
 801e9da:	3201      	adds	r2, #1
 801e9dc:	2c00      	cmp	r4, #0
 801e9de:	d1fa      	bne.n	801e9d6 <strcat+0x4>
 801e9e0:	3b01      	subs	r3, #1
 801e9e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e9e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e9ea:	2a00      	cmp	r2, #0
 801e9ec:	d1f9      	bne.n	801e9e2 <strcat+0x10>
 801e9ee:	bd10      	pop	{r4, pc}

0801e9f0 <strchr>:
 801e9f0:	b2c9      	uxtb	r1, r1
 801e9f2:	4603      	mov	r3, r0
 801e9f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e9f8:	b11a      	cbz	r2, 801ea02 <strchr+0x12>
 801e9fa:	428a      	cmp	r2, r1
 801e9fc:	d1f9      	bne.n	801e9f2 <strchr+0x2>
 801e9fe:	4618      	mov	r0, r3
 801ea00:	4770      	bx	lr
 801ea02:	2900      	cmp	r1, #0
 801ea04:	bf18      	it	ne
 801ea06:	2300      	movne	r3, #0
 801ea08:	e7f9      	b.n	801e9fe <strchr+0xe>

0801ea0a <strncmp>:
 801ea0a:	b510      	push	{r4, lr}
 801ea0c:	b16a      	cbz	r2, 801ea2a <strncmp+0x20>
 801ea0e:	3901      	subs	r1, #1
 801ea10:	1884      	adds	r4, r0, r2
 801ea12:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ea16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ea1a:	4293      	cmp	r3, r2
 801ea1c:	d103      	bne.n	801ea26 <strncmp+0x1c>
 801ea1e:	42a0      	cmp	r0, r4
 801ea20:	d001      	beq.n	801ea26 <strncmp+0x1c>
 801ea22:	2b00      	cmp	r3, #0
 801ea24:	d1f5      	bne.n	801ea12 <strncmp+0x8>
 801ea26:	1a98      	subs	r0, r3, r2
 801ea28:	bd10      	pop	{r4, pc}
 801ea2a:	4610      	mov	r0, r2
 801ea2c:	e7fc      	b.n	801ea28 <strncmp+0x1e>

0801ea2e <strncpy>:
 801ea2e:	b510      	push	{r4, lr}
 801ea30:	3901      	subs	r1, #1
 801ea32:	4603      	mov	r3, r0
 801ea34:	b132      	cbz	r2, 801ea44 <strncpy+0x16>
 801ea36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ea3a:	f803 4b01 	strb.w	r4, [r3], #1
 801ea3e:	3a01      	subs	r2, #1
 801ea40:	2c00      	cmp	r4, #0
 801ea42:	d1f7      	bne.n	801ea34 <strncpy+0x6>
 801ea44:	441a      	add	r2, r3
 801ea46:	2100      	movs	r1, #0
 801ea48:	4293      	cmp	r3, r2
 801ea4a:	d100      	bne.n	801ea4e <strncpy+0x20>
 801ea4c:	bd10      	pop	{r4, pc}
 801ea4e:	f803 1b01 	strb.w	r1, [r3], #1
 801ea52:	e7f9      	b.n	801ea48 <strncpy+0x1a>

0801ea54 <sulp>:
 801ea54:	b570      	push	{r4, r5, r6, lr}
 801ea56:	4604      	mov	r4, r0
 801ea58:	460d      	mov	r5, r1
 801ea5a:	ec45 4b10 	vmov	d0, r4, r5
 801ea5e:	4616      	mov	r6, r2
 801ea60:	f002 fd88 	bl	8021574 <__ulp>
 801ea64:	ec51 0b10 	vmov	r0, r1, d0
 801ea68:	b17e      	cbz	r6, 801ea8a <sulp+0x36>
 801ea6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ea6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	dd09      	ble.n	801ea8a <sulp+0x36>
 801ea76:	051b      	lsls	r3, r3, #20
 801ea78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801ea7c:	2400      	movs	r4, #0
 801ea7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801ea82:	4622      	mov	r2, r4
 801ea84:	462b      	mov	r3, r5
 801ea86:	f7e1 fddf 	bl	8000648 <__aeabi_dmul>
 801ea8a:	bd70      	pop	{r4, r5, r6, pc}
 801ea8c:	0000      	movs	r0, r0
	...

0801ea90 <_strtod_l>:
 801ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea94:	b0a3      	sub	sp, #140	; 0x8c
 801ea96:	461f      	mov	r7, r3
 801ea98:	2300      	movs	r3, #0
 801ea9a:	931e      	str	r3, [sp, #120]	; 0x78
 801ea9c:	4ba4      	ldr	r3, [pc, #656]	; (801ed30 <_strtod_l+0x2a0>)
 801ea9e:	9219      	str	r2, [sp, #100]	; 0x64
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	9307      	str	r3, [sp, #28]
 801eaa4:	4604      	mov	r4, r0
 801eaa6:	4618      	mov	r0, r3
 801eaa8:	4688      	mov	r8, r1
 801eaaa:	f7e1 fbb3 	bl	8000214 <strlen>
 801eaae:	f04f 0a00 	mov.w	sl, #0
 801eab2:	4605      	mov	r5, r0
 801eab4:	f04f 0b00 	mov.w	fp, #0
 801eab8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801eabc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801eabe:	781a      	ldrb	r2, [r3, #0]
 801eac0:	2a2b      	cmp	r2, #43	; 0x2b
 801eac2:	d04c      	beq.n	801eb5e <_strtod_l+0xce>
 801eac4:	d839      	bhi.n	801eb3a <_strtod_l+0xaa>
 801eac6:	2a0d      	cmp	r2, #13
 801eac8:	d832      	bhi.n	801eb30 <_strtod_l+0xa0>
 801eaca:	2a08      	cmp	r2, #8
 801eacc:	d832      	bhi.n	801eb34 <_strtod_l+0xa4>
 801eace:	2a00      	cmp	r2, #0
 801ead0:	d03c      	beq.n	801eb4c <_strtod_l+0xbc>
 801ead2:	2300      	movs	r3, #0
 801ead4:	930e      	str	r3, [sp, #56]	; 0x38
 801ead6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ead8:	7833      	ldrb	r3, [r6, #0]
 801eada:	2b30      	cmp	r3, #48	; 0x30
 801eadc:	f040 80b4 	bne.w	801ec48 <_strtod_l+0x1b8>
 801eae0:	7873      	ldrb	r3, [r6, #1]
 801eae2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801eae6:	2b58      	cmp	r3, #88	; 0x58
 801eae8:	d16c      	bne.n	801ebc4 <_strtod_l+0x134>
 801eaea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eaec:	9301      	str	r3, [sp, #4]
 801eaee:	ab1e      	add	r3, sp, #120	; 0x78
 801eaf0:	9702      	str	r7, [sp, #8]
 801eaf2:	9300      	str	r3, [sp, #0]
 801eaf4:	4a8f      	ldr	r2, [pc, #572]	; (801ed34 <_strtod_l+0x2a4>)
 801eaf6:	ab1f      	add	r3, sp, #124	; 0x7c
 801eaf8:	a91d      	add	r1, sp, #116	; 0x74
 801eafa:	4620      	mov	r0, r4
 801eafc:	f001 fe82 	bl	8020804 <__gethex>
 801eb00:	f010 0707 	ands.w	r7, r0, #7
 801eb04:	4605      	mov	r5, r0
 801eb06:	d005      	beq.n	801eb14 <_strtod_l+0x84>
 801eb08:	2f06      	cmp	r7, #6
 801eb0a:	d12a      	bne.n	801eb62 <_strtod_l+0xd2>
 801eb0c:	3601      	adds	r6, #1
 801eb0e:	2300      	movs	r3, #0
 801eb10:	961d      	str	r6, [sp, #116]	; 0x74
 801eb12:	930e      	str	r3, [sp, #56]	; 0x38
 801eb14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	f040 8596 	bne.w	801f648 <_strtod_l+0xbb8>
 801eb1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb1e:	b1db      	cbz	r3, 801eb58 <_strtod_l+0xc8>
 801eb20:	4652      	mov	r2, sl
 801eb22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801eb26:	ec43 2b10 	vmov	d0, r2, r3
 801eb2a:	b023      	add	sp, #140	; 0x8c
 801eb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb30:	2a20      	cmp	r2, #32
 801eb32:	d1ce      	bne.n	801ead2 <_strtod_l+0x42>
 801eb34:	3301      	adds	r3, #1
 801eb36:	931d      	str	r3, [sp, #116]	; 0x74
 801eb38:	e7c0      	b.n	801eabc <_strtod_l+0x2c>
 801eb3a:	2a2d      	cmp	r2, #45	; 0x2d
 801eb3c:	d1c9      	bne.n	801ead2 <_strtod_l+0x42>
 801eb3e:	2201      	movs	r2, #1
 801eb40:	920e      	str	r2, [sp, #56]	; 0x38
 801eb42:	1c5a      	adds	r2, r3, #1
 801eb44:	921d      	str	r2, [sp, #116]	; 0x74
 801eb46:	785b      	ldrb	r3, [r3, #1]
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d1c4      	bne.n	801ead6 <_strtod_l+0x46>
 801eb4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801eb4e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	f040 8576 	bne.w	801f644 <_strtod_l+0xbb4>
 801eb58:	4652      	mov	r2, sl
 801eb5a:	465b      	mov	r3, fp
 801eb5c:	e7e3      	b.n	801eb26 <_strtod_l+0x96>
 801eb5e:	2200      	movs	r2, #0
 801eb60:	e7ee      	b.n	801eb40 <_strtod_l+0xb0>
 801eb62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801eb64:	b13a      	cbz	r2, 801eb76 <_strtod_l+0xe6>
 801eb66:	2135      	movs	r1, #53	; 0x35
 801eb68:	a820      	add	r0, sp, #128	; 0x80
 801eb6a:	f002 fe0e 	bl	802178a <__copybits>
 801eb6e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801eb70:	4620      	mov	r0, r4
 801eb72:	f002 f9d3 	bl	8020f1c <_Bfree>
 801eb76:	3f01      	subs	r7, #1
 801eb78:	2f05      	cmp	r7, #5
 801eb7a:	d807      	bhi.n	801eb8c <_strtod_l+0xfc>
 801eb7c:	e8df f007 	tbb	[pc, r7]
 801eb80:	1d180b0e 	.word	0x1d180b0e
 801eb84:	030e      	.short	0x030e
 801eb86:	f04f 0b00 	mov.w	fp, #0
 801eb8a:	46da      	mov	sl, fp
 801eb8c:	0728      	lsls	r0, r5, #28
 801eb8e:	d5c1      	bpl.n	801eb14 <_strtod_l+0x84>
 801eb90:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801eb94:	e7be      	b.n	801eb14 <_strtod_l+0x84>
 801eb96:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801eb9a:	e7f7      	b.n	801eb8c <_strtod_l+0xfc>
 801eb9c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801eba0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801eba2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801eba6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ebaa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ebae:	e7ed      	b.n	801eb8c <_strtod_l+0xfc>
 801ebb0:	f8df b184 	ldr.w	fp, [pc, #388]	; 801ed38 <_strtod_l+0x2a8>
 801ebb4:	f04f 0a00 	mov.w	sl, #0
 801ebb8:	e7e8      	b.n	801eb8c <_strtod_l+0xfc>
 801ebba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ebbe:	f04f 3aff 	mov.w	sl, #4294967295
 801ebc2:	e7e3      	b.n	801eb8c <_strtod_l+0xfc>
 801ebc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ebc6:	1c5a      	adds	r2, r3, #1
 801ebc8:	921d      	str	r2, [sp, #116]	; 0x74
 801ebca:	785b      	ldrb	r3, [r3, #1]
 801ebcc:	2b30      	cmp	r3, #48	; 0x30
 801ebce:	d0f9      	beq.n	801ebc4 <_strtod_l+0x134>
 801ebd0:	2b00      	cmp	r3, #0
 801ebd2:	d09f      	beq.n	801eb14 <_strtod_l+0x84>
 801ebd4:	2301      	movs	r3, #1
 801ebd6:	f04f 0900 	mov.w	r9, #0
 801ebda:	9304      	str	r3, [sp, #16]
 801ebdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ebde:	930a      	str	r3, [sp, #40]	; 0x28
 801ebe0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ebe4:	464f      	mov	r7, r9
 801ebe6:	220a      	movs	r2, #10
 801ebe8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ebea:	7806      	ldrb	r6, [r0, #0]
 801ebec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ebf0:	b2d9      	uxtb	r1, r3
 801ebf2:	2909      	cmp	r1, #9
 801ebf4:	d92a      	bls.n	801ec4c <_strtod_l+0x1bc>
 801ebf6:	9907      	ldr	r1, [sp, #28]
 801ebf8:	462a      	mov	r2, r5
 801ebfa:	f7ff ff06 	bl	801ea0a <strncmp>
 801ebfe:	b398      	cbz	r0, 801ec68 <_strtod_l+0x1d8>
 801ec00:	2000      	movs	r0, #0
 801ec02:	4633      	mov	r3, r6
 801ec04:	463d      	mov	r5, r7
 801ec06:	9007      	str	r0, [sp, #28]
 801ec08:	4602      	mov	r2, r0
 801ec0a:	2b65      	cmp	r3, #101	; 0x65
 801ec0c:	d001      	beq.n	801ec12 <_strtod_l+0x182>
 801ec0e:	2b45      	cmp	r3, #69	; 0x45
 801ec10:	d118      	bne.n	801ec44 <_strtod_l+0x1b4>
 801ec12:	b91d      	cbnz	r5, 801ec1c <_strtod_l+0x18c>
 801ec14:	9b04      	ldr	r3, [sp, #16]
 801ec16:	4303      	orrs	r3, r0
 801ec18:	d098      	beq.n	801eb4c <_strtod_l+0xbc>
 801ec1a:	2500      	movs	r5, #0
 801ec1c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801ec20:	f108 0301 	add.w	r3, r8, #1
 801ec24:	931d      	str	r3, [sp, #116]	; 0x74
 801ec26:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ec2a:	2b2b      	cmp	r3, #43	; 0x2b
 801ec2c:	d075      	beq.n	801ed1a <_strtod_l+0x28a>
 801ec2e:	2b2d      	cmp	r3, #45	; 0x2d
 801ec30:	d07b      	beq.n	801ed2a <_strtod_l+0x29a>
 801ec32:	f04f 0c00 	mov.w	ip, #0
 801ec36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801ec3a:	2909      	cmp	r1, #9
 801ec3c:	f240 8082 	bls.w	801ed44 <_strtod_l+0x2b4>
 801ec40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ec44:	2600      	movs	r6, #0
 801ec46:	e09d      	b.n	801ed84 <_strtod_l+0x2f4>
 801ec48:	2300      	movs	r3, #0
 801ec4a:	e7c4      	b.n	801ebd6 <_strtod_l+0x146>
 801ec4c:	2f08      	cmp	r7, #8
 801ec4e:	bfd8      	it	le
 801ec50:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801ec52:	f100 0001 	add.w	r0, r0, #1
 801ec56:	bfda      	itte	le
 801ec58:	fb02 3301 	mlale	r3, r2, r1, r3
 801ec5c:	9309      	strle	r3, [sp, #36]	; 0x24
 801ec5e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801ec62:	3701      	adds	r7, #1
 801ec64:	901d      	str	r0, [sp, #116]	; 0x74
 801ec66:	e7bf      	b.n	801ebe8 <_strtod_l+0x158>
 801ec68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ec6a:	195a      	adds	r2, r3, r5
 801ec6c:	921d      	str	r2, [sp, #116]	; 0x74
 801ec6e:	5d5b      	ldrb	r3, [r3, r5]
 801ec70:	2f00      	cmp	r7, #0
 801ec72:	d037      	beq.n	801ece4 <_strtod_l+0x254>
 801ec74:	9007      	str	r0, [sp, #28]
 801ec76:	463d      	mov	r5, r7
 801ec78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801ec7c:	2a09      	cmp	r2, #9
 801ec7e:	d912      	bls.n	801eca6 <_strtod_l+0x216>
 801ec80:	2201      	movs	r2, #1
 801ec82:	e7c2      	b.n	801ec0a <_strtod_l+0x17a>
 801ec84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ec86:	1c5a      	adds	r2, r3, #1
 801ec88:	921d      	str	r2, [sp, #116]	; 0x74
 801ec8a:	785b      	ldrb	r3, [r3, #1]
 801ec8c:	3001      	adds	r0, #1
 801ec8e:	2b30      	cmp	r3, #48	; 0x30
 801ec90:	d0f8      	beq.n	801ec84 <_strtod_l+0x1f4>
 801ec92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801ec96:	2a08      	cmp	r2, #8
 801ec98:	f200 84db 	bhi.w	801f652 <_strtod_l+0xbc2>
 801ec9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ec9e:	9007      	str	r0, [sp, #28]
 801eca0:	2000      	movs	r0, #0
 801eca2:	920a      	str	r2, [sp, #40]	; 0x28
 801eca4:	4605      	mov	r5, r0
 801eca6:	3b30      	subs	r3, #48	; 0x30
 801eca8:	f100 0201 	add.w	r2, r0, #1
 801ecac:	d014      	beq.n	801ecd8 <_strtod_l+0x248>
 801ecae:	9907      	ldr	r1, [sp, #28]
 801ecb0:	4411      	add	r1, r2
 801ecb2:	9107      	str	r1, [sp, #28]
 801ecb4:	462a      	mov	r2, r5
 801ecb6:	eb00 0e05 	add.w	lr, r0, r5
 801ecba:	210a      	movs	r1, #10
 801ecbc:	4572      	cmp	r2, lr
 801ecbe:	d113      	bne.n	801ece8 <_strtod_l+0x258>
 801ecc0:	182a      	adds	r2, r5, r0
 801ecc2:	2a08      	cmp	r2, #8
 801ecc4:	f105 0501 	add.w	r5, r5, #1
 801ecc8:	4405      	add	r5, r0
 801ecca:	dc1c      	bgt.n	801ed06 <_strtod_l+0x276>
 801eccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ecce:	220a      	movs	r2, #10
 801ecd0:	fb02 3301 	mla	r3, r2, r1, r3
 801ecd4:	9309      	str	r3, [sp, #36]	; 0x24
 801ecd6:	2200      	movs	r2, #0
 801ecd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ecda:	1c59      	adds	r1, r3, #1
 801ecdc:	911d      	str	r1, [sp, #116]	; 0x74
 801ecde:	785b      	ldrb	r3, [r3, #1]
 801ece0:	4610      	mov	r0, r2
 801ece2:	e7c9      	b.n	801ec78 <_strtod_l+0x1e8>
 801ece4:	4638      	mov	r0, r7
 801ece6:	e7d2      	b.n	801ec8e <_strtod_l+0x1fe>
 801ece8:	2a08      	cmp	r2, #8
 801ecea:	dc04      	bgt.n	801ecf6 <_strtod_l+0x266>
 801ecec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ecee:	434e      	muls	r6, r1
 801ecf0:	9609      	str	r6, [sp, #36]	; 0x24
 801ecf2:	3201      	adds	r2, #1
 801ecf4:	e7e2      	b.n	801ecbc <_strtod_l+0x22c>
 801ecf6:	f102 0c01 	add.w	ip, r2, #1
 801ecfa:	f1bc 0f10 	cmp.w	ip, #16
 801ecfe:	bfd8      	it	le
 801ed00:	fb01 f909 	mulle.w	r9, r1, r9
 801ed04:	e7f5      	b.n	801ecf2 <_strtod_l+0x262>
 801ed06:	2d10      	cmp	r5, #16
 801ed08:	bfdc      	itt	le
 801ed0a:	220a      	movle	r2, #10
 801ed0c:	fb02 3909 	mlale	r9, r2, r9, r3
 801ed10:	e7e1      	b.n	801ecd6 <_strtod_l+0x246>
 801ed12:	2300      	movs	r3, #0
 801ed14:	9307      	str	r3, [sp, #28]
 801ed16:	2201      	movs	r2, #1
 801ed18:	e77c      	b.n	801ec14 <_strtod_l+0x184>
 801ed1a:	f04f 0c00 	mov.w	ip, #0
 801ed1e:	f108 0302 	add.w	r3, r8, #2
 801ed22:	931d      	str	r3, [sp, #116]	; 0x74
 801ed24:	f898 3002 	ldrb.w	r3, [r8, #2]
 801ed28:	e785      	b.n	801ec36 <_strtod_l+0x1a6>
 801ed2a:	f04f 0c01 	mov.w	ip, #1
 801ed2e:	e7f6      	b.n	801ed1e <_strtod_l+0x28e>
 801ed30:	08022e44 	.word	0x08022e44
 801ed34:	08022cd0 	.word	0x08022cd0
 801ed38:	7ff00000 	.word	0x7ff00000
 801ed3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ed3e:	1c59      	adds	r1, r3, #1
 801ed40:	911d      	str	r1, [sp, #116]	; 0x74
 801ed42:	785b      	ldrb	r3, [r3, #1]
 801ed44:	2b30      	cmp	r3, #48	; 0x30
 801ed46:	d0f9      	beq.n	801ed3c <_strtod_l+0x2ac>
 801ed48:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801ed4c:	2908      	cmp	r1, #8
 801ed4e:	f63f af79 	bhi.w	801ec44 <_strtod_l+0x1b4>
 801ed52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801ed56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ed58:	9308      	str	r3, [sp, #32]
 801ed5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ed5c:	1c59      	adds	r1, r3, #1
 801ed5e:	911d      	str	r1, [sp, #116]	; 0x74
 801ed60:	785b      	ldrb	r3, [r3, #1]
 801ed62:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801ed66:	2e09      	cmp	r6, #9
 801ed68:	d937      	bls.n	801edda <_strtod_l+0x34a>
 801ed6a:	9e08      	ldr	r6, [sp, #32]
 801ed6c:	1b89      	subs	r1, r1, r6
 801ed6e:	2908      	cmp	r1, #8
 801ed70:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801ed74:	dc02      	bgt.n	801ed7c <_strtod_l+0x2ec>
 801ed76:	4576      	cmp	r6, lr
 801ed78:	bfa8      	it	ge
 801ed7a:	4676      	movge	r6, lr
 801ed7c:	f1bc 0f00 	cmp.w	ip, #0
 801ed80:	d000      	beq.n	801ed84 <_strtod_l+0x2f4>
 801ed82:	4276      	negs	r6, r6
 801ed84:	2d00      	cmp	r5, #0
 801ed86:	d14f      	bne.n	801ee28 <_strtod_l+0x398>
 801ed88:	9904      	ldr	r1, [sp, #16]
 801ed8a:	4301      	orrs	r1, r0
 801ed8c:	f47f aec2 	bne.w	801eb14 <_strtod_l+0x84>
 801ed90:	2a00      	cmp	r2, #0
 801ed92:	f47f aedb 	bne.w	801eb4c <_strtod_l+0xbc>
 801ed96:	2b69      	cmp	r3, #105	; 0x69
 801ed98:	d027      	beq.n	801edea <_strtod_l+0x35a>
 801ed9a:	dc24      	bgt.n	801ede6 <_strtod_l+0x356>
 801ed9c:	2b49      	cmp	r3, #73	; 0x49
 801ed9e:	d024      	beq.n	801edea <_strtod_l+0x35a>
 801eda0:	2b4e      	cmp	r3, #78	; 0x4e
 801eda2:	f47f aed3 	bne.w	801eb4c <_strtod_l+0xbc>
 801eda6:	499e      	ldr	r1, [pc, #632]	; (801f020 <_strtod_l+0x590>)
 801eda8:	a81d      	add	r0, sp, #116	; 0x74
 801edaa:	f001 ff83 	bl	8020cb4 <__match>
 801edae:	2800      	cmp	r0, #0
 801edb0:	f43f aecc 	beq.w	801eb4c <_strtod_l+0xbc>
 801edb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801edb6:	781b      	ldrb	r3, [r3, #0]
 801edb8:	2b28      	cmp	r3, #40	; 0x28
 801edba:	d12d      	bne.n	801ee18 <_strtod_l+0x388>
 801edbc:	4999      	ldr	r1, [pc, #612]	; (801f024 <_strtod_l+0x594>)
 801edbe:	aa20      	add	r2, sp, #128	; 0x80
 801edc0:	a81d      	add	r0, sp, #116	; 0x74
 801edc2:	f001 ff8b 	bl	8020cdc <__hexnan>
 801edc6:	2805      	cmp	r0, #5
 801edc8:	d126      	bne.n	801ee18 <_strtod_l+0x388>
 801edca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801edcc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801edd0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801edd4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801edd8:	e69c      	b.n	801eb14 <_strtod_l+0x84>
 801edda:	210a      	movs	r1, #10
 801eddc:	fb01 3e0e 	mla	lr, r1, lr, r3
 801ede0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ede4:	e7b9      	b.n	801ed5a <_strtod_l+0x2ca>
 801ede6:	2b6e      	cmp	r3, #110	; 0x6e
 801ede8:	e7db      	b.n	801eda2 <_strtod_l+0x312>
 801edea:	498f      	ldr	r1, [pc, #572]	; (801f028 <_strtod_l+0x598>)
 801edec:	a81d      	add	r0, sp, #116	; 0x74
 801edee:	f001 ff61 	bl	8020cb4 <__match>
 801edf2:	2800      	cmp	r0, #0
 801edf4:	f43f aeaa 	beq.w	801eb4c <_strtod_l+0xbc>
 801edf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801edfa:	498c      	ldr	r1, [pc, #560]	; (801f02c <_strtod_l+0x59c>)
 801edfc:	3b01      	subs	r3, #1
 801edfe:	a81d      	add	r0, sp, #116	; 0x74
 801ee00:	931d      	str	r3, [sp, #116]	; 0x74
 801ee02:	f001 ff57 	bl	8020cb4 <__match>
 801ee06:	b910      	cbnz	r0, 801ee0e <_strtod_l+0x37e>
 801ee08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ee0a:	3301      	adds	r3, #1
 801ee0c:	931d      	str	r3, [sp, #116]	; 0x74
 801ee0e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801f03c <_strtod_l+0x5ac>
 801ee12:	f04f 0a00 	mov.w	sl, #0
 801ee16:	e67d      	b.n	801eb14 <_strtod_l+0x84>
 801ee18:	4885      	ldr	r0, [pc, #532]	; (801f030 <_strtod_l+0x5a0>)
 801ee1a:	f002 fe69 	bl	8021af0 <nan>
 801ee1e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801ee22:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801ee26:	e675      	b.n	801eb14 <_strtod_l+0x84>
 801ee28:	9b07      	ldr	r3, [sp, #28]
 801ee2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee2c:	1af3      	subs	r3, r6, r3
 801ee2e:	2f00      	cmp	r7, #0
 801ee30:	bf08      	it	eq
 801ee32:	462f      	moveq	r7, r5
 801ee34:	2d10      	cmp	r5, #16
 801ee36:	9308      	str	r3, [sp, #32]
 801ee38:	46a8      	mov	r8, r5
 801ee3a:	bfa8      	it	ge
 801ee3c:	f04f 0810 	movge.w	r8, #16
 801ee40:	f7e1 fb88 	bl	8000554 <__aeabi_ui2d>
 801ee44:	2d09      	cmp	r5, #9
 801ee46:	4682      	mov	sl, r0
 801ee48:	468b      	mov	fp, r1
 801ee4a:	dd13      	ble.n	801ee74 <_strtod_l+0x3e4>
 801ee4c:	4b79      	ldr	r3, [pc, #484]	; (801f034 <_strtod_l+0x5a4>)
 801ee4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ee52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ee56:	f7e1 fbf7 	bl	8000648 <__aeabi_dmul>
 801ee5a:	4682      	mov	sl, r0
 801ee5c:	4648      	mov	r0, r9
 801ee5e:	468b      	mov	fp, r1
 801ee60:	f7e1 fb78 	bl	8000554 <__aeabi_ui2d>
 801ee64:	4602      	mov	r2, r0
 801ee66:	460b      	mov	r3, r1
 801ee68:	4650      	mov	r0, sl
 801ee6a:	4659      	mov	r1, fp
 801ee6c:	f7e1 fa36 	bl	80002dc <__adddf3>
 801ee70:	4682      	mov	sl, r0
 801ee72:	468b      	mov	fp, r1
 801ee74:	2d0f      	cmp	r5, #15
 801ee76:	dc38      	bgt.n	801eeea <_strtod_l+0x45a>
 801ee78:	9b08      	ldr	r3, [sp, #32]
 801ee7a:	2b00      	cmp	r3, #0
 801ee7c:	f43f ae4a 	beq.w	801eb14 <_strtod_l+0x84>
 801ee80:	dd24      	ble.n	801eecc <_strtod_l+0x43c>
 801ee82:	2b16      	cmp	r3, #22
 801ee84:	dc0b      	bgt.n	801ee9e <_strtod_l+0x40e>
 801ee86:	4d6b      	ldr	r5, [pc, #428]	; (801f034 <_strtod_l+0x5a4>)
 801ee88:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801ee8c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801ee90:	4652      	mov	r2, sl
 801ee92:	465b      	mov	r3, fp
 801ee94:	f7e1 fbd8 	bl	8000648 <__aeabi_dmul>
 801ee98:	4682      	mov	sl, r0
 801ee9a:	468b      	mov	fp, r1
 801ee9c:	e63a      	b.n	801eb14 <_strtod_l+0x84>
 801ee9e:	9a08      	ldr	r2, [sp, #32]
 801eea0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801eea4:	4293      	cmp	r3, r2
 801eea6:	db20      	blt.n	801eeea <_strtod_l+0x45a>
 801eea8:	4c62      	ldr	r4, [pc, #392]	; (801f034 <_strtod_l+0x5a4>)
 801eeaa:	f1c5 050f 	rsb	r5, r5, #15
 801eeae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801eeb2:	4652      	mov	r2, sl
 801eeb4:	465b      	mov	r3, fp
 801eeb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eeba:	f7e1 fbc5 	bl	8000648 <__aeabi_dmul>
 801eebe:	9b08      	ldr	r3, [sp, #32]
 801eec0:	1b5d      	subs	r5, r3, r5
 801eec2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801eec6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801eeca:	e7e3      	b.n	801ee94 <_strtod_l+0x404>
 801eecc:	9b08      	ldr	r3, [sp, #32]
 801eece:	3316      	adds	r3, #22
 801eed0:	db0b      	blt.n	801eeea <_strtod_l+0x45a>
 801eed2:	9b07      	ldr	r3, [sp, #28]
 801eed4:	4a57      	ldr	r2, [pc, #348]	; (801f034 <_strtod_l+0x5a4>)
 801eed6:	1b9e      	subs	r6, r3, r6
 801eed8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801eedc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801eee0:	4650      	mov	r0, sl
 801eee2:	4659      	mov	r1, fp
 801eee4:	f7e1 fcda 	bl	800089c <__aeabi_ddiv>
 801eee8:	e7d6      	b.n	801ee98 <_strtod_l+0x408>
 801eeea:	9b08      	ldr	r3, [sp, #32]
 801eeec:	eba5 0808 	sub.w	r8, r5, r8
 801eef0:	4498      	add	r8, r3
 801eef2:	f1b8 0f00 	cmp.w	r8, #0
 801eef6:	dd71      	ble.n	801efdc <_strtod_l+0x54c>
 801eef8:	f018 030f 	ands.w	r3, r8, #15
 801eefc:	d00a      	beq.n	801ef14 <_strtod_l+0x484>
 801eefe:	494d      	ldr	r1, [pc, #308]	; (801f034 <_strtod_l+0x5a4>)
 801ef00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ef04:	4652      	mov	r2, sl
 801ef06:	465b      	mov	r3, fp
 801ef08:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ef0c:	f7e1 fb9c 	bl	8000648 <__aeabi_dmul>
 801ef10:	4682      	mov	sl, r0
 801ef12:	468b      	mov	fp, r1
 801ef14:	f038 080f 	bics.w	r8, r8, #15
 801ef18:	d04d      	beq.n	801efb6 <_strtod_l+0x526>
 801ef1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ef1e:	dd22      	ble.n	801ef66 <_strtod_l+0x4d6>
 801ef20:	2500      	movs	r5, #0
 801ef22:	462e      	mov	r6, r5
 801ef24:	9509      	str	r5, [sp, #36]	; 0x24
 801ef26:	9507      	str	r5, [sp, #28]
 801ef28:	2322      	movs	r3, #34	; 0x22
 801ef2a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801f03c <_strtod_l+0x5ac>
 801ef2e:	6023      	str	r3, [r4, #0]
 801ef30:	f04f 0a00 	mov.w	sl, #0
 801ef34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	f43f adec 	beq.w	801eb14 <_strtod_l+0x84>
 801ef3c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ef3e:	4620      	mov	r0, r4
 801ef40:	f001 ffec 	bl	8020f1c <_Bfree>
 801ef44:	9907      	ldr	r1, [sp, #28]
 801ef46:	4620      	mov	r0, r4
 801ef48:	f001 ffe8 	bl	8020f1c <_Bfree>
 801ef4c:	4631      	mov	r1, r6
 801ef4e:	4620      	mov	r0, r4
 801ef50:	f001 ffe4 	bl	8020f1c <_Bfree>
 801ef54:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ef56:	4620      	mov	r0, r4
 801ef58:	f001 ffe0 	bl	8020f1c <_Bfree>
 801ef5c:	4629      	mov	r1, r5
 801ef5e:	4620      	mov	r0, r4
 801ef60:	f001 ffdc 	bl	8020f1c <_Bfree>
 801ef64:	e5d6      	b.n	801eb14 <_strtod_l+0x84>
 801ef66:	2300      	movs	r3, #0
 801ef68:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ef6c:	4650      	mov	r0, sl
 801ef6e:	4659      	mov	r1, fp
 801ef70:	4699      	mov	r9, r3
 801ef72:	f1b8 0f01 	cmp.w	r8, #1
 801ef76:	dc21      	bgt.n	801efbc <_strtod_l+0x52c>
 801ef78:	b10b      	cbz	r3, 801ef7e <_strtod_l+0x4ee>
 801ef7a:	4682      	mov	sl, r0
 801ef7c:	468b      	mov	fp, r1
 801ef7e:	4b2e      	ldr	r3, [pc, #184]	; (801f038 <_strtod_l+0x5a8>)
 801ef80:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ef84:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ef88:	4652      	mov	r2, sl
 801ef8a:	465b      	mov	r3, fp
 801ef8c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ef90:	f7e1 fb5a 	bl	8000648 <__aeabi_dmul>
 801ef94:	4b29      	ldr	r3, [pc, #164]	; (801f03c <_strtod_l+0x5ac>)
 801ef96:	460a      	mov	r2, r1
 801ef98:	400b      	ands	r3, r1
 801ef9a:	4929      	ldr	r1, [pc, #164]	; (801f040 <_strtod_l+0x5b0>)
 801ef9c:	428b      	cmp	r3, r1
 801ef9e:	4682      	mov	sl, r0
 801efa0:	d8be      	bhi.n	801ef20 <_strtod_l+0x490>
 801efa2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801efa6:	428b      	cmp	r3, r1
 801efa8:	bf86      	itte	hi
 801efaa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801f044 <_strtod_l+0x5b4>
 801efae:	f04f 3aff 	movhi.w	sl, #4294967295
 801efb2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801efb6:	2300      	movs	r3, #0
 801efb8:	9304      	str	r3, [sp, #16]
 801efba:	e081      	b.n	801f0c0 <_strtod_l+0x630>
 801efbc:	f018 0f01 	tst.w	r8, #1
 801efc0:	d007      	beq.n	801efd2 <_strtod_l+0x542>
 801efc2:	4b1d      	ldr	r3, [pc, #116]	; (801f038 <_strtod_l+0x5a8>)
 801efc4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efcc:	f7e1 fb3c 	bl	8000648 <__aeabi_dmul>
 801efd0:	2301      	movs	r3, #1
 801efd2:	f109 0901 	add.w	r9, r9, #1
 801efd6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801efda:	e7ca      	b.n	801ef72 <_strtod_l+0x4e2>
 801efdc:	d0eb      	beq.n	801efb6 <_strtod_l+0x526>
 801efde:	f1c8 0800 	rsb	r8, r8, #0
 801efe2:	f018 020f 	ands.w	r2, r8, #15
 801efe6:	d00a      	beq.n	801effe <_strtod_l+0x56e>
 801efe8:	4b12      	ldr	r3, [pc, #72]	; (801f034 <_strtod_l+0x5a4>)
 801efea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801efee:	4650      	mov	r0, sl
 801eff0:	4659      	mov	r1, fp
 801eff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eff6:	f7e1 fc51 	bl	800089c <__aeabi_ddiv>
 801effa:	4682      	mov	sl, r0
 801effc:	468b      	mov	fp, r1
 801effe:	ea5f 1828 	movs.w	r8, r8, asr #4
 801f002:	d0d8      	beq.n	801efb6 <_strtod_l+0x526>
 801f004:	f1b8 0f1f 	cmp.w	r8, #31
 801f008:	dd1e      	ble.n	801f048 <_strtod_l+0x5b8>
 801f00a:	2500      	movs	r5, #0
 801f00c:	462e      	mov	r6, r5
 801f00e:	9509      	str	r5, [sp, #36]	; 0x24
 801f010:	9507      	str	r5, [sp, #28]
 801f012:	2322      	movs	r3, #34	; 0x22
 801f014:	f04f 0a00 	mov.w	sl, #0
 801f018:	f04f 0b00 	mov.w	fp, #0
 801f01c:	6023      	str	r3, [r4, #0]
 801f01e:	e789      	b.n	801ef34 <_strtod_l+0x4a4>
 801f020:	08022ca9 	.word	0x08022ca9
 801f024:	08022ce4 	.word	0x08022ce4
 801f028:	08022ca1 	.word	0x08022ca1
 801f02c:	08022d48 	.word	0x08022d48
 801f030:	08023000 	.word	0x08023000
 801f034:	08022ee0 	.word	0x08022ee0
 801f038:	08022eb8 	.word	0x08022eb8
 801f03c:	7ff00000 	.word	0x7ff00000
 801f040:	7ca00000 	.word	0x7ca00000
 801f044:	7fefffff 	.word	0x7fefffff
 801f048:	f018 0310 	ands.w	r3, r8, #16
 801f04c:	bf18      	it	ne
 801f04e:	236a      	movne	r3, #106	; 0x6a
 801f050:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801f408 <_strtod_l+0x978>
 801f054:	9304      	str	r3, [sp, #16]
 801f056:	4650      	mov	r0, sl
 801f058:	4659      	mov	r1, fp
 801f05a:	2300      	movs	r3, #0
 801f05c:	f018 0f01 	tst.w	r8, #1
 801f060:	d004      	beq.n	801f06c <_strtod_l+0x5dc>
 801f062:	e9d9 2300 	ldrd	r2, r3, [r9]
 801f066:	f7e1 faef 	bl	8000648 <__aeabi_dmul>
 801f06a:	2301      	movs	r3, #1
 801f06c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801f070:	f109 0908 	add.w	r9, r9, #8
 801f074:	d1f2      	bne.n	801f05c <_strtod_l+0x5cc>
 801f076:	b10b      	cbz	r3, 801f07c <_strtod_l+0x5ec>
 801f078:	4682      	mov	sl, r0
 801f07a:	468b      	mov	fp, r1
 801f07c:	9b04      	ldr	r3, [sp, #16]
 801f07e:	b1bb      	cbz	r3, 801f0b0 <_strtod_l+0x620>
 801f080:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801f084:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f088:	2b00      	cmp	r3, #0
 801f08a:	4659      	mov	r1, fp
 801f08c:	dd10      	ble.n	801f0b0 <_strtod_l+0x620>
 801f08e:	2b1f      	cmp	r3, #31
 801f090:	f340 8128 	ble.w	801f2e4 <_strtod_l+0x854>
 801f094:	2b34      	cmp	r3, #52	; 0x34
 801f096:	bfde      	ittt	le
 801f098:	3b20      	suble	r3, #32
 801f09a:	f04f 32ff 	movle.w	r2, #4294967295
 801f09e:	fa02 f303 	lslle.w	r3, r2, r3
 801f0a2:	f04f 0a00 	mov.w	sl, #0
 801f0a6:	bfcc      	ite	gt
 801f0a8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801f0ac:	ea03 0b01 	andle.w	fp, r3, r1
 801f0b0:	2200      	movs	r2, #0
 801f0b2:	2300      	movs	r3, #0
 801f0b4:	4650      	mov	r0, sl
 801f0b6:	4659      	mov	r1, fp
 801f0b8:	f7e1 fd2e 	bl	8000b18 <__aeabi_dcmpeq>
 801f0bc:	2800      	cmp	r0, #0
 801f0be:	d1a4      	bne.n	801f00a <_strtod_l+0x57a>
 801f0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0c2:	9300      	str	r3, [sp, #0]
 801f0c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f0c6:	462b      	mov	r3, r5
 801f0c8:	463a      	mov	r2, r7
 801f0ca:	4620      	mov	r0, r4
 801f0cc:	f001 ff92 	bl	8020ff4 <__s2b>
 801f0d0:	9009      	str	r0, [sp, #36]	; 0x24
 801f0d2:	2800      	cmp	r0, #0
 801f0d4:	f43f af24 	beq.w	801ef20 <_strtod_l+0x490>
 801f0d8:	9b07      	ldr	r3, [sp, #28]
 801f0da:	1b9e      	subs	r6, r3, r6
 801f0dc:	9b08      	ldr	r3, [sp, #32]
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	bfb4      	ite	lt
 801f0e2:	4633      	movlt	r3, r6
 801f0e4:	2300      	movge	r3, #0
 801f0e6:	9310      	str	r3, [sp, #64]	; 0x40
 801f0e8:	9b08      	ldr	r3, [sp, #32]
 801f0ea:	2500      	movs	r5, #0
 801f0ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f0f0:	9318      	str	r3, [sp, #96]	; 0x60
 801f0f2:	462e      	mov	r6, r5
 801f0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0f6:	4620      	mov	r0, r4
 801f0f8:	6859      	ldr	r1, [r3, #4]
 801f0fa:	f001 fecf 	bl	8020e9c <_Balloc>
 801f0fe:	9007      	str	r0, [sp, #28]
 801f100:	2800      	cmp	r0, #0
 801f102:	f43f af11 	beq.w	801ef28 <_strtod_l+0x498>
 801f106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f108:	691a      	ldr	r2, [r3, #16]
 801f10a:	3202      	adds	r2, #2
 801f10c:	f103 010c 	add.w	r1, r3, #12
 801f110:	0092      	lsls	r2, r2, #2
 801f112:	300c      	adds	r0, #12
 801f114:	f7fe fe96 	bl	801de44 <memcpy>
 801f118:	ec4b ab10 	vmov	d0, sl, fp
 801f11c:	aa20      	add	r2, sp, #128	; 0x80
 801f11e:	a91f      	add	r1, sp, #124	; 0x7c
 801f120:	4620      	mov	r0, r4
 801f122:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801f126:	f002 faa1 	bl	802166c <__d2b>
 801f12a:	901e      	str	r0, [sp, #120]	; 0x78
 801f12c:	2800      	cmp	r0, #0
 801f12e:	f43f aefb 	beq.w	801ef28 <_strtod_l+0x498>
 801f132:	2101      	movs	r1, #1
 801f134:	4620      	mov	r0, r4
 801f136:	f001 fff7 	bl	8021128 <__i2b>
 801f13a:	4606      	mov	r6, r0
 801f13c:	2800      	cmp	r0, #0
 801f13e:	f43f aef3 	beq.w	801ef28 <_strtod_l+0x498>
 801f142:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f144:	9904      	ldr	r1, [sp, #16]
 801f146:	2b00      	cmp	r3, #0
 801f148:	bfab      	itete	ge
 801f14a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801f14c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801f14e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801f150:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801f154:	bfac      	ite	ge
 801f156:	eb03 0902 	addge.w	r9, r3, r2
 801f15a:	1ad7      	sublt	r7, r2, r3
 801f15c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f15e:	eba3 0801 	sub.w	r8, r3, r1
 801f162:	4490      	add	r8, r2
 801f164:	4ba3      	ldr	r3, [pc, #652]	; (801f3f4 <_strtod_l+0x964>)
 801f166:	f108 38ff 	add.w	r8, r8, #4294967295
 801f16a:	4598      	cmp	r8, r3
 801f16c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801f170:	f280 80cc 	bge.w	801f30c <_strtod_l+0x87c>
 801f174:	eba3 0308 	sub.w	r3, r3, r8
 801f178:	2b1f      	cmp	r3, #31
 801f17a:	eba2 0203 	sub.w	r2, r2, r3
 801f17e:	f04f 0101 	mov.w	r1, #1
 801f182:	f300 80b6 	bgt.w	801f2f2 <_strtod_l+0x862>
 801f186:	fa01 f303 	lsl.w	r3, r1, r3
 801f18a:	9311      	str	r3, [sp, #68]	; 0x44
 801f18c:	2300      	movs	r3, #0
 801f18e:	930c      	str	r3, [sp, #48]	; 0x30
 801f190:	eb09 0802 	add.w	r8, r9, r2
 801f194:	9b04      	ldr	r3, [sp, #16]
 801f196:	45c1      	cmp	r9, r8
 801f198:	4417      	add	r7, r2
 801f19a:	441f      	add	r7, r3
 801f19c:	464b      	mov	r3, r9
 801f19e:	bfa8      	it	ge
 801f1a0:	4643      	movge	r3, r8
 801f1a2:	42bb      	cmp	r3, r7
 801f1a4:	bfa8      	it	ge
 801f1a6:	463b      	movge	r3, r7
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	bfc2      	ittt	gt
 801f1ac:	eba8 0803 	subgt.w	r8, r8, r3
 801f1b0:	1aff      	subgt	r7, r7, r3
 801f1b2:	eba9 0903 	subgt.w	r9, r9, r3
 801f1b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	dd17      	ble.n	801f1ec <_strtod_l+0x75c>
 801f1bc:	4631      	mov	r1, r6
 801f1be:	461a      	mov	r2, r3
 801f1c0:	4620      	mov	r0, r4
 801f1c2:	f002 f86d 	bl	80212a0 <__pow5mult>
 801f1c6:	4606      	mov	r6, r0
 801f1c8:	2800      	cmp	r0, #0
 801f1ca:	f43f aead 	beq.w	801ef28 <_strtod_l+0x498>
 801f1ce:	4601      	mov	r1, r0
 801f1d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f1d2:	4620      	mov	r0, r4
 801f1d4:	f001 ffbe 	bl	8021154 <__multiply>
 801f1d8:	900f      	str	r0, [sp, #60]	; 0x3c
 801f1da:	2800      	cmp	r0, #0
 801f1dc:	f43f aea4 	beq.w	801ef28 <_strtod_l+0x498>
 801f1e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f1e2:	4620      	mov	r0, r4
 801f1e4:	f001 fe9a 	bl	8020f1c <_Bfree>
 801f1e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f1ea:	931e      	str	r3, [sp, #120]	; 0x78
 801f1ec:	f1b8 0f00 	cmp.w	r8, #0
 801f1f0:	f300 8091 	bgt.w	801f316 <_strtod_l+0x886>
 801f1f4:	9b08      	ldr	r3, [sp, #32]
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	dd08      	ble.n	801f20c <_strtod_l+0x77c>
 801f1fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f1fc:	9907      	ldr	r1, [sp, #28]
 801f1fe:	4620      	mov	r0, r4
 801f200:	f002 f84e 	bl	80212a0 <__pow5mult>
 801f204:	9007      	str	r0, [sp, #28]
 801f206:	2800      	cmp	r0, #0
 801f208:	f43f ae8e 	beq.w	801ef28 <_strtod_l+0x498>
 801f20c:	2f00      	cmp	r7, #0
 801f20e:	dd08      	ble.n	801f222 <_strtod_l+0x792>
 801f210:	9907      	ldr	r1, [sp, #28]
 801f212:	463a      	mov	r2, r7
 801f214:	4620      	mov	r0, r4
 801f216:	f002 f89d 	bl	8021354 <__lshift>
 801f21a:	9007      	str	r0, [sp, #28]
 801f21c:	2800      	cmp	r0, #0
 801f21e:	f43f ae83 	beq.w	801ef28 <_strtod_l+0x498>
 801f222:	f1b9 0f00 	cmp.w	r9, #0
 801f226:	dd08      	ble.n	801f23a <_strtod_l+0x7aa>
 801f228:	4631      	mov	r1, r6
 801f22a:	464a      	mov	r2, r9
 801f22c:	4620      	mov	r0, r4
 801f22e:	f002 f891 	bl	8021354 <__lshift>
 801f232:	4606      	mov	r6, r0
 801f234:	2800      	cmp	r0, #0
 801f236:	f43f ae77 	beq.w	801ef28 <_strtod_l+0x498>
 801f23a:	9a07      	ldr	r2, [sp, #28]
 801f23c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f23e:	4620      	mov	r0, r4
 801f240:	f002 f910 	bl	8021464 <__mdiff>
 801f244:	4605      	mov	r5, r0
 801f246:	2800      	cmp	r0, #0
 801f248:	f43f ae6e 	beq.w	801ef28 <_strtod_l+0x498>
 801f24c:	68c3      	ldr	r3, [r0, #12]
 801f24e:	930f      	str	r3, [sp, #60]	; 0x3c
 801f250:	2300      	movs	r3, #0
 801f252:	60c3      	str	r3, [r0, #12]
 801f254:	4631      	mov	r1, r6
 801f256:	f002 f8e9 	bl	802142c <__mcmp>
 801f25a:	2800      	cmp	r0, #0
 801f25c:	da65      	bge.n	801f32a <_strtod_l+0x89a>
 801f25e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f260:	ea53 030a 	orrs.w	r3, r3, sl
 801f264:	f040 8087 	bne.w	801f376 <_strtod_l+0x8e6>
 801f268:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	f040 8082 	bne.w	801f376 <_strtod_l+0x8e6>
 801f272:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f276:	0d1b      	lsrs	r3, r3, #20
 801f278:	051b      	lsls	r3, r3, #20
 801f27a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801f27e:	d97a      	bls.n	801f376 <_strtod_l+0x8e6>
 801f280:	696b      	ldr	r3, [r5, #20]
 801f282:	b913      	cbnz	r3, 801f28a <_strtod_l+0x7fa>
 801f284:	692b      	ldr	r3, [r5, #16]
 801f286:	2b01      	cmp	r3, #1
 801f288:	dd75      	ble.n	801f376 <_strtod_l+0x8e6>
 801f28a:	4629      	mov	r1, r5
 801f28c:	2201      	movs	r2, #1
 801f28e:	4620      	mov	r0, r4
 801f290:	f002 f860 	bl	8021354 <__lshift>
 801f294:	4631      	mov	r1, r6
 801f296:	4605      	mov	r5, r0
 801f298:	f002 f8c8 	bl	802142c <__mcmp>
 801f29c:	2800      	cmp	r0, #0
 801f29e:	dd6a      	ble.n	801f376 <_strtod_l+0x8e6>
 801f2a0:	9904      	ldr	r1, [sp, #16]
 801f2a2:	4a55      	ldr	r2, [pc, #340]	; (801f3f8 <_strtod_l+0x968>)
 801f2a4:	465b      	mov	r3, fp
 801f2a6:	2900      	cmp	r1, #0
 801f2a8:	f000 8085 	beq.w	801f3b6 <_strtod_l+0x926>
 801f2ac:	ea02 010b 	and.w	r1, r2, fp
 801f2b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801f2b4:	dc7f      	bgt.n	801f3b6 <_strtod_l+0x926>
 801f2b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801f2ba:	f77f aeaa 	ble.w	801f012 <_strtod_l+0x582>
 801f2be:	4a4f      	ldr	r2, [pc, #316]	; (801f3fc <_strtod_l+0x96c>)
 801f2c0:	2300      	movs	r3, #0
 801f2c2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801f2c6:	4650      	mov	r0, sl
 801f2c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801f2cc:	4659      	mov	r1, fp
 801f2ce:	f7e1 f9bb 	bl	8000648 <__aeabi_dmul>
 801f2d2:	460b      	mov	r3, r1
 801f2d4:	4303      	orrs	r3, r0
 801f2d6:	bf08      	it	eq
 801f2d8:	2322      	moveq	r3, #34	; 0x22
 801f2da:	4682      	mov	sl, r0
 801f2dc:	468b      	mov	fp, r1
 801f2de:	bf08      	it	eq
 801f2e0:	6023      	streq	r3, [r4, #0]
 801f2e2:	e62b      	b.n	801ef3c <_strtod_l+0x4ac>
 801f2e4:	f04f 32ff 	mov.w	r2, #4294967295
 801f2e8:	fa02 f303 	lsl.w	r3, r2, r3
 801f2ec:	ea03 0a0a 	and.w	sl, r3, sl
 801f2f0:	e6de      	b.n	801f0b0 <_strtod_l+0x620>
 801f2f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801f2f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801f2fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801f2fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801f302:	fa01 f308 	lsl.w	r3, r1, r8
 801f306:	930c      	str	r3, [sp, #48]	; 0x30
 801f308:	9111      	str	r1, [sp, #68]	; 0x44
 801f30a:	e741      	b.n	801f190 <_strtod_l+0x700>
 801f30c:	2300      	movs	r3, #0
 801f30e:	930c      	str	r3, [sp, #48]	; 0x30
 801f310:	2301      	movs	r3, #1
 801f312:	9311      	str	r3, [sp, #68]	; 0x44
 801f314:	e73c      	b.n	801f190 <_strtod_l+0x700>
 801f316:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f318:	4642      	mov	r2, r8
 801f31a:	4620      	mov	r0, r4
 801f31c:	f002 f81a 	bl	8021354 <__lshift>
 801f320:	901e      	str	r0, [sp, #120]	; 0x78
 801f322:	2800      	cmp	r0, #0
 801f324:	f47f af66 	bne.w	801f1f4 <_strtod_l+0x764>
 801f328:	e5fe      	b.n	801ef28 <_strtod_l+0x498>
 801f32a:	465f      	mov	r7, fp
 801f32c:	d16e      	bne.n	801f40c <_strtod_l+0x97c>
 801f32e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f330:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f334:	b342      	cbz	r2, 801f388 <_strtod_l+0x8f8>
 801f336:	4a32      	ldr	r2, [pc, #200]	; (801f400 <_strtod_l+0x970>)
 801f338:	4293      	cmp	r3, r2
 801f33a:	d128      	bne.n	801f38e <_strtod_l+0x8fe>
 801f33c:	9b04      	ldr	r3, [sp, #16]
 801f33e:	4650      	mov	r0, sl
 801f340:	b1eb      	cbz	r3, 801f37e <_strtod_l+0x8ee>
 801f342:	4a2d      	ldr	r2, [pc, #180]	; (801f3f8 <_strtod_l+0x968>)
 801f344:	403a      	ands	r2, r7
 801f346:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801f34a:	f04f 31ff 	mov.w	r1, #4294967295
 801f34e:	d819      	bhi.n	801f384 <_strtod_l+0x8f4>
 801f350:	0d12      	lsrs	r2, r2, #20
 801f352:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801f356:	fa01 f303 	lsl.w	r3, r1, r3
 801f35a:	4298      	cmp	r0, r3
 801f35c:	d117      	bne.n	801f38e <_strtod_l+0x8fe>
 801f35e:	4b29      	ldr	r3, [pc, #164]	; (801f404 <_strtod_l+0x974>)
 801f360:	429f      	cmp	r7, r3
 801f362:	d102      	bne.n	801f36a <_strtod_l+0x8da>
 801f364:	3001      	adds	r0, #1
 801f366:	f43f addf 	beq.w	801ef28 <_strtod_l+0x498>
 801f36a:	4b23      	ldr	r3, [pc, #140]	; (801f3f8 <_strtod_l+0x968>)
 801f36c:	403b      	ands	r3, r7
 801f36e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801f372:	f04f 0a00 	mov.w	sl, #0
 801f376:	9b04      	ldr	r3, [sp, #16]
 801f378:	2b00      	cmp	r3, #0
 801f37a:	d1a0      	bne.n	801f2be <_strtod_l+0x82e>
 801f37c:	e5de      	b.n	801ef3c <_strtod_l+0x4ac>
 801f37e:	f04f 33ff 	mov.w	r3, #4294967295
 801f382:	e7ea      	b.n	801f35a <_strtod_l+0x8ca>
 801f384:	460b      	mov	r3, r1
 801f386:	e7e8      	b.n	801f35a <_strtod_l+0x8ca>
 801f388:	ea53 030a 	orrs.w	r3, r3, sl
 801f38c:	d088      	beq.n	801f2a0 <_strtod_l+0x810>
 801f38e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f390:	b1db      	cbz	r3, 801f3ca <_strtod_l+0x93a>
 801f392:	423b      	tst	r3, r7
 801f394:	d0ef      	beq.n	801f376 <_strtod_l+0x8e6>
 801f396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f398:	9a04      	ldr	r2, [sp, #16]
 801f39a:	4650      	mov	r0, sl
 801f39c:	4659      	mov	r1, fp
 801f39e:	b1c3      	cbz	r3, 801f3d2 <_strtod_l+0x942>
 801f3a0:	f7ff fb58 	bl	801ea54 <sulp>
 801f3a4:	4602      	mov	r2, r0
 801f3a6:	460b      	mov	r3, r1
 801f3a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f3ac:	f7e0 ff96 	bl	80002dc <__adddf3>
 801f3b0:	4682      	mov	sl, r0
 801f3b2:	468b      	mov	fp, r1
 801f3b4:	e7df      	b.n	801f376 <_strtod_l+0x8e6>
 801f3b6:	4013      	ands	r3, r2
 801f3b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801f3bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801f3c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801f3c4:	f04f 3aff 	mov.w	sl, #4294967295
 801f3c8:	e7d5      	b.n	801f376 <_strtod_l+0x8e6>
 801f3ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f3cc:	ea13 0f0a 	tst.w	r3, sl
 801f3d0:	e7e0      	b.n	801f394 <_strtod_l+0x904>
 801f3d2:	f7ff fb3f 	bl	801ea54 <sulp>
 801f3d6:	4602      	mov	r2, r0
 801f3d8:	460b      	mov	r3, r1
 801f3da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f3de:	f7e0 ff7b 	bl	80002d8 <__aeabi_dsub>
 801f3e2:	2200      	movs	r2, #0
 801f3e4:	2300      	movs	r3, #0
 801f3e6:	4682      	mov	sl, r0
 801f3e8:	468b      	mov	fp, r1
 801f3ea:	f7e1 fb95 	bl	8000b18 <__aeabi_dcmpeq>
 801f3ee:	2800      	cmp	r0, #0
 801f3f0:	d0c1      	beq.n	801f376 <_strtod_l+0x8e6>
 801f3f2:	e60e      	b.n	801f012 <_strtod_l+0x582>
 801f3f4:	fffffc02 	.word	0xfffffc02
 801f3f8:	7ff00000 	.word	0x7ff00000
 801f3fc:	39500000 	.word	0x39500000
 801f400:	000fffff 	.word	0x000fffff
 801f404:	7fefffff 	.word	0x7fefffff
 801f408:	08022cf8 	.word	0x08022cf8
 801f40c:	4631      	mov	r1, r6
 801f40e:	4628      	mov	r0, r5
 801f410:	f002 f988 	bl	8021724 <__ratio>
 801f414:	ec59 8b10 	vmov	r8, r9, d0
 801f418:	ee10 0a10 	vmov	r0, s0
 801f41c:	2200      	movs	r2, #0
 801f41e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f422:	4649      	mov	r1, r9
 801f424:	f7e1 fb8c 	bl	8000b40 <__aeabi_dcmple>
 801f428:	2800      	cmp	r0, #0
 801f42a:	d07c      	beq.n	801f526 <_strtod_l+0xa96>
 801f42c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f42e:	2b00      	cmp	r3, #0
 801f430:	d04c      	beq.n	801f4cc <_strtod_l+0xa3c>
 801f432:	4b95      	ldr	r3, [pc, #596]	; (801f688 <_strtod_l+0xbf8>)
 801f434:	2200      	movs	r2, #0
 801f436:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801f43a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801f688 <_strtod_l+0xbf8>
 801f43e:	f04f 0800 	mov.w	r8, #0
 801f442:	4b92      	ldr	r3, [pc, #584]	; (801f68c <_strtod_l+0xbfc>)
 801f444:	403b      	ands	r3, r7
 801f446:	9311      	str	r3, [sp, #68]	; 0x44
 801f448:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f44a:	4b91      	ldr	r3, [pc, #580]	; (801f690 <_strtod_l+0xc00>)
 801f44c:	429a      	cmp	r2, r3
 801f44e:	f040 80b2 	bne.w	801f5b6 <_strtod_l+0xb26>
 801f452:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f45a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801f45e:	ec4b ab10 	vmov	d0, sl, fp
 801f462:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801f466:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801f46a:	f002 f883 	bl	8021574 <__ulp>
 801f46e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f472:	ec53 2b10 	vmov	r2, r3, d0
 801f476:	f7e1 f8e7 	bl	8000648 <__aeabi_dmul>
 801f47a:	4652      	mov	r2, sl
 801f47c:	465b      	mov	r3, fp
 801f47e:	f7e0 ff2d 	bl	80002dc <__adddf3>
 801f482:	460b      	mov	r3, r1
 801f484:	4981      	ldr	r1, [pc, #516]	; (801f68c <_strtod_l+0xbfc>)
 801f486:	4a83      	ldr	r2, [pc, #524]	; (801f694 <_strtod_l+0xc04>)
 801f488:	4019      	ands	r1, r3
 801f48a:	4291      	cmp	r1, r2
 801f48c:	4682      	mov	sl, r0
 801f48e:	d95e      	bls.n	801f54e <_strtod_l+0xabe>
 801f490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f492:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801f496:	4293      	cmp	r3, r2
 801f498:	d103      	bne.n	801f4a2 <_strtod_l+0xa12>
 801f49a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f49c:	3301      	adds	r3, #1
 801f49e:	f43f ad43 	beq.w	801ef28 <_strtod_l+0x498>
 801f4a2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801f6a0 <_strtod_l+0xc10>
 801f4a6:	f04f 3aff 	mov.w	sl, #4294967295
 801f4aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f4ac:	4620      	mov	r0, r4
 801f4ae:	f001 fd35 	bl	8020f1c <_Bfree>
 801f4b2:	9907      	ldr	r1, [sp, #28]
 801f4b4:	4620      	mov	r0, r4
 801f4b6:	f001 fd31 	bl	8020f1c <_Bfree>
 801f4ba:	4631      	mov	r1, r6
 801f4bc:	4620      	mov	r0, r4
 801f4be:	f001 fd2d 	bl	8020f1c <_Bfree>
 801f4c2:	4629      	mov	r1, r5
 801f4c4:	4620      	mov	r0, r4
 801f4c6:	f001 fd29 	bl	8020f1c <_Bfree>
 801f4ca:	e613      	b.n	801f0f4 <_strtod_l+0x664>
 801f4cc:	f1ba 0f00 	cmp.w	sl, #0
 801f4d0:	d11b      	bne.n	801f50a <_strtod_l+0xa7a>
 801f4d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f4d6:	b9f3      	cbnz	r3, 801f516 <_strtod_l+0xa86>
 801f4d8:	4b6b      	ldr	r3, [pc, #428]	; (801f688 <_strtod_l+0xbf8>)
 801f4da:	2200      	movs	r2, #0
 801f4dc:	4640      	mov	r0, r8
 801f4de:	4649      	mov	r1, r9
 801f4e0:	f7e1 fb24 	bl	8000b2c <__aeabi_dcmplt>
 801f4e4:	b9d0      	cbnz	r0, 801f51c <_strtod_l+0xa8c>
 801f4e6:	4640      	mov	r0, r8
 801f4e8:	4649      	mov	r1, r9
 801f4ea:	4b6b      	ldr	r3, [pc, #428]	; (801f698 <_strtod_l+0xc08>)
 801f4ec:	2200      	movs	r2, #0
 801f4ee:	f7e1 f8ab 	bl	8000648 <__aeabi_dmul>
 801f4f2:	4680      	mov	r8, r0
 801f4f4:	4689      	mov	r9, r1
 801f4f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801f4fa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801f4fe:	931b      	str	r3, [sp, #108]	; 0x6c
 801f500:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801f504:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801f508:	e79b      	b.n	801f442 <_strtod_l+0x9b2>
 801f50a:	f1ba 0f01 	cmp.w	sl, #1
 801f50e:	d102      	bne.n	801f516 <_strtod_l+0xa86>
 801f510:	2f00      	cmp	r7, #0
 801f512:	f43f ad7e 	beq.w	801f012 <_strtod_l+0x582>
 801f516:	4b61      	ldr	r3, [pc, #388]	; (801f69c <_strtod_l+0xc0c>)
 801f518:	2200      	movs	r2, #0
 801f51a:	e78c      	b.n	801f436 <_strtod_l+0x9a6>
 801f51c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801f698 <_strtod_l+0xc08>
 801f520:	f04f 0800 	mov.w	r8, #0
 801f524:	e7e7      	b.n	801f4f6 <_strtod_l+0xa66>
 801f526:	4b5c      	ldr	r3, [pc, #368]	; (801f698 <_strtod_l+0xc08>)
 801f528:	4640      	mov	r0, r8
 801f52a:	4649      	mov	r1, r9
 801f52c:	2200      	movs	r2, #0
 801f52e:	f7e1 f88b 	bl	8000648 <__aeabi_dmul>
 801f532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f534:	4680      	mov	r8, r0
 801f536:	4689      	mov	r9, r1
 801f538:	b933      	cbnz	r3, 801f548 <_strtod_l+0xab8>
 801f53a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f53e:	9012      	str	r0, [sp, #72]	; 0x48
 801f540:	9313      	str	r3, [sp, #76]	; 0x4c
 801f542:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801f546:	e7dd      	b.n	801f504 <_strtod_l+0xa74>
 801f548:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801f54c:	e7f9      	b.n	801f542 <_strtod_l+0xab2>
 801f54e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801f552:	9b04      	ldr	r3, [sp, #16]
 801f554:	2b00      	cmp	r3, #0
 801f556:	d1a8      	bne.n	801f4aa <_strtod_l+0xa1a>
 801f558:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f55c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f55e:	0d1b      	lsrs	r3, r3, #20
 801f560:	051b      	lsls	r3, r3, #20
 801f562:	429a      	cmp	r2, r3
 801f564:	d1a1      	bne.n	801f4aa <_strtod_l+0xa1a>
 801f566:	4640      	mov	r0, r8
 801f568:	4649      	mov	r1, r9
 801f56a:	f7e1 fbcd 	bl	8000d08 <__aeabi_d2lz>
 801f56e:	f7e1 f83d 	bl	80005ec <__aeabi_l2d>
 801f572:	4602      	mov	r2, r0
 801f574:	460b      	mov	r3, r1
 801f576:	4640      	mov	r0, r8
 801f578:	4649      	mov	r1, r9
 801f57a:	f7e0 fead 	bl	80002d8 <__aeabi_dsub>
 801f57e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f584:	ea43 030a 	orr.w	r3, r3, sl
 801f588:	4313      	orrs	r3, r2
 801f58a:	4680      	mov	r8, r0
 801f58c:	4689      	mov	r9, r1
 801f58e:	d053      	beq.n	801f638 <_strtod_l+0xba8>
 801f590:	a335      	add	r3, pc, #212	; (adr r3, 801f668 <_strtod_l+0xbd8>)
 801f592:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f596:	f7e1 fac9 	bl	8000b2c <__aeabi_dcmplt>
 801f59a:	2800      	cmp	r0, #0
 801f59c:	f47f acce 	bne.w	801ef3c <_strtod_l+0x4ac>
 801f5a0:	a333      	add	r3, pc, #204	; (adr r3, 801f670 <_strtod_l+0xbe0>)
 801f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5a6:	4640      	mov	r0, r8
 801f5a8:	4649      	mov	r1, r9
 801f5aa:	f7e1 fadd 	bl	8000b68 <__aeabi_dcmpgt>
 801f5ae:	2800      	cmp	r0, #0
 801f5b0:	f43f af7b 	beq.w	801f4aa <_strtod_l+0xa1a>
 801f5b4:	e4c2      	b.n	801ef3c <_strtod_l+0x4ac>
 801f5b6:	9b04      	ldr	r3, [sp, #16]
 801f5b8:	b333      	cbz	r3, 801f608 <_strtod_l+0xb78>
 801f5ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f5bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801f5c0:	d822      	bhi.n	801f608 <_strtod_l+0xb78>
 801f5c2:	a32d      	add	r3, pc, #180	; (adr r3, 801f678 <_strtod_l+0xbe8>)
 801f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5c8:	4640      	mov	r0, r8
 801f5ca:	4649      	mov	r1, r9
 801f5cc:	f7e1 fab8 	bl	8000b40 <__aeabi_dcmple>
 801f5d0:	b1a0      	cbz	r0, 801f5fc <_strtod_l+0xb6c>
 801f5d2:	4649      	mov	r1, r9
 801f5d4:	4640      	mov	r0, r8
 801f5d6:	f7e1 fb0f 	bl	8000bf8 <__aeabi_d2uiz>
 801f5da:	2801      	cmp	r0, #1
 801f5dc:	bf38      	it	cc
 801f5de:	2001      	movcc	r0, #1
 801f5e0:	f7e0 ffb8 	bl	8000554 <__aeabi_ui2d>
 801f5e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f5e6:	4680      	mov	r8, r0
 801f5e8:	4689      	mov	r9, r1
 801f5ea:	bb13      	cbnz	r3, 801f632 <_strtod_l+0xba2>
 801f5ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f5f0:	9014      	str	r0, [sp, #80]	; 0x50
 801f5f2:	9315      	str	r3, [sp, #84]	; 0x54
 801f5f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801f5f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801f5fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f5fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f600:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801f604:	1a9b      	subs	r3, r3, r2
 801f606:	930d      	str	r3, [sp, #52]	; 0x34
 801f608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f60c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801f610:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801f614:	f001 ffae 	bl	8021574 <__ulp>
 801f618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f61c:	ec53 2b10 	vmov	r2, r3, d0
 801f620:	f7e1 f812 	bl	8000648 <__aeabi_dmul>
 801f624:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f628:	f7e0 fe58 	bl	80002dc <__adddf3>
 801f62c:	4682      	mov	sl, r0
 801f62e:	468b      	mov	fp, r1
 801f630:	e78f      	b.n	801f552 <_strtod_l+0xac2>
 801f632:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801f636:	e7dd      	b.n	801f5f4 <_strtod_l+0xb64>
 801f638:	a311      	add	r3, pc, #68	; (adr r3, 801f680 <_strtod_l+0xbf0>)
 801f63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f63e:	f7e1 fa75 	bl	8000b2c <__aeabi_dcmplt>
 801f642:	e7b4      	b.n	801f5ae <_strtod_l+0xb1e>
 801f644:	2300      	movs	r3, #0
 801f646:	930e      	str	r3, [sp, #56]	; 0x38
 801f648:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f64a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f64c:	6013      	str	r3, [r2, #0]
 801f64e:	f7ff ba65 	b.w	801eb1c <_strtod_l+0x8c>
 801f652:	2b65      	cmp	r3, #101	; 0x65
 801f654:	f43f ab5d 	beq.w	801ed12 <_strtod_l+0x282>
 801f658:	2b45      	cmp	r3, #69	; 0x45
 801f65a:	f43f ab5a 	beq.w	801ed12 <_strtod_l+0x282>
 801f65e:	2201      	movs	r2, #1
 801f660:	f7ff bb92 	b.w	801ed88 <_strtod_l+0x2f8>
 801f664:	f3af 8000 	nop.w
 801f668:	94a03595 	.word	0x94a03595
 801f66c:	3fdfffff 	.word	0x3fdfffff
 801f670:	35afe535 	.word	0x35afe535
 801f674:	3fe00000 	.word	0x3fe00000
 801f678:	ffc00000 	.word	0xffc00000
 801f67c:	41dfffff 	.word	0x41dfffff
 801f680:	94a03595 	.word	0x94a03595
 801f684:	3fcfffff 	.word	0x3fcfffff
 801f688:	3ff00000 	.word	0x3ff00000
 801f68c:	7ff00000 	.word	0x7ff00000
 801f690:	7fe00000 	.word	0x7fe00000
 801f694:	7c9fffff 	.word	0x7c9fffff
 801f698:	3fe00000 	.word	0x3fe00000
 801f69c:	bff00000 	.word	0xbff00000
 801f6a0:	7fefffff 	.word	0x7fefffff

0801f6a4 <strtod>:
 801f6a4:	460a      	mov	r2, r1
 801f6a6:	4601      	mov	r1, r0
 801f6a8:	4802      	ldr	r0, [pc, #8]	; (801f6b4 <strtod+0x10>)
 801f6aa:	4b03      	ldr	r3, [pc, #12]	; (801f6b8 <strtod+0x14>)
 801f6ac:	6800      	ldr	r0, [r0, #0]
 801f6ae:	f7ff b9ef 	b.w	801ea90 <_strtod_l>
 801f6b2:	bf00      	nop
 801f6b4:	2000008c 	.word	0x2000008c
 801f6b8:	200000f4 	.word	0x200000f4

0801f6bc <_strtol_l.isra.0>:
 801f6bc:	2b01      	cmp	r3, #1
 801f6be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6c2:	d001      	beq.n	801f6c8 <_strtol_l.isra.0+0xc>
 801f6c4:	2b24      	cmp	r3, #36	; 0x24
 801f6c6:	d906      	bls.n	801f6d6 <_strtol_l.isra.0+0x1a>
 801f6c8:	f7fe f948 	bl	801d95c <__errno>
 801f6cc:	2316      	movs	r3, #22
 801f6ce:	6003      	str	r3, [r0, #0]
 801f6d0:	2000      	movs	r0, #0
 801f6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6d6:	4f3a      	ldr	r7, [pc, #232]	; (801f7c0 <_strtol_l.isra.0+0x104>)
 801f6d8:	468e      	mov	lr, r1
 801f6da:	4676      	mov	r6, lr
 801f6dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f6e0:	5de5      	ldrb	r5, [r4, r7]
 801f6e2:	f015 0508 	ands.w	r5, r5, #8
 801f6e6:	d1f8      	bne.n	801f6da <_strtol_l.isra.0+0x1e>
 801f6e8:	2c2d      	cmp	r4, #45	; 0x2d
 801f6ea:	d134      	bne.n	801f756 <_strtol_l.isra.0+0x9a>
 801f6ec:	f89e 4000 	ldrb.w	r4, [lr]
 801f6f0:	f04f 0801 	mov.w	r8, #1
 801f6f4:	f106 0e02 	add.w	lr, r6, #2
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	d05c      	beq.n	801f7b6 <_strtol_l.isra.0+0xfa>
 801f6fc:	2b10      	cmp	r3, #16
 801f6fe:	d10c      	bne.n	801f71a <_strtol_l.isra.0+0x5e>
 801f700:	2c30      	cmp	r4, #48	; 0x30
 801f702:	d10a      	bne.n	801f71a <_strtol_l.isra.0+0x5e>
 801f704:	f89e 4000 	ldrb.w	r4, [lr]
 801f708:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f70c:	2c58      	cmp	r4, #88	; 0x58
 801f70e:	d14d      	bne.n	801f7ac <_strtol_l.isra.0+0xf0>
 801f710:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801f714:	2310      	movs	r3, #16
 801f716:	f10e 0e02 	add.w	lr, lr, #2
 801f71a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801f71e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f722:	2600      	movs	r6, #0
 801f724:	fbbc f9f3 	udiv	r9, ip, r3
 801f728:	4635      	mov	r5, r6
 801f72a:	fb03 ca19 	mls	sl, r3, r9, ip
 801f72e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801f732:	2f09      	cmp	r7, #9
 801f734:	d818      	bhi.n	801f768 <_strtol_l.isra.0+0xac>
 801f736:	463c      	mov	r4, r7
 801f738:	42a3      	cmp	r3, r4
 801f73a:	dd24      	ble.n	801f786 <_strtol_l.isra.0+0xca>
 801f73c:	2e00      	cmp	r6, #0
 801f73e:	db1f      	blt.n	801f780 <_strtol_l.isra.0+0xc4>
 801f740:	45a9      	cmp	r9, r5
 801f742:	d31d      	bcc.n	801f780 <_strtol_l.isra.0+0xc4>
 801f744:	d101      	bne.n	801f74a <_strtol_l.isra.0+0x8e>
 801f746:	45a2      	cmp	sl, r4
 801f748:	db1a      	blt.n	801f780 <_strtol_l.isra.0+0xc4>
 801f74a:	fb05 4503 	mla	r5, r5, r3, r4
 801f74e:	2601      	movs	r6, #1
 801f750:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f754:	e7eb      	b.n	801f72e <_strtol_l.isra.0+0x72>
 801f756:	2c2b      	cmp	r4, #43	; 0x2b
 801f758:	bf08      	it	eq
 801f75a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801f75e:	46a8      	mov	r8, r5
 801f760:	bf08      	it	eq
 801f762:	f106 0e02 	addeq.w	lr, r6, #2
 801f766:	e7c7      	b.n	801f6f8 <_strtol_l.isra.0+0x3c>
 801f768:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801f76c:	2f19      	cmp	r7, #25
 801f76e:	d801      	bhi.n	801f774 <_strtol_l.isra.0+0xb8>
 801f770:	3c37      	subs	r4, #55	; 0x37
 801f772:	e7e1      	b.n	801f738 <_strtol_l.isra.0+0x7c>
 801f774:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801f778:	2f19      	cmp	r7, #25
 801f77a:	d804      	bhi.n	801f786 <_strtol_l.isra.0+0xca>
 801f77c:	3c57      	subs	r4, #87	; 0x57
 801f77e:	e7db      	b.n	801f738 <_strtol_l.isra.0+0x7c>
 801f780:	f04f 36ff 	mov.w	r6, #4294967295
 801f784:	e7e4      	b.n	801f750 <_strtol_l.isra.0+0x94>
 801f786:	2e00      	cmp	r6, #0
 801f788:	da05      	bge.n	801f796 <_strtol_l.isra.0+0xda>
 801f78a:	2322      	movs	r3, #34	; 0x22
 801f78c:	6003      	str	r3, [r0, #0]
 801f78e:	4665      	mov	r5, ip
 801f790:	b942      	cbnz	r2, 801f7a4 <_strtol_l.isra.0+0xe8>
 801f792:	4628      	mov	r0, r5
 801f794:	e79d      	b.n	801f6d2 <_strtol_l.isra.0+0x16>
 801f796:	f1b8 0f00 	cmp.w	r8, #0
 801f79a:	d000      	beq.n	801f79e <_strtol_l.isra.0+0xe2>
 801f79c:	426d      	negs	r5, r5
 801f79e:	2a00      	cmp	r2, #0
 801f7a0:	d0f7      	beq.n	801f792 <_strtol_l.isra.0+0xd6>
 801f7a2:	b10e      	cbz	r6, 801f7a8 <_strtol_l.isra.0+0xec>
 801f7a4:	f10e 31ff 	add.w	r1, lr, #4294967295
 801f7a8:	6011      	str	r1, [r2, #0]
 801f7aa:	e7f2      	b.n	801f792 <_strtol_l.isra.0+0xd6>
 801f7ac:	2430      	movs	r4, #48	; 0x30
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d1b3      	bne.n	801f71a <_strtol_l.isra.0+0x5e>
 801f7b2:	2308      	movs	r3, #8
 801f7b4:	e7b1      	b.n	801f71a <_strtol_l.isra.0+0x5e>
 801f7b6:	2c30      	cmp	r4, #48	; 0x30
 801f7b8:	d0a4      	beq.n	801f704 <_strtol_l.isra.0+0x48>
 801f7ba:	230a      	movs	r3, #10
 801f7bc:	e7ad      	b.n	801f71a <_strtol_l.isra.0+0x5e>
 801f7be:	bf00      	nop
 801f7c0:	08022b35 	.word	0x08022b35

0801f7c4 <strtol>:
 801f7c4:	4613      	mov	r3, r2
 801f7c6:	460a      	mov	r2, r1
 801f7c8:	4601      	mov	r1, r0
 801f7ca:	4802      	ldr	r0, [pc, #8]	; (801f7d4 <strtol+0x10>)
 801f7cc:	6800      	ldr	r0, [r0, #0]
 801f7ce:	f7ff bf75 	b.w	801f6bc <_strtol_l.isra.0>
 801f7d2:	bf00      	nop
 801f7d4:	2000008c 	.word	0x2000008c

0801f7d8 <__utoa>:
 801f7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f7da:	4c1f      	ldr	r4, [pc, #124]	; (801f858 <__utoa+0x80>)
 801f7dc:	b08b      	sub	sp, #44	; 0x2c
 801f7de:	4605      	mov	r5, r0
 801f7e0:	460b      	mov	r3, r1
 801f7e2:	466e      	mov	r6, sp
 801f7e4:	f104 0c20 	add.w	ip, r4, #32
 801f7e8:	6820      	ldr	r0, [r4, #0]
 801f7ea:	6861      	ldr	r1, [r4, #4]
 801f7ec:	4637      	mov	r7, r6
 801f7ee:	c703      	stmia	r7!, {r0, r1}
 801f7f0:	3408      	adds	r4, #8
 801f7f2:	4564      	cmp	r4, ip
 801f7f4:	463e      	mov	r6, r7
 801f7f6:	d1f7      	bne.n	801f7e8 <__utoa+0x10>
 801f7f8:	7921      	ldrb	r1, [r4, #4]
 801f7fa:	7139      	strb	r1, [r7, #4]
 801f7fc:	1e91      	subs	r1, r2, #2
 801f7fe:	6820      	ldr	r0, [r4, #0]
 801f800:	6038      	str	r0, [r7, #0]
 801f802:	2922      	cmp	r1, #34	; 0x22
 801f804:	f04f 0100 	mov.w	r1, #0
 801f808:	d904      	bls.n	801f814 <__utoa+0x3c>
 801f80a:	7019      	strb	r1, [r3, #0]
 801f80c:	460b      	mov	r3, r1
 801f80e:	4618      	mov	r0, r3
 801f810:	b00b      	add	sp, #44	; 0x2c
 801f812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f814:	1e58      	subs	r0, r3, #1
 801f816:	4684      	mov	ip, r0
 801f818:	fbb5 f7f2 	udiv	r7, r5, r2
 801f81c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801f820:	fb02 5617 	mls	r6, r2, r7, r5
 801f824:	4476      	add	r6, lr
 801f826:	460c      	mov	r4, r1
 801f828:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801f82c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801f830:	462e      	mov	r6, r5
 801f832:	42b2      	cmp	r2, r6
 801f834:	f101 0101 	add.w	r1, r1, #1
 801f838:	463d      	mov	r5, r7
 801f83a:	d9ed      	bls.n	801f818 <__utoa+0x40>
 801f83c:	2200      	movs	r2, #0
 801f83e:	545a      	strb	r2, [r3, r1]
 801f840:	1919      	adds	r1, r3, r4
 801f842:	1aa5      	subs	r5, r4, r2
 801f844:	42aa      	cmp	r2, r5
 801f846:	dae2      	bge.n	801f80e <__utoa+0x36>
 801f848:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801f84c:	780e      	ldrb	r6, [r1, #0]
 801f84e:	7006      	strb	r6, [r0, #0]
 801f850:	3201      	adds	r2, #1
 801f852:	f801 5901 	strb.w	r5, [r1], #-1
 801f856:	e7f4      	b.n	801f842 <__utoa+0x6a>
 801f858:	08022d20 	.word	0x08022d20

0801f85c <__swbuf_r>:
 801f85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f85e:	460e      	mov	r6, r1
 801f860:	4614      	mov	r4, r2
 801f862:	4605      	mov	r5, r0
 801f864:	b118      	cbz	r0, 801f86e <__swbuf_r+0x12>
 801f866:	6983      	ldr	r3, [r0, #24]
 801f868:	b90b      	cbnz	r3, 801f86e <__swbuf_r+0x12>
 801f86a:	f7fe f997 	bl	801db9c <__sinit>
 801f86e:	4b21      	ldr	r3, [pc, #132]	; (801f8f4 <__swbuf_r+0x98>)
 801f870:	429c      	cmp	r4, r3
 801f872:	d12b      	bne.n	801f8cc <__swbuf_r+0x70>
 801f874:	686c      	ldr	r4, [r5, #4]
 801f876:	69a3      	ldr	r3, [r4, #24]
 801f878:	60a3      	str	r3, [r4, #8]
 801f87a:	89a3      	ldrh	r3, [r4, #12]
 801f87c:	071a      	lsls	r2, r3, #28
 801f87e:	d52f      	bpl.n	801f8e0 <__swbuf_r+0x84>
 801f880:	6923      	ldr	r3, [r4, #16]
 801f882:	b36b      	cbz	r3, 801f8e0 <__swbuf_r+0x84>
 801f884:	6923      	ldr	r3, [r4, #16]
 801f886:	6820      	ldr	r0, [r4, #0]
 801f888:	1ac0      	subs	r0, r0, r3
 801f88a:	6963      	ldr	r3, [r4, #20]
 801f88c:	b2f6      	uxtb	r6, r6
 801f88e:	4283      	cmp	r3, r0
 801f890:	4637      	mov	r7, r6
 801f892:	dc04      	bgt.n	801f89e <__swbuf_r+0x42>
 801f894:	4621      	mov	r1, r4
 801f896:	4628      	mov	r0, r5
 801f898:	f7fe f8ec 	bl	801da74 <_fflush_r>
 801f89c:	bb30      	cbnz	r0, 801f8ec <__swbuf_r+0x90>
 801f89e:	68a3      	ldr	r3, [r4, #8]
 801f8a0:	3b01      	subs	r3, #1
 801f8a2:	60a3      	str	r3, [r4, #8]
 801f8a4:	6823      	ldr	r3, [r4, #0]
 801f8a6:	1c5a      	adds	r2, r3, #1
 801f8a8:	6022      	str	r2, [r4, #0]
 801f8aa:	701e      	strb	r6, [r3, #0]
 801f8ac:	6963      	ldr	r3, [r4, #20]
 801f8ae:	3001      	adds	r0, #1
 801f8b0:	4283      	cmp	r3, r0
 801f8b2:	d004      	beq.n	801f8be <__swbuf_r+0x62>
 801f8b4:	89a3      	ldrh	r3, [r4, #12]
 801f8b6:	07db      	lsls	r3, r3, #31
 801f8b8:	d506      	bpl.n	801f8c8 <__swbuf_r+0x6c>
 801f8ba:	2e0a      	cmp	r6, #10
 801f8bc:	d104      	bne.n	801f8c8 <__swbuf_r+0x6c>
 801f8be:	4621      	mov	r1, r4
 801f8c0:	4628      	mov	r0, r5
 801f8c2:	f7fe f8d7 	bl	801da74 <_fflush_r>
 801f8c6:	b988      	cbnz	r0, 801f8ec <__swbuf_r+0x90>
 801f8c8:	4638      	mov	r0, r7
 801f8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f8cc:	4b0a      	ldr	r3, [pc, #40]	; (801f8f8 <__swbuf_r+0x9c>)
 801f8ce:	429c      	cmp	r4, r3
 801f8d0:	d101      	bne.n	801f8d6 <__swbuf_r+0x7a>
 801f8d2:	68ac      	ldr	r4, [r5, #8]
 801f8d4:	e7cf      	b.n	801f876 <__swbuf_r+0x1a>
 801f8d6:	4b09      	ldr	r3, [pc, #36]	; (801f8fc <__swbuf_r+0xa0>)
 801f8d8:	429c      	cmp	r4, r3
 801f8da:	bf08      	it	eq
 801f8dc:	68ec      	ldreq	r4, [r5, #12]
 801f8de:	e7ca      	b.n	801f876 <__swbuf_r+0x1a>
 801f8e0:	4621      	mov	r1, r4
 801f8e2:	4628      	mov	r0, r5
 801f8e4:	f000 f81e 	bl	801f924 <__swsetup_r>
 801f8e8:	2800      	cmp	r0, #0
 801f8ea:	d0cb      	beq.n	801f884 <__swbuf_r+0x28>
 801f8ec:	f04f 37ff 	mov.w	r7, #4294967295
 801f8f0:	e7ea      	b.n	801f8c8 <__swbuf_r+0x6c>
 801f8f2:	bf00      	nop
 801f8f4:	08022c58 	.word	0x08022c58
 801f8f8:	08022c78 	.word	0x08022c78
 801f8fc:	08022c38 	.word	0x08022c38

0801f900 <_write_r>:
 801f900:	b538      	push	{r3, r4, r5, lr}
 801f902:	4d07      	ldr	r5, [pc, #28]	; (801f920 <_write_r+0x20>)
 801f904:	4604      	mov	r4, r0
 801f906:	4608      	mov	r0, r1
 801f908:	4611      	mov	r1, r2
 801f90a:	2200      	movs	r2, #0
 801f90c:	602a      	str	r2, [r5, #0]
 801f90e:	461a      	mov	r2, r3
 801f910:	f7fd ffba 	bl	801d888 <_write>
 801f914:	1c43      	adds	r3, r0, #1
 801f916:	d102      	bne.n	801f91e <_write_r+0x1e>
 801f918:	682b      	ldr	r3, [r5, #0]
 801f91a:	b103      	cbz	r3, 801f91e <_write_r+0x1e>
 801f91c:	6023      	str	r3, [r4, #0]
 801f91e:	bd38      	pop	{r3, r4, r5, pc}
 801f920:	20019244 	.word	0x20019244

0801f924 <__swsetup_r>:
 801f924:	4b32      	ldr	r3, [pc, #200]	; (801f9f0 <__swsetup_r+0xcc>)
 801f926:	b570      	push	{r4, r5, r6, lr}
 801f928:	681d      	ldr	r5, [r3, #0]
 801f92a:	4606      	mov	r6, r0
 801f92c:	460c      	mov	r4, r1
 801f92e:	b125      	cbz	r5, 801f93a <__swsetup_r+0x16>
 801f930:	69ab      	ldr	r3, [r5, #24]
 801f932:	b913      	cbnz	r3, 801f93a <__swsetup_r+0x16>
 801f934:	4628      	mov	r0, r5
 801f936:	f7fe f931 	bl	801db9c <__sinit>
 801f93a:	4b2e      	ldr	r3, [pc, #184]	; (801f9f4 <__swsetup_r+0xd0>)
 801f93c:	429c      	cmp	r4, r3
 801f93e:	d10f      	bne.n	801f960 <__swsetup_r+0x3c>
 801f940:	686c      	ldr	r4, [r5, #4]
 801f942:	89a3      	ldrh	r3, [r4, #12]
 801f944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f948:	0719      	lsls	r1, r3, #28
 801f94a:	d42c      	bmi.n	801f9a6 <__swsetup_r+0x82>
 801f94c:	06dd      	lsls	r5, r3, #27
 801f94e:	d411      	bmi.n	801f974 <__swsetup_r+0x50>
 801f950:	2309      	movs	r3, #9
 801f952:	6033      	str	r3, [r6, #0]
 801f954:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f958:	81a3      	strh	r3, [r4, #12]
 801f95a:	f04f 30ff 	mov.w	r0, #4294967295
 801f95e:	e03e      	b.n	801f9de <__swsetup_r+0xba>
 801f960:	4b25      	ldr	r3, [pc, #148]	; (801f9f8 <__swsetup_r+0xd4>)
 801f962:	429c      	cmp	r4, r3
 801f964:	d101      	bne.n	801f96a <__swsetup_r+0x46>
 801f966:	68ac      	ldr	r4, [r5, #8]
 801f968:	e7eb      	b.n	801f942 <__swsetup_r+0x1e>
 801f96a:	4b24      	ldr	r3, [pc, #144]	; (801f9fc <__swsetup_r+0xd8>)
 801f96c:	429c      	cmp	r4, r3
 801f96e:	bf08      	it	eq
 801f970:	68ec      	ldreq	r4, [r5, #12]
 801f972:	e7e6      	b.n	801f942 <__swsetup_r+0x1e>
 801f974:	0758      	lsls	r0, r3, #29
 801f976:	d512      	bpl.n	801f99e <__swsetup_r+0x7a>
 801f978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f97a:	b141      	cbz	r1, 801f98e <__swsetup_r+0x6a>
 801f97c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f980:	4299      	cmp	r1, r3
 801f982:	d002      	beq.n	801f98a <__swsetup_r+0x66>
 801f984:	4630      	mov	r0, r6
 801f986:	f7fe fa9d 	bl	801dec4 <_free_r>
 801f98a:	2300      	movs	r3, #0
 801f98c:	6363      	str	r3, [r4, #52]	; 0x34
 801f98e:	89a3      	ldrh	r3, [r4, #12]
 801f990:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f994:	81a3      	strh	r3, [r4, #12]
 801f996:	2300      	movs	r3, #0
 801f998:	6063      	str	r3, [r4, #4]
 801f99a:	6923      	ldr	r3, [r4, #16]
 801f99c:	6023      	str	r3, [r4, #0]
 801f99e:	89a3      	ldrh	r3, [r4, #12]
 801f9a0:	f043 0308 	orr.w	r3, r3, #8
 801f9a4:	81a3      	strh	r3, [r4, #12]
 801f9a6:	6923      	ldr	r3, [r4, #16]
 801f9a8:	b94b      	cbnz	r3, 801f9be <__swsetup_r+0x9a>
 801f9aa:	89a3      	ldrh	r3, [r4, #12]
 801f9ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f9b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f9b4:	d003      	beq.n	801f9be <__swsetup_r+0x9a>
 801f9b6:	4621      	mov	r1, r4
 801f9b8:	4630      	mov	r0, r6
 801f9ba:	f7fe f9f3 	bl	801dda4 <__smakebuf_r>
 801f9be:	89a0      	ldrh	r0, [r4, #12]
 801f9c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f9c4:	f010 0301 	ands.w	r3, r0, #1
 801f9c8:	d00a      	beq.n	801f9e0 <__swsetup_r+0xbc>
 801f9ca:	2300      	movs	r3, #0
 801f9cc:	60a3      	str	r3, [r4, #8]
 801f9ce:	6963      	ldr	r3, [r4, #20]
 801f9d0:	425b      	negs	r3, r3
 801f9d2:	61a3      	str	r3, [r4, #24]
 801f9d4:	6923      	ldr	r3, [r4, #16]
 801f9d6:	b943      	cbnz	r3, 801f9ea <__swsetup_r+0xc6>
 801f9d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f9dc:	d1ba      	bne.n	801f954 <__swsetup_r+0x30>
 801f9de:	bd70      	pop	{r4, r5, r6, pc}
 801f9e0:	0781      	lsls	r1, r0, #30
 801f9e2:	bf58      	it	pl
 801f9e4:	6963      	ldrpl	r3, [r4, #20]
 801f9e6:	60a3      	str	r3, [r4, #8]
 801f9e8:	e7f4      	b.n	801f9d4 <__swsetup_r+0xb0>
 801f9ea:	2000      	movs	r0, #0
 801f9ec:	e7f7      	b.n	801f9de <__swsetup_r+0xba>
 801f9ee:	bf00      	nop
 801f9f0:	2000008c 	.word	0x2000008c
 801f9f4:	08022c58 	.word	0x08022c58
 801f9f8:	08022c78 	.word	0x08022c78
 801f9fc:	08022c38 	.word	0x08022c38

0801fa00 <_close_r>:
 801fa00:	b538      	push	{r3, r4, r5, lr}
 801fa02:	4d06      	ldr	r5, [pc, #24]	; (801fa1c <_close_r+0x1c>)
 801fa04:	2300      	movs	r3, #0
 801fa06:	4604      	mov	r4, r0
 801fa08:	4608      	mov	r0, r1
 801fa0a:	602b      	str	r3, [r5, #0]
 801fa0c:	f7fd ff58 	bl	801d8c0 <_close>
 801fa10:	1c43      	adds	r3, r0, #1
 801fa12:	d102      	bne.n	801fa1a <_close_r+0x1a>
 801fa14:	682b      	ldr	r3, [r5, #0]
 801fa16:	b103      	cbz	r3, 801fa1a <_close_r+0x1a>
 801fa18:	6023      	str	r3, [r4, #0]
 801fa1a:	bd38      	pop	{r3, r4, r5, pc}
 801fa1c:	20019244 	.word	0x20019244

0801fa20 <quorem>:
 801fa20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa24:	6903      	ldr	r3, [r0, #16]
 801fa26:	690c      	ldr	r4, [r1, #16]
 801fa28:	42a3      	cmp	r3, r4
 801fa2a:	4607      	mov	r7, r0
 801fa2c:	f2c0 8081 	blt.w	801fb32 <quorem+0x112>
 801fa30:	3c01      	subs	r4, #1
 801fa32:	f101 0814 	add.w	r8, r1, #20
 801fa36:	f100 0514 	add.w	r5, r0, #20
 801fa3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fa3e:	9301      	str	r3, [sp, #4]
 801fa40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fa44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fa48:	3301      	adds	r3, #1
 801fa4a:	429a      	cmp	r2, r3
 801fa4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fa50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fa54:	fbb2 f6f3 	udiv	r6, r2, r3
 801fa58:	d331      	bcc.n	801fabe <quorem+0x9e>
 801fa5a:	f04f 0e00 	mov.w	lr, #0
 801fa5e:	4640      	mov	r0, r8
 801fa60:	46ac      	mov	ip, r5
 801fa62:	46f2      	mov	sl, lr
 801fa64:	f850 2b04 	ldr.w	r2, [r0], #4
 801fa68:	b293      	uxth	r3, r2
 801fa6a:	fb06 e303 	mla	r3, r6, r3, lr
 801fa6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801fa72:	b29b      	uxth	r3, r3
 801fa74:	ebaa 0303 	sub.w	r3, sl, r3
 801fa78:	0c12      	lsrs	r2, r2, #16
 801fa7a:	f8dc a000 	ldr.w	sl, [ip]
 801fa7e:	fb06 e202 	mla	r2, r6, r2, lr
 801fa82:	fa13 f38a 	uxtah	r3, r3, sl
 801fa86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fa8a:	fa1f fa82 	uxth.w	sl, r2
 801fa8e:	f8dc 2000 	ldr.w	r2, [ip]
 801fa92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801fa96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fa9a:	b29b      	uxth	r3, r3
 801fa9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801faa0:	4581      	cmp	r9, r0
 801faa2:	f84c 3b04 	str.w	r3, [ip], #4
 801faa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801faaa:	d2db      	bcs.n	801fa64 <quorem+0x44>
 801faac:	f855 300b 	ldr.w	r3, [r5, fp]
 801fab0:	b92b      	cbnz	r3, 801fabe <quorem+0x9e>
 801fab2:	9b01      	ldr	r3, [sp, #4]
 801fab4:	3b04      	subs	r3, #4
 801fab6:	429d      	cmp	r5, r3
 801fab8:	461a      	mov	r2, r3
 801faba:	d32e      	bcc.n	801fb1a <quorem+0xfa>
 801fabc:	613c      	str	r4, [r7, #16]
 801fabe:	4638      	mov	r0, r7
 801fac0:	f001 fcb4 	bl	802142c <__mcmp>
 801fac4:	2800      	cmp	r0, #0
 801fac6:	db24      	blt.n	801fb12 <quorem+0xf2>
 801fac8:	3601      	adds	r6, #1
 801faca:	4628      	mov	r0, r5
 801facc:	f04f 0c00 	mov.w	ip, #0
 801fad0:	f858 2b04 	ldr.w	r2, [r8], #4
 801fad4:	f8d0 e000 	ldr.w	lr, [r0]
 801fad8:	b293      	uxth	r3, r2
 801fada:	ebac 0303 	sub.w	r3, ip, r3
 801fade:	0c12      	lsrs	r2, r2, #16
 801fae0:	fa13 f38e 	uxtah	r3, r3, lr
 801fae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801fae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801faec:	b29b      	uxth	r3, r3
 801faee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801faf2:	45c1      	cmp	r9, r8
 801faf4:	f840 3b04 	str.w	r3, [r0], #4
 801faf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801fafc:	d2e8      	bcs.n	801fad0 <quorem+0xb0>
 801fafe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fb02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fb06:	b922      	cbnz	r2, 801fb12 <quorem+0xf2>
 801fb08:	3b04      	subs	r3, #4
 801fb0a:	429d      	cmp	r5, r3
 801fb0c:	461a      	mov	r2, r3
 801fb0e:	d30a      	bcc.n	801fb26 <quorem+0x106>
 801fb10:	613c      	str	r4, [r7, #16]
 801fb12:	4630      	mov	r0, r6
 801fb14:	b003      	add	sp, #12
 801fb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb1a:	6812      	ldr	r2, [r2, #0]
 801fb1c:	3b04      	subs	r3, #4
 801fb1e:	2a00      	cmp	r2, #0
 801fb20:	d1cc      	bne.n	801fabc <quorem+0x9c>
 801fb22:	3c01      	subs	r4, #1
 801fb24:	e7c7      	b.n	801fab6 <quorem+0x96>
 801fb26:	6812      	ldr	r2, [r2, #0]
 801fb28:	3b04      	subs	r3, #4
 801fb2a:	2a00      	cmp	r2, #0
 801fb2c:	d1f0      	bne.n	801fb10 <quorem+0xf0>
 801fb2e:	3c01      	subs	r4, #1
 801fb30:	e7eb      	b.n	801fb0a <quorem+0xea>
 801fb32:	2000      	movs	r0, #0
 801fb34:	e7ee      	b.n	801fb14 <quorem+0xf4>
	...

0801fb38 <_dtoa_r>:
 801fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb3c:	ed2d 8b02 	vpush	{d8}
 801fb40:	ec57 6b10 	vmov	r6, r7, d0
 801fb44:	b095      	sub	sp, #84	; 0x54
 801fb46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801fb48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801fb4c:	9105      	str	r1, [sp, #20]
 801fb4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801fb52:	4604      	mov	r4, r0
 801fb54:	9209      	str	r2, [sp, #36]	; 0x24
 801fb56:	930f      	str	r3, [sp, #60]	; 0x3c
 801fb58:	b975      	cbnz	r5, 801fb78 <_dtoa_r+0x40>
 801fb5a:	2010      	movs	r0, #16
 801fb5c:	f7fe f962 	bl	801de24 <malloc>
 801fb60:	4602      	mov	r2, r0
 801fb62:	6260      	str	r0, [r4, #36]	; 0x24
 801fb64:	b920      	cbnz	r0, 801fb70 <_dtoa_r+0x38>
 801fb66:	4bb2      	ldr	r3, [pc, #712]	; (801fe30 <_dtoa_r+0x2f8>)
 801fb68:	21ea      	movs	r1, #234	; 0xea
 801fb6a:	48b2      	ldr	r0, [pc, #712]	; (801fe34 <_dtoa_r+0x2fc>)
 801fb6c:	f001 ffd6 	bl	8021b1c <__assert_func>
 801fb70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801fb74:	6005      	str	r5, [r0, #0]
 801fb76:	60c5      	str	r5, [r0, #12]
 801fb78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb7a:	6819      	ldr	r1, [r3, #0]
 801fb7c:	b151      	cbz	r1, 801fb94 <_dtoa_r+0x5c>
 801fb7e:	685a      	ldr	r2, [r3, #4]
 801fb80:	604a      	str	r2, [r1, #4]
 801fb82:	2301      	movs	r3, #1
 801fb84:	4093      	lsls	r3, r2
 801fb86:	608b      	str	r3, [r1, #8]
 801fb88:	4620      	mov	r0, r4
 801fb8a:	f001 f9c7 	bl	8020f1c <_Bfree>
 801fb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb90:	2200      	movs	r2, #0
 801fb92:	601a      	str	r2, [r3, #0]
 801fb94:	1e3b      	subs	r3, r7, #0
 801fb96:	bfb9      	ittee	lt
 801fb98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801fb9c:	9303      	strlt	r3, [sp, #12]
 801fb9e:	2300      	movge	r3, #0
 801fba0:	f8c8 3000 	strge.w	r3, [r8]
 801fba4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801fba8:	4ba3      	ldr	r3, [pc, #652]	; (801fe38 <_dtoa_r+0x300>)
 801fbaa:	bfbc      	itt	lt
 801fbac:	2201      	movlt	r2, #1
 801fbae:	f8c8 2000 	strlt.w	r2, [r8]
 801fbb2:	ea33 0309 	bics.w	r3, r3, r9
 801fbb6:	d11b      	bne.n	801fbf0 <_dtoa_r+0xb8>
 801fbb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fbba:	f242 730f 	movw	r3, #9999	; 0x270f
 801fbbe:	6013      	str	r3, [r2, #0]
 801fbc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fbc4:	4333      	orrs	r3, r6
 801fbc6:	f000 857a 	beq.w	80206be <_dtoa_r+0xb86>
 801fbca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fbcc:	b963      	cbnz	r3, 801fbe8 <_dtoa_r+0xb0>
 801fbce:	4b9b      	ldr	r3, [pc, #620]	; (801fe3c <_dtoa_r+0x304>)
 801fbd0:	e024      	b.n	801fc1c <_dtoa_r+0xe4>
 801fbd2:	4b9b      	ldr	r3, [pc, #620]	; (801fe40 <_dtoa_r+0x308>)
 801fbd4:	9300      	str	r3, [sp, #0]
 801fbd6:	3308      	adds	r3, #8
 801fbd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fbda:	6013      	str	r3, [r2, #0]
 801fbdc:	9800      	ldr	r0, [sp, #0]
 801fbde:	b015      	add	sp, #84	; 0x54
 801fbe0:	ecbd 8b02 	vpop	{d8}
 801fbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbe8:	4b94      	ldr	r3, [pc, #592]	; (801fe3c <_dtoa_r+0x304>)
 801fbea:	9300      	str	r3, [sp, #0]
 801fbec:	3303      	adds	r3, #3
 801fbee:	e7f3      	b.n	801fbd8 <_dtoa_r+0xa0>
 801fbf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801fbf4:	2200      	movs	r2, #0
 801fbf6:	ec51 0b17 	vmov	r0, r1, d7
 801fbfa:	2300      	movs	r3, #0
 801fbfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801fc00:	f7e0 ff8a 	bl	8000b18 <__aeabi_dcmpeq>
 801fc04:	4680      	mov	r8, r0
 801fc06:	b158      	cbz	r0, 801fc20 <_dtoa_r+0xe8>
 801fc08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fc0a:	2301      	movs	r3, #1
 801fc0c:	6013      	str	r3, [r2, #0]
 801fc0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fc10:	2b00      	cmp	r3, #0
 801fc12:	f000 8551 	beq.w	80206b8 <_dtoa_r+0xb80>
 801fc16:	488b      	ldr	r0, [pc, #556]	; (801fe44 <_dtoa_r+0x30c>)
 801fc18:	6018      	str	r0, [r3, #0]
 801fc1a:	1e43      	subs	r3, r0, #1
 801fc1c:	9300      	str	r3, [sp, #0]
 801fc1e:	e7dd      	b.n	801fbdc <_dtoa_r+0xa4>
 801fc20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801fc24:	aa12      	add	r2, sp, #72	; 0x48
 801fc26:	a913      	add	r1, sp, #76	; 0x4c
 801fc28:	4620      	mov	r0, r4
 801fc2a:	f001 fd1f 	bl	802166c <__d2b>
 801fc2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801fc32:	4683      	mov	fp, r0
 801fc34:	2d00      	cmp	r5, #0
 801fc36:	d07c      	beq.n	801fd32 <_dtoa_r+0x1fa>
 801fc38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801fc3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fc42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801fc46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801fc4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801fc4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fc52:	4b7d      	ldr	r3, [pc, #500]	; (801fe48 <_dtoa_r+0x310>)
 801fc54:	2200      	movs	r2, #0
 801fc56:	4630      	mov	r0, r6
 801fc58:	4639      	mov	r1, r7
 801fc5a:	f7e0 fb3d 	bl	80002d8 <__aeabi_dsub>
 801fc5e:	a36e      	add	r3, pc, #440	; (adr r3, 801fe18 <_dtoa_r+0x2e0>)
 801fc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc64:	f7e0 fcf0 	bl	8000648 <__aeabi_dmul>
 801fc68:	a36d      	add	r3, pc, #436	; (adr r3, 801fe20 <_dtoa_r+0x2e8>)
 801fc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc6e:	f7e0 fb35 	bl	80002dc <__adddf3>
 801fc72:	4606      	mov	r6, r0
 801fc74:	4628      	mov	r0, r5
 801fc76:	460f      	mov	r7, r1
 801fc78:	f7e0 fc7c 	bl	8000574 <__aeabi_i2d>
 801fc7c:	a36a      	add	r3, pc, #424	; (adr r3, 801fe28 <_dtoa_r+0x2f0>)
 801fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc82:	f7e0 fce1 	bl	8000648 <__aeabi_dmul>
 801fc86:	4602      	mov	r2, r0
 801fc88:	460b      	mov	r3, r1
 801fc8a:	4630      	mov	r0, r6
 801fc8c:	4639      	mov	r1, r7
 801fc8e:	f7e0 fb25 	bl	80002dc <__adddf3>
 801fc92:	4606      	mov	r6, r0
 801fc94:	460f      	mov	r7, r1
 801fc96:	f7e0 ff87 	bl	8000ba8 <__aeabi_d2iz>
 801fc9a:	2200      	movs	r2, #0
 801fc9c:	4682      	mov	sl, r0
 801fc9e:	2300      	movs	r3, #0
 801fca0:	4630      	mov	r0, r6
 801fca2:	4639      	mov	r1, r7
 801fca4:	f7e0 ff42 	bl	8000b2c <__aeabi_dcmplt>
 801fca8:	b148      	cbz	r0, 801fcbe <_dtoa_r+0x186>
 801fcaa:	4650      	mov	r0, sl
 801fcac:	f7e0 fc62 	bl	8000574 <__aeabi_i2d>
 801fcb0:	4632      	mov	r2, r6
 801fcb2:	463b      	mov	r3, r7
 801fcb4:	f7e0 ff30 	bl	8000b18 <__aeabi_dcmpeq>
 801fcb8:	b908      	cbnz	r0, 801fcbe <_dtoa_r+0x186>
 801fcba:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fcbe:	f1ba 0f16 	cmp.w	sl, #22
 801fcc2:	d854      	bhi.n	801fd6e <_dtoa_r+0x236>
 801fcc4:	4b61      	ldr	r3, [pc, #388]	; (801fe4c <_dtoa_r+0x314>)
 801fcc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801fcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fcd2:	f7e0 ff2b 	bl	8000b2c <__aeabi_dcmplt>
 801fcd6:	2800      	cmp	r0, #0
 801fcd8:	d04b      	beq.n	801fd72 <_dtoa_r+0x23a>
 801fcda:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fcde:	2300      	movs	r3, #0
 801fce0:	930e      	str	r3, [sp, #56]	; 0x38
 801fce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fce4:	1b5d      	subs	r5, r3, r5
 801fce6:	1e6b      	subs	r3, r5, #1
 801fce8:	9304      	str	r3, [sp, #16]
 801fcea:	bf43      	ittte	mi
 801fcec:	2300      	movmi	r3, #0
 801fcee:	f1c5 0801 	rsbmi	r8, r5, #1
 801fcf2:	9304      	strmi	r3, [sp, #16]
 801fcf4:	f04f 0800 	movpl.w	r8, #0
 801fcf8:	f1ba 0f00 	cmp.w	sl, #0
 801fcfc:	db3b      	blt.n	801fd76 <_dtoa_r+0x23e>
 801fcfe:	9b04      	ldr	r3, [sp, #16]
 801fd00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801fd04:	4453      	add	r3, sl
 801fd06:	9304      	str	r3, [sp, #16]
 801fd08:	2300      	movs	r3, #0
 801fd0a:	9306      	str	r3, [sp, #24]
 801fd0c:	9b05      	ldr	r3, [sp, #20]
 801fd0e:	2b09      	cmp	r3, #9
 801fd10:	d869      	bhi.n	801fde6 <_dtoa_r+0x2ae>
 801fd12:	2b05      	cmp	r3, #5
 801fd14:	bfc4      	itt	gt
 801fd16:	3b04      	subgt	r3, #4
 801fd18:	9305      	strgt	r3, [sp, #20]
 801fd1a:	9b05      	ldr	r3, [sp, #20]
 801fd1c:	f1a3 0302 	sub.w	r3, r3, #2
 801fd20:	bfcc      	ite	gt
 801fd22:	2500      	movgt	r5, #0
 801fd24:	2501      	movle	r5, #1
 801fd26:	2b03      	cmp	r3, #3
 801fd28:	d869      	bhi.n	801fdfe <_dtoa_r+0x2c6>
 801fd2a:	e8df f003 	tbb	[pc, r3]
 801fd2e:	4e2c      	.short	0x4e2c
 801fd30:	5a4c      	.short	0x5a4c
 801fd32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801fd36:	441d      	add	r5, r3
 801fd38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801fd3c:	2b20      	cmp	r3, #32
 801fd3e:	bfc1      	itttt	gt
 801fd40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801fd44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801fd48:	fa09 f303 	lslgt.w	r3, r9, r3
 801fd4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801fd50:	bfda      	itte	le
 801fd52:	f1c3 0320 	rsble	r3, r3, #32
 801fd56:	fa06 f003 	lslle.w	r0, r6, r3
 801fd5a:	4318      	orrgt	r0, r3
 801fd5c:	f7e0 fbfa 	bl	8000554 <__aeabi_ui2d>
 801fd60:	2301      	movs	r3, #1
 801fd62:	4606      	mov	r6, r0
 801fd64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801fd68:	3d01      	subs	r5, #1
 801fd6a:	9310      	str	r3, [sp, #64]	; 0x40
 801fd6c:	e771      	b.n	801fc52 <_dtoa_r+0x11a>
 801fd6e:	2301      	movs	r3, #1
 801fd70:	e7b6      	b.n	801fce0 <_dtoa_r+0x1a8>
 801fd72:	900e      	str	r0, [sp, #56]	; 0x38
 801fd74:	e7b5      	b.n	801fce2 <_dtoa_r+0x1aa>
 801fd76:	f1ca 0300 	rsb	r3, sl, #0
 801fd7a:	9306      	str	r3, [sp, #24]
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	eba8 080a 	sub.w	r8, r8, sl
 801fd82:	930d      	str	r3, [sp, #52]	; 0x34
 801fd84:	e7c2      	b.n	801fd0c <_dtoa_r+0x1d4>
 801fd86:	2300      	movs	r3, #0
 801fd88:	9308      	str	r3, [sp, #32]
 801fd8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	dc39      	bgt.n	801fe04 <_dtoa_r+0x2cc>
 801fd90:	f04f 0901 	mov.w	r9, #1
 801fd94:	f8cd 9004 	str.w	r9, [sp, #4]
 801fd98:	464b      	mov	r3, r9
 801fd9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801fd9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fda0:	2200      	movs	r2, #0
 801fda2:	6042      	str	r2, [r0, #4]
 801fda4:	2204      	movs	r2, #4
 801fda6:	f102 0614 	add.w	r6, r2, #20
 801fdaa:	429e      	cmp	r6, r3
 801fdac:	6841      	ldr	r1, [r0, #4]
 801fdae:	d92f      	bls.n	801fe10 <_dtoa_r+0x2d8>
 801fdb0:	4620      	mov	r0, r4
 801fdb2:	f001 f873 	bl	8020e9c <_Balloc>
 801fdb6:	9000      	str	r0, [sp, #0]
 801fdb8:	2800      	cmp	r0, #0
 801fdba:	d14b      	bne.n	801fe54 <_dtoa_r+0x31c>
 801fdbc:	4b24      	ldr	r3, [pc, #144]	; (801fe50 <_dtoa_r+0x318>)
 801fdbe:	4602      	mov	r2, r0
 801fdc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801fdc4:	e6d1      	b.n	801fb6a <_dtoa_r+0x32>
 801fdc6:	2301      	movs	r3, #1
 801fdc8:	e7de      	b.n	801fd88 <_dtoa_r+0x250>
 801fdca:	2300      	movs	r3, #0
 801fdcc:	9308      	str	r3, [sp, #32]
 801fdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdd0:	eb0a 0903 	add.w	r9, sl, r3
 801fdd4:	f109 0301 	add.w	r3, r9, #1
 801fdd8:	2b01      	cmp	r3, #1
 801fdda:	9301      	str	r3, [sp, #4]
 801fddc:	bfb8      	it	lt
 801fdde:	2301      	movlt	r3, #1
 801fde0:	e7dd      	b.n	801fd9e <_dtoa_r+0x266>
 801fde2:	2301      	movs	r3, #1
 801fde4:	e7f2      	b.n	801fdcc <_dtoa_r+0x294>
 801fde6:	2501      	movs	r5, #1
 801fde8:	2300      	movs	r3, #0
 801fdea:	9305      	str	r3, [sp, #20]
 801fdec:	9508      	str	r5, [sp, #32]
 801fdee:	f04f 39ff 	mov.w	r9, #4294967295
 801fdf2:	2200      	movs	r2, #0
 801fdf4:	f8cd 9004 	str.w	r9, [sp, #4]
 801fdf8:	2312      	movs	r3, #18
 801fdfa:	9209      	str	r2, [sp, #36]	; 0x24
 801fdfc:	e7cf      	b.n	801fd9e <_dtoa_r+0x266>
 801fdfe:	2301      	movs	r3, #1
 801fe00:	9308      	str	r3, [sp, #32]
 801fe02:	e7f4      	b.n	801fdee <_dtoa_r+0x2b6>
 801fe04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801fe08:	f8cd 9004 	str.w	r9, [sp, #4]
 801fe0c:	464b      	mov	r3, r9
 801fe0e:	e7c6      	b.n	801fd9e <_dtoa_r+0x266>
 801fe10:	3101      	adds	r1, #1
 801fe12:	6041      	str	r1, [r0, #4]
 801fe14:	0052      	lsls	r2, r2, #1
 801fe16:	e7c6      	b.n	801fda6 <_dtoa_r+0x26e>
 801fe18:	636f4361 	.word	0x636f4361
 801fe1c:	3fd287a7 	.word	0x3fd287a7
 801fe20:	8b60c8b3 	.word	0x8b60c8b3
 801fe24:	3fc68a28 	.word	0x3fc68a28
 801fe28:	509f79fb 	.word	0x509f79fb
 801fe2c:	3fd34413 	.word	0x3fd34413
 801fe30:	08022d52 	.word	0x08022d52
 801fe34:	08022d69 	.word	0x08022d69
 801fe38:	7ff00000 	.word	0x7ff00000
 801fe3c:	08022d4e 	.word	0x08022d4e
 801fe40:	08022d45 	.word	0x08022d45
 801fe44:	08022cad 	.word	0x08022cad
 801fe48:	3ff80000 	.word	0x3ff80000
 801fe4c:	08022ee0 	.word	0x08022ee0
 801fe50:	08022dc8 	.word	0x08022dc8
 801fe54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fe56:	9a00      	ldr	r2, [sp, #0]
 801fe58:	601a      	str	r2, [r3, #0]
 801fe5a:	9b01      	ldr	r3, [sp, #4]
 801fe5c:	2b0e      	cmp	r3, #14
 801fe5e:	f200 80ad 	bhi.w	801ffbc <_dtoa_r+0x484>
 801fe62:	2d00      	cmp	r5, #0
 801fe64:	f000 80aa 	beq.w	801ffbc <_dtoa_r+0x484>
 801fe68:	f1ba 0f00 	cmp.w	sl, #0
 801fe6c:	dd36      	ble.n	801fedc <_dtoa_r+0x3a4>
 801fe6e:	4ac3      	ldr	r2, [pc, #780]	; (802017c <_dtoa_r+0x644>)
 801fe70:	f00a 030f 	and.w	r3, sl, #15
 801fe74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801fe78:	ed93 7b00 	vldr	d7, [r3]
 801fe7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801fe80:	ea4f 172a 	mov.w	r7, sl, asr #4
 801fe84:	eeb0 8a47 	vmov.f32	s16, s14
 801fe88:	eef0 8a67 	vmov.f32	s17, s15
 801fe8c:	d016      	beq.n	801febc <_dtoa_r+0x384>
 801fe8e:	4bbc      	ldr	r3, [pc, #752]	; (8020180 <_dtoa_r+0x648>)
 801fe90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fe94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801fe98:	f7e0 fd00 	bl	800089c <__aeabi_ddiv>
 801fe9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fea0:	f007 070f 	and.w	r7, r7, #15
 801fea4:	2503      	movs	r5, #3
 801fea6:	4eb6      	ldr	r6, [pc, #728]	; (8020180 <_dtoa_r+0x648>)
 801fea8:	b957      	cbnz	r7, 801fec0 <_dtoa_r+0x388>
 801feaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801feae:	ec53 2b18 	vmov	r2, r3, d8
 801feb2:	f7e0 fcf3 	bl	800089c <__aeabi_ddiv>
 801feb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801feba:	e029      	b.n	801ff10 <_dtoa_r+0x3d8>
 801febc:	2502      	movs	r5, #2
 801febe:	e7f2      	b.n	801fea6 <_dtoa_r+0x36e>
 801fec0:	07f9      	lsls	r1, r7, #31
 801fec2:	d508      	bpl.n	801fed6 <_dtoa_r+0x39e>
 801fec4:	ec51 0b18 	vmov	r0, r1, d8
 801fec8:	e9d6 2300 	ldrd	r2, r3, [r6]
 801fecc:	f7e0 fbbc 	bl	8000648 <__aeabi_dmul>
 801fed0:	ec41 0b18 	vmov	d8, r0, r1
 801fed4:	3501      	adds	r5, #1
 801fed6:	107f      	asrs	r7, r7, #1
 801fed8:	3608      	adds	r6, #8
 801feda:	e7e5      	b.n	801fea8 <_dtoa_r+0x370>
 801fedc:	f000 80a6 	beq.w	802002c <_dtoa_r+0x4f4>
 801fee0:	f1ca 0600 	rsb	r6, sl, #0
 801fee4:	4ba5      	ldr	r3, [pc, #660]	; (802017c <_dtoa_r+0x644>)
 801fee6:	4fa6      	ldr	r7, [pc, #664]	; (8020180 <_dtoa_r+0x648>)
 801fee8:	f006 020f 	and.w	r2, r6, #15
 801feec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fef4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fef8:	f7e0 fba6 	bl	8000648 <__aeabi_dmul>
 801fefc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ff00:	1136      	asrs	r6, r6, #4
 801ff02:	2300      	movs	r3, #0
 801ff04:	2502      	movs	r5, #2
 801ff06:	2e00      	cmp	r6, #0
 801ff08:	f040 8085 	bne.w	8020016 <_dtoa_r+0x4de>
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	d1d2      	bne.n	801feb6 <_dtoa_r+0x37e>
 801ff10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff12:	2b00      	cmp	r3, #0
 801ff14:	f000 808c 	beq.w	8020030 <_dtoa_r+0x4f8>
 801ff18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ff1c:	4b99      	ldr	r3, [pc, #612]	; (8020184 <_dtoa_r+0x64c>)
 801ff1e:	2200      	movs	r2, #0
 801ff20:	4630      	mov	r0, r6
 801ff22:	4639      	mov	r1, r7
 801ff24:	f7e0 fe02 	bl	8000b2c <__aeabi_dcmplt>
 801ff28:	2800      	cmp	r0, #0
 801ff2a:	f000 8081 	beq.w	8020030 <_dtoa_r+0x4f8>
 801ff2e:	9b01      	ldr	r3, [sp, #4]
 801ff30:	2b00      	cmp	r3, #0
 801ff32:	d07d      	beq.n	8020030 <_dtoa_r+0x4f8>
 801ff34:	f1b9 0f00 	cmp.w	r9, #0
 801ff38:	dd3c      	ble.n	801ffb4 <_dtoa_r+0x47c>
 801ff3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ff3e:	9307      	str	r3, [sp, #28]
 801ff40:	2200      	movs	r2, #0
 801ff42:	4b91      	ldr	r3, [pc, #580]	; (8020188 <_dtoa_r+0x650>)
 801ff44:	4630      	mov	r0, r6
 801ff46:	4639      	mov	r1, r7
 801ff48:	f7e0 fb7e 	bl	8000648 <__aeabi_dmul>
 801ff4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ff50:	3501      	adds	r5, #1
 801ff52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801ff56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ff5a:	4628      	mov	r0, r5
 801ff5c:	f7e0 fb0a 	bl	8000574 <__aeabi_i2d>
 801ff60:	4632      	mov	r2, r6
 801ff62:	463b      	mov	r3, r7
 801ff64:	f7e0 fb70 	bl	8000648 <__aeabi_dmul>
 801ff68:	4b88      	ldr	r3, [pc, #544]	; (802018c <_dtoa_r+0x654>)
 801ff6a:	2200      	movs	r2, #0
 801ff6c:	f7e0 f9b6 	bl	80002dc <__adddf3>
 801ff70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801ff74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ff78:	9303      	str	r3, [sp, #12]
 801ff7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	d15c      	bne.n	802003a <_dtoa_r+0x502>
 801ff80:	4b83      	ldr	r3, [pc, #524]	; (8020190 <_dtoa_r+0x658>)
 801ff82:	2200      	movs	r2, #0
 801ff84:	4630      	mov	r0, r6
 801ff86:	4639      	mov	r1, r7
 801ff88:	f7e0 f9a6 	bl	80002d8 <__aeabi_dsub>
 801ff8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ff90:	4606      	mov	r6, r0
 801ff92:	460f      	mov	r7, r1
 801ff94:	f7e0 fde8 	bl	8000b68 <__aeabi_dcmpgt>
 801ff98:	2800      	cmp	r0, #0
 801ff9a:	f040 8296 	bne.w	80204ca <_dtoa_r+0x992>
 801ff9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801ffa2:	4630      	mov	r0, r6
 801ffa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ffa8:	4639      	mov	r1, r7
 801ffaa:	f7e0 fdbf 	bl	8000b2c <__aeabi_dcmplt>
 801ffae:	2800      	cmp	r0, #0
 801ffb0:	f040 8288 	bne.w	80204c4 <_dtoa_r+0x98c>
 801ffb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ffb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ffbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	f2c0 8158 	blt.w	8020274 <_dtoa_r+0x73c>
 801ffc4:	f1ba 0f0e 	cmp.w	sl, #14
 801ffc8:	f300 8154 	bgt.w	8020274 <_dtoa_r+0x73c>
 801ffcc:	4b6b      	ldr	r3, [pc, #428]	; (802017c <_dtoa_r+0x644>)
 801ffce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ffd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ffd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	f280 80e3 	bge.w	80201a4 <_dtoa_r+0x66c>
 801ffde:	9b01      	ldr	r3, [sp, #4]
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	f300 80df 	bgt.w	80201a4 <_dtoa_r+0x66c>
 801ffe6:	f040 826d 	bne.w	80204c4 <_dtoa_r+0x98c>
 801ffea:	4b69      	ldr	r3, [pc, #420]	; (8020190 <_dtoa_r+0x658>)
 801ffec:	2200      	movs	r2, #0
 801ffee:	4640      	mov	r0, r8
 801fff0:	4649      	mov	r1, r9
 801fff2:	f7e0 fb29 	bl	8000648 <__aeabi_dmul>
 801fff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801fffa:	f7e0 fdab 	bl	8000b54 <__aeabi_dcmpge>
 801fffe:	9e01      	ldr	r6, [sp, #4]
 8020000:	4637      	mov	r7, r6
 8020002:	2800      	cmp	r0, #0
 8020004:	f040 8243 	bne.w	802048e <_dtoa_r+0x956>
 8020008:	9d00      	ldr	r5, [sp, #0]
 802000a:	2331      	movs	r3, #49	; 0x31
 802000c:	f805 3b01 	strb.w	r3, [r5], #1
 8020010:	f10a 0a01 	add.w	sl, sl, #1
 8020014:	e23f      	b.n	8020496 <_dtoa_r+0x95e>
 8020016:	07f2      	lsls	r2, r6, #31
 8020018:	d505      	bpl.n	8020026 <_dtoa_r+0x4ee>
 802001a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802001e:	f7e0 fb13 	bl	8000648 <__aeabi_dmul>
 8020022:	3501      	adds	r5, #1
 8020024:	2301      	movs	r3, #1
 8020026:	1076      	asrs	r6, r6, #1
 8020028:	3708      	adds	r7, #8
 802002a:	e76c      	b.n	801ff06 <_dtoa_r+0x3ce>
 802002c:	2502      	movs	r5, #2
 802002e:	e76f      	b.n	801ff10 <_dtoa_r+0x3d8>
 8020030:	9b01      	ldr	r3, [sp, #4]
 8020032:	f8cd a01c 	str.w	sl, [sp, #28]
 8020036:	930c      	str	r3, [sp, #48]	; 0x30
 8020038:	e78d      	b.n	801ff56 <_dtoa_r+0x41e>
 802003a:	9900      	ldr	r1, [sp, #0]
 802003c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802003e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020040:	4b4e      	ldr	r3, [pc, #312]	; (802017c <_dtoa_r+0x644>)
 8020042:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020046:	4401      	add	r1, r0
 8020048:	9102      	str	r1, [sp, #8]
 802004a:	9908      	ldr	r1, [sp, #32]
 802004c:	eeb0 8a47 	vmov.f32	s16, s14
 8020050:	eef0 8a67 	vmov.f32	s17, s15
 8020054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020058:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802005c:	2900      	cmp	r1, #0
 802005e:	d045      	beq.n	80200ec <_dtoa_r+0x5b4>
 8020060:	494c      	ldr	r1, [pc, #304]	; (8020194 <_dtoa_r+0x65c>)
 8020062:	2000      	movs	r0, #0
 8020064:	f7e0 fc1a 	bl	800089c <__aeabi_ddiv>
 8020068:	ec53 2b18 	vmov	r2, r3, d8
 802006c:	f7e0 f934 	bl	80002d8 <__aeabi_dsub>
 8020070:	9d00      	ldr	r5, [sp, #0]
 8020072:	ec41 0b18 	vmov	d8, r0, r1
 8020076:	4639      	mov	r1, r7
 8020078:	4630      	mov	r0, r6
 802007a:	f7e0 fd95 	bl	8000ba8 <__aeabi_d2iz>
 802007e:	900c      	str	r0, [sp, #48]	; 0x30
 8020080:	f7e0 fa78 	bl	8000574 <__aeabi_i2d>
 8020084:	4602      	mov	r2, r0
 8020086:	460b      	mov	r3, r1
 8020088:	4630      	mov	r0, r6
 802008a:	4639      	mov	r1, r7
 802008c:	f7e0 f924 	bl	80002d8 <__aeabi_dsub>
 8020090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020092:	3330      	adds	r3, #48	; 0x30
 8020094:	f805 3b01 	strb.w	r3, [r5], #1
 8020098:	ec53 2b18 	vmov	r2, r3, d8
 802009c:	4606      	mov	r6, r0
 802009e:	460f      	mov	r7, r1
 80200a0:	f7e0 fd44 	bl	8000b2c <__aeabi_dcmplt>
 80200a4:	2800      	cmp	r0, #0
 80200a6:	d165      	bne.n	8020174 <_dtoa_r+0x63c>
 80200a8:	4632      	mov	r2, r6
 80200aa:	463b      	mov	r3, r7
 80200ac:	4935      	ldr	r1, [pc, #212]	; (8020184 <_dtoa_r+0x64c>)
 80200ae:	2000      	movs	r0, #0
 80200b0:	f7e0 f912 	bl	80002d8 <__aeabi_dsub>
 80200b4:	ec53 2b18 	vmov	r2, r3, d8
 80200b8:	f7e0 fd38 	bl	8000b2c <__aeabi_dcmplt>
 80200bc:	2800      	cmp	r0, #0
 80200be:	f040 80b9 	bne.w	8020234 <_dtoa_r+0x6fc>
 80200c2:	9b02      	ldr	r3, [sp, #8]
 80200c4:	429d      	cmp	r5, r3
 80200c6:	f43f af75 	beq.w	801ffb4 <_dtoa_r+0x47c>
 80200ca:	4b2f      	ldr	r3, [pc, #188]	; (8020188 <_dtoa_r+0x650>)
 80200cc:	ec51 0b18 	vmov	r0, r1, d8
 80200d0:	2200      	movs	r2, #0
 80200d2:	f7e0 fab9 	bl	8000648 <__aeabi_dmul>
 80200d6:	4b2c      	ldr	r3, [pc, #176]	; (8020188 <_dtoa_r+0x650>)
 80200d8:	ec41 0b18 	vmov	d8, r0, r1
 80200dc:	2200      	movs	r2, #0
 80200de:	4630      	mov	r0, r6
 80200e0:	4639      	mov	r1, r7
 80200e2:	f7e0 fab1 	bl	8000648 <__aeabi_dmul>
 80200e6:	4606      	mov	r6, r0
 80200e8:	460f      	mov	r7, r1
 80200ea:	e7c4      	b.n	8020076 <_dtoa_r+0x53e>
 80200ec:	ec51 0b17 	vmov	r0, r1, d7
 80200f0:	f7e0 faaa 	bl	8000648 <__aeabi_dmul>
 80200f4:	9b02      	ldr	r3, [sp, #8]
 80200f6:	9d00      	ldr	r5, [sp, #0]
 80200f8:	930c      	str	r3, [sp, #48]	; 0x30
 80200fa:	ec41 0b18 	vmov	d8, r0, r1
 80200fe:	4639      	mov	r1, r7
 8020100:	4630      	mov	r0, r6
 8020102:	f7e0 fd51 	bl	8000ba8 <__aeabi_d2iz>
 8020106:	9011      	str	r0, [sp, #68]	; 0x44
 8020108:	f7e0 fa34 	bl	8000574 <__aeabi_i2d>
 802010c:	4602      	mov	r2, r0
 802010e:	460b      	mov	r3, r1
 8020110:	4630      	mov	r0, r6
 8020112:	4639      	mov	r1, r7
 8020114:	f7e0 f8e0 	bl	80002d8 <__aeabi_dsub>
 8020118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802011a:	3330      	adds	r3, #48	; 0x30
 802011c:	f805 3b01 	strb.w	r3, [r5], #1
 8020120:	9b02      	ldr	r3, [sp, #8]
 8020122:	429d      	cmp	r5, r3
 8020124:	4606      	mov	r6, r0
 8020126:	460f      	mov	r7, r1
 8020128:	f04f 0200 	mov.w	r2, #0
 802012c:	d134      	bne.n	8020198 <_dtoa_r+0x660>
 802012e:	4b19      	ldr	r3, [pc, #100]	; (8020194 <_dtoa_r+0x65c>)
 8020130:	ec51 0b18 	vmov	r0, r1, d8
 8020134:	f7e0 f8d2 	bl	80002dc <__adddf3>
 8020138:	4602      	mov	r2, r0
 802013a:	460b      	mov	r3, r1
 802013c:	4630      	mov	r0, r6
 802013e:	4639      	mov	r1, r7
 8020140:	f7e0 fd12 	bl	8000b68 <__aeabi_dcmpgt>
 8020144:	2800      	cmp	r0, #0
 8020146:	d175      	bne.n	8020234 <_dtoa_r+0x6fc>
 8020148:	ec53 2b18 	vmov	r2, r3, d8
 802014c:	4911      	ldr	r1, [pc, #68]	; (8020194 <_dtoa_r+0x65c>)
 802014e:	2000      	movs	r0, #0
 8020150:	f7e0 f8c2 	bl	80002d8 <__aeabi_dsub>
 8020154:	4602      	mov	r2, r0
 8020156:	460b      	mov	r3, r1
 8020158:	4630      	mov	r0, r6
 802015a:	4639      	mov	r1, r7
 802015c:	f7e0 fce6 	bl	8000b2c <__aeabi_dcmplt>
 8020160:	2800      	cmp	r0, #0
 8020162:	f43f af27 	beq.w	801ffb4 <_dtoa_r+0x47c>
 8020166:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020168:	1e6b      	subs	r3, r5, #1
 802016a:	930c      	str	r3, [sp, #48]	; 0x30
 802016c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020170:	2b30      	cmp	r3, #48	; 0x30
 8020172:	d0f8      	beq.n	8020166 <_dtoa_r+0x62e>
 8020174:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020178:	e04a      	b.n	8020210 <_dtoa_r+0x6d8>
 802017a:	bf00      	nop
 802017c:	08022ee0 	.word	0x08022ee0
 8020180:	08022eb8 	.word	0x08022eb8
 8020184:	3ff00000 	.word	0x3ff00000
 8020188:	40240000 	.word	0x40240000
 802018c:	401c0000 	.word	0x401c0000
 8020190:	40140000 	.word	0x40140000
 8020194:	3fe00000 	.word	0x3fe00000
 8020198:	4baf      	ldr	r3, [pc, #700]	; (8020458 <_dtoa_r+0x920>)
 802019a:	f7e0 fa55 	bl	8000648 <__aeabi_dmul>
 802019e:	4606      	mov	r6, r0
 80201a0:	460f      	mov	r7, r1
 80201a2:	e7ac      	b.n	80200fe <_dtoa_r+0x5c6>
 80201a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80201a8:	9d00      	ldr	r5, [sp, #0]
 80201aa:	4642      	mov	r2, r8
 80201ac:	464b      	mov	r3, r9
 80201ae:	4630      	mov	r0, r6
 80201b0:	4639      	mov	r1, r7
 80201b2:	f7e0 fb73 	bl	800089c <__aeabi_ddiv>
 80201b6:	f7e0 fcf7 	bl	8000ba8 <__aeabi_d2iz>
 80201ba:	9002      	str	r0, [sp, #8]
 80201bc:	f7e0 f9da 	bl	8000574 <__aeabi_i2d>
 80201c0:	4642      	mov	r2, r8
 80201c2:	464b      	mov	r3, r9
 80201c4:	f7e0 fa40 	bl	8000648 <__aeabi_dmul>
 80201c8:	4602      	mov	r2, r0
 80201ca:	460b      	mov	r3, r1
 80201cc:	4630      	mov	r0, r6
 80201ce:	4639      	mov	r1, r7
 80201d0:	f7e0 f882 	bl	80002d8 <__aeabi_dsub>
 80201d4:	9e02      	ldr	r6, [sp, #8]
 80201d6:	9f01      	ldr	r7, [sp, #4]
 80201d8:	3630      	adds	r6, #48	; 0x30
 80201da:	f805 6b01 	strb.w	r6, [r5], #1
 80201de:	9e00      	ldr	r6, [sp, #0]
 80201e0:	1bae      	subs	r6, r5, r6
 80201e2:	42b7      	cmp	r7, r6
 80201e4:	4602      	mov	r2, r0
 80201e6:	460b      	mov	r3, r1
 80201e8:	d137      	bne.n	802025a <_dtoa_r+0x722>
 80201ea:	f7e0 f877 	bl	80002dc <__adddf3>
 80201ee:	4642      	mov	r2, r8
 80201f0:	464b      	mov	r3, r9
 80201f2:	4606      	mov	r6, r0
 80201f4:	460f      	mov	r7, r1
 80201f6:	f7e0 fcb7 	bl	8000b68 <__aeabi_dcmpgt>
 80201fa:	b9c8      	cbnz	r0, 8020230 <_dtoa_r+0x6f8>
 80201fc:	4642      	mov	r2, r8
 80201fe:	464b      	mov	r3, r9
 8020200:	4630      	mov	r0, r6
 8020202:	4639      	mov	r1, r7
 8020204:	f7e0 fc88 	bl	8000b18 <__aeabi_dcmpeq>
 8020208:	b110      	cbz	r0, 8020210 <_dtoa_r+0x6d8>
 802020a:	9b02      	ldr	r3, [sp, #8]
 802020c:	07d9      	lsls	r1, r3, #31
 802020e:	d40f      	bmi.n	8020230 <_dtoa_r+0x6f8>
 8020210:	4620      	mov	r0, r4
 8020212:	4659      	mov	r1, fp
 8020214:	f000 fe82 	bl	8020f1c <_Bfree>
 8020218:	2300      	movs	r3, #0
 802021a:	702b      	strb	r3, [r5, #0]
 802021c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802021e:	f10a 0001 	add.w	r0, sl, #1
 8020222:	6018      	str	r0, [r3, #0]
 8020224:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020226:	2b00      	cmp	r3, #0
 8020228:	f43f acd8 	beq.w	801fbdc <_dtoa_r+0xa4>
 802022c:	601d      	str	r5, [r3, #0]
 802022e:	e4d5      	b.n	801fbdc <_dtoa_r+0xa4>
 8020230:	f8cd a01c 	str.w	sl, [sp, #28]
 8020234:	462b      	mov	r3, r5
 8020236:	461d      	mov	r5, r3
 8020238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802023c:	2a39      	cmp	r2, #57	; 0x39
 802023e:	d108      	bne.n	8020252 <_dtoa_r+0x71a>
 8020240:	9a00      	ldr	r2, [sp, #0]
 8020242:	429a      	cmp	r2, r3
 8020244:	d1f7      	bne.n	8020236 <_dtoa_r+0x6fe>
 8020246:	9a07      	ldr	r2, [sp, #28]
 8020248:	9900      	ldr	r1, [sp, #0]
 802024a:	3201      	adds	r2, #1
 802024c:	9207      	str	r2, [sp, #28]
 802024e:	2230      	movs	r2, #48	; 0x30
 8020250:	700a      	strb	r2, [r1, #0]
 8020252:	781a      	ldrb	r2, [r3, #0]
 8020254:	3201      	adds	r2, #1
 8020256:	701a      	strb	r2, [r3, #0]
 8020258:	e78c      	b.n	8020174 <_dtoa_r+0x63c>
 802025a:	4b7f      	ldr	r3, [pc, #508]	; (8020458 <_dtoa_r+0x920>)
 802025c:	2200      	movs	r2, #0
 802025e:	f7e0 f9f3 	bl	8000648 <__aeabi_dmul>
 8020262:	2200      	movs	r2, #0
 8020264:	2300      	movs	r3, #0
 8020266:	4606      	mov	r6, r0
 8020268:	460f      	mov	r7, r1
 802026a:	f7e0 fc55 	bl	8000b18 <__aeabi_dcmpeq>
 802026e:	2800      	cmp	r0, #0
 8020270:	d09b      	beq.n	80201aa <_dtoa_r+0x672>
 8020272:	e7cd      	b.n	8020210 <_dtoa_r+0x6d8>
 8020274:	9a08      	ldr	r2, [sp, #32]
 8020276:	2a00      	cmp	r2, #0
 8020278:	f000 80c4 	beq.w	8020404 <_dtoa_r+0x8cc>
 802027c:	9a05      	ldr	r2, [sp, #20]
 802027e:	2a01      	cmp	r2, #1
 8020280:	f300 80a8 	bgt.w	80203d4 <_dtoa_r+0x89c>
 8020284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020286:	2a00      	cmp	r2, #0
 8020288:	f000 80a0 	beq.w	80203cc <_dtoa_r+0x894>
 802028c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020290:	9e06      	ldr	r6, [sp, #24]
 8020292:	4645      	mov	r5, r8
 8020294:	9a04      	ldr	r2, [sp, #16]
 8020296:	2101      	movs	r1, #1
 8020298:	441a      	add	r2, r3
 802029a:	4620      	mov	r0, r4
 802029c:	4498      	add	r8, r3
 802029e:	9204      	str	r2, [sp, #16]
 80202a0:	f000 ff42 	bl	8021128 <__i2b>
 80202a4:	4607      	mov	r7, r0
 80202a6:	2d00      	cmp	r5, #0
 80202a8:	dd0b      	ble.n	80202c2 <_dtoa_r+0x78a>
 80202aa:	9b04      	ldr	r3, [sp, #16]
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	dd08      	ble.n	80202c2 <_dtoa_r+0x78a>
 80202b0:	42ab      	cmp	r3, r5
 80202b2:	9a04      	ldr	r2, [sp, #16]
 80202b4:	bfa8      	it	ge
 80202b6:	462b      	movge	r3, r5
 80202b8:	eba8 0803 	sub.w	r8, r8, r3
 80202bc:	1aed      	subs	r5, r5, r3
 80202be:	1ad3      	subs	r3, r2, r3
 80202c0:	9304      	str	r3, [sp, #16]
 80202c2:	9b06      	ldr	r3, [sp, #24]
 80202c4:	b1fb      	cbz	r3, 8020306 <_dtoa_r+0x7ce>
 80202c6:	9b08      	ldr	r3, [sp, #32]
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	f000 809f 	beq.w	802040c <_dtoa_r+0x8d4>
 80202ce:	2e00      	cmp	r6, #0
 80202d0:	dd11      	ble.n	80202f6 <_dtoa_r+0x7be>
 80202d2:	4639      	mov	r1, r7
 80202d4:	4632      	mov	r2, r6
 80202d6:	4620      	mov	r0, r4
 80202d8:	f000 ffe2 	bl	80212a0 <__pow5mult>
 80202dc:	465a      	mov	r2, fp
 80202de:	4601      	mov	r1, r0
 80202e0:	4607      	mov	r7, r0
 80202e2:	4620      	mov	r0, r4
 80202e4:	f000 ff36 	bl	8021154 <__multiply>
 80202e8:	4659      	mov	r1, fp
 80202ea:	9007      	str	r0, [sp, #28]
 80202ec:	4620      	mov	r0, r4
 80202ee:	f000 fe15 	bl	8020f1c <_Bfree>
 80202f2:	9b07      	ldr	r3, [sp, #28]
 80202f4:	469b      	mov	fp, r3
 80202f6:	9b06      	ldr	r3, [sp, #24]
 80202f8:	1b9a      	subs	r2, r3, r6
 80202fa:	d004      	beq.n	8020306 <_dtoa_r+0x7ce>
 80202fc:	4659      	mov	r1, fp
 80202fe:	4620      	mov	r0, r4
 8020300:	f000 ffce 	bl	80212a0 <__pow5mult>
 8020304:	4683      	mov	fp, r0
 8020306:	2101      	movs	r1, #1
 8020308:	4620      	mov	r0, r4
 802030a:	f000 ff0d 	bl	8021128 <__i2b>
 802030e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020310:	2b00      	cmp	r3, #0
 8020312:	4606      	mov	r6, r0
 8020314:	dd7c      	ble.n	8020410 <_dtoa_r+0x8d8>
 8020316:	461a      	mov	r2, r3
 8020318:	4601      	mov	r1, r0
 802031a:	4620      	mov	r0, r4
 802031c:	f000 ffc0 	bl	80212a0 <__pow5mult>
 8020320:	9b05      	ldr	r3, [sp, #20]
 8020322:	2b01      	cmp	r3, #1
 8020324:	4606      	mov	r6, r0
 8020326:	dd76      	ble.n	8020416 <_dtoa_r+0x8de>
 8020328:	2300      	movs	r3, #0
 802032a:	9306      	str	r3, [sp, #24]
 802032c:	6933      	ldr	r3, [r6, #16]
 802032e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8020332:	6918      	ldr	r0, [r3, #16]
 8020334:	f000 fea8 	bl	8021088 <__hi0bits>
 8020338:	f1c0 0020 	rsb	r0, r0, #32
 802033c:	9b04      	ldr	r3, [sp, #16]
 802033e:	4418      	add	r0, r3
 8020340:	f010 001f 	ands.w	r0, r0, #31
 8020344:	f000 8086 	beq.w	8020454 <_dtoa_r+0x91c>
 8020348:	f1c0 0320 	rsb	r3, r0, #32
 802034c:	2b04      	cmp	r3, #4
 802034e:	dd7f      	ble.n	8020450 <_dtoa_r+0x918>
 8020350:	f1c0 001c 	rsb	r0, r0, #28
 8020354:	9b04      	ldr	r3, [sp, #16]
 8020356:	4403      	add	r3, r0
 8020358:	4480      	add	r8, r0
 802035a:	4405      	add	r5, r0
 802035c:	9304      	str	r3, [sp, #16]
 802035e:	f1b8 0f00 	cmp.w	r8, #0
 8020362:	dd05      	ble.n	8020370 <_dtoa_r+0x838>
 8020364:	4659      	mov	r1, fp
 8020366:	4642      	mov	r2, r8
 8020368:	4620      	mov	r0, r4
 802036a:	f000 fff3 	bl	8021354 <__lshift>
 802036e:	4683      	mov	fp, r0
 8020370:	9b04      	ldr	r3, [sp, #16]
 8020372:	2b00      	cmp	r3, #0
 8020374:	dd05      	ble.n	8020382 <_dtoa_r+0x84a>
 8020376:	4631      	mov	r1, r6
 8020378:	461a      	mov	r2, r3
 802037a:	4620      	mov	r0, r4
 802037c:	f000 ffea 	bl	8021354 <__lshift>
 8020380:	4606      	mov	r6, r0
 8020382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020384:	2b00      	cmp	r3, #0
 8020386:	d069      	beq.n	802045c <_dtoa_r+0x924>
 8020388:	4631      	mov	r1, r6
 802038a:	4658      	mov	r0, fp
 802038c:	f001 f84e 	bl	802142c <__mcmp>
 8020390:	2800      	cmp	r0, #0
 8020392:	da63      	bge.n	802045c <_dtoa_r+0x924>
 8020394:	2300      	movs	r3, #0
 8020396:	4659      	mov	r1, fp
 8020398:	220a      	movs	r2, #10
 802039a:	4620      	mov	r0, r4
 802039c:	f000 fde0 	bl	8020f60 <__multadd>
 80203a0:	9b08      	ldr	r3, [sp, #32]
 80203a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80203a6:	4683      	mov	fp, r0
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	f000 818f 	beq.w	80206cc <_dtoa_r+0xb94>
 80203ae:	4639      	mov	r1, r7
 80203b0:	2300      	movs	r3, #0
 80203b2:	220a      	movs	r2, #10
 80203b4:	4620      	mov	r0, r4
 80203b6:	f000 fdd3 	bl	8020f60 <__multadd>
 80203ba:	f1b9 0f00 	cmp.w	r9, #0
 80203be:	4607      	mov	r7, r0
 80203c0:	f300 808e 	bgt.w	80204e0 <_dtoa_r+0x9a8>
 80203c4:	9b05      	ldr	r3, [sp, #20]
 80203c6:	2b02      	cmp	r3, #2
 80203c8:	dc50      	bgt.n	802046c <_dtoa_r+0x934>
 80203ca:	e089      	b.n	80204e0 <_dtoa_r+0x9a8>
 80203cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80203ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80203d2:	e75d      	b.n	8020290 <_dtoa_r+0x758>
 80203d4:	9b01      	ldr	r3, [sp, #4]
 80203d6:	1e5e      	subs	r6, r3, #1
 80203d8:	9b06      	ldr	r3, [sp, #24]
 80203da:	42b3      	cmp	r3, r6
 80203dc:	bfbf      	itttt	lt
 80203de:	9b06      	ldrlt	r3, [sp, #24]
 80203e0:	9606      	strlt	r6, [sp, #24]
 80203e2:	1af2      	sublt	r2, r6, r3
 80203e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80203e6:	bfb6      	itet	lt
 80203e8:	189b      	addlt	r3, r3, r2
 80203ea:	1b9e      	subge	r6, r3, r6
 80203ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80203ee:	9b01      	ldr	r3, [sp, #4]
 80203f0:	bfb8      	it	lt
 80203f2:	2600      	movlt	r6, #0
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	bfb5      	itete	lt
 80203f8:	eba8 0503 	sublt.w	r5, r8, r3
 80203fc:	9b01      	ldrge	r3, [sp, #4]
 80203fe:	2300      	movlt	r3, #0
 8020400:	4645      	movge	r5, r8
 8020402:	e747      	b.n	8020294 <_dtoa_r+0x75c>
 8020404:	9e06      	ldr	r6, [sp, #24]
 8020406:	9f08      	ldr	r7, [sp, #32]
 8020408:	4645      	mov	r5, r8
 802040a:	e74c      	b.n	80202a6 <_dtoa_r+0x76e>
 802040c:	9a06      	ldr	r2, [sp, #24]
 802040e:	e775      	b.n	80202fc <_dtoa_r+0x7c4>
 8020410:	9b05      	ldr	r3, [sp, #20]
 8020412:	2b01      	cmp	r3, #1
 8020414:	dc18      	bgt.n	8020448 <_dtoa_r+0x910>
 8020416:	9b02      	ldr	r3, [sp, #8]
 8020418:	b9b3      	cbnz	r3, 8020448 <_dtoa_r+0x910>
 802041a:	9b03      	ldr	r3, [sp, #12]
 802041c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020420:	b9a3      	cbnz	r3, 802044c <_dtoa_r+0x914>
 8020422:	9b03      	ldr	r3, [sp, #12]
 8020424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020428:	0d1b      	lsrs	r3, r3, #20
 802042a:	051b      	lsls	r3, r3, #20
 802042c:	b12b      	cbz	r3, 802043a <_dtoa_r+0x902>
 802042e:	9b04      	ldr	r3, [sp, #16]
 8020430:	3301      	adds	r3, #1
 8020432:	9304      	str	r3, [sp, #16]
 8020434:	f108 0801 	add.w	r8, r8, #1
 8020438:	2301      	movs	r3, #1
 802043a:	9306      	str	r3, [sp, #24]
 802043c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802043e:	2b00      	cmp	r3, #0
 8020440:	f47f af74 	bne.w	802032c <_dtoa_r+0x7f4>
 8020444:	2001      	movs	r0, #1
 8020446:	e779      	b.n	802033c <_dtoa_r+0x804>
 8020448:	2300      	movs	r3, #0
 802044a:	e7f6      	b.n	802043a <_dtoa_r+0x902>
 802044c:	9b02      	ldr	r3, [sp, #8]
 802044e:	e7f4      	b.n	802043a <_dtoa_r+0x902>
 8020450:	d085      	beq.n	802035e <_dtoa_r+0x826>
 8020452:	4618      	mov	r0, r3
 8020454:	301c      	adds	r0, #28
 8020456:	e77d      	b.n	8020354 <_dtoa_r+0x81c>
 8020458:	40240000 	.word	0x40240000
 802045c:	9b01      	ldr	r3, [sp, #4]
 802045e:	2b00      	cmp	r3, #0
 8020460:	dc38      	bgt.n	80204d4 <_dtoa_r+0x99c>
 8020462:	9b05      	ldr	r3, [sp, #20]
 8020464:	2b02      	cmp	r3, #2
 8020466:	dd35      	ble.n	80204d4 <_dtoa_r+0x99c>
 8020468:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802046c:	f1b9 0f00 	cmp.w	r9, #0
 8020470:	d10d      	bne.n	802048e <_dtoa_r+0x956>
 8020472:	4631      	mov	r1, r6
 8020474:	464b      	mov	r3, r9
 8020476:	2205      	movs	r2, #5
 8020478:	4620      	mov	r0, r4
 802047a:	f000 fd71 	bl	8020f60 <__multadd>
 802047e:	4601      	mov	r1, r0
 8020480:	4606      	mov	r6, r0
 8020482:	4658      	mov	r0, fp
 8020484:	f000 ffd2 	bl	802142c <__mcmp>
 8020488:	2800      	cmp	r0, #0
 802048a:	f73f adbd 	bgt.w	8020008 <_dtoa_r+0x4d0>
 802048e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020490:	9d00      	ldr	r5, [sp, #0]
 8020492:	ea6f 0a03 	mvn.w	sl, r3
 8020496:	f04f 0800 	mov.w	r8, #0
 802049a:	4631      	mov	r1, r6
 802049c:	4620      	mov	r0, r4
 802049e:	f000 fd3d 	bl	8020f1c <_Bfree>
 80204a2:	2f00      	cmp	r7, #0
 80204a4:	f43f aeb4 	beq.w	8020210 <_dtoa_r+0x6d8>
 80204a8:	f1b8 0f00 	cmp.w	r8, #0
 80204ac:	d005      	beq.n	80204ba <_dtoa_r+0x982>
 80204ae:	45b8      	cmp	r8, r7
 80204b0:	d003      	beq.n	80204ba <_dtoa_r+0x982>
 80204b2:	4641      	mov	r1, r8
 80204b4:	4620      	mov	r0, r4
 80204b6:	f000 fd31 	bl	8020f1c <_Bfree>
 80204ba:	4639      	mov	r1, r7
 80204bc:	4620      	mov	r0, r4
 80204be:	f000 fd2d 	bl	8020f1c <_Bfree>
 80204c2:	e6a5      	b.n	8020210 <_dtoa_r+0x6d8>
 80204c4:	2600      	movs	r6, #0
 80204c6:	4637      	mov	r7, r6
 80204c8:	e7e1      	b.n	802048e <_dtoa_r+0x956>
 80204ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80204cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80204d0:	4637      	mov	r7, r6
 80204d2:	e599      	b.n	8020008 <_dtoa_r+0x4d0>
 80204d4:	9b08      	ldr	r3, [sp, #32]
 80204d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80204da:	2b00      	cmp	r3, #0
 80204dc:	f000 80fd 	beq.w	80206da <_dtoa_r+0xba2>
 80204e0:	2d00      	cmp	r5, #0
 80204e2:	dd05      	ble.n	80204f0 <_dtoa_r+0x9b8>
 80204e4:	4639      	mov	r1, r7
 80204e6:	462a      	mov	r2, r5
 80204e8:	4620      	mov	r0, r4
 80204ea:	f000 ff33 	bl	8021354 <__lshift>
 80204ee:	4607      	mov	r7, r0
 80204f0:	9b06      	ldr	r3, [sp, #24]
 80204f2:	2b00      	cmp	r3, #0
 80204f4:	d05c      	beq.n	80205b0 <_dtoa_r+0xa78>
 80204f6:	6879      	ldr	r1, [r7, #4]
 80204f8:	4620      	mov	r0, r4
 80204fa:	f000 fccf 	bl	8020e9c <_Balloc>
 80204fe:	4605      	mov	r5, r0
 8020500:	b928      	cbnz	r0, 802050e <_dtoa_r+0x9d6>
 8020502:	4b80      	ldr	r3, [pc, #512]	; (8020704 <_dtoa_r+0xbcc>)
 8020504:	4602      	mov	r2, r0
 8020506:	f240 21ea 	movw	r1, #746	; 0x2ea
 802050a:	f7ff bb2e 	b.w	801fb6a <_dtoa_r+0x32>
 802050e:	693a      	ldr	r2, [r7, #16]
 8020510:	3202      	adds	r2, #2
 8020512:	0092      	lsls	r2, r2, #2
 8020514:	f107 010c 	add.w	r1, r7, #12
 8020518:	300c      	adds	r0, #12
 802051a:	f7fd fc93 	bl	801de44 <memcpy>
 802051e:	2201      	movs	r2, #1
 8020520:	4629      	mov	r1, r5
 8020522:	4620      	mov	r0, r4
 8020524:	f000 ff16 	bl	8021354 <__lshift>
 8020528:	9b00      	ldr	r3, [sp, #0]
 802052a:	3301      	adds	r3, #1
 802052c:	9301      	str	r3, [sp, #4]
 802052e:	9b00      	ldr	r3, [sp, #0]
 8020530:	444b      	add	r3, r9
 8020532:	9307      	str	r3, [sp, #28]
 8020534:	9b02      	ldr	r3, [sp, #8]
 8020536:	f003 0301 	and.w	r3, r3, #1
 802053a:	46b8      	mov	r8, r7
 802053c:	9306      	str	r3, [sp, #24]
 802053e:	4607      	mov	r7, r0
 8020540:	9b01      	ldr	r3, [sp, #4]
 8020542:	4631      	mov	r1, r6
 8020544:	3b01      	subs	r3, #1
 8020546:	4658      	mov	r0, fp
 8020548:	9302      	str	r3, [sp, #8]
 802054a:	f7ff fa69 	bl	801fa20 <quorem>
 802054e:	4603      	mov	r3, r0
 8020550:	3330      	adds	r3, #48	; 0x30
 8020552:	9004      	str	r0, [sp, #16]
 8020554:	4641      	mov	r1, r8
 8020556:	4658      	mov	r0, fp
 8020558:	9308      	str	r3, [sp, #32]
 802055a:	f000 ff67 	bl	802142c <__mcmp>
 802055e:	463a      	mov	r2, r7
 8020560:	4681      	mov	r9, r0
 8020562:	4631      	mov	r1, r6
 8020564:	4620      	mov	r0, r4
 8020566:	f000 ff7d 	bl	8021464 <__mdiff>
 802056a:	68c2      	ldr	r2, [r0, #12]
 802056c:	9b08      	ldr	r3, [sp, #32]
 802056e:	4605      	mov	r5, r0
 8020570:	bb02      	cbnz	r2, 80205b4 <_dtoa_r+0xa7c>
 8020572:	4601      	mov	r1, r0
 8020574:	4658      	mov	r0, fp
 8020576:	f000 ff59 	bl	802142c <__mcmp>
 802057a:	9b08      	ldr	r3, [sp, #32]
 802057c:	4602      	mov	r2, r0
 802057e:	4629      	mov	r1, r5
 8020580:	4620      	mov	r0, r4
 8020582:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8020586:	f000 fcc9 	bl	8020f1c <_Bfree>
 802058a:	9b05      	ldr	r3, [sp, #20]
 802058c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802058e:	9d01      	ldr	r5, [sp, #4]
 8020590:	ea43 0102 	orr.w	r1, r3, r2
 8020594:	9b06      	ldr	r3, [sp, #24]
 8020596:	430b      	orrs	r3, r1
 8020598:	9b08      	ldr	r3, [sp, #32]
 802059a:	d10d      	bne.n	80205b8 <_dtoa_r+0xa80>
 802059c:	2b39      	cmp	r3, #57	; 0x39
 802059e:	d029      	beq.n	80205f4 <_dtoa_r+0xabc>
 80205a0:	f1b9 0f00 	cmp.w	r9, #0
 80205a4:	dd01      	ble.n	80205aa <_dtoa_r+0xa72>
 80205a6:	9b04      	ldr	r3, [sp, #16]
 80205a8:	3331      	adds	r3, #49	; 0x31
 80205aa:	9a02      	ldr	r2, [sp, #8]
 80205ac:	7013      	strb	r3, [r2, #0]
 80205ae:	e774      	b.n	802049a <_dtoa_r+0x962>
 80205b0:	4638      	mov	r0, r7
 80205b2:	e7b9      	b.n	8020528 <_dtoa_r+0x9f0>
 80205b4:	2201      	movs	r2, #1
 80205b6:	e7e2      	b.n	802057e <_dtoa_r+0xa46>
 80205b8:	f1b9 0f00 	cmp.w	r9, #0
 80205bc:	db06      	blt.n	80205cc <_dtoa_r+0xa94>
 80205be:	9905      	ldr	r1, [sp, #20]
 80205c0:	ea41 0909 	orr.w	r9, r1, r9
 80205c4:	9906      	ldr	r1, [sp, #24]
 80205c6:	ea59 0101 	orrs.w	r1, r9, r1
 80205ca:	d120      	bne.n	802060e <_dtoa_r+0xad6>
 80205cc:	2a00      	cmp	r2, #0
 80205ce:	ddec      	ble.n	80205aa <_dtoa_r+0xa72>
 80205d0:	4659      	mov	r1, fp
 80205d2:	2201      	movs	r2, #1
 80205d4:	4620      	mov	r0, r4
 80205d6:	9301      	str	r3, [sp, #4]
 80205d8:	f000 febc 	bl	8021354 <__lshift>
 80205dc:	4631      	mov	r1, r6
 80205de:	4683      	mov	fp, r0
 80205e0:	f000 ff24 	bl	802142c <__mcmp>
 80205e4:	2800      	cmp	r0, #0
 80205e6:	9b01      	ldr	r3, [sp, #4]
 80205e8:	dc02      	bgt.n	80205f0 <_dtoa_r+0xab8>
 80205ea:	d1de      	bne.n	80205aa <_dtoa_r+0xa72>
 80205ec:	07da      	lsls	r2, r3, #31
 80205ee:	d5dc      	bpl.n	80205aa <_dtoa_r+0xa72>
 80205f0:	2b39      	cmp	r3, #57	; 0x39
 80205f2:	d1d8      	bne.n	80205a6 <_dtoa_r+0xa6e>
 80205f4:	9a02      	ldr	r2, [sp, #8]
 80205f6:	2339      	movs	r3, #57	; 0x39
 80205f8:	7013      	strb	r3, [r2, #0]
 80205fa:	462b      	mov	r3, r5
 80205fc:	461d      	mov	r5, r3
 80205fe:	3b01      	subs	r3, #1
 8020600:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8020604:	2a39      	cmp	r2, #57	; 0x39
 8020606:	d050      	beq.n	80206aa <_dtoa_r+0xb72>
 8020608:	3201      	adds	r2, #1
 802060a:	701a      	strb	r2, [r3, #0]
 802060c:	e745      	b.n	802049a <_dtoa_r+0x962>
 802060e:	2a00      	cmp	r2, #0
 8020610:	dd03      	ble.n	802061a <_dtoa_r+0xae2>
 8020612:	2b39      	cmp	r3, #57	; 0x39
 8020614:	d0ee      	beq.n	80205f4 <_dtoa_r+0xabc>
 8020616:	3301      	adds	r3, #1
 8020618:	e7c7      	b.n	80205aa <_dtoa_r+0xa72>
 802061a:	9a01      	ldr	r2, [sp, #4]
 802061c:	9907      	ldr	r1, [sp, #28]
 802061e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020622:	428a      	cmp	r2, r1
 8020624:	d02a      	beq.n	802067c <_dtoa_r+0xb44>
 8020626:	4659      	mov	r1, fp
 8020628:	2300      	movs	r3, #0
 802062a:	220a      	movs	r2, #10
 802062c:	4620      	mov	r0, r4
 802062e:	f000 fc97 	bl	8020f60 <__multadd>
 8020632:	45b8      	cmp	r8, r7
 8020634:	4683      	mov	fp, r0
 8020636:	f04f 0300 	mov.w	r3, #0
 802063a:	f04f 020a 	mov.w	r2, #10
 802063e:	4641      	mov	r1, r8
 8020640:	4620      	mov	r0, r4
 8020642:	d107      	bne.n	8020654 <_dtoa_r+0xb1c>
 8020644:	f000 fc8c 	bl	8020f60 <__multadd>
 8020648:	4680      	mov	r8, r0
 802064a:	4607      	mov	r7, r0
 802064c:	9b01      	ldr	r3, [sp, #4]
 802064e:	3301      	adds	r3, #1
 8020650:	9301      	str	r3, [sp, #4]
 8020652:	e775      	b.n	8020540 <_dtoa_r+0xa08>
 8020654:	f000 fc84 	bl	8020f60 <__multadd>
 8020658:	4639      	mov	r1, r7
 802065a:	4680      	mov	r8, r0
 802065c:	2300      	movs	r3, #0
 802065e:	220a      	movs	r2, #10
 8020660:	4620      	mov	r0, r4
 8020662:	f000 fc7d 	bl	8020f60 <__multadd>
 8020666:	4607      	mov	r7, r0
 8020668:	e7f0      	b.n	802064c <_dtoa_r+0xb14>
 802066a:	f1b9 0f00 	cmp.w	r9, #0
 802066e:	9a00      	ldr	r2, [sp, #0]
 8020670:	bfcc      	ite	gt
 8020672:	464d      	movgt	r5, r9
 8020674:	2501      	movle	r5, #1
 8020676:	4415      	add	r5, r2
 8020678:	f04f 0800 	mov.w	r8, #0
 802067c:	4659      	mov	r1, fp
 802067e:	2201      	movs	r2, #1
 8020680:	4620      	mov	r0, r4
 8020682:	9301      	str	r3, [sp, #4]
 8020684:	f000 fe66 	bl	8021354 <__lshift>
 8020688:	4631      	mov	r1, r6
 802068a:	4683      	mov	fp, r0
 802068c:	f000 fece 	bl	802142c <__mcmp>
 8020690:	2800      	cmp	r0, #0
 8020692:	dcb2      	bgt.n	80205fa <_dtoa_r+0xac2>
 8020694:	d102      	bne.n	802069c <_dtoa_r+0xb64>
 8020696:	9b01      	ldr	r3, [sp, #4]
 8020698:	07db      	lsls	r3, r3, #31
 802069a:	d4ae      	bmi.n	80205fa <_dtoa_r+0xac2>
 802069c:	462b      	mov	r3, r5
 802069e:	461d      	mov	r5, r3
 80206a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80206a4:	2a30      	cmp	r2, #48	; 0x30
 80206a6:	d0fa      	beq.n	802069e <_dtoa_r+0xb66>
 80206a8:	e6f7      	b.n	802049a <_dtoa_r+0x962>
 80206aa:	9a00      	ldr	r2, [sp, #0]
 80206ac:	429a      	cmp	r2, r3
 80206ae:	d1a5      	bne.n	80205fc <_dtoa_r+0xac4>
 80206b0:	f10a 0a01 	add.w	sl, sl, #1
 80206b4:	2331      	movs	r3, #49	; 0x31
 80206b6:	e779      	b.n	80205ac <_dtoa_r+0xa74>
 80206b8:	4b13      	ldr	r3, [pc, #76]	; (8020708 <_dtoa_r+0xbd0>)
 80206ba:	f7ff baaf 	b.w	801fc1c <_dtoa_r+0xe4>
 80206be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	f47f aa86 	bne.w	801fbd2 <_dtoa_r+0x9a>
 80206c6:	4b11      	ldr	r3, [pc, #68]	; (802070c <_dtoa_r+0xbd4>)
 80206c8:	f7ff baa8 	b.w	801fc1c <_dtoa_r+0xe4>
 80206cc:	f1b9 0f00 	cmp.w	r9, #0
 80206d0:	dc03      	bgt.n	80206da <_dtoa_r+0xba2>
 80206d2:	9b05      	ldr	r3, [sp, #20]
 80206d4:	2b02      	cmp	r3, #2
 80206d6:	f73f aec9 	bgt.w	802046c <_dtoa_r+0x934>
 80206da:	9d00      	ldr	r5, [sp, #0]
 80206dc:	4631      	mov	r1, r6
 80206de:	4658      	mov	r0, fp
 80206e0:	f7ff f99e 	bl	801fa20 <quorem>
 80206e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80206e8:	f805 3b01 	strb.w	r3, [r5], #1
 80206ec:	9a00      	ldr	r2, [sp, #0]
 80206ee:	1aaa      	subs	r2, r5, r2
 80206f0:	4591      	cmp	r9, r2
 80206f2:	ddba      	ble.n	802066a <_dtoa_r+0xb32>
 80206f4:	4659      	mov	r1, fp
 80206f6:	2300      	movs	r3, #0
 80206f8:	220a      	movs	r2, #10
 80206fa:	4620      	mov	r0, r4
 80206fc:	f000 fc30 	bl	8020f60 <__multadd>
 8020700:	4683      	mov	fp, r0
 8020702:	e7eb      	b.n	80206dc <_dtoa_r+0xba4>
 8020704:	08022dc8 	.word	0x08022dc8
 8020708:	08022cac 	.word	0x08022cac
 802070c:	08022d45 	.word	0x08022d45

08020710 <_fstat_r>:
 8020710:	b538      	push	{r3, r4, r5, lr}
 8020712:	4d07      	ldr	r5, [pc, #28]	; (8020730 <_fstat_r+0x20>)
 8020714:	2300      	movs	r3, #0
 8020716:	4604      	mov	r4, r0
 8020718:	4608      	mov	r0, r1
 802071a:	4611      	mov	r1, r2
 802071c:	602b      	str	r3, [r5, #0]
 802071e:	f7fd f8db 	bl	801d8d8 <_fstat>
 8020722:	1c43      	adds	r3, r0, #1
 8020724:	d102      	bne.n	802072c <_fstat_r+0x1c>
 8020726:	682b      	ldr	r3, [r5, #0]
 8020728:	b103      	cbz	r3, 802072c <_fstat_r+0x1c>
 802072a:	6023      	str	r3, [r4, #0]
 802072c:	bd38      	pop	{r3, r4, r5, pc}
 802072e:	bf00      	nop
 8020730:	20019244 	.word	0x20019244

08020734 <rshift>:
 8020734:	6903      	ldr	r3, [r0, #16]
 8020736:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802073a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802073e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8020742:	f100 0414 	add.w	r4, r0, #20
 8020746:	dd45      	ble.n	80207d4 <rshift+0xa0>
 8020748:	f011 011f 	ands.w	r1, r1, #31
 802074c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020750:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020754:	d10c      	bne.n	8020770 <rshift+0x3c>
 8020756:	f100 0710 	add.w	r7, r0, #16
 802075a:	4629      	mov	r1, r5
 802075c:	42b1      	cmp	r1, r6
 802075e:	d334      	bcc.n	80207ca <rshift+0x96>
 8020760:	1a9b      	subs	r3, r3, r2
 8020762:	009b      	lsls	r3, r3, #2
 8020764:	1eea      	subs	r2, r5, #3
 8020766:	4296      	cmp	r6, r2
 8020768:	bf38      	it	cc
 802076a:	2300      	movcc	r3, #0
 802076c:	4423      	add	r3, r4
 802076e:	e015      	b.n	802079c <rshift+0x68>
 8020770:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8020774:	f1c1 0820 	rsb	r8, r1, #32
 8020778:	40cf      	lsrs	r7, r1
 802077a:	f105 0e04 	add.w	lr, r5, #4
 802077e:	46a1      	mov	r9, r4
 8020780:	4576      	cmp	r6, lr
 8020782:	46f4      	mov	ip, lr
 8020784:	d815      	bhi.n	80207b2 <rshift+0x7e>
 8020786:	1a9b      	subs	r3, r3, r2
 8020788:	009a      	lsls	r2, r3, #2
 802078a:	3a04      	subs	r2, #4
 802078c:	3501      	adds	r5, #1
 802078e:	42ae      	cmp	r6, r5
 8020790:	bf38      	it	cc
 8020792:	2200      	movcc	r2, #0
 8020794:	18a3      	adds	r3, r4, r2
 8020796:	50a7      	str	r7, [r4, r2]
 8020798:	b107      	cbz	r7, 802079c <rshift+0x68>
 802079a:	3304      	adds	r3, #4
 802079c:	1b1a      	subs	r2, r3, r4
 802079e:	42a3      	cmp	r3, r4
 80207a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80207a4:	bf08      	it	eq
 80207a6:	2300      	moveq	r3, #0
 80207a8:	6102      	str	r2, [r0, #16]
 80207aa:	bf08      	it	eq
 80207ac:	6143      	streq	r3, [r0, #20]
 80207ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80207b2:	f8dc c000 	ldr.w	ip, [ip]
 80207b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80207ba:	ea4c 0707 	orr.w	r7, ip, r7
 80207be:	f849 7b04 	str.w	r7, [r9], #4
 80207c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80207c6:	40cf      	lsrs	r7, r1
 80207c8:	e7da      	b.n	8020780 <rshift+0x4c>
 80207ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80207ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80207d2:	e7c3      	b.n	802075c <rshift+0x28>
 80207d4:	4623      	mov	r3, r4
 80207d6:	e7e1      	b.n	802079c <rshift+0x68>

080207d8 <__hexdig_fun>:
 80207d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80207dc:	2b09      	cmp	r3, #9
 80207de:	d802      	bhi.n	80207e6 <__hexdig_fun+0xe>
 80207e0:	3820      	subs	r0, #32
 80207e2:	b2c0      	uxtb	r0, r0
 80207e4:	4770      	bx	lr
 80207e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80207ea:	2b05      	cmp	r3, #5
 80207ec:	d801      	bhi.n	80207f2 <__hexdig_fun+0x1a>
 80207ee:	3847      	subs	r0, #71	; 0x47
 80207f0:	e7f7      	b.n	80207e2 <__hexdig_fun+0xa>
 80207f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80207f6:	2b05      	cmp	r3, #5
 80207f8:	d801      	bhi.n	80207fe <__hexdig_fun+0x26>
 80207fa:	3827      	subs	r0, #39	; 0x27
 80207fc:	e7f1      	b.n	80207e2 <__hexdig_fun+0xa>
 80207fe:	2000      	movs	r0, #0
 8020800:	4770      	bx	lr
	...

08020804 <__gethex>:
 8020804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020808:	ed2d 8b02 	vpush	{d8}
 802080c:	b089      	sub	sp, #36	; 0x24
 802080e:	ee08 0a10 	vmov	s16, r0
 8020812:	9304      	str	r3, [sp, #16]
 8020814:	4bbc      	ldr	r3, [pc, #752]	; (8020b08 <__gethex+0x304>)
 8020816:	681b      	ldr	r3, [r3, #0]
 8020818:	9301      	str	r3, [sp, #4]
 802081a:	4618      	mov	r0, r3
 802081c:	468b      	mov	fp, r1
 802081e:	4690      	mov	r8, r2
 8020820:	f7df fcf8 	bl	8000214 <strlen>
 8020824:	9b01      	ldr	r3, [sp, #4]
 8020826:	f8db 2000 	ldr.w	r2, [fp]
 802082a:	4403      	add	r3, r0
 802082c:	4682      	mov	sl, r0
 802082e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8020832:	9305      	str	r3, [sp, #20]
 8020834:	1c93      	adds	r3, r2, #2
 8020836:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802083a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802083e:	32fe      	adds	r2, #254	; 0xfe
 8020840:	18d1      	adds	r1, r2, r3
 8020842:	461f      	mov	r7, r3
 8020844:	f813 0b01 	ldrb.w	r0, [r3], #1
 8020848:	9100      	str	r1, [sp, #0]
 802084a:	2830      	cmp	r0, #48	; 0x30
 802084c:	d0f8      	beq.n	8020840 <__gethex+0x3c>
 802084e:	f7ff ffc3 	bl	80207d8 <__hexdig_fun>
 8020852:	4604      	mov	r4, r0
 8020854:	2800      	cmp	r0, #0
 8020856:	d13a      	bne.n	80208ce <__gethex+0xca>
 8020858:	9901      	ldr	r1, [sp, #4]
 802085a:	4652      	mov	r2, sl
 802085c:	4638      	mov	r0, r7
 802085e:	f7fe f8d4 	bl	801ea0a <strncmp>
 8020862:	4605      	mov	r5, r0
 8020864:	2800      	cmp	r0, #0
 8020866:	d168      	bne.n	802093a <__gethex+0x136>
 8020868:	f817 000a 	ldrb.w	r0, [r7, sl]
 802086c:	eb07 060a 	add.w	r6, r7, sl
 8020870:	f7ff ffb2 	bl	80207d8 <__hexdig_fun>
 8020874:	2800      	cmp	r0, #0
 8020876:	d062      	beq.n	802093e <__gethex+0x13a>
 8020878:	4633      	mov	r3, r6
 802087a:	7818      	ldrb	r0, [r3, #0]
 802087c:	2830      	cmp	r0, #48	; 0x30
 802087e:	461f      	mov	r7, r3
 8020880:	f103 0301 	add.w	r3, r3, #1
 8020884:	d0f9      	beq.n	802087a <__gethex+0x76>
 8020886:	f7ff ffa7 	bl	80207d8 <__hexdig_fun>
 802088a:	2301      	movs	r3, #1
 802088c:	fab0 f480 	clz	r4, r0
 8020890:	0964      	lsrs	r4, r4, #5
 8020892:	4635      	mov	r5, r6
 8020894:	9300      	str	r3, [sp, #0]
 8020896:	463a      	mov	r2, r7
 8020898:	4616      	mov	r6, r2
 802089a:	3201      	adds	r2, #1
 802089c:	7830      	ldrb	r0, [r6, #0]
 802089e:	f7ff ff9b 	bl	80207d8 <__hexdig_fun>
 80208a2:	2800      	cmp	r0, #0
 80208a4:	d1f8      	bne.n	8020898 <__gethex+0x94>
 80208a6:	9901      	ldr	r1, [sp, #4]
 80208a8:	4652      	mov	r2, sl
 80208aa:	4630      	mov	r0, r6
 80208ac:	f7fe f8ad 	bl	801ea0a <strncmp>
 80208b0:	b980      	cbnz	r0, 80208d4 <__gethex+0xd0>
 80208b2:	b94d      	cbnz	r5, 80208c8 <__gethex+0xc4>
 80208b4:	eb06 050a 	add.w	r5, r6, sl
 80208b8:	462a      	mov	r2, r5
 80208ba:	4616      	mov	r6, r2
 80208bc:	3201      	adds	r2, #1
 80208be:	7830      	ldrb	r0, [r6, #0]
 80208c0:	f7ff ff8a 	bl	80207d8 <__hexdig_fun>
 80208c4:	2800      	cmp	r0, #0
 80208c6:	d1f8      	bne.n	80208ba <__gethex+0xb6>
 80208c8:	1bad      	subs	r5, r5, r6
 80208ca:	00ad      	lsls	r5, r5, #2
 80208cc:	e004      	b.n	80208d8 <__gethex+0xd4>
 80208ce:	2400      	movs	r4, #0
 80208d0:	4625      	mov	r5, r4
 80208d2:	e7e0      	b.n	8020896 <__gethex+0x92>
 80208d4:	2d00      	cmp	r5, #0
 80208d6:	d1f7      	bne.n	80208c8 <__gethex+0xc4>
 80208d8:	7833      	ldrb	r3, [r6, #0]
 80208da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80208de:	2b50      	cmp	r3, #80	; 0x50
 80208e0:	d13b      	bne.n	802095a <__gethex+0x156>
 80208e2:	7873      	ldrb	r3, [r6, #1]
 80208e4:	2b2b      	cmp	r3, #43	; 0x2b
 80208e6:	d02c      	beq.n	8020942 <__gethex+0x13e>
 80208e8:	2b2d      	cmp	r3, #45	; 0x2d
 80208ea:	d02e      	beq.n	802094a <__gethex+0x146>
 80208ec:	1c71      	adds	r1, r6, #1
 80208ee:	f04f 0900 	mov.w	r9, #0
 80208f2:	7808      	ldrb	r0, [r1, #0]
 80208f4:	f7ff ff70 	bl	80207d8 <__hexdig_fun>
 80208f8:	1e43      	subs	r3, r0, #1
 80208fa:	b2db      	uxtb	r3, r3
 80208fc:	2b18      	cmp	r3, #24
 80208fe:	d82c      	bhi.n	802095a <__gethex+0x156>
 8020900:	f1a0 0210 	sub.w	r2, r0, #16
 8020904:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020908:	f7ff ff66 	bl	80207d8 <__hexdig_fun>
 802090c:	1e43      	subs	r3, r0, #1
 802090e:	b2db      	uxtb	r3, r3
 8020910:	2b18      	cmp	r3, #24
 8020912:	d91d      	bls.n	8020950 <__gethex+0x14c>
 8020914:	f1b9 0f00 	cmp.w	r9, #0
 8020918:	d000      	beq.n	802091c <__gethex+0x118>
 802091a:	4252      	negs	r2, r2
 802091c:	4415      	add	r5, r2
 802091e:	f8cb 1000 	str.w	r1, [fp]
 8020922:	b1e4      	cbz	r4, 802095e <__gethex+0x15a>
 8020924:	9b00      	ldr	r3, [sp, #0]
 8020926:	2b00      	cmp	r3, #0
 8020928:	bf14      	ite	ne
 802092a:	2700      	movne	r7, #0
 802092c:	2706      	moveq	r7, #6
 802092e:	4638      	mov	r0, r7
 8020930:	b009      	add	sp, #36	; 0x24
 8020932:	ecbd 8b02 	vpop	{d8}
 8020936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802093a:	463e      	mov	r6, r7
 802093c:	4625      	mov	r5, r4
 802093e:	2401      	movs	r4, #1
 8020940:	e7ca      	b.n	80208d8 <__gethex+0xd4>
 8020942:	f04f 0900 	mov.w	r9, #0
 8020946:	1cb1      	adds	r1, r6, #2
 8020948:	e7d3      	b.n	80208f2 <__gethex+0xee>
 802094a:	f04f 0901 	mov.w	r9, #1
 802094e:	e7fa      	b.n	8020946 <__gethex+0x142>
 8020950:	230a      	movs	r3, #10
 8020952:	fb03 0202 	mla	r2, r3, r2, r0
 8020956:	3a10      	subs	r2, #16
 8020958:	e7d4      	b.n	8020904 <__gethex+0x100>
 802095a:	4631      	mov	r1, r6
 802095c:	e7df      	b.n	802091e <__gethex+0x11a>
 802095e:	1bf3      	subs	r3, r6, r7
 8020960:	3b01      	subs	r3, #1
 8020962:	4621      	mov	r1, r4
 8020964:	2b07      	cmp	r3, #7
 8020966:	dc0b      	bgt.n	8020980 <__gethex+0x17c>
 8020968:	ee18 0a10 	vmov	r0, s16
 802096c:	f000 fa96 	bl	8020e9c <_Balloc>
 8020970:	4604      	mov	r4, r0
 8020972:	b940      	cbnz	r0, 8020986 <__gethex+0x182>
 8020974:	4b65      	ldr	r3, [pc, #404]	; (8020b0c <__gethex+0x308>)
 8020976:	4602      	mov	r2, r0
 8020978:	21de      	movs	r1, #222	; 0xde
 802097a:	4865      	ldr	r0, [pc, #404]	; (8020b10 <__gethex+0x30c>)
 802097c:	f001 f8ce 	bl	8021b1c <__assert_func>
 8020980:	3101      	adds	r1, #1
 8020982:	105b      	asrs	r3, r3, #1
 8020984:	e7ee      	b.n	8020964 <__gethex+0x160>
 8020986:	f100 0914 	add.w	r9, r0, #20
 802098a:	f04f 0b00 	mov.w	fp, #0
 802098e:	f1ca 0301 	rsb	r3, sl, #1
 8020992:	f8cd 9008 	str.w	r9, [sp, #8]
 8020996:	f8cd b000 	str.w	fp, [sp]
 802099a:	9306      	str	r3, [sp, #24]
 802099c:	42b7      	cmp	r7, r6
 802099e:	d340      	bcc.n	8020a22 <__gethex+0x21e>
 80209a0:	9802      	ldr	r0, [sp, #8]
 80209a2:	9b00      	ldr	r3, [sp, #0]
 80209a4:	f840 3b04 	str.w	r3, [r0], #4
 80209a8:	eba0 0009 	sub.w	r0, r0, r9
 80209ac:	1080      	asrs	r0, r0, #2
 80209ae:	0146      	lsls	r6, r0, #5
 80209b0:	6120      	str	r0, [r4, #16]
 80209b2:	4618      	mov	r0, r3
 80209b4:	f000 fb68 	bl	8021088 <__hi0bits>
 80209b8:	1a30      	subs	r0, r6, r0
 80209ba:	f8d8 6000 	ldr.w	r6, [r8]
 80209be:	42b0      	cmp	r0, r6
 80209c0:	dd63      	ble.n	8020a8a <__gethex+0x286>
 80209c2:	1b87      	subs	r7, r0, r6
 80209c4:	4639      	mov	r1, r7
 80209c6:	4620      	mov	r0, r4
 80209c8:	f000 ff02 	bl	80217d0 <__any_on>
 80209cc:	4682      	mov	sl, r0
 80209ce:	b1a8      	cbz	r0, 80209fc <__gethex+0x1f8>
 80209d0:	1e7b      	subs	r3, r7, #1
 80209d2:	1159      	asrs	r1, r3, #5
 80209d4:	f003 021f 	and.w	r2, r3, #31
 80209d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80209dc:	f04f 0a01 	mov.w	sl, #1
 80209e0:	fa0a f202 	lsl.w	r2, sl, r2
 80209e4:	420a      	tst	r2, r1
 80209e6:	d009      	beq.n	80209fc <__gethex+0x1f8>
 80209e8:	4553      	cmp	r3, sl
 80209ea:	dd05      	ble.n	80209f8 <__gethex+0x1f4>
 80209ec:	1eb9      	subs	r1, r7, #2
 80209ee:	4620      	mov	r0, r4
 80209f0:	f000 feee 	bl	80217d0 <__any_on>
 80209f4:	2800      	cmp	r0, #0
 80209f6:	d145      	bne.n	8020a84 <__gethex+0x280>
 80209f8:	f04f 0a02 	mov.w	sl, #2
 80209fc:	4639      	mov	r1, r7
 80209fe:	4620      	mov	r0, r4
 8020a00:	f7ff fe98 	bl	8020734 <rshift>
 8020a04:	443d      	add	r5, r7
 8020a06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020a0a:	42ab      	cmp	r3, r5
 8020a0c:	da4c      	bge.n	8020aa8 <__gethex+0x2a4>
 8020a0e:	ee18 0a10 	vmov	r0, s16
 8020a12:	4621      	mov	r1, r4
 8020a14:	f000 fa82 	bl	8020f1c <_Bfree>
 8020a18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020a1a:	2300      	movs	r3, #0
 8020a1c:	6013      	str	r3, [r2, #0]
 8020a1e:	27a3      	movs	r7, #163	; 0xa3
 8020a20:	e785      	b.n	802092e <__gethex+0x12a>
 8020a22:	1e73      	subs	r3, r6, #1
 8020a24:	9a05      	ldr	r2, [sp, #20]
 8020a26:	9303      	str	r3, [sp, #12]
 8020a28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8020a2c:	4293      	cmp	r3, r2
 8020a2e:	d019      	beq.n	8020a64 <__gethex+0x260>
 8020a30:	f1bb 0f20 	cmp.w	fp, #32
 8020a34:	d107      	bne.n	8020a46 <__gethex+0x242>
 8020a36:	9b02      	ldr	r3, [sp, #8]
 8020a38:	9a00      	ldr	r2, [sp, #0]
 8020a3a:	f843 2b04 	str.w	r2, [r3], #4
 8020a3e:	9302      	str	r3, [sp, #8]
 8020a40:	2300      	movs	r3, #0
 8020a42:	9300      	str	r3, [sp, #0]
 8020a44:	469b      	mov	fp, r3
 8020a46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8020a4a:	f7ff fec5 	bl	80207d8 <__hexdig_fun>
 8020a4e:	9b00      	ldr	r3, [sp, #0]
 8020a50:	f000 000f 	and.w	r0, r0, #15
 8020a54:	fa00 f00b 	lsl.w	r0, r0, fp
 8020a58:	4303      	orrs	r3, r0
 8020a5a:	9300      	str	r3, [sp, #0]
 8020a5c:	f10b 0b04 	add.w	fp, fp, #4
 8020a60:	9b03      	ldr	r3, [sp, #12]
 8020a62:	e00d      	b.n	8020a80 <__gethex+0x27c>
 8020a64:	9b03      	ldr	r3, [sp, #12]
 8020a66:	9a06      	ldr	r2, [sp, #24]
 8020a68:	4413      	add	r3, r2
 8020a6a:	42bb      	cmp	r3, r7
 8020a6c:	d3e0      	bcc.n	8020a30 <__gethex+0x22c>
 8020a6e:	4618      	mov	r0, r3
 8020a70:	9901      	ldr	r1, [sp, #4]
 8020a72:	9307      	str	r3, [sp, #28]
 8020a74:	4652      	mov	r2, sl
 8020a76:	f7fd ffc8 	bl	801ea0a <strncmp>
 8020a7a:	9b07      	ldr	r3, [sp, #28]
 8020a7c:	2800      	cmp	r0, #0
 8020a7e:	d1d7      	bne.n	8020a30 <__gethex+0x22c>
 8020a80:	461e      	mov	r6, r3
 8020a82:	e78b      	b.n	802099c <__gethex+0x198>
 8020a84:	f04f 0a03 	mov.w	sl, #3
 8020a88:	e7b8      	b.n	80209fc <__gethex+0x1f8>
 8020a8a:	da0a      	bge.n	8020aa2 <__gethex+0x29e>
 8020a8c:	1a37      	subs	r7, r6, r0
 8020a8e:	4621      	mov	r1, r4
 8020a90:	ee18 0a10 	vmov	r0, s16
 8020a94:	463a      	mov	r2, r7
 8020a96:	f000 fc5d 	bl	8021354 <__lshift>
 8020a9a:	1bed      	subs	r5, r5, r7
 8020a9c:	4604      	mov	r4, r0
 8020a9e:	f100 0914 	add.w	r9, r0, #20
 8020aa2:	f04f 0a00 	mov.w	sl, #0
 8020aa6:	e7ae      	b.n	8020a06 <__gethex+0x202>
 8020aa8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8020aac:	42a8      	cmp	r0, r5
 8020aae:	dd72      	ble.n	8020b96 <__gethex+0x392>
 8020ab0:	1b45      	subs	r5, r0, r5
 8020ab2:	42ae      	cmp	r6, r5
 8020ab4:	dc36      	bgt.n	8020b24 <__gethex+0x320>
 8020ab6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020aba:	2b02      	cmp	r3, #2
 8020abc:	d02a      	beq.n	8020b14 <__gethex+0x310>
 8020abe:	2b03      	cmp	r3, #3
 8020ac0:	d02c      	beq.n	8020b1c <__gethex+0x318>
 8020ac2:	2b01      	cmp	r3, #1
 8020ac4:	d115      	bne.n	8020af2 <__gethex+0x2ee>
 8020ac6:	42ae      	cmp	r6, r5
 8020ac8:	d113      	bne.n	8020af2 <__gethex+0x2ee>
 8020aca:	2e01      	cmp	r6, #1
 8020acc:	d10b      	bne.n	8020ae6 <__gethex+0x2e2>
 8020ace:	9a04      	ldr	r2, [sp, #16]
 8020ad0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8020ad4:	6013      	str	r3, [r2, #0]
 8020ad6:	2301      	movs	r3, #1
 8020ad8:	6123      	str	r3, [r4, #16]
 8020ada:	f8c9 3000 	str.w	r3, [r9]
 8020ade:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020ae0:	2762      	movs	r7, #98	; 0x62
 8020ae2:	601c      	str	r4, [r3, #0]
 8020ae4:	e723      	b.n	802092e <__gethex+0x12a>
 8020ae6:	1e71      	subs	r1, r6, #1
 8020ae8:	4620      	mov	r0, r4
 8020aea:	f000 fe71 	bl	80217d0 <__any_on>
 8020aee:	2800      	cmp	r0, #0
 8020af0:	d1ed      	bne.n	8020ace <__gethex+0x2ca>
 8020af2:	ee18 0a10 	vmov	r0, s16
 8020af6:	4621      	mov	r1, r4
 8020af8:	f000 fa10 	bl	8020f1c <_Bfree>
 8020afc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020afe:	2300      	movs	r3, #0
 8020b00:	6013      	str	r3, [r2, #0]
 8020b02:	2750      	movs	r7, #80	; 0x50
 8020b04:	e713      	b.n	802092e <__gethex+0x12a>
 8020b06:	bf00      	nop
 8020b08:	08022e44 	.word	0x08022e44
 8020b0c:	08022dc8 	.word	0x08022dc8
 8020b10:	08022dd9 	.word	0x08022dd9
 8020b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d1eb      	bne.n	8020af2 <__gethex+0x2ee>
 8020b1a:	e7d8      	b.n	8020ace <__gethex+0x2ca>
 8020b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020b1e:	2b00      	cmp	r3, #0
 8020b20:	d1d5      	bne.n	8020ace <__gethex+0x2ca>
 8020b22:	e7e6      	b.n	8020af2 <__gethex+0x2ee>
 8020b24:	1e6f      	subs	r7, r5, #1
 8020b26:	f1ba 0f00 	cmp.w	sl, #0
 8020b2a:	d131      	bne.n	8020b90 <__gethex+0x38c>
 8020b2c:	b127      	cbz	r7, 8020b38 <__gethex+0x334>
 8020b2e:	4639      	mov	r1, r7
 8020b30:	4620      	mov	r0, r4
 8020b32:	f000 fe4d 	bl	80217d0 <__any_on>
 8020b36:	4682      	mov	sl, r0
 8020b38:	117b      	asrs	r3, r7, #5
 8020b3a:	2101      	movs	r1, #1
 8020b3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8020b40:	f007 071f 	and.w	r7, r7, #31
 8020b44:	fa01 f707 	lsl.w	r7, r1, r7
 8020b48:	421f      	tst	r7, r3
 8020b4a:	4629      	mov	r1, r5
 8020b4c:	4620      	mov	r0, r4
 8020b4e:	bf18      	it	ne
 8020b50:	f04a 0a02 	orrne.w	sl, sl, #2
 8020b54:	1b76      	subs	r6, r6, r5
 8020b56:	f7ff fded 	bl	8020734 <rshift>
 8020b5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020b5e:	2702      	movs	r7, #2
 8020b60:	f1ba 0f00 	cmp.w	sl, #0
 8020b64:	d048      	beq.n	8020bf8 <__gethex+0x3f4>
 8020b66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020b6a:	2b02      	cmp	r3, #2
 8020b6c:	d015      	beq.n	8020b9a <__gethex+0x396>
 8020b6e:	2b03      	cmp	r3, #3
 8020b70:	d017      	beq.n	8020ba2 <__gethex+0x39e>
 8020b72:	2b01      	cmp	r3, #1
 8020b74:	d109      	bne.n	8020b8a <__gethex+0x386>
 8020b76:	f01a 0f02 	tst.w	sl, #2
 8020b7a:	d006      	beq.n	8020b8a <__gethex+0x386>
 8020b7c:	f8d9 0000 	ldr.w	r0, [r9]
 8020b80:	ea4a 0a00 	orr.w	sl, sl, r0
 8020b84:	f01a 0f01 	tst.w	sl, #1
 8020b88:	d10e      	bne.n	8020ba8 <__gethex+0x3a4>
 8020b8a:	f047 0710 	orr.w	r7, r7, #16
 8020b8e:	e033      	b.n	8020bf8 <__gethex+0x3f4>
 8020b90:	f04f 0a01 	mov.w	sl, #1
 8020b94:	e7d0      	b.n	8020b38 <__gethex+0x334>
 8020b96:	2701      	movs	r7, #1
 8020b98:	e7e2      	b.n	8020b60 <__gethex+0x35c>
 8020b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020b9c:	f1c3 0301 	rsb	r3, r3, #1
 8020ba0:	9315      	str	r3, [sp, #84]	; 0x54
 8020ba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020ba4:	2b00      	cmp	r3, #0
 8020ba6:	d0f0      	beq.n	8020b8a <__gethex+0x386>
 8020ba8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020bac:	f104 0314 	add.w	r3, r4, #20
 8020bb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8020bb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8020bb8:	f04f 0c00 	mov.w	ip, #0
 8020bbc:	4618      	mov	r0, r3
 8020bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8020bc2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8020bc6:	d01c      	beq.n	8020c02 <__gethex+0x3fe>
 8020bc8:	3201      	adds	r2, #1
 8020bca:	6002      	str	r2, [r0, #0]
 8020bcc:	2f02      	cmp	r7, #2
 8020bce:	f104 0314 	add.w	r3, r4, #20
 8020bd2:	d13f      	bne.n	8020c54 <__gethex+0x450>
 8020bd4:	f8d8 2000 	ldr.w	r2, [r8]
 8020bd8:	3a01      	subs	r2, #1
 8020bda:	42b2      	cmp	r2, r6
 8020bdc:	d10a      	bne.n	8020bf4 <__gethex+0x3f0>
 8020bde:	1171      	asrs	r1, r6, #5
 8020be0:	2201      	movs	r2, #1
 8020be2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020be6:	f006 061f 	and.w	r6, r6, #31
 8020bea:	fa02 f606 	lsl.w	r6, r2, r6
 8020bee:	421e      	tst	r6, r3
 8020bf0:	bf18      	it	ne
 8020bf2:	4617      	movne	r7, r2
 8020bf4:	f047 0720 	orr.w	r7, r7, #32
 8020bf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020bfa:	601c      	str	r4, [r3, #0]
 8020bfc:	9b04      	ldr	r3, [sp, #16]
 8020bfe:	601d      	str	r5, [r3, #0]
 8020c00:	e695      	b.n	802092e <__gethex+0x12a>
 8020c02:	4299      	cmp	r1, r3
 8020c04:	f843 cc04 	str.w	ip, [r3, #-4]
 8020c08:	d8d8      	bhi.n	8020bbc <__gethex+0x3b8>
 8020c0a:	68a3      	ldr	r3, [r4, #8]
 8020c0c:	459b      	cmp	fp, r3
 8020c0e:	db19      	blt.n	8020c44 <__gethex+0x440>
 8020c10:	6861      	ldr	r1, [r4, #4]
 8020c12:	ee18 0a10 	vmov	r0, s16
 8020c16:	3101      	adds	r1, #1
 8020c18:	f000 f940 	bl	8020e9c <_Balloc>
 8020c1c:	4681      	mov	r9, r0
 8020c1e:	b918      	cbnz	r0, 8020c28 <__gethex+0x424>
 8020c20:	4b1a      	ldr	r3, [pc, #104]	; (8020c8c <__gethex+0x488>)
 8020c22:	4602      	mov	r2, r0
 8020c24:	2184      	movs	r1, #132	; 0x84
 8020c26:	e6a8      	b.n	802097a <__gethex+0x176>
 8020c28:	6922      	ldr	r2, [r4, #16]
 8020c2a:	3202      	adds	r2, #2
 8020c2c:	f104 010c 	add.w	r1, r4, #12
 8020c30:	0092      	lsls	r2, r2, #2
 8020c32:	300c      	adds	r0, #12
 8020c34:	f7fd f906 	bl	801de44 <memcpy>
 8020c38:	4621      	mov	r1, r4
 8020c3a:	ee18 0a10 	vmov	r0, s16
 8020c3e:	f000 f96d 	bl	8020f1c <_Bfree>
 8020c42:	464c      	mov	r4, r9
 8020c44:	6923      	ldr	r3, [r4, #16]
 8020c46:	1c5a      	adds	r2, r3, #1
 8020c48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020c4c:	6122      	str	r2, [r4, #16]
 8020c4e:	2201      	movs	r2, #1
 8020c50:	615a      	str	r2, [r3, #20]
 8020c52:	e7bb      	b.n	8020bcc <__gethex+0x3c8>
 8020c54:	6922      	ldr	r2, [r4, #16]
 8020c56:	455a      	cmp	r2, fp
 8020c58:	dd0b      	ble.n	8020c72 <__gethex+0x46e>
 8020c5a:	2101      	movs	r1, #1
 8020c5c:	4620      	mov	r0, r4
 8020c5e:	f7ff fd69 	bl	8020734 <rshift>
 8020c62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020c66:	3501      	adds	r5, #1
 8020c68:	42ab      	cmp	r3, r5
 8020c6a:	f6ff aed0 	blt.w	8020a0e <__gethex+0x20a>
 8020c6e:	2701      	movs	r7, #1
 8020c70:	e7c0      	b.n	8020bf4 <__gethex+0x3f0>
 8020c72:	f016 061f 	ands.w	r6, r6, #31
 8020c76:	d0fa      	beq.n	8020c6e <__gethex+0x46a>
 8020c78:	449a      	add	sl, r3
 8020c7a:	f1c6 0620 	rsb	r6, r6, #32
 8020c7e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8020c82:	f000 fa01 	bl	8021088 <__hi0bits>
 8020c86:	42b0      	cmp	r0, r6
 8020c88:	dbe7      	blt.n	8020c5a <__gethex+0x456>
 8020c8a:	e7f0      	b.n	8020c6e <__gethex+0x46a>
 8020c8c:	08022dc8 	.word	0x08022dc8

08020c90 <L_shift>:
 8020c90:	f1c2 0208 	rsb	r2, r2, #8
 8020c94:	0092      	lsls	r2, r2, #2
 8020c96:	b570      	push	{r4, r5, r6, lr}
 8020c98:	f1c2 0620 	rsb	r6, r2, #32
 8020c9c:	6843      	ldr	r3, [r0, #4]
 8020c9e:	6804      	ldr	r4, [r0, #0]
 8020ca0:	fa03 f506 	lsl.w	r5, r3, r6
 8020ca4:	432c      	orrs	r4, r5
 8020ca6:	40d3      	lsrs	r3, r2
 8020ca8:	6004      	str	r4, [r0, #0]
 8020caa:	f840 3f04 	str.w	r3, [r0, #4]!
 8020cae:	4288      	cmp	r0, r1
 8020cb0:	d3f4      	bcc.n	8020c9c <L_shift+0xc>
 8020cb2:	bd70      	pop	{r4, r5, r6, pc}

08020cb4 <__match>:
 8020cb4:	b530      	push	{r4, r5, lr}
 8020cb6:	6803      	ldr	r3, [r0, #0]
 8020cb8:	3301      	adds	r3, #1
 8020cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020cbe:	b914      	cbnz	r4, 8020cc6 <__match+0x12>
 8020cc0:	6003      	str	r3, [r0, #0]
 8020cc2:	2001      	movs	r0, #1
 8020cc4:	bd30      	pop	{r4, r5, pc}
 8020cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020cca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8020cce:	2d19      	cmp	r5, #25
 8020cd0:	bf98      	it	ls
 8020cd2:	3220      	addls	r2, #32
 8020cd4:	42a2      	cmp	r2, r4
 8020cd6:	d0f0      	beq.n	8020cba <__match+0x6>
 8020cd8:	2000      	movs	r0, #0
 8020cda:	e7f3      	b.n	8020cc4 <__match+0x10>

08020cdc <__hexnan>:
 8020cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ce0:	680b      	ldr	r3, [r1, #0]
 8020ce2:	6801      	ldr	r1, [r0, #0]
 8020ce4:	115e      	asrs	r6, r3, #5
 8020ce6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020cea:	f013 031f 	ands.w	r3, r3, #31
 8020cee:	b087      	sub	sp, #28
 8020cf0:	bf18      	it	ne
 8020cf2:	3604      	addne	r6, #4
 8020cf4:	2500      	movs	r5, #0
 8020cf6:	1f37      	subs	r7, r6, #4
 8020cf8:	4682      	mov	sl, r0
 8020cfa:	4690      	mov	r8, r2
 8020cfc:	9301      	str	r3, [sp, #4]
 8020cfe:	f846 5c04 	str.w	r5, [r6, #-4]
 8020d02:	46b9      	mov	r9, r7
 8020d04:	463c      	mov	r4, r7
 8020d06:	9502      	str	r5, [sp, #8]
 8020d08:	46ab      	mov	fp, r5
 8020d0a:	784a      	ldrb	r2, [r1, #1]
 8020d0c:	1c4b      	adds	r3, r1, #1
 8020d0e:	9303      	str	r3, [sp, #12]
 8020d10:	b342      	cbz	r2, 8020d64 <__hexnan+0x88>
 8020d12:	4610      	mov	r0, r2
 8020d14:	9105      	str	r1, [sp, #20]
 8020d16:	9204      	str	r2, [sp, #16]
 8020d18:	f7ff fd5e 	bl	80207d8 <__hexdig_fun>
 8020d1c:	2800      	cmp	r0, #0
 8020d1e:	d14f      	bne.n	8020dc0 <__hexnan+0xe4>
 8020d20:	9a04      	ldr	r2, [sp, #16]
 8020d22:	9905      	ldr	r1, [sp, #20]
 8020d24:	2a20      	cmp	r2, #32
 8020d26:	d818      	bhi.n	8020d5a <__hexnan+0x7e>
 8020d28:	9b02      	ldr	r3, [sp, #8]
 8020d2a:	459b      	cmp	fp, r3
 8020d2c:	dd13      	ble.n	8020d56 <__hexnan+0x7a>
 8020d2e:	454c      	cmp	r4, r9
 8020d30:	d206      	bcs.n	8020d40 <__hexnan+0x64>
 8020d32:	2d07      	cmp	r5, #7
 8020d34:	dc04      	bgt.n	8020d40 <__hexnan+0x64>
 8020d36:	462a      	mov	r2, r5
 8020d38:	4649      	mov	r1, r9
 8020d3a:	4620      	mov	r0, r4
 8020d3c:	f7ff ffa8 	bl	8020c90 <L_shift>
 8020d40:	4544      	cmp	r4, r8
 8020d42:	d950      	bls.n	8020de6 <__hexnan+0x10a>
 8020d44:	2300      	movs	r3, #0
 8020d46:	f1a4 0904 	sub.w	r9, r4, #4
 8020d4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8020d4e:	f8cd b008 	str.w	fp, [sp, #8]
 8020d52:	464c      	mov	r4, r9
 8020d54:	461d      	mov	r5, r3
 8020d56:	9903      	ldr	r1, [sp, #12]
 8020d58:	e7d7      	b.n	8020d0a <__hexnan+0x2e>
 8020d5a:	2a29      	cmp	r2, #41	; 0x29
 8020d5c:	d156      	bne.n	8020e0c <__hexnan+0x130>
 8020d5e:	3102      	adds	r1, #2
 8020d60:	f8ca 1000 	str.w	r1, [sl]
 8020d64:	f1bb 0f00 	cmp.w	fp, #0
 8020d68:	d050      	beq.n	8020e0c <__hexnan+0x130>
 8020d6a:	454c      	cmp	r4, r9
 8020d6c:	d206      	bcs.n	8020d7c <__hexnan+0xa0>
 8020d6e:	2d07      	cmp	r5, #7
 8020d70:	dc04      	bgt.n	8020d7c <__hexnan+0xa0>
 8020d72:	462a      	mov	r2, r5
 8020d74:	4649      	mov	r1, r9
 8020d76:	4620      	mov	r0, r4
 8020d78:	f7ff ff8a 	bl	8020c90 <L_shift>
 8020d7c:	4544      	cmp	r4, r8
 8020d7e:	d934      	bls.n	8020dea <__hexnan+0x10e>
 8020d80:	f1a8 0204 	sub.w	r2, r8, #4
 8020d84:	4623      	mov	r3, r4
 8020d86:	f853 1b04 	ldr.w	r1, [r3], #4
 8020d8a:	f842 1f04 	str.w	r1, [r2, #4]!
 8020d8e:	429f      	cmp	r7, r3
 8020d90:	d2f9      	bcs.n	8020d86 <__hexnan+0xaa>
 8020d92:	1b3b      	subs	r3, r7, r4
 8020d94:	f023 0303 	bic.w	r3, r3, #3
 8020d98:	3304      	adds	r3, #4
 8020d9a:	3401      	adds	r4, #1
 8020d9c:	3e03      	subs	r6, #3
 8020d9e:	42b4      	cmp	r4, r6
 8020da0:	bf88      	it	hi
 8020da2:	2304      	movhi	r3, #4
 8020da4:	4443      	add	r3, r8
 8020da6:	2200      	movs	r2, #0
 8020da8:	f843 2b04 	str.w	r2, [r3], #4
 8020dac:	429f      	cmp	r7, r3
 8020dae:	d2fb      	bcs.n	8020da8 <__hexnan+0xcc>
 8020db0:	683b      	ldr	r3, [r7, #0]
 8020db2:	b91b      	cbnz	r3, 8020dbc <__hexnan+0xe0>
 8020db4:	4547      	cmp	r7, r8
 8020db6:	d127      	bne.n	8020e08 <__hexnan+0x12c>
 8020db8:	2301      	movs	r3, #1
 8020dba:	603b      	str	r3, [r7, #0]
 8020dbc:	2005      	movs	r0, #5
 8020dbe:	e026      	b.n	8020e0e <__hexnan+0x132>
 8020dc0:	3501      	adds	r5, #1
 8020dc2:	2d08      	cmp	r5, #8
 8020dc4:	f10b 0b01 	add.w	fp, fp, #1
 8020dc8:	dd06      	ble.n	8020dd8 <__hexnan+0xfc>
 8020dca:	4544      	cmp	r4, r8
 8020dcc:	d9c3      	bls.n	8020d56 <__hexnan+0x7a>
 8020dce:	2300      	movs	r3, #0
 8020dd0:	f844 3c04 	str.w	r3, [r4, #-4]
 8020dd4:	2501      	movs	r5, #1
 8020dd6:	3c04      	subs	r4, #4
 8020dd8:	6822      	ldr	r2, [r4, #0]
 8020dda:	f000 000f 	and.w	r0, r0, #15
 8020dde:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8020de2:	6022      	str	r2, [r4, #0]
 8020de4:	e7b7      	b.n	8020d56 <__hexnan+0x7a>
 8020de6:	2508      	movs	r5, #8
 8020de8:	e7b5      	b.n	8020d56 <__hexnan+0x7a>
 8020dea:	9b01      	ldr	r3, [sp, #4]
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	d0df      	beq.n	8020db0 <__hexnan+0xd4>
 8020df0:	f04f 32ff 	mov.w	r2, #4294967295
 8020df4:	f1c3 0320 	rsb	r3, r3, #32
 8020df8:	fa22 f303 	lsr.w	r3, r2, r3
 8020dfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020e00:	401a      	ands	r2, r3
 8020e02:	f846 2c04 	str.w	r2, [r6, #-4]
 8020e06:	e7d3      	b.n	8020db0 <__hexnan+0xd4>
 8020e08:	3f04      	subs	r7, #4
 8020e0a:	e7d1      	b.n	8020db0 <__hexnan+0xd4>
 8020e0c:	2004      	movs	r0, #4
 8020e0e:	b007      	add	sp, #28
 8020e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e14 <_isatty_r>:
 8020e14:	b538      	push	{r3, r4, r5, lr}
 8020e16:	4d06      	ldr	r5, [pc, #24]	; (8020e30 <_isatty_r+0x1c>)
 8020e18:	2300      	movs	r3, #0
 8020e1a:	4604      	mov	r4, r0
 8020e1c:	4608      	mov	r0, r1
 8020e1e:	602b      	str	r3, [r5, #0]
 8020e20:	f7fc fd6a 	bl	801d8f8 <_isatty>
 8020e24:	1c43      	adds	r3, r0, #1
 8020e26:	d102      	bne.n	8020e2e <_isatty_r+0x1a>
 8020e28:	682b      	ldr	r3, [r5, #0]
 8020e2a:	b103      	cbz	r3, 8020e2e <_isatty_r+0x1a>
 8020e2c:	6023      	str	r3, [r4, #0]
 8020e2e:	bd38      	pop	{r3, r4, r5, pc}
 8020e30:	20019244 	.word	0x20019244

08020e34 <_localeconv_r>:
 8020e34:	4800      	ldr	r0, [pc, #0]	; (8020e38 <_localeconv_r+0x4>)
 8020e36:	4770      	bx	lr
 8020e38:	200001e4 	.word	0x200001e4

08020e3c <_lseek_r>:
 8020e3c:	b538      	push	{r3, r4, r5, lr}
 8020e3e:	4d07      	ldr	r5, [pc, #28]	; (8020e5c <_lseek_r+0x20>)
 8020e40:	4604      	mov	r4, r0
 8020e42:	4608      	mov	r0, r1
 8020e44:	4611      	mov	r1, r2
 8020e46:	2200      	movs	r2, #0
 8020e48:	602a      	str	r2, [r5, #0]
 8020e4a:	461a      	mov	r2, r3
 8020e4c:	f7fc fd5f 	bl	801d90e <_lseek>
 8020e50:	1c43      	adds	r3, r0, #1
 8020e52:	d102      	bne.n	8020e5a <_lseek_r+0x1e>
 8020e54:	682b      	ldr	r3, [r5, #0]
 8020e56:	b103      	cbz	r3, 8020e5a <_lseek_r+0x1e>
 8020e58:	6023      	str	r3, [r4, #0]
 8020e5a:	bd38      	pop	{r3, r4, r5, pc}
 8020e5c:	20019244 	.word	0x20019244

08020e60 <__ascii_mbtowc>:
 8020e60:	b082      	sub	sp, #8
 8020e62:	b901      	cbnz	r1, 8020e66 <__ascii_mbtowc+0x6>
 8020e64:	a901      	add	r1, sp, #4
 8020e66:	b142      	cbz	r2, 8020e7a <__ascii_mbtowc+0x1a>
 8020e68:	b14b      	cbz	r3, 8020e7e <__ascii_mbtowc+0x1e>
 8020e6a:	7813      	ldrb	r3, [r2, #0]
 8020e6c:	600b      	str	r3, [r1, #0]
 8020e6e:	7812      	ldrb	r2, [r2, #0]
 8020e70:	1e10      	subs	r0, r2, #0
 8020e72:	bf18      	it	ne
 8020e74:	2001      	movne	r0, #1
 8020e76:	b002      	add	sp, #8
 8020e78:	4770      	bx	lr
 8020e7a:	4610      	mov	r0, r2
 8020e7c:	e7fb      	b.n	8020e76 <__ascii_mbtowc+0x16>
 8020e7e:	f06f 0001 	mvn.w	r0, #1
 8020e82:	e7f8      	b.n	8020e76 <__ascii_mbtowc+0x16>

08020e84 <__malloc_lock>:
 8020e84:	4801      	ldr	r0, [pc, #4]	; (8020e8c <__malloc_lock+0x8>)
 8020e86:	f7fc bf66 	b.w	801dd56 <__retarget_lock_acquire_recursive>
 8020e8a:	bf00      	nop
 8020e8c:	20019238 	.word	0x20019238

08020e90 <__malloc_unlock>:
 8020e90:	4801      	ldr	r0, [pc, #4]	; (8020e98 <__malloc_unlock+0x8>)
 8020e92:	f7fc bf61 	b.w	801dd58 <__retarget_lock_release_recursive>
 8020e96:	bf00      	nop
 8020e98:	20019238 	.word	0x20019238

08020e9c <_Balloc>:
 8020e9c:	b570      	push	{r4, r5, r6, lr}
 8020e9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020ea0:	4604      	mov	r4, r0
 8020ea2:	460d      	mov	r5, r1
 8020ea4:	b976      	cbnz	r6, 8020ec4 <_Balloc+0x28>
 8020ea6:	2010      	movs	r0, #16
 8020ea8:	f7fc ffbc 	bl	801de24 <malloc>
 8020eac:	4602      	mov	r2, r0
 8020eae:	6260      	str	r0, [r4, #36]	; 0x24
 8020eb0:	b920      	cbnz	r0, 8020ebc <_Balloc+0x20>
 8020eb2:	4b18      	ldr	r3, [pc, #96]	; (8020f14 <_Balloc+0x78>)
 8020eb4:	4818      	ldr	r0, [pc, #96]	; (8020f18 <_Balloc+0x7c>)
 8020eb6:	2166      	movs	r1, #102	; 0x66
 8020eb8:	f000 fe30 	bl	8021b1c <__assert_func>
 8020ebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020ec0:	6006      	str	r6, [r0, #0]
 8020ec2:	60c6      	str	r6, [r0, #12]
 8020ec4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020ec6:	68f3      	ldr	r3, [r6, #12]
 8020ec8:	b183      	cbz	r3, 8020eec <_Balloc+0x50>
 8020eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020ecc:	68db      	ldr	r3, [r3, #12]
 8020ece:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020ed2:	b9b8      	cbnz	r0, 8020f04 <_Balloc+0x68>
 8020ed4:	2101      	movs	r1, #1
 8020ed6:	fa01 f605 	lsl.w	r6, r1, r5
 8020eda:	1d72      	adds	r2, r6, #5
 8020edc:	0092      	lsls	r2, r2, #2
 8020ede:	4620      	mov	r0, r4
 8020ee0:	f7fc ffe0 	bl	801dea4 <_calloc_r>
 8020ee4:	b160      	cbz	r0, 8020f00 <_Balloc+0x64>
 8020ee6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020eea:	e00e      	b.n	8020f0a <_Balloc+0x6e>
 8020eec:	2221      	movs	r2, #33	; 0x21
 8020eee:	2104      	movs	r1, #4
 8020ef0:	4620      	mov	r0, r4
 8020ef2:	f7fc ffd7 	bl	801dea4 <_calloc_r>
 8020ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020ef8:	60f0      	str	r0, [r6, #12]
 8020efa:	68db      	ldr	r3, [r3, #12]
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	d1e4      	bne.n	8020eca <_Balloc+0x2e>
 8020f00:	2000      	movs	r0, #0
 8020f02:	bd70      	pop	{r4, r5, r6, pc}
 8020f04:	6802      	ldr	r2, [r0, #0]
 8020f06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020f0a:	2300      	movs	r3, #0
 8020f0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020f10:	e7f7      	b.n	8020f02 <_Balloc+0x66>
 8020f12:	bf00      	nop
 8020f14:	08022d52 	.word	0x08022d52
 8020f18:	08022e58 	.word	0x08022e58

08020f1c <_Bfree>:
 8020f1c:	b570      	push	{r4, r5, r6, lr}
 8020f1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020f20:	4605      	mov	r5, r0
 8020f22:	460c      	mov	r4, r1
 8020f24:	b976      	cbnz	r6, 8020f44 <_Bfree+0x28>
 8020f26:	2010      	movs	r0, #16
 8020f28:	f7fc ff7c 	bl	801de24 <malloc>
 8020f2c:	4602      	mov	r2, r0
 8020f2e:	6268      	str	r0, [r5, #36]	; 0x24
 8020f30:	b920      	cbnz	r0, 8020f3c <_Bfree+0x20>
 8020f32:	4b09      	ldr	r3, [pc, #36]	; (8020f58 <_Bfree+0x3c>)
 8020f34:	4809      	ldr	r0, [pc, #36]	; (8020f5c <_Bfree+0x40>)
 8020f36:	218a      	movs	r1, #138	; 0x8a
 8020f38:	f000 fdf0 	bl	8021b1c <__assert_func>
 8020f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020f40:	6006      	str	r6, [r0, #0]
 8020f42:	60c6      	str	r6, [r0, #12]
 8020f44:	b13c      	cbz	r4, 8020f56 <_Bfree+0x3a>
 8020f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020f48:	6862      	ldr	r2, [r4, #4]
 8020f4a:	68db      	ldr	r3, [r3, #12]
 8020f4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020f50:	6021      	str	r1, [r4, #0]
 8020f52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020f56:	bd70      	pop	{r4, r5, r6, pc}
 8020f58:	08022d52 	.word	0x08022d52
 8020f5c:	08022e58 	.word	0x08022e58

08020f60 <__multadd>:
 8020f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f64:	690e      	ldr	r6, [r1, #16]
 8020f66:	4607      	mov	r7, r0
 8020f68:	4698      	mov	r8, r3
 8020f6a:	460c      	mov	r4, r1
 8020f6c:	f101 0014 	add.w	r0, r1, #20
 8020f70:	2300      	movs	r3, #0
 8020f72:	6805      	ldr	r5, [r0, #0]
 8020f74:	b2a9      	uxth	r1, r5
 8020f76:	fb02 8101 	mla	r1, r2, r1, r8
 8020f7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8020f7e:	0c2d      	lsrs	r5, r5, #16
 8020f80:	fb02 c505 	mla	r5, r2, r5, ip
 8020f84:	b289      	uxth	r1, r1
 8020f86:	3301      	adds	r3, #1
 8020f88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8020f8c:	429e      	cmp	r6, r3
 8020f8e:	f840 1b04 	str.w	r1, [r0], #4
 8020f92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020f96:	dcec      	bgt.n	8020f72 <__multadd+0x12>
 8020f98:	f1b8 0f00 	cmp.w	r8, #0
 8020f9c:	d022      	beq.n	8020fe4 <__multadd+0x84>
 8020f9e:	68a3      	ldr	r3, [r4, #8]
 8020fa0:	42b3      	cmp	r3, r6
 8020fa2:	dc19      	bgt.n	8020fd8 <__multadd+0x78>
 8020fa4:	6861      	ldr	r1, [r4, #4]
 8020fa6:	4638      	mov	r0, r7
 8020fa8:	3101      	adds	r1, #1
 8020faa:	f7ff ff77 	bl	8020e9c <_Balloc>
 8020fae:	4605      	mov	r5, r0
 8020fb0:	b928      	cbnz	r0, 8020fbe <__multadd+0x5e>
 8020fb2:	4602      	mov	r2, r0
 8020fb4:	4b0d      	ldr	r3, [pc, #52]	; (8020fec <__multadd+0x8c>)
 8020fb6:	480e      	ldr	r0, [pc, #56]	; (8020ff0 <__multadd+0x90>)
 8020fb8:	21b5      	movs	r1, #181	; 0xb5
 8020fba:	f000 fdaf 	bl	8021b1c <__assert_func>
 8020fbe:	6922      	ldr	r2, [r4, #16]
 8020fc0:	3202      	adds	r2, #2
 8020fc2:	f104 010c 	add.w	r1, r4, #12
 8020fc6:	0092      	lsls	r2, r2, #2
 8020fc8:	300c      	adds	r0, #12
 8020fca:	f7fc ff3b 	bl	801de44 <memcpy>
 8020fce:	4621      	mov	r1, r4
 8020fd0:	4638      	mov	r0, r7
 8020fd2:	f7ff ffa3 	bl	8020f1c <_Bfree>
 8020fd6:	462c      	mov	r4, r5
 8020fd8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8020fdc:	3601      	adds	r6, #1
 8020fde:	f8c3 8014 	str.w	r8, [r3, #20]
 8020fe2:	6126      	str	r6, [r4, #16]
 8020fe4:	4620      	mov	r0, r4
 8020fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020fea:	bf00      	nop
 8020fec:	08022dc8 	.word	0x08022dc8
 8020ff0:	08022e58 	.word	0x08022e58

08020ff4 <__s2b>:
 8020ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020ff8:	460c      	mov	r4, r1
 8020ffa:	4615      	mov	r5, r2
 8020ffc:	461f      	mov	r7, r3
 8020ffe:	2209      	movs	r2, #9
 8021000:	3308      	adds	r3, #8
 8021002:	4606      	mov	r6, r0
 8021004:	fb93 f3f2 	sdiv	r3, r3, r2
 8021008:	2100      	movs	r1, #0
 802100a:	2201      	movs	r2, #1
 802100c:	429a      	cmp	r2, r3
 802100e:	db09      	blt.n	8021024 <__s2b+0x30>
 8021010:	4630      	mov	r0, r6
 8021012:	f7ff ff43 	bl	8020e9c <_Balloc>
 8021016:	b940      	cbnz	r0, 802102a <__s2b+0x36>
 8021018:	4602      	mov	r2, r0
 802101a:	4b19      	ldr	r3, [pc, #100]	; (8021080 <__s2b+0x8c>)
 802101c:	4819      	ldr	r0, [pc, #100]	; (8021084 <__s2b+0x90>)
 802101e:	21ce      	movs	r1, #206	; 0xce
 8021020:	f000 fd7c 	bl	8021b1c <__assert_func>
 8021024:	0052      	lsls	r2, r2, #1
 8021026:	3101      	adds	r1, #1
 8021028:	e7f0      	b.n	802100c <__s2b+0x18>
 802102a:	9b08      	ldr	r3, [sp, #32]
 802102c:	6143      	str	r3, [r0, #20]
 802102e:	2d09      	cmp	r5, #9
 8021030:	f04f 0301 	mov.w	r3, #1
 8021034:	6103      	str	r3, [r0, #16]
 8021036:	dd16      	ble.n	8021066 <__s2b+0x72>
 8021038:	f104 0909 	add.w	r9, r4, #9
 802103c:	46c8      	mov	r8, r9
 802103e:	442c      	add	r4, r5
 8021040:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021044:	4601      	mov	r1, r0
 8021046:	3b30      	subs	r3, #48	; 0x30
 8021048:	220a      	movs	r2, #10
 802104a:	4630      	mov	r0, r6
 802104c:	f7ff ff88 	bl	8020f60 <__multadd>
 8021050:	45a0      	cmp	r8, r4
 8021052:	d1f5      	bne.n	8021040 <__s2b+0x4c>
 8021054:	f1a5 0408 	sub.w	r4, r5, #8
 8021058:	444c      	add	r4, r9
 802105a:	1b2d      	subs	r5, r5, r4
 802105c:	1963      	adds	r3, r4, r5
 802105e:	42bb      	cmp	r3, r7
 8021060:	db04      	blt.n	802106c <__s2b+0x78>
 8021062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021066:	340a      	adds	r4, #10
 8021068:	2509      	movs	r5, #9
 802106a:	e7f6      	b.n	802105a <__s2b+0x66>
 802106c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021070:	4601      	mov	r1, r0
 8021072:	3b30      	subs	r3, #48	; 0x30
 8021074:	220a      	movs	r2, #10
 8021076:	4630      	mov	r0, r6
 8021078:	f7ff ff72 	bl	8020f60 <__multadd>
 802107c:	e7ee      	b.n	802105c <__s2b+0x68>
 802107e:	bf00      	nop
 8021080:	08022dc8 	.word	0x08022dc8
 8021084:	08022e58 	.word	0x08022e58

08021088 <__hi0bits>:
 8021088:	0c03      	lsrs	r3, r0, #16
 802108a:	041b      	lsls	r3, r3, #16
 802108c:	b9d3      	cbnz	r3, 80210c4 <__hi0bits+0x3c>
 802108e:	0400      	lsls	r0, r0, #16
 8021090:	2310      	movs	r3, #16
 8021092:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021096:	bf04      	itt	eq
 8021098:	0200      	lsleq	r0, r0, #8
 802109a:	3308      	addeq	r3, #8
 802109c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80210a0:	bf04      	itt	eq
 80210a2:	0100      	lsleq	r0, r0, #4
 80210a4:	3304      	addeq	r3, #4
 80210a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80210aa:	bf04      	itt	eq
 80210ac:	0080      	lsleq	r0, r0, #2
 80210ae:	3302      	addeq	r3, #2
 80210b0:	2800      	cmp	r0, #0
 80210b2:	db05      	blt.n	80210c0 <__hi0bits+0x38>
 80210b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80210b8:	f103 0301 	add.w	r3, r3, #1
 80210bc:	bf08      	it	eq
 80210be:	2320      	moveq	r3, #32
 80210c0:	4618      	mov	r0, r3
 80210c2:	4770      	bx	lr
 80210c4:	2300      	movs	r3, #0
 80210c6:	e7e4      	b.n	8021092 <__hi0bits+0xa>

080210c8 <__lo0bits>:
 80210c8:	6803      	ldr	r3, [r0, #0]
 80210ca:	f013 0207 	ands.w	r2, r3, #7
 80210ce:	4601      	mov	r1, r0
 80210d0:	d00b      	beq.n	80210ea <__lo0bits+0x22>
 80210d2:	07da      	lsls	r2, r3, #31
 80210d4:	d424      	bmi.n	8021120 <__lo0bits+0x58>
 80210d6:	0798      	lsls	r0, r3, #30
 80210d8:	bf49      	itett	mi
 80210da:	085b      	lsrmi	r3, r3, #1
 80210dc:	089b      	lsrpl	r3, r3, #2
 80210de:	2001      	movmi	r0, #1
 80210e0:	600b      	strmi	r3, [r1, #0]
 80210e2:	bf5c      	itt	pl
 80210e4:	600b      	strpl	r3, [r1, #0]
 80210e6:	2002      	movpl	r0, #2
 80210e8:	4770      	bx	lr
 80210ea:	b298      	uxth	r0, r3
 80210ec:	b9b0      	cbnz	r0, 802111c <__lo0bits+0x54>
 80210ee:	0c1b      	lsrs	r3, r3, #16
 80210f0:	2010      	movs	r0, #16
 80210f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80210f6:	bf04      	itt	eq
 80210f8:	0a1b      	lsreq	r3, r3, #8
 80210fa:	3008      	addeq	r0, #8
 80210fc:	071a      	lsls	r2, r3, #28
 80210fe:	bf04      	itt	eq
 8021100:	091b      	lsreq	r3, r3, #4
 8021102:	3004      	addeq	r0, #4
 8021104:	079a      	lsls	r2, r3, #30
 8021106:	bf04      	itt	eq
 8021108:	089b      	lsreq	r3, r3, #2
 802110a:	3002      	addeq	r0, #2
 802110c:	07da      	lsls	r2, r3, #31
 802110e:	d403      	bmi.n	8021118 <__lo0bits+0x50>
 8021110:	085b      	lsrs	r3, r3, #1
 8021112:	f100 0001 	add.w	r0, r0, #1
 8021116:	d005      	beq.n	8021124 <__lo0bits+0x5c>
 8021118:	600b      	str	r3, [r1, #0]
 802111a:	4770      	bx	lr
 802111c:	4610      	mov	r0, r2
 802111e:	e7e8      	b.n	80210f2 <__lo0bits+0x2a>
 8021120:	2000      	movs	r0, #0
 8021122:	4770      	bx	lr
 8021124:	2020      	movs	r0, #32
 8021126:	4770      	bx	lr

08021128 <__i2b>:
 8021128:	b510      	push	{r4, lr}
 802112a:	460c      	mov	r4, r1
 802112c:	2101      	movs	r1, #1
 802112e:	f7ff feb5 	bl	8020e9c <_Balloc>
 8021132:	4602      	mov	r2, r0
 8021134:	b928      	cbnz	r0, 8021142 <__i2b+0x1a>
 8021136:	4b05      	ldr	r3, [pc, #20]	; (802114c <__i2b+0x24>)
 8021138:	4805      	ldr	r0, [pc, #20]	; (8021150 <__i2b+0x28>)
 802113a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802113e:	f000 fced 	bl	8021b1c <__assert_func>
 8021142:	2301      	movs	r3, #1
 8021144:	6144      	str	r4, [r0, #20]
 8021146:	6103      	str	r3, [r0, #16]
 8021148:	bd10      	pop	{r4, pc}
 802114a:	bf00      	nop
 802114c:	08022dc8 	.word	0x08022dc8
 8021150:	08022e58 	.word	0x08022e58

08021154 <__multiply>:
 8021154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021158:	4614      	mov	r4, r2
 802115a:	690a      	ldr	r2, [r1, #16]
 802115c:	6923      	ldr	r3, [r4, #16]
 802115e:	429a      	cmp	r2, r3
 8021160:	bfb8      	it	lt
 8021162:	460b      	movlt	r3, r1
 8021164:	460d      	mov	r5, r1
 8021166:	bfbc      	itt	lt
 8021168:	4625      	movlt	r5, r4
 802116a:	461c      	movlt	r4, r3
 802116c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8021170:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021174:	68ab      	ldr	r3, [r5, #8]
 8021176:	6869      	ldr	r1, [r5, #4]
 8021178:	eb0a 0709 	add.w	r7, sl, r9
 802117c:	42bb      	cmp	r3, r7
 802117e:	b085      	sub	sp, #20
 8021180:	bfb8      	it	lt
 8021182:	3101      	addlt	r1, #1
 8021184:	f7ff fe8a 	bl	8020e9c <_Balloc>
 8021188:	b930      	cbnz	r0, 8021198 <__multiply+0x44>
 802118a:	4602      	mov	r2, r0
 802118c:	4b42      	ldr	r3, [pc, #264]	; (8021298 <__multiply+0x144>)
 802118e:	4843      	ldr	r0, [pc, #268]	; (802129c <__multiply+0x148>)
 8021190:	f240 115d 	movw	r1, #349	; 0x15d
 8021194:	f000 fcc2 	bl	8021b1c <__assert_func>
 8021198:	f100 0614 	add.w	r6, r0, #20
 802119c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80211a0:	4633      	mov	r3, r6
 80211a2:	2200      	movs	r2, #0
 80211a4:	4543      	cmp	r3, r8
 80211a6:	d31e      	bcc.n	80211e6 <__multiply+0x92>
 80211a8:	f105 0c14 	add.w	ip, r5, #20
 80211ac:	f104 0314 	add.w	r3, r4, #20
 80211b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80211b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80211b8:	9202      	str	r2, [sp, #8]
 80211ba:	ebac 0205 	sub.w	r2, ip, r5
 80211be:	3a15      	subs	r2, #21
 80211c0:	f022 0203 	bic.w	r2, r2, #3
 80211c4:	3204      	adds	r2, #4
 80211c6:	f105 0115 	add.w	r1, r5, #21
 80211ca:	458c      	cmp	ip, r1
 80211cc:	bf38      	it	cc
 80211ce:	2204      	movcc	r2, #4
 80211d0:	9201      	str	r2, [sp, #4]
 80211d2:	9a02      	ldr	r2, [sp, #8]
 80211d4:	9303      	str	r3, [sp, #12]
 80211d6:	429a      	cmp	r2, r3
 80211d8:	d808      	bhi.n	80211ec <__multiply+0x98>
 80211da:	2f00      	cmp	r7, #0
 80211dc:	dc55      	bgt.n	802128a <__multiply+0x136>
 80211de:	6107      	str	r7, [r0, #16]
 80211e0:	b005      	add	sp, #20
 80211e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211e6:	f843 2b04 	str.w	r2, [r3], #4
 80211ea:	e7db      	b.n	80211a4 <__multiply+0x50>
 80211ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80211f0:	f1ba 0f00 	cmp.w	sl, #0
 80211f4:	d020      	beq.n	8021238 <__multiply+0xe4>
 80211f6:	f105 0e14 	add.w	lr, r5, #20
 80211fa:	46b1      	mov	r9, r6
 80211fc:	2200      	movs	r2, #0
 80211fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8021202:	f8d9 b000 	ldr.w	fp, [r9]
 8021206:	b2a1      	uxth	r1, r4
 8021208:	fa1f fb8b 	uxth.w	fp, fp
 802120c:	fb0a b101 	mla	r1, sl, r1, fp
 8021210:	4411      	add	r1, r2
 8021212:	f8d9 2000 	ldr.w	r2, [r9]
 8021216:	0c24      	lsrs	r4, r4, #16
 8021218:	0c12      	lsrs	r2, r2, #16
 802121a:	fb0a 2404 	mla	r4, sl, r4, r2
 802121e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8021222:	b289      	uxth	r1, r1
 8021224:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8021228:	45f4      	cmp	ip, lr
 802122a:	f849 1b04 	str.w	r1, [r9], #4
 802122e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8021232:	d8e4      	bhi.n	80211fe <__multiply+0xaa>
 8021234:	9901      	ldr	r1, [sp, #4]
 8021236:	5072      	str	r2, [r6, r1]
 8021238:	9a03      	ldr	r2, [sp, #12]
 802123a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802123e:	3304      	adds	r3, #4
 8021240:	f1b9 0f00 	cmp.w	r9, #0
 8021244:	d01f      	beq.n	8021286 <__multiply+0x132>
 8021246:	6834      	ldr	r4, [r6, #0]
 8021248:	f105 0114 	add.w	r1, r5, #20
 802124c:	46b6      	mov	lr, r6
 802124e:	f04f 0a00 	mov.w	sl, #0
 8021252:	880a      	ldrh	r2, [r1, #0]
 8021254:	f8be b002 	ldrh.w	fp, [lr, #2]
 8021258:	fb09 b202 	mla	r2, r9, r2, fp
 802125c:	4492      	add	sl, r2
 802125e:	b2a4      	uxth	r4, r4
 8021260:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8021264:	f84e 4b04 	str.w	r4, [lr], #4
 8021268:	f851 4b04 	ldr.w	r4, [r1], #4
 802126c:	f8be 2000 	ldrh.w	r2, [lr]
 8021270:	0c24      	lsrs	r4, r4, #16
 8021272:	fb09 2404 	mla	r4, r9, r4, r2
 8021276:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802127a:	458c      	cmp	ip, r1
 802127c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021280:	d8e7      	bhi.n	8021252 <__multiply+0xfe>
 8021282:	9a01      	ldr	r2, [sp, #4]
 8021284:	50b4      	str	r4, [r6, r2]
 8021286:	3604      	adds	r6, #4
 8021288:	e7a3      	b.n	80211d2 <__multiply+0x7e>
 802128a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802128e:	2b00      	cmp	r3, #0
 8021290:	d1a5      	bne.n	80211de <__multiply+0x8a>
 8021292:	3f01      	subs	r7, #1
 8021294:	e7a1      	b.n	80211da <__multiply+0x86>
 8021296:	bf00      	nop
 8021298:	08022dc8 	.word	0x08022dc8
 802129c:	08022e58 	.word	0x08022e58

080212a0 <__pow5mult>:
 80212a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212a4:	4615      	mov	r5, r2
 80212a6:	f012 0203 	ands.w	r2, r2, #3
 80212aa:	4606      	mov	r6, r0
 80212ac:	460f      	mov	r7, r1
 80212ae:	d007      	beq.n	80212c0 <__pow5mult+0x20>
 80212b0:	4c25      	ldr	r4, [pc, #148]	; (8021348 <__pow5mult+0xa8>)
 80212b2:	3a01      	subs	r2, #1
 80212b4:	2300      	movs	r3, #0
 80212b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80212ba:	f7ff fe51 	bl	8020f60 <__multadd>
 80212be:	4607      	mov	r7, r0
 80212c0:	10ad      	asrs	r5, r5, #2
 80212c2:	d03d      	beq.n	8021340 <__pow5mult+0xa0>
 80212c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80212c6:	b97c      	cbnz	r4, 80212e8 <__pow5mult+0x48>
 80212c8:	2010      	movs	r0, #16
 80212ca:	f7fc fdab 	bl	801de24 <malloc>
 80212ce:	4602      	mov	r2, r0
 80212d0:	6270      	str	r0, [r6, #36]	; 0x24
 80212d2:	b928      	cbnz	r0, 80212e0 <__pow5mult+0x40>
 80212d4:	4b1d      	ldr	r3, [pc, #116]	; (802134c <__pow5mult+0xac>)
 80212d6:	481e      	ldr	r0, [pc, #120]	; (8021350 <__pow5mult+0xb0>)
 80212d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80212dc:	f000 fc1e 	bl	8021b1c <__assert_func>
 80212e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80212e4:	6004      	str	r4, [r0, #0]
 80212e6:	60c4      	str	r4, [r0, #12]
 80212e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80212ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80212f0:	b94c      	cbnz	r4, 8021306 <__pow5mult+0x66>
 80212f2:	f240 2171 	movw	r1, #625	; 0x271
 80212f6:	4630      	mov	r0, r6
 80212f8:	f7ff ff16 	bl	8021128 <__i2b>
 80212fc:	2300      	movs	r3, #0
 80212fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8021302:	4604      	mov	r4, r0
 8021304:	6003      	str	r3, [r0, #0]
 8021306:	f04f 0900 	mov.w	r9, #0
 802130a:	07eb      	lsls	r3, r5, #31
 802130c:	d50a      	bpl.n	8021324 <__pow5mult+0x84>
 802130e:	4639      	mov	r1, r7
 8021310:	4622      	mov	r2, r4
 8021312:	4630      	mov	r0, r6
 8021314:	f7ff ff1e 	bl	8021154 <__multiply>
 8021318:	4639      	mov	r1, r7
 802131a:	4680      	mov	r8, r0
 802131c:	4630      	mov	r0, r6
 802131e:	f7ff fdfd 	bl	8020f1c <_Bfree>
 8021322:	4647      	mov	r7, r8
 8021324:	106d      	asrs	r5, r5, #1
 8021326:	d00b      	beq.n	8021340 <__pow5mult+0xa0>
 8021328:	6820      	ldr	r0, [r4, #0]
 802132a:	b938      	cbnz	r0, 802133c <__pow5mult+0x9c>
 802132c:	4622      	mov	r2, r4
 802132e:	4621      	mov	r1, r4
 8021330:	4630      	mov	r0, r6
 8021332:	f7ff ff0f 	bl	8021154 <__multiply>
 8021336:	6020      	str	r0, [r4, #0]
 8021338:	f8c0 9000 	str.w	r9, [r0]
 802133c:	4604      	mov	r4, r0
 802133e:	e7e4      	b.n	802130a <__pow5mult+0x6a>
 8021340:	4638      	mov	r0, r7
 8021342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021346:	bf00      	nop
 8021348:	08022fa8 	.word	0x08022fa8
 802134c:	08022d52 	.word	0x08022d52
 8021350:	08022e58 	.word	0x08022e58

08021354 <__lshift>:
 8021354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021358:	460c      	mov	r4, r1
 802135a:	6849      	ldr	r1, [r1, #4]
 802135c:	6923      	ldr	r3, [r4, #16]
 802135e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021362:	68a3      	ldr	r3, [r4, #8]
 8021364:	4607      	mov	r7, r0
 8021366:	4691      	mov	r9, r2
 8021368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802136c:	f108 0601 	add.w	r6, r8, #1
 8021370:	42b3      	cmp	r3, r6
 8021372:	db0b      	blt.n	802138c <__lshift+0x38>
 8021374:	4638      	mov	r0, r7
 8021376:	f7ff fd91 	bl	8020e9c <_Balloc>
 802137a:	4605      	mov	r5, r0
 802137c:	b948      	cbnz	r0, 8021392 <__lshift+0x3e>
 802137e:	4602      	mov	r2, r0
 8021380:	4b28      	ldr	r3, [pc, #160]	; (8021424 <__lshift+0xd0>)
 8021382:	4829      	ldr	r0, [pc, #164]	; (8021428 <__lshift+0xd4>)
 8021384:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021388:	f000 fbc8 	bl	8021b1c <__assert_func>
 802138c:	3101      	adds	r1, #1
 802138e:	005b      	lsls	r3, r3, #1
 8021390:	e7ee      	b.n	8021370 <__lshift+0x1c>
 8021392:	2300      	movs	r3, #0
 8021394:	f100 0114 	add.w	r1, r0, #20
 8021398:	f100 0210 	add.w	r2, r0, #16
 802139c:	4618      	mov	r0, r3
 802139e:	4553      	cmp	r3, sl
 80213a0:	db33      	blt.n	802140a <__lshift+0xb6>
 80213a2:	6920      	ldr	r0, [r4, #16]
 80213a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80213a8:	f104 0314 	add.w	r3, r4, #20
 80213ac:	f019 091f 	ands.w	r9, r9, #31
 80213b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80213b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80213b8:	d02b      	beq.n	8021412 <__lshift+0xbe>
 80213ba:	f1c9 0e20 	rsb	lr, r9, #32
 80213be:	468a      	mov	sl, r1
 80213c0:	2200      	movs	r2, #0
 80213c2:	6818      	ldr	r0, [r3, #0]
 80213c4:	fa00 f009 	lsl.w	r0, r0, r9
 80213c8:	4302      	orrs	r2, r0
 80213ca:	f84a 2b04 	str.w	r2, [sl], #4
 80213ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80213d2:	459c      	cmp	ip, r3
 80213d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80213d8:	d8f3      	bhi.n	80213c2 <__lshift+0x6e>
 80213da:	ebac 0304 	sub.w	r3, ip, r4
 80213de:	3b15      	subs	r3, #21
 80213e0:	f023 0303 	bic.w	r3, r3, #3
 80213e4:	3304      	adds	r3, #4
 80213e6:	f104 0015 	add.w	r0, r4, #21
 80213ea:	4584      	cmp	ip, r0
 80213ec:	bf38      	it	cc
 80213ee:	2304      	movcc	r3, #4
 80213f0:	50ca      	str	r2, [r1, r3]
 80213f2:	b10a      	cbz	r2, 80213f8 <__lshift+0xa4>
 80213f4:	f108 0602 	add.w	r6, r8, #2
 80213f8:	3e01      	subs	r6, #1
 80213fa:	4638      	mov	r0, r7
 80213fc:	612e      	str	r6, [r5, #16]
 80213fe:	4621      	mov	r1, r4
 8021400:	f7ff fd8c 	bl	8020f1c <_Bfree>
 8021404:	4628      	mov	r0, r5
 8021406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802140a:	f842 0f04 	str.w	r0, [r2, #4]!
 802140e:	3301      	adds	r3, #1
 8021410:	e7c5      	b.n	802139e <__lshift+0x4a>
 8021412:	3904      	subs	r1, #4
 8021414:	f853 2b04 	ldr.w	r2, [r3], #4
 8021418:	f841 2f04 	str.w	r2, [r1, #4]!
 802141c:	459c      	cmp	ip, r3
 802141e:	d8f9      	bhi.n	8021414 <__lshift+0xc0>
 8021420:	e7ea      	b.n	80213f8 <__lshift+0xa4>
 8021422:	bf00      	nop
 8021424:	08022dc8 	.word	0x08022dc8
 8021428:	08022e58 	.word	0x08022e58

0802142c <__mcmp>:
 802142c:	b530      	push	{r4, r5, lr}
 802142e:	6902      	ldr	r2, [r0, #16]
 8021430:	690c      	ldr	r4, [r1, #16]
 8021432:	1b12      	subs	r2, r2, r4
 8021434:	d10e      	bne.n	8021454 <__mcmp+0x28>
 8021436:	f100 0314 	add.w	r3, r0, #20
 802143a:	3114      	adds	r1, #20
 802143c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021440:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021444:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021448:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802144c:	42a5      	cmp	r5, r4
 802144e:	d003      	beq.n	8021458 <__mcmp+0x2c>
 8021450:	d305      	bcc.n	802145e <__mcmp+0x32>
 8021452:	2201      	movs	r2, #1
 8021454:	4610      	mov	r0, r2
 8021456:	bd30      	pop	{r4, r5, pc}
 8021458:	4283      	cmp	r3, r0
 802145a:	d3f3      	bcc.n	8021444 <__mcmp+0x18>
 802145c:	e7fa      	b.n	8021454 <__mcmp+0x28>
 802145e:	f04f 32ff 	mov.w	r2, #4294967295
 8021462:	e7f7      	b.n	8021454 <__mcmp+0x28>

08021464 <__mdiff>:
 8021464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021468:	460c      	mov	r4, r1
 802146a:	4606      	mov	r6, r0
 802146c:	4611      	mov	r1, r2
 802146e:	4620      	mov	r0, r4
 8021470:	4617      	mov	r7, r2
 8021472:	f7ff ffdb 	bl	802142c <__mcmp>
 8021476:	1e05      	subs	r5, r0, #0
 8021478:	d110      	bne.n	802149c <__mdiff+0x38>
 802147a:	4629      	mov	r1, r5
 802147c:	4630      	mov	r0, r6
 802147e:	f7ff fd0d 	bl	8020e9c <_Balloc>
 8021482:	b930      	cbnz	r0, 8021492 <__mdiff+0x2e>
 8021484:	4b39      	ldr	r3, [pc, #228]	; (802156c <__mdiff+0x108>)
 8021486:	4602      	mov	r2, r0
 8021488:	f240 2132 	movw	r1, #562	; 0x232
 802148c:	4838      	ldr	r0, [pc, #224]	; (8021570 <__mdiff+0x10c>)
 802148e:	f000 fb45 	bl	8021b1c <__assert_func>
 8021492:	2301      	movs	r3, #1
 8021494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802149c:	bfa4      	itt	ge
 802149e:	463b      	movge	r3, r7
 80214a0:	4627      	movge	r7, r4
 80214a2:	4630      	mov	r0, r6
 80214a4:	6879      	ldr	r1, [r7, #4]
 80214a6:	bfa6      	itte	ge
 80214a8:	461c      	movge	r4, r3
 80214aa:	2500      	movge	r5, #0
 80214ac:	2501      	movlt	r5, #1
 80214ae:	f7ff fcf5 	bl	8020e9c <_Balloc>
 80214b2:	b920      	cbnz	r0, 80214be <__mdiff+0x5a>
 80214b4:	4b2d      	ldr	r3, [pc, #180]	; (802156c <__mdiff+0x108>)
 80214b6:	4602      	mov	r2, r0
 80214b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80214bc:	e7e6      	b.n	802148c <__mdiff+0x28>
 80214be:	693e      	ldr	r6, [r7, #16]
 80214c0:	60c5      	str	r5, [r0, #12]
 80214c2:	6925      	ldr	r5, [r4, #16]
 80214c4:	f107 0114 	add.w	r1, r7, #20
 80214c8:	f104 0914 	add.w	r9, r4, #20
 80214cc:	f100 0e14 	add.w	lr, r0, #20
 80214d0:	f107 0210 	add.w	r2, r7, #16
 80214d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80214d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80214dc:	46f2      	mov	sl, lr
 80214de:	2700      	movs	r7, #0
 80214e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80214e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80214e8:	fa1f f883 	uxth.w	r8, r3
 80214ec:	fa17 f78b 	uxtah	r7, r7, fp
 80214f0:	0c1b      	lsrs	r3, r3, #16
 80214f2:	eba7 0808 	sub.w	r8, r7, r8
 80214f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80214fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80214fe:	fa1f f888 	uxth.w	r8, r8
 8021502:	141f      	asrs	r7, r3, #16
 8021504:	454d      	cmp	r5, r9
 8021506:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802150a:	f84a 3b04 	str.w	r3, [sl], #4
 802150e:	d8e7      	bhi.n	80214e0 <__mdiff+0x7c>
 8021510:	1b2b      	subs	r3, r5, r4
 8021512:	3b15      	subs	r3, #21
 8021514:	f023 0303 	bic.w	r3, r3, #3
 8021518:	3304      	adds	r3, #4
 802151a:	3415      	adds	r4, #21
 802151c:	42a5      	cmp	r5, r4
 802151e:	bf38      	it	cc
 8021520:	2304      	movcc	r3, #4
 8021522:	4419      	add	r1, r3
 8021524:	4473      	add	r3, lr
 8021526:	469e      	mov	lr, r3
 8021528:	460d      	mov	r5, r1
 802152a:	4565      	cmp	r5, ip
 802152c:	d30e      	bcc.n	802154c <__mdiff+0xe8>
 802152e:	f10c 0203 	add.w	r2, ip, #3
 8021532:	1a52      	subs	r2, r2, r1
 8021534:	f022 0203 	bic.w	r2, r2, #3
 8021538:	3903      	subs	r1, #3
 802153a:	458c      	cmp	ip, r1
 802153c:	bf38      	it	cc
 802153e:	2200      	movcc	r2, #0
 8021540:	441a      	add	r2, r3
 8021542:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021546:	b17b      	cbz	r3, 8021568 <__mdiff+0x104>
 8021548:	6106      	str	r6, [r0, #16]
 802154a:	e7a5      	b.n	8021498 <__mdiff+0x34>
 802154c:	f855 8b04 	ldr.w	r8, [r5], #4
 8021550:	fa17 f488 	uxtah	r4, r7, r8
 8021554:	1422      	asrs	r2, r4, #16
 8021556:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802155a:	b2a4      	uxth	r4, r4
 802155c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8021560:	f84e 4b04 	str.w	r4, [lr], #4
 8021564:	1417      	asrs	r7, r2, #16
 8021566:	e7e0      	b.n	802152a <__mdiff+0xc6>
 8021568:	3e01      	subs	r6, #1
 802156a:	e7ea      	b.n	8021542 <__mdiff+0xde>
 802156c:	08022dc8 	.word	0x08022dc8
 8021570:	08022e58 	.word	0x08022e58

08021574 <__ulp>:
 8021574:	b082      	sub	sp, #8
 8021576:	ed8d 0b00 	vstr	d0, [sp]
 802157a:	9b01      	ldr	r3, [sp, #4]
 802157c:	4912      	ldr	r1, [pc, #72]	; (80215c8 <__ulp+0x54>)
 802157e:	4019      	ands	r1, r3
 8021580:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8021584:	2900      	cmp	r1, #0
 8021586:	dd05      	ble.n	8021594 <__ulp+0x20>
 8021588:	2200      	movs	r2, #0
 802158a:	460b      	mov	r3, r1
 802158c:	ec43 2b10 	vmov	d0, r2, r3
 8021590:	b002      	add	sp, #8
 8021592:	4770      	bx	lr
 8021594:	4249      	negs	r1, r1
 8021596:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802159a:	ea4f 5021 	mov.w	r0, r1, asr #20
 802159e:	f04f 0200 	mov.w	r2, #0
 80215a2:	f04f 0300 	mov.w	r3, #0
 80215a6:	da04      	bge.n	80215b2 <__ulp+0x3e>
 80215a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80215ac:	fa41 f300 	asr.w	r3, r1, r0
 80215b0:	e7ec      	b.n	802158c <__ulp+0x18>
 80215b2:	f1a0 0114 	sub.w	r1, r0, #20
 80215b6:	291e      	cmp	r1, #30
 80215b8:	bfda      	itte	le
 80215ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80215be:	fa20 f101 	lsrle.w	r1, r0, r1
 80215c2:	2101      	movgt	r1, #1
 80215c4:	460a      	mov	r2, r1
 80215c6:	e7e1      	b.n	802158c <__ulp+0x18>
 80215c8:	7ff00000 	.word	0x7ff00000

080215cc <__b2d>:
 80215cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215ce:	6905      	ldr	r5, [r0, #16]
 80215d0:	f100 0714 	add.w	r7, r0, #20
 80215d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80215d8:	1f2e      	subs	r6, r5, #4
 80215da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80215de:	4620      	mov	r0, r4
 80215e0:	f7ff fd52 	bl	8021088 <__hi0bits>
 80215e4:	f1c0 0320 	rsb	r3, r0, #32
 80215e8:	280a      	cmp	r0, #10
 80215ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8021668 <__b2d+0x9c>
 80215ee:	600b      	str	r3, [r1, #0]
 80215f0:	dc14      	bgt.n	802161c <__b2d+0x50>
 80215f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80215f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80215fa:	42b7      	cmp	r7, r6
 80215fc:	ea41 030c 	orr.w	r3, r1, ip
 8021600:	bf34      	ite	cc
 8021602:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021606:	2100      	movcs	r1, #0
 8021608:	3015      	adds	r0, #21
 802160a:	fa04 f000 	lsl.w	r0, r4, r0
 802160e:	fa21 f10e 	lsr.w	r1, r1, lr
 8021612:	ea40 0201 	orr.w	r2, r0, r1
 8021616:	ec43 2b10 	vmov	d0, r2, r3
 802161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802161c:	42b7      	cmp	r7, r6
 802161e:	bf3a      	itte	cc
 8021620:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021624:	f1a5 0608 	subcc.w	r6, r5, #8
 8021628:	2100      	movcs	r1, #0
 802162a:	380b      	subs	r0, #11
 802162c:	d017      	beq.n	802165e <__b2d+0x92>
 802162e:	f1c0 0c20 	rsb	ip, r0, #32
 8021632:	fa04 f500 	lsl.w	r5, r4, r0
 8021636:	42be      	cmp	r6, r7
 8021638:	fa21 f40c 	lsr.w	r4, r1, ip
 802163c:	ea45 0504 	orr.w	r5, r5, r4
 8021640:	bf8c      	ite	hi
 8021642:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8021646:	2400      	movls	r4, #0
 8021648:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802164c:	fa01 f000 	lsl.w	r0, r1, r0
 8021650:	fa24 f40c 	lsr.w	r4, r4, ip
 8021654:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021658:	ea40 0204 	orr.w	r2, r0, r4
 802165c:	e7db      	b.n	8021616 <__b2d+0x4a>
 802165e:	ea44 030c 	orr.w	r3, r4, ip
 8021662:	460a      	mov	r2, r1
 8021664:	e7d7      	b.n	8021616 <__b2d+0x4a>
 8021666:	bf00      	nop
 8021668:	3ff00000 	.word	0x3ff00000

0802166c <__d2b>:
 802166c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021670:	4689      	mov	r9, r1
 8021672:	2101      	movs	r1, #1
 8021674:	ec57 6b10 	vmov	r6, r7, d0
 8021678:	4690      	mov	r8, r2
 802167a:	f7ff fc0f 	bl	8020e9c <_Balloc>
 802167e:	4604      	mov	r4, r0
 8021680:	b930      	cbnz	r0, 8021690 <__d2b+0x24>
 8021682:	4602      	mov	r2, r0
 8021684:	4b25      	ldr	r3, [pc, #148]	; (802171c <__d2b+0xb0>)
 8021686:	4826      	ldr	r0, [pc, #152]	; (8021720 <__d2b+0xb4>)
 8021688:	f240 310a 	movw	r1, #778	; 0x30a
 802168c:	f000 fa46 	bl	8021b1c <__assert_func>
 8021690:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021694:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021698:	bb35      	cbnz	r5, 80216e8 <__d2b+0x7c>
 802169a:	2e00      	cmp	r6, #0
 802169c:	9301      	str	r3, [sp, #4]
 802169e:	d028      	beq.n	80216f2 <__d2b+0x86>
 80216a0:	4668      	mov	r0, sp
 80216a2:	9600      	str	r6, [sp, #0]
 80216a4:	f7ff fd10 	bl	80210c8 <__lo0bits>
 80216a8:	9900      	ldr	r1, [sp, #0]
 80216aa:	b300      	cbz	r0, 80216ee <__d2b+0x82>
 80216ac:	9a01      	ldr	r2, [sp, #4]
 80216ae:	f1c0 0320 	rsb	r3, r0, #32
 80216b2:	fa02 f303 	lsl.w	r3, r2, r3
 80216b6:	430b      	orrs	r3, r1
 80216b8:	40c2      	lsrs	r2, r0
 80216ba:	6163      	str	r3, [r4, #20]
 80216bc:	9201      	str	r2, [sp, #4]
 80216be:	9b01      	ldr	r3, [sp, #4]
 80216c0:	61a3      	str	r3, [r4, #24]
 80216c2:	2b00      	cmp	r3, #0
 80216c4:	bf14      	ite	ne
 80216c6:	2202      	movne	r2, #2
 80216c8:	2201      	moveq	r2, #1
 80216ca:	6122      	str	r2, [r4, #16]
 80216cc:	b1d5      	cbz	r5, 8021704 <__d2b+0x98>
 80216ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80216d2:	4405      	add	r5, r0
 80216d4:	f8c9 5000 	str.w	r5, [r9]
 80216d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80216dc:	f8c8 0000 	str.w	r0, [r8]
 80216e0:	4620      	mov	r0, r4
 80216e2:	b003      	add	sp, #12
 80216e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80216e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80216ec:	e7d5      	b.n	802169a <__d2b+0x2e>
 80216ee:	6161      	str	r1, [r4, #20]
 80216f0:	e7e5      	b.n	80216be <__d2b+0x52>
 80216f2:	a801      	add	r0, sp, #4
 80216f4:	f7ff fce8 	bl	80210c8 <__lo0bits>
 80216f8:	9b01      	ldr	r3, [sp, #4]
 80216fa:	6163      	str	r3, [r4, #20]
 80216fc:	2201      	movs	r2, #1
 80216fe:	6122      	str	r2, [r4, #16]
 8021700:	3020      	adds	r0, #32
 8021702:	e7e3      	b.n	80216cc <__d2b+0x60>
 8021704:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021708:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802170c:	f8c9 0000 	str.w	r0, [r9]
 8021710:	6918      	ldr	r0, [r3, #16]
 8021712:	f7ff fcb9 	bl	8021088 <__hi0bits>
 8021716:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802171a:	e7df      	b.n	80216dc <__d2b+0x70>
 802171c:	08022dc8 	.word	0x08022dc8
 8021720:	08022e58 	.word	0x08022e58

08021724 <__ratio>:
 8021724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021728:	4688      	mov	r8, r1
 802172a:	4669      	mov	r1, sp
 802172c:	4681      	mov	r9, r0
 802172e:	f7ff ff4d 	bl	80215cc <__b2d>
 8021732:	a901      	add	r1, sp, #4
 8021734:	4640      	mov	r0, r8
 8021736:	ec55 4b10 	vmov	r4, r5, d0
 802173a:	f7ff ff47 	bl	80215cc <__b2d>
 802173e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021742:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8021746:	eba3 0c02 	sub.w	ip, r3, r2
 802174a:	e9dd 3200 	ldrd	r3, r2, [sp]
 802174e:	1a9b      	subs	r3, r3, r2
 8021750:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8021754:	ec51 0b10 	vmov	r0, r1, d0
 8021758:	2b00      	cmp	r3, #0
 802175a:	bfd6      	itet	le
 802175c:	460a      	movle	r2, r1
 802175e:	462a      	movgt	r2, r5
 8021760:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8021764:	468b      	mov	fp, r1
 8021766:	462f      	mov	r7, r5
 8021768:	bfd4      	ite	le
 802176a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802176e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8021772:	4620      	mov	r0, r4
 8021774:	ee10 2a10 	vmov	r2, s0
 8021778:	465b      	mov	r3, fp
 802177a:	4639      	mov	r1, r7
 802177c:	f7df f88e 	bl	800089c <__aeabi_ddiv>
 8021780:	ec41 0b10 	vmov	d0, r0, r1
 8021784:	b003      	add	sp, #12
 8021786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802178a <__copybits>:
 802178a:	3901      	subs	r1, #1
 802178c:	b570      	push	{r4, r5, r6, lr}
 802178e:	1149      	asrs	r1, r1, #5
 8021790:	6914      	ldr	r4, [r2, #16]
 8021792:	3101      	adds	r1, #1
 8021794:	f102 0314 	add.w	r3, r2, #20
 8021798:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802179c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80217a0:	1f05      	subs	r5, r0, #4
 80217a2:	42a3      	cmp	r3, r4
 80217a4:	d30c      	bcc.n	80217c0 <__copybits+0x36>
 80217a6:	1aa3      	subs	r3, r4, r2
 80217a8:	3b11      	subs	r3, #17
 80217aa:	f023 0303 	bic.w	r3, r3, #3
 80217ae:	3211      	adds	r2, #17
 80217b0:	42a2      	cmp	r2, r4
 80217b2:	bf88      	it	hi
 80217b4:	2300      	movhi	r3, #0
 80217b6:	4418      	add	r0, r3
 80217b8:	2300      	movs	r3, #0
 80217ba:	4288      	cmp	r0, r1
 80217bc:	d305      	bcc.n	80217ca <__copybits+0x40>
 80217be:	bd70      	pop	{r4, r5, r6, pc}
 80217c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80217c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80217c8:	e7eb      	b.n	80217a2 <__copybits+0x18>
 80217ca:	f840 3b04 	str.w	r3, [r0], #4
 80217ce:	e7f4      	b.n	80217ba <__copybits+0x30>

080217d0 <__any_on>:
 80217d0:	f100 0214 	add.w	r2, r0, #20
 80217d4:	6900      	ldr	r0, [r0, #16]
 80217d6:	114b      	asrs	r3, r1, #5
 80217d8:	4298      	cmp	r0, r3
 80217da:	b510      	push	{r4, lr}
 80217dc:	db11      	blt.n	8021802 <__any_on+0x32>
 80217de:	dd0a      	ble.n	80217f6 <__any_on+0x26>
 80217e0:	f011 011f 	ands.w	r1, r1, #31
 80217e4:	d007      	beq.n	80217f6 <__any_on+0x26>
 80217e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80217ea:	fa24 f001 	lsr.w	r0, r4, r1
 80217ee:	fa00 f101 	lsl.w	r1, r0, r1
 80217f2:	428c      	cmp	r4, r1
 80217f4:	d10b      	bne.n	802180e <__any_on+0x3e>
 80217f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80217fa:	4293      	cmp	r3, r2
 80217fc:	d803      	bhi.n	8021806 <__any_on+0x36>
 80217fe:	2000      	movs	r0, #0
 8021800:	bd10      	pop	{r4, pc}
 8021802:	4603      	mov	r3, r0
 8021804:	e7f7      	b.n	80217f6 <__any_on+0x26>
 8021806:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802180a:	2900      	cmp	r1, #0
 802180c:	d0f5      	beq.n	80217fa <__any_on+0x2a>
 802180e:	2001      	movs	r0, #1
 8021810:	e7f6      	b.n	8021800 <__any_on+0x30>

08021812 <__ssputs_r>:
 8021812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021816:	688e      	ldr	r6, [r1, #8]
 8021818:	429e      	cmp	r6, r3
 802181a:	4682      	mov	sl, r0
 802181c:	460c      	mov	r4, r1
 802181e:	4690      	mov	r8, r2
 8021820:	461f      	mov	r7, r3
 8021822:	d838      	bhi.n	8021896 <__ssputs_r+0x84>
 8021824:	898a      	ldrh	r2, [r1, #12]
 8021826:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802182a:	d032      	beq.n	8021892 <__ssputs_r+0x80>
 802182c:	6825      	ldr	r5, [r4, #0]
 802182e:	6909      	ldr	r1, [r1, #16]
 8021830:	eba5 0901 	sub.w	r9, r5, r1
 8021834:	6965      	ldr	r5, [r4, #20]
 8021836:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802183a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802183e:	3301      	adds	r3, #1
 8021840:	444b      	add	r3, r9
 8021842:	106d      	asrs	r5, r5, #1
 8021844:	429d      	cmp	r5, r3
 8021846:	bf38      	it	cc
 8021848:	461d      	movcc	r5, r3
 802184a:	0553      	lsls	r3, r2, #21
 802184c:	d531      	bpl.n	80218b2 <__ssputs_r+0xa0>
 802184e:	4629      	mov	r1, r5
 8021850:	f7fc fb88 	bl	801df64 <_malloc_r>
 8021854:	4606      	mov	r6, r0
 8021856:	b950      	cbnz	r0, 802186e <__ssputs_r+0x5c>
 8021858:	230c      	movs	r3, #12
 802185a:	f8ca 3000 	str.w	r3, [sl]
 802185e:	89a3      	ldrh	r3, [r4, #12]
 8021860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021864:	81a3      	strh	r3, [r4, #12]
 8021866:	f04f 30ff 	mov.w	r0, #4294967295
 802186a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802186e:	6921      	ldr	r1, [r4, #16]
 8021870:	464a      	mov	r2, r9
 8021872:	f7fc fae7 	bl	801de44 <memcpy>
 8021876:	89a3      	ldrh	r3, [r4, #12]
 8021878:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021880:	81a3      	strh	r3, [r4, #12]
 8021882:	6126      	str	r6, [r4, #16]
 8021884:	6165      	str	r5, [r4, #20]
 8021886:	444e      	add	r6, r9
 8021888:	eba5 0509 	sub.w	r5, r5, r9
 802188c:	6026      	str	r6, [r4, #0]
 802188e:	60a5      	str	r5, [r4, #8]
 8021890:	463e      	mov	r6, r7
 8021892:	42be      	cmp	r6, r7
 8021894:	d900      	bls.n	8021898 <__ssputs_r+0x86>
 8021896:	463e      	mov	r6, r7
 8021898:	4632      	mov	r2, r6
 802189a:	6820      	ldr	r0, [r4, #0]
 802189c:	4641      	mov	r1, r8
 802189e:	f7fc fadf 	bl	801de60 <memmove>
 80218a2:	68a3      	ldr	r3, [r4, #8]
 80218a4:	6822      	ldr	r2, [r4, #0]
 80218a6:	1b9b      	subs	r3, r3, r6
 80218a8:	4432      	add	r2, r6
 80218aa:	60a3      	str	r3, [r4, #8]
 80218ac:	6022      	str	r2, [r4, #0]
 80218ae:	2000      	movs	r0, #0
 80218b0:	e7db      	b.n	802186a <__ssputs_r+0x58>
 80218b2:	462a      	mov	r2, r5
 80218b4:	f000 f962 	bl	8021b7c <_realloc_r>
 80218b8:	4606      	mov	r6, r0
 80218ba:	2800      	cmp	r0, #0
 80218bc:	d1e1      	bne.n	8021882 <__ssputs_r+0x70>
 80218be:	6921      	ldr	r1, [r4, #16]
 80218c0:	4650      	mov	r0, sl
 80218c2:	f7fc faff 	bl	801dec4 <_free_r>
 80218c6:	e7c7      	b.n	8021858 <__ssputs_r+0x46>

080218c8 <_svfiprintf_r>:
 80218c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218cc:	4698      	mov	r8, r3
 80218ce:	898b      	ldrh	r3, [r1, #12]
 80218d0:	061b      	lsls	r3, r3, #24
 80218d2:	b09d      	sub	sp, #116	; 0x74
 80218d4:	4607      	mov	r7, r0
 80218d6:	460d      	mov	r5, r1
 80218d8:	4614      	mov	r4, r2
 80218da:	d50e      	bpl.n	80218fa <_svfiprintf_r+0x32>
 80218dc:	690b      	ldr	r3, [r1, #16]
 80218de:	b963      	cbnz	r3, 80218fa <_svfiprintf_r+0x32>
 80218e0:	2140      	movs	r1, #64	; 0x40
 80218e2:	f7fc fb3f 	bl	801df64 <_malloc_r>
 80218e6:	6028      	str	r0, [r5, #0]
 80218e8:	6128      	str	r0, [r5, #16]
 80218ea:	b920      	cbnz	r0, 80218f6 <_svfiprintf_r+0x2e>
 80218ec:	230c      	movs	r3, #12
 80218ee:	603b      	str	r3, [r7, #0]
 80218f0:	f04f 30ff 	mov.w	r0, #4294967295
 80218f4:	e0d1      	b.n	8021a9a <_svfiprintf_r+0x1d2>
 80218f6:	2340      	movs	r3, #64	; 0x40
 80218f8:	616b      	str	r3, [r5, #20]
 80218fa:	2300      	movs	r3, #0
 80218fc:	9309      	str	r3, [sp, #36]	; 0x24
 80218fe:	2320      	movs	r3, #32
 8021900:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021904:	f8cd 800c 	str.w	r8, [sp, #12]
 8021908:	2330      	movs	r3, #48	; 0x30
 802190a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021ab4 <_svfiprintf_r+0x1ec>
 802190e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021912:	f04f 0901 	mov.w	r9, #1
 8021916:	4623      	mov	r3, r4
 8021918:	469a      	mov	sl, r3
 802191a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802191e:	b10a      	cbz	r2, 8021924 <_svfiprintf_r+0x5c>
 8021920:	2a25      	cmp	r2, #37	; 0x25
 8021922:	d1f9      	bne.n	8021918 <_svfiprintf_r+0x50>
 8021924:	ebba 0b04 	subs.w	fp, sl, r4
 8021928:	d00b      	beq.n	8021942 <_svfiprintf_r+0x7a>
 802192a:	465b      	mov	r3, fp
 802192c:	4622      	mov	r2, r4
 802192e:	4629      	mov	r1, r5
 8021930:	4638      	mov	r0, r7
 8021932:	f7ff ff6e 	bl	8021812 <__ssputs_r>
 8021936:	3001      	adds	r0, #1
 8021938:	f000 80aa 	beq.w	8021a90 <_svfiprintf_r+0x1c8>
 802193c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802193e:	445a      	add	r2, fp
 8021940:	9209      	str	r2, [sp, #36]	; 0x24
 8021942:	f89a 3000 	ldrb.w	r3, [sl]
 8021946:	2b00      	cmp	r3, #0
 8021948:	f000 80a2 	beq.w	8021a90 <_svfiprintf_r+0x1c8>
 802194c:	2300      	movs	r3, #0
 802194e:	f04f 32ff 	mov.w	r2, #4294967295
 8021952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021956:	f10a 0a01 	add.w	sl, sl, #1
 802195a:	9304      	str	r3, [sp, #16]
 802195c:	9307      	str	r3, [sp, #28]
 802195e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021962:	931a      	str	r3, [sp, #104]	; 0x68
 8021964:	4654      	mov	r4, sl
 8021966:	2205      	movs	r2, #5
 8021968:	f814 1b01 	ldrb.w	r1, [r4], #1
 802196c:	4851      	ldr	r0, [pc, #324]	; (8021ab4 <_svfiprintf_r+0x1ec>)
 802196e:	f7de fc5f 	bl	8000230 <memchr>
 8021972:	9a04      	ldr	r2, [sp, #16]
 8021974:	b9d8      	cbnz	r0, 80219ae <_svfiprintf_r+0xe6>
 8021976:	06d0      	lsls	r0, r2, #27
 8021978:	bf44      	itt	mi
 802197a:	2320      	movmi	r3, #32
 802197c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021980:	0711      	lsls	r1, r2, #28
 8021982:	bf44      	itt	mi
 8021984:	232b      	movmi	r3, #43	; 0x2b
 8021986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802198a:	f89a 3000 	ldrb.w	r3, [sl]
 802198e:	2b2a      	cmp	r3, #42	; 0x2a
 8021990:	d015      	beq.n	80219be <_svfiprintf_r+0xf6>
 8021992:	9a07      	ldr	r2, [sp, #28]
 8021994:	4654      	mov	r4, sl
 8021996:	2000      	movs	r0, #0
 8021998:	f04f 0c0a 	mov.w	ip, #10
 802199c:	4621      	mov	r1, r4
 802199e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80219a2:	3b30      	subs	r3, #48	; 0x30
 80219a4:	2b09      	cmp	r3, #9
 80219a6:	d94e      	bls.n	8021a46 <_svfiprintf_r+0x17e>
 80219a8:	b1b0      	cbz	r0, 80219d8 <_svfiprintf_r+0x110>
 80219aa:	9207      	str	r2, [sp, #28]
 80219ac:	e014      	b.n	80219d8 <_svfiprintf_r+0x110>
 80219ae:	eba0 0308 	sub.w	r3, r0, r8
 80219b2:	fa09 f303 	lsl.w	r3, r9, r3
 80219b6:	4313      	orrs	r3, r2
 80219b8:	9304      	str	r3, [sp, #16]
 80219ba:	46a2      	mov	sl, r4
 80219bc:	e7d2      	b.n	8021964 <_svfiprintf_r+0x9c>
 80219be:	9b03      	ldr	r3, [sp, #12]
 80219c0:	1d19      	adds	r1, r3, #4
 80219c2:	681b      	ldr	r3, [r3, #0]
 80219c4:	9103      	str	r1, [sp, #12]
 80219c6:	2b00      	cmp	r3, #0
 80219c8:	bfbb      	ittet	lt
 80219ca:	425b      	neglt	r3, r3
 80219cc:	f042 0202 	orrlt.w	r2, r2, #2
 80219d0:	9307      	strge	r3, [sp, #28]
 80219d2:	9307      	strlt	r3, [sp, #28]
 80219d4:	bfb8      	it	lt
 80219d6:	9204      	strlt	r2, [sp, #16]
 80219d8:	7823      	ldrb	r3, [r4, #0]
 80219da:	2b2e      	cmp	r3, #46	; 0x2e
 80219dc:	d10c      	bne.n	80219f8 <_svfiprintf_r+0x130>
 80219de:	7863      	ldrb	r3, [r4, #1]
 80219e0:	2b2a      	cmp	r3, #42	; 0x2a
 80219e2:	d135      	bne.n	8021a50 <_svfiprintf_r+0x188>
 80219e4:	9b03      	ldr	r3, [sp, #12]
 80219e6:	1d1a      	adds	r2, r3, #4
 80219e8:	681b      	ldr	r3, [r3, #0]
 80219ea:	9203      	str	r2, [sp, #12]
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	bfb8      	it	lt
 80219f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80219f4:	3402      	adds	r4, #2
 80219f6:	9305      	str	r3, [sp, #20]
 80219f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021ac4 <_svfiprintf_r+0x1fc>
 80219fc:	7821      	ldrb	r1, [r4, #0]
 80219fe:	2203      	movs	r2, #3
 8021a00:	4650      	mov	r0, sl
 8021a02:	f7de fc15 	bl	8000230 <memchr>
 8021a06:	b140      	cbz	r0, 8021a1a <_svfiprintf_r+0x152>
 8021a08:	2340      	movs	r3, #64	; 0x40
 8021a0a:	eba0 000a 	sub.w	r0, r0, sl
 8021a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8021a12:	9b04      	ldr	r3, [sp, #16]
 8021a14:	4303      	orrs	r3, r0
 8021a16:	3401      	adds	r4, #1
 8021a18:	9304      	str	r3, [sp, #16]
 8021a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021a1e:	4826      	ldr	r0, [pc, #152]	; (8021ab8 <_svfiprintf_r+0x1f0>)
 8021a20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021a24:	2206      	movs	r2, #6
 8021a26:	f7de fc03 	bl	8000230 <memchr>
 8021a2a:	2800      	cmp	r0, #0
 8021a2c:	d038      	beq.n	8021aa0 <_svfiprintf_r+0x1d8>
 8021a2e:	4b23      	ldr	r3, [pc, #140]	; (8021abc <_svfiprintf_r+0x1f4>)
 8021a30:	bb1b      	cbnz	r3, 8021a7a <_svfiprintf_r+0x1b2>
 8021a32:	9b03      	ldr	r3, [sp, #12]
 8021a34:	3307      	adds	r3, #7
 8021a36:	f023 0307 	bic.w	r3, r3, #7
 8021a3a:	3308      	adds	r3, #8
 8021a3c:	9303      	str	r3, [sp, #12]
 8021a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a40:	4433      	add	r3, r6
 8021a42:	9309      	str	r3, [sp, #36]	; 0x24
 8021a44:	e767      	b.n	8021916 <_svfiprintf_r+0x4e>
 8021a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8021a4a:	460c      	mov	r4, r1
 8021a4c:	2001      	movs	r0, #1
 8021a4e:	e7a5      	b.n	802199c <_svfiprintf_r+0xd4>
 8021a50:	2300      	movs	r3, #0
 8021a52:	3401      	adds	r4, #1
 8021a54:	9305      	str	r3, [sp, #20]
 8021a56:	4619      	mov	r1, r3
 8021a58:	f04f 0c0a 	mov.w	ip, #10
 8021a5c:	4620      	mov	r0, r4
 8021a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021a62:	3a30      	subs	r2, #48	; 0x30
 8021a64:	2a09      	cmp	r2, #9
 8021a66:	d903      	bls.n	8021a70 <_svfiprintf_r+0x1a8>
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d0c5      	beq.n	80219f8 <_svfiprintf_r+0x130>
 8021a6c:	9105      	str	r1, [sp, #20]
 8021a6e:	e7c3      	b.n	80219f8 <_svfiprintf_r+0x130>
 8021a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8021a74:	4604      	mov	r4, r0
 8021a76:	2301      	movs	r3, #1
 8021a78:	e7f0      	b.n	8021a5c <_svfiprintf_r+0x194>
 8021a7a:	ab03      	add	r3, sp, #12
 8021a7c:	9300      	str	r3, [sp, #0]
 8021a7e:	462a      	mov	r2, r5
 8021a80:	4b0f      	ldr	r3, [pc, #60]	; (8021ac0 <_svfiprintf_r+0x1f8>)
 8021a82:	a904      	add	r1, sp, #16
 8021a84:	4638      	mov	r0, r7
 8021a86:	f7fc fb67 	bl	801e158 <_printf_float>
 8021a8a:	1c42      	adds	r2, r0, #1
 8021a8c:	4606      	mov	r6, r0
 8021a8e:	d1d6      	bne.n	8021a3e <_svfiprintf_r+0x176>
 8021a90:	89ab      	ldrh	r3, [r5, #12]
 8021a92:	065b      	lsls	r3, r3, #25
 8021a94:	f53f af2c 	bmi.w	80218f0 <_svfiprintf_r+0x28>
 8021a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021a9a:	b01d      	add	sp, #116	; 0x74
 8021a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021aa0:	ab03      	add	r3, sp, #12
 8021aa2:	9300      	str	r3, [sp, #0]
 8021aa4:	462a      	mov	r2, r5
 8021aa6:	4b06      	ldr	r3, [pc, #24]	; (8021ac0 <_svfiprintf_r+0x1f8>)
 8021aa8:	a904      	add	r1, sp, #16
 8021aaa:	4638      	mov	r0, r7
 8021aac:	f7fc fdf8 	bl	801e6a0 <_printf_i>
 8021ab0:	e7eb      	b.n	8021a8a <_svfiprintf_r+0x1c2>
 8021ab2:	bf00      	nop
 8021ab4:	08022fb4 	.word	0x08022fb4
 8021ab8:	08022fbe 	.word	0x08022fbe
 8021abc:	0801e159 	.word	0x0801e159
 8021ac0:	08021813 	.word	0x08021813
 8021ac4:	08022fba 	.word	0x08022fba

08021ac8 <_read_r>:
 8021ac8:	b538      	push	{r3, r4, r5, lr}
 8021aca:	4d07      	ldr	r5, [pc, #28]	; (8021ae8 <_read_r+0x20>)
 8021acc:	4604      	mov	r4, r0
 8021ace:	4608      	mov	r0, r1
 8021ad0:	4611      	mov	r1, r2
 8021ad2:	2200      	movs	r2, #0
 8021ad4:	602a      	str	r2, [r5, #0]
 8021ad6:	461a      	mov	r2, r3
 8021ad8:	f7fb ff26 	bl	801d928 <_read>
 8021adc:	1c43      	adds	r3, r0, #1
 8021ade:	d102      	bne.n	8021ae6 <_read_r+0x1e>
 8021ae0:	682b      	ldr	r3, [r5, #0]
 8021ae2:	b103      	cbz	r3, 8021ae6 <_read_r+0x1e>
 8021ae4:	6023      	str	r3, [r4, #0]
 8021ae6:	bd38      	pop	{r3, r4, r5, pc}
 8021ae8:	20019244 	.word	0x20019244
 8021aec:	00000000 	.word	0x00000000

08021af0 <nan>:
 8021af0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021af8 <nan+0x8>
 8021af4:	4770      	bx	lr
 8021af6:	bf00      	nop
 8021af8:	00000000 	.word	0x00000000
 8021afc:	7ff80000 	.word	0x7ff80000

08021b00 <__ascii_wctomb>:
 8021b00:	b149      	cbz	r1, 8021b16 <__ascii_wctomb+0x16>
 8021b02:	2aff      	cmp	r2, #255	; 0xff
 8021b04:	bf85      	ittet	hi
 8021b06:	238a      	movhi	r3, #138	; 0x8a
 8021b08:	6003      	strhi	r3, [r0, #0]
 8021b0a:	700a      	strbls	r2, [r1, #0]
 8021b0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021b10:	bf98      	it	ls
 8021b12:	2001      	movls	r0, #1
 8021b14:	4770      	bx	lr
 8021b16:	4608      	mov	r0, r1
 8021b18:	4770      	bx	lr
	...

08021b1c <__assert_func>:
 8021b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021b1e:	4614      	mov	r4, r2
 8021b20:	461a      	mov	r2, r3
 8021b22:	4b09      	ldr	r3, [pc, #36]	; (8021b48 <__assert_func+0x2c>)
 8021b24:	681b      	ldr	r3, [r3, #0]
 8021b26:	4605      	mov	r5, r0
 8021b28:	68d8      	ldr	r0, [r3, #12]
 8021b2a:	b14c      	cbz	r4, 8021b40 <__assert_func+0x24>
 8021b2c:	4b07      	ldr	r3, [pc, #28]	; (8021b4c <__assert_func+0x30>)
 8021b2e:	9100      	str	r1, [sp, #0]
 8021b30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021b34:	4906      	ldr	r1, [pc, #24]	; (8021b50 <__assert_func+0x34>)
 8021b36:	462b      	mov	r3, r5
 8021b38:	f000 f80e 	bl	8021b58 <fiprintf>
 8021b3c:	f000 f99e 	bl	8021e7c <abort>
 8021b40:	4b04      	ldr	r3, [pc, #16]	; (8021b54 <__assert_func+0x38>)
 8021b42:	461c      	mov	r4, r3
 8021b44:	e7f3      	b.n	8021b2e <__assert_func+0x12>
 8021b46:	bf00      	nop
 8021b48:	2000008c 	.word	0x2000008c
 8021b4c:	08022fc5 	.word	0x08022fc5
 8021b50:	08022fd2 	.word	0x08022fd2
 8021b54:	08023000 	.word	0x08023000

08021b58 <fiprintf>:
 8021b58:	b40e      	push	{r1, r2, r3}
 8021b5a:	b503      	push	{r0, r1, lr}
 8021b5c:	4601      	mov	r1, r0
 8021b5e:	ab03      	add	r3, sp, #12
 8021b60:	4805      	ldr	r0, [pc, #20]	; (8021b78 <fiprintf+0x20>)
 8021b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8021b66:	6800      	ldr	r0, [r0, #0]
 8021b68:	9301      	str	r3, [sp, #4]
 8021b6a:	f000 f857 	bl	8021c1c <_vfiprintf_r>
 8021b6e:	b002      	add	sp, #8
 8021b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8021b74:	b003      	add	sp, #12
 8021b76:	4770      	bx	lr
 8021b78:	2000008c 	.word	0x2000008c

08021b7c <_realloc_r>:
 8021b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b7e:	4607      	mov	r7, r0
 8021b80:	4614      	mov	r4, r2
 8021b82:	460e      	mov	r6, r1
 8021b84:	b921      	cbnz	r1, 8021b90 <_realloc_r+0x14>
 8021b86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021b8a:	4611      	mov	r1, r2
 8021b8c:	f7fc b9ea 	b.w	801df64 <_malloc_r>
 8021b90:	b922      	cbnz	r2, 8021b9c <_realloc_r+0x20>
 8021b92:	f7fc f997 	bl	801dec4 <_free_r>
 8021b96:	4625      	mov	r5, r4
 8021b98:	4628      	mov	r0, r5
 8021b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021b9c:	f000 f975 	bl	8021e8a <_malloc_usable_size_r>
 8021ba0:	42a0      	cmp	r0, r4
 8021ba2:	d20f      	bcs.n	8021bc4 <_realloc_r+0x48>
 8021ba4:	4621      	mov	r1, r4
 8021ba6:	4638      	mov	r0, r7
 8021ba8:	f7fc f9dc 	bl	801df64 <_malloc_r>
 8021bac:	4605      	mov	r5, r0
 8021bae:	2800      	cmp	r0, #0
 8021bb0:	d0f2      	beq.n	8021b98 <_realloc_r+0x1c>
 8021bb2:	4631      	mov	r1, r6
 8021bb4:	4622      	mov	r2, r4
 8021bb6:	f7fc f945 	bl	801de44 <memcpy>
 8021bba:	4631      	mov	r1, r6
 8021bbc:	4638      	mov	r0, r7
 8021bbe:	f7fc f981 	bl	801dec4 <_free_r>
 8021bc2:	e7e9      	b.n	8021b98 <_realloc_r+0x1c>
 8021bc4:	4635      	mov	r5, r6
 8021bc6:	e7e7      	b.n	8021b98 <_realloc_r+0x1c>

08021bc8 <__sfputc_r>:
 8021bc8:	6893      	ldr	r3, [r2, #8]
 8021bca:	3b01      	subs	r3, #1
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	b410      	push	{r4}
 8021bd0:	6093      	str	r3, [r2, #8]
 8021bd2:	da08      	bge.n	8021be6 <__sfputc_r+0x1e>
 8021bd4:	6994      	ldr	r4, [r2, #24]
 8021bd6:	42a3      	cmp	r3, r4
 8021bd8:	db01      	blt.n	8021bde <__sfputc_r+0x16>
 8021bda:	290a      	cmp	r1, #10
 8021bdc:	d103      	bne.n	8021be6 <__sfputc_r+0x1e>
 8021bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021be2:	f7fd be3b 	b.w	801f85c <__swbuf_r>
 8021be6:	6813      	ldr	r3, [r2, #0]
 8021be8:	1c58      	adds	r0, r3, #1
 8021bea:	6010      	str	r0, [r2, #0]
 8021bec:	7019      	strb	r1, [r3, #0]
 8021bee:	4608      	mov	r0, r1
 8021bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021bf4:	4770      	bx	lr

08021bf6 <__sfputs_r>:
 8021bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bf8:	4606      	mov	r6, r0
 8021bfa:	460f      	mov	r7, r1
 8021bfc:	4614      	mov	r4, r2
 8021bfe:	18d5      	adds	r5, r2, r3
 8021c00:	42ac      	cmp	r4, r5
 8021c02:	d101      	bne.n	8021c08 <__sfputs_r+0x12>
 8021c04:	2000      	movs	r0, #0
 8021c06:	e007      	b.n	8021c18 <__sfputs_r+0x22>
 8021c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c0c:	463a      	mov	r2, r7
 8021c0e:	4630      	mov	r0, r6
 8021c10:	f7ff ffda 	bl	8021bc8 <__sfputc_r>
 8021c14:	1c43      	adds	r3, r0, #1
 8021c16:	d1f3      	bne.n	8021c00 <__sfputs_r+0xa>
 8021c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021c1c <_vfiprintf_r>:
 8021c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c20:	460d      	mov	r5, r1
 8021c22:	b09d      	sub	sp, #116	; 0x74
 8021c24:	4614      	mov	r4, r2
 8021c26:	4698      	mov	r8, r3
 8021c28:	4606      	mov	r6, r0
 8021c2a:	b118      	cbz	r0, 8021c34 <_vfiprintf_r+0x18>
 8021c2c:	6983      	ldr	r3, [r0, #24]
 8021c2e:	b90b      	cbnz	r3, 8021c34 <_vfiprintf_r+0x18>
 8021c30:	f7fb ffb4 	bl	801db9c <__sinit>
 8021c34:	4b89      	ldr	r3, [pc, #548]	; (8021e5c <_vfiprintf_r+0x240>)
 8021c36:	429d      	cmp	r5, r3
 8021c38:	d11b      	bne.n	8021c72 <_vfiprintf_r+0x56>
 8021c3a:	6875      	ldr	r5, [r6, #4]
 8021c3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021c3e:	07d9      	lsls	r1, r3, #31
 8021c40:	d405      	bmi.n	8021c4e <_vfiprintf_r+0x32>
 8021c42:	89ab      	ldrh	r3, [r5, #12]
 8021c44:	059a      	lsls	r2, r3, #22
 8021c46:	d402      	bmi.n	8021c4e <_vfiprintf_r+0x32>
 8021c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021c4a:	f7fc f884 	bl	801dd56 <__retarget_lock_acquire_recursive>
 8021c4e:	89ab      	ldrh	r3, [r5, #12]
 8021c50:	071b      	lsls	r3, r3, #28
 8021c52:	d501      	bpl.n	8021c58 <_vfiprintf_r+0x3c>
 8021c54:	692b      	ldr	r3, [r5, #16]
 8021c56:	b9eb      	cbnz	r3, 8021c94 <_vfiprintf_r+0x78>
 8021c58:	4629      	mov	r1, r5
 8021c5a:	4630      	mov	r0, r6
 8021c5c:	f7fd fe62 	bl	801f924 <__swsetup_r>
 8021c60:	b1c0      	cbz	r0, 8021c94 <_vfiprintf_r+0x78>
 8021c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021c64:	07dc      	lsls	r4, r3, #31
 8021c66:	d50e      	bpl.n	8021c86 <_vfiprintf_r+0x6a>
 8021c68:	f04f 30ff 	mov.w	r0, #4294967295
 8021c6c:	b01d      	add	sp, #116	; 0x74
 8021c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c72:	4b7b      	ldr	r3, [pc, #492]	; (8021e60 <_vfiprintf_r+0x244>)
 8021c74:	429d      	cmp	r5, r3
 8021c76:	d101      	bne.n	8021c7c <_vfiprintf_r+0x60>
 8021c78:	68b5      	ldr	r5, [r6, #8]
 8021c7a:	e7df      	b.n	8021c3c <_vfiprintf_r+0x20>
 8021c7c:	4b79      	ldr	r3, [pc, #484]	; (8021e64 <_vfiprintf_r+0x248>)
 8021c7e:	429d      	cmp	r5, r3
 8021c80:	bf08      	it	eq
 8021c82:	68f5      	ldreq	r5, [r6, #12]
 8021c84:	e7da      	b.n	8021c3c <_vfiprintf_r+0x20>
 8021c86:	89ab      	ldrh	r3, [r5, #12]
 8021c88:	0598      	lsls	r0, r3, #22
 8021c8a:	d4ed      	bmi.n	8021c68 <_vfiprintf_r+0x4c>
 8021c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021c8e:	f7fc f863 	bl	801dd58 <__retarget_lock_release_recursive>
 8021c92:	e7e9      	b.n	8021c68 <_vfiprintf_r+0x4c>
 8021c94:	2300      	movs	r3, #0
 8021c96:	9309      	str	r3, [sp, #36]	; 0x24
 8021c98:	2320      	movs	r3, #32
 8021c9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8021ca2:	2330      	movs	r3, #48	; 0x30
 8021ca4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021e68 <_vfiprintf_r+0x24c>
 8021ca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021cac:	f04f 0901 	mov.w	r9, #1
 8021cb0:	4623      	mov	r3, r4
 8021cb2:	469a      	mov	sl, r3
 8021cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021cb8:	b10a      	cbz	r2, 8021cbe <_vfiprintf_r+0xa2>
 8021cba:	2a25      	cmp	r2, #37	; 0x25
 8021cbc:	d1f9      	bne.n	8021cb2 <_vfiprintf_r+0x96>
 8021cbe:	ebba 0b04 	subs.w	fp, sl, r4
 8021cc2:	d00b      	beq.n	8021cdc <_vfiprintf_r+0xc0>
 8021cc4:	465b      	mov	r3, fp
 8021cc6:	4622      	mov	r2, r4
 8021cc8:	4629      	mov	r1, r5
 8021cca:	4630      	mov	r0, r6
 8021ccc:	f7ff ff93 	bl	8021bf6 <__sfputs_r>
 8021cd0:	3001      	adds	r0, #1
 8021cd2:	f000 80aa 	beq.w	8021e2a <_vfiprintf_r+0x20e>
 8021cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021cd8:	445a      	add	r2, fp
 8021cda:	9209      	str	r2, [sp, #36]	; 0x24
 8021cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8021ce0:	2b00      	cmp	r3, #0
 8021ce2:	f000 80a2 	beq.w	8021e2a <_vfiprintf_r+0x20e>
 8021ce6:	2300      	movs	r3, #0
 8021ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8021cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021cf0:	f10a 0a01 	add.w	sl, sl, #1
 8021cf4:	9304      	str	r3, [sp, #16]
 8021cf6:	9307      	str	r3, [sp, #28]
 8021cf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021cfc:	931a      	str	r3, [sp, #104]	; 0x68
 8021cfe:	4654      	mov	r4, sl
 8021d00:	2205      	movs	r2, #5
 8021d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d06:	4858      	ldr	r0, [pc, #352]	; (8021e68 <_vfiprintf_r+0x24c>)
 8021d08:	f7de fa92 	bl	8000230 <memchr>
 8021d0c:	9a04      	ldr	r2, [sp, #16]
 8021d0e:	b9d8      	cbnz	r0, 8021d48 <_vfiprintf_r+0x12c>
 8021d10:	06d1      	lsls	r1, r2, #27
 8021d12:	bf44      	itt	mi
 8021d14:	2320      	movmi	r3, #32
 8021d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021d1a:	0713      	lsls	r3, r2, #28
 8021d1c:	bf44      	itt	mi
 8021d1e:	232b      	movmi	r3, #43	; 0x2b
 8021d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021d24:	f89a 3000 	ldrb.w	r3, [sl]
 8021d28:	2b2a      	cmp	r3, #42	; 0x2a
 8021d2a:	d015      	beq.n	8021d58 <_vfiprintf_r+0x13c>
 8021d2c:	9a07      	ldr	r2, [sp, #28]
 8021d2e:	4654      	mov	r4, sl
 8021d30:	2000      	movs	r0, #0
 8021d32:	f04f 0c0a 	mov.w	ip, #10
 8021d36:	4621      	mov	r1, r4
 8021d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021d3c:	3b30      	subs	r3, #48	; 0x30
 8021d3e:	2b09      	cmp	r3, #9
 8021d40:	d94e      	bls.n	8021de0 <_vfiprintf_r+0x1c4>
 8021d42:	b1b0      	cbz	r0, 8021d72 <_vfiprintf_r+0x156>
 8021d44:	9207      	str	r2, [sp, #28]
 8021d46:	e014      	b.n	8021d72 <_vfiprintf_r+0x156>
 8021d48:	eba0 0308 	sub.w	r3, r0, r8
 8021d4c:	fa09 f303 	lsl.w	r3, r9, r3
 8021d50:	4313      	orrs	r3, r2
 8021d52:	9304      	str	r3, [sp, #16]
 8021d54:	46a2      	mov	sl, r4
 8021d56:	e7d2      	b.n	8021cfe <_vfiprintf_r+0xe2>
 8021d58:	9b03      	ldr	r3, [sp, #12]
 8021d5a:	1d19      	adds	r1, r3, #4
 8021d5c:	681b      	ldr	r3, [r3, #0]
 8021d5e:	9103      	str	r1, [sp, #12]
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	bfbb      	ittet	lt
 8021d64:	425b      	neglt	r3, r3
 8021d66:	f042 0202 	orrlt.w	r2, r2, #2
 8021d6a:	9307      	strge	r3, [sp, #28]
 8021d6c:	9307      	strlt	r3, [sp, #28]
 8021d6e:	bfb8      	it	lt
 8021d70:	9204      	strlt	r2, [sp, #16]
 8021d72:	7823      	ldrb	r3, [r4, #0]
 8021d74:	2b2e      	cmp	r3, #46	; 0x2e
 8021d76:	d10c      	bne.n	8021d92 <_vfiprintf_r+0x176>
 8021d78:	7863      	ldrb	r3, [r4, #1]
 8021d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8021d7c:	d135      	bne.n	8021dea <_vfiprintf_r+0x1ce>
 8021d7e:	9b03      	ldr	r3, [sp, #12]
 8021d80:	1d1a      	adds	r2, r3, #4
 8021d82:	681b      	ldr	r3, [r3, #0]
 8021d84:	9203      	str	r2, [sp, #12]
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	bfb8      	it	lt
 8021d8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8021d8e:	3402      	adds	r4, #2
 8021d90:	9305      	str	r3, [sp, #20]
 8021d92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021e78 <_vfiprintf_r+0x25c>
 8021d96:	7821      	ldrb	r1, [r4, #0]
 8021d98:	2203      	movs	r2, #3
 8021d9a:	4650      	mov	r0, sl
 8021d9c:	f7de fa48 	bl	8000230 <memchr>
 8021da0:	b140      	cbz	r0, 8021db4 <_vfiprintf_r+0x198>
 8021da2:	2340      	movs	r3, #64	; 0x40
 8021da4:	eba0 000a 	sub.w	r0, r0, sl
 8021da8:	fa03 f000 	lsl.w	r0, r3, r0
 8021dac:	9b04      	ldr	r3, [sp, #16]
 8021dae:	4303      	orrs	r3, r0
 8021db0:	3401      	adds	r4, #1
 8021db2:	9304      	str	r3, [sp, #16]
 8021db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021db8:	482c      	ldr	r0, [pc, #176]	; (8021e6c <_vfiprintf_r+0x250>)
 8021dba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021dbe:	2206      	movs	r2, #6
 8021dc0:	f7de fa36 	bl	8000230 <memchr>
 8021dc4:	2800      	cmp	r0, #0
 8021dc6:	d03f      	beq.n	8021e48 <_vfiprintf_r+0x22c>
 8021dc8:	4b29      	ldr	r3, [pc, #164]	; (8021e70 <_vfiprintf_r+0x254>)
 8021dca:	bb1b      	cbnz	r3, 8021e14 <_vfiprintf_r+0x1f8>
 8021dcc:	9b03      	ldr	r3, [sp, #12]
 8021dce:	3307      	adds	r3, #7
 8021dd0:	f023 0307 	bic.w	r3, r3, #7
 8021dd4:	3308      	adds	r3, #8
 8021dd6:	9303      	str	r3, [sp, #12]
 8021dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021dda:	443b      	add	r3, r7
 8021ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8021dde:	e767      	b.n	8021cb0 <_vfiprintf_r+0x94>
 8021de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8021de4:	460c      	mov	r4, r1
 8021de6:	2001      	movs	r0, #1
 8021de8:	e7a5      	b.n	8021d36 <_vfiprintf_r+0x11a>
 8021dea:	2300      	movs	r3, #0
 8021dec:	3401      	adds	r4, #1
 8021dee:	9305      	str	r3, [sp, #20]
 8021df0:	4619      	mov	r1, r3
 8021df2:	f04f 0c0a 	mov.w	ip, #10
 8021df6:	4620      	mov	r0, r4
 8021df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021dfc:	3a30      	subs	r2, #48	; 0x30
 8021dfe:	2a09      	cmp	r2, #9
 8021e00:	d903      	bls.n	8021e0a <_vfiprintf_r+0x1ee>
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	d0c5      	beq.n	8021d92 <_vfiprintf_r+0x176>
 8021e06:	9105      	str	r1, [sp, #20]
 8021e08:	e7c3      	b.n	8021d92 <_vfiprintf_r+0x176>
 8021e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8021e0e:	4604      	mov	r4, r0
 8021e10:	2301      	movs	r3, #1
 8021e12:	e7f0      	b.n	8021df6 <_vfiprintf_r+0x1da>
 8021e14:	ab03      	add	r3, sp, #12
 8021e16:	9300      	str	r3, [sp, #0]
 8021e18:	462a      	mov	r2, r5
 8021e1a:	4b16      	ldr	r3, [pc, #88]	; (8021e74 <_vfiprintf_r+0x258>)
 8021e1c:	a904      	add	r1, sp, #16
 8021e1e:	4630      	mov	r0, r6
 8021e20:	f7fc f99a 	bl	801e158 <_printf_float>
 8021e24:	4607      	mov	r7, r0
 8021e26:	1c78      	adds	r0, r7, #1
 8021e28:	d1d6      	bne.n	8021dd8 <_vfiprintf_r+0x1bc>
 8021e2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021e2c:	07d9      	lsls	r1, r3, #31
 8021e2e:	d405      	bmi.n	8021e3c <_vfiprintf_r+0x220>
 8021e30:	89ab      	ldrh	r3, [r5, #12]
 8021e32:	059a      	lsls	r2, r3, #22
 8021e34:	d402      	bmi.n	8021e3c <_vfiprintf_r+0x220>
 8021e36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021e38:	f7fb ff8e 	bl	801dd58 <__retarget_lock_release_recursive>
 8021e3c:	89ab      	ldrh	r3, [r5, #12]
 8021e3e:	065b      	lsls	r3, r3, #25
 8021e40:	f53f af12 	bmi.w	8021c68 <_vfiprintf_r+0x4c>
 8021e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021e46:	e711      	b.n	8021c6c <_vfiprintf_r+0x50>
 8021e48:	ab03      	add	r3, sp, #12
 8021e4a:	9300      	str	r3, [sp, #0]
 8021e4c:	462a      	mov	r2, r5
 8021e4e:	4b09      	ldr	r3, [pc, #36]	; (8021e74 <_vfiprintf_r+0x258>)
 8021e50:	a904      	add	r1, sp, #16
 8021e52:	4630      	mov	r0, r6
 8021e54:	f7fc fc24 	bl	801e6a0 <_printf_i>
 8021e58:	e7e4      	b.n	8021e24 <_vfiprintf_r+0x208>
 8021e5a:	bf00      	nop
 8021e5c:	08022c58 	.word	0x08022c58
 8021e60:	08022c78 	.word	0x08022c78
 8021e64:	08022c38 	.word	0x08022c38
 8021e68:	08022fb4 	.word	0x08022fb4
 8021e6c:	08022fbe 	.word	0x08022fbe
 8021e70:	0801e159 	.word	0x0801e159
 8021e74:	08021bf7 	.word	0x08021bf7
 8021e78:	08022fba 	.word	0x08022fba

08021e7c <abort>:
 8021e7c:	b508      	push	{r3, lr}
 8021e7e:	2006      	movs	r0, #6
 8021e80:	f000 f834 	bl	8021eec <raise>
 8021e84:	2001      	movs	r0, #1
 8021e86:	f7fb fcf5 	bl	801d874 <_exit>

08021e8a <_malloc_usable_size_r>:
 8021e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021e8e:	1f18      	subs	r0, r3, #4
 8021e90:	2b00      	cmp	r3, #0
 8021e92:	bfbc      	itt	lt
 8021e94:	580b      	ldrlt	r3, [r1, r0]
 8021e96:	18c0      	addlt	r0, r0, r3
 8021e98:	4770      	bx	lr

08021e9a <_raise_r>:
 8021e9a:	291f      	cmp	r1, #31
 8021e9c:	b538      	push	{r3, r4, r5, lr}
 8021e9e:	4604      	mov	r4, r0
 8021ea0:	460d      	mov	r5, r1
 8021ea2:	d904      	bls.n	8021eae <_raise_r+0x14>
 8021ea4:	2316      	movs	r3, #22
 8021ea6:	6003      	str	r3, [r0, #0]
 8021ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8021eac:	bd38      	pop	{r3, r4, r5, pc}
 8021eae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021eb0:	b112      	cbz	r2, 8021eb8 <_raise_r+0x1e>
 8021eb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021eb6:	b94b      	cbnz	r3, 8021ecc <_raise_r+0x32>
 8021eb8:	4620      	mov	r0, r4
 8021eba:	f000 f831 	bl	8021f20 <_getpid_r>
 8021ebe:	462a      	mov	r2, r5
 8021ec0:	4601      	mov	r1, r0
 8021ec2:	4620      	mov	r0, r4
 8021ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021ec8:	f000 b818 	b.w	8021efc <_kill_r>
 8021ecc:	2b01      	cmp	r3, #1
 8021ece:	d00a      	beq.n	8021ee6 <_raise_r+0x4c>
 8021ed0:	1c59      	adds	r1, r3, #1
 8021ed2:	d103      	bne.n	8021edc <_raise_r+0x42>
 8021ed4:	2316      	movs	r3, #22
 8021ed6:	6003      	str	r3, [r0, #0]
 8021ed8:	2001      	movs	r0, #1
 8021eda:	e7e7      	b.n	8021eac <_raise_r+0x12>
 8021edc:	2400      	movs	r4, #0
 8021ede:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021ee2:	4628      	mov	r0, r5
 8021ee4:	4798      	blx	r3
 8021ee6:	2000      	movs	r0, #0
 8021ee8:	e7e0      	b.n	8021eac <_raise_r+0x12>
	...

08021eec <raise>:
 8021eec:	4b02      	ldr	r3, [pc, #8]	; (8021ef8 <raise+0xc>)
 8021eee:	4601      	mov	r1, r0
 8021ef0:	6818      	ldr	r0, [r3, #0]
 8021ef2:	f7ff bfd2 	b.w	8021e9a <_raise_r>
 8021ef6:	bf00      	nop
 8021ef8:	2000008c 	.word	0x2000008c

08021efc <_kill_r>:
 8021efc:	b538      	push	{r3, r4, r5, lr}
 8021efe:	4d07      	ldr	r5, [pc, #28]	; (8021f1c <_kill_r+0x20>)
 8021f00:	2300      	movs	r3, #0
 8021f02:	4604      	mov	r4, r0
 8021f04:	4608      	mov	r0, r1
 8021f06:	4611      	mov	r1, r2
 8021f08:	602b      	str	r3, [r5, #0]
 8021f0a:	f7fb fca3 	bl	801d854 <_kill>
 8021f0e:	1c43      	adds	r3, r0, #1
 8021f10:	d102      	bne.n	8021f18 <_kill_r+0x1c>
 8021f12:	682b      	ldr	r3, [r5, #0]
 8021f14:	b103      	cbz	r3, 8021f18 <_kill_r+0x1c>
 8021f16:	6023      	str	r3, [r4, #0]
 8021f18:	bd38      	pop	{r3, r4, r5, pc}
 8021f1a:	bf00      	nop
 8021f1c:	20019244 	.word	0x20019244

08021f20 <_getpid_r>:
 8021f20:	f7fb bc90 	b.w	801d844 <_getpid>

08021f24 <_init>:
 8021f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f26:	bf00      	nop
 8021f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021f2a:	bc08      	pop	{r3}
 8021f2c:	469e      	mov	lr, r3
 8021f2e:	4770      	bx	lr

08021f30 <_fini>:
 8021f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f32:	bf00      	nop
 8021f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021f36:	bc08      	pop	{r3}
 8021f38:	469e      	mov	lr, r3
 8021f3a:	4770      	bx	lr
